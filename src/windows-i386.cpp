// Auto generated by JuleC.
// JuleC version: jule0.0.12 @master
// Date: 29/4/2024 (DD/MM/YYYY) UTC
//
// Recomended Compile Command;
// clang++ -Wno-everything --std=c++17 -O3 -flto -DNDEBUG -fomit-frame-pointer dist/ir.cpp

#define __JULE_ENABLE__PRODUCTION


#include "api/jule.hpp"                                   

#include "std/jule/integrated/integrated.hpp"                                   
#include <dirent.h>
#include <cstdio>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <time.h>

struct _2455455b9_Importer{};
struct _2455e0ae8_Kind{};
struct _24560bac0_Lookup{};
struct _227d88886_CommonFlag{};
struct _241d85c76_accept_range;
struct _242d5daa5_Range16;
struct _242d5e028_Range32;
struct _242d5e49b_RangeTable;
struct _241e6e722_LazyBuff;
struct _2410caa8d_DirEntry;
struct _2410cc7c6_Directory;
struct _241cb4b2d_File;
struct _241cb4ee6_Status;
struct _242e092c1_Cmd;
struct _242dbab89_Log;
struct _2431e4523_Token;
struct _2431e98ad_File;
struct _2431eb915_KindPair;
struct _243202542_Lex;
struct _244823942_Ast;
struct _2448245e1_Node;
struct _2448249dc_Directive;
struct _2448581d5_TypeDecl;
struct _24485879b_IdentTypeDecl;
struct _244858dea_SubIdentTypeDecl;
struct _2448592a2_NamespaceTypeDecl;
struct _24485958d_SptrTypeDecl;
struct _244859989_SlcTypeDecl;
struct _244859c75_TupleTypeDecl;
struct _24485a061_PtrTypeDecl;
struct _24485a6e3_ArrTypeDecl;
struct _24485ae41_MapTypeDecl;
struct _24485b2e8_RetTypeDecl;
struct _24485c706_Expr;
struct _24485c9e2_RangeExpr;
struct _24485d097_UseExpr;
struct _24485d383_TupleExpr;
struct _24485d73a_LitExpr;
struct _24485de44_UnsafeExpr;
struct _24485e2eb_CoExpr;
struct _24485e76e_IdentExpr;
struct _24485ee78_UnaryExpr;
struct _244860330_VariadicExpr;
struct _2448606d7_CastExpr;
struct _244860a8e_NsSelectionExpr;
struct _244861012_SubIdentExpr;
struct _244861485_BinopExpr;
struct _2448619c4_FnCallExpr;
struct _244862453_FieldExprPair;
struct _244862ba1_StructLit;
struct _244863124_BraceLit;
struct _244863b3b_KeyValPair;
struct _2448640ae_SliceExpr;
struct _244864950_IndexingExpr;
struct _24486505a_SlicingExpr;
struct _244865346_Constraint;
struct _2448657b9_GenericDecl;
struct _244865b71_LabelSt;
struct _244866028_GotoSt;
struct _244866314_FallSt;
struct _24486691e_AssignLeft;
struct _244866e5d_AssignSt;
struct _244867de8_Stmt;
struct _244868503_ScopeTree;
struct _244868bc9_ParamDecl;
struct _244869ee9_FnDecl;
struct _24486aec8_VarDecl;
struct _24486b380_RetSt;
struct _24486b9e0_Iter;
struct _24486c2b5_WhileKind;
struct _24486cb56_RangeKind;
struct _24486d00d_BreakSt;
struct _24486d3b5_ContSt;
struct _24486d838_If;
struct _24486dbe0_Else;
struct _24486e163_Conditional;
struct _24486e839_TypeAliasDecl;
struct _24486ecac_Case;
struct _244870483_MatchCase;
struct _244870c25_UseDecl;
struct _244871198_EnumItemDecl;
struct _244871bc1_EnumDecl;
struct _2448726c7_TypeEnumItemDecl;
struct _2448728c5_TypeEnumDecl;
struct _244872e25_FieldDecl;
struct _244873783_StructDecl;
struct _244873d8d_TraitDecl;
struct _244874498_Impl;
struct _2448ab524_Const;
struct _24546660b_FloatInfo;
struct _2454672bb_DecimalSlice;
struct _245478ad5_LeftCheat;
struct _2454795ec_Decimal;
struct _24483adcc_Field;
struct _24484a33c_Operators;
struct _244848912_Struct;
struct _244851079_FieldIns;
struct _24491e895_OperandExprModel;
struct _24491ea82_BinopExprModel;
struct _24491ec6e_UnaryExprModel;
struct _24491ee5b_StructArgExprModel;
struct _244920148_StructLitExprModel;
struct _244920335_AllocStructLitExprModel;
struct _244920522_CastingExprModel;
struct _24492070e_FnCallExprModel;
struct _2449208eb_SliceExprModel;
struct _244920ad8_IndexingExprModel;
struct _244920cc5_AnonFnExprModel;
struct _244920eb2_KeyValPairExprModel;
struct _24492119e_MapExprModel;
struct _24492138b_SlicingExprModel;
struct _244921578_TraitSubIdentExprModel;
struct _244921996_StructSubIdentExprModel;
struct _244921b83_StructStaticIdentExprModel;
struct _244921d70_ArrayExprModel;
struct _24492205c_CommonIdentExprModel;
struct _244922249_CommonSubIdentExprModel;
struct _244922436_TupleExprModel;
struct _244922623_BuiltinOutCallExprModel;
struct _244922810_BuiltinOutlnCallExprModel;
struct _2449229ec_BuiltinCloneCallExprModel;
struct _244922bd9_BuiltinNewCallExprModel;
struct _244922dc6_BuiltinPanicCallExprModel;
struct _2449230b3_BuiltinAssertCallExprModel;
struct _2449232a0_BuiltinMakeCallExprModel;
struct _24492348c_BuiltinAppendCallExprModel;
struct _244923679_BuiltinCopyCallExprModel;
struct _244923866_BuiltinErrorCallExprModel;
struct _244921765_SizeofExprModel;
struct _244923ec6_AlignofExprModel;
struct _2449241b3_RuneExprModel;
struct _2449243a0_IntegratedToStrExprModel;
struct _24492458c_BackendEmitExprModel;
struct _244924779_FreeExprModel;
struct _244924d0c_RetType;
struct _2449254c2_Param;
struct _244926d0e_Fn;
struct _244928ae1_ParamIns;
struct _2449299b0_FnIns;
struct _24492c8b4_ReferenceStack;
struct _24492dc7d_Pass;
struct _244933227_SymbolBuilder;
struct _24547ec51_Trait;
struct _245481417_EnumItem;
struct _245481e0c_Enum;
struct _245482e41_TypeEnumItem;
struct _245483507_TypeEnum;
struct _24549b652_ConstraintChecker;
struct _24551aa45_Impl;
struct _24552937d_Scope;
struct _245529779_If;
struct _245529a65_Else;
struct _245529e61_Conditional;
struct _24552a24c_InfIter;
struct _24552a6c0_WhileIter;
struct _24552b0a5_RangeIter;
struct _24552b4a1_ContSt;
struct _24552b858_BreakSt;
struct _24552bb44_Label;
struct _24552be30_GotoSt;
struct _24552c2d7_Postfix;
struct _24552c75a_Assign;
struct _24552cb12_MultiAssign;
struct _24552d151_Match;
struct _24552db9b_Case;
struct _24552e251_FallSt;
struct _24552e6c4_RetSt;
struct _24552ecce_ScopeLabel;
struct _245530252_ScopeGoto;
struct _245531066_ScopeChecker;
struct _2455421a9_DirectiveChecker;
struct _245547db3_ImportInfo;
struct _24554ad1c_Package;
struct _24555100e_Sema;
struct _24556a0e4_MissingRetChecker;
struct _24556bca5_IterRelation;
struct _24556cc1d_Var;
struct _24556d746_FuncPattern;
struct _24559ddd6_TypeCompatibilityChecker;
struct _2455a0a0e_AssignTypeChecker;
struct _2455a2428_DynamicTypeAnnotation;
struct _2455a6cbd_FnCallArgChecker;
struct _2455a96c7_StructLitChecker;
struct _2455ab2ab_RangeChecker;
struct _2455ad445_RetTypeChecker;
struct _2455b02e3_SymbolTable;
struct _2455b5051_Data;
struct _2455b60c9_Value;
struct _2455b6abe_Eval;
struct _2455d2b62_UnaryEval;
struct _2455d4900_BinaryEval;
struct _2455de7ea_InsGeneric;
struct _2455e0334_TypeAlias;
struct _2455e1027_TypeKind;
struct _2455e5180_TypeSymbol;
struct _2455e59ee_Prim;
struct _2455e9283_Sptr;
struct _2455e9be0_Slc;
struct _2455ea76d_Tuple;
struct _2455eb296_Map;
struct _2455ebd8a_Arr;
struct _2455ec7e7_Ptr;
struct _2455ed73d_Referencer;
struct _2455ee486_TypeChecker;
struct _245606b97_IdentTypeLookup;
struct _2279da6c5_FileInfo;
struct _227a3a406_stmt;
struct _227a3ac31_ScopeParser;
struct _227a480c3_ExprBuilder;
struct _227a53441_AssignInfo;
struct _227a569b6_Parser;
struct _227a67d90_TypeBuilder;
struct _24578ca31_CompileInfo;
struct _24578dd84_DirectiveEval;
struct _246491d50_JuleImporter;
struct _24572d54e_OrderedDefines;
struct _2279dcc7c_DefineOrderer;
struct _227b315a7_LiveTable;
struct _227b63177_ScopeDeadCode;
struct _227b67115_ExprDeadCode;
struct _2456a7176_UnsafeBinopExprModel;
struct _2456a7495_UnsafeIndexingExprModel;
struct _2456a785d_PushToSliceExprModel;
struct _2456a7e24_MutSlicingExprModel;
struct _2456a82ba_StrInsertBeginExprModel;
struct _2456a9442_ScopeOptimizer;
struct _2456aea74_ExprOptimizer;
struct _227b3b936_Optimizer;
struct _227b81849_AnsiEscape;
struct _227b82e33_Logger;
struct _228255c64_AbsTime;
struct _228256407_Time;
struct _2281cee96_ScopeCoder;
struct _2281d7a1a_ExprCoder;
struct _2281e5918_DeriveCoder;
struct _2281e6d48_TestCoder;
struct _2281e9499_IdentCoder;
struct _22825b72b_SerializationInfo;
struct _22825b918_TraitHash;
struct _228262677_CustomType;
struct _228262e6e_TypeCoder;
struct _22aa3da99_Flag;
struct _22aa4275c_Flag;
struct _22aa46244_Flag;
struct _22aa49c70_Flag;
struct _22aa4d757_Flag;
struct _22829d5c5_FlagSet;
struct _2276b0301_IR;
struct _244874c5c_StructIns;
struct _227b31871_ObjectDeadCode;
struct _22825bb05_ObjectCoder;
struct _2282a0c9d_ArgParser;
struct _241d85c76_accept_range {
	jule::U8 _field_lo = jule::U8();
	jule::U8 _field_hi = jule::U8();
	

	_241d85c76_accept_range(void) = default;

	inline bool operator==(_241d85c76_accept_range _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi;
	}

	inline bool operator!=(_241d85c76_accept_range _other) { return !this->operator==(_other); }


};
struct _242d5daa5_Range16 {
	jule::U16 _field_lo = jule::U16();
	jule::U16 _field_hi = jule::U16();
	jule::U16 _field_stride = jule::U16();
	

	_242d5daa5_Range16(void) = default;

	inline bool operator==(_242d5daa5_Range16 _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_stride == _other._field_stride;
	}

	inline bool operator!=(_242d5daa5_Range16 _other) { return !this->operator==(_other); }


};
struct _242d5e028_Range32 {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::U32 _field_stride = jule::U32();
	

	_242d5e028_Range32(void) = default;

	inline bool operator==(_242d5e028_Range32 _other) {
		return 
			this->_field_lo == _other._field_lo &&
			this->_field_hi == _other._field_hi &&
			this->_field_stride == _other._field_stride;
	}

	inline bool operator!=(_242d5e028_Range32 _other) { return !this->operator==(_other); }


};
struct _242d5e49b_RangeTable {
	jule::Slice<_242d5daa5_Range16> _field_r16 = jule::Slice<_242d5daa5_Range16>();
	jule::Slice<_242d5e028_Range32> _field_r32 = jule::Slice<_242d5e028_Range32>();
	jule::I32 _field_latin_offset = jule::I32();
	

	_242d5e49b_RangeTable(void) = default;

	inline bool operator==(_242d5e49b_RangeTable _other) {
		return 
			this->_field_r16 == _other._field_r16 &&
			this->_field_r32 == _other._field_r32 &&
			this->_field_latin_offset == _other._field_latin_offset;
	}

	inline bool operator!=(_242d5e49b_RangeTable _other) { return !this->operator==(_other); }


};
inline jule::U8 _241e6ebd9_index(_241e6e722_LazyBuff*, jule::I32);
inline void _241e75eed_append(_241e6e722_LazyBuff*, jule::U8);
inline jule::Str _241e78aa0_string(_241e6e722_LazyBuff*);
struct _241e6e722_LazyBuff {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();
	jule::I32 _field_w = jule::I32();
	jule::Str _field_vol_and_path = jule::Str();
	jule::I32 _field_vol_len = jule::I32();
	

	_241e6e722_LazyBuff(void) = default;

	inline bool operator==(_241e6e722_LazyBuff _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_buff == _other._field_buff &&
			this->_field_w == _other._field_w &&
			this->_field_vol_and_path == _other._field_vol_and_path &&
			this->_field_vol_len == _other._field_vol_len;
	}

	inline bool operator!=(_241e6e722_LazyBuff _other) { return !this->operator==(_other); }


};
struct _2410caa8d_DirEntry {
	jule::Str _field_name = jule::Str();
	jule::Ptr<_241cb4ee6_Status> _field_stat = jule::Ptr<_241cb4ee6_Status>();
	

	_2410caa8d_DirEntry(void) = default;

	inline bool operator==(_2410caa8d_DirEntry _other) {
		return 
			this->_field_name == _other._field_name &&
			this->_field_stat == _other._field_stat;
	}

	inline bool operator!=(_2410caa8d_DirEntry _other) { return !this->operator==(_other); }


};
inline jule::Exceptional<jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>> static__241d9a83a_read(jule::Str);
inline jule::VoidExceptional static__241d9d332_create(jule::Str);
inline jule::VoidExceptional static__241e035c9_remove(jule::Str);
struct _2410cc7c6_Directory {
	

	_2410cc7c6_Directory(void) = default;

	inline bool operator==(_2410cc7c6_Directory _other) { return true; }

	inline bool operator!=(_2410cc7c6_Directory _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_241cb4b2d_File> static__2410b226c_new(jule::Uintptr);
inline jule::Exceptional<jule::Ptr<_241cb4b2d_File>> static__2410b2a20_create(jule::Str);
inline jule::Exceptional<jule::Slice<jule::U8>> static__2410b359d_read(jule::Str);
inline jule::VoidExceptional static__2410b4082_write(jule::Str, jule::Slice<jule::U8>, jule::I32);
inline jule::Exceptional<jule::I32> _2410b55e4_seek(_241cb4b2d_File*, jule::I32, jule::I32);
inline jule::VoidExceptional _2410b613e_close(_241cb4b2d_File*);
inline jule::Exceptional<jule::Ptr<_241cb4b2d_File>> static__241d1d0c6_open(jule::Str, jule::I32, jule::I32);
inline jule::VoidExceptional static__241d1e36e_remove(jule::Str);
inline jule::Exceptional<jule::I32> _241d48ad5_write(_241cb4b2d_File*, jule::Slice<jule::U8>);
inline jule::Exceptional<jule::I32> _241d51cec_read(_241cb4b2d_File*, jule::Slice<jule::U8>);
struct _241cb4b2d_File {
	jule::Uintptr _field_handle = jule::Uintptr();
	

	_241cb4b2d_File(void) = default;

	inline bool operator==(_241cb4b2d_File _other) {
		return 
			this->_field_handle == _other._field_handle;
	}

	inline bool operator!=(_241cb4b2d_File _other) { return !this->operator==(_other); }


};
inline jule::Bool _2410b81b8_is_dir(_241cb4ee6_Status*);
inline jule::Bool _2410b9483_is_reg(_241cb4ee6_Status*);
inline jule::Exceptional<jule::Ptr<_241cb4ee6_Status>> static__241ddc2b6_of(jule::Str);
struct _241cb4ee6_Status {
	jule::U32 _field_mode = jule::U32();
	jule::U32 _field_size = jule::U32();
	

	_241cb4ee6_Status(void) = default;

	inline bool operator==(_241cb4ee6_Status _other) {
		return 
			this->_field_mode == _other._field_mode &&
			this->_field_size == _other._field_size;
	}

	inline bool operator!=(_241cb4ee6_Status _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_242e092c1_Cmd> static__242e09700_new(jule::Str);
inline jule::Exceptional<jule::I32> _242e09964_spawn(_242e092c1_Cmd*);
inline jule::Exceptional<jule::I32> _242e209ad___spawn(_242e092c1_Cmd*);
struct _242e092c1_Cmd {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_env = jule::Slice<jule::Str>();
	

	_242e092c1_Cmd(void) = default;

	inline bool operator==(_242e092c1_Cmd _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_args == _other._field_args &&
			this->_field_env == _other._field_env;
	}

	inline bool operator!=(_242e092c1_Cmd _other) { return !this->operator==(_other); }


};
struct _242dbab89_Log {
	jule::I32 _field_kind = 0LL;
	jule::I32 _field_row = jule::I32();
	jule::I32 _field_column = jule::I32();
	jule::Str _field_path = jule::Str();
	jule::Str _field_text = jule::Str();
	jule::Str _field_line = jule::Str();
	jule::Str _field_suggestion = jule::Str();
	

	_242dbab89_Log(void) = default;

	inline bool operator==(_242dbab89_Log _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_row == _other._field_row &&
			this->_field_column == _other._field_column &&
			this->_field_path == _other._field_path &&
			this->_field_text == _other._field_text &&
			this->_field_line == _other._field_line &&
			this->_field_suggestion == _other._field_suggestion;
	}

	inline bool operator!=(_242dbab89_Log _other) { return !this->operator==(_other); }


};
inline jule::U8 _2431e48ca_prec(_2431e4523_Token*);
struct _2431e4523_Token {
	jule::Ptr<_2431e98ad_File> _field_file = jule::Ptr<_2431e98ad_File>();
	jule::I32 _field_row = jule::I32();
	jule::I32 _field_column = jule::I32();
	jule::Str _field_kind = jule::Str();
	jule::U32 _field_id = 0LLU;
	

	_2431e4523_Token(void) = default;

	inline bool operator==(_2431e4523_Token _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_row == _other._field_row &&
			this->_field_column == _other._field_column &&
			this->_field_kind == _other._field_kind &&
			this->_field_id == _other._field_id;
	}

	inline bool operator!=(_2431e4523_Token _other) { return !this->operator==(_other); }


};
inline jule::Bool _2431e9cba_is_ok(_2431e98ad_File*);
inline void _2431ea040_fill(_2431e98ad_File*, jule::Slice<jule::U8>);
inline jule::Str _2431ea2a4_dir(_2431e98ad_File*);
inline jule::Str _2431ea518_name(_2431e98ad_File*);
inline jule::Uintptr _2431ea77c_addr(_2431e98ad_File*);
inline jule::Str _2431eaa8a_get_row(_2431e98ad_File*, jule::I32);
struct _2431e98ad_File {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_data = jule::Slice<jule::U8>();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_tokens = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	

	_2431e98ad_File(void) = default;

	inline bool operator==(_2431e98ad_File _other) {
		return 
			this->_field_path == _other._field_path &&
			this->_field_data == _other._field_data &&
			this->_field_tokens == _other._field_tokens;
	}

	inline bool operator!=(_2431e98ad_File _other) { return !this->operator==(_other); }


};
struct _2431eb915_KindPair {
	jule::Str _field_kind = jule::Str("::", 2);
	jule::U32 _field_id = 0LLU;
	

	_2431eb915_KindPair(void) = default;

	inline bool operator==(_2431eb915_KindPair _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_id == _other._field_id;
	}

	inline bool operator!=(_2431eb915_KindPair _other) { return !this->operator==(_other); }


};
inline void _243202ad6_push_err(_243202542_Lex*, jule::Str, jule::Slice<jule::Any>);
inline void _243202e05_push_err_tok(_243202542_Lex*, jule::Ptr<_2431e4523_Token>&, jule::Str);
inline void _2432030d1_lex(_243202542_Lex*);
inline jule::Str _2432033de_id(_243202542_Lex*, jule::Slice<jule::U8>&);
inline jule::Slice<jule::U8> _243203653_resume(_243202542_Lex*);
inline void _2432038c8_lex_line_comment(_243202542_Lex*, jule::Ptr<_2431e4523_Token>&);
inline void _243203b4d_lex_range_comment(_243202542_Lex*, jule::Ptr<_2431e4523_Token>&);
inline jule::Str _243203e5b_num(_243202542_Lex*, jule::Slice<jule::U8>&);
inline jule::Str _243204269_escape_seq(_243202542_Lex*, jule::Slice<jule::U8>&);
inline jule::Str _243204621_get_rune(_243202542_Lex*, jule::Slice<jule::U8>&, jule::Bool);
inline jule::Str _24320492e_lex_rune(_243202542_Lex*, jule::Slice<jule::U8>&);
inline jule::Str _243204b93_lex_str(_243202542_Lex*);
inline jule::Bool _243204e07_is_first_token_of_line(_243202542_Lex*);
inline void _2432050d3_new_line(_243202542_Lex*);
inline jule::Bool _2432055cd_is_op(_243202542_Lex*, jule::Slice<jule::U8>&, jule::Str, jule::U32, jule::Ptr<_2431e4523_Token>&);
inline jule::Bool _243205985_lex_basic_ops(_243202542_Lex*, jule::Slice<jule::U8>, jule::Ptr<_2431e4523_Token>&);
inline jule::Bool _243205d3c_lex_id(_243202542_Lex*, jule::Slice<jule::U8>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Bool _2432061e4_lex_num(_243202542_Lex*, jule::Slice<jule::U8>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Ptr<_2431e4523_Token> _243206458_token(_243202542_Lex*);
struct _243202542_Lex {
	jule::I32 _field_mode = 0LL;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_tokens = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Ptr<_2431e98ad_File> _field_file = jule::Ptr<_2431e98ad_File>();
	jule::I32 _field_pos = jule::I32();
	jule::I32 _field_column = jule::I32();
	jule::I32 _field_row = jule::I32();
	jule::Slice<_242dbab89_Log> _field_errors = jule::Slice<_242dbab89_Log>();
	

	_243202542_Lex(void) = default;

	inline bool operator==(_243202542_Lex _other) {
		return 
			this->_field_mode == _other._field_mode &&
			this->_field_tokens == _other._field_tokens &&
			this->_field_file == _other._field_file &&
			this->_field_pos == _other._field_pos &&
			this->_field_column == _other._field_column &&
			this->_field_row == _other._field_row &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_243202542_Lex _other) { return !this->operator==(_other); }


};
struct _244823942_Ast {
	jule::Ptr<_2431e98ad_File> _field_file = jule::Ptr<_2431e98ad_File>();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_top_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Slice<jule::Ptr<_244870c25_UseDecl>> _field_use_decls = jule::Slice<jule::Ptr<_244870c25_UseDecl>>();
	jule::Slice<_2448245e1_Node> _field_nodes = jule::Slice<_2448245e1_Node>();
	

	_244823942_Ast(void) = default;

	inline bool operator==(_244823942_Ast _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_top_directives == _other._field_top_directives &&
			this->_field_use_decls == _other._field_use_decls &&
			this->_field_nodes == _other._field_nodes;
	}

	inline bool operator!=(_244823942_Ast _other) { return !this->operator==(_other); }


};
struct _2448245e1_Node {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_data = jule::Any();
	

	_2448245e1_Node(void) = default;

	inline bool operator==(_2448245e1_Node _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_data == _other._field_data;
	}

	inline bool operator!=(_2448245e1_Node _other) { return !this->operator==(_other); }


};
struct _2448249dc_Directive {
	jule::Ptr<_2431e4523_Token> _field_tag = jule::Ptr<_2431e4523_Token>();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_args = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	

	_2448249dc_Directive(void) = default;

	inline bool operator==(_2448249dc_Directive _other) {
		return 
			this->_field_tag == _other._field_tag &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_2448249dc_Directive _other) { return !this->operator==(_other); }


};
struct _2448581d5_TypeDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_kind = jule::Any();
	

	_2448581d5_TypeDecl(void) = default;

	inline bool operator==(_2448581d5_TypeDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2448581d5_TypeDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _244858b0e_is_prim(_24485879b_IdentTypeDecl*);
struct _24485879b_IdentTypeDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>();
	

	_24485879b_IdentTypeDecl(void) = default;

	inline bool operator==(_24485879b_IdentTypeDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_24485879b_IdentTypeDecl _other) { return !this->operator==(_other); }


};
struct _244858dea_SubIdentTypeDecl {
	jule::Slice<jule::Ptr<_24485879b_IdentTypeDecl>> _field_idents = jule::Slice<jule::Ptr<_24485879b_IdentTypeDecl>>();
	

	_244858dea_SubIdentTypeDecl(void) = default;

	inline bool operator==(_244858dea_SubIdentTypeDecl _other) {
		return 
			this->_field_idents == _other._field_idents;
	}

	inline bool operator!=(_244858dea_SubIdentTypeDecl _other) { return !this->operator==(_other); }


};
struct _2448592a2_NamespaceTypeDecl {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_idents = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	

	_2448592a2_NamespaceTypeDecl(void) = default;

	inline bool operator==(_2448592a2_NamespaceTypeDecl _other) {
		return 
			this->_field_idents == _other._field_idents &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2448592a2_NamespaceTypeDecl _other) { return !this->operator==(_other); }


};
struct _24485958d_SptrTypeDecl {
	jule::Ptr<_2448581d5_TypeDecl> _field_elem = jule::Ptr<_2448581d5_TypeDecl>();
	

	_24485958d_SptrTypeDecl(void) = default;

	inline bool operator==(_24485958d_SptrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_24485958d_SptrTypeDecl _other) { return !this->operator==(_other); }


};
struct _244859989_SlcTypeDecl {
	jule::Ptr<_2448581d5_TypeDecl> _field_elem = jule::Ptr<_2448581d5_TypeDecl>();
	

	_244859989_SlcTypeDecl(void) = default;

	inline bool operator==(_244859989_SlcTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_244859989_SlcTypeDecl _other) { return !this->operator==(_other); }


};
struct _244859c75_TupleTypeDecl {
	jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _field_types = jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>();
	

	_244859c75_TupleTypeDecl(void) = default;

	inline bool operator==(_244859c75_TupleTypeDecl _other) {
		return 
			this->_field_types == _other._field_types;
	}

	inline bool operator!=(_244859c75_TupleTypeDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _24485a3b3_is_unsafe(_24485a061_PtrTypeDecl*);
struct _24485a061_PtrTypeDecl {
	jule::Ptr<_2448581d5_TypeDecl> _field_elem = jule::Ptr<_2448581d5_TypeDecl>();
	

	_24485a061_PtrTypeDecl(void) = default;

	inline bool operator==(_24485a061_PtrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_24485a061_PtrTypeDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _24485aabc_auto_sized(_24485a6e3_ArrTypeDecl*);
struct _24485a6e3_ArrTypeDecl {
	jule::Ptr<_2448581d5_TypeDecl> _field_elem = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_24485c706_Expr> _field_size = jule::Ptr<_24485c706_Expr>();
	

	_24485a6e3_ArrTypeDecl(void) = default;

	inline bool operator==(_24485a6e3_ArrTypeDecl _other) {
		return 
			this->_field_elem == _other._field_elem &&
			this->_field_size == _other._field_size;
	}

	inline bool operator!=(_24485a6e3_ArrTypeDecl _other) { return !this->operator==(_other); }


};
struct _24485ae41_MapTypeDecl {
	jule::Ptr<_2448581d5_TypeDecl> _field_key = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_2448581d5_TypeDecl> _field_val = jule::Ptr<_2448581d5_TypeDecl>();
	

	_24485ae41_MapTypeDecl(void) = default;

	inline bool operator==(_24485ae41_MapTypeDecl _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_24485ae41_MapTypeDecl _other) { return !this->operator==(_other); }


};
struct _24485b2e8_RetTypeDecl {
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_idents = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	

	_24485b2e8_RetTypeDecl(void) = default;

	inline bool operator==(_24485b2e8_RetTypeDecl _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_idents == _other._field_idents;
	}

	inline bool operator!=(_24485b2e8_RetTypeDecl _other) { return !this->operator==(_other); }


};
struct _24485c706_Expr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_kind = jule::Any();
	

	_24485c706_Expr(void) = default;

	inline bool operator==(_24485c706_Expr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_24485c706_Expr _other) { return !this->operator==(_other); }


};
struct _24485c9e2_RangeExpr {
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24485c9e2_RangeExpr(void) = default;

	inline bool operator==(_24485c9e2_RangeExpr _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24485c9e2_RangeExpr _other) { return !this->operator==(_other); }


};
struct _24485d097_UseExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24485d097_UseExpr(void) = default;

	inline bool operator==(_24485d097_UseExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24485d097_UseExpr _other) { return !this->operator==(_other); }


};
struct _24485d383_TupleExpr {
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_expr = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	

	_24485d383_TupleExpr(void) = default;

	inline bool operator==(_24485d383_TupleExpr _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24485d383_TupleExpr _other) { return !this->operator==(_other); }


};
inline jule::Bool _24485da8c_is_nil(_24485d73a_LitExpr*);
struct _24485d73a_LitExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_value = jule::Str();
	

	_24485d73a_LitExpr(void) = default;

	inline bool operator==(_24485d73a_LitExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_value == _other._field_value;
	}

	inline bool operator!=(_24485d73a_LitExpr _other) { return !this->operator==(_other); }


};
struct _24485de44_UnsafeExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24485de44_UnsafeExpr(void) = default;

	inline bool operator==(_24485de44_UnsafeExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24485de44_UnsafeExpr _other) { return !this->operator==(_other); }


};
struct _24485e2eb_CoExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24485e2eb_CoExpr(void) = default;

	inline bool operator==(_24485e2eb_CoExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24485e2eb_CoExpr _other) { return !this->operator==(_other); }


};
inline jule::Bool _24485eac1_is_self(_24485e76e_IdentExpr*);
struct _24485e76e_IdentExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	

	_24485e76e_IdentExpr(void) = default;

	inline bool operator==(_24485e76e_IdentExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked;
	}

	inline bool operator!=(_24485e76e_IdentExpr _other) { return !this->operator==(_other); }


};
struct _24485ee78_UnaryExpr {
	jule::Ptr<_2431e4523_Token> _field_op = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24485ee78_UnaryExpr(void) = default;

	inline bool operator==(_24485ee78_UnaryExpr _other) {
		return 
			this->_field_op == _other._field_op &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24485ee78_UnaryExpr _other) { return !this->operator==(_other); }


};
struct _244860330_VariadicExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_244860330_VariadicExpr(void) = default;

	inline bool operator==(_244860330_VariadicExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_244860330_VariadicExpr _other) { return !this->operator==(_other); }


};
struct _2448606d7_CastExpr {
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_2448606d7_CastExpr(void) = default;

	inline bool operator==(_2448606d7_CastExpr _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_2448606d7_CastExpr _other) { return !this->operator==(_other); }


};
struct _244860a8e_NsSelectionExpr {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_ns = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Ptr<_2431e4523_Token> _field_ident = jule::Ptr<_2431e4523_Token>();
	

	_244860a8e_NsSelectionExpr(void) = default;

	inline bool operator==(_244860a8e_NsSelectionExpr _other) {
		return 
			this->_field_ns == _other._field_ns &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_244860a8e_NsSelectionExpr _other) { return !this->operator==(_other); }


};
struct _244861012_SubIdentExpr {
	jule::Bool _field_is_self = jule::Bool();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_2431e4523_Token> _field_ident = jule::Ptr<_2431e4523_Token>();
	

	_244861012_SubIdentExpr(void) = default;

	inline bool operator==(_244861012_SubIdentExpr _other) {
		return 
			this->_field_is_self == _other._field_is_self &&
			this->_field_expr == _other._field_expr &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_244861012_SubIdentExpr _other) { return !this->operator==(_other); }


};
struct _244861485_BinopExpr {
	jule::Ptr<_24485c706_Expr> _field_left = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_24485c706_Expr> _field_right = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_2431e4523_Token> _field_op = jule::Ptr<_2431e4523_Token>();
	

	_244861485_BinopExpr(void) = default;

	inline bool operator==(_244861485_BinopExpr _other) {
		return 
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_244861485_BinopExpr _other) { return !this->operator==(_other); }


};
inline jule::Bool _244861d37_unhandled(_2448619c4_FnCallExpr*);
inline jule::Bool _24486209b_ignored(_2448619c4_FnCallExpr*);
struct _2448619c4_FnCallExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_args = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	jule::Ptr<_244868503_ScopeTree> _field_exception = jule::Ptr<_244868503_ScopeTree>();
	

	_2448619c4_FnCallExpr(void) = default;

	inline bool operator==(_2448619c4_FnCallExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_args == _other._field_args &&
			this->_field_exception == _other._field_exception;
	}

	inline bool operator!=(_2448619c4_FnCallExpr _other) { return !this->operator==(_other); }


};
inline jule::Bool _2448627a5_is_targeted(_244862453_FieldExprPair*);
struct _244862453_FieldExprPair {
	jule::Ptr<_2431e4523_Token> _field_field = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_244862453_FieldExprPair(void) = default;

	inline bool operator==(_244862453_FieldExprPair _other) {
		return 
			this->_field_field == _other._field_field &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_244862453_FieldExprPair _other) { return !this->operator==(_other); }


};
struct _244862ba1_StructLit {
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_exprs = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	

	_244862ba1_StructLit(void) = default;

	inline bool operator==(_244862ba1_StructLit _other) {
		return 
			this->_field_end == _other._field_end &&
			this->_field_kind == _other._field_kind &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_244862ba1_StructLit _other) { return !this->operator==(_other); }


};
inline jule::Bool _244863795_is_empty(_244863124_BraceLit*);
struct _244863124_BraceLit {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_exprs = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	

	_244863124_BraceLit(void) = default;

	inline bool operator==(_244863124_BraceLit _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_244863124_BraceLit _other) { return !this->operator==(_other); }


};
struct _244863b3b_KeyValPair {
	jule::Ptr<_24485c706_Expr> _field_key = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_24485c706_Expr> _field_val = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_2431e4523_Token> _field_colon = jule::Ptr<_2431e4523_Token>();
	

	_244863b3b_KeyValPair(void) = default;

	inline bool operator==(_244863b3b_KeyValPair _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val &&
			this->_field_colon == _other._field_colon;
	}

	inline bool operator!=(_244863b3b_KeyValPair _other) { return !this->operator==(_other); }


};
inline jule::Bool _244864411_is_empty(_2448640ae_SliceExpr*);
struct _2448640ae_SliceExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_exprs = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	

	_2448640ae_SliceExpr(void) = default;

	inline bool operator==(_2448640ae_SliceExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_2448640ae_SliceExpr _other) { return !this->operator==(_other); }


};
struct _244864950_IndexingExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_24485c706_Expr> _field_index = jule::Ptr<_24485c706_Expr>();
	

	_244864950_IndexingExpr(void) = default;

	inline bool operator==(_244864950_IndexingExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_expr == _other._field_expr &&
			this->_field_index == _other._field_index;
	}

	inline bool operator!=(_244864950_IndexingExpr _other) { return !this->operator==(_other); }


};
struct _24486505a_SlicingExpr {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_24485c706_Expr> _field_start = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_24485c706_Expr> _field_to = jule::Ptr<_24485c706_Expr>();
	

	_24486505a_SlicingExpr(void) = default;

	inline bool operator==(_24486505a_SlicingExpr _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_expr == _other._field_expr &&
			this->_field_start == _other._field_start &&
			this->_field_to == _other._field_to;
	}

	inline bool operator!=(_24486505a_SlicingExpr _other) { return !this->operator==(_other); }


};
struct _244865346_Constraint {
	jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _field_mask = jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>();
	

	_244865346_Constraint(void) = default;

	inline bool operator==(_244865346_Constraint _other) {
		return 
			this->_field_mask == _other._field_mask;
	}

	inline bool operator!=(_244865346_Constraint _other) { return !this->operator==(_other); }


};
struct _2448657b9_GenericDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_244865346_Constraint> _field_constraint = jule::Ptr<_244865346_Constraint>();
	

	_2448657b9_GenericDecl(void) = default;

	inline bool operator==(_2448657b9_GenericDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_constraint == _other._field_constraint;
	}

	inline bool operator!=(_2448657b9_GenericDecl _other) { return !this->operator==(_other); }


};
struct _244865b71_LabelSt {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	

	_244865b71_LabelSt(void) = default;

	inline bool operator==(_244865b71_LabelSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_244865b71_LabelSt _other) { return !this->operator==(_other); }


};
struct _244866028_GotoSt {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_label = jule::Ptr<_2431e4523_Token>();
	

	_244866028_GotoSt(void) = default;

	inline bool operator==(_244866028_GotoSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_244866028_GotoSt _other) { return !this->operator==(_other); }


};
struct _244866314_FallSt {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	

	_244866314_FallSt(void) = default;

	inline bool operator==(_244866314_FallSt _other) {
		return 
			this->_field_token == _other._field_token;
	}

	inline bool operator!=(_244866314_FallSt _other) { return !this->operator==(_other); }


};
struct _24486691e_AssignLeft {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24486691e_AssignLeft(void) = default;

	inline bool operator==(_24486691e_AssignLeft _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_reference == _other._field_reference &&
			this->_field_ident == _other._field_ident &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24486691e_AssignLeft _other) { return !this->operator==(_other); }


};
struct _244866e5d_AssignSt {
	jule::Bool _field_declarative = jule::Bool();
	jule::Ptr<_2431e4523_Token> _field_setter = jule::Ptr<_2431e4523_Token>();
	jule::Slice<jule::Ptr<_24486691e_AssignLeft>> _field_left = jule::Slice<jule::Ptr<_24486691e_AssignLeft>>();
	jule::Ptr<_24485c706_Expr> _field_right = jule::Ptr<_24485c706_Expr>();
	

	_244866e5d_AssignSt(void) = default;

	inline bool operator==(_244866e5d_AssignSt _other) {
		return 
			this->_field_declarative == _other._field_declarative &&
			this->_field_setter == _other._field_setter &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_244866e5d_AssignSt _other) { return !this->operator==(_other); }


};
struct _244867de8_Stmt {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_data = jule::Any();
	

	_244867de8_Stmt(void) = default;

	inline bool operator==(_244867de8_Stmt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_data == _other._field_data;
	}

	inline bool operator!=(_244867de8_Stmt _other) { return !this->operator==(_other); }


};
struct _244868503_ScopeTree {
	jule::Ptr<_244868503_ScopeTree> _field_parent = jule::Ptr<_244868503_ScopeTree>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<_244867de8_Stmt> _field_stmts = jule::Slice<_244867de8_Stmt>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	

	_244868503_ScopeTree(void) = default;

	inline bool operator==(_244868503_ScopeTree _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_deferred == _other._field_deferred &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_end == _other._field_end;
	}

	inline bool operator!=(_244868503_ScopeTree _other) { return !this->operator==(_other); }


};
inline jule::Bool _24486903c_is_self(_244868bc9_ParamDecl*);
inline jule::Bool _2448692a1_is_ref(_244868bc9_ParamDecl*);
struct _244868bc9_ParamDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Str _field_ident = jule::Str();
	

	_244868bc9_ParamDecl(void) = default;

	inline bool operator==(_244868bc9_ParamDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_244868bc9_ParamDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _24486a34b_is_anon(_244869ee9_FnDecl*);
struct _244869ee9_FnDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>();
	jule::Ptr<_24485b2e8_RetTypeDecl> _field_result = jule::Ptr<_24485b2e8_RetTypeDecl>();
	jule::Slice<jule::Ptr<_244868bc9_ParamDecl>> _field_params = jule::Slice<jule::Ptr<_244868bc9_ParamDecl>>();
	

	_244869ee9_FnDecl(void) = default;

	inline bool operator==(_244869ee9_FnDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_global == _other._field_global &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_statically == _other._field_statically &&
			this->_field_exceptional == _other._field_exceptional &&
			this->_field_ident == _other._field_ident &&
			this->_field_directives == _other._field_directives &&
			this->_field_scope == _other._field_scope &&
			this->_field_generics == _other._field_generics &&
			this->_field_result == _other._field_result &&
			this->_field_params == _other._field_params;
	}

	inline bool operator!=(_244869ee9_FnDecl _other) { return !this->operator==(_other); }


};
struct _24486aec8_VarDecl {
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24486aec8_VarDecl(void) = default;

	inline bool operator==(_24486aec8_VarDecl _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_constant == _other._field_constant &&
			this->_field_statically == _other._field_statically &&
			this->_field_reference == _other._field_reference &&
			this->_field_directives == _other._field_directives &&
			this->_field_kind == _other._field_kind &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24486aec8_VarDecl _other) { return !this->operator==(_other); }


};
struct _24486b380_RetSt {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_24486b380_RetSt(void) = default;

	inline bool operator==(_24486b380_RetSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24486b380_RetSt _other) { return !this->operator==(_other); }


};
inline jule::Bool _24486bd42_is_inf(_24486b9e0_Iter*);
struct _24486b9e0_Iter {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_kind = jule::Any();
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	

	_24486b9e0_Iter(void) = default;

	inline bool operator==(_24486b9e0_Iter _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_kind == _other._field_kind &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_24486b9e0_Iter _other) { return !this->operator==(_other); }


};
inline jule::Bool _24486c617_is_while_next(_24486c2b5_WhileKind*);
struct _24486c2b5_WhileKind {
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_2431e4523_Token> _field_next_token = jule::Ptr<_2431e4523_Token>();
	

	_24486c2b5_WhileKind(void) = default;

	inline bool operator==(_24486c2b5_WhileKind _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_next == _other._field_next &&
			this->_field_next_token == _other._field_next_token;
	}

	inline bool operator!=(_24486c2b5_WhileKind _other) { return !this->operator==(_other); }


};
struct _24486cb56_RangeKind {
	jule::Ptr<_2431e4523_Token> _field_in_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_24486aec8_VarDecl> _field_key_a = jule::Ptr<_24486aec8_VarDecl>();
	jule::Ptr<_24486aec8_VarDecl> _field_key_b = jule::Ptr<_24486aec8_VarDecl>();
	

	_24486cb56_RangeKind(void) = default;

	inline bool operator==(_24486cb56_RangeKind _other) {
		return 
			this->_field_in_token == _other._field_in_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_key_a == _other._field_key_a &&
			this->_field_key_b == _other._field_key_b;
	}

	inline bool operator!=(_24486cb56_RangeKind _other) { return !this->operator==(_other); }


};
struct _24486d00d_BreakSt {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_label = jule::Ptr<_2431e4523_Token>();
	

	_24486d00d_BreakSt(void) = default;

	inline bool operator==(_24486d00d_BreakSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_24486d00d_BreakSt _other) { return !this->operator==(_other); }


};
struct _24486d3b5_ContSt {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_label = jule::Ptr<_2431e4523_Token>();
	

	_24486d3b5_ContSt(void) = default;

	inline bool operator==(_24486d3b5_ContSt _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label;
	}

	inline bool operator!=(_24486d3b5_ContSt _other) { return !this->operator==(_other); }


};
struct _24486d838_If {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	

	_24486d838_If(void) = default;

	inline bool operator==(_24486d838_If _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_24486d838_If _other) { return !this->operator==(_other); }


};
struct _24486dbe0_Else {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	

	_24486dbe0_Else(void) = default;

	inline bool operator==(_24486dbe0_Else _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_24486dbe0_Else _other) { return !this->operator==(_other); }


};
struct _24486e163_Conditional {
	jule::Ptr<_24486d838_If> _field_head = jule::Ptr<_24486d838_If>();
	jule::Slice<jule::Ptr<_24486d838_If>> _field_tail = jule::Slice<jule::Ptr<_24486d838_If>>();
	jule::Ptr<_24486dbe0_Else> _field_default = jule::Ptr<_24486dbe0_Else>();
	

	_24486e163_Conditional(void) = default;

	inline bool operator==(_24486e163_Conditional _other) {
		return 
			this->_field_head == _other._field_head &&
			this->_field_tail == _other._field_tail &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_24486e163_Conditional _other) { return !this->operator==(_other); }


};
struct _24486e839_TypeAliasDecl {
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	

	_24486e839_TypeAliasDecl(void) = default;

	inline bool operator==(_24486e839_TypeAliasDecl _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_24486e839_TypeAliasDecl _other) { return !this->operator==(_other); }


};
struct _24486ecac_Case {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_exprs = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	

	_24486ecac_Case(void) = default;

	inline bool operator==(_24486ecac_Case _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_scope == _other._field_scope &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_24486ecac_Case _other) { return !this->operator==(_other); }


};
struct _244870483_MatchCase {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Slice<jule::Ptr<_24486ecac_Case>> _field_cases = jule::Slice<jule::Ptr<_24486ecac_Case>>();
	jule::Ptr<_24486dbe0_Else> _field_default = jule::Ptr<_24486dbe0_Else>();
	

	_244870483_MatchCase(void) = default;

	inline bool operator==(_244870483_MatchCase _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_type_match == _other._field_type_match &&
			this->_field_expr == _other._field_expr &&
			this->_field_cases == _other._field_cases &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_244870483_MatchCase _other) { return !this->operator==(_other); }


};
struct _244870c25_UseDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_full = jule::Bool();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_selected = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	

	_244870c25_UseDecl(void) = default;

	inline bool operator==(_244870c25_UseDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_link_path == _other._field_link_path &&
			this->_field_alias == _other._field_alias &&
			this->_field_full == _other._field_full &&
			this->_field_selected == _other._field_selected &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_std == _other._field_std;
	}

	inline bool operator!=(_244870c25_UseDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _2448714ea_auto_expr(_244871198_EnumItemDecl*);
struct _244871198_EnumItemDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	

	_244871198_EnumItemDecl(void) = default;

	inline bool operator==(_244871198_EnumItemDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_244871198_EnumItemDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _244872254_default_typed(_244871bc1_EnumDecl*);
struct _244871bc1_EnumDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Slice<jule::Ptr<_244871198_EnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_244871198_EnumItemDecl>>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	

	_244871bc1_EnumDecl(void) = default;

	inline bool operator==(_244871bc1_EnumDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_items == _other._field_items &&
			this->_field_end == _other._field_end;
	}

	inline bool operator!=(_244871bc1_EnumDecl _other) { return !this->operator==(_other); }


};
struct _2448726c7_TypeEnumItemDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	

	_2448726c7_TypeEnumItemDecl(void) = default;

	inline bool operator==(_2448726c7_TypeEnumItemDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2448726c7_TypeEnumItemDecl _other) { return !this->operator==(_other); }


};
struct _2448728c5_TypeEnumDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	

	_2448728c5_TypeEnumDecl(void) = default;

	inline bool operator==(_2448728c5_TypeEnumDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_items == _other._field_items &&
			this->_field_end == _other._field_end;
	}

	inline bool operator!=(_2448728c5_TypeEnumDecl _other) { return !this->operator==(_other); }


};
struct _244872e25_FieldDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2448581d5_TypeDecl> _field_kind = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_24485c706_Expr> _field_default = jule::Ptr<_24485c706_Expr>();
	

	_244872e25_FieldDecl(void) = default;

	inline bool operator==(_244872e25_FieldDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_244872e25_FieldDecl _other) { return !this->operator==(_other); }


};
struct _244873783_StructDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_244872e25_FieldDecl>> _field_fields = jule::Slice<jule::Ptr<_244872e25_FieldDecl>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>();
	

	_244873783_StructDecl(void) = default;

	inline bool operator==(_244873783_StructDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_ident == _other._field_ident &&
			this->_field_fields == _other._field_fields &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_directives == _other._field_directives &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_244873783_StructDecl _other) { return !this->operator==(_other); }


};
struct _244873d8d_TraitDecl {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Slice<jule::Ptr<_244869ee9_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_244869ee9_FnDecl>>();
	

	_244873d8d_TraitDecl(void) = default;

	inline bool operator==(_244873d8d_TraitDecl _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_end == _other._field_end &&
			this->_field_ident == _other._field_ident &&
			this->_field_public == _other._field_public &&
			this->_field_methods == _other._field_methods;
	}

	inline bool operator!=(_244873d8d_TraitDecl _other) { return !this->operator==(_other); }


};
inline jule::Bool _24487480b_is_trait_impl(_244874498_Impl*);
inline jule::Bool _244874a70_is_struct_impl(_244874498_Impl*);
struct _244874498_Impl {
	jule::Ptr<_2431e4523_Token> _field_end = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2448581d5_TypeDecl> _field_base = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_2448581d5_TypeDecl> _field_dest = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Slice<jule::Ptr<_244869ee9_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_244869ee9_FnDecl>>();
	jule::Slice<jule::Ptr<_24486aec8_VarDecl>> _field_statics = jule::Slice<jule::Ptr<_24486aec8_VarDecl>>();
	

	_244874498_Impl(void) = default;

	inline bool operator==(_244874498_Impl _other) {
		return 
			this->_field_end == _other._field_end &&
			this->_field_base == _other._field_base &&
			this->_field_dest == _other._field_dest &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics;
	}

	inline bool operator!=(_244874498_Impl _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2448ab524_Const> static__244916408_new_i64(jule::I64);
inline jule::Ptr<_2448ab524_Const> static__24491653a_new_u64(jule::U64);
inline jule::Ptr<_2448ab524_Const> static__2449166c2_new_bool(jule::Bool);
inline jule::Ptr<_2448ab524_Const> static__244916969_new_str(jule::Str);
inline jule::Ptr<_2448ab524_Const> static__244916c11_new_f64(jule::F64);
inline jule::Ptr<_2448ab524_Const> static__244916e0e_new_nil(void);
inline jule::I64 _244917508_read_i64(_2448ab524_Const*);
inline jule::U64 _24491776c_read_u64(_2448ab524_Const*);
inline jule::Bool _2449179d1_read_bool(_2448ab524_Const*);
inline jule::Str _244917c45_read_str(_2448ab524_Const*);
inline jule::F64 _244917ea9_read_f64(_2448ab524_Const*);
inline jule::I64 _24491821d_as_i64(_2448ab524_Const*);
inline jule::U64 _244918482_as_u64(_2448ab524_Const*);
inline jule::F64 _2449186e6_as_f64(_2448ab524_Const*);
inline void _24491896b_set_i64(_2448ab524_Const*, jule::I64);
inline void _244918be1_set_u64(_2448ab524_Const*, jule::U64);
inline void _244918e66_set_bool(_2448ab524_Const*, jule::Bool);
inline void _2449191db_set_str(_2448ab524_Const*, jule::Str);
inline void _244919461_set_f64(_2448ab524_Const*, jule::F64);
inline void _24491963c_set_nil(_2448ab524_Const*);
inline jule::Bool _2449198a1_is_i64(_2448ab524_Const*);
inline jule::Bool _244919b15_is_u64(_2448ab524_Const*);
inline jule::Bool _244919d79_is_bool(_2448ab524_Const*);
inline jule::Bool _24491a0dd_is_str(_2448ab524_Const*);
inline jule::Bool _24491a352_is_f64(_2448ab524_Const*);
inline jule::Bool _24491a5b6_is_nil(_2448ab524_Const*);
inline jule::Bool _24491a8c4_are_same_types(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491abd2_and(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491aee0_or(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491b2ed_eq(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491b60b_lt(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491b919_lt_eq(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491bc27_gt(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491c035_gt_eq(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491c343_add(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491c651_sub(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491c95e_mul(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491cc6c_div(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491d07a_mod(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491d388_bitwise_and(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491d696_bitwise_or(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491d9a4_xor(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491dcb2_lshift(_2448ab524_Const*, _2448ab524_Const);
inline jule::Bool _24491e0c0_rshift(_2448ab524_Const*, _2448ab524_Const);
struct _2448ab524_Const {
	jule::Any _field_data = jule::Any();
	

	_2448ab524_Const(void) = default;

	inline jule::Bool operator==(_2448ab524_Const _other) { return _24491b2ed_eq(this, _other); }

	inline bool operator!=(_2448ab524_Const _other) { return !this->operator==(_other); }

	inline jule::Bool operator>(_2448ab524_Const _other) { return _24491bc27_gt(this, _other); }

	inline jule::Bool operator>=(_2448ab524_Const _other) { return _24491c035_gt_eq(this, _other); }

	inline jule::Bool operator<(_2448ab524_Const _other) { return _24491b60b_lt(this, _other); }

	inline jule::Bool operator<=(_2448ab524_Const _other) { return _24491b919_lt_eq(this, _other); }


};
struct _24546660b_FloatInfo {
	jule::U32 _field_mantbits = jule::U32();
	jule::U32 _field_expbits = jule::U32();
	jule::I32 _field_bias = jule::I32();
	

	_24546660b_FloatInfo(void) = default;

	inline bool operator==(_24546660b_FloatInfo _other) {
		return 
			this->_field_mantbits == _other._field_mantbits &&
			this->_field_expbits == _other._field_expbits &&
			this->_field_bias == _other._field_bias;
	}

	inline bool operator!=(_24546660b_FloatInfo _other) { return !this->operator==(_other); }


};
struct _2454672bb_DecimalSlice {
	jule::Slice<jule::U8> _field_d = jule::Slice<jule::U8>();
	jule::I32 _field_nd = jule::I32();
	jule::I32 _field_dp = jule::I32();
	jule::Bool _field_neg = jule::Bool();
	

	_2454672bb_DecimalSlice(void) = default;

	inline bool operator==(_2454672bb_DecimalSlice _other) {
		return 
			this->_field_d == _other._field_d &&
			this->_field_nd == _other._field_nd &&
			this->_field_dp == _other._field_dp &&
			this->_field_neg == _other._field_neg;
	}

	inline bool operator!=(_2454672bb_DecimalSlice _other) { return !this->operator==(_other); }


};
struct _245478ad5_LeftCheat {
	jule::I32 _field_delta = jule::I32();
	jule::Str _field_cutoff = jule::Str();
	

	_245478ad5_LeftCheat(void) = default;

	inline bool operator==(_245478ad5_LeftCheat _other) {
		return 
			this->_field_delta == _other._field_delta &&
			this->_field_cutoff == _other._field_cutoff;
	}

	inline bool operator!=(_245478ad5_LeftCheat _other) { return !this->operator==(_other); }


};
inline jule::Bool _2454714b2_set(_2454795ec_Decimal*, jule::Str);
inline std::tuple<jule::U64,jule::Bool> _2454717c0_float_bits(_2454795ec_Decimal*, _24546660b_FloatInfo&);
inline void _2454799c6_assign(_2454795ec_Decimal*, jule::U64);
inline void _245479c4b_shift(_2454795ec_Decimal*, jule::I32);
inline void _245479ec1_round_down(_2454795ec_Decimal*, jule::I32);
inline void _24547a246_round_up(_2454795ec_Decimal*, jule::I32);
inline void _24547a4bb_round(_2454795ec_Decimal*, jule::I32);
inline jule::U64 _24547a730_rounded_integer(_2454795ec_Decimal*);
struct _2454795ec_Decimal {
	jule::Array<jule::U8,800> _field_d = jule::Array<jule::U8,800>();
	jule::I32 _field_nd = jule::I32();
	jule::I32 _field_dp = jule::I32();
	jule::Bool _field_neg = jule::Bool();
	jule::Bool _field_trunc = jule::Bool();
	

	_2454795ec_Decimal(void) = default;

	inline bool operator==(_2454795ec_Decimal _other) {
		return 
			this->_field_d == _other._field_d &&
			this->_field_nd == _other._field_nd &&
			this->_field_dp == _other._field_dp &&
			this->_field_neg == _other._field_neg &&
			this->_field_trunc == _other._field_trunc;
	}

	inline bool operator!=(_2454795ec_Decimal _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_244851079_FieldIns> _244829c23_instance(jule::Ptr<_24483adcc_Field>);
struct _24483adcc_Field {
	jule::Ptr<_244848912_Struct> _field_owner = jule::Ptr<_244848912_Struct>();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2455e5180_TypeSymbol> _field_kind = jule::Ptr<_2455e5180_TypeSymbol>();
	jule::Ptr<_24485c706_Expr> _field_default = jule::Ptr<_24485c706_Expr>();
	

	_24483adcc_Field(void) = default;

	inline bool operator==(_24483adcc_Field _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_24483adcc_Field _other) { return !this->operator==(_other); }


};
struct _24484a33c_Operators {
	jule::Ptr<_2449299b0_FnIns> _field_eq = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_gt = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_gt_eq = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_lt = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_lt_eq = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_shl = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_shr = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_add = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_sub = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_div = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_mul = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_mod = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_bit_and = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_bit_or = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_bit_xor = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_neg = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_pos = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_bit_not = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_add_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_sub_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_div_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_mul_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_mod_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_shl_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_shr_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_bit_or_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_bit_and_assign = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_2449299b0_FnIns> _field_bit_xor_assign = jule::Ptr<_2449299b0_FnIns>();
	

	_24484a33c_Operators(void) = default;

	inline bool operator==(_24484a33c_Operators _other) {
		return 
			this->_field_eq == _other._field_eq &&
			this->_field_gt == _other._field_gt &&
			this->_field_gt_eq == _other._field_gt_eq &&
			this->_field_lt == _other._field_lt &&
			this->_field_lt_eq == _other._field_lt_eq &&
			this->_field_shl == _other._field_shl &&
			this->_field_shr == _other._field_shr &&
			this->_field_add == _other._field_add &&
			this->_field_sub == _other._field_sub &&
			this->_field_div == _other._field_div &&
			this->_field_mul == _other._field_mul &&
			this->_field_mod == _other._field_mod &&
			this->_field_bit_and == _other._field_bit_and &&
			this->_field_bit_or == _other._field_bit_or &&
			this->_field_bit_xor == _other._field_bit_xor &&
			this->_field_neg == _other._field_neg &&
			this->_field_pos == _other._field_pos &&
			this->_field_bit_not == _other._field_bit_not &&
			this->_field_add_assign == _other._field_add_assign &&
			this->_field_sub_assign == _other._field_sub_assign &&
			this->_field_div_assign == _other._field_div_assign &&
			this->_field_mul_assign == _other._field_mul_assign &&
			this->_field_mod_assign == _other._field_mod_assign &&
			this->_field_shl_assign == _other._field_shl_assign &&
			this->_field_shr_assign == _other._field_shr_assign &&
			this->_field_bit_or_assign == _other._field_bit_or_assign &&
			this->_field_bit_and_assign == _other._field_bit_and_assign &&
			this->_field_bit_xor_assign == _other._field_bit_xor_assign;
	}

	inline bool operator!=(_24484a33c_Operators _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_244874c5c_StructIns> _244830d17_instance(jule::Ptr<_244848912_Struct>);
inline jule::Ptr<_244874c5c_StructIns> _244835080_append_instance(_244848912_Struct*, jule::Ptr<_244874c5c_StructIns>&);
inline jule::Ptr<_244926d0e_Fn> _244837d30_find_method(_244848912_Struct*, jule::Str, jule::Bool);
inline jule::Ptr<_24556cc1d_Var> _244838d42_find_static(_244848912_Struct*, jule::Str);
inline jule::Ptr<_24483adcc_Field> _244838281_find_field(_244848912_Struct*, jule::Str);
inline jule::Bool _24483a55d_is_implements(_244848912_Struct*, jule::Ptr<_24547ec51_Trait>);
inline jule::Bool _244839969_is_derives(_244848912_Struct*, jule::Str);
inline jule::Bool _24483d71a_is_uses(_244848912_Struct*, jule::Ptr<_244848912_Struct>);
inline jule::Bool _24483ddd0_has_ref_accessible(_244848912_Struct*);
struct _244848912_Struct {
	jule::Ptr<_24555100e_Sema> _field_sema = jule::Ptr<_24555100e_Sema>();
	jule::Slice<jule::Ptr<_244848912_Struct>> _field_depends = jule::Slice<jule::Ptr<_244848912_Struct>>();
	jule::Slice<jule::Ptr<_244848912_Struct>> _field_uses = jule::Slice<jule::Ptr<_244848912_Struct>>();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_24483adcc_Field>> _field_fields = jule::Slice<jule::Ptr<_24483adcc_Field>>();
	jule::Slice<jule::Ptr<_244926d0e_Fn>> _field_methods = jule::Slice<jule::Ptr<_244926d0e_Fn>>();
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_statics = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>();
	jule::Slice<jule::Ptr<_24547ec51_Trait>> _field_implements = jule::Slice<jule::Ptr<_24547ec51_Trait>>();
	jule::Slice<jule::Ptr<_244874c5c_StructIns>> _field_instances = jule::Slice<jule::Ptr<_244874c5c_StructIns>>();
	

	_244848912_Struct(void) = default;

	inline bool operator==(_244848912_Struct _other) {
		return 
			this->_field_sema == _other._field_sema &&
			this->_field_depends == _other._field_depends &&
			this->_field_uses == _other._field_uses &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_fields == _other._field_fields &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_directives == _other._field_directives &&
			this->_field_generics == _other._field_generics &&
			this->_field_implements == _other._field_implements &&
			this->_field_instances == _other._field_instances;
	}

	inline bool operator!=(_244848912_Struct _other) { return !this->operator==(_other); }


};
struct _244851079_FieldIns {
	jule::Ptr<_24483adcc_Field> _field_decl = jule::Ptr<_24483adcc_Field>();
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2455b5051_Data> _field_default = jule::Ptr<_2455b5051_Data>();
	

	_244851079_FieldIns(void) = default;

	inline bool operator==(_244851079_FieldIns _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_244851079_FieldIns _other) { return !this->operator==(_other); }


};
struct _24491e895_OperandExprModel {
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Any _field_model = jule::Any();
	

	_24491e895_OperandExprModel(void) = default;

	inline bool operator==(_24491e895_OperandExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_24491e895_OperandExprModel _other) { return !this->operator==(_other); }


};
struct _24491ea82_BinopExprModel {
	jule::Ptr<_24491e895_OperandExprModel> _field_left = jule::Ptr<_24491e895_OperandExprModel>();
	jule::Ptr<_24491e895_OperandExprModel> _field_right = jule::Ptr<_24491e895_OperandExprModel>();
	jule::Ptr<_2431e4523_Token> _field_op = jule::Ptr<_2431e4523_Token>();
	

	_24491ea82_BinopExprModel(void) = default;

	inline bool operator==(_24491ea82_BinopExprModel _other) {
		return 
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_24491ea82_BinopExprModel _other) { return !this->operator==(_other); }


};
struct _24491ec6e_UnaryExprModel {
	jule::Ptr<_2455b5051_Data> _field_expr = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2431e4523_Token> _field_op = jule::Ptr<_2431e4523_Token>();
	

	_24491ec6e_UnaryExprModel(void) = default;

	inline bool operator==(_24491ec6e_UnaryExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_24491ec6e_UnaryExprModel _other) { return !this->operator==(_other); }


};
struct _24491ee5b_StructArgExprModel {
	jule::Ptr<_244851079_FieldIns> _field_field = jule::Ptr<_244851079_FieldIns>();
	jule::Any _field_expr = jule::Any();
	

	_24491ee5b_StructArgExprModel(void) = default;

	inline bool operator==(_24491ee5b_StructArgExprModel _other) {
		return 
			this->_field_field == _other._field_field &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24491ee5b_StructArgExprModel _other) { return !this->operator==(_other); }


};
struct _244920148_StructLitExprModel {
	jule::Ptr<_244874c5c_StructIns> _field_strct = jule::Ptr<_244874c5c_StructIns>();
	jule::Slice<jule::Ptr<_24491ee5b_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_24491ee5b_StructArgExprModel>>();
	

	_244920148_StructLitExprModel(void) = default;

	inline bool operator==(_244920148_StructLitExprModel _other) {
		return 
			this->_field_strct == _other._field_strct &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_244920148_StructLitExprModel _other) { return !this->operator==(_other); }


};
struct _244920335_AllocStructLitExprModel {
	jule::Ptr<_244920148_StructLitExprModel> _field_lit = jule::Ptr<_244920148_StructLitExprModel>();
	

	_244920335_AllocStructLitExprModel(void) = default;

	inline bool operator==(_244920335_AllocStructLitExprModel _other) {
		return 
			this->_field_lit == _other._field_lit;
	}

	inline bool operator!=(_244920335_AllocStructLitExprModel _other) { return !this->operator==(_other); }


};
struct _244920522_CastingExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2455e1027_TypeKind> _field_expr_kind = jule::Ptr<_2455e1027_TypeKind>();
	

	_244920522_CastingExprModel(void) = default;

	inline bool operator==(_244920522_CastingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_kind == _other._field_kind &&
			this->_field_expr_kind == _other._field_expr_kind;
	}

	inline bool operator!=(_244920522_CastingExprModel _other) { return !this->operator==(_other); }


};
struct _24492070e_FnCallExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2449299b0_FnIns> _field_func = jule::Ptr<_2449299b0_FnIns>();
	jule::Bool _field_is_co = jule::Bool();
	jule::Any _field_expr = jule::Any();
	jule::Slice<jule::Any> _field_args = jule::Slice<jule::Any>();
	jule::Ptr<_24552937d_Scope> _field_except = jule::Ptr<_24552937d_Scope>();
	jule::Bool _field_assigned = jule::Bool();
	

	_24492070e_FnCallExprModel(void) = default;

	inline bool operator==(_24492070e_FnCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_func == _other._field_func &&
			this->_field_is_co == _other._field_is_co &&
			this->_field_expr == _other._field_expr &&
			this->_field_args == _other._field_args &&
			this->_field_except == _other._field_except &&
			this->_field_assigned == _other._field_assigned;
	}

	inline bool operator!=(_24492070e_FnCallExprModel _other) { return !this->operator==(_other); }


};
struct _2449208eb_SliceExprModel {
	jule::Ptr<_2455e1027_TypeKind> _field_elem_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();
	

	_2449208eb_SliceExprModel(void) = default;

	inline bool operator==(_2449208eb_SliceExprModel _other) {
		return 
			this->_field_elem_kind == _other._field_elem_kind &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_2449208eb_SliceExprModel _other) { return !this->operator==(_other); }


};
struct _244920ad8_IndexingExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2455b5051_Data> _field_expr = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2455b5051_Data> _field_index = jule::Ptr<_2455b5051_Data>();
	

	_244920ad8_IndexingExprModel(void) = default;

	inline bool operator==(_244920ad8_IndexingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_index == _other._field_index;
	}

	inline bool operator!=(_244920ad8_IndexingExprModel _other) { return !this->operator==(_other); }


};
struct _244920cc5_AnonFnExprModel {
	jule::Ptr<_2449299b0_FnIns> _field_func = jule::Ptr<_2449299b0_FnIns>();
	jule::Bool _field_global = jule::Bool();
	

	_244920cc5_AnonFnExprModel(void) = default;

	inline bool operator==(_244920cc5_AnonFnExprModel _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_global == _other._field_global;
	}

	inline bool operator!=(_244920cc5_AnonFnExprModel _other) { return !this->operator==(_other); }


};
struct _244920eb2_KeyValPairExprModel {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();
	

	_244920eb2_KeyValPairExprModel(void) = default;

	inline bool operator==(_244920eb2_KeyValPairExprModel _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_244920eb2_KeyValPairExprModel _other) { return !this->operator==(_other); }


};
struct _24492119e_MapExprModel {
	jule::Ptr<_2455e1027_TypeKind> _field_key_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2455e1027_TypeKind> _field_val_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Slice<jule::Ptr<_244920eb2_KeyValPairExprModel>> _field_entries = jule::Slice<jule::Ptr<_244920eb2_KeyValPairExprModel>>();
	

	_24492119e_MapExprModel(void) = default;

	inline bool operator==(_24492119e_MapExprModel _other) {
		return 
			this->_field_key_kind == _other._field_key_kind &&
			this->_field_val_kind == _other._field_val_kind &&
			this->_field_entries == _other._field_entries;
	}

	inline bool operator!=(_24492119e_MapExprModel _other) { return !this->operator==(_other); }


};
struct _24492138b_SlicingExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	

	_24492138b_SlicingExprModel(void) = default;

	inline bool operator==(_24492138b_SlicingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_24492138b_SlicingExprModel _other) { return !this->operator==(_other); }


};
struct _244921578_TraitSubIdentExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_244926d0e_Fn> _field_method = jule::Ptr<_244926d0e_Fn>();
	jule::Ptr<_24547ec51_Trait> _field_trt = jule::Ptr<_24547ec51_Trait>();
	

	_244921578_TraitSubIdentExprModel(void) = default;

	inline bool operator==(_244921578_TraitSubIdentExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_method == _other._field_method &&
			this->_field_trt == _other._field_trt;
	}

	inline bool operator!=(_244921578_TraitSubIdentExprModel _other) { return !this->operator==(_other); }


};
struct _244921996_StructSubIdentExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2455b5051_Data> _field_expr = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2455e1027_TypeKind> _field_expr_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2449299b0_FnIns> _field_method = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_244851079_FieldIns> _field_field = jule::Ptr<_244851079_FieldIns>();
	

	_244921996_StructSubIdentExprModel(void) = default;

	inline bool operator==(_244921996_StructSubIdentExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_expr_kind == _other._field_expr_kind &&
			this->_field_method == _other._field_method &&
			this->_field_field == _other._field_field;
	}

	inline bool operator!=(_244921996_StructSubIdentExprModel _other) { return !this->operator==(_other); }


};
struct _244921b83_StructStaticIdentExprModel {
	jule::Ptr<_244874c5c_StructIns> _field_structure = jule::Ptr<_244874c5c_StructIns>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_2449299b0_FnIns> _field_method = jule::Ptr<_2449299b0_FnIns>();
	

	_244921b83_StructStaticIdentExprModel(void) = default;

	inline bool operator==(_244921b83_StructStaticIdentExprModel _other) {
		return 
			this->_field_structure == _other._field_structure &&
			this->_field_expr == _other._field_expr &&
			this->_field_method == _other._field_method;
	}

	inline bool operator!=(_244921b83_StructStaticIdentExprModel _other) { return !this->operator==(_other); }


};
struct _244921d70_ArrayExprModel {
	jule::Ptr<_2455ebd8a_Arr> _field_kind = jule::Ptr<_2455ebd8a_Arr>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();
	

	_244921d70_ArrayExprModel(void) = default;

	inline bool operator==(_244921d70_ArrayExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_244921d70_ArrayExprModel _other) { return !this->operator==(_other); }


};
struct _24492205c_CommonIdentExprModel {
	jule::Str _field_ident = jule::Str();
	

	_24492205c_CommonIdentExprModel(void) = default;

	inline bool operator==(_24492205c_CommonIdentExprModel _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_24492205c_CommonIdentExprModel _other) { return !this->operator==(_other); }


};
struct _244922249_CommonSubIdentExprModel {
	jule::Ptr<_2455e1027_TypeKind> _field_expr_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	

	_244922249_CommonSubIdentExprModel(void) = default;

	inline bool operator==(_244922249_CommonSubIdentExprModel _other) {
		return 
			this->_field_expr_kind == _other._field_expr_kind &&
			this->_field_expr == _other._field_expr &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_244922249_CommonSubIdentExprModel _other) { return !this->operator==(_other); }


};
struct _244922436_TupleExprModel {
	jule::Slice<jule::Ptr<_2455b5051_Data>> _field_datas = jule::Slice<jule::Ptr<_2455b5051_Data>>();
	

	_244922436_TupleExprModel(void) = default;

	inline bool operator==(_244922436_TupleExprModel _other) {
		return 
			this->_field_datas == _other._field_datas;
	}

	inline bool operator!=(_244922436_TupleExprModel _other) { return !this->operator==(_other); }


};
struct _244922623_BuiltinOutCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();
	

	_244922623_BuiltinOutCallExprModel(void) = default;

	inline bool operator==(_244922623_BuiltinOutCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_debug == _other._field_debug;
	}

	inline bool operator!=(_244922623_BuiltinOutCallExprModel _other) { return !this->operator==(_other); }


};
struct _244922810_BuiltinOutlnCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();
	

	_244922810_BuiltinOutlnCallExprModel(void) = default;

	inline bool operator==(_244922810_BuiltinOutlnCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_debug == _other._field_debug;
	}

	inline bool operator!=(_244922810_BuiltinOutlnCallExprModel _other) { return !this->operator==(_other); }


};
struct _2449229ec_BuiltinCloneCallExprModel {
	jule::Any _field_expr = jule::Any();
	

	_2449229ec_BuiltinCloneCallExprModel(void) = default;

	inline bool operator==(_2449229ec_BuiltinCloneCallExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_2449229ec_BuiltinCloneCallExprModel _other) { return !this->operator==(_other); }


};
struct _244922bd9_BuiltinNewCallExprModel {
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Any _field_init = jule::Any();
	

	_244922bd9_BuiltinNewCallExprModel(void) = default;

	inline bool operator==(_244922bd9_BuiltinNewCallExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_init == _other._field_init;
	}

	inline bool operator!=(_244922bd9_BuiltinNewCallExprModel _other) { return !this->operator==(_other); }


};
struct _244922dc6_BuiltinPanicCallExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_expr = jule::Any();
	

	_244922dc6_BuiltinPanicCallExprModel(void) = default;

	inline bool operator==(_244922dc6_BuiltinPanicCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_244922dc6_BuiltinPanicCallExprModel _other) { return !this->operator==(_other); }


};
struct _2449230b3_BuiltinAssertCallExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_log = jule::Str();
	

	_2449230b3_BuiltinAssertCallExprModel(void) = default;

	inline bool operator==(_2449230b3_BuiltinAssertCallExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_log == _other._field_log;
	}

	inline bool operator!=(_2449230b3_BuiltinAssertCallExprModel _other) { return !this->operator==(_other); }


};
struct _2449232a0_BuiltinMakeCallExprModel {
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Any _field_len = jule::Any();
	jule::Any _field_cap = jule::Any();
	

	_2449232a0_BuiltinMakeCallExprModel(void) = default;

	inline bool operator==(_2449232a0_BuiltinMakeCallExprModel _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_len == _other._field_len &&
			this->_field_cap == _other._field_cap;
	}

	inline bool operator!=(_2449232a0_BuiltinMakeCallExprModel _other) { return !this->operator==(_other); }


};
struct _24492348c_BuiltinAppendCallExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_elements = jule::Any();
	

	_24492348c_BuiltinAppendCallExprModel(void) = default;

	inline bool operator==(_24492348c_BuiltinAppendCallExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_elements == _other._field_elements;
	}

	inline bool operator!=(_24492348c_BuiltinAppendCallExprModel _other) { return !this->operator==(_other); }


};
struct _244923679_BuiltinCopyCallExprModel {
	jule::Ptr<_2455b5051_Data> _field_dest = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2455b5051_Data> _field_src = jule::Ptr<_2455b5051_Data>();
	

	_244923679_BuiltinCopyCallExprModel(void) = default;

	inline bool operator==(_244923679_BuiltinCopyCallExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_src == _other._field_src;
	}

	inline bool operator!=(_244923679_BuiltinCopyCallExprModel _other) { return !this->operator==(_other); }


};
struct _244923866_BuiltinErrorCallExprModel {
	jule::Ptr<_2449299b0_FnIns> _field_func = jule::Ptr<_2449299b0_FnIns>();
	jule::Any _field_err = jule::Any();
	

	_244923866_BuiltinErrorCallExprModel(void) = default;

	inline bool operator==(_244923866_BuiltinErrorCallExprModel _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_err == _other._field_err;
	}

	inline bool operator!=(_244923866_BuiltinErrorCallExprModel _other) { return !this->operator==(_other); }


};
struct _244921765_SizeofExprModel {
	jule::Any _field_expr = jule::Any();
	

	_244921765_SizeofExprModel(void) = default;

	inline bool operator==(_244921765_SizeofExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_244921765_SizeofExprModel _other) { return !this->operator==(_other); }


};
struct _244923ec6_AlignofExprModel {
	jule::Any _field_expr = jule::Any();
	

	_244923ec6_AlignofExprModel(void) = default;

	inline bool operator==(_244923ec6_AlignofExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_244923ec6_AlignofExprModel _other) { return !this->operator==(_other); }


};
struct _2449241b3_RuneExprModel {
	jule::I32 _field_code = jule::I32();
	

	_2449241b3_RuneExprModel(void) = default;

	inline bool operator==(_2449241b3_RuneExprModel _other) {
		return 
			this->_field_code == _other._field_code;
	}

	inline bool operator!=(_2449241b3_RuneExprModel _other) { return !this->operator==(_other); }


};
struct _2449243a0_IntegratedToStrExprModel {
	jule::Any _field_expr = jule::Any();
	

	_2449243a0_IntegratedToStrExprModel(void) = default;

	inline bool operator==(_2449243a0_IntegratedToStrExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_2449243a0_IntegratedToStrExprModel _other) { return !this->operator==(_other); }


};
struct _24492458c_BackendEmitExprModel {
	jule::Str _field_code = jule::Str();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();
	

	_24492458c_BackendEmitExprModel(void) = default;

	inline bool operator==(_24492458c_BackendEmitExprModel _other) {
		return 
			this->_field_code == _other._field_code &&
			this->_field_exprs == _other._field_exprs;
	}

	inline bool operator!=(_24492458c_BackendEmitExprModel _other) { return !this->operator==(_other); }


};
struct _244924779_FreeExprModel {
	jule::Any _field_expr = jule::Any();
	

	_244924779_FreeExprModel(void) = default;

	inline bool operator==(_244924779_FreeExprModel _other) {
		return 
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_244924779_FreeExprModel _other) { return !this->operator==(_other); }


};
struct _244924d0c_RetType {
	jule::Ptr<_2455e5180_TypeSymbol> _field_kind = jule::Ptr<_2455e5180_TypeSymbol>();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_idents = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	

	_244924d0c_RetType(void) = default;

	inline bool operator==(_244924d0c_RetType _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_idents == _other._field_idents;
	}

	inline bool operator!=(_244924d0c_RetType _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_244928ae1_ParamIns> _24492588a_instance(jule::Ptr<_2449254c2_Param>);
inline jule::Bool _244925aee_is_self(_2449254c2_Param*);
inline jule::Bool _244925d63_is_ref(_2449254c2_Param*);
struct _2449254c2_Param {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_2455e5180_TypeSymbol> _field_kind = jule::Ptr<_2455e5180_TypeSymbol>();
	jule::Str _field_ident = jule::Str();
	

	_2449254c2_Param(void) = default;

	inline bool operator==(_2449254c2_Param _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_2449254c2_Param _other) { return !this->operator==(_other); }


};
inline jule::Bool _244927271_is_void(_244926d0e_Fn*);
inline jule::Bool _2449274d5_is_method(_244926d0e_Fn*);
inline jule::Bool _244927749_is_entry_point(_244926d0e_Fn*);
inline jule::Bool _2449279ad_is_init(_244926d0e_Fn*);
inline jule::Bool _244927c22_is_anon(_244926d0e_Fn*);
inline jule::Bool _244927e86_any_var(_244926d0e_Fn*);
inline jule::Ptr<_2449299b0_FnIns> _2449281ea_instance_force(jule::Ptr<_244926d0e_Fn>);
inline jule::Ptr<_2449299b0_FnIns> _24492845e_instance(jule::Ptr<_244926d0e_Fn>);
inline jule::Ptr<_2449299b0_FnIns> _244928739_append_instance(_244926d0e_Fn*, jule::Ptr<_2449299b0_FnIns>&);
struct _244926d0e_Fn {
	jule::Ptr<_24555100e_Sema> _field_sema = jule::Ptr<_24555100e_Sema>();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>();
	jule::Ptr<_244924d0c_RetType> _field_result = jule::Ptr<_244924d0c_RetType>();
	jule::Slice<jule::Ptr<_2449254c2_Param>> _field_params = jule::Slice<jule::Ptr<_2449254c2_Param>>();
	jule::Ptr<_244848912_Struct> _field_owner = jule::Ptr<_244848912_Struct>();
	jule::Slice<jule::Ptr<_2449299b0_FnIns>> _field_instances = jule::Slice<jule::Ptr<_2449299b0_FnIns>>();
	

	_244926d0e_Fn(void) = default;

	inline bool operator==(_244926d0e_Fn _other) {
		return 
			this->_field_sema == _other._field_sema &&
			this->_field_token == _other._field_token &&
			this->_field_global == _other._field_global &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_statically == _other._field_statically &&
			this->_field_exceptional == _other._field_exceptional &&
			this->_field_ident == _other._field_ident &&
			this->_field_directives == _other._field_directives &&
			this->_field_scope == _other._field_scope &&
			this->_field_generics == _other._field_generics &&
			this->_field_result == _other._field_result &&
			this->_field_params == _other._field_params &&
			this->_field_owner == _other._field_owner &&
			this->_field_instances == _other._field_instances;
	}

	inline bool operator!=(_244926d0e_Fn _other) { return !this->operator==(_other); }


};
inline jule::Str _244928eba_to_str(_244928ae1_ParamIns*);
struct _244928ae1_ParamIns {
	jule::Ptr<_2449254c2_Param> _field_decl = jule::Ptr<_2449254c2_Param>();
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	

	_244928ae1_ParamIns(void) = default;

	inline bool operator==(_244928ae1_ParamIns _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_244928ae1_ParamIns _other) { return !this->operator==(_other); }


};
inline jule::Str _244929ce0_to_str(_2449299b0_FnIns*);
inline jule::Bool _24492a0ed_equals(jule::Ptr<_2449299b0_FnIns>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Bool _24492a560_equals_fn(jule::Ptr<_2449299b0_FnIns>, jule::Ptr<_2449299b0_FnIns>&);
inline jule::Bool _24492a86d_equals_trait(jule::Ptr<_2449299b0_FnIns>, jule::Ptr<_2449299b0_FnIns>&);
inline jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _24492aad2_types(_2449299b0_FnIns*);
inline jule::Bool _24492ad46_is_builtin(_2449299b0_FnIns*);
inline jule::Bool _24492b0aa_is_anon(_2449299b0_FnIns*);
inline jule::Bool _24492b3b8_same(_2449299b0_FnIns*, jule::Ptr<_2449299b0_FnIns>);
inline jule::Str _24492b6c6_get_kind_str(_2449299b0_FnIns*, jule::Bool);
struct _2449299b0_FnIns {
	jule::Ptr<_244874c5c_StructIns> _field_owner = jule::Ptr<_244874c5c_StructIns>();
	jule::Ptr<_244926d0e_Fn> _field_decl = jule::Ptr<_244926d0e_Fn>();
	jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>> _field_generics = jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>>();
	jule::Slice<jule::Ptr<_244928ae1_ParamIns>> _field_params = jule::Slice<jule::Ptr<_244928ae1_ParamIns>>();
	jule::Ptr<_2455e1027_TypeKind> _field_result = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	jule::Ptr<_24492c8b4_ReferenceStack> _field_refers = jule::Ptr<_24492c8b4_ReferenceStack>();
	jule::Bool _field_anon = jule::Bool();
	jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)> _field_caller = jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>();
	jule::Bool _field_reloaded = jule::Bool();
	

	_2449299b0_FnIns(void) = default;

	inline bool operator==(_2449299b0_FnIns _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_decl == _other._field_decl &&
			this->_field_generics == _other._field_generics &&
			this->_field_params == _other._field_params &&
			this->_field_result == _other._field_result &&
			this->_field_scope == _other._field_scope &&
			this->_field_refers == _other._field_refers &&
			this->_field_anon == _other._field_anon &&
			this->_field_caller == _other._field_caller &&
			this->_field_reloaded == _other._field_reloaded;
	}

	inline bool operator!=(_2449299b0_FnIns _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_24492c8b4_ReferenceStack> static__24492cba0_new(void);
inline jule::I32 _24492d035_len(_24492c8b4_ReferenceStack*);
inline jule::Any _24492d343_at(_24492c8b4_ReferenceStack*, jule::I32);
inline void _24492d5b8_push(_24492c8b4_ReferenceStack*, jule::Any);
inline jule::Bool _229b19989_exist(_24492c8b4_ReferenceStack*, jule::Ptr<_2449299b0_FnIns>);
inline jule::Bool _229b2e284_exist(_24492c8b4_ReferenceStack*, jule::Ptr<_24556cc1d_Var>);
inline jule::Bool _229bbe214_exist(_24492c8b4_ReferenceStack*, jule::Ptr<_244874c5c_StructIns>);
inline jule::Bool _229e4ac54_exist(_24492c8b4_ReferenceStack*, jule::Ptr<_24547ec51_Trait>);
struct _24492c8b4_ReferenceStack {
	jule::Slice<jule::Any> _field_buffer = jule::Slice<jule::Any>();
	

	_24492c8b4_ReferenceStack(void) = default;

	inline bool operator==(_24492c8b4_ReferenceStack _other) {
		return 
			this->_field_buffer == _other._field_buffer;
	}

	inline bool operator!=(_24492c8b4_ReferenceStack _other) { return !this->operator==(_other); }


};
struct _24492dc7d_Pass {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_text = jule::Str();
	

	_24492dc7d_Pass(void) = default;

	inline bool operator==(_24492dc7d_Pass _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_text == _other._field_text;
	}

	inline bool operator!=(_24492dc7d_Pass _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_244933227_SymbolBuilder> _2449336cd_get_root(jule::Ptr<_244933227_SymbolBuilder>);
inline void _244933a96_push_err(_244933227_SymbolBuilder*, jule::Ptr<_2431e4523_Token>&, jule::Str, jule::Slice<jule::Any>);
inline void _244933e5e_push_err_text(_244933227_SymbolBuilder*, jule::Ptr<_2431e4523_Token>&, jule::Str, jule::Slice<jule::Any>);
inline void _24493427d_push_suggestion(_244933227_SymbolBuilder*, jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _244934657_check_cpp_use_decl_path(_244933227_SymbolBuilder*, jule::Ptr<_244870c25_UseDecl>&, jule::Str);
inline jule::Ptr<_245547db3_ImportInfo> _244934965_build_cpp_header_import(_244933227_SymbolBuilder*, jule::Ptr<_244870c25_UseDecl>&);
inline jule::Ptr<_245547db3_ImportInfo> _244934c84_build_std_import(_244933227_SymbolBuilder*, jule::Ptr<_244870c25_UseDecl>&);
inline jule::Ptr<_245547db3_ImportInfo> _244935092_build_ident_import(jule::Ptr<_244933227_SymbolBuilder>, jule::Ptr<_244870c25_UseDecl>&);
inline jule::Ptr<_245547db3_ImportInfo> _2449353a0_build_import(jule::Ptr<_244933227_SymbolBuilder>, jule::Ptr<_244870c25_UseDecl>&);
inline jule::Bool _2449356d0_check_duplicate_use_decl(_244933227_SymbolBuilder*, jule::Ptr<_245547db3_ImportInfo>&);
inline void _244935a10_impl_import_selections(_244933227_SymbolBuilder*, jule::Ptr<_245547db3_ImportInfo>&, jule::Ptr<_244870c25_UseDecl>&);
inline jule::Str _244935d1d_get_as_link_path(jule::Ptr<_244933227_SymbolBuilder>, jule::Str);
inline void _2449361d6_push_cycle_error(jule::Ptr<_244933227_SymbolBuilder>, jule::Ptr<_244933227_SymbolBuilder>&, jule::Str, jule::Str&);
inline void _24493659e_push_cross_cycle_error(jule::Ptr<_244933227_SymbolBuilder>, jule::Ptr<_244933227_SymbolBuilder>&, jule::Ptr<_245547db3_ImportInfo>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Bool _244936956_check_import_cycles(jule::Ptr<_244933227_SymbolBuilder>, jule::Ptr<_245547db3_ImportInfo>, jule::Ptr<_244870c25_UseDecl>&);
inline void _244936d41_check_package_accessibility(_244933227_SymbolBuilder*, jule::Ptr<_244870c25_UseDecl>&, jule::Str&, jule::Str&);
inline jule::Bool _244937209_import_package(jule::Ptr<_244933227_SymbolBuilder>, jule::Ptr<_245547db3_ImportInfo>&, jule::Ptr<_244870c25_UseDecl>&);
inline jule::Ptr<_245547db3_ImportInfo> _244937517_import_use_decl(jule::Ptr<_244933227_SymbolBuilder>, jule::Ptr<_244870c25_UseDecl>&);
inline void _2449376e3_import_use_decls(jule::Ptr<_244933227_SymbolBuilder>);
inline void _244937968_append_node(_244933227_SymbolBuilder*, _2448245e1_Node&);
inline void _244937b44_append_nodes(_244933227_SymbolBuilder*);
inline void _244937db9_push_directive_pass(_244933227_SymbolBuilder*, jule::Ptr<_2448249dc_Directive>&);
inline void _244938095_append_top_directives(_244933227_SymbolBuilder*);
inline void _244938271_build(jule::Ptr<_244933227_SymbolBuilder>);
struct _244933227_SymbolBuilder {
	jule::Ptr<_244933227_SymbolBuilder> _field_owner = jule::Ptr<_244933227_SymbolBuilder>();
	jule::Trait<_2455455b9_Importer> _field_importer = jule::Trait<_2455455b9_Importer>();
	jule::Slice<_242dbab89_Log> _field_errors = jule::Slice<_242dbab89_Log>();
	jule::Ptr<_244823942_Ast> _field_ast = jule::Ptr<_244823942_Ast>();
	jule::Ptr<_2455b02e3_SymbolTable> _field_table = jule::Ptr<_2455b02e3_SymbolTable>();
	

	_244933227_SymbolBuilder(void) = default;

	inline bool operator==(_244933227_SymbolBuilder _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_importer == _other._field_importer &&
			this->_field_errors == _other._field_errors &&
			this->_field_ast == _other._field_ast &&
			this->_field_table == _other._field_table;
	}

	inline bool operator!=(_244933227_SymbolBuilder _other) { return !this->operator==(_other); }


};
inline jule::Str _245480119_to_str(_24547ec51_Trait*);
inline jule::Bool _245480427_equals(jule::Ptr<_24547ec51_Trait>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Bool _24548078a_is_builtin(_24547ec51_Trait*);
inline jule::Ptr<_244926d0e_Fn> _245480a98_find_method(_24547ec51_Trait*, jule::Str);
struct _24547ec51_Trait {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Slice<jule::Ptr<_244926d0e_Fn>> _field_methods = jule::Slice<jule::Ptr<_244926d0e_Fn>>();
	jule::Slice<jule::Ptr<_244848912_Struct>> _field_implemented = jule::Slice<jule::Ptr<_244848912_Struct>>();
	

	_24547ec51_Trait(void) = default;

	inline bool operator==(_24547ec51_Trait _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_public == _other._field_public &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_methods == _other._field_methods &&
			this->_field_implemented == _other._field_implemented;
	}

	inline bool operator!=(_24547ec51_Trait _other) { return !this->operator==(_other); }


};
inline jule::Bool _245481802_auto_expr(_245481417_EnumItem*);
struct _245481417_EnumItem {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2455b60c9_Value> _field_value = jule::Ptr<_2455b60c9_Value>();
	

	_245481417_EnumItem(void) = default;

	inline bool operator==(_245481417_EnumItem _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_value == _other._field_value;
	}

	inline bool operator!=(_245481417_EnumItem _other) { return !this->operator==(_other); }


};
inline jule::Str _245482270_to_str(_245481e0c_Enum*);
inline jule::Bool _24548257d_equals(jule::Ptr<_245481e0c_Enum>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Ptr<_245481417_EnumItem> _2454829bd_find_item(_245481e0c_Enum*, jule::Str);
struct _245481e0c_Enum {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2455e5180_TypeSymbol> _field_kind = jule::Ptr<_2455e5180_TypeSymbol>();
	jule::Slice<jule::Ptr<_245481417_EnumItem>> _field_items = jule::Slice<jule::Ptr<_245481417_EnumItem>>();
	

	_245481e0c_Enum(void) = default;

	inline bool operator==(_245481e0c_Enum _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_items == _other._field_items;
	}

	inline bool operator!=(_245481e0c_Enum _other) { return !this->operator==(_other); }


};
struct _245482e41_TypeEnumItem {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2455e5180_TypeSymbol> _field_kind = jule::Ptr<_2455e5180_TypeSymbol>();
	

	_245482e41_TypeEnumItem(void) = default;

	inline bool operator==(_245482e41_TypeEnumItem _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_245482e41_TypeEnumItem _other) { return !this->operator==(_other); }


};
inline jule::Str _245483837_to_str(_245483507_TypeEnum*);
inline jule::Bool _245483b45_equals(jule::Ptr<_245483507_TypeEnum>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Ptr<_245482e41_TypeEnumItem> _245484041_find_item(_245483507_TypeEnum*, jule::Str);
struct _245483507_TypeEnum {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>> _field_items = jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>>();
	

	_245483507_TypeEnum(void) = default;

	inline bool operator==(_245483507_TypeEnum _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_public == _other._field_public &&
			this->_field_ident == _other._field_ident &&
			this->_field_items == _other._field_items;
	}

	inline bool operator!=(_245483507_TypeEnum _other) { return !this->operator==(_other); }


};
inline jule::Fn<jule::Bool(jule::Ptr<_24555100e_Sema>&,jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>&)> _2454aba6e_ready_fn(jule::Ptr<_24549b652_ConstraintChecker>);
inline jule::Bool _2454c42c3_ready_fi(jule::Ptr<_24549b652_ConstraintChecker>);
inline jule::Bool _2454de387_ready_si(jule::Ptr<_24549b652_ConstraintChecker>);
inline jule::Bool _2454e11d0_ready(jule::Ptr<_24549b652_ConstraintChecker>);
inline jule::Bool _2454e23bd_check(jule::Ptr<_24549b652_ConstraintChecker>);
struct _24549b652_ConstraintChecker {
	jule::Ptr<_24555100e_Sema> _field_s = jule::Ptr<_24555100e_Sema>();
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _field_generics_d = jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>();
	jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>> _field_generics = jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>>();
	jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _field_generics_a = jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>();
	jule::Ptr<_2449299b0_FnIns> _field_fi = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_244874c5c_StructIns> _field_si = jule::Ptr<_244874c5c_StructIns>();
	jule::Ptr<_2431e4523_Token> _field_et = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_uniq = jule::Bool();
	

	_24549b652_ConstraintChecker(void) = default;

	inline bool operator==(_24549b652_ConstraintChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_generics_d == _other._field_generics_d &&
			this->_field_generics == _other._field_generics &&
			this->_field_generics_a == _other._field_generics_a &&
			this->_field_fi == _other._field_fi &&
			this->_field_si == _other._field_si &&
			this->_field_et == _other._field_et &&
			this->_field_uniq == _other._field_uniq;
	}

	inline bool operator!=(_24549b652_ConstraintChecker _other) { return !this->operator==(_other); }


};
inline jule::Bool _2454ea75b_is_trait_impl(_24551aa45_Impl*);
inline jule::Bool _2454eaea9_is_struct_impl(_24551aa45_Impl*);
struct _24551aa45_Impl {
	jule::Ptr<_2448581d5_TypeDecl> _field_base = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_2448581d5_TypeDecl> _field_dest = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Slice<jule::Ptr<_244926d0e_Fn>> _field_methods = jule::Slice<jule::Ptr<_244926d0e_Fn>>();
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_statics = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	

	_24551aa45_Impl(void) = default;

	inline bool operator==(_24551aa45_Impl _other) {
		return 
			this->_field_base == _other._field_base &&
			this->_field_dest == _other._field_dest &&
			this->_field_methods == _other._field_methods &&
			this->_field_statics == _other._field_statics;
	}

	inline bool operator!=(_24551aa45_Impl _other) { return !this->operator==(_other); }


};
struct _24552937d_Scope {
	jule::Ptr<_24552937d_Scope> _field_parent = jule::Ptr<_24552937d_Scope>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();
	

	_24552937d_Scope(void) = default;

	inline bool operator==(_24552937d_Scope _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_deferred == _other._field_deferred &&
			this->_field_stmts == _other._field_stmts;
	}

	inline bool operator!=(_24552937d_Scope _other) { return !this->operator==(_other); }


};
struct _245529779_If {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	

	_245529779_If(void) = default;

	inline bool operator==(_245529779_If _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_245529779_If _other) { return !this->operator==(_other); }


};
struct _245529a65_Else {
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	

	_245529a65_Else(void) = default;

	inline bool operator==(_245529a65_Else _other) {
		return 
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_245529a65_Else _other) { return !this->operator==(_other); }


};
struct _245529e61_Conditional {
	jule::Slice<jule::Ptr<_245529779_If>> _field_elifs = jule::Slice<jule::Ptr<_245529779_If>>();
	jule::Ptr<_245529a65_Else> _field_default = jule::Ptr<_245529a65_Else>();
	

	_245529e61_Conditional(void) = default;

	inline bool operator==(_245529e61_Conditional _other) {
		return 
			this->_field_elifs == _other._field_elifs &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_245529e61_Conditional _other) { return !this->operator==(_other); }


};
struct _24552a24c_InfIter {
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	

	_24552a24c_InfIter(void) = default;

	inline bool operator==(_24552a24c_InfIter _other) {
		return 
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_24552a24c_InfIter _other) { return !this->operator==(_other); }


};
inline jule::Bool _24552aa66_is_while_next(_24552a6c0_WhileIter*);
struct _24552a6c0_WhileIter {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	

	_24552a6c0_WhileIter(void) = default;

	inline bool operator==(_24552a6c0_WhileIter _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_next == _other._field_next &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_24552a6c0_WhileIter _other) { return !this->operator==(_other); }


};
struct _24552b0a5_RangeIter {
	jule::Ptr<_2455b5051_Data> _field_expr = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	jule::Ptr<_24556cc1d_Var> _field_key_a = jule::Ptr<_24556cc1d_Var>();
	jule::Ptr<_24556cc1d_Var> _field_key_b = jule::Ptr<_24556cc1d_Var>();
	

	_24552b0a5_RangeIter(void) = default;

	inline bool operator==(_24552b0a5_RangeIter _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_scope == _other._field_scope &&
			this->_field_key_a == _other._field_key_a &&
			this->_field_key_b == _other._field_key_b;
	}

	inline bool operator!=(_24552b0a5_RangeIter _other) { return !this->operator==(_other); }


};
struct _24552b4a1_ContSt {
	jule::Uintptr _field_it = jule::Uintptr();
	

	_24552b4a1_ContSt(void) = default;

	inline bool operator==(_24552b4a1_ContSt _other) {
		return 
			this->_field_it == _other._field_it;
	}

	inline bool operator!=(_24552b4a1_ContSt _other) { return !this->operator==(_other); }


};
struct _24552b858_BreakSt {
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_mtch = jule::Uintptr();
	

	_24552b858_BreakSt(void) = default;

	inline bool operator==(_24552b858_BreakSt _other) {
		return 
			this->_field_it == _other._field_it &&
			this->_field_mtch == _other._field_mtch;
	}

	inline bool operator!=(_24552b858_BreakSt _other) { return !this->operator==(_other); }


};
struct _24552bb44_Label {
	jule::Str _field_ident = jule::Str();
	

	_24552bb44_Label(void) = default;

	inline bool operator==(_24552bb44_Label _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_24552bb44_Label _other) { return !this->operator==(_other); }


};
struct _24552be30_GotoSt {
	jule::Str _field_ident = jule::Str();
	

	_24552be30_GotoSt(void) = default;

	inline bool operator==(_24552be30_GotoSt _other) {
		return 
			this->_field_ident == _other._field_ident;
	}

	inline bool operator!=(_24552be30_GotoSt _other) { return !this->operator==(_other); }


};
struct _24552c2d7_Postfix {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();
	

	_24552c2d7_Postfix(void) = default;

	inline bool operator==(_24552c2d7_Postfix _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_24552c2d7_Postfix _other) { return !this->operator==(_other); }


};
struct _24552c75a_Assign {
	jule::Ptr<_24491e895_OperandExprModel> _field_l = jule::Ptr<_24491e895_OperandExprModel>();
	jule::Ptr<_24491e895_OperandExprModel> _field_r = jule::Ptr<_24491e895_OperandExprModel>();
	jule::Ptr<_2431e4523_Token> _field_op = jule::Ptr<_2431e4523_Token>();
	

	_24552c75a_Assign(void) = default;

	inline bool operator==(_24552c75a_Assign _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_24552c75a_Assign _other) { return !this->operator==(_other); }


};
struct _24552cb12_MultiAssign {
	jule::Slice<jule::Any> _field_l = jule::Slice<jule::Any>();
	jule::Any _field_r = jule::Any();
	

	_24552cb12_MultiAssign(void) = default;

	inline bool operator==(_24552cb12_MultiAssign _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r;
	}

	inline bool operator!=(_24552cb12_MultiAssign _other) { return !this->operator==(_other); }


};
inline jule::Bool _24552d65c_is_generic_type_match(_24552d151_Match*);
struct _24552d151_Match {
	jule::Ptr<_2455b5051_Data> _field_expr = jule::Ptr<_2455b5051_Data>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Slice<jule::Ptr<_24552db9b_Case>> _field_cases = jule::Slice<jule::Ptr<_24552db9b_Case>>();
	jule::Ptr<_24552db9b_Case> _field_default = jule::Ptr<_24552db9b_Case>();
	

	_24552d151_Match(void) = default;

	inline bool operator==(_24552d151_Match _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_type_match == _other._field_type_match &&
			this->_field_cases == _other._field_cases &&
			this->_field_default == _other._field_default;
	}

	inline bool operator!=(_24552d151_Match _other) { return !this->operator==(_other); }


};
inline jule::Bool _24552de65_is_default(_24552db9b_Case*);
struct _24552db9b_Case {
	jule::Ptr<_24552d151_Match> _field_owner = jule::Ptr<_24552d151_Match>();
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	jule::Slice<jule::Ptr<_2455b5051_Data>> _field_exprs = jule::Slice<jule::Ptr<_2455b5051_Data>>();
	jule::Ptr<_24552db9b_Case> _field_next = jule::Ptr<_24552db9b_Case>();
	

	_24552db9b_Case(void) = default;

	inline bool operator==(_24552db9b_Case _other) {
		return 
			this->_field_owner == _other._field_owner &&
			this->_field_scope == _other._field_scope &&
			this->_field_exprs == _other._field_exprs &&
			this->_field_next == _other._field_next;
	}

	inline bool operator!=(_24552db9b_Case _other) { return !this->operator==(_other); }


};
struct _24552e251_FallSt {
	jule::Uintptr _field_dest_case = jule::Uintptr();
	

	_24552e251_FallSt(void) = default;

	inline bool operator==(_24552e251_FallSt _other) {
		return 
			this->_field_dest_case == _other._field_dest_case;
	}

	inline bool operator!=(_24552e251_FallSt _other) { return !this->operator==(_other); }


};
struct _24552e6c4_RetSt {
	jule::Ptr<_2449299b0_FnIns> _field_func = jule::Ptr<_2449299b0_FnIns>();
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_vars = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	jule::Any _field_expr = jule::Any();
	

	_24552e6c4_RetSt(void) = default;

	inline bool operator==(_24552e6c4_RetSt _other) {
		return 
			this->_field_func == _other._field_func &&
			this->_field_vars == _other._field_vars &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_24552e6c4_RetSt _other) { return !this->operator==(_other); }


};
struct _24552ecce_ScopeLabel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24552bb44_Label> _field_label = jule::Ptr<_24552bb44_Label>();
	jule::I32 _field_pos = jule::I32();
	jule::Ptr<_245531066_ScopeChecker> _field_scope = jule::Ptr<_245531066_ScopeChecker>();
	jule::Bool _field_used = jule::Bool();
	

	_24552ecce_ScopeLabel(void) = default;

	inline bool operator==(_24552ecce_ScopeLabel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_label == _other._field_label &&
			this->_field_pos == _other._field_pos &&
			this->_field_scope == _other._field_scope &&
			this->_field_used == _other._field_used;
	}

	inline bool operator!=(_24552ecce_ScopeLabel _other) { return !this->operator==(_other); }


};
struct _245530252_ScopeGoto {
	jule::Ptr<_244866028_GotoSt> _field_gt = jule::Ptr<_244866028_GotoSt>();
	jule::Ptr<_245531066_ScopeChecker> _field_scope = jule::Ptr<_245531066_ScopeChecker>();
	jule::I32 _field_pos = jule::I32();
	

	_245530252_ScopeGoto(void) = default;

	inline bool operator==(_245530252_ScopeGoto _other) {
		return 
			this->_field_gt == _other._field_gt &&
			this->_field_scope == _other._field_scope &&
			this->_field_pos == _other._field_pos;
	}

	inline bool operator!=(_245530252_ScopeGoto _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_245547db3_ImportInfo> _2455314b7_find_package(_245531066_ScopeChecker*, jule::Str);
inline jule::Ptr<_245547db3_ImportInfo> _2455317c5_select_package(_245531066_ScopeChecker*, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>);
inline jule::Ptr<_24556cc1d_Var> _245531b7c_find_var(_245531066_ScopeChecker*, jule::Str, jule::Bool);
inline jule::Ptr<_2455e0334_TypeAlias> _245532034_find_type_alias(_245531066_ScopeChecker*, jule::Str, jule::Bool);
inline jule::Ptr<_244848912_Struct> _2455323db_find_struct(_245531066_ScopeChecker*, jule::Str, jule::Bool);
inline jule::Ptr<_244926d0e_Fn> _245532793_find_fn(_245531066_ScopeChecker*, jule::Str, jule::Bool);
inline jule::Ptr<_24547ec51_Trait> _245532aa1_find_trait(_245531066_ScopeChecker*, jule::Str);
inline jule::Ptr<_245481e0c_Enum> _245532dae_find_enum(_245531066_ScopeChecker*, jule::Str);
inline jule::Ptr<_245483507_TypeEnum> _2455331bc_find_type_enum(_245531066_ScopeChecker*, jule::Str);
inline jule::Bool _2455334ec_is_unsafe(jule::Ptr<_245531066_ScopeChecker>);
inline jule::Bool _245533761_is_root(_245531066_ScopeChecker*);
inline void _24553393c_stop(_245531066_ScopeChecker*);
inline jule::Bool _245533ba1_stopped(_245531066_ScopeChecker*);
inline jule::Bool _245533e15_is_deferred(jule::Ptr<_245531066_ScopeChecker>);
inline jule::Ptr<_245531066_ScopeChecker> _245534179_get_root(jule::Ptr<_245531066_ScopeChecker>);
inline jule::Ptr<_245531066_ScopeChecker> _2455343dd_get_hard_root(jule::Ptr<_245531066_ScopeChecker>);
inline jule::Ptr<_24552bb44_Label> _2455346eb_find_label(_245531066_ScopeChecker*, jule::Str);
inline jule::Ptr<_24552ecce_ScopeLabel> _245534a09_find_label_scope(jule::Ptr<_245531066_ScopeChecker>, jule::Str);
inline jule::Ptr<_24552ecce_ScopeLabel> _245534d17_find_label_all(_245531066_ScopeChecker*, jule::Str);
inline jule::Bool _2455351be_is_duplicated_ident(_245531066_ScopeChecker*, jule::Uintptr, jule::Str);
inline void _245535444_check_var_decl(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486aec8_VarDecl>);
inline void _2455356b9_check_type_alias_decl(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486e839_TypeAliasDecl>);
inline jule::Ptr<_24552937d_Scope> _24553592d_get_child(_245531066_ScopeChecker*);
inline void _245535ce6_check_child_ssc(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244868503_ScopeTree>&, jule::Ptr<_24552937d_Scope>&, jule::Ptr<_245531066_ScopeChecker>&);
inline jule::Ptr<_24552937d_Scope> _24553619d_check_child_sc(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244868503_ScopeTree>&, jule::Ptr<_245531066_ScopeChecker>&);
inline jule::Ptr<_24552937d_Scope> _2455364ab_check_child(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244868503_ScopeTree>&);
inline void _245536731_check_anon_scope(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244868503_ScopeTree>);
inline void _245536a50_process_error_call(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244923866_BuiltinErrorCallExprModel>&, jule::Ptr<_2431e4523_Token>);
inline void _245536cc5_check_expr(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24485c706_Expr>);
inline void _24553704a_check_co_expr(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24485e2eb_CoExpr>);
inline jule::Ptr<_245529779_If> _245537358_check_if(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486d838_If>);
inline jule::Ptr<_245529a65_Else> _245537666_check_else(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486dbe0_Else>);
inline void _2455378db_check_conditional(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486e163_Conditional>);
inline void _245537d4d_check_iter_scope_ssc(jule::Ptr<_245531066_ScopeChecker>, jule::Uintptr, jule::Ptr<_244868503_ScopeTree>, jule::Ptr<_24552937d_Scope>&, jule::Ptr<_245531066_ScopeChecker>);
inline jule::Ptr<_24552937d_Scope> _24553829e_check_iter_scope_sc(jule::Ptr<_245531066_ScopeChecker>, jule::Uintptr, jule::Ptr<_244868503_ScopeTree>, jule::Ptr<_245531066_ScopeChecker>);
inline jule::Ptr<_24552937d_Scope> _245538656_check_iter_scope(jule::Ptr<_245531066_ScopeChecker>, jule::Uintptr, jule::Ptr<_244868503_ScopeTree>&);
inline void _2455388cb_check_inf_iter(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486b9e0_Iter>&);
inline void _245538b51_check_while_iter(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486b9e0_Iter>&);
inline void _245538dc6_check_range_iter(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486b9e0_Iter>&);
inline void _24553914b_check_iter(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486b9e0_Iter>);
inline jule::Bool _245539459_check_valid_cont_label(jule::Ptr<_245531066_ScopeChecker>, jule::Uintptr);
inline jule::Bool _245539789_check_valid_break_label(jule::Ptr<_245531066_ScopeChecker>, jule::Uintptr);
inline jule::Ptr<_24552b4a1_ContSt> _245539aa8_check_cont_valid_scope(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486d3b5_ContSt>);
inline void _245539d2d_check_cont(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486d3b5_ContSt>);
inline void _24553a0a3_check_label(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244865b71_LabelSt>);
inline void _24553a328_push_goto(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244866028_GotoSt>);
inline void _24553a59d_check_postfix(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244866e5d_AssignSt>);
inline jule::Bool _24553a8ab_is_new_assign_ident(_245531066_ScopeChecker*, jule::Str);
inline jule::Bool _24553ad2e_check_structure_assign_op(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_244866e5d_AssignSt>&, jule::Ptr<_2455b5051_Data>&);
inline void _24553b0b5_check_single_assign(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244866e5d_AssignSt>&);
inline void _24553b604___process_end_part_of_multi_assign(_245531066_ScopeChecker*, jule::Ptr<_24552cb12_MultiAssign>, jule::Ptr<_244866e5d_AssignSt>, jule::Ptr<_24486691e_AssignLeft>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2455b5051_Data>);
inline void _24553b879_check_ret_multi_assign(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244866e5d_AssignSt>&);
inline void _24553baee_check_multi_assign(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244866e5d_AssignSt>&);
inline void _24553bd74_check_assign_st(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244866e5d_AssignSt>);
inline jule::Ptr<_24552937d_Scope> _24553c22b_check_case_scope(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24552db9b_Case>&, jule::Ptr<_244868503_ScopeTree>&);
inline jule::Ptr<_24552db9b_Case> _24553c726_check_case(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24552d151_Match>, jule::I32, jule::Ptr<_24486ecac_Case>, jule::Ptr<_2455b5051_Data>);
inline void _24553cade_check_cases(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244870483_MatchCase>&, jule::Ptr<_24552d151_Match>, jule::Ptr<_2455b5051_Data>);
inline jule::Ptr<_24552db9b_Case> _24553ce96_check_default(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24552d151_Match>, jule::Ptr<_24486dbe0_Else>);
inline void _24553d21b_check_comptime_panic(_245531066_ScopeChecker*, jule::Ptr<_24552937d_Scope>&);
inline void _24553d53a_push_type_match(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24552d151_Match>, jule::Ptr<_244870483_MatchCase>&);
inline void _24553d7b0_check_type_match(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244870483_MatchCase>&);
inline void _24553da35_check_common_match(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244870483_MatchCase>&);
inline void _24553dcaa_check_match(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244870483_MatchCase>);
inline void _24553e030_check_fall(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244866314_FallSt>);
inline jule::Ptr<_24552b858_BreakSt> _24553e33d_check_break_with_label(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486d00d_BreakSt>);
inline jule::Ptr<_24552b858_BreakSt> _24553e64b_check_plain_break(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486d00d_BreakSt>);
inline void _24553e8c1_check_break(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486d00d_BreakSt>);
inline void _24553eb46_check_ret(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24486b380_RetSt>);
inline void _24553edbb_check_use_expr(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_24485d097_UseExpr>);
inline void _245540141_check_node(jule::Ptr<_245531066_ScopeChecker>, jule::Any&);
inline void _24554031c_check_result(jule::Ptr<_245531066_ScopeChecker>);
inline void _2455404e8_check_tree(jule::Ptr<_245531066_ScopeChecker>);
inline void _245540817_check_goto(_245531066_ScopeChecker*, jule::Ptr<_245530252_ScopeGoto>&, jule::Ptr<_24552ecce_ScopeLabel>&);
inline void _2455409e3_check_gotos(_245531066_ScopeChecker*);
inline void _245540bbe_check_labels(_245531066_ScopeChecker*);
inline void _245540d9a_check_vars(_245531066_ScopeChecker*);
inline void _245541076_check_aliases(_245531066_ScopeChecker*);
inline void _245541395_check(jule::Ptr<_245531066_ScopeChecker>, jule::Ptr<_244868503_ScopeTree>&, jule::Ptr<_24552937d_Scope>&);
inline jule::Ptr<_245531066_ScopeChecker> _245541609_new_child_checker(jule::Ptr<_245531066_ScopeChecker>);
struct _245531066_ScopeChecker {
	jule::Ptr<_2431e4523_Token> _field_called_from = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_24555100e_Sema> _field_s = jule::Ptr<_24555100e_Sema>();
	jule::Ptr<_2449299b0_FnIns> _field_owner = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_245531066_ScopeChecker> _field_parent = jule::Ptr<_245531066_ScopeChecker>();
	jule::I32 _field_child_index = jule::I32();
	jule::Ptr<_2455b02e3_SymbolTable> _field_table = jule::Ptr<_2455b02e3_SymbolTable>();
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	jule::Ptr<_244868503_ScopeTree> _field_tree = jule::Ptr<_244868503_ScopeTree>();
	jule::Ptr<_2449299b0_FnIns> _field_result = jule::Ptr<_2449299b0_FnIns>();
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_cse = jule::Uintptr();
	jule::Ptr<jule::Slice<jule::Ptr<_24552ecce_ScopeLabel>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_24552ecce_ScopeLabel>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_245530252_ScopeGoto>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_245530252_ScopeGoto>>>();
	jule::I32 _field_i = jule::I32();
	

	_245531066_ScopeChecker(void) = default;

	inline bool operator==(_245531066_ScopeChecker _other) {
		return 
			this->_field_called_from == _other._field_called_from &&
			this->_field_s == _other._field_s &&
			this->_field_owner == _other._field_owner &&
			this->_field_parent == _other._field_parent &&
			this->_field_child_index == _other._field_child_index &&
			this->_field_table == _other._field_table &&
			this->_field_scope == _other._field_scope &&
			this->_field_tree == _other._field_tree &&
			this->_field_result == _other._field_result &&
			this->_field_it == _other._field_it &&
			this->_field_cse == _other._field_cse &&
			this->_field_labels == _other._field_labels &&
			this->_field_gotos == _other._field_gotos &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_245531066_ScopeChecker _other) { return !this->operator==(_other); }


};
inline void _2455425e9_check_cdef(_2455421a9_DirectiveChecker*, jule::Ptr<_2448249dc_Directive>&);
inline void _24554286e_check_typedef(_2455421a9_DirectiveChecker*, jule::Ptr<_2448249dc_Directive>&);
inline void _245542ae4_check_derive(_2455421a9_DirectiveChecker*, jule::Ptr<_2448249dc_Directive>&);
inline void _245542d69_check_namespace(_2455421a9_DirectiveChecker*, jule::Ptr<_2448249dc_Directive>&);
inline void _2455430de_check_deprecated(_2455421a9_DirectiveChecker*, jule::Ptr<_2448249dc_Directive>&);
inline void _245543364_check_test(_2455421a9_DirectiveChecker*, jule::Ptr<_2448249dc_Directive>&);
inline void _2455435d9_check_directive(_2455421a9_DirectiveChecker*, jule::Ptr<_2448249dc_Directive>&);
inline void _2455437b5_check(_2455421a9_DirectiveChecker*);
struct _2455421a9_DirectiveChecker {
	jule::Ptr<_24555100e_Sema> _field_s = jule::Ptr<_24555100e_Sema>();
	jule::Ptr<jule::Slice<jule::Ptr<_2448249dc_Directive>>> _field_d = jule::Ptr<jule::Slice<jule::Ptr<_2448249dc_Directive>>>();
	jule::Any _field_o = jule::Any();
	

	_2455421a9_DirectiveChecker(void) = default;

	inline bool operator==(_2455421a9_DirectiveChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_d == _other._field_d &&
			this->_field_o == _other._field_o;
	}

	inline bool operator!=(_2455421a9_DirectiveChecker _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_245547db3_ImportInfo> _2455483d0_find_package(_245547db3_ImportInfo*, jule::Str);
inline jule::Ptr<_245547db3_ImportInfo> _2455486dd_select_package(_245547db3_ImportInfo*, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>);
inline jule::Ptr<_24556cc1d_Var> _245548a95_find_var(_245547db3_ImportInfo*, jule::Str, jule::Bool);
inline jule::Ptr<_2455e0334_TypeAlias> _245548e4c_find_type_alias(_245547db3_ImportInfo*, jule::Str, jule::Bool);
inline jule::Ptr<_244848912_Struct> _245549304_find_struct(_245547db3_ImportInfo*, jule::Str, jule::Bool);
inline jule::Ptr<_244926d0e_Fn> _2455496ab_find_fn(_245547db3_ImportInfo*, jule::Str, jule::Bool);
inline jule::Ptr<_24547ec51_Trait> _2455499b9_find_trait(_245547db3_ImportInfo*, jule::Str);
inline jule::Ptr<_245481e0c_Enum> _245549cc7_find_enum(_245547db3_ImportInfo*, jule::Str);
inline jule::Ptr<_245483507_TypeEnum> _24554a0d5_find_type_enum(_245547db3_ImportInfo*, jule::Str);
inline jule::Bool _24554a47b_is_lookupable(_245547db3_ImportInfo*, jule::Str);
inline jule::Bool _24554a789_exist_ident(_245547db3_ImportInfo*, jule::Str);
inline jule::Bool _24554aa20_is_accessible_via_selection(_245547db3_ImportInfo*);
struct _245547db3_ImportInfo {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_path = jule::Str();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_ident = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_duplicate = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	jule::Bool _field_import_all = jule::Bool();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_selected = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Ptr<_24554ad1c_Package> _field_package = jule::Ptr<_24554ad1c_Package>();
	jule::I32 _field_mod_id = jule::I32();
	

	_245547db3_ImportInfo(void) = default;

	inline bool operator==(_245547db3_ImportInfo _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_path == _other._field_path &&
			this->_field_link_path == _other._field_link_path &&
			this->_field_ident == _other._field_ident &&
			this->_field_alias == _other._field_alias &&
			this->_field_duplicate == _other._field_duplicate &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_std == _other._field_std &&
			this->_field_import_all == _other._field_import_all &&
			this->_field_selected == _other._field_selected &&
			this->_field_package == _other._field_package &&
			this->_field_mod_id == _other._field_mod_id;
	}

	inline bool operator!=(_245547db3_ImportInfo _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_245547db3_ImportInfo> _24554b2e5_find_package(_24554ad1c_Package*, jule::Str);
inline jule::Ptr<_245547db3_ImportInfo> _24554b603_select_package(_24554ad1c_Package*, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>);
inline jule::Ptr<_24556cc1d_Var> _24554b9aa_find_var(_24554ad1c_Package*, jule::Str, jule::Bool);
inline jule::Ptr<_2455e0334_TypeAlias> _24554bd62_find_type_alias(_24554ad1c_Package*, jule::Str, jule::Bool);
inline jule::Ptr<_244848912_Struct> _24554c219_find_struct(_24554ad1c_Package*, jule::Str, jule::Bool);
inline jule::Ptr<_244926d0e_Fn> _24554c5c1_find_fn(_24554ad1c_Package*, jule::Str, jule::Bool);
inline jule::Ptr<_24547ec51_Trait> _24554c8ce_find_trait(_24554ad1c_Package*, jule::Str);
inline jule::Ptr<_245481e0c_Enum> _24554cbdc_find_enum(_24554ad1c_Package*, jule::Str);
inline jule::Ptr<_245483507_TypeEnum> _24554ceea_find_type_enum(_24554ad1c_Package*, jule::Str);
struct _24554ad1c_Package {
	jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>();
	

	_24554ad1c_Package(void) = default;

	inline bool operator==(_24554ad1c_Package _other) {
		return 
			this->_field_files == _other._field_files;
	}

	inline bool operator!=(_24554ad1c_Package _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_245547db3_ImportInfo> _24555152b_find_package(_24555100e_Sema*, jule::Str);
inline jule::Ptr<_245547db3_ImportInfo> _245551839_select_package(_24555100e_Sema*, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>);
inline jule::Ptr<_24556cc1d_Var> _245551be1_find_var(_24555100e_Sema*, jule::Str, jule::Bool);
inline jule::Ptr<_2455e0334_TypeAlias> _245552098_find_type_alias(_24555100e_Sema*, jule::Str, jule::Bool);
inline jule::Ptr<_244848912_Struct> _245552450_find_struct(_24555100e_Sema*, jule::Str, jule::Bool);
inline jule::Ptr<_244926d0e_Fn> _245552807_find_fn(_24555100e_Sema*, jule::Str, jule::Bool);
inline jule::Ptr<_24547ec51_Trait> _245552b15_find_trait(_24555100e_Sema*, jule::Str);
inline jule::Ptr<_245481e0c_Enum> _245552e23_find_enum(_24555100e_Sema*, jule::Str);
inline jule::Ptr<_245483507_TypeEnum> _245553231_find_type_enum(_24555100e_Sema*, jule::Str);
inline jule::Bool _245553583_is_flag(_24555100e_Sema*, jule::I32);
inline void _245553808_set_current_file(_24555100e_Sema*, jule::Ptr<_2455b02e3_SymbolTable>);
inline void _245553bc1_push_err(_24555100e_Sema*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline void _245553ee0_push_suggestion(_24555100e_Sema*, jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _245554397_is_accessible_define(_24555100e_Sema*, jule::Bool, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _2455547e8_is_duplicated_ident(_24555100e_Sema*, jule::Uintptr, jule::Str, jule::Bool);
inline void _245554b17_check_directives(jule::Ptr<_24555100e_Sema>, jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Any);
inline jule::Bool _245555068_check_generic_quantity(_24555100e_Sema*, jule::I32, jule::I32, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _245555442_is_duplicated_import_selection(_24555100e_Sema*, jule::Uintptr, jule::Str);
inline jule::Any _24555580a_get_import_def(_24555100e_Sema*, jule::Str, jule::Ptr<_245547db3_ImportInfo>&);
inline jule::Bool _245555b3a_check_import_selections(_24555100e_Sema*, jule::Ptr<_245547db3_ImportInfo>&);
inline jule::Bool _245555e7b_is_use_alias_duplication(_24555100e_Sema*, jule::Ptr<_245547db3_ImportInfo>&);
inline jule::Bool _24555629a_check_import(_24555100e_Sema*, jule::Ptr<_245547db3_ImportInfo>&);
inline void _245556476_check_imports(_24555100e_Sema*);
inline void _245556652_impl_file_impls(jule::Ptr<_24555100e_Sema>);
inline void _24555682d_impl_impls(jule::Ptr<_24555100e_Sema>);
inline void _245556a09_check_enums(jule::Ptr<_24555100e_Sema>);
inline jule::Ptr<_2455e1027_TypeKind> _245557004_build_type_with_refers(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2448581d5_TypeDecl>&, jule::Trait<_24560bac0_Lookup>, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>, jule::Ptr<_2455ed73d_Referencer>);
inline jule::Bool _2455574ee_check_type_with_refers(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2455e5180_TypeSymbol>&, jule::Trait<_24560bac0_Lookup>, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>, jule::Ptr<_2455ed73d_Referencer>);
inline jule::Ptr<_24549b652_ConstraintChecker> _245557763_constraint_checker(jule::Ptr<_24555100e_Sema>);
inline jule::Bool _245557b1a_check_type(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2455e5180_TypeSymbol>&, jule::Trait<_24560bac0_Lookup>);
inline jule::Ptr<_2455e1027_TypeKind> _24555808d_build_type_with_generics(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2448581d5_TypeDecl>&, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>, jule::Ptr<_24492c8b4_ReferenceStack>);
inline jule::Ptr<_2455e1027_TypeKind> _2455583ac_build_type(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2448581d5_TypeDecl>&);
inline jule::Ptr<_2455e1027_TypeKind> _2455586ba_select_type(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2448581d5_TypeDecl>&);
inline jule::Ptr<_2455b6abe_Eval> _245558b1b_evalpd(jule::Ptr<_24555100e_Sema>, jule::Trait<_24560bac0_Lookup>, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_24556cc1d_Var>);
inline jule::Ptr<_2455b6abe_Eval> _245558ec3_evalp(jule::Ptr<_24555100e_Sema>, jule::Trait<_24560bac0_Lookup>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Ptr<_2455b6abe_Eval> _2455592d1_eval(jule::Ptr<_24555100e_Sema>, jule::Trait<_24560bac0_Lookup>);
inline jule::Bool _2455597cb_check_assign_type(jule::Ptr<_24555100e_Sema>, jule::Bool, jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _245559c4e_check_type_compatibility(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Ptr<_2455e1027_TypeKind> _24555a139_build_non_generic_type_kind(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2448581d5_TypeDecl>&, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>&);
inline void _24555a3e2_build_fn_non_generic_type_kinds(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2449299b0_FnIns>&);
inline jule::Ptr<_2449299b0_FnIns> _24555a733_get_trait_check_fn_kind(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244926d0e_Fn>&);
inline jule::Bool _24555ab95_check_constraints_fn(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2449299b0_FnIns>&, jule::Ptr<_2431e4523_Token>&, jule::Ptr<_2449299b0_FnIns>);
inline jule::Bool _24555b118_check_constraints_struct(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_2431e4523_Token>&, jule::Ptr<_244874c5c_StructIns>);
inline jule::Bool _24555b4d1_fn_environment(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2449299b0_FnIns>&, jule::Fn<jule::Bool(jule::Ptr<_24555100e_Sema>&,jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>&)>);
inline void _24555b756_check_fn_param_kind(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244928ae1_ParamIns>&);
inline jule::Bool _24555ba64_reload_fn_ins_types(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2449299b0_FnIns>);
inline jule::Bool _24555bee8_check_ref_validity_for_init_expr(jule::Ptr<_24555100e_Sema>, jule::Bool, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Bool _24555c5e2_check_validity_for_init_expr(jule::Ptr<_24555100e_Sema>, jule::Bool, jule::Bool, jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Bool _24555c999_check_type_alias_decl_kind(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2455e0334_TypeAlias>&, jule::Trait<_24560bac0_Lookup>);
inline void _24555ccc9_check_type_alias_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2455e0334_TypeAlias>&, jule::Trait<_24560bac0_Lookup>);
inline void _24555d071_check_type_alias_decl_dup(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2455e0334_TypeAlias>&);
inline jule::Bool _24555d2e6_check_type_alias_decls(jule::Ptr<_24555100e_Sema>);
inline void _2298278d9_check_enum_items_dup(_24555100e_Sema*, jule::Slice<jule::Ptr<_245481417_EnumItem>>);
inline void _22983320d_check_enum_items_dup(_24555100e_Sema*, jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>>);
inline void _24555d7e1_check_enum_items_str(jule::Ptr<_24555100e_Sema>, jule::Ptr<_245481e0c_Enum>&);
inline void _24555da66_check_enum_items_int(jule::Ptr<_24555100e_Sema>, jule::Ptr<_245481e0c_Enum>&);
inline void _24555dcdb_check_enum_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_245481e0c_Enum>&);
inline void _24555e061_check_type_enum_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_245483507_TypeEnum>&);
inline jule::Bool _24555e2c5_check_enum_decls(jule::Ptr<_24555100e_Sema>);
inline jule::Bool _24555e539_check_type_enum_decls(jule::Ptr<_24555100e_Sema>);
inline jule::Bool _24555e847_check_decl_generics(_24555100e_Sema*, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>&);
inline jule::Bool _24555eb77_check_fn_decl_params_dup(_24555100e_Sema*, jule::Ptr<_244926d0e_Fn>&);
inline jule::Bool _24555eeb8_check_fn_decl_result_dup(_24555100e_Sema*, jule::Ptr<_244926d0e_Fn>&);
inline void _245560271_check_fn_decl_prototype(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244926d0e_Fn>&);
inline void _245560529_check_trait_decl_method(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244926d0e_Fn>&);
inline void _2455607d2_check_trait_decl_methods(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24547ec51_Trait>&);
inline void _245560a68_check_trait_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24547ec51_Trait>&);
inline jule::Bool _245560ccc_check_trait_decls(jule::Ptr<_24555100e_Sema>);
inline jule::Bool _2455611a6_check_trait_impl_methods(_24555100e_Sema*, jule::Ptr<_24547ec51_Trait>&, jule::Ptr<_24551aa45_Impl>&);
inline jule::Bool _24556156e_impl_to_struct(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244848912_Struct>&, jule::Ptr<_24551aa45_Impl>&);
inline void _2455617e4_impl_trait(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24551aa45_Impl>&);
inline void _245561a69_impl_struct(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24551aa45_Impl>&);
inline void _245561cde_impl_impl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24551aa45_Impl>&);
inline void _24556210d_check_var_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24556cc1d_Var>&, jule::Trait<_24560bac0_Lookup>);
inline void _245562383_check_global_var_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24556cc1d_Var>&);
inline jule::Bool _2455625e7_check_global_decls(jule::Ptr<_24555100e_Sema>);
inline jule::Bool _2455629c1_check_struct_trait_impl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244848912_Struct>&, jule::Ptr<_24547ec51_Trait>&);
inline jule::Bool _245562ce0_check_struct_impls(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244848912_Struct>&);
inline jule::Bool _2455630ed_check_struct_fields(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244848912_Struct>&);
inline void _245563373_check_struct_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244848912_Struct>&);
inline jule::Bool _2455635d7_check_struct_decls(jule::Ptr<_24555100e_Sema>);
inline void _24556385c_check_fn_decl(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244926d0e_Fn>&);
inline jule::Bool _245563ac1_check_fn_decls(jule::Ptr<_24555100e_Sema>);
inline void _245563e89_push_cycle_error(_24555100e_Sema*, jule::Ptr<_244848912_Struct>&, jule::Ptr<_244848912_Struct>&, jule::Str&);
inline jule::Bool _2455643da_check_cross_cycle(_24555100e_Sema*, jule::Ptr<_244848912_Struct>&, jule::Ptr<_244848912_Struct>&, jule::Str&);
inline jule::Bool _24556486e_check_struct_derive_illegal_cycles(_24555100e_Sema*, jule::Str, jule::Ptr<_244848912_Struct>&, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _245564b9e_check_struct_ins_derive_clone(_24555100e_Sema*, jule::Ptr<_244874c5c_StructIns>);
inline void _245564d8b_check_package_decls(jule::Ptr<_24555100e_Sema>);
inline void _2455651cc_check_data_for_type_inference(_24555100e_Sema*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>&);
inline void _245565463_check_var(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24556cc1d_Var>&);
inline void _245565782_check_type_var(jule::Ptr<_24555100e_Sema>, jule::Ptr<_24556cc1d_Var>&, jule::Trait<_24560bac0_Lookup>);
inline void _24556595d_check_global_types(jule::Ptr<_24555100e_Sema>);
inline jule::Ptr<_2449299b0_FnIns> _245565d15_ready_to_check_fn(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_244926d0e_Fn>&);
inline void _245566134_check_type_method(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_244926d0e_Fn>&);
inline jule::Ptr<_2449299b0_FnIns> _245566585_check_struct_ins_op(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_244926d0e_Fn>&, jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>);
inline jule::Bool _24556693c_check_struct_env(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _245566ce4_precheck_struct_ins(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_2431e4523_Token>);
inline void _245567069_check_struct_ins(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>&);
inline void _2455672de_check_type_struct(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244848912_Struct>&);
inline void _2455674ba_check_struct_types(jule::Ptr<_24555100e_Sema>);
inline void _245567762_check_struct_ins_operators(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244874c5c_StructIns>);
inline void _2455679e8_precheck_struct_type(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244848912_Struct>&);
inline void _245567bc4_precheck_struct_types(jule::Ptr<_24555100e_Sema>);
inline void _245567e49_check_rets(_24555100e_Sema*, jule::Ptr<_2449299b0_FnIns>&);
inline void _245568268_check_fn_ins_sc(_24555100e_Sema*, jule::Ptr<_2449299b0_FnIns>&, jule::Ptr<_245531066_ScopeChecker>&);
inline void _245568587_check_fn_ins_caller(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2449299b0_FnIns>&, jule::Ptr<_2431e4523_Token>);
inline void _24556880c_check_fn_ins(jule::Ptr<_24555100e_Sema>, jule::Ptr<_2449299b0_FnIns>&);
inline void _245568a82_check_type_fn(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244926d0e_Fn>&);
inline void _245568d07_check_test_fn(_24555100e_Sema*, jule::Ptr<_2449299b0_FnIns>&);
inline void _24556907c_precheck_type_fn(jule::Ptr<_24555100e_Sema>, jule::Ptr<_244926d0e_Fn>&);
inline void _245569258_precheck_fn_types(jule::Ptr<_24555100e_Sema>);
inline void _245569434_check_fn_types(jule::Ptr<_24555100e_Sema>);
inline void _245569610_check_package_types(jule::Ptr<_24555100e_Sema>);
inline void _2455697db_set_file_sema_fields(jule::Ptr<_24555100e_Sema>);
inline void _2455699b7_set_sema_fields(jule::Ptr<_24555100e_Sema>);
inline void _245569c3c_check(jule::Ptr<_24555100e_Sema>, jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&);
struct _24555100e_Sema {
	jule::Slice<_242dbab89_Log> _field_errors = jule::Slice<_242dbab89_Log>();
	jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>();
	jule::Ptr<_2455b02e3_SymbolTable> _field_file = jule::Ptr<_2455b02e3_SymbolTable>();
	jule::I32 _field_flags = 0LL;
	

	_24555100e_Sema(void) = default;

	inline bool operator==(_24555100e_Sema _other) {
		return 
			this->_field_errors == _other._field_errors &&
			this->_field_files == _other._field_files &&
			this->_field_file == _other._field_file &&
			this->_field_flags == _other._field_flags;
	}

	inline bool operator!=(_24555100e_Sema _other) { return !this->operator==(_other); }


};
inline _24556a0e4_MissingRetChecker static__24556a4ac_new(void);
inline jule::Bool _24556a787_check_conditional(_24556a0e4_MissingRetChecker*, jule::Ptr<_245529e61_Conditional>);
inline jule::Bool _24556aa95_check_match(_24556a0e4_MissingRetChecker*, jule::Ptr<_24552d151_Match>);
inline jule::Bool _24556ada3_check_inf_iter(_24556a0e4_MissingRetChecker*, jule::Ptr<_24552a24c_InfIter>);
inline jule::Bool _24556b1b1_check_scope(_24556a0e4_MissingRetChecker*, jule::Ptr<_24552937d_Scope>);
inline jule::Bool _24556b4be_check(_24556a0e4_MissingRetChecker*, jule::Ptr<_24552937d_Scope>);
struct _24556a0e4_MissingRetChecker {
	jule::Slice<jule::Uintptr> _field_breaked = jule::Slice<jule::Uintptr>();
	jule::Bool _field_falled = jule::Bool();
	

	_24556a0e4_MissingRetChecker(void) = default;

	inline bool operator==(_24556a0e4_MissingRetChecker _other) {
		return 
			this->_field_breaked == _other._field_breaked &&
			this->_field_falled == _other._field_falled;
	}

	inline bool operator!=(_24556a0e4_MissingRetChecker _other) { return !this->operator==(_other); }


};
struct _24556bca5_IterRelation {
	jule::Ptr<_24556cc1d_Var> _field_range = jule::Ptr<_24556cc1d_Var>();
	

	_24556bca5_IterRelation(void) = default;

	inline bool operator==(_24556bca5_IterRelation _other) {
		return 
			this->_field_range == _other._field_range;
	}

	inline bool operator!=(_24556bca5_IterRelation _other) { return !this->operator==(_other); }


};
inline jule::Bool _24556d0c5_is_initialized(_24556cc1d_Var*);
inline jule::Bool _24556d339_is_type_inferred(_24556cc1d_Var*);
struct _24556cc1d_Var {
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_2455e5180_TypeSymbol> _field_kind = jule::Ptr<_2455e5180_TypeSymbol>();
	jule::Ptr<_2455b60c9_Value> _field_value = jule::Ptr<_2455b60c9_Value>();
	jule::Ptr<_24492c8b4_ReferenceStack> _field_refers = jule::Ptr<_24492c8b4_ReferenceStack>();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Ptr<_24556bca5_IterRelation> _field_iter_relation = jule::Ptr<_24556bca5_IterRelation>();
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_depends = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	

	_24556cc1d_Var(void) = default;

	inline bool operator==(_24556cc1d_Var _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_constant == _other._field_constant &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_public == _other._field_public &&
			this->_field_used == _other._field_used &&
			this->_field_statically == _other._field_statically &&
			this->_field_reference == _other._field_reference &&
			this->_field_kind == _other._field_kind &&
			this->_field_value == _other._field_value &&
			this->_field_refers == _other._field_refers &&
			this->_field_directives == _other._field_directives &&
			this->_field_iter_relation == _other._field_iter_relation &&
			this->_field_depends == _other._field_depends;
	}

	inline bool operator!=(_24556cc1d_Var _other) { return !this->operator==(_other); }


};
inline jule::Bool static__24556ddb7_dispose(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24556e15e_to_str(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24556e4a0_logical(jule::Ptr<_244926d0e_Fn>&, jule::Str);
inline jule::Bool static__24556e747_eq(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24556e9de_gt(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24556ec86_gt_eq(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24557002d_lt(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__2455702c5_lt_eq(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245570616_result(jule::Ptr<_244926d0e_Fn>&, jule::Str);
inline jule::Bool static__2455708ad_shl(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245570b55_shr(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245570dec_add(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245571194_sub(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24557143b_div(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__2455716d3_mul(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24557197a_mod(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245571c22_bit_and(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245571eb9_bit_or(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245572261_bit_xor(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__2455725a2_unary(jule::Ptr<_244926d0e_Fn>&, jule::Str);
inline jule::Bool static__245572849_neg(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245572ae1_pos(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245572d88_bit_not(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__2455731c9_assign(jule::Ptr<_244926d0e_Fn>&, jule::Str);
inline jule::Bool static__245573471_add_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245573718_sub_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__2455739b0_div_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245573c57_mul_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245573eee_mod_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245574296_shl_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__24557453d_shr_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__2455747d5_bit_or_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245574a7c_bit_and_assign(jule::Ptr<_244926d0e_Fn>);
inline jule::Bool static__245574d24_bit_xor_assign(jule::Ptr<_244926d0e_Fn>);
struct _24556d746_FuncPattern {
	

	_24556d746_FuncPattern(void) = default;

	inline bool operator==(_24556d746_FuncPattern _other) { return true; }

	inline bool operator!=(_24556d746_FuncPattern _other) { return !this->operator==(_other); }


};
inline void _24559e403_push_err(_24559ddd6_TypeCompatibilityChecker*, jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _24559e667_check_trait(_24559ddd6_TypeCompatibilityChecker*);
inline jule::Bool _24559e8cb_check_ptr(_24559ddd6_TypeCompatibilityChecker*);
inline jule::Bool _24559eb40_check_prim(_24559ddd6_TypeCompatibilityChecker*);
inline jule::Bool _24559eee7___type_enum(_24559ddd6_TypeCompatibilityChecker*, jule::Ptr<_245483507_TypeEnum>&, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a025b_check_type_enum(_24559ddd6_TypeCompatibilityChecker*);
inline jule::Bool _2455a04c0_check(_24559ddd6_TypeCompatibilityChecker*);
struct _24559ddd6_TypeCompatibilityChecker {
	jule::Ptr<_24555100e_Sema> _field_s = jule::Ptr<_24555100e_Sema>();
	jule::Ptr<_2455e1027_TypeKind> _field_dest = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2455e1027_TypeKind> _field_src = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2431e4523_Token> _field_error_token = jule::Ptr<_2431e4523_Token>();
	

	_24559ddd6_TypeCompatibilityChecker(void) = default;

	inline bool operator==(_24559ddd6_TypeCompatibilityChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_dest == _other._field_dest &&
			this->_field_src == _other._field_src &&
			this->_field_error_token == _other._field_error_token;
	}

	inline bool operator!=(_24559ddd6_TypeCompatibilityChecker _other) { return !this->operator==(_other); }


};
inline void _2455a0e71_push_err(_2455a0a0e_AssignTypeChecker*, jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _2455a11d5_check_validity(_2455a0a0e_AssignTypeChecker*);
inline jule::Bool _2455a1449_check_const(_2455a0a0e_AssignTypeChecker*);
inline jule::Bool _2455a16ad_is_prim(_2455a0a0e_AssignTypeChecker*);
inline jule::Bool _2455a1922_check_compatibility(_2455a0a0e_AssignTypeChecker*);
inline jule::Bool _2455a1b86_check(_2455a0a0e_AssignTypeChecker*);
struct _2455a0a0e_AssignTypeChecker {
	jule::Ptr<_24555100e_Sema> _field_s = jule::Ptr<_24555100e_Sema>();
	jule::Ptr<_2455e1027_TypeKind> _field_dest = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2455b5051_Data> _field_d = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2431e4523_Token> _field_error_token = jule::Ptr<_2431e4523_Token>();
	

	_2455a0a0e_AssignTypeChecker(void) = default;

	inline bool operator==(_2455a0a0e_AssignTypeChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_dest == _other._field_dest &&
			this->_field_d == _other._field_d &&
			this->_field_error_token == _other._field_error_token;
	}

	inline bool operator!=(_2455a0a0e_AssignTypeChecker _other) { return !this->operator==(_other); }


};
inline jule::Bool _2299c404c_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2299c3689_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2299c3ac9_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2299cb95b_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a2d63_annotate_constraint_map(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a31a4_annotate_constraint_tup(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a34c3_annotate_constraint_fn(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a3803_annotate_constraint_ident(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a3b22_annotate_constraint(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline void _2455a3e41_push_generic(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&, jule::I32);
inline jule::Bool _2455a424e_annotate_prim(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a455c_annotate_arr(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a486a_annotate_slc(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a4c22_check_map_key(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a5030_annotate_map(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a533d_annotate_fn(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a564b_annotate_ptr(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a5959_annotate_sptr(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a5c67_annotate_struct(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a6075_annotate_any(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a6383_annotate_kind(_2455a2428_DynamicTypeAnnotation*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2455a65e7_annotate(_2455a2428_DynamicTypeAnnotation*);
struct _2455a2428_DynamicTypeAnnotation {
	jule::Ptr<_2455b6abe_Eval> _field_e = jule::Ptr<_2455b6abe_Eval>();
	jule::Ptr<_2449299b0_FnIns> _field_f = jule::Ptr<_2449299b0_FnIns>();
	jule::Ptr<_244928ae1_ParamIns> _field_p = jule::Ptr<_244928ae1_ParamIns>();
	jule::Ptr<_2455b5051_Data> _field_a = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2431e4523_Token> _field_error_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2455e1027_TypeKind>* _field_k = nullptr;
	jule::Ptr<_2448581d5_TypeDecl> _field_c = jule::Ptr<_2448581d5_TypeDecl>();
	

	_2455a2428_DynamicTypeAnnotation(void) = default;

	inline bool operator==(_2455a2428_DynamicTypeAnnotation _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_f == _other._field_f &&
			this->_field_p == _other._field_p &&
			this->_field_a == _other._field_a &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_k == _other._field_k &&
			this->_field_c == _other._field_c;
	}

	inline bool operator!=(_2455a2428_DynamicTypeAnnotation _other) { return !this->operator==(_other); }


};
inline void _2455a731d_push_err_token(_2455a6cbd_FnCallArgChecker*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline void _2455a763c_push_err(_2455a6cbd_FnCallArgChecker*, jule::Str, jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_244928ae1_ParamIns>> _2455a78a1_get_params(_2455a6cbd_FnCallArgChecker*);
inline jule::Bool _2455a7bae_check_counts(_2455a6cbd_FnCallArgChecker*, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>&);
inline jule::Bool _2455a8110_check_arg(_2455a6cbd_FnCallArgChecker*, jule::Ptr<_244928ae1_ParamIns>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Bool _2455a84b7_push(_2455a6cbd_FnCallArgChecker*, jule::Ptr<_244928ae1_ParamIns>&, jule::Ptr<_24485c706_Expr>);
inline jule::Bool _2455a886e_push_variadic(_2455a6cbd_FnCallArgChecker*, jule::Ptr<_244928ae1_ParamIns>&, jule::I32);
inline jule::Bool _2455a8b7c_check_args(_2455a6cbd_FnCallArgChecker*, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>&);
inline jule::Bool _2455a8e13_check_dynamic_type_annotation(_2455a6cbd_FnCallArgChecker*);
inline jule::Bool _2455a9188_check(_2455a6cbd_FnCallArgChecker*);
struct _2455a6cbd_FnCallArgChecker {
	jule::Ptr<_2455b6abe_Eval> _field_e = jule::Ptr<_2455b6abe_Eval>();
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_args = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	jule::Ptr<_2431e4523_Token> _field_error_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_2449299b0_FnIns> _field_f = jule::Ptr<_2449299b0_FnIns>();
	jule::Bool _field_dynamic_annotation = jule::Bool();
	jule::Slice<jule::Any> _field_arg_models = jule::Slice<jule::Any>();
	

	_2455a6cbd_FnCallArgChecker(void) = default;

	inline bool operator==(_2455a6cbd_FnCallArgChecker _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_args == _other._field_args &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_f == _other._field_f &&
			this->_field_dynamic_annotation == _other._field_dynamic_annotation &&
			this->_field_arg_models == _other._field_arg_models;
	}

	inline bool operator!=(_2455a6cbd_FnCallArgChecker _other) { return !this->operator==(_other); }


};
inline void _2455a9bd3_push_err(_2455a96c7_StructLitChecker*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline void _2455aa002_push_suggestion(_2455a96c7_StructLitChecker*, jule::Str, jule::Slice<jule::Any>);
inline void _2455aa3ba_push_match(_2455a96c7_StructLitChecker*, jule::Ptr<_244851079_FieldIns>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>&);
inline void _2455aa6d9_check_pair(_2455a96c7_StructLitChecker*, jule::Ptr<_244862453_FieldExprPair>&, jule::Slice<jule::Ptr<_24485c706_Expr>>&);
inline jule::Bool _2455aa9e7_ready_exprs(_2455a96c7_StructLitChecker*, jule::Slice<jule::Ptr<_24485c706_Expr>>&);
inline void _2455aac6c_check(_2455a96c7_StructLitChecker*, jule::Slice<jule::Ptr<_24485c706_Expr>>&);
struct _2455a96c7_StructLitChecker {
	jule::Ptr<_2455b6abe_Eval> _field_e = jule::Ptr<_2455b6abe_Eval>();
	jule::Ptr<_2431e4523_Token> _field_error_token = jule::Ptr<_2431e4523_Token>();
	jule::Ptr<_244874c5c_StructIns> _field_s = jule::Ptr<_244874c5c_StructIns>();
	jule::Slice<jule::Ptr<_24491ee5b_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_24491ee5b_StructArgExprModel>>();
	

	_2455a96c7_StructLitChecker(void) = default;

	inline bool operator==(_2455a96c7_StructLitChecker _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_s == _other._field_s &&
			this->_field_args == _other._field_args;
	}

	inline bool operator!=(_2455a96c7_StructLitChecker _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_24556cc1d_Var> _2455ab751_build_var(_2455ab2ab_RangeChecker*, jule::Ptr<_24486aec8_VarDecl>&);
inline void _2455ab92c_set_size_key(_2455ab2ab_RangeChecker*);
inline void _2455abd17_check_range_expr_validity(_2455ab2ab_RangeChecker*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_24556cc1d_Var>&, jule::Ptr<_2455e1027_TypeKind>&);
inline void _2455ac004_check_slice(_2455ab2ab_RangeChecker*);
inline void _2455ac1d0_check_array(_2455ab2ab_RangeChecker*);
inline void _2455ac3ab_check_map_key_a(_2455ab2ab_RangeChecker*);
inline void _2455ac587_check_map_key_b(_2455ab2ab_RangeChecker*);
inline void _2455ac763_check_map(_2455ab2ab_RangeChecker*);
inline void _2455ac93e_check_str(_2455ab2ab_RangeChecker*);
inline jule::Bool _2455acba3_check(_2455ab2ab_RangeChecker*);
struct _2455ab2ab_RangeChecker {
	jule::Ptr<_245531066_ScopeChecker> _field_sc = jule::Ptr<_245531066_ScopeChecker>();
	jule::Ptr<_24486cb56_RangeKind> _field_rang = jule::Ptr<_24486cb56_RangeKind>();
	jule::Ptr<_24552b0a5_RangeIter> _field_kind = jule::Ptr<_24552b0a5_RangeIter>();
	jule::Ptr<_2455b5051_Data> _field_d = jule::Ptr<_2455b5051_Data>();
	

	_2455ab2ab_RangeChecker(void) = default;

	inline bool operator==(_2455ab2ab_RangeChecker _other) {
		return 
			this->_field_sc == _other._field_sc &&
			this->_field_rang == _other._field_rang &&
			this->_field_kind == _other._field_kind &&
			this->_field_d == _other._field_d;
	}

	inline bool operator!=(_2455ab2ab_RangeChecker _other) { return !this->operator==(_other); }


};
inline void _2455ad8eb_prepare_types(_2455ad445_RetTypeChecker*);
inline void _2455adb71_prepare_exprs(_2455ad445_RetTypeChecker*, jule::Ptr<_24485c706_Expr>&);
inline void _2455add4c_ret_vars(_2455ad445_RetTypeChecker*);
inline void _2455ae028_check_exprs(_2455ad445_RetTypeChecker*);
inline jule::Bool _2455ae336_check(_2455ad445_RetTypeChecker*, jule::Ptr<_24485c706_Expr>&);
struct _2455ad445_RetTypeChecker {
	jule::Ptr<_245531066_ScopeChecker> _field_sc = jule::Ptr<_245531066_ScopeChecker>();
	jule::Ptr<_2449299b0_FnIns> _field_f = jule::Ptr<_2449299b0_FnIns>();
	jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _field_types = jule::Slice<jule::Ptr<_2455e1027_TypeKind>>();
	jule::Slice<jule::Ptr<_24485c706_Expr>> _field_exprs = jule::Slice<jule::Ptr<_24485c706_Expr>>();
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_vars = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	jule::Ptr<_2431e4523_Token> _field_error_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_model = jule::Any();
	

	_2455ad445_RetTypeChecker(void) = default;

	inline bool operator==(_2455ad445_RetTypeChecker _other) {
		return 
			this->_field_sc == _other._field_sc &&
			this->_field_f == _other._field_f &&
			this->_field_types == _other._field_types &&
			this->_field_exprs == _other._field_exprs &&
			this->_field_vars == _other._field_vars &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_2455ad445_RetTypeChecker _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_245547db3_ImportInfo> _2455b0810_find_package(_2455b02e3_SymbolTable*, jule::Str);
inline jule::Ptr<_245547db3_ImportInfo> _2455b0b1d_select_package(_2455b02e3_SymbolTable*, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>);
inline jule::Ptr<_24556cc1d_Var> _2455b0ec5_find_var(_2455b02e3_SymbolTable*, jule::Str, jule::Bool);
inline jule::Ptr<_2455e0334_TypeAlias> _2455b137c_find_type_alias(_2455b02e3_SymbolTable*, jule::Str, jule::Bool);
inline jule::Ptr<_244848912_Struct> _2455b1734_find_struct(_2455b02e3_SymbolTable*, jule::Str, jule::Bool);
inline jule::Ptr<_244926d0e_Fn> _2455b1adb_find_fn(_2455b02e3_SymbolTable*, jule::Str, jule::Bool);
inline jule::Ptr<_24547ec51_Trait> _2455b1de9_find_trait(_2455b02e3_SymbolTable*, jule::Str);
inline jule::Ptr<_245481e0c_Enum> _2455b2207_find_enum(_2455b02e3_SymbolTable*, jule::Str);
inline jule::Ptr<_245483507_TypeEnum> _2455b2515_find_type_enum(_2455b02e3_SymbolTable*, jule::Str);
inline jule::Ptr<_24556cc1d_Var> _2455b2a87___find_var(_2455b02e3_SymbolTable*, jule::Str, jule::Bool, jule::Bool);
inline jule::Ptr<_2455e0334_TypeAlias> _2455b2ed8___find_type_alias(_2455b02e3_SymbolTable*, jule::Str, jule::Bool, jule::Bool);
inline jule::Any _2455b3390_def_by_ident(_2455b02e3_SymbolTable*, jule::Str, jule::Bool);
inline jule::Bool _2455b37e1_is_duplicated_ident(_2455b02e3_SymbolTable*, jule::Uintptr, jule::Str, jule::Bool);
struct _2455b02e3_SymbolTable {
	jule::Ptr<_2431e98ad_File> _field_file = jule::Ptr<_2431e98ad_File>();
	jule::Slice<_24492dc7d_Pass> _field_passes = jule::Slice<_24492dc7d_Pass>();
	jule::Slice<jule::Ptr<_245547db3_ImportInfo>> _field_imports = jule::Slice<jule::Ptr<_245547db3_ImportInfo>>();
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_vars = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _field_type_aliases = jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>();
	jule::Slice<jule::Ptr<_244848912_Struct>> _field_structs = jule::Slice<jule::Ptr<_244848912_Struct>>();
	jule::Slice<jule::Ptr<_244926d0e_Fn>> _field_funcs = jule::Slice<jule::Ptr<_244926d0e_Fn>>();
	jule::Slice<jule::Ptr<_24547ec51_Trait>> _field_traits = jule::Slice<jule::Ptr<_24547ec51_Trait>>();
	jule::Slice<jule::Ptr<_245481e0c_Enum>> _field_enums = jule::Slice<jule::Ptr<_245481e0c_Enum>>();
	jule::Slice<jule::Ptr<_245483507_TypeEnum>> _field_type_enums = jule::Slice<jule::Ptr<_245483507_TypeEnum>>();
	jule::Slice<jule::Ptr<_24551aa45_Impl>> _field_impls = jule::Slice<jule::Ptr<_24551aa45_Impl>>();
	

	_2455b02e3_SymbolTable(void) = default;

	inline bool operator==(_2455b02e3_SymbolTable _other) {
		return 
			this->_field_file == _other._field_file &&
			this->_field_passes == _other._field_passes &&
			this->_field_imports == _other._field_imports &&
			this->_field_vars == _other._field_vars &&
			this->_field_type_aliases == _other._field_type_aliases &&
			this->_field_structs == _other._field_structs &&
			this->_field_funcs == _other._field_funcs &&
			this->_field_traits == _other._field_traits &&
			this->_field_enums == _other._field_enums &&
			this->_field_type_enums == _other._field_type_enums &&
			this->_field_impls == _other._field_impls;
	}

	inline bool operator!=(_2455b02e3_SymbolTable _other) { return !this->operator==(_other); }


};
inline jule::Bool _2455b543b_is_nil(_2455b5051_Data*);
inline jule::Bool _2455b56a0_is_void(_2455b5051_Data*);
inline jule::Bool _2455b5914_is_const(_2455b5051_Data*);
inline jule::Bool _2455b5c22_good_operand(_2455b5051_Data*, jule::Ptr<_2455b5051_Data>&);
struct _2455b5051_Data {
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Bool _field_lvalue = jule::Bool();
	jule::Bool _field_is_rune = jule::Bool();
	jule::Any _field_model = jule::Any();
	jule::Bool _field_decl = jule::Bool();
	jule::Ptr<_2448ab524_Const> _field_constant = jule::Ptr<_2448ab524_Const>();
	

	_2455b5051_Data(void) = default;

	inline bool operator==(_2455b5051_Data _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_reference == _other._field_reference &&
			this->_field_lvalue == _other._field_lvalue &&
			this->_field_is_rune == _other._field_is_rune &&
			this->_field_model == _other._field_model &&
			this->_field_decl == _other._field_decl &&
			this->_field_constant == _other._field_constant;
	}

	inline bool operator!=(_2455b5051_Data _other) { return !this->operator==(_other); }


};
struct _2455b60c9_Value {
	jule::Ptr<_24485c706_Expr> _field_expr = jule::Ptr<_24485c706_Expr>();
	jule::Ptr<_2455b5051_Data> _field_data = jule::Ptr<_2455b5051_Data>();
	

	_2455b60c9_Value(void) = default;

	inline bool operator==(_2455b60c9_Value _other) {
		return 
			this->_field_expr == _other._field_expr &&
			this->_field_data == _other._field_data;
	}

	inline bool operator!=(_2455b60c9_Value _other) { return !this->operator==(_other); }


};
inline void _2455b70ca_push_err(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline void _2455b73e9_push_suggestion(_2455b6abe_Eval*, jule::Str, jule::Slice<jule::Any>);
inline void _2455b75c5_allow_builtin(_2455b6abe_Eval*);
inline void _2455b77a1_disallow_builtin(_2455b6abe_Eval*);
inline jule::Bool _2455b7a15_is_unsafe(_2455b6abe_Eval*);
inline jule::Bool _2455b7c79_is_global(_2455b6abe_Eval*);
inline jule::Bool _2455b8054_apply_numeric_prefix(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2455b82b8_lit_nil(_2455b6abe_Eval*);
inline jule::Ptr<_2455b5051_Data> _2455b85c6_lit_str(_2455b6abe_Eval*, jule::Ptr<_24485d73a_LitExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455b88d4_lit_bool(_2455b6abe_Eval*, jule::Ptr<_24485d73a_LitExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455b8be2_lit_rune(_2455b6abe_Eval*, jule::Ptr<_24485d73a_LitExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455b9000_lit_float(_2455b6abe_Eval*, jule::Ptr<_24485d73a_LitExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455b930d_lit_int(_2455b6abe_Eval*, jule::Ptr<_24485d73a_LitExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455b961b_lit_num(_2455b6abe_Eval*, jule::Ptr<_24485d73a_LitExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455b9929_eval_lit(_2455b6abe_Eval*, jule::Ptr<_24485d73a_LitExpr>);
inline jule::Any _2455b9c37_find_builtins(_2455b6abe_Eval*, jule::Str);
inline jule::Any _2455ba0de_get_def(_2455b6abe_Eval*, jule::Str, jule::Bool);
inline void _229b171b2_push_reference(_2455b6abe_Eval*, jule::Ptr<_2449299b0_FnIns>&);
inline void _229b2bbcc_push_reference(_2455b6abe_Eval*, jule::Ptr<_24556cc1d_Var>&);
inline void _229bbb91a_push_reference(_2455b6abe_Eval*, jule::Ptr<_244874c5c_StructIns>&);
inline jule::Ptr<_2455b5051_Data> _2455ba672___eval_enum(_2455b6abe_Eval*, jule::Ptr<_245481e0c_Enum>);
inline jule::Ptr<_2455b5051_Data> _2455baa29_eval_enum(_2455b6abe_Eval*, jule::Ptr<_245481e0c_Enum>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bad37___eval_type_enum(_2455b6abe_Eval*, jule::Ptr<_245483507_TypeEnum>);
inline jule::Ptr<_2455b5051_Data> _2455bb1de_eval_type_enum(_2455b6abe_Eval*, jule::Ptr<_245483507_TypeEnum>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bb4ec___eval_struct(_2455b6abe_Eval*, jule::Ptr<_244874c5c_StructIns>);
inline jule::Ptr<_2455b5051_Data> _2455bb8a4_eval_struct(_2455b6abe_Eval*, jule::Ptr<_244874c5c_StructIns>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bbbb2_eval_fn_ins(_2455b6abe_Eval*, jule::Ptr<_2449299b0_FnIns>);
inline void _2455bbed1_check_deprecated(_2455b6abe_Eval*, jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bc388_eval_fn(_2455b6abe_Eval*, jule::Ptr<_244926d0e_Fn>, jule::Ptr<_2431e4523_Token>);
inline void _2455bc773_push_illegal_cycle_error(_2455b6abe_Eval*, jule::Ptr<_24556cc1d_Var>&, jule::Ptr<_24556cc1d_Var>&, jule::Str&);
inline jule::Bool _2455bcb3b_check_cross_cycle(_2455b6abe_Eval*, jule::Ptr<_24556cc1d_Var>&, jule::Str&);
inline jule::Bool _2455bcee3_check_illegal_cycles(_2455b6abe_Eval*, jule::Ptr<_24556cc1d_Var>&, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bd39a_eval_var(_2455b6abe_Eval*, jule::Ptr<_24556cc1d_Var>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bd752_eval_type_alias(_2455b6abe_Eval*, jule::Ptr<_2455e0334_TypeAlias>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bdb09_eval_def(_2455b6abe_Eval*, jule::Any, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455bde17_eval_ident(_2455b6abe_Eval*, jule::Ptr<_24485e76e_IdentExpr>);
inline jule::Ptr<_2455b5051_Data> _2455be225_eval_unary(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_24485ee78_UnaryExpr>);
inline jule::Ptr<_2455b5051_Data> _2455be533_eval_variadic(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244860330_VariadicExpr>);
inline jule::Ptr<_2455b5051_Data> _2455be841_eval_unsafe(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_24485de44_UnsafeExpr>);
inline jule::Ptr<_2455b5051_Data> _2455beb4e_eval_arr(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448640ae_SliceExpr>);
inline jule::Ptr<_2455b5051_Data> _2455c00a0_eval_exp_slc(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448640ae_SliceExpr>, jule::Ptr<_2455e1027_TypeKind>, jule::Any);
inline jule::Ptr<_2455b5051_Data> _2455c03ad_eval_slice_expr(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448640ae_SliceExpr>);
inline void _2455c06ee_check_integer_indexing_by_data(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>);
inline void _2455c0ac8_indexing_ptr(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244864950_IndexingExpr>&);
inline void _2455c0e91_indexing_arr(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244864950_IndexingExpr>&);
inline void _2455c1359_indexing_slc(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244864950_IndexingExpr>&);
inline void _2455c1722_indexing_map(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244864950_IndexingExpr>&);
inline void _2455c1ada_indexing_str(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244864950_IndexingExpr>&);
inline void _2455c1ea3_to_indexing(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244864950_IndexingExpr>&);
inline jule::Bool _2455c2437_push_generics_from_expr_sub_ident(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244861012_SubIdentExpr>&, jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>&, jule::Ptr<_24485c706_Expr>&);
inline jule::Bool _2455c2844_push_generics_from_data(jule::Ptr<_2455b6abe_Eval>, jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>&, jule::Ptr<_24485c706_Expr>&);
inline jule::Ptr<_2455b5051_Data> _2455c2b52_eval_ident_decl_from_indexing(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244864950_IndexingExpr>&);
inline jule::Bool _2455c30b4_check_generic_fn(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2449299b0_FnIns>&, jule::Ptr<_2431e4523_Token>&, jule::Any&);
inline void _2455c3405_eval_fn_generic_from_indexing(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244864950_IndexingExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455c3724_eval_indexing(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244864950_IndexingExpr>);
inline std::tuple<jule::Ptr<_2455b5051_Data>,jule::Ptr<_2455b5051_Data>> _2455c3a32_eval_slicing_exprs(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_24486505a_SlicingExpr>&);
inline void _2455c3ca7_slicing_arr(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&);
inline void _2455c4170_slicing_str(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&);
inline void _2455c45d2_check_slicing(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_24486505a_SlicingExpr>&);
inline jule::Ptr<_2455b5051_Data> _2455c48e0_eval_slicing(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_24486505a_SlicingExpr>);
inline void _2455c4ca8_cast_ptr(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c5171_cast_struct(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c5539_cast_ref(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c5902_cast_slc(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c5c21_cast_str(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c60d9_cast_int(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c64a2_cast_num(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c686a_cast_prim(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline void _2455c6b89_cast_constant(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_2455b5051_Data>&);
inline void _2455c7052_cast_type_enum(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Ptr<_2455b5051_Data> _2455c74c5_eval_cast_by_type_n_data(_2455b6abe_Eval*, jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455c7937_eval_cast_t(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_24485c706_Expr>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Ptr<_2455b5051_Data> _2455c7c45_eval_cast(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448606d7_CastExpr>);
inline jule::Ptr<_2455b5051_Data> _2455c8053_eval_ns_selection(_2455b6abe_Eval*, jule::Ptr<_244860a8e_NsSelectionExpr>);
inline jule::Ptr<_2455b5051_Data> _2455c84c6_eval_struct_lit_explicit(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244874c5c_StructIns>, jule::Slice<jule::Ptr<_24485c706_Expr>>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455c87e5_eval_struct_lit(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244862ba1_StructLit>);
inline jule::Ptr<_2455b5051_Data> _2455c8b03_eval_type(_2455b6abe_Eval*, jule::Ptr<_2448581d5_TypeDecl>);
inline void _2455c8e22_call_type_fn(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline void _2455c9241_call_builtin_fn(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline void _2455c9582_check_fn_of_concurrent_call(_2455b6abe_Eval*, jule::Ptr<_2449299b0_FnIns>&, jule::Ptr<_2431e4523_Token>);
inline void _2455c997d_process_exceptional_handler(_2455b6abe_Eval*, jule::Ptr<_2449299b0_FnIns>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline void _2455c9cad_call_fn(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2455ca0bb_eval_fn_call(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2448619c4_FnCallExpr>);
inline jule::Ptr<_2455b5051_Data> _2455ca473_eval_enum_static(_2455b6abe_Eval*, jule::Ptr<_245481e0c_Enum>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455ca82a_eval_type_enum_static(_2455b6abe_Eval*, jule::Ptr<_245483507_TypeEnum>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cabd2_eval_struct_static(_2455b6abe_Eval*, jule::Ptr<_244874c5c_StructIns>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cb133_eval_trait_sub_ident(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_24547ec51_Trait>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cb62d_eval_struct_sub_ident(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_244874c5c_StructIns>, jule::Ptr<_244861012_SubIdentExpr>, jule::Bool);
inline jule::Ptr<_2455b5051_Data> _2455cb9d5_eval_slice_sub_ident(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cbd8c_eval_array_sub_ident(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cc244_eval_map_sub_ident(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cc5eb_eval_str_sub_ident(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cc909_eval_int_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455ccc17_eval_uint_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cd025_eval_i8_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cd333_eval_i16_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cd641_eval_i32_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cd94e_eval_i64_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455cdc5c_eval_u8_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455ce06a_eval_u16_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455ce378_eval_u32_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455ce686_eval_u64_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455ce994_eval_f32_type_tatic(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455ceca2_eval_f64_type_static(_2455b6abe_Eval*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455d0159_eval_prim_static(_2455b6abe_Eval*, jule::Str, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2455b5051_Data> _2455d0511_eval_type_static(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_244861012_SubIdentExpr>);
inline jule::Ptr<_2455b5051_Data> _2455d08b8_eval_obj_sub_ident(_2455b6abe_Eval*, jule::Ptr<_2455b5051_Data>, jule::Ptr<_244861012_SubIdentExpr>);
inline jule::Ptr<_2455b5051_Data> _2455d0bc6_eval_sub_ident(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244861012_SubIdentExpr>);
inline jule::Ptr<_2455b5051_Data> _2455d0ed4_eval_tuple(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_24485d383_TupleExpr>);
inline jule::Ptr<_2455b5051_Data> _2455d138b_eval_map(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2455eb296_Map>, jule::Ptr<_244863124_BraceLit>);
inline jule::Ptr<_2455b5051_Data> _2455d1699_eval_brace_lit(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244863124_BraceLit>);
inline jule::Ptr<_2455b5051_Data> _2455d19a7_eval_anon_fn(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244869ee9_FnDecl>);
inline jule::Ptr<_2455b5051_Data> _2455d1cb5_eval_binop(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_244861485_BinopExpr>);
inline jule::Ptr<_2455b5051_Data> _2455d20c3_eval_expr_kind(jule::Ptr<_2455b6abe_Eval>, jule::Any);
inline jule::Ptr<_2455b5051_Data> _2455d23d1_eval(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_24485c706_Expr>);
inline jule::Ptr<_2455b5051_Data> _2455d26de_eval_expr(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_24485c706_Expr>);
struct _2455b6abe_Eval {
	jule::Ptr<_24555100e_Sema> _field_s = jule::Ptr<_24555100e_Sema>();
	jule::Trait<_24560bac0_Lookup> _field_lookup = jule::Trait<_24560bac0_Lookup>();
	jule::Ptr<_2455e1027_TypeKind> _field_prefix = jule::Ptr<_2455e1027_TypeKind>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_immutable = jule::Bool();
	jule::Bool _field_ignored = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Ptr<_24556cc1d_Var> _field_owner = jule::Ptr<_24556cc1d_Var>();
	jule::Ptr<_244851079_FieldIns> _field_field = jule::Ptr<_244851079_FieldIns>();
	jule::Bool _field_arg = jule::Bool();
	

	_2455b6abe_Eval(void) = default;

	inline bool operator==(_2455b6abe_Eval _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_lookup == _other._field_lookup &&
			this->_field_prefix == _other._field_prefix &&
			this->_field_unsafety == _other._field_unsafety &&
			this->_field_immutable == _other._field_immutable &&
			this->_field_ignored == _other._field_ignored &&
			this->_field_dis_builtin == _other._field_dis_builtin &&
			this->_field_owner == _other._field_owner &&
			this->_field_field == _other._field_field &&
			this->_field_arg == _other._field_arg;
	}

	inline bool operator!=(_2455b6abe_Eval _other) { return !this->operator==(_other); }


};
inline _2455d2b62_UnaryEval static__2455d3118_new(jule::Ptr<_2455b6abe_Eval>);
inline void _2455d32e4_minus(_2455d2b62_UnaryEval*);
inline void _2455d34c0_plus(_2455d2b62_UnaryEval*);
inline void _2455d369b_caret(_2455d2b62_UnaryEval*);
inline void _2455d3877_excl(_2455d2b62_UnaryEval*);
inline void _2455d3a53_star(_2455d2b62_UnaryEval*);
inline void _2455d3c2e_amper(_2455d2b62_UnaryEval*);
inline void _2455d3e0a_type_decl(_2455d2b62_UnaryEval*);
inline void _2455d40d6_eval_data(_2455d2b62_UnaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d43b1_eval(_2455d2b62_UnaryEval*, jule::Ptr<_24485ee78_UnaryExpr>);
struct _2455d2b62_UnaryEval {
	jule::Ptr<_2455b6abe_Eval> _field_e = jule::Ptr<_2455b6abe_Eval>();
	jule::Ptr<_2455b5051_Data> _field_d = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_24485ee78_UnaryExpr> _field_u = jule::Ptr<_24485ee78_UnaryExpr>();
	

	_2455d2b62_UnaryEval(void) = default;

	inline bool operator==(_2455d2b62_UnaryEval _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_d == _other._field_d &&
			this->_field_u == _other._field_u;
	}

	inline bool operator!=(_2455d2b62_UnaryEval _other) { return !this->operator==(_other); }


};
inline _2455d4900_BinaryEval static__2455d4eb6_new_plain(jule::Ptr<_2455b6abe_Eval>);
inline _2455d4900_BinaryEval static__2455d5307_new(jule::Ptr<_2455b6abe_Eval>, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _2455d558d_check_type_compatibility(_2455d4900_BinaryEval*);
inline jule::Bool _2455d5846_check_struct_common_operator_compatibility(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d5add_eval_nil(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d5d52_eval_enum(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d60b6_eval_type_enum(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d632a_eval_sptr(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d658e_eval_ptr(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d6803_eval_arr(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d6a67_eval_slc(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d6ccb_eval_fn(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d7040_eval_struct(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d72a4_eval_trait(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d7518_eval_any(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d777c_eval_bool(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d79e1_eval_str(_2455d4900_BinaryEval*);
inline void _2455d7bbc_set_type_to_greater(_2455d4900_BinaryEval*);
inline void _2455d7e0e_check_mod_data(_2455d4900_BinaryEval*, jule::Ptr<_2455b5051_Data>&);
inline void _2455d80da_mod(_2455d4900_BinaryEval*);
inline jule::Bool _2455d84b4_numbers_are_compatibile(_2455d4900_BinaryEval*, jule::Str&, jule::Str&);
inline jule::Ptr<_2455b5051_Data> _2455d8739_eval_float(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d899d_eval_int(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d8c12_eval_prim(_2455d4900_BinaryEval*);
inline jule::Ptr<_2455b5051_Data> _2455d8e76_eval_op(_2455d4900_BinaryEval*);
inline void _2455d91eb_eval_const(_2455d4900_BinaryEval*, jule::Ptr<_2455b5051_Data>&);
inline void _2455d9471_check_data(_2455d4900_BinaryEval*, jule::Ptr<_2455b5051_Data>&);
inline void _2455d964c_check_datas(_2455d4900_BinaryEval*);
inline void _2455d98c2_set_model(_2455d4900_BinaryEval*, jule::Ptr<_2455b5051_Data>&);
inline void _2455d9b47_post_eval(_2455d4900_BinaryEval*, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2455d9eee_solve_explicit(_2455d4900_BinaryEval*, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2455da30c_eval(_2455d4900_BinaryEval*, jule::Ptr<_244861485_BinopExpr>&);
struct _2455d4900_BinaryEval {
	jule::Ptr<_2455b6abe_Eval> _field_e = jule::Ptr<_2455b6abe_Eval>();
	jule::Ptr<_2455b5051_Data> _field_l = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2455b5051_Data> _field_r = jule::Ptr<_2455b5051_Data>();
	jule::Ptr<_2431e4523_Token> _field_op = jule::Ptr<_2431e4523_Token>();
	

	_2455d4900_BinaryEval(void) = default;

	inline bool operator==(_2455d4900_BinaryEval _other) {
		return 
			this->_field_e == _other._field_e &&
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_op == _other._field_op;
	}

	inline bool operator!=(_2455d4900_BinaryEval _other) { return !this->operator==(_other); }


};
struct _2455de7ea_InsGeneric {
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _field_constraint = jule::Slice<jule::Ptr<_2455e1027_TypeKind>>();
	

	_2455de7ea_InsGeneric(void) = default;

	inline bool operator==(_2455de7ea_InsGeneric _other) {
		return 
			this->_field_kind == _other._field_kind &&
			this->_field_constraint == _other._field_constraint;
	}

	inline bool operator!=(_2455de7ea_InsGeneric _other) { return !this->operator==(_other); }


};
struct _2455e0334_TypeAlias {
	jule::Ptr<_244868503_ScopeTree> _field_scope = jule::Ptr<_244868503_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_generic = jule::Bool();
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_2455e5180_TypeSymbol> _field_kind = jule::Ptr<_2455e5180_TypeSymbol>();
	jule::Slice<jule::Any> _field_refers = jule::Slice<jule::Any>();
	jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _field_generics = jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>();
	

	_2455e0334_TypeAlias(void) = default;

	inline bool operator==(_2455e0334_TypeAlias _other) {
		return 
			this->_field_scope == _other._field_scope &&
			this->_field_public == _other._field_public &&
			this->_field_cpp_linked == _other._field_cpp_linked &&
			this->_field_used == _other._field_used &&
			this->_field_generic == _other._field_generic &&
			this->_field_token == _other._field_token &&
			this->_field_ident == _other._field_ident &&
			this->_field_kind == _other._field_kind &&
			this->_field_refers == _other._field_refers &&
			this->_field_generics == _other._field_generics;
	}

	inline bool operator!=(_2455e0334_TypeAlias _other) { return !this->operator==(_other); }


};
inline jule::Str _2455e1423_to_str(_2455e1027_TypeKind*);
inline jule::Bool _2455e1731_equals(jule::Ptr<_2455e1027_TypeKind>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Bool _2455e1bd7_cpp_linked(_2455e1027_TypeKind*);
inline jule::Bool _2455e1e4b_is_nil(_2455e1027_TypeKind*);
inline jule::Bool _2455e21b0_void(_2455e1027_TypeKind*);
inline jule::Bool _2455e2424_mutable(_2455e1027_TypeKind*);
inline jule::Bool _2455e2688_nil_compatible(_2455e1027_TypeKind*);
inline jule::Bool _2455e28ec_performs_rc(_2455e1027_TypeKind*);
inline jule::Bool _2455e2b61_supports_cloning(_2455e1027_TypeKind*);
inline jule::Bool _2455e2dc5_variadicable(_2455e1027_TypeKind*);
inline jule::Ptr<_2455e59ee_Prim> _2455e3139_prim(_2455e1027_TypeKind*);
inline jule::Ptr<_2455e9283_Sptr> _2455e339d_sptr(_2455e1027_TypeKind*);
inline jule::Ptr<_2455ec7e7_Ptr> _2455e3612_ptr(_2455e1027_TypeKind*);
inline jule::Ptr<_245481e0c_Enum> _2455e3876_enm(_2455e1027_TypeKind*);
inline jule::Ptr<_245483507_TypeEnum> _2455e3ada_tenm(_2455e1027_TypeKind*);
inline jule::Ptr<_2455ebd8a_Arr> _2455e3d4e_arr(_2455e1027_TypeKind*);
inline jule::Ptr<_2455e9be0_Slc> _2455e40b3_slc(_2455e1027_TypeKind*);
inline jule::Ptr<_2449299b0_FnIns> _2455e4327_fnc(_2455e1027_TypeKind*);
inline jule::Ptr<_244874c5c_StructIns> _2455e458b_strct(_2455e1027_TypeKind*);
inline jule::Ptr<_24547ec51_Trait> _2455e4800_trt(_2455e1027_TypeKind*);
inline jule::Ptr<_2455eb296_Map> _2455e4a64_map(_2455e1027_TypeKind*);
inline jule::Ptr<_2455ea76d_Tuple> _2455e4cc8_tup(_2455e1027_TypeKind*);
struct _2455e1027_TypeKind {
	jule::Str _field_cpp_ident = jule::Str();
	jule::Bool _field_generic = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Trait<_2455e0ae8_Kind> _field_kind = jule::Trait<_2455e0ae8_Kind>();
	

	_2455e1027_TypeKind(void) = default;

	inline bool operator==(_2455e1027_TypeKind _other) {
		return 
			this->_field_cpp_ident == _other._field_cpp_ident &&
			this->_field_generic == _other._field_generic &&
			this->_field_variadic == _other._field_variadic &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2455e1027_TypeKind _other) { return !this->operator==(_other); }


};
inline jule::Bool _2455e5537_checked(_2455e5180_TypeSymbol*);
inline void _2455e5713_remove_kind(_2455e5180_TypeSymbol*);
struct _2455e5180_TypeSymbol {
	jule::Ptr<_2448581d5_TypeDecl> _field_decl = jule::Ptr<_2448581d5_TypeDecl>();
	jule::Ptr<_2455e1027_TypeKind> _field_kind = jule::Ptr<_2455e1027_TypeKind>();
	

	_2455e5180_TypeSymbol(void) = default;

	inline bool operator==(_2455e5180_TypeSymbol _other) {
		return 
			this->_field_decl == _other._field_decl &&
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2455e5180_TypeSymbol _other) { return !this->operator==(_other); }


};
inline jule::Str _2455e5d62_to_str(_2455e59ee_Prim*);
inline jule::Bool _2455e6170_equals(jule::Ptr<_2455e59ee_Prim>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Bool _2455e65e3_is_constraint(_2455e59ee_Prim*);
inline jule::Bool _2455e6857_is_i8(_2455e59ee_Prim*);
inline jule::Bool _2455e6abb_is_i16(_2455e59ee_Prim*);
inline jule::Bool _2455e6d30_is_i32(_2455e59ee_Prim*);
inline jule::Bool _2455e7094_is_i64(_2455e59ee_Prim*);
inline jule::Bool _2455e7308_is_u8(_2455e59ee_Prim*);
inline jule::Bool _2455e756c_is_u16(_2455e59ee_Prim*);
inline jule::Bool _2455e77d1_is_u32(_2455e59ee_Prim*);
inline jule::Bool _2455e7a45_is_u64(_2455e59ee_Prim*);
inline jule::Bool _2455e7ca9_is_f32(_2455e59ee_Prim*);
inline jule::Bool _2455e801d_is_f64(_2455e59ee_Prim*);
inline jule::Bool _2455e8282_is_int(_2455e59ee_Prim*);
inline jule::Bool _2455e84e6_is_uint(_2455e59ee_Prim*);
inline jule::Bool _2455e875a_is_uintptr(_2455e59ee_Prim*);
inline jule::Bool _2455e89be_is_bool(_2455e59ee_Prim*);
inline jule::Bool _2455e8c33_is_str(_2455e59ee_Prim*);
inline jule::Bool _2455e8e97_is_any(_2455e59ee_Prim*);
struct _2455e59ee_Prim {
	jule::Str _field_kind = jule::Str();
	

	_2455e59ee_Prim(void) = default;

	inline bool operator==(_2455e59ee_Prim _other) {
		return 
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_2455e59ee_Prim _other) { return !this->operator==(_other); }


};
inline jule::Str _2455e95e6_to_str(_2455e9283_Sptr*);
inline jule::Bool _2455e9904_equals(jule::Ptr<_2455e9283_Sptr>, jule::Ptr<_2455e1027_TypeKind>);
struct _2455e9283_Sptr {
	jule::Ptr<_2455e1027_TypeKind> _field_elem = jule::Ptr<_2455e1027_TypeKind>();
	

	_2455e9283_Sptr(void) = default;

	inline bool operator==(_2455e9283_Sptr _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_2455e9283_Sptr _other) { return !this->operator==(_other); }


};
inline jule::Str _2455ea1eb_to_str(_2455e9be0_Slc*);
inline jule::Bool _2455ea509_equals(jule::Ptr<_2455e9be0_Slc>, jule::Ptr<_2455e1027_TypeKind>);
struct _2455e9be0_Slc {
	jule::Ptr<_2455e1027_TypeKind> _field_elem = jule::Ptr<_2455e1027_TypeKind>();
	

	_2455e9be0_Slc(void) = default;

	inline bool operator==(_2455e9be0_Slc _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_2455e9be0_Slc _other) { return !this->operator==(_other); }


};
inline jule::Str _2455eaad1_to_str(_2455ea76d_Tuple*);
inline jule::Bool _2455eadde_equals(jule::Ptr<_2455ea76d_Tuple>, jule::Ptr<_2455e1027_TypeKind>);
struct _2455ea76d_Tuple {
	jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _field_types = jule::Slice<jule::Ptr<_2455e1027_TypeKind>>();
	

	_2455ea76d_Tuple(void) = default;

	inline bool operator==(_2455ea76d_Tuple _other) {
		return 
			this->_field_types == _other._field_types;
	}

	inline bool operator!=(_2455ea76d_Tuple _other) { return !this->operator==(_other); }


};
inline jule::Str _2455eb609_to_str(_2455eb296_Map*);
inline jule::Bool _2455eb917_equals(jule::Ptr<_2455eb296_Map>, jule::Ptr<_2455e1027_TypeKind>);
struct _2455eb296_Map {
	jule::Ptr<_2455e1027_TypeKind> _field_key = jule::Ptr<_2455e1027_TypeKind>();
	jule::Ptr<_2455e1027_TypeKind> _field_val = jule::Ptr<_2455e1027_TypeKind>();
	

	_2455eb296_Map(void) = default;

	inline bool operator==(_2455eb296_Map _other) {
		return 
			this->_field_key == _other._field_key &&
			this->_field_val == _other._field_val;
	}

	inline bool operator!=(_2455eb296_Map _other) { return !this->operator==(_other); }


};
inline jule::Str _2455ec1ed_to_str(_2455ebd8a_Arr*);
inline jule::Bool _2455ec50b_equals(jule::Ptr<_2455ebd8a_Arr>, jule::Ptr<_2455e1027_TypeKind>);
struct _2455ebd8a_Arr {
	jule::Bool _field_auto = jule::Bool();
	jule::I32 _field_n = jule::I32();
	jule::Ptr<_2455e1027_TypeKind> _field_elem = jule::Ptr<_2455e1027_TypeKind>();
	

	_2455ebd8a_Arr(void) = default;

	inline bool operator==(_2455ebd8a_Arr _other) {
		return 
			this->_field_auto == _other._field_auto &&
			this->_field_n == _other._field_n &&
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_2455ebd8a_Arr _other) { return !this->operator==(_other); }


};
inline jule::Str _2455ecb5a_to_str(_2455ec7e7_Ptr*);
inline jule::Bool _2455ece68_equals(jule::Ptr<_2455ec7e7_Ptr>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Bool _2455ed2ba_is_unsafe(_2455ec7e7_Ptr*);
struct _2455ec7e7_Ptr {
	jule::Ptr<_2455e1027_TypeKind> _field_elem = jule::Ptr<_2455e1027_TypeKind>();
	

	_2455ec7e7_Ptr(void) = default;

	inline bool operator==(_2455ec7e7_Ptr _other) {
		return 
			this->_field_elem == _other._field_elem;
	}

	inline bool operator!=(_2455ec7e7_Ptr _other) { return !this->operator==(_other); }


};
struct _2455ed73d_Referencer {
	jule::Str _field_ident = jule::Str();
	jule::Any _field_owner = jule::Any();
	jule::Slice<jule::Any>* _field_refs = nullptr;
	

	_2455ed73d_Referencer(void) = default;

	inline bool operator==(_2455ed73d_Referencer _other) {
		return 
			this->_field_ident == _other._field_ident &&
			this->_field_owner == _other._field_owner &&
			this->_field_refs == _other._field_refs;
	}

	inline bool operator!=(_2455ed73d_Referencer _other) { return !this->operator==(_other); }


};
inline void _2455eeb90_push_err(_2455ee486_TypeChecker*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline void _2455eed6b_allow_builtin(_2455ee486_TypeChecker*);
inline void _245600047_disallow_builtin(_2455ee486_TypeChecker*);
inline jule::Ptr<_2455e59ee_Prim> _245600355_build_prim(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&);
inline void _229e46090_push_reference(_2455ee486_TypeChecker*, jule::Ptr<_244874c5c_StructIns>&);
inline void _229e4913c_push_reference(_2455ee486_TypeChecker*, jule::Ptr<_24547ec51_Trait>&);
inline void _245600850_push_reference_by_kind(_2455ee486_TypeChecker*, jule::Ptr<_2455e1027_TypeKind>&);
inline void _245600c18_push_cycle_error(_2455ee486_TypeChecker*, jule::Any, jule::Any, jule::Str&);
inline jule::Bool _2456010c0_check_cross_cycle(_2455ee486_TypeChecker*, jule::Any, jule::Str&);
inline jule::Bool _245601477_check_illegal_cycles(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&, jule::Any);
inline jule::Trait<_2455e0ae8_Kind> _24560182e_from_type_alias(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&, jule::Ptr<_2455e0334_TypeAlias>&);
inline jule::Ptr<_245481e0c_Enum> _245601bd6_from_enum(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&, jule::Ptr<_245481e0c_Enum>&);
inline jule::Ptr<_245483507_TypeEnum> _24560208d_from_type_enum(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&, jule::Ptr<_245483507_TypeEnum>&);
inline jule::Ptr<_24547ec51_Trait> _245602445_from_trait(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&, jule::Ptr<_24547ec51_Trait>&);
inline jule::Bool _2456027ec_check_struct_ins(_2455ee486_TypeChecker*, jule::Ptr<_244874c5c_StructIns>&, jule::Ptr<_2431e4523_Token>&);
inline void _245602a94_append_used_struct_reference(_2455ee486_TypeChecker*, jule::Ptr<_244848912_Struct>&);
inline jule::Ptr<_244874c5c_StructIns> _245602e5c_build_struct_instance(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&, jule::Ptr<_244848912_Struct>&);
inline jule::Ptr<_244874c5c_StructIns> _245603314_from_struct(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&, jule::Ptr<_244848912_Struct>&);
inline jule::Trait<_2455e0ae8_Kind> _245603622_get_def(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>&);
inline jule::Trait<_2455e0ae8_Kind> _245603930_build_ident(_2455ee486_TypeChecker*, jule::Ptr<_24485879b_IdentTypeDecl>);
inline jule::Trait<_2455e0ae8_Kind> _245603c3d_build_sub_ident(_2455ee486_TypeChecker*, jule::Ptr<_244858dea_SubIdentTypeDecl>);
inline jule::Ptr<_2455e9283_Sptr> _24560404b_build_sptr_from_type(_2455ee486_TypeChecker*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Ptr<_2455e9283_Sptr> _245604359_build_sptr(_2455ee486_TypeChecker*, jule::Ptr<_24485958d_SptrTypeDecl>);
inline jule::Ptr<_2455ec7e7_Ptr> _245604667_build_ptr_from_type(_2455ee486_TypeChecker*, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Ptr<_2455ec7e7_Ptr> _245604975_build_ptr(_2455ee486_TypeChecker*, jule::Ptr<_24485a061_PtrTypeDecl>);
inline jule::Ptr<_2455e9be0_Slc> _245604c83_build_slc(_2455ee486_TypeChecker*, jule::Ptr<_244859989_SlcTypeDecl>);
inline jule::Ptr<_2455ebd8a_Arr> _245605091_build_arr(_2455ee486_TypeChecker*, jule::Ptr<_24485a6e3_ArrTypeDecl>);
inline jule::Ptr<_2455eb296_Map> _24560539e_build_map(_2455ee486_TypeChecker*, jule::Ptr<_24485ae41_MapTypeDecl>);
inline jule::Ptr<_2455ea76d_Tuple> _2456056ac_build_tuple(_2455ee486_TypeChecker*, jule::Ptr<_244859c75_TupleTypeDecl>);
inline jule::Bool _2456059ba_check_fn_types(_2455ee486_TypeChecker*, jule::Ptr<_2449299b0_FnIns>&);
inline jule::Ptr<_2449299b0_FnIns> _245605cc8_build_fn(_2455ee486_TypeChecker*, jule::Ptr<_244869ee9_FnDecl>);
inline jule::Trait<_2455e0ae8_Kind> _2456060d6_build_by_namespace(_2455ee486_TypeChecker*, jule::Ptr<_2448592a2_NamespaceTypeDecl>);
inline jule::Ptr<_2455e1027_TypeKind> _2456063e4_build(_2455ee486_TypeChecker*, jule::Any&);
inline jule::Ptr<_2455e1027_TypeKind> _245606702_check_decl(_2455ee486_TypeChecker*, jule::Ptr<_2448581d5_TypeDecl>&);
inline void _245606977_check(_2455ee486_TypeChecker*, jule::Ptr<_2455e5180_TypeSymbol>&);
struct _2455ee486_TypeChecker {
	jule::Ptr<_24555100e_Sema> _field_s = jule::Ptr<_24555100e_Sema>();
	jule::Trait<_24560bac0_Lookup> _field_lookup = jule::Trait<_24560bac0_Lookup>();
	jule::Ptr<_2455ed73d_Referencer> _field_referencer = jule::Ptr<_2455ed73d_Referencer>();
	jule::Ptr<_24492c8b4_ReferenceStack> _field_refers = jule::Ptr<_24492c8b4_ReferenceStack>();
	jule::Ptr<_2431e4523_Token> _field_error_token = jule::Ptr<_2431e4523_Token>();
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _field_ignore_generics = jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>();
	jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _field_use_generics = jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>();
	jule::Bool _field_not_plain = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Bool _field_selection = jule::Bool();
	jule::Ptr<_2455e0334_TypeAlias> _field_owner_alias = jule::Ptr<_2455e0334_TypeAlias>();
	jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _field_banned_generics = jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>();
	jule::Bool _field_inscatch = jule::Bool();
	

	_2455ee486_TypeChecker(void) = default;

	inline bool operator==(_2455ee486_TypeChecker _other) {
		return 
			this->_field_s == _other._field_s &&
			this->_field_lookup == _other._field_lookup &&
			this->_field_referencer == _other._field_referencer &&
			this->_field_refers == _other._field_refers &&
			this->_field_error_token == _other._field_error_token &&
			this->_field_ignore_generics == _other._field_ignore_generics &&
			this->_field_use_generics == _other._field_use_generics &&
			this->_field_not_plain == _other._field_not_plain &&
			this->_field_dis_builtin == _other._field_dis_builtin &&
			this->_field_selection == _other._field_selection &&
			this->_field_owner_alias == _other._field_owner_alias &&
			this->_field_banned_generics == _other._field_banned_generics &&
			this->_field_inscatch == _other._field_inscatch;
	}

	inline bool operator!=(_2455ee486_TypeChecker _other) { return !this->operator==(_other); }


};
inline jule::Bool static__2456070d7___ident_type_decl(jule::Str&, jule::Ptr<_24485879b_IdentTypeDecl>);
inline jule::Bool static__245607428_exist(jule::Str&, jule::Any&);
struct _245606b97_IdentTypeLookup {
	

	_245606b97_IdentTypeLookup(void) = default;

	inline bool operator==(_245606b97_IdentTypeLookup _other) { return true; }

	inline bool operator!=(_245606b97_IdentTypeLookup _other) { return !this->operator==(_other); }


};
struct _2279da6c5_FileInfo {
	jule::Ptr<_244823942_Ast> _field_ast = jule::Ptr<_244823942_Ast>();
	jule::Slice<_242dbab89_Log> _field_errors = jule::Slice<_242dbab89_Log>();
	

	_2279da6c5_FileInfo(void) = default;

	inline bool operator==(_2279da6c5_FileInfo _other) {
		return 
			this->_field_ast == _other._field_ast &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_2279da6c5_FileInfo _other) { return !this->operator==(_other); }


};
struct _227a3a406_stmt {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_tokens = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Bool _field_terminated = jule::Bool();
	

	_227a3a406_stmt(void) = default;

	inline bool operator==(_227a3a406_stmt _other) {
		return 
			this->_field_tokens == _other._field_tokens &&
			this->_field_terminated == _other._field_terminated;
	}

	inline bool operator!=(_227a3a406_stmt _other) { return !this->operator==(_other); }


};
inline void _227a3b3b3_stop(_227a3ac31_ScopeParser*);
inline jule::Bool _227a3b627_stopped(_227a3ac31_ScopeParser*);
inline jule::Bool _227a3b88b_finished(_227a3ac31_ScopeParser*);
inline jule::Bool _227a3bb00_is_last_st(_227a3ac31_ScopeParser*);
inline void _227a3be1e_push_err(_227a3ac31_ScopeParser*, jule::Ptr<_2431e4523_Token>, jule::Str);
inline void _227a3c23d_push_suggestion(_227a3ac31_ScopeParser*, jule::Str, jule::Slice<jule::Any>);
inline void _227a3c4b3_insert_as_next(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_227a3a406_stmt> _227a3c727_next(_227a3ac31_ScopeParser*);
inline jule::Ptr<_244868503_ScopeTree> _227a3cace_build_scope(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_24486aec8_VarDecl> _227a3cddc_build_var_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486b380_RetSt> _227a3d1ea_build_ret_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_24486b9e0_Iter> _227a3d508_build_while_next_iter(_227a3ac31_ScopeParser*, jule::Ptr<_227a3a406_stmt>&);
inline jule::Ptr<_24486c2b5_WhileKind> _227a3d816_build_while_iter_kind(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a3db46_get_range_kind_keys_tokens(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486aec8_VarDecl> _227a3de65_build_range_kind_key(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Ptr<_24486aec8_VarDecl>> _227a3e273_build_range_kind_keys(_227a3ac31_ScopeParser*, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>&);
inline void _227a3e5b4_setup_range_kind_keys_plain(_227a3ac31_ScopeParser*, jule::Ptr<_24486cb56_RangeKind>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a3e916_setup_range_kind_keys_explicit(_227a3ac31_ScopeParser*, jule::Ptr<_24486cb56_RangeKind>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a3ec46_setup_range_kind_keys(_227a3ac31_ScopeParser*, jule::Ptr<_24486cb56_RangeKind>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486cb56_RangeKind> _227a40197_build_range_iter_kind(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Any _227a4054e_build_common_iter_kind(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Ptr<_24486b9e0_Iter> _227a4085c_build_common_iter(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_24486b9e0_Iter> _227a40b6a_build_iter_st(_227a3ac31_ScopeParser*, jule::Ptr<_227a3a406_stmt>&);
inline jule::Ptr<_24486d00d_BreakSt> _227a40e78_build_break_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486d3b5_ContSt> _227a41286_build_cont_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486d838_If> _227a41594_build_if(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486dbe0_Else> _227a418a2_build_else(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486e163_Conditional> _227a41bb0_build_if_else_chain(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_24485e2eb_CoExpr> _227a41ebd_build_co_call_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244866028_GotoSt> _227a422cb_build_goto_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244866314_FallSt> _227a425d9_build_fall_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486e839_TypeAliasDecl> _227a428e7_build_type_alias_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a42d59_push_case_expr(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>, jule::Ptr<_2431e4523_Token>, jule::Bool, jule::Slice<jule::Ptr<_24485c706_Expr>>&);
inline jule::Slice<jule::Ptr<_24485c706_Expr>> _227a43211_build_case_exprs(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Bool);
inline jule::Ptr<_244868503_ScopeTree> _227a4351e_build_case_scope(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline std::tuple<jule::Ptr<_24486ecac_Case>,jule::Bool> _227a438c6_build_case(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Bool);
inline std::tuple<jule::Slice<jule::Ptr<_24486ecac_Case>>,jule::Ptr<_24486dbe0_Else>> _227a43c7d_build_cases(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>, jule::Bool);
inline jule::Ptr<_244870483_MatchCase> _227a4408b_build_match_case(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244868503_ScopeTree> _227a44399_build_scope_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244865b71_LabelSt> _227a446a7_build_label_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline std::tuple<jule::Any,jule::Bool> _227a449b5_build_id_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_227a53441_AssignInfo> _227a44cc3_build_assign_info(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486691e_AssignLeft> _227a450d1_build_assign_l(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Ptr<_24486691e_AssignLeft>> _227a453de_build_assign_ls(_227a3ac31_ScopeParser*, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>&);
inline std::tuple<jule::Ptr<_244866e5d_AssignSt>,jule::Bool> _227a456ec_build_plain_assign(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline std::tuple<jule::Ptr<_244866e5d_AssignSt>,jule::Bool> _227a45a0a_build_decl_assign(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline std::tuple<jule::Ptr<_244866e5d_AssignSt>,jule::Bool> _227a45d18_build_assign_st(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24485d097_UseExpr> _227a46126_build_use_expr(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Any _227a46434_build_st(_227a3ac31_ScopeParser*, jule::Ptr<_227a3a406_stmt>&);
inline void _227a46753_build(_227a3ac31_ScopeParser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Ptr<_244868503_ScopeTree>&);
struct _227a3ac31_ScopeParser {
	jule::Ptr<_227a569b6_Parser> _field_p = jule::Ptr<_227a569b6_Parser>();
	jule::Ptr<_244868503_ScopeTree> _field_s = jule::Ptr<_244868503_ScopeTree>();
	jule::Slice<jule::Ptr<_227a3a406_stmt>> _field_stmts = jule::Slice<jule::Ptr<_227a3a406_stmt>>();
	jule::I32 _field_pos = jule::I32();
	

	_227a3ac31_ScopeParser(void) = default;

	inline bool operator==(_227a3ac31_ScopeParser _other) {
		return 
			this->_field_p == _other._field_p &&
			this->_field_s == _other._field_s &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_pos == _other._field_pos;
	}

	inline bool operator!=(_227a3ac31_ScopeParser _other) { return !this->operator==(_other); }


};
inline void _227a488cb_push_err(_227a480c3_ExprBuilder*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline void _227a48bea_push_suggestion(_227a480c3_ExprBuilder*, jule::Str, jule::Slice<jule::Any>);
inline jule::Ptr<_24485d383_TupleExpr> _227a49008_build_tuple(_227a480c3_ExprBuilder*, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>&);
inline jule::Ptr<_24485d73a_LitExpr> _227a49316_build_lit(_227a480c3_ExprBuilder*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_2448581d5_TypeDecl> _227a49624_build_primitive_type(_227a480c3_ExprBuilder*, jule::Ptr<_2431e4523_Token>&);
inline jule::Any _227a49932_build_single(_227a480c3_ExprBuilder*, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_24485e76e_IdentExpr> _227a49c40_build_cpp_linked_ident(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24485ee78_UnaryExpr> _227a4a04d_build_unary(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244861012_SubIdentExpr> _227a4a35b_build_obj_sub_ident(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244860a8e_NsSelectionExpr> _227a4a669_build_ns_sub_ident(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_2448581d5_TypeDecl> _227a4a977_build_type(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Any _227a4ac85_build_sub_ident(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244860330_VariadicExpr> _227a4b093_build_variadic(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Any _227a4b3a1_build_op_right(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24485c9e2_RangeExpr> _227a4b6d1_build_between_parentheses(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_2448606d7_CastExpr> _227a4ba00_try_build_cast(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a4bdb8_push_arg(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_24485c706_Expr>>&, jule::Slice<jule::Ptr<_2431e4523_Token>>, jule::Ptr<_2431e4523_Token>);
inline jule::Slice<jule::Ptr<_24485c706_Expr>> _227a4c1c6_build_args(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _227a4c4d4_build_call_generics(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_2448619c4_FnCallExpr> _227a4c935_build_fn_call(_227a480c3_ExprBuilder*, jule::Ptr<_2431e4523_Token>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Any _227a4cc65_build_parentheses_range(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24485de44_UnsafeExpr> _227a4d084_build_unsafe_expr(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244869ee9_FnDecl> _227a4d392_build_anon_fn(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Any _227a4d6a0_build_unsafe(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a4da68_push_range_lit_part(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>, jule::Ptr<_2431e4523_Token>, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>&);
inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a4dd98_get_brace_range_lit_expr_parts(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244862453_FieldExprPair> _227a4e1b7_build_field_expr_pair(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_24485c706_Expr> _227a4e4c5_build_struct_lit_expr(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Ptr<_24485c706_Expr>> _227a4e7d3_build_struct_lit_exprs(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244862ba1_StructLit> _227a4eb13_build_typed_struct_literal(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_24485c706_Expr> _227a4ee32_build_brace_lit_part(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244863124_BraceLit> _227a50240_build_brace_lit(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Any _227a5054d_build_brace_range(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a5085b_get_enumerable_parts(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_2448640ae_SliceExpr> _227a50b69_build_slice(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244864950_IndexingExpr> _227a510ba_build_indexing(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>, jule::Slice<jule::Ptr<_2431e4523_Token>>, jule::Ptr<_2431e4523_Token>);
inline jule::Ptr<_24486505a_SlicingExpr> _227a5165e_build_slicing(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Ptr<_2431e4523_Token>&, jule::Ptr<_2431e4523_Token>);
inline jule::Any _227a5196c_build_bracket_range(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Any _227a51c7a_build_data(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244861485_BinopExpr> _227a52132_build_binop(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32);
inline jule::Any _227a52440_build(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Any _227a5274d_build_kind(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24485c706_Expr> _227a52a5b_build_from_tokens(_227a480c3_ExprBuilder*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
struct _227a480c3_ExprBuilder {
	jule::Ptr<_227a569b6_Parser> _field_p = jule::Ptr<_227a569b6_Parser>();
	

	_227a480c3_ExprBuilder(void) = default;

	inline bool operator==(_227a480c3_ExprBuilder _other) {
		return 
			this->_field_p == _other._field_p;
	}

	inline bool operator!=(_227a480c3_ExprBuilder _other) { return !this->operator==(_other); }


};
struct _227a53441_AssignInfo {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_l = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_r = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Ptr<_2431e4523_Token> _field_setter = jule::Ptr<_2431e4523_Token>();
	jule::Bool _field_ok = jule::Bool();
	

	_227a53441_AssignInfo(void) = default;

	inline bool operator==(_227a53441_AssignInfo _other) {
		return 
			this->_field_l == _other._field_l &&
			this->_field_r == _other._field_r &&
			this->_field_setter == _other._field_setter &&
			this->_field_ok == _other._field_ok;
	}

	inline bool operator!=(_227a53441_AssignInfo _other) { return !this->operator==(_other); }


};
inline void _227a56ce6_stop(_227a569b6_Parser*);
inline jule::Bool _227a5705a_stopped(_227a569b6_Parser*);
inline void _227a57423_push_err(_227a569b6_Parser*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline void _227a57742_push_suggestion(_227a569b6_Parser*, jule::Str, jule::Slice<jule::Any>);
inline jule::Ptr<_24485c706_Expr> _227a57a50_build_expr(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_2448249dc_Directive> _227a57d5d_build_directive(_227a569b6_Parser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a580d3_push_directive(_227a569b6_Parser*, jule::Ptr<_2448249dc_Directive>);
inline jule::Ptr<_244868503_ScopeTree> _227a5848a_build_scope(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Ptr<_2431e4523_Token>);
inline std::tuple<jule::Ptr<_2448581d5_TypeDecl>,jule::Bool> _227a588db___build_type(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32*, jule::Bool);
inline std::tuple<jule::Ptr<_2448581d5_TypeDecl>,jule::Bool> _227a58d3c_build_type(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32*, jule::Bool);
inline jule::Ptr<_24486e839_TypeAliasDecl> _227a5914a_build_type_alias_decl(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a5948b_build_var_type_and_expr(jule::Ptr<_227a569b6_Parser>, jule::Ptr<_24486aec8_VarDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a59744_build_var_common(jule::Ptr<_227a569b6_Parser>, jule::Ptr<_24486aec8_VarDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a59b0c_build_var_begin(_227a569b6_Parser*, jule::Ptr<_24486aec8_VarDecl>&, jule::I32&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24486aec8_VarDecl> _227a59e1a_build_var(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_2448657b9_GenericDecl> _227a5a228_build_generic(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _227a5a5d0_build_generics(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Ptr<_2431e4523_Token>&);
inline jule::Ptr<_244868bc9_ParamDecl> _227a5a8dd_build_self_param(_227a569b6_Parser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a5aca6_param_type_begin(_227a569b6_Parser*, jule::Ptr<_244868bc9_ParamDecl>&, jule::I32&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a5b0c5_build_param_type(jule::Ptr<_227a569b6_Parser>, jule::Ptr<_244868bc9_ParamDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a5b3e4_build_param_body(jule::Ptr<_227a569b6_Parser>, jule::Ptr<_244868bc9_ParamDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244868bc9_ParamDecl> _227a5b702_build_param(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a5b977_check_params(_227a569b6_Parser*, jule::Slice<jule::Ptr<_244868bc9_ParamDecl>>&);
inline jule::Slice<jule::Ptr<_244868bc9_ParamDecl>> _227a5bd2e_build_params(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Bool);
inline std::tuple<jule::Ptr<_24485b2e8_RetTypeDecl>,jule::Bool> _227a5c1d6_build_multi_ret_type(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32&);
inline std::tuple<jule::Ptr<_24485b2e8_RetTypeDecl>,jule::Bool> _227a5c58d_build_ret_type(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32&);
inline jule::Ptr<_244869ee9_FnDecl> _227a5c9de_build_fn_prototype(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32&, jule::Bool);
inline jule::Ptr<_244869ee9_FnDecl> _227a5ce40_build_fn(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Bool, jule::Bool);
inline jule::Slice<jule::Ptr<_2431e4523_Token>> _227a5d24d_get_use_decl_selectors(_227a569b6_Parser*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a5d56c_build_cpp_use_decl(_227a569b6_Parser*, jule::Ptr<_244870c25_UseDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a5d88b_build_std_use_decl(_227a569b6_Parser*, jule::Ptr<_244870c25_UseDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a5dbaa_build_ident_use_decl(_227a569b6_Parser*, jule::Ptr<_244870c25_UseDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a5dec9_parse_use_decl(_227a569b6_Parser*, jule::Ptr<_244870c25_UseDecl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244870c25_UseDecl> _227a5e381_build_use_decl(_227a569b6_Parser*, jule::Slice<jule::Ptr<_2431e4523_Token>>, jule::Bool);
inline jule::Ptr<_2448581d5_TypeDecl> _227a5e75a_build_type_enum_item_kind(jule::Ptr<_227a569b6_Parser>, jule::I32&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>> _227a5ea79_build_type_enum_items(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_2448728c5_TypeEnumDecl> _227a5ed87_build_type_enum_decl(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24485c706_Expr> _227a6023e_build_enum_item_expr(jule::Ptr<_227a569b6_Parser>, jule::I32&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Ptr<_244871198_EnumItemDecl>> _227a6054c_build_enum_items(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244871bc1_EnumDecl> _227a6085a_build_enum_decl(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Any _227a60b68_build_node_enum_decl(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244872e25_FieldDecl> _227a60e76_build_field(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Slice<jule::Ptr<_244872e25_FieldDecl>> _227a612a6_build_struct_decl_fields(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244873783_StructDecl> _227a615c5_build_struct_decl(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a6184a_check_method_receiver(_227a569b6_Parser*, jule::Ptr<_244869ee9_FnDecl>&);
inline jule::Slice<jule::Ptr<_244869ee9_FnDecl>> _227a61b58_build_trait_methods(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244873d8d_TraitDecl> _227a61e66_build_trait_decl(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244869ee9_FnDecl> _227a62274_build_cpp_link_fn(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_24486aec8_VarDecl> _227a62582_build_cpp_link_var(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244873783_StructDecl> _227a62890_build_cpp_link_struct(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_24486e839_TypeAliasDecl> _227a62bc0_build_cpp_link_type_alias(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_244870c25_UseDecl> _227a62ede_build_cpp_link_use(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Any _227a632ec_build_cpp_link(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244869ee9_FnDecl> _227a6360a_get_method(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a63929_parse_impl_body(jule::Ptr<_227a569b6_Parser>, jule::Ptr<_244874498_Impl>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_244874498_Impl> _227a63c37_build_impl(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Any _227a64045_build_node_data(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a64364_apply_fn_meta(_227a569b6_Parser*, jule::Ptr<_244869ee9_FnDecl>&, jule::Bool);
inline void _227a64683_apply_meta(_227a569b6_Parser*, _2448245e1_Node&, jule::Bool);
inline std::tuple<jule::Bool,jule::Any> _227a649b3_build_general_scope_node_data(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline void _227a64c49_push_use_decl(jule::Ptr<_227a569b6_Parser>, jule::Ptr<_244870c25_UseDecl>&);
inline jule::Bool _227a65057_push_meta_nodes(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline _2448245e1_Node _227a65365_parse_node(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a655da_append_node(jule::Ptr<_227a569b6_Parser>, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a65a4c_remove_range(_227a569b6_Parser*, jule::I32, jule::Str, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Slice<jule::I32>&);
inline void _227a65e37_push_wrong_order_close_err(_227a569b6_Parser*, jule::Ptr<_2431e4523_Token>&, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Slice<jule::I32>&);
inline void _227a663aa_push_range_close(_227a569b6_Parser*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Slice<jule::I32>&);
inline void _227a66630_check_ranges(_227a569b6_Parser*, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline void _227a668a5_parse(jule::Ptr<_227a569b6_Parser>, jule::Ptr<_2431e98ad_File>&);
struct _227a569b6_Parser {
	jule::Ptr<_244823942_Ast> _field_ast = jule::Ptr<_244823942_Ast>();
	jule::Slice<jule::Ptr<_2448249dc_Directive>> _field_directives = jule::Slice<jule::Ptr<_2448249dc_Directive>>();
	jule::Slice<_242dbab89_Log> _field_errors = jule::Slice<_242dbab89_Log>();
	

	_227a569b6_Parser(void) = default;

	inline bool operator==(_227a569b6_Parser _other) {
		return 
			this->_field_ast == _other._field_ast &&
			this->_field_directives == _other._field_directives &&
			this->_field_errors == _other._field_errors;
	}

	inline bool operator!=(_227a569b6_Parser _other) { return !this->operator==(_other); }


};
inline void _227a68434_push_err(_227a67d90_TypeBuilder*, jule::Ptr<_2431e4523_Token>, jule::Str);
inline void _227a68753_push_suggestion(_227a67d90_TypeBuilder*, jule::Str, jule::Slice<jule::Any>);
inline jule::Ptr<_2448581d5_TypeDecl> _227a689b7_build_prim(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a68c2b_build_namespace(_227a67d90_TypeBuilder*);
inline jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _227a68e90_build_generics(_227a67d90_TypeBuilder*);
inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a69204_ident_generics(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a69468_build_ident(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a696cc_build_cpp_link(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a69941_build_fn(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a69ba5_build_ptr(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a69e19_build_sptr(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a6a17d_build_op(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a6a3e2_build_slc(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a6a656_build_arr(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a6aa0d_build_map(_227a67d90_TypeBuilder*, jule::I32, jule::I32);
inline jule::Ptr<_2448581d5_TypeDecl> _227a6ac72_build_enumerable(_227a67d90_TypeBuilder*);
inline jule::Ptr<_2448581d5_TypeDecl> _227a6aed6_step(_227a67d90_TypeBuilder*);
inline std::tuple<jule::Ptr<_2448581d5_TypeDecl>,jule::Bool> _227a6b24a_build(_227a67d90_TypeBuilder*);
struct _227a67d90_TypeBuilder {
	jule::Ptr<_227a569b6_Parser> _field_p = jule::Ptr<_227a569b6_Parser>();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _field_tokens = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::I32* _field_i = nullptr;
	jule::Bool _field_err = jule::Bool();
	

	_227a67d90_TypeBuilder(void) = default;

	inline bool operator==(_227a67d90_TypeBuilder _other) {
		return 
			this->_field_p == _other._field_p &&
			this->_field_tokens == _other._field_tokens &&
			this->_field_i == _other._field_i &&
			this->_field_err == _other._field_err;
	}

	inline bool operator!=(_227a67d90_TypeBuilder _other) { return !this->operator==(_other); }


};
struct _24578ca31_CompileInfo {
	jule::Bool _field_prod = jule::Bool();
	jule::Bool _field_test = jule::Bool();
	jule::Str _field_compiler = jule::Str("clang", 5);
	jule::Str _field_cpp_std = jule::Str("cpp14", 5);
	

	_24578ca31_CompileInfo(void) = default;

	inline bool operator==(_24578ca31_CompileInfo _other) {
		return 
			this->_field_prod == _other._field_prod &&
			this->_field_test == _other._field_test &&
			this->_field_compiler == _other._field_compiler &&
			this->_field_cpp_std == _other._field_cpp_std;
	}

	inline bool operator!=(_24578ca31_CompileInfo _other) { return !this->operator==(_other); }


};
inline void _24578e3d4_push_err(_24578dd84_DirectiveEval*, jule::Ptr<_2431e4523_Token>, jule::Str, jule::Slice<jule::Any>);
inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _24578e78b_split_operans(_24578dd84_DirectiveEval*, jule::Str, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Bool _24578ea99_eval_directive_ident(_24578dd84_DirectiveEval*, jule::Str);
inline jule::Bool _24578eda7_eval_directive_part(_24578dd84_DirectiveEval*, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Bool _24579011b_eval(_24578dd84_DirectiveEval*);
struct _24578dd84_DirectiveEval {
	jule::Slice<_242dbab89_Log> _field_logs = jule::Slice<_242dbab89_Log>();
	jule::Ptr<_2448249dc_Directive> _field_d = jule::Ptr<_2448249dc_Directive>();
	jule::Slice<jule::Str> _field_vars = jule::Slice<jule::Str>();
	

	_24578dd84_DirectiveEval(void) = default;

	inline bool operator==(_24578dd84_DirectiveEval _other) {
		return 
			this->_field_logs == _other._field_logs &&
			this->_field_d == _other._field_d &&
			this->_field_vars == _other._field_vars;
	}

	inline bool operator!=(_24578dd84_DirectiveEval _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_246491d50_JuleImporter> static__2464a5814_new(_24578ca31_CompileInfo);
inline jule::Slice<jule::Ptr<_245547db3_ImportInfo>> _2464ea89d_all_packages(_246491d50_JuleImporter*);
inline void _24650aa45_set_mod_path(_246491d50_JuleImporter*, jule::Str);
inline jule::Str _246515c4d_get_mod_path(_246491d50_JuleImporter*);
inline jule::Str _22754894d_mod_by_id(_246491d50_JuleImporter*, jule::I32);
inline jule::Ptr<_245547db3_ImportInfo> _22760041c_get_import(_246491d50_JuleImporter*, jule::Str);
inline std::tuple<jule::Slice<jule::Ptr<_244823942_Ast>>,jule::Slice<_242dbab89_Log>> _227607204_import_package(_246491d50_JuleImporter*, jule::Str, jule::Bool);
inline void _227615c90_imported(_246491d50_JuleImporter*, jule::Ptr<_245547db3_ImportInfo>);
inline std::tuple<jule::Bool,jule::Slice<_242dbab89_Log>> _227626d4a_is_pass_build_directives(_246491d50_JuleImporter*, jule::Ptr<_244823942_Ast>&);
struct _246491d50_JuleImporter {
	jule::Slice<jule::Str> _field_mods = jule::Slice<jule::Str>();
	jule::Str _field_mod = jule::Str();
	jule::Slice<jule::Ptr<_245547db3_ImportInfo>> _field_pkgs = jule::Slice<jule::Ptr<_245547db3_ImportInfo>>();
	jule::Slice<jule::Str> _field_vars = jule::Slice<jule::Str>();
	

	_246491d50_JuleImporter(void) = default;

	inline bool operator==(_246491d50_JuleImporter _other) {
		return 
			this->_field_mods == _other._field_mods &&
			this->_field_mod == _other._field_mod &&
			this->_field_pkgs == _other._field_pkgs &&
			this->_field_vars == _other._field_vars;
	}

	inline bool operator!=(_246491d50_JuleImporter _other) { return !this->operator==(_other); }


};
struct _24572d54e_OrderedDefines {
	jule::Slice<jule::Ptr<_244848912_Struct>> _field_structs = jule::Slice<jule::Ptr<_244848912_Struct>>();
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_globals = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	

	_24572d54e_OrderedDefines(void) = default;

	inline bool operator==(_24572d54e_OrderedDefines _other) {
		return 
			this->_field_structs == _other._field_structs &&
			this->_field_globals == _other._field_globals;
	}

	inline bool operator!=(_24572d54e_OrderedDefines _other) { return !this->operator==(_other); }


};
inline jule::Bool _22a4e7e5a_is_common_ordered(jule::Slice<jule::Ptr<_244848912_Struct>>&, jule::Ptr<_244848912_Struct>);
inline jule::Bool _22a50131a_is_common_ordered(jule::Slice<jule::Ptr<_24556cc1d_Var>>&, jule::Ptr<_24556cc1d_Var>);
inline void _22a4e3e9a_order_common(jule::Slice<jule::Ptr<_244848912_Struct>>&);
inline void _22a4e47d6_order_common(jule::Slice<jule::Ptr<_24556cc1d_Var>>&);
inline void static__22782c171_order_structures(jule::Slice<jule::Ptr<_244848912_Struct>>&);
inline void static__227837610_order_vars(jule::Slice<jule::Ptr<_24556cc1d_Var>>&);
struct _2279dcc7c_DefineOrderer {
	

	_2279dcc7c_DefineOrderer(void) = default;

	inline bool operator==(_2279dcc7c_DefineOrderer _other) { return true; }

	inline bool operator!=(_2279dcc7c_DefineOrderer _other) { return !this->operator==(_other); }


};
struct _227b315a7_LiveTable {
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _field_vars = jule::Slice<jule::Ptr<_24556cc1d_Var>>();
	jule::Slice<jule::Ptr<_2449299b0_FnIns>> _field_fns = jule::Slice<jule::Ptr<_2449299b0_FnIns>>();
	jule::Slice<jule::Ptr<_244874c5c_StructIns>> _field_structs = jule::Slice<jule::Ptr<_244874c5c_StructIns>>();
	jule::Slice<jule::Ptr<_24547ec51_Trait>> _field_traits = jule::Slice<jule::Ptr<_24547ec51_Trait>>();
	

	_227b315a7_LiveTable(void) = default;

	inline bool operator==(_227b315a7_LiveTable _other) {
		return 
			this->_field_vars == _other._field_vars &&
			this->_field_fns == _other._field_fns &&
			this->_field_structs == _other._field_structs &&
			this->_field_traits == _other._field_traits;
	}

	inline bool operator!=(_227b315a7_LiveTable _other) { return !this->operator==(_other); }


};
inline void _227b63650_optimize_child(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552937d_Scope>&);
inline void _227b638e7_optimize_body_child_exceptional(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552937d_Scope>&);
inline void _227b63b7d_optimize_body_child(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552937d_Scope>&);
inline void _227b63e03_optimize_expr_model(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Any&);
inline void _227b640ce_eliminate_followed(_227b63177_ScopeDeadCode*);
inline void _227b64354_push_goto(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552be30_GotoSt>);
inline void _227b645c9_push_label(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552bb44_Label>);
inline void _227b6484e_optimize_range_iter(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552b0a5_RangeIter>);
inline void _227b64ac4_optimize_while_iter(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552a6c0_WhileIter>);
inline void _227b64d49_optimize_inf_iter(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552a24c_InfIter>);
inline void _227b650be_optimize_conditional(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_245529e61_Conditional>);
inline void _227b65344_optimize_match(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552d151_Match>);
inline void _227b655b9_optimize_assign(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552c75a_Assign>);
inline void _227b6583e_optimize_multi_assign(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Ptr<_24552cb12_MultiAssign>);
inline void _227b65ab4_optimize_stmt(jule::Ptr<_227b63177_ScopeDeadCode>, jule::Any);
inline void _227b65c90_optimize_stmts(jule::Ptr<_227b63177_ScopeDeadCode>);
struct _227b63177_ScopeDeadCode {
	jule::Ptr<_227b63177_ScopeDeadCode> _field_parent = jule::Ptr<_227b63177_ScopeDeadCode>();
	jule::Ptr<_24552937d_Scope> _field_s = jule::Ptr<_24552937d_Scope>();
	jule::Slice<jule::Any>* _field_stmts = nullptr;
	jule::I32 _field_i = jule::I32();
	jule::Ptr<jule::Slice<jule::Ptr<_24552bb44_Label>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_24552bb44_Label>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_24552be30_GotoSt>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_24552be30_GotoSt>>>();
	jule::Bool _field_except = jule::Bool();
	

	_227b63177_ScopeDeadCode(void) = default;

	inline bool operator==(_227b63177_ScopeDeadCode _other) {
		return 
			this->_field_parent == _other._field_parent &&
			this->_field_s == _other._field_s &&
			this->_field_stmts == _other._field_stmts &&
			this->_field_i == _other._field_i &&
			this->_field_labels == _other._field_labels &&
			this->_field_gotos == _other._field_gotos &&
			this->_field_except == _other._field_except;
	}

	inline bool operator!=(_227b63177_ScopeDeadCode _other) { return !this->operator==(_other); }


};
inline _227b67115_ExprDeadCode static__227b6770e_new(jule::Ptr<_227b63177_ScopeDeadCode>&);
inline void _227b67984_binary(_227b67115_ExprDeadCode*, jule::Ptr<_24491ea82_BinopExprModel>);
inline void _227b67c09_unary(_227b67115_ExprDeadCode*, jule::Ptr<_24491ec6e_UnaryExprModel>);
inline void _227b67e7e_structure_lit(_227b67115_ExprDeadCode*, jule::Ptr<_244920148_StructLitExprModel>);
inline void _227b68204_alloc_structure(_227b67115_ExprDeadCode*, jule::Ptr<_244920335_AllocStructLitExprModel>);
inline void _227b68479_casting(_227b67115_ExprDeadCode*, jule::Ptr<_244920522_CastingExprModel>);
inline void _227b686ee_args(_227b67115_ExprDeadCode*, jule::Slice<jule::Any>&);
inline void _227b68974_func_call(_227b67115_ExprDeadCode*, jule::Ptr<_24492070e_FnCallExprModel>);
inline void _227b68be9_slice(_227b67115_ExprDeadCode*, jule::Ptr<_2449208eb_SliceExprModel>);
inline void _227b68e6e_array(_227b67115_ExprDeadCode*, jule::Ptr<_244921d70_ArrayExprModel>);
inline void _227b691e4_indexing(_227b67115_ExprDeadCode*, jule::Ptr<_244920ad8_IndexingExprModel>);
inline void _227b69469_anon_func(_227b67115_ExprDeadCode*, jule::Ptr<_244920cc5_AnonFnExprModel>);
inline void _227b696de_map(_227b67115_ExprDeadCode*, jule::Ptr<_24492119e_MapExprModel>);
inline void _227b69964_slicing(_227b67115_ExprDeadCode*, jule::Ptr<_24492138b_SlicingExprModel>);
inline void _227b69bd9_trait_sub(_227b67115_ExprDeadCode*, jule::Ptr<_244921578_TraitSubIdentExprModel>);
inline void _227b69e5e_structure_sub(_227b67115_ExprDeadCode*, jule::Ptr<_244921996_StructSubIdentExprModel>);
inline void _227b6a1d4_common_sub(_227b67115_ExprDeadCode*, jule::Ptr<_244922249_CommonSubIdentExprModel>);
inline void _227b6a459_tuple(_227b67115_ExprDeadCode*, jule::Ptr<_244922436_TupleExprModel>);
inline void _227b6a6ce_new_call(_227b67115_ExprDeadCode*, jule::Ptr<_244922bd9_BuiltinNewCallExprModel>);
inline void _227b6a954_out_call(_227b67115_ExprDeadCode*, jule::Ptr<_244922623_BuiltinOutCallExprModel>);
inline void _227b6abc9_outln_call(_227b67115_ExprDeadCode*, jule::Ptr<_244922810_BuiltinOutlnCallExprModel>);
inline void _227b6ae4e_panic_call(_227b67115_ExprDeadCode*, jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>);
inline void _227b6b1c4_assert_call(_227b67115_ExprDeadCode*, jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>);
inline void _227b6b449_error_call(_227b67115_ExprDeadCode*, jule::Ptr<_244923866_BuiltinErrorCallExprModel>);
inline void _227b6b6be_make_call(_227b67115_ExprDeadCode*, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>);
inline void _227b6b944_append_call(_227b67115_ExprDeadCode*, jule::Ptr<_24492348c_BuiltinAppendCallExprModel>);
inline void _227b6bbb9_clone_call(_227b67115_ExprDeadCode*, jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>);
inline void _227b6be3e_sizeof(_227b67115_ExprDeadCode*, jule::Ptr<_244921765_SizeofExprModel>);
inline void _227b6c1b4_alignof(_227b67115_ExprDeadCode*, jule::Ptr<_244923ec6_AlignofExprModel>);
inline void _227b6c439_integrated_to_str(_227b67115_ExprDeadCode*, jule::Ptr<_2449243a0_IntegratedToStrExprModel>);
inline void _227b6c6ae_free(_227b67115_ExprDeadCode*, jule::Ptr<_244924779_FreeExprModel>);
inline void _227b6c934_backend_emit(_227b67115_ExprDeadCode*, jule::Ptr<_24492458c_BackendEmitExprModel>);
inline void _227b6cba9_optimize(_227b67115_ExprDeadCode*, jule::Any&);
struct _227b67115_ExprDeadCode {
	jule::Ptr<_227b63177_ScopeDeadCode> _field_s = jule::Ptr<_227b63177_ScopeDeadCode>();
	

	_227b67115_ExprDeadCode(void) = default;

	inline bool operator==(_227b67115_ExprDeadCode _other) {
		return 
			this->_field_s == _other._field_s;
	}

	inline bool operator!=(_227b67115_ExprDeadCode _other) { return !this->operator==(_other); }


};
struct _2456a7176_UnsafeBinopExprModel {
	jule::Ptr<_24491ea82_BinopExprModel> _field_node = jule::Ptr<_24491ea82_BinopExprModel>();
	

	_2456a7176_UnsafeBinopExprModel(void) = default;

	inline bool operator==(_2456a7176_UnsafeBinopExprModel _other) {
		return 
			this->_field_node == _other._field_node;
	}

	inline bool operator!=(_2456a7176_UnsafeBinopExprModel _other) { return !this->operator==(_other); }


};
struct _2456a7495_UnsafeIndexingExprModel {
	jule::Ptr<_244920ad8_IndexingExprModel> _field_node = jule::Ptr<_244920ad8_IndexingExprModel>();
	

	_2456a7495_UnsafeIndexingExprModel(void) = default;

	inline bool operator==(_2456a7495_UnsafeIndexingExprModel _other) {
		return 
			this->_field_node == _other._field_node;
	}

	inline bool operator!=(_2456a7495_UnsafeIndexingExprModel _other) { return !this->operator==(_other); }


};
struct _2456a785d_PushToSliceExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Ptr<_2449208eb_SliceExprModel> _field_elems = jule::Ptr<_2449208eb_SliceExprModel>();
	

	_2456a785d_PushToSliceExprModel(void) = default;

	inline bool operator==(_2456a785d_PushToSliceExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_elems == _other._field_elems;
	}

	inline bool operator!=(_2456a785d_PushToSliceExprModel _other) { return !this->operator==(_other); }


};
struct _2456a7e24_MutSlicingExprModel {
	jule::Ptr<_2431e4523_Token> _field_token = jule::Ptr<_2431e4523_Token>();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	

	_2456a7e24_MutSlicingExprModel(void) = default;

	inline bool operator==(_2456a7e24_MutSlicingExprModel _other) {
		return 
			this->_field_token == _other._field_token &&
			this->_field_expr == _other._field_expr &&
			this->_field_left == _other._field_left &&
			this->_field_right == _other._field_right;
	}

	inline bool operator!=(_2456a7e24_MutSlicingExprModel _other) { return !this->operator==(_other); }


};
struct _2456a82ba_StrInsertBeginExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_expr = jule::Any();
	

	_2456a82ba_StrInsertBeginExprModel(void) = default;

	inline bool operator==(_2456a82ba_StrInsertBeginExprModel _other) {
		return 
			this->_field_dest == _other._field_dest &&
			this->_field_expr == _other._field_expr;
	}

	inline bool operator!=(_2456a82ba_StrInsertBeginExprModel _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2456a9442_ScopeOptimizer> static__2456a9992_new(jule::Ptr<_24552937d_Scope>);
inline void _2456a9c17_set_current_stmt(_2456a9442_ScopeOptimizer*, jule::Any);
inline void _2456a9e8c_optimize_data(_2456a9442_ScopeOptimizer*, jule::Ptr<_2455b5051_Data>);
inline void _2456aa212_optimize_var(_2456a9442_ScopeOptimizer*, jule::Ptr<_24556cc1d_Var>);
inline void _2456aa487_optimize_conditional(_2456a9442_ScopeOptimizer*, jule::Ptr<_245529e61_Conditional>);
inline void _2456aa872_build_default_constat_true_case(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552db9b_Case>, jule::I32&, jule::Ptr<_24552d151_Match>&);
inline void _2456aaa81_optimize_match(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552d151_Match>);
inline void _2456aad06_optimize_range_iter(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552b0a5_RangeIter>);
inline void _2456ab07b_optimize_while_iter(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552a6c0_WhileIter>);
inline jule::Bool _2456ab389_substr(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552c75a_Assign>);
inline jule::Bool _2456ab697_str_insert(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552c75a_Assign>);
inline jule::Bool _2456ab9a5_str_assign(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552c75a_Assign>);
inline void _2456abc2a_optimize_assign(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552c75a_Assign>);
inline void _2456abea0_optimize_multi_assign(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552cb12_MultiAssign>);
inline void _2456ac225_optimize_ret(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552e6c4_RetSt>);
inline void _2456ac49a_optimize_stmt(_2456a9442_ScopeOptimizer*, jule::Any);
inline void _2456ac720_optimize_child(_2456a9442_ScopeOptimizer*, jule::Ptr<_24552937d_Scope>);
inline void _2456ac8eb_optimize(_2456a9442_ScopeOptimizer*);
struct _2456a9442_ScopeOptimizer {
	jule::I32 _field_i = jule::I32();
	jule::Ptr<_24552937d_Scope> _field_scope = jule::Ptr<_24552937d_Scope>();
	

	_2456a9442_ScopeOptimizer(void) = default;

	inline bool operator==(_2456a9442_ScopeOptimizer _other) {
		return 
			this->_field_i == _other._field_i &&
			this->_field_scope == _other._field_scope;
	}

	inline bool operator!=(_2456a9442_ScopeOptimizer _other) { return !this->operator==(_other); }


};
inline void static__2456b004c_optimize(jule::Any&);
inline jule::Bool _2456b035a_str_cond(_2456aea74_ExprOptimizer*, jule::Ptr<_24491ea82_BinopExprModel>);
inline void _2456b05d0_binary(_2456aea74_ExprOptimizer*, jule::Ptr<_24491ea82_BinopExprModel>);
inline void _2456b0855_unary(_2456aea74_ExprOptimizer*, jule::Ptr<_24491ec6e_UnaryExprModel>);
inline void _2456b0aca_structure_lit(_2456aea74_ExprOptimizer*, jule::Ptr<_244920148_StructLitExprModel>);
inline void _2456b0d50_alloc_structure(_2456aea74_ExprOptimizer*, jule::Ptr<_244920335_AllocStructLitExprModel>);
inline void _2456b10c5_casting(_2456aea74_ExprOptimizer*, jule::Ptr<_244920522_CastingExprModel>);
inline void _2456b134a_args(_2456aea74_ExprOptimizer*, jule::Slice<jule::Any>&);
inline void _2456b15c0_scope(_2456aea74_ExprOptimizer*, jule::Ptr<_24552937d_Scope>&);
inline void _2456b1845_func_call(_2456aea74_ExprOptimizer*, jule::Ptr<_24492070e_FnCallExprModel>);
inline void _2456b1aba_slice(_2456aea74_ExprOptimizer*, jule::Ptr<_2449208eb_SliceExprModel>);
inline void _2456b1d40_array(_2456aea74_ExprOptimizer*, jule::Ptr<_244921d70_ArrayExprModel>);
inline void _2456b20b5_indexing(_2456aea74_ExprOptimizer*, jule::Ptr<_244920ad8_IndexingExprModel>);
inline void _2456b233a_anon_func(_2456aea74_ExprOptimizer*, jule::Ptr<_244920cc5_AnonFnExprModel>);
inline void _2456b25b0_map(_2456aea74_ExprOptimizer*, jule::Ptr<_24492119e_MapExprModel>);
inline void _2456b2835_slicing(_2456aea74_ExprOptimizer*, jule::Ptr<_24492138b_SlicingExprModel>);
inline void _2456b2aaa_trait_sub(_2456aea74_ExprOptimizer*, jule::Ptr<_244921578_TraitSubIdentExprModel>);
inline void _2456b2d30_structure_sub(_2456aea74_ExprOptimizer*, jule::Ptr<_244921996_StructSubIdentExprModel>);
inline void _2456b30a5_common_sub(_2456aea74_ExprOptimizer*, jule::Ptr<_244922249_CommonSubIdentExprModel>);
inline void _2456b332a_tuple(_2456aea74_ExprOptimizer*, jule::Ptr<_244922436_TupleExprModel>);
inline void _2456b35a0_new_call(_2456aea74_ExprOptimizer*, jule::Ptr<_244922bd9_BuiltinNewCallExprModel>);
inline void _2456b3825_out_call(_2456aea74_ExprOptimizer*, jule::Ptr<_244922623_BuiltinOutCallExprModel>);
inline void _2456b3a9a_outln_call(_2456aea74_ExprOptimizer*, jule::Ptr<_244922810_BuiltinOutlnCallExprModel>);
inline void _2456b3d20_panic_call(_2456aea74_ExprOptimizer*, jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>);
inline void _2456b4095_assert_call(_2456aea74_ExprOptimizer*, jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>);
inline void _2456b431a_error_call(_2456aea74_ExprOptimizer*, jule::Ptr<_244923866_BuiltinErrorCallExprModel>);
inline void _2456b4590_make_call(_2456aea74_ExprOptimizer*, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>);
inline void _2456b4815_append_call(_2456aea74_ExprOptimizer*, jule::Ptr<_24492348c_BuiltinAppendCallExprModel>);
inline void _2456b4a8a_clone_call(_2456aea74_ExprOptimizer*, jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>);
inline void _2456b4d10_sizeof(_2456aea74_ExprOptimizer*, jule::Ptr<_244921765_SizeofExprModel>);
inline void _2456b5085_alignof(_2456aea74_ExprOptimizer*, jule::Ptr<_244923ec6_AlignofExprModel>);
inline void _2456b530a_integrated_to_str(_2456aea74_ExprOptimizer*, jule::Ptr<_2449243a0_IntegratedToStrExprModel>);
inline void _2456b5580_free(_2456aea74_ExprOptimizer*, jule::Ptr<_244924779_FreeExprModel>);
inline void _2456b5805_backend_emit(_2456aea74_ExprOptimizer*, jule::Ptr<_24492458c_BackendEmitExprModel>);
inline void _2456b59d1_do(_2456aea74_ExprOptimizer*);
struct _2456aea74_ExprOptimizer {
	jule::Ptr<jule::Any> _field_model = jule::Ptr<jule::Any>();
	

	_2456aea74_ExprOptimizer(void) = default;

	inline bool operator==(_2456aea74_ExprOptimizer _other) {
		return 
			this->_field_model == _other._field_model;
	}

	inline bool operator!=(_2456aea74_ExprOptimizer _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_227b3b936_Optimizer> static__227a9a224_new(jule::Ptr<_2276b0301_IR>&);
inline void _227a6de62_optimize_global(_227b3b936_Optimizer*, jule::Ptr<_24556cc1d_Var>&);
inline void _227acdc19_optimize_function(_227b3b936_Optimizer*, jule::Ptr<_244926d0e_Fn>&);
inline void _227ad305e_optimize_struct(_227b3b936_Optimizer*, jule::Ptr<_244848912_Struct>&);
inline void _227ad6bab_optimize_globals(_227b3b936_Optimizer*, jule::Ptr<_24554ad1c_Package>&);
inline void _227add014_optimize_functions(_227b3b936_Optimizer*, jule::Ptr<_24554ad1c_Package>&);
inline void _227ae6171_optimize_structs(_227b3b936_Optimizer*, jule::Ptr<_24554ad1c_Package>&);
inline void _227b01775_optimize_package(_227b3b936_Optimizer*, jule::Ptr<_24554ad1c_Package>&);
inline void _227b05da6_optimize(_227b3b936_Optimizer*);
struct _227b3b936_Optimizer {
	jule::Ptr<_2276b0301_IR> _field_ir = jule::Ptr<_2276b0301_IR>();
	

	_227b3b936_Optimizer(void) = default;

	inline bool operator==(_227b3b936_Optimizer _other) {
		return 
			this->_field_ir == _other._field_ir;
	}

	inline bool operator!=(_227b3b936_Optimizer _other) { return !this->operator==(_other); }


};
inline void static__227b8076b_reset(void);
inline void static__227b81a36_print(jule::Str, jule::Str);
struct _227b81849_AnsiEscape {
	

	_227b81849_AnsiEscape(void) = default;

	inline bool operator==(_227b81849_AnsiEscape _other) { return true; }

	inline bool operator!=(_227b81849_AnsiEscape _other) { return !this->operator==(_other); }


};
inline void static__227b831db_log_flat(_242dbab89_Log&);
inline void static__227b833ea_log_error(_242dbab89_Log&);
inline void static__227b83609_log(_242dbab89_Log&);
inline void static__227b83818_print_logs(jule::Slice<_242dbab89_Log>&);
struct _227b82e33_Logger {
	

	_227b82e33_Logger(void) = default;

	inline bool operator==(_227b82e33_Logger _other) { return true; }

	inline bool operator!=(_227b82e33_Logger _other) { return !this->operator==(_other); }


};
inline jule::U64 _22825611b_unix(_228255c64_AbsTime*);
struct _228255c64_AbsTime {
	jule::U64 _field_day = jule::U64();
	jule::U64 _field_week_day = jule::U64();
	jule::U64 _field_year_day = jule::U64();
	jule::U64 _field_month = jule::U64();
	jule::U64 _field_year = jule::U64();
	jule::U64 _field_second = jule::U64();
	jule::U64 _field_minute = jule::U64();
	jule::U64 _field_hour = jule::U64();
	

	_228255c64_AbsTime(void) = default;

	inline bool operator==(_228255c64_AbsTime _other) {
		return 
			this->_field_day == _other._field_day &&
			this->_field_week_day == _other._field_week_day &&
			this->_field_year_day == _other._field_year_day &&
			this->_field_month == _other._field_month &&
			this->_field_year == _other._field_year &&
			this->_field_second == _other._field_second &&
			this->_field_minute == _other._field_minute &&
			this->_field_hour == _other._field_hour;
	}

	inline bool operator!=(_228255c64_AbsTime _other) { return !this->operator==(_other); }


};
inline _228256407_Time static__22825679d_unix(jule::U64);
inline _228256407_Time static__22825699b_now(void);
inline jule::U64 _228256dec_unix(_228256407_Time*);
inline jule::U64 _228257161_day(_228256407_Time*);
inline jule::U64 _2282573c5_month(_228256407_Time*);
inline jule::U64 _228257639_year(_228256407_Time*);
inline jule::U64 _22825789d_second(_228256407_Time*);
inline jule::U64 _228257b12_minute(_228256407_Time*);
inline jule::U64 _228257d76_hour(_228256407_Time*);
inline _228255c64_AbsTime _2282580da_abs(_228256407_Time*);
struct _228256407_Time {
	jule::U64 _field_sec = jule::U64();
	

	_228256407_Time(void) = default;

	inline bool operator==(_228256407_Time _other) {
		return 
			this->_field_sec == _other._field_sec;
	}

	inline bool operator!=(_228256407_Time _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2281cee96_ScopeCoder> static__2281d05b2_new(jule::Ptr<_22825bb05_ObjectCoder>&);
inline void _2281d0837_range_index_iter(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552b0a5_RangeIter>&);
inline void _2281d0aac_range_hashmap_iter(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552b0a5_RangeIter>&);
inline void _2281d0d32_if_case(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_245529779_If>);
inline void _2281d10a7_conditional(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_245529e61_Conditional>);
inline void _2281d132c_inf_iter(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552a24c_InfIter>);
inline void _2281d15a2_while_iter(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552a6c0_WhileIter>);
inline void _2281d1827_range_iter(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552b0a5_RangeIter>);
inline void _2281d1a9c_cont(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552b4a1_ContSt>);
inline void _2281d1d22_label(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552bb44_Label>);
inline void _2281d2097_goto_st(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552be30_GotoSt>);
inline void _2281d231c_postfix(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552c2d7_Postfix>);
inline void _2281d2592_assign(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552c75a_Assign>);
inline void _2281d2817_multi_assign(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552cb12_MultiAssign>);
inline jule::Fn<void(void)> _2281d2b25_match_expr(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552d151_Match>);
inline void _2281d2e44_case(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552d151_Match>, jule::Ptr<_24552db9b_Case>);
inline void _2281d31b9_match_st(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552d151_Match>);
inline void _2281d343e_fall_st(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552e251_FallSt>);
inline void _2281d36b4_break_st(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552b858_BreakSt>);
inline void _2281d3939_ret_with_vars(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552e6c4_RetSt>);
inline void _2281d3bae_ret_tuple(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552e6c4_RetSt>);
inline void _2281d3e34_ret_with_exprs(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552e6c4_RetSt>);
inline void _2281d41a9_ret_st(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552e6c4_RetSt>);
inline void _2281d46a4_var(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24556cc1d_Var>);
inline void _2281d4929_st(jule::Ptr<_2281cee96_ScopeCoder>, jule::Any);
inline void _2281d4b9e_scope_stmts(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552937d_Scope>&);
inline void _2281d4e24_scope(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_24552937d_Scope>);
inline void _2281d5199_func_scope(jule::Ptr<_2281cee96_ScopeCoder>, jule::Ptr<_2449299b0_FnIns>);
struct _2281cee96_ScopeCoder {
	jule::Ptr<_22825bb05_ObjectCoder> _field_oc = jule::Ptr<_22825bb05_ObjectCoder>();
	

	_2281cee96_ScopeCoder(void) = default;

	inline bool operator==(_2281cee96_ScopeCoder _other) {
		return 
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_2281cee96_ScopeCoder _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2281d7a1a_ExprCoder> static__2281d7e16_new(jule::Ptr<_22825bb05_ObjectCoder>&);
inline void _2281d818b_string(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2448ab524_Const>&);
inline void _2281d8411_boolean(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2448ab524_Const>&);
inline void _2281d85dc_nil_lit(jule::Ptr<_2281d7a1a_ExprCoder>);
inline jule::Bool _2281d88ea_ftoa_special_cases(jule::Ptr<_2281d7a1a_ExprCoder>, jule::F64&);
inline void _2281d8b70_float32(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2448ab524_Const>&);
inline void _2281d8de5_float64(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2448ab524_Const>&);
inline void _2281d9214_constant(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2448ab524_Const>, jule::Bool);
inline void _2281d95cc_div_by_zero_binary(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2431e4523_Token>&, jule::Ptr<_24491e895_OperandExprModel>&, jule::Ptr<_24491e895_OperandExprModel>&);
inline void _2281d9852_unsafe_binary(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24491ea82_BinopExprModel>);
inline void _2281d9ac7_binary(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24491ea82_BinopExprModel>);
inline void _2281d9d4c_var(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24556cc1d_Var>);
inline void _2281da0c2_structure_ins(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244874c5c_StructIns>);
inline void _2281da347_unary(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24491ec6e_UnaryExprModel>);
inline void _2281da5bc_structure_lit(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244920148_StructLitExprModel>);
inline void _2281da842_alloc_structure(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244920335_AllocStructLitExprModel>);
inline void _2281daab7_casting(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244920522_CastingExprModel>);
inline void _2281dad3c_args(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Slice<jule::Any>);
inline void _2281db0b2_model_for_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Any);
inline void _2281db337_push_call_inf(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492070e_FnCallExprModel>&);
inline jule::Bool _2281db645_is_wrapped(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492070e_FnCallExprModel>&);
inline void _2281db8ba_pure_func_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492070e_FnCallExprModel>&);
inline void _2281dbb40_func_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492070e_FnCallExprModel>);
inline void _2281dbdb5_slice(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449208eb_SliceExprModel>);
inline void _2281dc13a_indexing(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244920ad8_IndexingExprModel>);
inline void _2281dc3b0_unsafe_indexing(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2456a7495_UnsafeIndexingExprModel>);
inline void _2281dc635_anon_func(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244920cc5_AnonFnExprModel>);
inline void _2281dc8aa_map(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492119e_MapExprModel>);
inline void _2281dcb30_slicing(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492138b_SlicingExprModel>);
inline void _2281dcda5_trait_sub(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244921578_TraitSubIdentExprModel>);
inline void _2281dd12a_structure_sub(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244921996_StructSubIdentExprModel>);
inline void _2281dd3a0_common_ident(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492205c_CommonIdentExprModel>);
inline void _2281dd625_common_sub(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244922249_CommonSubIdentExprModel>);
inline void _2281dd89a_array(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244921d70_ArrayExprModel>);
inline void _2281ddb20_func_ins_common(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449299b0_FnIns>);
inline void _2281ddd95_func_ins(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449299b0_FnIns>);
inline void _2281de11a_tuple(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244922436_TupleExprModel>);
inline void _2281de390_new_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244922bd9_BuiltinNewCallExprModel>);
inline void _2281de615_out_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244922623_BuiltinOutCallExprModel>);
inline void _2281de88a_outln_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244922810_BuiltinOutlnCallExprModel>);
inline void _2281deb10_panic_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>);
inline void _2281ded85_assert_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>);
inline void _2281e010a_error_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244923866_BuiltinErrorCallExprModel>);
inline void _2281e0380_copy_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244923679_BuiltinCopyCallExprModel>);
inline void _2281e0605_make_call_slice(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>&);
inline void _2281e087a_make_call_str(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>&);
inline void _2281e0b00_make_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>);
inline void _2281e0d75_push_to_slice(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2456a785d_PushToSliceExprModel>);
inline void _2281e10ea_append_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492348c_BuiltinAppendCallExprModel>);
inline void _2281e1370_clone_call(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>);
inline void _2281e15e5_sizeof(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244921765_SizeofExprModel>);
inline void _2281e186a_alignof(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244923ec6_AlignofExprModel>);
inline jule::Str _2281e1b78_rune_lit(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449241b3_RuneExprModel>);
inline void _2281e1ded_structure_static(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244921b83_StructStaticIdentExprModel>);
inline void _2281e2173_integrated_to_str(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2449243a0_IntegratedToStrExprModel>);
inline void _2281e23e8_backend_emit(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_24492458c_BackendEmitExprModel>);
inline void _2281e266d_free(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_244924779_FreeExprModel>);
inline void _2281e28e3_mut_slicing(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2456a7e24_MutSlicingExprModel>);
inline void _2281e2b68_str_insert_begin(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2456a82ba_StrInsertBeginExprModel>);
inline void _2281e2ddd_model(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Any);
inline void _2281e3163_expr(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Any);
inline void _2281e33d8_val(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2455b60c9_Value>);
inline void _2281e365d_init_expr(jule::Ptr<_2281d7a1a_ExprCoder>, jule::Ptr<_2455e1027_TypeKind>);
struct _2281d7a1a_ExprCoder {
	jule::Ptr<_22825bb05_ObjectCoder> _field_oc = jule::Ptr<_22825bb05_ObjectCoder>();
	

	_2281d7a1a_ExprCoder(void) = default;

	inline bool operator==(_2281d7a1a_ExprCoder _other) {
		return 
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_2281d7a1a_ExprCoder _other) { return !this->operator==(_other); }


};
inline jule::Str static__2281e5bc1_clone_func_decl(jule::Ptr<_244848912_Struct>&);
inline jule::Str static__2281e5e68_clone_func_def(jule::Ptr<_244848912_Struct>&);
struct _2281e5918_DeriveCoder {
	

	_2281e5918_DeriveCoder(void) = default;

	inline bool operator==(_2281e5918_DeriveCoder _other) { return true; }

	inline bool operator!=(_2281e5918_DeriveCoder _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_2281e6d48_TestCoder> static__2281e72bb_new(jule::Ptr<_22825bb05_ObjectCoder>&);
inline jule::Ptr<_245547db3_ImportInfo> _2281e7530_find_testing_package(jule::Ptr<_2281e6d48_TestCoder>);
inline void _2281e77a5_append_test(jule::Ptr<_2281e6d48_TestCoder>, jule::Ptr<_2449299b0_FnIns>);
inline void _2281e7a2a_append_package_tests(jule::Ptr<_2281e6d48_TestCoder>, jule::Ptr<_24554ad1c_Package>&);
inline jule::Bool _2281e7c8e_ready_testing_package(jule::Ptr<_2281e6d48_TestCoder>);
inline void _2281e7e6a_call_tm_reset(jule::Ptr<_2281e6d48_TestCoder>);
inline void _2281e8146_call_tm_failed(jule::Ptr<_2281e6d48_TestCoder>);
inline void _2281e8322_call_tm_skipped(jule::Ptr<_2281e6d48_TestCoder>);
inline void _2281e84ed_serialize(jule::Ptr<_2281e6d48_TestCoder>);
struct _2281e6d48_TestCoder {
	jule::Ptr<_244874c5c_StructIns> _field_t = jule::Ptr<_244874c5c_StructIns>();
	jule::Ptr<_244926d0e_Fn> _field_tm_reset = jule::Ptr<_244926d0e_Fn>();
	jule::Ptr<_244926d0e_Fn> _field_tm_failed = jule::Ptr<_244926d0e_Fn>();
	jule::Ptr<_244926d0e_Fn> _field_tm_skipped = jule::Ptr<_244926d0e_Fn>();
	jule::Ptr<_22825bb05_ObjectCoder> _field_oc = jule::Ptr<_22825bb05_ObjectCoder>();
	

	_2281e6d48_TestCoder(void) = default;

	inline bool operator==(_2281e6d48_TestCoder _other) {
		return 
			this->_field_t == _other._field_t &&
			this->_field_tm_reset == _other._field_tm_reset &&
			this->_field_tm_failed == _other._field_tm_failed &&
			this->_field_tm_skipped == _other._field_tm_skipped &&
			this->_field_oc == _other._field_oc;
	}

	inline bool operator!=(_2281e6d48_TestCoder _other) { return !this->operator==(_other); }


};
inline jule::Str static__2281e99a5_to_out(jule::Str&, jule::Uintptr);
inline jule::Str static__2281e9d90_to_local(jule::I32, jule::I32, jule::Str&);
inline jule::Str static__2281ea137_func(jule::Ptr<_244926d0e_Fn>&);
inline jule::Str static__2281ea3ce_func_ins(jule::Ptr<_2449299b0_FnIns>&);
inline jule::Str static__2281ea676_trait_decl(jule::Ptr<_24547ec51_Trait>);
inline jule::Str static__2281ea91d_param(jule::Ptr<_2449254c2_Param>&);
inline jule::Str static__2281eabb5_structure(jule::Ptr<_244848912_Struct>&);
inline jule::Str static__2281eae5c_structure_ins(jule::Ptr<_244874c5c_StructIns>&);
inline jule::Str static__2281eb204_field(jule::Ptr<_24483adcc_Field>&);
inline jule::Str static__2281eb49b_var(jule::Ptr<_24556cc1d_Var>);
inline jule::Str static__2281eb743_iter_begin(jule::Uintptr);
inline jule::Str static__2281eb9da_iter_end(jule::Uintptr);
inline jule::Str static__2281ebc82_iter_next(jule::Uintptr);
inline jule::Str static__2281ec029_label(jule::Str&);
inline jule::Str static__2281ec2c1_match_end(jule::Uintptr);
inline jule::Str static__2281ec568_case_begin(jule::Uintptr);
struct _2281e9499_IdentCoder {
	

	_2281e9499_IdentCoder(void) = default;

	inline bool operator==(_2281e9499_IdentCoder _other) { return true; }

	inline bool operator!=(_2281e9499_IdentCoder _other) { return !this->operator==(_other); }


};
struct _22825b72b_SerializationInfo {
	jule::Str _field_compiler = jule::Str();
	jule::Str _field_compiler_command = jule::Str();
	

	_22825b72b_SerializationInfo(void) = default;

	inline bool operator==(_22825b72b_SerializationInfo _other) {
		return 
			this->_field_compiler == _other._field_compiler &&
			this->_field_compiler_command == _other._field_compiler_command;
	}

	inline bool operator!=(_22825b72b_SerializationInfo _other) { return !this->operator==(_other); }


};
struct _22825b918_TraitHash {
	jule::Ptr<_24547ec51_Trait> _field_t = jule::Ptr<_24547ec51_Trait>();
	jule::Ptr<_244874c5c_StructIns> _field_s = jule::Ptr<_244874c5c_StructIns>();
	jule::I32 _field_i = jule::I32();
	

	_22825b918_TraitHash(void) = default;

	inline bool operator==(_22825b918_TraitHash _other) {
		return 
			this->_field_t == _other._field_t &&
			this->_field_s == _other._field_s &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_22825b918_TraitHash _other) { return !this->operator==(_other); }


};
inline jule::Str _228262941_to_str(_228262677_CustomType*);
inline jule::Bool _228262c4e_equals(jule::Ptr<_228262677_CustomType>, jule::Ptr<_2455e1027_TypeKind>);
struct _228262677_CustomType {
	jule::Str _field_kind = jule::Str();
	

	_228262677_CustomType(void) = default;

	inline bool operator==(_228262677_CustomType _other) {
		return 
			this->_field_kind == _other._field_kind;
	}

	inline bool operator!=(_228262677_CustomType _other) { return !this->operator==(_other); }


};
inline jule::Str static__22826349c_to_type(jule::Str);
inline jule::Str static__228263744_prim(jule::Ptr<_2455e59ee_Prim>);
inline jule::Str static__2282639db_tuple(jule::Ptr<_2455ea76d_Tuple>);
inline jule::Str static__228263c83_as_sptr(jule::Str);
inline jule::Str static__22826402a_as_ptr(jule::Str);
inline jule::Str static__2282642c2_sptr(jule::Ptr<_2455e9283_Sptr>);
inline jule::Str static__228264569_ptr(jule::Ptr<_2455ec7e7_Ptr>);
inline jule::Str static__228264811_enum_decl(jule::Ptr<_245481e0c_Enum>);
inline jule::Str static__228264aa8_type_enum_decl(jule::Ptr<_245483507_TypeEnum>);
inline jule::Str static__228264d50_as_slice(jule::Ptr<_2455e1027_TypeKind>);
inline jule::Str static__2282650e7_slice(jule::Ptr<_2455e9be0_Slc>);
inline jule::Str static__22826538e_map(jule::Ptr<_2455eb296_Map>);
inline jule::Str static__228265636_trait_ident(jule::Str);
inline jule::Str static__2282658cd_trait_decl(jule::Ptr<_24547ec51_Trait>);
inline jule::Str static__228265b75_structure(jule::Ptr<_244848912_Struct>);
inline jule::Str static__228265e1c_structure_ins(jule::Ptr<_244874c5c_StructIns>);
inline jule::Str static__2282661b4_array(jule::Ptr<_2455ebd8a_Arr>);
inline jule::Str static__228266703_param_ins(jule::Ptr<_244928ae1_ParamIns>&);
inline jule::Str static__228266c42_func_ins_result(jule::Ptr<_2449299b0_FnIns>&);
inline jule::Str static__228266ed9_anon_func(jule::Ptr<_2449299b0_FnIns>);
inline jule::Str static__228267281_func(jule::Ptr<_2449299b0_FnIns>);
inline jule::Str static__228267528_kind(jule::Ptr<_2455e1027_TypeKind>);
struct _228262e6e_TypeCoder {
	

	_228262e6e_TypeCoder(void) = default;

	inline bool operator==(_228262e6e_TypeCoder _other) { return true; }

	inline bool operator!=(_228262e6e_TypeCoder _other) { return !this->operator==(_other); }


};
inline jule::Str _22a8347b3_name(_22aa3da99_Flag*);
inline jule::Str _22a8348e5_what(_22aa3da99_Flag*);
inline void _22aa3de84_reset(_22aa3da99_Flag*);
inline jule::I32 _22aa3e0b6_short(_22aa3da99_Flag*);
struct _22aa3da99_Flag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::I64 _field__default = jule::I64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::I64> _field__data = jule::Ptr<jule::I64>();
	

	_22aa3da99_Flag(void) = default;

	inline bool operator==(_22aa3da99_Flag _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_22aa3da99_Flag _other) { return !this->operator==(_other); }


};inline jule::Str _22aa422a6_name(_22aa4275c_Flag*);
inline jule::Str _22aa42a26_what(_22aa4275c_Flag*);
inline void _22aa42b58_reset(_22aa4275c_Flag*);
inline jule::I32 _22aa42c8a_short(_22aa4275c_Flag*);
struct _22aa4275c_Flag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::U64 _field__default = jule::U64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::U64> _field__data = jule::Ptr<jule::U64>();
	

	_22aa4275c_Flag(void) = default;

	inline bool operator==(_22aa4275c_Flag _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_22aa4275c_Flag _other) { return !this->operator==(_other); }


};inline jule::Str _22aa45c8d_name(_22aa46244_Flag*);
inline jule::Str _22aa4650d_what(_22aa46244_Flag*);
inline void _22aa46640_reset(_22aa46244_Flag*);
inline jule::I32 _22aa46772_short(_22aa46244_Flag*);
struct _22aa46244_Flag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::F64 _field__default = jule::F64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::F64> _field__data = jule::Ptr<jule::F64>();
	

	_22aa46244_Flag(void) = default;

	inline bool operator==(_22aa46244_Flag _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_22aa46244_Flag _other) { return !this->operator==(_other); }


};inline jule::Str _22aa497b9_name(_22aa49c70_Flag*);
inline jule::Str _22aa4a039_what(_22aa49c70_Flag*);
inline void _22aa4a16b_reset(_22aa49c70_Flag*);
inline jule::I32 _22aa4a29d_short(_22aa49c70_Flag*);
struct _22aa49c70_Flag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Bool _field__default = jule::Bool();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Bool> _field__data = jule::Ptr<jule::Bool>();
	

	_22aa49c70_Flag(void) = default;

	inline bool operator==(_22aa49c70_Flag _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_22aa49c70_Flag _other) { return !this->operator==(_other); }


};inline jule::Str _22aa4d2a1_name(_22aa4d757_Flag*);
inline jule::Str _22aa4da21_what(_22aa4d757_Flag*);
inline void _22aa4db53_reset(_22aa4d757_Flag*);
inline jule::I32 _22aa4dc85_short(_22aa4d757_Flag*);
struct _22aa4d757_Flag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Str _field__default = jule::Str();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Str> _field__data = jule::Ptr<jule::Str>();
	

	_22aa4d757_Flag(void) = default;

	inline bool operator==(_22aa4d757_Flag _other) {
		return 
			this->_field__name == _other._field__name &&
			this->_field__short == _other._field__short &&
			this->_field__default == _other._field__default &&
			this->_field__what == _other._field__what &&
			this->_field__data == _other._field__data;
	}

	inline bool operator!=(_22aa4d757_Flag _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_22829d5c5_FlagSet> static__22829d8b1_new(void);
inline jule::Trait<_227d88886_CommonFlag> _22829dd45_find_flag(_22829d5c5_FlagSet*, jule::Str);
inline jule::Trait<_227d88886_CommonFlag> _22829e153_find_flag_short(_22829d5c5_FlagSet*, jule::I32);
inline jule::Slice<jule::Trait<_227d88886_CommonFlag>> _22829e3b7_flags(_22829d5c5_FlagSet*);
inline jule::Exceptional<jule::Slice<jule::Str>> _22829e6c5_parse(_22829d5c5_FlagSet*, jule::Slice<jule::Str>);
inline void _22829e8a1_reset(_22829d5c5_FlagSet*);
inline jule::Ptr<_22aa4d757_Flag> _22aac4899_add_flag_common(_22829d5c5_FlagSet*, jule::Str, jule::I32, jule::Str);
inline jule::Ptr<_22aa49c70_Flag> _22aacd4b8_add_flag_common(_22829d5c5_FlagSet*, jule::Str, jule::I32, jule::Str);
inline void _22aac2864_add_var(_22829d5c5_FlagSet*, jule::Ptr<jule::Str>, jule::Str, jule::I32, jule::Str);
inline void _22aacb494_add_var(_22829d5c5_FlagSet*, jule::Ptr<jule::Bool>, jule::Str, jule::I32, jule::Str);
struct _22829d5c5_FlagSet {
	jule::Slice<jule::Trait<_227d88886_CommonFlag>> _field__flags = jule::Slice<jule::Trait<_227d88886_CommonFlag>>();
	

	_22829d5c5_FlagSet(void) = default;

	inline bool operator==(_22829d5c5_FlagSet _other) {
		return 
			this->_field__flags == _other._field__flags;
	}

	inline bool operator!=(_22829d5c5_FlagSet _other) { return !this->operator==(_other); }


};
inline std::tuple<jule::Ptr<_2276b0301_IR>,jule::Slice<_242dbab89_Log>> static__24571502a_build(jule::Str, jule::I32);
inline void _245748080_append_structs(_2276b0301_IR*, jule::Ptr<_24554ad1c_Package>&, jule::Slice<jule::Ptr<_244848912_Struct>>&);
inline jule::Slice<jule::Ptr<_244848912_Struct>> _24575174d_get_all_structures(_2276b0301_IR*);
inline void _245773e8a_append_globals(_2276b0301_IR*, jule::Ptr<_24554ad1c_Package>&, jule::Slice<jule::Ptr<_24556cc1d_Var>>&);
inline jule::Slice<jule::Ptr<_24556cc1d_Var>> _2276321c9_get_all_globals(_2276b0301_IR*);
inline void _22767cd5c_order(_2276b0301_IR*);
struct _2276b0301_IR {
	jule::Str _field_root = jule::Str();
	jule::Slice<jule::Str> _field_passes = jule::Slice<jule::Str>();
	jule::Ptr<_24554ad1c_Package> _field_main = jule::Ptr<_24554ad1c_Package>();
	jule::Slice<jule::Ptr<_245547db3_ImportInfo>> _field_used = jule::Slice<jule::Ptr<_245547db3_ImportInfo>>();
	_24572d54e_OrderedDefines _field_ordered = _24572d54e_OrderedDefines();
	

	_2276b0301_IR(void) = default;

	inline bool operator==(_2276b0301_IR _other) {
		return 
			this->_field_root == _other._field_root &&
			this->_field_passes == _other._field_passes &&
			this->_field_main == _other._field_main &&
			this->_field_used == _other._field_used &&
			this->_field_ordered == _other._field_ordered;
	}

	inline bool operator!=(_2276b0301_IR _other) { return !this->operator==(_other); }


};
inline jule::Str _24484a5e5_to_str(_244874c5c_StructIns*);
inline jule::Bool _24484b75b_equals(jule::Ptr<_244874c5c_StructIns>, jule::Ptr<_2455e1027_TypeKind>);
inline jule::Bool _24484dab0_same(_244874c5c_StructIns*, jule::Ptr<_244874c5c_StructIns>);
inline jule::Ptr<_244926d0e_Fn> _24484edd0_find_method(_244874c5c_StructIns*, jule::Str, jule::Bool);
inline jule::Ptr<_244851079_FieldIns> _2448528e9_find_field(_244874c5c_StructIns*, jule::Str);
struct _244874c5c_StructIns {
	jule::Bool _field_checked = jule::Bool();
	jule::Ptr<_244848912_Struct> _field_decl = jule::Ptr<_244848912_Struct>();
	jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>> _field_generics = jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>>();
	jule::Slice<jule::Ptr<_244851079_FieldIns>> _field_fields = jule::Slice<jule::Ptr<_244851079_FieldIns>>();
	jule::Slice<jule::Ptr<_244926d0e_Fn>> _field_methods = jule::Slice<jule::Ptr<_244926d0e_Fn>>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Ptr<_24492c8b4_ReferenceStack> _field_refers = jule::Ptr<_24492c8b4_ReferenceStack>();
	_24484a33c_Operators _field_operators = _24484a33c_Operators();
	

	_244874c5c_StructIns(void) = default;

	inline bool operator==(_244874c5c_StructIns _other) {
		return 
			this->_field_checked == _other._field_checked &&
			this->_field_decl == _other._field_decl &&
			this->_field_generics == _other._field_generics &&
			this->_field_fields == _other._field_fields &&
			this->_field_methods == _other._field_methods &&
			this->_field_mutable == _other._field_mutable &&
			this->_field_refers == _other._field_refers &&
			this->_field_operators == _other._field_operators;
	}

	inline bool operator!=(_244874c5c_StructIns _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_227b31871_ObjectDeadCode> static__227b31cc2_new(jule::Ptr<_2276b0301_IR>&);
inline jule::Bool _22a52b1ad_is_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24547ec51_Trait>&);
inline jule::Bool _22a531e83_is_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_2449299b0_FnIns>&);
inline jule::Bool _22a538110_is_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_244874c5c_StructIns>&);
inline jule::Bool _22a540029_is_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24556cc1d_Var>&);
inline void _22a52b752_push_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24547ec51_Trait>);
inline void _22a5355b3_push_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_2449299b0_FnIns>);
inline void _22a538693_push_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_244874c5c_StructIns>);
inline void _22a543912_push_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24556cc1d_Var>);
inline void _227b5ee21_set_references_as_live(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24492c8b4_ReferenceStack>&);
inline void _227b60196_inits(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24554ad1c_Package>&);
inline void _227b6041b_collect_live_package(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24554ad1c_Package>&);
inline void _227b605e7_collect_live(jule::Ptr<_227b31871_ObjectDeadCode>);
inline void _227b6086c_remove_dead_globals(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Slice<jule::Ptr<_24556cc1d_Var>>&);
inline void _227b60ae2_remove_dead_fns(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Slice<jule::Ptr<_244926d0e_Fn>>&);
inline void _227b60d67_remove_dead_structs(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Slice<jule::Ptr<_244848912_Struct>>&);
inline void _227b610dc_remove_dead_traits(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Slice<jule::Ptr<_24547ec51_Trait>>&);
inline void _227b61362_remove_deads_file(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_2455b02e3_SymbolTable>&);
inline void _227b615d7_remove_deads_package(jule::Ptr<_227b31871_ObjectDeadCode>, jule::Ptr<_24554ad1c_Package>&);
inline void _227b617b3_remove_deads(jule::Ptr<_227b31871_ObjectDeadCode>);
inline void _227b6198e_elimanate(jule::Ptr<_227b31871_ObjectDeadCode>);
struct _227b31871_ObjectDeadCode {
	_227b315a7_LiveTable _field_live = _227b315a7_LiveTable();
	jule::Ptr<_2276b0301_IR> _field_ir = jule::Ptr<_2276b0301_IR>();
	

	_227b31871_ObjectDeadCode(void) = default;

	inline bool operator==(_227b31871_ObjectDeadCode _other) {
		return 
			this->_field_live == _other._field_live &&
			this->_field_ir == _other._field_ir;
	}

	inline bool operator!=(_227b31871_ObjectDeadCode _other) { return !this->operator==(_other); }


};
inline jule::Ptr<_22825bb05_ObjectCoder> static__22823eb2c_new(jule::Ptr<_2276b0301_IR>&, _22825b72b_SerializationInfo);
inline void _22823ee5c_write(jule::Ptr<_22825bb05_ObjectCoder>, jule::Str);
inline void _2282406ee_add_indent(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _2282416de_done_indent(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228241e3c_indent(jule::Ptr<_22825bb05_ObjectCoder>);
inline jule::I32 _2282312b1_find_type_offset(_22825bb05_ObjectCoder*, jule::Ptr<_24547ec51_Trait>, jule::Ptr<_2455e1027_TypeKind>);
inline void _228243328_loc_info(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_2431e4523_Token>&);
inline void _228222956_head(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228240e4c_links(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228226284_prepare_structures(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22822d0c1_iter_packages(jule::Ptr<_22825bb05_ObjectCoder>, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)>);
inline void _22822d654_build_trait_map(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22822e523_trait_decls(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22822ebd8_structure_plain_decl(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244848912_Struct>&);
inline void _22823039d_structure_plain_decls(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228230a63_field_decl(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244851079_FieldIns>&);
inline void _22822764d_structure_destructor(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825c199_structure_derive_defs_decls(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825c2cb_structure_operator_eq(jule::Ptr<_22825bb05_ObjectCoder>, jule::Str&, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825c40d_structure_operator_not_eq(jule::Ptr<_22825bb05_ObjectCoder>, jule::Str&, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825c540_structure_operator(jule::Ptr<_22825bb05_ObjectCoder>, jule::Str&, jule::Ptr<_2449299b0_FnIns>&, jule::Str);
inline void _22825c672_structure_operators(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825c7a4_structure_ins_decl(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825c8d6_structure_decl(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244848912_Struct>&);
inline void _22825ca18_structure_decls(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22825cb4a_params_decls(jule::Ptr<_22825bb05_ObjectCoder>, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>&);
inline void _22825cc7c_func_head(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_2449299b0_FnIns>&, jule::Bool);
inline void _22825cdae_func_decl(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244926d0e_Fn>&, jule::Bool);
inline void _22825cee1_func_decls(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22825d123_trait_data_types(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22825d255_param_ins(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244928ae1_ParamIns>&);
inline void _22825d475_params_ins(jule::Ptr<_22825bb05_ObjectCoder>, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>&);
inline void _22825d794_var_init_expr(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_24556cc1d_Var>&, jule::Fn<void(void)>);
inline void _22825da19_var(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_24556cc1d_Var>);
inline void _22825dc8e_func(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244926d0e_Fn>&);
inline void _22825de6a_trait_wrappers(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22825e146_trait_datas(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22825e322_globals(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22825e4ed_decls(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _22825e773_structure_methods(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825e9e8_structure_derive_defs(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825ec6d_structure_ostream(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _22825eee3_structure_ins(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244874c5c_StructIns>&);
inline void _228260268_structure(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_244848912_Struct>&);
inline void _228260444_structures(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228260620_funcs(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228260895_push_init(jule::Ptr<_22825bb05_ObjectCoder>, jule::Ptr<_24554ad1c_Package>&);
inline void _228260a71_init_caller(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228260c4c_end(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228260e28_serialize_head(jule::Ptr<_22825bb05_ObjectCoder>);
inline void _228261104_serialize(jule::Ptr<_22825bb05_ObjectCoder>);
struct _22825bb05_ObjectCoder {
	jule::Str _field_obj = jule::Str();
	jule::Ptr<_2276b0301_IR> _field_ir = jule::Ptr<_2276b0301_IR>();
	_22825b72b_SerializationInfo _field_info = _22825b72b_SerializationInfo();
	jule::Slice<jule::Ptr<_22825b918_TraitHash>> _field_tmap = jule::Slice<jule::Ptr<_22825b918_TraitHash>>();
	jule::Str _field_indent_buffer = jule::Str();
	jule::Ptr<_2281d7a1a_ExprCoder> _field_ec = jule::Ptr<_2281d7a1a_ExprCoder>();
	jule::Ptr<_2281cee96_ScopeCoder> _field_sc = jule::Ptr<_2281cee96_ScopeCoder>();
	

	_22825bb05_ObjectCoder(void) = default;

	inline bool operator==(_22825bb05_ObjectCoder _other) {
		return 
			this->_field_obj == _other._field_obj &&
			this->_field_ir == _other._field_ir &&
			this->_field_info == _other._field_info &&
			this->_field_tmap == _other._field_tmap &&
			this->_field_indent_buffer == _other._field_indent_buffer &&
			this->_field_ec == _other._field_ec &&
			this->_field_sc == _other._field_sc;
	}

	inline bool operator!=(_22825bb05_ObjectCoder _other) { return !this->operator==(_other); }


};
inline std::tuple<jule::I64,jule::Bool> _22aa628c0_parse_integer(_2282a0c9d_ArgParser*, jule::Str&, jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I32)>);
inline std::tuple<jule::U64,jule::Bool> _22aa6a763_parse_integer(_2282a0c9d_ArgParser*, jule::Str&, jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I32)>);
inline jule::Str _2282a1595_get_data(_2282a0c9d_ArgParser*);
inline jule::VoidExceptional _2282a17d7_process_flag(_2282a0c9d_ArgParser*, jule::Trait<_227d88886_CommonFlag>&);
inline jule::VoidExceptional _2282a1a5c_single_dash(_2282a0c9d_ArgParser*, jule::Str&);
inline jule::VoidExceptional _2282a1cd2_double_dash(_2282a0c9d_ArgParser*, jule::Str&);
inline jule::VoidExceptional _2282a1ead_try_arg(_2282a0c9d_ArgParser*);
inline jule::VoidExceptional _2282a2189_parse(_2282a0c9d_ArgParser*);
struct _2282a0c9d_ArgParser {
	_22829d5c5_FlagSet _field_set = _22829d5c5_FlagSet();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_content = jule::Slice<jule::Str>();
	jule::I32 _field_i = jule::I32();
	

	_2282a0c9d_ArgParser(void) = default;

	inline bool operator==(_2282a0c9d_ArgParser _other) {
		return 
			this->_field_set == _other._field_set &&
			this->_field_args == _other._field_args &&
			this->_field_content == _other._field_content &&
			this->_field_i == _other._field_i;
	}

	inline bool operator!=(_2282a0c9d_ArgParser _other) { return !this->operator==(_other); }


};
inline jule::I32 _241c9e61d_decode_rune(jule::I32, jule::I32);
inline std::tuple<jule::I32,jule::I32> _241c9e8b5_encode_rune(jule::I32);
inline jule::Slice<jule::I32> _241c9ee7b_decode(jule::Slice<jule::U16>);
inline jule::Slice<jule::U16> _241ca0289_append_rune(jule::Slice<jule::U16>, jule::I32);
inline jule::Slice<jule::U16> _241c89d9a_utf16_from_str(jule::Str);
inline jule::Str _241c8a9d3_utf16_to_str(jule::Slice<jule::U16>);
inline jule::Str _241c8ab15_u16_ptr_to_str(jule::U16*);
inline jule::I32 _240ee9281_get_last_errno(void);
inline jule::Uintptr _241ca18a6_get_std_handle(jule::Uintptr);
inline jule::I32 _241ca1d07_wstat(jule::U16*, struct stat*);
inline jule::I32 _241ca21e2__wopen(jule::U16*, jule::I32, jule::I32);
inline jule::U32 _241ca23e0_get_last_error(void);
inline jule::U32 _241ca2731_get_current_directory(jule::U32, jule::U16*);
inline jule::Bool _241ca2c70_delete_file(jule::U16*);
inline jule::Bool _241ca3017_create_directory(jule::U16*);
inline jule::Bool _241ca32ae_remove_directory(jule::U16*);
inline _WDIR* _241ca3556__wopendir(jule::U16*);
inline struct _wdirent* _241ca37ed__wreaddir(_WDIR*);
inline jule::I32 _241ca3a95__wclosedir(_WDIR*);
inline jule::U32 _241ca426b_get_full_path_name(jule::U16*, jule::U32, jule::U16*, jule::U16**);
inline jule::Bool _241ca45ac_get_console_mode(jule::Uintptr, jule::I32&);
inline jule::Bool _241ca48ed_set_console_mode(jule::Uintptr, jule::I32);
inline jule::Bool _241ca4e2b_write_console(jule::Uintptr, jule::U16*, jule::I32, jule::I32&, void*);
inline jule::Bool _241ca5459_read_console(jule::Uintptr, jule::U16*, jule::I32, jule::I32&, void*);
inline jule::I32 _241ca77e1_seek(jule::I32, jule::I32, jule::I32);
inline jule::I32 _241ca7bcb_read(jule::I32, void*, jule::U32);
inline jule::I32 _241ca8050_close(jule::I32);
inline jule::I32 _241ca843a_write(jule::I32, void*, jule::U32);
inline void _241ca8649_exit(jule::I32);
inline std::tuple<jule::I32,jule::I32> _241d86859_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::I32> _241d86e20_decode_last_rune(jule::Slice<jule::U8>);
inline jule::I32 _241d8745e_rune_len(jule::I32);
inline jule::I32 _241d8787c_encode_rune(jule::Slice<jule::U8>, jule::I32);
inline jule::Slice<jule::U8> _241d87bbd_append_rune(jule::Slice<jule::U8>, jule::I32);
inline jule::Slice<jule::U8> _241d8800e_append_rune_non_ascii(jule::Slice<jule::U8>, jule::I32);
inline jule::I32 _241d8854d_rune_count_str(jule::Str);
inline jule::Bool _241d887e5_rune_start(jule::U8);
inline jule::I32 _241e32b36_get_last_os_error_windows(void);
inline jule::Slice<jule::Str> _241e36cd3_args(void);
inline jule::Exceptional<jule::Str> _241e37256_working_dir(void);
inline jule::Exceptional<jule::Str> _241e37b19___getwd(void);
inline jule::Slice<jule::U8> _241ec008b_stobs(jule::Str&);
inline jule::Bool _242cdd23d_is_letter(jule::I32);
inline jule::Bool _242d60667_is16(jule::Slice<_242d5daa5_Range16>, jule::U16);
inline jule::Bool _242d609a8_is32(jule::Slice<_242d5e028_Range32>, jule::U32);
inline jule::Bool _242d6124a_is_excluding_latin(jule::Ptr<_242d5e49b_RangeTable>, jule::I32);
inline jule::Str _241ec9e0e_repeat(jule::Str, jule::I32);
inline jule::Bool _241ecce9a__has_prefix(jule::Str&, jule::Str&, jule::I32);
inline jule::Bool _241ec93e7_has_prefix(jule::Str, jule::Str);
inline jule::Bool _241ed084e__has_suffix(jule::Str&, jule::Str&, jule::I32);
inline jule::Bool _242cb8d2e_has_suffix(jule::Str, jule::Str);
inline jule::I32 _242cc21cd_find_at(jule::Str, jule::Str, jule::I32);
inline jule::I32 _242cd5059_find_last_at(jule::Str, jule::Str, jule::I32);
inline jule::I32 _242cd87cc_find_last(jule::Str, jule::Str);
inline jule::I32 _242d619ed__find_rune(jule::Slice<jule::U8>&, jule::I32);
inline jule::I32 _242d61e93_find_last_byte(jule::Str, jule::U8);
inline jule::I32 _242d6246b_find_any(jule::Str, jule::Str);
inline jule::Slice<jule::Str> _242d626d0_split(jule::Str, jule::Str, jule::I32);
inline jule::Bool _242d62812_contains(jule::Str, jule::Str);
inline jule::Bool _242d62ba8_contains_any(jule::Str, jule::Str);
inline jule::I32 _242d62cda_count(jule::Str, jule::Str);
inline jule::Str _242d62e1c_replace(jule::Str, jule::Str, jule::Str, jule::I32);
inline void _242d61c62__trim_left(jule::Slice<jule::U8>&, jule::Slice<jule::U8>&);
inline jule::Str _242d63868_trim_left(jule::Str, jule::Str);
inline void _242d6399a__trim_right(jule::Slice<jule::U8>&, jule::Slice<jule::U8>&);
inline jule::Str _242d63c0e_trim(jule::Str, jule::Str);
inline jule::Bool _241e0e926_is_path_sep(jule::U8);
inline jule::Bool _241e0ea58_is_slash(jule::U8);
inline jule::U8 _241e0ec23_to_upper(jule::U8);
inline jule::I32 _241e102d9_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Str,jule::Bool> _241e10581_cut_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _241e10828_full_path(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _241e10b9c___abs(jule::Str);
inline jule::Str _241e10e44___join(jule::Slice<jule::Str>);
inline jule::Str _241e7ba09_clean(jule::Str);
inline jule::Str _241e810d5_from_slash(jule::Str);
inline jule::Str _241e8b167_join(jule::Slice<jule::Str>);
inline jule::Str _241e8d1ad_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _241e9c8b5_abs(jule::Str);
inline jule::Str _241e9e2ac_base(jule::Str);
inline jule::Str _241ea74c4_dir(jule::Str);
inline jule::Str _241ead9b4_volume_name(jule::Str);
inline jule::I32 _2410aeb71_get_last_fs_error(void);
inline jule::Bool _241d595a7_is_console_handle(jule::Uintptr);
inline jule::I32 _242e08a40_get_last_process_error(void);
inline jule::Slice<wchar_t*> _242e1eacd_ustr_slice_to_wcstr_slice(jule::Slice<jule::Slice<jule::U16>>);
inline jule::Slice<jule::Slice<jule::U16>> _242e1ed75_str_slice_to_ustr_slice(jule::Slice<jule::Str>);
inline jule::I32 _242e201c7_execvp(jule::Str, jule::Slice<jule::Str>);
inline jule::I32 _242e205b2_execve(jule::Str, jule::Slice<jule::Str>, jule::Slice<jule::Str>);
inline void _242e212d8_exit(jule::I32);
inline jule::Str _242e214d6_executable(void);
inline jule::Bool _242dae133_is_std_header_path(jule::Str);
inline jule::Bool _242dae265_is_valid_header_ext(jule::Str);
inline jule::Bool _242dae4b8_is_valid_cpp_ext(jule::Str);
inline jule::Str _242dbb0c9_logf(jule::Str, jule::Slice<jule::Any>);
inline jule::Str _242dbb3b5_arg_to_str(jule::Any);
inline jule::I32 _242dbb65c_find_next_fmt(jule::Str);
inline jule::Str _242dbb9e2_apply_fmt(jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _242dbcaae_is_top_directive(jule::Str);
inline jule::Bool _242dbe682_is_windows(jule::Str);
inline jule::Bool _242dbe96d_is_darwin(jule::Str);
inline jule::Bool _242dbec15_is_linux(jule::Str);
inline jule::Bool _242dc0034_is_i386(jule::Str);
inline jule::Bool _242dc02cb_is_amd64(jule::Str);
inline jule::Bool _242dc0573_is_arm64(jule::Str);
inline jule::Bool _242dc081a_is_unix(jule::Str);
inline jule::Bool _242dc0b8e_is_32bit(jule::Str);
inline jule::Bool _242dc0e36_is_64bit(jule::Str);
inline void _242dcd2ea_init(void);
inline jule::Bool _2431e4c2c_is_unary_op(jule::Str);
inline jule::Bool _2431e5018_is_bin_op(jule::Str);
inline jule::Bool _2431e55ce_is_str(jule::Str);
inline jule::Bool _2431e5876_is_raw_str(jule::Str);
inline jule::Bool _2431e5b1d_is_rune(jule::Str);
inline jule::Bool _2431e6239_is_bool(jule::Str);
inline jule::Bool _2431e64d1_is_float(jule::Str);
inline jule::Bool _2431e6778_is_num(jule::Str);
inline jule::Bool _2431e6cb7_is_ignore_ident(jule::Str);
inline jule::Bool _2431e705e_is_anon_ident(jule::Str);
inline jule::Bool _2431e759d_is_space(jule::I32);
inline jule::Bool _2431e79ee_is_letter(jule::I32);
inline jule::Bool _2431e803d_is_decimal(jule::U8);
inline jule::Bool _2431e82d5_is_binary(jule::U8);
inline jule::Bool _2431e857c_is_octal(jule::U8);
inline jule::Bool _2431e8824_is_hex(jule::U8);
inline jule::Bool _2431e8abb_is_assign(jule::U32);
inline jule::Bool _2431e8d63_is_postfix_op(jule::Str);
inline jule::Bool _2431e910a_is_assign_op(jule::Str);
inline jule::Ptr<_2431e98ad_File> _2431eaddc_new_file_set(jule::Str);
inline _242dbab89_Log _2431ec718_make_err(jule::I32, jule::I32, jule::Ptr<_2431e98ad_File>&, jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _2431eca9d_bytes_has_prefix(jule::Slice<jule::U8>&, jule::Str);
inline jule::Str _2431ecdde_float_fmt_e(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _2431ed274_float_fmt_p(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _2431ed5b5_float_fmt_dotnp(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _2431ed906_float_fmt_dotfp(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _2431edc47_float_fmt_dotp(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _2431ee198_float_num(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _2431ee440_common_num(jule::Slice<jule::U8>&);
inline jule::Str _2431ee6d7_binary_num(jule::Slice<jule::U8>&);
inline jule::Bool _2431eea28_is_float_fmt_e(jule::U8, jule::I32);
inline jule::Bool _2431eed69_is_float_fmt_p(jule::U8, jule::I32);
inline jule::Bool _2432001aa_is_float_fmt_dotnp(jule::Slice<jule::U8>&, jule::I32);
inline jule::Bool _2432004eb_is_float_fmt_dotp(jule::Slice<jule::U8>&, jule::I32);
inline jule::Bool _24320083c_is_float_fmt_dotfp(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _243200c8d_octal_num(jule::Slice<jule::U8>&);
inline jule::Str _243201035_hex_num(jule::Slice<jule::U8>&);
inline jule::Str _243201376_hex_escape(jule::Slice<jule::U8>&, jule::I32);
inline jule::Str _243201640_big_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _24320180a_little_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _243201ab3_hex_byte_escape(jule::Slice<jule::U8>&);
inline jule::Str _243201d5a_byte_escape(jule::Slice<jule::U8>&);
inline jule::Slice<_242dbab89_Log> _243206854_lex(jule::Ptr<_2431e98ad_File>, jule::I32);
inline void _24491e433_lshift_unsig(_2448ab524_Const&, _2448ab524_Const&);
inline void _24491e730_rshift_unsig(_2448ab524_Const&, _2448ab524_Const&);
inline jule::I32 _24542726a_leading_zeros64(jule::U64);
inline jule::I32 _2454282c1_trailing_zeros(jule::U32);
inline jule::I32 _245428bb7_trailing_zeros32(jule::U32);
inline jule::I32 _245428e5e_trailing_zeros64(jule::U64);
inline jule::I32 _24542e6d4_len32(jule::U32);
inline jule::I32 _24542e97b_len64(jule::U64);
inline std::tuple<jule::U64,jule::U64> _24543063b_add64(jule::U64, jule::U64, jule::U64);
inline std::tuple<jule::U64,jule::U64> _245431cbe_mul64(jule::U64, jule::U64);
inline jule::U32 _245347a81_f32_bits(jule::F32);
inline jule::F32 _245347d6c_f32_from_bits(jule::U32);
inline jule::U64 _245348114_f64_bits(jule::F64);
inline jule::F64 _245348433_f64_from_bits(jule::U64);
inline std::tuple<jule::F64,jule::I32> _24534aa40_frexp(jule::F64);
inline jule::F64 _2453b3910_nan(void);
inline jule::Bool _2453b4845_is_nan(jule::F64);
inline jule::F64 _2453b62d6_inf(jule::I32);
inline jule::Bool _2453bbb49_is_inf(jule::F64, jule::I32);
inline std::tuple<jule::F64,jule::I32> _2453bd255_normalize(jule::F64);
inline jule::F64 _2453cd41e_log(jule::F64);
inline jule::F64 _2453d4d93_abs(jule::F64);
inline std::tuple<jule::F64,jule::F64> _24543a8dd_modf(jule::F64);
inline jule::F64 _24543b1a2_log2(jule::F64);
inline jule::Str _24546780a_fmt_float(jule::F64, jule::U8, jule::I32, jule::I32);
inline jule::Slice<jule::U8> _245467d7c_generic_ftoa(jule::Slice<jule::U8>, jule::F64, jule::U8, jule::I32, jule::I32);
inline jule::Slice<jule::U8> _2454684ed_big_ftoa(jule::Slice<jule::U8>, jule::I32, jule::U8, jule::Bool, jule::U64, jule::I32, _24546660b_FloatInfo&);
inline jule::Slice<jule::U8> _245468b4c_fmt_digits(jule::Slice<jule::U8>, jule::Bool, jule::Bool, _2454672bb_DecimalSlice, jule::I32, jule::U8);
inline void _245469048_round_shortest(_2454795ec_Decimal&, jule::U64, jule::I32, _24546660b_FloatInfo&);
inline jule::Slice<jule::U8> _245469576_fmt_e(jule::Slice<jule::U8>, jule::Bool, _2454672bb_DecimalSlice, jule::I32, jule::U8);
inline jule::Slice<jule::U8> _245469a0a_fmt_f(jule::Slice<jule::U8>, jule::Bool, _2454672bb_DecimalSlice, jule::I32);
inline jule::Slice<jule::U8> _24546a115_fmt_b(jule::Slice<jule::U8>, jule::Bool, jule::U64, jule::I32, _24546660b_FloatInfo&);
inline jule::Slice<jule::U8> _24546a786_fmt_x(jule::Slice<jule::U8>, jule::I32, jule::U8, jule::Bool, jule::U64, jule::I32, _24546660b_FloatInfo&);
inline jule::I32 _24546aac7_min(jule::I32, jule::I32);
inline jule::I32 _24546ae18_max(jule::I32, jule::I32);
inline jule::U8 _24546bab7_lower(jule::U8);
inline std::tuple<jule::U64,jule::I32> _24546bee6___parse_uint(jule::Str, jule::I32, jule::I32);
inline jule::Exceptional<jule::U64> _24546c3d1_parse_uint(jule::Str, jule::I32, jule::I32);
inline jule::Exceptional<jule::I64> _24546c843_parse_int(jule::Str, jule::I32, jule::I32);
inline std::tuple<jule::F64,jule::Bool> _24546d459_eisel_lemire64(jule::U64, jule::I32, jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _24546d855_eisel_lemire32(jule::U64, jule::I32, jule::Bool);
inline jule::I32 _245470725_common_prefix_len_ignore_case(jule::Str, jule::Str);
inline std::tuple<jule::F64,jule::I32,jule::Bool> _245470a22_special(jule::Str);
inline std::tuple<jule::U64,jule::I32,jule::Bool,jule::Bool,jule::Bool,jule::I32,jule::Bool> _245470cb9_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _245472826_atof64exact(jule::U64, jule::I32, jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _245472c11_atof32exact(jule::U64, jule::I32, jule::Bool);
inline std::tuple<jule::F64,jule::I32> _2454732d8_atof_hex(jule::Str, _24546660b_FloatInfo&, jule::U64, jule::I32, jule::Bool, jule::Bool);
inline std::tuple<jule::F32,jule::I32,jule::I32> _245473690_atof32(jule::Str);
inline std::tuple<jule::F64,jule::I32,jule::I32> _245473937_atof64(jule::Str);
inline std::tuple<jule::F64,jule::I32,jule::I32> _245473c78_parse_float_prefix(jule::Str, jule::I32);
inline jule::Exceptional<jule::F64> _2454740b9_parse_float(jule::Str, jule::I32);
inline void _245474839_ryu_ftoa_fixed32(_2454672bb_DecimalSlice&, jule::U32, jule::I32, jule::I32);
inline void _245474c79_ryu_ftoa_fixed64(_2454672bb_DecimalSlice&, jule::U64, jule::I32, jule::I32);
inline void _2454755a4_format_decimal(_2454672bb_DecimalSlice&, jule::U64, jule::Bool, jule::Bool, jule::I32);
inline void _245475a27_ryu_ftoa_shortest(_2454672bb_DecimalSlice&, jule::U64, jule::I32, _24546660b_FloatInfo&);
inline jule::I32 _245475cbe_mul_by_log2_log10(jule::I32);
inline jule::I32 _245476066_mul_by_log10_log2(jule::I32);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::I32> _245476451_compute_bounds(jule::U64, jule::I32, _24546660b_FloatInfo&);
inline void _2454769e5_ryu_digits(_2454672bb_DecimalSlice&, jule::U64, jule::U64, jule::U64, jule::Bool, jule::Bool);
inline void _2454770cd_ryu_digits32(_2454672bb_DecimalSlice&, jule::U32, jule::U32, jule::U32, jule::Bool, jule::Bool, jule::I32);
inline std::tuple<jule::U32,jule::I32,jule::Bool> _2454774b8_mult64bit_pow10(jule::U32, jule::I32, jule::I32);
inline std::tuple<jule::U64,jule::I32,jule::Bool> _2454778a3_mult128bit_pow10(jule::U64, jule::I32, jule::I32);
inline jule::Bool _245477be4_divisible_by_pow5(jule::U64, jule::I32);
inline std::tuple<jule::U32,jule::U32> _245477e8b_divmod1e9(jule::U64);
inline void _24547acd5_trim(_2454795ec_Decimal&);
inline void _24547b08d_right_shift(_2454795ec_Decimal&, jule::U32);
inline jule::Bool _24547b500_prefix_is_less_than(jule::Array<jule::U8,800>, jule::I32, jule::Str);
inline void _24547b775_left_shift(_2454795ec_Decimal&, jule::U32);
inline jule::Bool _24547bab6_should_round_up(_2454795ec_Decimal&, jule::I32);
inline jule::Str _24547d348_fmt_uint(jule::U64, jule::I32);
inline jule::Str _24547d6cd_fmt_int(jule::I64, jule::I32);
inline jule::Str _24547d975_itoa(jule::I32);
inline jule::Str _24547dc94_small(jule::I32);
inline jule::Bool _24547e03b_is_power_of_two(jule::I32);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _24547e569_fmt_bits(jule::Slice<jule::U8>, jule::U64, jule::I32, jule::Bool, jule::Bool);
inline jule::Str _24551b958_real_kind_of(jule::Str);
inline jule::I32 _24551bc00_bitsize_of(jule::Str);
inline jule::Str _24551c01e_int_from_bits(jule::I32);
inline jule::Str _24551c2b6_uint_from_bits(jule::I32);
inline jule::Str _24551c55d_float_from_bits(jule::I32);
inline jule::Bool _24551d10d_check_bit_float(jule::Str, jule::I32);
inline jule::I32 _24551d3a5_bitsize_of_float(jule::F64);
inline jule::I32 _24551d64c_bitsize_of_int(jule::I64);
inline jule::I32 _24551d8e4_bitsize_of_uint(jule::U64);
inline void _24551da59_update_target(void);
inline void _24551dbbe_init(void);
inline jule::F64 _245522e7b_min(jule::Str);
inline jule::F64 _245523267_max(jule::Str);
inline jule::Bool _2455235db_is_i8_compatible(jule::Str);
inline jule::Bool _2455238c7_is_i16_compatible(jule::Str);
inline jule::Bool _245523b6e_is_i32_compatible(jule::Str);
inline jule::Bool _245523e8d_is_i64_compatible(jule::Str);
inline jule::Bool _245524235_is_u8_compatible(jule::Str);
inline jule::Bool _2455244cc_is_u16_compatible(jule::Str);
inline jule::Bool _245524774_is_u32_compatible(jule::Str);
inline jule::Bool _245524ae8_is_u64_compatible(jule::Str);
inline jule::Bool _245524d90_is_f32_compatible(jule::Str);
inline jule::Bool _245525137_is_f64_compatible(jule::Str);
inline jule::Bool _245525478_types_are_compatible(jule::Str, jule::Str);
inline jule::Bool _245525720_is_i16_greater(jule::Str);
inline jule::Bool _2455259b7_is_i32_greater(jule::Str);
inline jule::Bool _245525c5e_is_i64_greater(jule::Str);
inline jule::Bool _245526006_is_u16_greater(jule::Str);
inline jule::Bool _245526457_is_u32_greater(jule::Str);
inline jule::Bool _2455266ee_is_u64_greater(jule::Str);
inline jule::Bool _245526996_is_f32_greater(jule::Str);
inline jule::Bool _245526c3d_is_f64_greater(jule::Str);
inline jule::Bool _24552707e_is_greater(jule::Str, jule::Str);
inline jule::Bool _2455280b3_is_sig_int(jule::Str);
inline jule::Bool _24552839e_is_unsig_int(jule::Str);
inline jule::Bool _245528646_is_int(jule::Str);
inline jule::Bool _245528965_is_float(jule::Str);
inline jule::Bool _245528c0c_is_num(jule::Str);
inline jule::Bool _245528ea4_is_sig_num(jule::Str);
inline jule::Bool _245585e34_is_ascii(jule::I32);
inline jule::I32 _245586066_to_rune(jule::Slice<jule::U8>);
inline jule::Str _24559cd80_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _24559d138_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _24559d3d0_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _24559d6dd_rune_from_esq_seq(jule::Slice<jule::U8>, jule::I32&);
inline jule::Slice<jule::U8> _24559da2e_str_esq_seq(jule::Slice<jule::U8>, jule::I32&);
inline jule::I32 _245678c6e_find_format_prefix(jule::Slice<jule::U8>&, jule::I32&);
inline jule::Slice<jule::U8> _245679533_get_format_range(jule::I32&, jule::Slice<jule::U8>&);
inline jule::Slice<jule::U8> _245660085_fmt_by_default(jule::Any&);
inline jule::Slice<jule::U8> _24565e86a_apply_fmt_by_default(jule::I32&, jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _245663143_apply_fmt(jule::Slice<jule::U8>&, jule::I32&, jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _245670b9a_format_bytes(jule::Str, jule::Slice<jule::Any>);
inline jule::Str _245697be4_format(jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _24492bae4_parameter_uses_generics(jule::Ptr<_2449254c2_Param>&, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>&);
inline jule::Ptr<_2455e5180_TypeSymbol> _24492e0d0_build_type(jule::Ptr<_2448581d5_TypeDecl>);
inline jule::Ptr<_2455b60c9_Value> _24492e3bb_build_expr(jule::Ptr<_24485c706_Expr>);
inline jule::Ptr<_2455e0334_TypeAlias> _24492e663_build_type_alias(jule::Ptr<_24486e839_TypeAliasDecl>);
inline jule::Ptr<_24483adcc_Field> _24492e982_build_field(jule::Ptr<_244872e25_FieldDecl>);
inline jule::Slice<jule::Ptr<_24483adcc_Field>> _24492ec29_build_fields(jule::Slice<jule::Ptr<_244872e25_FieldDecl>>&);
inline jule::Ptr<_244848912_Struct> _24492eec1_build_struct(jule::Ptr<_244873783_StructDecl>);
inline jule::Ptr<_2449254c2_Param> _244930268_build_param(jule::Ptr<_244868bc9_ParamDecl>);
inline jule::Slice<jule::Ptr<_2449254c2_Param>> _2449305dc_build_params(jule::Slice<jule::Ptr<_244868bc9_ParamDecl>>&);
inline jule::Ptr<_244924d0c_RetType> _244930884_build_ret_type(jule::Ptr<_24485b2e8_RetTypeDecl>);
inline jule::Ptr<_244926d0e_Fn> _244930b2b_build_fn(jule::Ptr<_244869ee9_FnDecl>);
inline jule::Slice<jule::Ptr<_244926d0e_Fn>> _244930dc3_build_methods(jule::Slice<jule::Ptr<_244869ee9_FnDecl>>&);
inline jule::Ptr<_24547ec51_Trait> _24493116a_build_trait(jule::Ptr<_244873d8d_TraitDecl>);
inline jule::Ptr<_245481417_EnumItem> _244931412_build_enum_item(jule::Ptr<_244871198_EnumItemDecl>);
inline jule::Slice<jule::Ptr<_245481417_EnumItem>> _2449316a9_build_enum_items(jule::Slice<jule::Ptr<_244871198_EnumItemDecl>>&);
inline jule::Ptr<_245481e0c_Enum> _244931951_build_enum(jule::Ptr<_244871bc1_EnumDecl>);
inline jule::Ptr<_245482e41_TypeEnumItem> _244931da2_build_type_enum_item(jule::Ptr<_2448726c7_TypeEnumItemDecl>);
inline jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>> _244932149_build_type_enum_items(jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>>&);
inline jule::Ptr<_245483507_TypeEnum> _2449323e1_build_type_enum(jule::Ptr<_2448728c5_TypeEnumDecl>);
inline jule::Ptr<_24556cc1d_Var> _244932688_build_var(jule::Ptr<_24486aec8_VarDecl>);
inline jule::Slice<jule::Ptr<_24556cc1d_Var>> _244932930_build_vars(jule::Slice<jule::Ptr<_24486aec8_VarDecl>>);
inline jule::Ptr<_24551aa45_Impl> _244932bc7_build_impl(jule::Ptr<_244874498_Impl>);
inline jule::Bool _2454e2b1b_match_constraint(jule::Str&, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2454e956d_is_builtin_constraint(jule::Str&);
inline jule::Ptr<_245531066_ScopeChecker> _245503841_new_scope_checker_base(jule::Ptr<_24555100e_Sema>&, jule::Ptr<_2449299b0_FnIns>);
inline jule::Ptr<_245531066_ScopeChecker> _2455043be_new_scope_checker(jule::Ptr<_24555100e_Sema>&, jule::Ptr<_2449299b0_FnIns>);
inline jule::Ptr<_24552ecce_ScopeLabel> _24550527c_find_label_parent(jule::Str, jule::Ptr<_245531066_ScopeChecker>);
inline jule::Bool _2454e93c5_model_is_goto_scope(jule::Any, jule::Ptr<_24552937d_Scope>&);
inline jule::Bool _24550624a_stmt_is_goto_scope(jule::Any&, jule::Ptr<_24552937d_Scope>&);
inline jule::I32 _245507108_count_match_type(jule::Ptr<_24552d151_Match>&, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Slice<jule::Ptr<_2455b5051_Data>> _245515138_get_datas_from_tuple_data(jule::Ptr<_2455b5051_Data>&);
inline jule::Slice<jule::Any> _245518081_get_expr_models(jule::Any&);
inline jule::Bool _245518aba_check_mut(jule::Ptr<_24555100e_Sema>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _245519648_check_assign(jule::Ptr<_24555100e_Sema>&, jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b5051_Data>, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _245514cb4_is_valid_ast_st_for_next_st(jule::Any&);
inline jule::Bool _2454b0aa6_is_valid_st_for_next_st(jule::Any&);
inline jule::Bool _245503104_stmt_is_def(jule::Any&);
inline jule::Ptr<_24556cc1d_Var> _24554594e_find_var_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Str, jule::Bool);
inline jule::Ptr<_2455e0334_TypeAlias> _245545da0_find_type_alias_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Str, jule::Bool);
inline jule::Ptr<_244848912_Struct> _24554629b_find_struct_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Str, jule::Bool);
inline jule::Ptr<_244926d0e_Fn> _24554670d_find_fn_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Str, jule::Bool);
inline jule::Ptr<_24547ec51_Trait> _245546a1b_find_trait_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Str);
inline jule::Ptr<_245481e0c_Enum> _245546d5c_find_enum_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Str);
inline jule::Ptr<_245483507_TypeEnum> _2455471c0_find_type_enum_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Str);
inline jule::Bool _24554d3e6_is_std_package(jule::Str, jule::Str);
inline jule::Bool _24554e150_is_valid_model_for_ref(jule::Any&);
inline _242dbab89_Log _24554e5e5_compiler_err(jule::Ptr<_2431e4523_Token>&, jule::Bool, jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _24554e936_imp_is_lookupable(jule::Ptr<_245547db3_ImportInfo>&, jule::Str);
inline void _24554ec33_append_ret_vars(jule::Slice<jule::Ptr<_24556cc1d_Var>>&, jule::Ptr<_2449299b0_FnIns>&);
inline void _24554eedb_append_param_vars(jule::Slice<jule::Ptr<_24556cc1d_Var>>&, jule::Ptr<_2449299b0_FnIns>&);
inline void _2455502b6_append_generic_type_aliases(jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>&, jule::Ptr<_2449299b0_FnIns>&);
inline jule::Ptr<_2455b02e3_SymbolTable> _245550618_find_file(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>&, jule::Ptr<_2431e98ad_File>&);
inline void _245550a7a_push_suggestion(_242dbab89_Log*, jule::Str, jule::Slice<jule::Any>);
inline jule::Bool _24558e327_trait_has_reference_receiver(jule::Ptr<_24547ec51_Trait>&);
inline jule::Bool _245586352_float_assignable(jule::Str, jule::Ptr<_2455b5051_Data>&);
inline jule::Bool _245586484_sig_assignable(jule::Str, jule::Ptr<_2455b5051_Data>&);
inline jule::Bool _24559ca72_unsig_assignable(jule::Str, jule::Ptr<_2455b5051_Data>&);
inline jule::Bool _24559cba4_int_assignable(jule::Str, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2448249dc_Directive> _2455da708_find_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Str);
inline jule::Any _2455daa8d_find_builtins_import(jule::Str, jule::Ptr<_245547db3_ImportInfo>);
inline void _2455dac9c_fit_bitsize(jule::Ptr<_2455b5051_Data>&);
inline void _2455db099_make_struct_lit_alloc(jule::Ptr<_2455b5051_Data>&, jule::Ptr<_244920148_StructLitExprModel>&);
inline jule::Ptr<_24556cc1d_Var> _2455db3da_build_error_var(jule::Ptr<_24552937d_Scope>&, jule::Ptr<_2448619c4_FnCallExpr>&);
inline jule::Any _2455db72b_find_builtins_sema(jule::Str, jule::Ptr<_24555100e_Sema>);
inline jule::Bool _2455db9c3_is_ok_for_shifting(jule::Ptr<_2455b5051_Data>&);
inline jule::Bool _2455dbd7a_is_instanced_struct(jule::Ptr<_244874c5c_StructIns>);
inline jule::Bool _2455dc155_is_ptr_arithmetic_compatible_int(jule::Ptr<_2455b5051_Data>&);
inline void _2455dc386_apply_cast_kind_model(jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455e1027_TypeKind>&);
inline void _2455dc63e_apply_cast_kind(jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Ptr<_2455b5051_Data> _2455dc83c_build_void_data(void);
inline jule::Str _2455dcb06_check_data_for_integer_indexing(jule::Ptr<_2455b5051_Data>&);
inline void _2455dcde2_apply_cast_model_by_enum(jule::Ptr<_2455b5051_Data>&, jule::Ptr<_245481e0c_Enum>);
inline void _2455dd1ab_cast_const_by_type(jule::Str&, jule::Ptr<_2455b5051_Data>&);
inline void _2455dd6b7_update_model_to_generic_ins(jule::Any&, jule::Ptr<_2449299b0_FnIns>&);
inline jule::Bool _2455dd92b_push_sub_ident_from_expr(jule::Any, jule::Ptr<_244858dea_SubIdentTypeDecl>&);
inline jule::Bool _245607824_kind_uses_generics(jule::Any&, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>&);
inline jule::Bool _245607ba9_has_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Str);
inline jule::Bool _245607e51_can_get_ptr(jule::Ptr<_2455b5051_Data>&);
inline jule::Bool _245608270_is_valid_for_sptr_type(jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _245608517_is_valid_for_ref(jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Bool _2456087d1_is_builtin_str_convertable(jule::Ptr<_2455e1027_TypeKind>&);
inline jule::Str _245608a78_build_link_path_by_tokens(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_2455e59ee_Prim> _245608e41_build_prim_type(jule::Str);
inline jule::Ptr<_244848912_Struct> _2456091d8_get_struct_from_kind(jule::Ptr<_2455e1027_TypeKind>);
inline jule::Bool _245609480_is_prim(jule::Str);
inline void _245609738_apply_implicit_cast(jule::Ptr<_2455e1027_TypeKind>&, jule::Ptr<_2455b5051_Data>&);
inline std::tuple<jule::Ptr<_2455b02e3_SymbolTable>,jule::Slice<_242dbab89_Log>> _24560c62b_build_symbols(jule::Ptr<_244823942_Ast>&, jule::Trait<_2455455b9_Importer>&, jule::Ptr<_244933227_SymbolBuilder>);
inline std::tuple<jule::Ptr<_24554ad1c_Package>,jule::Slice<_242dbab89_Log>> _24560ca5a___analyze_package(jule::Slice<jule::Ptr<_244823942_Ast>>&, jule::Trait<_2455455b9_Importer>&, jule::I32&);
inline std::tuple<jule::Ptr<_24554ad1c_Package>,jule::Slice<_242dbab89_Log>> _24560ce45_analyze_package(jule::Slice<jule::Ptr<_244823942_Ast>>, jule::Trait<_2455455b9_Importer>, jule::I32);
inline jule::Ptr<_2449299b0_FnIns> _245616ed7_find_builtin_fn(jule::Str);
inline jule::Ptr<_2455e0334_TypeAlias> _245618dda_find_builtin_type_alias(jule::Str);
inline jule::Ptr<_24547ec51_Trait> _2456199bd_find_builtin_trait(jule::Str);
inline jule::Any _24561a4d5_find_builtin_def(jule::Str);
inline jule::Any _245644333_find_builtin_def_std_debug(jule::Str);
inline jule::Any _245696a06_find_builtin_def_std_mem(jule::Str);
inline jule::Any _245695a9e_find_builtin_def_std_jule_integrated(jule::Str);
inline jule::Any _2456705a1_find_package_builtin_def(jule::Str, jule::Str);
inline jule::Ptr<_2455b5051_Data> _245679ed4_builtin_caller_common_plain(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456964b7_builtin_caller_common(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _245671250_builtin_caller_common_mut(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _245692e97_builtin_caller_error(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&);
inline jule::Ptr<_2455b5051_Data> _245695890_builtin_caller_out(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _245617d0c_builtin_caller_outln(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _24565e392_builtin_caller_new(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456783ab_builtin_caller_panic(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _24567156e_builtin_caller_make(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _24569264a_builtin_caller_append(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _245615623_caller_copy_slice(jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456855a5_caller_copy_str(jule::Ptr<_2455b5051_Data>&, jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _24567000c_builtin_caller_copy(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _245631c49_builtin_caller_clone(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _24564ce1e_builtin_caller_assert(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456a5163_builtin_caller_std_mem_size_of(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456a5471_builtin_caller_std_mem_align_of(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456a588e_builtin_caller_std_mem_free(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456a5cbd_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456a61db_builtin_caller_std_jule_integrated_emit(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456a662b_builtin_caller_std_debug_out(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Ptr<_2455b5051_Data> _2456a6a16_builtin_caller_std_debug_outln(jule::Ptr<_2455b6abe_Eval>&, jule::Ptr<_2448619c4_FnCallExpr>&, jule::Ptr<_2455b5051_Data>&);
inline jule::Bool _24579db74_find_module_file(jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>&);
inline jule::Str _24579dca6_find_module_file_deep(jule::Str);
inline jule::Slice<_242dbab89_Log> _24579e03c_check_module_file(jule::Str);
inline jule::Ptr<_2279da6c5_FileInfo> _2279e237a_parse_file(jule::Ptr<_2431e98ad_File>);
inline std::tuple<jule::Ptr<_244823942_Ast>,jule::Slice<_242dbab89_Log>> _227a38899_parse_fileset(jule::Ptr<_2431e98ad_File>);
inline jule::Ptr<_244868503_ScopeTree> _227a392a1_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _227a395ae_is_st(jule::Ptr<_2431e4523_Token>, jule::Ptr<_2431e4523_Token>);
inline jule::Bool _227a39922_prev_is_incomplete_expr(jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32&);
inline std::tuple<jule::I32,jule::Bool> _227a39cb8_next_st_pos(jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32);
inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::Bool> _227a3a109_skip_st(jule::I32&, jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Slice<jule::Ptr<_227a3a406_stmt>> _227a3a79c_split_stmts(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Slice<jule::Ptr<_2431e4523_Token>> _227a471d2_get_block_expr(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a47534_split_delim(jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::U32);
inline jule::I32 _227a477cb_find_lowest_prec_op(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_24485e76e_IdentExpr> _227a47aea_build_ident_expr(jule::Ptr<_2431e4523_Token>&);
inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::I32> _227a47d92_get_range_expr_tokens(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Bool _227a537d7_check_assign_tokens(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline _242dbab89_Log _227a546c8_make_err(jule::I32, jule::I32, jule::Ptr<_2431e98ad_File>&, jule::Str, jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_2431e4523_Token>> _227a54b6d_range(jule::I32&, jule::Str, jule::Str, jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a54e15_range_last(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline std::tuple<jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>,jule::Slice<_242dbab89_Log>> _227a55377_parts_kind(jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::Str, jule::Bool);
inline std::tuple<jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>,jule::Slice<_242dbab89_Log>> _227a55762_parts(jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::U32, jule::Bool);
inline jule::Str _227a55a2b_get_close_kind_of_brace(jule::Str);
inline _242dbab89_Log _227a55de4_compiler_err(jule::Ptr<_2431e4523_Token>&, jule::Str&, jule::Slice<jule::Any>);
inline void _227a56356_push_suggestion(_242dbab89_Log*, jule::Str, jule::Slice<jule::Any>);
inline jule::Str _227a565ed_tokstoa(jule::Slice<jule::Ptr<_2431e4523_Token>>&);
inline jule::Ptr<_2448581d5_TypeDecl> _227a672ce_build_void_type(void);
inline jule::Ptr<_2448581d5_TypeDecl> _227a67543_build_prim_type(jule::Ptr<_2431e4523_Token>);
inline jule::I32 _227a67884_map_colon(jule::Slice<jule::Ptr<_2431e4523_Token>>&, jule::I32&);
inline std::tuple<jule::Bool,jule::Bool> _2457894bc_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _245778588_check_arch(jule::Str);
inline jule::Bool _2457736b5_is_pass_file_annotation(jule::Str);
inline void _24578cd3e_set_os_vars(jule::Slice<jule::Str>&);
inline void _24578d092_set_arch_vars(jule::Slice<jule::Str>&);
inline void _24578d34a_init_vars(jule::Slice<jule::Str>&, _24578ca31_CompileInfo&);
inline jule::Slice<jule::U8> _24646ed83_read_buff(jule::Str);
inline _242dbab89_Log _24648b50e_flat_compiler_err(jule::Str);
inline void _22767ee91_push_passes(jule::Ptr<_24554ad1c_Package>&, jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _22769478b_get_all_unique_passes(jule::Ptr<_24554ad1c_Package>&, jule::Slice<jule::Ptr<_245547db3_ImportInfo>>);
inline _24578ca31_CompileInfo _22780a66b_build_compile_info(void);
inline void _227b61c58_eliminate_defines(jule::Ptr<_2276b0301_IR>&);
inline jule::Ptr<_2448249dc_Directive> _227b620dd_find_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Str);
inline jule::Bool _227b6242e_has_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Str);
inline void _227b6607b_eliminate_dead_code_of_scope(jule::Ptr<_24552937d_Scope>);
inline void _227b66312_eliminate_scope_functions(jule::Slice<jule::Ptr<_244926d0e_Fn>>&);
inline void _227b66565_eliminate_functions_scope_package(jule::Ptr<_24554ad1c_Package>&);
inline void _227b6681d_eliminate_scope_package(jule::Ptr<_24554ad1c_Package>&);
inline void _227b66a0a_eliminate_scopes(jule::Ptr<_2276b0301_IR>&);
inline jule::Bool _2456acce7_is_std_package(jule::Str, jule::Str);
inline jule::Bool _2456ad116_is_constant_valid_conditional_case(jule::Ptr<_245529779_If>&);
inline jule::Bool _2456ad3e1_is_unreachable_expr(jule::Any&);
inline jule::Bool _2456ad6ee_is_constant_valid_match_case(jule::Ptr<_24552db9b_Case>&);
inline jule::Bool _2456ad996_is_unreachable_conditional_case(jule::Ptr<_245529779_If>&);
inline jule::Bool _2456adc71_is_unreachable_match_case(jule::Ptr<_24552db9b_Case>&);
inline std::tuple<jule::Bool,jule::U64> _2456b5dee_check_for_bit_shift_opt(jule::Ptr<_24491e895_OperandExprModel>&, jule::Ptr<_24491e895_OperandExprModel>&);
inline void _2456b8187_push_opt_level(jule::I32);
inline void _227b075d3_detect_enabled(void);
inline void _227b84286_throw(jule::Str);
inline jule::U64 _22825ade0_unix(void);
inline jule::U64 _22825b231_unix_year_to_seconds(jule::U64, jule::Bool&);
inline jule::U64 _22825b5b6_unix_month_to_seconds(jule::U64, jule::Bool);
inline jule::Bool _2281d54eb_is_copy_optimizable(jule::Ptr<_2455b5051_Data>&);
inline jule::Bool _2281d58a3_is_iter_copy_optimizable(jule::Ptr<_2455b5051_Data>&, jule::Ptr<_24556cc1d_Var>&);
inline jule::Str _2281e39b0_decompose_common_esq(jule::U8);
inline jule::Str _2281e3c9b_sbtoa(jule::U8);
inline jule::Str _2281e4043_cstr_bytes(jule::Slice<jule::U8>);
inline jule::Str _2281e4362_cstr_lit(jule::Slice<jule::U8>);
inline jule::Str _2281e4670_ftoa(jule::F64, jule::I32);
inline jule::Str _2281e4917_itoa(jule::I64);
inline jule::Str _2281e4bae_utoa(jule::U64);
inline jule::Bool _2281e5066_is_forwarded(jule::Ptr<_24552937d_Scope>&);
inline jule::Bool _2281e5330_is_builtin_call_has_debuginf(jule::Ptr<_24492070e_FnCallExprModel>&);
inline void _228261467_iter_files(jule::Ptr<_24554ad1c_Package>&, jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)>);
inline void _2282616ba_prepare_structure(jule::Ptr<_244848912_Struct>&);
inline jule::Str _228261962_concat_all_parts(jule::Slice<jule::Ptr<_2431e4523_Token>>);
inline jule::Ptr<_2448249dc_Directive> _228269d88_find_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Str);
inline jule::Bool _22826a21d_has_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>&, jule::Str);
inline void _242d876b1_print_error_message(jule::Str);
inline void _242d9cc15_help(jule::Slice<jule::Str>&);
inline void _242d9e5c9_version(jule::Slice<jule::Str>&);
inline void _242d9ed27_tool_distos(void);
inline void _242da0575_tool_distarch(void);
inline void _242da0cc3_tool(jule::Slice<jule::Str>&);
inline void _242da1521_julenv(jule::Slice<jule::Str>&);
inline void _242d885b3_mod(jule::Slice<jule::Str>&);
inline jule::Bool _242dad000_process_command(jule::Slice<jule::Str>&);
inline void _240ebbd03_show_info(void);
void entry_point(void);
inline void _242d8e6eb_enable_vtp(void);
inline void _242da205a_init(void);
inline void _227c0d82c_init(void);
inline jule::Ptr<_241cb4b2d_File> _2280a6eb1_open_output(jule::Str&);
inline void _22826dd59_clear_objects(void);
inline void _22827090a_compile_ir(jule::Str, jule::Str);
inline jule::Bool _22827bae2_is_cpp_source_file(jule::Str);
inline void _22826c1ba_push_comp_cmd_clang(jule::Str&);
inline void _22826a460_push_comp_cmd_gcc(jule::Str&);
inline std::tuple<jule::Str,jule::Str> _228011b85_gen_compile_cmd(jule::Str, jule::Ptr<_2276b0301_IR>&);
inline jule::Str _2280a6323_get_compile_path(void);
inline void _227d85b5d_apply_target_independent_optimizations(jule::Ptr<_2276b0301_IR>&);
inline void _2280a925a_check_compiler_flag(void);
inline void _22827789b_check_target_arch(jule::Str);
inline void _2282a23a9_check_target_os(jule::Str);
inline void _2282a24db_check_target_flag(jule::Str&);
inline void _2282a261d_check_opt_flag(jule::Str&);
inline void _2282a2981_check_cpp_std_flag(void);
inline jule::Slice<jule::Str> _2282a2ab3_check_flags(jule::Slice<jule::Str>&);
inline void _2282a2be5_setup_sema_flags(jule::I32&);
inline jule::Ptr<_2276b0301_IR> _2282a2d27_build_ir(jule::Slice<jule::Str>&);
inline void _2282a2e59_compile_command(jule::Slice<jule::Str>&);


struct _2455455b9_ImporterMptrData {
	void(*_2455444db_set_mod_path)(jule::Trait<_2455455b9_Importer>, jule::Str);
	jule::Str(*_24554472d_get_mod_path)(jule::Trait<_2455455b9_Importer>);
	jule::Str(*_245544a3b_mod_by_id)(jule::Trait<_2455455b9_Importer>, jule::I32);
	jule::Ptr<_245547db3_ImportInfo>(*_245544d49_get_import)(jule::Trait<_2455455b9_Importer>, jule::Str);
	std::tuple<jule::Slice<jule::Ptr<_244823942_Ast>>,jule::Slice<_242dbab89_Log>>(*_245545201_import_package)(jule::Trait<_2455455b9_Importer>, jule::Str, jule::Bool);
	void(*_245545476_imported)(jule::Trait<_2455455b9_Importer>, jule::Ptr<_245547db3_ImportInfo>);
};

struct _2455e0ae8_KindMptrData {
	jule::Str(*_2455e0697_to_str)(jule::Trait<_2455e0ae8_Kind>);
	jule::Bool(*_2455e09a5_equals)(jule::Trait<_2455e0ae8_Kind>, jule::Ptr<_2455e1027_TypeKind>);
};

struct _24560bac0_LookupMptrData {
	jule::Ptr<_245547db3_ImportInfo>(*_245609c77_find_package)(jule::Trait<_24560bac0_Lookup>, jule::Str);
	jule::Ptr<_245547db3_ImportInfo>(*_24560a085_select_package)(jule::Trait<_24560bac0_Lookup>, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>);
	jule::Ptr<_24556cc1d_Var>(*_24560a43c_find_var)(jule::Trait<_24560bac0_Lookup>, jule::Str, jule::Bool);
	jule::Ptr<_2455e0334_TypeAlias>(*_24560a7e4_find_type_alias)(jule::Trait<_24560bac0_Lookup>, jule::Str, jule::Bool);
	jule::Ptr<_244848912_Struct>(*_24560ab9b_find_struct)(jule::Trait<_24560bac0_Lookup>, jule::Str, jule::Bool);
	jule::Ptr<_244926d0e_Fn>(*_24560b053_find_fn)(jule::Trait<_24560bac0_Lookup>, jule::Str, jule::Bool);
	jule::Ptr<_24547ec51_Trait>(*_24560b361_find_trait)(jule::Trait<_24560bac0_Lookup>, jule::Str);
	jule::Ptr<_245481e0c_Enum>(*_24560b66e_find_enum)(jule::Trait<_24560bac0_Lookup>, jule::Str);
	jule::Ptr<_245483507_TypeEnum>(*_24560b97c_find_type_enum)(jule::Trait<_24560bac0_Lookup>, jule::Str);
};

struct _227d88886_CommonFlagMptrData {
	jule::Str(*_227d88754_name)(jule::Trait<_227d88886_CommonFlag>);
	jule::I32(*_22827a827_short)(jule::Trait<_227d88886_CommonFlag>);
	jule::Str(*_22829bb45_what)(jule::Trait<_227d88886_CommonFlag>);
	void(*_22829bc77_reset)(jule::Trait<_227d88886_CommonFlag>);
};



inline void _2455444db_set_mod_path_0(jule::Trait<_2455455b9_Importer> _self_, jule::Str _1735_path) {
	_24650aa45_set_mod_path(_self_.safe_ptr<_246491d50_JuleImporter>(), _1735_path);
}
inline jule::Str _24554472d_get_mod_path_0(jule::Trait<_2455455b9_Importer> _self_) {
	return _246515c4d_get_mod_path(_self_.safe_ptr<_246491d50_JuleImporter>());
}
inline jule::Str _245544a3b_mod_by_id_0(jule::Trait<_2455455b9_Importer> _self_, jule::I32 _2528_id) {
	return _22754894d_mod_by_id(_self_.safe_ptr<_246491d50_JuleImporter>(), _2528_id);
}
inline jule::Ptr<_245547db3_ImportInfo> _245544d49_get_import_0(jule::Trait<_2455455b9_Importer> _self_, jule::Str _3133_path) {
	return _22760041c_get_import(_self_.safe_ptr<_246491d50_JuleImporter>(), _3133_path);
}
inline std::tuple<jule::Slice<jule::Ptr<_244823942_Ast>>,jule::Slice<_242dbab89_Log>> _245545201_import_package_0(jule::Trait<_2455455b9_Importer> _self_, jule::Str _3737_path, jule::Bool _3748_update_mod) {
	return _227607204_import_package(_self_.safe_ptr<_246491d50_JuleImporter>(), _3737_path, _3748_update_mod);
}
inline void _245545476_imported_0(jule::Trait<_2455455b9_Importer> _self_, jule::Ptr<_245547db3_ImportInfo> _4135__0) {
	_227615c90_imported(_self_.safe_ptr<_246491d50_JuleImporter>(), _4135__0);
}
inline jule::Str _2455e0697_to_str_0(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _24484a5e5_to_str(_self_.safe_ptr<_244874c5c_StructIns>());
}
inline jule::Bool _2455e09a5_equals_0(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _24484b75b_equals(_self_.data.as<_244874c5c_StructIns>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_1(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _244929ce0_to_str(_self_.safe_ptr<_2449299b0_FnIns>());
}
inline jule::Bool _2455e09a5_equals_1(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _24492a0ed_equals(_self_.data.as<_2449299b0_FnIns>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_2(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _245480119_to_str(_self_.safe_ptr<_24547ec51_Trait>());
}
inline jule::Bool _2455e09a5_equals_2(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _245480427_equals(_self_.data.as<_24547ec51_Trait>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_3(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _245482270_to_str(_self_.safe_ptr<_245481e0c_Enum>());
}
inline jule::Bool _2455e09a5_equals_3(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _24548257d_equals(_self_.data.as<_245481e0c_Enum>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_4(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _245483837_to_str(_self_.safe_ptr<_245483507_TypeEnum>());
}
inline jule::Bool _2455e09a5_equals_4(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _245483b45_equals(_self_.data.as<_245483507_TypeEnum>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_5(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455e1423_to_str(_self_.safe_ptr<_2455e1027_TypeKind>());
}
inline jule::Bool _2455e09a5_equals_5(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455e1731_equals(_self_.data.as<_2455e1027_TypeKind>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_6(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455e5d62_to_str(_self_.safe_ptr<_2455e59ee_Prim>());
}
inline jule::Bool _2455e09a5_equals_6(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455e6170_equals(_self_.data.as<_2455e59ee_Prim>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_7(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455e95e6_to_str(_self_.safe_ptr<_2455e9283_Sptr>());
}
inline jule::Bool _2455e09a5_equals_7(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455e9904_equals(_self_.data.as<_2455e9283_Sptr>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_8(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455ea1eb_to_str(_self_.safe_ptr<_2455e9be0_Slc>());
}
inline jule::Bool _2455e09a5_equals_8(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455ea509_equals(_self_.data.as<_2455e9be0_Slc>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_9(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455eaad1_to_str(_self_.safe_ptr<_2455ea76d_Tuple>());
}
inline jule::Bool _2455e09a5_equals_9(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455eadde_equals(_self_.data.as<_2455ea76d_Tuple>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_10(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455eb609_to_str(_self_.safe_ptr<_2455eb296_Map>());
}
inline jule::Bool _2455e09a5_equals_10(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455eb917_equals(_self_.data.as<_2455eb296_Map>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_11(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455ec1ed_to_str(_self_.safe_ptr<_2455ebd8a_Arr>());
}
inline jule::Bool _2455e09a5_equals_11(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455ec50b_equals(_self_.data.as<_2455ebd8a_Arr>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_12(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _2455ecb5a_to_str(_self_.safe_ptr<_2455ec7e7_Ptr>());
}
inline jule::Bool _2455e09a5_equals_12(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _2455ece68_equals(_self_.data.as<_2455ec7e7_Ptr>(), _5626_other);
}
inline jule::Str _2455e0697_to_str_13(jule::Trait<_2455e0ae8_Kind> _self_) {
	return _228262941_to_str(_self_.safe_ptr<_228262677_CustomType>());
}
inline jule::Bool _2455e09a5_equals_13(jule::Trait<_2455e0ae8_Kind> _self_, jule::Ptr<_2455e1027_TypeKind> _5626_other) {
	return _228262c4e_equals(_self_.data.as<_228262677_CustomType>(), _5626_other);
}
inline jule::Ptr<_245547db3_ImportInfo> _245609c77_find_package_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _935_ident) {
	return _2455314b7_find_package(_self_.safe_ptr<_245531066_ScopeChecker>(), _935_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _24560a085_select_package_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _1337_selector) {
	return _2455317c5_select_package(_self_.safe_ptr<_245531066_ScopeChecker>(), _1337_selector);
}
inline jule::Ptr<_24556cc1d_Var> _24560a43c_find_var_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _1731_ident, jule::Bool _1743_cpp_linked) {
	return _245531b7c_find_var(_self_.safe_ptr<_245531066_ScopeChecker>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_2455e0334_TypeAlias> _24560a7e4_find_type_alias_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2138_ident, jule::Bool _2150_cpp_linked) {
	return _245532034_find_type_alias(_self_.safe_ptr<_245531066_ScopeChecker>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_244848912_Struct> _24560ab9b_find_struct_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2534_ident, jule::Bool _2546_cpp_linked) {
	return _2455323db_find_struct(_self_.safe_ptr<_245531066_ScopeChecker>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_244926d0e_Fn> _24560b053_find_fn_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2930_ident, jule::Bool _2942_cpp_linked) {
	return _245532793_find_fn(_self_.safe_ptr<_245531066_ScopeChecker>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_24547ec51_Trait> _24560b361_find_trait_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3333_ident) {
	return _245532aa1_find_trait(_self_.safe_ptr<_245531066_ScopeChecker>(), _3333_ident);
}
inline jule::Ptr<_245481e0c_Enum> _24560b66e_find_enum_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3732_ident) {
	return _245532dae_find_enum(_self_.safe_ptr<_245531066_ScopeChecker>(), _3732_ident);
}
inline jule::Ptr<_245483507_TypeEnum> _24560b97c_find_type_enum_0(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _4137_ident) {
	return _2455331bc_find_type_enum(_self_.safe_ptr<_245531066_ScopeChecker>(), _4137_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _245609c77_find_package_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _935_ident) {
	return _2455483d0_find_package(_self_.safe_ptr<_245547db3_ImportInfo>(), _935_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _24560a085_select_package_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _1337_selector) {
	return _2455486dd_select_package(_self_.safe_ptr<_245547db3_ImportInfo>(), _1337_selector);
}
inline jule::Ptr<_24556cc1d_Var> _24560a43c_find_var_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _1731_ident, jule::Bool _1743_cpp_linked) {
	return _245548a95_find_var(_self_.safe_ptr<_245547db3_ImportInfo>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_2455e0334_TypeAlias> _24560a7e4_find_type_alias_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2138_ident, jule::Bool _2150_cpp_linked) {
	return _245548e4c_find_type_alias(_self_.safe_ptr<_245547db3_ImportInfo>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_244848912_Struct> _24560ab9b_find_struct_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2534_ident, jule::Bool _2546_cpp_linked) {
	return _245549304_find_struct(_self_.safe_ptr<_245547db3_ImportInfo>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_244926d0e_Fn> _24560b053_find_fn_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2930_ident, jule::Bool _2942_cpp_linked) {
	return _2455496ab_find_fn(_self_.safe_ptr<_245547db3_ImportInfo>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_24547ec51_Trait> _24560b361_find_trait_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3333_ident) {
	return _2455499b9_find_trait(_self_.safe_ptr<_245547db3_ImportInfo>(), _3333_ident);
}
inline jule::Ptr<_245481e0c_Enum> _24560b66e_find_enum_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3732_ident) {
	return _245549cc7_find_enum(_self_.safe_ptr<_245547db3_ImportInfo>(), _3732_ident);
}
inline jule::Ptr<_245483507_TypeEnum> _24560b97c_find_type_enum_1(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _4137_ident) {
	return _24554a0d5_find_type_enum(_self_.safe_ptr<_245547db3_ImportInfo>(), _4137_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _245609c77_find_package_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _935_ident) {
	return _24554b2e5_find_package(_self_.safe_ptr<_24554ad1c_Package>(), _935_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _24560a085_select_package_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _1337_selector) {
	return _24554b603_select_package(_self_.safe_ptr<_24554ad1c_Package>(), _1337_selector);
}
inline jule::Ptr<_24556cc1d_Var> _24560a43c_find_var_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _1731_ident, jule::Bool _1743_cpp_linked) {
	return _24554b9aa_find_var(_self_.safe_ptr<_24554ad1c_Package>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_2455e0334_TypeAlias> _24560a7e4_find_type_alias_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2138_ident, jule::Bool _2150_cpp_linked) {
	return _24554bd62_find_type_alias(_self_.safe_ptr<_24554ad1c_Package>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_244848912_Struct> _24560ab9b_find_struct_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2534_ident, jule::Bool _2546_cpp_linked) {
	return _24554c219_find_struct(_self_.safe_ptr<_24554ad1c_Package>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_244926d0e_Fn> _24560b053_find_fn_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2930_ident, jule::Bool _2942_cpp_linked) {
	return _24554c5c1_find_fn(_self_.safe_ptr<_24554ad1c_Package>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_24547ec51_Trait> _24560b361_find_trait_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3333_ident) {
	return _24554c8ce_find_trait(_self_.safe_ptr<_24554ad1c_Package>(), _3333_ident);
}
inline jule::Ptr<_245481e0c_Enum> _24560b66e_find_enum_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3732_ident) {
	return _24554cbdc_find_enum(_self_.safe_ptr<_24554ad1c_Package>(), _3732_ident);
}
inline jule::Ptr<_245483507_TypeEnum> _24560b97c_find_type_enum_2(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _4137_ident) {
	return _24554ceea_find_type_enum(_self_.safe_ptr<_24554ad1c_Package>(), _4137_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _245609c77_find_package_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _935_ident) {
	return _24555152b_find_package(_self_.safe_ptr<_24555100e_Sema>(), _935_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _24560a085_select_package_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _1337_selector) {
	return _245551839_select_package(_self_.safe_ptr<_24555100e_Sema>(), _1337_selector);
}
inline jule::Ptr<_24556cc1d_Var> _24560a43c_find_var_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _1731_ident, jule::Bool _1743_cpp_linked) {
	return _245551be1_find_var(_self_.safe_ptr<_24555100e_Sema>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_2455e0334_TypeAlias> _24560a7e4_find_type_alias_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2138_ident, jule::Bool _2150_cpp_linked) {
	return _245552098_find_type_alias(_self_.safe_ptr<_24555100e_Sema>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_244848912_Struct> _24560ab9b_find_struct_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2534_ident, jule::Bool _2546_cpp_linked) {
	return _245552450_find_struct(_self_.safe_ptr<_24555100e_Sema>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_244926d0e_Fn> _24560b053_find_fn_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2930_ident, jule::Bool _2942_cpp_linked) {
	return _245552807_find_fn(_self_.safe_ptr<_24555100e_Sema>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_24547ec51_Trait> _24560b361_find_trait_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3333_ident) {
	return _245552b15_find_trait(_self_.safe_ptr<_24555100e_Sema>(), _3333_ident);
}
inline jule::Ptr<_245481e0c_Enum> _24560b66e_find_enum_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3732_ident) {
	return _245552e23_find_enum(_self_.safe_ptr<_24555100e_Sema>(), _3732_ident);
}
inline jule::Ptr<_245483507_TypeEnum> _24560b97c_find_type_enum_3(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _4137_ident) {
	return _245553231_find_type_enum(_self_.safe_ptr<_24555100e_Sema>(), _4137_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _245609c77_find_package_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _935_ident) {
	return _2455b0810_find_package(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _935_ident);
}
inline jule::Ptr<_245547db3_ImportInfo> _24560a085_select_package_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _1337_selector) {
	return _2455b0b1d_select_package(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _1337_selector);
}
inline jule::Ptr<_24556cc1d_Var> _24560a43c_find_var_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _1731_ident, jule::Bool _1743_cpp_linked) {
	return _2455b0ec5_find_var(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _1731_ident, _1743_cpp_linked);
}
inline jule::Ptr<_2455e0334_TypeAlias> _24560a7e4_find_type_alias_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2138_ident, jule::Bool _2150_cpp_linked) {
	return _2455b137c_find_type_alias(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _2138_ident, _2150_cpp_linked);
}
inline jule::Ptr<_244848912_Struct> _24560ab9b_find_struct_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2534_ident, jule::Bool _2546_cpp_linked) {
	return _2455b1734_find_struct(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _2534_ident, _2546_cpp_linked);
}
inline jule::Ptr<_244926d0e_Fn> _24560b053_find_fn_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _2930_ident, jule::Bool _2942_cpp_linked) {
	return _2455b1adb_find_fn(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _2930_ident, _2942_cpp_linked);
}
inline jule::Ptr<_24547ec51_Trait> _24560b361_find_trait_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3333_ident) {
	return _2455b1de9_find_trait(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _3333_ident);
}
inline jule::Ptr<_245481e0c_Enum> _24560b66e_find_enum_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _3732_ident) {
	return _2455b2207_find_enum(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _3732_ident);
}
inline jule::Ptr<_245483507_TypeEnum> _24560b97c_find_type_enum_4(jule::Trait<_24560bac0_Lookup> _self_, jule::Str _4137_ident) {
	return _2455b2515_find_type_enum(_self_.safe_ptr<_2455b02e3_SymbolTable>(), _4137_ident);
}
inline jule::Str _227d88754_name_0(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22a8347b3_name(_self_.safe_ptr<_22aa3da99_Flag>());
}
inline jule::I32 _22827a827_short_0(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa3e0b6_short(_self_.safe_ptr<_22aa3da99_Flag>());
}
inline jule::Str _22829bb45_what_0(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22a8348e5_what(_self_.safe_ptr<_22aa3da99_Flag>());
}
inline void _22829bc77_reset_0(jule::Trait<_227d88886_CommonFlag> _self_) {
	_22aa3de84_reset(_self_.safe_ptr<_22aa3da99_Flag>());
}
inline jule::Str _227d88754_name_1(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa422a6_name(_self_.safe_ptr<_22aa4275c_Flag>());
}
inline jule::I32 _22827a827_short_1(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa42c8a_short(_self_.safe_ptr<_22aa4275c_Flag>());
}
inline jule::Str _22829bb45_what_1(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa42a26_what(_self_.safe_ptr<_22aa4275c_Flag>());
}
inline void _22829bc77_reset_1(jule::Trait<_227d88886_CommonFlag> _self_) {
	_22aa42b58_reset(_self_.safe_ptr<_22aa4275c_Flag>());
}
inline jule::Str _227d88754_name_2(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa45c8d_name(_self_.safe_ptr<_22aa46244_Flag>());
}
inline jule::I32 _22827a827_short_2(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa46772_short(_self_.safe_ptr<_22aa46244_Flag>());
}
inline jule::Str _22829bb45_what_2(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa4650d_what(_self_.safe_ptr<_22aa46244_Flag>());
}
inline void _22829bc77_reset_2(jule::Trait<_227d88886_CommonFlag> _self_) {
	_22aa46640_reset(_self_.safe_ptr<_22aa46244_Flag>());
}
inline jule::Str _227d88754_name_3(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa497b9_name(_self_.safe_ptr<_22aa49c70_Flag>());
}
inline jule::I32 _22827a827_short_3(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa4a29d_short(_self_.safe_ptr<_22aa49c70_Flag>());
}
inline jule::Str _22829bb45_what_3(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa4a039_what(_self_.safe_ptr<_22aa49c70_Flag>());
}
inline void _22829bc77_reset_3(jule::Trait<_227d88886_CommonFlag> _self_) {
	_22aa4a16b_reset(_self_.safe_ptr<_22aa49c70_Flag>());
}
inline jule::Str _227d88754_name_4(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa4d2a1_name(_self_.safe_ptr<_22aa4d757_Flag>());
}
inline jule::I32 _22827a827_short_4(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa4dc85_short(_self_.safe_ptr<_22aa4d757_Flag>());
}
inline jule::Str _22829bb45_what_4(jule::Trait<_227d88886_CommonFlag> _self_) {
	return _22aa4da21_what(_self_.safe_ptr<_22aa4d757_Flag>());
}
inline void _22829bc77_reset_4(jule::Trait<_227d88886_CommonFlag> _self_) {
	_22aa4db53_reset(_self_.safe_ptr<_22aa4d757_Flag>());
}


static _2455455b9_ImporterMptrData _2455455b9_Importer_mptr_data[] = {
	{
		._2455444db_set_mod_path=_2455444db_set_mod_path_0,
		._24554472d_get_mod_path=_24554472d_get_mod_path_0,
		._245544a3b_mod_by_id=_245544a3b_mod_by_id_0,
		._245544d49_get_import=_245544d49_get_import_0,
		._245545201_import_package=_245545201_import_package_0,
		._245545476_imported=_245545476_imported_0,
	},
};
static _2455e0ae8_KindMptrData _2455e0ae8_Kind_mptr_data[] = {
	{
		._2455e0697_to_str=_2455e0697_to_str_0,
		._2455e09a5_equals=_2455e09a5_equals_0,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_1,
		._2455e09a5_equals=_2455e09a5_equals_1,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_2,
		._2455e09a5_equals=_2455e09a5_equals_2,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_3,
		._2455e09a5_equals=_2455e09a5_equals_3,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_4,
		._2455e09a5_equals=_2455e09a5_equals_4,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_5,
		._2455e09a5_equals=_2455e09a5_equals_5,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_6,
		._2455e09a5_equals=_2455e09a5_equals_6,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_7,
		._2455e09a5_equals=_2455e09a5_equals_7,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_8,
		._2455e09a5_equals=_2455e09a5_equals_8,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_9,
		._2455e09a5_equals=_2455e09a5_equals_9,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_10,
		._2455e09a5_equals=_2455e09a5_equals_10,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_11,
		._2455e09a5_equals=_2455e09a5_equals_11,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_12,
		._2455e09a5_equals=_2455e09a5_equals_12,
	},
	{
		._2455e0697_to_str=_2455e0697_to_str_13,
		._2455e09a5_equals=_2455e09a5_equals_13,
	},
};
static _24560bac0_LookupMptrData _24560bac0_Lookup_mptr_data[] = {
	{
		._245609c77_find_package=_245609c77_find_package_0,
		._24560a085_select_package=_24560a085_select_package_0,
		._24560a43c_find_var=_24560a43c_find_var_0,
		._24560a7e4_find_type_alias=_24560a7e4_find_type_alias_0,
		._24560ab9b_find_struct=_24560ab9b_find_struct_0,
		._24560b053_find_fn=_24560b053_find_fn_0,
		._24560b361_find_trait=_24560b361_find_trait_0,
		._24560b66e_find_enum=_24560b66e_find_enum_0,
		._24560b97c_find_type_enum=_24560b97c_find_type_enum_0,
	},
	{
		._245609c77_find_package=_245609c77_find_package_1,
		._24560a085_select_package=_24560a085_select_package_1,
		._24560a43c_find_var=_24560a43c_find_var_1,
		._24560a7e4_find_type_alias=_24560a7e4_find_type_alias_1,
		._24560ab9b_find_struct=_24560ab9b_find_struct_1,
		._24560b053_find_fn=_24560b053_find_fn_1,
		._24560b361_find_trait=_24560b361_find_trait_1,
		._24560b66e_find_enum=_24560b66e_find_enum_1,
		._24560b97c_find_type_enum=_24560b97c_find_type_enum_1,
	},
	{
		._245609c77_find_package=_245609c77_find_package_2,
		._24560a085_select_package=_24560a085_select_package_2,
		._24560a43c_find_var=_24560a43c_find_var_2,
		._24560a7e4_find_type_alias=_24560a7e4_find_type_alias_2,
		._24560ab9b_find_struct=_24560ab9b_find_struct_2,
		._24560b053_find_fn=_24560b053_find_fn_2,
		._24560b361_find_trait=_24560b361_find_trait_2,
		._24560b66e_find_enum=_24560b66e_find_enum_2,
		._24560b97c_find_type_enum=_24560b97c_find_type_enum_2,
	},
	{
		._245609c77_find_package=_245609c77_find_package_3,
		._24560a085_select_package=_24560a085_select_package_3,
		._24560a43c_find_var=_24560a43c_find_var_3,
		._24560a7e4_find_type_alias=_24560a7e4_find_type_alias_3,
		._24560ab9b_find_struct=_24560ab9b_find_struct_3,
		._24560b053_find_fn=_24560b053_find_fn_3,
		._24560b361_find_trait=_24560b361_find_trait_3,
		._24560b66e_find_enum=_24560b66e_find_enum_3,
		._24560b97c_find_type_enum=_24560b97c_find_type_enum_3,
	},
	{
		._245609c77_find_package=_245609c77_find_package_4,
		._24560a085_select_package=_24560a085_select_package_4,
		._24560a43c_find_var=_24560a43c_find_var_4,
		._24560a7e4_find_type_alias=_24560a7e4_find_type_alias_4,
		._24560ab9b_find_struct=_24560ab9b_find_struct_4,
		._24560b053_find_fn=_24560b053_find_fn_4,
		._24560b361_find_trait=_24560b361_find_trait_4,
		._24560b66e_find_enum=_24560b66e_find_enum_4,
		._24560b97c_find_type_enum=_24560b97c_find_type_enum_4,
	},
};
static _227d88886_CommonFlagMptrData _227d88886_CommonFlag_mptr_data[] = {
	{
		._227d88754_name=_227d88754_name_0,
		._22827a827_short=_22827a827_short_0,
		._22829bb45_what=_22829bb45_what_0,
		._22829bc77_reset=_22829bc77_reset_0,
	},
	{
		._227d88754_name=_227d88754_name_1,
		._22827a827_short=_22827a827_short_1,
		._22829bb45_what=_22829bb45_what_1,
		._22829bc77_reset=_22829bc77_reset_1,
	},
	{
		._227d88754_name=_227d88754_name_2,
		._22827a827_short=_22827a827_short_2,
		._22829bb45_what=_22829bb45_what_2,
		._22829bc77_reset=_22829bc77_reset_2,
	},
	{
		._227d88754_name=_227d88754_name_3,
		._22827a827_short=_22827a827_short_3,
		._22829bb45_what=_22829bb45_what_3,
		._22829bc77_reset=_22829bc77_reset_3,
	},
	{
		._227d88754_name=_227d88754_name_4,
		._22827a827_short=_22827a827_short_4,
		._22829bb45_what=_22829bb45_what_4,
		._22829bc77_reset=_22829bc77_reset_4,
	},
};


jule::Str _22826b64d_OUT_DIR = jule::Str("dist", 4);
jule::Str _2282710c0_OUT_NAME = jule::Str("ir.cpp", 6);
jule::Str _228272ab6_OUT = jule::Str();
jule::Str _240da8816_COMPILER = jule::Str();
jule::Str _240e642ea_COMPILER_PATH = jule::Str();
jule::Str _240e6455e_CPP_STD = jule::Str("cpp17", 5);
jule::Bool _240e647c3_SHADOWING = false;
jule::Bool _240e64a9d_TRANSPILATION = false;
jule::Bool _240e64dab_TEST = false;
jule::Bool _240e651b9_RC = true;
jule::Bool _240e655d7_SAFETY = true;
jule::Bool _240e658e5_PRODUCTION = false;
jule::Ptr<_242d5e49b_RangeTable> _242ce0493__L = jule::new_ptr<_242d5e49b_RangeTable>(_242d5e49b_RangeTable{._field_r16=jule::Slice<_242d5daa5_Range16>::make({_242d5daa5_Range16{._field_lo=65LLU, ._field_hi=90LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=97LLU, ._field_hi=122LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=170LLU, ._field_hi=181LLU, ._field_stride=11LLU},_242d5daa5_Range16{._field_lo=186LLU, ._field_hi=192LLU, ._field_stride=6LLU},_242d5daa5_Range16{._field_lo=193LLU, ._field_hi=214LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=216LLU, ._field_hi=246LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=248LLU, ._field_hi=705LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=710LLU, ._field_hi=721LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=736LLU, ._field_hi=740LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=748LLU, ._field_hi=750LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=880LLU, ._field_hi=884LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=886LLU, ._field_hi=887LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=890LLU, ._field_hi=893LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=895LLU, ._field_hi=902LLU, ._field_stride=7LLU},_242d5daa5_Range16{._field_lo=904LLU, ._field_hi=906LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=908LLU, ._field_hi=910LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=911LLU, ._field_hi=929LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=931LLU, ._field_hi=1013LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1015LLU, ._field_hi=1153LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1162LLU, ._field_hi=1327LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1329LLU, ._field_hi=1366LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1369LLU, ._field_hi=1376LLU, ._field_stride=7LLU},_242d5daa5_Range16{._field_lo=1377LLU, ._field_hi=1416LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1488LLU, ._field_hi=1514LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1519LLU, ._field_hi=1522LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1568LLU, ._field_hi=1610LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1646LLU, ._field_hi=1647LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1649LLU, ._field_hi=1747LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1749LLU, ._field_hi=1765LLU, ._field_stride=16LLU},_242d5daa5_Range16{._field_lo=1766LLU, ._field_hi=1774LLU, ._field_stride=8LLU},_242d5daa5_Range16{._field_lo=1775LLU, ._field_hi=1786LLU, ._field_stride=11LLU},_242d5daa5_Range16{._field_lo=1787LLU, ._field_hi=1788LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1791LLU, ._field_hi=1808LLU, ._field_stride=17LLU},_242d5daa5_Range16{._field_lo=1810LLU, ._field_hi=1839LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1869LLU, ._field_hi=1957LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=1969LLU, ._field_hi=1994LLU, ._field_stride=25LLU},_242d5daa5_Range16{._field_lo=1995LLU, ._field_hi=2026LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2036LLU, ._field_hi=2037LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2042LLU, ._field_hi=2048LLU, ._field_stride=6LLU},_242d5daa5_Range16{._field_lo=2049LLU, ._field_hi=2069LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2074LLU, ._field_hi=2084LLU, ._field_stride=10LLU},_242d5daa5_Range16{._field_lo=2088LLU, ._field_hi=2112LLU, ._field_stride=24LLU},_242d5daa5_Range16{._field_lo=2113LLU, ._field_hi=2136LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2144LLU, ._field_hi=2154LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2160LLU, ._field_hi=2183LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2185LLU, ._field_hi=2190LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2208LLU, ._field_hi=2249LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2308LLU, ._field_hi=2361LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2365LLU, ._field_hi=2384LLU, ._field_stride=19LLU},_242d5daa5_Range16{._field_lo=2392LLU, ._field_hi=2401LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2417LLU, ._field_hi=2432LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2437LLU, ._field_hi=2444LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2447LLU, ._field_hi=2448LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2451LLU, ._field_hi=2472LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2474LLU, ._field_hi=2480LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2482LLU, ._field_hi=2486LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=2487LLU, ._field_hi=2489LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2493LLU, ._field_hi=2510LLU, ._field_stride=17LLU},_242d5daa5_Range16{._field_lo=2524LLU, ._field_hi=2525LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2527LLU, ._field_hi=2529LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2544LLU, ._field_hi=2545LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2556LLU, ._field_hi=2565LLU, ._field_stride=9LLU},_242d5daa5_Range16{._field_lo=2566LLU, ._field_hi=2570LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2575LLU, ._field_hi=2576LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2579LLU, ._field_hi=2600LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2602LLU, ._field_hi=2608LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2610LLU, ._field_hi=2611LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2613LLU, ._field_hi=2614LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2616LLU, ._field_hi=2617LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2649LLU, ._field_hi=2652LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2654LLU, ._field_hi=2674LLU, ._field_stride=20LLU},_242d5daa5_Range16{._field_lo=2675LLU, ._field_hi=2676LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2693LLU, ._field_hi=2701LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2703LLU, ._field_hi=2705LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2707LLU, ._field_hi=2728LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2730LLU, ._field_hi=2736LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2738LLU, ._field_hi=2739LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2741LLU, ._field_hi=2745LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2749LLU, ._field_hi=2768LLU, ._field_stride=19LLU},_242d5daa5_Range16{._field_lo=2784LLU, ._field_hi=2785LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2809LLU, ._field_hi=2821LLU, ._field_stride=12LLU},_242d5daa5_Range16{._field_lo=2822LLU, ._field_hi=2828LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2831LLU, ._field_hi=2832LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2835LLU, ._field_hi=2856LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2858LLU, ._field_hi=2864LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2866LLU, ._field_hi=2867LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2869LLU, ._field_hi=2873LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2877LLU, ._field_hi=2908LLU, ._field_stride=31LLU},_242d5daa5_Range16{._field_lo=2909LLU, ._field_hi=2911LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=2912LLU, ._field_hi=2913LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2929LLU, ._field_hi=2947LLU, ._field_stride=18LLU},_242d5daa5_Range16{._field_lo=2949LLU, ._field_hi=2954LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2958LLU, ._field_hi=2960LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2962LLU, ._field_hi=2965LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2969LLU, ._field_hi=2970LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2972LLU, ._field_hi=2974LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=2975LLU, ._field_hi=2979LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=2980LLU, ._field_hi=2984LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=2985LLU, ._field_hi=2986LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=2990LLU, ._field_hi=3001LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3024LLU, ._field_hi=3077LLU, ._field_stride=53LLU},_242d5daa5_Range16{._field_lo=3078LLU, ._field_hi=3084LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3086LLU, ._field_hi=3088LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3090LLU, ._field_hi=3112LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3114LLU, ._field_hi=3129LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3133LLU, ._field_hi=3160LLU, ._field_stride=27LLU},_242d5daa5_Range16{._field_lo=3161LLU, ._field_hi=3162LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3165LLU, ._field_hi=3168LLU, ._field_stride=3LLU},_242d5daa5_Range16{._field_lo=3169LLU, ._field_hi=3200LLU, ._field_stride=31LLU},_242d5daa5_Range16{._field_lo=3205LLU, ._field_hi=3212LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3214LLU, ._field_hi=3216LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3218LLU, ._field_hi=3240LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3242LLU, ._field_hi=3251LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3253LLU, ._field_hi=3257LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3261LLU, ._field_hi=3293LLU, ._field_stride=32LLU},_242d5daa5_Range16{._field_lo=3294LLU, ._field_hi=3296LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=3297LLU, ._field_hi=3313LLU, ._field_stride=16LLU},_242d5daa5_Range16{._field_lo=3314LLU, ._field_hi=3332LLU, ._field_stride=18LLU},_242d5daa5_Range16{._field_lo=3333LLU, ._field_hi=3340LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3342LLU, ._field_hi=3344LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3346LLU, ._field_hi=3386LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3389LLU, ._field_hi=3406LLU, ._field_stride=17LLU},_242d5daa5_Range16{._field_lo=3412LLU, ._field_hi=3414LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3423LLU, ._field_hi=3425LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3450LLU, ._field_hi=3455LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3461LLU, ._field_hi=3478LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3482LLU, ._field_hi=3505LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3507LLU, ._field_hi=3515LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3517LLU, ._field_hi=3520LLU, ._field_stride=3LLU},_242d5daa5_Range16{._field_lo=3521LLU, ._field_hi=3526LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3585LLU, ._field_hi=3632LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3634LLU, ._field_hi=3635LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3648LLU, ._field_hi=3654LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3713LLU, ._field_hi=3714LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3716LLU, ._field_hi=3718LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=3719LLU, ._field_hi=3722LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3724LLU, ._field_hi=3747LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3749LLU, ._field_hi=3751LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=3752LLU, ._field_hi=3760LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3762LLU, ._field_hi=3763LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3773LLU, ._field_hi=3776LLU, ._field_stride=3LLU},_242d5daa5_Range16{._field_lo=3777LLU, ._field_hi=3780LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3782LLU, ._field_hi=3804LLU, ._field_stride=22LLU},_242d5daa5_Range16{._field_lo=3805LLU, ._field_hi=3807LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3840LLU, ._field_hi=3904LLU, ._field_stride=64LLU},_242d5daa5_Range16{._field_lo=3905LLU, ._field_hi=3911LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3913LLU, ._field_hi=3948LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=3976LLU, ._field_hi=3980LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4096LLU, ._field_hi=4138LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4159LLU, ._field_hi=4176LLU, ._field_stride=17LLU},_242d5daa5_Range16{._field_lo=4177LLU, ._field_hi=4181LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4186LLU, ._field_hi=4189LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4193LLU, ._field_hi=4197LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=4198LLU, ._field_hi=4206LLU, ._field_stride=8LLU},_242d5daa5_Range16{._field_lo=4207LLU, ._field_hi=4208LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4213LLU, ._field_hi=4225LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4238LLU, ._field_hi=4256LLU, ._field_stride=18LLU},_242d5daa5_Range16{._field_lo=4257LLU, ._field_hi=4293LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4295LLU, ._field_hi=4301LLU, ._field_stride=6LLU},_242d5daa5_Range16{._field_lo=4304LLU, ._field_hi=4346LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4348LLU, ._field_hi=4680LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4682LLU, ._field_hi=4685LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4688LLU, ._field_hi=4694LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4696LLU, ._field_hi=4698LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=4699LLU, ._field_hi=4701LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4704LLU, ._field_hi=4744LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4746LLU, ._field_hi=4749LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4752LLU, ._field_hi=4784LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4786LLU, ._field_hi=4789LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4792LLU, ._field_hi=4798LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4800LLU, ._field_hi=4802LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=4803LLU, ._field_hi=4805LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4808LLU, ._field_hi=4822LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4824LLU, ._field_hi=4880LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4882LLU, ._field_hi=4885LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4888LLU, ._field_hi=4954LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=4992LLU, ._field_hi=5007LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5024LLU, ._field_hi=5109LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5112LLU, ._field_hi=5117LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5121LLU, ._field_hi=5740LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5743LLU, ._field_hi=5759LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5761LLU, ._field_hi=5786LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5792LLU, ._field_hi=5866LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5873LLU, ._field_hi=5880LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5888LLU, ._field_hi=5905LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5919LLU, ._field_hi=5937LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5952LLU, ._field_hi=5969LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5984LLU, ._field_hi=5996LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=5998LLU, ._field_hi=6000LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6016LLU, ._field_hi=6067LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6103LLU, ._field_hi=6108LLU, ._field_stride=5LLU},_242d5daa5_Range16{._field_lo=6176LLU, ._field_hi=6264LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6272LLU, ._field_hi=6276LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6279LLU, ._field_hi=6312LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6314LLU, ._field_hi=6320LLU, ._field_stride=6LLU},_242d5daa5_Range16{._field_lo=6321LLU, ._field_hi=6389LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6400LLU, ._field_hi=6430LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6480LLU, ._field_hi=6509LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6512LLU, ._field_hi=6516LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6528LLU, ._field_hi=6571LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6576LLU, ._field_hi=6601LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6656LLU, ._field_hi=6678LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6688LLU, ._field_hi=6740LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6823LLU, ._field_hi=6917LLU, ._field_stride=94LLU},_242d5daa5_Range16{._field_lo=6918LLU, ._field_hi=6963LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=6981LLU, ._field_hi=6988LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7043LLU, ._field_hi=7072LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7086LLU, ._field_hi=7087LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7098LLU, ._field_hi=7141LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7168LLU, ._field_hi=7203LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7245LLU, ._field_hi=7247LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7258LLU, ._field_hi=7293LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7296LLU, ._field_hi=7304LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7312LLU, ._field_hi=7354LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7357LLU, ._field_hi=7359LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7401LLU, ._field_hi=7404LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7406LLU, ._field_hi=7411LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7413LLU, ._field_hi=7414LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7418LLU, ._field_hi=7424LLU, ._field_stride=6LLU},_242d5daa5_Range16{._field_lo=7425LLU, ._field_hi=7615LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7680LLU, ._field_hi=7957LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7960LLU, ._field_hi=7965LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=7968LLU, ._field_hi=8005LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8008LLU, ._field_hi=8013LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8016LLU, ._field_hi=8023LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8025LLU, ._field_hi=8031LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=8032LLU, ._field_hi=8061LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8064LLU, ._field_hi=8116LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8118LLU, ._field_hi=8124LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8126LLU, ._field_hi=8130LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=8131LLU, ._field_hi=8132LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8134LLU, ._field_hi=8140LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8144LLU, ._field_hi=8147LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8150LLU, ._field_hi=8155LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8160LLU, ._field_hi=8172LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8178LLU, ._field_hi=8180LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8182LLU, ._field_hi=8188LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8305LLU, ._field_hi=8319LLU, ._field_stride=14LLU},_242d5daa5_Range16{._field_lo=8336LLU, ._field_hi=8348LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8450LLU, ._field_hi=8455LLU, ._field_stride=5LLU},_242d5daa5_Range16{._field_lo=8458LLU, ._field_hi=8467LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8469LLU, ._field_hi=8473LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=8474LLU, ._field_hi=8477LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8484LLU, ._field_hi=8490LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=8491LLU, ._field_hi=8493LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8495LLU, ._field_hi=8505LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8508LLU, ._field_hi=8511LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8517LLU, ._field_hi=8521LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=8526LLU, ._field_hi=8579LLU, ._field_stride=53LLU},_242d5daa5_Range16{._field_lo=8580LLU, ._field_hi=11264LLU, ._field_stride=2684LLU},_242d5daa5_Range16{._field_lo=11265LLU, ._field_hi=11492LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11499LLU, ._field_hi=11502LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11506LLU, ._field_hi=11507LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11520LLU, ._field_hi=11557LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11559LLU, ._field_hi=11565LLU, ._field_stride=6LLU},_242d5daa5_Range16{._field_lo=11568LLU, ._field_hi=11623LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11631LLU, ._field_hi=11648LLU, ._field_stride=17LLU},_242d5daa5_Range16{._field_lo=11649LLU, ._field_hi=11670LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11680LLU, ._field_hi=11686LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11688LLU, ._field_hi=11694LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11696LLU, ._field_hi=11702LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11704LLU, ._field_hi=11710LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11712LLU, ._field_hi=11718LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11720LLU, ._field_hi=11726LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11728LLU, ._field_hi=11734LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11736LLU, ._field_hi=11742LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=11823LLU, ._field_hi=12293LLU, ._field_stride=470LLU},_242d5daa5_Range16{._field_lo=12294LLU, ._field_hi=12337LLU, ._field_stride=43LLU},_242d5daa5_Range16{._field_lo=12338LLU, ._field_hi=12341LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12347LLU, ._field_hi=12348LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12353LLU, ._field_hi=12438LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12445LLU, ._field_hi=12447LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12449LLU, ._field_hi=12538LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12540LLU, ._field_hi=12543LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12549LLU, ._field_hi=12591LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12593LLU, ._field_hi=12686LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12704LLU, ._field_hi=12735LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=12784LLU, ._field_hi=12799LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=13312LLU, ._field_hi=19903LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=19968LLU, ._field_hi=42124LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42192LLU, ._field_hi=42237LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42240LLU, ._field_hi=42508LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42512LLU, ._field_hi=42527LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42538LLU, ._field_hi=42539LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42560LLU, ._field_hi=42606LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42623LLU, ._field_hi=42653LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42656LLU, ._field_hi=42725LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42775LLU, ._field_hi=42783LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42786LLU, ._field_hi=42888LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42891LLU, ._field_hi=42954LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42960LLU, ._field_hi=42961LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42963LLU, ._field_hi=42965LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=42966LLU, ._field_hi=42969LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=42994LLU, ._field_hi=43009LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43011LLU, ._field_hi=43013LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43015LLU, ._field_hi=43018LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43020LLU, ._field_hi=43042LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43072LLU, ._field_hi=43123LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43138LLU, ._field_hi=43187LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43250LLU, ._field_hi=43255LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43259LLU, ._field_hi=43261LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=43262LLU, ._field_hi=43274LLU, ._field_stride=12LLU},_242d5daa5_Range16{._field_lo=43275LLU, ._field_hi=43301LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43312LLU, ._field_hi=43334LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43360LLU, ._field_hi=43388LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43396LLU, ._field_hi=43442LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43471LLU, ._field_hi=43488LLU, ._field_stride=17LLU},_242d5daa5_Range16{._field_lo=43489LLU, ._field_hi=43492LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43494LLU, ._field_hi=43503LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43514LLU, ._field_hi=43518LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43520LLU, ._field_hi=43560LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43584LLU, ._field_hi=43586LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43588LLU, ._field_hi=43595LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43616LLU, ._field_hi=43638LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43642LLU, ._field_hi=43646LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=43647LLU, ._field_hi=43695LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43697LLU, ._field_hi=43701LLU, ._field_stride=4LLU},_242d5daa5_Range16{._field_lo=43702LLU, ._field_hi=43705LLU, ._field_stride=3LLU},_242d5daa5_Range16{._field_lo=43706LLU, ._field_hi=43709LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43712LLU, ._field_hi=43714LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=43739LLU, ._field_hi=43741LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43744LLU, ._field_hi=43754LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43762LLU, ._field_hi=43764LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43777LLU, ._field_hi=43782LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43785LLU, ._field_hi=43790LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43793LLU, ._field_hi=43798LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43808LLU, ._field_hi=43814LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43816LLU, ._field_hi=43822LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43824LLU, ._field_hi=43866LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43868LLU, ._field_hi=43881LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=43888LLU, ._field_hi=44002LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=44032LLU, ._field_hi=55203LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=55216LLU, ._field_hi=55238LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=55243LLU, ._field_hi=55291LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=63744LLU, ._field_hi=64109LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64112LLU, ._field_hi=64217LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64256LLU, ._field_hi=64262LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64275LLU, ._field_hi=64279LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64285LLU, ._field_hi=64287LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=64288LLU, ._field_hi=64296LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64298LLU, ._field_hi=64310LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64312LLU, ._field_hi=64316LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64318LLU, ._field_hi=64320LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=64321LLU, ._field_hi=64323LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=64324LLU, ._field_hi=64326LLU, ._field_stride=2LLU},_242d5daa5_Range16{._field_lo=64327LLU, ._field_hi=64433LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64467LLU, ._field_hi=64829LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64848LLU, ._field_hi=64911LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=64914LLU, ._field_hi=64967LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65008LLU, ._field_hi=65019LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65136LLU, ._field_hi=65140LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65142LLU, ._field_hi=65276LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65313LLU, ._field_hi=65338LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65345LLU, ._field_hi=65370LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65382LLU, ._field_hi=65470LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65474LLU, ._field_hi=65479LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65482LLU, ._field_hi=65487LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65490LLU, ._field_hi=65495LLU, ._field_stride=1LLU},_242d5daa5_Range16{._field_lo=65498LLU, ._field_hi=65500LLU, ._field_stride=1LLU}}), ._field_r32=jule::Slice<_242d5e028_Range32>::make({_242d5e028_Range32{._field_lo=65536LLU, ._field_hi=65547LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=65549LLU, ._field_hi=65574LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=65576LLU, ._field_hi=65594LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=65596LLU, ._field_hi=65597LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=65599LLU, ._field_hi=65613LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=65616LLU, ._field_hi=65629LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=65664LLU, ._field_hi=65786LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66176LLU, ._field_hi=66204LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66208LLU, ._field_hi=66256LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66304LLU, ._field_hi=66335LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66349LLU, ._field_hi=66368LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66370LLU, ._field_hi=66377LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66384LLU, ._field_hi=66421LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66432LLU, ._field_hi=66461LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66464LLU, ._field_hi=66499LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66504LLU, ._field_hi=66511LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66560LLU, ._field_hi=66717LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66736LLU, ._field_hi=66771LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66776LLU, ._field_hi=66811LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66816LLU, ._field_hi=66855LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66864LLU, ._field_hi=66915LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66928LLU, ._field_hi=66938LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66940LLU, ._field_hi=66954LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66956LLU, ._field_hi=66962LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66964LLU, ._field_hi=66965LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66967LLU, ._field_hi=66977LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66979LLU, ._field_hi=66993LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=66995LLU, ._field_hi=67001LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67003LLU, ._field_hi=67004LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67072LLU, ._field_hi=67382LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67392LLU, ._field_hi=67413LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67424LLU, ._field_hi=67431LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67456LLU, ._field_hi=67461LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67463LLU, ._field_hi=67504LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67506LLU, ._field_hi=67514LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67584LLU, ._field_hi=67589LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67592LLU, ._field_hi=67594LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=67595LLU, ._field_hi=67637LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67639LLU, ._field_hi=67640LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67644LLU, ._field_hi=67647LLU, ._field_stride=3LLU},_242d5e028_Range32{._field_lo=67648LLU, ._field_hi=67669LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67680LLU, ._field_hi=67702LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67712LLU, ._field_hi=67742LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67808LLU, ._field_hi=67826LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67828LLU, ._field_hi=67829LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67840LLU, ._field_hi=67861LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67872LLU, ._field_hi=67897LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=67968LLU, ._field_hi=68023LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68030LLU, ._field_hi=68031LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68096LLU, ._field_hi=68112LLU, ._field_stride=16LLU},_242d5e028_Range32{._field_lo=68113LLU, ._field_hi=68115LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68117LLU, ._field_hi=68119LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68121LLU, ._field_hi=68149LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68192LLU, ._field_hi=68220LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68224LLU, ._field_hi=68252LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68288LLU, ._field_hi=68295LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68297LLU, ._field_hi=68324LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68352LLU, ._field_hi=68405LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68416LLU, ._field_hi=68437LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68448LLU, ._field_hi=68466LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68480LLU, ._field_hi=68497LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68608LLU, ._field_hi=68680LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68736LLU, ._field_hi=68786LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68800LLU, ._field_hi=68850LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=68864LLU, ._field_hi=68899LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69248LLU, ._field_hi=69289LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69296LLU, ._field_hi=69297LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69376LLU, ._field_hi=69404LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69415LLU, ._field_hi=69424LLU, ._field_stride=9LLU},_242d5e028_Range32{._field_lo=69425LLU, ._field_hi=69445LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69488LLU, ._field_hi=69505LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69552LLU, ._field_hi=69572LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69600LLU, ._field_hi=69622LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69635LLU, ._field_hi=69687LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69745LLU, ._field_hi=69746LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69749LLU, ._field_hi=69763LLU, ._field_stride=14LLU},_242d5e028_Range32{._field_lo=69764LLU, ._field_hi=69807LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69840LLU, ._field_hi=69864LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69891LLU, ._field_hi=69926LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=69956LLU, ._field_hi=69959LLU, ._field_stride=3LLU},_242d5e028_Range32{._field_lo=69968LLU, ._field_hi=70002LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70006LLU, ._field_hi=70019LLU, ._field_stride=13LLU},_242d5e028_Range32{._field_lo=70020LLU, ._field_hi=70066LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70081LLU, ._field_hi=70084LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70106LLU, ._field_hi=70108LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=70144LLU, ._field_hi=70161LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70163LLU, ._field_hi=70187LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70207LLU, ._field_hi=70208LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70272LLU, ._field_hi=70278LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70280LLU, ._field_hi=70282LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=70283LLU, ._field_hi=70285LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70287LLU, ._field_hi=70301LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70303LLU, ._field_hi=70312LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70320LLU, ._field_hi=70366LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70405LLU, ._field_hi=70412LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70415LLU, ._field_hi=70416LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70419LLU, ._field_hi=70440LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70442LLU, ._field_hi=70448LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70450LLU, ._field_hi=70451LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70453LLU, ._field_hi=70457LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70461LLU, ._field_hi=70480LLU, ._field_stride=19LLU},_242d5e028_Range32{._field_lo=70493LLU, ._field_hi=70497LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70656LLU, ._field_hi=70708LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70727LLU, ._field_hi=70730LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70751LLU, ._field_hi=70753LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70784LLU, ._field_hi=70831LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70852LLU, ._field_hi=70853LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=70855LLU, ._field_hi=71040LLU, ._field_stride=185LLU},_242d5e028_Range32{._field_lo=71041LLU, ._field_hi=71086LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71128LLU, ._field_hi=71131LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71168LLU, ._field_hi=71215LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71236LLU, ._field_hi=71296LLU, ._field_stride=60LLU},_242d5e028_Range32{._field_lo=71297LLU, ._field_hi=71338LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71352LLU, ._field_hi=71424LLU, ._field_stride=72LLU},_242d5e028_Range32{._field_lo=71425LLU, ._field_hi=71450LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71488LLU, ._field_hi=71494LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71680LLU, ._field_hi=71723LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71840LLU, ._field_hi=71903LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71935LLU, ._field_hi=71942LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71945LLU, ._field_hi=71948LLU, ._field_stride=3LLU},_242d5e028_Range32{._field_lo=71949LLU, ._field_hi=71955LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71957LLU, ._field_hi=71958LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71960LLU, ._field_hi=71983LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=71999LLU, ._field_hi=72001LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=72096LLU, ._field_hi=72103LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72106LLU, ._field_hi=72144LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72161LLU, ._field_hi=72163LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=72192LLU, ._field_hi=72203LLU, ._field_stride=11LLU},_242d5e028_Range32{._field_lo=72204LLU, ._field_hi=72242LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72250LLU, ._field_hi=72272LLU, ._field_stride=22LLU},_242d5e028_Range32{._field_lo=72284LLU, ._field_hi=72329LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72349LLU, ._field_hi=72368LLU, ._field_stride=19LLU},_242d5e028_Range32{._field_lo=72369LLU, ._field_hi=72440LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72704LLU, ._field_hi=72712LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72714LLU, ._field_hi=72750LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72768LLU, ._field_hi=72818LLU, ._field_stride=50LLU},_242d5e028_Range32{._field_lo=72819LLU, ._field_hi=72847LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72960LLU, ._field_hi=72966LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72968LLU, ._field_hi=72969LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=72971LLU, ._field_hi=73008LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=73030LLU, ._field_hi=73056LLU, ._field_stride=26LLU},_242d5e028_Range32{._field_lo=73057LLU, ._field_hi=73061LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=73063LLU, ._field_hi=73064LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=73066LLU, ._field_hi=73097LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=73112LLU, ._field_hi=73440LLU, ._field_stride=328LLU},_242d5e028_Range32{._field_lo=73441LLU, ._field_hi=73458LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=73474LLU, ._field_hi=73476LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=73477LLU, ._field_hi=73488LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=73490LLU, ._field_hi=73523LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=73648LLU, ._field_hi=73728LLU, ._field_stride=80LLU},_242d5e028_Range32{._field_lo=73729LLU, ._field_hi=74649LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=74880LLU, ._field_hi=75075LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=77712LLU, ._field_hi=77808LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=77824LLU, ._field_hi=78895LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=78913LLU, ._field_hi=78918LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=82944LLU, ._field_hi=83526LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=92160LLU, ._field_hi=92728LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=92736LLU, ._field_hi=92766LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=92784LLU, ._field_hi=92862LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=92880LLU, ._field_hi=92909LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=92928LLU, ._field_hi=92975LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=92992LLU, ._field_hi=92995LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=93027LLU, ._field_hi=93047LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=93053LLU, ._field_hi=93071LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=93760LLU, ._field_hi=93823LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=93952LLU, ._field_hi=94026LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=94032LLU, ._field_hi=94099LLU, ._field_stride=67LLU},_242d5e028_Range32{._field_lo=94100LLU, ._field_hi=94111LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=94176LLU, ._field_hi=94177LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=94179LLU, ._field_hi=94208LLU, ._field_stride=29LLU},_242d5e028_Range32{._field_lo=94209LLU, ._field_hi=100343LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=100352LLU, ._field_hi=101589LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=101632LLU, ._field_hi=101640LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=110576LLU, ._field_hi=110579LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=110581LLU, ._field_hi=110587LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=110589LLU, ._field_hi=110590LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=110592LLU, ._field_hi=110882LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=110898LLU, ._field_hi=110928LLU, ._field_stride=30LLU},_242d5e028_Range32{._field_lo=110929LLU, ._field_hi=110930LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=110933LLU, ._field_hi=110948LLU, ._field_stride=15LLU},_242d5e028_Range32{._field_lo=110949LLU, ._field_hi=110951LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=110960LLU, ._field_hi=111355LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=113664LLU, ._field_hi=113770LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=113776LLU, ._field_hi=113788LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=113792LLU, ._field_hi=113800LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=113808LLU, ._field_hi=113817LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=119808LLU, ._field_hi=119892LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=119894LLU, ._field_hi=119964LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=119966LLU, ._field_hi=119967LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=119970LLU, ._field_hi=119973LLU, ._field_stride=3LLU},_242d5e028_Range32{._field_lo=119974LLU, ._field_hi=119977LLU, ._field_stride=3LLU},_242d5e028_Range32{._field_lo=119978LLU, ._field_hi=119980LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=119982LLU, ._field_hi=119993LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=119995LLU, ._field_hi=119997LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=119998LLU, ._field_hi=120003LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120005LLU, ._field_hi=120069LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120071LLU, ._field_hi=120074LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120077LLU, ._field_hi=120084LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120086LLU, ._field_hi=120092LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120094LLU, ._field_hi=120121LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120123LLU, ._field_hi=120126LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120128LLU, ._field_hi=120132LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120134LLU, ._field_hi=120138LLU, ._field_stride=4LLU},_242d5e028_Range32{._field_lo=120139LLU, ._field_hi=120144LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120146LLU, ._field_hi=120485LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120488LLU, ._field_hi=120512LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120514LLU, ._field_hi=120538LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120540LLU, ._field_hi=120570LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120572LLU, ._field_hi=120596LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120598LLU, ._field_hi=120628LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120630LLU, ._field_hi=120654LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120656LLU, ._field_hi=120686LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120688LLU, ._field_hi=120712LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120714LLU, ._field_hi=120744LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120746LLU, ._field_hi=120770LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=120772LLU, ._field_hi=120779LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=122624LLU, ._field_hi=122654LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=122661LLU, ._field_hi=122666LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=122928LLU, ._field_hi=122989LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=123136LLU, ._field_hi=123180LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=123191LLU, ._field_hi=123197LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=123214LLU, ._field_hi=123536LLU, ._field_stride=322LLU},_242d5e028_Range32{._field_lo=123537LLU, ._field_hi=123565LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=123584LLU, ._field_hi=123627LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=124112LLU, ._field_hi=124139LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=124896LLU, ._field_hi=124902LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=124904LLU, ._field_hi=124907LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=124909LLU, ._field_hi=124910LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=124912LLU, ._field_hi=124926LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=124928LLU, ._field_hi=125124LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=125184LLU, ._field_hi=125251LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=125259LLU, ._field_hi=126464LLU, ._field_stride=1205LLU},_242d5e028_Range32{._field_lo=126465LLU, ._field_hi=126467LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126469LLU, ._field_hi=126495LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126497LLU, ._field_hi=126498LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126500LLU, ._field_hi=126503LLU, ._field_stride=3LLU},_242d5e028_Range32{._field_lo=126505LLU, ._field_hi=126514LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126516LLU, ._field_hi=126519LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126521LLU, ._field_hi=126523LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=126530LLU, ._field_hi=126535LLU, ._field_stride=5LLU},_242d5e028_Range32{._field_lo=126537LLU, ._field_hi=126541LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=126542LLU, ._field_hi=126543LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126545LLU, ._field_hi=126546LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126548LLU, ._field_hi=126551LLU, ._field_stride=3LLU},_242d5e028_Range32{._field_lo=126553LLU, ._field_hi=126561LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=126562LLU, ._field_hi=126564LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=126567LLU, ._field_hi=126570LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126572LLU, ._field_hi=126578LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126580LLU, ._field_hi=126583LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126585LLU, ._field_hi=126588LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126590LLU, ._field_hi=126592LLU, ._field_stride=2LLU},_242d5e028_Range32{._field_lo=126593LLU, ._field_hi=126601LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126603LLU, ._field_hi=126619LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126625LLU, ._field_hi=126627LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126629LLU, ._field_hi=126633LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=126635LLU, ._field_hi=126651LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=131072LLU, ._field_hi=173791LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=173824LLU, ._field_hi=177977LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=177984LLU, ._field_hi=178205LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=178208LLU, ._field_hi=183969LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=183984LLU, ._field_hi=191456LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=194560LLU, ._field_hi=195101LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=196608LLU, ._field_hi=201546LLU, ._field_stride=1LLU},_242d5e028_Range32{._field_lo=201552LLU, ._field_hi=205743LLU, ._field_stride=1LLU}}), ._field_latin_offset=6LL});
jule::Array<jule::Str,4> _240e6e3c1_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
jule::Array<jule::Str,3> _242daca16_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
jule::Array<jule::Str,1> _242dae045_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
jule::Array<jule::Str,3> _242dbe099_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
jule::Array<jule::Str,3> _242dbe42e_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
jule::Str _242ddd4e7_PATH_STDLIB = jule::Str();
jule::Str _242dde152_PATH_EXEC = jule::Str();
jule::Str _242de0087_PATH_WD = jule::Str();
jule::Str _242e105e6_PATH_API = jule::Str();
jule::Array<jule::I32,5> _243144e68_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
jule::Array<jule::Str,6> _2431451cc_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
jule::Array<jule::Str,12> _24314551d_BIN_OPS = jule::Array<jule::Str,12>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("&&", 2),jule::Str("||", 2)});
jule::Array<jule::Str,2> _2431dd9e5_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
jule::Array<jule::Str,11> _2431ddd36_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
jule::Array<_2431eb915_KindPair,47> _2431ebd99_KEYWORDS = jule::Array<_2431eb915_KindPair,47>({_2431eb915_KindPair{._field_kind=jule::Str("i8", 2), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("i16", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("i32", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("i64", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("u8", 2), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("u16", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("u32", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("u64", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("f32", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("f64", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("uint", 4), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("int", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("uintptr", 7), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("bool", 4), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("str", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("any", 3), ._field_id=static_cast<jule::U32>(1LLU)},_2431eb915_KindPair{._field_kind=jule::Str("true", 4), ._field_id=static_cast<jule::U32>(6LLU)},_2431eb915_KindPair{._field_kind=jule::Str("false", 5), ._field_id=static_cast<jule::U32>(6LLU)},_2431eb915_KindPair{._field_kind=jule::Str("nil", 3), ._field_id=static_cast<jule::U32>(6LLU)},_2431eb915_KindPair{._field_kind=jule::Str("const", 5), ._field_id=static_cast<jule::U32>(9LLU)},_2431eb915_KindPair{._field_kind=jule::Str("ret", 3), ._field_id=static_cast<jule::U32>(4LLU)},_2431eb915_KindPair{._field_kind=jule::Str("type", 4), ._field_id=static_cast<jule::U32>(10LLU)},_2431eb915_KindPair{._field_kind=jule::Str("for", 3), ._field_id=static_cast<jule::U32>(12LLU)},_2431eb915_KindPair{._field_kind=jule::Str("break", 5), ._field_id=static_cast<jule::U32>(13LLU)},_2431eb915_KindPair{._field_kind=jule::Str("continue", 8), ._field_id=static_cast<jule::U32>(14LLU)},_2431eb915_KindPair{._field_kind=jule::Str("in", 2), ._field_id=static_cast<jule::U32>(15LLU)},_2431eb915_KindPair{._field_kind=jule::Str("if", 2), ._field_id=static_cast<jule::U32>(16LLU)},_2431eb915_KindPair{._field_kind=jule::Str("else", 4), ._field_id=static_cast<jule::U32>(17LLU)},_2431eb915_KindPair{._field_kind=jule::Str("use", 3), ._field_id=static_cast<jule::U32>(19LLU)},_2431eb915_KindPair{._field_kind=jule::Str("pub", 3), ._field_id=static_cast<jule::U32>(21LLU)},_2431eb915_KindPair{._field_kind=jule::Str("goto", 4), ._field_id=static_cast<jule::U32>(22LLU)},_2431eb915_KindPair{._field_kind=jule::Str("enum", 4), ._field_id=static_cast<jule::U32>(24LLU)},_2431eb915_KindPair{._field_kind=jule::Str("struct", 6), ._field_id=static_cast<jule::U32>(25LLU)},_2431eb915_KindPair{._field_kind=jule::Str("co", 2), ._field_id=static_cast<jule::U32>(26LLU)},_2431eb915_KindPair{._field_kind=jule::Str("match", 5), ._field_id=static_cast<jule::U32>(27LLU)},_2431eb915_KindPair{._field_kind=jule::Str("self", 4), ._field_id=static_cast<jule::U32>(28LLU)},_2431eb915_KindPair{._field_kind=jule::Str("trait", 5), ._field_id=static_cast<jule::U32>(29LLU)},_2431eb915_KindPair{._field_kind=jule::Str("impl", 4), ._field_id=static_cast<jule::U32>(30LLU)},_2431eb915_KindPair{._field_kind=jule::Str("cpp", 3), ._field_id=static_cast<jule::U32>(31LLU)},_2431eb915_KindPair{._field_kind=jule::Str("fall", 4), ._field_id=static_cast<jule::U32>(32LLU)},_2431eb915_KindPair{._field_kind=jule::Str("fn", 2), ._field_id=static_cast<jule::U32>(33LLU)},_2431eb915_KindPair{._field_kind=jule::Str("let", 3), ._field_id=static_cast<jule::U32>(34LLU)},_2431eb915_KindPair{._field_kind=jule::Str("unsafe", 6), ._field_id=static_cast<jule::U32>(35LLU)},_2431eb915_KindPair{._field_kind=jule::Str("mut", 3), ._field_id=static_cast<jule::U32>(36LLU)},_2431eb915_KindPair{._field_kind=jule::Str("defer", 5), ._field_id=static_cast<jule::U32>(37LLU)},_2431eb915_KindPair{._field_kind=jule::Str("static", 6), ._field_id=static_cast<jule::U32>(38LLU)},_2431eb915_KindPair{._field_kind=jule::Str("error", 5), ._field_id=static_cast<jule::U32>(40LLU)}});
jule::Array<_2431eb915_KindPair,39> _2431ec22e_BASIC_OPS = jule::Array<_2431eb915_KindPair,39>({_2431eb915_KindPair{._field_kind=jule::Str("::", 2), ._field_id=static_cast<jule::U32>(23LLU)},_2431eb915_KindPair{._field_kind=jule::Str(":", 1), ._field_id=static_cast<jule::U32>(11LLU)},_2431eb915_KindPair{._field_kind=jule::Str(";", 1), ._field_id=static_cast<jule::U32>(5LLU)},_2431eb915_KindPair{._field_kind=jule::Str(",", 1), ._field_id=static_cast<jule::U32>(8LLU)},_2431eb915_KindPair{._field_kind=jule::Str("...", 3), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str(".", 1), ._field_id=static_cast<jule::U32>(20LLU)},_2431eb915_KindPair{._field_kind=jule::Str("+=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("-=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("*=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("/=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("%=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("<<=", 3), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str(">>=", 3), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("^=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("&=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("|=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("==", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("!=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str(">=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("<=", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("&&", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("||", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("<<", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str(">>", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("++", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("--", 2), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("+", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("-", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("*", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("/", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("%", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("&", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("|", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("^", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("!", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("<", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str(">", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("=", 1), ._field_id=static_cast<jule::U32>(7LLU)},_2431eb915_KindPair{._field_kind=jule::Str("#", 1), ._field_id=static_cast<jule::U32>(39LLU)}});
jule::Array<jule::U8,32> _24542791e_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
jule::Array<jule::U8,64> _24542806d_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
_24546660b_FloatInfo _245466a29_F32_INFO = _24546660b_FloatInfo{._field_mantbits=23LLU, ._field_expbits=8LLU, ._field_bias=-127LL};
_24546660b_FloatInfo _245466d7b_F64_INFO = _24546660b_FloatInfo{._field_mantbits=52LLU, ._field_expbits=11LLU, ._field_bias=-1023LL};
jule::Array<jule::Array<jule::U64,2>,696> _24546e3b1_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
jule::Slice<jule::I32> _245471160_POWTAB = jule::Slice<jule::I32>::make({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
jule::Slice<jule::F64> _245471c10_F64_POW10 = jule::Slice<jule::F64>::make({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
jule::Slice<jule::F32> _245472095_F32_POW10 = jule::Slice<jule::F32>::make({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
jule::Array<jule::U64,20> _24547510e_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
jule::Slice<_245478ad5_LeftCheat> _245479069_LEFTCHEATS = jule::Slice<_245478ad5_LeftCheat>::make({_245478ad5_LeftCheat{._field_delta=0LL, ._field_cutoff=jule::Str()},_245478ad5_LeftCheat{._field_delta=1LL, ._field_cutoff=jule::Str("5", 1)},_245478ad5_LeftCheat{._field_delta=1LL, ._field_cutoff=jule::Str("25", 2)},_245478ad5_LeftCheat{._field_delta=1LL, ._field_cutoff=jule::Str("125", 3)},_245478ad5_LeftCheat{._field_delta=2LL, ._field_cutoff=jule::Str("625", 3)},_245478ad5_LeftCheat{._field_delta=2LL, ._field_cutoff=jule::Str("3125", 4)},_245478ad5_LeftCheat{._field_delta=2LL, ._field_cutoff=jule::Str("15625", 5)},_245478ad5_LeftCheat{._field_delta=3LL, ._field_cutoff=jule::Str("78125", 5)},_245478ad5_LeftCheat{._field_delta=3LL, ._field_cutoff=jule::Str("390625", 6)},_245478ad5_LeftCheat{._field_delta=3LL, ._field_cutoff=jule::Str("1953125", 7)},_245478ad5_LeftCheat{._field_delta=4LL, ._field_cutoff=jule::Str("9765625", 7)},_245478ad5_LeftCheat{._field_delta=4LL, ._field_cutoff=jule::Str("48828125", 8)},_245478ad5_LeftCheat{._field_delta=4LL, ._field_cutoff=jule::Str("244140625", 9)},_245478ad5_LeftCheat{._field_delta=4LL, ._field_cutoff=jule::Str("1220703125", 10)},_245478ad5_LeftCheat{._field_delta=5LL, ._field_cutoff=jule::Str("6103515625", 10)},_245478ad5_LeftCheat{._field_delta=5LL, ._field_cutoff=jule::Str("30517578125", 11)},_245478ad5_LeftCheat{._field_delta=5LL, ._field_cutoff=jule::Str("152587890625", 12)},_245478ad5_LeftCheat{._field_delta=6LL, ._field_cutoff=jule::Str("762939453125", 12)},_245478ad5_LeftCheat{._field_delta=6LL, ._field_cutoff=jule::Str("3814697265625", 13)},_245478ad5_LeftCheat{._field_delta=6LL, ._field_cutoff=jule::Str("19073486328125", 14)},_245478ad5_LeftCheat{._field_delta=7LL, ._field_cutoff=jule::Str("95367431640625", 14)},_245478ad5_LeftCheat{._field_delta=7LL, ._field_cutoff=jule::Str("476837158203125", 15)},_245478ad5_LeftCheat{._field_delta=7LL, ._field_cutoff=jule::Str("2384185791015625", 16)},_245478ad5_LeftCheat{._field_delta=7LL, ._field_cutoff=jule::Str("11920928955078125", 17)},_245478ad5_LeftCheat{._field_delta=8LL, ._field_cutoff=jule::Str("59604644775390625", 17)},_245478ad5_LeftCheat{._field_delta=8LL, ._field_cutoff=jule::Str("298023223876953125", 18)},_245478ad5_LeftCheat{._field_delta=8LL, ._field_cutoff=jule::Str("1490116119384765625", 19)},_245478ad5_LeftCheat{._field_delta=9LL, ._field_cutoff=jule::Str("7450580596923828125", 19)},_245478ad5_LeftCheat{._field_delta=9LL, ._field_cutoff=jule::Str("37252902984619140625", 20)},_245478ad5_LeftCheat{._field_delta=9LL, ._field_cutoff=jule::Str("186264514923095703125", 21)},_245478ad5_LeftCheat{._field_delta=10LL, ._field_cutoff=jule::Str("931322574615478515625", 21)},_245478ad5_LeftCheat{._field_delta=10LL, ._field_cutoff=jule::Str("4656612873077392578125", 22)},_245478ad5_LeftCheat{._field_delta=10LL, ._field_cutoff=jule::Str("23283064365386962890625", 23)},_245478ad5_LeftCheat{._field_delta=10LL, ._field_cutoff=jule::Str("116415321826934814453125", 24)},_245478ad5_LeftCheat{._field_delta=11LL, ._field_cutoff=jule::Str("582076609134674072265625", 24)},_245478ad5_LeftCheat{._field_delta=11LL, ._field_cutoff=jule::Str("2910383045673370361328125", 25)},_245478ad5_LeftCheat{._field_delta=11LL, ._field_cutoff=jule::Str("14551915228366851806640625", 26)},_245478ad5_LeftCheat{._field_delta=12LL, ._field_cutoff=jule::Str("72759576141834259033203125", 26)},_245478ad5_LeftCheat{._field_delta=12LL, ._field_cutoff=jule::Str("363797880709171295166015625", 27)},_245478ad5_LeftCheat{._field_delta=12LL, ._field_cutoff=jule::Str("1818989403545856475830078125", 28)},_245478ad5_LeftCheat{._field_delta=13LL, ._field_cutoff=jule::Str("9094947017729282379150390625", 28)},_245478ad5_LeftCheat{._field_delta=13LL, ._field_cutoff=jule::Str("45474735088646411895751953125", 29)},_245478ad5_LeftCheat{._field_delta=13LL, ._field_cutoff=jule::Str("227373675443232059478759765625", 30)},_245478ad5_LeftCheat{._field_delta=13LL, ._field_cutoff=jule::Str("1136868377216160297393798828125", 31)},_245478ad5_LeftCheat{._field_delta=14LL, ._field_cutoff=jule::Str("5684341886080801486968994140625", 31)},_245478ad5_LeftCheat{._field_delta=14LL, ._field_cutoff=jule::Str("28421709430404007434844970703125", 32)},_245478ad5_LeftCheat{._field_delta=14LL, ._field_cutoff=jule::Str("142108547152020037174224853515625", 33)},_245478ad5_LeftCheat{._field_delta=15LL, ._field_cutoff=jule::Str("710542735760100185871124267578125", 33)},_245478ad5_LeftCheat{._field_delta=15LL, ._field_cutoff=jule::Str("3552713678800500929355621337890625", 34)},_245478ad5_LeftCheat{._field_delta=15LL, ._field_cutoff=jule::Str("17763568394002504646778106689453125", 35)},_245478ad5_LeftCheat{._field_delta=16LL, ._field_cutoff=jule::Str("88817841970012523233890533447265625", 35)},_245478ad5_LeftCheat{._field_delta=16LL, ._field_cutoff=jule::Str("444089209850062616169452667236328125", 36)},_245478ad5_LeftCheat{._field_delta=16LL, ._field_cutoff=jule::Str("2220446049250313080847263336181640625", 37)},_245478ad5_LeftCheat{._field_delta=16LL, ._field_cutoff=jule::Str("11102230246251565404236316680908203125", 38)},_245478ad5_LeftCheat{._field_delta=17LL, ._field_cutoff=jule::Str("55511151231257827021181583404541015625", 38)},_245478ad5_LeftCheat{._field_delta=17LL, ._field_cutoff=jule::Str("277555756156289135105907917022705078125", 39)},_245478ad5_LeftCheat{._field_delta=17LL, ._field_cutoff=jule::Str("1387778780781445675529539585113525390625", 40)},_245478ad5_LeftCheat{._field_delta=18LL, ._field_cutoff=jule::Str("6938893903907228377647697925567626953125", 40)},_245478ad5_LeftCheat{._field_delta=18LL, ._field_cutoff=jule::Str("34694469519536141888238489627838134765625", 41)},_245478ad5_LeftCheat{._field_delta=18LL, ._field_cutoff=jule::Str("173472347597680709441192448139190673828125", 42)},_245478ad5_LeftCheat{._field_delta=19LL, ._field_cutoff=jule::Str("867361737988403547205962240695953369140625", 42)}});
jule::I32 _245513642_BIT_SIZE = 0LL;
jule::Str _24551aec9_SYS_INT = jule::Str();
jule::Str _24551b282_SYS_UINT = jule::Str();
jule::Slice<jule::Str> _24549bee3_BUILTIN_CONSTRAINTS = jule::Slice<jule::Str>::make({jule::Str("signed", 6),jule::Str("unsigned", 8),jule::Str("float", 5),jule::Str("numeric", 7),jule::Str("mutable", 7),jule::Str("immutable", 9),jule::Str("ordered", 7),jule::Str("comparable", 10)});
jule::Bool _2456b66b3_COPY = false;
jule::Bool _2456b6a15_DEADCODE = false;
jule::Bool _2456b6d23_APPEND = false;
jule::Bool _2456b7175_MATH = false;
jule::Bool _2456b7483_ACCESS = false;
jule::Bool _2456b7791_INLINE = false;
jule::Bool _2456b7a9e_PTR = false;
jule::Bool _2456b7ebc_COND = false;
jule::Bool _227a6d769_expr_enabled = false;
jule::Bool _227a6e8be_scope_enabled = false;
jule::Array<jule::U64,12> _228255307_MDAYS = jule::Array<jule::U64,12>({31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,29LLU});
jule::Array<_241d85c76_accept_range,16> _241d860d9_ACCEPT_RANGES = jule::Array<_241d85c76_accept_range,16>({_241d85c76_accept_range{._field_lo=128LLU, ._field_hi=191LLU},_241d85c76_accept_range{._field_lo=160LLU, ._field_hi=191LLU},_241d85c76_accept_range{._field_lo=128LLU, ._field_hi=159LLU},_241d85c76_accept_range{._field_lo=144LLU, ._field_hi=191LLU},_241d85c76_accept_range{._field_lo=128LLU, ._field_hi=143LLU}});
jule::Array<jule::Array<jule::Str,2>,5> _242d8ae01_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,5>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)}),jule::Array<jule::Str,2>({jule::Str("mod", 3),jule::Str("Module management", 17)})});
jule::Ptr<_242d5e49b_RangeTable> _242ce81b0_LETTER = _242ce0493__L;
jule::Uintptr _241c8ae23_STDIN = _241ca18a6_get_std_handle(static_cast<jule::Uintptr>(4294967286LLU));
jule::Str _242e10dcc_OS = jule::Str("windows", 7);
jule::Str _242ddc903_ARCH = jule::Str("i386", 4);
jule::Uintptr _241c8e960_STDOUT = _241ca18a6_get_std_handle(static_cast<jule::Uintptr>(4294967285LLU));
jule::Uintptr _241c89383_STDERR = _241ca18a6_get_std_handle(static_cast<jule::Uintptr>(4294967284LLU));
jule::Array<jule::U8,256> _241d85704_FIRST = jule::Array<jule::U8,256>({});
jule::Array<jule::U8,256> _242d57791__PROPERTIES = jule::Array<jule::U8,256>({1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,144LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,130LLU,130LLU,136LLU,136LLU,136LLU,130LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,130LLU,130LLU,130LLU,136LLU,130LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,130LLU,136LLU,130LLU,136LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,16LLU,130LLU,136LLU,136LLU,136LLU,136LLU,136LLU,130LLU,136LLU,136LLU,224LLU,130LLU,136LLU,0LLU,136LLU,136LLU,136LLU,136LLU,132LLU,132LLU,136LLU,192LLU,130LLU,130LLU,136LLU,132LLU,224LLU,130LLU,132LLU,132LLU,132LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,136LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU});





std::ostream &operator<<(std::ostream &_Stream, _241d85c76_accept_range _Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _242d5daa5_Range16 _Src) {
	_Stream << "Range16{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _242d5e028_Range32 _Src) {
	_Stream << "Range32{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _242d5e49b_RangeTable _Src) {
	_Stream << "RangeTable{";
	_Stream << "r16:" << _Src._field_r16 << ", ";
	_Stream << "r32:" << _Src._field_r32 << ", ";
	_Stream << "latin_offset:" << _Src._field_latin_offset;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _241e6ebd9_index(_241e6e722_LazyBuff* _self_, jule::I32 _5424_i) {
	if (((*_self_)._field_buff != nullptr)) {
		return (*_self_)._field_buff[_5424_i];
	};
	return (*_self_)._field_path[_5424_i];
}



inline void _241e75eed_append(_241e6e722_LazyBuff* _self_, jule::U8 _6125_c) {
	if (((*_self_)._field_buff == nullptr)) {
		if ((((*_self_)._field_w < (*_self_)._field_path.len()) && ((*_self_)._field_path[(*_self_)._field_w] == _6125_c))) {
			((*_self_)._field_w)++;
			return;;
		};
		(*_self_)._field_buff=jule::Slice<jule::U8>::alloc((*_self_)._field_path.len());
		jule::copy(((*_self_)._field_buff), (static_cast<jule::Slice<jule::U8>>((*_self_)._field_path.slice(0LL,(*_self_)._field_w))));
	};
	(*_self_)._field_buff[(*_self_)._field_w]=_6125_c;
	((*_self_)._field_w)++;
}



inline jule::Str _241e78aa0_string(_241e6e722_LazyBuff* _self_) {
	if (((*_self_)._field_buff == nullptr)) {
		return (*_self_)._field_vol_and_path.slice(0LL,((*_self_)._field_vol_len + (*_self_)._field_w));
	};
	return ((*_self_)._field_vol_and_path.slice(0LL,(*_self_)._field_vol_len) + static_cast<jule::Str>((*_self_)._field_buff.slice(0LL,(*_self_)._field_w)));
}







std::ostream &operator<<(std::ostream &_Stream, _241e6e722_LazyBuff _Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2410caa8d_DirEntry _Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>> static__241d9a83a_read(jule::Str _1524_path) {
	jule::Slice<jule::Ptr<_2410caa8d_DirEntry>> _1538_dirents = jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>();
	jule::Slice<jule::U16> _1613_utf16_path = _241c89d9a_utf16_from_str(_1524_path);;
	_WDIR* _1717_dir = _241ca3556__wopendir((&(_1613_utf16_path[0LL])));;
	if ((_1717_dir == nullptr)) {
		return jule::Exceptional<jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>>(_2410aeb71_get_last_fs_error());
	};
	for (;;) {
		{
			struct _wdirent* _2217_dirent = _241ca37ed__wreaddir(_1717_dir);;
			if ((_2217_dirent == nullptr)) {
				goto _iter_end_228a5ae70;
			};
			jule::Str _2617_name = _241c8ab15_u16_ptr_to_str(((jule::U16*)(_2217_dirent->d_name)));;
			jule::Ptr<_241cb4ee6_Status> _2721_stat = ({
				auto except = static__241ddc2b6_of(_241e8b167_join(jule::Slice<jule::Str>::make({_1524_path,_2617_name})));
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>>(except.error);
				} jule::Ptr<_241cb4ee6_Status>();});
			});;
			_1538_dirents = jule::alloc_for_append(_1538_dirents,1);_1538_dirents.__push(jule::new_ptr<_2410caa8d_DirEntry>(_2410caa8d_DirEntry{._field_name=_2617_name, ._field_stat=_2721_stat}));;
		}
	_iter_next_228a5ae70:;
	}
	_iter_end_228a5ae70:;;
	_241ca3a95__wclosedir(_1717_dir);
	return jule::Exceptional<jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>>(jule::Any(), _1538_dirents);
}



inline jule::VoidExceptional static__241d9d332_create(jule::Str _4026_path) {
	jule::Slice<jule::U16> _4513_utf16_path = _241c89d9a_utf16_from_str(_4026_path);;
	if ((!(_241ca3017_create_directory((&(_4513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2410aeb71_get_last_fs_error());
	};
 return jule::VoidExceptional();
}



inline jule::VoidExceptional static__241e035c9_remove(jule::Str _5426_path) {
	jule::Slice<jule::U16> _5513_utf16_path = _241c89d9a_utf16_from_str(_5426_path);;
	if ((!(_241ca32ae_remove_directory((&(_5513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2410aeb71_get_last_fs_error());
	};
 return jule::VoidExceptional();
}







std::ostream &operator<<(std::ostream &_Stream, _2410cc7c6_Directory _Src) {
	_Stream << "Directory{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_241cb4b2d_File> static__2410b226c_new(jule::Uintptr _4523_handle) {
	return jule::new_ptr<_241cb4b2d_File>(_241cb4b2d_File{._field_handle=_4523_handle});
}



inline jule::Exceptional<jule::Ptr<_241cb4b2d_File>> static__2410b2a20_create(jule::Str _5526_path) {
	return jule::Exceptional<jule::Ptr<_241cb4b2d_File>>(jule::Any(),({
		auto except = static__241d1d0c6_open(_5526_path,((static_cast<jule::I32>(770LL) | 770LL) | 770LL),438LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Ptr<_241cb4b2d_File>>(except.error);
		} jule::Ptr<_241cb4b2d_File>();});
	}));
}



inline jule::Exceptional<jule::Slice<jule::U8>> static__2410b359d_read(jule::Str _6724_path) {
	jule::Ptr<_241cb4ee6_Status> _6813_s = ({
		auto except = static__241ddc2b6_of(_6724_path);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_241cb4ee6_Status>();});
	});;
	if ((!(_2410b9483_is_reg(_6813_s.ptr())))) {
		return jule::Exceptional<jule::Slice<jule::U8>>(static_cast<jule::I32>(14LL));
	};
	if ((_6813_s.get()._field_size == 0LLU)) {
		return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),jule::Slice<jule::U8>::alloc(0LL));
	};
	jule::Ptr<_241cb4b2d_File> _7817_f = ({
		auto except = static__241d1d0c6_open(_6724_path,static_cast<jule::I32>(0LL),0LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_241cb4b2d_File>();});
	});;
	__JULE_DEFER({
		({
			auto except = _2410b613e_close(_7817_f.ptr());
			if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/fs/file.jule:79:17"));
		});
	});;
	jule::Slice<jule::U8> _8117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::I32>(_6813_s.get()._field_size));;
	jule::I32 _8213_n = ({
		auto except = _241d51cec_read(_7817_f.ptr(), _8117_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::I32();});
	});;
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_8117_buff.slice(0LL,_8213_n));
}



inline jule::VoidExceptional static__2410b4082_write(jule::Str _9125_path, jule::Slice<jule::U8> _9136_data, jule::I32 _9150_perm) {
	jule::Ptr<_241cb4b2d_File> _9217_f = ({
		auto except = static__241d1d0c6_open(_9125_path,((static_cast<jule::I32>(769LL) | 769LL) | 769LL),_9150_perm);
		(except.ok()) ? (except.result) : ({{
			return jule::VoidExceptional(except.error);
		} jule::Ptr<_241cb4b2d_File>();});
	});;
	({
		auto except = _241d48ad5_write(_9217_f.ptr(), _9136_data);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
	({
		auto except = _2410b613e_close(_9217_f.ptr());
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
 return jule::VoidExceptional();
}



inline jule::Exceptional<jule::I32> _2410b55e4_seek(_241cb4b2d_File* _self_, jule::I32 _10527_offset, jule::I32 _10540_origin) {
	jule::I32 _10613_pos = _241ca77e1_seek(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle)),_10527_offset,static_cast<jule::I32>(_10540_origin));;
	if ((_10613_pos == -1LL)) {
		return jule::Exceptional<jule::I32>(_2410aeb71_get_last_fs_error());
	};
	return jule::Exceptional<jule::I32>(jule::Any(),_10613_pos);
}



inline jule::VoidExceptional _2410b613e_close(_241cb4b2d_File* _self_) {
	if ((_241ca8050_close(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle))) == -1LL)) {
		return jule::VoidExceptional(_2410aeb71_get_last_fs_error());
	};
 return jule::VoidExceptional();
}



inline jule::Exceptional<jule::Ptr<_241cb4b2d_File>> static__241d1d0c6_open(jule::Str _2124_path, jule::I32 _2135_flag, jule::I32 _2148_mode) {
	jule::Slice<jule::U16> _2213_utf16_path = _241c89d9a_utf16_from_str(_2124_path);;
	jule::I32 _2313_handle = _241ca21e2__wopen((&(_2213_utf16_path[0LL])),static_cast<jule::I32>(_2135_flag),_2148_mode);;
	if ((_2313_handle == -1LL)) {
		return jule::Exceptional<jule::Ptr<_241cb4b2d_File>>(_2410aeb71_get_last_fs_error());
	};
	return jule::Exceptional<jule::Ptr<_241cb4b2d_File>>(jule::Any(),static__2410b226c_new(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_2313_handle))));
}



inline jule::VoidExceptional static__241d1e36e_remove(jule::Str _3426_path) {
	jule::Slice<jule::U16> _3513_utf16_path = _241c89d9a_utf16_from_str(_3426_path);;
	if ((!(_241ca2c70_delete_file((&(_3513_utf16_path[0LL])))))) {
		return jule::VoidExceptional(_2410aeb71_get_last_fs_error());
	};
 return jule::VoidExceptional();
}



inline jule::Exceptional<jule::I32> _241d48ad5_write(_241cb4b2d_File* _self_, jule::Slice<jule::U8> _4928_buff) {
	jule::I32 _4945_n = jule::I32();
	if ((_4928_buff.len() == 0LL)) {
		_4945_n = 0LL;
		return jule::Exceptional<jule::I32>(jule::Any(),_4945_n);
	};
	if (_241d595a7_is_console_handle((*_self_)._field_handle)) {
		jule::Slice<jule::U16> _5517_utf16_buff = _241c89d9a_utf16_from_str(static_cast<jule::Str>(_4928_buff));;
		jule::Bool _5617_ok = _241ca4e2b_write_console((*_self_)._field_handle,(&(_5517_utf16_buff[0LL])),static_cast<jule::I32>(_5517_utf16_buff.len()),_4945_n,nullptr);;
		if ((!(_5617_ok))) {
			return jule::Exceptional<jule::I32>(_2410aeb71_get_last_fs_error());
		};
		return jule::Exceptional<jule::I32>(jule::Any(),_4945_n);
	};
	_4945_n=static_cast<jule::I32>(_241ca843a_write(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle)),(&(_4928_buff[0LL])),static_cast<jule::U32>(static_cast<jule::U32>(_4928_buff.len()))));
	if ((_4945_n == -1LL)) {
		return jule::Exceptional<jule::I32>(_2410aeb71_get_last_fs_error());
	};
	return jule::Exceptional<jule::I32>(jule::Any(),_4945_n);
}



inline jule::Exceptional<jule::I32> _241d51cec_read(_241cb4b2d_File* _self_, jule::Slice<jule::U8> _8231_buff) {
	jule::I32 _8248_n = jule::I32();
	if ((_8231_buff.len() == 0LL)) {
		_8248_n = 0LL;
		return jule::Exceptional<jule::I32>(jule::Any(),_8248_n);
	};
	if (_241d595a7_is_console_handle((*_self_)._field_handle)) {
		jule::Slice<jule::U16> _8821_codepage = jule::Slice<jule::U16>::alloc(_8231_buff.len());;
		jule::Bool _8917_ok = _241ca5459_read_console((*_self_)._field_handle,(&(_8821_codepage[0LL])),static_cast<jule::I32>(_8231_buff.len()),_8248_n,nullptr);;
		if ((!(_8917_ok))) {
			return jule::Exceptional<jule::I32>(_2410aeb71_get_last_fs_error());
		};
		jule::Slice<jule::I32> _9417_runes = _241c9ee7b_decode(_8821_codepage.slice(0LL,_8248_n));;
		_8248_n=0LL;
		{
			auto &expr = _9417_runes;
			auto it = expr.begin();
			_iter_begin_228a75187:;
			if (it != expr.end()) {
				jule::I32 &_9620_r = *it;
				{
					jule::I32 _9721_size = _241d8745e_rune_len(_9620_r);;
					if (((_8248_n + _9721_size) > _8231_buff.len())) {
						goto _iter_end_228a75187;
					};
					_241d8787c_encode_rune(_8231_buff.slice(_8248_n),_9620_r);
					_8248_n+=_9721_size;
				}
				_iter_next_228a75187:;
				++it;
				goto _iter_begin_228a75187;
			}
			_iter_end_228a75187:;
		};
		return jule::Exceptional<jule::I32>(jule::Any(),_8248_n);
	};
	_8248_n=static_cast<jule::I32>(_241ca7bcb_read(static_cast<jule::I32>(static_cast<jule::I32>((*_self_)._field_handle)),(&(_8231_buff[0LL])),static_cast<jule::U32>(static_cast<jule::U32>(_8231_buff.len()))));
	if ((_8248_n == -1LL)) {
		return jule::Exceptional<jule::I32>(_2410aeb71_get_last_fs_error());
	};
	return jule::Exceptional<jule::I32>(jule::Any(),_8248_n);
}







std::ostream &operator<<(std::ostream &_Stream, _241cb4b2d_File _Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2410b81b8_is_dir(_241cb4ee6_Status* _self_) {
	return (((*_self_)._field_mode & 16384LLU) == 16384LLU);
}



inline jule::Bool _2410b9483_is_reg(_241cb4ee6_Status* _self_) {
	return (((*_self_)._field_mode & 32768LLU) == 32768LLU);
}



inline jule::Exceptional<jule::Ptr<_241cb4ee6_Status>> static__241ddc2b6_of(jule::Str _1222_path) {
	if (_1222_path.empty()) {
		return jule::Exceptional<jule::Ptr<_241cb4ee6_Status>>(static_cast<jule::I32>(4LL));
	};
	jule::Slice<jule::U16> _1613_utf16_path = _241c89d9a_utf16_from_str(_1222_path);;
	struct stat _1717_handle = (struct stat){};;
	jule::I32 _1813_code = _241ca1d07_wstat((&(_1613_utf16_path[0LL])),(&(_1717_handle)));;
	if ((_1813_code != -1LL)) {
		return jule::Exceptional<jule::Ptr<_241cb4ee6_Status>>(jule::Any(),jule::new_ptr<_241cb4ee6_Status>(_241cb4ee6_Status{._field_mode=static_cast<jule::U32>(static_cast<jule::U32>(_1717_handle.st_mode)), ._field_size=static_cast<jule::U32>(static_cast<jule::U32>(_1717_handle.st_size))}));
	};
	return jule::Exceptional<jule::Ptr<_241cb4ee6_Status>>(_2410aeb71_get_last_fs_error());
}







std::ostream &operator<<(std::ostream &_Stream, _241cb4ee6_Status _Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_242e092c1_Cmd> static__242e09700_new(jule::Str _2023_path) {
	return jule::new_ptr<_242e092c1_Cmd>(_242e092c1_Cmd{._field_path=_2023_path, });
}



inline jule::Exceptional<jule::I32> _242e09964_spawn(_242e092c1_Cmd* _self_) {
	return jule::Exceptional<jule::I32>(jule::Any(),static_cast<jule::I32>(({
		auto except = _242e209ad___spawn(&(*_self_));
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::I32>(except.error);
		} jule::I32();});
	})));
}



inline jule::Exceptional<jule::I32> _242e209ad___spawn(_242e092c1_Cmd* _self_) {
	jule::I32 _5217_pid = 0LL;;
	if (((*_self_)._field_env == nullptr)) {
		_5217_pid=static_cast<jule::I32>(_242e201c7_execvp((*_self_)._field_path,(*_self_)._field_args));
	} else {
		_5217_pid=static_cast<jule::I32>(_242e205b2_execve((*_self_)._field_path,(*_self_)._field_args,(*_self_)._field_env));
	};
	if ((_5217_pid == -1LL)) {
		return jule::Exceptional<jule::I32>(_242e08a40_get_last_process_error());
	};
	jule::I32 _6113_status = 0LL;;
	if ((_cwait(((signed*)((&(_6113_status)))),_5217_pid,0LL) == -1LL)) {
		return jule::Exceptional<jule::I32>(_242e08a40_get_last_process_error());
	};
	return jule::Exceptional<jule::I32>(jule::Any(),_6113_status);
}







std::ostream &operator<<(std::ostream &_Stream, _242e092c1_Cmd _Src) {
	_Stream << "Cmd{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "env:" << _Src._field_env;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _242dbab89_Log _Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _2431e48ca_prec(_2431e4523_Token* _self_) {
	if (((*_self_)._field_id != static_cast<jule::U32>(7LLU))) {
		return 0LLU;
	};
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("%", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str(">>", 2) || _match_expr == jule::Str("<<", 2) || _match_expr == jule::Str("&", 1)) {
			_case_begin_228b3ecac:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_228b3ed23:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("=", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_228b3e6b3:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_228b3e729:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_228b3e790:;
			{
				return 1LLU;
			}
		}
		else {
			_case_begin_228b3e471:;
			{
				return 0LLU;
			}
		}
		_match_end_228b3e41b:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _2431e4523_Token _Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2431e9cba_is_ok(_2431e98ad_File* _self_) {
	({
		auto except = static__241ddc2b6_of((*_self_)._field_path);
		(except.ok()) ? (except.result) : ({{
			return false;
		} jule::Ptr<_241cb4ee6_Status>();});
	});
	return true;
}



inline void _2431ea040_fill(_2431e98ad_File* _self_, jule::Slice<jule::U8> _2331_data) {
	(*_self_)._field_data=_2331_data;
}



inline jule::Str _2431ea2a4_dir(_2431e98ad_File* _self_) {
	return _241ea74c4_dir((*_self_)._field_path);
}



inline jule::Str _2431ea518_name(_2431e98ad_File* _self_) {
	return _241e9e2ac_base((*_self_)._field_path);
}



inline jule::Uintptr _2431ea77c_addr(_2431e98ad_File* _self_) {
	return static_cast<jule::Uintptr>(((jule::Uintptr)((&((*_self_))))));
}



inline jule::Str _2431eaa8a_get_row(_2431e98ad_File* _self_, jule::I32 _4426_row) {
	jule::I32 _4517_n = 0LL;;
	jule::I32 _4617_line_start = 0LL;;
	jule::I32 _4717_i = 0LL;;
	for (; (_4717_i < (*_self_)._field_data.len()); (_4717_i)++) {
		{
			if (((*_self_)._field_data[_4717_i] != '\n')) {
				goto _iter_next_228b4493d;
			};
			(_4517_n)++;
			if ((_4517_n == _4426_row)) {
				return static_cast<jule::Str>((*_self_)._field_data.slice(_4617_line_start,_4717_i));
			};
			_4617_line_start=static_cast<jule::I32>((_4717_i + 1LL));
		}
	_iter_next_228b4493d:;
	}
	_iter_end_228b4493d:;;
	return jule::Str();
}







std::ostream &operator<<(std::ostream &_Stream, _2431e98ad_File _Src) {
	_Stream << "File{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "tokens:" << _Src._field_tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2431eb915_KindPair _Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _243202ad6_push_err(_243202542_Lex* _self_, jule::Str _45827_fmt, jule::Slice<jule::Any> _45840_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_2431ec718_make_err((*_self_)._field_row,(*_self_)._field_column,(*_self_)._field_file,_45827_fmt,jule::Any(_45840_args)));;
}



inline void _243202e05_push_err_tok(_243202542_Lex* _self_, jule::Ptr<_2431e4523_Token>& _46332_token, jule::Str _46347_fmt) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_2431ec718_make_err(_46332_token.get()._field_row,_46332_token.get()._field_column,(*_self_)._field_file,_46347_fmt,jule::Slice<jule::Any>()));;
}



inline void _2432030d1_lex(_243202542_Lex* _self_) {
	(*_self_)._field_errors=nullptr;
	_2432050d3_new_line(&(*_self_));
	while (((*_self_)._field_pos < (*_self_)._field_file.get()._field_data.len())) {
		{
			jule::Ptr<_2431e4523_Token> _47321_token = _243206458_token(&(*_self_));;
			if ((_47321_token.get()._field_id != static_cast<jule::U32>(0LLU))) {
				(*_self_)._field_tokens = jule::alloc_for_append((*_self_)._field_tokens,1);(*_self_)._field_tokens.__push(_47321_token);;
			};
		}
	_iter_next_228b7b689:;
	}
	_iter_end_228b7b689:;;
}



inline jule::Str _2432033de_id(_243202542_Lex* _self_, jule::Slice<jule::U8>& _48222_ln) {
	if ((_48222_ln.len() == 0LL)) {
		return jule::Str();
	};
	jule::I32 _48614_r;;
	jule::I32 _48621_i;;
	std::tie(_48614_r,_48621_i) = _241d86859_decode_rune(_48222_ln);
	if (((_48614_r != '_') && (!(_2431e79ee_is_letter(_48614_r))))) {
		return jule::Str();
	};
	while ((_48621_i < _48222_ln.len())) {
		{
			jule::I32 _49218_pr;;
			jule::I32 _49222_n;;
			std::tie(_49218_pr,_49222_n) = _241d86859_decode_rune(_48222_ln.slice(_48621_i));
			if ((((_49218_pr != '_') && (!(_2431e803d_is_decimal(static_cast<jule::U8>(static_cast<jule::U8>(_49218_pr)))))) && (!(_2431e79ee_is_letter(_49218_pr))))) {
				(*_self_)._field_pos+=_48621_i;
				return static_cast<jule::Str>(_48222_ln.slice(0LL,_48621_i));
			};
			_48621_i+=_49222_n;
		}
	_iter_next_228b7e8ac:;
	}
	_iter_end_228b7e8ac:;;
	(*_self_)._field_pos+=_48222_ln.len();
	return static_cast<jule::Str>(_48222_ln);
}



inline jule::Slice<jule::U8> _243203653_resume(_243202542_Lex* _self_) {
	jule::I32 _50717_i = (*_self_)._field_pos;;
	for (; (_50717_i < (*_self_)._field_file.get()._field_data.len()); (_50717_i)++) {
		{
			jule::I32 _50917_r = static_cast<jule::I32>((*_self_)._field_file.get()._field_data[_50717_i]);;
			if (_2431e759d_is_space(_50917_r)) {
				;
				((*_self_)._field_pos)++;
				{
					auto &_match_expr{ _50917_r };
					
					if (_match_expr == '\n') {
						_case_begin_228b84571:;
						{
							_2432050d3_new_line(&(*_self_));
						}
					}
					else if (_match_expr == '\t') {
						_case_begin_228b845d7:;
						{
							(*_self_)._field_column+=8LL;
						}
					}
					else {
						_case_begin_228b82492:;
						{
							((*_self_)._field_column)++;
						}
					}
					_match_end_228b840cb:;
				};
				goto _iter_next_228b8274a;
			};
			jule::I32 _52421_j = _50717_i;;
			for (; (_52421_j < (*_self_)._field_file.get()._field_data.len()); (_52421_j)++) {
				{
					if (((*_self_)._field_file.get()._field_data[_52421_j] == '\n')) {
						goto _iter_end_228b83493;
					};
				}
			_iter_next_228b83493:;
			}
			_iter_end_228b83493:;;
			return (*_self_)._field_file.get()._field_data.slice(_50717_i,_52421_j);
		}
	_iter_next_228b8274a:;
	}
	_iter_end_228b8274a:;;
	return nullptr;
}



inline void _2432038c8_lex_line_comment(_243202542_Lex* _self_, jule::Ptr<_2431e4523_Token>& _53640_token) {
	jule::I32 _53713_start = (*_self_)._field_pos;;
	(*_self_)._field_pos+=2LL;
	for (; ((*_self_)._field_pos < (*_self_)._field_file.get()._field_data.len()); ((*_self_)._field_pos)++) {
		{
			jule::U8 _54017_r = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];;
			if (((_54017_r == '\n') || (_54017_r == '\r'))) {
				goto _iter_end_228b86ebe;
			};
		}
	_iter_next_228b86ebe:;
	}
	_iter_end_228b86ebe:;;
	if ((((*_self_)._field_mode & static_cast<jule::I32>(1LL)) == static_cast<jule::I32>(1LL))) {
		_53640_token.get()._field_id=static_cast<jule::U32>(18LLU);
		_53640_token.get()._field_kind=static_cast<jule::Str>((*_self_)._field_file.get()._field_data.slice(_53713_start,(*_self_)._field_pos));
	};
}



inline void _243203b4d_lex_range_comment(_243202542_Lex* _self_, jule::Ptr<_2431e4523_Token>& _55141_token) {
	jule::I32 _55213_start = (*_self_)._field_pos;;
	(*_self_)._field_pos+=2LL;
	for (; ((*_self_)._field_pos < (*_self_)._field_file.get()._field_data.len()); ((*_self_)._field_pos)++) {
		{
			jule::U8 _55517_r = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];;
			if ((_55517_r == '\r')) {
				goto _iter_next_228b8a379;
			};
			if ((_55517_r == '\n')) {
				_2432050d3_new_line(&(*_self_));
				goto _iter_next_228b8a379;
			};
			(*_self_)._field_column+=1LL;
			if ((((((*_self_)._field_pos + 1LL) < (*_self_)._field_file.get()._field_data.len()) && (_55517_r == '*')) && ((*_self_)._field_file.get()._field_data[((*_self_)._field_pos + 1LL)] == '/'))) {
				(*_self_)._field_column+=2LL;
				(*_self_)._field_pos+=2LL;
				if ((((*_self_)._field_mode & static_cast<jule::I32>(1LL)) == static_cast<jule::I32>(1LL))) {
					_55141_token.get()._field_id=static_cast<jule::U32>(18LLU);
					_55141_token.get()._field_kind=static_cast<jule::Str>((*_self_)._field_file.get()._field_data.slice(_55213_start,(*_self_)._field_pos));
				};
				return;;
			};
		}
	_iter_next_228b8a379:;
	}
	_iter_end_228b8a379:;;
	_243202ad6_push_err(&(*_self_), jule::Str("missing block comment close", 27),jule::Slice<jule::Any>());
}



inline jule::Str _243203e5b_num(_243202542_Lex* _self_, jule::Slice<jule::U8>& _57923_txt) {
	jule::Str _57938_lit = jule::Str();
	if ((_57923_txt[0LL] == '_')) {
		_57938_lit = jule::Str();
		return _57938_lit;
	};
	_57938_lit=_243201035_hex_num(_57923_txt);
	if ((!(_57938_lit.empty()))) {
		goto _julec_label_end;
	};
	_57938_lit=_243200c8d_octal_num(_57923_txt);
	if ((!(_57938_lit.empty()))) {
		goto _julec_label_end;
	};
	_57938_lit=_2431ee6d7_binary_num(_57923_txt);
	if ((!(_57938_lit.empty()))) {
		goto _julec_label_end;
	};
	_57938_lit=_2431ee440_common_num(_57923_txt);
	_julec_label_end:;
	(*_self_)._field_pos+=_57938_lit.len();
	return _57938_lit;
}



inline jule::Str _243204269_escape_seq(_243202542_Lex* _self_, jule::Slice<jule::U8>& _60130_txt) {
	jule::Str _60217_seq = jule::Str();;
	if ((_60130_txt.len() < 2LL)) {
		goto _julec_label_end;
	};
	{
		auto &_match_expr{ _60130_txt[1LL] };
		
		if (_match_expr == '\\' || _match_expr == '\'' || _match_expr == '\"' || _match_expr == 'a' || _match_expr == 'b' || _match_expr == 'f' || _match_expr == 'n' || _match_expr == 'r' || _match_expr == 't' || _match_expr == 'v') {
			_case_begin_228b95450:;
			{
				(*_self_)._field_pos+=2LL;
				return static_cast<jule::Str>(_60130_txt.slice(0LL,2LL));
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_228b95153:;
			{
				_60217_seq=_243201640_big_unicode_point_escape(_60130_txt);
			}
		}
		else if (_match_expr == 'u') {
			_case_begin_228b951b9:;
			{
				_60217_seq=_24320180a_little_unicode_point_escape(_60130_txt);
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_228b95230:;
			{
				_60217_seq=_243201ab3_hex_byte_escape(_60130_txt);
			}
		}
		else {
			_case_begin_228b948d3:;
			{
				_60217_seq=_243201d5a_byte_escape(_60130_txt);
			}
		}
		_match_end_228b95010:;
	};
	_julec_label_end:;
	if (_60217_seq.empty()) {
		((*_self_)._field_pos)++;
		_243202ad6_push_err(&(*_self_), jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>());
		return jule::Str();
	};
	(*_self_)._field_pos+=_60217_seq.len();
	return _60217_seq;
}



inline jule::Str _243204621_get_rune(_243202542_Lex* _self_, jule::Slice<jule::U8>& _63128_txt, jule::Bool _63141_raw) {
	if (((!(_63141_raw)) && (_63128_txt[0LL] == '\\'))) {
		return _243204269_escape_seq(&(*_self_), _63128_txt);
	};
	jule::I32 _63614_r;;
	jule::I32 _63617_n;;
	std::tie(_63614_r,_63617_n) = _241d86859_decode_rune(_63128_txt);
	(*_self_)._field_pos+=_63617_n;
	return static_cast<jule::Str>(_63614_r);
}



inline jule::Str _24320492e_lex_rune(_243202542_Lex* _self_, jule::Slice<jule::U8>& _64128_txt) {
	jule::Str _64217_run = jule::Str("'", 1);;
	((*_self_)._field_column)++;
	jule::I32 _64417_n = 0LL;;
	jule::I32 _64517_i = 1LL;;
	for (; (_64517_i < _64128_txt.len()); (_64517_i)++) {
		{
			if ((_64128_txt[_64517_i] == '\r')) {
				goto _iter_next_228b9c37a;
			};
			if ((_64128_txt[_64517_i] == '\n')) {
				_243202ad6_push_err(&(*_self_), jule::Str("rune is not finished", 20),jule::Slice<jule::Any>());
				((*_self_)._field_pos)++;
				_2432050d3_new_line(&(*_self_));
				return jule::Str();
			};
			jule::Slice<jule::U8> _65717_part = _64128_txt.slice(_64517_i);;
			jule::Str _65817_r = _243204621_get_rune(&(*_self_), _65717_part,false);;
			_64217_run+=_65817_r;
			(*_self_)._field_column+=_241d8854d_rune_count_str(_65817_r);
			if ((_65817_r == jule::Str("'", 1))) {
				((*_self_)._field_pos)++;
				goto _iter_end_228b9c37a;
			};
			if ((_65817_r.len() > 1LL)) {
				_64517_i+=(_65817_r.len() - 1LL);
			};
			(_64417_n)++;
		}
	_iter_next_228b9c37a:;
	}
	_iter_end_228b9c37a:;;
	if ((_64417_n == 0LL)) {
		_243202ad6_push_err(&(*_self_), jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>());
	} else if ((_64417_n > 1LL)) {
		_243202ad6_push_err(&(*_self_), jule::Str("rune is should be single", 24),jule::Slice<jule::Any>());
	};
	return _64217_run;
}



inline jule::Str _243204b93_lex_str(_243202542_Lex* _self_) {
	jule::Str _68117_s = jule::Str();;
	jule::U8 _68213_mark = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];;
	((*_self_)._field_pos)++;
	jule::Bool _68413_raw = (_68213_mark == '`');;
	_68117_s+=static_cast<jule::Str>(_68213_mark);
	((*_self_)._field_column)++;
	while (((*_self_)._field_pos < (*_self_)._field_file.get()._field_data.len())) {
		{
			jule::U8 _68917_ch = (*_self_)._field_file.get()._field_data[(*_self_)._field_pos];;
			if ((_68917_ch == '\r')) {
				goto _iter_next_228ba33b4;
			};
			if ((_68917_ch == '\n')) {
				_2432050d3_new_line(&(*_self_));
				if ((!(_68413_raw))) {
					_243202ad6_push_err(&(*_self_), jule::Str("string is not finished", 22),jule::Slice<jule::Any>());
					((*_self_)._field_pos)++;
					return jule::Str();
				};
			};
			jule::Slice<jule::U8> _70121_part = (*_self_)._field_file.get()._field_data.slice((*_self_)._field_pos);;
			jule::Str _70217_r = _243204621_get_rune(&(*_self_), _70121_part,_68413_raw);;
			_68117_s+=_70217_r;
			(*_self_)._field_column+=_241d8854d_rune_count_str(_70217_r);
			if ((_68917_ch == _68213_mark)) {
				goto _iter_end_228ba33b4;
			};
		}
	_iter_next_228ba33b4:;
	}
	_iter_end_228ba33b4:;;
	return _68117_s;
}



inline jule::Bool _243204e07_is_first_token_of_line(_243202542_Lex* _self_) {
	return ((*_self_)._field_column == 1LL);
}



inline void _2432050d3_new_line(_243202542_Lex* _self_) {
	((*_self_)._field_row)++;
	(*_self_)._field_column=1LL;
}



inline jule::Bool _2432055cd_is_op(_243202542_Lex* _self_, jule::Slice<jule::U8>& _72225_txt, jule::Str _72238_kind, jule::U32 _72249_id, jule::Ptr<_2431e4523_Token>& _72267_t) {
	if ((!(_2431eca9d_bytes_has_prefix(_72225_txt,_72238_kind)))) {
		return false;
	};
	_72267_t.get()._field_kind=_72238_kind;
	_72267_t.get()._field_id=_72249_id;
	(*_self_)._field_pos+=_72238_kind.len();
	return true;
}



inline jule::Bool _243205985_lex_basic_ops(_243202542_Lex* _self_, jule::Slice<jule::U8> _73332_txt, jule::Ptr<_2431e4523_Token>& _73350_tok) {
	{
		auto &expr = _2431ec22e_BASIC_OPS;
		auto it = expr.begin();
		_iter_begin_228ba99a3:;
		if (it != expr.end()) {
			_2431eb915_KindPair &_73416_pair = *it;
			{
				if (_2432055cd_is_op(&(*_self_), _73332_txt,_73416_pair._field_kind,_73416_pair._field_id,_73350_tok)) {
					return true;
				};
			}
			_iter_next_228ba99a3:;
			++it;
			goto _iter_begin_228ba99a3;
		}
		_iter_end_228ba99a3:;
	};
	return false;
}



inline jule::Bool _243205d3c_lex_id(_243202542_Lex* _self_, jule::Slice<jule::U8>& _74326_txt, jule::Ptr<_2431e4523_Token>& _74344_t) {
	jule::Str _74413_lex = _2432033de_id(&(*_self_), _74326_txt);;
	if (_74413_lex.empty()) {
		return false;
	};
	_74344_t.get()._field_kind=_74413_lex;
	_74344_t.get()._field_id=static_cast<jule::U32>(2LLU);
	return true;
}



inline jule::Bool _2432061e4_lex_num(_243202542_Lex* _self_, jule::Slice<jule::U8>& _75427_txt, jule::Ptr<_2431e4523_Token>& _75445_t) {
	jule::Str _75513_lex = _243203e5b_num(&(*_self_), _75427_txt);;
	if (_75513_lex.empty()) {
		return false;
	};
	_75445_t.get()._field_kind=_75513_lex;
	_75445_t.get()._field_id=static_cast<jule::U32>(6LLU);
	return true;
}



inline jule::Ptr<_2431e4523_Token> _243206458_token(_243202542_Lex* _self_) {
	jule::Ptr<_2431e4523_Token> _76717_t = jule::new_ptr<_2431e4523_Token>(_2431e4523_Token{._field_file=(*_self_)._field_file, ._field_id=static_cast<jule::U32>(0LLU)});;
	jule::Slice<jule::U8> _77213_txt = _243203653_resume(&(*_self_));;
	if ((_77213_txt == nullptr)) {
		return _76717_t;
	};
	_76717_t.get()._field_column=(*_self_)._field_column;
	_76717_t.get()._field_row=(*_self_)._field_row;
	{
		
		if (_2432061e4_lex_num(&(*_self_), _77213_txt,_76717_t)) {
			_case_begin_228bb0d0b:;
			{
				goto _match_end_228bae865;
			}
		}
		else if ((_77213_txt[0LL] == '\'')) {
			_case_begin_228bb0d72:;
			{
				_76717_t.get()._field_kind=_24320492e_lex_rune(&(*_self_), _77213_txt);
				_76717_t.get()._field_id=static_cast<jule::U32>(6LLU);
				return _76717_t;
			}
		}
		else if (((_77213_txt[0LL] == '\"') || (_77213_txt[0LL] == '`'))) {
			_case_begin_228bb1977:;
			{
				_76717_t.get()._field_kind=_243204b93_lex_str(&(*_self_));
				_76717_t.get()._field_id=static_cast<jule::U32>(6LLU);
				return _76717_t;
			}
		}
		else if (_2431eca9d_bytes_has_prefix(_77213_txt,jule::Str("//", 2))) {
			_case_begin_228bb19dd:;
			{
				_2432038c8_lex_line_comment(&(*_self_), _76717_t);
				return _76717_t;
			}
		}
		else if (_2431eca9d_bytes_has_prefix(_77213_txt,jule::Str("/*", 2))) {
			_case_begin_228bb1a54:;
			{
				_243203b4d_lex_range_comment(&(*_self_), _76717_t);
				return _76717_t;
			}
		}
		else if (_2432055cd_is_op(&(*_self_), _77213_txt,jule::Str("(", 1),static_cast<jule::U32>(3LLU),_76717_t) || _2432055cd_is_op(&(*_self_), _77213_txt,jule::Str(")", 1),static_cast<jule::U32>(3LLU),_76717_t) || _2432055cd_is_op(&(*_self_), _77213_txt,jule::Str("{", 1),static_cast<jule::U32>(3LLU),_76717_t) || _2432055cd_is_op(&(*_self_), _77213_txt,jule::Str("}", 1),static_cast<jule::U32>(3LLU),_76717_t) || _2432055cd_is_op(&(*_self_), _77213_txt,jule::Str("[", 1),static_cast<jule::U32>(3LLU),_76717_t) || _2432055cd_is_op(&(*_self_), _77213_txt,jule::Str("]", 1),static_cast<jule::U32>(3LLU),_76717_t) || _243205985_lex_basic_ops(&(*_self_), _77213_txt,_76717_t)) {
			_case_begin_228bb027d:;
			{
				goto _match_end_228bae865;
			}
		}
		else if (_243205d3c_lex_id(&(*_self_), _77213_txt,_76717_t)) {
			_case_begin_228bb02e4:;
			{
				{
					auto &expr = _2431ebd99_KEYWORDS;
					auto it = expr.begin();
					_iter_begin_228bb7472:;
					if (it != expr.end()) {
						_2431eb915_KindPair &_81020_pair = *it;
						{
							if ((_81020_pair._field_kind == _76717_t.get()._field_kind)) {
								_76717_t.get()._field_id=_81020_pair._field_id;
								goto _iter_end_228bb7472;
							};
						}
						_iter_next_228bb7472:;
						++it;
						goto _iter_begin_228bb7472;
					}
					_iter_end_228bb7472:;
				};
			}
		}
		else {
			_case_begin_228bb0217:;
			{
				jule::I32 _81718_r;;
				jule::I32 _81721_sz;;
				std::tie(_81718_r,_81721_sz) = _241d86859_decode_rune(_77213_txt);
				_243202ad6_push_err(&(*_self_), jule::Str("undefined token: @", 18),jule::Slice<jule::Any>::make({jule::Any(_81718_r)}));
				((*_self_)._field_column)++;
				(*_self_)._field_pos+=_81721_sz;
				return _76717_t;
			}
		}
		_match_end_228bae865:;
	};
	(*_self_)._field_column+=_241d8854d_rune_count_str(_76717_t.get()._field_kind);
	return _76717_t;
}







std::ostream &operator<<(std::ostream &_Stream, _243202542_Lex _Src) {
	_Stream << "Lex{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244823942_Ast _Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "nodes:" << _Src._field_nodes;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448245e1_Node _Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448249dc_Directive _Src) {
	_Stream << "Directive{";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448581d5_TypeDecl _Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _244858b0e_is_prim(_24485879b_IdentTypeDecl* _self_) {
	return ((*_self_)._field_token.get()._field_id == static_cast<jule::U32>(1LLU));
}







std::ostream &operator<<(std::ostream &_Stream, _24485879b_IdentTypeDecl _Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244858dea_SubIdentTypeDecl _Src) {
	_Stream << "SubIdentTypeDecl{";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448592a2_NamespaceTypeDecl _Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485958d_SptrTypeDecl _Src) {
	_Stream << "SptrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244859989_SlcTypeDecl _Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244859c75_TupleTypeDecl _Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24485a3b3_is_unsafe(_24485a061_PtrTypeDecl* _self_) {
	return ((*_self_)._field_elem == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _24485a061_PtrTypeDecl _Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24485aabc_auto_sized(_24485a6e3_ArrTypeDecl* _self_) {
	return ((*_self_)._field_size == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _24485a6e3_ArrTypeDecl _Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485ae41_MapTypeDecl _Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485b2e8_RetTypeDecl _Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485c706_Expr _Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485c9e2_RangeExpr _Src) {
	_Stream << "RangeExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485d097_UseExpr _Src) {
	_Stream << "UseExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485d383_TupleExpr _Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24485da8c_is_nil(_24485d73a_LitExpr* _self_) {
	return ((*_self_)._field_value == jule::Str("nil", 3));
}







std::ostream &operator<<(std::ostream &_Stream, _24485d73a_LitExpr _Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485de44_UnsafeExpr _Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485e2eb_CoExpr _Src) {
	_Stream << "CoExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24485eac1_is_self(_24485e76e_IdentExpr* _self_) {
	return ((*_self_)._field_ident == jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, _24485e76e_IdentExpr _Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24485ee78_UnaryExpr _Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244860330_VariadicExpr _Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448606d7_CastExpr _Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244860a8e_NsSelectionExpr _Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244861012_SubIdentExpr _Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244861485_BinopExpr _Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _244861d37_unhandled(_2448619c4_FnCallExpr* _self_) {
	return ((*_self_)._field_exception == nullptr);
}



inline jule::Bool _24486209b_ignored(_2448619c4_FnCallExpr* _self_) {
	return (((*_self_)._field_exception != nullptr) && (*_self_)._field_exception.get()._field_deferred);
}







std::ostream &operator<<(std::ostream &_Stream, _2448619c4_FnCallExpr _Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "exception:" << _Src._field_exception;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2448627a5_is_targeted(_244862453_FieldExprPair* _self_) {
	return ((*_self_)._field_field != nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _244862453_FieldExprPair _Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244862ba1_StructLit _Src) {
	_Stream << "StructLit{";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _244863795_is_empty(_244863124_BraceLit* _self_) {
	return ((*_self_)._field_exprs.len() == 0LL);
}







std::ostream &operator<<(std::ostream &_Stream, _244863124_BraceLit _Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244863b3b_KeyValPair _Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _244864411_is_empty(_2448640ae_SliceExpr* _self_) {
	return ((*_self_)._field_exprs.len() == 0LL);
}







std::ostream &operator<<(std::ostream &_Stream, _2448640ae_SliceExpr _Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244864950_IndexingExpr _Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486505a_SlicingExpr _Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244865346_Constraint _Src) {
	_Stream << "Constraint{";
	_Stream << "mask:" << _Src._field_mask;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448657b9_GenericDecl _Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "constraint:" << _Src._field_constraint;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244865b71_LabelSt _Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244866028_GotoSt _Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244866314_FallSt _Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486691e_AssignLeft _Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244866e5d_AssignSt _Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244867de8_Stmt _Src) {
	_Stream << "Stmt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244868503_ScopeTree _Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "end:" << _Src._field_end;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24486903c_is_self(_244868bc9_ParamDecl* _self_) {
	return (((*_self_)._field_ident == jule::Str("&self", 5)) || ((*_self_)._field_ident == jule::Str("self", 4)));
}



inline jule::Bool _2448692a1_is_ref(_244868bc9_ParamDecl* _self_) {
	return ((!((*_self_)._field_ident.empty())) && ((*_self_)._field_ident[0LL] == '&'));
}







std::ostream &operator<<(std::ostream &_Stream, _244868bc9_ParamDecl _Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24486a34b_is_anon(_244869ee9_FnDecl* _self_) {
	return ((*_self_)._field_ident == jule::Str("<anonymous>", 11));
}







std::ostream &operator<<(std::ostream &_Stream, _244869ee9_FnDecl _Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486aec8_VarDecl _Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486b380_RetSt _Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24486bd42_is_inf(_24486b9e0_Iter* _self_) {
	return ((*_self_)._field_kind == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _24486b9e0_Iter _Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24486c617_is_while_next(_24486c2b5_WhileKind* _self_) {
	return ((*_self_)._field_next != nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _24486c2b5_WhileKind _Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486cb56_RangeKind _Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486d00d_BreakSt _Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486d3b5_ContSt _Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486d838_If _Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486dbe0_Else _Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486e163_Conditional _Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486e839_TypeAliasDecl _Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24486ecac_Case _Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244870483_MatchCase _Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244870c25_UseDecl _Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2448714ea_auto_expr(_244871198_EnumItemDecl* _self_) {
	return ((*_self_)._field_expr == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _244871198_EnumItemDecl _Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _244872254_default_typed(_244871bc1_EnumDecl* _self_) {
	return ((*_self_)._field_kind == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _244871bc1_EnumDecl _Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "end:" << _Src._field_end;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448726c7_TypeEnumItemDecl _Src) {
	_Stream << "TypeEnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2448728c5_TypeEnumDecl _Src) {
	_Stream << "TypeEnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "end:" << _Src._field_end;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244872e25_FieldDecl _Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244873783_StructDecl _Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244873d8d_TraitDecl _Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24487480b_is_trait_impl(_244874498_Impl* _self_) {
	return ((*_self_)._field_base != nullptr);
}



inline jule::Bool _244874a70_is_struct_impl(_244874498_Impl* _self_) {
	return ((*_self_)._field_base == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _244874498_Impl _Src) {
	_Stream << "Impl{";
	_Stream << "end:" << _Src._field_end << ", ";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2448ab524_Const> static__244916408_new_i64(jule::I64 _1327_x) {
	return jule::new_ptr<_2448ab524_Const>(_2448ab524_Const{._field_data=jule::Any(_1327_x)});
}



inline jule::Ptr<_2448ab524_Const> static__24491653a_new_u64(jule::U64 _1627_x) {
	return jule::new_ptr<_2448ab524_Const>(_2448ab524_Const{._field_data=jule::Any(_1627_x)});
}



inline jule::Ptr<_2448ab524_Const> static__2449166c2_new_bool(jule::Bool _1928_x) {
	return jule::new_ptr<_2448ab524_Const>(_2448ab524_Const{._field_data=jule::Any(_1928_x)});
}



inline jule::Ptr<_2448ab524_Const> static__244916969_new_str(jule::Str _2227_x) {
	return jule::new_ptr<_2448ab524_Const>(_2448ab524_Const{._field_data=jule::Any(_2227_x)});
}



inline jule::Ptr<_2448ab524_Const> static__244916c11_new_f64(jule::F64 _2527_x) {
	return jule::new_ptr<_2448ab524_Const>(_2448ab524_Const{._field_data=jule::Any(_2527_x)});
}



inline jule::Ptr<_2448ab524_Const> static__244916e0e_new_nil(void) {
	return jule::new_ptr<_2448ab524_Const>(_2448ab524_Const{._field_data=nullptr});
}



inline jule::I64 _244917508_read_i64(_2448ab524_Const* _self_) {
	if ((!(_2449198a1_is_i64(&(*_self_))))) {
		return 0LL;
	};
	return static_cast<jule::I64>((*_self_)._field_data.operator jule::I64());
}



inline jule::U64 _24491776c_read_u64(_2448ab524_Const* _self_) {
	if ((!(_244919b15_is_u64(&(*_self_))))) {
		return 0LLU;
	};
	return static_cast<jule::U64>((*_self_)._field_data.operator jule::U64());
}



inline jule::Bool _2449179d1_read_bool(_2448ab524_Const* _self_) {
	if ((!(_244919d79_is_bool(&(*_self_))))) {
		return false;
	};
	return (*_self_)._field_data.operator jule::Bool();
}



inline jule::Str _244917c45_read_str(_2448ab524_Const* _self_) {
	if ((!(_24491a0dd_is_str(&(*_self_))))) {
		return jule::Str();
	};
	return (*_self_)._field_data.operator jule::Str();
}



inline jule::F64 _244917ea9_read_f64(_2448ab524_Const* _self_) {
	if ((!(_24491a352_is_f64(&(*_self_))))) {
		return 0LL;
	};
	return static_cast<jule::F64>((*_self_)._field_data.operator jule::F64());
}



inline jule::I64 _24491821d_as_i64(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_228c28978:;
			{
				return static_cast<jule::I64>((*_self_)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_228c289de:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*_self_)._field_data.operator jule::U64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_228c2834b:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*_self_)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_228c2826e:;
			{
				return 0LL;
			}
		}
		_match_end_228c27a65:;
	};
}



inline jule::U64 _244918482_as_u64(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_228c29924:;
			{
				return static_cast<jule::U64>((*_self_)._field_data.operator jule::U64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_228c2a4b3:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*_self_)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_228c2a529:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*_self_)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_228c28abb:;
			{
				return 0LLU;
			}
		}
		_match_end_228c28a66:;
	};
}



inline jule::F64 _2449186e6_as_f64(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_228c2b45e:;
			{
				return static_cast<jule::F64>((*_self_)._field_data.operator jule::F64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_228c2beed:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*_self_)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_228c2c064:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*_self_)._field_data.operator jule::U64()));
			}
		}
		else {
			_case_begin_228c2a062:;
			{
				return 0LL;
			}
		}
		_match_end_228c2a00c:;
	};
}



inline void _24491896b_set_i64(_2448ab524_Const* _self_, jule::I64 _13530_x) {
	(*_self_)._field_data=jule::Any(_13530_x);
}



inline void _244918be1_set_u64(_2448ab524_Const* _self_, jule::U64 _13830_x) {
	(*_self_)._field_data=jule::Any(_13830_x);
}



inline void _244918e66_set_bool(_2448ab524_Const* _self_, jule::Bool _14131_x) {
	(*_self_)._field_data=jule::Any(_14131_x);
}



inline void _2449191db_set_str(_2448ab524_Const* _self_, jule::Str _14430_x) {
	(*_self_)._field_data=jule::Any(_14430_x);
}



inline void _244919461_set_f64(_2448ab524_Const* _self_, jule::F64 _14730_x) {
	(*_self_)._field_data=jule::Any(_14730_x);
}



inline void _24491963c_set_nil(_2448ab524_Const* _self_) {
	(*_self_)._field_data=nullptr;
}



inline jule::Bool _2449198a1_is_i64(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_228c30c9e:;
			{
				return true;
			}
		}
		else {
			_case_begin_228c30bc2:;
			{
				return false;
			}
		}
		_match_end_228c30b6c:;
	};
}



inline jule::Bool _244919b15_is_u64(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_228c31871:;
			{
				return true;
			}
		}
		else {
			_case_begin_228c31552:;
			{
				return false;
			}
		}
		_match_end_228c31266:;
	};
}



inline jule::Bool _244919d79_is_bool(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_228c32399:;
			{
				return true;
			}
		}
		else {
			_case_begin_228c3207a:;
			{
				return false;
			}
		}
		_match_end_228c31c6c:;
	};
}



inline jule::Bool _24491a0dd_is_str(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_228c32dc2:;
			{
				return true;
			}
		}
		else {
			_case_begin_228c32aa3:;
			{
				return false;
			}
		}
		_match_end_228c32795:;
	};
}



inline jule::Bool _24491a352_is_f64(_2448ab524_Const* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_228c338ea:;
			{
				return true;
			}
		}
		else {
			_case_begin_228c335cb:;
			{
				return false;
			}
		}
		_match_end_228c332bd:;
	};
}



inline jule::Bool _24491a5b6_is_nil(_2448ab524_Const* _self_) {
	return ((*_self_)._field_data == nullptr);
}



inline jule::Bool _24491a8c4_are_same_types(_2448ab524_Const* _self_, _2448ab524_Const _21033_x) {
	{
		
		if ((_2449198a1_is_i64(&(*_self_)) == _2449198a1_is_i64(&_21033_x))) {
			_case_begin_228c3528c:;
			{
				return true;
			}
		}
		else if ((_244919b15_is_u64(&(*_self_)) == _244919b15_is_u64(&_21033_x))) {
			_case_begin_228c34a2d:;
			{
				return true;
			}
		}
		else if ((_24491a352_is_f64(&(*_self_)) == _24491a352_is_f64(&_21033_x))) {
			_case_begin_228c34aa5:;
			{
				return true;
			}
		}
		else if ((_244919d79_is_bool(&(*_self_)) == _244919d79_is_bool(&_21033_x))) {
			_case_begin_228c34b2c:;
			{
				return true;
			}
		}
		else if ((_24491a0dd_is_str(&(*_self_)) == _24491a0dd_is_str(&_21033_x))) {
			_case_begin_228c34ba4:;
			{
				return true;
			}
		}
		else if ((_24491a5b6_is_nil(&(*_self_)) == _24491a5b6_is_nil(&_21033_x))) {
			_case_begin_228c34e4b:;
			{
				return true;
			}
		}
		else {
			_case_begin_228c349a6:;
			{
				return false;
			}
		}
		_match_end_228c348c9:;
	};
}



inline jule::Bool _24491abd2_and(_2448ab524_Const* _self_, _2448ab524_Const _23522_x) {
	{
		
		if ((_244919d79_is_bool(&(*_self_)) && _244919d79_is_bool(&_23522_x))) {
			_case_begin_228c386d0:;
			{
				return (_2449179d1_read_bool(&(*_self_)) && _2449179d1_read_bool(&_23522_x));
			}
		}
		else {
			_case_begin_228c37cd9:;
			{
				return false;
			}
		}
		_match_end_228c37c0c:;
	};
}



inline jule::Bool _24491aee0_or(_2448ab524_Const* _self_, _2448ab524_Const _24621_x) {
	{
		
		if ((_244919d79_is_bool(&(*_self_)) && _244919d79_is_bool(&_24621_x))) {
			_case_begin_228c39acc:;
			{
				return (_2449179d1_read_bool(&(*_self_)) || _2449179d1_read_bool(&_24621_x));
			}
		}
		else {
			_case_begin_228c38a43:;
			{
				return false;
			}
		}
		_match_end_228c38966:;
	};
}



inline jule::Bool _24491b2ed_eq(_2448ab524_Const* _self_, _2448ab524_Const _25721_x) {
	{
		
		if (_24491a5b6_is_nil(&(*_self_))) {
			_case_begin_228c3b051:;
			{
				return _24491a5b6_is_nil(&_25721_x);
			}
		}
		else if (_244919d79_is_bool(&(*_self_))) {
			_case_begin_228c3a825:;
			{
				return (_244919d79_is_bool(&_25721_x) && (_2449179d1_read_bool(&(*_self_)) == _2449179d1_read_bool(&_25721_x)));
			}
		}
		else if (_24491a0dd_is_str(&(*_self_))) {
			_case_begin_228c3a88b:;
			{
				return (_24491a0dd_is_str(&_25721_x) && (_244917c45_read_str(&(*_self_)) == _244917c45_read_str(&_25721_x)));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c3a913:;
			{
				return (_244917508_read_i64(&(*_self_)) == _24491821d_as_i64(&_25721_x));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c3a98a:;
			{
				return (_24491776c_read_u64(&(*_self_)) == _244918482_as_u64(&_25721_x));
			}
		}
		else if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c3ac32:;
			{
				return (_244917ea9_read_f64(&(*_self_)) == _2449186e6_as_f64(&_25721_x));
			}
		}
		else {
			_case_begin_228c39e62:;
			{
				return false;
			}
		}
		_match_end_228c39d85:;
	};
}



inline jule::Bool _24491b60b_lt(_2448ab524_Const* _self_, _2448ab524_Const _28421_x) {
	{
		
		if (_24491a0dd_is_str(&(*_self_))) {
			_case_begin_228c45038:;
			{
				return (_24491a0dd_is_str(&_28421_x) && (_244917c45_read_str(&(*_self_)) < _244917c45_read_str(&_28421_x)));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c448d9:;
			{
				return (_244917508_read_i64(&(*_self_)) < _24491821d_as_i64(&_28421_x));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c44950:;
			{
				return (_24491776c_read_u64(&(*_self_)) < _244918482_as_u64(&_28421_x));
			}
		}
		else if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c449b6:;
			{
				return (_244917ea9_read_f64(&(*_self_)) < _2449186e6_as_f64(&_28421_x));
			}
		}
		else {
			_case_begin_228c3b381:;
			{
				return false;
			}
		}
		_match_end_228c3e52c:;
	};
}



inline jule::Bool _24491b919_lt_eq(_2448ab524_Const* _self_, _2448ab524_Const _30724_x) {
	{
		
		if (_24491a0dd_is_str(&(*_self_))) {
			_case_begin_228c480c4:;
			{
				return (_24491a0dd_is_str(&_30724_x) && (_244917c45_read_str(&(*_self_)) <= _244917c45_read_str(&_30724_x)));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c47975:;
			{
				return (_244917508_read_i64(&(*_self_)) <= _24491821d_as_i64(&_30724_x));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c479db:;
			{
				return (_24491776c_read_u64(&(*_self_)) <= _244918482_as_u64(&_30724_x));
			}
		}
		else if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c47a52:;
			{
				return (_244917ea9_read_f64(&(*_self_)) <= _2449186e6_as_f64(&_30724_x));
			}
		}
		else {
			_case_begin_228c45247:;
			{
				return false;
			}
		}
		_match_end_228c4718e:;
	};
}



inline jule::Bool _24491bc27_gt(_2448ab524_Const* _self_, _2448ab524_Const _33021_x) {
	{
		
		if (_24491a0dd_is_str(&(*_self_))) {
			_case_begin_228c4b160:;
			{
				return (_24491a0dd_is_str(&_33021_x) && (_244917c45_read_str(&(*_self_)) > _244917c45_read_str(&_33021_x)));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c4aa11:;
			{
				return (_244917508_read_i64(&(*_self_)) > _24491821d_as_i64(&_33021_x));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c4aa77:;
			{
				return (_24491776c_read_u64(&(*_self_)) > _244918482_as_u64(&_33021_x));
			}
		}
		else if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c4aadd:;
			{
				return (_244917ea9_read_f64(&(*_self_)) > _2449186e6_as_f64(&_33021_x));
			}
		}
		else {
			_case_begin_228c482d3:;
			{
				return false;
			}
		}
		_match_end_228c4a22a:;
	};
}



inline jule::Bool _24491c035_gt_eq(_2448ab524_Const* _self_, _2448ab524_Const _35324_x) {
	{
		
		if (_24491a0dd_is_str(&(*_self_))) {
			_case_begin_228c4e1eb:;
			{
				return (_24491a0dd_is_str(&_35324_x) && (_244917c45_read_str(&(*_self_)) >= _244917c45_read_str(&_35324_x)));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c4da9c:;
			{
				return (_244917508_read_i64(&(*_self_)) >= _24491821d_as_i64(&_35324_x));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c4db13:;
			{
				return (_24491776c_read_u64(&(*_self_)) >= _244918482_as_u64(&_35324_x));
			}
		}
		else if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c4db79:;
			{
				return (_244917ea9_read_f64(&(*_self_)) >= _2449186e6_as_f64(&_35324_x));
			}
		}
		else {
			_case_begin_228c4b36e:;
			{
				return false;
			}
		}
		_match_end_228c4d2b6:;
	};
}



inline jule::Bool _24491c343_add(_2448ab524_Const* _self_, _2448ab524_Const _37426_x) {
	{
		
		if (_24491a0dd_is_str(&(*_self_))) {
			_case_begin_228c52287:;
			{
				if ((!(_24491a0dd_is_str(&_37426_x)))) {
					return false;
				};
				_2449191db_set_str(&(*_self_), (_244917c45_read_str(&(*_self_)) + _244917c45_read_str(&_37426_x)));
			}
		}
		else if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c51b38:;
			{
				_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_244917ea9_read_f64(&(*_self_)) + _2449186e6_as_f64(&_37426_x))));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c51b9e:;
			{
				if (_24491a352_is_f64(&_37426_x)) {
					_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_2449186e6_as_f64(&(*_self_)) + _244917ea9_read_f64(&_37426_x))));
				} else {
					_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_244917508_read_i64(&(*_self_)) + _24491821d_as_i64(&_37426_x))));
				};
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c51c15:;
			{
				if (_24491a352_is_f64(&_37426_x)) {
					_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_2449186e6_as_f64(&(*_self_)) + _244917ea9_read_f64(&_37426_x))));
				} else {
					_244918be1_set_u64(&(*_self_), static_cast<jule::U64>((_24491776c_read_u64(&(*_self_)) + _244918482_as_u64(&_37426_x))));
				};
			}
		}
		else {
			_case_begin_228c4e40a:;
			{
				return false;
			}
		}
		_match_end_228c51352:;
	};
	return true;
}



inline jule::Bool _24491c651_sub(_2448ab524_Const* _self_, _2448ab524_Const _40326_x) {
	{
		
		if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c57a62:;
			{
				_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_244917ea9_read_f64(&(*_self_)) - _2449186e6_as_f64(&_40326_x))));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c57325:;
			{
				if (_24491a352_is_f64(&_40326_x)) {
					_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_2449186e6_as_f64(&(*_self_)) - _244917ea9_read_f64(&_40326_x))));
				} else {
					_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_244917508_read_i64(&(*_self_)) - _24491821d_as_i64(&_40326_x))));
				};
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c5738b:;
			{
				if (_24491a352_is_f64(&_40326_x)) {
					_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_2449186e6_as_f64(&(*_self_)) - _244917ea9_read_f64(&_40326_x))));
				} else {
					_244918be1_set_u64(&(*_self_), static_cast<jule::U64>((_24491776c_read_u64(&(*_self_)) - _244918482_as_u64(&_40326_x))));
				};
			}
		}
		else {
			_case_begin_228c572ae:;
			{
				return false;
			}
		}
		_match_end_228c56973:;
	};
	return true;
}



inline jule::Bool _24491c95e_mul(_2448ab524_Const* _self_, _2448ab524_Const _42726_x) {
	{
		
		if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c5c2d6:;
			{
				_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_244917ea9_read_f64(&(*_self_)) * _2449186e6_as_f64(&_42726_x))));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c5ba99:;
			{
				if (_24491a352_is_f64(&_42726_x)) {
					_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_2449186e6_as_f64(&(*_self_)) * _244917ea9_read_f64(&_42726_x))));
				} else {
					_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_244917508_read_i64(&(*_self_)) * _24491821d_as_i64(&_42726_x))));
				};
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c5bb10:;
			{
				if (_24491a352_is_f64(&_42726_x)) {
					_244919461_set_f64(&(*_self_), static_cast<jule::F64>((_2449186e6_as_f64(&(*_self_)) * _244917ea9_read_f64(&_42726_x))));
				} else {
					_244918be1_set_u64(&(*_self_), static_cast<jule::U64>((_24491776c_read_u64(&(*_self_)) * _244918482_as_u64(&_42726_x))));
				};
			}
		}
		else {
			_case_begin_228c5ba33:;
			{
				return false;
			}
		}
		_match_end_228c5b060:;
	};
	return true;
}



inline jule::Bool _24491cc6c_div(_2448ab524_Const* _self_, _2448ab524_Const _45526_x) {
	{
		
		if (_24491a352_is_f64(&(*_self_))) {
			_case_begin_228c61a5a:;
			{
				jule::F64 _45817_l = _2449186e6_as_f64(&_45526_x);;
				if ((_45817_l == 0LL)) {
					return false;
				};
				_244919461_set_f64(&(*_self_), static_cast<jule::F64>(jule::div(_244917ea9_read_f64(&(*_self_)),_45817_l)));
			}
		}
		else if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c6131d:;
			{
				jule::F64 _46417_l = _2449186e6_as_f64(&_45526_x);;
				if ((_46417_l == 0LL)) {
					return false;
				};
				_244919461_set_f64(&(*_self_), static_cast<jule::F64>(jule::div(_2449186e6_as_f64(&(*_self_)),_46417_l)));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c61384:;
			{
				jule::F64 _47017_l = _2449186e6_as_f64(&_45526_x);;
				if ((_47017_l == 0LL)) {
					return false;
				};
				_244919461_set_f64(&(*_self_), static_cast<jule::F64>(jule::div(_2449186e6_as_f64(&(*_self_)),_47017_l)));
			}
		}
		else {
			_case_begin_228c612a7:;
			{
				return false;
			}
		}
		_match_end_228c607d4:;
	};
	return true;
}



inline jule::Bool _24491d07a_mod(_2448ab524_Const* _self_, _2448ab524_Const _48426_x) {
	{
		
		if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c66312:;
			{
				jule::I64 _48717_l = _24491821d_as_i64(&_48426_x);;
				if ((_48717_l == 0LL)) {
					return false;
				};
				_24491896b_set_i64(&(*_self_), static_cast<jule::I64>(jule::mod(_244917508_read_i64(&(*_self_)),_48717_l)));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c65ad6:;
			{
				jule::U64 _49317_l = _244918482_as_u64(&_48426_x);;
				if ((_49317_l == 0LLU)) {
					return false;
				};
				_244918be1_set_u64(&(*_self_), static_cast<jule::U64>(jule::mod(_24491776c_read_u64(&(*_self_)),_49317_l)));
			}
		}
		else {
			_case_begin_228c65a70:;
			{
				return false;
			}
		}
		_match_end_228c65993:;
	};
	return true;
}



inline jule::Bool _24491d388_bitwise_and(_2448ab524_Const* _self_, _2448ab524_Const _50634_x) {
	{
		
		if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c69667:;
			{
				_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_244917508_read_i64(&(*_self_)) & _24491821d_as_i64(&_50634_x))));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c68e3b:;
			{
				_244918be1_set_u64(&(*_self_), static_cast<jule::U64>((_24491776c_read_u64(&(*_self_)) & _244918482_as_u64(&_50634_x))));
			}
		}
		else {
			_case_begin_228c68dc5:;
			{
				return false;
			}
		}
		_match_end_228c68ce8:;
	};
	return true;
}



inline jule::Bool _24491d696_bitwise_or(_2448ab524_Const* _self_, _2448ab524_Const _52033_x) {
	{
		
		if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c6b801:;
			{
				_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_244917508_read_i64(&(*_self_)) | _24491821d_as_i64(&_52033_x))));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c6b0c5:;
			{
				_244918be1_set_u64(&(*_self_), static_cast<jule::U64>((_24491776c_read_u64(&(*_self_)) | _244918482_as_u64(&_52033_x))));
			}
		}
		else {
			_case_begin_228c6b05e:;
			{
				return false;
			}
		}
		_match_end_228c6ae82:;
	};
	return true;
}



inline jule::Bool _24491d9a4_xor(_2448ab524_Const* _self_, _2448ab524_Const _53426_x) {
	{
		
		if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c6d98a:;
			{
				_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_244917508_read_i64(&(*_self_)) ^ _24491821d_as_i64(&_53426_x))));
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c6d25e:;
			{
				_244918be1_set_u64(&(*_self_), static_cast<jule::U64>((_24491776c_read_u64(&(*_self_)) ^ _244918482_as_u64(&_53426_x))));
			}
		}
		else {
			_case_begin_228c6d1e8:;
			{
				return false;
			}
		}
		_match_end_228c6d11b:;
	};
	return true;
}



inline jule::Bool _24491dcb2_lshift(_2448ab524_Const* _self_, _2448ab524_Const _54829_x) {
	{
		
		if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c70b24:;
			{
				jule::I64 _55117_l = _24491821d_as_i64(&(*_self_));;
				if ((_55117_l < 0LL)) {
					jule::U64 _55321_r = _244918482_as_u64(&_54829_x);;
					_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_55117_l << _55321_r)));
				} else {
					_24491e433_lshift_unsig((*_self_),_54829_x);
				};
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c703e8:;
			{
				_24491e433_lshift_unsig((*_self_),_54829_x);
			}
		}
		else {
			_case_begin_228c70382:;
			{
				return false;
			}
		}
		_match_end_228c702a5:;
	};
	return true;
}



inline jule::Bool _24491e0c0_rshift(_2448ab524_Const* _self_, _2448ab524_Const _56829_x) {
	{
		
		if (_2449198a1_is_i64(&(*_self_))) {
			_case_begin_228c7363d:;
			{
				jule::I64 _57117_l = _24491821d_as_i64(&(*_self_));;
				if ((_57117_l < 0LL)) {
					jule::U64 _57321_r = _244918482_as_u64(&_56829_x);;
					_24491896b_set_i64(&(*_self_), static_cast<jule::I64>((_57117_l >> _57321_r)));
				} else {
					_24491e730_rshift_unsig((*_self_),_56829_x);
				};
			}
		}
		else if (_244919b15_is_u64(&(*_self_))) {
			_case_begin_228c72e12:;
			{
				_24491e730_rshift_unsig((*_self_),_56829_x);
			}
		}
		else {
			_case_begin_228c72d9b:;
			{
				return false;
			}
		}
		_match_end_228c72cbe:;
	};
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, _2448ab524_Const _Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24546660b_FloatInfo _Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2454672bb_DecimalSlice _Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _245478ad5_LeftCheat _Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2454714b2_set(_2454795ec_Decimal* _self_, jule::Str _23322_s) {
	jule::Bool _23332_ok = jule::Bool();
	jule::I32 _23417_i = 0LL;;
	(*_self_)._field_neg=false;
	(*_self_)._field_trunc=false;
	if ((_23417_i >= _23322_s.len())) {
		return _23332_ok;
	};
	{
		
		if ((_23322_s[_23417_i] == '+')) {
			_case_begin_2291c6893:;
			{
				(_23417_i)++;
			}
		}
		else if ((_23322_s[_23417_i] == '-')) {
			_case_begin_2291c6909:;
			{
				(*_self_)._field_neg=true;
				(_23417_i)++;
			}
		}
		_match_end_2291c66ea:;
	};
	jule::Bool _25117_sawdot = false;;
	jule::Bool _25217_sawdigits = false;;
	for (; (_23417_i < _23322_s.len()); (_23417_i)++) {
		{
			{
				
				if ((_23322_s[_23417_i] == '_')) {
					_case_begin_2291c8b92:;
					{
						goto _iter_next_2291c83cd;
					}
				}
				else if ((_23322_s[_23417_i] == '.')) {
					_case_begin_2291c8c19:;
					{
						if (_25117_sawdot) {
							return _23332_ok;
						};
						_25117_sawdot=true;
						(*_self_)._field_dp=(*_self_)._field_nd;
						goto _iter_next_2291c83cd;
					}
				}
				else if ((('0' <= _23322_s[_23417_i]) && (_23322_s[_23417_i] <= '9'))) {
					_case_begin_2291c8c91:;
					{
						_25217_sawdigits=true;
						if (((_23322_s[_23417_i] == '0') && ((*_self_)._field_nd == 0LL))) {
							((*_self_)._field_dp)--;
							goto _iter_next_2291c83cd;
						};
						if (((*_self_)._field_nd < 800LL)) {
							(*_self_)._field_d[(*_self_)._field_nd]=_23322_s[_23417_i];
							((*_self_)._field_nd)++;
						} else if ((_23322_s[_23417_i] != '0')) {
							(*_self_)._field_trunc=true;
						};
						goto _iter_next_2291c83cd;
					}
				}
				_match_end_2291c8a60:;
			};
			goto _iter_end_2291c83cd;
		}
	_iter_next_2291c83cd:;
	}
	_iter_end_2291c83cd:;;
	if ((!(_25217_sawdigits))) {
		return _23332_ok;
	};
	if ((!(_25117_sawdot))) {
		(*_self_)._field_dp=(*_self_)._field_nd;
	};
	if (((_23417_i < _23322_s.len()) && (_24546bab7_lower(_23322_s[_23417_i]) == 'e'))) {
		(_23417_i)++;
		if ((_23417_i >= _23322_s.len())) {
			return _23332_ok;
		};
		jule::I32 _29721_esign = 1LL;;
		if ((_23322_s[_23417_i] == '+')) {
			(_23417_i)++;
		} else if ((_23322_s[_23417_i] == '-')) {
			(_23417_i)++;
			_29721_esign=-1LL;
		};
		if ((((_23417_i >= _23322_s.len()) || (_23322_s[_23417_i] < '0')) || (_23322_s[_23417_i] > '9'))) {
			return _23332_ok;
		};
		jule::I32 _30721_e = 0LL;;
		for (; ((_23417_i < _23322_s.len()) && ((('0' <= _23322_s[_23417_i]) && (_23322_s[_23417_i] <= '9')) || (_23322_s[_23417_i] == '_'))); (_23417_i)++) {
			{
				if ((_23322_s[_23417_i] == '_')) {
					goto _iter_next_2291d16d3;
				};
				if ((_30721_e < 10000LL)) {
					_30721_e=static_cast<jule::I32>((((_30721_e * 10LL) + static_cast<jule::I32>(_23322_s[_23417_i])) - '0'));
				};
			}
		_iter_next_2291d16d3:;
		}
		_iter_end_2291d16d3:;;
		(*_self_)._field_dp+=(_30721_e * _29721_esign);
	};
	if ((_23417_i != _23322_s.len())) {
		return _23332_ok;
	};
	_23332_ok=true;
	return _23332_ok;
}



inline std::tuple<jule::U64,jule::Bool> _2454717c0_float_bits(_2454795ec_Decimal* _self_, _24546660b_FloatInfo& _32730_flt) {
	jule::U64 _32748_b = jule::U64();
	jule::Bool _32756_overflow = jule::Bool();
	jule::I32 _32817_exp = 0LL;;
	jule::U64 _32917_mant = 0LLU;;
	if (((*_self_)._field_nd == 0LL)) {
		_32917_mant=0LLU;
		_32817_exp=_32730_flt._field_bias;
		goto _julec_label_out;
	};
	if (((*_self_)._field_dp > 310LL)) {
		goto _julec_label_overflow;
	};
	if (((*_self_)._field_dp < -330LL)) {
		_32917_mant=0LLU;
		_32817_exp=_32730_flt._field_bias;
		goto _julec_label_out;
	};
	_32817_exp=0LL;
	while (((*_self_)._field_dp > 0LL)) {
		{
			jule::I32 _35421_n = 0LL;;
			if (((*_self_)._field_dp >= _245471160_POWTAB.len())) {
				_35421_n=27LL;
			} else {
				_35421_n=_245471160_POWTAB[(*_self_)._field_dp];
			};
			_245479c4b_shift(&(*_self_), static_cast<jule::I32>((-(_35421_n))));
			_32817_exp+=_35421_n;
		}
	_iter_next_2291d81e0:;
	}
	_iter_end_2291d81e0:;;
	while ((((*_self_)._field_dp < 0LL) || (((*_self_)._field_dp == 0LL) && ((*_self_)._field_d[0LL] < '5')))) {
		{
			jule::I32 _36421_n = 0LL;;
			if (((-((*_self_)._field_dp)) >= _245471160_POWTAB.len())) {
				_36421_n=27LL;
			} else {
				_36421_n=_245471160_POWTAB[(-((*_self_)._field_dp))];
			};
			_245479c4b_shift(&(*_self_), _36421_n);
			_32817_exp-=_36421_n;
		}
	_iter_next_2291d88e9:;
	}
	_iter_end_2291d88e9:;;
	(_32817_exp)--;
	if ((_32817_exp < (_32730_flt._field_bias + 1LL))) {
		jule::I32 _38117_n = ((_32730_flt._field_bias + 1LL) - _32817_exp);;
		_245479c4b_shift(&(*_self_), static_cast<jule::I32>((-(_38117_n))));
		_32817_exp+=_38117_n;
	};
	if (((_32817_exp - _32730_flt._field_bias) >= static_cast<jule::I32>(((1LL << _32730_flt._field_expbits) - 1LL)))) {
		goto _julec_label_overflow;
	};
	_245479c4b_shift(&(*_self_), static_cast<jule::I32>(static_cast<jule::I32>((1LL + _32730_flt._field_mantbits))));
	_32917_mant=static_cast<jule::U64>(_24547a730_rounded_integer(&(*_self_)));
	if ((_32917_mant == (2LLU << _32730_flt._field_mantbits))) {
		_32917_mant>>=1LLU;
		(_32817_exp)++;
		if (((_32817_exp - _32730_flt._field_bias) >= static_cast<jule::I32>(((1LL << _32730_flt._field_expbits) - 1LL)))) {
			goto _julec_label_overflow;
		};
	};
	if (((_32917_mant & (1LLU << _32730_flt._field_mantbits)) == 0LLU)) {
		_32817_exp=_32730_flt._field_bias;
	};
	goto _julec_label_out;
	_julec_label_overflow:;
	_32917_mant=0LLU;
	_32817_exp=static_cast<jule::I32>(static_cast<jule::I32>((((static_cast<jule::U32>(1LLU) << _32730_flt._field_expbits) - 1LLU) + static_cast<jule::U32>(_32730_flt._field_bias))));
	_32756_overflow=true;
	_julec_label_out:;
	jule::U64 _41717_bits = (_32917_mant & ((1LLU << _32730_flt._field_mantbits) - 1LLU));;
	_41717_bits|=(static_cast<jule::U64>(((_32817_exp - _32730_flt._field_bias) & static_cast<jule::I32>(((1LL << _32730_flt._field_expbits) - 1LL)))) << _32730_flt._field_mantbits);
	if ((*_self_)._field_neg) {
		_41717_bits|=((1LLU << _32730_flt._field_mantbits) << _32730_flt._field_expbits);
	};
	_32748_b = _41717_bits;
	return std::make_tuple(_32748_b,_32756_overflow);
}



inline void _2454799c6_assign(_2454795ec_Decimal* _self_, jule::U64 _21029_v) {
	jule::Array<jule::U8,24> _21117_buf = jule::Array<jule::U8,24>();;
	jule::I32 _21417_n = 0LL;;
	while ((_21029_v > 0LLU)) {
		{
			jule::U64 _21617_v1 = (_21029_v / 10LLU);;
			_21029_v-=(10LLU * _21617_v1);
			_21117_buf[_21417_n]=static_cast<jule::U8>(static_cast<jule::U8>((_21029_v + '0')));
			(_21417_n)++;
			_21029_v=_21617_v1;
		}
	_iter_next_2291e6a39:;
	}
	_iter_end_2291e6a39:;;
	(*_self_)._field_nd=0LL;
	(_21417_n)--;
	for (; (_21417_n >= 0LL); (_21417_n)--) {
		{
			(*_self_)._field_d[(*_self_)._field_nd]=_21117_buf[_21417_n];
			((*_self_)._field_nd)++;
		}
	_iter_next_2291e8024:;
	}
	_iter_end_2291e8024:;;
	(*_self_)._field_dp=(*_self_)._field_nd;
	_24547acd5_trim((*_self_));
}



inline void _245479c4b_shift(_2454795ec_Decimal* _self_, jule::I32 _23528_k) {
	{
		
		if (((*_self_)._field_nd == 0LL)) {
			_case_begin_2291e9696:;
		}
		else if ((_23528_k > 0LL)) {
			_case_begin_2291e971d:;
			{
				while ((_23528_k > 60LL)) {
					{
						_24547b775_left_shift((*_self_),60LLU);
						_23528_k-=60LL;
					}
				_iter_next_2291e9d4a:;
				}
				_iter_end_2291e9d4a:;;
				_24547b775_left_shift((*_self_),static_cast<jule::U32>(static_cast<jule::U32>(_23528_k)));
			}
		}
		else if ((_23528_k < 0LL)) {
			_case_begin_2291e9795:;
			{
				while ((_23528_k < -60LL)) {
					{
						_24547b08d_right_shift((*_self_),60LLU);
						_23528_k+=60LL;
					}
				_iter_next_2291eae28:;
				}
				_iter_end_2291eae28:;;
				_24547b08d_right_shift((*_self_),static_cast<jule::U32>(static_cast<jule::U32>((-(_23528_k)))));
			}
		}
		_match_end_2291e9564:;
	};
}



inline void _245479ec1_round_down(_2454795ec_Decimal* _self_, jule::I32 _25529_nd) {
	if (((_25529_nd < 0LL) || (_25529_nd >= (*_self_)._field_nd))) {
		return;;
	};
	(*_self_)._field_nd=_25529_nd;
	_24547acd5_trim((*_self_));
}



inline void _24547a246_round_up(_2454795ec_Decimal* _self_, jule::I32 _26427_nd) {
	if (((_26427_nd < 0LL) || (_26427_nd >= (*_self_)._field_nd))) {
		return;;
	};
	jule::I32 _27017_i = (_26427_nd - 1LL);;
	for (; (_27017_i >= 0LL); (_27017_i)--) {
		{
			jule::U8 _27217_c = (*_self_)._field_d[_27017_i];;
			if ((_27217_c < '9')) {
				((*_self_)._field_d[_27017_i])++;
				(*_self_)._field_nd=static_cast<jule::I32>((_27017_i + 1LL));
				return;;
			};
		}
	_iter_next_2291ee1c3:;
	}
	_iter_end_2291ee1c3:;;
	(*_self_)._field_d[0LL]='1';
	(*_self_)._field_nd=1LL;
	((*_self_)._field_dp)++;
}



inline void _24547a4bb_round(_2454795ec_Decimal* _self_, jule::I32 _29124_nd) {
	if (((_29124_nd < 0LL) || (_29124_nd >= (*_self_)._field_nd))) {
		return;;
	};
	if (_24547bab6_should_round_up((*_self_),_29124_nd)) {
		_24547a246_round_up(&(*_self_), _29124_nd);
	} else {
		_245479ec1_round_down(&(*_self_), _29124_nd);
	};
}



inline jule::U64 _24547a730_rounded_integer(_2454795ec_Decimal* _self_) {
	if (((*_self_)._field_dp > 20LL)) {
		return jule::MAX_U64;
	};
	jule::I32 _30817_i = 0LL;;
	jule::U64 _30917_n = 0LLU;;
	for (; ((_30817_i < (*_self_)._field_dp) && (_30817_i < (*_self_)._field_nd)); (_30817_i)++) {
		{
			_30917_n=static_cast<jule::U64>(((_30917_n * 10LLU) + static_cast<jule::U64>(((*_self_)._field_d[_30817_i] - '0'))));
		}
	_iter_next_22920200b:;
	}
	_iter_end_22920200b:;;
	for (; (_30817_i < (*_self_)._field_dp); (_30817_i)++) {
		{
			_30917_n*=10LLU;
		}
	_iter_next_229204a9c:;
	}
	_iter_end_229204a9c:;;
	if (_24547bab6_should_round_up((*_self_),(*_self_)._field_dp)) {
		(_30917_n)++;
	};
	return _30917_n;
}







std::ostream &operator<<(std::ostream &_Stream, _2454795ec_Decimal _Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_244851079_FieldIns> _244829c23_instance(jule::Ptr<_24483adcc_Field> _self_) {
	return jule::new_ptr<_244851079_FieldIns>(_244851079_FieldIns{._field_decl=_self_, });
}







std::ostream &operator<<(std::ostream &_Stream, _24483adcc_Field _Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24484a33c_Operators _Src) {
	_Stream << "Operators{";
	_Stream << "eq:" << _Src._field_eq << ", ";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "gt_eq:" << _Src._field_gt_eq << ", ";
	_Stream << "lt:" << _Src._field_lt << ", ";
	_Stream << "lt_eq:" << _Src._field_lt_eq << ", ";
	_Stream << "shl:" << _Src._field_shl << ", ";
	_Stream << "shr:" << _Src._field_shr << ", ";
	_Stream << "add:" << _Src._field_add << ", ";
	_Stream << "sub:" << _Src._field_sub << ", ";
	_Stream << "div:" << _Src._field_div << ", ";
	_Stream << "mul:" << _Src._field_mul << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "bit_and:" << _Src._field_bit_and << ", ";
	_Stream << "bit_or:" << _Src._field_bit_or << ", ";
	_Stream << "bit_xor:" << _Src._field_bit_xor << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "bit_not:" << _Src._field_bit_not << ", ";
	_Stream << "add_assign:" << _Src._field_add_assign << ", ";
	_Stream << "sub_assign:" << _Src._field_sub_assign << ", ";
	_Stream << "div_assign:" << _Src._field_div_assign << ", ";
	_Stream << "mul_assign:" << _Src._field_mul_assign << ", ";
	_Stream << "mod_assign:" << _Src._field_mod_assign << ", ";
	_Stream << "shl_assign:" << _Src._field_shl_assign << ", ";
	_Stream << "shr_assign:" << _Src._field_shr_assign << ", ";
	_Stream << "bit_or_assign:" << _Src._field_bit_or_assign << ", ";
	_Stream << "bit_and_assign:" << _Src._field_bit_and_assign << ", ";
	_Stream << "bit_xor_assign:" << _Src._field_bit_xor_assign;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_244874c5c_StructIns> _244830d17_instance(jule::Ptr<_244848912_Struct> _self_) {
	if (((_self_.get()._field_generics.len() == 0LL) && (_self_.get()._field_instances.len() == 1LL))) {
		return _self_.get()._field_instances[0LL];
	};
	jule::Ptr<_244874c5c_StructIns> _9917_ins = jule::new_ptr<_244874c5c_StructIns>(_244874c5c_StructIns{._field_decl=_self_, ._field_fields=jule::Slice<jule::Ptr<_244851079_FieldIns>>::alloc(0LL,_self_.get()._field_fields.len()), ._field_refers=static__24492cba0_new(), });;
	{
		auto &expr = _self_.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_2294d5036:;
		if (it != expr.end()) {
			jule::Ptr<_24483adcc_Field> _10521_f = *it;
			{
				_9917_ins.get()._field_fields = jule::alloc_for_append(_9917_ins.get()._field_fields,1);_9917_ins.get()._field_fields.__push(_244829c23_instance(_10521_f));;
				if ((((!(_10521_f.get()._field_mutable)) && (_10521_f.get()._field_kind.get()._field_kind != nullptr)) && _2455e2424_mutable(_10521_f.get()._field_kind.get()._field_kind.ptr()))) {
					_9917_ins.get()._field_mutable=true;
				};
			}
			_iter_next_2294d5036:;
			++it;
			goto _iter_begin_2294d5036;
		}
		_iter_end_2294d5036:;
	};
	if ((_self_.get()._field_generics.len() == 0LL)) {
		_9917_ins.get()._field_methods=_self_.get()._field_methods;
	} else {
		_9917_ins.get()._field_methods=jule::Slice<jule::Ptr<_244926d0e_Fn>>::alloc(0LL,_self_.get()._field_methods.len());
		{
			auto &expr = _self_.get()._field_methods;
			auto it = expr.begin();
			_iter_begin_2294d828c:;
			if (it != expr.end()) {
				jule::Ptr<_244926d0e_Fn> _11625_f = *it;
				{
					jule::Ptr<_244926d0e_Fn> _11725_fins = jule::new_ptr<_244926d0e_Fn>((*(_11625_f)));;
					_11725_fins.get()._field_instances=nullptr;
					_9917_ins.get()._field_methods = jule::alloc_for_append(_9917_ins.get()._field_methods,1);_9917_ins.get()._field_methods.__push(_11725_fins);;
				}
				_iter_next_2294d828c:;
				++it;
				goto _iter_begin_2294d828c;
			}
			_iter_end_2294d828c:;
		};
	};
	return _9917_ins;
}



inline jule::Ptr<_244874c5c_StructIns> _244835080_append_instance(_244848912_Struct* _self_, jule::Ptr<_244874c5c_StructIns>& _12839_ins) {
	if ((((*_self_)._field_generics.len() == 0LL) && ((*_self_)._field_instances.len() == 1LL))) {
		return (*_self_)._field_instances[0LL];
	};
	{
		auto &expr = (*_self_)._field_instances;
		auto it = expr.begin();
		_iter_begin_2294da734:;
		if (it != expr.end()) {
			jule::Ptr<_244874c5c_StructIns> _13421_ains = *it;
			{
				if (_24484dab0_same(_13421_ains.ptr(), _12839_ins)) {
					return _13421_ains;
				};
			}
			_iter_next_2294da734:;
			++it;
			goto _iter_begin_2294da734;
		}
		_iter_end_2294da734:;
	};
	(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_12839_ins);;
	return nullptr;
}



inline jule::Ptr<_244926d0e_Fn> _244837d30_find_method(_244848912_Struct* _self_, jule::Str _14634_ident, jule::Bool _14646_statically) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_2294dbc85:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _14721_f = *it;
			{
				if (((_14721_f.get()._field_statically == _14646_statically) && (_14721_f.get()._field_ident == _14634_ident))) {
					return _14721_f;
				};
			}
			_iter_next_2294dbc85:;
			++it;
			goto _iter_begin_2294dbc85;
		}
		_iter_end_2294dbc85:;
	};
	return nullptr;
}



inline jule::Ptr<_24556cc1d_Var> _244838d42_find_static(_244848912_Struct* _self_, jule::Str _15734_ident) {
	{
		auto &expr = (*_self_)._field_statics;
		auto it = expr.begin();
		_iter_begin_2294dceb7:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> _15821_v = *it;
			{
				if ((_15821_v.get()._field_ident == _15734_ident)) {
					return _15821_v;
				};
			}
			_iter_next_2294dceb7:;
			++it;
			goto _iter_begin_2294dceb7;
		}
		_iter_end_2294dceb7:;
	};
	return nullptr;
}



inline jule::Ptr<_24483adcc_Field> _244838281_find_field(_244848912_Struct* _self_, jule::Str _16833_ident) {
	{
		auto &expr = (*_self_)._field_fields;
		auto it = expr.begin();
		_iter_begin_2294dde52:;
		if (it != expr.end()) {
			jule::Ptr<_24483adcc_Field> _16921_f = *it;
			{
				if ((_16921_f.get()._field_ident == _16833_ident)) {
					return _16921_f;
				};
			}
			_iter_next_2294dde52:;
			++it;
			goto _iter_begin_2294dde52;
		}
		_iter_end_2294dde52:;
	};
	return nullptr;
}



inline jule::Bool _24483a55d_is_implements(_244848912_Struct* _self_, jule::Ptr<_24547ec51_Trait> _17832_t) {
	{
		auto &expr = (*_self_)._field_implements;
		auto it = expr.begin();
		_iter_begin_2294de42a:;
		if (it != expr.end()) {
			jule::Ptr<_24547ec51_Trait> &_17916_it = *it;
			{
				if ((_17832_t == _17916_it)) {
					return true;
				};
			}
			_iter_next_2294de42a:;
			++it;
			goto _iter_begin_2294de42a;
		}
		_iter_end_2294de42a:;
	};
	return false;
}



inline jule::Bool _244839969_is_derives(_244848912_Struct* _self_, jule::Str _18829_ident) {
	{
		auto &expr = (*_self_)._field_directives;
		auto it = expr.begin();
		_iter_begin_2294e043c:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> &_18916_d = *it;
			{
				if ((_18916_d.get()._field_tag.get()._field_kind == jule::Str("derive", 6))) {
					if (((_18916_d.get()._field_args.len() == 1LL) && (_18916_d.get()._field_args[0LL].get()._field_kind == _18829_ident))) {
						return true;
					};
				};
			}
			_iter_next_2294e043c:;
			++it;
			goto _iter_begin_2294e043c;
		}
		_iter_end_2294e043c:;
	};
	return false;
}



inline jule::Bool _24483d71a_is_uses(_244848912_Struct* _self_, jule::Ptr<_244848912_Struct> _20026_s) {
	{
		auto &expr = (*_self_)._field_uses;
		auto it = expr.begin();
		_iter_begin_2294e2be2:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> &_20116_u = *it;
			{
				while ((_20026_s == _20116_u)) {
					{
						return true;
					}
				_iter_next_2294e3495:;
				}
				_iter_end_2294e3495:;;
			}
			_iter_next_2294e2be2:;
			++it;
			goto _iter_begin_2294e2be2;
		}
		_iter_end_2294e2be2:;
	};
	return false;
}



inline jule::Bool _24483ddd0_has_ref_accessible(_244848912_Struct* _self_) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_2294e3693:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> &_21116_m = *it;
			{
				if (((_21116_m.get()._field_params.len() > 0LL) && _244925d63_is_ref(_21116_m.get()._field_params[0LL].ptr()))) {
					return true;
				};
			}
			_iter_next_2294e3693:;
			++it;
			goto _iter_begin_2294e3693;
		}
		_iter_end_2294e3693:;
	};
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _244848912_Struct _Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244851079_FieldIns _Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24491e895_OperandExprModel _Src) {
	_Stream << "OperandExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24491ea82_BinopExprModel _Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24491ec6e_UnaryExprModel _Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24491ee5b_StructArgExprModel _Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244920148_StructLitExprModel _Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244920335_AllocStructLitExprModel _Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244920522_CastingExprModel _Src) {
	_Stream << "CastingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24492070e_FnCallExprModel _Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "except:" << _Src._field_except << ", ";
	_Stream << "assigned:" << _Src._field_assigned;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2449208eb_SliceExprModel _Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244920ad8_IndexingExprModel _Src) {
	_Stream << "IndexingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244920cc5_AnonFnExprModel _Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244920eb2_KeyValPairExprModel _Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24492119e_MapExprModel _Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24492138b_SlicingExprModel _Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244921578_TraitSubIdentExprModel _Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "trt:" << _Src._field_trt;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244921996_StructSubIdentExprModel _Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244921b83_StructStaticIdentExprModel _Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244921d70_ArrayExprModel _Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24492205c_CommonIdentExprModel _Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244922249_CommonSubIdentExprModel _Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244922436_TupleExprModel _Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244922623_BuiltinOutCallExprModel _Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244922810_BuiltinOutlnCallExprModel _Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2449229ec_BuiltinCloneCallExprModel _Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244922bd9_BuiltinNewCallExprModel _Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244922dc6_BuiltinPanicCallExprModel _Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2449230b3_BuiltinAssertCallExprModel _Src) {
	_Stream << "BuiltinAssertCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "log:" << _Src._field_log;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2449232a0_BuiltinMakeCallExprModel _Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24492348c_BuiltinAppendCallExprModel _Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244923679_BuiltinCopyCallExprModel _Src) {
	_Stream << "BuiltinCopyCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244923866_BuiltinErrorCallExprModel _Src) {
	_Stream << "BuiltinErrorCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244921765_SizeofExprModel _Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244923ec6_AlignofExprModel _Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2449241b3_RuneExprModel _Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2449243a0_IntegratedToStrExprModel _Src) {
	_Stream << "IntegratedToStrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24492458c_BackendEmitExprModel _Src) {
	_Stream << "BackendEmitExprModel{";
	_Stream << "code:" << _Src._field_code << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244924779_FreeExprModel _Src) {
	_Stream << "FreeExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _244924d0c_RetType _Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_244928ae1_ParamIns> _24492588a_instance(jule::Ptr<_2449254c2_Param> _self_) {
	return jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=_self_, });
}



inline jule::Bool _244925aee_is_self(_2449254c2_Param* _self_) {
	return (((*_self_)._field_ident == jule::Str("&self", 5)) || ((*_self_)._field_ident == jule::Str("self", 4)));
}



inline jule::Bool _244925d63_is_ref(_2449254c2_Param* _self_) {
	return ((!((*_self_)._field_ident.empty())) && ((*_self_)._field_ident[0LL] == '&'));
}







std::ostream &operator<<(std::ostream &_Stream, _2449254c2_Param _Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _244927271_is_void(_244926d0e_Fn* _self_) {
	return ((*_self_)._field_result == nullptr);
}



inline jule::Bool _2449274d5_is_method(_244926d0e_Fn* _self_) {
	return ((*_self_)._field_owner != nullptr);
}



inline jule::Bool _244927749_is_entry_point(_244926d0e_Fn* _self_) {
	return ((*_self_)._field_ident == jule::Str("main", 4));
}



inline jule::Bool _2449279ad_is_init(_244926d0e_Fn* _self_) {
	return ((*_self_)._field_ident == jule::Str("init", 4));
}



inline jule::Bool _244927c22_is_anon(_244926d0e_Fn* _self_) {
	return _2431e705e_is_anon_ident((*_self_)._field_ident);
}



inline jule::Bool _244927e86_any_var(_244926d0e_Fn* _self_) {
	return (((*_self_)._field_result != nullptr) && ((*_self_)._field_result.get()._field_idents.len() > 0LL));
}



inline jule::Ptr<_2449299b0_FnIns> _2449281ea_instance_force(jule::Ptr<_244926d0e_Fn> _self_) {
	jule::Ptr<_2449299b0_FnIns> _10017_ins = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_decl=_self_, ._field_scope=jule::new_ptr<_24552937d_Scope>(), ._field_refers=static__24492cba0_new(), });;
	_10017_ins.get()._field_params=jule::Slice<jule::Ptr<_244928ae1_ParamIns>>::alloc(0LL,_self_.get()._field_params.len());
	{
		auto &expr = _self_.get()._field_params;
		auto it = expr.begin();
		_iter_begin_229507025:;
		if (it != expr.end()) {
			jule::Ptr<_2449254c2_Param> _10721_p = *it;
			{
				_10017_ins.get()._field_params = jule::alloc_for_append(_10017_ins.get()._field_params,1);_10017_ins.get()._field_params.__push(_24492588a_instance(_10721_p));;
			}
			_iter_next_229507025:;
			++it;
			goto _iter_begin_229507025;
		}
		_iter_end_229507025:;
	};
	if ((_10017_ins.get()._field_decl.get()._field_result != nullptr)) {
		_10017_ins.get()._field_result=_10017_ins.get()._field_decl.get()._field_result.get()._field_kind.get()._field_kind;
	};
	return _10017_ins;
}



inline jule::Ptr<_2449299b0_FnIns> _24492845e_instance(jule::Ptr<_244926d0e_Fn> _self_) {
	if (((_self_.get()._field_generics.len() == 0LL) && (_self_.get()._field_instances.len() == 1LL))) {
		return _self_.get()._field_instances[0LL];
	};
	return _2449281ea_instance_force(_self_);
}



inline jule::Ptr<_2449299b0_FnIns> _244928739_append_instance(_244926d0e_Fn* _self_, jule::Ptr<_2449299b0_FnIns>& _12839_ins) {
	if (((*_self_)._field_generics.len() == 0LL)) {
		if (((*_self_)._field_instances.len() == 1LL)) {
			return (*_self_)._field_instances[0LL];
		};
		(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_12839_ins);;
		return nullptr;
	};
	if (((*_self_)._field_instances.len() == 0LL)) {
		(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_12839_ins);;
		return nullptr;
	};
	{
		auto &expr = (*_self_)._field_instances;
		auto it = expr.begin();
		_iter_begin_22950b0c3:;
		if (it != expr.end()) {
			jule::Ptr<_2449299b0_FnIns> _14421_ains = *it;
			{
				if (_24492b3b8_same(_14421_ains.ptr(), _12839_ins)) {
					return _14421_ains;
				};
			}
			_iter_next_22950b0c3:;
			++it;
			goto _iter_begin_22950b0c3;
		}
		_iter_end_22950b0c3:;
	};
	(*_self_)._field_instances = jule::alloc_for_append((*_self_)._field_instances,1);(*_self_)._field_instances.__push(_12839_ins);;
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _244926d0e_Fn _Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _244928eba_to_str(_244928ae1_ParamIns* _self_) {
	jule::Str _16617_s = jule::Str();;
	if ((*_self_)._field_decl.get()._field_mutable) {
		_16617_s+=jule::Str("mut ", 4);
	};
	if ((*_self_)._field_decl.get()._field_reference) {
		_16617_s+=jule::Str("&_:", 3);
	};
	if (_244925aee_is_self((*_self_)._field_decl.ptr())) {
		if (_244925d63_is_ref((*_self_)._field_decl.ptr())) {
			_16617_s+=jule::Str("&", 1);
		};
		_16617_s+=jule::Str("self", 4);
		return _16617_s;
	};
	if ((*_self_)._field_decl.get()._field_variadic) {
		_16617_s+=jule::Str("...", 3);
	};
	if (((*_self_)._field_kind != nullptr)) {
		_16617_s+=_2455e1423_to_str((*_self_)._field_kind.ptr());
	};
	return _16617_s;
}







std::ostream &operator<<(std::ostream &_Stream, _244928ae1_ParamIns _Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _244929ce0_to_str(_2449299b0_FnIns* _self_) {
	;
	return _24492b6c6_get_kind_str(&(*_self_), false);
}



inline jule::Bool _24492a0ed_equals(jule::Ptr<_2449299b0_FnIns> _self_, jule::Ptr<_2455e1027_TypeKind> _21726_other) {
	jule::Ptr<_2449299b0_FnIns> _21813_f = _2455e4327_fnc(_21726_other.ptr());;
	if ((_21813_f == nullptr)) {
		return false;
	};
	return _24492a560_equals_fn(_self_, _21813_f);
}



inline jule::Bool _24492a560_equals_fn(jule::Ptr<_2449299b0_FnIns> _self_, jule::Ptr<_2449299b0_FnIns>& _22830_f) {
	if ((_self_.get()._field_decl.get()._field_exceptional != _22830_f.get()._field_decl.get()._field_exceptional)) {
		return false;
	};
	if ((_self_.get()._field_decl.get()._field_unsafety != _22830_f.get()._field_decl.get()._field_unsafety)) {
		return false;
	};
	if ((_244927271_is_void(_self_.get()._field_decl.ptr()) != _244927271_is_void(_22830_f.get()._field_decl.ptr()))) {
		return false;
	};
	jule::Fn<jule::Bool(jule::Ptr<_244928ae1_ParamIns>,jule::Ptr<_244928ae1_ParamIns>)> _24113_check_params = jule::Fn<jule::Bool(jule::Ptr<_244928ae1_ParamIns>,jule::Ptr<_244928ae1_ParamIns>)>([=](jule::Ptr<_244928ae1_ParamIns> _24131_p1, jule::Ptr<_244928ae1_ParamIns> _24146_p2) mutable -> jule::Bool {
		if ((_24131_p1.get()._field_decl.get()._field_mutable != _24146_p2.get()._field_decl.get()._field_mutable)) {
			return false;
		};
		if (_244925aee_is_self(_24131_p1.get()._field_decl.ptr())) {
			if ((!(_244925aee_is_self(_24146_p2.get()._field_decl.ptr())))) {
				return false;
			};
			if ((_244925d63_is_ref(_24131_p1.get()._field_decl.ptr()) != _244925d63_is_ref(_24146_p2.get()._field_decl.ptr()))) {
				return false;
			};
			return true;
		};
		if ((_24131_p1.get()._field_decl.get()._field_reference != _24146_p2.get()._field_decl.get()._field_reference)) {
			return false;
		};
		if ((_24131_p1.get()._field_decl.get()._field_variadic != _24146_p2.get()._field_decl.get()._field_variadic)) {
			return false;
		};
		return _2455e1731_equals(_24131_p1.get()._field_kind, _24146_p2.get()._field_kind);
	});;
	if ((_22830_f.get()._field_params.len() != _self_.get()._field_params.len())) {
		return false;
	};
	jule::I32 _27317_i = 0LL;;
	for (; (_27317_i < _self_.get()._field_params.len()); (_27317_i)++) {
		{
			if ((!(_24113_check_params(_self_.get()._field_params[_27317_i],_22830_f.get()._field_params[_27317_i])))) {
				return false;
			};
		}
	_iter_next_229519972:;
	}
	_iter_end_229519972:;;
	if ((!(_244927271_is_void(_self_.get()._field_decl.ptr())))) {
		if ((!(_2455e1731_equals(_self_.get()._field_result, _22830_f.get()._field_result)))) {
			return false;
		};
	};
	return true;
}



inline jule::Bool _24492a86d_equals_trait(jule::Ptr<_2449299b0_FnIns> _self_, jule::Ptr<_2449299b0_FnIns>& _29029_other) {
	if ((!(_24492a560_equals_fn(_self_, _29029_other)))) {
		return false;
	};
	if ((_self_.get()._field_decl.get()._field_generics.len() != _29029_other.get()._field_decl.get()._field_generics.len())) {
		return false;
	};
	return true;
}



inline jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _24492aad2_types(_2449299b0_FnIns* _self_) {
	{
		
		if (((*_self_)._field_result == nullptr)) {
			_case_begin_22951d0b3:;
			{
				return nullptr;
			}
		}
		else if ((_2455e4cc8_tup((*_self_)._field_result.ptr()) == nullptr)) {
			_case_begin_22951d129:;
			{
				return jule::Slice<jule::Ptr<_2455e1027_TypeKind>>::make({(*_self_)._field_result});
			}
		}
		else {
			_case_begin_22951d04c:;
			{
				return _2455e4cc8_tup((*_self_)._field_result.ptr()).get()._field_types;
			}
		}
		_match_end_22951ce70:;
	};
}



inline jule::Bool _24492ad46_is_builtin(_2449299b0_FnIns* _self_) {
	return ((*_self_)._field_caller != nullptr);
}



inline jule::Bool _24492b0aa_is_anon(_2449299b0_FnIns* _self_) {
	return ((*_self_)._field_anon || (((*_self_)._field_decl != nullptr) && _244927c22_is_anon((*_self_)._field_decl.ptr())));
}



inline jule::Bool _24492b3b8_same(_2449299b0_FnIns* _self_, jule::Ptr<_2449299b0_FnIns> _32723_f) {
	if ((((*_self_)._field_decl != _32723_f.get()._field_decl) || (_32723_f.get()._field_generics.len() != (*_self_)._field_generics.len()))) {
		return false;
	};
	{
		auto &expr = (*_self_)._field_generics;
		auto it = expr.begin();
		_iter_begin_22952198a:;
		if (it != expr.end()) {
			jule::I32 _33213_i = it - expr.begin();
			jule::Ptr<_2455de7ea_InsGeneric> &_33216_g = *it;
			{
				if ((!(_2455e1731_equals(_33216_g.get()._field_kind, _32723_f.get()._field_generics[_33213_i].get()._field_kind)))) {
					return false;
				};
			}
			_iter_next_22952198a:;
			++it;
			_33213_i++;
			goto _iter_begin_22952198a;
		}
		_iter_end_22952198a:;
	};
	return true;
}



inline jule::Str _24492b6c6_get_kind_str(_2449299b0_FnIns* _self_, jule::Bool _34331_ident) {
	jule::Str _34417_s = jule::Str();;
	if ((*_self_)._field_decl.get()._field_unsafety) {
		_34417_s+=jule::Str("unsafe ", 7);
	};
	_34417_s+=jule::Str("fn", 2);
	if ((_34331_ident && ((*_self_)._field_decl != nullptr))) {
		_34417_s+=(jule::Str(" ", 1) + (*_self_)._field_decl.get()._field_ident);
	};
	_34417_s+=jule::Str("(", 1);
	jule::I32 _35713_n = (*_self_)._field_params.len();;
	if ((_35713_n > 0LL)) {
		{
			auto &expr = (*_self_)._field_params;
			auto it = expr.begin();
			_iter_begin_229525928:;
			if (it != expr.end()) {
				jule::Ptr<_244928ae1_ParamIns> &_35920_p = *it;
				{
					_34417_s+=_244928eba_to_str(_35920_p.ptr());
					_34417_s+=jule::Str(",", 1);
				}
				_iter_next_229525928:;
				++it;
				goto _iter_begin_229525928;
			}
			_iter_end_229525928:;
		};
		(_34417_s).mut_slice(0LL,(_34417_s.len() - 1LL));;
	};
	_34417_s+=jule::Str(")", 1);
	if ((*_self_)._field_decl.get()._field_exceptional) {
		_34417_s+=jule::Str("!", 1);
	};
	if ((!(_244927271_is_void((*_self_)._field_decl.ptr())))) {
		_34417_s+=jule::Str(":", 1);
		_34417_s+=_2455e1423_to_str((*_self_)._field_result.ptr());
	};
	return _34417_s;
}







std::ostream &operator<<(std::ostream &_Stream, _2449299b0_FnIns _Src) {
	_Stream << _244929ce0_to_str(&_Src);
	return _Stream;
}



inline jule::Ptr<_24492c8b4_ReferenceStack> static__24492cba0_new(void) {
	return jule::new_ptr<_24492c8b4_ReferenceStack>(_24492c8b4_ReferenceStack{._field_buffer=jule::Slice<jule::Any>::alloc(0LL,10LL)});
}



inline jule::I32 _24492d035_len(_24492c8b4_ReferenceStack* _self_) {
	return static_cast<jule::I32>((*_self_)._field_buffer.len());
}



inline jule::Any _24492d343_at(_24492c8b4_ReferenceStack* _self_, jule::I32 _6825_i) {
	return jule::Any((*_self_)._field_buffer[_6825_i]);
}



inline void _24492d5b8_push(_24492c8b4_ReferenceStack* _self_, jule::Any _7331_ref) {
	(*_self_)._field_buffer = jule::alloc_for_append((*_self_)._field_buffer,1);(*_self_)._field_buffer.__push(jule::Any(_7331_ref));;
}



inline jule::Bool _229b19989_exist(_24492c8b4_ReferenceStack* _self_, jule::Ptr<_2449299b0_FnIns> _7827_t) {
	{
		auto &expr = (*_self_)._field_buffer;
		auto it = expr.begin();
		_iter_begin_229b1ac76:;
		if (it != expr.end()) {
			jule::Any &_7916_ref = *it;
			{
				if ((_7916_ref == _7827_t)) {
					return true;
				};
			}
			_iter_next_229b1ac76:;
			++it;
			goto _iter_begin_229b1ac76;
		}
		_iter_end_229b1ac76:;
	};
	return false;
}

inline jule::Bool _229b2e284_exist(_24492c8b4_ReferenceStack* _self_, jule::Ptr<_24556cc1d_Var> _7827_t) {
	{
		auto &expr = (*_self_)._field_buffer;
		auto it = expr.begin();
		_iter_begin_229b3052c:;
		if (it != expr.end()) {
			jule::Any &_7916_ref = *it;
			{
				if ((_7916_ref == _7827_t)) {
					return true;
				};
			}
			_iter_next_229b3052c:;
			++it;
			goto _iter_begin_229b3052c;
		}
		_iter_end_229b3052c:;
	};
	return false;
}

inline jule::Bool _229bbe214_exist(_24492c8b4_ReferenceStack* _self_, jule::Ptr<_244874c5c_StructIns> _7827_t) {
	{
		auto &expr = (*_self_)._field_buffer;
		auto it = expr.begin();
		_iter_begin_229bc0501:;
		if (it != expr.end()) {
			jule::Any &_7916_ref = *it;
			{
				if ((_7916_ref == _7827_t)) {
					return true;
				};
			}
			_iter_next_229bc0501:;
			++it;
			goto _iter_begin_229bc0501;
		}
		_iter_end_229bc0501:;
	};
	return false;
}

inline jule::Bool _229e4ac54_exist(_24492c8b4_ReferenceStack* _self_, jule::Ptr<_24547ec51_Trait> _7827_t) {
	{
		auto &expr = (*_self_)._field_buffer;
		auto it = expr.begin();
		_iter_begin_229e4beec:;
		if (it != expr.end()) {
			jule::Any &_7916_ref = *it;
			{
				if ((_7916_ref == _7827_t)) {
					return true;
				};
			}
			_iter_next_229e4beec:;
			++it;
			goto _iter_begin_229e4beec;
		}
		_iter_end_229e4beec:;
	};
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _24492c8b4_ReferenceStack _Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24492dc7d_Pass _Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_244933227_SymbolBuilder> _2449336cd_get_root(jule::Ptr<_244933227_SymbolBuilder> _self_) {
	jule::Ptr<_244933227_SymbolBuilder> _31617_root = _self_;;
	while ((_31617_root.get()._field_owner != nullptr)) {
		{
			_31617_root=_31617_root.get()._field_owner;
		}
	_iter_next_22953ddd6:;
	}
	_iter_end_22953ddd6:;;
	return _31617_root;
}



inline void _244933a96_push_err(_244933227_SymbolBuilder* _self_, jule::Ptr<_2431e4523_Token>& _32328_token, jule::Str _32343_fmt, jule::Slice<jule::Any> _32356_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_24554e5e5_compiler_err(_32328_token,true,_32343_fmt,jule::Any(_32356_args)));;
}



inline void _244933e5e_push_err_text(_244933227_SymbolBuilder* _self_, jule::Ptr<_2431e4523_Token>& _32733_token, jule::Str _32748_fmt, jule::Slice<jule::Any> _32761_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_24554e5e5_compiler_err(_32733_token,false,_32748_fmt,jule::Any(_32761_args)));;
}



inline void _24493427d_push_suggestion(_244933227_SymbolBuilder* _self_, jule::Str _33234_fmt, jule::Slice<jule::Any> _33247_args) {
	{
		_245550a7a_push_suggestion((&((*_self_)._field_errors[((*_self_)._field_errors.len() - 1LL)])),_33234_fmt,jule::Any(_33247_args));
	};
}



inline jule::Bool _244934657_check_cpp_use_decl_path(_244933227_SymbolBuilder* _self_, jule::Ptr<_244870c25_UseDecl>& _33643_decl, jule::Str _33659_path) {
	jule::Bool _33672_ok = jule::Bool();
	jule::Str _33713_ext = _241e8d1ad_ext(_33659_path);;
	if (((!(_242dae265_is_valid_header_ext(_33713_ext))) && (!(_242dae4b8_is_valid_cpp_ext(_33713_ext))))) {
		_244933a96_push_err(&(*_self_), _33643_decl.get()._field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>::make({jule::Any(_33713_ext)}));
		_33672_ok = false;
		return _33672_ok;
	};
	jule::Ptr<_241cb4ee6_Status> _34413_info = ({
		auto except = static__241ddc2b6_of(_33659_path);
		(except.ok()) ? (except.result) : ({{
			_244933a96_push_err(&(*_self_), _33643_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_33643_decl.get()._field_link_path)}));
			_33672_ok = false;
			return _33672_ok;
		} jule::Ptr<_241cb4ee6_Status>();});
	});;
	if (_2410b81b8_is_dir(_34413_info.ptr())) {
		_244933a96_push_err(&(*_self_), _33643_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_33643_decl.get()._field_link_path)}));
		_33672_ok = false;
		return _33672_ok;
	};
	_33672_ok = true;
	return _33672_ok;
}



inline jule::Ptr<_245547db3_ImportInfo> _244934965_build_cpp_header_import(_244933227_SymbolBuilder* _self_, jule::Ptr<_244870c25_UseDecl>& _35647_decl) {
	jule::Str _35717_path = _35647_decl.get()._field_link_path;;
	if ((!(_242dae133_is_std_header_path(_35647_decl.get()._field_link_path)))) {
		_35717_path=_241e8b167_join(jule::Slice<jule::Str>::make({_2431ea2a4_dir(_35647_decl.get()._field_token.get()._field_file.ptr()),_35647_decl.get()._field_link_path}));
		jule::Bool _36121_ok = _244934657_check_cpp_use_decl_path(&(*_self_), _35647_decl,_35717_path);;
		if ((!(_36121_ok))) {
			return nullptr;
		};
		std::tie(_35717_path,_36121_ok) = _241e9c8b5_abs(_35717_path);
		if ((!(_36121_ok))) {
			_244933a96_push_err(&(*_self_), _35647_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_35647_decl.get()._field_link_path)}));
		};
	};
	return jule::new_ptr<_245547db3_ImportInfo>(_245547db3_ImportInfo{._field_token=_35647_decl.get()._field_token, ._field_path=_35717_path, ._field_link_path=_35647_decl.get()._field_link_path, ._field_ident=jule::Str(), ._field_cpp_linked=true, ._field_std=false, ._field_package=nullptr, });
}



inline jule::Ptr<_245547db3_ImportInfo> _244934c84_build_std_import(_244933227_SymbolBuilder* _self_, jule::Ptr<_244870c25_UseDecl>& _38440_decl) {
	jule::Str _38517_path = _38440_decl.get()._field_link_path.slice(5LL);;
	_38517_path=_242d62e1c_replace(_38517_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_38517_path=_241e8b167_join(jule::Slice<jule::Str>::make({_242ddd4e7_PATH_STDLIB,_38517_path}));
	jule::Bool _38820_ok;;
	std::tie(_38517_path,_38820_ok) = _241e9c8b5_abs(_38517_path);
	if ((!(_38820_ok))) {
		_244933a96_push_err(&(*_self_), _38440_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_38440_decl.get()._field_link_path)}));
		return nullptr;
	};
	jule::Ptr<_241cb4ee6_Status> _39513_info = ({
		auto except = static__241ddc2b6_of(_38517_path);
		(except.ok()) ? (except.result) : ({{
			_244933a96_push_err(&(*_self_), _38440_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_38440_decl.get()._field_link_path)}));
			return nullptr;
		} jule::Ptr<_241cb4ee6_Status>();});
	});;
	if ((!(_2410b81b8_is_dir(_39513_info.ptr())))) {
		_244933a96_push_err(&(*_self_), _38440_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_38440_decl.get()._field_link_path)}));
		return nullptr;
	};
	jule::I32 _40513_i = (_242cd87cc_find_last(_38440_decl.get()._field_link_path,jule::Str("::", 2)) + 1LL);;
	jule::Str _40613_ident = _38440_decl.get()._field_link_path.slice(_40513_i);;
	return jule::new_ptr<_245547db3_ImportInfo>(_245547db3_ImportInfo{._field_token=_38440_decl.get()._field_token, ._field_path=_38517_path, ._field_link_path=_38440_decl.get()._field_link_path, ._field_ident=_40613_ident, ._field_alias=_38440_decl.get()._field_alias, ._field_cpp_linked=false, ._field_std=true, ._field_import_all=_38440_decl.get()._field_full, ._field_package=jule::new_ptr<_24554ad1c_Package>(_24554ad1c_Package{._field_files=nullptr}), });
}



inline jule::Ptr<_245547db3_ImportInfo> _244935092_build_ident_import(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Ptr<_244870c25_UseDecl>& _42343_decl) {
	jule::Str _42413_mod_path = _2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._24554472d_get_mod_path(_self_.get()._field_importer);;
	if ((_42413_mod_path.len() == 0LL)) {
		_244933a96_push_err(_self_.ptr(), _42343_decl.get()._field_token,jule::Str("no module file found in current directory or any parent directory", 65),jule::Slice<jule::Any>());
		_24493427d_push_suggestion(_self_.ptr(), jule::Str("use \"julec mod init\" command to initialize module", 49),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Str _43117_path = _42343_decl.get()._field_link_path;;
	_43117_path=_242d62e1c_replace(_43117_path,jule::Str("::", 2),static_cast<jule::Str>(92LL),-1LL);
	_43117_path=_241e8b167_join(jule::Slice<jule::Str>::make({_42413_mod_path,_43117_path}));
	jule::Bool _43520_ok;;
	std::tie(_43117_path,_43520_ok) = _241e9c8b5_abs(_43117_path);
	if ((!(_43520_ok))) {
		_244933a96_push_err(_self_.ptr(), _42343_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_42343_decl.get()._field_link_path)}));
		return nullptr;
	};
	jule::Ptr<_241cb4ee6_Status> _44213_info = ({
		auto except = static__241ddc2b6_of(_43117_path);
		(except.ok()) ? (except.result) : ({{
			_244933a96_push_err(_self_.ptr(), _42343_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_42343_decl.get()._field_link_path)}));
			return nullptr;
		} jule::Ptr<_241cb4ee6_Status>();});
	});;
	if ((!(_2410b81b8_is_dir(_44213_info.ptr())))) {
		_244933a96_push_err(_self_.ptr(), _42343_decl.get()._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>::make({jule::Any(_42343_decl.get()._field_link_path)}));
		return nullptr;
	};
	jule::I32 _45213_i = (_242cd87cc_find_last(_42343_decl.get()._field_link_path,jule::Str("::", 2)) + 1LL);;
	jule::Str _45313_ident = _42343_decl.get()._field_link_path.slice(_45213_i);;
	return jule::new_ptr<_245547db3_ImportInfo>(_245547db3_ImportInfo{._field_token=_42343_decl.get()._field_token, ._field_path=_43117_path, ._field_link_path=_42343_decl.get()._field_link_path, ._field_ident=_45313_ident, ._field_alias=_42343_decl.get()._field_alias, ._field_cpp_linked=false, ._field_std=false, ._field_import_all=_42343_decl.get()._field_full, ._field_package=jule::new_ptr<_24554ad1c_Package>(_24554ad1c_Package{._field_files=nullptr}), });
}



inline jule::Ptr<_245547db3_ImportInfo> _2449353a0_build_import(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Ptr<_244870c25_UseDecl>& _47037_decl) {
	{
		
		if (_47037_decl.get()._field_cpp_linked) {
			_case_begin_229557817:;
			{
				return _244934965_build_cpp_header_import(_self_.ptr(), _47037_decl);
			}
		}
		else if (_47037_decl.get()._field_std) {
			_case_begin_229557a7b:;
			{
				return _244934c84_build_std_import(_self_.ptr(), _47037_decl);
			}
		}
		else {
			_case_begin_229557097:;
			{
				return _244935092_build_ident_import(_self_, _47037_decl);
			}
		}
		_match_end_229556eba:;
	};
}



inline jule::Bool _2449356d0_check_duplicate_use_decl(_244933227_SymbolBuilder* _self_, jule::Ptr<_245547db3_ImportInfo>& _48144_pkg) {
	jule::Bool _48164_ok = jule::Bool();
	jule::Ptr<_245547db3_ImportInfo> _48313_lpkg = _2455b0b1d_select_package((*_self_)._field_table.ptr(), jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>([=](jule::Ptr<_245547db3_ImportInfo> _48349_spkg) mutable -> jule::Bool {
		return (_48144_pkg.get()._field_path == _48349_spkg.get()._field_path);
	}));;
	if ((_48313_lpkg == nullptr)) {
		_48164_ok = true;
		return _48164_ok;
	};
	_244933a96_push_err(&(*_self_), _48144_pkg.get()._field_token,jule::Str("use declaration duplication: @ is already used above", 52),jule::Slice<jule::Any>::make({jule::Any(_48144_pkg.get()._field_link_path)}));
	_24493427d_push_suggestion(&(*_self_), jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>());
	_48164_ok = false;
	return _48164_ok;
}



inline void _244935a10_impl_import_selections(_244933227_SymbolBuilder* _self_, jule::Ptr<_245547db3_ImportInfo>& _49546_imp, jule::Ptr<_244870c25_UseDecl>& _49569_decl) {
	_49546_imp.get()._field_selected=_49569_decl.get()._field_selected;
	{
		auto &expr = _49546_imp.get()._field_selected;
		auto it = expr.begin();
		_iter_begin_22955b585:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> _49716_item = *it;
			{
				{
					auto &expr = _49546_imp.get()._field_selected;
					auto it = expr.begin();
					_iter_begin_22955c113:;
					if (it != expr.end()) {
						jule::Ptr<_2431e4523_Token> _49820_citem = *it;
						{
							if ((_49716_item == _49820_citem)) {
								goto _iter_end_22955c113;
							} else if ((_49716_item.get()._field_kind == _49820_citem.get()._field_kind)) {
								_244933a96_push_err(&(*_self_), _49716_item,jule::Str("duplicated selection: @ is already selected", 43),jule::Slice<jule::Any>::make({jule::Any(_49716_item.get()._field_kind)}));
								_24493427d_push_suggestion(&(*_self_), jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>());
								goto _iter_end_22955c113;
							};
						}
						_iter_next_22955c113:;
						++it;
						goto _iter_begin_22955c113;
					}
					_iter_end_22955c113:;
				};
			}
			_iter_next_22955b585:;
			++it;
			goto _iter_begin_22955b585;
		}
		_iter_end_22955b585:;
	};
}



inline jule::Str _244935d1d_get_as_link_path(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Str _51040_path) {
	if (_241ec93e7_has_prefix(_51040_path,_242ddd4e7_PATH_STDLIB)) {
		(_51040_path).mut_slice(_242ddd4e7_PATH_STDLIB.len());;
		return (jule::Str("std", 3) + _242d62e1c_replace(_51040_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL));
	};
	jule::Str _51614_root;;
	std::tie(_51614_root,std::ignore) = _241e9c8b5_abs(_2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._24554472d_get_mod_path(_self_.get()._field_importer));
	(_51040_path).mut_slice(_51614_root.len());;
	if ((_51040_path[0LL] == 92LLU)) {
		(_51040_path).mut_slice(1LL);;
	};
	return _242d62e1c_replace(_51040_path,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL);
}



inline void _2449361d6_push_cycle_error(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Ptr<_244933227_SymbolBuilder>& _52437_sb, jule::Str _52457_path, jule::Str& _52473_message) {
	;
	jule::Str _52713_refers_to = _242dbb0c9_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>::make({jule::Any(_244935d1d_get_as_link_path(_self_, _2431ea2a4_dir(_52437_sb.get()._field_table.get()._field_file.ptr()))),jule::Any(_244935d1d_get_as_link_path(_self_, _52457_path))}));;
	(_52473_message).buffer.insert(0, (((_241ec9e0e_repeat(jule::Str(" ", 1),4LL) + _52713_refers_to) + jule::Str("\n", 1))));;
}



inline void _24493659e_push_cross_cycle_error(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Ptr<_244933227_SymbolBuilder>& _53443_target, jule::Ptr<_245547db3_ImportInfo>& _53468_imp, jule::Ptr<_2431e4523_Token>& _53487_error_token) {
	jule::Str _53517_message = jule::Str();;
	_2449361d6_push_cycle_error(_self_, _self_,_53468_imp.get()._field_path,_53517_message);
	jule::Ptr<_244933227_SymbolBuilder> _53917_owner = _self_.get()._field_owner;;
	jule::Ptr<_244933227_SymbolBuilder> _54017_old = _self_;;
	while ((_53917_owner.get()._field_owner != nullptr)) {
		{
			_2449361d6_push_cycle_error(_self_, _54017_old.get()._field_owner,_2431ea2a4_dir(_54017_old.get()._field_table.get()._field_file.ptr()),_53517_message);
			if ((_53917_owner.get()._field_owner == _53443_target)) {
				_2449361d6_push_cycle_error(_self_, _53443_target,_2431ea2a4_dir(_53917_owner.get()._field_table.get()._field_file.ptr()),_53517_message);
				goto _iter_end_229563b64;
			};
			_54017_old=_53917_owner;
			_53917_owner=_53917_owner.get()._field_owner;
		}
	_iter_next_229563b64:;
	}
	_iter_end_229563b64:;;
	_244933a96_push_err(_self_.ptr(), _53487_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>::make({jule::Any(_53517_message)}));
}



inline jule::Bool _244936956_check_import_cycles(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Ptr<_245547db3_ImportInfo> _55739_imp, jule::Ptr<_244870c25_UseDecl>& _55758_decl) {
	if ((_55739_imp.get()._field_path == _2431ea2a4_dir(_self_.get()._field_table.get()._field_file.ptr()))) {
		_244933a96_push_err(_self_.ptr(), _55758_decl.get()._field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>::make({jule::Any(_244935d1d_get_as_link_path(_self_, _55739_imp.get()._field_path))}));
		return false;
	};
	if ((_self_.get()._field_owner == nullptr)) {
		return true;
	};
	if ((_2431ea2a4_dir(_self_.get()._field_owner.get()._field_table.get()._field_file.ptr()) == _55739_imp.get()._field_path)) {
		_24493659e_push_cross_cycle_error(_self_, _self_.get()._field_owner,_55739_imp,_55758_decl.get()._field_token);
		return false;
	};
	jule::Ptr<_244933227_SymbolBuilder> _57217_owner = _self_.get()._field_owner;;
	_julec_label_iter:;
	if ((_2431ea2a4_dir(_57217_owner.get()._field_table.get()._field_file.ptr()) == _55739_imp.get()._field_path)) {
		_24493659e_push_cross_cycle_error(_self_, _57217_owner,_55739_imp,_55758_decl.get()._field_token);
		return false;
	};
	if ((_57217_owner.get()._field_owner != nullptr)) {
		_57217_owner=_57217_owner.get()._field_owner;
		goto _julec_label_iter;
	};
	return true;
}



inline void _244936d41_check_package_accessibility(_244933227_SymbolBuilder* _self_, jule::Ptr<_244870c25_UseDecl>& _59347_decl, jule::Str& _59364_mod, jule::Str& _59375_path) {
	if (((_2455455b9_Importer_mptr_data[((*_self_)._field_importer).type_offset]._24554472d_get_mod_path((*_self_)._field_importer) != _59364_mod) && _242d62812_contains(_59375_path,jule::Str("internal", 8)))) {
		_244933a96_push_err(&(*_self_), _59347_decl.get()._field_token,jule::Str("you cannot access to internal packages", 38),jule::Slice<jule::Any>());
	};
}



inline jule::Bool _244937209_import_package(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Ptr<_245547db3_ImportInfo>& _59939_imp, jule::Ptr<_244870c25_UseDecl>& _59962_decl) {
	jule::Bool _59980_ok = jule::Bool();
	if (_59939_imp.get()._field_cpp_linked) {
		_59980_ok = true;
		return _59980_ok;
	};
	jule::Ptr<_245547db3_ImportInfo> _60417_port = _2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._245544d49_get_import(_self_.get()._field_importer, _59939_imp.get()._field_path);;
	if ((_60417_port != nullptr)) {
		_59939_imp.get()._field_package=_60417_port.get()._field_package;
		_59939_imp.get()._field_duplicate=true;
		jule::Str _60917_old_mod = _2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._24554472d_get_mod_path(_self_.get()._field_importer);;
		_2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._2455444db_set_mod_path(_self_.get()._field_importer, _2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._245544a3b_mod_by_id(_self_.get()._field_importer, _59939_imp.get()._field_mod_id));
		_244936d41_check_package_accessibility(_self_.ptr(), _59962_decl,_60917_old_mod,_60417_port.get()._field_path);
		_2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._2455444db_set_mod_path(_self_.get()._field_importer, _60917_old_mod);
	} else {
		if ((!(_244936956_check_import_cycles(_self_, _59939_imp,_59962_decl)))) {
			_59980_ok = false;
			return _59980_ok;
		};
		jule::Str _61817_old_mod = _2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._24554472d_get_mod_path(_self_.get()._field_importer);;
		__JULE_DEFER({
			_2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._2455444db_set_mod_path(_self_.get()._field_importer, _61817_old_mod);
		});;
		if (_59939_imp.get()._field_std) {
			_2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._2455444db_set_mod_path(_self_.get()._field_importer, _242ddd4e7_PATH_STDLIB);
		};
		jule::Slice<jule::Ptr<_244823942_Ast>> _62322_asts;;
		jule::Slice<_242dbab89_Log> _62332_errors;;
		std::tie(_62322_asts,_62332_errors) = _2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._245545201_import_package(_self_.get()._field_importer, _59939_imp.get()._field_path,(!(_59939_imp.get()._field_std)));
		if ((_62332_errors.len() > 0LL)) {
			_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_62332_errors);
			_59980_ok = false;
			return _59980_ok;
		};
		_244936d41_check_package_accessibility(_self_.ptr(), _59962_decl,_61817_old_mod,_59939_imp.get()._field_path);
		{
			auto &expr = _62322_asts;
			auto it = expr.begin();
			_iter_begin_229574526:;
			if (it != expr.end()) {
				jule::Ptr<_244823942_Ast> _63125_ast = *it;
				{
					jule::Ptr<_2455b02e3_SymbolTable> _63225_table = nullptr;;
					std::tie(_63225_table,_62332_errors) = _24560c62b_build_symbols(_63125_ast,_self_.get()._field_importer,_self_);
					if ((_62332_errors.len() > 0LL)) {
						_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_62332_errors);
						_244933e5e_push_err_text(_self_.ptr(), _59939_imp.get()._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>::make({jule::Any(_59939_imp.get()._field_link_path)}));
						_59980_ok = false;
						return _59980_ok;
					};
					_59939_imp.get()._field_package.get()._field_files = jule::alloc_for_append(_59939_imp.get()._field_package.get()._field_files,1);_59939_imp.get()._field_package.get()._field_files.__push(_63225_table);;
				}
				_iter_next_229574526:;
				++it;
				goto _iter_begin_229574526;
			}
			_iter_end_229574526:;
		};
	};
	_244935a10_impl_import_selections(_self_.ptr(), _59939_imp,_59962_decl);
	_59980_ok = true;
	return _59980_ok;
}



inline jule::Ptr<_245547db3_ImportInfo> _244937517_import_use_decl(jule::Ptr<_244933227_SymbolBuilder> _self_, jule::Ptr<_244870c25_UseDecl>& _65140_decl) {
	jule::Ptr<_245547db3_ImportInfo> _65217_imp = _2449353a0_build_import(_self_, _65140_decl);;
	if ((_65217_imp == nullptr)) {
		return nullptr;
	};
	jule::Bool _65817_ok = _2449356d0_check_duplicate_use_decl(_self_.ptr(), _65217_imp);;
	if ((!(_65817_ok))) {
		return nullptr;
	};
	_65817_ok=_244937209_import_package(_self_, _65217_imp,_65140_decl);
	_self_.get()._field_table.get()._field_imports = jule::alloc_for_append(_self_.get()._field_table.get()._field_imports,1);_self_.get()._field_table.get()._field_imports.__push(_65217_imp);;
	if (_65817_ok) {
		_2455455b9_Importer_mptr_data[(_self_.get()._field_importer).type_offset]._245545476_imported(_self_.get()._field_importer, _65217_imp);
		return _65217_imp;
	};
	return nullptr;
}



inline void _2449376e3_import_use_decls(jule::Ptr<_244933227_SymbolBuilder> _self_) {
	{
		auto &expr = _self_.get()._field_ast.get()._field_use_decls;
		auto it = expr.begin();
		_iter_begin_22957a0a9:;
		if (it != expr.end()) {
			jule::Ptr<_244870c25_UseDecl> _67321_decl = *it;
			{
				_244937517_import_use_decl(_self_, _67321_decl);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					goto _iter_end_22957a0a9;
				};
			}
			_iter_next_22957a0a9:;
			++it;
			goto _iter_begin_22957a0a9;
		}
		_iter_end_22957a0a9:;
	};
}



inline void _244937968_append_node(_244933227_SymbolBuilder* _self_, _2448245e1_Node& _68335_node) {
	{
		auto &_match_expr{ _68335_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_244874498_Impl>>()) {
			_case_begin_22957ba6c:;
			{
				(*_self_)._field_table.get()._field_impls = jule::alloc_for_append((*_self_)._field_table.get()._field_impls,1);(*_self_)._field_table.get()._field_impls.__push(_244932bc7_build_impl(_68335_node._field_data.operator jule::Ptr<_244874498_Impl>()));;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486e839_TypeAliasDecl>>()) {
			_case_begin_22957a76e:;
			{
				jule::Ptr<_2455e0334_TypeAlias> _68821_ta = _24492e663_build_type_alias(_68335_node._field_data.operator jule::Ptr<_24486e839_TypeAliasDecl>());;
				(*_self_)._field_table.get()._field_type_aliases = jule::alloc_for_append((*_self_)._field_table.get()._field_type_aliases,1);(*_self_)._field_table.get()._field_type_aliases.__push(_68821_ta);;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244873783_StructDecl>>()) {
			_case_begin_22957b671:;
			{
				jule::Ptr<_244848912_Struct> _69121_srct = _24492eec1_build_struct(_68335_node._field_data.operator jule::Ptr<_244873783_StructDecl>());;
				(*_self_)._field_table.get()._field_structs = jule::alloc_for_append((*_self_)._field_table.get()._field_structs,1);(*_self_)._field_table.get()._field_structs.__push(_69121_srct);;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244869ee9_FnDecl>>()) {
			_case_begin_22957b6d7:;
			{
				jule::Ptr<_244926d0e_Fn> _69421_f = _244930b2b_build_fn(_68335_node._field_data.operator jule::Ptr<_244869ee9_FnDecl>());;
				(*_self_)._field_table.get()._field_funcs = jule::alloc_for_append((*_self_)._field_table.get()._field_funcs,1);(*_self_)._field_table.get()._field_funcs.__push(_69421_f);;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244873d8d_TraitDecl>>()) {
			_case_begin_22957bece:;
			{
				jule::Ptr<_24547ec51_Trait> _69721_t = _24493116a_build_trait(_68335_node._field_data.operator jule::Ptr<_244873d8d_TraitDecl>());;
				(*_self_)._field_table.get()._field_traits = jule::alloc_for_append((*_self_)._field_table.get()._field_traits,1);(*_self_)._field_table.get()._field_traits.__push(_69721_t);;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486aec8_VarDecl>>()) {
			_case_begin_22957c045:;
			{
				jule::Ptr<_24556cc1d_Var> _70021_v = _244932688_build_var(_68335_node._field_data.operator jule::Ptr<_24486aec8_VarDecl>());;
				(*_self_)._field_table.get()._field_vars = jule::alloc_for_append((*_self_)._field_table.get()._field_vars,1);(*_self_)._field_table.get()._field_vars.__push(_70021_v);;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244871bc1_EnumDecl>>()) {
			_case_begin_22957c0ab:;
			{
				jule::Ptr<_245481e0c_Enum> _70321_e = _244931951_build_enum(_68335_node._field_data.operator jule::Ptr<_244871bc1_EnumDecl>());;
				(*_self_)._field_table.get()._field_enums = jule::alloc_for_append((*_self_)._field_table.get()._field_enums,1);(*_self_)._field_table.get()._field_enums.__push(_70321_e);;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448728c5_TypeEnumDecl>>()) {
			_case_begin_22957c122:;
			{
				jule::Ptr<_245483507_TypeEnum> _70621_e = _2449323e1_build_type_enum(_68335_node._field_data.operator jule::Ptr<_2448728c5_TypeEnumDecl>());;
				(*_self_)._field_table.get()._field_type_enums = jule::alloc_for_append((*_self_)._field_table.get()._field_type_enums,1);(*_self_)._field_table.get()._field_type_enums.__push(_70621_e);;
			}
		}
		else {
			_case_begin_22957b52d:;
			{
				_244933a96_push_err(&(*_self_), _68335_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_22957a829:;
	};
}



inline void _244937b44_append_nodes(_244933227_SymbolBuilder* _self_) {
	{
		auto &expr = (*_self_)._field_ast.get()._field_nodes;
		auto it = expr.begin();
		_iter_begin_22956bc7c:;
		if (it != expr.end()) {
			_2448245e1_Node _71421_node = *it;
			{
				_244937968_append_node(&(*_self_), _71421_node);
			}
			_iter_next_22956bc7c:;
			++it;
			goto _iter_begin_22956bc7c;
		}
		_iter_end_22956bc7c:;
	};
}



inline void _244937db9_push_directive_pass(_244933227_SymbolBuilder* _self_, jule::Ptr<_2448249dc_Directive>& _71943_d) {
	if ((_71943_d.get()._field_args.len() == 0LL)) {
		_244933a96_push_err(&(*_self_), _71943_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;;
	} else if ((_71943_d.get()._field_args.len() > 1LL)) {
		jule::Ptr<_2431e4523_Token> _72417_arg = _71943_d.get()._field_args[1LL];;
		_244933a96_push_err(&(*_self_), _72417_arg,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2431e4523_Token> _72813_arg = _71943_d.get()._field_args[0LL];;
	if ((_72813_arg.get()._field_id != static_cast<jule::U32>(6LLU))) {
		_244933a96_push_err(&(*_self_), _72813_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	if ((_72813_arg.get()._field_kind[0LL] != '\"')) {
		_244933a96_push_err(&(*_self_), _72813_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	(*_self_)._field_table.get()._field_passes = jule::alloc_for_append((*_self_)._field_table.get()._field_passes,1);(*_self_)._field_table.get()._field_passes.__push(_24492dc7d_Pass{._field_token=_71943_d.get()._field_tag, ._field_text=_72813_arg.get()._field_kind.slice(1LL,(_72813_arg.get()._field_kind.len() - 1LL))});;
}



inline void _244938095_append_top_directives(_244933227_SymbolBuilder* _self_) {
	{
		auto &expr = (*_self_)._field_ast.get()._field_top_directives;
		auto it = expr.begin();
		_iter_begin_22958d6b6:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _74621_d = *it;
			{
				{
					auto &_match_expr{ _74621_d.get()._field_tag.get()._field_kind };
					
					if (_match_expr == jule::Str("pass", 4)) {
						_case_begin_229591675:;
						{
							_244937db9_push_directive_pass(&(*_self_), _74621_d);
						}
					}
					_match_end_2295915ba:;
				};
			}
			_iter_next_22958d6b6:;
			++it;
			goto _iter_begin_22958d6b6;
		}
		_iter_end_22958d6b6:;
	};
}



inline void _244938271_build(jule::Ptr<_244933227_SymbolBuilder> _self_) {
	_self_.get()._field_table=jule::new_ptr<_2455b02e3_SymbolTable>(_2455b02e3_SymbolTable{._field_file=_self_.get()._field_ast.get()._field_file, });
	_244938095_append_top_directives(_self_.ptr());
	_2449376e3_import_use_decls(_self_);
	if ((_self_.get()._field_errors.len() > 0LL)) {
		return;;
	};
	_244937b44_append_nodes(_self_.ptr());
	if ((_self_.get()._field_errors.len() > 0LL)) {
		return;;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _244933227_SymbolBuilder _Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _245480119_to_str(_24547ec51_Trait* _self_) {
	return (*_self_)._field_ident;
}



inline jule::Bool _245480427_equals(jule::Ptr<_24547ec51_Trait> _self_, jule::Ptr<_2455e1027_TypeKind> _2626_other) {
	jule::Ptr<_24547ec51_Trait> _2713_trt = _2455e4800_trt(_2626_other.ptr());;
	return (_self_ == _2713_trt);
}



inline jule::Bool _24548078a_is_builtin(_24547ec51_Trait* _self_) {
	return ((*_self_)._field_token == nullptr);
}



inline jule::Ptr<_244926d0e_Fn> _245480a98_find_method(_24547ec51_Trait* _self_, jule::Str _4034_ident) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_229595536:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _4121_f = *it;
			{
				if ((_4121_f.get()._field_ident == _4034_ident)) {
					return _4121_f;
				};
			}
			_iter_next_229595536:;
			++it;
			goto _iter_begin_229595536;
		}
		_iter_end_229595536:;
	};
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _24547ec51_Trait _Src) {
	_Stream << _245480119_to_str(&_Src);
	return _Stream;
}



inline jule::Bool _245481802_auto_expr(_245481417_EnumItem* _self_) {
	return ((*_self_)._field_value == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _245481417_EnumItem _Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _245482270_to_str(_245481e0c_Enum* _self_) {
	return (*_self_)._field_ident;
}



inline jule::Bool _24548257d_equals(jule::Ptr<_245481e0c_Enum> _self_, jule::Ptr<_2455e1027_TypeKind> _3826_other) {
	jule::Ptr<_245481e0c_Enum> _3913_enm = _2455e3876_enm(_3826_other.ptr());;
	return (_self_ == _3913_enm);
}



inline jule::Ptr<_245481417_EnumItem> _2454829bd_find_item(_245481e0c_Enum* _self_, jule::Str _4732_ident) {
	{
		auto &expr = (*_self_)._field_items;
		auto it = expr.begin();
		_iter_begin_229597cca:;
		if (it != expr.end()) {
			jule::Ptr<_245481417_EnumItem> _4821_item = *it;
			{
				if ((_4821_item.get()._field_ident == _4732_ident)) {
					return _4821_item;
				};
			}
			_iter_next_229597cca:;
			++it;
			goto _iter_begin_229597cca;
		}
		_iter_end_229597cca:;
	};
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _245481e0c_Enum _Src) {
	_Stream << _245482270_to_str(&_Src);
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _245482e41_TypeEnumItem _Src) {
	_Stream << "TypeEnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _245483837_to_str(_245483507_TypeEnum* _self_) {
	return (*_self_)._field_ident;
}



inline jule::Bool _245483b45_equals(jule::Ptr<_245483507_TypeEnum> _self_, jule::Ptr<_2455e1027_TypeKind> _8026_other) {
	jule::Ptr<_245483507_TypeEnum> _8113_tenm = _2455e3ada_tenm(_8026_other.ptr());;
	return (_self_ == _8113_tenm);
}



inline jule::Ptr<_245482e41_TypeEnumItem> _245484041_find_item(_245483507_TypeEnum* _self_, jule::Str _8932_ident) {
	{
		auto &expr = (*_self_)._field_items;
		auto it = expr.begin();
		_iter_begin_22959a00d:;
		if (it != expr.end()) {
			jule::Ptr<_245482e41_TypeEnumItem> _9021_item = *it;
			{
				if ((_9021_item.get()._field_ident == _8932_ident)) {
					return _9021_item;
				};
			}
			_iter_next_22959a00d:;
			++it;
			goto _iter_begin_22959a00d;
		}
		_iter_end_22959a00d:;
	};
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _245483507_TypeEnum _Src) {
	_Stream << _245483837_to_str(&_Src);
	return _Stream;
}



inline jule::Fn<jule::Bool(jule::Ptr<_24555100e_Sema>&,jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>&)> _2454aba6e_ready_fn(jule::Ptr<_24549b652_ConstraintChecker> _self_) {
	return jule::Fn<jule::Bool(jule::Ptr<_24555100e_Sema>&,jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>&)>([=](jule::Ptr<_24555100e_Sema>& _5621_sema, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>& _5639_generics) mutable -> jule::Bool {
		{
			auto &expr = _self_.get()._field_generics_d;
			auto it = expr.begin();
			_iter_begin_2295a7c96:;
			if (it != expr.end()) {
				jule::I32 _5718_i = it - expr.begin();
				jule::Ptr<_2448657b9_GenericDecl> _5725_g = *it;
				{
					jule::Ptr<_2455de7ea_InsGeneric> _5825_generic = _self_.get()._field_generics[_5718_i];;
					if (((_5725_g.get()._field_constraint == nullptr) || (_5725_g.get()._field_constraint.get()._field_mask.len() == 0LL))) {
						goto _iter_next_2295a7c96;
					};
					_5825_generic.get()._field_constraint=jule::Slice<jule::Ptr<_2455e1027_TypeKind>>::alloc(0LL,_5725_g.get()._field_constraint.get()._field_mask.len());
					{
						auto &expr = _5725_g.get()._field_constraint.get()._field_mask;
						auto it = expr.begin();
						_iter_begin_2295aa2e8:;
						if (it != expr.end()) {
							jule::Ptr<_2448581d5_TypeDecl> _6329_mask = *it;
							{
								jule::I32 _6425_n = _5621_sema.get()._field_errors.len();;
								jule::Ptr<_2455e1027_TypeKind> _6529_kind = _245557004_build_type_with_refers(_5621_sema, _6329_mask,jule::Trait<_24560bac0_Lookup>(_5621_sema, 3),_5639_generics,nullptr);;
								if ((_6529_kind == nullptr)) {
									{
										auto &_match_expr{ _6329_mask.get()._field_kind };
										
										if (_match_expr.type_is<jule::Ptr<_24485879b_IdentTypeDecl>>()) {
											_case_begin_2295ac185:;
											{
												jule::Ptr<_24485879b_IdentTypeDecl> _6937_itd = _6329_mask.get()._field_kind.operator jule::Ptr<_24485879b_IdentTypeDecl>();;
												if (((_6937_itd.get()._field_generics.len() == 0LL) && _2454e956d_is_builtin_constraint(_6937_itd.get()._field_ident))) {
													_6529_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(_6937_itd.get()._field_ident), 6)});
													_5621_sema.get()._field_errors=_5621_sema.get()._field_errors.slice(0LL,_6425_n);
													goto _julec_label_success;
												};
											}
										}
										_match_end_2295ac130:;
									};
									return false;
								};
								_julec_label_success:;
								_5825_generic.get()._field_constraint = jule::alloc_for_append(_5825_generic.get()._field_constraint,1);_5825_generic.get()._field_constraint.__push(_6529_kind);;
							}
							_iter_next_2295aa2e8:;
							++it;
							goto _iter_begin_2295aa2e8;
						}
						_iter_end_2295aa2e8:;
					};
				}
				_iter_next_2295a7c96:;
				++it;
				_5718_i++;
				goto _iter_begin_2295a7c96;
			}
			_iter_end_2295a7c96:;
		};
		return true;
	});
}



inline jule::Bool _2454c42c3_ready_fi(jule::Ptr<_24549b652_ConstraintChecker> _self_) {
	_self_.get()._field_generics_d=_self_.get()._field_fi.get()._field_decl.get()._field_generics;
	_self_.get()._field_generics=_self_.get()._field_fi.get()._field_generics;
	return ((!(_self_.get()._field_uniq)) || _24555b4d1_fn_environment(_self_.get()._field_s, _self_.get()._field_fi,_2454aba6e_ready_fn(_self_)));
}



inline jule::Bool _2454de387_ready_si(jule::Ptr<_24549b652_ConstraintChecker> _self_) {
	_self_.get()._field_generics_d=_self_.get()._field_si.get()._field_decl.get()._field_generics;
	_self_.get()._field_generics=_self_.get()._field_si.get()._field_generics;
	return ((!(_self_.get()._field_uniq)) || _2454aba6e_ready_fn(_self_)(_self_.get()._field_s,_self_.get()._field_generics_a));
}



inline jule::Bool _2454e11d0_ready(jule::Ptr<_24549b652_ConstraintChecker> _self_) {
	if ((_self_.get()._field_fi != nullptr)) {
		return _2454c42c3_ready_fi(_self_);
	};
	return _2454de387_ready_si(_self_);
}



inline jule::Bool _2454e23bd_check(jule::Ptr<_24549b652_ConstraintChecker> _self_) {
	if ((!(_2454e11d0_ready(_self_)))) {
		return false;
	};
	_julec_label_lookup:;
	{
		auto &expr = _self_.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_2295b417b:;
		if (it != expr.end()) {
			jule::I32 _11214_i = it - expr.begin();
			jule::Ptr<_2455de7ea_InsGeneric> _11221_g = *it;
			{
				if ((_11221_g.get()._field_constraint == nullptr)) {
					goto _iter_next_2295b417b;
				};
				{
					auto &expr = _11221_g.get()._field_constraint;
					auto it = expr.begin();
					_iter_begin_2295b4d4c:;
					if (it != expr.end()) {
						jule::Ptr<_2455e1027_TypeKind> _11625_c2 = *it;
						{
							jule::Ptr<_2455e59ee_Prim> _11725_prim = _2455e3139_prim(_11625_c2.ptr());;
							if (((_11725_prim != nullptr) && _2455e65e3_is_constraint(_11725_prim.ptr()))) {
								if (_2454e2b1b_match_constraint(_11725_prim.get()._field_kind,_11221_g.get()._field_kind)) {
									goto _iter_next_2295b417b;
								};
								goto _iter_next_2295b4d4c;
							};
							if (_2455e1731_equals(_11625_c2, _11221_g.get()._field_kind)) {
								goto _iter_next_2295b417b;
							};
						}
						_iter_next_2295b4d4c:;
						++it;
						goto _iter_begin_2295b4d4c;
					}
					_iter_end_2295b4d4c:;
				};
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _self_.get()._field_et,jule::Str("type @ is not matched with @'s constraint", 41),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_11221_g.get()._field_kind.ptr())),jule::Any(_self_.get()._field_generics_d[_11214_i].get()._field_ident)}));
				return false;
			}
			_iter_next_2295b417b:;
			++it;
			_11214_i++;
			goto _iter_begin_2295b417b;
		}
		_iter_end_2295b417b:;
	};
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, _24549b652_ConstraintChecker _Src) {
	_Stream << "ConstraintChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "generics_d:" << _Src._field_generics_d << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "generics_a:" << _Src._field_generics_a << ", ";
	_Stream << "fi:" << _Src._field_fi << ", ";
	_Stream << "si:" << _Src._field_si << ", ";
	_Stream << "et:" << _Src._field_et << ", ";
	_Stream << "uniq:" << _Src._field_uniq;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2454ea75b_is_trait_impl(_24551aa45_Impl* _self_) {
	return ((*_self_)._field_base != nullptr);
}



inline jule::Bool _2454eaea9_is_struct_impl(_24551aa45_Impl* _self_) {
	return ((*_self_)._field_base == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _24551aa45_Impl _Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552937d_Scope _Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _245529779_If _Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _245529a65_Else _Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _245529e61_Conditional _Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552a24c_InfIter _Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24552aa66_is_while_next(_24552a6c0_WhileIter* _self_) {
	return ((*_self_)._field_next != nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _24552a6c0_WhileIter _Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552b0a5_RangeIter _Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552b4a1_ContSt _Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552b858_BreakSt _Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552bb44_Label _Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552be30_GotoSt _Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552c2d7_Postfix _Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552c75a_Assign _Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552cb12_MultiAssign _Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24552d65c_is_generic_type_match(_24552d151_Match* _self_) {
	return (((*_self_)._field_type_match && ((*_self_)._field_expr != nullptr)) && (*_self_)._field_expr.get()._field_kind.get()._field_generic);
}







std::ostream &operator<<(std::ostream &_Stream, _24552d151_Match _Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24552de65_is_default(_24552db9b_Case* _self_) {
	return ((*_self_)._field_exprs == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _24552db9b_Case _Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552e251_FallSt _Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552e6c4_RetSt _Src) {
	_Stream << "RetSt{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24552ecce_ScopeLabel _Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _245530252_ScopeGoto _Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_245547db3_ImportInfo> _2455314b7_find_package(_245531066_ScopeChecker* _self_, jule::Str _45635_ident) {
	return _24555152b_find_package((*_self_)._field_s.ptr(), _45635_ident);
}



inline jule::Ptr<_245547db3_ImportInfo> _2455317c5_select_package(_245531066_ScopeChecker* _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _46637_selector) {
	return _245551839_select_package((*_self_)._field_s.ptr(), _46637_selector);
}



inline jule::Ptr<_24556cc1d_Var> _245531b7c_find_var(_245531066_ScopeChecker* _self_, jule::Str _47731_ident, jule::Bool _47743_cpp_linked) {
	;
	jule::Ptr<_24556cc1d_Var> _48017_v = _2455b2a87___find_var((*_self_)._field_table.ptr(), _47731_ident,_47743_cpp_linked,true);;
	if ((_48017_v != nullptr)) {
		return _48017_v;
	};
	jule::Ptr<_245531066_ScopeChecker> _48517_parent = (*_self_)._field_parent;;
	while ((_48517_parent != nullptr)) {
		{
			_48017_v=_2455b2a87___find_var(_48517_parent.get()._field_table.ptr(), _47731_ident,_47743_cpp_linked,true);
			if ((_48017_v != nullptr)) {
				return _48017_v;
			};
			_48517_parent=_48517_parent.get()._field_parent;
		}
	_iter_next_2295e1032:;
	}
	_iter_end_2295e1032:;;
	return _245551be1_find_var((*_self_)._field_s.ptr(), _47731_ident,_47743_cpp_linked);
}



inline jule::Ptr<_2455e0334_TypeAlias> _245532034_find_type_alias(_245531066_ScopeChecker* _self_, jule::Str _50438_ident, jule::Bool _50450_cpp_linked) {
	;
	jule::Ptr<_2455e0334_TypeAlias> _50717_ta = _2455b2ed8___find_type_alias((*_self_)._field_table.ptr(), _50438_ident,_50450_cpp_linked,true);;
	if ((_50717_ta != nullptr)) {
		return _50717_ta;
	};
	jule::Ptr<_245531066_ScopeChecker> _51217_parent = (*_self_)._field_parent;;
	while ((_51217_parent != nullptr)) {
		{
			_50717_ta=_2455b2ed8___find_type_alias(_51217_parent.get()._field_table.ptr(), _50438_ident,_50450_cpp_linked,true);
			if ((_50717_ta != nullptr)) {
				return _50717_ta;
			};
			_51217_parent=_51217_parent.get()._field_parent;
		}
	_iter_next_2295e3dc0:;
	}
	_iter_end_2295e3dc0:;;
	return _245552098_find_type_alias((*_self_)._field_s.ptr(), _50438_ident,_50450_cpp_linked);
}



inline jule::Ptr<_244848912_Struct> _2455323db_find_struct(_245531066_ScopeChecker* _self_, jule::Str _52934_ident, jule::Bool _52946_cpp_linked) {
	return _245552450_find_struct((*_self_)._field_s.ptr(), _52934_ident,_52946_cpp_linked);
}



inline jule::Ptr<_244926d0e_Fn> _245532793_find_fn(_245531066_ScopeChecker* _self_, jule::Str _53830_ident, jule::Bool _53842_cpp_linked) {
	return _245552807_find_fn((*_self_)._field_s.ptr(), _53830_ident,_53842_cpp_linked);
}



inline jule::Ptr<_24547ec51_Trait> _245532aa1_find_trait(_245531066_ScopeChecker* _self_, jule::Str _54733_ident) {
	return _245552b15_find_trait((*_self_)._field_s.ptr(), _54733_ident);
}



inline jule::Ptr<_245481e0c_Enum> _245532dae_find_enum(_245531066_ScopeChecker* _self_, jule::Str _55632_ident) {
	return _245552e23_find_enum((*_self_)._field_s.ptr(), _55632_ident);
}



inline jule::Ptr<_245483507_TypeEnum> _2455331bc_find_type_enum(_245531066_ScopeChecker* _self_, jule::Str _56537_ident) {
	return _245553231_find_type_enum((*_self_)._field_s.ptr(), _56537_ident);
}



inline jule::Bool _2455334ec_is_unsafe(jule::Ptr<_245531066_ScopeChecker> _self_) {
	jule::Ptr<_245531066_ScopeChecker> _57317_scope = _self_;;
	_julec_label_iter:;
	if (_57317_scope.get()._field_scope.get()._field_unsafety) {
		return true;
	};
	if ((_57317_scope.get()._field_parent != nullptr)) {
		_57317_scope=_57317_scope.get()._field_parent;
		goto _julec_label_iter;
	};
	return false;
}



inline jule::Bool _245533761_is_root(_245531066_ScopeChecker* _self_) {
	return (((*_self_)._field_parent == nullptr) || ((*_self_)._field_owner != nullptr));
}



inline void _24553393c_stop(_245531066_ScopeChecker* _self_) {
	(*_self_)._field_i=-1LL;
}



inline jule::Bool _245533ba1_stopped(_245531066_ScopeChecker* _self_) {
	return ((*_self_)._field_i == -1LL);
}



inline jule::Bool _245533e15_is_deferred(jule::Ptr<_245531066_ScopeChecker> _self_) {
	jule::Ptr<_245531066_ScopeChecker> _60617_scope = _self_;;
	_julec_label_iter:;
	if (_60617_scope.get()._field_scope.get()._field_deferred) {
		return true;
	};
	if ((_60617_scope.get()._field_parent != nullptr)) {
		_60617_scope=_60617_scope.get()._field_parent;
		goto _julec_label_iter;
	};
	return false;
}



inline jule::Ptr<_245531066_ScopeChecker> _245534179_get_root(jule::Ptr<_245531066_ScopeChecker> _self_) {
	jule::Ptr<_245531066_ScopeChecker> _62417_root = _self_;;
	while (((_62417_root.get()._field_parent != nullptr) && (_62417_root.get()._field_owner == nullptr))) {
		{
			_62417_root=_62417_root.get()._field_parent;
		}
	_iter_next_2295ed44b:;
	}
	_iter_end_2295ed44b:;;
	return _62417_root;
}



inline jule::Ptr<_245531066_ScopeChecker> _2455343dd_get_hard_root(jule::Ptr<_245531066_ScopeChecker> _self_) {
	jule::Ptr<_245531066_ScopeChecker> _63417_root = _self_;;
	while ((_63417_root.get()._field_parent != nullptr)) {
		{
			_63417_root=_63417_root.get()._field_parent;
		}
	_iter_next_2295ee716:;
	}
	_iter_end_2295ee716:;;
	return _63417_root;
}



inline jule::Ptr<_24552bb44_Label> _2455346eb_find_label(_245531066_ScopeChecker* _self_, jule::Str _64429_ident) {
	{
		auto &expr = (*_self_)._field_scope.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_2296004c5:;
		if (it != expr.end()) {
			jule::Any _64521_st = *it;
			{
				{
					auto &_match_expr{ _64521_st };
					
					if (_match_expr.type_is<jule::Ptr<_24552bb44_Label>>()) {
						_case_begin_229600ccd:;
						{
							jule::Ptr<_24552bb44_Label> _64825_label = _64521_st.operator jule::Ptr<_24552bb44_Label>();;
							if ((_64825_label.get()._field_ident == _64429_ident)) {
								return _64825_label;
							};
						}
					}
					_match_end_229600bce:;
				};
			}
			_iter_next_2296004c5:;
			++it;
			goto _iter_begin_2296004c5;
		}
		_iter_end_2296004c5:;
	};
	return nullptr;
}



inline jule::Ptr<_24552ecce_ScopeLabel> _245534a09_find_label_scope(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Str _66036_ident) {
	jule::Ptr<_24552ecce_ScopeLabel> _66117_label = _245534d17_find_label_all(_self_.ptr(), _66036_ident);;
	if (((_66117_label != nullptr) && (_66117_label.get()._field_scope == _self_))) {
		return _66117_label;
	};
	return nullptr;
}



inline jule::Ptr<_24552ecce_ScopeLabel> _245534d17_find_label_all(_245531066_ScopeChecker* _self_, jule::Str _67233_ident) {
	{
		auto &expr = (*((*_self_)._field_labels));
		auto it = expr.begin();
		_iter_begin_229603198:;
		if (it != expr.end()) {
			jule::Ptr<_24552ecce_ScopeLabel> _67321_lbl = *it;
			{
				if ((_67321_lbl.get()._field_label.get()._field_ident == _67233_ident)) {
					return _67321_lbl;
				};
			}
			_iter_next_229603198:;
			++it;
			goto _iter_begin_229603198;
		}
		_iter_end_229603198:;
	};
	return nullptr;
}



inline jule::Bool _2455351be_is_duplicated_ident(_245531066_ScopeChecker* _self_, jule::Uintptr _68438_itself, jule::Str _68455_ident) {
	jule::Ptr<_24556cc1d_Var> _68513_v = _245531b7c_find_var(&(*_self_), _68455_ident,false);;
	if (((_68513_v != nullptr) && (static_cast<jule::Uintptr>(_68513_v) != _68438_itself))) {
		if ((_68513_v.get()._field_scope == nullptr)) {
			return false;
		};
		return ((_68513_v.get()._field_scope == (*_self_)._field_scope) || (!(_245553583_is_flag((*_self_)._field_s.ptr(), static_cast<jule::I32>(1LL)))));
	};
	jule::Ptr<_2455e0334_TypeAlias> _69313_ta = _245532034_find_type_alias(&(*_self_), _68455_ident,false);;
	if (((_69313_ta != nullptr) && (static_cast<jule::Uintptr>(_69313_ta) != _68438_itself))) {
		if ((_69313_ta.get()._field_scope == nullptr)) {
			return false;
		};
		return ((_69313_ta.get()._field_scope == (*_self_)._field_tree) || (!(_245553583_is_flag((*_self_)._field_s.ptr(), static_cast<jule::I32>(1LL)))));
	};
	return false;
}



inline void _245535444_check_var_decl(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486aec8_VarDecl> _70438_decl) {
	jule::Ptr<_24556cc1d_Var> _70517_v = _244932688_build_var(_70438_decl);;
	_70517_v.get()._field_scope=_self_.get()._field_scope;
	__JULE_DEFER({
		_self_.get()._field_table.get()._field_vars = jule::alloc_for_append(_self_.get()._field_table.get()._field_vars,1);_self_.get()._field_table.get()._field_vars.__push(_70517_v);;
		_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_70517_v));;
	});;
	if (_2455351be_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_70517_v)),_70517_v.get()._field_ident)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _70517_v.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_70517_v.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		_24553393c_stop(_self_.ptr());
		return;;
	};
	_24556210d_check_var_decl(_self_.get()._field_s, _70517_v,jule::Trait<_24560bac0_Lookup>(_self_, 0));
	if (((!(_24556d339_is_type_inferred(_70517_v.ptr()))) && ((_70517_v.get()._field_kind == nullptr) || (_70517_v.get()._field_kind.get()._field_kind == nullptr)))) {
		return;;
	};
	_245565782_check_type_var(_self_.get()._field_s, _70517_v,jule::Trait<_24560bac0_Lookup>(_self_, 0));
}



inline void _2455356b9_check_type_alias_decl(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486e839_TypeAliasDecl> _72845_decl) {
	jule::Ptr<_2455e0334_TypeAlias> _72917_ta = _24492e663_build_type_alias(_72845_decl);;
	if (_2455351be_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_72917_ta)),_72917_ta.get()._field_ident)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _72917_ta.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_72917_ta.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		_24553393c_stop(_self_.ptr());
		return;;
	};
	_24555ccc9_check_type_alias_decl(_self_.get()._field_s, _72917_ta,jule::Trait<_24560bac0_Lookup>(_self_, 0));
	_self_.get()._field_table.get()._field_type_aliases = jule::alloc_for_append(_self_.get()._field_table.get()._field_type_aliases,1);_self_.get()._field_table.get()._field_type_aliases.__push(_72917_ta);;
	if ((_72917_ta.get()._field_kind.get()._field_kind == nullptr)) {
		_24553393c_stop(_self_.ptr());
	};
}



inline jule::Ptr<_24552937d_Scope> _24553592d_get_child(_245531066_ScopeChecker* _self_) {
	return jule::new_ptr<_24552937d_Scope>(_24552937d_Scope{._field_parent=(*_self_)._field_scope, });
}



inline void _245535ce6_check_child_ssc(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244868503_ScopeTree>& _75240_tree, jule::Ptr<_24552937d_Scope>& _75263_s, jule::Ptr<_245531066_ScopeChecker>& _75279_ssc) {
	_75279_ssc.get()._field_parent=_self_;
	_245541395_check(_75279_ssc, _75240_tree,_75263_s);
}



inline jule::Ptr<_24552937d_Scope> _24553619d_check_child_sc(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244868503_ScopeTree>& _75739_tree, jule::Ptr<_245531066_ScopeChecker>& _75762_ssc) {
	jule::Ptr<_24552937d_Scope> _75817_s = _24553592d_get_child(_self_.ptr());;
	_245535ce6_check_child_ssc(_self_, _75739_tree,_75817_s,_75762_ssc);
	return _75817_s;
}



inline jule::Ptr<_24552937d_Scope> _2455364ab_check_child(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244868503_ScopeTree>& _76336_tree) {
	jule::Ptr<_245531066_ScopeChecker> _76417_ssc = _245541609_new_child_checker(_self_);;
	return _24553619d_check_child_sc(_self_, _76336_tree,_76417_ssc);
}



inline void _245536731_check_anon_scope(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244868503_ScopeTree> _76840_tree) {
	jule::Ptr<_24552937d_Scope> _76917_s = _2455364ab_check_child(_self_, _76840_tree);;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_76917_s));;
}



inline void _245536a50_process_error_call(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244923866_BuiltinErrorCallExprModel>& _77343_m, jule::Ptr<_2431e4523_Token> _77374_err) {
	if (_245533e15_is_deferred(_self_)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _77374_err,jule::Str("deferred scopes are not supports error calls", 44),jule::Slice<jule::Any>());
	};
	jule::Ptr<_245531066_ScopeChecker> _77817_root = _245534179_get_root(_self_);;
	if ((!(_77817_root.get()._field_owner.get()._field_decl.get()._field_exceptional))) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _77374_err,jule::Str("error call can only useable for exceptional functions", 53),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("you can declare an exceptional function with \"!\" operator", 57),jule::Slice<jule::Any>());
	};
	_77343_m.get()._field_func=_77817_root.get()._field_owner;
}



inline void _245536cc5_check_expr(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24485c706_Expr> _78634_expr) {
	jule::Ptr<_2455b6abe_Eval> _78717_eval = _2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0));;
	_78717_eval.get()._field_ignored=true;
	jule::Ptr<_2455b5051_Data> _78917_d = _2455d26de_eval_expr(_78717_eval, _78634_expr);;
	if ((_78917_d == nullptr)) {
		return;;
	};
	{
		auto &_match_expr{ _78917_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>()) {
			_case_begin_22961981e:;
			{
				jule::Ptr<_244923866_BuiltinErrorCallExprModel> _79621_m = _78917_d.get()._field_model.operator jule::Ptr<_244923866_BuiltinErrorCallExprModel>();;
				_245536a50_process_error_call(_self_, _79621_m,_78634_expr.get()._field_token);
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_78917_d));;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492458c_BackendEmitExprModel>>() || _match_expr.type_is<jule::Ptr<_24492348c_BuiltinAppendCallExprModel>>() || _match_expr.type_is<jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>>() || _match_expr.type_is<jule::Ptr<_244922623_BuiltinOutCallExprModel>>() || _match_expr.type_is<jule::Ptr<_244922810_BuiltinOutlnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>>() || _match_expr.type_is<jule::Ptr<_244923679_BuiltinCopyCallExprModel>>() || _match_expr.type_is<jule::Ptr<_244924779_FreeExprModel>>() || _match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
			_case_begin_229619a1c:;
			{
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_78917_d));;
			}
		}
		else {
			_case_begin_2296196cb:;
			{
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _78634_expr.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_229619676:;
	};
}



inline void _24553704a_check_co_expr(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24485e2eb_CoExpr> _81537_expr) {
	jule::Ptr<_2455b6abe_Eval> _81617_eval = _2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0));;
	_81617_eval.get()._field_ignored=true;
	jule::Ptr<_2455b5051_Data> _81817_d = _2455d26de_eval_expr(_81617_eval, _81537_expr.get()._field_expr);;
	if ((_81817_d == nullptr)) {
		return;;
	};
	{
		auto &_match_expr{ _81817_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
			_case_begin_22961eaee:;
			{
				jule::Ptr<_24492070e_FnCallExprModel> _82521_model = _81817_d.get()._field_model.operator jule::Ptr<_24492070e_FnCallExprModel>();;
				if (_82521_model.get()._field_func.get()._field_decl.get()._field_exceptional) {
					_245553bc1_push_err(_self_.get()._field_s.ptr(), _81537_expr.get()._field_token,jule::Str("concurrent calls not supports exceptionals", 42),jule::Slice<jule::Any>());
					_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("handle exceptional in a separate function or anonymous function", 63),jule::Slice<jule::Any>());
				};
				_82521_model.get()._field_is_co=true;
				_2455c9582_check_fn_of_concurrent_call(_81617_eval.ptr(), _82521_model.get()._field_func,_81537_expr.get()._field_expr.get()._field_token);
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_81817_d));;
			}
		}
		else {
			_case_begin_22961e99a:;
			{
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _81537_expr.get()._field_token,jule::Str("statement must have function call expression", 44),jule::Slice<jule::Any>());
				return;;
			}
		}
		_match_end_22961e945:;
	};
}



inline jule::Ptr<_245529779_If> _245537358_check_if(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486d838_If> _83932_i) {
	jule::Ptr<_24552937d_Scope> _84017_s = _2455364ab_check_child(_self_, _83932_i.get()._field_scope);;
	jule::Ptr<_2455b5051_Data> _84217_d = _2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _83932_i.get()._field_expr);;
	if ((_84217_d == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_2455e59ee_Prim> _84717_prim = _2455e3139_prim(_84217_d.get()._field_kind.ptr());;
	if (((_84717_prim == nullptr) || (!(_2455e89be_is_bool(_84717_prim.ptr()))))) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _83932_i.get()._field_expr.get()._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	};
	return jule::new_ptr<_245529779_If>(_245529779_If{._field_expr=_84217_d.get()._field_model, ._field_scope=_84017_s});
}



inline jule::Ptr<_245529a65_Else> _245537666_check_else(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486dbe0_Else> _85934_e) {
	return jule::new_ptr<_245529a65_Else>(_245529a65_Else{._field_scope=_2455364ab_check_child(_self_, _85934_e.get()._field_scope)});
}



inline void _2455378db_check_conditional(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486e163_Conditional> _86541_conditional) {
	jule::Ptr<_245529e61_Conditional> _86617_c = jule::new_ptr<_245529e61_Conditional>(_245529e61_Conditional{});;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_86617_c));;
	_86617_c.get()._field_elifs=jule::Slice<jule::Ptr<_245529779_If>>::alloc(0LL,(_86541_conditional.get()._field_tail.len() + 1LL));
	_86617_c.get()._field_elifs = jule::alloc_for_append(_86617_c.get()._field_elifs,1);_86617_c.get()._field_elifs.__push(_245537358_check_if(_self_, _86541_conditional.get()._field_head));;
	{
		auto &expr = _86541_conditional.get()._field_tail;
		auto it = expr.begin();
		_iter_begin_229627d27:;
		if (it != expr.end()) {
			jule::Ptr<_24486d838_If> _87221_elif = *it;
			{
				_86617_c.get()._field_elifs = jule::alloc_for_append(_86617_c.get()._field_elifs,1);_86617_c.get()._field_elifs.__push(_245537358_check_if(_self_, _87221_elif));;
			}
			_iter_next_229627d27:;
			++it;
			goto _iter_begin_229627d27;
		}
		_iter_end_229627d27:;
	};
	if ((_86541_conditional.get()._field_default != nullptr)) {
		_86617_c.get()._field_default=_245537666_check_else(_self_, _86541_conditional.get()._field_default);
	};
}



inline void _245537d4d_check_iter_scope_ssc(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Uintptr _88140_it, jule::Ptr<_244868503_ScopeTree> _88157_tree, jule::Ptr<_24552937d_Scope>& _88180_s, jule::Ptr<_245531066_ScopeChecker> _88195_ssc) {
	_88195_ssc.get()._field_it=_88140_it;
	_245535ce6_check_child_ssc(_self_, _88157_tree,_88180_s,_88195_ssc);
}



inline jule::Ptr<_24552937d_Scope> _24553829e_check_iter_scope_sc(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Uintptr _88639_it, jule::Ptr<_244868503_ScopeTree> _88656_tree, jule::Ptr<_245531066_ScopeChecker> _88678_ssc) {
	jule::Ptr<_24552937d_Scope> _88717_scope = _24553592d_get_child(_self_.ptr());;
	_245537d4d_check_iter_scope_ssc(_self_, _88639_it,_88656_tree,_88717_scope,_88678_ssc);
	return _88717_scope;
}



inline jule::Ptr<_24552937d_Scope> _245538656_check_iter_scope(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Uintptr _89236_it, jule::Ptr<_244868503_ScopeTree>& _89254_tree) {
	jule::Ptr<_245531066_ScopeChecker> _89317_ssc = _245541609_new_child_checker(_self_);;
	return _24553829e_check_iter_scope_sc(_self_, _89236_it,_89254_tree,_89317_ssc);
}



inline void _2455388cb_check_inf_iter(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486b9e0_Iter>& _89739_it) {
	jule::Ptr<_24552a24c_InfIter> _89817_kind = jule::new_ptr<_24552a24c_InfIter>();;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_89817_kind));;
	_89817_kind.get()._field_scope=_245538656_check_iter_scope(_self_, static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_89817_kind)),_89739_it.get()._field_scope);
}



inline void _245538b51_check_while_iter(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486b9e0_Iter>& _90341_it) {
	jule::Ptr<_24486c2b5_WhileKind> _90417_wh = _90341_it.get()._field_kind.operator jule::Ptr<_24486c2b5_WhileKind>();;
	if (((_90417_wh.get()._field_expr == nullptr) && (_90417_wh.get()._field_next == nullptr))) {
		_2455388cb_check_inf_iter(_self_, _90341_it);
		return;;
	};
	jule::Ptr<_24552a6c0_WhileIter> _91017_kind = jule::new_ptr<_24552a6c0_WhileIter>();;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_91017_kind));;
	_91017_kind.get()._field_scope=_245538656_check_iter_scope(_self_, static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_91017_kind)),_90341_it.get()._field_scope);
	if ((_90417_wh.get()._field_expr != nullptr)) {
		jule::Ptr<_2455b5051_Data> _91521_d = _2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _90417_wh.get()._field_expr);;
		if ((_91521_d == nullptr)) {
			return;;
		};
		jule::Ptr<_2455e59ee_Prim> _92017_prim = _2455e3139_prim(_91521_d.get()._field_kind.ptr());;
		if ((_92017_prim == nullptr)) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _90341_it.get()._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;;
		};
		if ((!(_2455e89be_is_bool(_92017_prim.ptr())))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _90341_it.get()._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;;
		};
		_91017_kind.get()._field_expr=_91521_d.get()._field_model;
	};
	if (_24486c617_is_while_next(_90417_wh.ptr())) {
		if ((!(_245514cb4_is_valid_ast_st_for_next_st(_90417_wh.get()._field_next)))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _90417_wh.get()._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			return;;
		};
		jule::I32 _94017_n = _self_.get()._field_scope.get()._field_stmts.len();;
		_245540141_check_node(_self_, _90417_wh.get()._field_next);
		if ((_94017_n < _self_.get()._field_scope.get()._field_stmts.len())) {
			jule::Any _94325_st = _self_.get()._field_scope.get()._field_stmts[_94017_n];;
			_self_.get()._field_scope.get()._field_stmts=_self_.get()._field_scope.get()._field_stmts.slice(0LL,_94017_n);
			if ((!(_2454b0aa6_is_valid_st_for_next_st(_94325_st)))) {
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _90417_wh.get()._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			};
			_91017_kind.get()._field_next=_94325_st;
		};
	};
}



inline void _245538dc6_check_range_iter(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486b9e0_Iter>& _95441_it) {
	jule::Ptr<_24486cb56_RangeKind> _95517_rang = _95441_it.get()._field_kind.operator jule::Ptr<_24486cb56_RangeKind>();;
	jule::Ptr<_2455b5051_Data> _95717_d = _2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _95517_rang.get()._field_expr);;
	if ((_95717_d == nullptr)) {
		return;;
	};
	jule::Ptr<_24552b0a5_RangeIter> _96217_kind = jule::new_ptr<_24552b0a5_RangeIter>(_24552b0a5_RangeIter{._field_expr=_95717_d, });;
	_2455ab2ab_RangeChecker _96617_rc = _2455ab2ab_RangeChecker{._field_sc=_self_, ._field_rang=_95517_rang, ._field_kind=_96217_kind, ._field_d=_95717_d};;
	jule::Bool _97213_ok = _2455acba3_check(&_96617_rc);;
	if ((!(_97213_ok))) {
		return;;
	};
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_96217_kind));;
	jule::Ptr<_245531066_ScopeChecker> _97917_ssc = _245541609_new_child_checker(_self_);;
	jule::Ptr<_24552937d_Scope> _98017_scope = _24553592d_get_child(_self_.ptr());;
	if ((_96217_kind.get()._field_key_a != nullptr)) {
		if (((!(_245553583_is_flag(_self_.get()._field_s.ptr(), static_cast<jule::I32>(1LL)))) && _2455351be_is_duplicated_ident(_self_.ptr(), 0LLU,_96217_kind.get()._field_key_a.get()._field_ident))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _96217_kind.get()._field_key_a.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_96217_kind.get()._field_key_a.get()._field_ident)}));
			_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		};
		_96217_kind.get()._field_key_a.get()._field_scope=_98017_scope;
		_97917_ssc.get()._field_table.get()._field_vars = jule::alloc_for_append(_97917_ssc.get()._field_table.get()._field_vars,1);_97917_ssc.get()._field_table.get()._field_vars.__push(_96217_kind.get()._field_key_a);;
	};
	if ((_96217_kind.get()._field_key_b != nullptr)) {
		if (((!(_245553583_is_flag(_self_.get()._field_s.ptr(), static_cast<jule::I32>(1LL)))) && _2455351be_is_duplicated_ident(_self_.ptr(), 0LLU,_96217_kind.get()._field_key_b.get()._field_ident))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _96217_kind.get()._field_key_b.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_96217_kind.get()._field_key_b.get()._field_ident)}));
			_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		};
		_96217_kind.get()._field_key_b.get()._field_scope=_98017_scope;
		_97917_ssc.get()._field_table.get()._field_vars = jule::alloc_for_append(_97917_ssc.get()._field_table.get()._field_vars,1);_97917_ssc.get()._field_table.get()._field_vars.__push(_96217_kind.get()._field_key_b);;
	};
	_245537d4d_check_iter_scope_ssc(_self_, static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_96217_kind)),_95441_it.get()._field_scope,_98017_scope,_97917_ssc);
	_96217_kind.get()._field_scope=_98017_scope;
}



inline void _24553914b_check_iter(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486b9e0_Iter> _100434_it) {
	if (_24486bd42_is_inf(_100434_it.ptr())) {
		_2455388cb_check_inf_iter(_self_, _100434_it);
		return;;
	};
	{
		auto &_match_expr{ _100434_it.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24486c2b5_WhileKind>>()) {
			_case_begin_229645aae:;
			{
				_245538b51_check_while_iter(_self_, _100434_it);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486cb56_RangeKind>>()) {
			_case_begin_229645020:;
			{
				_245538dc6_check_range_iter(_self_, _100434_it);
			}
		}
		else {
			_case_begin_229644ddd:;
			{
				jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
			}
		}
		_match_end_22964554d:;
	};
}



inline jule::Bool _245539459_check_valid_cont_label(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Uintptr _102042_it) {
	jule::Ptr<_245531066_ScopeChecker> _102117_scope = _self_;;
	_julec_label_iter:;
	if ((_102117_scope.get()._field_it == _102042_it)) {
		return true;
	};
	if ((_102117_scope.get()._field_parent != nullptr)) {
		_102117_scope=_102117_scope.get()._field_parent;
		goto _julec_label_iter;
	};
	return false;
}



inline jule::Bool _245539789_check_valid_break_label(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Uintptr _103643_ptr) {
	jule::Ptr<_245531066_ScopeChecker> _103717_scope = _self_;;
	_julec_label_iter:;
	if ((_103717_scope.get()._field_it == _103643_ptr)) {
		return true;
	};
	if ((_103717_scope.get()._field_cse != 0LLU)) {
		jule::Uintptr _104517_mtch = static_cast<jule::Uintptr>(((_24552db9b_Case*)(_103717_scope.get()._field_cse))->_field_owner);;
		if ((_104517_mtch == _103643_ptr)) {
			return true;
		};
	};
	if ((_103717_scope.get()._field_parent != nullptr)) {
		_103717_scope=_103717_scope.get()._field_parent;
		goto _julec_label_iter;
	};
	return false;
}



inline jule::Ptr<_24552b4a1_ContSt> _245539aa8_check_cont_valid_scope(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486d3b5_ContSt> _105942_c) {
	if (_245533e15_is_deferred(_self_)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _105942_c.get()._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_105942_c.get()._field_label != nullptr)) {
		return jule::new_ptr<_24552b4a1_ContSt>();
	};
	jule::Ptr<_245531066_ScopeChecker> _106917_scope = _self_;;
	_julec_label_iter:;
	{
		
		if ((((_106917_scope.get()._field_it == 0LLU) && (_106917_scope.get()._field_parent != nullptr)) && (_106917_scope.get()._field_owner == nullptr))) {
			_case_begin_22964d18d:;
			{
				_106917_scope=_106917_scope.get()._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((_106917_scope.get()._field_it != 0LLU)) {
			_case_begin_22964d215:;
			{
				return jule::new_ptr<_24552b4a1_ContSt>(_24552b4a1_ContSt{._field_it=_106917_scope.get()._field_it});
			}
		}
		_match_end_22964d116:;
	};
	_245553bc1_push_err(_self_.get()._field_s.ptr(), _105942_c.get()._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _245539d2d_check_cont(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486d3b5_ContSt> _108330_c) {
	jule::Ptr<_24552b4a1_ContSt> _108417_cont = _245539aa8_check_cont_valid_scope(_self_, _108330_c);;
	if ((_108417_cont == nullptr)) {
		return;;
	};
	if ((_108330_c.get()._field_label != nullptr)) {
		jule::Ptr<_24552ecce_ScopeLabel> _109021_label = _24550527c_find_label_parent(_108330_c.get()._field_label.get()._field_kind,_self_.get()._field_parent);;
		if ((_109021_label == nullptr)) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _108330_c.get()._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>::make({jule::Any(_108330_c.get()._field_label.get()._field_kind)}));
			return;;
		};
		_109021_label.get()._field_used=true;
		if (((_109021_label.get()._field_pos + 1LL) >= _109021_label.get()._field_scope.get()._field_scope.get()._field_stmts.len())) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _108330_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_108330_c.get()._field_label.get()._field_kind)}));
			return;;
		};
		jule::I32 _110317_i = (_109021_label.get()._field_pos + 1LL);;
		if ((_110317_i >= _109021_label.get()._field_scope.get()._field_scope.get()._field_stmts.len())) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _108330_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>());
		} else {
			jule::Any _110725_st = _109021_label.get()._field_scope.get()._field_scope.get()._field_stmts[_110317_i];;
			{
				auto &_match_expr{ _110725_st };
				
				if (_match_expr.type_is<jule::Ptr<_24552a24c_InfIter>>()) {
					_case_begin_229653a89:;
					{
						_108417_cont.get()._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_110725_st.operator jule::Ptr<_24552a24c_InfIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_24552b0a5_RangeIter>>()) {
					_case_begin_229656b25:;
					{
						_108417_cont.get()._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_110725_st.operator jule::Ptr<_24552b0a5_RangeIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_24552a6c0_WhileIter>>()) {
					_case_begin_229656b8b:;
					{
						_108417_cont.get()._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_110725_st.operator jule::Ptr<_24552a6c0_WhileIter>()));
					}
				}
				else {
					_case_begin_2296569c1:;
					{
						_245553bc1_push_err(_self_.get()._field_s.ptr(), _108330_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_108330_c.get()._field_label.get()._field_kind)}));
					}
				}
				_match_end_2296568e4:;
			};
		};
	};
	if ((_108417_cont.get()._field_it != 0LLU)) {
		if ((!(_245539459_check_valid_cont_label(_self_, _108417_cont.get()._field_it)))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _108330_c.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_108330_c.get()._field_label.get()._field_kind)}));
		};
	};
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_108417_cont));;
}



inline void _24553a0a3_check_label(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244865b71_LabelSt> _113035_l) {
	if ((_2455346eb_find_label(_self_.ptr(), _113035_l.get()._field_ident) != nullptr)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _113035_l.get()._field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>::make({jule::Any(_113035_l.get()._field_ident)}));
		return;;
	};
	jule::Ptr<_24552bb44_Label> _113617_label = jule::new_ptr<_24552bb44_Label>(_24552bb44_Label{._field_ident=_113035_l.get()._field_ident});;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_113617_label));;
	(*(_self_.get()._field_labels))=jule::append((*(_self_.get()._field_labels)),jule::Slice<jule::Ptr<_24552ecce_ScopeLabel>>::make({jule::new_ptr<_24552ecce_ScopeLabel>(_24552ecce_ScopeLabel{._field_token=_113035_l.get()._field_token, ._field_label=_113617_label, ._field_pos=static_cast<jule::I32>((_self_.get()._field_scope.get()._field_stmts.len() - 1LL)), ._field_scope=_self_, })}));
}



inline void _24553a328_push_goto(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244866028_GotoSt> _114933_gt) {
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(jule::new_ptr<_24552be30_GotoSt>(_24552be30_GotoSt{._field_ident=_114933_gt.get()._field_label.get()._field_kind})));;
	(*(_self_.get()._field_gotos))=jule::append((*(_self_.get()._field_gotos)),jule::Slice<jule::Ptr<_245530252_ScopeGoto>>::make({jule::new_ptr<_245530252_ScopeGoto>(_245530252_ScopeGoto{._field_gt=_114933_gt, ._field_scope=_self_, ._field_pos=static_cast<jule::I32>((_self_.get()._field_scope.get()._field_stmts.len() - 1LL))})}));
}



inline void _24553a59d_check_postfix(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244866e5d_AssignSt> _116137_a) {
	if ((_116137_a.get()._field_left.len() > 1LL)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _116137_a.get()._field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_24485c706_Expr> _116717_expr = _116137_a.get()._field_left[0LL].get()._field_expr;;
	jule::Ptr<_2455b5051_Data> _116817_d = _2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _116717_expr);;
	if ((_116817_d == nullptr)) {
		return;;
	};
	_245519648_check_assign(_self_.get()._field_s,_116817_d,nullptr,_116137_a.get()._field_setter);
	if ((_2455e3612_ptr(_116817_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_2455ec7e7_Ptr> _117621_ptr = _2455e3612_ptr(_116817_d.get()._field_kind.ptr());;
		if (_2455ed2ba_is_unsafe(_117621_ptr.ptr())) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _116137_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any(_116137_a.get()._field_setter.get()._field_kind),jule::Any(_2455e1423_to_str(_116817_d.get()._field_kind.ptr()))}));
			return;;
		};
	} else {
		if (((_2455e3139_prim(_116817_d.get()._field_kind.ptr()) == nullptr) || (!(_245528c0c_is_num(_2455e3139_prim(_116817_d.get()._field_kind.ptr()).get()._field_kind))))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _116137_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any(_116137_a.get()._field_setter.get()._field_kind),jule::Any(_2455e1423_to_str(_116817_d.get()._field_kind.ptr()))}));
			return;;
		};
	};
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(jule::new_ptr<_24552c2d7_Postfix>(_24552c2d7_Postfix{._field_expr=_116817_d.get()._field_model, ._field_op=_116137_a.get()._field_setter.get()._field_kind})));;
}



inline jule::Bool _24553a8ab_is_new_assign_ident(_245531066_ScopeChecker* _self_, jule::Str _119438_ident) {
	if ((_2431e6cb7_is_ignore_ident(_119438_ident) || _119438_ident.empty())) {
		return false;
	};
	return (_2455b3390_def_by_ident((*_self_)._field_table.ptr(), _119438_ident,false) == nullptr);
}



inline jule::Bool _24553ad2e_check_structure_assign_op(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244874c5c_StructIns>& _120250_s, jule::Ptr<_244866e5d_AssignSt>& _120270_a, jule::Ptr<_2455b5051_Data>& _120289_r) {
	jule::Ptr<_2449299b0_FnIns> _120517_overload = nullptr;;
	{
		auto &_match_expr{ _120270_a.get()._field_setter.get()._field_kind };
		
		if (_match_expr == jule::Str("+=", 2)) {
			_case_begin_229669572:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_add_assign;
			}
		}
		else if (_match_expr == jule::Str("-=", 2)) {
			_case_begin_2296695d8:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_sub_assign;
			}
		}
		else if (_match_expr == jule::Str("/=", 2)) {
			_case_begin_22966a4eb:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_div_assign;
			}
		}
		else if (_match_expr == jule::Str("*=", 2)) {
			_case_begin_22966a562:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_mul_assign;
			}
		}
		else if (_match_expr == jule::Str("%=", 2)) {
			_case_begin_22966a5c8:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_mod_assign;
			}
		}
		else if (_match_expr == jule::Str("<<=", 3)) {
			_case_begin_22966a63e:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_shl_assign;
			}
		}
		else if (_match_expr == jule::Str(">>=", 3)) {
			_case_begin_22966a6a5:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_shr_assign;
			}
		}
		else if (_match_expr == jule::Str("|=", 2)) {
			_case_begin_22966a771:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_bit_or_assign;
			}
		}
		else if (_match_expr == jule::Str("&=", 2)) {
			_case_begin_22966a7d7:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_bit_and_assign;
			}
		}
		else if (_match_expr == jule::Str("^=", 2)) {
			_case_begin_22966a84d:;
			{
				_120517_overload=_120250_s.get()._field_operators._field_bit_xor_assign;
			}
		}
		else {
			_case_begin_229669440:;
			{
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _120270_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any(_120270_a.get()._field_setter.get()._field_kind),jule::Any(_24484a5e5_to_str(_120250_s.ptr()))}));
				return false;
			}
		}
		_match_end_229669385:;
	};
	if ((_120517_overload == nullptr)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _120270_a.get()._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any(_120270_a.get()._field_setter.get()._field_kind),jule::Any(_24484a5e5_to_str(_120250_s.ptr()))}));
		return false;
	};
	jule::Ptr<_244928ae1_ParamIns> _123717_p = _120517_overload.get()._field_params[1LL];;
	return _2455597cb_check_assign_type(_self_.get()._field_s, _123717_p.get()._field_decl.get()._field_reference,_123717_p.get()._field_kind,_120289_r,_120270_a.get()._field_setter);
}



inline void _24553b0b5_check_single_assign(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244866e5d_AssignSt>& _124144_a) {
	jule::Ptr<_2455b5051_Data> _124217_l = nullptr;;
	if ((!(_2431e6cb7_is_ignore_ident(_124144_a.get()._field_left[0LL].get()._field_ident)))) {
		jule::Ptr<_24485c706_Expr> _124521_expr = _124144_a.get()._field_left[0LL].get()._field_expr;;
		_124217_l=_2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _124521_expr);
		if ((_124217_l == nullptr)) {
			return;;
		};
	};
	jule::Ptr<_2455b6abe_Eval> _125217_eval = nullptr;;
	if ((_124217_l != nullptr)) {
		_125217_eval=_245558ec3_evalp(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0),_124217_l.get()._field_kind);
	} else {
		_125217_eval=_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0));
	};
	_125217_eval.get()._field_unsafety=_2455334ec_is_unsafe(_self_);
	jule::Ptr<_2455b5051_Data> _125917_r = _2455d26de_eval_expr(_125217_eval, _124144_a.get()._field_right);;
	if ((_125917_r == nullptr)) {
		return;;
	};
	if ((_124217_l == nullptr)) {
		if (_2455e21b0_void(_125917_r.get()._field_kind.ptr())) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _124144_a.get()._field_right.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		};
		_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_125917_r));;
		return;;
	};
	if ((!(_245519648_check_assign(_self_.get()._field_s,_124217_l,_125917_r,_124144_a.get()._field_setter)))) {
		return;;
	};
	if ((_2455e4cc8_tup(_125917_r.get()._field_kind.ptr()) != nullptr)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _124144_a.get()._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_24491e895_OperandExprModel> _128117_lm = jule::new_ptr<_24491e895_OperandExprModel>(_24491e895_OperandExprModel{._field_kind=_124217_l.get()._field_kind, ._field_model=_124217_l.get()._field_model});;
	jule::Ptr<_24491e895_OperandExprModel> _128517_rm = jule::new_ptr<_24491e895_OperandExprModel>(_24491e895_OperandExprModel{._field_kind=_125917_r.get()._field_kind, ._field_model=_125917_r.get()._field_model});;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(jule::new_ptr<_24552c75a_Assign>(_24552c75a_Assign{._field_l=_128117_lm, ._field_r=_128517_rm, ._field_op=_124144_a.get()._field_setter})));;
	if ((_124144_a.get()._field_setter.get()._field_kind != jule::Str("=", 1))) {
		jule::Ptr<_244874c5c_StructIns> _129221_strct = _2455e458b_strct(_124217_l.get()._field_kind.ptr());;
		if ((_129221_strct != nullptr)) {
			_24553ad2e_check_structure_assign_op(_self_, _129221_strct,_124144_a,_125917_r);
			return;;
		};
		_124144_a.get()._field_setter.get()._field_kind=_124144_a.get()._field_setter.get()._field_kind.slice(0LL,(_124144_a.get()._field_setter.get()._field_kind.len() - 1LL));
		_2455d4900_BinaryEval _129921_solver = static__2455d5307_new(_125217_eval,_124144_a.get()._field_setter);;
		_125917_r=_2455d9eee_solve_explicit(&_129921_solver, _124217_l,_125917_r);
		if ((_125917_r == nullptr)) {
			return;;
		};
		_124144_a.get()._field_setter.get()._field_kind+=jule::Str("=", 1);
		return;;
	};
	_2455a0a0e_AssignTypeChecker _130817_checker = _2455a0a0e_AssignTypeChecker{._field_s=_self_.get()._field_s, ._field_dest=_124217_l.get()._field_kind, ._field_d=_125917_r, ._field_error_token=_124144_a.get()._field_setter};;
	if (_2455a1b86_check(&_130817_checker)) {
		_128517_rm.get()._field_model=_125917_r.get()._field_model;
		_128117_lm.get()._field_model=_124217_l.get()._field_model;
	};
}



inline void _24553b604___process_end_part_of_multi_assign(_245531066_ScopeChecker* _self_, jule::Ptr<_24552cb12_MultiAssign> _132057_st, jule::Ptr<_244866e5d_AssignSt> _132113_a, jule::Ptr<_24486691e_AssignLeft> _132131_lexpr, jule::Ptr<_2455b5051_Data> _132155_l, jule::Ptr<_2455b5051_Data> _132169_r) {
	if (_2431e6cb7_is_ignore_ident(_132131_lexpr.get()._field_ident)) {
		if (_2455e21b0_void(_132169_r.get()._field_kind.ptr())) {
			_245553bc1_push_err((*_self_)._field_s.ptr(), _132113_a.get()._field_right.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		};
		_132057_st.get()._field_l = jule::alloc_for_append(_132057_st.get()._field_l,1);_132057_st.get()._field_l.__push(nullptr);;
		return;;
	};
	if ((_132113_a.get()._field_declarative && _24553a8ab_is_new_assign_ident(&(*_self_), _132131_lexpr.get()._field_ident))) {
		if (_2455351be_is_duplicated_ident(&(*_self_), 0LLU,_132131_lexpr.get()._field_ident)) {
			_245553bc1_push_err((*_self_)._field_s.ptr(), _132131_lexpr.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_132131_lexpr.get()._field_ident)}));
			_245553ee0_push_suggestion((*_self_)._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
			_24553393c_stop(&(*_self_));
			return;;
		};
		jule::Ptr<_24556cc1d_Var> _133921_v = jule::new_ptr<_24556cc1d_Var>(_24556cc1d_Var{._field_scope=(*_self_)._field_scope, ._field_token=_132131_lexpr.get()._field_token, ._field_ident=_132131_lexpr.get()._field_ident, ._field_mutable=_132131_lexpr.get()._field_mutable, ._field_reference=_132131_lexpr.get()._field_reference, ._field_value=jule::new_ptr<_2455b60c9_Value>(_2455b60c9_Value{._field_expr=_132113_a.get()._field_right, ._field_data=_132169_r}), });;
		_245565463_check_var((*_self_)._field_s, _133921_v);
		_132057_st.get()._field_l = jule::alloc_for_append(_132057_st.get()._field_l,1);_132057_st.get()._field_l.__push(static_cast<jule::Any>(_133921_v));;
		(*_self_)._field_table.get()._field_vars = jule::alloc_for_append((*_self_)._field_table.get()._field_vars,1);(*_self_)._field_table.get()._field_vars.__push(_133921_v);;
		(*_self_)._field_scope.get()._field_stmts = jule::alloc_for_append((*_self_)._field_scope.get()._field_stmts,1);(*_self_)._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_133921_v));;
		return;;
	};
	if ((_132131_lexpr.get()._field_mutable || _132131_lexpr.get()._field_reference)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _132131_lexpr.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_132131_lexpr.get()._field_ident)}));
		_245553ee0_push_suggestion((*_self_)._field_s.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
	if ((!(_245519648_check_assign((*_self_)._field_s,_132155_l,_132169_r,_132113_a.get()._field_setter)))) {
		return;;
	};
	;
	_24555c5e2_check_validity_for_init_expr((*_self_)._field_s, _132155_l.get()._field_mutable,false,_132155_l.get()._field_kind,_132169_r,_132113_a.get()._field_setter);
	_2455a0a0e_AssignTypeChecker _137417_checker = _2455a0a0e_AssignTypeChecker{._field_s=(*_self_)._field_s, ._field_dest=_132155_l.get()._field_kind, ._field_d=_132169_r, ._field_error_token=_132113_a.get()._field_setter};;
	_2455a1b86_check(&_137417_checker);
	_132057_st.get()._field_l = jule::alloc_for_append(_132057_st.get()._field_l,1);_132057_st.get()._field_l.__push(_132155_l.get()._field_model);;
}



inline void _24553b879_check_ret_multi_assign(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244866e5d_AssignSt>& _138547_a) {
	jule::Ptr<_2455b5051_Data> _138617_rd = _2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _138547_a.get()._field_right);;
	if ((_138617_rd == nullptr)) {
		return;;
	};
	jule::Slice<jule::Ptr<_2455b5051_Data>> _139117_r = _245515138_get_datas_from_tuple_data(_138617_rd);;
	{
		
		if ((_138547_a.get()._field_left.len() > _139117_r.len())) {
			_case_begin_22968a450:;
			{
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _138547_a.get()._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;;
			}
		}
		else if ((_138547_a.get()._field_left.len() < _139117_r.len())) {
			_case_begin_22968a4c7:;
			{
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _138547_a.get()._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;;
			}
		}
		_match_end_22968a395:;
	};
	jule::Ptr<_24552cb12_MultiAssign> _140217_st = jule::new_ptr<_24552cb12_MultiAssign>(_24552cb12_MultiAssign{._field_r=_138617_rd.get()._field_model});;
	if ((_2455e4cc8_tup(_138617_rd.get()._field_kind.ptr()) == nullptr)) {
		_140217_st.get()._field_r=static_cast<jule::Any>(jule::new_ptr<_244922436_TupleExprModel>(_244922436_TupleExprModel{._field_datas=_139117_r}));
	};
	{
		auto &expr = _138547_a.get()._field_left;
		auto it = expr.begin();
		_iter_begin_22968d19a:;
		if (it != expr.end()) {
			jule::I32 _141013_i = it - expr.begin();
			{
				jule::Ptr<_24486691e_AssignLeft> _141121_lexpr = _138547_a.get()._field_left[_141013_i];;
				jule::Ptr<_2455b5051_Data> _141221_l = nullptr;;
				if (((!(_2431e6cb7_is_ignore_ident(_141121_lexpr.get()._field_ident))) && ((!(_138547_a.get()._field_declarative)) || (!(_24553a8ab_is_new_assign_ident(_self_.ptr(), _141121_lexpr.get()._field_ident)))))) {
					_141221_l=_2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _141121_lexpr.get()._field_expr);
					if ((_141221_l == nullptr)) {
						goto _iter_next_22968d19a;
					};
				};
				_24553b604___process_end_part_of_multi_assign(_self_.ptr(), _140217_st,_138547_a,_141121_lexpr,_141221_l,_139117_r[_141013_i]);
			}
			_iter_next_22968d19a:;
			++it;
			_141013_i++;
			goto _iter_begin_22968d19a;
		}
		_iter_end_22968d19a:;
	};
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_140217_st));;
}



inline void _24553baee_check_multi_assign(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244866e5d_AssignSt>& _142843_a) {
	{
		auto &_match_expr{ _142843_a.get()._field_right.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2448619c4_FnCallExpr>>()) {
			_case_begin_2296921b0:;
			{
				_24553b879_check_ret_multi_assign(_self_, _142843_a);
				return;;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485de44_UnsafeExpr>>()) {
			_case_begin_229692237:;
			{
				{
					auto &_match_expr{ _142843_a.get()._field_right.get()._field_kind.operator jule::Ptr<_24485de44_UnsafeExpr>().get()._field_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_2448619c4_FnCallExpr>>()) {
						_case_begin_229693513:;
						{
							_24553b879_check_ret_multi_assign(_self_, _142843_a);
							return;;
						}
					}
					_match_end_22969348b:;
				};
			}
		}
		_match_end_2296919a6:;
	};
	jule::Slice<jule::Any> _144117_right = _245518081_get_expr_models(_142843_a.get()._field_right.get()._field_kind);;
	{
		
		if ((_142843_a.get()._field_left.len() > _144117_right.len())) {
			_case_begin_229694338:;
			{
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _142843_a.get()._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;;
			}
		}
		else if ((_142843_a.get()._field_left.len() < _144117_right.len())) {
			_case_begin_2296943b0:;
			{
				_245553bc1_push_err(_self_.get()._field_s.ptr(), _142843_a.get()._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;;
			}
		}
		_match_end_2296941e5:;
	};
	jule::Ptr<_244922436_TupleExprModel> _145217_right_tuple = jule::new_ptr<_244922436_TupleExprModel>();;
	jule::Ptr<_24552cb12_MultiAssign> _145417_st = jule::new_ptr<_24552cb12_MultiAssign>(_24552cb12_MultiAssign{._field_r=static_cast<jule::Any>(_145217_right_tuple)});;
	{
		auto &expr = _142843_a.get()._field_left;
		auto it = expr.begin();
		_iter_begin_229696b87:;
		if (it != expr.end()) {
			jule::I32 _145813_i = it - expr.begin();
			{
				jule::Ptr<_24486691e_AssignLeft> _145921_lexpr = _142843_a.get()._field_left[_145813_i];;
				jule::Ptr<_2455b5051_Data> _146021_l = nullptr;;
				if (((!(_2431e6cb7_is_ignore_ident(_145921_lexpr.get()._field_ident))) && ((!(_142843_a.get()._field_declarative)) || (!(_24553a8ab_is_new_assign_ident(_self_.ptr(), _145921_lexpr.get()._field_ident)))))) {
					_146021_l=_2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _145921_lexpr.get()._field_expr);
					if ((_146021_l == nullptr)) {
						goto _iter_next_229696b87;
					};
				};
				jule::Ptr<_24485c706_Expr> _147021_expr = jule::new_ptr<_24485c706_Expr>(_24485c706_Expr{._field_token=_142843_a.get()._field_right.get()._field_token, ._field_kind=_144117_right[_145813_i]});;
				jule::Ptr<_2455b6abe_Eval> _147421_eval = nullptr;;
				if ((_146021_l != nullptr)) {
					_147421_eval=_245558ec3_evalp(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0),_146021_l.get()._field_kind);
				} else {
					_147421_eval=_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0));
				};
				jule::Ptr<_2455b5051_Data> _148021_r = _2455d26de_eval_expr(_147421_eval, _147021_expr);;
				if ((_148021_r == nullptr)) {
					goto _iter_next_229696b87;
				};
				_145217_right_tuple.get()._field_datas = jule::alloc_for_append(_145217_right_tuple.get()._field_datas,1);_145217_right_tuple.get()._field_datas.__push(_148021_r);;
				_24553b604___process_end_part_of_multi_assign(_self_.ptr(), _145417_st,_142843_a,_145921_lexpr,_146021_l,_148021_r);
			}
			_iter_next_229696b87:;
			++it;
			_145813_i++;
			goto _iter_begin_229696b87;
		}
		_iter_end_229696b87:;
	};
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_145417_st));;
}



inline void _24553bd74_check_assign_st(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244866e5d_AssignSt> _149339_a) {
	{
		
		if (_2431e8d63_is_postfix_op(_149339_a.get()._field_setter.get()._field_kind)) {
			_case_begin_22969d793:;
			{
				_24553a59d_check_postfix(_self_, _149339_a);
			}
		}
		else if (((_149339_a.get()._field_left.len() == 1LL) && (!(_149339_a.get()._field_declarative)))) {
			_case_begin_22969d463:;
			{
				_24553b0b5_check_single_assign(_self_, _149339_a);
			}
		}
		else {
			_case_begin_22969d3ec:;
			{
				_24553baee_check_multi_assign(_self_, _149339_a);
			}
		}
		_match_end_22969cd8b:;
	};
}



inline jule::Ptr<_24552937d_Scope> _24553c22b_check_case_scope(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24552db9b_Case>& _150437_c, jule::Ptr<_244868503_ScopeTree>& _150452_tree) {
	jule::Ptr<_245531066_ScopeChecker> _150517_ssc = _245541609_new_child_checker(_self_);;
	_150517_ssc.get()._field_cse=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_150437_c));
	return _24553619d_check_child_sc(_self_, _150452_tree,_150517_ssc);
}



inline jule::Ptr<_24552db9b_Case> _24553c726_check_case(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24552d151_Match> _151034_m, jule::I32 _151045_i, jule::Ptr<_24486ecac_Case> _151057_c, jule::Ptr<_2455b5051_Data> _151076_expr) {
	jule::Ptr<_24552db9b_Case> _151117__case = _151034_m.get()._field_cases[_151045_i];;
	_151117__case.get()._field_exprs=jule::Slice<jule::Ptr<_2455b5051_Data>>::alloc(0LL,_151057_c.get()._field_exprs.len());
	jule::Bool _151317_generic_matched = false;;
	jule::Ptr<_2455b6abe_Eval> _151417_eval = _2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0));;
	{
		auto &expr = _151057_c.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_2296a3743:;
		if (it != expr.end()) {
			jule::Ptr<_24485c706_Expr> _151521_e = *it;
			{
				jule::Ptr<_2455b5051_Data> _151621_d = _2455d20c3_eval_expr_kind(_151417_eval, _151521_e.get()._field_kind);;
				if ((_151621_d == nullptr)) {
					goto _iter_next_2296a3743;
				};
				if (_151034_m.get()._field_type_match) {
					_151117__case.get()._field_exprs = jule::alloc_for_append(_151117__case.get()._field_exprs,1);_151117__case.get()._field_exprs.__push(_151621_d);;
					if ((_245507108_count_match_type(_151034_m,_151621_d.get()._field_kind) > 1LL)) {
						_245553bc1_push_err(_self_.get()._field_s.ptr(), _151521_e.get()._field_token,jule::Str("duplicated pattern: type @ is already matched", 45),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_151621_d.get()._field_kind.ptr()))}));
					};
					if (_151076_expr.get()._field_kind.get()._field_generic) {
						_151317_generic_matched=(_151317_generic_matched || _2455e1731_equals(_151076_expr.get()._field_kind, _151621_d.get()._field_kind));
					} else {
						if ((_2455e3ada_tenm(_151076_expr.get()._field_kind.ptr()) != nullptr)) {
							_245559c4e_check_type_compatibility(_self_.get()._field_s, _151076_expr.get()._field_kind,_151621_d.get()._field_kind,_151521_e.get()._field_token);
						} else {
							jule::Ptr<_24547ec51_Trait> _153129_trt = _2455e4800_trt(_151076_expr.get()._field_kind.ptr());;
							if ((_153129_trt != nullptr)) {
								_245559c4e_check_type_compatibility(_self_.get()._field_s, _151076_expr.get()._field_kind,_151621_d.get()._field_kind,_151521_e.get()._field_token);
							};
						};
					};
					goto _iter_next_2296a3743;
				};
				if (_151621_d.get()._field_decl) {
					_245553bc1_push_err(_self_.get()._field_s.ptr(), _151521_e.get()._field_token,jule::Str("expecting expression, found type declaration", 44),jule::Slice<jule::Any>());
					_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("you can use type-match if you want to match types", 49),jule::Slice<jule::Any>());
					goto _iter_next_2296a3743;
				};
				_151117__case.get()._field_exprs = jule::alloc_for_append(_151117__case.get()._field_exprs,1);_151117__case.get()._field_exprs.__push(_151621_d);;
				_2455a0a0e_AssignTypeChecker _154921_checker = _2455a0a0e_AssignTypeChecker{._field_s=_self_.get()._field_s, ._field_dest=_151076_expr.get()._field_kind, ._field_d=_151621_d, ._field_error_token=_151521_e.get()._field_token};;
				_2455a1b86_check(&_154921_checker);
			}
			_iter_next_2296a3743:;
			++it;
			goto _iter_begin_2296a3743;
		}
		_iter_end_2296a3743:;
	};
	if ((((!(_151034_m.get()._field_type_match)) || (!(_151076_expr.get()._field_kind.get()._field_generic))) || _151317_generic_matched)) {
		_151117__case.get()._field_scope=_24553c22b_check_case_scope(_self_, _151117__case,_151057_c.get()._field_scope);
	};
	return _151117__case;
}



inline void _24553cade_check_cases(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244870483_MatchCase>& _156336_m, jule::Ptr<_24552d151_Match> _156355_rm, jule::Ptr<_2455b5051_Data> _156371_expr) {
	_156355_rm.get()._field_cases=jule::Slice<jule::Ptr<_24552db9b_Case>>::alloc(0LL,_156336_m.get()._field_cases.len());
	{
		auto &expr = _156336_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_2296abdde:;
		if (it != expr.end()) {
			jule::I32 _156513_i = it - expr.begin();
			{
				jule::Ptr<_24552db9b_Case> _156621__case = jule::new_ptr<_24552db9b_Case>(_24552db9b_Case{._field_owner=_156355_rm, });;
				if ((_156513_i > 0LL)) {
					_156355_rm.get()._field_cases[(_156513_i - 1LL)].get()._field_next=_156621__case;
				};
				_156355_rm.get()._field_cases = jule::alloc_for_append(_156355_rm.get()._field_cases,1);_156355_rm.get()._field_cases.__push(_156621__case);;
			}
			_iter_next_2296abdde:;
			++it;
			_156513_i++;
			goto _iter_begin_2296abdde;
		}
		_iter_end_2296abdde:;
	};
	if (((_156355_rm.get()._field_default != nullptr) && (_156336_m.get()._field_cases.len() > 0LL))) {
		_156355_rm.get()._field_cases[(_156355_rm.get()._field_cases.len() - 1LL)].get()._field_next=_156355_rm.get()._field_default;
	};
	{
		auto &expr = _156336_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_2296b0464:;
		if (it != expr.end()) {
			jule::I32 _157914_i = it - expr.begin();
			jule::Ptr<_24486ecac_Case> _157921_c = *it;
			{
				_24553c726_check_case(_self_, _156355_rm,_157914_i,_157921_c,_156371_expr);
			}
			_iter_next_2296b0464:;
			++it;
			_157914_i++;
			goto _iter_begin_2296b0464;
		}
		_iter_end_2296b0464:;
	};
}



inline jule::Ptr<_24552db9b_Case> _24553ce96_check_default(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24552d151_Match> _158437_m, jule::Ptr<_24486dbe0_Else> _158452_d) {
	jule::Ptr<_24552db9b_Case> _158517_def = jule::new_ptr<_24552db9b_Case>(_24552db9b_Case{._field_owner=_158437_m, });;
	_158517_def.get()._field_scope=_24553c22b_check_case_scope(_self_, _158517_def,_158452_d.get()._field_scope);
	return _158517_def;
}



inline void _24553d21b_check_comptime_panic(_245531066_ScopeChecker* _self_, jule::Ptr<_24552937d_Scope>& _159240_s) {
	if ((_159240_s.get()._field_stmts.len() != 1LL)) {
		return;;
	};
	jule::Any _159713_stmt = _159240_s.get()._field_stmts[0LL];;
	{
		auto &_match_expr{ _159713_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_2296b3775:;
			{
				jule::Ptr<_2455b5051_Data> _160017_d = _159713_stmt.operator jule::Ptr<_2455b5051_Data>();;
				{
					auto &_match_expr{ _160017_d.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>>()) {
						_case_begin_2296b45ab:;
						{
							jule::Ptr<_244922dc6_BuiltinPanicCallExprModel> _160321_m = _160017_d.get()._field_model.operator jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>();;
							{
								auto &_match_expr{ _160321_m.get()._field_expr };
								
								if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
									_case_begin_2296b559b:;
									{
										jule::Ptr<_2448ab524_Const> _160625_c = _160321_m.get()._field_expr.operator jule::Ptr<_2448ab524_Const>();;
										if (_24491a0dd_is_str(_160625_c.ptr())) {
											_245553bc1_push_err((*_self_)._field_s.ptr(), (*_self_)._field_called_from,jule::Str("compile-time panic: @", 21),jule::Slice<jule::Any>::make({jule::Any(_244917c45_read_str(_160625_c.ptr()))}));
										};
									}
								}
								_match_end_2296b5502:;
							};
						}
					}
					_match_end_2296b4468:;
				};
			}
		}
		_match_end_2296b3720:;
	};
}



inline void _24553d53a_push_type_match(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24552d151_Match> _161539_tm, jule::Ptr<_244870483_MatchCase>& _161556_m) {
	if (_161539_tm.get()._field_expr.get()._field_kind.get()._field_generic) {
		{
			auto &expr = _161539_tm.get()._field_cases;
			auto it = expr.begin();
			_iter_begin_2296b4a62:;
			if (it != expr.end()) {
				jule::Ptr<_24552db9b_Case> _161925_c = *it;
				{
					if ((_161925_c.get()._field_scope != nullptr)) {
						_24553d21b_check_comptime_panic(_self_.ptr(), _161925_c.get()._field_scope);
						_161539_tm.get()._field_default=_161925_c;
						_161539_tm.get()._field_cases=nullptr;
						goto _julec_label_push;
					};
				}
				_iter_next_2296b4a62:;
				++it;
				goto _iter_begin_2296b4a62;
			}
			_iter_end_2296b4a62:;
		};
		if ((_161556_m.get()._field_default != nullptr)) {
			_161539_tm.get()._field_cases=nullptr;
			_161539_tm.get()._field_default=_24553ce96_check_default(_self_, _161539_tm,_161556_m.get()._field_default);
			if ((_161539_tm.get()._field_default != nullptr)) {
				_24553d21b_check_comptime_panic(_self_.ptr(), _161539_tm.get()._field_default.get()._field_scope);
			};
		};
	};
	_julec_label_push:;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_161539_tm));;
}



inline void _24553d7b0_check_type_match(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244870483_MatchCase>& _163941_m) {
	jule::Ptr<_2455b5051_Data> _164017_d = _2455d23d1_eval(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _163941_m.get()._field_expr);;
	if ((_164017_d == nullptr)) {
		return;;
	};
	if (((!(_164017_d.get()._field_kind.get()._field_generic)) && (!(((((_2455e3139_prim(_164017_d.get()._field_kind.ptr()) != nullptr) && _2455e8e97_is_any(_2455e3139_prim(_164017_d.get()._field_kind.ptr()).ptr())) || (_2455e4800_trt(_164017_d.get()._field_kind.ptr()) != nullptr)) || (_2455e3ada_tenm(_164017_d.get()._field_kind.ptr()) != nullptr)))))) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _163941_m.get()._field_expr.get()._field_token,jule::Str("type-match must be have <any>, <type enum>, <trait> or <generic> typed expression", 81),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_24552d151_Match> _165117_tm = jule::new_ptr<_24552d151_Match>(_24552d151_Match{._field_expr=_164017_d, ._field_type_match=true, });;
	if (((!(_165117_tm.get()._field_expr.get()._field_kind.get()._field_generic)) && (_163941_m.get()._field_default != nullptr))) {
		_165117_tm.get()._field_default=_24553ce96_check_default(_self_, _165117_tm,_163941_m.get()._field_default);
	};
	_24553cade_check_cases(_self_, _163941_m,_165117_tm,_164017_d);
	_24553d53a_push_type_match(_self_, _165117_tm,_163941_m);
}



inline void _24553da35_check_common_match(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244870483_MatchCase>& _166443_m) {
	jule::Ptr<_2455b5051_Data> _166517_d = nullptr;;
	if ((_166443_m.get()._field_expr == nullptr)) {
		_166517_d=jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), ._field_constant=static__2449166c2_new_bool(true)});
		_166517_d.get()._field_model=static_cast<jule::Any>(_166517_d.get()._field_constant);
	} else {
		_166517_d=_2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _166443_m.get()._field_expr);
		if ((_166517_d == nullptr)) {
			return;;
		};
	};
	jule::Ptr<_24552d151_Match> _167917_mc = jule::new_ptr<_24552d151_Match>(_24552d151_Match{._field_expr=_166517_d, });;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_167917_mc));;
	if ((_166443_m.get()._field_default != nullptr)) {
		_167917_mc.get()._field_default=_24553ce96_check_default(_self_, _167917_mc,_166443_m.get()._field_default);
	};
	_24553cade_check_cases(_self_, _166443_m,_167917_mc,_166517_d);
}



inline void _24553dcaa_check_match(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244870483_MatchCase> _169135_m) {
	if (_169135_m.get()._field_type_match) {
		_24553d7b0_check_type_match(_self_, _169135_m);
		return;;
	};
	_24553da35_check_common_match(_self_, _169135_m);
}



inline void _24553e030_check_fall(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244866314_FallSt> _169930_f) {
	if ((((_self_.get()._field_cse == 0LLU) || ((_self_.get()._field_scope.get()._field_stmts.len() + 1LL) < _self_.get()._field_scope.get()._field_stmts.len())) || _245533e15_is_deferred(_self_))) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _169930_f.get()._field_token,jule::Str("fall keyword can only useable at end of the case scopes", 55),jule::Slice<jule::Any>());
		return;;
	};
	_24552db9b_Case* _170717__case = ((_24552db9b_Case*)(_self_.get()._field_cse));;
	if ((_170717__case->_field_next == nullptr)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _169930_f.get()._field_token,jule::Str("fall cannot useable at final case", 33),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion(_self_.get()._field_s.ptr(), jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>());
		return;;
	};
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(jule::new_ptr<_24552e251_FallSt>(_24552e251_FallSt{._field_dest_case=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_170717__case->_field_next))})));;
}



inline jule::Ptr<_24552b858_BreakSt> _24553e33d_check_break_with_label(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486d00d_BreakSt> _171942_b) {
	jule::Ptr<_24552b858_BreakSt> _172017_brk = _24553e64b_check_plain_break(_self_, _171942_b);;
	if ((_172017_brk == nullptr)) {
		return nullptr;
	};
	_172017_brk.get()._field_it=0LLU;
	_172017_brk.get()._field_mtch=0LLU;
	jule::Ptr<_24552ecce_ScopeLabel> _173017_label = _24550527c_find_label_parent(_171942_b.get()._field_label.get()._field_kind,_self_.get()._field_parent);;
	if ((_173017_label == nullptr)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _171942_b.get()._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>::make({jule::Any(_171942_b.get()._field_label.get()._field_kind)}));
		return nullptr;
	};
	_173017_label.get()._field_used=true;
	if (((_173017_label.get()._field_pos + 1LL) >= _173017_label.get()._field_scope.get()._field_scope.get()._field_stmts.len())) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _171942_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_171942_b.get()._field_label.get()._field_kind)}));
		return nullptr;
	};
	jule::I32 _174313_i = (_173017_label.get()._field_pos + 1LL);;
	if ((_174313_i >= _173017_label.get()._field_scope.get()._field_scope.get()._field_stmts.len())) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _171942_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_171942_b.get()._field_label.get()._field_kind)}));
	} else {
		jule::Any _174721_st = _173017_label.get()._field_scope.get()._field_scope.get()._field_stmts[_174313_i];;
		{
			auto &_match_expr{ _174721_st };
			
			if (_match_expr.type_is<jule::Ptr<_24552a24c_InfIter>>()) {
				_case_begin_2296cd6b3:;
				{
					_172017_brk.get()._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_174721_st.operator jule::Ptr<_24552a24c_InfIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_24552b0a5_RangeIter>>()) {
				_case_begin_2296d1c16:;
				{
					_172017_brk.get()._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_174721_st.operator jule::Ptr<_24552b0a5_RangeIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_24552a6c0_WhileIter>>()) {
				_case_begin_2296d1c7c:;
				{
					_172017_brk.get()._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_174721_st.operator jule::Ptr<_24552a6c0_WhileIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_24552d151_Match>>()) {
				_case_begin_2296d1ce3:;
				{
					_172017_brk.get()._field_mtch=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_174721_st.operator jule::Ptr<_24552d151_Match>()));
				}
			}
			else {
				_case_begin_2296d1ab2:;
				{
					_245553bc1_push_err(_self_.get()._field_s.ptr(), _171942_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_171942_b.get()._field_label.get()._field_kind)}));
				}
			}
			_match_end_2296d19d5:;
		};
	};
	if ((_172017_brk.get()._field_it != 0LLU)) {
		if ((!(_245539789_check_valid_break_label(_self_, _172017_brk.get()._field_it)))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _171942_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_171942_b.get()._field_label.get()._field_kind)}));
		};
	};
	if ((_172017_brk.get()._field_mtch != 0LLU)) {
		if ((!(_245539789_check_valid_break_label(_self_, _172017_brk.get()._field_mtch)))) {
			_245553bc1_push_err(_self_.get()._field_s.ptr(), _171942_b.get()._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_171942_b.get()._field_label.get()._field_kind)}));
		};
	};
	return _172017_brk;
}



inline jule::Ptr<_24552b858_BreakSt> _24553e64b_check_plain_break(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486d00d_BreakSt> _177737_b) {
	if (_245533e15_is_deferred(_self_)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _177737_b.get()._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_245531066_ScopeChecker> _178317_scope = _self_;;
	_julec_label_iter:;
	{
		
		if (((((_178317_scope.get()._field_it == 0LLU) && (_178317_scope.get()._field_cse == 0LLU)) && (_178317_scope.get()._field_parent != nullptr)) && (_178317_scope.get()._field_owner == nullptr))) {
			_case_begin_2296d8091:;
			{
				_178317_scope=_178317_scope.get()._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((_178317_scope.get()._field_it != 0LLU)) {
			_case_begin_2296d8118:;
			{
				return jule::new_ptr<_24552b858_BreakSt>(_24552b858_BreakSt{._field_it=_178317_scope.get()._field_it, });
			}
		}
		else if ((_178317_scope.get()._field_cse != 0LLU)) {
			_case_begin_2296d8190:;
			{
				return jule::new_ptr<_24552b858_BreakSt>(_24552b858_BreakSt{._field_mtch=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(((_24552db9b_Case*)(_178317_scope.get()._field_cse))->_field_owner))});
			}
		}
		_match_end_2296d7ec5:;
	};
	_245553bc1_push_err(_self_.get()._field_s.ptr(), _177737_b.get()._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _24553e8c1_check_break(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486d00d_BreakSt> _179931_b) {
	if ((_179931_b.get()._field_label != nullptr)) {
		jule::Ptr<_24552b858_BreakSt> _180121_brk = _24553e33d_check_break_with_label(_self_, _179931_b);;
		_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_180121_brk));;
		return;;
	};
	jule::Ptr<_24552b858_BreakSt> _180617_brk = _24553e64b_check_plain_break(_self_, _179931_b);;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_180617_brk));;
}



inline void _24553eb46_check_ret(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24486b380_RetSt> _181033_r) {
	if (_245533e15_is_deferred(_self_)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _181033_r.get()._field_token,jule::Str("deferred scopes are not supports return statements", 50),jule::Slice<jule::Any>());
	};
	jule::Ptr<_24552e6c4_RetSt> _181517_rt = jule::new_ptr<_24552e6c4_RetSt>(_24552e6c4_RetSt{._field_func=_245534179_get_root(_self_).get()._field_owner, });;
	_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_181517_rt));;
	jule::Ptr<_2455ad445_RetTypeChecker> _182017_rtc = jule::new_ptr<_2455ad445_RetTypeChecker>(_2455ad445_RetTypeChecker{._field_sc=_self_, ._field_f=_181517_rt.get()._field_func, ._field_error_token=_181033_r.get()._field_token, });;
	jule::Bool _182513_ok = _2455ae336_check(_182017_rtc.ptr(), _181033_r.get()._field_expr);;
	if ((!(_182513_ok))) {
		return;;
	};
	if (((_181033_r.get()._field_expr == nullptr) && (_182017_rtc.get()._field_vars.len() == 0LL))) {
		return;;
	};
	_181517_rt.get()._field_vars=_182017_rtc.get()._field_vars;
	if ((_181033_r.get()._field_expr != nullptr)) {
		_181517_rt.get()._field_expr=_182017_rtc.get()._field_model;
	};
}



inline void _24553edbb_check_use_expr(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_24485d097_UseExpr> _184134_ue) {
	if ((_self_.get()._field_result == nullptr)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _184134_ue.get()._field_token,jule::Str("use expressions cannot useable out of exceptional handler scopes", 64),jule::Slice<jule::Any>());
		return;;
	};
	if (_245533e15_is_deferred(_self_)) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _184134_ue.get()._field_token,jule::Str("use expressions cannot useable in deferred scopes", 49),jule::Slice<jule::Any>());
	};
	if (((_self_.get()._field_i + 1LL) < _self_.get()._field_tree.get()._field_stmts.len())) {
		_245553bc1_push_err(_self_.get()._field_s.ptr(), _184134_ue.get()._field_token,jule::Str("use expressions must be last statement of scope", 47),jule::Slice<jule::Any>());
	};
}



inline void _245540141_check_node(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Any& _185735_node) {
	{
		auto &_match_expr{ _185735_node };
		
		if (_match_expr.type_is<jule::Ptr<_244868503_ScopeTree>>()) {
			_case_begin_2296eb47d:;
			{
				_245536731_check_anon_scope(_self_, _185735_node.operator jule::Ptr<_244868503_ScopeTree>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486aec8_VarDecl>>()) {
			_case_begin_2296eae72:;
			{
				_245535444_check_var_decl(_self_, _185735_node.operator jule::Ptr<_24486aec8_VarDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486e839_TypeAliasDecl>>()) {
			_case_begin_2296eb37e:;
			{
				_2455356b9_check_type_alias_decl(_self_, _185735_node.operator jule::Ptr<_24486e839_TypeAliasDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485c706_Expr>>()) {
			_case_begin_2296eb6c0:;
			{
				_245536cc5_check_expr(_self_, _185735_node.operator jule::Ptr<_24485c706_Expr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485e2eb_CoExpr>>()) {
			_case_begin_2296eb879:;
			{
				_24553704a_check_co_expr(_self_, _185735_node.operator jule::Ptr<_24485e2eb_CoExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486e163_Conditional>>()) {
			_case_begin_2296eb8e0:;
			{
				_2455378db_check_conditional(_self_, _185735_node.operator jule::Ptr<_24486e163_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486b9e0_Iter>>()) {
			_case_begin_2296eb956:;
			{
				_24553914b_check_iter(_self_, _185735_node.operator jule::Ptr<_24486b9e0_Iter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486d3b5_ContSt>>()) {
			_case_begin_2296eb9bc:;
			{
				_245539d2d_check_cont(_self_, _185735_node.operator jule::Ptr<_24486d3b5_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244865b71_LabelSt>>()) {
			_case_begin_2296eba33:;
			{
				_24553a0a3_check_label(_self_, _185735_node.operator jule::Ptr<_244865b71_LabelSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244866028_GotoSt>>()) {
			_case_begin_2296eba99:;
			{
				_24553a328_push_goto(_self_, _185735_node.operator jule::Ptr<_244866028_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244866e5d_AssignSt>>()) {
			_case_begin_2296ebb10:;
			{
				_24553bd74_check_assign_st(_self_, _185735_node.operator jule::Ptr<_244866e5d_AssignSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244870483_MatchCase>>()) {
			_case_begin_2296ebb76:;
			{
				_24553dcaa_check_match(_self_, _185735_node.operator jule::Ptr<_244870483_MatchCase>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244866314_FallSt>>()) {
			_case_begin_2296ebbdc:;
			{
				_24553e030_check_fall(_self_, _185735_node.operator jule::Ptr<_244866314_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486d00d_BreakSt>>()) {
			_case_begin_2296ebc53:;
			{
				_24553e8c1_check_break(_self_, _185735_node.operator jule::Ptr<_24486d00d_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486b380_RetSt>>()) {
			_case_begin_2296ebcb9:;
			{
				_24553eb46_check_ret(_self_, _185735_node.operator jule::Ptr<_24486b380_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485d097_UseExpr>>()) {
			_case_begin_2296ebd30:;
			{
				_24553edbb_check_use_expr(_self_, _185735_node.operator jule::Ptr<_24485d097_UseExpr>());
			}
		}
		else {
			_case_begin_2296eb0e8:;
			{
				jule::outln(jule::Str("error <unimplemented scope node>", 32));
			}
		}
		_match_end_2296eb01b:;
	};
}



inline void _24554031c_check_result(jule::Ptr<_245531066_ScopeChecker> _self_) {
	_244867de8_Stmt _189717_stmt = _self_.get()._field_tree.get()._field_stmts[(_self_.get()._field_tree.get()._field_stmts.len() - 1LL)];;
	{
		auto &_match_expr{ _189717_stmt._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_24485d097_UseExpr>>()) {
			_case_begin_229705c5c:;
			{
				jule::Ptr<_24485d097_UseExpr> _190021_ue = _189717_stmt._field_data.operator jule::Ptr<_24485d097_UseExpr>();;
				jule::Ptr<_2455b5051_Data> _190121_d = _2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _190021_ue.get()._field_expr);;
				if ((_190121_d == nullptr)) {
					return;;
				};
				_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_190121_d));;
				jule::Ptr<_2455ad445_RetTypeChecker> _190621_rtc = jule::new_ptr<_2455ad445_RetTypeChecker>(_2455ad445_RetTypeChecker{._field_sc=_self_, ._field_types=_24492aad2_types(_self_.get()._field_result.ptr()), ._field_error_token=_190021_ue.get()._field_expr.get()._field_token, });;
				_2455ae336_check(_190621_rtc.ptr(), _190021_ue.get()._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485c706_Expr>>()) {
			_case_begin_229705cc3:;
			{
				jule::Ptr<_24485c706_Expr> _191321_expr = _189717_stmt._field_data.operator jule::Ptr<_24485c706_Expr>();;
				jule::Ptr<_2455b5051_Data> _191421_d = _2455d26de_eval_expr(_2455592d1_eval(_self_.get()._field_s, jule::Trait<_24560bac0_Lookup>(_self_, 0)), _191321_expr);;
				if ((_191421_d == nullptr)) {
					return;;
				};
				{
					auto &_match_expr{ _191421_d.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>()) {
						_case_begin_22970a4ae:;
						{
							jule::Ptr<_244923866_BuiltinErrorCallExprModel> _192025_m = _191421_d.get()._field_model.operator jule::Ptr<_244923866_BuiltinErrorCallExprModel>();;
							_245536a50_process_error_call(_self_, _192025_m,_191321_expr.get()._field_token);
							_self_.get()._field_scope.get()._field_stmts = jule::alloc_for_append(_self_.get()._field_scope.get()._field_stmts,1);_self_.get()._field_scope.get()._field_stmts.__push(static_cast<jule::Any>(_191421_d));;
						}
					}
					else {
						_case_begin_22970a36b:;
						{
							return;;
						}
					}
					_match_end_22970a316:;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244866028_GotoSt>>() || _match_expr.type_is<jule::Ptr<_24486d00d_BreakSt>>() || _match_expr.type_is<jule::Ptr<_24486d3b5_ContSt>>() || _match_expr.type_is<jule::Ptr<_24486b380_RetSt>>()) {
			_case_begin_229705421:;
			{
				_245540141_check_node(_self_, _189717_stmt._field_data);
			}
		}
		else {
			_case_begin_2297053aa:;
			{
				_245540141_check_node(_self_, _189717_stmt._field_data);
				return;;
			}
		}
		_match_end_229705234:;
	};
	_self_.get()._field_result=nullptr;
}



inline void _2455404e8_check_tree(jule::Ptr<_245531066_ScopeChecker> _self_) {
	_self_.get()._field_i=0LL;
	jule::I32 _194217_n = _self_.get()._field_tree.get()._field_stmts.len();;
	if ((_self_.get()._field_result != nullptr)) {
		(_194217_n)--;
	};
	for (; (_self_.get()._field_i < _194217_n); (_self_.get()._field_i)++) {
		{
			_244867de8_Stmt _195021_stmt = _self_.get()._field_tree.get()._field_stmts[_self_.get()._field_i];;
			_245540141_check_node(_self_, _195021_stmt._field_data);
			if (_245533ba1_stopped(_self_.ptr())) {
				return;;
			};
		}
	_iter_next_22970d902:;
	}
	_iter_end_22970d902:;;
	if (((_self_.get()._field_result != nullptr) && (_self_.get()._field_tree.get()._field_stmts.len() != 0LL))) {
		_24554031c_check_result(_self_);
	};
}



inline void _245540817_check_goto(_245531066_ScopeChecker* _self_, jule::Ptr<_245530252_ScopeGoto>& _196134_gt, jule::Ptr<_24552ecce_ScopeLabel>& _196155_label) {
	jule::Ptr<_245531066_ScopeChecker> _196217_gtsc = _196134_gt.get()._field_scope;;
	while (((_196217_gtsc.get()._field_child_index - 1LL) > _196155_label.get()._field_scope.get()._field_child_index)) {
		{
			_196217_gtsc=_196217_gtsc.get()._field_parent;
		}
	_iter_next_2297119e3:;
	}
	_iter_end_2297119e3:;;
	jule::I32 _196717_n = 0LL;;
	if ((_196217_gtsc.get()._field_scope == _196155_label.get()._field_scope.get()._field_scope)) {
		if ((_196134_gt.get()._field_pos > _196155_label.get()._field_pos)) {
			return;;
		};
		_196717_n=_196134_gt.get()._field_pos;
	};
	jule::I32 _198017_i = (_196155_label.get()._field_pos - 1LL);;
	if ((_196717_n == 0LL)) {
		{
			auto &expr = _196155_label.get()._field_scope.get()._field_scope.get()._field_stmts;
			auto it = expr.begin();
			_iter_begin_2297140de:;
			if (it != expr.end()) {
				jule::I32 _198317_j = it - expr.begin();
				jule::Any _198320_stmt = *it;
				{
					if (_24550624a_stmt_is_goto_scope(_198320_stmt,_196217_gtsc.get()._field_scope)) {
						_196717_n=_198317_j;
						goto _iter_end_2297140de;
					};
				}
				_iter_next_2297140de:;
				++it;
				_198317_j++;
				goto _iter_begin_2297140de;
			}
			_iter_end_2297140de:;
		};
	};
	for (; (_198017_i >= _196717_n); (_198017_i)--) {
		{
			jule::Any _199321_stmt = _196155_label.get()._field_scope.get()._field_scope.get()._field_stmts[_198017_i];;
			if (_245503104_stmt_is_def(_199321_stmt)) {
				_245553bc1_push_err((*_self_)._field_s.ptr(), _196134_gt.get()._field_gt.get()._field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>::make({jule::Any(_196134_gt.get()._field_gt.get()._field_label.get()._field_kind)}));
				return;;
			};
		}
	_iter_next_229713b5a:;
	}
	_iter_end_229713b5a:;;
}



inline void _2455409e3_check_gotos(_245531066_ScopeChecker* _self_) {
	{
		auto &expr = (*((*_self_)._field_gotos));
		auto it = expr.begin();
		_iter_begin_229716047:;
		if (it != expr.end()) {
			jule::Ptr<_245530252_ScopeGoto> _200221_gt = *it;
			{
				jule::Ptr<_24552ecce_ScopeLabel> _200321_label = _245534d17_find_label_all(&(*_self_), _200221_gt.get()._field_gt.get()._field_label.get()._field_kind);;
				if ((_200321_label == nullptr)) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _200221_gt.get()._field_gt.get()._field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>::make({jule::Any(_200221_gt.get()._field_gt.get()._field_label.get()._field_kind)}));
					goto _iter_next_229716047;
				};
				_200321_label.get()._field_used=true;
				_245540817_check_goto(&(*_self_), _200221_gt,_200321_label);
			}
			_iter_next_229716047:;
			++it;
			goto _iter_begin_229716047;
		}
		_iter_end_229716047:;
	};
}



inline void _245540bbe_check_labels(_245531066_ScopeChecker* _self_) {
	{
		auto &expr = (*((*_self_)._field_labels));
		auto it = expr.begin();
		_iter_begin_2297194e0:;
		if (it != expr.end()) {
			jule::Ptr<_24552ecce_ScopeLabel> _201516_l = *it;
			{
				if ((!(_201516_l.get()._field_used))) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _201516_l.get()._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>::make({jule::Any(_201516_l.get()._field_label.get()._field_ident)}));
				};
			}
			_iter_next_2297194e0:;
			++it;
			goto _iter_begin_2297194e0;
		}
		_iter_end_2297194e0:;
	};
}



inline void _245540d9a_check_vars(_245531066_ScopeChecker* _self_) {
	{
		auto &expr = (*_self_)._field_table.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_2297198ca:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> _202316_v = *it;
			{
				if (((((!(_202316_v.get()._field_used)) && (!(_2431e6cb7_is_ignore_ident(_202316_v.get()._field_ident)))) && (!(_2431e705e_is_anon_ident(_202316_v.get()._field_ident)))) && (_202316_v.get()._field_ident != jule::Str("self", 4)))) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _202316_v.get()._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>::make({jule::Any(_202316_v.get()._field_ident)}));
				};
			}
			_iter_next_2297198ca:;
			++it;
			goto _iter_begin_2297198ca;
		}
		_iter_end_2297198ca:;
	};
}



inline void _245541076_check_aliases(_245531066_ScopeChecker* _self_) {
	{
		auto &expr = (*_self_)._field_table.get()._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_22971b657:;
		if (it != expr.end()) {
			jule::Ptr<_2455e0334_TypeAlias> _203116_a = *it;
			{
				if ((((!(_203116_a.get()._field_used)) && (!(_2431e6cb7_is_ignore_ident(_203116_a.get()._field_ident)))) && (!(_2431e705e_is_anon_ident(_203116_a.get()._field_ident))))) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _203116_a.get()._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>::make({jule::Any(_203116_a.get()._field_ident)}));
				};
			}
			_iter_next_22971b657:;
			++it;
			goto _iter_begin_22971b657;
		}
		_iter_end_22971b657:;
	};
}



inline void _245541395_check(jule::Ptr<_245531066_ScopeChecker> _self_, jule::Ptr<_244868503_ScopeTree>& _203930_tree, jule::Ptr<_24552937d_Scope>& _203953_s) {
	_203953_s.get()._field_deferred=_203930_tree.get()._field_deferred;
	_203953_s.get()._field_unsafety=_203930_tree.get()._field_unsafety;
	jule::I32 _204313_errors = _self_.get()._field_s.get()._field_errors.len();;
	_self_.get()._field_tree=_203930_tree;
	_self_.get()._field_scope=_203953_s;
	_2455404e8_check_tree(_self_);
	if ((_204313_errors == _self_.get()._field_s.get()._field_errors.len())) {
		_245540d9a_check_vars(_self_.ptr());
		_245541076_check_aliases(_self_.ptr());
		if (_245533761_is_root(_self_.ptr())) {
			_2455409e3_check_gotos(_self_.ptr());
			_245540bbe_check_labels(_self_.ptr());
		};
	};
}



inline jule::Ptr<_245531066_ScopeChecker> _245541609_new_child_checker(jule::Ptr<_245531066_ScopeChecker> _self_) {
	jule::Ptr<_245531066_ScopeChecker> _206317_base = _245503841_new_scope_checker_base(_self_.get()._field_s,nullptr);;
	_206317_base.get()._field_parent=_self_;
	_206317_base.get()._field_labels=_self_.get()._field_labels;
	_206317_base.get()._field_gotos=_self_.get()._field_gotos;
	_206317_base.get()._field_child_index=static_cast<jule::I32>((_self_.get()._field_child_index + 1LL));
	return _206317_base;
}







std::ostream &operator<<(std::ostream &_Stream, _245531066_ScopeChecker _Src) {
	_Stream << "ScopeChecker{";
	_Stream << "called_from:" << _Src._field_called_from << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _2455425e9_check_cdef(_2455421a9_DirectiveChecker* _self_, jule::Ptr<_2448249dc_Directive>& _1630_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_244926d0e_Fn>>()) {
			_case_begin_229723e45:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_244926d0e_Fn>().get()._field_cpp_linked) {
					goto _match_end_229724187;
				};
				goto _case_begin_2297241dc;
			}
		}
		else {
			_case_begin_2297241dc:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _1630_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_1630_d.get()._field_tag.get()._field_kind)}));
			}
		}
		_match_end_229724187:;
	};
	if ((_1630_d.get()._field_args.len() > 0LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _1630_d.get()._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
}



inline void _24554286e_check_typedef(_2455421a9_DirectiveChecker* _self_, jule::Ptr<_2448249dc_Directive>& _3233_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229727025:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_244848912_Struct>().get()._field_cpp_linked) {
					goto _match_end_2297268d7;
				};
				goto _case_begin_22972693c;
			}
		}
		else {
			_case_begin_22972693c:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _3233_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_3233_d.get()._field_tag.get()._field_kind)}));
			}
		}
		_match_end_2297268d7:;
	};
	if ((_3233_d.get()._field_args.len() > 0LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _3233_d.get()._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
}



inline void _245542ae4_check_derive(_2455421a9_DirectiveChecker* _self_, jule::Ptr<_2448249dc_Directive>& _4832_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229728e39:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_244848912_Struct>().get()._field_cpp_linked))) {
					goto _match_end_229729159;
				};
				goto _case_begin_2297291ae;
			}
		}
		else {
			_case_begin_2297291ae:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>());
			}
		}
		_match_end_229729159:;
	};
	if ((_4832_d.get()._field_args.len() == 0LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion((*_self_)._field_s.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;;
	} else if ((_4832_d.get()._field_args.len() > 1LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	{
		auto &_match_expr{ _4832_d.get()._field_args[0LL].get()._field_kind };
		
		if (_match_expr == jule::Str("Clone", 5)) {
			_case_begin_22972cb41:;
		}
		else {
			_case_begin_2297292e1:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _4832_d.get()._field_args[0LL],jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_4832_d.get()._field_args[0LL].get()._field_kind)}));
			}
		}
		_match_end_22972c701:;
	};
}



inline void _245542d69_check_namespace(_2455421a9_DirectiveChecker* _self_, jule::Ptr<_2448249dc_Directive>& _7439_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_22972e604:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_244848912_Struct>().get()._field_cpp_linked))) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_7439_d.get()._field_tag.get()._field_kind)}));
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244926d0e_Fn>>()) {
			_case_begin_22972dba8:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_244926d0e_Fn>().get()._field_cpp_linked))) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_7439_d.get()._field_tag.get()._field_kind)}));
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_22972e14d:;
			{
				if ((!((*_self_)._field_o.operator jule::Ptr<_24556cc1d_Var>().get()._field_cpp_linked))) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_7439_d.get()._field_tag.get()._field_kind)}));
				};
			}
		}
		else {
			_case_begin_22972e01b:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_7439_d.get()._field_tag.get()._field_kind)}));
			}
		}
		_match_end_22972deb6:;
	};
	if ((_7439_d.get()._field_args.len() == 0LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;;
	} else if ((_7439_d.get()._field_args.len() > 1LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _7439_d.get()._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2431e4523_Token> _9913_arg = _7439_d.get()._field_args[0LL];;
	if ((_9913_arg.get()._field_id != static_cast<jule::U32>(6LLU))) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _9913_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	if ((_9913_arg.get()._field_kind[0LL] != '\"')) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _9913_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	_7439_d.get()._field_args[0LL].get()._field_kind=_9913_arg.get()._field_kind.slice(1LL,(_9913_arg.get()._field_kind.len() - 1LL));
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229737750:;
			{
				if ((_2455da708_find_directive((*((*_self_)._field_d)),jule::Str("typedef", 7)) == nullptr)) {
					jule::Ptr<_2448249dc_Directive> _11625_typedef = jule::new_ptr<_2448249dc_Directive>(_2448249dc_Directive{._field_tag=_7439_d.get()._field_tag, });;
					_11625_typedef.get()._field_tag.get()._field_kind=jule::Str("typedef", 7);
					(*((*_self_)._field_d))=jule::append((*((*_self_)._field_d)),jule::Slice<jule::Ptr<_2448249dc_Directive>>::make({_11625_typedef}));
				};
			}
		}
		_match_end_22973562c:;
	};
}



inline void _2455430de_check_deprecated(_2455421a9_DirectiveChecker* _self_, jule::Ptr<_2448249dc_Directive>& _12540_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_2297384ba:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_244848912_Struct>().get()._field_cpp_linked) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _12540_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_12540_d.get()._field_tag.get()._field_kind)}));
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244926d0e_Fn>>()) {
			_case_begin_2297399d8:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_244926d0e_Fn>().get()._field_cpp_linked) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _12540_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_12540_d.get()._field_tag.get()._field_kind)}));
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_229739a4e:;
			{
				if ((*_self_)._field_o.operator jule::Ptr<_24556cc1d_Var>().get()._field_cpp_linked) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _12540_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_12540_d.get()._field_tag.get()._field_kind)}));
				};
			}
		}
		else {
			_case_begin_2297393de:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _12540_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_12540_d.get()._field_tag.get()._field_kind)}));
			}
		}
		_match_end_229737cb1:;
	};
	if ((_12540_d.get()._field_args.len() == 0LL)) {
		return;;
	};
	if ((_12540_d.get()._field_args.len() > 1LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _12540_d.get()._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2431e4523_Token> _15013_arg = _12540_d.get()._field_args[0LL];;
	if ((_15013_arg.get()._field_id != static_cast<jule::U32>(6LLU))) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _15013_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	if ((_15013_arg.get()._field_kind[0LL] != '\"')) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _15013_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	_12540_d.get()._field_args[0LL].get()._field_kind=_15013_arg.get()._field_kind.slice(1LL,(_15013_arg.get()._field_kind.len() - 1LL));
}



inline void _245543364_check_test(_2455421a9_DirectiveChecker* _self_, jule::Ptr<_2448249dc_Directive>& _16430_d) {
	{
		auto &_match_expr{ (*_self_)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_244926d0e_Fn>>()) {
			_case_begin_2297422b5:;
			{
				jule::Ptr<_244926d0e_Fn> _16717_f = (*_self_)._field_o.operator jule::Ptr<_244926d0e_Fn>();;
				if ((((!(_16717_f.get()._field_cpp_linked)) && (!(_2449279ad_is_init(_16717_f.ptr())))) && (!(_244927749_is_entry_point(_16717_f.ptr()))))) {
					goto _match_end_229742ccc;
				};
				if (_2449274d5_is_method(_16717_f.ptr())) {
					_245553bc1_push_err((*_self_)._field_s.ptr(), _16717_f.get()._field_token,jule::Str("you cannot declare test methods", 31),jule::Slice<jule::Any>());
					goto _match_end_229742ccc;
				};
				goto _case_begin_229742d32;
			}
		}
		else {
			_case_begin_229742d32:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _16430_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_16430_d.get()._field_tag.get()._field_kind)}));
			}
		}
		_match_end_229742ccc:;
	};
	if ((_16430_d.get()._field_args.len() > 0LL)) {
		_245553bc1_push_err((*_self_)._field_s.ptr(), _16430_d.get()._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
}



inline void _2455435d9_check_directive(_2455421a9_DirectiveChecker* _self_, jule::Ptr<_2448249dc_Directive>& _18539_d) {
	{
		auto &_match_expr{ _18539_d.get()._field_tag.get()._field_kind };
		
		if (_match_expr == jule::Str("cdef", 4)) {
			_case_begin_2297475c8:;
			{
				_2455425e9_check_cdef(&(*_self_), _18539_d);
			}
		}
		else if (_match_expr == jule::Str("typedef", 7)) {
			_case_begin_229746c9d:;
			{
				_24554286e_check_typedef(&(*_self_), _18539_d);
			}
		}
		else if (_match_expr == jule::Str("derive", 6)) {
			_case_begin_229746d14:;
			{
				_245542ae4_check_derive(&(*_self_), _18539_d);
			}
		}
		else if (_match_expr == jule::Str("namespace", 9)) {
			_case_begin_229746d7a:;
			{
				_245542d69_check_namespace(&(*_self_), _18539_d);
			}
		}
		else if (_match_expr == jule::Str("deprecated", 10)) {
			_case_begin_229746de1:;
			{
				_2455430de_check_deprecated(&(*_self_), _18539_d);
			}
		}
		else if (_match_expr == jule::Str("test", 4)) {
			_case_begin_229747a3a:;
			{
				_245543364_check_test(&(*_self_), _18539_d);
			}
		}
		else if (_match_expr == jule::Str("build", 5) || _match_expr == jule::Str("pass", 4)) {
			_case_begin_229747aa1:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _18539_d.get()._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>::make({jule::Any(_18539_d.get()._field_tag.get()._field_kind)}));
			}
		}
		else {
			_case_begin_229746c37:;
			{
				_245553bc1_push_err((*_self_)._field_s.ptr(), _18539_d.get()._field_tag,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>::make({jule::Any(_18539_d.get()._field_tag.get()._field_kind)}));
			}
		}
		_match_end_229746b7c:;
	};
}



inline void _2455437b5_check(_2455421a9_DirectiveChecker* _self_) {
	{
		auto &expr = (*((*_self_)._field_d));
		auto it = expr.begin();
		_iter_begin_22974a169:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _20821_d = *it;
			{
				_2455435d9_check_directive(&(*_self_), _20821_d);
			}
			_iter_next_22974a169:;
			++it;
			goto _iter_begin_22974a169;
		}
		_iter_end_22974a169:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _2455421a9_DirectiveChecker _Src) {
	_Stream << "DirectiveChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "o:" << _Src._field_o;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_245547db3_ImportInfo> _2455483d0_find_package(_245547db3_ImportInfo* _self_, jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_245547db3_ImportInfo> _2455486dd_select_package(_245547db3_ImportInfo* _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_24556cc1d_Var> _245548a95_find_var(_245547db3_ImportInfo* _self_, jule::Str _18131_ident, jule::Bool _18143_cpp_linked) {
	if ((!(_24554a47b_is_lookupable(&(*_self_), _18131_ident)))) {
		return nullptr;
	};
	return _24554594e_find_var_in_package((*_self_)._field_package.get()._field_files,_18131_ident,false);
}



inline jule::Ptr<_2455e0334_TypeAlias> _245548e4c_find_type_alias(_245547db3_ImportInfo* _self_, jule::Str _19338_ident, jule::Bool _19350_cpp_linked) {
	if ((!(_24554a47b_is_lookupable(&(*_self_), _19338_ident)))) {
		return nullptr;
	};
	return _245545da0_find_type_alias_in_package((*_self_)._field_package.get()._field_files,_19338_ident,false);
}



inline jule::Ptr<_244848912_Struct> _245549304_find_struct(_245547db3_ImportInfo* _self_, jule::Str _20534_ident, jule::Bool _20546_cpp_linked) {
	if ((!(_24554a47b_is_lookupable(&(*_self_), _20534_ident)))) {
		return nullptr;
	};
	return _24554629b_find_struct_in_package((*_self_)._field_package.get()._field_files,_20534_ident,false);
}



inline jule::Ptr<_244926d0e_Fn> _2455496ab_find_fn(_245547db3_ImportInfo* _self_, jule::Str _21730_ident, jule::Bool _21742_cpp_linked) {
	if ((!(_24554a47b_is_lookupable(&(*_self_), _21730_ident)))) {
		return nullptr;
	};
	return _24554670d_find_fn_in_package((*_self_)._field_package.get()._field_files,_21730_ident,false);
}



inline jule::Ptr<_24547ec51_Trait> _2455499b9_find_trait(_245547db3_ImportInfo* _self_, jule::Str _22833_ident) {
	if ((!(_24554a47b_is_lookupable(&(*_self_), _22833_ident)))) {
		return nullptr;
	};
	return _245546a1b_find_trait_in_package((*_self_)._field_package.get()._field_files,_22833_ident);
}



inline jule::Ptr<_245481e0c_Enum> _245549cc7_find_enum(_245547db3_ImportInfo* _self_, jule::Str _23932_ident) {
	if ((!(_24554a47b_is_lookupable(&(*_self_), _23932_ident)))) {
		return nullptr;
	};
	return _245546d5c_find_enum_in_package((*_self_)._field_package.get()._field_files,_23932_ident);
}



inline jule::Ptr<_245483507_TypeEnum> _24554a0d5_find_type_enum(_245547db3_ImportInfo* _self_, jule::Str _25037_ident) {
	if ((!(_24554a47b_is_lookupable(&(*_self_), _25037_ident)))) {
		return nullptr;
	};
	return _2455471c0_find_type_enum_in_package((*_self_)._field_package.get()._field_files,_25037_ident);
}



inline jule::Bool _24554a47b_is_lookupable(_245547db3_ImportInfo* _self_, jule::Str _25928_ident) {
	if ((*_self_)._field_cpp_linked) {
		return false;
	};
	if ((!((*_self_)._field_import_all))) {
		if ((((*_self_)._field_alias.len() != 0LL) || _24554a789_exist_ident(&(*_self_), jule::Str("self", 4)))) {
			return true;
		};
		if (((*_self_)._field_selected.len() > 0LL)) {
			if ((!(_24554a789_exist_ident(&(*_self_), _25928_ident)))) {
				return false;
			};
		};
	};
	return true;
}



inline jule::Bool _24554a789_exist_ident(_245547db3_ImportInfo* _self_, jule::Str _27926_ident) {
	{
		auto &expr = (*_self_)._field_selected;
		auto it = expr.begin();
		_iter_begin_22975ee81:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> &_28016_sident = *it;
			{
				if ((_28016_sident.get()._field_kind == _27926_ident)) {
					return true;
				};
			}
			_iter_next_22975ee81:;
			++it;
			goto _iter_begin_22975ee81;
		}
		_iter_end_22975ee81:;
	};
	return false;
}



inline jule::Bool _24554aa20_is_accessible_via_selection(_245547db3_ImportInfo* _self_) {
	return (((*_self_)._field_import_all || ((*_self_)._field_selected.len() == 0LL)) || _24554a789_exist_ident(&(*_self_), jule::Str("self", 4)));
}







std::ostream &operator<<(std::ostream &_Stream, _245547db3_ImportInfo _Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package << ", ";
	_Stream << "mod_id:" << _Src._field_mod_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_245547db3_ImportInfo> _24554b2e5_find_package(_24554ad1c_Package* _self_, jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_245547db3_ImportInfo> _24554b603_select_package(_24554ad1c_Package* _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_24556cc1d_Var> _24554b9aa_find_var(_24554ad1c_Package* _self_, jule::Str _30931_ident, jule::Bool _30943_cpp_linked) {
	return _24554594e_find_var_in_package((*_self_)._field_files,_30931_ident,_30943_cpp_linked);
}



inline jule::Ptr<_2455e0334_TypeAlias> _24554bd62_find_type_alias(_24554ad1c_Package* _self_, jule::Str _31538_ident, jule::Bool _31550_cpp_linked) {
	return _245545da0_find_type_alias_in_package((*_self_)._field_files,_31538_ident,_31550_cpp_linked);
}



inline jule::Ptr<_244848912_Struct> _24554c219_find_struct(_24554ad1c_Package* _self_, jule::Str _32134_ident, jule::Bool _32146_cpp_linked) {
	return _24554629b_find_struct_in_package((*_self_)._field_files,_32134_ident,_32146_cpp_linked);
}



inline jule::Ptr<_244926d0e_Fn> _24554c5c1_find_fn(_24554ad1c_Package* _self_, jule::Str _32730_ident, jule::Bool _32742_cpp_linked) {
	return _24554670d_find_fn_in_package((*_self_)._field_files,_32730_ident,_32742_cpp_linked);
}



inline jule::Ptr<_24547ec51_Trait> _24554c8ce_find_trait(_24554ad1c_Package* _self_, jule::Str _33333_ident) {
	return _245546a1b_find_trait_in_package((*_self_)._field_files,_33333_ident);
}



inline jule::Ptr<_245481e0c_Enum> _24554cbdc_find_enum(_24554ad1c_Package* _self_, jule::Str _33932_ident) {
	return _245546d5c_find_enum_in_package((*_self_)._field_files,_33932_ident);
}



inline jule::Ptr<_245483507_TypeEnum> _24554ceea_find_type_enum(_24554ad1c_Package* _self_, jule::Str _34537_ident) {
	return _2455471c0_find_type_enum_in_package((*_self_)._field_files,_34537_ident);
}







std::ostream &operator<<(std::ostream &_Stream, _24554ad1c_Package _Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_245547db3_ImportInfo> _24555152b_find_package(_24555100e_Sema* _self_, jule::Str _22035_ident) {
	return _2455b0810_find_package((*_self_)._field_file.ptr(), _22035_ident);
}



inline jule::Ptr<_245547db3_ImportInfo> _245551839_select_package(_24555100e_Sema* _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _23037_selector) {
	return _2455b0b1d_select_package((*_self_)._field_file.ptr(), _23037_selector);
}



inline jule::Ptr<_24556cc1d_Var> _245551be1_find_var(_24555100e_Sema* _self_, jule::Str _24031_ident, jule::Bool _24043_cpp_linked) {
	jule::Ptr<_24556cc1d_Var> _24217_v = _24554594e_find_var_in_package((*_self_)._field_files,_24031_ident,_24043_cpp_linked);;
	if ((_24217_v != nullptr)) {
		return _24217_v;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_2297829ba:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _24821_imp = *it;
			{
				if ((!(_24554e936_imp_is_lookupable(_24821_imp,_24031_ident)))) {
					goto _iter_next_2297829ba;
				};
				_24217_v=_245548a95_find_var(_24821_imp.ptr(), _24031_ident,_24043_cpp_linked);
				if (((_24217_v != nullptr) && _245554397_is_accessible_define(&(*_self_), _24217_v.get()._field_public,_24217_v.get()._field_token))) {
					return _24217_v;
				};
			}
			_iter_next_2297829ba:;
			++it;
			goto _iter_begin_2297829ba;
		}
		_iter_end_2297829ba:;
	};
	return nullptr;
}



inline jule::Ptr<_2455e0334_TypeAlias> _245552098_find_type_alias(_24555100e_Sema* _self_, jule::Str _26738_ident, jule::Bool _26750_cpp_linked) {
	jule::Ptr<_2455e0334_TypeAlias> _26917_ta = _245545da0_find_type_alias_in_package((*_self_)._field_files,_26738_ident,_26750_cpp_linked);;
	if ((_26917_ta != nullptr)) {
		return _26917_ta;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_22978545c:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _27521_imp = *it;
			{
				if ((!(_24554e936_imp_is_lookupable(_27521_imp,_26738_ident)))) {
					goto _iter_next_22978545c;
				};
				_26917_ta=_245548e4c_find_type_alias(_27521_imp.ptr(), _26738_ident,_26750_cpp_linked);
				if (((_26917_ta != nullptr) && _245554397_is_accessible_define(&(*_self_), _26917_ta.get()._field_public,_26917_ta.get()._field_token))) {
					return _26917_ta;
				};
			}
			_iter_next_22978545c:;
			++it;
			goto _iter_begin_22978545c;
		}
		_iter_end_22978545c:;
	};
	return nullptr;
}



inline jule::Ptr<_244848912_Struct> _245552450_find_struct(_24555100e_Sema* _self_, jule::Str _29434_ident, jule::Bool _29446_cpp_linked) {
	jule::Ptr<_244848912_Struct> _29617_s = _24554629b_find_struct_in_package((*_self_)._field_files,_29434_ident,_29446_cpp_linked);;
	if ((_29617_s != nullptr)) {
		return _29617_s;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_229787e21:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _30221_imp = *it;
			{
				if ((!(_24554e936_imp_is_lookupable(_30221_imp,_29434_ident)))) {
					goto _iter_next_229787e21;
				};
				_29617_s=_245549304_find_struct(_30221_imp.ptr(), _29434_ident,_29446_cpp_linked);
				if (((_29617_s != nullptr) && _245554397_is_accessible_define(&(*_self_), _29617_s.get()._field_public,_29617_s.get()._field_token))) {
					return _29617_s;
				};
			}
			_iter_next_229787e21:;
			++it;
			goto _iter_begin_229787e21;
		}
		_iter_end_229787e21:;
	};
	return nullptr;
}



inline jule::Ptr<_244926d0e_Fn> _245552807_find_fn(_24555100e_Sema* _self_, jule::Str _32130_ident, jule::Bool _32142_cpp_linked) {
	jule::Ptr<_244926d0e_Fn> _32317_f = _24554670d_find_fn_in_package((*_self_)._field_files,_32130_ident,_32142_cpp_linked);;
	if ((_32317_f != nullptr)) {
		return _32317_f;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_22978a8c4:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _32921_imp = *it;
			{
				if ((!(_24554e936_imp_is_lookupable(_32921_imp,_32130_ident)))) {
					goto _iter_next_22978a8c4;
				};
				_32317_f=_2455496ab_find_fn(_32921_imp.ptr(), _32130_ident,_32142_cpp_linked);
				if (((_32317_f != nullptr) && _245554397_is_accessible_define(&(*_self_), _32317_f.get()._field_public,_32317_f.get()._field_token))) {
					return _32317_f;
				};
			}
			_iter_next_22978a8c4:;
			++it;
			goto _iter_begin_22978a8c4;
		}
		_iter_end_22978a8c4:;
	};
	return nullptr;
}



inline jule::Ptr<_24547ec51_Trait> _245552b15_find_trait(_24555100e_Sema* _self_, jule::Str _34833_ident) {
	jule::Ptr<_24547ec51_Trait> _35017_t = _245546a1b_find_trait_in_package((*_self_)._field_files,_34833_ident);;
	if ((_35017_t != nullptr)) {
		return _35017_t;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_22978d014:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _35621_imp = *it;
			{
				if ((!(_24554e936_imp_is_lookupable(_35621_imp,_34833_ident)))) {
					goto _iter_next_22978d014;
				};
				_35017_t=_2455499b9_find_trait(_35621_imp.ptr(), _34833_ident);
				if (((_35017_t != nullptr) && _245554397_is_accessible_define(&(*_self_), _35017_t.get()._field_public,_35017_t.get()._field_token))) {
					return _35017_t;
				};
			}
			_iter_next_22978d014:;
			++it;
			goto _iter_begin_22978d014;
		}
		_iter_end_22978d014:;
	};
	return nullptr;
}



inline jule::Ptr<_245481e0c_Enum> _245552e23_find_enum(_24555100e_Sema* _self_, jule::Str _37532_ident) {
	jule::Ptr<_245481e0c_Enum> _37717_e = _245546d5c_find_enum_in_package((*_self_)._field_files,_37532_ident);;
	if ((_37717_e != nullptr)) {
		return _37717_e;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_229790753:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _38321_imp = *it;
			{
				if ((!(_24554e936_imp_is_lookupable(_38321_imp,_37532_ident)))) {
					goto _iter_next_229790753;
				};
				_37717_e=_245549cc7_find_enum(_38321_imp.ptr(), _37532_ident);
				if (((_37717_e != nullptr) && _245554397_is_accessible_define(&(*_self_), _37717_e.get()._field_public,_37717_e.get()._field_token))) {
					return _37717_e;
				};
			}
			_iter_next_229790753:;
			++it;
			goto _iter_begin_229790753;
		}
		_iter_end_229790753:;
	};
	return nullptr;
}



inline jule::Ptr<_245483507_TypeEnum> _245553231_find_type_enum(_24555100e_Sema* _self_, jule::Str _40237_ident) {
	jule::Ptr<_245483507_TypeEnum> _40417_e = _2455471c0_find_type_enum_in_package((*_self_)._field_files,_40237_ident);;
	if ((_40417_e != nullptr)) {
		return _40417_e;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_229792ea3:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _41021_imp = *it;
			{
				if ((!(_24554e936_imp_is_lookupable(_41021_imp,_40237_ident)))) {
					goto _iter_next_229792ea3;
				};
				_40417_e=_24554a0d5_find_type_enum(_41021_imp.ptr(), _40237_ident);
				if (((_40417_e != nullptr) && _245554397_is_accessible_define(&(*_self_), _40417_e.get()._field_public,_40417_e.get()._field_token))) {
					return _40417_e;
				};
			}
			_iter_next_229792ea3:;
			++it;
			goto _iter_begin_229792ea3;
		}
		_iter_end_229792ea3:;
	};
	return nullptr;
}



inline jule::Bool _245553583_is_flag(_24555100e_Sema* _self_, jule::I32 _42622_flags) {
	return (((*_self_)._field_flags & _42622_flags) == _42622_flags);
}



inline void _245553808_set_current_file(_24555100e_Sema* _self_, jule::Ptr<_2455b02e3_SymbolTable> _42839_f) {
	(*_self_)._field_file=_42839_f;
}



inline void _245553bc1_push_err(_24555100e_Sema* _self_, jule::Ptr<_2431e4523_Token> _43027_token, jule::Str _43042_fmt, jule::Slice<jule::Any> _43055_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_24554e5e5_compiler_err(_43027_token,true,_43042_fmt,jule::Any(_43055_args)));;
}



inline void _245553ee0_push_suggestion(_24555100e_Sema* _self_, jule::Str _43534_fmt, jule::Slice<jule::Any> _43547_args) {
	{
		_245550a7a_push_suggestion((&((*_self_)._field_errors[((*_self_)._field_errors.len() - 1LL)])),_43534_fmt,jule::Any(_43547_args));
	};
}



inline jule::Bool _245554397_is_accessible_define(_24555100e_Sema* _self_, jule::Bool _44035_public, jule::Ptr<_2431e4523_Token> _44049_token) {
	return ((_44035_public || (_44049_token.get()._field_file == nullptr)) || (_2431ea2a4_dir((*_self_)._field_file.get()._field_file.ptr()) == _2431ea2a4_dir(_44049_token.get()._field_file.ptr())));
}



inline jule::Bool _2455547e8_is_duplicated_ident(_24555100e_Sema* _self_, jule::Uintptr _44734_itself, jule::Str _44751_ident, jule::Bool _44763_cpp_linked) {
	{
		auto &expr = (*_self_)._field_files;
		auto it = expr.begin();
		_iter_begin_229799b58:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> &_44816_f = *it;
			{
				if (_2455b37e1_is_duplicated_ident(_44816_f.ptr(), _44734_itself,_44751_ident,_44763_cpp_linked)) {
					return true;
				};
				{
					auto &expr = _44816_f.get()._field_imports;
					auto it = expr.begin();
					_iter_begin_22979a51b:;
					if (it != expr.end()) {
						jule::Ptr<_245547db3_ImportInfo> &_45320_imp = *it;
						{
							{
								auto &expr = _45320_imp.get()._field_selected;
								auto it = expr.begin();
								_iter_begin_22979b3a7:;
								if (it != expr.end()) {
									jule::Ptr<_2431e4523_Token> &_45424_selected = *it;
									{
										if ((_45424_selected.get()._field_kind == _44751_ident)) {
											return true;
										};
									}
									_iter_next_22979b3a7:;
									++it;
									goto _iter_begin_22979b3a7;
								}
								_iter_end_22979b3a7:;
							};
						}
						_iter_next_22979a51b:;
						++it;
						goto _iter_begin_22979a51b;
					}
					_iter_end_22979a51b:;
				};
			}
			_iter_next_229799b58:;
			++it;
			goto _iter_begin_229799b58;
		}
		_iter_end_229799b58:;
	};
	return false;
}



inline void _245554b17_check_directives(jule::Ptr<_24555100e_Sema> _self_, jule::Slice<jule::Ptr<_2448249dc_Directive>>& _46441_d, jule::Any _46467_o) {
	_2455421a9_DirectiveChecker _46517_dc = _2455421a9_DirectiveChecker{._field_s=_self_, ._field_d=((jule::Ptr<jule::Slice<jule::Ptr<_2448249dc_Directive>>>)((&(_46441_d)))), ._field_o=jule::Any(_46467_o)};;
	_2455437b5_check(&_46517_dc);
}



inline jule::Bool _245555068_check_generic_quantity(_24555100e_Sema* _self_, jule::I32 _47341_required, jule::I32 _47356_given, jule::Ptr<_2431e4523_Token> _47368_token) {
	jule::Bool _47385_ok = jule::Bool();
	{
		
		if (((_47341_required == 0LL) && (_47356_given > 0LL))) {
			_case_begin_22979e0e1:;
			{
				_245553bc1_push_err(&(*_self_), _47368_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
				_47385_ok = false;
				return _47385_ok;
			}
		}
		else if (((_47341_required > 0LL) && (_47356_given == 0LL))) {
			_case_begin_22979e1bd:;
			{
				_245553bc1_push_err(&(*_self_), _47368_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				_47385_ok = false;
				return _47385_ok;
			}
		}
		else if ((_47341_required < _47356_given)) {
			_case_begin_22979e234:;
			{
				_245553bc1_push_err(&(*_self_), _47368_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>());
				_47385_ok = false;
				return _47385_ok;
			}
		}
		else if ((_47341_required > _47356_given)) {
			_case_begin_22979de15:;
			{
				_245553bc1_push_err(&(*_self_), _47368_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>());
				_47385_ok = false;
				return _47385_ok;
			}
		}
		else {
			_case_begin_22979d981:;
			{
				_47385_ok = true;
				return _47385_ok;
			}
		}
		_match_end_22979d8a4:;
	};
}



inline jule::Bool _245555442_is_duplicated_import_selection(_24555100e_Sema* _self_, jule::Uintptr _49245_itself, jule::Str _49262_ident) {
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_2297a216b:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> &_49316_imp = *it;
			{
				if ((static_cast<jule::Uintptr>(_49316_imp) == _49245_itself)) {
					goto _iter_end_2297a216b;
				};
				if (_24554a789_exist_ident(_49316_imp.ptr(), _49262_ident)) {
					return true;
				};
			}
			_iter_next_2297a216b:;
			++it;
			goto _iter_begin_2297a216b;
		}
		_iter_end_2297a216b:;
	};
	return false;
}



inline jule::Any _24555580a_get_import_def(_24555100e_Sema* _self_, jule::Str _50729_ident, jule::Ptr<_245547db3_ImportInfo>& _50746_imp) {
	if ((_2456705a1_find_package_builtin_def(_50746_imp.get()._field_link_path,_50729_ident) != nullptr)) {
		return jule::Any(true);
	};
	{
		auto &expr = _50746_imp.get()._field_package.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2297a39b9:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _51221_f = *it;
			{
				;
				jule::Any _51421_def = _2455b3390_def_by_ident(_51221_f.ptr(), _50729_ident,false);;
				if ((_51421_def != nullptr)) {
					return jule::Any(_51421_def);
				};
			}
			_iter_next_2297a39b9:;
			++it;
			goto _iter_begin_2297a39b9;
		}
		_iter_end_2297a39b9:;
	};
	return nullptr;
}



inline jule::Bool _245555b3a_check_import_selections(_24555100e_Sema* _self_, jule::Ptr<_245547db3_ImportInfo>& _52347_imp) {
	jule::Bool _52367_ok = jule::Bool();
	_52367_ok=true;
	{
		auto &expr = _52347_imp.get()._field_selected;
		auto it = expr.begin();
		_iter_begin_2297a602c:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> _52516_ident = *it;
			{
				if ((_52516_ident.get()._field_kind == jule::Str("self", 4))) {
					goto _iter_next_2297a602c;
				};
				if (_245555442_is_duplicated_import_selection(&(*_self_), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_52347_imp)),_52516_ident.get()._field_kind)) {
					_245553bc1_push_err(&(*_self_), _52516_ident,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_52516_ident.get()._field_kind)}));
					_245553ee0_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
					_52367_ok=false;
					goto _iter_next_2297a602c;
				};
				jule::Any _53721_def = _24555580a_get_import_def(&(*_self_), _52516_ident.get()._field_kind,_52347_imp);;
				{
					auto &_match_expr{ _53721_def };
					
					if (_match_expr.type_is<jule::Bool>()) {
						_case_begin_2297a80b7:;
						{
							goto _iter_next_2297a602c;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
						_case_begin_2297a8a35:;
						{
							jule::Ptr<_24556cc1d_Var> _54325_v = _53721_def.operator jule::Ptr<_24556cc1d_Var>();;
							if (_245554397_is_accessible_define(&(*_self_), _54325_v.get()._field_public,_54325_v.get()._field_token)) {
								goto _iter_next_2297a602c;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_2455e0334_TypeAlias>>()) {
						_case_begin_2297a8a9b:;
						{
							jule::Ptr<_2455e0334_TypeAlias> _54825_ta = _53721_def.operator jule::Ptr<_2455e0334_TypeAlias>();;
							if (_245554397_is_accessible_define(&(*_self_), _54825_ta.get()._field_public,_54825_ta.get()._field_token)) {
								goto _iter_next_2297a602c;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
						_case_begin_2297a8b12:;
						{
							jule::Ptr<_244848912_Struct> _55325_strct = _53721_def.operator jule::Ptr<_244848912_Struct>();;
							if (_245554397_is_accessible_define(&(*_self_), _55325_strct.get()._field_public,_55325_strct.get()._field_token)) {
								goto _iter_next_2297a602c;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24547ec51_Trait>>()) {
						_case_begin_2297a9690:;
						{
							jule::Ptr<_24547ec51_Trait> _55825_t = _53721_def.operator jule::Ptr<_24547ec51_Trait>();;
							if (_245554397_is_accessible_define(&(*_self_), _55825_t.get()._field_public,_55825_t.get()._field_token)) {
								goto _iter_next_2297a602c;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_245481e0c_Enum>>()) {
						_case_begin_2297a9706:;
						{
							jule::Ptr<_245481e0c_Enum> _56325_e = _53721_def.operator jule::Ptr<_245481e0c_Enum>();;
							if (_245554397_is_accessible_define(&(*_self_), _56325_e.get()._field_public,_56325_e.get()._field_token)) {
								goto _iter_next_2297a602c;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_245483507_TypeEnum>>()) {
						_case_begin_2297a976c:;
						{
							jule::Ptr<_245483507_TypeEnum> _56825_e = _53721_def.operator jule::Ptr<_245483507_TypeEnum>();;
							if (_245554397_is_accessible_define(&(*_self_), _56825_e.get()._field_public,_56825_e.get()._field_token)) {
								goto _iter_next_2297a602c;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_244926d0e_Fn>>()) {
						_case_begin_2297a97d3:;
						{
							jule::Ptr<_244926d0e_Fn> _57325_f = _53721_def.operator jule::Ptr<_244926d0e_Fn>();;
							if (_245554397_is_accessible_define(&(*_self_), _57325_f.get()._field_public,_57325_f.get()._field_token)) {
								goto _iter_next_2297a602c;
							};
						}
					}
					else {
						_case_begin_2297a87c1:;
						{
							_245553bc1_push_err(&(*_self_), _52516_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_52516_ident.get()._field_kind)}));
							_52367_ok=false;
							goto _iter_next_2297a602c;
						}
					}
					_match_end_2297a6747:;
				};
				_245553bc1_push_err(&(*_self_), _52516_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_52516_ident.get()._field_kind)}));
				_245553ee0_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
				_52367_ok=false;
			}
			_iter_next_2297a602c:;
			++it;
			goto _iter_begin_2297a602c;
		}
		_iter_end_2297a602c:;
	};
	return _52367_ok;
}



inline jule::Bool _245555e7b_is_use_alias_duplication(_24555100e_Sema* _self_, jule::Ptr<_245547db3_ImportInfo>& _59044_imp) {
	if ((_59044_imp.get()._field_alias.len() == 0LL)) {
		return false;
	};
	{
		auto &expr = (*_self_)._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_2297b2522:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _59521_imp2 = *it;
			{
				if ((_59521_imp2 == _59044_imp)) {
					goto _iter_end_2297b2522;
				};
				if ((_59521_imp2.get()._field_alias == _59044_imp.get()._field_alias)) {
					return true;
				};
				if (((_59521_imp2.get()._field_ident == _59521_imp2.get()._field_link_path) && (_59521_imp2.get()._field_ident == _59044_imp.get()._field_alias))) {
					return true;
				};
			}
			_iter_next_2297b2522:;
			++it;
			goto _iter_begin_2297b2522;
		}
		_iter_end_2297b2522:;
	};
	return false;
}



inline jule::Bool _24555629a_check_import(_24555100e_Sema* _self_, jule::Ptr<_245547db3_ImportInfo>& _61136_imp) {
	if ((_61136_imp.get()._field_cpp_linked || (_61136_imp.get()._field_package.get()._field_files.len() == 0LL))) {
		return true;
	};
	if (_245555e7b_is_use_alias_duplication(&(*_self_), _61136_imp)) {
		_245553bc1_push_err(&(*_self_), _61136_imp.get()._field_token,jule::Str("identifier duplication: @ is already used for another use declaration above", 75),jule::Slice<jule::Any>::make({jule::Any(_61136_imp.get()._field_alias)}));
		_245553ee0_push_suggestion(&(*_self_), jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>());
	};
	if ((!(_61136_imp.get()._field_duplicate))) {
		jule::Ptr<_24555100e_Sema> _62221_sema = jule::new_ptr<_24555100e_Sema>(_24555100e_Sema{._field_flags=(*_self_)._field_flags});;
		_245569c3c_check(_62221_sema, _61136_imp.get()._field_package.get()._field_files);
		if ((_62221_sema.get()._field_errors.len() != 0LL)) {
			(*_self_)._field_errors=jule::append((*_self_)._field_errors,_62221_sema.get()._field_errors);
			_62221_sema.get()._field_errors=nullptr;
			return false;
		};
	};
	return _245555b3a_check_import_selections(&(*_self_), _61136_imp);
}



inline void _245556476_check_imports(_24555100e_Sema* _self_) {
	{
		auto &expr = (*_self_)._field_files;
		auto it = expr.begin();
		_iter_begin_2297b779c:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _63621_file = *it;
			{
				_245553808_set_current_file(&(*_self_), _63621_file);
				{
					auto &expr = _63621_file.get()._field_imports;
					auto it = expr.begin();
					_iter_begin_2297b8ccb:;
					if (it != expr.end()) {
						jule::Ptr<_245547db3_ImportInfo> _63925_imp = *it;
						{
							jule::Bool _64021_ok = _24555629a_check_import(&(*_self_), _63925_imp);;
							if ((!(_64021_ok))) {
								_245553bc1_push_err(&(*_self_), _63925_imp.get()._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>::make({jule::Any(_63925_imp.get()._field_link_path)}));
								return;;
							};
						}
						_iter_next_2297b8ccb:;
						++it;
						goto _iter_begin_2297b8ccb;
					}
					_iter_end_2297b8ccb:;
				};
			}
			_iter_next_2297b779c:;
			++it;
			goto _iter_begin_2297b779c;
		}
		_iter_end_2297b779c:;
	};
}



inline void _245556652_impl_file_impls(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_impls;
		auto it = expr.begin();
		_iter_begin_2297b94e6:;
		if (it != expr.end()) {
			jule::Ptr<_24551aa45_Impl> _65221_imp = *it;
			{
				_245561cde_impl_impl(_self_, _65221_imp);
			}
			_iter_next_2297b94e6:;
			++it;
			goto _iter_begin_2297b94e6;
		}
		_iter_end_2297b94e6:;
	};
}



inline void _24555682d_impl_impls(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2297babbd:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _65821_file = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _65821_file);
				_245556652_impl_file_impls(_self_);
			}
			_iter_next_2297babbd:;
			++it;
			goto _iter_begin_2297babbd;
		}
		_iter_end_2297babbd:;
	};
}



inline void _245556a09_check_enums(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2297bc252:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _66521_file = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _66521_file);
				_24555e2c5_check_enum_decls(_self_);
			}
			_iter_next_2297bc252:;
			++it;
			goto _iter_begin_2297bc252;
		}
		_iter_end_2297bc252:;
	};
}



inline jule::Ptr<_2455e1027_TypeKind> _245557004_build_type_with_refers(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2448581d5_TypeDecl>& _67247_t, jule::Trait<_24560bac0_Lookup> _67270_l, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _67313_generics, jule::Ptr<_2455ed73d_Referencer> _67341_referencer) {
	_2455ee486_TypeChecker _67417_tc = _2455ee486_TypeChecker{._field_s=_self_, ._field_lookup=_67270_l, ._field_referencer=_67341_referencer, ._field_use_generics=_67313_generics, };;
	{
		auto &_match_expr{ _67270_l };
		
		if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_2297bde24:;
			{
				jule::Ptr<_245531066_ScopeChecker> _68221_hard = _2455343dd_get_hard_root(_67270_l.operator jule::Ptr<_245531066_ScopeChecker>());;
				_67417_tc._field_refers=_68221_hard.get()._field_owner.get()._field_refers;
			}
		}
		_match_end_2297bdb7c:;
	};
	if (((_67341_referencer != nullptr) && (_67341_referencer.get()._field_refs != nullptr))) {
		{
			auto &_match_expr{ _67341_referencer.get()._field_owner };
			
			if (_match_expr.type_is<jule::Ptr<_2455e0334_TypeAlias>>()) {
				_case_begin_2297be3ca:;
				{
					_67417_tc._field_owner_alias=_67341_referencer.get()._field_owner.operator jule::Ptr<_2455e0334_TypeAlias>();
				}
			}
			_match_end_2297be375:;
		};
	};
	return _245606702_check_decl(&_67417_tc, _67247_t);
}



inline jule::Bool _2455574ee_check_type_with_refers(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2455e5180_TypeSymbol>& _69947_t, jule::Trait<_24560bac0_Lookup> _69967_l, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _70013_generics, jule::Ptr<_2455ed73d_Referencer> _70041_referencer) {
	jule::Bool _70068_ok = jule::Bool();
	if (_2455e5537_checked(_69947_t.ptr())) {
		_70068_ok = true;
		return _70068_ok;
	};
	_69947_t.get()._field_kind=_245557004_build_type_with_refers(_self_, _69947_t.get()._field_decl,_69967_l,_70013_generics,_70041_referencer);
	_70068_ok = _2455e5537_checked(_69947_t.ptr());
	return _70068_ok;
}



inline jule::Ptr<_24549b652_ConstraintChecker> _245557763_constraint_checker(jule::Ptr<_24555100e_Sema> _self_) {
	return jule::new_ptr<_24549b652_ConstraintChecker>(_24549b652_ConstraintChecker{._field_s=_self_, });
}



inline jule::Bool _245557b1a_check_type(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2455e5180_TypeSymbol>& _71435_t, jule::Trait<_24560bac0_Lookup> _71455_l) {
	return _2455574ee_check_type_with_refers(_self_, _71435_t,_71455_l,nullptr,nullptr);
}



inline jule::Ptr<_2455e1027_TypeKind> _24555808d_build_type_with_generics(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2448581d5_TypeDecl>& _72049_t, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _72113_generics, jule::Ptr<_24492c8b4_ReferenceStack> _72141_refers) {
	jule::Ptr<_2455ee486_TypeChecker> _72217_tc = jule::new_ptr<_2455ee486_TypeChecker>(_2455ee486_TypeChecker{._field_s=_self_, ._field_lookup=jule::Trait<_24560bac0_Lookup>(_self_, 3), ._field_refers=_72141_refers, ._field_use_generics=_72113_generics, });;
	return _245606702_check_decl(_72217_tc.ptr(), _72049_t);
}



inline jule::Ptr<_2455e1027_TypeKind> _2455583ac_build_type(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2448581d5_TypeDecl>& _73235_t) {
	return _24555808d_build_type_with_generics(_self_, _73235_t,nullptr,nullptr);
}



inline jule::Ptr<_2455e1027_TypeKind> _2455586ba_select_type(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2448581d5_TypeDecl>& _73736_t) {
	jule::Ptr<_2455ee486_TypeChecker> _73817_tc = jule::new_ptr<_2455ee486_TypeChecker>(_2455ee486_TypeChecker{._field_s=_self_, ._field_lookup=jule::Trait<_24560bac0_Lookup>(_self_, 3), ._field_selection=true, });;
	return _245606702_check_decl(_73817_tc.ptr(), _73736_t);
}



inline jule::Ptr<_2455b6abe_Eval> _245558b1b_evalpd(jule::Ptr<_24555100e_Sema> _self_, jule::Trait<_24560bac0_Lookup> _74830_l, jule::Ptr<_2455e1027_TypeKind> _74845_p, jule::Ptr<_24556cc1d_Var> _74863_owner) {
	jule::Ptr<_2455b6abe_Eval> _74917_e = jule::new_ptr<_2455b6abe_Eval>(_2455b6abe_Eval{._field_s=_self_, ._field_lookup=_74830_l, ._field_owner=_74863_owner, });;
	{
		auto &_match_expr{ _74830_l };
		
		if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_2297c7a21:;
			{
				_74917_e.get()._field_unsafety=_2455334ec_is_unsafe(_74830_l.operator jule::Ptr<_245531066_ScopeChecker>());
			}
		}
		_match_end_2297c79aa:;
	};
	_74917_e.get()._field_prefix=_74845_p;
	return _74917_e;
}



inline jule::Ptr<_2455b6abe_Eval> _245558ec3_evalp(jule::Ptr<_24555100e_Sema> _self_, jule::Trait<_24560bac0_Lookup> _76629_l, jule::Ptr<_2455e1027_TypeKind> _76644_p) {
	return _245558b1b_evalpd(_self_, _76629_l,_76644_p,nullptr);
}



inline jule::Ptr<_2455b6abe_Eval> _2455592d1_eval(jule::Ptr<_24555100e_Sema> _self_, jule::Trait<_24560bac0_Lookup> _77128_l) {
	return _245558ec3_evalp(_self_, _77128_l,nullptr);
}



inline jule::Bool _2455597cb_check_assign_type(jule::Ptr<_24555100e_Sema> _self_, jule::Bool _77537_dest_is_ref, jule::Ptr<_2455e1027_TypeKind>& _77561_dest, jule::Ptr<_2455b5051_Data>& _77614_d, jule::Ptr<_2431e4523_Token> _77628_error_token) {
	if (_77614_d.get()._field_decl) {
		_245553bc1_push_err(_self_.ptr(), _77628_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return false;
	};
	if (_77537_dest_is_ref) {
		if ((!(_2455e1731_equals(_77561_dest, _77614_d.get()._field_kind)))) {
			_245553bc1_push_err(_self_.ptr(), _77628_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_77561_dest.ptr())),jule::Any(_2455e1423_to_str(_77614_d.get()._field_kind.ptr()))}));
			return false;
		};
	} else {
		jule::Ptr<_2455a0a0e_AssignTypeChecker> _78721_atc = jule::new_ptr<_2455a0a0e_AssignTypeChecker>(_2455a0a0e_AssignTypeChecker{._field_s=_self_, ._field_dest=_77561_dest, ._field_d=_77614_d, ._field_error_token=_77628_error_token});;
		jule::Bool _79317_ok = _2455a1b86_check(_78721_atc.ptr());;
		if ((!(_79317_ok))) {
			return false;
		};
	};
	if (((!(_2455b5914_is_const(_77614_d.ptr()))) || (_2455e3139_prim(_77561_dest.ptr()) == nullptr))) {
		return true;
	};
	jule::Str _80317_kind = _2455e3139_prim(_77561_dest.ptr()).get()._field_kind;;
	{
		
		if (_2455280b3_is_sig_int(_80317_kind)) {
			_case_begin_2297ce40c:;
			{
				_24491896b_set_i64(_77614_d.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64(_77614_d.get()._field_constant.ptr())));
			}
		}
		else if (_24552839e_is_unsig_int(_80317_kind)) {
			_case_begin_2297ce484:;
			{
				_244918be1_set_u64(_77614_d.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64(_77614_d.get()._field_constant.ptr())));
			}
		}
		else if (_245528965_is_float(_80317_kind)) {
			_case_begin_2297ce50b:;
			{
				_244919461_set_f64(_77614_d.get()._field_constant.ptr(), static_cast<jule::F64>(_2449186e6_as_f64(_77614_d.get()._field_constant.ptr())));
			}
		}
		_match_end_2297ce341:;
	};
	return true;
}



inline jule::Bool _245559c4e_check_type_compatibility(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2455e1027_TypeKind>& _81749_dest, jule::Ptr<_2455e1027_TypeKind>& _81814_src, jule::Ptr<_2431e4523_Token>& _81835_error_token) {
	if ((_81814_src == nullptr)) {
		_245553bc1_push_err(_self_.ptr(), _81835_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_81749_dest.ptr())),jule::Any(_2455e1423_to_str(_81814_src.ptr()))}));
		return false;
	};
	if ((_2455e4cc8_tup(_81814_src.ptr()) != nullptr)) {
		_245553bc1_push_err(_self_.ptr(), _81835_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_81749_dest.ptr())),jule::Any(_2455e1423_to_str(_81814_src.ptr()))}));
		return false;
	};
	_24559ddd6_TypeCompatibilityChecker _83217_tcc = _24559ddd6_TypeCompatibilityChecker{._field_s=_self_, ._field_dest=_81749_dest, ._field_src=_81814_src, ._field_error_token=_81835_error_token};;
	if (_2455a04c0_check(&_83217_tcc)) {
		return true;
	};
	_245553bc1_push_err(_self_.ptr(), _81835_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_81749_dest.ptr())),jule::Any(_2455e1423_to_str(_81814_src.ptr()))}));
	return false;
}



inline jule::Ptr<_2455e1027_TypeKind> _24555a139_build_non_generic_type_kind(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2448581d5_TypeDecl>& _85352_ast, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>& _85414_generics) {
	jule::Ptr<_2455ee486_TypeChecker> _85517_tc = jule::new_ptr<_2455ee486_TypeChecker>(_2455ee486_TypeChecker{._field_s=_self_, ._field_lookup=jule::Trait<_24560bac0_Lookup>(_self_, 3), ._field_ignore_generics=_85414_generics, });;
	return _245606702_check_decl(_85517_tc.ptr(), _85352_ast);
}



inline void _24555a3e2_build_fn_non_generic_type_kinds(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2449299b0_FnIns>& _86356_f) {
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _86417_generics = nullptr;;
	if (_2449274d5_is_method(_86356_f.get()._field_decl.ptr())) {
		_86417_generics=jule::append(_86356_f.get()._field_decl.get()._field_generics,_86356_f.get()._field_decl.get()._field_owner.get()._field_generics);
	} else {
		_86417_generics=_86356_f.get()._field_decl.get()._field_generics;
	};
	{
		auto &expr = _86356_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_2297d7d0b:;
		if (it != expr.end()) {
			jule::Ptr<_244928ae1_ParamIns> _87121_p = *it;
			{
				if ((!(_244925aee_is_self(_87121_p.get()._field_decl.ptr())))) {
					_87121_p.get()._field_kind=_24555a139_build_non_generic_type_kind(_self_, _87121_p.get()._field_decl.get()._field_kind.get()._field_decl,_86417_generics);
				};
			}
			_iter_next_2297d7d0b:;
			++it;
			goto _iter_begin_2297d7d0b;
		}
		_iter_end_2297d7d0b:;
	};
	if ((!(_244927271_is_void(_86356_f.get()._field_decl.ptr())))) {
		_86356_f.get()._field_result=_24555a139_build_non_generic_type_kind(_self_, _86356_f.get()._field_decl.get()._field_result.get()._field_kind.get()._field_decl,_86417_generics);
	};
}



inline jule::Ptr<_2449299b0_FnIns> _24555a733_get_trait_check_fn_kind(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244926d0e_Fn>& _88148_f) {
	if ((_88148_f.get()._field_instances.len() == 1LL)) {
		return _88148_f.get()._field_instances[0LL];
	};
	jule::Ptr<_2449299b0_FnIns> _88517_ins = _2449281ea_instance_force(_88148_f);;
	jule::Ptr<_2455ee486_TypeChecker> _88717_tc = jule::new_ptr<_2455ee486_TypeChecker>(_2455ee486_TypeChecker{._field_s=_self_, ._field_lookup=jule::Trait<_24560bac0_Lookup>(_self_, 3), });;
	{
		auto &expr = _88517_ins.get()._field_params;
		auto it = expr.begin();
		_iter_begin_2297db8c0:;
		if (it != expr.end()) {
			jule::Ptr<_244928ae1_ParamIns> _89121_p = *it;
			{
				if ((!(_244925aee_is_self(_89121_p.get()._field_decl.ptr())))) {
					_89121_p.get()._field_kind=_245606702_check_decl(_88717_tc.ptr(), _89121_p.get()._field_decl.get()._field_kind.get()._field_decl);
				};
			}
			_iter_next_2297db8c0:;
			++it;
			goto _iter_begin_2297db8c0;
		}
		_iter_end_2297db8c0:;
	};
	if ((!(_244927271_is_void(_88148_f.ptr())))) {
		_88517_ins.get()._field_result=_245606702_check_decl(_88717_tc.ptr(), _88148_f.get()._field_result.get()._field_kind.get()._field_decl);
	};
	return _88517_ins;
}



inline jule::Bool _24555ab95_check_constraints_fn(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2449299b0_FnIns>& _90345_f, jule::Ptr<_2431e4523_Token>& _90361_et, jule::Ptr<_2449299b0_FnIns> _90377_exist) {
	jule::Ptr<_24549b652_ConstraintChecker> _90417_cc = _245557763_constraint_checker(_self_);;
	_90417_cc.get()._field_et=_90361_et;
	_90417_cc.get()._field_fi=_90345_f;
	if ((_90377_exist != nullptr)) {
		{
			auto &expr = _90377_exist.get()._field_generics;
			auto it = expr.begin();
			_iter_begin_2297dec03:;
			if (it != expr.end()) {
				jule::I32 _90818_i = it - expr.begin();
				jule::Ptr<_2455de7ea_InsGeneric> _90825_g = *it;
				{
					_90345_f.get()._field_generics[_90818_i].get()._field_constraint=_90825_g.get()._field_constraint;
				}
				_iter_next_2297dec03:;
				++it;
				_90818_i++;
				goto _iter_begin_2297dec03;
			}
			_iter_end_2297dec03:;
		};
	} else {
		_90417_cc.get()._field_uniq=true;
	};
	return _2454e23bd_check(_90417_cc);
}



inline jule::Bool _24555b118_check_constraints_struct(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns>& _91749_s, jule::Ptr<_2431e4523_Token>& _91769_et, jule::Ptr<_244874c5c_StructIns> _91785_exist) {
	jule::Ptr<_24549b652_ConstraintChecker> _91817_cc = _245557763_constraint_checker(_self_);;
	_91817_cc.get()._field_et=_91769_et;
	_91817_cc.get()._field_si=_91749_s;
	if ((_91785_exist != nullptr)) {
		{
			auto &expr = _91785_exist.get()._field_generics;
			auto it = expr.begin();
			_iter_begin_2297e2794:;
			if (it != expr.end()) {
				jule::I32 _92218_i = it - expr.begin();
				jule::Ptr<_2455de7ea_InsGeneric> _92225_g = *it;
				{
					_91749_s.get()._field_generics[_92218_i].get()._field_constraint=_92225_g.get()._field_constraint;
				}
				_iter_next_2297e2794:;
				++it;
				_92218_i++;
				goto _iter_begin_2297e2794;
			}
			_iter_end_2297e2794:;
		};
	} else {
		_91817_cc.get()._field_uniq=true;
	};
	return _2454e23bd_check(_91817_cc);
}



inline jule::Bool _24555b4d1_fn_environment(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2449299b0_FnIns>& _93439_f, jule::Fn<jule::Bool(jule::Ptr<_24555100e_Sema>&,jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>&)> _93450_algo) {
	jule::Ptr<_24555100e_Sema> _93517_sema = _93439_f.get()._field_decl.get()._field_sema;;
	jule::Ptr<_2455b02e3_SymbolTable> _93617_old = _93439_f.get()._field_decl.get()._field_sema.get()._field_file;;
	__JULE_DEFER({
		_245553808_set_current_file(_93439_f.get()._field_decl.get()._field_sema.ptr(), _93617_old);
	});;
	jule::Ptr<_2455b02e3_SymbolTable> _93817_file = _245550618_find_file(_93439_f.get()._field_decl.get()._field_sema.get()._field_files,_93439_f.get()._field_decl.get()._field_token.get()._field_file);;
	if ((_93817_file != nullptr)) {
		_245553808_set_current_file(_93439_f.get()._field_decl.get()._field_sema.ptr(), _93817_file);
	};
	jule::I32 _94317_size = _93439_f.get()._field_generics.len();;
	if (((_93439_f.get()._field_decl != nullptr) && (_93439_f.get()._field_decl.get()._field_owner != nullptr))) {
		_94317_size+=_93439_f.get()._field_decl.get()._field_owner.get()._field_generics.len();
	};
	jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _94817_generics = jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>::alloc(0LL,_94317_size);;
	_2455502b6_append_generic_type_aliases(_94817_generics,_93439_f);
	jule::Bool _95113_ok = _93450_algo(_93517_sema,_94817_generics);;
	if ((_93517_sema != _self_)) {
		_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_93517_sema.get()._field_errors);
		_93517_sema.get()._field_errors=nullptr;
	};
	return _95113_ok;
}



inline void _24555b756_check_fn_param_kind(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244928ae1_ParamIns>& _96144_p) {
	_96144_p.get()._field_kind.get()._field_variadic=_96144_p.get()._field_decl.get()._field_variadic;
	if ((_96144_p.get()._field_decl.get()._field_reference && (!(_245608517_is_valid_for_ref(_96144_p.get()._field_kind))))) {
		_245553bc1_push_err(_self_.ptr(), _96144_p.get()._field_decl.get()._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_96144_p.get()._field_kind.ptr()))}));
	};
}



inline jule::Bool _24555ba64_reload_fn_ins_types(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2449299b0_FnIns> _96843_f) {
	if ((_24492ad46_is_builtin(_96843_f.ptr()) || _24492b0aa_is_anon(_96843_f.ptr()))) {
		return true;
	};
	return _24555b4d1_fn_environment(_self_, _96843_f,jule::Fn<jule::Bool(jule::Ptr<_24555100e_Sema>&,jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>&)>([=](jule::Ptr<_24555100e_Sema>& _97244_sema, jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>& _97262_generics) mutable -> jule::Bool {
		jule::Bool _97321_ok = true;;
		{
			auto &expr = _96843_f.get()._field_params;
			auto it = expr.begin();
			_iter_begin_2297edc23:;
			if (it != expr.end()) {
				jule::Ptr<_244928ae1_ParamIns> _97425_p = *it;
				{
					if (_244925aee_is_self(_97425_p.get()._field_decl.ptr())) {
						if (_244925d63_is_ref(_97425_p.get()._field_decl.ptr())) {
							_97425_p.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9283_Sptr>(_2455e9283_Sptr{._field_elem=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_96843_f.get()._field_owner, 0)})}), 7)});
						} else {
							_97425_p.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_96843_f.get()._field_owner, 0)});
						};
					} else {
						_97425_p.get()._field_kind=_24555808d_build_type_with_generics(_97244_sema, _97425_p.get()._field_decl.get()._field_kind.get()._field_decl,_97262_generics,_96843_f.get()._field_refers);
						if ((_97425_p.get()._field_kind != nullptr)) {
							_24555b756_check_fn_param_kind(_self_, _97425_p);
						} else {
							_97321_ok=false;
						};
					};
				}
				_iter_next_2297edc23:;
				++it;
				goto _iter_begin_2297edc23;
			}
			_iter_end_2297edc23:;
		};
		if ((!(_244927271_is_void(_96843_f.get()._field_decl.ptr())))) {
			_96843_f.get()._field_result=_24555808d_build_type_with_generics(_97244_sema, _96843_f.get()._field_decl.get()._field_result.get()._field_kind.get()._field_decl,_97262_generics,_96843_f.get()._field_refers);
			_97321_ok=((_96843_f.get()._field_result != nullptr) && _97321_ok);
		};
		return _97321_ok;
	}));
}



inline jule::Bool _24555bee8_check_ref_validity_for_init_expr(jule::Ptr<_24555100e_Sema> _self_, jule::Bool _100452_left_mut, jule::Ptr<_2455b5051_Data>& _100473_d, jule::Ptr<_2431e4523_Token>& _100488_error_token) {
	{
		auto &_match_expr{ _100473_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_229804267:;
			{
				goto _match_end_2298037b6;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921578_TraitSubIdentExprModel>>()) {
			_case_begin_2298042cd:;
			{
				jule::Ptr<_244921578_TraitSubIdentExprModel> _100921_model = _100473_d.get()._field_model.operator jule::Ptr<_244921578_TraitSubIdentExprModel>();;
				if ((!(_24554e150_is_valid_model_for_ref(_100921_model.get()._field_expr)))) {
					_245553bc1_push_err(_self_.ptr(), _100488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>::make({jule::Any(_100921_model.get()._field_method.get()._field_ident)}));
					return false;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
			_case_begin_2298043aa:;
			{
				jule::Ptr<_244921996_StructSubIdentExprModel> _101521_model = _100473_d.get()._field_model.operator jule::Ptr<_244921996_StructSubIdentExprModel>();;
				if ((!(_24554e150_is_valid_model_for_ref(_101521_model.get()._field_expr.get()._field_model)))) {
					_245553bc1_push_err(_self_.ptr(), _100488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>::make({jule::Any(_101521_model.get()._field_field.get()._field_decl.get()._field_ident)}));
					return false;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492205c_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ptr<_244922249_CommonSubIdentExprModel>>()) {
			_case_begin_229804421:;
			{
				_245553bc1_push_err(_self_.ptr(), _100488_error_token,jule::Str("built-in defines cannot pass to references", 42),jule::Slice<jule::Any>());
				return false;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24491ec6e_UnaryExprModel>>()) {
			_case_begin_229803909:;
			{
				jule::Ptr<_24491ec6e_UnaryExprModel> _102521_unary = _100473_d.get()._field_model.operator jule::Ptr<_24491ec6e_UnaryExprModel>();;
				if ((_102521_unary.get()._field_op.get()._field_kind == jule::Str("*", 1))) {
					if ((!(_24554e150_is_valid_model_for_ref(_100473_d.get()._field_model)))) {
						_245553bc1_push_err(_self_.ptr(), _100488_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>::make({jule::Any(jule::Str("address from * &T", 17))}));
						return false;
					};
					goto _match_end_2298037b6;
				};
				goto _case_begin_22980381b;
			}
		}
		else {
			_case_begin_22980381b:;
			{
				_245553bc1_push_err(_self_.ptr(), _100488_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>());
				return false;
			}
		}
		_match_end_2298037b6:;
	};
	if ((_100452_left_mut && (!(_100473_d.get()._field_mutable)))) {
		_245553bc1_push_err(_self_.ptr(), _100488_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>());
		return false;
	};
	return true;
}



inline jule::Bool _24555c5e2_check_validity_for_init_expr(jule::Ptr<_24555100e_Sema> _self_, jule::Bool _104648_left_mut, jule::Bool _104664_left_ref, jule::Ptr<_2455e1027_TypeKind>& _104710_left_kind, jule::Ptr<_2455b5051_Data>& _104737_d, jule::Ptr<_2431e4523_Token>& _104752_error_token) {
	if (((_104648_left_mut && (!(_104737_d.get()._field_mutable))) && _2455e2424_mutable(_104737_d.get()._field_kind.ptr()))) {
		_245553bc1_push_err(_self_.ptr(), _104752_error_token,jule::Str("immutable data cannot assign to mutable storage because of @ type which is mutable", 82),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_104737_d.get()._field_kind.ptr()))}));
		return false;
	};
	if (_104664_left_ref) {
		if ((!(_24555bee8_check_ref_validity_for_init_expr(_self_, _104648_left_mut,_104737_d,_104752_error_token)))) {
			return false;
		};
	};
	jule::Ptr<_2455a0a0e_AssignTypeChecker> _105817_atc = jule::new_ptr<_2455a0a0e_AssignTypeChecker>(_2455a0a0e_AssignTypeChecker{._field_s=_self_, ._field_d=_104737_d, ._field_error_token=_104752_error_token});;
	return _2455a11d5_check_validity(_105817_atc.ptr());
}



inline jule::Bool _24555c999_check_type_alias_decl_kind(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2455e0334_TypeAlias>& _106651_ta, jule::Trait<_24560bac0_Lookup> _106671_l) {
	jule::Bool _106684_ok = jule::Bool();
	jule::Ptr<_2455b02e3_SymbolTable> _106717_old = _self_.get()._field_file;;
	__JULE_DEFER({
		_245553808_set_current_file(_self_.ptr(), _106717_old);
	});;
	if ((_106651_ta.get()._field_token != nullptr)) {
		jule::Ptr<_2455b02e3_SymbolTable> _107221_file = _245550618_find_file(_self_.get()._field_files,_106651_ta.get()._field_token.get()._field_file);;
		if ((_107221_file != nullptr)) {
			_245553808_set_current_file(_self_.ptr(), _107221_file);
		};
	};
	_106684_ok=_2455574ee_check_type_with_refers(_self_, _106651_ta.get()._field_kind,_106671_l,nullptr,jule::new_ptr<_2455ed73d_Referencer>(_2455ed73d_Referencer{._field_ident=_106651_ta.get()._field_ident, ._field_owner=jule::Any(_106651_ta), ._field_refs=(&(_106651_ta.get()._field_refers))}));
	if (((_106684_ok && (_2455e3d4e_arr(_106651_ta.get()._field_kind.get()._field_kind.ptr()) != nullptr)) && _2455e3d4e_arr(_106651_ta.get()._field_kind.get()._field_kind.ptr()).get()._field_auto)) {
		_245553bc1_push_err(_self_.ptr(), _106651_ta.get()._field_kind.get()._field_decl.get()._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
		_106684_ok=false;
	};
	return _106684_ok;
}



inline void _24555ccc9_check_type_alias_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2455e0334_TypeAlias>& _108946_ta, jule::Trait<_24560bac0_Lookup> _108966_l) {
	if (_2431e6cb7_is_ignore_ident(_108946_ta.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _108946_ta.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	};
	_24555c999_check_type_alias_decl_kind(_self_, _108946_ta,_108966_l);
}



inline void _24555d071_check_type_alias_decl_dup(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2455e0334_TypeAlias>& _109750_ta) {
	if (_2431e6cb7_is_ignore_ident(_109750_ta.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _109750_ta.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	};
	if (_2455547e8_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_109750_ta)),_109750_ta.get()._field_ident,_109750_ta.get()._field_cpp_linked)) {
		_245553bc1_push_err(_self_.ptr(), _109750_ta.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_109750_ta.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
	_24555c999_check_type_alias_decl_kind(_self_, _109750_ta,jule::Trait<_24560bac0_Lookup>(_self_, 3));
}



inline jule::Bool _24555d2e6_check_type_alias_decls(jule::Ptr<_24555100e_Sema> _self_) {
	jule::Bool _110944_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_2298164cc:;
		if (it != expr.end()) {
			jule::Ptr<_2455e0334_TypeAlias> _111021_ta = *it;
			{
				_24555d071_check_type_alias_decl_dup(_self_, _111021_ta);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_110944_ok = false;
					return _110944_ok;
				};
			}
			_iter_next_2298164cc:;
			++it;
			goto _iter_begin_2298164cc;
		}
		_iter_end_2298164cc:;
	};
	_110944_ok = true;
	return _110944_ok;
}



inline void _2298278d9_check_enum_items_dup(_24555100e_Sema* _self_, jule::Slice<jule::Ptr<_245481417_EnumItem>> _112142_items) {
	{
		auto &expr = _112142_items;
		auto it = expr.begin();
		_iter_begin_229828bb5:;
		if (it != expr.end()) {
			jule::Ptr<_245481417_EnumItem> &_112216_item = *it;
			{
				if (_112216_item.get()._field_ident.empty()) {
					goto _iter_next_229828bb5;
				} else if (_2431e6cb7_is_ignore_ident(_112216_item.get()._field_ident)) {
					_245553bc1_push_err(&(*_self_), _112216_item.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = _112142_items;
						auto it = expr.begin();
						_iter_begin_2298298ec:;
						if (it != expr.end()) {
							jule::Ptr<_245481417_EnumItem> &_112824_citem = *it;
							{
								if ((_112216_item == _112824_citem)) {
									goto _iter_end_2298298ec;
								} else if ((_112216_item.get()._field_ident == _112824_citem.get()._field_ident)) {
									_245553bc1_push_err(&(*_self_), _112216_item.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_112216_item.get()._field_ident)}));
									_245553ee0_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_2298298ec;
								};
							}
							_iter_next_2298298ec:;
							++it;
							goto _iter_begin_2298298ec;
						}
						_iter_end_2298298ec:;
					};
				};
			}
			_iter_next_229828bb5:;
			++it;
			goto _iter_begin_229828bb5;
		}
		_iter_end_229828bb5:;
	};
}

inline void _22983320d_check_enum_items_dup(_24555100e_Sema* _self_, jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>> _112142_items) {
	{
		auto &expr = _112142_items;
		auto it = expr.begin();
		_iter_begin_2298344d9:;
		if (it != expr.end()) {
			jule::Ptr<_245482e41_TypeEnumItem> &_112216_item = *it;
			{
				if (_112216_item.get()._field_ident.empty()) {
					goto _iter_next_2298344d9;
				} else if (_2431e6cb7_is_ignore_ident(_112216_item.get()._field_ident)) {
					_245553bc1_push_err(&(*_self_), _112216_item.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = _112142_items;
						auto it = expr.begin();
						_iter_begin_229835221:;
						if (it != expr.end()) {
							jule::Ptr<_245482e41_TypeEnumItem> &_112824_citem = *it;
							{
								if ((_112216_item == _112824_citem)) {
									goto _iter_end_229835221;
								} else if ((_112216_item.get()._field_ident == _112824_citem.get()._field_ident)) {
									_245553bc1_push_err(&(*_self_), _112216_item.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_112216_item.get()._field_ident)}));
									_245553ee0_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_229835221;
								};
							}
							_iter_next_229835221:;
							++it;
							goto _iter_begin_229835221;
						}
						_iter_end_229835221:;
					};
				};
			}
			_iter_next_2298344d9:;
			++it;
			goto _iter_begin_2298344d9;
		}
		_iter_end_2298344d9:;
	};
}



inline void _24555d7e1_check_enum_items_str(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_245481e0c_Enum>& _114145_e) {
	jule::Ptr<_2455b6abe_Eval> _114217_eval = _2455592d1_eval(_self_, jule::Trait<_24560bac0_Lookup>(_self_, 3));;
	{
		auto &expr = _114145_e.get()._field_items;
		auto it = expr.begin();
		_iter_begin_22981838b:;
		if (it != expr.end()) {
			jule::Ptr<_245481417_EnumItem> _114321_item = *it;
			{
				if (_245481802_auto_expr(_114321_item.ptr())) {
					_114321_item.get()._field_value=jule::new_ptr<_2455b60c9_Value>(_2455b60c9_Value{._field_data=jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_constant=static__244916969_new_str(_114321_item.get()._field_ident)})});
					_114321_item.get()._field_value.get()._field_data.get()._field_model=static_cast<jule::Any>(_114321_item.get()._field_value.get()._field_data.get()._field_constant);
				} else {
					jule::Ptr<_2455b5051_Data> _115225_d = _2455d26de_eval_expr(_114217_eval, _114321_item.get()._field_value.get()._field_expr);;
					if ((_115225_d == nullptr)) {
						goto _iter_next_22981838b;
					};
					if ((!(_2455b5914_is_const(_115225_d.ptr())))) {
						_245553bc1_push_err(_self_.ptr(), _114321_item.get()._field_value.get()._field_expr.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					};
					_2455597cb_check_assign_type(_self_, false,_114145_e.get()._field_kind.get()._field_kind,_115225_d,_114321_item.get()._field_token);
					_114321_item.get()._field_value.get()._field_data=_115225_d;
				};
			}
			_iter_next_22981838b:;
			++it;
			goto _iter_begin_22981838b;
		}
		_iter_end_22981838b:;
	};
}



inline void _24555da66_check_enum_items_int(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_245481e0c_Enum>& _116745_e) {
	jule::Ptr<_2455e59ee_Prim> _116813_prim = _2455e3139_prim(_116745_e.get()._field_kind.get()._field_kind.ptr());;
	jule::U64 _116917_max = static_cast<jule::U64>(_245523267_max(_2455e5d62_to_str(_116813_prim.ptr())));;
	jule::Ptr<_2455b6abe_Eval> _117017_eval = _2455592d1_eval(_self_, jule::Trait<_24560bac0_Lookup>(_self_, 3));;
	{
		auto &expr = _116745_e.get()._field_items;
		auto it = expr.begin();
		_iter_begin_22981d803:;
		if (it != expr.end()) {
			jule::I32 _117114_i = it - expr.begin();
			jule::Ptr<_245481417_EnumItem> _117121_item = *it;
			{
				if ((_116917_max == 0LLU)) {
					_245553bc1_push_err(_self_.ptr(), _117121_item.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(_116917_max)--;
				};
				if (_245481802_auto_expr(_117121_item.ptr())) {
					_117121_item.get()._field_value=jule::new_ptr<_2455b60c9_Value>(_2455b60c9_Value{._field_data=jule::new_ptr<_2455b5051_Data>()});
					{
						
						if (_2455280b3_is_sig_int(_2455e5d62_to_str(_116813_prim.ptr()))) {
							_case_begin_229820d88:;
							{
								_117121_item.get()._field_value.get()._field_data.get()._field_constant=static__244916408_new_i64(static_cast<jule::I64>(static_cast<jule::I64>((_116917_max - (_116917_max - static_cast<jule::U64>(_117114_i))))));
							}
						}
						else {
							_case_begin_2298209e2:;
							{
								_117121_item.get()._field_value.get()._field_data.get()._field_constant=static__24491653a_new_u64(static_cast<jule::U64>((_116917_max - (_116917_max - static_cast<jule::U64>(_117114_i)))));
							}
						}
						_match_end_22982097b:;
					};
					_117121_item.get()._field_value.get()._field_data.get()._field_model=static_cast<jule::Any>(_117121_item.get()._field_value.get()._field_data.get()._field_constant);
				} else {
					jule::Ptr<_2455b5051_Data> _118925_d = _2455d26de_eval_expr(_117017_eval, _117121_item.get()._field_value.get()._field_expr);;
					if ((_118925_d == nullptr)) {
						goto _iter_next_22981d803;
					};
					if ((!(_2455b5914_is_const(_118925_d.ptr())))) {
						_245553bc1_push_err(_self_.ptr(), _117121_item.get()._field_value.get()._field_expr.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					};
					_2455597cb_check_assign_type(_self_, false,_116745_e.get()._field_kind.get()._field_kind,_118925_d,_117121_item.get()._field_token);
					_117121_item.get()._field_value.get()._field_data=_118925_d;
				};
			}
			_iter_next_22981d803:;
			++it;
			_117114_i++;
			goto _iter_begin_22981d803;
		}
		_iter_end_22981d803:;
	};
}



inline void _24555dcdb_check_enum_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_245481e0c_Enum>& _120440_e) {
	if (_2431e6cb7_is_ignore_ident(_120440_e.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _120440_e.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (_2455547e8_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_120440_e)),_120440_e.get()._field_ident,false)) {
		_245553bc1_push_err(_self_.ptr(), _120440_e.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_120440_e.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
	if ((_120440_e.get()._field_items.len() == 0LL)) {
		_245553bc1_push_err(_self_.ptr(), _120440_e.get()._field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>::make({jule::Any(_120440_e.get()._field_ident)}));
	};
	_2298278d9_check_enum_items_dup(_self_.ptr(), _120440_e.get()._field_items);
	if ((_120440_e.get()._field_kind != nullptr)) {
		if ((!(_245557b1a_check_type(_self_, _120440_e.get()._field_kind,jule::Trait<_24560bac0_Lookup>(_self_, 3))))) {
			return;;
		};
	} else {
		_120440_e.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)})});
	};
	jule::Ptr<_2455e59ee_Prim> _123117_t = _2455e3139_prim(_120440_e.get()._field_kind.get()._field_kind.ptr());;
	if ((_123117_t == nullptr)) {
		_245553bc1_push_err(_self_.ptr(), _120440_e.get()._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
		return;;
	};
	{
		
		if (_2455e8c33_is_str(_123117_t.ptr())) {
			_case_begin_22982e11b:;
			{
				_24555d7e1_check_enum_items_str(_self_, _120440_e);
			}
		}
		else if (_245528646_is_int(_2455e5d62_to_str(_123117_t.ptr()))) {
			_case_begin_22982dd63:;
			{
				_24555da66_check_enum_items_int(_self_, _120440_e);
			}
		}
		else {
			_case_begin_22982d318:;
			{
				_245553bc1_push_err(_self_.ptr(), _120440_e.get()._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
			}
		}
		_match_end_22982d15e:;
	};
}



inline void _24555e061_check_type_enum_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_245483507_TypeEnum>& _124845_e) {
	if (_2431e6cb7_is_ignore_ident(_124845_e.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _124845_e.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (_2455547e8_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_124845_e)),_124845_e.get()._field_ident,false)) {
		_245553bc1_push_err(_self_.ptr(), _124845_e.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_124845_e.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
	if ((_124845_e.get()._field_items.len() == 0LL)) {
		_245553bc1_push_err(_self_.ptr(), _124845_e.get()._field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>::make({jule::Any(_124845_e.get()._field_ident)}));
		return;;
	};
	_22983320d_check_enum_items_dup(_self_.ptr(), _124845_e.get()._field_items);
	{
		auto &expr = _124845_e.get()._field_items;
		auto it = expr.begin();
		_iter_begin_229833b9d:;
		if (it != expr.end()) {
			jule::Ptr<_245482e41_TypeEnumItem> _126221_item = *it;
			{
				if ((_126221_item.get()._field_kind == nullptr)) {
					_245553bc1_push_err(_self_.ptr(), _126221_item.get()._field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					goto _iter_next_229833b9d;
				};
				jule::Bool _126717_ok = _245557b1a_check_type(_self_, _126221_item.get()._field_kind,jule::Trait<_24560bac0_Lookup>(_self_, 3));;
				if ((!(_126717_ok))) {
					goto _iter_next_229833b9d;
				};
				jule::Ptr<_2455e59ee_Prim> _127117_p = _2455e3139_prim(_126221_item.get()._field_kind.get()._field_kind.ptr());;
				if (((_127117_p != nullptr) && _2455e8e97_is_any(_127117_p.ptr()))) {
					_245553bc1_push_err(_self_.ptr(), _126221_item.get()._field_token,jule::Str("the <any> type is not allowed for type-enum declarations", 56),jule::Slice<jule::Any>());
				};
			}
			_iter_next_229833b9d:;
			++it;
			goto _iter_begin_229833b9d;
		}
		_iter_end_229833b9d:;
	};
	if ((_124845_e.get()._field_items.len() == 1LL)) {
		jule::Ptr<_245482e41_TypeEnumItem> _127721_item = _124845_e.get()._field_items[0LL];;
		_2455e1027_TypeKind _127817_tk = _2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_124845_e, 4)};;
		if (((_127721_item.get()._field_kind.get()._field_kind != nullptr) && _2455e1731_equals(_127721_item.get()._field_kind.get()._field_kind, ((jule::Ptr<_2455e1027_TypeKind>)((&(_127817_tk))))))) {
			_245553bc1_push_err(_self_.ptr(), _127721_item.get()._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>::make({jule::Any(_245483837_to_str(_124845_e.ptr()))}));
		};
	};
}



inline jule::Bool _24555e2c5_check_enum_decls(jule::Ptr<_24555100e_Sema> _self_) {
	jule::Bool _128838_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_enums;
		auto it = expr.begin();
		_iter_begin_22983c9ed:;
		if (it != expr.end()) {
			jule::Ptr<_245481e0c_Enum> _128921_e = *it;
			{
				_24555dcdb_check_enum_decl(_self_, _128921_e);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_128838_ok = false;
					return _128838_ok;
				};
			}
			_iter_next_22983c9ed:;
			++it;
			goto _iter_begin_22983c9ed;
		}
		_iter_end_22983c9ed:;
	};
	_128838_ok = true;
	return _128838_ok;
}



inline jule::Bool _24555e539_check_type_enum_decls(jule::Ptr<_24555100e_Sema> _self_) {
	jule::Bool _130143_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_type_enums;
		auto it = expr.begin();
		_iter_begin_22983e1d6:;
		if (it != expr.end()) {
			jule::Ptr<_245483507_TypeEnum> _130221_e = *it;
			{
				_24555e061_check_type_enum_decl(_self_, _130221_e);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_130143_ok = false;
					return _130143_ok;
				};
			}
			_iter_next_22983e1d6:;
			++it;
			goto _iter_begin_22983e1d6;
		}
		_iter_end_22983e1d6:;
	};
	_130143_ok = true;
	return _130143_ok;
}



inline jule::Bool _24555e847_check_decl_generics(_24555100e_Sema* _self_, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>& _131339_generics) {
	jule::Bool _131372_ok = jule::Bool();
	_131372_ok=true;
	{
		auto &expr = _131339_generics;
		auto it = expr.begin();
		_iter_begin_229840a23:;
		if (it != expr.end()) {
			jule::I32 _131513_i = it - expr.begin();
			jule::Ptr<_2448657b9_GenericDecl> &_131516_g = *it;
			{
				if (_2431e6cb7_is_ignore_ident(_131516_g.get()._field_ident)) {
					_245553bc1_push_err(&(*_self_), _131516_g.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
					_131372_ok=false;
					goto _iter_next_229840a23;
				};
				_julec_label_duplication_lookup:;
				{
					auto &expr = _131339_generics;
					auto it = expr.begin();
					_iter_begin_229841abd:;
					if (it != expr.end()) {
						jule::I32 _132417_j = it - expr.begin();
						jule::Ptr<_2448657b9_GenericDecl> &_132420_ct = *it;
						{
							{
								
								if ((_132417_j >= _131513_i)) {
									_case_begin_22984341b:;
									{
										goto _iter_end_229841abd;
									}
								}
								else if ((_131516_g.get()._field_ident == _132420_ct.get()._field_ident)) {
									_case_begin_229843493:;
									{
										_245553bc1_push_err(&(*_self_), _131516_g.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_131516_g.get()._field_ident)}));
										_245553ee0_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										_131372_ok=false;
										goto _iter_end_229841abd;
									}
								}
								_match_end_2298432ea:;
							};
						}
						_iter_next_229841abd:;
						++it;
						_132417_j++;
						goto _iter_begin_229841abd;
					}
					_iter_end_229841abd:;
				};
			}
			_iter_next_229840a23:;
			++it;
			_131513_i++;
			goto _iter_begin_229840a23;
		}
		_iter_end_229840a23:;
	};
	return _131372_ok;
}



inline jule::Bool _24555eb77_check_fn_decl_params_dup(_24555100e_Sema* _self_, jule::Ptr<_244926d0e_Fn>& _134044_f) {
	jule::Bool _134054_ok = jule::Bool();
	_134054_ok=true;
	_julec_label_check:;
	{
		auto &expr = _134044_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_229845819:;
		if (it != expr.end()) {
			jule::I32 _134313_i = it - expr.begin();
			jule::Ptr<_2449254c2_Param> &_134316_p = *it;
			{
				{
					auto &expr = _134044_f.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_229846584:;
					if (it != expr.end()) {
						jule::Ptr<_2448657b9_GenericDecl> &_134520_g = *it;
						{
							if ((_134316_p.get()._field_ident == _134520_g.get()._field_ident)) {
								_134054_ok=false;
								_245553bc1_push_err(&(*_self_), _134316_p.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_134316_p.get()._field_ident)}));
								_245553ee0_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								goto _iter_next_229845819;
							};
						}
						_iter_next_229846584:;
						++it;
						goto _iter_begin_229846584;
					}
					_iter_end_229846584:;
				};
				_julec_label_params_lookup:;
				{
					auto &expr = _134044_f.get()._field_params;
					auto it = expr.begin();
					_iter_begin_229846a18:;
					if (it != expr.end()) {
						jule::I32 _135517_j = it - expr.begin();
						jule::Ptr<_2449254c2_Param> &_135520_jp = *it;
						{
							{
								
								if ((_135517_j >= _134313_i)) {
									_case_begin_229848d17:;
									{
										goto _iter_end_229846a18;
									}
								}
								else if ((_2431e705e_is_anon_ident(_134316_p.get()._field_ident) || _2431e705e_is_anon_ident(_135520_jp.get()._field_ident))) {
									_case_begin_229848d8e:;
									{
										goto _iter_end_229846a18;
									}
								}
								else if ((_134316_p.get()._field_ident == _135520_jp.get()._field_ident)) {
									_case_begin_229848e16:;
									{
										_134054_ok=false;
										_245553bc1_push_err(&(*_self_), _134316_p.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_134316_p.get()._field_ident)}));
										_245553ee0_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_next_229845819;
									}
								}
								_match_end_229848bd5:;
							};
						}
						_iter_next_229846a18:;
						++it;
						_135517_j++;
						goto _iter_begin_229846a18;
					}
					_iter_end_229846a18:;
				};
			}
			_iter_next_229845819:;
			++it;
			_134313_i++;
			goto _iter_begin_229845819;
		}
		_iter_end_229845819:;
	};
	return _134054_ok;
}



inline jule::Bool _24555eeb8_check_fn_decl_result_dup(_24555100e_Sema* _self_, jule::Ptr<_244926d0e_Fn>& _137444_f) {
	jule::Bool _137454_ok = jule::Bool();
	_137454_ok=true;
	if (_244927271_is_void(_137444_f.ptr())) {
		return _137454_ok;
	};
	{
		auto &expr = _137444_f.get()._field_result.get()._field_idents;
		auto it = expr.begin();
		_iter_begin_229851847:;
		if (it != expr.end()) {
			jule::I32 _138113_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> &_138116_v = *it;
			{
				if ((_2431e6cb7_is_ignore_ident(_138116_v.get()._field_kind) || _2431e705e_is_anon_ident(_138116_v.get()._field_kind))) {
					goto _iter_next_229851847;
				};
				{
					auto &expr = _137444_f.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_229853085:;
					if (it != expr.end()) {
						jule::Ptr<_2448657b9_GenericDecl> &_138620_g = *it;
						{
							if ((_138116_v.get()._field_kind == _138620_g.get()._field_ident)) {
								goto _julec_label_exist;
							};
						}
						_iter_next_229853085:;
						++it;
						goto _iter_begin_229853085;
					}
					_iter_end_229853085:;
				};
				{
					auto &expr = _137444_f.get()._field_params;
					auto it = expr.begin();
					_iter_begin_22985431c:;
					if (it != expr.end()) {
						jule::Ptr<_2449254c2_Param> &_139220_p = *it;
						{
							if ((_138116_v.get()._field_kind == _139220_p.get()._field_ident)) {
								goto _julec_label_exist;
							};
						}
						_iter_next_22985431c:;
						++it;
						goto _iter_begin_22985431c;
					}
					_iter_end_22985431c:;
				};
				_julec_label_itself_lookup:;
				{
					auto &expr = _137444_f.get()._field_result.get()._field_idents;
					auto it = expr.begin();
					_iter_begin_2298555b5:;
					if (it != expr.end()) {
						jule::I32 _140017_j = it - expr.begin();
						jule::Ptr<_2431e4523_Token> &_140020_jv = *it;
						{
							{
								
								if ((_140017_j >= _138113_i)) {
									_case_begin_229856352:;
									{
										goto _iter_end_2298555b5;
									}
								}
								else if ((_140020_jv.get()._field_kind == _138116_v.get()._field_kind)) {
									_case_begin_2298563c9:;
									{
										goto _julec_label_exist;
									}
								}
								_match_end_229856231:;
							};
						}
						_iter_next_2298555b5:;
						++it;
						_140017_j++;
						goto _iter_begin_2298555b5;
					}
					_iter_end_2298555b5:;
				};
				goto _iter_next_229851847;
				_julec_label_exist:;
				_245553bc1_push_err(&(*_self_), _138116_v,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_138116_v.get()._field_kind)}));
				_245553ee0_push_suggestion(&(*_self_), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
				_137454_ok=false;
			}
			_iter_next_229851847:;
			++it;
			_138113_i++;
			goto _iter_begin_229851847;
		}
		_iter_end_229851847:;
	};
	return _137454_ok;
}



inline void _245560271_check_fn_decl_prototype(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244926d0e_Fn>& _142148_f) {
	if ((_142148_f.get()._field_exceptional && _142148_f.get()._field_cpp_linked)) {
		_245553bc1_push_err(_self_.ptr(), _142148_f.get()._field_token,jule::Str("cpp-linked defines cannot be exceptional", 40),jule::Slice<jule::Any>());
		return;;
	};
	if (_142148_f.get()._field_exceptional) {
		if (_244927749_is_entry_point(_142148_f.ptr())) {
			_245553bc1_push_err(_self_.ptr(), _142148_f.get()._field_token,jule::Str("entry point cannot be exceptional", 33),jule::Slice<jule::Any>());
		} else if (_2449279ad_is_init(_142148_f.ptr())) {
			_245553bc1_push_err(_self_.ptr(), _142148_f.get()._field_token,jule::Str("initializer function cannot be exceptional", 42),jule::Slice<jule::Any>());
		};
	};
	{
		
		if ((!(_24555e847_check_decl_generics(_self_.ptr(), _142148_f.get()._field_generics)))) {
			_case_begin_2298596b8:;
		}
		else if ((!(_24555eb77_check_fn_decl_params_dup(_self_.ptr(), _142148_f)))) {
			_case_begin_22985aa4e:;
		}
		else if ((!(_24555eeb8_check_fn_decl_result_dup(_self_.ptr(), _142148_f)))) {
			_case_begin_22985aab5:;
		}
		_match_end_22985950e:;
	};
}



inline void _245560529_check_trait_decl_method(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244926d0e_Fn>& _144248_f) {
	if (_2431e6cb7_is_ignore_ident(_144248_f.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _144248_f.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	};
	_144248_f.get()._field_sema=_self_;
	_245560271_check_fn_decl_prototype(_self_, _144248_f);
	jule::Ptr<_2449299b0_FnIns> _144917_ins = _24492845e_instance(_144248_f);;
	_24555ba64_reload_fn_ins_types(_self_, _144917_ins);
	_144917_ins.get()._field_reloaded=true;
	_244928739_append_instance(_144248_f.ptr(), _144917_ins);
}



inline void _2455607d2_check_trait_decl_methods(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24547ec51_Trait>& _145549_t) {
	{
		auto &expr = _145549_t.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_22985e129:;
		if (it != expr.end()) {
			jule::I32 _145614_i = it - expr.begin();
			jule::Ptr<_244926d0e_Fn> _145621_f = *it;
			{
				_245560529_check_trait_decl_method(_self_, _145621_f);
				_145549_t.get()._field_mutable=(_145549_t.get()._field_mutable || _145621_f.get()._field_params[0LL].get()._field_mutable);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					return;;
				};
				_julec_label_duplicate_lookup:;
				{
					auto &expr = _145549_t.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_229860d73:;
					if (it != expr.end()) {
						jule::I32 _146717_j = it - expr.begin();
						jule::Ptr<_244926d0e_Fn> _146720_jf = *it;
						{
							{
								
								if ((_146717_j >= _145614_i)) {
									_case_begin_22986200b:;
									{
										goto _iter_end_229860d73;
									}
								}
								else if ((_145621_f.get()._field_ident == _146720_jf.get()._field_ident)) {
									_case_begin_229862083:;
									{
										_245553bc1_push_err(_self_.ptr(), _145621_f.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_145621_f.get()._field_ident)}));
										_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_end_229860d73;
									}
								}
								_match_end_229861dda:;
							};
						}
						_iter_next_229860d73:;
						++it;
						_146717_j++;
						goto _iter_begin_229860d73;
					}
					_iter_end_229860d73:;
				};
			}
			_iter_next_22985e129:;
			++it;
			_145614_i++;
			goto _iter_begin_22985e129;
		}
		_iter_end_22985e129:;
	};
}



inline void _245560a68_check_trait_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24547ec51_Trait>& _148641_t) {
	if (_2431e6cb7_is_ignore_ident(_148641_t.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _148641_t.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (_2455547e8_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_148641_t)),_148641_t.get()._field_ident,false)) {
		_245553bc1_push_err(_self_.ptr(), _148641_t.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_148641_t.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
	_2455607d2_check_trait_decl_methods(_self_, _148641_t);
}



inline jule::Bool _245560ccc_check_trait_decls(jule::Ptr<_24555100e_Sema> _self_) {
	jule::Bool _149839_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_traits;
		auto it = expr.begin();
		_iter_begin_229866032:;
		if (it != expr.end()) {
			jule::Ptr<_24547ec51_Trait> _149921_t = *it;
			{
				_245560a68_check_trait_decl(_self_, _149921_t);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_149839_ok = false;
					return _149839_ok;
				};
			}
			_iter_next_229866032:;
			++it;
			goto _iter_begin_229866032;
		}
		_iter_end_229866032:;
	};
	_149839_ok = true;
	return _149839_ok;
}



inline jule::Bool _2455611a6_check_trait_impl_methods(_24555100e_Sema* _self_, jule::Ptr<_24547ec51_Trait>& _151048_base, jule::Ptr<_24551aa45_Impl>& _151063_ipl) {
	jule::Bool _151077_ok = jule::Bool();
	_151077_ok=true;
	{
		auto &expr = _151063_ipl.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_229867cae:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> &_151216_f = *it;
			{
				if ((_245480a98_find_method(_151048_base.ptr(), _151216_f.get()._field_ident) == nullptr)) {
					_245553bc1_push_err(&(*_self_), _151216_f.get()._field_token,jule::Str("undefined identifier: trait @ has no define @", 45),jule::Slice<jule::Any>::make({jule::Any(_151048_base.get()._field_ident),jule::Any(_151216_f.get()._field_ident)}));
					_151077_ok=false;
				};
			}
			_iter_next_229867cae:;
			++it;
			goto _iter_begin_229867cae;
		}
		_iter_end_229867cae:;
	};
	return _151077_ok;
}



inline jule::Bool _24556156e_impl_to_struct(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244848912_Struct>& _152139_dest, jule::Ptr<_24551aa45_Impl>& _152159_ipl) {
	jule::Bool _152173_ok = jule::Bool();
	_152173_ok=true;
	{
		auto &expr = _152159_ipl.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_22986a102:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _152521_f = *it;
			{
				if (((_244837d30_find_method(_152139_dest.ptr(), _152521_f.get()._field_ident,_152521_f.get()._field_statically) != nullptr) || (_244838281_find_field(_152139_dest.ptr(), _152521_f.get()._field_ident) != nullptr))) {
					_245553bc1_push_err(_self_.ptr(), _152521_f.get()._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>::make({jule::Any(_152139_dest.get()._field_ident),jule::Any(_152521_f.get()._field_ident)}));
					_152173_ok=false;
					goto _iter_next_22986a102;
				};
				if (((_152139_dest.get()._field_generics.len() > 0LL) && (_152521_f.get()._field_generics.len() > 0LL))) {
					{
						auto &expr = _152521_f.get()._field_generics;
						auto it = expr.begin();
						_iter_begin_22986c6ed:;
						if (it != expr.end()) {
							jule::Ptr<_2448657b9_GenericDecl> _153324_fg = *it;
							{
								{
									auto &expr = _152139_dest.get()._field_generics;
									auto it = expr.begin();
									_iter_begin_22986d039:;
									if (it != expr.end()) {
										jule::Ptr<_2448657b9_GenericDecl> _153428_dg = *it;
										{
											if ((_153324_fg.get()._field_ident == _153428_dg.get()._field_ident)) {
												_245553bc1_push_err(_self_.ptr(), _153324_fg.get()._field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>());
												_152173_ok=false;
											};
										}
										_iter_next_22986d039:;
										++it;
										goto _iter_begin_22986d039;
									}
									_iter_end_22986d039:;
								};
							}
							_iter_next_22986c6ed:;
							++it;
							goto _iter_begin_22986c6ed;
						}
						_iter_end_22986c6ed:;
					};
				};
				_245554b17_check_directives(_self_, _152521_f.get()._field_directives,jule::Any(_152521_f));
				_152521_f.get()._field_sema=_self_;
				_152521_f.get()._field_owner=_152139_dest;
				_152139_dest.get()._field_methods = jule::alloc_for_append(_152139_dest.get()._field_methods,1);_152139_dest.get()._field_methods.__push(_152521_f);;
			}
			_iter_next_22986a102:;
			++it;
			goto _iter_begin_22986a102;
		}
		_iter_end_22986a102:;
	};
	{
		auto &expr = _152159_ipl.get()._field_statics;
		auto it = expr.begin();
		_iter_begin_22986ee2b:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> _155021_v = *it;
			{
				;
				if (((_244837d30_find_method(_152139_dest.ptr(), _155021_v.get()._field_ident,true) != nullptr) || (_244838d42_find_static(_152139_dest.ptr(), _155021_v.get()._field_ident) != nullptr))) {
					_245553bc1_push_err(_self_.ptr(), _155021_v.get()._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>::make({jule::Any(_152139_dest.get()._field_ident),jule::Any(_155021_v.get()._field_ident)}));
					_152173_ok=false;
					goto _iter_next_22986ee2b;
				};
				_24556210d_check_var_decl(_self_, _155021_v,jule::Trait<_24560bac0_Lookup>(_self_, 3));
				_245565782_check_type_var(_self_, _155021_v,jule::Trait<_24560bac0_Lookup>(_self_, 3));
				_152139_dest.get()._field_statics = jule::alloc_for_append(_152139_dest.get()._field_statics,1);_152139_dest.get()._field_statics.__push(_155021_v);;
			}
			_iter_next_22986ee2b:;
			++it;
			goto _iter_begin_22986ee2b;
		}
		_iter_end_22986ee2b:;
	};
	return _152173_ok;
}



inline void _2455617e4_impl_trait(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24551aa45_Impl>& _156635_decl) {
	jule::Ptr<_2455e1027_TypeKind> _156717_base_t = _2455586ba_select_type(_self_, _156635_decl.get()._field_base);;
	if ((_156717_base_t == nullptr)) {
		return;;
	};
	jule::Ptr<_24547ec51_Trait> _157117_base = _2455e4800_trt(_156717_base_t.ptr());;
	if ((_157117_base == nullptr)) {
		_245553bc1_push_err(_self_.ptr(), _156635_decl.get()._field_base.get()._field_token,jule::Str("invalid base type for impl: @", 29),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_156717_base_t.ptr()))}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("expected trait, use a trait", 27),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_2455e1027_TypeKind> _157817_dest_t = _2455586ba_select_type(_self_, _156635_decl.get()._field_dest);;
	if ((_157817_dest_t == nullptr)) {
		return;;
	};
	jule::Ptr<_244874c5c_StructIns> _158217_dest_s = _2455e458b_strct(_157817_dest_t.ptr());;
	if ((_158217_dest_s == nullptr)) {
		_245553bc1_push_err(_self_.ptr(), _156635_decl.get()._field_dest.get()._field_token,jule::Str("invalid destination type for impl: @", 36),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_157817_dest_t.ptr()))}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_244848912_Struct> _158917_dest = _158217_dest_s.get()._field_decl;;
	if ((_2431ea2a4_dir(_158917_dest.get()._field_token.get()._field_file.ptr()) != _2431ea2a4_dir(_self_.get()._field_file.get()._field_file.ptr()))) {
		_245553bc1_push_err(_self_.ptr(), _156635_decl.get()._field_dest.get()._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;;
	};
	_157117_base.get()._field_implemented = jule::alloc_for_append(_157117_base.get()._field_implemented,1);_157117_base.get()._field_implemented.__push(_158917_dest);;
	_158917_dest.get()._field_implements = jule::alloc_for_append(_158917_dest.get()._field_implements,1);_158917_dest.get()._field_implements.__push(_157117_base);;
	if ((_156635_decl.get()._field_statics.len() > 0LL)) {
		_245553bc1_push_err(_self_.ptr(), _156635_decl.get()._field_statics[0LL].get()._field_token,jule::Str("trait implementations cannot implement static field", 51),jule::Slice<jule::Any>());
	};
	{
		
		if ((!(_2455611a6_check_trait_impl_methods(_self_.ptr(), _157117_base,_156635_decl)))) {
			_case_begin_22987a860:;
			{
				return;;
			}
		}
		else if ((!(_24556156e_impl_to_struct(_self_, _158917_dest,_156635_decl)))) {
			_case_begin_22987a8c6:;
			{
				return;;
			}
		}
		_match_end_229879a18:;
	};
}



inline void _245561a69_impl_struct(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24551aa45_Impl>& _161136_decl) {
	jule::Ptr<_2455e1027_TypeKind> _161217_dest_t = _2455586ba_select_type(_self_, _161136_decl.get()._field_dest);;
	if ((_161217_dest_t == nullptr)) {
		return;;
	};
	jule::Ptr<_244874c5c_StructIns> _161617_dest_s = _2455e458b_strct(_161217_dest_t.ptr());;
	if ((_161617_dest_s == nullptr)) {
		_245553bc1_push_err(_self_.ptr(), _161136_decl.get()._field_dest.get()._field_token,jule::Str("invalid destination type for impl: @", 36),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_161217_dest_t.ptr()))}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_244848912_Struct> _162317_dest = _161617_dest_s.get()._field_decl;;
	if ((_2431ea2a4_dir(_162317_dest.get()._field_token.get()._field_file.ptr()) != _2431ea2a4_dir(_self_.get()._field_file.get()._field_file.ptr()))) {
		_245553bc1_push_err(_self_.ptr(), _161136_decl.get()._field_dest.get()._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;;
	};
	{
		
		if ((!(_24556156e_impl_to_struct(_self_, _162317_dest,_161136_decl)))) {
			_case_begin_229880458:;
			{
				return;;
			}
		}
		_match_end_22987dd08:;
	};
}



inline void _245561cde_impl_impl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24551aa45_Impl>& _163634_decl) {
	{
		
		if (_2454ea75b_is_trait_impl(_163634_decl.ptr())) {
			_case_begin_22988104c:;
			{
				_2455617e4_impl_trait(_self_, _163634_decl);
			}
		}
		else if (_2454eaea9_is_struct_impl(_163634_decl.ptr())) {
			_case_begin_2298810c4:;
			{
				_245561a69_impl_struct(_self_, _163634_decl);
			}
		}
		_match_end_229880e2b:;
	};
}



inline void _24556210d_check_var_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24556cc1d_Var>& _164739_decl, jule::Trait<_24560bac0_Lookup> _164755_l) {
	if (_2431e6cb7_is_ignore_ident(_164739_decl.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _164739_decl.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	};
	if (_24556d339_is_type_inferred(_164739_decl.ptr())) {
		if ((!(_24556d0c5_is_initialized(_164739_decl.ptr())))) {
			_245553bc1_push_err(_self_.ptr(), _164739_decl.get()._field_token,jule::Str("type inferred declarations should have a initializer expression", 63),jule::Slice<jule::Any>());
		};
	} else {
		_245557b1a_check_type(_self_, _164739_decl.get()._field_kind,_164755_l);
	};
	if ((_164739_decl.get()._field_constant && _164739_decl.get()._field_reference)) {
		_245553bc1_push_err(_self_.ptr(), _164739_decl.get()._field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>());
	};
	if ((!(_24556d0c5_is_initialized(_164739_decl.ptr())))) {
		if (_164739_decl.get()._field_constant) {
			_245553bc1_push_err(_self_.ptr(), _164739_decl.get()._field_token,jule::Str("missing expression for constant variable initialization", 55),jule::Slice<jule::Any>());
		};
		if (_164739_decl.get()._field_statically) {
			_245553bc1_push_err(_self_.ptr(), _164739_decl.get()._field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>());
		};
		if (_164739_decl.get()._field_reference) {
			_245553bc1_push_err(_self_.ptr(), _164739_decl.get()._field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>());
		};
	};
}



inline void _245562383_check_global_var_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24556cc1d_Var>& _167946_decl) {
	if (_2455547e8_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_167946_decl)),_167946_decl.get()._field_ident,_167946_decl.get()._field_cpp_linked)) {
		_245553bc1_push_err(_self_.ptr(), _167946_decl.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_167946_decl.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
	if ((_167946_decl.get()._field_cpp_linked && _167946_decl.get()._field_constant)) {
		_245553bc1_push_err(_self_.ptr(), _167946_decl.get()._field_token,jule::Str("cpp linked variables cannot be constant", 39),jule::Slice<jule::Any>());
	};
	if ((((!(_167946_decl.get()._field_cpp_linked)) && (!(_167946_decl.get()._field_constant))) && (!(_167946_decl.get()._field_statically)))) {
		_245553bc1_push_err(_self_.ptr(), _167946_decl.get()._field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>());
	};
	_245554b17_check_directives(_self_, _167946_decl.get()._field_directives,jule::Any(_167946_decl));
	_24556210d_check_var_decl(_self_, _167946_decl,jule::Trait<_24560bac0_Lookup>(_self_, 3));
}



inline jule::Bool _2455625e7_check_global_decls(jule::Ptr<_24555100e_Sema> _self_) {
	jule::Bool _169840_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_22988aa5c:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> _169921_decl = *it;
			{
				_245562383_check_global_var_decl(_self_, _169921_decl);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_169840_ok = false;
					return _169840_ok;
				};
			}
			_iter_next_22988aa5c:;
			++it;
			goto _iter_begin_22988aa5c;
		}
		_iter_end_22988aa5c:;
	};
	_169840_ok = true;
	return _169840_ok;
}



inline jule::Bool _2455629c1_check_struct_trait_impl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244848912_Struct>& _171048_strct, jule::Ptr<_24547ec51_Trait>& _171069_trt) {
	jule::Bool _171084_ok = jule::Bool();
	{
		auto &expr = _171069_trt.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_22988c586:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _171121_tf = *it;
			{
				jule::Bool _171221_exist = false;;
				jule::Ptr<_244926d0e_Fn> _171321_sf = _244837d30_find_method(_171048_strct.ptr(), _171121_tf.get()._field_ident,_171121_tf.get()._field_statically);;
				jule::Ptr<_2449299b0_FnIns> _171417_tf_k = _24555a733_get_trait_check_fn_kind(_self_, _171121_tf);;
				if ((_171321_sf != nullptr)) {
					jule::Ptr<_2449299b0_FnIns> _171625_sf_k = _24555a733_get_trait_check_fn_kind(_self_, _171321_sf);;
					_171221_exist=(((_171417_tf_k.get()._field_decl.get()._field_public == _171625_sf_k.get()._field_decl.get()._field_public) && (_171417_tf_k.get()._field_decl.get()._field_ident == _171625_sf_k.get()._field_decl.get()._field_ident)) && _24492a86d_equals_trait(_171417_tf_k, _171625_sf_k));
				};
				if (_171221_exist) {
					jule::Ptr<_2448249dc_Directive> _172221_d = _2455da708_find_directive(_171321_sf.get()._field_directives,jule::Str("deprecated", 10));;
					if ((_172221_d != nullptr)) {
						_245553bc1_push_err(_self_.ptr(), _172221_d.get()._field_tag,jule::Str("trait implementations cannot have deprecated code", 49),jule::Slice<jule::Any>());
					};
					_171084_ok=false;
				} else {
					;
					jule::Str _172925_s = _24492b6c6_get_kind_str(_171417_tf_k.ptr(), true);;
					if (_171121_tf.get()._field_public) {
						(_172925_s).buffer.insert(0, (jule::Str("pub ", 4)));;
					};
					_245553bc1_push_err(_self_.ptr(), _171048_strct.get()._field_token,jule::Str("trait @ derived but not implemented define @", 44),jule::Slice<jule::Any>::make({jule::Any(_171069_trt.get()._field_ident),jule::Any(_172925_s)}));
					_171084_ok=false;
				};
			}
			_iter_next_22988c586:;
			++it;
			goto _iter_begin_22988c586;
		}
		_iter_end_22988c586:;
	};
	return _171084_ok;
}



inline jule::Bool _245562ce0_check_struct_impls(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244848912_Struct>& _174043_s) {
	jule::Bool _174057_ok = jule::Bool();
	_174057_ok=true;
	{
		auto &expr = _174043_s.get()._field_implements;
		auto it = expr.begin();
		_iter_begin_229894208:;
		if (it != expr.end()) {
			jule::Ptr<_24547ec51_Trait> _174221_trt = *it;
			{
				_174057_ok=(_2455629c1_check_struct_trait_impl(_self_, _174043_s,_174221_trt) && _174057_ok);
			}
			_iter_next_229894208:;
			++it;
			goto _iter_begin_229894208;
		}
		_iter_end_229894208:;
	};
	return _174057_ok;
}



inline jule::Bool _2455630ed_check_struct_fields(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244848912_Struct>& _174844_st) {
	jule::Bool _174859_ok = jule::Bool();
	_174859_ok=true;
	{
		auto &expr = _174844_st.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_229895649:;
		if (it != expr.end()) {
			jule::Ptr<_24483adcc_Field> _175021_f = *it;
			{
				_175021_f.get()._field_owner=_174844_st;
				{
					auto &expr = _174844_st.get()._field_fields;
					auto it = expr.begin();
					_iter_begin_22989623d:;
					if (it != expr.end()) {
						jule::Ptr<_24483adcc_Field> _175220_cf = *it;
						{
							if ((_175021_f == _175220_cf)) {
								goto _iter_end_22989623d;
							} else if ((_175021_f.get()._field_ident == _175220_cf.get()._field_ident)) {
								_245553bc1_push_err(_self_.ptr(), _175021_f.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_175021_f.get()._field_ident)}));
								_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								_174859_ok=false;
							};
						}
						_iter_next_22989623d:;
						++it;
						goto _iter_begin_22989623d;
					}
					_iter_end_22989623d:;
				};
			}
			_iter_next_229895649:;
			++it;
			goto _iter_begin_229895649;
		}
		_iter_end_229895649:;
	};
	return _174859_ok;
}



inline void _245563373_check_struct_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244848912_Struct>& _176542_s) {
	if (_2431e6cb7_is_ignore_ident(_176542_s.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _176542_s.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if (_2455547e8_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_176542_s)),_176542_s.get()._field_ident,_176542_s.get()._field_cpp_linked)) {
		_245553bc1_push_err(_self_.ptr(), _176542_s.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_176542_s.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
	_245554b17_check_directives(_self_, _176542_s.get()._field_directives,jule::Any(_176542_s));
	{
		
		if ((!(_24555e847_check_decl_generics(_self_.ptr(), _176542_s.get()._field_generics)))) {
			_case_begin_22989a176:;
		}
		else if ((!(_2455630ed_check_struct_fields(_self_, _176542_s)))) {
			_case_begin_22989a1dc:;
		}
		else if ((!(_245562ce0_check_struct_impls(_self_, _176542_s)))) {
			_case_begin_22989a253:;
		}
		_match_end_22989a033:;
	};
}



inline jule::Bool _2455635d7_check_struct_decls(jule::Ptr<_24555100e_Sema> _self_) {
	jule::Bool _178340_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_22989b540:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _178421_s = *it;
			{
				_245563373_check_struct_decl(_self_, _178421_s);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_178340_ok = false;
					return _178340_ok;
				};
			}
			_iter_next_22989b540:;
			++it;
			goto _iter_begin_22989b540;
		}
		_iter_end_22989b540:;
	};
	_178340_ok = true;
	return _178340_ok;
}



inline void _24556385c_check_fn_decl(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244926d0e_Fn>& _179638_f) {
	if (_2431e6cb7_is_ignore_ident(_179638_f.get()._field_ident)) {
		_245553bc1_push_err(_self_.ptr(), _179638_f.get()._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	};
	_245554b17_check_directives(_self_, _179638_f.get()._field_directives,jule::Any(_179638_f));
	_179638_f.get()._field_sema=_self_;
	_245560271_check_fn_decl_prototype(_self_, _179638_f);
	if (_2455547e8_is_duplicated_ident(_self_.ptr(), static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_179638_f)),_179638_f.get()._field_ident,_179638_f.get()._field_cpp_linked)) {
		if ((_179638_f.get()._field_ident == jule::Str("init", 4))) {
			jule::Ptr<_244926d0e_Fn> _180821_init = _245552807_find_fn(_self_.ptr(), jule::Str("init", 4),false);;
			if ((_180821_init != nullptr)) {
				return;;
			};
		};
		_245553bc1_push_err(_self_.ptr(), _179638_f.get()._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>::make({jule::Any(_179638_f.get()._field_ident)}));
		_245553ee0_push_suggestion(_self_.ptr(), jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	};
}



inline jule::Bool _245563ac1_check_fn_decls(jule::Ptr<_24555100e_Sema> _self_) {
	jule::Bool _181936_ok = jule::Bool();
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_2298a1765:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _182021_f = *it;
			{
				_24556385c_check_fn_decl(_self_, _182021_f);
				if ((_self_.get()._field_errors.len() > 0LL)) {
					_181936_ok = false;
					return _181936_ok;
				};
			}
			_iter_next_2298a1765:;
			++it;
			goto _iter_begin_2298a1765;
		}
		_iter_end_2298a1765:;
	};
	_181936_ok = true;
	return _181936_ok;
}



inline void _245563e89_push_cycle_error(_24555100e_Sema* _self_, jule::Ptr<_244848912_Struct>& _183132_st1, jule::Ptr<_244848912_Struct>& _183147_st2, jule::Str& _183166_message) {
	;
	jule::Str _183413_refers_to = _242dbb0c9_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>::make({jule::Any(_183132_st1.get()._field_ident),jule::Any(_183147_st2.get()._field_ident)}));;
	(_183166_message).buffer.insert(0, (((_241ec9e0e_repeat(jule::Str(" ", 1),4LL) + _183413_refers_to) + jule::Str("\n", 1))));;
}



inline jule::Bool _2455643da_check_cross_cycle(_24555100e_Sema* _self_, jule::Ptr<_244848912_Struct>& _183833_st1, jule::Ptr<_244848912_Struct>& _183848_st2, jule::Str& _183867_message) {
	{
		auto &expr = _183848_st2.get()._field_uses;
		auto it = expr.begin();
		_iter_begin_2298a4d0c:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> &_183916_u = *it;
			{
				if ((_183916_u == _183833_st1)) {
					_245563e89_push_cycle_error(&(*_self_), _183848_st2,_183916_u,_183867_message);
					return false;
				};
				if ((!(_2455643da_check_cross_cycle(&(*_self_), _183833_st1,_183916_u,_183867_message)))) {
					_245563e89_push_cycle_error(&(*_self_), _183848_st2,_183916_u,_183867_message);
					return false;
				};
			}
			_iter_next_2298a4d0c:;
			++it;
			goto _iter_begin_2298a4d0c;
		}
		_iter_end_2298a4d0c:;
	};
	return true;
}



inline jule::Bool _24556486e_check_struct_derive_illegal_cycles(_24555100e_Sema* _self_, jule::Str _185453_derive, jule::Ptr<_244848912_Struct>& _185467_st1, jule::Ptr<_2455e1027_TypeKind>& _185486_k) {
	jule::Bool _1854102_ok = jule::Bool();
	jule::Ptr<_244848912_Struct> _185517_st2 = _2456091d8_get_struct_from_kind(_185486_k);;
	if ((_185517_st2 == nullptr)) {
		_1854102_ok = true;
		return _1854102_ok;
	};
	if ((_185467_st1 == _185517_st2)) {
		_245553bc1_push_err(&(*_self_), _185467_st1.get()._field_token,jule::Str("illegal cycle for derive @, struct @ refers to itself", 53),jule::Slice<jule::Any>::make({jule::Any(_185453_derive),jule::Any(_185467_st1.get()._field_ident)}));
		_1854102_ok = false;
		return _1854102_ok;
	};
	jule::Str _186717_message = jule::Str();;
	if ((!(_2455643da_check_cross_cycle(&(*_self_), _185467_st1,_185517_st2,_186717_message)))) {
		jule::Str _187021_err_msg = _186717_message;;
		_186717_message=jule::Str();
		_245563e89_push_cycle_error(&(*_self_), _185467_st1,_185517_st2,_186717_message);
		_187021_err_msg=(_187021_err_msg + _186717_message);
		_245553bc1_push_err(&(*_self_), _185467_st1.get()._field_token,jule::Str("illegal cross cycle for derive @;\n@", 35),jule::Slice<jule::Any>::make({jule::Any(_185453_derive),jule::Any(_187021_err_msg)}));
		_1854102_ok = false;
		return _1854102_ok;
	};
	_1854102_ok = true;
	return _1854102_ok;
}



inline jule::Bool _245564b9e_check_struct_ins_derive_clone(_24555100e_Sema* _self_, jule::Ptr<_244874c5c_StructIns> _188152_st) {
	jule::Bool _188170_ok = jule::Bool();
	if ((!(_244839969_is_derives(_188152_st.get()._field_decl.ptr(), jule::Str("Clone", 5))))) {
		_188170_ok = true;
		return _188170_ok;
	};
	{
		auto &expr = _188152_st.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_2298ab550:;
		if (it != expr.end()) {
			jule::Ptr<_244851079_FieldIns> _188621_f = *it;
			{
				if ((_188621_f.get()._field_kind == nullptr)) {
					goto _iter_next_2298ab550;
				};
				if ((!(_2455e2b61_supports_cloning(_188621_f.get()._field_kind.ptr())))) {
					_245553bc1_push_err(&(*_self_), _188152_st.get()._field_decl.get()._field_token,jule::Str("type @ is not compatible to derive @", 36),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_188621_f.get()._field_kind.ptr())),jule::Any(jule::Str("Clone", 5))}));
					_188170_ok = false;
					return _188170_ok;
				};
				if ((!(_24556486e_check_struct_derive_illegal_cycles(&(*_self_), jule::Str("Clone", 5),_188152_st.get()._field_decl,_188621_f.get()._field_kind)))) {
					_188170_ok = false;
					return _188170_ok;
				};
			}
			_iter_next_2298ab550:;
			++it;
			goto _iter_begin_2298ab550;
		}
		_iter_end_2298ab550:;
	};
	_188170_ok = true;
	return _188170_ok;
}



inline void _245564d8b_check_package_decls(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2298abb49:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _190721_f = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _190721_f);
				if ((!(_24555e539_check_type_enum_decls(_self_)))) {
					return;;
				};
				if ((!(_24555d2e6_check_type_alias_decls(_self_)))) {
					return;;
				};
			}
			_iter_next_2298abb49:;
			++it;
			goto _iter_begin_2298abb49;
		}
		_iter_end_2298abb49:;
	};
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2298ae1ce:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _191721_f = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _191721_f);
				if ((!(_245560ccc_check_trait_decls(_self_)))) {
					return;;
				};
			}
			_iter_next_2298ae1ce:;
			++it;
			goto _iter_begin_2298ae1ce;
		}
		_iter_end_2298ae1ce:;
	};
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2298b0301:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _192421_f = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _192421_f);
				if ((!(_2455625e7_check_global_decls(_self_)))) {
					return;;
				};
			}
			_iter_next_2298b0301:;
			++it;
			goto _iter_begin_2298b0301;
		}
		_iter_end_2298b0301:;
	};
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_2298b081d:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _193121_f = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _193121_f);
				{
					
					if ((!(_245563ac1_check_fn_decls(_self_)))) {
						_case_begin_2298b2a51:;
					}
					else if ((!(_2455635d7_check_struct_decls(_self_)))) {
						_case_begin_2298b2ab7:;
					}
					else {
						_case_begin_2298b29da:;
						{
							goto _iter_next_2298b081d;
						}
					}
					_match_end_2298b2974:;
				};
				return;;
			}
			_iter_next_2298b081d:;
			++it;
			goto _iter_begin_2298b081d;
		}
		_iter_end_2298b081d:;
	};
}



inline void _2455651cc_check_data_for_type_inference(_24555100e_Sema* _self_, jule::Ptr<_2455b5051_Data>& _194349_d, jule::Ptr<_2431e4523_Token>& _194360_err_token) {
	{
		
		if (_2455b543b_is_nil(_194349_d.ptr())) {
			_case_begin_2298b3a74:;
			{
				_245553bc1_push_err(&(*_self_), _194360_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>());
			}
		}
		else if (_2455b56a0_is_void(_194349_d.ptr())) {
			_case_begin_2298b3aeb:;
			{
				_245553bc1_push_err(&(*_self_), _194360_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>());
			}
		}
		else if (_194349_d.get()._field_kind.get()._field_variadic) {
			_case_begin_2298b3b73:;
			{
				_245553bc1_push_err(&(*_self_), _194360_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>());
			}
		}
		_match_end_2298b3942:;
	};
}



inline void _245565463_check_var(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24556cc1d_Var>& _195434_v) {
	if (_195434_v.get()._field_cpp_linked) {
		return;;
	};
	if (_24556d339_is_type_inferred(_195434_v.ptr())) {
		_195434_v.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_195434_v.get()._field_value.get()._field_data.get()._field_kind});
		_2455651cc_check_data_for_type_inference(_self_.ptr(), _195434_v.get()._field_value.get()._field_data,_195434_v.get()._field_value.get()._field_expr.get()._field_token);
		_24555c5e2_check_validity_for_init_expr(_self_, _195434_v.get()._field_mutable,_195434_v.get()._field_reference,_195434_v.get()._field_kind.get()._field_kind,_195434_v.get()._field_value.get()._field_data,_195434_v.get()._field_value.get()._field_expr.get()._field_token);
	} else {
		jule::Ptr<_2455ebd8a_Arr> _197121_arr = _2455e3d4e_arr(_195434_v.get()._field_kind.get()._field_kind.ptr());;
		if ((_197121_arr != nullptr)) {
			if (_197121_arr.get()._field_auto) {
				jule::Ptr<_2455ebd8a_Arr> _197425_data_arr = _2455e3d4e_arr(_195434_v.get()._field_value.get()._field_data.get()._field_kind.ptr());;
				if ((_197425_data_arr != nullptr)) {
					_197121_arr.get()._field_n=_197425_data_arr.get()._field_n;
				};
			};
		};
		if (_2455597cb_check_assign_type(_self_, _195434_v.get()._field_reference,_195434_v.get()._field_kind.get()._field_kind,_195434_v.get()._field_value.get()._field_data,_195434_v.get()._field_value.get()._field_expr.get()._field_token)) {
			_24555c5e2_check_validity_for_init_expr(_self_, _195434_v.get()._field_mutable,_195434_v.get()._field_reference,_195434_v.get()._field_kind.get()._field_kind,_195434_v.get()._field_value.get()._field_data,_195434_v.get()._field_value.get()._field_expr.get()._field_token);
		};
	};
	if ((_195434_v.get()._field_reference && (!(_245608517_is_valid_for_ref(_195434_v.get()._field_kind.get()._field_kind))))) {
		_245553bc1_push_err(_self_.ptr(), _195434_v.get()._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_195434_v.get()._field_kind.get()._field_kind.ptr()))}));
	};
	if (_195434_v.get()._field_constant) {
		if ((!(_2455b5914_is_const(_195434_v.get()._field_value.get()._field_data.ptr())))) {
			_245553bc1_push_err(_self_.ptr(), _195434_v.get()._field_value.get()._field_expr.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		};
	} else {
		_195434_v.get()._field_value.get()._field_data.get()._field_constant=nullptr;
	};
	if ((_2455e4cc8_tup(_195434_v.get()._field_kind.get()._field_kind.ptr()) != nullptr)) {
		_195434_v.get()._field_kind.get()._field_kind=nullptr;
	};
}



inline void _245565782_check_type_var(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_24556cc1d_Var>& _200939_decl, jule::Trait<_24560bac0_Lookup> _200955_l) {
	if ((_200939_decl.get()._field_cpp_linked || (!(_24556d0c5_is_initialized(_200939_decl.ptr()))))) {
		return;;
	};
	jule::Ptr<_2455b6abe_Eval> _201417_eval = nullptr;;
	if ((_200939_decl.get()._field_kind != nullptr)) {
		_201417_eval=_245558b1b_evalpd(_self_, _200955_l,_200939_decl.get()._field_kind.get()._field_kind,_200939_decl);
	} else {
		_201417_eval=_245558b1b_evalpd(_self_, _200955_l,nullptr,_200939_decl);
	};
	_201417_eval.get()._field_immutable=(!(_200939_decl.get()._field_mutable));
	_200939_decl.get()._field_value.get()._field_data=_2455d26de_eval_expr(_201417_eval, _200939_decl.get()._field_value.get()._field_expr);
	if ((_200939_decl.get()._field_value.get()._field_data == nullptr)) {
		return;;
	};
	_245565463_check_var(_self_, _200939_decl);
}



inline void _24556595d_check_global_types(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_2298c2b4e:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> _203121_decl = *it;
			{
				if (((_24556d0c5_is_initialized(_203121_decl.ptr()) && (_203121_decl.get()._field_value.get()._field_data == nullptr)) || (_24556d339_is_type_inferred(_203121_decl.ptr()) && (_203121_decl.get()._field_kind.get()._field_kind == nullptr)))) {
					_245565782_check_type_var(_self_, _203121_decl,jule::Trait<_24560bac0_Lookup>(_self_, 3));
				};
			}
			_iter_next_2298c2b4e:;
			++it;
			goto _iter_begin_2298c2b4e;
		}
		_iter_end_2298c2b4e:;
	};
}



inline jule::Ptr<_2449299b0_FnIns> _245565d15_ready_to_check_fn(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns>& _204242_s, jule::Ptr<_244926d0e_Fn>& _204262_f) {
	jule::Ptr<_2449299b0_FnIns> _204317_ins = _24492845e_instance(_204262_f);;
	if ((_204262_f.get()._field_instances.len() != 0LL)) {
		return _204317_ins;
	};
	_204317_ins.get()._field_owner=_204242_s;
	_244928739_append_instance(_204262_f.ptr(), _204317_ins);
	_204317_ins.get()._field_reloaded=true;
	if (_24555ba64_reload_fn_ins_types(_self_, _204317_ins)) {
		return _204317_ins;
	};
	return nullptr;
}



inline void _245566134_check_type_method(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns>& _205642_s, jule::Ptr<_244926d0e_Fn>& _205662_f) {
	if ((_205662_f.get()._field_generics.len() > 0LL)) {
		return;;
	};
	jule::Ptr<_2449299b0_FnIns> _206117_ins = _205662_f.get()._field_instances[0LL];;
	if ((_206117_ins.get()._field_scope.get()._field_stmts.len() > 0LL)) {
		return;;
	};
	_24556880c_check_fn_ins(_self_, _206117_ins);
}



inline jule::Ptr<_2449299b0_FnIns> _245566585_check_struct_ins_op(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns>& _206944_s, jule::Ptr<_244926d0e_Fn>& _206964_f, jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)> _206972_p) {
	if ((((_206964_f == nullptr) || (_206964_f.get()._field_generics.len() > 0LL)) || (!(_206972_p(_206964_f))))) {
		return nullptr;
	};
	return _206964_f.get()._field_instances[0LL];
}



inline jule::Bool _24556693c_check_struct_env(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns>& _207941_s, jule::Ptr<_2431e4523_Token> _207960_error_token) {
	jule::Bool _207983_ok = jule::Bool();
	_2455ee486_TypeChecker _208017_tc = _2455ee486_TypeChecker{._field_s=_207941_s.get()._field_decl.get()._field_sema, ._field_lookup=jule::Trait<_24560bac0_Lookup>(_207941_s.get()._field_decl.get()._field_sema, 3), ._field_referencer=jule::new_ptr<_2455ed73d_Referencer>(_2455ed73d_Referencer{._field_ident=_207941_s.get()._field_decl.get()._field_ident, ._field_owner=jule::Any(_207941_s.get()._field_decl), }), ._field_refers=_207941_s.get()._field_refers, };;
	if ((_207941_s.get()._field_generics.len() > 0LL)) {
		_208017_tc._field_use_generics=jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>::alloc(0LL,_207941_s.get()._field_generics.len());
		{
			auto &expr = _207941_s.get()._field_generics;
			auto it = expr.begin();
			_iter_begin_2298cbc46:;
			if (it != expr.end()) {
				jule::I32 _209218_i = it - expr.begin();
				jule::Ptr<_2455de7ea_InsGeneric> _209225_g = *it;
				{
					_208017_tc._field_use_generics = jule::alloc_for_append(_208017_tc._field_use_generics,1);_208017_tc._field_use_generics.__push(jule::new_ptr<_2455e0334_TypeAlias>(_2455e0334_TypeAlias{._field_ident=_207941_s.get()._field_decl.get()._field_generics[_209218_i].get()._field_ident, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_209225_g.get()._field_kind}), }));;
				}
				_iter_next_2298cbc46:;
				++it;
				_209218_i++;
				goto _iter_begin_2298cbc46;
			}
			_iter_end_2298cbc46:;
		};
	};
	jule::Ptr<_2455b02e3_SymbolTable> _210017_old_file = _self_.get()._field_file;;
	__JULE_DEFER({
		_245553808_set_current_file(_self_.ptr(), _210017_old_file);
	});;
	if ((_self_.get()._field_file.get()._field_file != _207941_s.get()._field_decl.get()._field_token.get()._field_file)) {
		jule::Ptr<_2455b02e3_SymbolTable> _210421_file = _245550618_find_file(_self_.get()._field_files,_207941_s.get()._field_decl.get()._field_token.get()._field_file);;
		if ((_210421_file != nullptr)) {
			_245553808_set_current_file(_self_.ptr(), _210421_file);
		};
	};
	if ((_207941_s.get()._field_generics.len() > 0LL)) {
		jule::Ptr<_24549b652_ConstraintChecker> _211121_cc = _245557763_constraint_checker(_self_);;
		_211121_cc.get()._field_et=_207960_error_token;
		_211121_cc.get()._field_si=_207941_s;
		_211121_cc.get()._field_generics_a=_208017_tc._field_use_generics;
		_211121_cc.get()._field_uniq=true;
		if ((!(_2454e23bd_check(_211121_cc)))) {
			return _207983_ok;
		};
	};
	jule::Ptr<_2455b6abe_Eval> _212117_eval = _2455592d1_eval(_self_, jule::Trait<_24560bac0_Lookup>(_self_, 3));;
	_207983_ok=true;
	{
		auto &expr = _207941_s.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_2298d2c6e:;
		if (it != expr.end()) {
			jule::Ptr<_244851079_FieldIns> _212321_f = *it;
			{
				jule::Ptr<_2455e1027_TypeKind> _212421_kind = _245606702_check_decl(&_208017_tc, _212321_f.get()._field_decl.get()._field_kind.get()._field_decl);;
				_207983_ok=((_212421_kind != nullptr) && _207983_ok);
				if ((_212421_kind == nullptr)) {
					if (((_self_ != _207941_s.get()._field_decl.get()._field_sema) && (_207941_s.get()._field_decl.get()._field_sema.get()._field_errors.len() > 0LL))) {
						_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_207941_s.get()._field_decl.get()._field_sema.get()._field_errors);
						_207941_s.get()._field_decl.get()._field_sema.get()._field_errors=nullptr;
					};
					goto _iter_next_2298d2c6e;
				};
				_212321_f.get()._field_kind=_212421_kind;
				_207941_s.get()._field_mutable=(_207941_s.get()._field_mutable || ((!(_212321_f.get()._field_decl.get()._field_mutable)) && _2455e2424_mutable(_212321_f.get()._field_kind.ptr())));
				_245564b9e_check_struct_ins_derive_clone(_self_.ptr(), _207941_s);
				if ((_212321_f.get()._field_decl.get()._field_default == nullptr)) {
					goto _iter_next_2298d2c6e;
				};
				_212117_eval.get()._field_prefix=_212321_f.get()._field_kind;
				_212117_eval.get()._field_field=_212321_f;
				_212321_f.get()._field_default=_2455d26de_eval_expr(_212117_eval, _212321_f.get()._field_decl.get()._field_default);
				if ((_212321_f.get()._field_default == nullptr)) {
					goto _iter_next_2298d2c6e;
				};
				;
				_2455597cb_check_assign_type(_self_, false,_212321_f.get()._field_kind,_212321_f.get()._field_default,_212321_f.get()._field_decl.get()._field_default.get()._field_token);
			}
			_iter_next_2298d2c6e:;
			++it;
			goto _iter_begin_2298d2c6e;
		}
		_iter_end_2298d2c6e:;
	};
	return _207983_ok;
}



inline jule::Bool _245566ce4_precheck_struct_ins(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns>& _215744_s, jule::Ptr<_2431e4523_Token> _215763_error_token) {
	jule::Bool _215786_ok = jule::Bool();
	_215786_ok=_24556693c_check_struct_env(_self_, _215744_s,_215763_error_token);
	if ((!(_215786_ok))) {
		_215786_ok = false;
		return _215786_ok;
	};
	{
		auto &expr = _215744_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_2298d96e3:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _216221_f = *it;
			{
				if ((_216221_f.get()._field_generics.len() == 0LL)) {
					if ((_245565d15_ready_to_check_fn(_self_, _215744_s,_216221_f) == nullptr)) {
						_215786_ok = false;
						return _215786_ok;
					};
				};
			}
			_iter_next_2298d96e3:;
			++it;
			goto _iter_begin_2298d96e3;
		}
		_iter_end_2298d96e3:;
	};
	_215786_ok = true;
	return _215786_ok;
}



inline void _245567069_check_struct_ins(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns>& _217241_s) {
	{
		auto &expr = _217241_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_2298db294:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _217321_f = *it;
			{
				_245566134_check_type_method(_self_, _217241_s,_217321_f);
			}
			_iter_next_2298db294:;
			++it;
			goto _iter_begin_2298db294;
		}
		_iter_end_2298db294:;
	};
}



inline void _2455672de_check_type_struct(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244848912_Struct>& _217842_s) {
	if (_217842_s.get()._field_cpp_linked) {
		return;;
	};
	if ((_217842_s.get()._field_generics.len() > 0LL)) {
		return;;
	};
	{
		auto &expr = _217842_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_2298dc7a1:;
		if (it != expr.end()) {
			jule::Ptr<_244874c5c_StructIns> _219121_ins = *it;
			{
				_245567069_check_struct_ins(_self_, _219121_ins);
			}
			_iter_next_2298dc7a1:;
			++it;
			goto _iter_begin_2298dc7a1;
		}
		_iter_end_2298dc7a1:;
	};
}



inline void _2455674ba_check_struct_types(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_2298dd3b7:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _219721_s = *it;
			{
				_2455672de_check_type_struct(_self_, _219721_s);
			}
			_iter_next_2298dd3b7:;
			++it;
			goto _iter_begin_2298dd3b7;
		}
		_iter_end_2298dd3b7:;
	};
}



inline void _245567762_check_struct_ins_operators(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244874c5c_StructIns> _220250_s) {
	{
		auto &expr = _220250_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_2298de71a:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _220321_m = *it;
			{
				{
					auto &_match_expr{ _220321_m.get()._field_ident };
					
					if (_match_expr == jule::Str("eq", 2)) {
						_case_begin_2298e0496:;
						{
							_220250_s.get()._field_operators._field_eq=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _220668_f) mutable -> jule::Bool {
								return static__24556e747_eq(_220668_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("gt", 2)) {
						_case_begin_2298e050c:;
						{
							_220250_s.get()._field_operators._field_gt=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _220868_f) mutable -> jule::Bool {
								return static__24556e9de_gt(_220868_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("gt_eq", 5)) {
						_case_begin_2298e0584:;
						{
							_220250_s.get()._field_operators._field_gt_eq=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _221071_f) mutable -> jule::Bool {
								return static__24556ec86_gt_eq(_221071_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("lt", 2)) {
						_case_begin_2298e060b:;
						{
							_220250_s.get()._field_operators._field_lt=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _221268_f) mutable -> jule::Bool {
								return static__24557002d_lt(_221268_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("lt_eq", 5)) {
						_case_begin_2298e0683:;
						{
							_220250_s.get()._field_operators._field_lt_eq=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _221471_f) mutable -> jule::Bool {
								return static__2455702c5_lt_eq(_221471_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shl", 3)) {
						_case_begin_2298e070a:;
						{
							_220250_s.get()._field_operators._field_shl=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _221669_f) mutable -> jule::Bool {
								return static__2455708ad_shl(_221669_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shr", 3)) {
						_case_begin_2298e0782:;
						{
							_220250_s.get()._field_operators._field_shr=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _221869_f) mutable -> jule::Bool {
								return static__245570b55_shr(_221869_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("add", 3)) {
						_case_begin_2298e0809:;
						{
							_220250_s.get()._field_operators._field_add=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _222069_f) mutable -> jule::Bool {
								return static__245570dec_add(_222069_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("sub", 3)) {
						_case_begin_2298e0881:;
						{
							_220250_s.get()._field_operators._field_sub=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _222269_f) mutable -> jule::Bool {
								return static__245571194_sub(_222269_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("div", 3)) {
						_case_begin_2298e0908:;
						{
							_220250_s.get()._field_operators._field_div=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _222469_f) mutable -> jule::Bool {
								return static__24557143b_div(_222469_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mul", 3)) {
						_case_begin_2298e0980:;
						{
							_220250_s.get()._field_operators._field_mul=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _222669_f) mutable -> jule::Bool {
								return static__2455716d3_mul(_222669_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mod", 3)) {
						_case_begin_2298e0a07:;
						{
							_220250_s.get()._field_operators._field_mod=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _222869_f) mutable -> jule::Bool {
								return static__24557197a_mod(_222869_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_and", 7)) {
						_case_begin_2298e0a7e:;
						{
							_220250_s.get()._field_operators._field_bit_and=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _223073_f) mutable -> jule::Bool {
								return static__245571c22_bit_and(_223073_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_or", 6)) {
						_case_begin_2298e0b06:;
						{
							_220250_s.get()._field_operators._field_bit_or=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _223272_f) mutable -> jule::Bool {
								return static__245571eb9_bit_or(_223272_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_xor", 7)) {
						_case_begin_2298e0b7d:;
						{
							_220250_s.get()._field_operators._field_bit_xor=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _223473_f) mutable -> jule::Bool {
								return static__245572261_bit_xor(_223473_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("neg", 3)) {
						_case_begin_2298e0c05:;
						{
							_220250_s.get()._field_operators._field_neg=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _223669_f) mutable -> jule::Bool {
								return static__245572849_neg(_223669_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("pos", 3)) {
						_case_begin_2298e0c7c:;
						{
							_220250_s.get()._field_operators._field_pos=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _223869_f) mutable -> jule::Bool {
								return static__245572ae1_pos(_223869_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_not", 7)) {
						_case_begin_2298e0d04:;
						{
							_220250_s.get()._field_operators._field_bit_not=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _224073_f) mutable -> jule::Bool {
								return static__245572d88_bit_not(_224073_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("add_assign", 10)) {
						_case_begin_2298e0d7b:;
						{
							_220250_s.get()._field_operators._field_add_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _224276_f) mutable -> jule::Bool {
								return static__245573471_add_assign(_224276_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("sub_assign", 10)) {
						_case_begin_2298e0e03:;
						{
							_220250_s.get()._field_operators._field_sub_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _224476_f) mutable -> jule::Bool {
								return static__245573718_sub_assign(_224476_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("div_assign", 10)) {
						_case_begin_2298e0e7a:;
						{
							_220250_s.get()._field_operators._field_div_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _224676_f) mutable -> jule::Bool {
								return static__2455739b0_div_assign(_224676_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mul_assign", 10)) {
						_case_begin_2298e1002:;
						{
							_220250_s.get()._field_operators._field_mul_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _224876_f) mutable -> jule::Bool {
								return static__245573c57_mul_assign(_224876_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("mod_assign", 10)) {
						_case_begin_2298e1079:;
						{
							_220250_s.get()._field_operators._field_mod_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _225076_f) mutable -> jule::Bool {
								return static__245573eee_mod_assign(_225076_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shl_assign", 10)) {
						_case_begin_2298e1101:;
						{
							_220250_s.get()._field_operators._field_shl_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _225276_f) mutable -> jule::Bool {
								return static__245574296_shl_assign(_225276_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("shr_assign", 10)) {
						_case_begin_2298e1178:;
						{
							_220250_s.get()._field_operators._field_shr_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _225476_f) mutable -> jule::Bool {
								return static__24557453d_shr_assign(_225476_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_or_assign", 13)) {
						_case_begin_2298e1200:;
						{
							_220250_s.get()._field_operators._field_bit_or_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _225679_f) mutable -> jule::Bool {
								return static__2455747d5_bit_or_assign(_225679_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_and_assign", 14)) {
						_case_begin_2298e1277:;
						{
							_220250_s.get()._field_operators._field_bit_and_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _225880_f) mutable -> jule::Bool {
								return static__245574a7c_bit_and_assign(_225880_f);
							}));
						}
					}
					else if (_match_expr == jule::Str("bit_xor_assign", 14)) {
						_case_begin_2298e12ee:;
						{
							_220250_s.get()._field_operators._field_bit_xor_assign=_245566585_check_struct_ins_op(_self_, _220250_s,_220321_m,jule::Fn<jule::Bool(jule::Ptr<_244926d0e_Fn>)>([=](jule::Ptr<_244926d0e_Fn> _226080_f) mutable -> jule::Bool {
								return static__245574d24_bit_xor_assign(_226080_f);
							}));
						}
					}
					_match_end_2298e0078:;
				};
			}
			_iter_next_2298de71a:;
			++it;
			goto _iter_begin_2298de71a;
		}
		_iter_end_2298de71a:;
	};
}



inline void _2455679e8_precheck_struct_type(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244848912_Struct>& _226545_s) {
	if (_226545_s.get()._field_cpp_linked) {
		return;;
	};
	if ((_226545_s.get()._field_generics.len() > 0LL)) {
		return;;
	};
	if ((_226545_s.get()._field_instances.len() == 0LL)) {
		jule::Ptr<_244874c5c_StructIns> _227621_ins = _244830d17_instance(_226545_s);;
		_227621_ins.get()._field_checked=true;
		_244835080_append_instance(_226545_s.ptr(), _227621_ins);
		_245566ce4_precheck_struct_ins(_self_, _227621_ins,nullptr);
	};
	_245567762_check_struct_ins_operators(_self_, _226545_s.get()._field_instances[0LL]);
}



inline void _245567bc4_precheck_struct_types(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_22991b36d:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _228621_s = *it;
			{
				_2455679e8_precheck_struct_type(_self_, _228621_s);
			}
			_iter_next_22991b36d:;
			++it;
			goto _iter_begin_22991b36d;
		}
		_iter_end_22991b36d:;
	};
}



inline void _245567e49_check_rets(_24555100e_Sema* _self_, jule::Ptr<_2449299b0_FnIns>& _229134_f) {
	if (_244927271_is_void(_229134_f.get()._field_decl.ptr())) {
		return;;
	};
	_24556a0e4_MissingRetChecker _229513_mrc = static__24556a4ac_new();;
	jule::Bool _229613_ok = _24556b4be_check(&_229513_mrc, _229134_f.get()._field_scope);;
	if ((!(_229613_ok))) {
		_245553bc1_push_err(&(*_self_), _229134_f.get()._field_decl.get()._field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>());
	};
}



inline void _245568268_check_fn_ins_sc(_24555100e_Sema* _self_, jule::Ptr<_2449299b0_FnIns>& _230239_f, jule::Ptr<_245531066_ScopeChecker>& _230255_sc) {
	_24554ec33_append_ret_vars(_230255_sc.get()._field_table.get()._field_vars,_230239_f);
	_24554eedb_append_param_vars(_230255_sc.get()._field_table.get()._field_vars,_230239_f);
	_2455502b6_append_generic_type_aliases(_230255_sc.get()._field_table.get()._field_type_aliases,_230239_f);
	_245541395_check(_230255_sc, _230239_f.get()._field_decl.get()._field_scope,_230239_f.get()._field_scope);
	if ((!(_245533ba1_stopped(_230255_sc.ptr())))) {
		_245567e49_check_rets(&(*_self_), _230239_f);
	};
}



inline void _245568587_check_fn_ins_caller(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2449299b0_FnIns>& _231544_f, jule::Ptr<_2431e4523_Token> _231559_caller) {
	if (_231544_f.get()._field_decl.get()._field_cpp_linked) {
		return;;
	};
	jule::Ptr<_2455b02e3_SymbolTable> _232017_old = _231544_f.get()._field_decl.get()._field_sema.get()._field_file;;
	__JULE_DEFER({
		_245553808_set_current_file(_231544_f.get()._field_decl.get()._field_sema.ptr(), _232017_old);
	});;
	jule::Ptr<_2455b02e3_SymbolTable> _232217_file = _245550618_find_file(_231544_f.get()._field_decl.get()._field_sema.get()._field_files,_231544_f.get()._field_decl.get()._field_token.get()._field_file);;
	if ((_232217_file != nullptr)) {
		_245553808_set_current_file(_231544_f.get()._field_decl.get()._field_sema.ptr(), _232217_file);
	};
	jule::Ptr<_245531066_ScopeChecker> _232717_sc = _2455043be_new_scope_checker(_231544_f.get()._field_decl.get()._field_sema,_231544_f);;
	_232717_sc.get()._field_called_from=_231559_caller;
	_245568268_check_fn_ins_sc(_self_.ptr(), _231544_f,_232717_sc);
	if ((_231544_f.get()._field_decl.get()._field_sema != _self_)) {
		_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_231544_f.get()._field_decl.get()._field_sema.get()._field_errors);
		_231544_f.get()._field_decl.get()._field_sema.get()._field_errors=nullptr;
	};
}



inline void _24556880c_check_fn_ins(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_2449299b0_FnIns>& _233737_f) {
	_245568587_check_fn_ins_caller(_self_, _233737_f,nullptr);
}



inline void _245568a82_check_type_fn(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244926d0e_Fn>& _234138_f) {
	if (_234138_f.get()._field_cpp_linked) {
		return;;
	};
	if ((_234138_f.get()._field_generics.len() > 0LL)) {
		return;;
	};
	{
		auto &expr = _234138_f.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_229926994:;
		if (it != expr.end()) {
			jule::Ptr<_2449299b0_FnIns> _235121_ins = *it;
			{
				_24556880c_check_fn_ins(_self_, _235121_ins);
			}
			_iter_next_229926994:;
			++it;
			goto _iter_begin_229926994;
		}
		_iter_end_229926994:;
	};
}



inline void _245568d07_check_test_fn(_24555100e_Sema* _self_, jule::Ptr<_2449299b0_FnIns>& _235637_f) {
	if (_235637_f.get()._field_decl.get()._field_public) {
		_245553bc1_push_err(&(*_self_), _235637_f.get()._field_decl.get()._field_token,jule::Str("test function cannot be public", 30),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion(&(*_self_), jule::Str("remove \"pub\" modifier", 21),jule::Slice<jule::Any>());
		return;;
	};
	if (((_235637_f.get()._field_params.len() != 1LL) || (_235637_f.get()._field_result != nullptr))) {
		_245553bc1_push_err(&(*_self_), _235637_f.get()._field_decl.get()._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion(&(*_self_), jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_2455e9283_Sptr> _236917_sptr = _2455e339d_sptr(_235637_f.get()._field_params[0LL].get()._field_kind.ptr());;
	if ((_236917_sptr == nullptr)) {
		_245553bc1_push_err(&(*_self_), _235637_f.get()._field_decl.get()._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion(&(*_self_), jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_244874c5c_StructIns> _237613_s = _2455e458b_strct(_236917_sptr.get()._field_elem.ptr());;
	if (((_237613_s == nullptr) || (!(_24554d3e6_is_std_package(_237613_s.get()._field_decl.get()._field_token.get()._field_file.get()._field_path,jule::Str("testing", 7)))))) {
		_245553bc1_push_err(&(*_self_), _235637_f.get()._field_decl.get()._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		_245553ee0_push_suggestion(&(*_self_), jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;;
	};
}



inline void _24556907c_precheck_type_fn(jule::Ptr<_24555100e_Sema> _self_, jule::Ptr<_244926d0e_Fn>& _238441_f) {
	if (_238441_f.get()._field_cpp_linked) {
		return;;
	};
	if ((_238441_f.get()._field_generics.len() > 0LL)) {
		return;;
	};
	if ((_238441_f.get()._field_instances.len() == 0LL)) {
		jule::Ptr<_2449299b0_FnIns> _239521_ins = _2449281ea_instance_force(_238441_f);;
		_238441_f.get()._field_instances = jule::alloc_for_append(_238441_f.get()._field_instances,1);_238441_f.get()._field_instances.__push(_239521_ins);;
		_24555ba64_reload_fn_ins_types(_self_, _239521_ins);
		_239521_ins.get()._field_reloaded=true;
		if (_245607ba9_has_directive(_238441_f.get()._field_directives,jule::Str("test", 4))) {
			_245568d07_check_test_fn(_self_.ptr(), _239521_ins);
		};
	};
}



inline void _245569258_precheck_fn_types(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_traits;
		auto it = expr.begin();
		_iter_begin_229931570:;
		if (it != expr.end()) {
			jule::Ptr<_24547ec51_Trait> _240821_decl = *it;
			{
				{
					auto &expr = _240821_decl.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_229931e33:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _240925_m = *it;
						{
							_24556907c_precheck_type_fn(_self_, _240925_m);
						}
						_iter_next_229931e33:;
						++it;
						goto _iter_begin_229931e33;
					}
					_iter_end_229931e33:;
				};
			}
			_iter_next_229931570:;
			++it;
			goto _iter_begin_229931570;
		}
		_iter_end_229931570:;
	};
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_229931b47:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _241321_decl = *it;
			{
				_24556907c_precheck_type_fn(_self_, _241321_decl);
			}
			_iter_next_229931b47:;
			++it;
			goto _iter_begin_229931b47;
		}
		_iter_end_229931b47:;
	};
}



inline void _245569434_check_fn_types(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_2299332ec:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _242021_decl = *it;
			{
				_245568a82_check_type_fn(_self_, _242021_decl);
			}
			_iter_next_2299332ec:;
			++it;
			goto _iter_begin_2299332ec;
		}
		_iter_end_2299332ec:;
	};
}



inline void _245569610_check_package_types(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_229933b16:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _242821_f = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _242821_f);
				_24556595d_check_global_types(_self_);
				_245569258_precheck_fn_types(_self_);
				_245567bc4_precheck_struct_types(_self_);
			}
			_iter_next_229933b16:;
			++it;
			goto _iter_begin_229933b16;
		}
		_iter_end_229933b16:;
	};
	if ((_self_.get()._field_errors.len() > 0LL)) {
		return;;
	};
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_229935981:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _243921_f = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _243921_f);
				_245569434_check_fn_types(_self_);
				_2455674ba_check_struct_types(_self_);
			}
			_iter_next_229935981:;
			++it;
			goto _iter_begin_229935981;
		}
		_iter_end_229935981:;
	};
}



inline void _2455697db_set_file_sema_fields(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_file.get()._field_funcs;
		auto it = expr.begin();
		_iter_begin_229936069:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _244721_f = *it;
			{
				_244721_f.get()._field_sema=_self_;
			}
			_iter_next_229936069:;
			++it;
			goto _iter_begin_229936069;
		}
		_iter_end_229936069:;
	};
	{
		auto &expr = _self_.get()._field_file.get()._field_structs;
		auto it = expr.begin();
		_iter_begin_22993717a:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _245121_st = *it;
			{
				_245121_st.get()._field_sema=_self_;
			}
			_iter_next_22993717a:;
			++it;
			goto _iter_begin_22993717a;
		}
		_iter_end_22993717a:;
	};
}



inline void _2455699b7_set_sema_fields(jule::Ptr<_24555100e_Sema> _self_) {
	{
		auto &expr = _self_.get()._field_files;
		auto it = expr.begin();
		_iter_begin_229937b81:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _245721_file = *it;
			{
				_245553808_set_current_file(_self_.ptr(), _245721_file);
				_2455697db_set_file_sema_fields(_self_);
			}
			_iter_next_229937b81:;
			++it;
			goto _iter_begin_229937b81;
		}
		_iter_end_229937b81:;
	};
}



inline void _245569c3c_check(jule::Ptr<_24555100e_Sema> _self_, jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _246330_files) {
	_self_.get()._field_files=_246330_files;
	_245556476_check_imports(_self_.ptr());
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;;
	};
	_2455699b7_set_sema_fields(_self_);
	_245556a09_check_enums(_self_);
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;;
	};
	_24555682d_impl_impls(_self_);
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;;
	};
	_245564d8b_check_package_decls(_self_);
	if ((_self_.get()._field_errors.len() != 0LL)) {
		return;;
	};
	_245569610_check_package_types(_self_);
}







std::ostream &operator<<(std::ostream &_Stream, _24555100e_Sema _Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "flags:" << _Src._field_flags;
	_Stream << "}";
	return _Stream;
}



inline _24556a0e4_MissingRetChecker static__24556a4ac_new(void) {
	return _24556a0e4_MissingRetChecker{._field_breaked=jule::Slice<jule::Uintptr>::alloc(16LL), };
}



inline jule::Bool _24556a787_check_conditional(_24556a0e4_MissingRetChecker* _self_, jule::Ptr<_245529e61_Conditional> _250636_c) {
	{
		auto &expr = _250636_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_22993c0d6:;
		if (it != expr.end()) {
			jule::Ptr<_245529779_If> _250721_elif = *it;
			{
				if ((_250721_elif == nullptr)) {
					return false;
				};
				if ((!(_24556b1b1_check_scope(&(*_self_), _250721_elif.get()._field_scope)))) {
					return false;
				};
			}
			_iter_next_22993c0d6:;
			++it;
			goto _iter_begin_22993c0d6;
		}
		_iter_end_22993c0d6:;
	};
	return ((_250636_c.get()._field_default != nullptr) && _24556b1b1_check_scope(&(*_self_), _250636_c.get()._field_default.get()._field_scope));
}



inline jule::Bool _24556aa95_check_match(_24556a0e4_MissingRetChecker* _self_, jule::Ptr<_24552d151_Match> _251830_m) {
	{
		auto &expr = _251830_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_22993e539:;
		if (it != expr.end()) {
			jule::Ptr<_24552db9b_Case> _251921_c = *it;
			{
				if ((_251921_c == nullptr)) {
					return false;
				};
				jule::I32 _252317_n = (*_self_)._field_breaked.len();;
				jule::Bool _252417_ok = _24556b1b1_check_scope(&(*_self_), _251921_c.get()._field_scope);;
				{
					
					if ((_252317_n != (*_self_)._field_breaked.len())) {
						_case_begin_2299412a5:;
						{
							return false;
						}
					}
					else if ((!(_252417_ok))) {
						_case_begin_22994132c:;
						{
							if ((!((*_self_)._field_falled))) {
								return false;
							};
							goto _case_begin_2299413a4;
						}
					}
					else if ((*_self_)._field_falled) {
						_case_begin_2299413a4:;
						{
							(*_self_)._field_falled=false;
							if ((_251921_c.get()._field_next == nullptr)) {
								return false;
							};
							goto _iter_next_22993e539;
						}
					}
					_match_end_22994120b:;
				};
			}
			_iter_next_22993e539:;
			++it;
			goto _iter_begin_22993e539;
		}
		_iter_end_22993e539:;
	};
	return ((_251830_m.get()._field_default != nullptr) && _24556b1b1_check_scope(&(*_self_), _251830_m.get()._field_default.get()._field_scope));
}



inline jule::Bool _24556ada3_check_inf_iter(_24556a0e4_MissingRetChecker* _self_, jule::Ptr<_24552a24c_InfIter> _254433_it) {
	jule::I32 _254513_n = (*_self_)._field_breaked.len();;
	if (_24556b1b1_check_scope(&(*_self_), _254433_it.get()._field_scope)) {
		(*_self_)._field_breaked=(*_self_)._field_breaked.slice(0LL,_254513_n);
		return true;
	};
	if ((_254513_n != (*_self_)._field_breaked.len())) {
		jule::Uintptr _255117_itaddr = static_cast<jule::Uintptr>(_254433_it);;
		{
			auto expr = (*_self_)._field_breaked.slice(_254513_n);
			auto it = expr.begin();
			_iter_begin_229945122:;
			if (it != expr.end()) {
				jule::Uintptr _255220_addr = *it;
				{
					if ((_255117_itaddr == _255220_addr)) {
						(*_self_)._field_breaked=(*_self_)._field_breaked.slice(0LL,_254513_n);
						return false;
					};
				}
				_iter_next_229945122:;
				++it;
				goto _iter_begin_229945122;
			}
			_iter_end_229945122:;
		};
		(*_self_)._field_breaked=(*_self_)._field_breaked.slice(0LL,_254513_n);
	};
	return true;
}



inline jule::Bool _24556b1b1_check_scope(_24556a0e4_MissingRetChecker* _self_, jule::Ptr<_24552937d_Scope> _256330_s) {
	if ((_256330_s == nullptr)) {
		return false;
	};
	{
		auto &expr = _256330_s.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_229946d05:;
		if (it != expr.end()) {
			jule::Any _256721_st = *it;
			{
				{
					auto &_match_expr{ _256721_st };
					
					if (_match_expr.type_is<jule::Ptr<_24552e251_FallSt>>()) {
						_case_begin_2299476eb:;
						{
							(*_self_)._field_falled=true;
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24552b858_BreakSt>>()) {
						_case_begin_229947795:;
						{
							jule::Uintptr _257321_addr = _256721_st.operator jule::Ptr<_24552b858_BreakSt>().get()._field_it;;
							if ((_257321_addr != 0LLU)) {
								(*_self_)._field_breaked = jule::alloc_for_append((*_self_)._field_breaked,1);(*_self_)._field_breaked.__push(_257321_addr);;
							};
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24552b4a1_ContSt>>()) {
						_case_begin_22994780b:;
						{
							return false;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24552a24c_InfIter>>()) {
						_case_begin_229947872:;
						{
							if (_24556ada3_check_inf_iter(&(*_self_), _256721_st.operator jule::Ptr<_24552a24c_InfIter>())) {
								return true;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24552e6c4_RetSt>>()) {
						_case_begin_2299478d8:;
						{
							return true;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24552937d_Scope>>()) {
						_case_begin_22994794e:;
						{
							if (_24556b1b1_check_scope(&(*_self_), _256721_st.operator jule::Ptr<_24552937d_Scope>())) {
								return true;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
						_case_begin_2299479c6:;
						{
							{
								auto &_match_expr{ _256721_st.operator jule::Ptr<_2455b5051_Data>().get()._field_model };
								
								if (_match_expr.type_is<jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>()) {
									_case_begin_22994b634:;
									{
										return true;
									}
								}
								_match_end_22994b38c:;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_245529e61_Conditional>>()) {
						_case_begin_229947a4d:;
						{
							if (_24556a787_check_conditional(&(*_self_), _256721_st.operator jule::Ptr<_245529e61_Conditional>())) {
								return true;
							};
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_24552d151_Match>>()) {
						_case_begin_229947ac5:;
						{
							if (_24556aa95_check_match(&(*_self_), _256721_st.operator jule::Ptr<_24552d151_Match>())) {
								return true;
							};
						}
					}
					_match_end_229947553:;
				};
			}
			_iter_next_229946d05:;
			++it;
			goto _iter_begin_229946d05;
		}
		_iter_end_229946d05:;
	};
	return false;
}



inline jule::Bool _24556b4be_check(_24556a0e4_MissingRetChecker* _self_, jule::Ptr<_24552937d_Scope> _260924_s) {
	return _24556b1b1_check_scope(&(*_self_), _260924_s);
}







std::ostream &operator<<(std::ostream &_Stream, _24556a0e4_MissingRetChecker _Src) {
	_Stream << "MissingRetChecker{";
	_Stream << "breaked:" << _Src._field_breaked << ", ";
	_Stream << "falled:" << _Src._field_falled;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24556bca5_IterRelation _Src) {
	_Stream << "IterRelation{";
	_Stream << "range:" << _Src._field_range;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _24556d0c5_is_initialized(_24556cc1d_Var* _self_) {
	return ((*_self_)._field_value != nullptr);
}



inline jule::Bool _24556d339_is_type_inferred(_24556cc1d_Var* _self_) {
	return (((*_self_)._field_kind == nullptr) || ((*_self_)._field_kind.get()._field_decl == nullptr));
}







std::ostream &operator<<(std::ostream &_Stream, _24556cc1d_Var _Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "iter_relation:" << _Src._field_iter_relation << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool static__24556ddb7_dispose(jule::Ptr<_244926d0e_Fn> _1027_f) {
	return (((((((((((_1027_f != nullptr) && (_1027_f.get()._field_owner != nullptr)) && (_1027_f.get()._field_ident == jule::Str("dispose", 7))) && (!(_1027_f.get()._field_statically))) && (!(_1027_f.get()._field_unsafety))) && _1027_f.get()._field_public) && _244927271_is_void(_1027_f.ptr())) && (_1027_f.get()._field_generics.len() == 0LL)) && (_1027_f.get()._field_params.len() == 1LL)) && _1027_f.get()._field_params[0LL].get()._field_mutable) && (!(_244925d63_is_ref(_1027_f.get()._field_params[0LL].ptr()))));
}



inline jule::Bool static__24556e15e_to_str(jule::Ptr<_244926d0e_Fn> _2526_f) {
	if ((((((((((((_2526_f == nullptr) || (_2526_f.get()._field_owner == nullptr)) || (_2526_f.get()._field_ident != jule::Str("to_str", 6))) || _2526_f.get()._field_statically) || _2526_f.get()._field_unsafety) || (!(_2526_f.get()._field_public))) || _244927271_is_void(_2526_f.ptr())) || (_2526_f.get()._field_generics.len() != 0LL)) || (_2526_f.get()._field_params.len() != 1LL)) || _2526_f.get()._field_params[0LL].get()._field_mutable) || _244925d63_is_ref(_2526_f.get()._field_params[0LL].ptr()))) {
		return false;
	};
	jule::Ptr<_2449299b0_FnIns> _4017_ins = _2526_f.get()._field_instances[0LL];;
	jule::Ptr<_2455e59ee_Prim> _4113_prim = _2455e3139_prim(_4017_ins.get()._field_result.ptr());;
	if ((_4113_prim == nullptr)) {
		return false;
	};
	return _2455e8c33_is_str(_4113_prim.ptr());
}



inline jule::Bool static__24556e4a0_logical(jule::Ptr<_244926d0e_Fn>& _4824_f, jule::Str _4832_ident) {
	if (((((((((((((((_4824_f == nullptr) || (_4824_f.get()._field_ident != _4832_ident)) || (_4824_f.get()._field_owner == nullptr)) || (_4824_f.get()._field_instances.len() == 0LL)) || _4824_f.get()._field_statically) || _4824_f.get()._field_unsafety) || (!(_4824_f.get()._field_public))) || _244927271_is_void(_4824_f.ptr())) || (_4824_f.get()._field_generics.len() != 0LL)) || (_4824_f.get()._field_params.len() != 2LL)) || _4824_f.get()._field_params[0LL].get()._field_mutable) || _244925d63_is_ref(_4824_f.get()._field_params[0LL].ptr())) || _4824_f.get()._field_params[1LL].get()._field_mutable) || _4824_f.get()._field_params[1LL].get()._field_reference)) {
		return false;
	};
	jule::Ptr<_2449299b0_FnIns> _6617_ins = _4824_f.get()._field_instances[0LL];;
	jule::Ptr<_2455e59ee_Prim> _6713_prim = _2455e3139_prim(_6617_ins.get()._field_result.ptr());;
	if (((_6713_prim == nullptr) || (!(_2455e89be_is_bool(_6713_prim.ptr()))))) {
		return false;
	};
	return (_6617_ins.get()._field_owner == _2455e458b_strct(_6617_ins.get()._field_params[1LL].get()._field_kind.ptr()));
}



inline jule::Bool static__24556e747_eq(jule::Ptr<_244926d0e_Fn> _7522_f) {
	return static__24556e4a0_logical(_7522_f,jule::Str("eq", 2));
}



inline jule::Bool static__24556e9de_gt(jule::Ptr<_244926d0e_Fn> _8022_f) {
	return static__24556e4a0_logical(_8022_f,jule::Str("gt", 2));
}



inline jule::Bool static__24556ec86_gt_eq(jule::Ptr<_244926d0e_Fn> _8525_f) {
	return static__24556e4a0_logical(_8525_f,jule::Str("gt_eq", 5));
}



inline jule::Bool static__24557002d_lt(jule::Ptr<_244926d0e_Fn> _9022_f) {
	return static__24556e4a0_logical(_9022_f,jule::Str("lt", 2));
}



inline jule::Bool static__2455702c5_lt_eq(jule::Ptr<_244926d0e_Fn> _9525_f) {
	return static__24556e4a0_logical(_9525_f,jule::Str("lt_eq", 5));
}



inline jule::Bool static__245570616_result(jule::Ptr<_244926d0e_Fn>& _9923_f, jule::Str _9931_ident) {
	if (((((((((((((((_9923_f == nullptr) || (_9923_f.get()._field_ident != _9931_ident)) || (_9923_f.get()._field_owner == nullptr)) || (_9923_f.get()._field_instances.len() == 0LL)) || _9923_f.get()._field_statically) || _9923_f.get()._field_unsafety) || (!(_9923_f.get()._field_public))) || _244927271_is_void(_9923_f.ptr())) || (_9923_f.get()._field_generics.len() != 0LL)) || (_9923_f.get()._field_params.len() != 2LL)) || _9923_f.get()._field_params[0LL].get()._field_mutable) || _244925d63_is_ref(_9923_f.get()._field_params[0LL].ptr())) || _9923_f.get()._field_params[1LL].get()._field_mutable) || _9923_f.get()._field_params[1LL].get()._field_reference)) {
		return false;
	};
	jule::Ptr<_2449299b0_FnIns> _11717_ins = _9923_f.get()._field_instances[0LL];;
	return (_2455e458b_strct(_11717_ins.get()._field_result.ptr()) == _11717_ins.get()._field_owner);
}



inline jule::Bool static__2455708ad_shl(jule::Ptr<_244926d0e_Fn> _12223_f) {
	return static__245570616_result(_12223_f,jule::Str("shl", 3));
}



inline jule::Bool static__245570b55_shr(jule::Ptr<_244926d0e_Fn> _12723_f) {
	return static__245570616_result(_12723_f,jule::Str("shr", 3));
}



inline jule::Bool static__245570dec_add(jule::Ptr<_244926d0e_Fn> _13223_f) {
	return static__245570616_result(_13223_f,jule::Str("add", 3));
}



inline jule::Bool static__245571194_sub(jule::Ptr<_244926d0e_Fn> _13723_f) {
	return static__245570616_result(_13723_f,jule::Str("sub", 3));
}



inline jule::Bool static__24557143b_div(jule::Ptr<_244926d0e_Fn> _14223_f) {
	return static__245570616_result(_14223_f,jule::Str("div", 3));
}



inline jule::Bool static__2455716d3_mul(jule::Ptr<_244926d0e_Fn> _14723_f) {
	return static__245570616_result(_14723_f,jule::Str("mul", 3));
}



inline jule::Bool static__24557197a_mod(jule::Ptr<_244926d0e_Fn> _15223_f) {
	return static__245570616_result(_15223_f,jule::Str("mod", 3));
}



inline jule::Bool static__245571c22_bit_and(jule::Ptr<_244926d0e_Fn> _15727_f) {
	return static__245570616_result(_15727_f,jule::Str("bit_and", 7));
}



inline jule::Bool static__245571eb9_bit_or(jule::Ptr<_244926d0e_Fn> _16226_f) {
	return static__245570616_result(_16226_f,jule::Str("bit_or", 6));
}



inline jule::Bool static__245572261_bit_xor(jule::Ptr<_244926d0e_Fn> _16727_f) {
	return static__245570616_result(_16727_f,jule::Str("bit_xor", 7));
}



inline jule::Bool static__2455725a2_unary(jule::Ptr<_244926d0e_Fn>& _17122_f, jule::Str _17130_ident) {
	if (((((((((((((_17122_f == nullptr) || (_17122_f.get()._field_ident != _17130_ident)) || (_17122_f.get()._field_owner == nullptr)) || (_17122_f.get()._field_instances.len() == 0LL)) || _17122_f.get()._field_statically) || _17122_f.get()._field_unsafety) || (!(_17122_f.get()._field_public))) || _244927271_is_void(_17122_f.ptr())) || (_17122_f.get()._field_generics.len() != 0LL)) || (_17122_f.get()._field_params.len() != 1LL)) || _17122_f.get()._field_params[0LL].get()._field_mutable) || _244925d63_is_ref(_17122_f.get()._field_params[0LL].ptr()))) {
		return false;
	};
	jule::Ptr<_2449299b0_FnIns> _18717_ins = _17122_f.get()._field_instances[0LL];;
	return (_2455e458b_strct(_18717_ins.get()._field_result.ptr()) == _18717_ins.get()._field_owner);
}



inline jule::Bool static__245572849_neg(jule::Ptr<_244926d0e_Fn> _19223_f) {
	return static__2455725a2_unary(_19223_f,jule::Str("neg", 3));
}



inline jule::Bool static__245572ae1_pos(jule::Ptr<_244926d0e_Fn> _19723_f) {
	return static__2455725a2_unary(_19723_f,jule::Str("pos", 3));
}



inline jule::Bool static__245572d88_bit_not(jule::Ptr<_244926d0e_Fn> _20227_f) {
	return static__2455725a2_unary(_20227_f,jule::Str("bit_not", 7));
}



inline jule::Bool static__2455731c9_assign(jule::Ptr<_244926d0e_Fn>& _20623_f, jule::Str _20631_ident) {
	if (((((((((((((((_20623_f == nullptr) || (_20623_f.get()._field_ident != _20631_ident)) || (_20623_f.get()._field_owner == nullptr)) || (_20623_f.get()._field_instances.len() == 0LL)) || _20623_f.get()._field_statically) || _20623_f.get()._field_unsafety) || (!(_20623_f.get()._field_public))) || (!(_244927271_is_void(_20623_f.ptr())))) || (_20623_f.get()._field_generics.len() != 0LL)) || (_20623_f.get()._field_params.len() != 2LL)) || (!(_20623_f.get()._field_params[0LL].get()._field_mutable))) || _244925d63_is_ref(_20623_f.get()._field_params[0LL].ptr())) || _20623_f.get()._field_params[1LL].get()._field_mutable) || _20623_f.get()._field_params[1LL].get()._field_reference)) {
		return false;
	};
	return true;
}



inline jule::Bool static__245573471_add_assign(jule::Ptr<_244926d0e_Fn> _22730_f) {
	return static__2455731c9_assign(_22730_f,jule::Str("add_assign", 10));
}



inline jule::Bool static__245573718_sub_assign(jule::Ptr<_244926d0e_Fn> _23230_f) {
	return static__2455731c9_assign(_23230_f,jule::Str("sub_assign", 10));
}



inline jule::Bool static__2455739b0_div_assign(jule::Ptr<_244926d0e_Fn> _23730_f) {
	return static__2455731c9_assign(_23730_f,jule::Str("div_assign", 10));
}



inline jule::Bool static__245573c57_mul_assign(jule::Ptr<_244926d0e_Fn> _24230_f) {
	return static__2455731c9_assign(_24230_f,jule::Str("mul_assign", 10));
}



inline jule::Bool static__245573eee_mod_assign(jule::Ptr<_244926d0e_Fn> _24730_f) {
	return static__2455731c9_assign(_24730_f,jule::Str("mod_assign", 10));
}



inline jule::Bool static__245574296_shl_assign(jule::Ptr<_244926d0e_Fn> _25230_f) {
	return static__2455731c9_assign(_25230_f,jule::Str("shl_assign", 10));
}



inline jule::Bool static__24557453d_shr_assign(jule::Ptr<_244926d0e_Fn> _25730_f) {
	return static__2455731c9_assign(_25730_f,jule::Str("shr_assign", 10));
}



inline jule::Bool static__2455747d5_bit_or_assign(jule::Ptr<_244926d0e_Fn> _26233_f) {
	return static__2455731c9_assign(_26233_f,jule::Str("bit_or_assign", 13));
}



inline jule::Bool static__245574a7c_bit_and_assign(jule::Ptr<_244926d0e_Fn> _26734_f) {
	return static__2455731c9_assign(_26734_f,jule::Str("bit_and_assign", 14));
}



inline jule::Bool static__245574d24_bit_xor_assign(jule::Ptr<_244926d0e_Fn> _27234_f) {
	return static__2455731c9_assign(_27234_f,jule::Str("bit_xor_assign", 14));
}







std::ostream &operator<<(std::ostream &_Stream, _24556d746_FuncPattern _Src) {
	_Stream << "FuncPattern{";
	_Stream << "}";
	return _Stream;
}



inline void _24559e403_push_err(_24559ddd6_TypeCompatibilityChecker* _self_, jule::Str _11727_fmt, jule::Slice<jule::Any> _11740_args) {
	_245553bc1_push_err((*_self_)._field_s.ptr(), (*_self_)._field_error_token,_11727_fmt,jule::Any(_11740_args));
}



inline jule::Bool _24559e667_check_trait(_24559ddd6_TypeCompatibilityChecker* _self_) {
	jule::Bool _12132_ok = jule::Bool();
	if (_2455e1e4b_is_nil((*_self_)._field_src.ptr())) {
		_12132_ok = true;
		return _12132_ok;
	};
	jule::Ptr<_24547ec51_Trait> _12513_trt = _2455e4800_trt((*_self_)._field_dest.ptr());;
	jule::Bool _12617_ref = false;;
	{
		
		if ((_2455e339d_sptr((*_self_)._field_src.ptr()) != nullptr)) {
			_case_begin_229986240:;
			{
				_12617_ref=true;
				(*_self_)._field_src=_2455e339d_sptr((*_self_)._field_src.ptr()).get()._field_elem;
				if ((_2455e458b_strct((*_self_)._field_src.ptr()) == nullptr)) {
					_12132_ok = false;
					return _12132_ok;
				};
				goto _case_begin_22998632d;
			}
		}
		else if ((_2455e458b_strct((*_self_)._field_src.ptr()) != nullptr)) {
			_case_begin_22998632d:;
			{
				jule::Ptr<_244874c5c_StructIns> _13617_s = _2455e458b_strct((*_self_)._field_src.ptr());;
				if ((!(_24483a55d_is_implements(_13617_s.get()._field_decl.ptr(), _12513_trt)))) {
					_12132_ok = false;
					return _12132_ok;
				};
				if (((!(_12617_ref)) && _24558e327_trait_has_reference_receiver(_12513_trt))) {
					_24559e403_push_err(&(*_self_), jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>());
					_12132_ok = false;
					return _12132_ok;
				};
				_12132_ok = true;
				return _12132_ok;
			}
		}
		else if ((_2455e4800_trt((*_self_)._field_src.ptr()) != nullptr)) {
			_case_begin_229986394:;
			{
				_12132_ok = (_12513_trt == _2455e4800_trt((*_self_)._field_src.ptr()));
				return _12132_ok;
			}
		}
		else {
			_case_begin_229985ad0:;
			{
				_12132_ok = false;
				return _12132_ok;
			}
		}
		_match_end_229985a7a:;
	};
}



inline jule::Bool _24559e8cb_check_ptr(_24559ddd6_TypeCompatibilityChecker* _self_) {
	jule::Bool _15230_ok = jule::Bool();
	if (_2455e1e4b_is_nil((*_self_)._field_src.ptr())) {
		_15230_ok = true;
		return _15230_ok;
	};
	jule::Ptr<_2455ec7e7_Ptr> _15617_dest = _2455e3612_ptr((*_self_)._field_dest.ptr());;
	if (_2455ed2ba_is_unsafe(_15617_dest.ptr())) {
		_15230_ok = true;
		return _15230_ok;
	};
	_15230_ok = _2455e1731_equals((*_self_)._field_dest, (*_self_)._field_src);
	return _15230_ok;
}



inline jule::Bool _24559eb40_check_prim(_24559ddd6_TypeCompatibilityChecker* _self_) {
	jule::Bool _16331_ok = jule::Bool();
	if ((!((*_self_)._field_dest.get()._field_variadic))) {
		jule::Ptr<_2455e59ee_Prim> _16517_prim = _2455e3139_prim((*_self_)._field_dest.ptr());;
		if (((_16517_prim != nullptr) && _2455e8e97_is_any(_16517_prim.ptr()))) {
			_16331_ok = true;
			return _16331_ok;
		};
	};
	_16331_ok = _2455e1731_equals((*_self_)._field_dest, (*_self_)._field_src);
	return _16331_ok;
}



inline jule::Bool _24559eee7___type_enum(_24559ddd6_TypeCompatibilityChecker* _self_, jule::Ptr<_245483507_TypeEnum>& _17331_e, jule::Ptr<_2455e1027_TypeKind>& _17350_t2) {
	jule::Bool _17367_ok = jule::Bool();
	{
		auto &expr = _17331_e.get()._field_items;
		auto it = expr.begin();
		_iter_begin_22998ddc4:;
		if (it != expr.end()) {
			jule::Ptr<_245482e41_TypeEnumItem> _17421_item = *it;
			{
				if (_2455e1731_equals(_17421_item.get()._field_kind.get()._field_kind, _17350_t2)) {
					_17367_ok = true;
					return _17367_ok;
				};
				jule::Ptr<_245483507_TypeEnum> _17821_ke = _2455e3ada_tenm(_17421_item.get()._field_kind.get()._field_kind.ptr());;
				if ((_17821_ke == nullptr)) {
					goto _iter_next_22998ddc4;
				};
				if (_24559eee7___type_enum(&(*_self_), _17821_ke,_17350_t2)) {
					_17367_ok = true;
					return _17367_ok;
				};
			}
			_iter_next_22998ddc4:;
			++it;
			goto _iter_begin_22998ddc4;
		}
		_iter_end_22998ddc4:;
	};
	_17367_ok = false;
	return _17367_ok;
}



inline jule::Bool _2455a025b_check_type_enum(_24559ddd6_TypeCompatibilityChecker* _self_) {
	jule::Bool _18936_ok = jule::Bool();
	if (_2455e1731_equals((*_self_)._field_dest, (*_self_)._field_src)) {
		_18936_ok = true;
		return _18936_ok;
	};
	jule::Ptr<_245483507_TypeEnum> _19317_e = _2455e3ada_tenm((*_self_)._field_dest.ptr());;
	_18936_ok = _24559eee7___type_enum(&(*_self_), _19317_e,(*_self_)._field_src);
	return _18936_ok;
}



inline jule::Bool _2455a04c0_check(_24559ddd6_TypeCompatibilityChecker* _self_) {
	jule::Bool _19726_ok = jule::Bool();
	if ((_2455e3612_ptr((*_self_)._field_dest.ptr()) != nullptr)) {
		_19726_ok = _24559e8cb_check_ptr(&(*_self_));
		return _19726_ok;
	};
	if (_2455e2688_nil_compatible((*_self_)._field_dest.ptr())) {
		if (_2455e1e4b_is_nil((*_self_)._field_src.ptr())) {
			_19726_ok = true;
			return _19726_ok;
		};
	};
	{
		
		if ((_2455e3139_prim((*_self_)._field_dest.ptr()) != nullptr)) {
			_case_begin_229994308:;
			{
				_19726_ok = _24559eb40_check_prim(&(*_self_));
				return _19726_ok;
			}
		}
		else if ((_2455e3ada_tenm((*_self_)._field_dest.ptr()) != nullptr)) {
			_case_begin_22999436e:;
			{
				_19726_ok = _2455a025b_check_type_enum(&(*_self_));
				return _19726_ok;
			}
		}
		else if ((_2455e4800_trt((*_self_)._field_dest.ptr()) != nullptr)) {
			_case_begin_22999465a:;
			{
				_19726_ok = _24559e667_check_trait(&(*_self_));
				return _19726_ok;
			}
		}
		else {
			_case_begin_22999348e:;
			{
				_19726_ok = _2455e1731_equals((*_self_)._field_dest, (*_self_)._field_src);
				return _19726_ok;
			}
		}
		_match_end_22999334b:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _24559ddd6_TypeCompatibilityChecker _Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _2455a0e71_push_err(_2455a0a0e_AssignTypeChecker* _self_, jule::Str _22927_fmt, jule::Slice<jule::Any> _22940_args) {
	_245553bc1_push_err((*_self_)._field_s.ptr(), (*_self_)._field_error_token,_22927_fmt,jule::Any(_22940_args));
}



inline jule::Bool _2455a11d5_check_validity(_2455a0a0e_AssignTypeChecker* _self_) {
	jule::Bool _23417_valid = true;;
	{
		
		if ((_2455e4327_fnc((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22999796b:;
			{
				jule::Ptr<_2449299b0_FnIns> _23717_f = _2455e4327_fnc((*_self_)._field_d.get()._field_kind.ptr());;
				{
					
					if (_24492ad46_is_builtin(_23717_f.ptr())) {
						_case_begin_229999044:;
						{
							_2455a0e71_push_err(&(*_self_), jule::Str("builtin define cannot use as anonymous function", 47),jule::Slice<jule::Any>());
							_23417_valid=false;
						}
					}
					else if (_23717_f.get()._field_decl.get()._field_cpp_linked) {
						_case_begin_2299990bb:;
						{
							_2455a0e71_push_err(&(*_self_), jule::Str("cpp-linked functions cannot use as anonymous function", 53),jule::Slice<jule::Any>());
							_23417_valid=false;
						}
					}
					else if (((!(_23717_f.get()._field_decl.get()._field_statically)) && _2449274d5_is_method(_23717_f.get()._field_decl.ptr()))) {
						_case_begin_229999143:;
						{
							_2455a0e71_push_err(&(*_self_), jule::Str("non-static methods cannot use as anonymous function", 51),jule::Slice<jule::Any>());
							_23417_valid=false;
						}
					}
					else if (((_23717_f.get()._field_decl.get()._field_generics.len() > 0LL) && (_23717_f.get()._field_generics.len() == 0LL))) {
						_case_begin_2299991ba:;
						{
							_2455a0e71_push_err(&(*_self_), jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
							_245553ee0_push_suggestion((*_self_)._field_s.ptr(), jule::Str("instantiate generic function to use as anonymous function", 57),jule::Slice<jule::Any>());
							_23417_valid=false;
						}
					}
					_match_end_229998e67:;
				};
			}
		}
		else if ((_2455e4cc8_tup((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_2299979e3:;
			{
				_2455a0e71_push_err(&(*_self_), jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>());
				_23417_valid=false;
			}
		}
		_match_end_2299978b1:;
	};
	return _23417_valid;
}



inline jule::Bool _2455a1449_check_const(_2455a0a0e_AssignTypeChecker* _self_) {
	if (((((!(_2455b5914_is_const((*_self_)._field_d.ptr()))) || (_2455e3139_prim((*_self_)._field_dest.ptr()) == nullptr)) || (_2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr()) == nullptr)) || (!(_245528c0c_is_num(_2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr()).get()._field_kind))))) {
		return false;
	};
	if (((*_self_)._field_d.get()._field_model != (*_self_)._field_d.get()._field_constant)) {
		return false;
	};
	jule::Str _27413_kind = _2455e3139_prim((*_self_)._field_dest.ptr()).get()._field_kind;;
	{
		
		if (_245528965_is_float(_27413_kind)) {
			_case_begin_2299a1854:;
			{
				if ((!(_245586352_float_assignable(_27413_kind,(*_self_)._field_d)))) {
					_2455a0e71_push_err(&(*_self_), jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				};
			}
		}
		else if (_245528646_is_int(_27413_kind)) {
			_case_begin_2299a116c:;
			{
				if ((!(_24559cba4_int_assignable(_27413_kind,(*_self_)._field_d)))) {
					_2455a0e71_push_err(&(*_self_), jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				};
			}
		}
		else {
			_case_begin_2299a1106:;
			{
				return false;
			}
		}
		_match_end_2299a10a1:;
	};
	return true;
}



inline jule::Bool _2455a16ad_is_prim(_2455a0a0e_AssignTypeChecker* _self_) {
	if (((*_self_)._field_dest.get()._field_variadic || (*_self_)._field_d.get()._field_kind.get()._field_variadic)) {
		return false;
	};
	if ((_2455e1bd7_cpp_linked((*_self_)._field_dest.ptr()) || _2455e1bd7_cpp_linked((*_self_)._field_d.get()._field_kind.ptr()))) {
		return false;
	};
	return ((_2455e3139_prim((*_self_)._field_dest.ptr()) != nullptr) && (_2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr));
}



inline jule::Bool _2455a1922_check_compatibility(_2455a0a0e_AssignTypeChecker* _self_) {
	{
		
		if (((*_self_)._field_d == nullptr)) {
			_case_begin_2299a5407:;
			{
				return false;
			}
		}
		else if ((!(_2455a11d5_check_validity(&(*_self_))))) {
			_case_begin_2299a547e:;
			{
				return false;
			}
		}
		else if (_2455a1449_check_const(&(*_self_))) {
			_case_begin_2299a5506:;
			{
				return true;
			}
		}
		else if ((_2455e3876_enm((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_2299a557d:;
			{
				jule::Ptr<_2455e1027_TypeKind> _31621_dkind = (*_self_)._field_dest;;
				if ((_2455e3876_enm((*_self_)._field_dest.ptr()) != nullptr)) {
					_31621_dkind=_2455e3876_enm((*_self_)._field_dest.ptr()).get()._field_kind.get()._field_kind;
				} else if ((_2455e3139_prim((*_self_)._field_dest.ptr()) == nullptr)) {
					goto _match_end_2299a52d6;
				};
				if (_245525478_types_are_compatible(_2455e3139_prim(_2455e3876_enm((*_self_)._field_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind.ptr()).get()._field_kind,_2455e3139_prim(_31621_dkind.ptr()).get()._field_kind)) {
					return true;
				};
			}
		}
		else if (_2455a16ad_is_prim(&(*_self_))) {
			_case_begin_2299a5605:;
			{
				jule::Ptr<_2455e59ee_Prim> _32617_dest = _2455e3139_prim((*_self_)._field_dest.ptr());;
				if (_2455e8e97_is_any(_32617_dest.ptr())) {
					return true;
				};
				jule::Ptr<_2455e59ee_Prim> _33021_src = _2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr());;
				if (_245525478_types_are_compatible(_32617_dest.get()._field_kind,_33021_src.get()._field_kind)) {
					return true;
				};
			}
		}
		_match_end_2299a52d6:;
	};
	return _245559c4e_check_type_compatibility((*_self_)._field_s, (*_self_)._field_dest,(*_self_)._field_d.get()._field_kind,(*_self_)._field_error_token);
}



inline jule::Bool _2455a1b86_check(_2455a0a0e_AssignTypeChecker* _self_) {
	jule::Bool _33913_ok = _2455a1922_check_compatibility(&(*_self_));;
	if (_33913_ok) {
		_245609738_apply_implicit_cast((*_self_)._field_dest,(*_self_)._field_d);
	};
	return _33913_ok;
}







std::ostream &operator<<(std::ostream &_Stream, _2455a0a0e_AssignTypeChecker _Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2299c404c_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _35851_k) {
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485a6e3_ArrTypeDecl>>()) {
			_case_begin_2299c5636:;
			{
				jule::Ptr<_2455e1027_TypeKind> _36121_elem = nullptr;;
				{
					
{
						_case_begin_2299c64b1:;
						{
							_36121_elem=_2455e3d4e_arr(_35851_k.ptr()).get()._field_elem;
						}
					}
					_match_end_2299c6406:;
				};
				(*_self_)._field_c=(*_self_)._field_c.get()._field_kind.operator jule::Ptr<_24485a6e3_ArrTypeDecl>().get()._field_elem;
				return _2455a3b22_annotate_constraint(&(*_self_), _36121_elem);
			}
		}
		_match_end_2299c557b:;
	};
	return false;
}

inline jule::Bool _2299c3689_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _35851_k) {
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_244859989_SlcTypeDecl>>()) {
			_case_begin_2299c8c99:;
			{
				jule::Ptr<_2455e1027_TypeKind> _36121_elem = nullptr;;
				{
					
{
						_case_begin_2299c9bbd:;
						{
							_36121_elem=_2455e40b3_slc(_35851_k.ptr()).get()._field_elem;
						}
					}
					_match_end_2299c9a69:;
				};
				(*_self_)._field_c=(*_self_)._field_c.get()._field_kind.operator jule::Ptr<_244859989_SlcTypeDecl>().get()._field_elem;
				return _2455a3b22_annotate_constraint(&(*_self_), _36121_elem);
			}
		}
		_match_end_2299c8bde:;
	};
	return false;
}

inline jule::Bool _2299c3ac9_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _35851_k) {
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485a061_PtrTypeDecl>>()) {
			_case_begin_2299cc473:;
			{
				jule::Ptr<_2455e1027_TypeKind> _36121_elem = nullptr;;
				{
					
{
						_case_begin_2299cd40d:;
						{
							_36121_elem=_2455e3612_ptr(_35851_k.ptr()).get()._field_elem;
						}
					}
					_match_end_2299cd243:;
				};
				(*_self_)._field_c=(*_self_)._field_c.get()._field_kind.operator jule::Ptr<_24485a061_PtrTypeDecl>().get()._field_elem;
				return _2455a3b22_annotate_constraint(&(*_self_), _36121_elem);
			}
		}
		_match_end_2299cc3b8:;
	};
	return false;
}

inline jule::Bool _2299cb95b_annotate_constraint_elem(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _35851_k) {
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485958d_SptrTypeDecl>>()) {
			_case_begin_2299d07b7:;
			{
				jule::Ptr<_2455e1027_TypeKind> _36121_elem = nullptr;;
				{
					
{
						_case_begin_2299d17b8:;
						{
							_36121_elem=_2455e339d_sptr(_35851_k.ptr()).get()._field_elem;
						}
					}
					_match_end_2299d1587:;
				};
				(*_self_)._field_c=(*_self_)._field_c.get()._field_kind.operator jule::Ptr<_24485958d_SptrTypeDecl>().get()._field_elem;
				return _2455a3b22_annotate_constraint(&(*_self_), _36121_elem);
			}
		}
		_match_end_2299d070c:;
	};
	return false;
}



inline jule::Bool _2455a2d63_annotate_constraint_map(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _37847_k) {
	jule::Bool _37863_ok = jule::Bool();
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485ae41_MapTypeDecl>>()) {
			_case_begin_2299b2c61:;
			{
				jule::Ptr<_2455eb296_Map> _38121_m = _2455e4a64_map(_37847_k.ptr());;
				jule::Ptr<_24485ae41_MapTypeDecl> _38221_m2 = (*_self_)._field_c.get()._field_kind.operator jule::Ptr<_24485ae41_MapTypeDecl>();;
				(*_self_)._field_c=_38221_m2.get()._field_key;
				if (_2455a3b22_annotate_constraint(&(*_self_), _38121_m.get()._field_key)) {
					_37863_ok = true;
					return _37863_ok;
				};
				(*_self_)._field_c=_38221_m2.get()._field_val;
				_37863_ok = _2455a3b22_annotate_constraint(&(*_self_), _38121_m.get()._field_val);
				return _37863_ok;
			}
		}
		_match_end_2299b2bd9:;
	};
	_37863_ok = false;
	return _37863_ok;
}



inline jule::Bool _2455a31a4_annotate_constraint_tup(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _39347_k) {
	jule::Bool _39363_ok = jule::Bool();
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_244859c75_TupleTypeDecl>>()) {
			_case_begin_2299b577a:;
			{
				jule::Ptr<_244859c75_TupleTypeDecl> _39621_tup = (*_self_)._field_c.get()._field_kind.operator jule::Ptr<_244859c75_TupleTypeDecl>();;
				jule::Ptr<_2455ea76d_Tuple> _39721_tup2 = _2455e4cc8_tup(_39347_k.ptr());;
				{
					auto &expr = _39721_tup2.get()._field_types;
					auto it = expr.begin();
					_iter_begin_2299b6bee:;
					if (it != expr.end()) {
						jule::Ptr<_2455e1027_TypeKind> _39825_t2 = *it;
						{
							{
								auto &expr = _39621_tup.get()._field_types;
								auto it = expr.begin();
								_iter_begin_2299b753a:;
								if (it != expr.end()) {
									jule::Ptr<_2448581d5_TypeDecl> _39929_t = *it;
									{
										(*_self_)._field_c=_39929_t;
										if (_2455a3b22_annotate_constraint(&(*_self_), _39825_t2)) {
											_39363_ok = true;
											return _39363_ok;
										};
									}
									_iter_next_2299b753a:;
									++it;
									goto _iter_begin_2299b753a;
								}
								_iter_end_2299b753a:;
							};
						}
						_iter_next_2299b6bee:;
						++it;
						goto _iter_begin_2299b6bee;
					}
					_iter_end_2299b6bee:;
				};
			}
		}
		_match_end_2299b5703:;
	};
	_39363_ok = false;
	return _39363_ok;
}



inline jule::Bool _2455a34c3_annotate_constraint_fn(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _41046_k) {
	jule::Bool _41062_ok = jule::Bool();
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_244869ee9_FnDecl>>()) {
			_case_begin_2299b799c:;
			{
				jule::Ptr<_244869ee9_FnDecl> _41321_pf = (*_self_)._field_c.get()._field_kind.operator jule::Ptr<_244869ee9_FnDecl>();;
				jule::Ptr<_2449299b0_FnIns> _41421_f = _2455e4327_fnc(_41046_k.ptr());;
				{
					auto &expr = _41421_f.get()._field_params;
					auto it = expr.begin();
					_iter_begin_2299b9a26:;
					if (it != expr.end()) {
						jule::I32 _41518_i = it - expr.begin();
						jule::Ptr<_244928ae1_ParamIns> _41525_fp = *it;
						{
							(*_self_)._field_c=_41321_pf.get()._field_params[_41518_i].get()._field_kind;
							if (_2455a3b22_annotate_constraint(&(*_self_), _41525_fp.get()._field_kind)) {
								_41062_ok = true;
								return _41062_ok;
							};
						}
						_iter_next_2299b9a26:;
						++it;
						_41518_i++;
						goto _iter_begin_2299b9a26;
					}
					_iter_end_2299b9a26:;
				};
				if ((_41321_pf.get()._field_result != nullptr)) {
					(*_self_)._field_c=_41321_pf.get()._field_result.get()._field_kind;
					if (_2455a3b22_annotate_constraint(&(*_self_), _41421_f.get()._field_result)) {
						_41062_ok = true;
						return _41062_ok;
					};
				};
			}
		}
		_match_end_2299b744c:;
	};
	_41062_ok = false;
	return _41062_ok;
}



inline jule::Bool _2455a3803_annotate_constraint_ident(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _43149_k) {
	jule::Ptr<_24485879b_IdentTypeDecl> _43217_ident = (*_self_)._field_c.get()._field_kind.operator jule::Ptr<_24485879b_IdentTypeDecl>();;
	jule::Ptr<_244874c5c_StructIns> _43317_s = _2455e458b_strct(_43149_k.ptr());;
	{
		auto &expr = (*_self_)._field_f.get()._field_decl.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_2299bc93b:;
		if (it != expr.end()) {
			jule::I32 _43413_i = it - expr.begin();
			jule::Ptr<_2448657b9_GenericDecl> _43416_g = *it;
			{
				if ((_43416_g.get()._field_ident == _43217_ident.get()._field_ident)) {
					jule::Ptr<_2455de7ea_InsGeneric> _43625_fg = (*_self_)._field_f.get()._field_generics[_43413_i];;
					if ((_43625_fg != nullptr)) {
						return false;
					};
					_2455a3e41_push_generic(&(*_self_), _43149_k,_43413_i);
					return true;
				};
				if ((_43317_s == nullptr)) {
					goto _iter_next_2299bc93b;
				};
				jule::Ptr<_2448581d5_TypeDecl> _44621_c = (*_self_)._field_c;;
				{
					auto &expr = _43217_ident.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_2299c0895:;
					if (it != expr.end()) {
						jule::Ptr<_2448581d5_TypeDecl> _44725_ig = *it;
						{
							(*_self_)._field_c=_44725_ig;
							{
								auto &expr = _43317_s.get()._field_generics;
								auto it = expr.begin();
								_iter_begin_2299c1610:;
								if (it != expr.end()) {
									jule::Ptr<_2455de7ea_InsGeneric> _44929_sg = *it;
									{
										if (_2455a3b22_annotate_constraint(&(*_self_), _44929_sg.get()._field_kind)) {
											return true;
										};
									}
									_iter_next_2299c1610:;
									++it;
									goto _iter_begin_2299c1610;
								}
								_iter_end_2299c1610:;
							};
						}
						_iter_next_2299c0895:;
						++it;
						goto _iter_begin_2299c0895;
					}
					_iter_end_2299c0895:;
				};
				(*_self_)._field_c=_44621_c;
			}
			_iter_next_2299bc93b:;
			++it;
			_43413_i++;
			goto _iter_begin_2299bc93b;
		}
		_iter_end_2299bc93b:;
	};
	return false;
}



inline jule::Bool _2455a3b22_annotate_constraint(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _46043_k) {
	{
		auto &_match_expr{ (*_self_)._field_c.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485879b_IdentTypeDecl>>()) {
			_case_begin_2299c0db2:;
			{
				return _2455a3803_annotate_constraint_ident(&(*_self_), _46043_k);
			}
		}
		_match_end_2299c1b4e:;
	};
	{
		
		if ((_2455e3d4e_arr(_46043_k.ptr()) != nullptr)) {
			_case_begin_2299c2655:;
			{
				return _2299c404c_annotate_constraint_elem(&(*_self_), _46043_k);
			}
		}
		else if ((_2455e40b3_slc(_46043_k.ptr()) != nullptr)) {
			_case_begin_2299c26bb:;
			{
				return _2299c3689_annotate_constraint_elem(&(*_self_), _46043_k);
			}
		}
		else if ((_2455e3612_ptr(_46043_k.ptr()) != nullptr)) {
			_case_begin_2299c2732:;
			{
				return _2299c3ac9_annotate_constraint_elem(&(*_self_), _46043_k);
			}
		}
		else if ((_2455e339d_sptr(_46043_k.ptr()) != nullptr)) {
			_case_begin_2299c3007:;
			{
				return _2299cb95b_annotate_constraint_elem(&(*_self_), _46043_k);
			}
		}
		else if ((_2455e4a64_map(_46043_k.ptr()) != nullptr)) {
			_case_begin_2299c306d:;
			{
				return _2455a2d63_annotate_constraint_map(&(*_self_), _46043_k);
			}
		}
		else if ((_2455e4327_fnc(_46043_k.ptr()) != nullptr)) {
			_case_begin_2299c30d4:;
			{
				return _2455a34c3_annotate_constraint_fn(&(*_self_), _46043_k);
			}
		}
		else if ((_2455e4cc8_tup(_46043_k.ptr()) != nullptr)) {
			_case_begin_2299c314a:;
			{
				return _2455a31a4_annotate_constraint_tup(&(*_self_), _46043_k);
			}
		}
		else {
			_case_begin_2299c2e5d:;
			{
				return false;
			}
		}
		_match_end_2299c2e08:;
	};
}



inline void _2455a3e41_push_generic(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _48536_k, jule::I32 _48550_i) {
	(*_self_)._field_f.get()._field_generics[_48550_i]=jule::new_ptr<_2455de7ea_InsGeneric>(_2455de7ea_InsGeneric{._field_kind=_48536_k, });
	jule::Ptr<_2448657b9_GenericDecl> _48717_gd = (*_self_)._field_f.get()._field_decl.get()._field_generics[_48550_i];;
	if (((_48717_gd.get()._field_constraint == nullptr) || (_48717_gd.get()._field_constraint.get()._field_mask.len() != 1LL))) {
		return;;
	};
	(*_self_)._field_c=_48717_gd.get()._field_constraint.get()._field_mask[0LL];
	_2455a3b22_annotate_constraint(&(*_self_), _48536_k);
}



inline jule::Bool _2455a424e_annotate_prim(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _49544_k) {
	jule::Bool _49560_ok = jule::Bool();
	_49560_ok = _2455a6075_annotate_any(&(*_self_), _49544_k);
	return _49560_ok;
}



inline jule::Bool _2455a455c_annotate_arr(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _49943_k) {
	jule::Bool _49959_ok = jule::Bool();
	jule::Ptr<_2455ebd8a_Arr> _50017_parr = _2455e3d4e_arr((*((*_self_)._field_k)).ptr());;
	if ((_50017_parr == nullptr)) {
		_49959_ok = false;
		return _49959_ok;
	};
	jule::Ptr<_2455ebd8a_Arr> _50417_arr = _2455e3d4e_arr(_49943_k.ptr());;
	(*_self_)._field_k=(&(_50017_parr.get()._field_elem));
	_49959_ok = _2455a6383_annotate_kind(&(*_self_), _50417_arr.get()._field_elem);
	return _49959_ok;
}



inline jule::Bool _2455a486a_annotate_slc(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _50943_k) {
	jule::Bool _50959_ok = jule::Bool();
	jule::Ptr<_2455e9be0_Slc> _51017_pslc = _2455e40b3_slc((*((*_self_)._field_k)).ptr());;
	if ((_51017_pslc == nullptr)) {
		_50959_ok = false;
		return _50959_ok;
	};
	jule::Ptr<_2455e9be0_Slc> _51417_slc = _2455e40b3_slc(_50943_k.ptr());;
	(*_self_)._field_k=(&(_51017_pslc.get()._field_elem));
	_50959_ok = _2455a6383_annotate_kind(&(*_self_), _51417_slc.get()._field_elem);
	return _50959_ok;
}



inline jule::Bool _2455a4c22_check_map_key(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>* _51943_k, jule::Ptr<_2455e1027_TypeKind>& _51963_ck) {
	jule::Bool _51980_ok = jule::Bool();
	jule::Ptr<_2455e1027_TypeKind>* _52017_old = (*_self_)._field_k;;
	(*_self_)._field_k=_51943_k;
	_51980_ok=_2455a6383_annotate_kind(&(*_self_), _51963_ck);
	(*_self_)._field_k=_52017_old;
	return _51980_ok;
}



inline jule::Bool _2455a5030_annotate_map(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _52743_k) {
	jule::Bool _52759_ok = jule::Bool();
	jule::Ptr<_2455eb296_Map> _52817_pmap = _2455e4a64_map((*((*_self_)._field_k)).ptr());;
	if ((_52817_pmap == nullptr)) {
		_52759_ok = false;
		return _52759_ok;
	};
	jule::Ptr<_2455eb296_Map> _53217_m = _2455e4a64_map(_52743_k.ptr());;
	_52759_ok = (_2455a4c22_check_map_key(&(*_self_), (&(_52817_pmap.get()._field_key)),_53217_m.get()._field_key) && _2455a4c22_check_map_key(&(*_self_), (&(_52817_pmap.get()._field_val)),_53217_m.get()._field_val));
	return _52759_ok;
}



inline jule::Bool _2455a533d_annotate_fn(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _53742_k) {
	jule::Bool _53758_ok = jule::Bool();
	jule::Ptr<_2449299b0_FnIns> _53817_pf = _2455e4327_fnc((*((*_self_)._field_k)).ptr());;
	if ((_53817_pf == nullptr)) {
		_53758_ok = false;
		return _53758_ok;
	};
	jule::Ptr<_2449299b0_FnIns> _54217_f = _2455e4327_fnc(_53742_k.ptr());;
	{
		
		if ((_53817_pf.get()._field_params.len() != _54217_f.get()._field_params.len())) {
			_case_begin_2299e06ea:;
			{
				_53758_ok = false;
				return _53758_ok;
			}
		}
		else if ((_244927271_is_void(_53817_pf.get()._field_decl.ptr()) != _244927271_is_void(_54217_f.get()._field_decl.ptr()))) {
			_case_begin_2299e0772:;
			{
				_53758_ok = false;
				return _53758_ok;
			}
		}
		_match_end_2299e0673:;
	};
	_53758_ok=true;
	jule::Ptr<_2455e1027_TypeKind>* _55117_old = (*_self_)._field_k;;
	{
		auto &expr = _54217_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_2299e2158:;
		if (it != expr.end()) {
			jule::I32 _55214_i = it - expr.begin();
			jule::Ptr<_244928ae1_ParamIns> _55221_fp = *it;
			{
				(*_self_)._field_k=(&(_53817_pf.get()._field_params[_55214_i].get()._field_kind));
				_53758_ok=(_2455a6383_annotate_kind(&(*_self_), _55221_fp.get()._field_kind) && _53758_ok);
			}
			_iter_next_2299e2158:;
			++it;
			_55214_i++;
			goto _iter_begin_2299e2158;
		}
		_iter_end_2299e2158:;
	};
	if ((!(_244927271_is_void(_53817_pf.get()._field_decl.ptr())))) {
		(*_self_)._field_k=(&(_53817_pf.get()._field_result));
		_53758_ok=(_2455a6383_annotate_kind(&(*_self_), _54217_f.get()._field_result) && _53758_ok);
	};
	(*_self_)._field_k=_55117_old;
	return _53758_ok;
}



inline jule::Bool _2455a564b_annotate_ptr(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _56643_k) {
	jule::Bool _56659_ok = jule::Bool();
	jule::Ptr<_2455ec7e7_Ptr> _56717_pptr = _2455e3612_ptr((*((*_self_)._field_k)).ptr());;
	if ((_56717_pptr == nullptr)) {
		_56659_ok = false;
		return _56659_ok;
	};
	jule::Ptr<_2455ec7e7_Ptr> _57117_ptr = _2455e3612_ptr(_56643_k.ptr());;
	(*_self_)._field_k=(&(_56717_pptr.get()._field_elem));
	_56659_ok = _2455a6383_annotate_kind(&(*_self_), _57117_ptr.get()._field_elem);
	return _56659_ok;
}



inline jule::Bool _2455a5959_annotate_sptr(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _57644_k) {
	jule::Bool _57660_ok = jule::Bool();
	jule::Ptr<_2455e9283_Sptr> _57717_ssptr = _2455e339d_sptr((*((*_self_)._field_k)).ptr());;
	if ((_57717_ssptr == nullptr)) {
		_57660_ok = false;
		return _57660_ok;
	};
	jule::Ptr<_2455e9283_Sptr> _58117_sptr = _2455e339d_sptr(_57644_k.ptr());;
	(*_self_)._field_k=(&(_57717_ssptr.get()._field_elem));
	_57660_ok = _2455a6383_annotate_kind(&(*_self_), _58117_sptr.get()._field_elem);
	return _57660_ok;
}



inline jule::Bool _2455a5c67_annotate_struct(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _58646_k) {
	jule::Bool _58662_ok = jule::Bool();
	jule::Ptr<_244874c5c_StructIns> _58717_s = _2455e458b_strct((*((*_self_)._field_k)).ptr());;
	if ((_58717_s == nullptr)) {
		_58662_ok = false;
		return _58662_ok;
	};
	jule::Ptr<_244874c5c_StructIns> _59117_s2 = _2455e458b_strct(_58646_k.ptr());;
	if ((_58717_s.get()._field_generics.len() != _59117_s2.get()._field_generics.len())) {
		_58662_ok = false;
		return _58662_ok;
	};
	{
		auto &expr = _58717_s.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_2299eaa79:;
		if (it != expr.end()) {
			jule::I32 _59514_i = it - expr.begin();
			jule::Ptr<_2455de7ea_InsGeneric> _59521_g = *it;
			{
				jule::Ptr<_2455de7ea_InsGeneric> _59621_g2 = _59117_s2.get()._field_generics[_59514_i];;
				if (_2455e1731_equals(_59521_g.get()._field_kind, _59621_g2.get()._field_kind)) {
					goto _iter_next_2299eaa79;
				};
				(*_self_)._field_k=(&(_59521_g.get()._field_kind));
				if ((!(_2455a6383_annotate_kind(&(*_self_), _59621_g2.get()._field_kind)))) {
					_58662_ok = false;
					return _58662_ok;
				};
			}
			_iter_next_2299eaa79:;
			++it;
			_59514_i++;
			goto _iter_begin_2299eaa79;
		}
		_iter_end_2299eaa79:;
	};
	_58662_ok = true;
	return _58662_ok;
}



inline jule::Bool _2455a6075_annotate_any(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _60843_k) {
	jule::Bool _60859_ok = jule::Bool();
	jule::Str _60913_kind = _2455e1423_to_str((*((*_self_)._field_k)).ptr());;
	{
		auto &expr = (*_self_)._field_f.get()._field_decl.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_2299ed9d3:;
		if (it != expr.end()) {
			jule::I32 _61013_i = it - expr.begin();
			jule::Ptr<_2448657b9_GenericDecl> _61016_g = *it;
			{
				if ((_60913_kind != _61016_g.get()._field_ident)) {
					goto _iter_next_2299ed9d3;
				};
				jule::Ptr<_2455de7ea_InsGeneric> _61517_t = (*_self_)._field_f.get()._field_generics[_61013_i];;
				{
					
					if ((_61517_t == nullptr) || (_61517_t.get()._field_kind == nullptr)) {
						_case_begin_229a005b7:;
						{
							_2455a3e41_push_generic(&(*_self_), _60843_k,_61013_i);
						}
					}
					else if ((!(_2455e1731_equals(_61517_t.get()._field_kind, _60843_k)))) {
						_case_begin_229a0063e:;
						{
							_60859_ok = false;
							return _60859_ok;
						}
					}
					_match_end_229a00474:;
				};
				(*((*_self_)._field_k)).get()._field_kind=_60843_k.get()._field_kind;
				_60859_ok = true;
				return _60859_ok;
			}
			_iter_next_2299ed9d3:;
			++it;
			_61013_i++;
			goto _iter_begin_2299ed9d3;
		}
		_iter_end_2299ed9d3:;
	};
	_60859_ok = false;
	return _60859_ok;
}



inline jule::Bool _2455a6383_annotate_kind(_2455a2428_DynamicTypeAnnotation* _self_, jule::Ptr<_2455e1027_TypeKind>& _63144_k) {
	jule::Bool _63160_ok = jule::Bool();
	if ((((*_self_)._field_k == nullptr) || ((*((*_self_)._field_k)) == nullptr))) {
		return _63160_ok;
	};
	{
		
		if (_2455a6075_annotate_any(&(*_self_), _63144_k)) {
			_case_begin_229a03653:;
			{
				_63160_ok = true;
				return _63160_ok;
			}
		}
		else if ((_2455e3139_prim(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a036b9:;
			{
				_63160_ok = _2455a424e_annotate_prim(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else if ((_2455e3d4e_arr(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a03367:;
			{
				_63160_ok = _2455a455c_annotate_arr(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else if ((_2455e40b3_slc(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a033cd:;
			{
				_63160_ok = _2455a486a_annotate_slc(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else if ((_2455e4a64_map(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a03444:;
			{
				_63160_ok = _2455a5030_annotate_map(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else if ((_2455e4327_fnc(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a02e6b:;
			{
				_63160_ok = _2455a533d_annotate_fn(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else if ((_2455e3612_ptr(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a02ed2:;
			{
				_63160_ok = _2455a564b_annotate_ptr(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else if ((_2455e339d_sptr(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a03048:;
			{
				_63160_ok = _2455a5959_annotate_sptr(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else if ((_2455e458b_strct(_63144_k.ptr()) != nullptr)) {
			_case_begin_229a030ae:;
			{
				_63160_ok = _2455a5c67_annotate_struct(&(*_self_), _63144_k);
				return _63160_ok;
			}
		}
		else {
			_case_begin_229a02e05:;
			{
				_63160_ok = false;
				return _63160_ok;
			}
		}
		_match_end_229a02da0:;
	};
}



inline jule::Bool _2455a65e7_annotate(_2455a2428_DynamicTypeAnnotation* _self_) {
	jule::Bool _65936_ok = jule::Bool();
	(*_self_)._field_k=(&((*_self_)._field_p.get()._field_kind));
	_65936_ok = _2455a6383_annotate_kind(&(*_self_), (*_self_)._field_a.get()._field_kind);
	return _65936_ok;
}







std::ostream &operator<<(std::ostream &_Stream, _2455a2428_DynamicTypeAnnotation _Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k << ", ";
	_Stream << "c:" << _Src._field_c;
	_Stream << "}";
	return _Stream;
}



inline void _2455a731d_push_err_token(_2455a6cbd_FnCallArgChecker* _self_, jule::Ptr<_2431e4523_Token> _67533_token, jule::Str _67548_fmt, jule::Slice<jule::Any> _67561_args) {
	_245553bc1_push_err((*_self_)._field_e.get()._field_s.ptr(), _67533_token,_67548_fmt,jule::Any(_67561_args));
}



inline void _2455a763c_push_err(_2455a6cbd_FnCallArgChecker* _self_, jule::Str _67927_fmt, jule::Slice<jule::Any> _67940_args) {
	_2455a731d_push_err_token(&(*_self_), (*_self_)._field_error_token,_67927_fmt,jule::Any(_67940_args));
}



inline jule::Slice<jule::Ptr<_244928ae1_ParamIns>> _2455a78a1_get_params(_2455a6cbd_FnCallArgChecker* _self_) {
	if (((((*_self_)._field_f.get()._field_params.len() > 0LL) && ((*_self_)._field_f.get()._field_params[0LL].get()._field_decl != nullptr)) && _244925aee_is_self((*_self_)._field_f.get()._field_params[0LL].get()._field_decl.ptr()))) {
		return (*_self_)._field_f.get()._field_params.slice(1LL);
	};
	return (*_self_)._field_f.get()._field_params;
}



inline jule::Bool _2455a7bae_check_counts(_2455a6cbd_FnCallArgChecker* _self_, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>& _69232_params) {
	jule::Bool _69255_ok = jule::Bool();
	jule::I32 _69317_n = _69232_params.len();;
	if (((_69317_n > 0LL) && _244925aee_is_self(_69232_params[0LL].get()._field_decl.ptr()))) {
		(_69317_n)--;
	};
	jule::I32 _69817_diff = (_69317_n - (*_self_)._field_args.len());;
	{
		
		if ((_69817_diff == 0LL)) {
			_case_begin_229a0ec03:;
			{
				_69255_ok = true;
				return _69255_ok;
			}
		}
		else if (((_69317_n > 0LL) && _69232_params[(_69317_n - 1LL)].get()._field_decl.get()._field_variadic)) {
			_case_begin_229a0ec69:;
			{
				_69255_ok = true;
				return _69255_ok;
			}
		}
		else if (((_69817_diff < 0LL) || (_69817_diff > _69232_params.len()))) {
			_case_begin_229a0ecd0:;
			{
				_2455a763c_push_err(&(*_self_), jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				_69255_ok = false;
				return _69255_ok;
			}
		}
		_match_end_229a0eb59:;
	};
	jule::Str _70917_idents = jule::Str();;
	for (; (_69817_diff > 0LL); (_69817_diff)--) {
		{
			_70917_idents+=(jule::Str(", ", 2) + _69232_params[(_69317_n - _69817_diff)].get()._field_decl.get()._field_ident);
		}
	_iter_next_229a11d7b:;
	}
	_iter_end_229a11d7b:;;
	(_70917_idents).mut_slice(2LL);;
	_2455a763c_push_err(&(*_self_), jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(_70917_idents)}));
	_69255_ok = false;
	return _69255_ok;
}



inline jule::Bool _2455a8110_check_arg(_2455a6cbd_FnCallArgChecker* _self_, jule::Ptr<_244928ae1_ParamIns>& _71933_p, jule::Ptr<_2455b5051_Data>& _71952_arg, jule::Ptr<_2431e4523_Token>& _71969_error_token) {
	jule::Bool _71992_ok = jule::Bool();
	if (((*_self_)._field_dynamic_annotation && _24492bae4_parameter_uses_generics(_71933_p.get()._field_decl,(*_self_)._field_f.get()._field_decl.get()._field_generics))) {
		_71992_ok=(!(_71933_p.get()._field_decl.get()._field_variadic));
		if (_71992_ok) {
			_2455a2428_DynamicTypeAnnotation _72325_dta = _2455a2428_DynamicTypeAnnotation{._field_e=(*_self_)._field_e, ._field_f=(*_self_)._field_f, ._field_p=_71933_p, ._field_a=_71952_arg, ._field_error_token=_71969_error_token, };;
			_71992_ok=_2455a65e7_annotate(&_72325_dta);
		};
		if ((!(_71992_ok))) {
			_2455a731d_push_err_token(&(*_self_), _71969_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
			_71992_ok = false;
			return _71992_ok;
		};
	};
	if (_24555c5e2_check_validity_for_init_expr((*_self_)._field_e.get()._field_s, _71933_p.get()._field_decl.get()._field_mutable,_71933_p.get()._field_decl.get()._field_reference,_71933_p.get()._field_kind,_71952_arg,_71969_error_token)) {
		_2455597cb_check_assign_type((*_self_)._field_e.get()._field_s, _71933_p.get()._field_decl.get()._field_reference,_71933_p.get()._field_kind,_71952_arg,_71969_error_token);
	};
	_71992_ok = true;
	return _71992_ok;
}



inline jule::Bool _2455a84b7_push(_2455a6cbd_FnCallArgChecker* _self_, jule::Ptr<_244928ae1_ParamIns>& _74628_p, jule::Ptr<_24485c706_Expr> _74646_arg) {
	jule::Bool _74660_ok = jule::Bool();
	jule::Ptr<_2455e1027_TypeKind> _74717_old = (*_self_)._field_e.get()._field_prefix;;
	jule::Bool _74813_old_immut = (*_self_)._field_e.get()._field_immutable;;
	jule::Ptr<_2455b5051_Data> _74917_d = nullptr;;
	(*_self_)._field_e.get()._field_immutable=(!(_74628_p.get()._field_decl.get()._field_mutable));
	if (((!((*_self_)._field_dynamic_annotation)) && (!(_74628_p.get()._field_decl.get()._field_variadic)))) {
		(*_self_)._field_e.get()._field_prefix=_74628_p.get()._field_kind;
	} else {
		(*_self_)._field_e.get()._field_prefix=nullptr;
	};
	_74917_d=_2455d20c3_eval_expr_kind((*_self_)._field_e, _74646_arg.get()._field_kind);
	(*_self_)._field_e.get()._field_prefix=_74717_old;
	(*_self_)._field_e.get()._field_immutable=_74813_old_immut;
	if ((_74917_d == nullptr)) {
		_74660_ok = false;
		return _74660_ok;
	};
	_74660_ok=_2455a8110_check_arg(&(*_self_), _74628_p,_74917_d,_74646_arg.get()._field_token);
	(*_self_)._field_arg_models = jule::alloc_for_append((*_self_)._field_arg_models,1);(*_self_)._field_arg_models.__push(_74917_d.get()._field_model);;
	return _74660_ok;
}



inline jule::Bool _2455a886e_push_variadic(_2455a6cbd_FnCallArgChecker* _self_, jule::Ptr<_244928ae1_ParamIns>& _77137_p, jule::I32 _77155_i) {
	jule::Bool _77165_ok = jule::Bool();
	_77165_ok=true;
	jule::Bool _77317_variadiced = false;;
	jule::Bool _77413_more = ((_77155_i + 1LL) < (*_self_)._field_args.len());;
	jule::Ptr<_2449208eb_SliceExprModel> _77517_model = jule::new_ptr<_2449208eb_SliceExprModel>(_2449208eb_SliceExprModel{._field_elem_kind=_77137_p.get()._field_kind, });;
	jule::Ptr<_2455e1027_TypeKind> _77917_old = (*_self_)._field_e.get()._field_prefix;;
	jule::Bool _78413_variadic = _77137_p.get()._field_kind.get()._field_variadic;;
	_77137_p.get()._field_kind.get()._field_variadic=false;
	__JULE_DEFER({
		_77137_p.get()._field_kind.get()._field_variadic=_78413_variadic;
	});;
	for (; (_77155_i < (*_self_)._field_args.len()); (_77155_i)++) {
		{
			jule::Ptr<_24485c706_Expr> _79121_arg = (*_self_)._field_args[_77155_i];;
			{
				auto &_match_expr{ _79121_arg.get()._field_kind };
				
				if (_match_expr.type_is<jule::Ptr<_244860330_VariadicExpr>>()) {
					_case_begin_229a2050a:;
					{
						(*_self_)._field_e.get()._field_prefix=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9be0_Slc>(_2455e9be0_Slc{._field_elem=_77137_p.get()._field_kind}), 8)});
					}
				}
				else {
					_case_begin_229a20e23:;
					{
						(*_self_)._field_e.get()._field_prefix=_77137_p.get()._field_kind;
					}
				}
				_match_end_229a20dbd:;
			};
			jule::Ptr<_2455b5051_Data> _80421_d = _2455d23d1_eval((*_self_)._field_e, _79121_arg);;
			if ((_80421_d == nullptr)) {
				_77165_ok=false;
				goto _iter_next_229a1e9e3;
			};
			if (_80421_d.get()._field_kind.get()._field_variadic) {
				_77317_variadiced=true;
				_77137_p.get()._field_kind.get()._field_variadic=true;
				_77165_ok=(_77165_ok && _2455a8110_check_arg(&(*_self_), _77137_p,_80421_d,_79121_arg.get()._field_token));
				{
					auto &_match_expr{ _80421_d.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_2449208eb_SliceExprModel>>()) {
						_case_begin_229a23145:;
						{
							_77517_model=_80421_d.get()._field_model.operator jule::Ptr<_2449208eb_SliceExprModel>();
							_77517_model.get()._field_elem_kind=_77137_p.get()._field_kind;
						}
					}
					else {
						_case_begin_229a23e8c:;
						{
							_77517_model=nullptr;
							(*_self_)._field_arg_models = jule::alloc_for_append((*_self_)._field_arg_models,1);(*_self_)._field_arg_models.__push(_80421_d.get()._field_model);;
						}
					}
					_match_end_229a23c28:;
				};
				(_77155_i)++;
				goto _iter_end_229a1e9e3;
			};
			_77165_ok=(_77165_ok && _2455a8110_check_arg(&(*_self_), _77137_p,_80421_d,_79121_arg.get()._field_token));
			_77517_model.get()._field_elems = jule::alloc_for_append(_77517_model.get()._field_elems,1);_77517_model.get()._field_elems.__push(_80421_d.get()._field_model);;
		}
	_iter_next_229a1e9e3:;
	}
	_iter_end_229a1e9e3:;;
	(*_self_)._field_e.get()._field_prefix=_77917_old;
	if ((_77317_variadiced && _77413_more)) {
		_2455a731d_push_err_token(&(*_self_), (*_self_)._field_args[_77155_i].get()._field_token,jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>());
	};
	if ((_77517_model != nullptr)) {
		(*_self_)._field_arg_models = jule::alloc_for_append((*_self_)._field_arg_models,1);(*_self_)._field_arg_models.__push(static_cast<jule::Any>(_77517_model));;
	};
	return _77165_ok;
}



inline jule::Bool _2455a8b7c_check_args(_2455a6cbd_FnCallArgChecker* _self_, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>& _84734_params) {
	jule::Bool _84757_ok = jule::Bool();
	jule::Bool _84813_arg = (*_self_)._field_e.get()._field_arg;;
	(*_self_)._field_e.get()._field_arg=true;
	_84757_ok=true;
	jule::I32 _85217_i = 0LL;;
	if (((_84734_params.len() > 0LL) && _244925aee_is_self(_84734_params[0LL].get()._field_decl.ptr()))) {
		(_85217_i)++;
	};
	_julec_label_iter:;
	while ((_85217_i < _84734_params.len())) {
		{
			jule::Ptr<_244928ae1_ParamIns> _85921_p = _84734_params[_85217_i];;
			{
				
				if (_85921_p.get()._field_decl.get()._field_variadic) {
					_case_begin_229a2ac52:;
					{
						_84757_ok=(_2455a886e_push_variadic(&(*_self_), _85921_p,_85217_i) && _84757_ok);
						goto _iter_end_229a28a85;
					}
				}
				else if (((*_self_)._field_args.len() <= _85217_i)) {
					_case_begin_229a2a58c:;
					{
						_84757_ok=false;
						goto _iter_end_229a28a85;
					}
				}
				else {
					_case_begin_229a2a1d5:;
					{
						_84757_ok=(_2455a84b7_push(&(*_self_), _85921_p,(*_self_)._field_args[_85217_i]) && _84757_ok);
					}
				}
				_match_end_229a2a16e:;
			};
			(_85217_i)++;
		}
	_iter_next_229a28a85:;
	}
	_iter_end_229a28a85:;;
	(*_self_)._field_e.get()._field_arg=_84813_arg;
	return _84757_ok;
}



inline jule::Bool _2455a8e13_check_dynamic_type_annotation(_2455a6cbd_FnCallArgChecker* _self_) {
	jule::Bool _87850_ok = jule::Bool();
	{
		auto &expr = (*_self_)._field_f.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_229a2c5c2:;
		if (it != expr.end()) {
			jule::Ptr<_2455de7ea_InsGeneric> _87916_g = *it;
			{
				if ((_87916_g == nullptr)) {
					_2455a763c_push_err(&(*_self_), jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
					_87850_ok = false;
					return _87850_ok;
				};
			}
			_iter_next_229a2c5c2:;
			++it;
			goto _iter_begin_229a2c5c2;
		}
		_iter_end_229a2c5c2:;
	};
	_87850_ok = true;
	return _87850_ok;
}



inline jule::Bool _2455a9188_check(_2455a6cbd_FnCallArgChecker* _self_) {
	jule::Bool _88826_ok = jule::Bool();
	jule::Slice<jule::Ptr<_244928ae1_ParamIns>> _88917_params = _2455a78a1_get_params(&(*_self_));;
	_88826_ok=_2455a7bae_check_counts(&(*_self_), _88917_params);
	if ((!(_88826_ok))) {
		_88826_ok = false;
		return _88826_ok;
	};
	_88826_ok=_2455a8b7c_check_args(&(*_self_), _88917_params);
	if ((_88826_ok && (*_self_)._field_dynamic_annotation)) {
		_88826_ok=_2455a8e13_check_dynamic_type_annotation(&(*_self_));
	};
	return _88826_ok;
}







std::ostream &operator<<(std::ostream &_Stream, _2455a6cbd_FnCallArgChecker _Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _2455a9bd3_push_err(_2455a96c7_StructLitChecker* _self_, jule::Ptr<_2431e4523_Token> _91227_token, jule::Str _91242_fmt, jule::Slice<jule::Any> _91255_args) {
	_2455b70ca_push_err((*_self_)._field_e.ptr(), _91227_token,_91242_fmt,jule::Any(_91255_args));
}



inline void _2455aa002_push_suggestion(_2455a96c7_StructLitChecker* _self_, jule::Str _91734_fmt, jule::Slice<jule::Any> _91747_args) {
	_2455b73e9_push_suggestion((*_self_)._field_e.ptr(), _91734_fmt,jule::Any(_91747_args));
}



inline void _2455aa3ba_push_match(_2455a96c7_StructLitChecker* _self_, jule::Ptr<_244851079_FieldIns>& _92134_f, jule::Ptr<_2455b5051_Data>& _92153_d, jule::Ptr<_2431e4523_Token>& _92168_error_token) {
	;
	if (_24555c5e2_check_validity_for_init_expr((*_self_)._field_e.get()._field_s, (!((*_self_)._field_e.get()._field_immutable)),false,_92134_f.get()._field_kind,_92153_d,_92168_error_token)) {
		_2455597cb_check_assign_type((*_self_)._field_e.get()._field_s, false,_92134_f.get()._field_kind,_92153_d,_92168_error_token);
	};
	(*_self_)._field_args = jule::alloc_for_append((*_self_)._field_args,1);(*_self_)._field_args.__push(jule::new_ptr<_24491ee5b_StructArgExprModel>(_24491ee5b_StructArgExprModel{._field_field=_92134_f, ._field_expr=_92153_d.get()._field_model}));;
}



inline void _2455aa6d9_check_pair(_2455a96c7_StructLitChecker* _self_, jule::Ptr<_244862453_FieldExprPair>& _93434_pair, jule::Slice<jule::Ptr<_24485c706_Expr>>& _93461_exprs) {
	jule::Ptr<_244851079_FieldIns> _93617_f = _2448528e9_find_field((*_self_)._field_s.ptr(), _93434_pair.get()._field_field.get()._field_kind);;
	if ((_93617_f == nullptr)) {
		_2455a9bd3_push_err(&(*_self_), _93434_pair.get()._field_field,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_93434_pair.get()._field_field.get()._field_kind)}));
		return;;
	};
	if ((!(_245554397_is_accessible_define((*_self_)._field_e.get()._field_s.ptr(), _93617_f.get()._field_decl.get()._field_public,_93617_f.get()._field_decl.get()._field_token)))) {
		_2455a9bd3_push_err(&(*_self_), _93434_pair.get()._field_field,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_93434_pair.get()._field_field.get()._field_kind)}));
		_2455aa002_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	};
	_julec_label_dup_lookup:;
	{
		auto &expr = _93461_exprs;
		auto it = expr.begin();
		_iter_begin_229a37676:;
		if (it != expr.end()) {
			jule::Ptr<_24485c706_Expr> _94821_expr = *it;
			{
				{
					auto &_match_expr{ _94821_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_244862453_FieldExprPair>>()) {
						_case_begin_229a38039:;
						{
							jule::Ptr<_244862453_FieldExprPair> _95125_dpair = _94821_expr.get()._field_kind.operator jule::Ptr<_244862453_FieldExprPair>();;
							{
								
								if ((_93434_pair == _95125_dpair)) {
									_case_begin_229a39007:;
									{
										goto _iter_end_229a37676;
									}
								}
								else if ((_93434_pair.get()._field_field.get()._field_kind == _95125_dpair.get()._field_field.get()._field_kind)) {
									_case_begin_229a3907e:;
									{
										_2455a9bd3_push_err(&(*_self_), _93434_pair.get()._field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>::make({jule::Any(_93434_pair.get()._field_field.get()._field_kind)}));
										goto _iter_end_229a37676;
									}
								}
								_match_end_229a38e4c:;
							};
						}
					}
					_match_end_229a37d80:;
				};
			}
			_iter_next_229a37676:;
			++it;
			goto _iter_begin_229a37676;
		}
		_iter_end_229a37676:;
	};
	jule::Ptr<_2455e1027_TypeKind> _96217_prefix = (*_self_)._field_e.get()._field_prefix;;
	__JULE_DEFER({
		(*_self_)._field_e.get()._field_prefix=_96217_prefix;
	});;
	(*_self_)._field_e.get()._field_prefix=_93617_f.get()._field_kind;
	jule::Ptr<_2455b5051_Data> _96617_d = _2455d20c3_eval_expr_kind((*_self_)._field_e, _93434_pair.get()._field_expr.get()._field_kind);;
	if ((_96617_d == nullptr)) {
		return;;
	};
	_2455aa3ba_push_match(&(*_self_), _93617_f,_96617_d,_93434_pair.get()._field_field);
}



inline jule::Bool _2455aa9e7_ready_exprs(_2455a96c7_StructLitChecker* _self_, jule::Slice<jule::Ptr<_24485c706_Expr>>& _97335_exprs) {
	jule::Bool _97417_ok = true;;
	{
		auto &expr = _97335_exprs;
		auto it = expr.begin();
		_iter_begin_229a3ca44:;
		if (it != expr.end()) {
			jule::I32 _97514_i = it - expr.begin();
			jule::Ptr<_24485c706_Expr> _97521_expr = *it;
			{
				{
					auto &_match_expr{ _97521_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_244863b3b_KeyValPair>>()) {
						_case_begin_229a3d79d:;
						{
							jule::Ptr<_244863b3b_KeyValPair> _97825_pair = _97521_expr.get()._field_kind.operator jule::Ptr<_244863b3b_KeyValPair>();;
							{
								auto &_match_expr{ _97825_pair.get()._field_key.get()._field_kind };
								
								if (_match_expr.type_is<jule::Ptr<_24485e76e_IdentExpr>>()) {
									_case_begin_229a3e13e:;
									{
										goto _match_end_229a3e5c3;
									}
								}
								else {
									_case_begin_229a3e848:;
									{
										_2455a9bd3_push_err(&(*_self_), _97825_pair.get()._field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
										_97417_ok=false;
										goto _iter_next_229a3ca44;
									}
								}
								_match_end_229a3e5c3:;
							};
							_97335_exprs[_97514_i].get()._field_kind=static_cast<jule::Any>(jule::new_ptr<_244862453_FieldExprPair>(_244862453_FieldExprPair{._field_field=_97825_pair.get()._field_key.get()._field_token, ._field_expr=_97825_pair.get()._field_val}));
						}
					}
					_match_end_229a3d5e4:;
				};
			}
			_iter_next_229a3ca44:;
			++it;
			_97514_i++;
			goto _iter_begin_229a3ca44;
		}
		_iter_end_229a3ca44:;
	};
	return _97417_ok;
}



inline void _2455aac6c_check(_2455a96c7_StructLitChecker* _self_, jule::Slice<jule::Ptr<_24485c706_Expr>>& _99729_exprs) {
	if ((_99729_exprs.len() == 0LL)) {
		return;;
	};
	if ((!(_2455aa9e7_ready_exprs(&(*_self_), _99729_exprs)))) {
		return;;
	};
	jule::Bool _100617_paired = false;;
	{
		auto &expr = _99729_exprs;
		auto it = expr.begin();
		_iter_begin_229a3c8ce:;
		if (it != expr.end()) {
			jule::I32 _100714_i = it - expr.begin();
			jule::Ptr<_24485c706_Expr> _100721_expr = *it;
			{
				{
					auto &_match_expr{ _100721_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_244862453_FieldExprPair>>()) {
						_case_begin_229a47be7:;
						{
							jule::Ptr<_244862453_FieldExprPair> _101025_pair = _100721_expr.get()._field_kind.operator jule::Ptr<_244862453_FieldExprPair>();;
							if (((_100714_i > 0LL) && (!(_100617_paired)))) {
								_2455a9bd3_push_err(&(*_self_), _101025_pair.get()._field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							};
							_100617_paired=true;
							_2455aa6d9_check_pair(&(*_self_), _101025_pair,_99729_exprs);
						}
					}
					else {
						_case_begin_229a42ad2:;
						{
							if (_100617_paired) {
								_2455a9bd3_push_err(&(*_self_), _100721_expr.get()._field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>());
							};
							if ((_100714_i >= (*_self_)._field_s.get()._field_fields.len())) {
								_2455a9bd3_push_err(&(*_self_), _100721_expr.get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
								goto _iter_next_229a3c8ce;
							};
							jule::Ptr<_244851079_FieldIns> _102525_field = (*_self_)._field_s.get()._field_fields[_100714_i];;
							if ((!(_245554397_is_accessible_define((*_self_)._field_e.get()._field_s.ptr(), _102525_field.get()._field_decl.get()._field_public,_102525_field.get()._field_decl.get()._field_token)))) {
								_2455a9bd3_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("structure cannot instantiating because it has non-public fields", 63),jule::Slice<jule::Any>());
								_2455aa002_push_suggestion(&(*_self_), jule::Str("use field:expression pairs to instantiate", 41),jule::Slice<jule::Any>());
								return;;
							};
							jule::Ptr<_2455e1027_TypeKind> _103325_prefix = (*_self_)._field_e.get()._field_prefix;;
							__JULE_DEFER({
								(*_self_)._field_e.get()._field_prefix=_103325_prefix;
							});;
							(*_self_)._field_e.get()._field_prefix=_102525_field.get()._field_kind;
							jule::Ptr<_2455b5051_Data> _103725_d = _2455d20c3_eval_expr_kind((*_self_)._field_e, _100721_expr.get()._field_kind);;
							if ((_103725_d == nullptr)) {
								goto _iter_next_229a3c8ce;
							};
							_2455aa3ba_push_match(&(*_self_), _102525_field,_103725_d,_100721_expr.get()._field_token);
						}
					}
					_match_end_229a4295b:;
				};
			}
			_iter_next_229a3c8ce:;
			++it;
			_100714_i++;
			goto _iter_begin_229a3c8ce;
		}
		_iter_end_229a3c8ce:;
	};
	if ((!(_100617_paired))) {
		jule::I32 _104817_n = (*_self_)._field_s.get()._field_fields.len();;
		jule::I32 _104921_diff = (_104817_n - _99729_exprs.len());;
		{
			
			if ((_104921_diff <= 0LL)) {
				_case_begin_229a4a5ce:;
				{
					return;;
				}
			}
			_match_end_229a4a47a:;
		};
		jule::Str _105521_idents = jule::Str();;
		for (; (_104921_diff > 0LL); (_104921_diff)--) {
			{
				_105521_idents+=(jule::Str(", ", 2) + (*_self_)._field_s.get()._field_fields[(_104817_n - _104921_diff)].get()._field_decl.get()._field_ident);
			}
		_iter_next_229a4b02a:;
		}
		_iter_end_229a4b02a:;;
		(_105521_idents).mut_slice(2LL);;
		_2455a9bd3_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(_105521_idents)}));
	};
}







std::ostream &operator<<(std::ostream &_Stream, _2455a96c7_StructLitChecker _Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_24556cc1d_Var> _2455ab751_build_var(_2455ab2ab_RangeChecker* _self_, jule::Ptr<_24486aec8_VarDecl>& _107429_decl) {
	jule::Ptr<_24556cc1d_Var> _107517_v = _244932688_build_var(_107429_decl);;
	return _107517_v;
}



inline void _2455ab92c_set_size_key(_2455ab2ab_RangeChecker* _self_) {
	if ((((*_self_)._field_rang.get()._field_key_a == nullptr) || _2431e6cb7_is_ignore_ident((*_self_)._field_rang.get()._field_key_a.get()._field_ident))) {
		return;;
	};
	(*_self_)._field_kind.get()._field_key_a=_2455ab751_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_a);
	(*_self_)._field_kind.get()._field_key_a.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)})});
	{
		auto &_match_expr{ (*_self_)._field_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_229a4ec21:;
			{
				(*_self_)._field_kind.get()._field_key_a.get()._field_iter_relation=jule::new_ptr<_24556bca5_IterRelation>(_24556bca5_IterRelation{._field_range=(*_self_)._field_d.get()._field_model.operator jule::Ptr<_24556cc1d_Var>()});
			}
		}
		_match_end_229a4eb66:;
	};
}



inline void _2455abd17_check_range_expr_validity(_2455ab2ab_RangeChecker* _self_, jule::Ptr<_2455b5051_Data>& _110549_d, jule::Ptr<_24556cc1d_Var>& _110560_key, jule::Ptr<_2455e1027_TypeKind>& _110576_k) {
	jule::Bool _110617__mut = _110560_key.get()._field_mutable;;
	if ((_110617__mut && (!(_2455e2424_mutable(_110576_k.ptr()))))) {
		_110617__mut=false;
	};
	_24555c5e2_check_validity_for_init_expr((*_self_)._field_sc.get()._field_s, _110617__mut,_110560_key.get()._field_reference,_110560_key.get()._field_kind.get()._field_kind,_110549_d,(*_self_)._field_rang.get()._field_in_token);
}



inline void _2455ac004_check_slice(_2455ab2ab_RangeChecker* _self_) {
	_2455ab92c_set_size_key(&(*_self_));
	if ((((*_self_)._field_rang.get()._field_key_b == nullptr) || _2431e6cb7_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident))) {
		return;;
	};
	jule::Ptr<_2455e9be0_Slc> _112417_slc = _2455e40b3_slc((*_self_)._field_d.get()._field_kind.ptr());;
	(*_self_)._field_kind.get()._field_key_b=_2455ab751_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_112417_slc.get()._field_elem});
	_2455abd17_check_range_expr_validity(&(*_self_), (*_self_)._field_d,(*_self_)._field_kind.get()._field_key_b,_112417_slc.get()._field_elem);
}



inline void _2455ac1d0_check_array(_2455ab2ab_RangeChecker* _self_) {
	_2455ab92c_set_size_key(&(*_self_));
	if ((((*_self_)._field_rang.get()._field_key_b == nullptr) || _2431e6cb7_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident))) {
		return;;
	};
	jule::Ptr<_2455ebd8a_Arr> _113717_arr = _2455e3d4e_arr((*_self_)._field_d.get()._field_kind.ptr());;
	(*_self_)._field_kind.get()._field_key_b=_2455ab751_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_113717_arr.get()._field_elem});
	_2455abd17_check_range_expr_validity(&(*_self_), (*_self_)._field_d,(*_self_)._field_kind.get()._field_key_b,_113717_arr.get()._field_elem);
}



inline void _2455ac3ab_check_map_key_a(_2455ab2ab_RangeChecker* _self_) {
	if ((((*_self_)._field_rang.get()._field_key_a == nullptr) || _2431e6cb7_is_ignore_ident((*_self_)._field_rang.get()._field_key_a.get()._field_ident))) {
		return;;
	};
	jule::Ptr<_2455eb296_Map> _114917_m = _2455e4a64_map((*_self_)._field_d.get()._field_kind.ptr());;
	(*_self_)._field_kind.get()._field_key_a=_2455ab751_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_a);
	(*_self_)._field_kind.get()._field_key_a.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_114917_m.get()._field_key});
	jule::Ptr<_2455b5051_Data> _115317_d = jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d)));;
	_115317_d.get()._field_kind=_114917_m.get()._field_key;
	_2455abd17_check_range_expr_validity(&(*_self_), _115317_d,(*_self_)._field_kind.get()._field_key_a,_114917_m.get()._field_key);
}



inline void _2455ac587_check_map_key_b(_2455ab2ab_RangeChecker* _self_) {
	if ((((*_self_)._field_rang.get()._field_key_b == nullptr) || _2431e6cb7_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident))) {
		return;;
	};
	jule::Ptr<_2455eb296_Map> _116417_m = _2455e4a64_map((*_self_)._field_d.get()._field_kind.ptr());;
	(*_self_)._field_kind.get()._field_key_b=_2455ab751_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_116417_m.get()._field_val});
	jule::Ptr<_2455b5051_Data> _116817_d = jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d)));;
	_116817_d.get()._field_kind=_116417_m.get()._field_val;
	_2455abd17_check_range_expr_validity(&(*_self_), _116817_d,(*_self_)._field_kind.get()._field_key_b,_116417_m.get()._field_val);
}



inline void _2455ac763_check_map(_2455ab2ab_RangeChecker* _self_) {
	_2455ac3ab_check_map_key_a(&(*_self_));
	_2455ac587_check_map_key_b(&(*_self_));
}



inline void _2455ac93e_check_str(_2455ab2ab_RangeChecker* _self_) {
	_2455ab92c_set_size_key(&(*_self_));
	if ((((*_self_)._field_rang.get()._field_key_b == nullptr) || _2431e6cb7_is_ignore_ident((*_self_)._field_rang.get()._field_key_b.get()._field_ident))) {
		return;;
	};
	(*_self_)._field_kind.get()._field_key_b=_2455ab751_build_var(&(*_self_), (*_self_)._field_rang.get()._field_key_b);
	(*_self_)._field_kind.get()._field_key_b.get()._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u8", 2)), 6)})});
}



inline jule::Bool _2455acba3_check(_2455ab2ab_RangeChecker* _self_) {
	{
		
		if ((*_self_)._field_d.get()._field_kind.get()._field_variadic) {
			_case_begin_229a637d4:;
		}
		else if ((_2455e40b3_slc((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229a62ad0:;
			{
				_2455ac004_check_slice(&(*_self_));
				return true;
			}
		}
		else if ((_2455e3d4e_arr((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229a62b46:;
			{
				_2455ac1d0_check_array(&(*_self_));
				return true;
			}
		}
		else if ((_2455e4a64_map((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229a62bac:;
			{
				_2455ac763_check_map(&(*_self_));
				return true;
			}
		}
		else {
			_case_begin_229a62a69:;
			{
				jule::Ptr<_2455e59ee_Prim> _120717_prim = _2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr());;
				if (((_120717_prim != nullptr) && _2455e8c33_is_str(_120717_prim.ptr()))) {
					_2455ac93e_check_str(&(*_self_));
					return true;
				};
			}
		}
		_match_end_229a6298c:;
	};
	_245553bc1_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_rang.get()._field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>());
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _2455ab2ab_RangeChecker _Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline void _2455ad8eb_prepare_types(_2455ad445_RetTypeChecker* _self_) {
	if (((*_self_)._field_f != nullptr)) {
		(*_self_)._field_types=_24492aad2_types((*_self_)._field_f.ptr());
	};
}



inline void _2455adb71_prepare_exprs(_2455ad445_RetTypeChecker* _self_, jule::Ptr<_24485c706_Expr>& _123637_e) {
	if ((_123637_e == nullptr)) {
		return;;
	};
	{
		auto &_match_expr{ _123637_e.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485d383_TupleExpr>>()) {
			_case_begin_229a689d7:;
			{
				(*_self_)._field_exprs=_123637_e.get()._field_kind.operator jule::Ptr<_24485d383_TupleExpr>().get()._field_expr;
			}
		}
		else {
			_case_begin_229a68652:;
			{
				(*_self_)._field_exprs = jule::alloc_for_append((*_self_)._field_exprs,1);(*_self_)._field_exprs.__push(_123637_e);;
			}
		}
		_match_end_229a68212:;
	};
}



inline void _2455add4c_ret_vars(_2455ad445_RetTypeChecker* _self_) {
	if ((((*_self_)._field_f == nullptr) || _244927271_is_void((*_self_)._field_f.get()._field_decl.ptr()))) {
		return;;
	};
	(*_self_)._field_vars=jule::Slice<jule::Ptr<_24556cc1d_Var>>::alloc(0LL,(*_self_)._field_f.get()._field_decl.get()._field_result.get()._field_idents.len());
	jule::Ptr<_245531066_ScopeChecker> _125417_root_scope = _245534179_get_root((*_self_)._field_sc);;
	jule::I32 _125617_j = 0LL;;
	{
		auto &expr = (*_self_)._field_f.get()._field_decl.get()._field_result.get()._field_idents;
		auto it = expr.begin();
		_iter_begin_229a6b5de:;
		if (it != expr.end()) {
			jule::I32 _125713_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _125716_ident = *it;
			{
				if (((!(_2431e6cb7_is_ignore_ident(_125716_ident.get()._field_kind))) && (!(_2431e705e_is_anon_ident(_125716_ident.get()._field_kind))))) {
					(*_self_)._field_vars = jule::alloc_for_append((*_self_)._field_vars,1);(*_self_)._field_vars.__push(_125417_root_scope.get()._field_table.get()._field_vars[_125617_j]);;
					(_125617_j)++;
				} else {
					(*_self_)._field_vars = jule::alloc_for_append((*_self_)._field_vars,1);(*_self_)._field_vars.__push(jule::new_ptr<_24556cc1d_Var>(_24556cc1d_Var{._field_ident=jule::Str("_", 1), ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=(*_self_)._field_types[_125713_i]}), }));;
				};
			}
			_iter_next_229a6b5de:;
			++it;
			_125713_i++;
			goto _iter_begin_229a6b5de;
		}
		_iter_end_229a6b5de:;
	};
	if ((_125617_j == 0LL)) {
		(*_self_)._field_vars=nullptr;
	};
}



inline void _2455ae028_check_exprs(_2455ad445_RetTypeChecker* _self_) {
	if (((*_self_)._field_exprs.len() == 0LL)) {
		return;;
	};
	jule::Slice<jule::Ptr<_2455b5051_Data>> _128017_datas = jule::Slice<jule::Ptr<_2455b5051_Data>>::alloc(0LL,(*_self_)._field_exprs.len());;
	{
		auto &expr = (*_self_)._field_exprs;
		auto it = expr.begin();
		_iter_begin_229a7035c:;
		if (it != expr.end()) {
			jule::I32 _128214_i = it - expr.begin();
			jule::Ptr<_24485c706_Expr> _128221_expr = *it;
			{
				if ((_128214_i >= (*_self_)._field_types.len())) {
					goto _iter_end_229a7035c;
				};
				jule::Ptr<_2455e1027_TypeKind> _128721_t = (*_self_)._field_types[_128214_i];;
				jule::Ptr<_2455b5051_Data> _128921_d = _2455d26de_eval_expr(_245558ec3_evalp((*_self_)._field_sc.get()._field_s, jule::Trait<_24560bac0_Lookup>((*_self_)._field_sc, 0),_128721_t), _128221_expr);;
				if ((_128921_d == nullptr)) {
					goto _iter_next_229a7035c;
				};
				_128017_datas = jule::alloc_for_append(_128017_datas,1);_128017_datas.__push(_128921_d);;
				if (((!(_128921_d.get()._field_mutable)) && _2455e2424_mutable(_128921_d.get()._field_kind.ptr()))) {
					_245553bc1_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>());
					return;;
				};
				_2455a0a0e_AssignTypeChecker _130121_ac = _2455a0a0e_AssignTypeChecker{._field_s=(*_self_)._field_sc.get()._field_s, ._field_dest=_128721_t, ._field_d=_128921_d, ._field_error_token=(*_self_)._field_error_token};;
				_2455a1b86_check(&_130121_ac);
			}
			_iter_next_229a7035c:;
			++it;
			_128214_i++;
			goto _iter_begin_229a7035c;
		}
		_iter_end_229a7035c:;
	};
	if ((_128017_datas.len() > 1LL)) {
		(*_self_)._field_model=static_cast<jule::Any>(jule::new_ptr<_244922436_TupleExprModel>(_244922436_TupleExprModel{._field_datas=_128017_datas}));
	} else if ((_128017_datas.len() == 1LL)) {
		(*_self_)._field_model=_128017_datas[0LL].get()._field_model;
	};
}



inline jule::Bool _2455ae336_check(_2455ad445_RetTypeChecker* _self_, jule::Ptr<_24485c706_Expr>& _132029_e) {
	_2455ad8eb_prepare_types(&(*_self_));
	_2455adb71_prepare_exprs(&(*_self_), _132029_e);
	_2455add4c_ret_vars(&(*_self_));
	jule::I32 _132513_n = (*_self_)._field_exprs.len();;
	if (((_132513_n == 0LL) && ((*_self_)._field_types.len() > 0LL))) {
		if ((!(_244927e86_any_var((*_self_)._field_f.get()._field_decl.ptr())))) {
			_245553bc1_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>());
			return false;
		};
		return true;
	};
	if ((((_132513_n > 0LL) && ((*_self_)._field_f != nullptr)) && _244927271_is_void((*_self_)._field_f.get()._field_decl.ptr()))) {
		_245553bc1_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>());
		return false;
	};
	if ((_132513_n > (*_self_)._field_types.len())) {
		_245553bc1_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>());
	} else if ((_132513_n < (*_self_)._field_types.len())) {
		_245553bc1_push_err((*_self_)._field_sc.get()._field_s.ptr(), (*_self_)._field_error_token,jule::Str("missing return expressions for multi-return", 43),jule::Slice<jule::Any>());
	};
	_2455ae028_check_exprs(&(*_self_));
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, _2455ad445_RetTypeChecker _Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_245547db3_ImportInfo> _2455b0810_find_package(_2455b02e3_SymbolTable* _self_, jule::Str _2635_ident) {
	{
		auto &expr = (*_self_)._field_imports;
		auto it = expr.begin();
		_iter_begin_229a7b8eb:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _2721_pkg = *it;
			{
				if ((_2721_pkg.get()._field_ident == _2635_ident)) {
					return _2721_pkg;
				};
			}
			_iter_next_229a7b8eb:;
			++it;
			goto _iter_begin_229a7b8eb;
		}
		_iter_end_229a7b8eb:;
	};
	return nullptr;
}



inline jule::Ptr<_245547db3_ImportInfo> _2455b0b1d_select_package(_2455b02e3_SymbolTable* _self_, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)> _3837_selector) {
	if ((_3837_selector == nullptr)) {
		return nullptr;
	};
	{
		auto &expr = (*_self_)._field_imports;
		auto it = expr.begin();
		_iter_begin_229a7c897:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _4321_pkg = *it;
			{
				if (_3837_selector(_4321_pkg)) {
					return _4321_pkg;
				};
			}
			_iter_next_229a7c897:;
			++it;
			goto _iter_begin_229a7c897;
		}
		_iter_end_229a7c897:;
	};
	return nullptr;
}



inline jule::Ptr<_24556cc1d_Var> _2455b0ec5_find_var(_2455b02e3_SymbolTable* _self_, jule::Str _5331_ident, jule::Bool _5343_cpp_linked) {
	return _2455b2a87___find_var(&(*_self_), _5331_ident,_5343_cpp_linked,false);
}



inline jule::Ptr<_2455e0334_TypeAlias> _2455b137c_find_type_alias(_2455b02e3_SymbolTable* _self_, jule::Str _5938_ident, jule::Bool _5950_cpp_linked) {
	return _2455b2ed8___find_type_alias(&(*_self_), _5938_ident,_5950_cpp_linked,false);
}



inline jule::Ptr<_244848912_Struct> _2455b1734_find_struct(_2455b02e3_SymbolTable* _self_, jule::Str _6534_ident, jule::Bool _6546_cpp_linked) {
	{
		auto &expr = (*_self_)._field_structs;
		auto it = expr.begin();
		_iter_begin_229a803c2:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _6621_s = *it;
			{
				if (((_6621_s.get()._field_ident == _6534_ident) && (_6621_s.get()._field_cpp_linked == _6546_cpp_linked))) {
					return _6621_s;
				};
			}
			_iter_next_229a803c2:;
			++it;
			goto _iter_begin_229a803c2;
		}
		_iter_end_229a803c2:;
	};
	return nullptr;
}



inline jule::Ptr<_244926d0e_Fn> _2455b1adb_find_fn(_2455b02e3_SymbolTable* _self_, jule::Str _7630_ident, jule::Bool _7642_cpp_linked) {
	{
		auto &expr = (*_self_)._field_funcs;
		auto it = expr.begin();
		_iter_begin_229a81868:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _7721_f = *it;
			{
				if (((_7721_f.get()._field_ident == _7630_ident) && (_7721_f.get()._field_cpp_linked == _7642_cpp_linked))) {
					return _7721_f;
				};
			}
			_iter_next_229a81868:;
			++it;
			goto _iter_begin_229a81868;
		}
		_iter_end_229a81868:;
	};
	return nullptr;
}



inline jule::Ptr<_24547ec51_Trait> _2455b1de9_find_trait(_2455b02e3_SymbolTable* _self_, jule::Str _8733_ident) {
	{
		auto &expr = (*_self_)._field_traits;
		auto it = expr.begin();
		_iter_begin_229a82ade:;
		if (it != expr.end()) {
			jule::Ptr<_24547ec51_Trait> _8821_t = *it;
			{
				if ((_8821_t.get()._field_ident == _8733_ident)) {
					return _8821_t;
				};
			}
			_iter_next_229a82ade:;
			++it;
			goto _iter_begin_229a82ade;
		}
		_iter_end_229a82ade:;
	};
	return nullptr;
}



inline jule::Ptr<_245481e0c_Enum> _2455b2207_find_enum(_2455b02e3_SymbolTable* _self_, jule::Str _9832_ident) {
	{
		auto &expr = (*_self_)._field_enums;
		auto it = expr.begin();
		_iter_begin_229a83a79:;
		if (it != expr.end()) {
			jule::Ptr<_245481e0c_Enum> _9921_e = *it;
			{
				if ((_9921_e.get()._field_ident == _9832_ident)) {
					return _9921_e;
				};
			}
			_iter_next_229a83a79:;
			++it;
			goto _iter_begin_229a83a79;
		}
		_iter_end_229a83a79:;
	};
	return nullptr;
}



inline jule::Ptr<_245483507_TypeEnum> _2455b2515_find_type_enum(_2455b02e3_SymbolTable* _self_, jule::Str _10937_ident) {
	{
		auto &expr = (*_self_)._field_type_enums;
		auto it = expr.begin();
		_iter_begin_229a84052:;
		if (it != expr.end()) {
			jule::Ptr<_245483507_TypeEnum> _11021_e = *it;
			{
				if ((_11021_e.get()._field_ident == _10937_ident)) {
					return _11021_e;
				};
			}
			_iter_next_229a84052:;
			++it;
			goto _iter_begin_229a84052;
		}
		_iter_end_229a84052:;
	};
	return nullptr;
}



inline jule::Ptr<_24556cc1d_Var> _2455b2a87___find_var(_2455b02e3_SymbolTable* _self_, jule::Str _12029_ident, jule::Bool _12041_cpp_linked, jule::Bool _12059_reverse) {
	if (_12059_reverse) {
		jule::I32 _12221_i = ((*_self_)._field_vars.len() - 1LL);;
		for (; (_12221_i >= 0LL); (_12221_i)--) {
			{
				jule::Ptr<_24556cc1d_Var> _12425_v = (*_self_)._field_vars[_12221_i];;
				if (((_12425_v.get()._field_ident == _12029_ident) && (_12425_v.get()._field_cpp_linked == _12041_cpp_linked))) {
					return _12425_v;
				};
			}
		_iter_next_229a86a9e:;
		}
		_iter_end_229a86a9e:;;
	} else {
		{
			auto &expr = (*_self_)._field_vars;
			auto it = expr.begin();
			_iter_begin_229a8650a:;
			if (it != expr.end()) {
				jule::Ptr<_24556cc1d_Var> _13025_v = *it;
				{
					if (((_13025_v.get()._field_ident == _12029_ident) && (_13025_v.get()._field_cpp_linked == _12041_cpp_linked))) {
						return _13025_v;
					};
				}
				_iter_next_229a8650a:;
				++it;
				goto _iter_begin_229a8650a;
			}
			_iter_end_229a8650a:;
		};
	};
	return nullptr;
}



inline jule::Ptr<_2455e0334_TypeAlias> _2455b2ed8___find_type_alias(_2455b02e3_SymbolTable* _self_, jule::Str _13936_ident, jule::Bool _13948_cpp_linked, jule::Bool _13966_reverse) {
	if (_13966_reverse) {
		jule::I32 _14121_i = ((*_self_)._field_type_aliases.len() - 1LL);;
		for (; (_14121_i >= 0LL); (_14121_i)--) {
			{
				jule::Ptr<_2455e0334_TypeAlias> _14325_ta = (*_self_)._field_type_aliases[_14121_i];;
				if (((_14325_ta.get()._field_ident == _13936_ident) && (_14325_ta.get()._field_cpp_linked == _13948_cpp_linked))) {
					return _14325_ta;
				};
			}
		_iter_next_229a89d7c:;
		}
		_iter_end_229a89d7c:;;
	} else {
		{
			auto &expr = (*_self_)._field_type_aliases;
			auto it = expr.begin();
			_iter_begin_229a897d8:;
			if (it != expr.end()) {
				jule::Ptr<_2455e0334_TypeAlias> _14925_ta = *it;
				{
					if (((_14925_ta.get()._field_ident == _13936_ident) && (_14925_ta.get()._field_cpp_linked == _13948_cpp_linked))) {
						return _14925_ta;
					};
				}
				_iter_next_229a897d8:;
				++it;
				goto _iter_begin_229a897d8;
			}
			_iter_end_229a897d8:;
		};
	};
	return nullptr;
}



inline jule::Any _2455b3390_def_by_ident(_2455b02e3_SymbolTable* _self_, jule::Str _16031_ident, jule::Bool _16043_cpp_linked) {
	{
		auto &expr = (*_self_)._field_vars;
		auto it = expr.begin();
		_iter_begin_229a8b7b8:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> _16121_v = *it;
			{
				if (((_16121_v.get()._field_ident == _16031_ident) && (_16121_v.get()._field_cpp_linked == _16043_cpp_linked))) {
					return jule::Any(_16121_v);
				};
			}
			_iter_next_229a8b7b8:;
			++it;
			goto _iter_begin_229a8b7b8;
		}
		_iter_end_229a8b7b8:;
	};
	{
		auto &expr = (*_self_)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_229a8d0e4:;
		if (it != expr.end()) {
			jule::Ptr<_2455e0334_TypeAlias> _16721_ta = *it;
			{
				if (((_16721_ta.get()._field_ident == _16031_ident) && (_16721_ta.get()._field_cpp_linked == _16043_cpp_linked))) {
					return jule::Any(_16721_ta);
				};
			}
			_iter_next_229a8d0e4:;
			++it;
			goto _iter_begin_229a8d0e4;
		}
		_iter_end_229a8d0e4:;
	};
	{
		auto &expr = (*_self_)._field_structs;
		auto it = expr.begin();
		_iter_begin_229a8ddd6:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _17321_s = *it;
			{
				if (((_17321_s.get()._field_ident == _16031_ident) && (_17321_s.get()._field_cpp_linked == _16043_cpp_linked))) {
					return jule::Any(_17321_s);
				};
			}
			_iter_next_229a8ddd6:;
			++it;
			goto _iter_begin_229a8ddd6;
		}
		_iter_end_229a8ddd6:;
	};
	{
		auto &expr = (*_self_)._field_funcs;
		auto it = expr.begin();
		_iter_begin_229a8ec61:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _17921_f = *it;
			{
				if (((_17921_f.get()._field_ident == _16031_ident) && (_17921_f.get()._field_cpp_linked == _16043_cpp_linked))) {
					return jule::Any(_17921_f);
				};
			}
			_iter_next_229a8ec61:;
			++it;
			goto _iter_begin_229a8ec61;
		}
		_iter_end_229a8ec61:;
	};
	if (_16043_cpp_linked) {
		return nullptr;
	};
	{
		auto &expr = (*_self_)._field_traits;
		auto it = expr.begin();
		_iter_begin_229a91108:;
		if (it != expr.end()) {
			jule::Ptr<_24547ec51_Trait> _18921_t = *it;
			{
				if ((_18921_t.get()._field_ident == _16031_ident)) {
					return jule::Any(_18921_t);
				};
			}
			_iter_next_229a91108:;
			++it;
			goto _iter_begin_229a91108;
		}
		_iter_end_229a91108:;
	};
	{
		auto &expr = (*_self_)._field_enums;
		auto it = expr.begin();
		_iter_begin_229a91a43:;
		if (it != expr.end()) {
			jule::Ptr<_245481e0c_Enum> _19521_e = *it;
			{
				if ((_19521_e.get()._field_ident == _16031_ident)) {
					return jule::Any(_19521_e);
				};
			}
			_iter_next_229a91a43:;
			++it;
			goto _iter_begin_229a91a43;
		}
		_iter_end_229a91a43:;
	};
	{
		auto &expr = (*_self_)._field_type_enums;
		auto it = expr.begin();
		_iter_begin_229a927be:;
		if (it != expr.end()) {
			jule::Ptr<_245483507_TypeEnum> _20121_te = *it;
			{
				if ((_20121_te.get()._field_ident == _16031_ident)) {
					return jule::Any(_20121_te);
				};
			}
			_iter_next_229a927be:;
			++it;
			goto _iter_begin_229a927be;
		}
		_iter_end_229a927be:;
	};
	return nullptr;
}



inline jule::Bool _2455b37e1_is_duplicated_ident(_2455b02e3_SymbolTable* _self_, jule::Uintptr _21334_itself, jule::Str _21351_ident, jule::Bool _21363_cpp_linked) {
	{
		auto &expr = (*_self_)._field_vars;
		auto it = expr.begin();
		_iter_begin_229a92e1d:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> &_21416_v = *it;
			{
				if ((((static_cast<jule::Uintptr>(_21416_v) != _21334_itself) && (_21416_v.get()._field_ident == _21351_ident)) && (_21416_v.get()._field_cpp_linked == _21363_cpp_linked))) {
					return true;
				};
			}
			_iter_next_229a92e1d:;
			++it;
			goto _iter_begin_229a92e1d;
		}
		_iter_end_229a92e1d:;
	};
	{
		auto &expr = (*_self_)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_229a94a9b:;
		if (it != expr.end()) {
			jule::Ptr<_2455e0334_TypeAlias> &_22016_ta = *it;
			{
				if ((((static_cast<jule::Uintptr>(_22016_ta) != _21334_itself) && (_22016_ta.get()._field_ident == _21351_ident)) && (_22016_ta.get()._field_cpp_linked == _21363_cpp_linked))) {
					return true;
				};
			}
			_iter_next_229a94a9b:;
			++it;
			goto _iter_begin_229a94a9b;
		}
		_iter_end_229a94a9b:;
	};
	{
		auto &expr = (*_self_)._field_structs;
		auto it = expr.begin();
		_iter_begin_229a94749:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> &_22616_s = *it;
			{
				if ((((static_cast<jule::Uintptr>(_22616_s) != _21334_itself) && (_22616_s.get()._field_ident == _21351_ident)) && (_22616_s.get()._field_cpp_linked == _21363_cpp_linked))) {
					return true;
				};
			}
			_iter_next_229a94749:;
			++it;
			goto _iter_begin_229a94749;
		}
		_iter_end_229a94749:;
	};
	{
		auto &expr = (*_self_)._field_funcs;
		auto it = expr.begin();
		_iter_begin_229a958b0:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> &_23216_f = *it;
			{
				if ((((static_cast<jule::Uintptr>(_23216_f) != _21334_itself) && (_23216_f.get()._field_ident == _21351_ident)) && (_23216_f.get()._field_cpp_linked == _21363_cpp_linked))) {
					return true;
				};
			}
			_iter_next_229a958b0:;
			++it;
			goto _iter_begin_229a958b0;
		}
		_iter_end_229a958b0:;
	};
	if (_21363_cpp_linked) {
		return false;
	};
	{
		auto &expr = (*_self_)._field_traits;
		auto it = expr.begin();
		_iter_begin_229a984b7:;
		if (it != expr.end()) {
			jule::Ptr<_24547ec51_Trait> &_24216_t = *it;
			{
				if (((static_cast<jule::Uintptr>(_24216_t) != _21334_itself) && (_24216_t.get()._field_ident == _21351_ident))) {
					return true;
				};
			}
			_iter_next_229a984b7:;
			++it;
			goto _iter_begin_229a984b7;
		}
		_iter_end_229a984b7:;
	};
	{
		auto &expr = (*_self_)._field_enums;
		auto it = expr.begin();
		_iter_begin_229a99155:;
		if (it != expr.end()) {
			jule::Ptr<_245481e0c_Enum> &_24816_e = *it;
			{
				if (((static_cast<jule::Uintptr>(_24816_e) != _21334_itself) && (_24816_e.get()._field_ident == _21351_ident))) {
					return true;
				};
			}
			_iter_next_229a99155:;
			++it;
			goto _iter_begin_229a99155;
		}
		_iter_end_229a99155:;
	};
	{
		auto &expr = (*_self_)._field_type_enums;
		auto it = expr.begin();
		_iter_begin_229a9a134:;
		if (it != expr.end()) {
			jule::Ptr<_245483507_TypeEnum> &_25416_te = *it;
			{
				if (((static_cast<jule::Uintptr>(_25416_te) != _21334_itself) && (_25416_te.get()._field_ident == _21351_ident))) {
					return true;
				};
			}
			_iter_next_229a9a134:;
			++it;
			goto _iter_begin_229a9a134;
		}
		_iter_end_229a9a134:;
	};
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _2455b02e3_SymbolTable _Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "type_enums:" << _Src._field_type_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2455b543b_is_nil(_2455b5051_Data* _self_) {
	return _2455e1e4b_is_nil((*_self_)._field_kind.ptr());
}



inline jule::Bool _2455b56a0_is_void(_2455b5051_Data* _self_) {
	return _2455e21b0_void((*_self_)._field_kind.ptr());
}



inline jule::Bool _2455b5914_is_const(_2455b5051_Data* _self_) {
	return ((*_self_)._field_constant != nullptr);
}



inline jule::Bool _2455b5c22_good_operand(_2455b5051_Data* _self_, jule::Ptr<_2455b5051_Data>& _9636_other) {
	if ((_2455e3ada_tenm(_9636_other.get()._field_kind.ptr()) != nullptr)) {
		return false;
	};
	return ((((_2455e3139_prim(_9636_other.get()._field_kind.ptr()) == nullptr) || (!(_2455e8e97_is_any(_2455e3139_prim(_9636_other.get()._field_kind.ptr()).ptr())))) && (_2455e4800_trt(_9636_other.get()._field_kind.ptr()) == nullptr)) && (!(_2455e1e4b_is_nil((*_self_)._field_kind.ptr()))));
}







std::ostream &operator<<(std::ostream &_Stream, _2455b5051_Data _Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2455b60c9_Value _Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _2455b70ca_push_err(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _12727_token, jule::Str _12742_fmt, jule::Slice<jule::Any> _12755_args) {
	_245553bc1_push_err((*_self_)._field_s.ptr(), _12727_token,_12742_fmt,jule::Any(_12755_args));
}



inline void _2455b73e9_push_suggestion(_2455b6abe_Eval* _self_, jule::Str _13234_fmt, jule::Slice<jule::Any> _13247_args) {
	_245553ee0_push_suggestion((*_self_)._field_s.ptr(), _13234_fmt,jule::Any(_13247_args));
}



inline void _2455b75c5_allow_builtin(_2455b6abe_Eval* _self_) {
	(*_self_)._field_dis_builtin=false;
}



inline void _2455b77a1_disallow_builtin(_2455b6abe_Eval* _self_) {
	(*_self_)._field_dis_builtin=true;
}



inline jule::Bool _2455b7a15_is_unsafe(_2455b6abe_Eval* _self_) {
	return (*_self_)._field_unsafety;
}



inline jule::Bool _2455b7c79_is_global(_2455b6abe_Eval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_24555100e_Sema>>()) {
			_case_begin_229ac9e55:;
			{
				return true;
			}
		}
		else {
			_case_begin_229ac9d45:;
			{
				return false;
			}
		}
		_match_end_229ac995a:;
	};
}



inline jule::Bool _2455b8054_apply_numeric_prefix(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _15944_d) {
	if (((((_15944_d == nullptr) || (!(_2455b5914_is_const(_15944_d.ptr())))) || (_2455e3139_prim(_15944_d.get()._field_kind.ptr()) == nullptr)) || ((*_self_)._field_prefix == nullptr))) {
		return false;
	};
	jule::Ptr<_2455e59ee_Prim> _16613_prim = _2455e3139_prim((*_self_)._field_prefix.ptr());;
	if ((_16613_prim == nullptr)) {
		return false;
	};
	{
		
		if (_245528965_is_float(_2455e5d62_to_str(_16613_prim.ptr()))) {
			_case_begin_229acc760:;
			{
				_15944_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>((*((*_self_)._field_prefix)));
				_244919461_set_f64(_15944_d.get()._field_constant.ptr(), static_cast<jule::F64>(_2449186e6_as_f64(_15944_d.get()._field_constant.ptr())));
			}
		}
		else if (_2455280b3_is_sig_int(_2455e5d62_to_str(_16613_prim.ptr()))) {
			_case_begin_229acc7c6:;
			{
				if ((!(_245586484_sig_assignable(_2455e5d62_to_str(_16613_prim.ptr()),_15944_d)))) {
					return false;
				};
				_15944_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>((*((*_self_)._field_prefix)));
				_24491896b_set_i64(_15944_d.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64(_15944_d.get()._field_constant.ptr())));
			}
		}
		else if (_24552839e_is_unsig_int(_2455e5d62_to_str(_16613_prim.ptr()))) {
			_case_begin_229acc83c:;
			{
				if ((!(_24559ca72_unsig_assignable(_2455e5d62_to_str(_16613_prim.ptr()),_15944_d)))) {
					return false;
				};
				_15944_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>((*((*_self_)._field_prefix)));
				_244918be1_set_u64(_15944_d.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64(_15944_d.get()._field_constant.ptr())));
			}
		}
		_match_end_229acc51d:;
	};
	return true;
}



inline jule::Ptr<_2455b5051_Data> _2455b82b8_lit_nil(_2455b6abe_Eval* _self_) {
	jule::Ptr<_2448ab524_Const> _19517_constant = static__244916e0e_new_nil();;
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=nullptr}), ._field_mutable=false, ._field_lvalue=false, ._field_model=static_cast<jule::Any>(_19517_constant), ._field_decl=false, ._field_constant=_19517_constant});
}



inline jule::Ptr<_2455b5051_Data> _2455b85c6_lit_str(_2455b6abe_Eval* _self_, jule::Ptr<_24485d73a_LitExpr>& _20623_l) {
	jule::Str _20717_s = _20623_l.get()._field_value.slice(1LL,(_20623_l.get()._field_value.len() - 1LL));;
	if (_2431e5876_is_raw_str(_20623_l.get()._field_value)) {
		_20717_s=_24559cd80_to_raw_str(static_cast<jule::Slice<jule::U8>>(_20717_s));
	} else {
		_20717_s=_24559d138_to_str(static_cast<jule::Slice<jule::U8>>(_20717_s));
	};
	jule::Ptr<_2448ab524_Const> _21317_constant = static__244916969_new_str(_20717_s);;
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("str", 3)), 6)}), ._field_mutable=false, ._field_lvalue=false, ._field_model=static_cast<jule::Any>(_21317_constant), ._field_decl=false, ._field_constant=_21317_constant});
}



inline jule::Ptr<_2455b5051_Data> _2455b88d4_lit_bool(_2455b6abe_Eval* _self_, jule::Ptr<_24485d73a_LitExpr>& _22724_l) {
	jule::Ptr<_2448ab524_Const> _22817_constant = static__2449166c2_new_bool((_22724_l.get()._field_value == jule::Str("true", 4)));;
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), ._field_mutable=false, ._field_lvalue=false, ._field_model=static_cast<jule::Any>(_22817_constant), ._field_decl=false, ._field_constant=_22817_constant});
}



inline jule::Ptr<_2455b5051_Data> _2455b8be2_lit_rune(_2455b6abe_Eval* _self_, jule::Ptr<_24485d73a_LitExpr>& _24124_l) {
	;
	;
	jule::Str _24513_lt = _24124_l.get()._field_value.slice(1LL,(_24124_l.get()._field_value.len() - 1LL));;
	jule::I32 _24613_r = _245586066_to_rune(static_cast<jule::Slice<jule::U8>>(_24513_lt));;
	jule::Ptr<_2455b5051_Data> _24717_data = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_mutable=false, ._field_lvalue=false, ._field_decl=false, ._field_constant=static__244916408_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_24613_r)))});;
	jule::Bool _25513_is_ascii = _245585e34_is_ascii(_24613_r);;
	if (_25513_is_ascii) {
		_24717_data.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u8", 2)), 6)});
	} else {
		_24717_data.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i32", 3)), 6)});
	};
	_24717_data.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_2449241b3_RuneExprModel>(_2449241b3_RuneExprModel{._field_code=_24613_r}));
	_24717_data.get()._field_is_rune=true;
	return _24717_data;
}



inline jule::Ptr<_2455b5051_Data> _2455b9000_lit_float(_2455b6abe_Eval* _self_, jule::Ptr<_24485d73a_LitExpr>& _27125_l) {
	;
	jule::F64 _27413_f = ({
		auto except = _2454740b9_parse_float(_27125_l.get()._field_value,64LL);
		(except.ok()) ? (except.result) : ({
			jule::MAX_F64;
		});
	});;
	jule::Ptr<_2448ab524_Const> _27517_constant = static__244916c11_new_f64(_27413_f);;
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("f64", 3)), 6)}), ._field_mutable=false, ._field_lvalue=false, ._field_model=static_cast<jule::Any>(_27517_constant), ._field_decl=false, ._field_constant=_27517_constant});
}



inline jule::Ptr<_2455b5051_Data> _2455b930d_lit_int(_2455b6abe_Eval* _self_, jule::Ptr<_24485d73a_LitExpr>& _28927_l) {
	;
	jule::Str _29217_lit = _28927_l.get()._field_value;;
	jule::I32 _29317_base = 0LL;;
	{
		
		if (_241ec93e7_has_prefix(_29217_lit,jule::Str("0x", 2))) {
			_case_begin_229ade3dc:;
			{
				(_29217_lit).mut_slice(2LL);;
				_29317_base=16LL;
			}
		}
		else if (_241ec93e7_has_prefix(_29217_lit,jule::Str("0b", 2))) {
			_case_begin_229ade0bd:;
			{
				(_29217_lit).mut_slice(2LL);;
				_29317_base=2LL;
			}
		}
		else if (_241ec93e7_has_prefix(_29217_lit,jule::Str("0o", 2))) {
			_case_begin_229ade134:;
			{
				(_29217_lit).mut_slice(2LL);;
				_29317_base=8LL;
			}
		}
		else if (((_29217_lit[0LL] == '0') && (_29217_lit.len() > 1LL))) {
			_case_begin_229addcb0:;
			{
				(_29217_lit).mut_slice(1LL);;
				_29317_base=8LL;
			}
		}
		else {
			_case_begin_229addc49:;
			{
				_29317_base=10LL;
			}
		}
		_match_end_229addbe4:;
	};
	jule::Ptr<_2455b5051_Data> _31317_d = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_mutable=false, ._field_lvalue=false, ._field_decl=false, });;
	jule::Bool _31917_ok = true;;
	jule::I64 _32013_sig = ({
		auto except = _24546c843_parse_int(_29217_lit,_29317_base,64LL);
		(except.ok()) ? (except.result) : ({
			_31917_ok=false;
			0LL;
		});
	});;
	if (_31917_ok) {
		_31317_d.get()._field_constant=static__244916408_new_i64(_32013_sig);
		_31317_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)});
	} else {
		jule::U64 _33017_unsig = ({
			auto except = _24546c3d1_parse_uint(_29217_lit,_29317_base,64LL);
			(except.ok()) ? (except.result) : ({
				_2455b70ca_push_err(&(*_self_), _28927_l.get()._field_token,jule::Str("arithmetic value overflow: this value too big", 45),jule::Slice<jule::Any>());
				_2455b73e9_push_suggestion(&(*_self_), jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>());
				jule::MAX_U64;
			});
		});;
		_31317_d.get()._field_constant=static__24491653a_new_u64(_33017_unsig);
		_31317_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("uint", 4)), 6)});
	};
	_31317_d.get()._field_model=static_cast<jule::Any>(_31317_d.get()._field_constant);
	if ((!(_2455b8054_apply_numeric_prefix(&(*_self_), _31317_d)))) {
		_2455dac9c_fit_bitsize(_31317_d);
	};
	return _31317_d;
}



inline jule::Ptr<_2455b5051_Data> _2455b961b_lit_num(_2455b6abe_Eval* _self_, jule::Ptr<_24485d73a_LitExpr>& _35127_l) {
	{
		
		if (_2431e64d1_is_float(_35127_l.get()._field_value)) {
			_case_begin_229ae723b:;
			{
				return _2455b9000_lit_float(&(*_self_), _35127_l);
			}
		}
		else {
			_case_begin_229ae69bb:;
			{
				return _2455b930d_lit_int(&(*_self_), _35127_l);
			}
		}
		_match_end_229ae6911:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455b9929_eval_lit(_2455b6abe_Eval* _self_, jule::Ptr<_24485d73a_LitExpr> _36027_lit) {
	{
		
		if (_24485da8c_is_nil(_36027_lit.ptr())) {
			_case_begin_229ae8418:;
			{
				return _2455b82b8_lit_nil(&(*_self_));
			}
		}
		else if (_2431e55ce_is_str(_36027_lit.get()._field_value)) {
			_case_begin_229ae7cec:;
			{
				return _2455b85c6_lit_str(&(*_self_), _36027_lit);
			}
		}
		else if (_2431e6239_is_bool(_36027_lit.get()._field_value)) {
			_case_begin_229ae7d74:;
			{
				return _2455b88d4_lit_bool(&(*_self_), _36027_lit);
			}
		}
		else if (_2431e5b1d_is_rune(_36027_lit.get()._field_value)) {
			_case_begin_229ae7deb:;
			{
				return _2455b8be2_lit_rune(&(*_self_), _36027_lit);
			}
		}
		else if (_2431e6778_is_num(_36027_lit.get()._field_value)) {
			_case_begin_229ae811b:;
			{
				return _2455b961b_lit_num(&(*_self_), _36027_lit);
			}
		}
		else {
			_case_begin_229ae779c:;
			{
				return nullptr;
			}
		}
		_match_end_229ae76e2:;
	};
}



inline jule::Any _2455b9c37_find_builtins(_2455b6abe_Eval* _self_, jule::Str _37732_ident) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_245547db3_ImportInfo>>()) {
			_case_begin_229ae8704:;
			{
				jule::Any _38021_def = _2455daa8d_find_builtins_import(_37732_ident,(*_self_)._field_lookup.operator jule::Ptr<_245547db3_ImportInfo>());;
				if ((_38021_def != nullptr)) {
					return jule::Any(_38021_def);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24555100e_Sema>>()) {
			_case_begin_229ae876a:;
			{
				jule::Any _38521_def = _2455db72b_find_builtins_sema(_37732_ident,(*_self_)._field_lookup.operator jule::Ptr<_24555100e_Sema>());;
				if ((_38521_def != nullptr)) {
					return jule::Any(_38521_def);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_229aea9c0:;
			{
				jule::Any _39021_def = _2455db72b_find_builtins_sema(_37732_ident,(*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>().get()._field_s);;
				if ((_39021_def != nullptr)) {
					return jule::Any(_39021_def);
				};
			}
		}
		_match_end_229ae856c:;
	};
	if ((*_self_)._field_dis_builtin) {
		return nullptr;
	};
	return jule::Any(_24561a4d5_find_builtin_def(_37732_ident));
}



inline jule::Any _2455ba0de_get_def(_2455b6abe_Eval* _self_, jule::Str _40126_ident, jule::Bool _40138_cpp_linked) {
	if ((!(_40138_cpp_linked))) {
		jule::Ptr<_245481e0c_Enum> _40321_enm = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560b66e_find_enum((*_self_)._field_lookup, _40126_ident);;
		if ((_40321_enm != nullptr)) {
			return jule::Any(_40321_enm);
		};
		jule::Ptr<_245483507_TypeEnum> _40821_tenm = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560b97c_find_type_enum((*_self_)._field_lookup, _40126_ident);;
		if ((_40821_tenm != nullptr)) {
			return jule::Any(_40821_tenm);
		};
	};
	jule::Ptr<_24556cc1d_Var> _41417_v = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560a43c_find_var((*_self_)._field_lookup, _40126_ident,_40138_cpp_linked);;
	if ((_41417_v != nullptr)) {
		return jule::Any(_41417_v);
	};
	jule::Ptr<_244926d0e_Fn> _41917_f = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560b053_find_fn((*_self_)._field_lookup, _40126_ident,_40138_cpp_linked);;
	if ((_41917_f != nullptr)) {
		return jule::Any(_41917_f);
	};
	jule::Ptr<_244848912_Struct> _42417_s = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560ab9b_find_struct((*_self_)._field_lookup, _40126_ident,_40138_cpp_linked);;
	if ((_42417_s != nullptr)) {
		return jule::Any(_42417_s);
	};
	jule::Ptr<_2455e0334_TypeAlias> _42917_ta = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560a7e4_find_type_alias((*_self_)._field_lookup, _40126_ident,_40138_cpp_linked);;
	if ((_42917_ta != nullptr)) {
		return jule::Any(_42917_ta);
	};
	return jule::Any(_2455b9c37_find_builtins(&(*_self_), _40126_ident));
}



inline void _229b171b2_push_reference(_2455b6abe_Eval* _self_, jule::Ptr<_2449299b0_FnIns>& _43741_ref) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_229b18d1d:;
			{
				jule::Ptr<_245531066_ScopeChecker> _44021_sc = _2455343dd_get_hard_root((*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>());;
				if ((!(_229b19989_exist(_44021_sc.get()._field_owner.get()._field_refers.ptr(), _43741_ref)))) {
					_24492d5b8_push(_44021_sc.get()._field_owner.get()._field_refers.ptr(), jule::Any(_43741_ref));
				};
			}
		}
		else {
			_case_begin_229b18647:;
			{
				if ((((*_self_)._field_owner != nullptr) && (!(_229b19989_exist((*_self_)._field_owner.get()._field_refers.ptr(), _43741_ref))))) {
					_24492d5b8_push((*_self_)._field_owner.get()._field_refers.ptr(), jule::Any(_43741_ref));
				};
			}
		}
		_match_end_229b185e2:;
	};
}

inline void _229b2bbcc_push_reference(_2455b6abe_Eval* _self_, jule::Ptr<_24556cc1d_Var>& _43741_ref) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_229b2d618:;
			{
				jule::Ptr<_245531066_ScopeChecker> _44021_sc = _2455343dd_get_hard_root((*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>());;
				if ((!(_229b2e284_exist(_44021_sc.get()._field_owner.get()._field_refers.ptr(), _43741_ref)))) {
					_24492d5b8_push(_44021_sc.get()._field_owner.get()._field_refers.ptr(), jule::Any(_43741_ref));
				};
			}
		}
		else {
			_case_begin_229b2ce42:;
			{
				if ((((*_self_)._field_owner != nullptr) && (!(_229b2e284_exist((*_self_)._field_owner.get()._field_refers.ptr(), _43741_ref))))) {
					_24492d5b8_push((*_self_)._field_owner.get()._field_refers.ptr(), jule::Any(_43741_ref));
				};
			}
		}
		_match_end_229b2cddc:;
	};
}

inline void _229bbb91a_push_reference(_2455b6abe_Eval* _self_, jule::Ptr<_244874c5c_StructIns>& _43741_ref) {
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_229bbd598:;
			{
				jule::Ptr<_245531066_ScopeChecker> _44021_sc = _2455343dd_get_hard_root((*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>());;
				if ((!(_229bbe214_exist(_44021_sc.get()._field_owner.get()._field_refers.ptr(), _43741_ref)))) {
					_24492d5b8_push(_44021_sc.get()._field_owner.get()._field_refers.ptr(), jule::Any(_43741_ref));
				};
			}
		}
		else {
			_case_begin_229bbcdc2:;
			{
				if ((((*_self_)._field_owner != nullptr) && (!(_229bbe214_exist((*_self_)._field_owner.get()._field_refers.ptr(), _43741_ref))))) {
					_24492d5b8_push((*_self_)._field_owner.get()._field_refers.ptr(), jule::Any(_43741_ref));
				};
			}
		}
		_match_end_229bbcd6c:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ba672___eval_enum(_2455b6abe_Eval* _self_, jule::Ptr<_245481e0c_Enum> _45130_enm) {
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_45130_enm, 3)}), ._field_mutable=false, ._field_lvalue=false, ._field_decl=true, ._field_constant=nullptr});
}



inline jule::Ptr<_2455b5051_Data> _2455baa29_eval_enum(_2455b6abe_Eval* _self_, jule::Ptr<_245481e0c_Enum> _46332_enm, jule::Ptr<_2431e4523_Token> _46344_error_token) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _46332_enm.get()._field_public,_46332_enm.get()._field_token)))) {
		_2455b70ca_push_err(&(*_self_), _46344_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_46332_enm.get()._field_ident)}));
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	};
	return _2455ba672___eval_enum(&(*_self_), _46332_enm);
}



inline jule::Ptr<_2455b5051_Data> _2455bad37___eval_type_enum(_2455b6abe_Eval* _self_, jule::Ptr<_245483507_TypeEnum> _47235_enm) {
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_47235_enm, 4)}), ._field_mutable=false, ._field_lvalue=false, ._field_decl=true, ._field_constant=nullptr});
}



inline jule::Ptr<_2455b5051_Data> _2455bb1de_eval_type_enum(_2455b6abe_Eval* _self_, jule::Ptr<_245483507_TypeEnum> _48437_enm, jule::Ptr<_2431e4523_Token> _48453_error_token) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _48437_enm.get()._field_public,_48437_enm.get()._field_token)))) {
		_2455b70ca_push_err(&(*_self_), _48453_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_48437_enm.get()._field_ident)}));
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	};
	return _2455bad37___eval_type_enum(&(*_self_), _48437_enm);
}



inline jule::Ptr<_2455b5051_Data> _2455bb4ec___eval_struct(_2455b6abe_Eval* _self_, jule::Ptr<_244874c5c_StructIns> _49332_s) {
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_49332_s, 0)}), ._field_mutable=false, ._field_lvalue=false, ._field_model=static_cast<jule::Any>(_49332_s), ._field_decl=true, ._field_constant=nullptr});
}



inline jule::Ptr<_2455b5051_Data> _2455bb8a4_eval_struct(_2455b6abe_Eval* _self_, jule::Ptr<_244874c5c_StructIns> _50634_s, jule::Ptr<_2431e4523_Token> _50649_error_token) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _50634_s.get()._field_decl.get()._field_public,_50634_s.get()._field_decl.get()._field_token)))) {
		_2455b70ca_push_err(&(*_self_), _50649_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_50634_s.get()._field_decl.get()._field_ident)}));
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	};
	_2455bbed1_check_deprecated(&(*_self_), _50634_s.get()._field_decl.get()._field_directives,_50649_error_token);
	return _2455bb4ec___eval_struct(&(*_self_), _50634_s);
}



inline jule::Ptr<_2455b5051_Data> _2455bbbb2_eval_fn_ins(_2455b6abe_Eval* _self_, jule::Ptr<_2449299b0_FnIns> _51630_f) {
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_51630_f, 1)}), ._field_mutable=false, ._field_lvalue=false, ._field_model=static_cast<jule::Any>(_51630_f), ._field_decl=false, ._field_constant=nullptr});
}



inline void _2455bbed1_check_deprecated(_2455b6abe_Eval* _self_, jule::Slice<jule::Ptr<_2448249dc_Directive>>& _52940_directives, jule::Ptr<_2431e4523_Token> _52971_tok) {
	if (_2455b7a15_is_unsafe(&(*_self_))) {
		return;;
	};
	jule::Ptr<_2448249dc_Directive> _53413_d = _2455da708_find_directive(_52940_directives,jule::Str("deprecated", 10));;
	if ((_53413_d != nullptr)) {
		if ((_53413_d.get()._field_args.len() == 0LL)) {
			_2455b70ca_push_err(&(*_self_), _52971_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>::make({jule::Any(jule::Str("this code is deprecated", 23))}));
		} else {
			_2455b70ca_push_err(&(*_self_), _52971_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>::make({jule::Any(_53413_d.get()._field_args[0LL].get()._field_kind)}));
		};
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("use Unsafe Jule for deprecated codes or replace to successor", 60),jule::Slice<jule::Any>());
	};
}



inline jule::Ptr<_2455b5051_Data> _2455bc388_eval_fn(_2455b6abe_Eval* _self_, jule::Ptr<_244926d0e_Fn> _54530_f, jule::Ptr<_2431e4523_Token> _54538_error_token) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _54530_f.get()._field_public,_54530_f.get()._field_token)))) {
		_2455b70ca_push_err(&(*_self_), _54538_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_54530_f.get()._field_ident)}));
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	};
	_2455bbed1_check_deprecated(&(*_self_), _54530_f.get()._field_directives,_54538_error_token);
	jule::Ptr<_2449299b0_FnIns> _55417_ins = _24492845e_instance(_54530_f);;
	_229b171b2_push_reference(&(*_self_), _55417_ins);
	return _2455bbbb2_eval_fn_ins(&(*_self_), _55417_ins);
}



inline void _2455bc773_push_illegal_cycle_error(_2455b6abe_Eval* _self_, jule::Ptr<_24556cc1d_Var>& _55944_v1, jule::Ptr<_24556cc1d_Var>& _55955_v2, jule::Str& _55970_message) {
	;
	jule::Str _56113_refers_to = _242dbb0c9_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>::make({jule::Any(_55944_v1.get()._field_ident),jule::Any(_55955_v2.get()._field_ident)}));;
	(_55970_message).buffer.insert(0, (((_241ec9e0e_repeat(jule::Str(" ", 1),4LL) + _56113_refers_to) + jule::Str("\n", 1))));;
}



inline jule::Bool _2455bcb3b_check_cross_cycle(_2455b6abe_Eval* _self_, jule::Ptr<_24556cc1d_Var>& _56537_v, jule::Str& _56551_message) {
	{
		auto &expr = _56537_v.get()._field_depends;
		auto it = expr.begin();
		_iter_begin_229b1ebe2:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> &_56616_d = *it;
			{
				if ((_56616_d == (*_self_)._field_owner)) {
					_2455bc773_push_illegal_cycle_error(&(*_self_), _56537_v,_56616_d,_56551_message);
					return false;
				};
				if ((!(_2455bcb3b_check_cross_cycle(&(*_self_), _56616_d,_56551_message)))) {
					_2455bc773_push_illegal_cycle_error(&(*_self_), _56537_v,_56616_d,_56551_message);
					return false;
				};
			}
			_iter_next_229b1ebe2:;
			++it;
			goto _iter_begin_229b1ebe2;
		}
		_iter_end_229b1ebe2:;
	};
	return true;
}



inline jule::Bool _2455bcee3_check_illegal_cycles(_2455b6abe_Eval* _self_, jule::Ptr<_24556cc1d_Var>& _58444_v, jule::Ptr<_2431e4523_Token> _58453_decl_token) {
	jule::Bool _58475_ok = jule::Bool();
	if (((*_self_)._field_owner == nullptr)) {
		_58475_ok = true;
		return _58475_ok;
	};
	if (((*_self_)._field_owner == _58444_v)) {
		_2455b70ca_push_err(&(*_self_), (*_self_)._field_owner.get()._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_owner.get()._field_ident)}));
		_58475_ok = false;
		return _58475_ok;
	};
	jule::Str _59617_message = jule::Str();;
	if ((!(_2455bcb3b_check_cross_cycle(&(*_self_), _58444_v,_59617_message)))) {
		jule::Str _59921_err_msg = _59617_message;;
		_59617_message=jule::Str();
		_2455bc773_push_illegal_cycle_error(&(*_self_), (*_self_)._field_owner,_58444_v,_59617_message);
		_59921_err_msg=(_59921_err_msg + _59617_message);
		_2455b70ca_push_err(&(*_self_), _58453_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>::make({jule::Any(_59921_err_msg)}));
		_58475_ok = false;
		return _58475_ok;
	};
	(*_self_)._field_owner.get()._field_depends = jule::alloc_for_append((*_self_)._field_owner.get()._field_depends,1);(*_self_)._field_owner.get()._field_depends.__push(_58444_v);;
	_58475_ok = true;
	return _58475_ok;
}



inline jule::Ptr<_2455b5051_Data> _2455bd39a_eval_var(_2455b6abe_Eval* _self_, jule::Ptr<_24556cc1d_Var> _61131_v, jule::Ptr<_2431e4523_Token> _61140_error_token) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _61131_v.get()._field_public,_61131_v.get()._field_token)))) {
		_2455b70ca_push_err(&(*_self_), _61140_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_61131_v.get()._field_ident)}));
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	};
	_2455bbed1_check_deprecated(&(*_self_), _61131_v.get()._field_directives,_61140_error_token);
	_61131_v.get()._field_used=true;
	{
		auto &_match_expr{ (*_self_)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_24555100e_Sema>>()) {
			_case_begin_229b278ba:;
			{
				jule::Bool _62517_ok = _2455bcee3_check_illegal_cycles(&(*_self_), _61131_v,_61140_error_token);;
				if ((!(_62517_ok))) {
					return nullptr;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_229b27975:;
			{
				if (((!(_61131_v.get()._field_reference)) || _2455b7a15_is_unsafe(&(*_self_)))) {
					goto _match_end_229b27865;
				};
				jule::Ptr<_245531066_ScopeChecker> _63321_s = (*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>();;
				while (((_63321_s.get()._field_owner == nullptr) && (_63321_s.get()._field_parent != nullptr))) {
					{
						_63321_s=_63321_s.get()._field_parent;
					}
				_iter_next_229b299dd:;
				}
				_iter_end_229b299dd:;;
				if ((((_63321_s.get()._field_owner != nullptr) && _63321_s.get()._field_owner.get()._field_anon) && (_61131_v.get()._field_scope != _63321_s.get()._field_owner.get()._field_scope))) {
					_2455b70ca_push_err(&(*_self_), _61140_error_token,jule::Str("anonymous functions cannot access to reference definition @ of parent scope", 75),jule::Slice<jule::Any>::make({jule::Any(_61131_v.get()._field_ident)}));
				};
			}
		}
		_match_end_229b27865:;
	};
	if ((_61131_v.get()._field_scope == nullptr)) {
		_229b2bbcc_push_reference(&(*_self_), _61131_v);
	};
	if (((!(_61131_v.get()._field_cpp_linked)) && ((_61131_v.get()._field_value == nullptr) || (_61131_v.get()._field_value.get()._field_data == nullptr)))) {
		if (_61131_v.get()._field_constant) {
			_245565782_check_type_var((*_self_)._field_s, _61131_v,jule::Trait<_24560bac0_Lookup>((*_self_)._field_s, 3));
			if ((_61131_v.get()._field_value.get()._field_data == nullptr)) {
				return nullptr;
			};
		};
	};
	if (((_61131_v.get()._field_kind == nullptr) || (_61131_v.get()._field_kind.get()._field_kind == nullptr))) {
		if ((_61131_v.get()._field_scope != nullptr)) {
			return nullptr;
		};
		_245565782_check_type_var((*_self_)._field_s, _61131_v,(*_self_)._field_lookup);
		if (((_61131_v.get()._field_kind == nullptr) || (_61131_v.get()._field_kind.get()._field_kind == nullptr))) {
			return nullptr;
		};
	};
	jule::Ptr<_2455b5051_Data> _67617_d = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=_61131_v.get()._field_kind.get()._field_kind, ._field_mutable=_61131_v.get()._field_mutable, ._field_reference=_61131_v.get()._field_reference, ._field_lvalue=(!(_61131_v.get()._field_constant)), ._field_model=static_cast<jule::Any>(_61131_v), });;
	if ((((!(_61131_v.get()._field_cpp_linked)) && _24556d0c5_is_initialized(_61131_v.ptr())) && (_61131_v.get()._field_value.get()._field_data != nullptr))) {
		_67617_d.get()._field_is_rune=_61131_v.get()._field_value.get()._field_data.get()._field_is_rune;
	};
	if ((_61131_v.get()._field_constant && (_61131_v.get()._field_value.get()._field_data.get()._field_constant != nullptr))) {
		_67617_d.get()._field_constant=jule::new_ptr<_2448ab524_Const>((*(_61131_v.get()._field_value.get()._field_data.get()._field_constant)));
		_67617_d.get()._field_model=static_cast<jule::Any>(_67617_d.get()._field_constant);
	};
	if (_2455b5914_is_const(_67617_d.ptr())) {
		_2455b8054_apply_numeric_prefix(&(*_self_), _67617_d);
	};
	return _67617_d;
}



inline jule::Ptr<_2455b5051_Data> _2455bd752_eval_type_alias(_2455b6abe_Eval* _self_, jule::Ptr<_2455e0334_TypeAlias> _70038_ta, jule::Ptr<_2431e4523_Token> _70054_error_token) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _70038_ta.get()._field_public,_70038_ta.get()._field_token)))) {
		_2455b70ca_push_err(&(*_self_), _70054_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_70038_ta.get()._field_ident)}));
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	};
	_70038_ta.get()._field_used=true;
	jule::Trait<_2455e0ae8_Kind> _70917_kind = _70038_ta.get()._field_kind.get()._field_kind.get()._field_kind;;
	jule::Ptr<_2455b5051_Data> _71017_d = nullptr;;
	{
		auto &_match_expr{ _70917_kind };
		
		if (_match_expr.type_is<jule::Ptr<_244874c5c_StructIns>>()) {
			_case_begin_229b3ca34:;
			{
				_71017_d=_2455bb4ec___eval_struct(&(*_self_), _70917_kind.operator jule::Ptr<_244874c5c_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245481e0c_Enum>>()) {
			_case_begin_229b3d084:;
			{
				_71017_d=_2455ba672___eval_enum(&(*_self_), _70917_kind.operator jule::Ptr<_245481e0c_Enum>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245483507_TypeEnum>>()) {
			_case_begin_229b3bba9:;
			{
				_71017_d=_2455bad37___eval_type_enum(&(*_self_), _70917_kind.operator jule::Ptr<_245483507_TypeEnum>());
			}
		}
		else {
			_case_begin_229b3ba88:;
			{
				_71017_d=jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=_70038_ta.get()._field_kind.get()._field_kind.get()._field_kind}), ._field_decl=true, });
				if (_70038_ta.get()._field_cpp_linked) {
					_71017_d.get()._field_kind.get()._field_cpp_ident=_70038_ta.get()._field_ident;
				} else {
					_71017_d.get()._field_kind.get()._field_cpp_ident=_70038_ta.get()._field_kind.get()._field_kind.get()._field_cpp_ident;
				};
				_71017_d.get()._field_model=static_cast<jule::Any>(_71017_d.get()._field_kind);
			}
		}
		_match_end_229b3ba33:;
	};
	_71017_d.get()._field_kind.get()._field_generic=_70038_ta.get()._field_generic;
	return _71017_d;
}



inline jule::Ptr<_2455b5051_Data> _2455bdb09_eval_def(_2455b6abe_Eval* _self_, jule::Any _73631_def, jule::Ptr<_2431e4523_Token> _73641_ident) {
	{
		auto &_match_expr{ _73631_def };
		
		if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_229b409e3:;
			{
				return _2455bd39a_eval_var(&(*_self_), _73631_def.operator jule::Ptr<_24556cc1d_Var>(),_73641_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245481e0c_Enum>>()) {
			_case_begin_229b40a59:;
			{
				return _2455baa29_eval_enum(&(*_self_), _73631_def.operator jule::Ptr<_245481e0c_Enum>(),_73641_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245483507_TypeEnum>>()) {
			_case_begin_229b40ac0:;
			{
				return _2455bb1de_eval_type_enum(&(*_self_), _73631_def.operator jule::Ptr<_245483507_TypeEnum>(),_73641_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229b40b47:;
			{
				return _2455bb8a4_eval_struct(&(*_self_), _244830d17_instance(_73631_def.operator jule::Ptr<_244848912_Struct>()),_73641_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244926d0e_Fn>>()) {
			_case_begin_229b40bad:;
			{
				jule::Ptr<_244926d0e_Fn> _74721_f = _73631_def.operator jule::Ptr<_244926d0e_Fn>();;
				if ((_74721_f.get()._field_ident != jule::Str("init", 4))) {
					return _2455bc388_eval_fn(&(*_self_), _74721_f,_73641_ident);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449299b0_FnIns>>()) {
			_case_begin_229b40c35:;
			{
				return _2455bbbb2_eval_fn_ins(&(*_self_), _73631_def.operator jule::Ptr<_2449299b0_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455e0334_TypeAlias>>()) {
			_case_begin_229b40cac:;
			{
				return _2455bd752_eval_type_alias(&(*_self_), _73631_def.operator jule::Ptr<_2455e0334_TypeAlias>(),_73641_ident);
			}
		}
		_match_end_229b40905:;
	};
	_2455b70ca_push_err(&(*_self_), _73641_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_73641_ident.get()._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_2455b5051_Data> _2455bde17_eval_ident(_2455b6abe_Eval* _self_, jule::Ptr<_24485e76e_IdentExpr> _76029_ident) {
	jule::Any _76117_def = _2455ba0de_get_def(&(*_self_), _76029_ident.get()._field_ident,_76029_ident.get()._field_cpp_linked);;
	return _2455bdb09_eval_def(&(*_self_), jule::Any(_76117_def),_76029_ident.get()._field_token);
}



inline jule::Ptr<_2455b5051_Data> _2455be225_eval_unary(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_24485ee78_UnaryExpr> _76534_u) {
	_2455d2b62_UnaryEval _76617_unary = static__2455d3118_new(_self_);;
	return _2455d43b1_eval(&_76617_unary, _76534_u);
}



inline jule::Ptr<_2455b5051_Data> _2455be533_eval_variadic(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244860330_VariadicExpr> _77037_v) {
	if ((_77037_v.get()._field_expr == nullptr)) {
		_2455b70ca_push_err(_self_.ptr(), _77037_v.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2455e1027_TypeKind> _77617_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_77617_prefix;
	});;
	jule::Ptr<_2455b5051_Data> _78017_d = _2455d20c3_eval_expr_kind(_self_, _77037_v.get()._field_expr.get()._field_kind);;
	if ((_78017_d == nullptr)) {
		return nullptr;
	};
	if ((!(_2455e2dc5_variadicable(_78017_d.get()._field_kind.ptr())))) {
		_2455b70ca_push_err(_self_.ptr(), _77037_v.get()._field_token,jule::Str("type @ is not variadicable", 26),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_78017_d.get()._field_kind.ptr()))}));
		return nullptr;
	};
	jule::Ptr<_2455e9be0_Slc> _79013_slc = _2455e40b3_slc(_78017_d.get()._field_kind.ptr());;
	_78017_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_cpp_ident=_79013_slc.get()._field_elem.get()._field_cpp_ident, ._field_generic=_79013_slc.get()._field_elem.get()._field_generic, ._field_variadic=true, ._field_kind=_79013_slc.get()._field_elem.get()._field_kind});
	return _78017_d;
}



inline jule::Ptr<_2455b5051_Data> _2455be841_eval_unsafe(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_24485de44_UnsafeExpr> _80035_u) {
	jule::Bool _80113_unsafety = _self_.get()._field_unsafety;;
	_self_.get()._field_unsafety=true;
	jule::Ptr<_2455b5051_Data> _80417_d = _2455d20c3_eval_expr_kind(_self_, _80035_u.get()._field_expr.get()._field_kind);;
	_self_.get()._field_unsafety=_80113_unsafety;
	return _80417_d;
}



inline jule::Ptr<_2455b5051_Data> _2455beb4e_eval_arr(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448640ae_SliceExpr> _81132_s) {
	jule::Ptr<_2455ebd8a_Arr> _81317_pt = _2455e3d4e_arr(_self_.get()._field_prefix.ptr());;
	jule::Ptr<_2455ebd8a_Arr> _81517_arr = jule::new_ptr<_2455ebd8a_Arr>(_2455ebd8a_Arr{._field_auto=false, ._field_n=0LL, ._field_elem=_81317_pt.get()._field_elem});;
	jule::Bool _82117_filled = false;;
	if ((_81132_s.get()._field_exprs.len() == 2LL)) {
		{
			auto &_match_expr{ _81132_s.get()._field_exprs[1LL].get()._field_kind };
			
			if (_match_expr.type_is<jule::Ptr<_244860330_VariadicExpr>>()) {
				_case_begin_229b50382:;
				{
					if ((_81132_s.get()._field_exprs[1LL].get()._field_kind.operator jule::Ptr<_244860330_VariadicExpr>().get()._field_expr != nullptr)) {
						goto _match_end_229b5032c;
					};
					if (_81317_pt.get()._field_auto) {
						_2455b70ca_push_err(_self_.ptr(), _81132_s.get()._field_token,jule::Str("auto-sized arrays cannot filled", 31),jule::Slice<jule::Any>());
						return nullptr;
					};
					_82117_filled=true;
					_81132_s.get()._field_exprs=_81132_s.get()._field_exprs.slice(0LL,1LL);
				}
			}
			_match_end_229b5032c:;
		};
	};
	_81517_arr.get()._field_n=static_cast<jule::I32>(_81132_s.get()._field_exprs.len());
	if ((!(_81317_pt.get()._field_auto))) {
		if ((_81517_arr.get()._field_n > _81317_pt.get()._field_n)) {
			_2455b70ca_push_err(_self_.ptr(), _81132_s.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else if ((_81517_arr.get()._field_n < _81317_pt.get()._field_n)) {
			_81517_arr.get()._field_n=_81317_pt.get()._field_n;
		};
	};
	jule::Ptr<_244921d70_ArrayExprModel> _85017_model = jule::new_ptr<_244921d70_ArrayExprModel>(_244921d70_ArrayExprModel{._field_kind=_81517_arr, });;
	if (_82117_filled) {
		_85017_model.get()._field_elems=jule::Slice<jule::Any>::alloc(0LL,2LL);
	} else {
		_85017_model.get()._field_elems=jule::Slice<jule::Any>::alloc(0LL,_81132_s.get()._field_exprs.len());
	};
	jule::Ptr<_2455e1027_TypeKind> _85917_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=_81517_arr.get()._field_elem;
	{
		auto &expr = _81132_s.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_229b55145:;
		if (it != expr.end()) {
			jule::Ptr<_24485c706_Expr> _86121_elem = *it;
			{
				jule::Ptr<_2455b5051_Data> _86221_d = _2455d20c3_eval_expr_kind(_self_, _86121_elem.get()._field_kind);;
				if ((_86221_d == nullptr)) {
					goto _iter_next_229b55145;
				};
				_2455597cb_check_assign_type(_self_.get()._field_s, false,_81517_arr.get()._field_elem,_86221_d,_81132_s.get()._field_token);
				_85017_model.get()._field_elems = jule::alloc_for_append(_85017_model.get()._field_elems,1);_85017_model.get()._field_elems.__push(_86221_d.get()._field_model);;
			}
			_iter_next_229b55145:;
			++it;
			goto _iter_begin_229b55145;
		}
		_iter_end_229b55145:;
	};
	_self_.get()._field_prefix=_85917_prefix;
	if (_82117_filled) {
		_85017_model.get()._field_elems = jule::alloc_for_append(_85017_model.get()._field_elems,1);_85017_model.get()._field_elems.__push(nullptr);;
	};
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_81517_arr, 11)}), ._field_mutable=true, ._field_model=static_cast<jule::Any>(_85017_model), });
}



inline jule::Ptr<_2455b5051_Data> _2455c00a0_eval_exp_slc(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448640ae_SliceExpr> _88636_s, jule::Ptr<_2455e1027_TypeKind> _88655_t, jule::Any _88673_first) {
	jule::Ptr<_2455e9be0_Slc> _88717_slc = jule::new_ptr<_2455e9be0_Slc>(_2455e9be0_Slc{._field_elem=_88655_t});;
	jule::Ptr<_2449208eb_SliceExprModel> _89117_model = jule::new_ptr<_2449208eb_SliceExprModel>(_2449208eb_SliceExprModel{._field_elem_kind=_88655_t, ._field_elems=jule::Slice<jule::Any>::alloc(0LL,_88636_s.get()._field_exprs.len())});;
	if ((_88673_first != nullptr)) {
		_89117_model.get()._field_elems = jule::alloc_for_append(_89117_model.get()._field_elems,1);_89117_model.get()._field_elems.__push(_88673_first);;
		_88636_s.get()._field_exprs=_88636_s.get()._field_exprs.slice(1LL);
	};
	jule::Ptr<_2455e1027_TypeKind> _90017_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=_88717_slc.get()._field_elem;
	{
		auto &expr = _88636_s.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_229b5a8dc:;
		if (it != expr.end()) {
			jule::Ptr<_24485c706_Expr> _90221_elem = *it;
			{
				jule::Ptr<_2455b5051_Data> _90321_d = _2455d20c3_eval_expr_kind(_self_, _90221_elem.get()._field_kind);;
				if ((_90321_d == nullptr)) {
					goto _iter_next_229b5a8dc;
				};
				_2455597cb_check_assign_type(_self_.get()._field_s, false,_88717_slc.get()._field_elem,_90321_d,_88636_s.get()._field_token);
				_89117_model.get()._field_elems = jule::alloc_for_append(_89117_model.get()._field_elems,1);_89117_model.get()._field_elems.__push(_90321_d.get()._field_model);;
			}
			_iter_next_229b5a8dc:;
			++it;
			goto _iter_begin_229b5a8dc;
		}
		_iter_end_229b5a8dc:;
	};
	_self_.get()._field_prefix=_90017_prefix;
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_88717_slc, 8)}), ._field_mutable=true, ._field_model=static_cast<jule::Any>(_89117_model), });
}



inline jule::Ptr<_2455b5051_Data> _2455c03ad_eval_slice_expr(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448640ae_SliceExpr> _92139_s) {
	if ((_self_.get()._field_prefix != nullptr)) {
		{
			
			if ((_2455e3d4e_arr(_self_.get()._field_prefix.ptr()) != nullptr)) {
				_case_begin_229b5d945:;
				{
					return _2455beb4e_eval_arr(_self_, _92139_s);
				}
			}
			else if ((_2455e40b3_slc(_self_.get()._field_prefix.ptr()) != nullptr)) {
				_case_begin_229b5d9bc:;
				{
					jule::Ptr<_2455e9be0_Slc> _92725_pt = _2455e40b3_slc(_self_.get()._field_prefix.ptr());;
					return _2455c00a0_eval_exp_slc(_self_, _92139_s,_92725_pt.get()._field_elem,nullptr);
				}
			}
			_match_end_229b5d824:;
		};
	};
	jule::Ptr<_2455e1027_TypeKind> _93217_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=nullptr;
	if ((_92139_s.get()._field_exprs.len() == 0LL)) {
		_2455b70ca_push_err(_self_.ptr(), _92139_s.get()._field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _94017_first_elem = _2455d20c3_eval_expr_kind(_self_, _92139_s.get()._field_exprs[0LL].get()._field_kind);;
	if ((_94017_first_elem == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _94517_d = _2455c00a0_eval_exp_slc(_self_, _92139_s,_94017_first_elem.get()._field_kind,_94017_first_elem.get()._field_model);;
	_self_.get()._field_prefix=_93217_prefix;
	return _94517_d;
}



inline void _2455c06ee_check_integer_indexing_by_data(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _95154_d, jule::Ptr<_2431e4523_Token> _95164_token) {
	jule::Str _95213_err_key = _2455dcb06_check_data_for_integer_indexing(_95154_d);;
	{
		auto &_match_expr{ _95213_err_key };
		
		if (_match_expr == jule::Str()) {
			_case_begin_229b63c36:;
			{
				return;;
			}
		}
		else if (_match_expr == jule::Str("type @ is invalid for indexing", 30)) {
			_case_begin_229b648d5:;
			{
				_2455b70ca_push_err(&(*_self_), _95164_token,_95213_err_key,jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_95154_d.get()._field_kind.ptr()))}));
			}
		}
		else {
			_case_begin_229b640dd:;
			{
				_2455b70ca_push_err(&(*_self_), _95164_token,_95213_err_key,jule::Slice<jule::Any>());
			}
		}
		_match_end_229b64011:;
	};
}



inline void _2455c0ac8_indexing_ptr(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _96336_d, jule::Ptr<_2455b5051_Data>& _96351_index, jule::Ptr<_244864950_IndexingExpr>& _96366_i) {
	_2455c06ee_check_integer_indexing_by_data(&(*_self_), _96351_index,_96366_i.get()._field_token);
	jule::Ptr<_2455ec7e7_Ptr> _96617_ptr = _2455e3612_ptr(_96336_d.get()._field_kind.ptr());;
	{
		
		if (_2455ed2ba_is_unsafe(_96617_ptr.ptr())) {
			_case_begin_229b66a4c:;
			{
				_2455b70ca_push_err(&(*_self_), _96366_i.get()._field_token,jule::Str("unsafe pointers are not supports indexing", 41),jule::Slice<jule::Any>());
				return;;
			}
		}
		else if ((!(_2455b7a15_is_unsafe(&(*_self_))))) {
			_case_begin_229b66ab3:;
			{
				_2455b70ca_push_err(&(*_self_), _96366_i.get()._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
		}
		_match_end_229b668e8:;
	};
	_96336_d.get()._field_kind=_96617_ptr.get()._field_elem;
}



inline void _2455c0e91_indexing_arr(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _97836_d, jule::Ptr<_2455b5051_Data>& _97851_index, jule::Ptr<_244864950_IndexingExpr>& _97866_i) {
	jule::Ptr<_2455ebd8a_Arr> _97917_arr = _2455e3d4e_arr(_97836_d.get()._field_kind.ptr());;
	_97836_d.get()._field_kind=_97917_arr.get()._field_elem;
	_2455c06ee_check_integer_indexing_by_data(&(*_self_), _97851_index,_97866_i.get()._field_token);
	if ((_2455b5914_is_const(_97851_index.ptr()) && (_2449186e6_as_f64(_97851_index.get()._field_constant.ptr()) >= static_cast<jule::F64>(_97917_arr.get()._field_n)))) {
		_2455b70ca_push_err(&(*_self_), _97866_i.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
	};
}



inline void _2455c1359_indexing_slc(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _98736_d, jule::Ptr<_2455b5051_Data>& _98751_index, jule::Ptr<_244864950_IndexingExpr>& _98766_i) {
	jule::Ptr<_2455e9be0_Slc> _98817_slc = _2455e40b3_slc(_98736_d.get()._field_kind.ptr());;
	_98736_d.get()._field_kind=_98817_slc.get()._field_elem;
	_2455c06ee_check_integer_indexing_by_data(&(*_self_), _98751_index,_98766_i.get()._field_token);
	if ((!(_2455b5914_is_const(_98751_index.ptr())))) {
		return;;
	};
	{
		auto &_match_expr{ _98736_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_2449208eb_SliceExprModel>>()) {
			_case_begin_229b6c28e:;
			{
				jule::Ptr<_2449208eb_SliceExprModel> _99821_m = _98736_d.get()._field_model.operator jule::Ptr<_2449208eb_SliceExprModel>();;
				jule::F64 _99917_indx = _2449186e6_as_f64(_98751_index.get()._field_constant.ptr());;
				if ((_99917_indx >= static_cast<jule::F64>(_99821_m.get()._field_elems.len()))) {
					_2455b70ca_push_err(&(*_self_), _98766_i.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					_98736_d.get()._field_model=_99821_m.get()._field_elems[static_cast<jule::I32>(static_cast<jule::U64>(_99917_indx))];
					_98736_d.get()._field_decl=true;
				};
			}
		}
		_match_end_229b6c4e2:;
	};
}



inline void _2455c1722_indexing_map(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _100936_d, jule::Ptr<_2455b5051_Data>& _100951_index, jule::Ptr<_244864950_IndexingExpr>& _100970_i) {
	if ((_100951_index == nullptr)) {
		return;;
	};
	jule::Ptr<_2455eb296_Map> _101417_m = _2455e4a64_map(_100936_d.get()._field_kind.ptr());;
	_2455a0a0e_AssignTypeChecker _101517_atc = _2455a0a0e_AssignTypeChecker{._field_s=(*_self_)._field_s, ._field_dest=_101417_m.get()._field_key, ._field_d=_100951_index, ._field_error_token=_100970_i.get()._field_token};;
	_2455a1b86_check(&_101517_atc);
	_100936_d.get()._field_kind=_101417_m.get()._field_val;
}



inline void _2455c1ada_indexing_str(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _102636_d, jule::Ptr<_2455b5051_Data>& _102651_index, jule::Ptr<_244864950_IndexingExpr>& _102666_i) {
	;
	_102636_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u8", 2)), 6)});
	if ((_102651_index == nullptr)) {
		return;;
	};
	_2455c06ee_check_integer_indexing_by_data(&(*_self_), _102651_index,_102666_i.get()._field_token);
	if ((!(_2455b5914_is_const(_102651_index.ptr())))) {
		_102636_d.get()._field_constant=nullptr;
		return;;
	};
	if (_2455b5914_is_const(_102636_d.ptr())) {
		jule::Ptr<_2431e4523_Token> _104217_error_token = _102666_i.get()._field_token;;
		jule::I64 _104317_j = _24491821d_as_i64(_102651_index.get()._field_constant.ptr());;
		jule::Str _104417_s = _244917c45_read_str(_102636_d.get()._field_constant.ptr());;
		if ((static_cast<jule::I32>(_104317_j) >= _104417_s.len())) {
			_2455b70ca_push_err(&(*_self_), _104217_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else {
			_244918be1_set_u64(_102636_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(_104417_s[static_cast<jule::I32>(_104317_j)])));
		};
	};
}



inline void _2455c1ea3_to_indexing(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _105335_d, jule::Ptr<_2455b5051_Data>& _105350_index, jule::Ptr<_244864950_IndexingExpr>& _105369_i) {
	{
		
		if ((_2455e3612_ptr(_105335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229b774db:;
			{
				_2455c0ac8_indexing_ptr(&(*_self_), _105335_d,_105350_index,_105369_i);
				return;;
			}
		}
		else if ((_2455e3d4e_arr(_105335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229b77563:;
			{
				_2455c0e91_indexing_arr(&(*_self_), _105335_d,_105350_index,_105369_i);
				return;;
			}
		}
		else if ((_2455e40b3_slc(_105335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229b775da:;
			{
				_2455c1359_indexing_slc(&(*_self_), _105335_d,_105350_index,_105369_i);
				return;;
			}
		}
		else if ((_2455e4a64_map(_105335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229b77662:;
			{
				_2455c1722_indexing_map(&(*_self_), _105335_d,_105350_index,_105369_i);
				return;;
			}
		}
		else if ((_2455e3139_prim(_105335_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229b776d9:;
			{
				jule::Ptr<_2455e59ee_Prim> _106817_prim = _2455e3139_prim(_105335_d.get()._field_kind.ptr());;
				{
					
					if (_2455e8c33_is_str(_106817_prim.ptr())) {
						_case_begin_229b7b7ba:;
						{
							_2455c1ada_indexing_str(&(*_self_), _105335_d,_105350_index,_105369_i);
							return;;
						}
					}
					_match_end_229b7b721:;
				};
			}
		}
		_match_end_229b77387:;
	};
	_2455b70ca_push_err(&(*_self_), _105369_i.get()._field_token,jule::Str("type @ is not support indexing", 30),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_105335_d.get()._field_kind.ptr()))}));
}



inline jule::Bool _2455c2437_push_generics_from_expr_sub_ident(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244861012_SubIdentExpr>& _107858_sexpr, jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>& _107914_generics, jule::Ptr<_24485c706_Expr>& _107942_expr) {
	jule::Ptr<_244858dea_SubIdentTypeDecl> _108017_t = jule::new_ptr<_244858dea_SubIdentTypeDecl>();;
	if ((!(_2455dd92b_push_sub_ident_from_expr(static_cast<jule::Any>(_107858_sexpr),_108017_t)))) {
		_2455b70ca_push_err(_self_.ptr(), _107942_expr.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	};
	_107914_generics = jule::alloc_for_append(_107914_generics,1);_107914_generics.__push(jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_kind=static_cast<jule::Any>(_108017_t)}));;
	return true;
}



inline jule::Bool _2455c2844_push_generics_from_data(jule::Ptr<_2455b6abe_Eval> _self_, jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>& _108948_generics, jule::Ptr<_24485c706_Expr>& _108976_expr) {
	{
		auto &_match_expr{ _108976_expr.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485ee78_UnaryExpr>>()) {
			_case_begin_229b7ecda:;
			{
				jule::Ptr<_2455b5051_Data> _109421_d = _2455be225_eval_unary(_self_, _108976_expr.get()._field_kind.operator jule::Ptr<_24485ee78_UnaryExpr>());;
				if ((!(_109421_d.get()._field_decl))) {
					_2455b70ca_push_err(_self_.ptr(), _108976_expr.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return false;
				};
				_108948_generics = jule::alloc_for_append(_108948_generics,1);_108948_generics.__push(jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_108976_expr.get()._field_token, ._field_kind=(*(((jule::Any*)((&(_109421_d.get()._field_kind.get()._field_kind))))))}));;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448581d5_TypeDecl>>()) {
			_case_begin_229b7ed51:;
			{
				_108948_generics = jule::alloc_for_append(_108948_generics,1);_108948_generics.__push(_108976_expr.get()._field_kind.operator jule::Ptr<_2448581d5_TypeDecl>());;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244861012_SubIdentExpr>>()) {
			_case_begin_229b7edb7:;
			{
				jule::Ptr<_244861012_SubIdentExpr> _110621_sexpr = _108976_expr.get()._field_kind.operator jule::Ptr<_244861012_SubIdentExpr>();;
				return _2455c2437_push_generics_from_expr_sub_ident(_self_, _110621_sexpr,_108948_generics,_108976_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485e76e_IdentExpr>>()) {
			_case_begin_229b806c0:;
			{
				jule::Ptr<_24485e76e_IdentExpr> _110921_ident = _108976_expr.get()._field_kind.operator jule::Ptr<_24485e76e_IdentExpr>();;
				_108948_generics = jule::alloc_for_append(_108948_generics,1);_108948_generics.__push(jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_kind=static_cast<jule::Any>(jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_110921_ident.get()._field_token, ._field_ident=_110921_ident.get()._field_ident, ._field_cpp_linked=_110921_ident.get()._field_cpp_linked, }))}));;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485d383_TupleExpr>>()) {
			_case_begin_229b80736:;
			{
				{
					auto &expr = _108976_expr.get()._field_kind.operator jule::Ptr<_24485d383_TupleExpr>().get()._field_expr;
					auto it = expr.begin();
					_iter_begin_229b84ad1:;
					if (it != expr.end()) {
						jule::Ptr<_24485c706_Expr> _111825_texpr = *it;
						{
							if ((!(_2455c2844_push_generics_from_data(_self_, _108948_generics,_111825_texpr)))) {
								return false;
							};
						}
						_iter_next_229b84ad1:;
						++it;
						goto _iter_begin_229b84ad1;
					}
					_iter_end_229b84ad1:;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244860a8e_NsSelectionExpr>>()) {
			_case_begin_229b8079c:;
			{
				jule::Ptr<_244860a8e_NsSelectionExpr> _112421_ns = _108976_expr.get()._field_kind.operator jule::Ptr<_244860a8e_NsSelectionExpr>();;
				jule::Ptr<_24485879b_IdentTypeDecl> _112521_decl = jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_112421_ns.get()._field_ident, ._field_ident=_112421_ns.get()._field_ident.get()._field_kind, });;
				_108948_generics = jule::alloc_for_append(_108948_generics,1);_108948_generics.__push(jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_112521_decl.get()._field_token, ._field_kind=static_cast<jule::Any>(jule::new_ptr<_2448592a2_NamespaceTypeDecl>(_2448592a2_NamespaceTypeDecl{._field_idents=_112421_ns.get()._field_ns, ._field_kind=jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_112521_decl.get()._field_token, ._field_kind=static_cast<jule::Any>(_112521_decl)})}))}));;
			}
		}
		else {
			_case_begin_229b7ebb9:;
			{
				_2455b70ca_push_err(_self_.ptr(), _108976_expr.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return false;
			}
		}
		_match_end_229b7ea21:;
	};
	return true;
}



inline jule::Ptr<_2455b5051_Data> _2455c2b52_eval_ident_decl_from_indexing(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244864950_IndexingExpr>& _114654_i) {
	jule::Ptr<_2448581d5_TypeDecl> _114717_tdecl = jule::new_ptr<_2448581d5_TypeDecl>();;
	jule::Ptr<_24485879b_IdentTypeDecl> _114817_decl = nullptr;;
	{
		auto &_match_expr{ _114654_i.get()._field_expr.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485e76e_IdentExpr>>()) {
			_case_begin_229b89234:;
			{
				jule::Ptr<_24485e76e_IdentExpr> _115121_expr = _114654_i.get()._field_expr.get()._field_kind.operator jule::Ptr<_24485e76e_IdentExpr>();;
				_114817_decl=jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_115121_expr.get()._field_token, ._field_ident=_115121_expr.get()._field_ident, ._field_cpp_linked=_115121_expr.get()._field_cpp_linked, });
				_114717_tdecl.get()._field_kind=static_cast<jule::Any>(_114817_decl);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244860a8e_NsSelectionExpr>>()) {
			_case_begin_229b8929a:;
			{
				jule::Ptr<_244860a8e_NsSelectionExpr> _115921_expr = _114654_i.get()._field_expr.get()._field_kind.operator jule::Ptr<_244860a8e_NsSelectionExpr>();;
				_114817_decl=jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_115921_expr.get()._field_ident, ._field_ident=_115921_expr.get()._field_ident.get()._field_kind, });
				_114717_tdecl.get()._field_kind=static_cast<jule::Any>(jule::new_ptr<_2448592a2_NamespaceTypeDecl>(_2448592a2_NamespaceTypeDecl{._field_idents=_115921_expr.get()._field_ns, ._field_kind=jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_114817_decl.get()._field_token, ._field_kind=static_cast<jule::Any>(_114817_decl)})}));
			}
		}
		else {
			_case_begin_229b891bd:;
			{
				_2455b70ca_push_err(_self_.ptr(), _114654_i.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_229b89168:;
	};
	if ((!(_2455c2844_push_generics_from_data(_self_, _114817_decl.get()._field_generics,_114654_i.get()._field_index)))) {
		return nullptr;
	};
	return _2455c8b03_eval_type(_self_.ptr(), _114717_tdecl);
}



inline jule::Bool _2455c30b4_check_generic_fn(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2449299b0_FnIns>& _118341_f, jule::Ptr<_2431e4523_Token>& _118357_et, jule::Any& _118374_model) {
	jule::Bool _118413_ok = _24555ba64_reload_fn_ins_types(_self_.get()._field_s, _118341_f);;
	_118341_f.get()._field_reloaded=true;
	if ((!(_118413_ok))) {
		return false;
	};
	jule::Ptr<_2449299b0_FnIns> _118917_exist_instance = _244928739_append_instance(_118341_f.get()._field_decl.ptr(), _118341_f);;
	if ((!(_24555ab95_check_constraints_fn(_self_.get()._field_s, _118341_f,_118357_et,_118917_exist_instance)))) {
		return false;
	};
	if ((_118917_exist_instance != nullptr)) {
		_118341_f=_118917_exist_instance;
		_2455dd6b7_update_model_to_generic_ins(_118374_model,_118917_exist_instance);
	} else {
		_245568587_check_fn_ins_caller(_self_.get()._field_s, _118341_f,_118357_et);
	};
	return true;
}



inline void _2455c3405_eval_fn_generic_from_indexing(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2455b5051_Data>& _120854_d, jule::Ptr<_244864950_IndexingExpr>& _120869_i) {
	jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _120917_generics = jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>::alloc(0LL,8LL);;
	if ((!(_2455c2844_push_generics_from_data(_self_, _120917_generics,_120869_i.get()._field_index)))) {
		_120854_d=nullptr;
		return;;
	};
	jule::Ptr<_2449299b0_FnIns> _121517_f = _2455e4327_fnc(_120854_d.get()._field_kind.ptr());;
	jule::I32 _121617_generics_len = 0LL;;
	if ((_121517_f.get()._field_decl != nullptr)) {
		_121617_generics_len=static_cast<jule::I32>(_121517_f.get()._field_decl.get()._field_generics.len());
	};
	if ((!(_245555068_check_generic_quantity(_self_.get()._field_s.ptr(), _121617_generics_len,static_cast<jule::I32>(_120917_generics.len()),_120869_i.get()._field_expr.get()._field_token)))) {
		_120854_d=nullptr;
		return;;
	};
	_121517_f.get()._field_generics=jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>>::alloc(0LL,_121517_f.get()._field_decl.get()._field_generics.len());
	{
		auto &expr = _120917_generics;
		auto it = expr.begin();
		_iter_begin_229b95163:;
		if (it != expr.end()) {
			jule::Ptr<_2448581d5_TypeDecl> _122721_g = *it;
			{
				jule::Ptr<_2455b5051_Data> _122821_k = _2455c8b03_eval_type(_self_.ptr(), _122721_g);;
				if ((_122821_k == nullptr)) {
					_120854_d=nullptr;
					return;;
				};
				_121517_f.get()._field_generics = jule::alloc_for_append(_121517_f.get()._field_generics,1);_121517_f.get()._field_generics.__push(jule::new_ptr<_2455de7ea_InsGeneric>(_2455de7ea_InsGeneric{._field_kind=_122821_k.get()._field_kind, }));;
			}
			_iter_next_229b95163:;
			++it;
			goto _iter_begin_229b95163;
		}
		_iter_end_229b95163:;
	};
	if (_24492ad46_is_builtin(_121517_f.ptr())) {
		return;;
	};
	if (_2455c30b4_check_generic_fn(_self_, _121517_f,_120869_i.get()._field_expr.get()._field_token,_120854_d.get()._field_model)) {
		_120854_d.get()._field_kind.get()._field_kind=jule::Trait<_2455e0ae8_Kind>(_121517_f, 1);
	} else {
		_120854_d=nullptr;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455c3724_eval_indexing(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244864950_IndexingExpr> _124737_i) {
	jule::Ptr<_2455e1027_TypeKind> _124817_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_124817_prefix;
	});;
	jule::Ptr<_2455b5051_Data> _125217_d = _2455d20c3_eval_expr_kind(_self_, _124737_i.get()._field_expr.get()._field_kind);;
	if ((_125217_d == nullptr)) {
		return nullptr;
	};
	if (_125217_d.get()._field_decl) {
		return _2455c2b52_eval_ident_decl_from_indexing(_self_, _124737_i);
	};
	if ((_2455e4327_fnc(_125217_d.get()._field_kind.ptr()) != nullptr)) {
		_2455c3405_eval_fn_generic_from_indexing(_self_, _125217_d,_124737_i);
		return _125217_d;
	};
	_2455b5051_Data _126717_old_d = (*(_125217_d));;
	jule::Ptr<_2455b5051_Data> _126917_index = _2455d20c3_eval_expr_kind(_self_, _124737_i.get()._field_index.get()._field_kind);;
	if ((_126917_index == nullptr)) {
		return nullptr;
	};
	_125217_d.get()._field_decl=false;
	_2455c1ea3_to_indexing(_self_.ptr(), _125217_d,_126917_index,_124737_i);
	if (_2455b5914_is_const(_125217_d.ptr())) {
		_125217_d.get()._field_decl=false;
		_125217_d.get()._field_model=static_cast<jule::Any>(_125217_d.get()._field_constant);
	} else if (_125217_d.get()._field_decl) {
		_125217_d.get()._field_decl=false;
	} else {
		_125217_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244920ad8_IndexingExprModel>(_244920ad8_IndexingExprModel{._field_token=_124737_i.get()._field_token, ._field_expr=jule::new_ptr<_2455b5051_Data>(_126717_old_d), ._field_index=_126917_index}));
	};
	return _125217_d;
}



inline std::tuple<jule::Ptr<_2455b5051_Data>,jule::Ptr<_2455b5051_Data>> _2455c3a32_eval_slicing_exprs(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_24486505a_SlicingExpr>& _130043_s) {
	jule::Ptr<_2455e1027_TypeKind> _130117_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_130117_prefix;
	});;
	jule::Ptr<_2455b5051_Data> _130517_l = nullptr;;
	jule::Ptr<_2455b5051_Data> _130617_r = nullptr;;
	if ((_130043_s.get()._field_start != nullptr)) {
		_130517_l=_2455d20c3_eval_expr_kind(_self_, _130043_s.get()._field_start.get()._field_kind);
		if ((_130517_l != nullptr)) {
			_2455c06ee_check_integer_indexing_by_data(_self_.ptr(), _130517_l,_130043_s.get()._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		};
	} else {
		_130517_l=jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_constant=static__244916408_new_i64(0LL)});
		_130517_l.get()._field_model=static_cast<jule::Any>(_130517_l.get()._field_constant);
	};
	if ((_130043_s.get()._field_to != nullptr)) {
		_130617_r=_2455d20c3_eval_expr_kind(_self_, _130043_s.get()._field_to.get()._field_kind);
		if ((_130617_r != nullptr)) {
			_2455c06ee_check_integer_indexing_by_data(_self_.ptr(), _130617_r,_130043_s.get()._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		};
	};
	return std::make_tuple(_130517_l,_130617_r);
}



inline void _2455c3ca7_slicing_arr(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _133531_d) {
	jule::Ptr<_2455e1027_TypeKind> _133617_elem_type = _2455e3d4e_arr(_133531_d.get()._field_kind.ptr()).get()._field_elem;;
	_133531_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9be0_Slc>(_2455e9be0_Slc{._field_elem=_133617_elem_type}), 8)});
	_133531_d.get()._field_lvalue=false;
	_133531_d.get()._field_mutable=(_133531_d.get()._field_mutable || (!(_2455e2424_mutable(_133617_elem_type.ptr()))));
}



inline void _2455c4170_slicing_str(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _135031_d, jule::Ptr<_2455b5051_Data>& _135042_l, jule::Ptr<_2455b5051_Data>& _135053_r) {
	_135031_d.get()._field_lvalue=false;
	_135031_d.get()._field_mutable=true;
	if ((!(_2455b5914_is_const(_135031_d.ptr())))) {
		return;;
	};
	if (((_135042_l == nullptr) || (_135053_r == nullptr))) {
		_135031_d.get()._field_constant=nullptr;
		return;;
	};
	if ((_2455b5914_is_const(_135042_l.ptr()) && _2455b5914_is_const(_135053_r.ptr()))) {
		jule::I64 _136317_left = _24491821d_as_i64(_135042_l.get()._field_constant.ptr());;
		if ((_136317_left < 0LL)) {
			return;;
		};
		jule::Str _136817_s = _244917c45_read_str(_135031_d.get()._field_constant.ptr());;
		jule::I64 _136921_right = 0LL;;
		if ((_135053_r == nullptr)) {
			_136921_right=static_cast<jule::I64>(static_cast<jule::I64>(_136817_s.len()));
		} else {
			_136921_right=static_cast<jule::I64>(_24491821d_as_i64(_135053_r.get()._field_constant.ptr()));
		};
		if ((_136317_left > _136921_right)) {
			return;;
		};
		_2449191db_set_str(_135031_d.get()._field_constant.ptr(), _136817_s.slice(static_cast<jule::I32>(_136317_left),static_cast<jule::I32>(_136921_right)));
		_135031_d.get()._field_decl=true;
	} else {
		_135031_d.get()._field_constant=nullptr;
	};
}



inline void _2455c45d2_check_slicing(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data>& _138637_d, jule::Ptr<_2455b5051_Data>& _138648_l, jule::Ptr<_2455b5051_Data>& _138659_r, jule::Ptr<_24486505a_SlicingExpr>& _138670_s) {
	{
		
		if ((_2455e3d4e_arr(_138637_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229bab751:;
			{
				_2455c3ca7_slicing_arr(&(*_self_), _138637_d);
				return;;
			}
		}
		else if ((_2455e40b3_slc(_138637_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229bab7c8:;
			{
				return;;
			}
		}
		else if ((_2455e3139_prim(_138637_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229bab850:;
			{
				jule::Ptr<_2455e59ee_Prim> _139417_prim = _2455e3139_prim(_138637_d.get()._field_kind.ptr());;
				{
					
					if (_2455e8c33_is_str(_139417_prim.ptr())) {
						_case_begin_229badd19:;
						{
							_2455c4170_slicing_str(&(*_self_), _138637_d,_138648_l,_138659_r);
							return;;
						}
					}
					_match_end_229badc70:;
				};
			}
		}
		_match_end_229bab61e:;
	};
	_2455b70ca_push_err(&(*_self_), _138670_s.get()._field_token,jule::Str("type @ is not support slicing", 29),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_138637_d.get()._field_kind.ptr()))}));
}



inline jule::Ptr<_2455b5051_Data> _2455c48e0_eval_slicing(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_24486505a_SlicingExpr> _140536_s) {
	jule::Ptr<_2455b5051_Data> _140617_d = _2455d20c3_eval_expr_kind(_self_, _140536_s.get()._field_expr.get()._field_kind);;
	if ((_140617_d == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _141118_l;;
	jule::Ptr<_2455b5051_Data> _141125_r;;
	std::tie(_141118_l,_141125_r) = _2455c3a32_eval_slicing_exprs(_self_, _140536_s);
	if ((_141118_l == nullptr)) {
		return _140617_d;
	};
	_140617_d.get()._field_decl=false;
	_2455c45d2_check_slicing(_self_.ptr(), _140617_d,_141118_l,_141125_r,_140536_s);
	if (_2455b5914_is_const(_140617_d.ptr())) {
		_140617_d.get()._field_decl=false;
		_140617_d.get()._field_model=static_cast<jule::Any>(_140617_d.get()._field_constant);
	} else if (_140617_d.get()._field_decl) {
		_140617_d.get()._field_decl=false;
	} else {
		jule::Ptr<_24492138b_SlicingExprModel> _142921_model = jule::new_ptr<_24492138b_SlicingExprModel>(_24492138b_SlicingExprModel{._field_token=_140536_s.get()._field_token, ._field_expr=_140617_d.get()._field_model, ._field_left=_141118_l.get()._field_model, });;
		if ((_141125_r != nullptr)) {
			_142921_model.get()._field_right=_141125_r.get()._field_model;
		};
		_140617_d.get()._field_model=static_cast<jule::Any>(_142921_model);
	};
	return _140617_d;
}



inline void _2455c4ca8_cast_ptr(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _144231_t, jule::Ptr<_2455b5051_Data> _144249_d, jule::Ptr<_2431e4523_Token> _144259_error_token) {
	jule::Ptr<_2455e9283_Sptr> _144313_sptr = _2455e339d_sptr(_144249_d.get()._field_kind.ptr());;
	if ((_144313_sptr != nullptr)) {
		if ((!(_2455e1731_equals(_2455e3612_ptr(_144231_t.ptr()).get()._field_elem, _144313_sptr.get()._field_elem)))) {
			_2455b70ca_push_err(&(*_self_), _144259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_144249_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_144231_t.ptr()))}));
		};
		return;;
	};
	if ((!(_2455b7a15_is_unsafe(&(*_self_))))) {
		_2455b70ca_push_err(&(*_self_), _144259_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_2455e59ee_Prim> _145613_prim = _2455e3139_prim(_144249_d.get()._field_kind.ptr());;
	if (((_2455e3612_ptr(_144249_d.get()._field_kind.ptr()) == nullptr) && ((_145613_prim == nullptr) || (!(_245528646_is_int(_2455e5d62_to_str(_145613_prim.ptr()))))))) {
		_2455b70ca_push_err(&(*_self_), _144259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_144249_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_144231_t.ptr()))}));
	};
	_144249_d.get()._field_constant=nullptr;
}



inline void _2455c5171_cast_struct(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _146434_t, jule::Ptr<_2455b5051_Data> _146452_d, jule::Ptr<_2431e4523_Token> _146462_error_token) {
	jule::Ptr<_24547ec51_Trait> _146517_tr = _2455e4800_trt(_146452_d.get()._field_kind.ptr());;
	if ((_146517_tr == nullptr)) {
		_2455b70ca_push_err(&(*_self_), _146462_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_146452_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_146434_t.ptr()))}));
		return;;
	};
	jule::Ptr<_244874c5c_StructIns> _147117_s = _2455e458b_strct(_146434_t.ptr());;
	_229bbb91a_push_reference(&(*_self_), _147117_s);
	if ((!(_24483a55d_is_implements(_147117_s.get()._field_decl.ptr(), _146517_tr)))) {
		_2455b70ca_push_err(&(*_self_), _146462_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_146452_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_146434_t.ptr()))}));
	};
}



inline void _2455c5539_cast_ref(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _147931_t, jule::Ptr<_2455b5051_Data> _147949_d, jule::Ptr<_2431e4523_Token> _147959_error_token) {
	jule::Ptr<_2455e9283_Sptr> _148017_sptr = _2455e339d_sptr(_147931_t.ptr());;
	jule::Ptr<_2455ec7e7_Ptr> _148217_ptr = _2455e3612_ptr(_147949_d.get()._field_kind.ptr());;
	if (((_148217_ptr != nullptr) && _2455e1731_equals(_148017_sptr.get()._field_elem, _148217_ptr.get()._field_elem))) {
		if ((!(_2455b7a15_is_unsafe(&(*_self_))))) {
			_2455b70ca_push_err(&(*_self_), _147959_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		};
		return;;
	};
	if ((_2455e458b_strct(_148017_sptr.get()._field_elem.ptr()) != nullptr)) {
		_2455c5171_cast_struct(&(*_self_), _148017_sptr.get()._field_elem,_147949_d,_147959_error_token);
		return;;
	};
	_2455b70ca_push_err(&(*_self_), _147959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_147949_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_147931_t.ptr()))}));
}



inline void _2455c5902_cast_slc(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _150031_t, jule::Ptr<_2455b5051_Data> _150049_d, jule::Ptr<_2431e4523_Token> _150059_error_token) {
	if ((_2455e3876_enm(_150049_d.get()._field_kind.ptr()) != nullptr)) {
		if (((_2455e3139_prim(_2455e3876_enm(_150049_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind.ptr()) == nullptr) || (!(_2455e8c33_is_str(_2455e3139_prim(_2455e3876_enm(_150049_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind.ptr()).ptr()))))) {
			_2455b70ca_push_err(&(*_self_), _150059_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_150049_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_150031_t.ptr()))}));
			return;;
		};
	} else if (((_2455e3139_prim(_150049_d.get()._field_kind.ptr()) == nullptr) || (!(_2455e8c33_is_str(_2455e3139_prim(_150049_d.get()._field_kind.ptr()).ptr()))))) {
		_2455b70ca_push_err(&(*_self_), _150059_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_150049_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_150031_t.ptr()))}));
		return;;
	};
	_150031_t=_2455e40b3_slc(_150031_t.ptr()).get()._field_elem;
	jule::Ptr<_2455e59ee_Prim> _151213_prim = _2455e3139_prim(_150031_t.ptr());;
	if (((_151213_prim == nullptr) || ((!(_2455e7308_is_u8(_151213_prim.ptr()))) && (!(_2455e6d30_is_i32(_151213_prim.ptr())))))) {
		_2455b70ca_push_err(&(*_self_), _150059_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_150049_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_150031_t.ptr()))}));
	};
}



inline void _2455c5c21_cast_str(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _151831_d, jule::Ptr<_2431e4523_Token> _151841_error_token) {
	if ((_2455e3876_enm(_151831_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_245481e0c_Enum> _152021_e = _2455e3876_enm(_151831_d.get()._field_kind.ptr());;
		if (((_2455e3139_prim(_152021_e.get()._field_kind.get()._field_kind.ptr()) != nullptr) && _2455e8c33_is_str(_2455e3139_prim(_152021_e.get()._field_kind.get()._field_kind.ptr()).ptr()))) {
			return;;
		};
	};
	if ((_2455e3139_prim(_151831_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_2455e59ee_Prim> _152717_prim = _2455e3139_prim(_151831_d.get()._field_kind.ptr());;
		if (((!(_2455e7308_is_u8(_152717_prim.ptr()))) && (!(_2455e6d30_is_i32(_152717_prim.ptr()))))) {
			_2455b70ca_push_err(&(*_self_), _151841_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(jule::Str("str", 3)),jule::Any(_2455e1423_to_str(_151831_d.get()._field_kind.ptr()))}));
		};
		return;;
	};
	if ((_2455e40b3_slc(_151831_d.get()._field_kind.ptr()) == nullptr)) {
		_2455b70ca_push_err(&(*_self_), _151841_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(jule::Str("str", 3)),jule::Any(_2455e1423_to_str(_151831_d.get()._field_kind.ptr()))}));
		return;;
	};
	jule::Ptr<_2455e1027_TypeKind> _153917_t = _2455e40b3_slc(_151831_d.get()._field_kind.ptr()).get()._field_elem;;
	jule::Ptr<_2455e59ee_Prim> _154013_prim = _2455e3139_prim(_153917_t.ptr());;
	if (((_154013_prim == nullptr) || ((!(_2455e7308_is_u8(_154013_prim.ptr()))) && (!(_2455e6d30_is_i32(_154013_prim.ptr())))))) {
		_2455b70ca_push_err(&(*_self_), _151841_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(jule::Str("str", 3)),jule::Any(_2455e1423_to_str(_151831_d.get()._field_kind.ptr()))}));
	};
}



inline void _2455c60d9_cast_int(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _154631_t, jule::Ptr<_2455b5051_Data> _154649_d, jule::Ptr<_2431e4523_Token> _154659_error_token) {
	if (_2455b5914_is_const(_154649_d.ptr())) {
		jule::Ptr<_2455e59ee_Prim> _154817_prim = _2455e3139_prim(_154631_t.ptr());;
		{
			
			if (_2455280b3_is_sig_int(_154817_prim.get()._field_kind)) {
				_case_begin_229bd6638:;
				{
					_24491896b_set_i64(_154649_d.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64(_154649_d.get()._field_constant.ptr())));
				}
			}
			else if (_24552839e_is_unsig_int(_154817_prim.get()._field_kind)) {
				_case_begin_229bd66b0:;
				{
					_244918be1_set_u64(_154649_d.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64(_154649_d.get()._field_constant.ptr())));
				}
			}
			_match_end_229bd657d:;
		};
	};
	if ((_2455e3876_enm(_154649_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_245481e0c_Enum> _155817_e = _2455e3876_enm(_154649_d.get()._field_kind.ptr());;
		if (_245528c0c_is_num(_2455e1423_to_str(_155817_e.get()._field_kind.get()._field_kind.ptr()))) {
			return;;
		};
	};
	if ((_2455e339d_sptr(_154649_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_2455e59ee_Prim> _156517_prim = _2455e3139_prim(_154631_t.ptr());;
		if ((!(_2455e875a_is_uintptr(_156517_prim.ptr())))) {
			_2455b70ca_push_err(&(*_self_), _154659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_154649_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_154631_t.ptr()))}));
		};
		return;;
	};
	if ((_2455e3612_ptr(_154649_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_2455e59ee_Prim> _157217_prim = _2455e3139_prim(_154631_t.ptr());;
		if (_2455e875a_is_uintptr(_157217_prim.ptr())) {
		} else if ((!(_2455b7a15_is_unsafe(&(*_self_))))) {
			_2455b70ca_push_err(&(*_self_), _154659_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		} else if ((((((!(_2455e6d30_is_i32(_157217_prim.ptr()))) && (!(_2455e7094_is_i64(_157217_prim.ptr())))) && (!(_2455e756c_is_u16(_157217_prim.ptr())))) && (!(_2455e77d1_is_u32(_157217_prim.ptr())))) && (!(_2455e7a45_is_u64(_157217_prim.ptr()))))) {
			_2455b70ca_push_err(&(*_self_), _154659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_154649_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_154631_t.ptr()))}));
		};
		return;;
	};
	jule::Ptr<_2455e59ee_Prim> _158313_prim = _2455e3139_prim(_154649_d.get()._field_kind.ptr());;
	if (((_158313_prim != nullptr) && _245528c0c_is_num(_2455e5d62_to_str(_158313_prim.ptr())))) {
		return;;
	};
	_2455b70ca_push_err(&(*_self_), _154659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_154649_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_154631_t.ptr()))}));
}



inline void _2455c64a2_cast_num(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _159131_t, jule::Ptr<_2455b5051_Data> _159149_d, jule::Ptr<_2431e4523_Token> _159159_error_token) {
	if (_2455b5914_is_const(_159149_d.ptr())) {
		jule::Ptr<_2455e59ee_Prim> _159317_prim = _2455e3139_prim(_159131_t.ptr());;
		{
			
			if (_245528965_is_float(_159317_prim.get()._field_kind)) {
				_case_begin_229be1aa5:;
				{
					_244919461_set_f64(_159149_d.get()._field_constant.ptr(), static_cast<jule::F64>(_2449186e6_as_f64(_159149_d.get()._field_constant.ptr())));
				}
			}
			else if (_2455280b3_is_sig_int(_159317_prim.get()._field_kind)) {
				_case_begin_229be1b2c:;
				{
					_24491896b_set_i64(_159149_d.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64(_159149_d.get()._field_constant.ptr())));
				}
			}
			else if (_24552839e_is_unsig_int(_159317_prim.get()._field_kind)) {
				_case_begin_229be1ba4:;
				{
					_244918be1_set_u64(_159149_d.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64(_159149_d.get()._field_constant.ptr())));
				}
			}
			_match_end_229be19d9:;
		};
	};
	if ((_2455e3876_enm(_159149_d.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_245481e0c_Enum> _160517_e = _2455e3876_enm(_159149_d.get()._field_kind.ptr());;
		if (_245528c0c_is_num(_2455e1423_to_str(_160517_e.get()._field_kind.get()._field_kind.ptr()))) {
			return;;
		};
	};
	jule::Ptr<_2455e59ee_Prim> _161113_prim = _2455e3139_prim(_159149_d.get()._field_kind.ptr());;
	if (((_161113_prim != nullptr) && _245528c0c_is_num(_2455e5d62_to_str(_161113_prim.ptr())))) {
		return;;
	};
	_2455b70ca_push_err(&(*_self_), _159159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_159149_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_159131_t.ptr()))}));
}



inline void _2455c686a_cast_prim(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _161932_t, jule::Ptr<_2455b5051_Data> _161950_d, jule::Ptr<_2431e4523_Token> _161960_error_token) {
	jule::Ptr<_2455e59ee_Prim> _162013_prim = _2455e3139_prim(_161932_t.ptr());;
	{
		
		if (_2455e8e97_is_any(_162013_prim.ptr())) {
			_case_begin_229be758e:;
		}
		else if (_2455e8c33_is_str(_162013_prim.ptr())) {
			_case_begin_229be7b11:;
			{
				_2455c5c21_cast_str(&(*_self_), _161950_d,_161960_error_token);
			}
		}
		else if (_245528646_is_int(_2455e5d62_to_str(_162013_prim.ptr()))) {
			_case_begin_229be7b77:;
			{
				_2455c60d9_cast_int(&(*_self_), _161932_t,_161950_d,_161960_error_token);
			}
		}
		else if (_245528c0c_is_num(_2455e5d62_to_str(_162013_prim.ptr()))) {
			_case_begin_229be7bdd:;
			{
				_2455c64a2_cast_num(&(*_self_), _161932_t,_161950_d,_161960_error_token);
			}
		}
		else {
			_case_begin_229be7a9a:;
			{
				_2455b70ca_push_err(&(*_self_), _161960_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_161932_t.ptr()))}));
			}
		}
		_match_end_229be7a34:;
	};
}



inline void _2455c6b89_cast_constant(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind>& _163537_t, jule::Ptr<_2455b5051_Data>& _163556_d) {
	if (((_163556_d == nullptr) || (!(_2455b5914_is_const(_163556_d.ptr()))))) {
		return;;
	};
	jule::Ptr<_2455e59ee_Prim> _163913_prim = _2455e3139_prim(_163537_t.ptr());;
	_2455dd1ab_cast_const_by_type(_163913_prim.get()._field_kind,_163556_d);
	_163556_d.get()._field_model=static_cast<jule::Any>(_163556_d.get()._field_constant);
}



inline void _2455c7052_cast_type_enum(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind>& _164438_t, jule::Ptr<_2455b5051_Data>& _164457_d, jule::Ptr<_2431e4523_Token>& _164472_error_token) {
	jule::I32 _164513_n = (*_self_)._field_s.get()._field_errors.len();;
	if ((!(_245559c4e_check_type_compatibility((*_self_)._field_s, _164457_d.get()._field_kind,_164438_t,_164472_error_token)))) {
		(*_self_)._field_s.get()._field_errors=(*_self_)._field_s.get()._field_errors.slice(0LL,_164513_n);
		_2455b70ca_push_err(&(*_self_), _164472_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_164457_d.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_164438_t.ptr()))}));
	};
}



inline jule::Ptr<_2455b5051_Data> _2455c74c5_eval_cast_by_type_n_data(_2455b6abe_Eval* _self_, jule::Ptr<_2455e1027_TypeKind> _165247_t, jule::Ptr<_2455b5051_Data> _165265_d, jule::Ptr<_2431e4523_Token> _165279_error_token) {
	if (((_165265_d != nullptr) && _165265_d.get()._field_decl)) {
		_2455b70ca_push_err(&(*_self_), _165279_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	{
		
		if (((_2455e3139_prim(_165265_d.get()._field_kind.ptr()) != nullptr) && _2455e8e97_is_any(_2455e3139_prim(_165265_d.get()._field_kind.ptr()).ptr()))) {
			_case_begin_229c01356:;
			{
				if ((_2455e3876_enm(_165247_t.ptr()) != nullptr)) {
					_2455b70ca_push_err(&(*_self_), _165279_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
					_2455b73e9_push_suggestion(&(*_self_), jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>());
				} else if ((_2455e3ada_tenm(_165247_t.ptr()) != nullptr)) {
					_2455b70ca_push_err(&(*_self_), _165279_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
				};
			}
		}
		else if ((_2455e3ada_tenm(_165265_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229c006b8:;
			{
				_2455c7052_cast_type_enum(&(*_self_), _165247_t,_165265_d,_165279_error_token);
			}
		}
		else if ((_2455e3612_ptr(_165247_t.ptr()) != nullptr)) {
			_case_begin_229c0072e:;
			{
				_2455c4ca8_cast_ptr(&(*_self_), _165247_t,_165265_d,_165279_error_token);
			}
		}
		else if ((_2455e339d_sptr(_165247_t.ptr()) != nullptr)) {
			_case_begin_229c00795:;
			{
				_2455c5539_cast_ref(&(*_self_), _165247_t,_165265_d,_165279_error_token);
			}
		}
		else if ((_2455e40b3_slc(_165247_t.ptr()) != nullptr)) {
			_case_begin_229c0080b:;
			{
				_2455c5902_cast_slc(&(*_self_), _165247_t,_165265_d,_165279_error_token);
			}
		}
		else if ((_2455e458b_strct(_165247_t.ptr()) != nullptr)) {
			_case_begin_229c014aa:;
			{
				_2455c5171_cast_struct(&(*_self_), _165247_t,_165265_d,_165279_error_token);
			}
		}
		else if ((_2455e3139_prim(_165247_t.ptr()) != nullptr)) {
			_case_begin_229c01521:;
			{
				_2455c686a_cast_prim(&(*_self_), _165247_t,_165265_d,_165279_error_token);
				_2455c6b89_cast_constant(&(*_self_), _165247_t,_165265_d);
			}
		}
		else {
			_case_begin_229c00652:;
			{
				_2455b70ca_push_err(&(*_self_), _165279_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_165247_t.ptr()))}));
				_165265_d=nullptr;
			}
		}
		_match_end_229c005ec:;
	};
	if ((_165265_d == nullptr)) {
		return nullptr;
	};
	_165265_d.get()._field_mutable=(_165265_d.get()._field_mutable || ((!(_2455e2424_mutable(_165265_d.get()._field_kind.ptr()))) && _2455e2424_mutable(_165247_t.ptr())));
	_165265_d.get()._field_lvalue=false;
	_165265_d.get()._field_decl=false;
	if (((_2455e3876_enm(_165265_d.get()._field_kind.ptr()) == nullptr) || (!(_2455e1731_equals(_2455e3876_enm(_165265_d.get()._field_kind.ptr()).get()._field_kind.get()._field_kind, _165247_t))))) {
		_2455dc63e_apply_cast_kind(_165265_d,_165247_t);
		_165265_d.get()._field_model.operator jule::Ptr<_244920522_CastingExprModel>().get()._field_token=_165279_error_token;
	} else {
		_165265_d.get()._field_kind=_165247_t;
	};
	return _165265_d;
}



inline jule::Ptr<_2455b5051_Data> _2455c7937_eval_cast_t(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2455e1027_TypeKind>& _170536_t, jule::Ptr<_24485c706_Expr>& _170555_e, jule::Ptr<_2431e4523_Token>& _170570_et) {
	jule::Ptr<_2455e1027_TypeKind> _170617_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_170617_prefix;
	});;
	if ((_2455e40b3_slc(_170536_t.ptr()) != nullptr)) {
		{
			auto &_match_expr{ _170555_e.get()._field_kind };
			
			if (_match_expr.type_is<jule::Ptr<_2448640ae_SliceExpr>>()) {
				_case_begin_229c0b84a:;
				{
					_self_.get()._field_prefix=_170536_t;
				}
			}
			_match_end_229c0b938:;
		};
	};
	jule::Ptr<_2455b5051_Data> _171517_d = _2455d20c3_eval_expr_kind(_self_, _170555_e.get()._field_kind);;
	if (((_171517_d == nullptr) || (_self_.get()._field_prefix != nullptr))) {
		return _171517_d;
	};
	return _2455c74c5_eval_cast_by_type_n_data(_self_.ptr(), _170536_t,_171517_d,_170570_et);
}



inline jule::Ptr<_2455b5051_Data> _2455c7c45_eval_cast(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448606d7_CastExpr> _172233_c) {
	jule::Ptr<_2455e5180_TypeSymbol> _172317_t = _24492e0d0_build_type(_172233_c.get()._field_kind);;
	jule::Bool _172413_ok = _245557b1a_check_type(_self_.get()._field_s, _172317_t,_self_.get()._field_lookup);;
	if ((!(_172413_ok))) {
		return nullptr;
	};
	return _2455c7937_eval_cast_t(_self_, _172317_t.get()._field_kind,_172233_c.get()._field_expr,_172233_c.get()._field_kind.get()._field_token);
}



inline jule::Ptr<_2455b5051_Data> _2455c8053_eval_ns_selection(_2455b6abe_Eval* _self_, jule::Ptr<_244860a8e_NsSelectionExpr> _173136_s) {
	jule::Str _173213_path = _245608a78_build_link_path_by_tokens(_173136_s.get()._field_ns);;
	jule::Ptr<_245547db3_ImportInfo> _173317_imp = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560a085_select_package((*_self_)._field_lookup, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>([=](jule::Ptr<_245547db3_ImportInfo> _173353_imp) mutable -> jule::Bool {
		if (((_173136_s.get()._field_ns.len() == 1LL) && (_173353_imp.get()._field_alias == _173213_path))) {
			return true;
		};
		return ((_173353_imp.get()._field_link_path == _173213_path) && _24554aa20_is_accessible_via_selection(_173353_imp.ptr()));
	}));;
	if ((_173317_imp == nullptr)) {
		_2455b70ca_push_err(&(*_self_), _173136_s.get()._field_ident,jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>::make({jule::Any(_173213_path)}));
		return nullptr;
	};
	jule::Trait<_24560bac0_Lookup> _174517_lookup = (*_self_)._field_lookup;;
	(*_self_)._field_lookup=jule::Trait<_24560bac0_Lookup>(_173317_imp, 1);
	;
	_2455b77a1_disallow_builtin(&(*_self_));
	jule::Any _175017_def = _2455ba0de_get_def(&(*_self_), _173136_s.get()._field_ident.get()._field_kind,false);;
	_2455b75c5_allow_builtin(&(*_self_));
	(*_self_)._field_lookup=_174517_lookup;
	jule::Ptr<_2455b5051_Data> _175417_d = _2455bdb09_eval_def(&(*_self_), jule::Any(_175017_def),_173136_s.get()._field_ident);;
	return _175417_d;
}



inline jule::Ptr<_2455b5051_Data> _2455c84c6_eval_struct_lit_explicit(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244874c5c_StructIns> _175948_s, jule::Slice<jule::Ptr<_24485c706_Expr>> _176013_exprs, jule::Ptr<_2431e4523_Token> _176033_error_token) {
	jule::Bool _176113_ok = _245555068_check_generic_quantity(_self_.get()._field_s.ptr(), static_cast<jule::I32>(_175948_s.get()._field_decl.get()._field_generics.len()),static_cast<jule::I32>(_175948_s.get()._field_generics.len()),_176033_error_token);;
	if ((!(_176113_ok))) {
		return nullptr;
	};
	if (((_self_.get()._field_field != nullptr) && (_self_.get()._field_field.get()._field_decl.get()._field_owner == _175948_s.get()._field_decl))) {
		_2455b70ca_push_err(_self_.ptr(), _176033_error_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>::make({jule::Any(_175948_s.get()._field_decl.get()._field_ident)}));
	};
	_229bbb91a_push_reference(_self_.ptr(), _175948_s);
	_2455bbed1_check_deprecated(_self_.ptr(), _175948_s.get()._field_decl.get()._field_directives,_176033_error_token);
	_2455a96c7_StructLitChecker _177417_slc = _2455a96c7_StructLitChecker{._field_e=_self_, ._field_error_token=_176033_error_token, ._field_s=_175948_s, };;
	_2455aac6c_check(&_177417_slc, _176013_exprs);
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_175948_s, 0)}), ._field_mutable=(!(_self_.get()._field_immutable)), ._field_model=static_cast<jule::Any>(jule::new_ptr<_244920148_StructLitExprModel>(_244920148_StructLitExprModel{._field_strct=_175948_s, ._field_args=_177417_slc._field_args})), });
}



inline jule::Ptr<_2455b5051_Data> _2455c87e5_eval_struct_lit(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244862ba1_StructLit> _179339_lit) {
	jule::Ptr<_2455e5180_TypeSymbol> _179417_t = _24492e0d0_build_type(_179339_lit.get()._field_kind);;
	jule::Bool _179513_ok = _245557b1a_check_type(_self_.get()._field_s, _179417_t,_self_.get()._field_lookup);;
	if ((!(_179513_ok))) {
		return nullptr;
	};
	jule::Ptr<_244874c5c_StructIns> _180017_s = _2455e458b_strct(_179417_t.get()._field_kind.ptr());;
	if ((_180017_s == nullptr)) {
		if ((_2455e339d_sptr(_179417_t.get()._field_kind.ptr()) != nullptr)) {
			_180017_s=_2455e458b_strct(_2455e339d_sptr(_179417_t.get()._field_kind.ptr()).get()._field_elem.ptr());
			if ((_180017_s != nullptr)) {
				goto _julec_label_eval;
			};
		};
		_2455b70ca_push_err(_self_.ptr(), _179339_lit.get()._field_kind.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	_julec_label_eval:;
	jule::Ptr<_2455b5051_Data> _181317_d = _2455c84c6_eval_struct_lit_explicit(_self_, _180017_s,_179339_lit.get()._field_exprs,_179339_lit.get()._field_kind.get()._field_token);;
	if ((_2455e339d_sptr(_179417_t.get()._field_kind.ptr()) != nullptr)) {
		jule::Ptr<_244920148_StructLitExprModel> _181521_model = _181317_d.get()._field_model.operator jule::Ptr<_244920148_StructLitExprModel>();;
		_2455db099_make_struct_lit_alloc(_181317_d,_181521_model);
	};
	return _181317_d;
}



inline jule::Ptr<_2455b5051_Data> _2455c8b03_eval_type(_2455b6abe_Eval* _self_, jule::Ptr<_2448581d5_TypeDecl> _182132_t) {
	jule::Ptr<_2455e5180_TypeSymbol> _182217_tk = _24492e0d0_build_type(_182132_t);;
	jule::Bool _182313_ok = _245557b1a_check_type((*_self_)._field_s, _182217_tk,(*_self_)._field_lookup);;
	if ((!(_182313_ok))) {
		return nullptr;
	};
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=_182217_tk.get()._field_kind, ._field_model=static_cast<jule::Any>(_182217_tk.get()._field_kind), ._field_decl=true, });
}



inline void _2455c8e22_call_type_fn(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448619c4_FnCallExpr>& _183437_fc, jule::Ptr<_2455b5051_Data>& _183459_d) {
	if ((_183437_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_self_.ptr(), _183437_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("v", 1))}));
	} else if ((_183437_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_self_.ptr(), _183437_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	if ((_183437_fc.get()._field_args.len() > 0LL)) {
		jule::Ptr<_24485c706_Expr> _184221_arg = _183437_fc.get()._field_args[0LL];;
		_183459_d=_2455c7937_eval_cast_t(_self_, _183459_d.get()._field_kind,_184221_arg,_184221_arg.get()._field_token);
		return;;
	};
	if ((_183459_d != nullptr)) {
		_183459_d.get()._field_decl=false;
	};
}



inline void _2455c9241_call_builtin_fn(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448619c4_FnCallExpr>& _185240_fc, jule::Ptr<_2455b5051_Data>& _185262_d) {
	_185262_d=_2455e4327_fnc(_185262_d.get()._field_kind.ptr()).get()._field_caller(_self_,_185240_fc,_185262_d);
	if ((_185262_d == nullptr)) {
		return;;
	};
	_185262_d.get()._field_mutable=true;
}



inline void _2455c9582_check_fn_of_concurrent_call(_2455b6abe_Eval* _self_, jule::Ptr<_2449299b0_FnIns>& _186047_f, jule::Ptr<_2431e4523_Token> _186058_error_token) {
	if (_2455b7a15_is_unsafe(&(*_self_))) {
		return;;
	};
	{
		auto &expr = _186047_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_229c2978b:;
		if (it != expr.end()) {
			jule::Ptr<_244928ae1_ParamIns> &_186516_p = *it;
			{
				if (_186516_p.get()._field_decl.get()._field_reference) {
					_2455b70ca_push_err(&(*_self_), _186058_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>());
					return;;
				};
			}
			_iter_next_229c2978b:;
			++it;
			goto _iter_begin_229c2978b;
		}
		_iter_end_229c2978b:;
	};
}



inline void _2455c997d_process_exceptional_handler(_2455b6abe_Eval* _self_, jule::Ptr<_2449299b0_FnIns>& _187351_f, jule::Ptr<_2448619c4_FnCallExpr>& _187367_fc, jule::Ptr<_2455b5051_Data>& _187389_d) {
	jule::Bool _187413_result_needed = ((!(_244927271_is_void(_187351_f.get()._field_decl.ptr()))) && ((*_self_)._field_arg || (!((*_self_)._field_ignored))));;
	jule::Ptr<_245531066_ScopeChecker> _187517_csc = nullptr;;
	jule::Ptr<_24552937d_Scope> _187617_ch = nullptr;;
	jule::Ptr<_24492070e_FnCallExprModel> _187817_model = _187389_d.get()._field_model.operator jule::Ptr<_24492070e_FnCallExprModel>();;
	jule::Ptr<_245531066_ScopeChecker> _188217_sc = (*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>();;
	_187517_csc=_245541609_new_child_checker(_188217_sc);
	if (_187413_result_needed) {
		_187517_csc.get()._field_result=_187351_f;
	};
	_187617_ch=_24553592d_get_child(_188217_sc.ptr());
	_187367_fc.get()._field_exception.get()._field_parent=_188217_sc.get()._field_tree;
	_187517_csc.get()._field_table.get()._field_vars = jule::alloc_for_append(_187517_csc.get()._field_table.get()._field_vars,1);_187517_csc.get()._field_table.get()._field_vars.__push(_2455db3da_build_error_var(_187617_ch,_187367_fc));;
	_245535ce6_check_child_ssc(_188217_sc, _187367_fc.get()._field_exception,_187617_ch,_187517_csc);
	_187817_model.get()._field_assigned=_187413_result_needed;
	_187817_model.get()._field_except=_187617_ch;
	if ((_187413_result_needed && (_187517_csc.get()._field_result != nullptr))) {
		_2455b70ca_push_err(&(*_self_), _187367_fc.get()._field_token,jule::Str("assignments requires expression", 31),jule::Slice<jule::Any>());
	};
}



inline void _2455c9cad_call_fn(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448619c4_FnCallExpr>& _190032_fc, jule::Ptr<_2455b5051_Data>& _190054_d) {
	jule::Ptr<_2449299b0_FnIns> _190117_f = _2455e4327_fnc(_190054_d.get()._field_kind.ptr());;
	if ((_2455b7c79_is_global(_self_.ptr()) && _190117_f.get()._field_decl.get()._field_exceptional)) {
		_2455b70ca_push_err(_self_.ptr(), _190032_fc.get()._field_token,jule::Str("exceptionals are not allowed in global scope", 44),jule::Slice<jule::Any>());
		_2455b73e9_push_suggestion(_self_.ptr(), jule::Str("wrap exceptional with a non-exceptional function", 48),jule::Slice<jule::Any>());
		_190054_d=nullptr;
		return;;
	};
	if (_24492ad46_is_builtin(_190117_f.ptr())) {
		_2455c9241_call_builtin_fn(_self_, _190032_fc,_190054_d);
		return;;
	};
	if (((!(_2449274d5_is_method(_190117_f.get()._field_decl.ptr()))) && _245607ba9_has_directive(_190117_f.get()._field_decl.get()._field_directives,jule::Str("test", 4)))) {
		_2455b70ca_push_err(_self_.ptr(), _190032_fc.get()._field_token,jule::Str("you cannot call test functions", 30),jule::Slice<jule::Any>());
		_190054_d=nullptr;
		return;;
	};
	if (((((!(_190054_d.get()._field_mutable)) && _2449274d5_is_method(_190117_f.get()._field_decl.ptr())) && (!(_190117_f.get()._field_decl.get()._field_statically))) && _190117_f.get()._field_decl.get()._field_params[0LL].get()._field_mutable)) {
		_2455b70ca_push_err(_self_.ptr(), _190032_fc.get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	} else if (((!(_2455b7a15_is_unsafe(_self_.ptr()))) && _190117_f.get()._field_decl.get()._field_unsafety)) {
		_2455b70ca_push_err(_self_.ptr(), _190032_fc.get()._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	};
	jule::Bool _192517_dynamic_annotation = (((_190117_f.get()._field_decl.get()._field_generics.len() > 0LL) && (_190117_f.get()._field_generics.len() == 0LL)) && (_190117_f.get()._field_params.len() > 0LL));;
	if (_192517_dynamic_annotation) {
		_190117_f.get()._field_generics=jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>>::alloc(_190117_f.get()._field_decl.get()._field_generics.len());
	} else if ((_190117_f.get()._field_generics.len() != _190117_f.get()._field_decl.get()._field_generics.len())) {
		_245555068_check_generic_quantity(_self_.get()._field_s.ptr(), static_cast<jule::I32>(_190117_f.get()._field_decl.get()._field_generics.len()),static_cast<jule::I32>(_190117_f.get()._field_generics.len()),_190032_fc.get()._field_token);
		_190054_d=nullptr;
		return;;
	};
	jule::Ptr<_24555100e_Sema> _193417_old = _self_.get()._field_s;;
	if ((_190117_f.get()._field_decl.get()._field_owner != nullptr)) {
		_self_.get()._field_s=_190117_f.get()._field_decl.get()._field_owner.get()._field_sema;
	};
	__JULE_DEFER({
		if ((_193417_old != _self_.get()._field_s)) {
			_193417_old.get()._field_errors=jule::append(_193417_old.get()._field_errors,_self_.get()._field_s.get()._field_errors);
			_self_.get()._field_s.get()._field_errors=nullptr;
		};
		_self_.get()._field_s=_193417_old;
	});;
	if ((!(_192517_dynamic_annotation))) {
		if ((!(_190117_f.get()._field_reloaded))) {
			jule::Bool _194921_ok = _24555ba64_reload_fn_ins_types(_self_.get()._field_s, _190117_f);;
			_190117_f.get()._field_reloaded=true;
			if ((!(_194921_ok))) {
				_190054_d=nullptr;
				return;;
			};
		};
		jule::Ptr<_2449299b0_FnIns> _195621_exist_instance = _244928739_append_instance(_190117_f.get()._field_decl.ptr(), _190117_f);;
		if ((_195621_exist_instance != nullptr)) {
			_190117_f=_195621_exist_instance;
		};
	} else {
		_24555a3e2_build_fn_non_generic_type_kinds(_self_.get()._field_s, _190117_f);
	};
	_2455a6cbd_FnCallArgChecker _196417_fcac = _2455a6cbd_FnCallArgChecker{._field_e=_self_, ._field_args=_190032_fc.get()._field_args, ._field_error_token=_190032_fc.get()._field_token, ._field_f=_190117_f, ._field_dynamic_annotation=_192517_dynamic_annotation, };;
	jule::Bool _197117_ok = false;;
	if ((_190117_f.get()._field_decl.get()._field_owner != nullptr)) {
		std::tie(_193417_old,_self_.get()._field_s) = std::make_tuple(_self_.get()._field_s,_193417_old);
		_197117_ok=_2455a9188_check(&_196417_fcac);
		std::tie(_193417_old,_self_.get()._field_s) = std::make_tuple(_self_.get()._field_s,_193417_old);
	} else {
		_197117_ok=_2455a9188_check(&_196417_fcac);
	};
	if (_192517_dynamic_annotation) {
		if ((!(_197117_ok))) {
			_190054_d=nullptr;
			return;;
		};
		if ((!(_2455c30b4_check_generic_fn(_self_, _190117_f,_190032_fc.get()._field_token,_190054_d.get()._field_model)))) {
			_190054_d=nullptr;
			return;;
		};
	};
	jule::Any _199117_call_model = _190054_d.get()._field_model;;
	if (_244927271_is_void(_190117_f.get()._field_decl.ptr())) {
		_190054_d=_2455dc83c_build_void_data();
	} else {
		_190054_d.get()._field_kind=_190117_f.get()._field_result;
		_190054_d.get()._field_lvalue=false;
	};
	jule::Ptr<_24492070e_FnCallExprModel> _200017_model = jule::new_ptr<_24492070e_FnCallExprModel>(_24492070e_FnCallExprModel{._field_token=_190032_fc.get()._field_token, ._field_func=_190117_f, ._field_expr=_199117_call_model, ._field_args=_196417_fcac._field_arg_models, });;
	_190054_d.get()._field_model=static_cast<jule::Any>(_200017_model);
	_190054_d.get()._field_mutable=true;
	if (_190117_f.get()._field_decl.get()._field_exceptional) {
		{
			
			if (_244861d37_unhandled(_190032_fc.ptr())) {
				_case_begin_229c44e16:;
				{
					_2455b70ca_push_err(_self_.ptr(), _190032_fc.get()._field_token,jule::Str("exceptionals must be handled", 28),jule::Slice<jule::Any>());
					_2455b73e9_push_suggestion(_self_.ptr(), jule::Str("use \"!\" operator after exceptional to handle it", 47),jule::Slice<jule::Any>());
				}
			}
			else if (_24486209b_ignored(_190032_fc.ptr())) {
				_case_begin_229c368a8:;
				{
					goto _match_end_229c44993;
				}
			}
			else {
				_case_begin_229c44a70:;
				{
					_2455c997d_process_exceptional_handler(_self_.ptr(), _190117_f,_190032_fc,_190054_d);
				}
			}
			_match_end_229c44993:;
		};
	} else if ((!(_244861d37_unhandled(_190032_fc.ptr())))) {
		_2455b70ca_push_err(_self_.ptr(), _190032_fc.get()._field_token,jule::Str("non-exceptionals cannot handled like exceptionals", 49),jule::Slice<jule::Any>());
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ca0bb_eval_fn_call(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2448619c4_FnCallExpr> _202636_fc) {
	jule::Ptr<_2455e1027_TypeKind> _202717_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_202717_prefix;
	});;
	{
		auto &_match_expr{ _202636_fc.get()._field_expr.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485e76e_IdentExpr>>()) {
			_case_begin_229c47545:;
			{
				if ((_202636_fc.get()._field_expr.get()._field_token.get()._field_kind == jule::Str("error", 5))) {
					return _245692e97_builtin_caller_error(_self_,_202636_fc);
				};
			}
		}
		_match_end_229c474e0:;
	};
	jule::Ptr<_2455b5051_Data> _204017_d = _2455d20c3_eval_expr_kind(_self_, _202636_fc.get()._field_expr.get()._field_kind);;
	if ((_204017_d == nullptr)) {
		return nullptr;
	};
	if (_204017_d.get()._field_decl) {
		_2455c8e22_call_type_fn(_self_, _202636_fc,_204017_d);
		return _204017_d;
	};
	if ((_2455e4327_fnc(_204017_d.get()._field_kind.ptr()) == nullptr)) {
		_2455b70ca_push_err(_self_.ptr(), _202636_fc.get()._field_token,jule::Str("attempting to call a non-function", 33),jule::Slice<jule::Any>());
		return nullptr;
	};
	_2455c9cad_call_fn(_self_, _202636_fc,_204017_d);
	return _204017_d;
}



inline jule::Ptr<_2455b5051_Data> _2455ca473_eval_enum_static(_2455b6abe_Eval* _self_, jule::Ptr<_245481e0c_Enum> _205939_enm, jule::Ptr<_2431e4523_Token> _205951_ident) {
	jule::Ptr<_2455b5051_Data> _206017_d = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_205939_enm, 3)}), ._field_mutable=false, ._field_lvalue=false, ._field_decl=false, });;
	jule::Ptr<_245481417_EnumItem> _206917_item = _2454829bd_find_item(_205939_enm.ptr(), _205951_ident.get()._field_kind);;
	if ((_206917_item == nullptr)) {
		_2455b70ca_push_err(&(*_self_), _205951_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_205939_enm.get()._field_ident),jule::Any(_205951_ident.get()._field_kind)}));
	} else {
		_206017_d.get()._field_constant=jule::new_ptr<_2448ab524_Const>((*(_206917_item.get()._field_value.get()._field_data.get()._field_constant)));
		_206017_d.get()._field_model=static_cast<jule::Any>(_206017_d.get()._field_constant);
		_2455dcde2_apply_cast_model_by_enum(_206017_d,_205939_enm);
	};
	return _206017_d;
}



inline jule::Ptr<_2455b5051_Data> _2455ca82a_eval_type_enum_static(_2455b6abe_Eval* _self_, jule::Ptr<_245483507_TypeEnum> _208144_enm, jule::Ptr<_2431e4523_Token> _208160_ident) {
	jule::Ptr<_245482e41_TypeEnumItem> _208217_item = _245484041_find_item(_208144_enm.ptr(), _208160_ident.get()._field_kind);;
	if ((_208217_item == nullptr)) {
		_2455b70ca_push_err(&(*_self_), _208160_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_208144_enm.get()._field_ident),jule::Any(_208160_ident.get()._field_kind)}));
		return nullptr;
	};
	{
		
		if ((_2455e3876_enm(_208217_item.get()._field_kind.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229c51241:;
			{
				return _2455ba672___eval_enum(&(*_self_), _2455e3876_enm(_208217_item.get()._field_kind.get()._field_kind.ptr()));
			}
		}
		else if ((_2455e3ada_tenm(_208217_item.get()._field_kind.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229c5143e:;
			{
				return _2455bad37___eval_type_enum(&(*_self_), _2455e3ada_tenm(_208217_item.get()._field_kind.get()._field_kind.ptr()));
			}
		}
		else if ((_2455e458b_strct(_208217_item.get()._field_kind.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229c5065d:;
			{
				return _2455bb4ec___eval_struct(&(*_self_), _2455e458b_strct(_208217_item.get()._field_kind.get()._field_kind.ptr()));
			}
		}
		else {
			_case_begin_229c4e8b0:;
			{
				jule::Ptr<_2455b5051_Data> _209521_d = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=_208217_item.get()._field_kind.get()._field_kind, ._field_decl=true, });;
				_209521_d.get()._field_model=static_cast<jule::Any>(_209521_d.get()._field_kind);
				return _209521_d;
			}
		}
		_match_end_229c4e85a:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cabd2_eval_struct_static(_2455b6abe_Eval* _self_, jule::Ptr<_244874c5c_StructIns> _210441_s, jule::Ptr<_2431e4523_Token> _210456_ident) {
	jule::Ptr<_2455b5051_Data> _210517_d = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_mutable=false, ._field_lvalue=false, ._field_decl=false, });;
	;
	jule::Ptr<_244926d0e_Fn> _211317_method = _24484edd0_find_method(_210441_s.ptr(), _210456_ident.get()._field_kind,true);;
	if ((_211317_method != nullptr)) {
		if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _211317_method.get()._field_public,_211317_method.get()._field_token)))) {
			_2455b70ca_push_err(&(*_self_), _210456_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_210456_ident.get()._field_kind)}));
			_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		};
		jule::Ptr<_2449299b0_FnIns> _212021_ins = _24492845e_instance(_211317_method);;
		_212021_ins.get()._field_owner=_210441_s;
		_229b171b2_push_reference(&(*_self_), _212021_ins);
		_210517_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244921b83_StructStaticIdentExprModel>(_244921b83_StructStaticIdentExprModel{._field_structure=_210441_s, ._field_expr=_210517_d.get()._field_model, ._field_method=_212021_ins}));
		_210517_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_212021_ins, 1)});
		return _210517_d;
	};
	jule::Ptr<_24556cc1d_Var> _213417_sttc = _244838d42_find_static(_210441_s.get()._field_decl.ptr(), _210456_ident.get()._field_kind);;
	if ((_213417_sttc != nullptr)) {
		return _2455bd39a_eval_var(&(*_self_), _213417_sttc,_210456_ident);
	};
	_2455b70ca_push_err(&(*_self_), _210456_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_210441_s.get()._field_decl.get()._field_ident),jule::Any(_210456_ident.get()._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_2455b5051_Data> _2455cb133_eval_trait_sub_ident(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _214343_d, jule::Ptr<_24547ec51_Trait> _214357_trt, jule::Ptr<_2431e4523_Token> _214374_ident) {
	jule::Ptr<_244926d0e_Fn> _214417_f = _245480a98_find_method(_214357_trt.ptr(), _214374_ident.get()._field_kind);;
	if ((_214417_f == nullptr)) {
		_2455b70ca_push_err(&(*_self_), _214374_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_214357_trt.get()._field_ident),jule::Any(_214374_ident.get()._field_kind)}));
		return nullptr;
	};
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_24492845e_instance(_214417_f), 1)}), ._field_mutable=false, ._field_lvalue=false, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244921578_TraitSubIdentExprModel>(_244921578_TraitSubIdentExprModel{._field_token=_214374_ident, ._field_expr=_214343_d.get()._field_model, ._field_method=_214417_f, ._field_trt=_214357_trt})), ._field_decl=false, });
}



inline jule::Ptr<_2455b5051_Data> _2455cb62d_eval_struct_sub_ident(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _216644_d, jule::Ptr<_244874c5c_StructIns> _216658_s, jule::Ptr<_244861012_SubIdentExpr> _216677_si, jule::Bool _216696_ref) {
	jule::Ptr<_244851079_FieldIns> _216717_f = _2448528e9_find_field(_216658_s.ptr(), _216677_si.get()._field_ident.get()._field_kind);;
	if ((_216717_f != nullptr)) {
		if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _216717_f.get()._field_decl.get()._field_public,_216717_f.get()._field_decl.get()._field_token)))) {
			_2455b70ca_push_err(&(*_self_), _216677_si.get()._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_216717_f.get()._field_decl.get()._field_ident)}));
			_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		};
		jule::Ptr<_244921996_StructSubIdentExprModel> _217421_model = jule::new_ptr<_244921996_StructSubIdentExprModel>(_244921996_StructSubIdentExprModel{._field_token=_216677_si.get()._field_ident, ._field_expr=jule::new_ptr<_2455b5051_Data>((*(_216644_d))), ._field_expr_kind=_216644_d.get()._field_kind, ._field_field=_216717_f});;
		_216644_d.get()._field_model=static_cast<jule::Any>(_217421_model);
		_216644_d.get()._field_kind=_216717_f.get()._field_kind;
		_216644_d.get()._field_lvalue=true;
		if ((_216717_f.get()._field_decl.get()._field_mutable && (!(_216644_d.get()._field_mutable)))) {
			{
				auto &_match_expr{ (*_self_)._field_lookup };
				
				if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
					_case_begin_229c62719:;
					{
						jule::Ptr<_245531066_ScopeChecker> _218825_scope = _245534179_get_root((*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>());;
						_216644_d.get()._field_mutable=((_218825_scope.get()._field_owner != nullptr) && (_218825_scope.get()._field_owner.get()._field_owner == _216658_s));
					}
				}
				_match_end_229c626b4:;
			};
		};
		return _216644_d;
	};
	;
	jule::Ptr<_244926d0e_Fn> _219717_m = _24484edd0_find_method(_216658_s.ptr(), _216677_si.get()._field_ident.get()._field_kind,false);;
	if ((_219717_m == nullptr)) {
		_2455b70ca_push_err(&(*_self_), _216677_si.get()._field_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_216658_s.get()._field_decl.get()._field_ident),jule::Any(_216677_si.get()._field_ident.get()._field_kind)}));
		return nullptr;
	};
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _219717_m.get()._field_public,_219717_m.get()._field_token)))) {
		_2455b70ca_push_err(&(*_self_), _216677_si.get()._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>::make({jule::Any(_219717_m.get()._field_ident)}));
		_2455b73e9_push_suggestion(&(*_self_), jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	};
	if ((_244925d63_is_ref(_219717_m.get()._field_params[0LL].ptr()) && (!(_216696_ref)))) {
		_2455b70ca_push_err(&(*_self_), _216677_si.get()._field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>());
	};
	_2455bbed1_check_deprecated(&(*_self_), _219717_m.get()._field_directives,_216677_si.get()._field_ident);
	jule::Ptr<_2449299b0_FnIns> _221317_ins = _24492845e_instance(_219717_m);;
	_221317_ins.get()._field_owner=_216658_s;
	_229b171b2_push_reference(&(*_self_), _221317_ins);
	jule::Ptr<_2455b5051_Data> _221617_model = jule::new_ptr<_2455b5051_Data>((*(_216644_d)));;
	_216644_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244921996_StructSubIdentExprModel>(_244921996_StructSubIdentExprModel{._field_token=_216677_si.get()._field_ident, ._field_expr=_221617_model, ._field_expr_kind=_216644_d.get()._field_kind, ._field_method=_221317_ins, }));
	_216644_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_221317_ins, 1)});
	return _216644_d;
}



inline jule::Ptr<_2455b5051_Data> _2455cb9d5_eval_slice_sub_ident(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _222743_d, jule::Ptr<_2431e4523_Token> _222757_ident) {
	{
		auto &_match_expr{ _222757_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_229c720a8:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_mutable=false, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_222743_d.get()._field_kind, ._field_expr=_222743_d.get()._field_model, ._field_token=_222757_ident, ._field_ident=jule::Str("len()", 5)})), });
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_229c6c0b4:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_mutable=false, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_222743_d.get()._field_kind, ._field_expr=_222743_d.get()._field_model, ._field_token=_222757_ident, ._field_ident=jule::Str("cap()", 5)})), });
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_229c6c12a:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_params=jule::Slice<jule::Ptr<_244928ae1_ParamIns>>::make({jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_ident=jule::Str("i", 1)}), ._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)})}),jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_ident=jule::Str("j", 1)}), ._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)})})}), ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245671250_builtin_caller_common_mut), }), 1)}), ._field_mutable=_222743_d.get()._field_mutable, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_222743_d.get()._field_kind, ._field_expr=_222743_d.get()._field_model, ._field_token=_222757_ident, ._field_ident=jule::Str("swap", 4)})), });
			}
		}
		else {
			_case_begin_229c6b217:;
			{
				_2455b70ca_push_err(&(*_self_), _222757_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_222743_d.get()._field_kind.ptr())),jule::Any(_222757_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c6aec5:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cbd8c_eval_array_sub_ident(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _228643_d, jule::Ptr<_2431e4523_Token> _228657_ident) {
	{
		auto &_match_expr{ _228657_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_229c76332:;
			{
				jule::Ptr<_2448ab524_Const> _228921_c = static__244916408_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_2455e3d4e_arr(_228643_d.get()._field_kind.ptr()).get()._field_n)));;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_mutable=false, ._field_model=static_cast<jule::Any>(_228921_c), ._field_constant=_228921_c});
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_229c76398:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_params=jule::Slice<jule::Ptr<_244928ae1_ParamIns>>::make({jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_ident=jule::Str("i", 1)}), ._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)})}),jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_ident=jule::Str("j", 1)}), ._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)})})}), ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245671250_builtin_caller_common_mut), }), 1)}), ._field_mutable=_228643_d.get()._field_mutable, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_228643_d.get()._field_kind, ._field_expr=_228643_d.get()._field_model, ._field_token=_228657_ident, ._field_ident=jule::Str("swap", 4)})), });
			}
		}
		else {
			_case_begin_229c6b49d:;
			{
				_2455b70ca_push_err(&(*_self_), _228657_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_228643_d.get()._field_kind.ptr())),jule::Any(_228657_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c762cc:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cc244_eval_map_sub_ident(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _233141_d, jule::Ptr<_2431e4523_Token> _233155_ident) {
	jule::Ptr<_2455eb296_Map> _233217_map_kind = _2455e4a64_map(_233141_d.get()._field_kind.ptr());;
	{
		auto &_match_expr{ _233155_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_229c7c15c:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_mutable=false, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_233141_d.get()._field_kind, ._field_expr=_233141_d.get()._field_model, ._field_token=_233155_ident, ._field_ident=jule::Str("len()", 5)})), });
			}
		}
		else if (_match_expr == jule::Str("clear", 5)) {
			_case_begin_229c7c1c3:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245671250_builtin_caller_common_mut), }), 1)}), ._field_mutable=_233141_d.get()._field_mutable, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_233141_d.get()._field_kind, ._field_expr=_233141_d.get()._field_model, ._field_token=_233155_ident, ._field_ident=jule::Str("clear", 5)})), });
			}
		}
		else if (_match_expr == jule::Str("keys", 4)) {
			_case_begin_229c7c03b:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_result=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9be0_Slc>(_2455e9be0_Slc{._field_elem=_233217_map_kind.get()._field_key}), 8)}), ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245671250_builtin_caller_common_mut), }), 1)}), ._field_mutable=_233141_d.get()._field_mutable, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_233141_d.get()._field_kind, ._field_expr=_233141_d.get()._field_model, ._field_token=_233155_ident, ._field_ident=jule::Str("keys", 4)})), });
			}
		}
		else if (_match_expr == jule::Str("values", 6)) {
			_case_begin_229c7c0a2:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_result=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9be0_Slc>(_2455e9be0_Slc{._field_elem=_233217_map_kind.get()._field_val}), 8)}), ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245671250_builtin_caller_common_mut), }), 1)}), ._field_mutable=_233141_d.get()._field_mutable, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_233141_d.get()._field_kind, ._field_expr=_233141_d.get()._field_model, ._field_token=_233155_ident, ._field_ident=jule::Str("values", 6)})), });
			}
		}
		else if (_match_expr == jule::Str("has", 3)) {
			_case_begin_229c7b304:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_params=jule::Slice<jule::Ptr<_244928ae1_ParamIns>>::make({jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_ident=jule::Str("key", 3)}), ._field_kind=_233217_map_kind.get()._field_key})}), ._field_result=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456964b7_builtin_caller_common), }), 1)}), ._field_mutable=_233141_d.get()._field_mutable, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_233141_d.get()._field_kind, ._field_expr=_233141_d.get()._field_model, ._field_token=_233155_ident, ._field_ident=jule::Str("has", 3)})), });
			}
		}
		else if (_match_expr == jule::Str("del", 3)) {
			_case_begin_229c7b36a:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_params=jule::Slice<jule::Ptr<_244928ae1_ParamIns>>::make({jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_ident=jule::Str("key", 3)}), ._field_kind=_233217_map_kind.get()._field_key})}), ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245671250_builtin_caller_common_mut), }), 1)}), ._field_mutable=_233141_d.get()._field_mutable, ._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_233141_d.get()._field_kind, ._field_expr=_233141_d.get()._field_model, ._field_token=_233155_ident, ._field_ident=jule::Str("del", 3)})), });
			}
		}
		else {
			_case_begin_229c7b28d:;
			{
				_2455b70ca_push_err(&(*_self_), _233155_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_2455eb609_to_str(_233217_map_kind.ptr())),jule::Any(_233155_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c7b1e4:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cc5eb_eval_str_sub_ident(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _245441_d, jule::Ptr<_2431e4523_Token> _245455_ident) {
	jule::Ptr<_2455e1027_TypeKind> _245517_str_kind = jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("str", 3)), 6)});;
	{
		auto &_match_expr{ _245455_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_229c85a06:;
			{
				jule::Ptr<_2455b5051_Data> _245821_sd = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), });;
				if (_2455b5914_is_const(_245441_d.ptr())) {
					_245821_sd.get()._field_constant=static__244916408_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_244917c45_read_str(_245441_d.get()._field_constant.ptr()).len())));
					_245821_sd.get()._field_model=static_cast<jule::Any>(_245821_sd.get()._field_constant);
				} else {
					_245821_sd.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_245441_d.get()._field_kind, ._field_expr=_245441_d.get()._field_model, ._field_token=_245455_ident, ._field_ident=jule::Str("len()", 5)}));
				};
				return _245821_sd;
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_229c85a6c:;
			{
				jule::Ptr<_2455b5051_Data> _247421_sd = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), });;
				if (_2455b5914_is_const(_245441_d.ptr())) {
					_247421_sd.get()._field_constant=static__244916408_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_244917c45_read_str(_245441_d.get()._field_constant.ptr()).cap())));
					_247421_sd.get()._field_model=static_cast<jule::Any>(_247421_sd.get()._field_constant);
				} else {
					_247421_sd.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_245441_d.get()._field_kind, ._field_expr=_245441_d.get()._field_model, ._field_token=_245455_ident, ._field_ident=jule::Str("cap()", 5)}));
				};
				return _247421_sd;
			}
		}
		else {
			_case_begin_229c85990:;
			{
				_2455b70ca_push_err(&(*_self_), _245455_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_245517_str_kind.ptr())),jule::Any(_245455_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c858e6:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cc909_eval_int_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _249539_ident) {
	;
	{
		auto &_match_expr{ _249539_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229c8770b:;
			{
				jule::Ptr<_2448ab524_Const> _250021_c = static__244916408_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_245523267_max(jule::Str("int", 3)))));;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_model=static_cast<jule::Any>(_250021_c), ._field_constant=_250021_c});
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_229c8c975:;
			{
				jule::Ptr<_2448ab524_Const> _250721_c = static__244916408_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_245522e7b_min(jule::Str("int", 3)))));;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_model=static_cast<jule::Any>(_250721_c), ._field_constant=_250721_c});
			}
		}
		else {
			_case_begin_229c8bbc7:;
			{
				_2455b70ca_push_err(&(*_self_), _249539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("int", 3)),jule::Any(_249539_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c8ba2e:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ccc17_eval_uint_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _251940_ident) {
	;
	{
		auto &_match_expr{ _251940_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229c903c3:;
			{
				jule::Ptr<_2448ab524_Const> _252421_c = static__24491653a_new_u64(static_cast<jule::U64>(static_cast<jule::U64>(_245523267_max(jule::Str("uint", 4)))));;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("uint", 4)), 6)}), ._field_model=static_cast<jule::Any>(_252421_c), ._field_constant=_252421_c});
			}
		}
		else {
			_case_begin_229c90659:;
			{
				_2455b70ca_push_err(&(*_self_), _251940_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("uint", 4)),jule::Any(_251940_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c905b0:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cd025_eval_i8_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _253638_ident) {
	;
	;
	;
	{
		auto &_match_expr{ _253638_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229c935d5:;
			{
				jule::Ptr<_2448ab524_Const> _254321_c = static__244916408_new_i64(127LL);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i8", 2)), 6)}), ._field_model=static_cast<jule::Any>(_254321_c), ._field_constant=_254321_c});
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_229c9364b:;
			{
				jule::Ptr<_2448ab524_Const> _255021_c = static__244916408_new_i64(-128LL);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i8", 2)), 6)}), ._field_model=static_cast<jule::Any>(_255021_c), ._field_constant=_255021_c});
			}
		}
		else {
			_case_begin_229c9352a:;
			{
				_2455b70ca_push_err(&(*_self_), _253638_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("i8", 2)),jule::Any(_253638_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c934c5:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cd333_eval_i16_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _256239_ident) {
	;
	;
	;
	{
		auto &_match_expr{ _256239_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229c972ba:;
			{
				jule::Ptr<_2448ab524_Const> _256921_c = static__244916408_new_i64(32767LL);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i16", 3)), 6)}), ._field_model=static_cast<jule::Any>(_256921_c), ._field_constant=_256921_c});
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_229c97331:;
			{
				jule::Ptr<_2448ab524_Const> _257621_c = static__244916408_new_i64(-32768LL);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i16", 3)), 6)}), ._field_model=static_cast<jule::Any>(_257621_c), ._field_constant=_257621_c});
			}
		}
		else {
			_case_begin_229c97210:;
			{
				_2455b70ca_push_err(&(*_self_), _256239_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("i16", 3)),jule::Any(_256239_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c971aa:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cd641_eval_i32_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _258839_ident) {
	;
	;
	;
	{
		auto &_match_expr{ _258839_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229c9aea0:;
			{
				jule::Ptr<_2448ab524_Const> _259521_c = static__244916408_new_i64(2147483647LL);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i32", 3)), 6)}), ._field_model=static_cast<jule::Any>(_259521_c), ._field_constant=_259521_c});
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_229c9b016:;
			{
				jule::Ptr<_2448ab524_Const> _260221_c = static__244916408_new_i64(-2147483648LL);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i32", 3)), 6)}), ._field_model=static_cast<jule::Any>(_260221_c), ._field_constant=_260221_c});
			}
		}
		else {
			_case_begin_229c9ade5:;
			{
				_2455b70ca_push_err(&(*_self_), _258839_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("i32", 3)),jule::Any(_258839_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c9ad90:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cd94e_eval_i64_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _261439_ident) {
	;
	;
	;
	{
		auto &_match_expr{ _261439_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229c9eb85:;
			{
				jule::Ptr<_2448ab524_Const> _262121_c = static__244916408_new_i64(jule::MAX_I64);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i64", 3)), 6)}), ._field_model=static_cast<jule::Any>(_262121_c), ._field_constant=_262121_c});
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_229c9ebeb:;
			{
				jule::Ptr<_2448ab524_Const> _262821_c = static__244916408_new_i64(jule::MIN_I64);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i64", 3)), 6)}), ._field_model=static_cast<jule::Any>(_262821_c), ._field_constant=_262821_c});
			}
		}
		else {
			_case_begin_229c9eaca:;
			{
				_2455b70ca_push_err(&(*_self_), _261439_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("i64", 3)),jule::Any(_261439_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229c9ea75:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455cdc5c_eval_u8_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _264038_ident) {
	;
	;
	{
		auto &_match_expr{ _264038_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229ca33e7:;
			{
				jule::Ptr<_2448ab524_Const> _264621_c = static__24491653a_new_u64(255LLU);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u8", 2)), 6)}), ._field_model=static_cast<jule::Any>(_264621_c), ._field_constant=_264621_c});
			}
		}
		else {
			_case_begin_229ca28e1:;
			{
				_2455b70ca_push_err(&(*_self_), _264038_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("u8", 2)),jule::Any(_264038_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229ca3293:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ce06a_eval_u16_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _265839_ident) {
	;
	;
	{
		auto &_match_expr{ _265839_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229ca5c9b:;
			{
				jule::Ptr<_2448ab524_Const> _266421_c = static__24491653a_new_u64(65535LLU);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u16", 3)), 6)}), ._field_model=static_cast<jule::Any>(_266421_c), ._field_constant=_266421_c});
			}
		}
		else {
			_case_begin_229ca5295:;
			{
				_2455b70ca_push_err(&(*_self_), _265839_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("u16", 3)),jule::Any(_265839_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229ca5b47:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ce378_eval_u32_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _267639_ident) {
	;
	;
	{
		auto &_match_expr{ _267639_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229ca8650:;
			{
				jule::Ptr<_2448ab524_Const> _268221_c = static__24491653a_new_u64(4294967295LLU);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u32", 3)), 6)}), ._field_model=static_cast<jule::Any>(_268221_c), ._field_constant=_268221_c});
			}
		}
		else {
			_case_begin_229ca7b49:;
			{
				_2455b70ca_push_err(&(*_self_), _267639_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("u32", 3)),jule::Any(_267639_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229ca84eb:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ce686_eval_u64_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _269439_ident) {
	;
	;
	{
		auto &_match_expr{ _269439_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229cab004:;
			{
				jule::Ptr<_2448ab524_Const> _270021_c = static__24491653a_new_u64(jule::MAX_U64);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u64", 3)), 6)}), ._field_model=static_cast<jule::Any>(_270021_c), ._field_constant=_270021_c});
			}
		}
		else {
			_case_begin_229caa4ed:;
			{
				_2455b70ca_push_err(&(*_self_), _269439_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("u64", 3)),jule::Any(_269439_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229caada0:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ce994_eval_f32_type_tatic(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _271238_ident) {
	;
	;
	;
	;
	{
		auto &_match_expr{ _271238_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229cae17d:;
			{
				jule::Ptr<_2448ab524_Const> _272021_c = static__244916c11_new_f64(340282346638528860000000000000000000000.0);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("f32", 3)), 6)}), ._field_model=static_cast<jule::Any>(_272021_c), ._field_constant=_272021_c});
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_229cae1e4:;
			{
				jule::Ptr<_2448ab524_Const> _272721_c = static__244916c11_new_f64(-340282346638528860000000000000000000000.0);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("f32", 3)), 6)}), ._field_model=static_cast<jule::Any>(_272721_c), ._field_constant=_272721_c});
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_229cae25a:;
			{
				jule::Ptr<_2448ab524_Const> _273421_c = static__244916c11_new_f64(0.000000000000000000000000000000000000000000001401298464324817);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("f32", 3)), 6)}), ._field_model=static_cast<jule::Any>(_273421_c), ._field_constant=_273421_c});
			}
		}
		else {
			_case_begin_229cae07e:;
			{
				_2455b70ca_push_err(&(*_self_), _271238_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("f32", 3)),jule::Any(_271238_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229cae018:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455ceca2_eval_f64_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2431e4523_Token> _274639_ident) {
	;
	;
	;
	;
	{
		auto &_match_expr{ _274639_ident.get()._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_229cb40ea:;
			{
				jule::Ptr<_2448ab524_Const> _275421_c = static__244916c11_new_f64(jule::MAX_F64);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("f64", 3)), 6)}), ._field_model=static_cast<jule::Any>(_275421_c), ._field_constant=_275421_c});
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_229cb4161:;
			{
				jule::Ptr<_2448ab524_Const> _276121_c = static__244916c11_new_f64(jule::MIN_F64);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("f64", 3)), 6)}), ._field_model=static_cast<jule::Any>(_276121_c), ._field_constant=_276121_c});
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_229cb41c7:;
			{
				jule::Ptr<_2448ab524_Const> _276821_c = static__244916c11_new_f64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005);;
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("f64", 3)), 6)}), ._field_model=static_cast<jule::Any>(_276821_c), ._field_constant=_276821_c});
			}
		}
		else {
			_case_begin_229cb3eeb:;
			{
				_2455b70ca_push_err(&(*_self_), _274639_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(jule::Str("f64", 3)),jule::Any(_274639_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229cb3e85:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d0159_eval_prim_static(_2455b6abe_Eval* _self_, jule::Str _278035_kind, jule::Ptr<_2431e4523_Token> _278046_ident) {
	{
		auto &_match_expr{ _278035_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_229cb8121:;
			{
				return _2455cc909_eval_int_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_229cb8187:;
			{
				return _2455ccc17_eval_uint_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_229cb8a28:;
			{
				return _2455cd025_eval_i8_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_229cb8a8e:;
			{
				return _2455cd333_eval_i16_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_229cb8b05:;
			{
				return _2455cd641_eval_i32_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_229cb8b6b:;
			{
				return _2455cd94e_eval_i64_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_229cb8bd2:;
			{
				return _2455cdc5c_eval_u8_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_229cb8c8c:;
			{
				return _2455ce06a_eval_u16_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_229cb8d03:;
			{
				return _2455ce378_eval_u32_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_229cb8d69:;
			{
				return _2455ce686_eval_u64_type_static(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_229cb8dd0:;
			{
				return _2455ce994_eval_f32_type_tatic(&(*_self_), _278046_ident);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_229cb8e46:;
			{
				return _2455ceca2_eval_f64_type_static(&(*_self_), _278046_ident);
			}
		}
		else {
			_case_begin_229cb764d:;
			{
				_2455b70ca_push_err(&(*_self_), _278046_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_278035_kind),jule::Any(_278046_ident.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229cb7eab:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d0511_eval_type_static(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _281239_d, jule::Ptr<_244861012_SubIdentExpr> _281253_si) {
	{
		
		if ((_2455e3139_prim(_281239_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229cbd3bd:;
			{
				return _2455d0159_eval_prim_static(&(*_self_), _2455e5d62_to_str(_2455e3139_prim(_281239_d.get()._field_kind.ptr()).ptr()),_281253_si.get()._field_ident);
			}
		}
		else if ((_2455e3876_enm(_281239_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229cbd434:;
			{
				return _2455ca473_eval_enum_static(&(*_self_), _2455e3876_enm(_281239_d.get()._field_kind.ptr()),_281253_si.get()._field_ident);
			}
		}
		else if ((_2455e3ada_tenm(_281239_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229cbd49a:;
			{
				return _2455ca82a_eval_type_enum_static(&(*_self_), _2455e3ada_tenm(_281239_d.get()._field_kind.ptr()),_281253_si.get()._field_ident);
			}
		}
		else if ((_2455e458b_strct(_281239_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229cbd511:;
			{
				return _2455cabd2_eval_struct_static(&(*_self_), _2455e458b_strct(_281239_d.get()._field_kind.ptr()),_281253_si.get()._field_ident);
			}
		}
		else {
			_case_begin_229cbd357:;
			{
				_2455b70ca_push_err(&(*_self_), _281253_si.get()._field_ident,jule::Str("type @ is not supports sub-defines", 34),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_281239_d.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229cbd29c:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d08b8_eval_obj_sub_ident(_2455b6abe_Eval* _self_, jule::Ptr<_2455b5051_Data> _282841_d, jule::Ptr<_244861012_SubIdentExpr> _282855_si) {
	if (_2431e6cb7_is_ignore_ident(_282855_si.get()._field_ident.get()._field_kind)) {
		_2455b70ca_push_err(&(*_self_), _282855_si.get()._field_ident,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2455e1027_TypeKind> _283417_kind = _282841_d.get()._field_kind;;
	{
		
		if ((_2455e3612_ptr(_282841_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229cc4083:;
			{
				jule::Ptr<_2455ec7e7_Ptr> _283717_ptr = _2455e3612_ptr(_282841_d.get()._field_kind.ptr());;
				if (_2455ed2ba_is_unsafe(_283717_ptr.ptr())) {
					goto _match_end_229cc3e2e;
				};
				if (((!(_282855_si.get()._field_is_self)) && (!(_2455b7a15_is_unsafe(&(*_self_)))))) {
					_2455b70ca_push_err(&(*_self_), _282855_si.get()._field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				};
				_283417_kind=_2455e3612_ptr(_282841_d.get()._field_kind.ptr()).get()._field_elem;
			}
		}
		else if ((_2455e339d_sptr(_282841_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229cc40e9:;
			{
				_283417_kind=_2455e339d_sptr(_282841_d.get()._field_kind.ptr()).get()._field_elem;
			}
		}
		_match_end_229cc3e2e:;
	};
	{
		
		if ((_2455e4800_trt(_282841_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229cc6a69:;
			{
				return _2455cb133_eval_trait_sub_ident(&(*_self_), _282841_d,_2455e4800_trt(_282841_d.get()._field_kind.ptr()),_282855_si.get()._field_ident);
			}
		}
		else if ((_2455e458b_strct(_283417_kind.ptr()) != nullptr)) {
			_case_begin_229cc6ae1:;
			{
				jule::Ptr<_244874c5c_StructIns> _285317_s = _2455e458b_strct(_283417_kind.ptr());;
				if (_2455dbd7a_is_instanced_struct(_285317_s)) {
					jule::Bool _285525_used_reference_elem = (_2455e339d_sptr(_282841_d.get()._field_kind.ptr()) != nullptr);;
					return _2455cb62d_eval_struct_sub_ident(&(*_self_), _282841_d,_2455e458b_strct(_283417_kind.ptr()),_282855_si,_285525_used_reference_elem);
				};
			}
		}
		else if ((_2455e40b3_slc(_283417_kind.ptr()) != nullptr)) {
			_case_begin_229cc6b68:;
			{
				return _2455cb9d5_eval_slice_sub_ident(&(*_self_), _282841_d,_282855_si.get()._field_ident);
			}
		}
		else if ((_2455e3d4e_arr(_283417_kind.ptr()) != nullptr)) {
			_case_begin_229cc6be0:;
			{
				return _2455cbd8c_eval_array_sub_ident(&(*_self_), _282841_d,_282855_si.get()._field_ident);
			}
		}
		else if ((_2455e4a64_map(_283417_kind.ptr()) != nullptr)) {
			_case_begin_229cc7251:;
			{
				return _2455cc244_eval_map_sub_ident(&(*_self_), _282841_d,_282855_si.get()._field_ident);
			}
		}
		else if ((_2455e3139_prim(_283417_kind.ptr()) != nullptr)) {
			_case_begin_229cc72c8:;
			{
				jule::Ptr<_2455e59ee_Prim> _286517_p = _2455e3139_prim(_283417_kind.ptr());;
				{
					auto &_match_expr{ _286517_p.get()._field_kind };
					
					if (_match_expr == jule::Str("str", 3)) {
						_case_begin_229ccc9c6:;
						{
							return _2455cc5eb_eval_str_sub_ident(&(*_self_), _282841_d,_282855_si.get()._field_ident);
						}
					}
					_match_end_229ccc81c:;
				};
			}
		}
		_match_end_229cc696a:;
	};
	_2455b70ca_push_err(&(*_self_), _282855_si.get()._field_ident,jule::Str("object @ is not supports sub-defines", 36),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_282841_d.get()._field_kind.ptr()))}));
	return nullptr;
}



inline jule::Ptr<_2455b5051_Data> _2455d0bc6_eval_sub_ident(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244861012_SubIdentExpr> _287538_si) {
	jule::Ptr<_2455e1027_TypeKind> _287617_prefix = _self_.get()._field_prefix;;
	_self_.get()._field_prefix=nullptr;
	__JULE_DEFER({
		_self_.get()._field_prefix=_287617_prefix;
	});;
	jule::Ptr<_2455b5051_Data> _288017_d = _2455d20c3_eval_expr_kind(_self_, _287538_si.get()._field_expr.get()._field_kind);;
	if ((_288017_d == nullptr)) {
		return nullptr;
	};
	if (_288017_d.get()._field_decl) {
		return _2455d0511_eval_type_static(_self_.ptr(), _288017_d,_287538_si);
	};
	return _2455d08b8_eval_obj_sub_ident(_self_.ptr(), _288017_d,_287538_si);
}



inline jule::Ptr<_2455b5051_Data> _2455d0ed4_eval_tuple(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_24485d383_TupleExpr> _289234_tup) {
	jule::Ptr<_2455ea76d_Tuple> _289317_tup_t = jule::new_ptr<_2455ea76d_Tuple>(_2455ea76d_Tuple{});;
	_289317_tup_t.get()._field_types=jule::Slice<jule::Ptr<_2455e1027_TypeKind>>::alloc(0LL,_289234_tup.get()._field_expr.len());
	jule::Ptr<_244922436_TupleExprModel> _289617_model = jule::new_ptr<_244922436_TupleExprModel>(_244922436_TupleExprModel{._field_datas=jule::Slice<jule::Ptr<_2455b5051_Data>>::alloc(0LL,_289234_tup.get()._field_expr.len())});;
	jule::Bool _290017_ok = true;;
	{
		auto &expr = _289234_tup.get()._field_expr;
		auto it = expr.begin();
		_iter_begin_229cd2ba7:;
		if (it != expr.end()) {
			jule::Ptr<_24485c706_Expr> _290121_expr = *it;
			{
				jule::Ptr<_2455b5051_Data> _290221_d = _2455d20c3_eval_expr_kind(_self_, _290121_expr.get()._field_kind);;
				if ((_290221_d == nullptr)) {
					_290017_ok=false;
					goto _iter_next_229cd2ba7;
				};
				_289317_tup_t.get()._field_types = jule::alloc_for_append(_289317_tup_t.get()._field_types,1);_289317_tup_t.get()._field_types.__push(_290221_d.get()._field_kind);;
				_289617_model.get()._field_datas = jule::alloc_for_append(_289617_model.get()._field_datas,1);_289617_model.get()._field_datas.__push(_290221_d);;
			}
			_iter_next_229cd2ba7:;
			++it;
			goto _iter_begin_229cd2ba7;
		}
		_iter_end_229cd2ba7:;
	};
	if ((!(_290017_ok))) {
		return nullptr;
	};
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_289317_tup_t, 9)}), ._field_model=static_cast<jule::Any>(_289617_model), });
}



inline jule::Ptr<_2455b5051_Data> _2455d138b_eval_map(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_2455eb296_Map> _292132_m, jule::Ptr<_244863124_BraceLit> _292145_lit) {
	jule::Ptr<_24492119e_MapExprModel> _292217_model = jule::new_ptr<_24492119e_MapExprModel>(_24492119e_MapExprModel{._field_key_kind=_292132_m.get()._field_key, ._field_val_kind=_292132_m.get()._field_val, });;
	{
		auto &expr = _292145_lit.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_229cd602e:;
		if (it != expr.end()) {
			jule::Ptr<_24485c706_Expr> _292721_expr = *it;
			{
				{
					auto &_match_expr{ _292721_expr.get()._field_kind };
					
					if (_match_expr.type_is<jule::Ptr<_244863b3b_KeyValPair>>()) {
						_case_begin_229cd6a68:;
						{
							goto _match_end_229cd6848;
						}
					}
					else {
						_case_begin_229cd69be:;
						{
							_2455b70ca_push_err(_self_.ptr(), _292145_lit.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_229cd6848:;
				};
				jule::Ptr<_244863b3b_KeyValPair> _293721_pair = _292721_expr.get()._field_kind.operator jule::Ptr<_244863b3b_KeyValPair>();;
				jule::Ptr<_2455b5051_Data> _293921_key = _2455d20c3_eval_expr_kind(_self_, _293721_pair.get()._field_key.get()._field_kind);;
				if ((_293921_key == nullptr)) {
					return nullptr;
				};
				jule::Ptr<_2455b5051_Data> _294421_val = _2455d20c3_eval_expr_kind(_self_, _293721_pair.get()._field_val.get()._field_kind);;
				if ((_294421_val == nullptr)) {
					return nullptr;
				};
				_2455597cb_check_assign_type(_self_.get()._field_s, false,_292132_m.get()._field_key,_293921_key,_293721_pair.get()._field_colon);
				_2455597cb_check_assign_type(_self_.get()._field_s, false,_292132_m.get()._field_val,_294421_val,_293721_pair.get()._field_colon);
				_292217_model.get()._field_entries = jule::alloc_for_append(_292217_model.get()._field_entries,1);_292217_model.get()._field_entries.__push(jule::new_ptr<_244920eb2_KeyValPairExprModel>(_244920eb2_KeyValPairExprModel{._field_key=_293921_key.get()._field_model, ._field_val=_294421_val.get()._field_model}));;
			}
			_iter_next_229cd602e:;
			++it;
			goto _iter_begin_229cd602e;
		}
		_iter_end_229cd602e:;
	};
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_292132_m, 10)}), ._field_mutable=true, ._field_model=static_cast<jule::Any>(_292217_model), });
}



inline jule::Ptr<_2455b5051_Data> _2455d1699_eval_brace_lit(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244863124_BraceLit> _296538_lit) {
	{
		
		if ((_self_.get()._field_prefix == nullptr)) {
			_case_begin_229cdb331:;
			{
				_2455b70ca_push_err(_self_.ptr(), _296538_lit.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else if ((_2455e4a64_map(_self_.get()._field_prefix.ptr()) != nullptr)) {
			_case_begin_229cdb397:;
			{
				return _2455d138b_eval_map(_self_, _2455e4a64_map(_self_.get()._field_prefix.ptr()),_296538_lit);
			}
		}
		else if ((_2455e458b_strct(_self_.get()._field_prefix.ptr()) != nullptr)) {
			_case_begin_229cdb40d:;
			{
				return _2455c84c6_eval_struct_lit_explicit(_self_, _2455e458b_strct(_self_.get()._field_prefix.ptr()),_296538_lit.get()._field_exprs,_296538_lit.get()._field_token);
			}
		}
		else {
			_case_begin_229cdb276:;
			{
				_2455b70ca_push_err(_self_.ptr(), _296538_lit.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_229cdb199:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d19a7_eval_anon_fn(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244869ee9_FnDecl> _298036_decl) {
	_2455ee486_TypeChecker _298117_tc = _2455ee486_TypeChecker{._field_s=_self_.get()._field_s, ._field_lookup=_self_.get()._field_lookup, };;
	jule::Ptr<_2449299b0_FnIns> _298517_ins = _245605cc8_build_fn(&_298117_tc, _298036_decl);;
	{
		auto &_match_expr{ _self_.get()._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
			_case_begin_229cdce48:;
			{
				jule::Ptr<_245531066_ScopeChecker> _298821_sc = _self_.get()._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>();;
				jule::Ptr<_245531066_ScopeChecker> _298921_scc = _245541609_new_child_checker(_298821_sc);;
				_298921_scc.get()._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_24552ecce_ScopeLabel>>>(nullptr);
				_298921_scc.get()._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_245530252_ScopeGoto>>>(nullptr);
				_298921_scc.get()._field_owner=nullptr;
				_298921_scc.get()._field_child_index=0LL;
				_298921_scc.get()._field_it=0LLU;
				_298921_scc.get()._field_cse=0LLU;
				_298921_scc.get()._field_owner=_298517_ins;
				_245568268_check_fn_ins_sc(_self_.get()._field_s.ptr(), _298517_ins,_298921_scc);
			}
		}
		else {
			_case_begin_229ce05ee:;
			{
				_24556880c_check_fn_ins(_self_.get()._field_s, _298517_ins);
			}
		}
		_match_end_229ce04cd:;
	};
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_298517_ins, 1)}), ._field_model=static_cast<jule::Any>(jule::new_ptr<_244920cc5_AnonFnExprModel>(_244920cc5_AnonFnExprModel{._field_func=_298517_ins, ._field_global=_2455b7c79_is_global(_self_.ptr())})), });
}



inline jule::Ptr<_2455b5051_Data> _2455d1cb5_eval_binop(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_244861485_BinopExpr> _301134_op) {
	_2455d4900_BinaryEval _301217_bs = static__2455d4eb6_new_plain(_self_);;
	if ((_self_.get()._field_prefix != nullptr)) {
		jule::Ptr<_2455e59ee_Prim> _301617_prim = _2455e3139_prim(_self_.get()._field_prefix.ptr());;
		if (((_301617_prim == nullptr) || (!(_245528c0c_is_num(_2455e5d62_to_str(_301617_prim.ptr())))))) {
			jule::Ptr<_2455e1027_TypeKind> _301825_prefix = _self_.get()._field_prefix;;
			_self_.get()._field_prefix=nullptr;
			__JULE_DEFER({
				_self_.get()._field_prefix=_301825_prefix;
			});;
			return _2455da30c_eval(&_301217_bs, _301134_op);
		};
	};
	return _2455da30c_eval(&_301217_bs, _301134_op);
}



inline jule::Ptr<_2455b5051_Data> _2455d20c3_eval_expr_kind(jule::Ptr<_2455b6abe_Eval> _self_, jule::Any _302838_kind) {
	{
		auto &_match_expr{ _302838_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485c9e2_RangeExpr>>()) {
			_case_begin_229ce787b:;
			{
				jule::Ptr<_24485c9e2_RangeExpr> _303121_e = _302838_kind.operator jule::Ptr<_24485c9e2_RangeExpr>();;
				return _2455d20c3_eval_expr_kind(_self_, _303121_e.get()._field_expr.get()._field_kind);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485d73a_LitExpr>>()) {
			_case_begin_229ce7a02:;
			{
				return _2455b9929_eval_lit(_self_.ptr(), _302838_kind.operator jule::Ptr<_24485d73a_LitExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485e76e_IdentExpr>>()) {
			_case_begin_229ce7a68:;
			{
				return _2455bde17_eval_ident(_self_.ptr(), _302838_kind.operator jule::Ptr<_24485e76e_IdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485ee78_UnaryExpr>>()) {
			_case_begin_229ce7ace:;
			{
				return _2455be225_eval_unary(_self_, _302838_kind.operator jule::Ptr<_24485ee78_UnaryExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244860330_VariadicExpr>>()) {
			_case_begin_229ce7b45:;
			{
				return _2455be533_eval_variadic(_self_, _302838_kind.operator jule::Ptr<_244860330_VariadicExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485de44_UnsafeExpr>>()) {
			_case_begin_229ce7bab:;
			{
				return _2455be841_eval_unsafe(_self_, _302838_kind.operator jule::Ptr<_24485de44_UnsafeExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448640ae_SliceExpr>>()) {
			_case_begin_229ce7c33:;
			{
				return _2455c03ad_eval_slice_expr(_self_, _302838_kind.operator jule::Ptr<_2448640ae_SliceExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244864950_IndexingExpr>>()) {
			_case_begin_229ce7cdd:;
			{
				return _2455c3724_eval_indexing(_self_, _302838_kind.operator jule::Ptr<_244864950_IndexingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486505a_SlicingExpr>>()) {
			_case_begin_229ce7d54:;
			{
				return _2455c48e0_eval_slicing(_self_, _302838_kind.operator jule::Ptr<_24486505a_SlicingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448606d7_CastExpr>>()) {
			_case_begin_229ce7dba:;
			{
				return _2455c7c45_eval_cast(_self_, _302838_kind.operator jule::Ptr<_2448606d7_CastExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244860a8e_NsSelectionExpr>>()) {
			_case_begin_229ce7e31:;
			{
				return _2455c8053_eval_ns_selection(_self_.ptr(), _302838_kind.operator jule::Ptr<_244860a8e_NsSelectionExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244862ba1_StructLit>>()) {
			_case_begin_229ce7ea8:;
			{
				return _2455c87e5_eval_struct_lit(_self_, _302838_kind.operator jule::Ptr<_244862ba1_StructLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448581d5_TypeDecl>>()) {
			_case_begin_229ce8030:;
			{
				return _2455c8b03_eval_type(_self_.ptr(), _302838_kind.operator jule::Ptr<_2448581d5_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448619c4_FnCallExpr>>()) {
			_case_begin_229ce80a7:;
			{
				return _2455ca0bb_eval_fn_call(_self_, _302838_kind.operator jule::Ptr<_2448619c4_FnCallExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244861012_SubIdentExpr>>()) {
			_case_begin_229ce812e:;
			{
				return _2455d0bc6_eval_sub_ident(_self_, _302838_kind.operator jule::Ptr<_244861012_SubIdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485d383_TupleExpr>>()) {
			_case_begin_229ce81a6:;
			{
				return _2455d0ed4_eval_tuple(_self_, _302838_kind.operator jule::Ptr<_24485d383_TupleExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244863124_BraceLit>>()) {
			_case_begin_229ce822d:;
			{
				return _2455d1699_eval_brace_lit(_self_, _302838_kind.operator jule::Ptr<_244863124_BraceLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244869ee9_FnDecl>>()) {
			_case_begin_229ce82a5:;
			{
				return _2455d19a7_eval_anon_fn(_self_, _302838_kind.operator jule::Ptr<_244869ee9_FnDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244861485_BinopExpr>>()) {
			_case_begin_229ce832c:;
			{
				return _2455d1cb5_eval_binop(_self_, _302838_kind.operator jule::Ptr<_244861485_BinopExpr>());
			}
		}
		else {
			_case_begin_229ce75b2:;
			{
				return nullptr;
			}
		}
		_match_end_229ce74c4:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d23d1_eval(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_24485c706_Expr> _307628_expr) {
	jule::Ptr<_2455b5051_Data> _307717_d = _2455d20c3_eval_expr_kind(_self_, _307628_expr.get()._field_kind);;
	if (((_307717_d == nullptr) || (_307717_d.get()._field_kind == nullptr))) {
		return nullptr;
	};
	{
		
		if ((_2455e4327_fnc(_307717_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d030c3:;
			{
				jule::Ptr<_2449299b0_FnIns> _308421_f = _2455e4327_fnc(_307717_d.get()._field_kind.ptr());;
				if (_24492ad46_is_builtin(_308421_f.ptr())) {
					goto _match_end_229d02e6e;
				};
				if ((_308421_f.get()._field_generics.len() != _308421_f.get()._field_decl.get()._field_generics.len())) {
					_245553bc1_push_err(_self_.get()._field_s.ptr(), _307628_expr.get()._field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				};
				if (((!(_308421_f.get()._field_decl.get()._field_statically)) && _2449274d5_is_method(_308421_f.get()._field_decl.ptr()))) {
					_245553bc1_push_err(_self_.get()._field_s.ptr(), _307628_expr.get()._field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>());
				};
			}
		}
		_match_end_229d02e6e:;
	};
	return _307717_d;
}



inline jule::Ptr<_2455b5051_Data> _2455d26de_eval_expr(jule::Ptr<_2455b6abe_Eval> _self_, jule::Ptr<_24485c706_Expr> _310233_expr) {
	jule::Ptr<_2455b5051_Data> _310317_d = _2455d23d1_eval(_self_, _310233_expr);;
	{
		
		if ((_310317_d == nullptr)) {
			_case_begin_229d06c42:;
			{
				return nullptr;
			}
		}
		else if (_310317_d.get()._field_decl) {
			_case_begin_229d06cb9:;
			{
				_2455b70ca_push_err(_self_.ptr(), _310233_expr.get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else {
			_case_begin_229d06ba9:;
			{
				return _310317_d;
			}
		}
		_match_end_229d06b43:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _2455b6abe_Eval _Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "immutable:" << _Src._field_immutable << ", ";
	_Stream << "ignored:" << _Src._field_ignored << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "arg:" << _Src._field_arg;
	_Stream << "}";
	return _Stream;
}



inline _2455d2b62_UnaryEval static__2455d3118_new(jule::Ptr<_2455b6abe_Eval> _312323_e) {
	return _2455d2b62_UnaryEval{._field_e=_312323_e, };
}



inline void _2455d32e4_minus(_2455d2b62_UnaryEval* _self_) {
	{
		
		if (((*_self_)._field_d.get()._field_kind == nullptr)) {
			_case_begin_229d0887b:;
			{
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		else if ((_2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d08cbb:;
			{
				if ((!(_245528c0c_is_num(_2455e1423_to_str((*_self_)._field_d.get()._field_kind.ptr()))))) {
					(*_self_)._field_d=nullptr;
					return;;
				};
			}
		}
		else if ((_2455e458b_strct((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d08d32:;
			{
				if ((_2455e458b_strct((*_self_)._field_d.get()._field_kind.ptr()).get()._field_operators._field_neg == nullptr)) {
					(*_self_)._field_d=nullptr;
					return;;
				};
			}
		}
		else {
			_case_begin_229d084c4:;
			{
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		_match_end_229d0811c:;
	};
	if (_2455b5914_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_24491a352_is_f64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d0c000:;
				{
					_244919461_set_f64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::F64>((-(_244917ea9_read_f64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			else if (_2449198a1_is_i64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d0c077:;
				{
					_24491896b_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((-(_244917508_read_i64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			else if (_244919b15_is_u64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d0c0ee:;
				{
					_24491896b_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((-(_24491821d_as_i64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			_match_end_229d0bdbd:;
		};
	};
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24491ec6e_UnaryExprModel>(_24491ec6e_UnaryExprModel{._field_expr=jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d))), ._field_op=(*_self_)._field_u.get()._field_op}));
}



inline void _2455d34c0_plus(_2455d2b62_UnaryEval* _self_) {
	{
		
		if (((*_self_)._field_d.get()._field_kind == nullptr)) {
			_case_begin_229d11576:;
			{
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		else if ((_2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d119b6:;
			{
				if ((!(_245528c0c_is_num(_2455e1423_to_str((*_self_)._field_d.get()._field_kind.ptr()))))) {
					(*_self_)._field_d=nullptr;
					return;;
				};
			}
		}
		else if ((_2455e458b_strct((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d11a2c:;
			{
				if ((_2455e458b_strct((*_self_)._field_d.get()._field_kind.ptr()).get()._field_operators._field_pos == nullptr)) {
					(*_self_)._field_d=nullptr;
					return;;
				};
			}
		}
		else {
			_case_begin_229d111be:;
			{
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		_match_end_229d110e2:;
	};
	if (_2455b5914_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_24491a352_is_f64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d14bea:;
				{
					_244919461_set_f64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::F64>((+(_244917ea9_read_f64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			else if (_2449198a1_is_i64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d14c72:;
				{
					_24491896b_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((+(_244917508_read_i64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			else if (_244919b15_is_u64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d14ce9:;
				{
					_24491896b_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((+(_24491821d_as_i64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			_match_end_229d14ab8:;
		};
	};
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24491ec6e_UnaryExprModel>(_24491ec6e_UnaryExprModel{._field_expr=jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d))), ._field_op=(*_self_)._field_u.get()._field_op}));
}



inline void _2455d369b_caret(_2455d2b62_UnaryEval* _self_) {
	{
		
		if (((*_self_)._field_d.get()._field_kind == nullptr)) {
			_case_begin_229d19271:;
			{
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		else if ((_2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d196b1:;
			{
				if ((!(_245528646_is_int(_2455e1423_to_str((*_self_)._field_d.get()._field_kind.ptr()))))) {
					(*_self_)._field_d=nullptr;
					return;;
				};
			}
		}
		else if ((_2455e458b_strct((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d19727:;
			{
				if ((_2455e458b_strct((*_self_)._field_d.get()._field_kind.ptr()).get()._field_operators._field_bit_not == nullptr)) {
					(*_self_)._field_d=nullptr;
					return;;
				};
			}
		}
		else {
			_case_begin_229d18db9:;
			{
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		_match_end_229d18cdc:;
	};
	if (_2455b5914_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_2449198a1_is_i64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d1c8d4:;
				{
					_24491896b_set_i64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::I64>((~(_244917508_read_i64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			else if (_244919b15_is_u64((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d1c95b:;
				{
					_244918be1_set_u64((*_self_)._field_d.get()._field_constant.ptr(), static_cast<jule::U64>((~(_24491776c_read_u64((*_self_)._field_d.get()._field_constant.ptr())))));
				}
			}
			_match_end_229d1c7b3:;
		};
	};
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24491ec6e_UnaryExprModel>(_24491ec6e_UnaryExprModel{._field_expr=jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d))), ._field_op=(*_self_)._field_u.get()._field_op}));
}



inline void _2455d3877_excl(_2455d2b62_UnaryEval* _self_) {
	jule::Ptr<_2455e59ee_Prim> _324213_t = _2455e3139_prim((*_self_)._field_d.get()._field_kind.ptr());;
	if (((_324213_t == nullptr) || (!(_2455e89be_is_bool(_324213_t.ptr()))))) {
		(*_self_)._field_d=nullptr;
		return;;
	};
	if (_2455b5914_is_const((*_self_)._field_d.ptr())) {
		{
			
			if (_244919d79_is_bool((*_self_)._field_d.get()._field_constant.ptr())) {
				_case_begin_229d22301:;
				{
					_244918e66_set_bool((*_self_)._field_d.get()._field_constant.ptr(), (!(_2449179d1_read_bool((*_self_)._field_d.get()._field_constant.ptr()))));
				}
			}
			_match_end_229d221e1:;
		};
	};
	(*_self_)._field_d.get()._field_lvalue=false;
	(*_self_)._field_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24491ec6e_UnaryExprModel>(_24491ec6e_UnaryExprModel{._field_expr=jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d))), ._field_op=(*_self_)._field_u.get()._field_op}));
}



inline void _2455d3a53_star(_2455d2b62_UnaryEval* _self_) {
	(*_self_)._field_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24491ec6e_UnaryExprModel>(_24491ec6e_UnaryExprModel{._field_expr=jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d))), ._field_op=(*_self_)._field_u.get()._field_op}));
	{
		
		if ((_2455e3612_ptr((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d251e4:;
			{
				if ((!(_2455b7a15_is_unsafe((*_self_)._field_e.ptr())))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_u.get()._field_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				};
				jule::Ptr<_2455ec7e7_Ptr> _327421_t = _2455e3612_ptr((*_self_)._field_d.get()._field_kind.ptr());;
				if (_2455ed2ba_is_unsafe(_327421_t.ptr())) {
					(*_self_)._field_d=nullptr;
					return;;
				};
				(*_self_)._field_d.get()._field_kind=_327421_t.get()._field_elem;
			}
		}
		else if ((_2455e339d_sptr((*_self_)._field_d.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d25645:;
			{
				(*_self_)._field_d.get()._field_kind=_2455e339d_sptr((*_self_)._field_d.get()._field_kind.ptr()).get()._field_elem;
			}
		}
		else {
			_case_begin_229d24d4d:;
			{
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		_match_end_229d24cd7:;
	};
	(*_self_)._field_d.get()._field_constant=nullptr;
	(*_self_)._field_d.get()._field_lvalue=true;
}



inline void _2455d3c2e_amper(_2455d2b62_UnaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_244920148_StructLitExprModel>>()) {
			_case_begin_229d2922b:;
			{
				jule::Ptr<_244920148_StructLitExprModel> _329421_lit = (*_self_)._field_d.get()._field_model.operator jule::Ptr<_244920148_StructLitExprModel>();;
				_2455db099_make_struct_lit_alloc((*_self_)._field_d,_329421_lit);
			}
		}
		else {
			_case_begin_229d2958e:;
			{
				{
					
					if (_245607e51_can_get_ptr((*_self_)._field_d)) {
						_case_begin_229d2a1c7:;
						{
							(*_self_)._field_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455ec7e7_Ptr>(_2455ec7e7_Ptr{._field_elem=(*_self_)._field_d.get()._field_kind}), 12)});
							(*_self_)._field_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24491ec6e_UnaryExprModel>(_24491ec6e_UnaryExprModel{._field_expr=jule::new_ptr<_2455b5051_Data>((*((*_self_)._field_d))), ._field_op=(*_self_)._field_u.get()._field_op}));
						}
					}
					else {
						_case_begin_229d29b33:;
						{
							(*_self_)._field_d=nullptr;
						}
					}
					_match_end_229d29a56:;
				};
			}
		}
		_match_end_229d29517:;
	};
	if (((*_self_)._field_d != nullptr)) {
		(*_self_)._field_d.get()._field_constant=nullptr;
		(*_self_)._field_d.get()._field_lvalue=false;
	};
}



inline void _2455d3e0a_type_decl(_2455d2b62_UnaryEval* _self_) {
	_2455ee486_TypeChecker _331817_tc = _2455ee486_TypeChecker{._field_s=(*_self_)._field_e.get()._field_s, ._field_lookup=(*_self_)._field_e.get()._field_lookup, ._field_error_token=(*_self_)._field_u.get()._field_op, };;
	{
		auto &_match_expr{ (*_self_)._field_u.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_229d2d31d:;
			{
				(*_self_)._field_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245604667_build_ptr_from_type(&_331817_tc, (*_self_)._field_d.get()._field_kind), 12)});
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_229d30793:;
			{
				(*_self_)._field_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_24560404b_build_sptr_from_type(&_331817_tc, (*_self_)._field_d.get()._field_kind), 7)});
			}
		}
		else {
			_case_begin_229d2e0bb:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_u.get()._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_u.get()._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_d.get()._field_kind.ptr()))}));
				(*_self_)._field_d=nullptr;
				return;;
			}
		}
		_match_end_229d2e066:;
	};
	(*_self_)._field_d.get()._field_decl=true;
}



inline void _2455d40d6_eval_data(_2455d2b62_UnaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_u.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("&", 1)) {
			_case_begin_229d2e132:;
			{
				jule::Ptr<_2455e1027_TypeKind> _334021_prefix = (*_self_)._field_e.get()._field_prefix;;
				(*_self_)._field_e.get()._field_prefix=nullptr;
				(*_self_)._field_d=_2455d20c3_eval_expr_kind((*_self_)._field_e, (*_self_)._field_u.get()._field_expr.get()._field_kind);
				(*_self_)._field_e.get()._field_prefix=_334021_prefix;
			}
		}
		else {
			_case_begin_229d32784:;
			{
				(*_self_)._field_d=_2455d20c3_eval_expr_kind((*_self_)._field_e, (*_self_)._field_u.get()._field_expr.get()._field_kind);
			}
		}
		_match_end_229d326c9:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d43b1_eval(_2455d2b62_UnaryEval* _self_, jule::Ptr<_24485ee78_UnaryExpr> _334927_u) {
	(*_self_)._field_u=_334927_u;
	_2455d40d6_eval_data(&(*_self_));
	if (((*_self_)._field_d == nullptr)) {
		return nullptr;
	};
	if ((*_self_)._field_d.get()._field_decl) {
		_2455d3e0a_type_decl(&(*_self_));
		return (*_self_)._field_d;
	};
	jule::Ptr<_2455e1027_TypeKind> _336013_kind = (*_self_)._field_d.get()._field_kind;;
	{
		auto &_match_expr{ (*_self_)._field_u.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("-", 1)) {
			_case_begin_229d36e81:;
			{
				_2455d32e4_minus(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_229d369ca:;
			{
				_2455d34c0_plus(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_229d36a41:;
			{
				_2455d369b_caret(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("!", 1)) {
			_case_begin_229d36aa7:;
			{
				_2455d3877_excl(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_229d36b1d:;
			{
				_2455d3a53_star(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_229d3714b:;
			{
				_2455d3c2e_amper(&(*_self_));
			}
		}
		else {
			_case_begin_229d36964:;
			{
				(*_self_)._field_d=nullptr;
			}
		}
		_match_end_229d3690e:;
	};
	{
		
		if (((*_self_)._field_d == nullptr)) {
			_case_begin_229d38ea5:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_u.get()._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_u.get()._field_op.get()._field_kind),jule::Any(_2455e1423_to_str(_336013_kind.ptr()))}));
				return nullptr;
			}
		}
		else if (_2455b5914_is_const((*_self_)._field_d.ptr())) {
			_case_begin_229d3746a:;
			{
				(*_self_)._field_d.get()._field_model=static_cast<jule::Any>((*_self_)._field_d.get()._field_constant);
			}
		}
		_match_end_229d38e3e:;
	};
	(*_self_)._field_d.get()._field_mutable=true;
	return (*_self_)._field_d;
}







std::ostream &operator<<(std::ostream &_Stream, _2455d2b62_UnaryEval _Src) {
	_Stream << "UnaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "u:" << _Src._field_u;
	_Stream << "}";
	return _Stream;
}



inline _2455d4900_BinaryEval static__2455d4eb6_new_plain(jule::Ptr<_2455b6abe_Eval> _339829_e) {
	return _2455d4900_BinaryEval{._field_e=_339829_e, };
}



inline _2455d4900_BinaryEval static__2455d5307_new(jule::Ptr<_2455b6abe_Eval> _340423_e, jule::Ptr<_2431e4523_Token> _340437_op) {
	return _2455d4900_BinaryEval{._field_e=_340423_e, ._field_op=_340437_op};
}



inline jule::Bool _2455d558d_check_type_compatibility(_2455d4900_BinaryEval* _self_) {
	return _245559c4e_check_type_compatibility((*_self_)._field_e.get()._field_s, (*_self_)._field_l.get()._field_kind,(*_self_)._field_r.get()._field_kind,(*_self_)._field_op);
}



inline jule::Bool _2455d5846_check_struct_common_operator_compatibility(_2455d4900_BinaryEval* _self_) {
	jule::Ptr<_2449299b0_FnIns> _341817_overload = nullptr;;
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_229d3d938:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_shl;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_229d3d99e:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_shr;
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_229d3e9c2:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_add;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_229d3ea38:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_sub;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_229d3ea9e:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_div;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_229d3eb15:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_mul;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_229d3eb7b:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_mod;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_229d3ebe2:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_bit_and;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_229d3ec69:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_bit_or;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_229d3ecd0:;
			{
				_341817_overload=_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_bit_xor;
			}
		}
		else {
			_case_begin_229d3d806:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return false;
			}
		}
		_match_end_229d3d680:;
	};
	if ((_341817_overload == nullptr)) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
		return false;
	};
	jule::Ptr<_244928ae1_ParamIns> _345017_p = _341817_overload.get()._field_params[1LL];;
	return _2455597cb_check_assign_type((*_self_)._field_e.get()._field_s, _345017_p.get()._field_decl.get()._field_reference,_345017_p.get()._field_kind,(*_self_)._field_r,(*_self_)._field_op);
}



inline jule::Ptr<_2455b5051_Data> _2455d5add_eval_nil(_2455d4900_BinaryEval* _self_) {
	if ((!(_2455e2688_nil_compatible((*_self_)._field_r.get()._field_kind.ptr())))) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(jule::Str("nil", 3)),jule::Any(_2455e1423_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d48c73:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d48c0c:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(jule::Str("nil", 3))}));
				return nullptr;
			}
		}
		_match_end_229d48b74:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d5d52_eval_enum(_2455d4900_BinaryEval* _self_) {
	jule::Ptr<_245481e0c_Enum> _347517_enm = _2455e3876_enm((*_self_)._field_l.get()._field_kind.ptr());;
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d4ae1d:;
			{
				jule::Ptr<_2455e1027_TypeKind> _347921_rkind = (*_self_)._field_r.get()._field_kind;;
				if ((_2455e3876_enm((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
					_347921_rkind=_2455e3876_enm((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind.get()._field_kind;
				};
				if ((!(_245559c4e_check_type_compatibility((*_self_)._field_e.get()._field_s, _347517_enm.get()._field_kind.get()._field_kind,_347921_rkind,(*_self_)._field_op)))) {
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		_match_end_229d4ad96:;
	};
	if (((_2455e3876_enm((*_self_)._field_r.get()._field_kind.ptr()) == nullptr) || (_347517_enm != _2455e3876_enm((*_self_)._field_r.get()._field_kind.ptr())))) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_347517_enm.get()._field_ident),jule::Any(_2455e1423_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_229d503a6:;
			{
				if ((!(_245528c0c_is_num(_2455e1423_to_str(_347517_enm.get()._field_kind.get()._field_kind.ptr()))))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_347517_enm.get()._field_ident)}));
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else if (_match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_229d5041c:;
			{
				if (((_2455e3139_prim(_347517_enm.get()._field_kind.get()._field_kind.ptr()) == nullptr) || (!(_245528646_is_int(_2455e5d62_to_str(_2455e3139_prim(_347517_enm.get()._field_kind.get()._field_kind.ptr()).ptr())))))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_347517_enm.get()._field_ident)}));
				};
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_229d50340:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_347517_enm.get()._field_ident)}));
				return nullptr;
			}
		}
		_match_end_229d50252:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d60b6_eval_type_enum(_2455d4900_BinaryEval* _self_) {
	jule::Ptr<_245483507_TypeEnum> _352617_enm = _2455e3ada_tenm((*_self_)._field_l.get()._field_kind.ptr());;
	if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d5629c:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d559a5:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_245483837_to_str(_352617_enm.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d56126:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d632a_eval_sptr(_2455d4900_BinaryEval* _self_) {
	if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d58337:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d582c1:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d576dd:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d658e_eval_ptr(_2455d4900_BinaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_229d5a27e:;
			{
				if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1)) {
			_case_begin_229d5a2e5:;
			{
				if ((_2455e3612_ptr((*_self_)._field_l.get()._field_kind.ptr()) == nullptr)) {
					std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				};
				if (_2455ed2ba_is_unsafe(_2455e3612_ptr((*_self_)._field_l.get()._field_kind.ptr()).ptr())) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				};
				if ((!(_2455dc155_is_ptr_arithmetic_compatible_int((*_self_)._field_r)))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("type @ is incompatible to use for pointer arithmetic", 52),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
					return nullptr;
				};
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_229d59932:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d59877:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d6803_eval_arr(_2455d4900_BinaryEval* _self_) {
	if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d613b7:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d61351:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d5ba99:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d6a67_eval_slc(_2455d4900_BinaryEval* _self_) {
	if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d6360b:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d63595:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d629b2:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d6ccb_eval_fn(_2455d4900_BinaryEval* _self_) {
	if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d65850:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d657d9:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d64c06:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d7040_eval_struct(_2455d4900_BinaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str(">", 1)) {
			_case_begin_229d66eb1:;
			{
				if ((_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_gt == nullptr)) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_229d67027:;
			{
				if ((_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_gt_eq == nullptr)) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_229d6709e:;
			{
				if ((_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_lt == nullptr)) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_229d67797:;
			{
				if ((_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()).get()._field_operators._field_lt_eq == nullptr)) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d6780d:;
			{
				if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
					return nullptr;
				};
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		_match_end_229d66d90:;
	};
	if ((!(_2455d5846_check_struct_common_operator_compatibility(&(*_self_))))) {
		return nullptr;
	};
	return (*_self_)._field_l;
}



inline jule::Ptr<_2455b5051_Data> _2455d72a4_eval_trait(_2455d4900_BinaryEval* _self_) {
	if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d71c46:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d71bd0:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d71a48:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d7518_eval_any(_2455d4900_BinaryEval* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_229d73b8d:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d73341:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(jule::Str("any", 3))}));
				return nullptr;
			}
		}
		_match_end_229d73286:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d777c_eval_bool(_2455d4900_BinaryEval* _self_) {
	if ((!(_2455d558d_check_type_compatibility(&(*_self_))))) {
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("&&", 2) || _match_expr == jule::Str("||", 2)) {
			_case_begin_229d759a3:;
			{
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_229d7593c:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(_2455e1423_to_str((*_self_)._field_l.get()._field_kind.ptr()))}));
				return nullptr;
			}
		}
		_match_end_229d74d59:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d79e1_eval_str(_2455d4900_BinaryEval* _self_) {
	jule::Str _376817_rk = _2455e1423_to_str((*_self_)._field_r.get()._field_kind.ptr());;
	if ((_376817_rk != jule::Str("str", 3))) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(jule::Str("str", 3)),jule::Any(_376817_rk)}));
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("+", 1)) {
			_case_begin_229d78b82:;
			{
				return (*_self_)._field_l;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_229d78be8:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		else {
			_case_begin_229d77ab5:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(jule::Str("str", 3))}));
				return nullptr;
			}
		}
		_match_end_229d77ce6:;
	};
}



inline void _2455d7bbc_set_type_to_greater(_2455d4900_BinaryEval* _self_) {
	if (_2455b5914_is_const((*_self_)._field_l.ptr())) {
		if ((!(_2455b5914_is_const((*_self_)._field_r.ptr())))) {
			(*_self_)._field_l.get()._field_kind=(*_self_)._field_r.get()._field_kind;
			return;;
		};
		goto _julec_label_set;
	};
	if (_2455b5914_is_const((*_self_)._field_r.ptr())) {
		return;;
	};
	_julec_label_set:;
	if (_24552707e_is_greater(_2455e3139_prim((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind,_2455e3139_prim((*_self_)._field_l.get()._field_kind.ptr()).get()._field_kind)) {
		(*_self_)._field_l.get()._field_kind=(*_self_)._field_r.get()._field_kind;
	};
}



inline void _2455d7e0e_check_mod_data(_2455d4900_BinaryEval* _self_, jule::Ptr<_2455b5051_Data>& _381138_d) {
	if ((!(_2455b5914_is_const(_381138_d.ptr())))) {
		if (((_2455e3139_prim(_381138_d.get()._field_kind.ptr()) == nullptr) || (!(_245528646_is_int(_2455e3139_prim(_381138_d.get()._field_kind.ptr()).get()._field_kind))))) {
			_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
		};
		return;;
	};
	{
		
		if (_245586484_sig_assignable(jule::Str("i64", 3),_381138_d)) {
			_case_begin_229d80a02:;
			{
				_24491896b_set_i64(_381138_d.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64(_381138_d.get()._field_constant.ptr())));
			}
		}
		else if (_24559ca72_unsig_assignable(jule::Str("u64", 3),_381138_d)) {
			_case_begin_229d806d3:;
			{
				_244918be1_set_u64(_381138_d.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64(_381138_d.get()._field_constant.ptr())));
			}
		}
		else {
			_case_begin_229d8066c:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
			}
		}
		_match_end_229d7e00b:;
	};
}



inline void _2455d80da_mod(_2455d4900_BinaryEval* _self_) {
	_2455d7e0e_check_mod_data(&(*_self_), (*_self_)._field_l);
	_2455d7e0e_check_mod_data(&(*_self_), (*_self_)._field_r);
}



inline jule::Bool _2455d84b4_numbers_are_compatibile(_2455d4900_BinaryEval* _self_, jule::Str& _383339_lk, jule::Str& _383349_rk) {
	if ((!(_245528c0c_is_num(_383349_rk)))) {
		return false;
	};
	if (_2455b5914_is_const((*_self_)._field_l.ptr())) {
		return true;
	};
	if ((_383339_lk == jule::Str("f32", 3))) {
		if (_2455b5914_is_const((*_self_)._field_r.ptr())) {
			return true;
		};
		return (_383349_rk == jule::Str("f32", 3));
	};
	if ((_383339_lk == jule::Str("f64", 3))) {
		if (_2455b5914_is_const((*_self_)._field_r.ptr())) {
			return true;
		};
		return (_383349_rk == jule::Str("f64", 3));
	};
	if (_2455b5914_is_const((*_self_)._field_r.ptr())) {
		return true;
	};
	return (_383339_lk == _383349_rk);
}



inline jule::Ptr<_2455b5051_Data> _2455d8739_eval_float(_2455d4900_BinaryEval* _self_) {
	jule::Str _386313_lk = _2455e3139_prim((*_self_)._field_l.get()._field_kind.ptr()).get()._field_kind;;
	jule::Str _386413_rk = _2455e3139_prim((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind;;
	if ((!(_2455d84b4_numbers_are_compatibile(&(*_self_), _386313_lk,_386413_rk)))) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_386313_lk),jule::Any(_386413_rk)}));
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_229d88356:;
			{
				if (((!(_2455b5914_is_const((*_self_)._field_l.ptr()))) || (!(_24559cba4_int_assignable(jule::Str("i64", 3),(*_self_)._field_l))))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_386313_lk),jule::Any(_386413_rk)}));
					return nullptr;
				};
				if (((!(_2455b5914_is_const((*_self_)._field_r.ptr()))) || (!(_24559cba4_int_assignable(jule::Str("u64", 3),(*_self_)._field_r))))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_386313_lk),jule::Any(_386413_rk)}));
					return nullptr;
				};
				_24491896b_set_i64((*_self_)._field_l.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64((*_self_)._field_l.get()._field_constant.ptr())));
				_244918be1_set_u64((*_self_)._field_r.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64((*_self_)._field_r.get()._field_constant.ptr())));
				if ((!(_2455db9c3_is_ok_for_shifting((*_self_)._field_r)))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				};
				return (*_self_)._field_l;
			}
		}
		_match_end_229d88279:;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_229d8cc73:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		_match_end_229d8cc1d:;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1)) {
			_case_begin_229d8d713:;
			{
				_2455d7bbc_set_type_to_greater(&(*_self_));
				return (*_self_)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_229d8d779:;
			{
				if ((!(_245528646_is_int(_386413_rk)))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_386313_lk),jule::Any(_386413_rk)}));
					return nullptr;
				};
				_2455d80da_mod(&(*_self_));
				return (*_self_)._field_r;
			}
		}
		else {
			_case_begin_229d8db0e:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229d8daa9:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d899d_eval_int(_2455d4900_BinaryEval* _self_) {
	jule::Str _392713_lk = _2455e3139_prim((*_self_)._field_l.get()._field_kind.ptr()).get()._field_kind;;
	jule::Str _392813_rk = _2455e3139_prim((*_self_)._field_r.get()._field_kind.ptr()).get()._field_kind;;
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_229d8d7e0:;
			{
				if (((!(_245528646_is_int(_392713_lk))) || (!(_245528646_is_int(_392813_rk))))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_392713_lk),jule::Any(_392813_rk)}));
					return nullptr;
				};
				if ((!(_2455db9c3_is_ok_for_shifting((*_self_)._field_r)))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				};
				return (*_self_)._field_l;
			}
		}
		_match_end_229d92e10:;
	};
	if ((!(_2455d84b4_numbers_are_compatibile(&(*_self_), _392713_lk,_392813_rk)))) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_392713_lk),jule::Any(_392813_rk)}));
		return nullptr;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_229d96089:;
			{
				return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("bool", 4)), 6)}), });
			}
		}
		_match_end_229d96034:;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_229d96870:;
			{
				_2455d7bbc_set_type_to_greater(&(*_self_));
				return (*_self_)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_229d968d6:;
			{
				_2455d80da_mod(&(*_self_));
				_2455d7bbc_set_type_to_greater(&(*_self_));
				return (*_self_)._field_l;
			}
		}
		else {
			_case_begin_229d96c6b:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for integer type(s)", 45),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind)}));
				return nullptr;
			}
		}
		_match_end_229d96c16:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d8c12_eval_prim(_2455d4900_BinaryEval* _self_) {
	jule::Ptr<_2455e59ee_Prim> _398613_prim = _2455e3139_prim((*_self_)._field_l.get()._field_kind.ptr());;
	{
		
		if (_2455e89be_is_bool(_398613_prim.ptr())) {
			_case_begin_229d9a0b0:;
			{
				return _2455d777c_eval_bool(&(*_self_));
			}
		}
		else if (_2455e8c33_is_str(_398613_prim.ptr())) {
			_case_begin_229d9a137:;
			{
				return _2455d79e1_eval_str(&(*_self_));
			}
		}
		_match_end_229d9a005:;
	};
	if ((_2455e3139_prim((*_self_)._field_r.get()._field_kind.ptr()) == nullptr)) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e5d62_to_str(_398613_prim.ptr())),jule::Any(_2455e1423_to_str((*_self_)._field_r.get()._field_kind.ptr()))}));
		return nullptr;
	};
	{
		
		if (_245528965_is_float(_398613_prim.get()._field_kind)) {
			_case_begin_229d9ca1e:;
			{
				return _2455d8739_eval_float(&(*_self_));
			}
		}
		else if (_245528646_is_int(_398613_prim.get()._field_kind)) {
			_case_begin_229d9c38c:;
			{
				return _2455d899d_eval_int(&(*_self_));
			}
		}
		else {
			_case_begin_229d9c326:;
			{
				return nullptr;
			}
		}
		_match_end_229d9c14a:;
	};
}



inline jule::Ptr<_2455b5051_Data> _2455d8e76_eval_op(_2455d4900_BinaryEval* _self_) {
	{
		
		if (_2455e21b0_void((*_self_)._field_l.get()._field_kind.ptr())) {
			_case_begin_229d9d36b:;
			{
				_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_op.get()._field_kind),jule::Any(jule::Str("void", 4))}));
				return nullptr;
			}
		}
		else if (((_2455e3139_prim((*_self_)._field_r.get()._field_kind.ptr()) != nullptr) && _2455e8e97_is_any(_2455e3139_prim((*_self_)._field_r.get()._field_kind.ptr()).ptr()))) {
			_case_begin_229d9e070:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_229d9dcc8;
			}
		}
		else if (((_2455e3139_prim((*_self_)._field_l.get()._field_kind.ptr()) != nullptr) && _2455e8e97_is_any(_2455e3139_prim((*_self_)._field_l.get()._field_kind.ptr()).ptr()))) {
			_case_begin_229d9dcc8:;
			{
				return _2455d7518_eval_any(&(*_self_));
			}
		}
		else if ((_2455e3ada_tenm((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9dd3e:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_229d9dda5;
			}
		}
		else if ((_2455e3ada_tenm((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9dda5:;
			{
				return _2455d60b6_eval_type_enum(&(*_self_));
			}
		}
		else if (_2455e1e4b_is_nil((*_self_)._field_l.get()._field_kind.ptr())) {
			_case_begin_229d9de1b:;
			{
				return _2455d5add_eval_nil(&(*_self_));
			}
		}
		else if ((_2455e3876_enm((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9de82:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_229d9e13b;
			}
		}
		else if ((_2455e3876_enm((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e13b:;
			{
				return _2455d5d52_eval_enum(&(*_self_));
			}
		}
		else if ((_2455e339d_sptr((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e1a2:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_229d9e218;
			}
		}
		else if ((_2455e339d_sptr((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e218:;
			{
				return _2455d632a_eval_sptr(&(*_self_));
			}
		}
		else if ((_2455e3612_ptr((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e290:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_229d9e317;
			}
		}
		else if ((_2455e3612_ptr((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e317:;
			{
				return _2455d658e_eval_ptr(&(*_self_));
			}
		}
		else if ((_2455e3d4e_arr((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e38e:;
			{
				return _2455d6803_eval_arr(&(*_self_));
			}
		}
		else if ((_2455e40b3_slc((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e416:;
			{
				return _2455d6a67_eval_slc(&(*_self_));
			}
		}
		else if ((_2455e4327_fnc((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e48d:;
			{
				return _2455d6ccb_eval_fn(&(*_self_));
			}
		}
		else if ((_2455e4800_trt((*_self_)._field_r.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e515:;
			{
				std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple((*_self_)._field_r,(*_self_)._field_l);
				goto _case_begin_229d9e58c;
			}
		}
		else if ((_2455e4800_trt((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e58c:;
			{
				return _2455d72a4_eval_trait(&(*_self_));
			}
		}
		else if ((_2455e458b_strct((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e614:;
			{
				return _2455d7040_eval_struct(&(*_self_));
			}
		}
		else if ((_2455e3139_prim((*_self_)._field_l.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_229d9e68b:;
			{
				return _2455d8c12_eval_prim(&(*_self_));
			}
		}
		else {
			_case_begin_229d9cc83:;
			{
				return nullptr;
			}
		}
		_match_end_229d9cb40:;
	};
}



inline void _2455d91eb_eval_const(_2455d4900_BinaryEval* _self_, jule::Ptr<_2455b5051_Data>& _406134_d) {
	{
		
		if ((_406134_d == nullptr)) {
			_case_begin_229dad29e:;
			{
				return;;
			}
		}
		else if ((!(_2455b5914_is_const((*_self_)._field_l.ptr()))) || (!(_2455b5914_is_const((*_self_)._field_r.ptr())))) {
			_case_begin_229dad942:;
			{
				_406134_d.get()._field_constant=nullptr;
				return;;
			}
		}
		_match_end_229dad17d:;
	};
	{
		auto &_match_expr{ (*_self_)._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_229daeed7:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(((*((*_self_)._field_l.get()._field_constant)) == (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_229db004d:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(((*((*_self_)._field_l.get()._field_constant)) != (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_229db00b4:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(_24491aee0_or((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_229db012a:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(_24491abd2_and((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">", 1)) {
			_case_begin_229db0191:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(((*((*_self_)._field_l.get()._field_constant)) > (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_229db0207:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(((*((*_self_)._field_l.get()._field_constant)) < (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_229db026d:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(((*((*_self_)._field_l.get()._field_constant)) >= (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_229db02d4:;
			{
				_406134_d.get()._field_constant=static__2449166c2_new_bool(((*((*_self_)._field_l.get()._field_constant)) <= (*((*_self_)._field_r.get()._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_229db034a:;
			{
				_24491c343_add((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_229db03b1:;
			{
				_24491c651_sub((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_229db0427:;
			{
				_24491c95e_mul((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_229db048d:;
			{
				jule::Bool _409817_ok = _24491cc6c_div((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));;
				if (((!(_409817_ok)) && (_2449186e6_as_f64((*_self_)._field_r.get()._field_constant.ptr()) == 0LL))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				};
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
				jule::Ptr<_2455e59ee_Prim> _410321_prim = _2455e3139_prim(_406134_d.get()._field_kind.ptr());;
				{
					
					if (_2455280b3_is_sig_int(_410321_prim.get()._field_kind)) {
						_case_begin_229dbba71:;
						{
							_24491896b_set_i64(_406134_d.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64(_406134_d.get()._field_constant.ptr())));
						}
					}
					else if (_24552839e_is_unsig_int(_410321_prim.get()._field_kind)) {
						_case_begin_229dbbae8:;
						{
							_244918be1_set_u64(_406134_d.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64(_406134_d.get()._field_constant.ptr())));
						}
					}
					_match_end_229dbb9b6:;
				};
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_229db0515:;
			{
				jule::Bool _411117_ok = _24491d07a_mod((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));;
				if (((!(_411117_ok)) && (_2449186e6_as_f64((*_self_)._field_r.get()._field_constant.ptr()) == 0LL))) {
					_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				};
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_229db058c:;
			{
				_24491d696_bitwise_or((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_229db0614:;
			{
				_24491d388_bitwise_and((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_229db068b:;
			{
				_24491d9a4_xor((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_229db0713:;
			{
				_24491dcb2_lshift((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_229db078a:;
			{
				_24491e0c0_rshift((*_self_)._field_l.get()._field_constant.ptr(), (*((*_self_)._field_r.get()._field_constant)));
				_406134_d.get()._field_constant=(*_self_)._field_l.get()._field_constant;
			}
		}
		_match_end_229dae756:;
	};
	_2455dcde2_apply_cast_model_by_enum(_406134_d,_2455e3876_enm(_406134_d.get()._field_kind.ptr()));
	jule::Ptr<_2455e59ee_Prim> _413517_prim = _2455e3139_prim(_406134_d.get()._field_kind.ptr());;
	if (((_413517_prim == nullptr) || (!(_245528c0c_is_num(_2455e5d62_to_str(_413517_prim.ptr())))))) {
		_406134_d.get()._field_model=static_cast<jule::Any>(_406134_d.get()._field_constant);
		return;;
	};
	if ((((*_self_)._field_op.get()._field_kind != jule::Str("<<", 2)) && ((*_self_)._field_op.get()._field_kind != jule::Str(">>", 2)))) {
		if ((((*_self_)._field_l.get()._field_model == (*_self_)._field_l.get()._field_constant) && ((*_self_)._field_r.get()._field_model != (*_self_)._field_r.get()._field_constant))) {
			_406134_d.get()._field_kind=(*_self_)._field_r.get()._field_kind;
			_413517_prim=_2455e3139_prim(_406134_d.get()._field_kind.ptr());
		};
	};
	_2455dac9c_fit_bitsize(_406134_d);
	_2455dd1ab_cast_const_by_type(_413517_prim.get()._field_kind,_406134_d);
}



inline void _2455d9471_check_data(_2455d4900_BinaryEval* _self_, jule::Ptr<_2455b5051_Data>& _415134_d) {
	jule::Ptr<_2449299b0_FnIns> _415213_f = _2455e4327_fnc(_415134_d.get()._field_kind.ptr());;
	if ((((_415213_f != nullptr) && (_415213_f.get()._field_decl != nullptr)) && _2449274d5_is_method(_415213_f.get()._field_decl.ptr()))) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), (*_self_)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>());
	};
}



inline void _2455d964c_check_datas(_2455d4900_BinaryEval* _self_) {
	_2455d9471_check_data(&(*_self_), (*_self_)._field_l);
	_2455d9471_check_data(&(*_self_), (*_self_)._field_r);
}



inline void _2455d98c2_set_model(_2455d4900_BinaryEval* _self_, jule::Ptr<_2455b5051_Data>& _416333_d) {
	if (_2455b5914_is_const(_416333_d.ptr())) {
		if ((((*_self_)._field_l.get()._field_model == (*_self_)._field_l.get()._field_constant) && ((*_self_)._field_r.get()._field_model == (*_self_)._field_r.get()._field_constant))) {
			return;;
		};
	};
	jule::Ptr<_2455b5051_Data> _417118_l = (*_self_)._field_l;;
	jule::Ptr<_2455b5051_Data> _417125_r = (*_self_)._field_r;;
	std::tie(_417118_l,_417125_r) = std::make_tuple((*_self_)._field_l,(*_self_)._field_r);
	if ((!(_2455b5c22_good_operand(_417118_l.ptr(), _417125_r)))) {
		std::tie(_417118_l,_417125_r) = std::make_tuple(_417125_r,_417118_l);
	};
	_416333_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24491ea82_BinopExprModel>(_24491ea82_BinopExprModel{._field_left=jule::new_ptr<_24491e895_OperandExprModel>(_24491e895_OperandExprModel{._field_kind=_417118_l.get()._field_kind, ._field_model=_417118_l.get()._field_model}), ._field_right=jule::new_ptr<_24491e895_OperandExprModel>(_24491e895_OperandExprModel{._field_kind=_417125_r.get()._field_kind, ._field_model=_417125_r.get()._field_model}), ._field_op=(*_self_)._field_op}));
}



inline void _2455d9b47_post_eval(_2455d4900_BinaryEval* _self_, jule::Ptr<_2455b5051_Data>& _418933_d) {
	_418933_d.get()._field_lvalue=false;
	_2455d98c2_set_model(&(*_self_), _418933_d);
}



inline jule::Ptr<_2455b5051_Data> _2455d9eee_solve_explicit(_2455d4900_BinaryEval* _self_, jule::Ptr<_2455b5051_Data>& _419438_l, jule::Ptr<_2455b5051_Data>& _419453_r) {
	std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple(_419438_l,_419453_r);
	_2455d964c_check_datas(&(*_self_));
	jule::Ptr<_2455b5051_Data> _419917_d = _2455d8e76_eval_op(&(*_self_));;
	std::tie((*_self_)._field_l,(*_self_)._field_r) = std::make_tuple(_419438_l,_419453_r);
	_2455d91eb_eval_const(&(*_self_), _419917_d);
	if ((_419917_d != nullptr)) {
		_419917_d.get()._field_mutable=true;
		_2455d9b47_post_eval(&(*_self_), _419917_d);
	};
	return _419917_d;
}



inline jule::Ptr<_2455b5051_Data> _2455da30c_eval(_2455d4900_BinaryEval* _self_, jule::Ptr<_244861485_BinopExpr>& _421428_op) {
	if ((_421428_op.get()._field_op.get()._field_kind == jule::Str("=", 1))) {
		_2455b70ca_push_err((*_self_)._field_e.ptr(), _421428_op.get()._field_op,jule::Str("assignments not available for expressions", 41),jule::Slice<jule::Any>());
		_2455b73e9_push_suggestion((*_self_)._field_e.ptr(), jule::Str("use clear imperative approach, comes relevant assignment statement before the expression", 88),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _422117_l = _2455d20c3_eval_expr_kind((*_self_)._field_e, _421428_op.get()._field_left.get()._field_kind);;
	if (((_422117_l == nullptr) || (_422117_l.get()._field_kind == nullptr))) {
		return nullptr;
	};
	jule::Ptr<_2455e1027_TypeKind> _422617_prefix = (*_self_)._field_e.get()._field_prefix;;
	(*_self_)._field_e.get()._field_prefix=_422117_l.get()._field_kind;
	__JULE_DEFER({
		(*_self_)._field_e.get()._field_prefix=_422617_prefix;
	});;
	jule::Ptr<_2455b5051_Data> _422917_r = _2455d20c3_eval_expr_kind((*_self_)._field_e, _421428_op.get()._field_right.get()._field_kind);;
	if (((_422917_r == nullptr) || (_422917_r.get()._field_kind == nullptr))) {
		return nullptr;
	};
	(*_self_)._field_op=_421428_op.get()._field_op;
	jule::Ptr<_2455b5051_Data> _423617_d = _2455d9eee_solve_explicit(&(*_self_), _422117_l,_422917_r);;
	if ((((_423617_d != nullptr) && _422117_l.get()._field_is_rune) && _422917_r.get()._field_is_rune)) {
		_423617_d.get()._field_is_rune=true;
	};
	return _423617_d;
}







std::ostream &operator<<(std::ostream &_Stream, _2455d4900_BinaryEval _Src) {
	_Stream << "BinaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2455de7ea_InsGeneric _Src) {
	_Stream << "InsGeneric{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "constraint:" << _Src._field_constraint;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2455e0334_TypeAlias _Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _2455e1423_to_str(_2455e1027_TypeKind* _self_) {
	if (_2455e1e4b_is_nil(&(*_self_))) {
		return jule::Str("nil", 3);
	};
	jule::Str _7417_kind = jule::Str();;
	if ((*_self_)._field_variadic) {
		_7417_kind+=jule::Str("...", 3);
	};
	if (_2455e1bd7_cpp_linked(&(*_self_))) {
		_7417_kind+=jule::Str("cpp.", 4);
		_7417_kind+=(*_self_)._field_cpp_ident;
	} else {
		_7417_kind+=_2455e0ae8_Kind_mptr_data[((*_self_)._field_kind).type_offset]._2455e0697_to_str((*_self_)._field_kind);
	};
	return _7417_kind;
}



inline jule::Bool _2455e1731_equals(jule::Ptr<_2455e1027_TypeKind> _self_, jule::Ptr<_2455e1027_TypeKind> _9026_other) {
	if (_2455e1e4b_is_nil(_self_.ptr())) {
		return _2455e1e4b_is_nil(_9026_other.ptr());
	};
	if (_2455e1bd7_cpp_linked(_self_.ptr())) {
		return (_2455e1bd7_cpp_linked(_9026_other.ptr()) && (_self_.get()._field_cpp_ident == _9026_other.get()._field_cpp_ident));
	};
	return _2455e0ae8_Kind_mptr_data[(_self_.get()._field_kind).type_offset]._2455e09a5_equals(_self_.get()._field_kind, _9026_other);
}



inline jule::Bool _2455e1bd7_cpp_linked(_2455e1027_TypeKind* _self_) {
	return ((*_self_)._field_cpp_ident.len() != 0LL);
}



inline jule::Bool _2455e1e4b_is_nil(_2455e1027_TypeKind* _self_) {
	return ((*_self_)._field_kind == nullptr);
}



inline jule::Bool _2455e21b0_void(_2455e1027_TypeKind* _self_) {
	jule::Ptr<_2455e59ee_Prim> _11313_prim = _2455e3139_prim(&(*_self_));;
	return ((_11313_prim != nullptr) && (_11313_prim.get()._field_kind == jule::Str("void", 4)));
}



inline jule::Bool _2455e2424_mutable(_2455e1027_TypeKind* _self_) {
	{
		_2455e1027_TypeKind* _12021__self = (&((*_self_)));;
		if ((_2455e458b_strct(_12021__self) != nullptr)) {
			return _2455e458b_strct(_12021__self).get()._field_mutable;
		};
		if ((_2455e4800_trt(_12021__self) != nullptr)) {
			return _2455e4800_trt(_12021__self).get()._field_mutable;
		};
		if ((_2455e3139_prim(_12021__self) != nullptr)) {
			jule::Ptr<_2455e59ee_Prim> _12921_p = _2455e3139_prim(_12021__self);;
			return _2455e8e97_is_any(_12921_p.ptr());
		};
		if ((_2455e3d4e_arr(_12021__self) != nullptr)) {
			return _2455e2424_mutable(_2455e3d4e_arr(_12021__self).get()._field_elem.ptr());
		};
		return (((_2455e40b3_slc(_12021__self) != nullptr) || (_2455e3612_ptr(_12021__self) != nullptr)) || (_2455e339d_sptr(_12021__self) != nullptr));
	};
}



inline jule::Bool _2455e2688_nil_compatible(_2455e1027_TypeKind* _self_) {
	{
		_2455e1027_TypeKind* _14421__self = (&((*_self_)));;
		jule::Ptr<_2455e59ee_Prim> _14617_prim = _2455e3139_prim(_14421__self);;
		if (((_14617_prim != nullptr) && _2455e8e97_is_any(_14617_prim.ptr()))) {
			return true;
		};
		return (((((((_2455e1e4b_is_nil(_14421__self) || (_2455e4327_fnc(_14421__self) != nullptr)) || (_2455e339d_sptr(_14421__self) != nullptr)) || (_2455e3612_ptr(_14421__self) != nullptr)) || (_2455e4800_trt(_14421__self) != nullptr)) || (_2455e40b3_slc(_14421__self) != nullptr)) || (_2455e4a64_map(_14421__self) != nullptr)) || (_2455e3ada_tenm(_14421__self) != nullptr));
	};
}



inline jule::Bool _2455e28ec_performs_rc(_2455e1027_TypeKind* _self_) {
	{
		_2455e1027_TypeKind* _16521__self = (&((*_self_)));;
		return (((_2455e339d_sptr(_16521__self) != nullptr) || (_2455e40b3_slc(_16521__self) != nullptr)) || (_2455e4800_trt(_16521__self) != nullptr));
	};
}



inline jule::Bool _2455e2b61_supports_cloning(_2455e1027_TypeKind* _self_) {
	{
		_2455e1027_TypeKind* _17321__self = (&((*_self_)));;
		{
			
			if ((_2455e3139_prim(_17321__self) != nullptr)) {
				_case_begin_229e12754:;
				{
					return (!(_2455e8e97_is_any(_2455e3139_prim(_17321__self).ptr())));
				}
			}
			else if ((_2455e3876_enm(_17321__self) != nullptr)) {
				_case_begin_229e127ba:;
				{
					return true;
				}
			}
			else if ((_2455e4327_fnc(_17321__self) != nullptr)) {
				_case_begin_229e12ab7:;
				{
					return true;
				}
			}
			else if ((_2455e3612_ptr(_17321__self) != nullptr)) {
				_case_begin_229e12b2d:;
				{
					return true;
				}
			}
			else if ((_2455e40b3_slc(_17321__self) != nullptr)) {
				_case_begin_229e12b94:;
				{
					return _2455e2b61_supports_cloning(_2455e40b3_slc(_17321__self).get()._field_elem.ptr());
				}
			}
			else if ((_2455e4a64_map(_17321__self) != nullptr)) {
				_case_begin_229e12c0a:;
				{
					jule::Ptr<_2455eb296_Map> _18621_m = _2455e4a64_map(_17321__self);;
					return (_2455e2b61_supports_cloning(_18621_m.get()._field_key.ptr()) && _2455e2b61_supports_cloning(_18621_m.get()._field_val.ptr()));
				}
			}
			else if ((_2455e3d4e_arr(_17321__self) != nullptr)) {
				_case_begin_229e12c71:;
				{
					return _2455e2b61_supports_cloning(_2455e3d4e_arr(_17321__self).get()._field_elem.ptr());
				}
			}
			else if ((_2455e339d_sptr(_17321__self) != nullptr)) {
				_case_begin_229e12cd7:;
				{
					return _2455e2b61_supports_cloning(_2455e339d_sptr(_17321__self).get()._field_elem.ptr());
				}
			}
			else if ((_2455e458b_strct(_17321__self) != nullptr)) {
				_case_begin_229e12d5e:;
				{
					jule::Ptr<_244874c5c_StructIns> _19325_s = _2455e458b_strct(_17321__self);;
					return (((_19325_s.get()._field_decl != nullptr) && (!(_19325_s.get()._field_decl.get()._field_cpp_linked))) && _244839969_is_derives(_19325_s.get()._field_decl.ptr(), jule::Str("Clone", 5)));
				}
			}
			else {
				_case_begin_229e12633:;
				{
					return false;
				}
			}
			_match_end_229e125bc:;
		};
	};
}



inline jule::Bool _2455e2dc5_variadicable(_2455e1027_TypeKind* _self_) {
	{
		_2455e1027_TypeKind* _20621__self = (&((*_self_)));;
		return (_2455e40b3_slc(_20621__self) != nullptr);
	};
}



inline jule::Ptr<_2455e59ee_Prim> _2455e3139_prim(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455e59ee_Prim>>()) {
			_case_begin_229e1a482:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2455e59ee_Prim>();
			}
		}
		else {
			_case_begin_229e19d44:;
			{
				return nullptr;
			}
		}
		_match_end_229e19cde:;
	};
}



inline jule::Ptr<_2455e9283_Sptr> _2455e339d_sptr(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455e9283_Sptr>>()) {
			_case_begin_229e1b175:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2455e9283_Sptr>();
			}
		}
		else {
			_case_begin_229e1ab7a:;
			{
				return nullptr;
			}
		}
		_match_end_229e1ab25:;
	};
}



inline jule::Ptr<_2455ec7e7_Ptr> _2455e3612_ptr(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455ec7e7_Ptr>>()) {
			_case_begin_229e1bdbd:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2455ec7e7_Ptr>();
			}
		}
		else {
			_case_begin_229e1b8c3:;
			{
				return nullptr;
			}
		}
		_match_end_229e1b86d:;
	};
}



inline jule::Ptr<_245481e0c_Enum> _2455e3876_enm(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_245481e0c_Enum>>()) {
			_case_begin_229e1cb16:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_245481e0c_Enum>();
			}
		}
		else {
			_case_begin_229e1c61b:;
			{
				return nullptr;
			}
		}
		_match_end_229e1c5b6:;
	};
}



inline jule::Ptr<_245483507_TypeEnum> _2455e3ada_tenm(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_245483507_TypeEnum>>()) {
			_case_begin_229e1d85e:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_245483507_TypeEnum>();
			}
		}
		else {
			_case_begin_229e1d364:;
			{
				return nullptr;
			}
		}
		_match_end_229e1d30e:;
	};
}



inline jule::Ptr<_2455ebd8a_Arr> _2455e3d4e_arr(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455ebd8a_Arr>>()) {
			_case_begin_229e1e5a7:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2455ebd8a_Arr>();
			}
		}
		else {
			_case_begin_229e1e0ac:;
			{
				return nullptr;
			}
		}
		_match_end_229e1e057:;
	};
}



inline jule::Ptr<_2455e9be0_Slc> _2455e40b3_slc(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455e9be0_Slc>>()) {
			_case_begin_229e20300:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2455e9be0_Slc>();
			}
		}
		else {
			_case_begin_229e1ed05:;
			{
				return nullptr;
			}
		}
		_match_end_229e1eca0:;
	};
}



inline jule::Ptr<_2449299b0_FnIns> _2455e4327_fnc(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2449299b0_FnIns>>()) {
			_case_begin_229e21048:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2449299b0_FnIns>();
			}
		}
		else {
			_case_begin_229e20a4d:;
			{
				return nullptr;
			}
		}
		_match_end_229e209e8:;
	};
}



inline jule::Ptr<_244874c5c_StructIns> _2455e458b_strct(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_244874c5c_StructIns>>()) {
			_case_begin_229e21c91:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_244874c5c_StructIns>();
			}
		}
		else {
			_case_begin_229e21796:;
			{
				return nullptr;
			}
		}
		_match_end_229e21741:;
	};
}



inline jule::Ptr<_24547ec51_Trait> _2455e4800_trt(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24547ec51_Trait>>()) {
			_case_begin_229e229d9:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_24547ec51_Trait>();
			}
		}
		else {
			_case_begin_229e224de:;
			{
				return nullptr;
			}
		}
		_match_end_229e22489:;
	};
}



inline jule::Ptr<_2455eb296_Map> _2455e4a64_map(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455eb296_Map>>()) {
			_case_begin_229e23732:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2455eb296_Map>();
			}
		}
		else {
			_case_begin_229e23237:;
			{
				return nullptr;
			}
		}
		_match_end_229e231d2:;
	};
}



inline jule::Ptr<_2455ea76d_Tuple> _2455e4cc8_tup(_2455e1027_TypeKind* _self_) {
	{
		auto &_match_expr{ (*_self_)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455ea76d_Tuple>>()) {
			_case_begin_229e2447a:;
			{
				return (*_self_)._field_kind.operator jule::Ptr<_2455ea76d_Tuple>();
			}
		}
		else {
			_case_begin_229e23e80:;
			{
				return nullptr;
			}
		}
		_match_end_229e23e2a:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _2455e1027_TypeKind _Src) {
	_Stream << _2455e1423_to_str(&_Src);
	return _Stream;
}



inline jule::Bool _2455e5537_checked(_2455e5180_TypeSymbol* _self_) {
	return ((*_self_)._field_kind != nullptr);
}



inline void _2455e5713_remove_kind(_2455e5180_TypeSymbol* _self_) {
	(*_self_)._field_kind=nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _2455e5180_TypeSymbol _Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _2455e5d62_to_str(_2455e59ee_Prim* _self_) {
	return (*_self_)._field_kind;
}



inline jule::Bool _2455e6170_equals(jule::Ptr<_2455e59ee_Prim> _self_, jule::Ptr<_2455e1027_TypeKind> _35926_other) {
	jule::Ptr<_2455e59ee_Prim> _36013_prim = _2455e3139_prim(_35926_other.ptr());;
	if ((_36013_prim == nullptr)) {
		return false;
	};
	return (_self_.get()._field_kind == _36013_prim.get()._field_kind);
}



inline jule::Bool _2455e65e3_is_constraint(_2455e59ee_Prim* _self_) {
	return ((((!(_2455e8c33_is_str(&(*_self_)))) && (!(_2455e8e97_is_any(&(*_self_))))) && (!(_2455e89be_is_bool(&(*_self_))))) && (!(_245528c0c_is_num((*_self_)._field_kind))));
}



inline jule::Bool _2455e6857_is_i8(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i8", 2));
}



inline jule::Bool _2455e6abb_is_i16(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i16", 3));
}



inline jule::Bool _2455e6d30_is_i32(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i32", 3));
}



inline jule::Bool _2455e7094_is_i64(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("i64", 3));
}



inline jule::Bool _2455e7308_is_u8(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u8", 2));
}



inline jule::Bool _2455e756c_is_u16(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u16", 3));
}



inline jule::Bool _2455e77d1_is_u32(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u32", 3));
}



inline jule::Bool _2455e7a45_is_u64(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("u64", 3));
}



inline jule::Bool _2455e7ca9_is_f32(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("f32", 3));
}



inline jule::Bool _2455e801d_is_f64(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("f64", 3));
}



inline jule::Bool _2455e8282_is_int(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("int", 3));
}



inline jule::Bool _2455e84e6_is_uint(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("uint", 4));
}



inline jule::Bool _2455e875a_is_uintptr(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("uintptr", 7));
}



inline jule::Bool _2455e89be_is_bool(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("bool", 4));
}



inline jule::Bool _2455e8c33_is_str(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("str", 3));
}



inline jule::Bool _2455e8e97_is_any(_2455e59ee_Prim* _self_) {
	return ((*_self_)._field_kind == jule::Str("any", 3));
}







std::ostream &operator<<(std::ostream &_Stream, _2455e59ee_Prim _Src) {
	_Stream << _2455e5d62_to_str(&_Src);
	return _Stream;
}



inline jule::Str _2455e95e6_to_str(_2455e9283_Sptr* _self_) {
	return (jule::Str("&", 1) + _2455e1423_to_str((*_self_)._field_elem.ptr()));
}



inline jule::Bool _2455e9904_equals(jule::Ptr<_2455e9283_Sptr> _self_, jule::Ptr<_2455e1027_TypeKind> _43626_other) {
	jule::Ptr<_2455e9283_Sptr> _43713_sptr = _2455e339d_sptr(_43626_other.ptr());;
	if ((_43713_sptr == nullptr)) {
		return false;
	};
	return _2455e1731_equals(_self_.get()._field_elem, _43713_sptr.get()._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, _2455e9283_Sptr _Src) {
	_Stream << _2455e95e6_to_str(&_Src);
	return _Stream;
}



inline jule::Str _2455ea1eb_to_str(_2455e9be0_Slc* _self_) {
	return (jule::Str("[]", 2) + _2455e1423_to_str((*_self_)._field_elem.ptr()));
}



inline jule::Bool _2455ea509_equals(jule::Ptr<_2455e9be0_Slc> _self_, jule::Ptr<_2455e1027_TypeKind> _45526_other) {
	jule::Ptr<_2455e9be0_Slc> _45613_slc = _2455e40b3_slc(_45526_other.ptr());;
	if ((_45613_slc == nullptr)) {
		return false;
	};
	return _2455e1731_equals(_self_.get()._field_elem, _45613_slc.get()._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, _2455e9be0_Slc _Src) {
	_Stream << _2455ea1eb_to_str(&_Src);
	return _Stream;
}



inline jule::Str _2455eaad1_to_str(_2455ea76d_Tuple* _self_) {
	jule::Str _47217_s = jule::Str("(", 1);;
	_47217_s+=_2455e1423_to_str((*_self_)._field_types[0LL].ptr());
	{
		auto expr = (*_self_)._field_types.slice(1LL);
		auto it = expr.begin();
		_iter_begin_229e330d2:;
		if (it != expr.end()) {
			jule::Ptr<_2455e1027_TypeKind> &_47416_t = *it;
			{
				_47217_s+=jule::Str(",", 1);
				_47217_s+=_2455e1423_to_str(_47416_t.ptr());
			}
			_iter_next_229e330d2:;
			++it;
			goto _iter_begin_229e330d2;
		}
		_iter_end_229e330d2:;
	};
	_47217_s+=jule::Str(")", 1);
	return _47217_s;
}



inline jule::Bool _2455eadde_equals(jule::Ptr<_2455ea76d_Tuple> _self_, jule::Ptr<_2455e1027_TypeKind> _48326_other) {
	jule::Ptr<_2455ea76d_Tuple> _48413_tup = _2455e4cc8_tup(_48326_other.ptr());;
	if ((_48413_tup == nullptr)) {
		return false;
	};
	if ((_self_.get()._field_types.len() != _48413_tup.get()._field_types.len())) {
		return false;
	};
	jule::I32 _49317_i = 0LL;;
	for (; (_49317_i < _self_.get()._field_types.len()); (_49317_i)++) {
		{
			if ((!(_2455e1731_equals(_self_.get()._field_types[_49317_i], _48413_tup.get()._field_types[_49317_i])))) {
				return false;
			};
		}
	_iter_next_229e366bd:;
	}
	_iter_end_229e366bd:;;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, _2455ea76d_Tuple _Src) {
	_Stream << _2455eaad1_to_str(&_Src);
	return _Stream;
}



inline jule::Str _2455eb609_to_str(_2455eb296_Map* _self_) {
	jule::Str _51317_s = jule::Str("[", 1);;
	_51317_s+=_2455e1423_to_str((*_self_)._field_key.ptr());
	_51317_s+=jule::Str(":", 1);
	_51317_s+=_2455e1423_to_str((*_self_)._field_val.ptr());
	_51317_s+=jule::Str("]", 1);
	return _51317_s;
}



inline jule::Bool _2455eb917_equals(jule::Ptr<_2455eb296_Map> _self_, jule::Ptr<_2455e1027_TypeKind> _52226_other) {
	jule::Ptr<_2455eb296_Map> _52313_map = _2455e4a64_map(_52226_other.ptr());;
	if ((_52313_map == nullptr)) {
		return false;
	};
	return (_2455e1731_equals(_self_.get()._field_key, _52313_map.get()._field_key) && _2455e1731_equals(_self_.get()._field_val, _52313_map.get()._field_val));
}







std::ostream &operator<<(std::ostream &_Stream, _2455eb296_Map _Src) {
	_Stream << _2455eb609_to_str(&_Src);
	return _Stream;
}



inline jule::Str _2455ec1ed_to_str(_2455ebd8a_Arr* _self_) {
	jule::Str _54117_s = jule::Str("[", 1);;
	_54117_s+=_24547d975_itoa((*_self_)._field_n);
	_54117_s+=jule::Str("]", 1);
	_54117_s+=_2455e1423_to_str((*_self_)._field_elem.ptr());
	return _54117_s;
}



inline jule::Bool _2455ec50b_equals(jule::Ptr<_2455ebd8a_Arr> _self_, jule::Ptr<_2455e1027_TypeKind> _54926_other) {
	jule::Ptr<_2455ebd8a_Arr> _55013_arr = _2455e3d4e_arr(_54926_other.ptr());;
	if ((_55013_arr == nullptr)) {
		return false;
	};
	return ((_self_.get()._field_n == _55013_arr.get()._field_n) && _2455e1731_equals(_self_.get()._field_elem, _55013_arr.get()._field_elem));
}







std::ostream &operator<<(std::ostream &_Stream, _2455ebd8a_Arr _Src) {
	_Stream << _2455ec1ed_to_str(&_Src);
	return _Stream;
}



inline jule::Str _2455ecb5a_to_str(_2455ec7e7_Ptr* _self_) {
	if (_2455ed2ba_is_unsafe(&(*_self_))) {
		return jule::Str("*unsafe", 7);
	};
	return (jule::Str("*", 1) + _2455e1423_to_str((*_self_)._field_elem.ptr()));
}



inline jule::Bool _2455ece68_equals(jule::Ptr<_2455ec7e7_Ptr> _self_, jule::Ptr<_2455e1027_TypeKind> _57326_other) {
	jule::Ptr<_2455ec7e7_Ptr> _57413_ptr = _2455e3612_ptr(_57326_other.ptr());;
	if ((_57413_ptr == nullptr)) {
		return false;
	};
	return _2455e1731_equals(_self_.get()._field_elem, _57413_ptr.get()._field_elem);
}



inline jule::Bool _2455ed2ba_is_unsafe(_2455ec7e7_Ptr* _self_) {
	return ((*_self_)._field_elem == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _2455ec7e7_Ptr _Src) {
	_Stream << _2455ecb5a_to_str(&_Src);
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2455ed73d_Referencer _Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline void _2455eeb90_push_err(_2455ee486_TypeChecker* _self_, jule::Ptr<_2431e4523_Token> _65127_token, jule::Str _65142_fmt, jule::Slice<jule::Any> _65155_args) {
	_245553bc1_push_err((*_self_)._field_s.ptr(), _65127_token,_65142_fmt,jule::Any(_65155_args));
}



inline void _2455eed6b_allow_builtin(_2455ee486_TypeChecker* _self_) {
	(*_self_)._field_dis_builtin=false;
}



inline void _245600047_disallow_builtin(_2455ee486_TypeChecker* _self_) {
	(*_self_)._field_dis_builtin=true;
}



inline jule::Ptr<_2455e59ee_Prim> _245600355_build_prim(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _66330_decl) {
	if ((!(_245609480_is_prim(_66330_decl.get()._field_ident)))) {
		_2455eeb90_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_66330_decl.get()._field_generics.len() > 0LL)) {
		_2455eeb90_push_err(&(*_self_), _66330_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>::make({jule::Any(_66330_decl.get()._field_ident)}));
		return nullptr;
	};
	return _245608e41_build_prim_type(_66330_decl.get()._field_ident);
}



inline void _229e46090_push_reference(_2455ee486_TypeChecker* _self_, jule::Ptr<_244874c5c_StructIns>& _67741_t) {
	if (((*_self_)._field_refers == nullptr)) {
		return;;
	};
	if (_229bbe214_exist((*_self_)._field_refers.ptr(), _67741_t)) {
		return;;
	};
	_24492d5b8_push((*_self_)._field_refers.ptr(), jule::Any(_67741_t));
}

inline void _229e4913c_push_reference(_2455ee486_TypeChecker* _self_, jule::Ptr<_24547ec51_Trait>& _67741_t) {
	if (((*_self_)._field_refers == nullptr)) {
		return;;
	};
	if (_229e4ac54_exist((*_self_)._field_refers.ptr(), _67741_t)) {
		return;;
	};
	_24492d5b8_push((*_self_)._field_refers.ptr(), jule::Any(_67741_t));
}



inline void _245600850_push_reference_by_kind(_2455ee486_TypeChecker* _self_, jule::Ptr<_2455e1027_TypeKind>& _68746_k) {
	{
		
		if ((_2455e458b_strct(_68746_k.ptr()) != nullptr)) {
			_case_begin_229e44be8:;
			{
				jule::Ptr<_244874c5c_StructIns> _69021_t = _2455e458b_strct(_68746_k.ptr());;
				_229e46090_push_reference(&(*_self_), _69021_t);
			}
		}
		else if ((_2455e4800_trt(_68746_k.ptr()) != nullptr)) {
			_case_begin_229e44c70:;
			{
				jule::Ptr<_24547ec51_Trait> _69321_t = _2455e4800_trt(_68746_k.ptr());;
				_229e4913c_push_reference(&(*_self_), _69321_t);
			}
		}
		_match_end_229e44ac7:;
	};
}



inline void _245600c18_push_cycle_error(_2455ee486_TypeChecker* _self_, jule::Any _69831_def1, jule::Any _69842_def2, jule::Str& _69858_message) {
	;
	jule::Fn<jule::Str(jule::Any&)> _70113_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _70129_def) mutable -> jule::Str {
		{
			auto &_match_expr{ _70129_def };
			
			if (_match_expr.type_is<jule::Ptr<_2455e0334_TypeAlias>>()) {
				_case_begin_229e4e10e:;
				{
					return _70129_def.operator jule::Ptr<_2455e0334_TypeAlias>().get()._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
				_case_begin_229e4e175:;
				{
					return _70129_def.operator jule::Ptr<_244848912_Struct>().get()._field_ident;
				}
			}
			else {
				_case_begin_229e4de77:;
				{
					return jule::Str();
				}
			}
			_match_end_229e4dd9a:;
		};
	});;
	jule::Str _71213_def1_ident = _70113_get_ident(_69831_def1);;
	jule::Str _71313_def2_ident = _70113_get_ident(_69842_def2);;
	jule::Str _71413_refers_to = _242dbb0c9_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>::make({jule::Any(_71213_def1_ident),jule::Any(_71313_def2_ident)}));;
	(_69858_message).buffer.insert(0, (((_241ec9e0e_repeat(jule::Str(" ", 1),4LL) + _71413_refers_to) + jule::Str("\n", 1))));;
}



inline jule::Bool _2456010c0_check_cross_cycle(_2455ee486_TypeChecker* _self_, jule::Any _71832_decl, jule::Str& _71848_message) {
	{
		auto &_match_expr{ _71832_decl };
		
		if (_match_expr.type_is<jule::Ptr<_2455e0334_TypeAlias>>()) {
			_case_begin_229e5194c:;
			{
				jule::Ptr<_2455e0334_TypeAlias> _72117_ta = _71832_decl.operator jule::Ptr<_2455e0334_TypeAlias>();;
				{
					auto &expr = _72117_ta.get()._field_refers;
					auto it = expr.begin();
					_iter_begin_229e5270b:;
					if (it != expr.end()) {
						jule::Any &_72220_d = *it;
						{
							{
								
								if ((_72220_d == (*_self_)._field_referencer.get()._field_owner)) {
									_case_begin_229e5318a:;
									{
										_245600c18_push_cycle_error(&(*_self_), jule::Any(_72117_ta),jule::Any(_72220_d),_71848_message);
										return false;
									}
								}
								else if ((!(_2456010c0_check_cross_cycle(&(*_self_), jule::Any(_72220_d),_71848_message)))) {
									_case_begin_229e53212:;
									{
										_245600c18_push_cycle_error(&(*_self_), jule::Any(_72117_ta),jule::Any(_72220_d),_71848_message);
										return false;
									}
								}
								_match_end_229e53069:;
							};
						}
						_iter_next_229e5270b:;
						++it;
						goto _iter_begin_229e5270b;
					}
					_iter_end_229e5270b:;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229e519b3:;
			{
				jule::Ptr<_244848912_Struct> _73317_s = _71832_decl.operator jule::Ptr<_244848912_Struct>();;
				{
					auto &expr = _73317_s.get()._field_depends;
					auto it = expr.begin();
					_iter_begin_229e54400:;
					if (it != expr.end()) {
						jule::Ptr<_244848912_Struct> &_73420_d = *it;
						{
							{
								
								if (((*_self_)._field_referencer.get()._field_owner == _73420_d)) {
									_case_begin_229e55775:;
									{
										_245600c18_push_cycle_error(&(*_self_), jule::Any(_73317_s),jule::Any(_73420_d),_71848_message);
										return false;
									}
								}
								else if ((!(_2456010c0_check_cross_cycle(&(*_self_), jule::Any(_73420_d),_71848_message)))) {
									_case_begin_229e557ec:;
									{
										_245600c18_push_cycle_error(&(*_self_), jule::Any(_73317_s),jule::Any(_73420_d),_71848_message);
										return false;
									}
								}
								_match_end_229e55654:;
							};
						}
						_iter_next_229e54400:;
						++it;
						goto _iter_begin_229e54400;
					}
					_iter_end_229e54400:;
				};
			}
		}
		_match_end_229e5185e:;
	};
	return true;
}



inline jule::Bool _245601477_check_illegal_cycles(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _75240_ident, jule::Any _75267_decl) {
	jule::Bool _75280_ok = jule::Bool();
	if (((*_self_)._field_referencer == nullptr)) {
		_75280_ok = true;
		return _75280_ok;
	};
	{
		auto &_match_expr{ _75267_decl };
		
		if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229e568a8:;
			{
				if (((*_self_)._field_not_plain || _75267_decl.operator jule::Ptr<_244848912_Struct>().get()._field_cpp_linked)) {
					_75280_ok = true;
					return _75280_ok;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455e0334_TypeAlias>>()) {
			_case_begin_229e569eb:;
			{
				if (_75267_decl.operator jule::Ptr<_2455e0334_TypeAlias>().get()._field_cpp_linked) {
					_75280_ok = true;
					return _75280_ok;
				};
			}
		}
		_match_end_229e56853:;
	};
	if ((_75267_decl == (*_self_)._field_referencer.get()._field_owner)) {
		_2455eeb90_push_err(&(*_self_), _75240_ident.get()._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>::make({jule::Any((*_self_)._field_referencer.get()._field_ident)}));
		_75280_ok = false;
		return _75280_ok;
	};
	jule::Str _77517_message = jule::Str();;
	if ((!(_2456010c0_check_cross_cycle(&(*_self_), jule::Any(_75267_decl),_77517_message)))) {
		jule::Str _77821_err_msg = _77517_message;;
		_77517_message=jule::Str();
		_245600c18_push_cycle_error(&(*_self_), jule::Any((*_self_)._field_referencer.get()._field_owner),jule::Any(_75267_decl),_77517_message);
		_77821_err_msg=(_77821_err_msg + _77517_message);
		_2455eeb90_push_err(&(*_self_), _75240_ident.get()._field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>::make({jule::Any(_77821_err_msg)}));
		_75280_ok = false;
		return _75280_ok;
	};
	{
		auto &_match_expr{ (*_self_)._field_referencer.get()._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_2455e0334_TypeAlias>>()) {
			_case_begin_229e5bbee:;
			{
				{
					(*((*_self_)._field_referencer.get()._field_refs))=jule::append((*((*_self_)._field_referencer.get()._field_refs)),jule::Slice<jule::Any>::make({jule::Any(_75267_decl)}));
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229e5bcba:;
			{
				{
					auto &_match_expr{ _75267_decl };
					
					if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
						_case_begin_229e5c518:;
						{
							jule::Ptr<_244848912_Struct> _79425_s = (*_self_)._field_referencer.get()._field_owner.operator jule::Ptr<_244848912_Struct>();;
							_79425_s.get()._field_depends = jule::alloc_for_append(_79425_s.get()._field_depends,1);_79425_s.get()._field_depends.__push(_75267_decl.operator jule::Ptr<_244848912_Struct>());;
						}
					}
					_match_end_229e5c42a:;
				};
			}
		}
		_match_end_229e5bb99:;
	};
	_75280_ok = true;
	return _75280_ok;
}



inline jule::Trait<_2455e0ae8_Kind> _24560182e_from_type_alias(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _80235_decl, jule::Ptr<_2455e0334_TypeAlias>& _80262_ta) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _80262_ta.get()._field_public,_80262_ta.get()._field_token)))) {
		_2455eeb90_push_err(&(*_self_), _80235_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_80235_decl.get()._field_ident)}));
		return nullptr;
	};
	_80262_ta.get()._field_used=true;
	if ((_80235_decl.get()._field_generics.len() > 0LL)) {
		_2455eeb90_push_err(&(*_self_), _80235_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>::make({jule::Any(_80235_decl.get()._field_ident)}));
		return nullptr;
	};
	if (((!((*_self_)._field_inscatch)) && ((*_self_)._field_banned_generics != nullptr))) {
		(*_self_)._field_inscatch=true;
		{
			auto &expr = (*_self_)._field_banned_generics;
			auto it = expr.begin();
			_iter_begin_229e61d8b:;
			if (it != expr.end()) {
				jule::Ptr<_2455e0334_TypeAlias> _81920_bg = *it;
				{
					if (((_81920_bg == _80262_ta) || ((_80262_ta.get()._field_kind.get()._field_kind != nullptr) && _2455e1731_equals(_80262_ta.get()._field_kind.get()._field_kind, _81920_bg.get()._field_kind.get()._field_kind)))) {
						(*_self_)._field_inscatch=false;
						goto _iter_end_229e61d8b;
					};
				}
				_iter_next_229e61d8b:;
				++it;
				goto _iter_begin_229e61d8b;
			}
			_iter_end_229e61d8b:;
		};
	};
	if ((*_self_)._field_inscatch) {
		{
			auto &expr = (*_self_)._field_banned_generics;
			auto it = expr.begin();
			_iter_begin_229e63bb2:;
			if (it != expr.end()) {
				jule::Ptr<_2455e0334_TypeAlias> _83020_bg = *it;
				{
					if ((_83020_bg == _80262_ta)) {
						_2455eeb90_push_err(&(*_self_), _80235_decl.get()._field_token,jule::Str("type declaration causes initiation cycle", 40),jule::Slice<jule::Any>::make({jule::Any(_80235_decl.get()._field_ident)}));
						return nullptr;
					};
					{
						auto &expr = _80262_ta.get()._field_generics;
						auto it = expr.begin();
						_iter_begin_229e64652:;
						if (it != expr.end()) {
							jule::Ptr<_2455e0334_TypeAlias> _83524_dg = *it;
							{
								if ((_83020_bg == _83524_dg)) {
									_2455eeb90_push_err(&(*_self_), _80235_decl.get()._field_token,jule::Str("type declaration causes initiation cycle", 40),jule::Slice<jule::Any>::make({jule::Any(_80235_decl.get()._field_ident)}));
									return nullptr;
								};
							}
							_iter_next_229e64652:;
							++it;
							goto _iter_begin_229e64652;
						}
						_iter_end_229e64652:;
					};
				}
				_iter_next_229e63bb2:;
				++it;
				goto _iter_begin_229e63bb2;
			}
			_iter_end_229e63bb2:;
		};
	};
	jule::Bool _84417_ok = _245601477_check_illegal_cycles(&(*_self_), _80235_decl,jule::Any(_80262_ta));;
	if ((!(_84417_ok))) {
		return nullptr;
	};
	_84417_ok=_24555c999_check_type_alias_decl_kind((*_self_)._field_s, _80262_ta,(*_self_)._field_lookup);
	if ((!(_84417_ok))) {
		return nullptr;
	};
	if ((_80262_ta.get()._field_generic && ((*_self_)._field_owner_alias != nullptr))) {
		(*_self_)._field_owner_alias.get()._field_generics = jule::alloc_for_append((*_self_)._field_owner_alias.get()._field_generics,1);(*_self_)._field_owner_alias.get()._field_generics.__push(_80262_ta);;
	};
	jule::Ptr<_2455e1027_TypeKind> _86117_tk = jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_generic=_80262_ta.get()._field_generic, ._field_kind=_80262_ta.get()._field_kind.get()._field_kind.get()._field_kind});;
	_245600850_push_reference_by_kind(&(*_self_), _86117_tk);
	if (_80262_ta.get()._field_cpp_linked) {
		_86117_tk.get()._field_cpp_ident=_80262_ta.get()._field_ident;
	} else {
		_86117_tk.get()._field_cpp_ident=_80262_ta.get()._field_kind.get()._field_kind.get()._field_cpp_ident;
	};
	return jule::Trait<_2455e0ae8_Kind>(_86117_tk, 5);
}



inline jule::Ptr<_245481e0c_Enum> _245601bd6_from_enum(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _87429_decl, jule::Ptr<_245481e0c_Enum>& _87456_e) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _87456_e.get()._field_public,_87456_e.get()._field_token)))) {
		_2455eeb90_push_err(&(*_self_), _87429_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_87429_decl.get()._field_ident)}));
		return nullptr;
	};
	if ((_87429_decl.get()._field_generics.len() > 0LL)) {
		_2455eeb90_push_err(&(*_self_), _87429_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>::make({jule::Any(_87429_decl.get()._field_ident)}));
		return nullptr;
	};
	return _87456_e;
}



inline jule::Ptr<_245483507_TypeEnum> _24560208d_from_type_enum(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _88634_decl, jule::Ptr<_245483507_TypeEnum>& _88661_e) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _88661_e.get()._field_public,_88661_e.get()._field_token)))) {
		_2455eeb90_push_err(&(*_self_), _88634_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_88634_decl.get()._field_ident)}));
		return nullptr;
	};
	if ((_88634_decl.get()._field_generics.len() > 0LL)) {
		_2455eeb90_push_err(&(*_self_), _88634_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>::make({jule::Any(_88634_decl.get()._field_ident)}));
		return nullptr;
	};
	return _88661_e;
}



inline jule::Ptr<_24547ec51_Trait> _245602445_from_trait(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _89830_decl, jule::Ptr<_24547ec51_Trait>& _89857_t) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _89857_t.get()._field_public,_89857_t.get()._field_token)))) {
		_2455eeb90_push_err(&(*_self_), _89830_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_89830_decl.get()._field_ident)}));
		return nullptr;
	};
	if ((_89830_decl.get()._field_generics.len() > 0LL)) {
		_2455eeb90_push_err(&(*_self_), _89830_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>::make({jule::Any(_89830_decl.get()._field_ident)}));
		return nullptr;
	};
	_229e4913c_push_reference(&(*_self_), _89857_t);
	return _89857_t;
}



inline jule::Bool _2456027ec_check_struct_ins(_2455ee486_TypeChecker* _self_, jule::Ptr<_244874c5c_StructIns>& _91140_ins, jule::Ptr<_2431e4523_Token>& _91162_error_token) {
	jule::Bool _91185_ok = jule::Bool();
	if (_91140_ins.get()._field_checked) {
		_91185_ok = true;
		return _91185_ok;
	};
	_91140_ins.get()._field_checked=true;
	if ((((*_self_)._field_referencer != nullptr) && ((*_self_)._field_referencer.get()._field_owner == _91140_ins.get()._field_decl))) {
		_91185_ok = true;
		return _91185_ok;
	};
	if ((!(_245566ce4_precheck_struct_ins((*_self_)._field_s, _91140_ins,_91162_error_token)))) {
		_91185_ok = false;
		return _91185_ok;
	};
	if ((_91140_ins.get()._field_generics.len() > 0LL)) {
		_245567762_check_struct_ins_operators((*_self_)._field_s, _91140_ins);
		_245567069_check_struct_ins((*_self_)._field_s, _91140_ins);
	};
	_91185_ok = true;
	return _91185_ok;
}



inline void _245602a94_append_used_struct_reference(_2455ee486_TypeChecker* _self_, jule::Ptr<_244848912_Struct>& _93252_s) {
	if (((*_self_)._field_referencer == nullptr)) {
		return;;
	};
	{
		auto &_match_expr{ (*_self_)._field_referencer.get()._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_244848912_Struct>>()) {
			_case_begin_229e759b5:;
			{
				jule::Ptr<_244848912_Struct> _93921_ref_s = (*_self_)._field_referencer.get()._field_owner.operator jule::Ptr<_244848912_Struct>();;
				if ((!(_24483d71a_is_uses(_93921_ref_s.ptr(), _93252_s)))) {
					_93921_ref_s.get()._field_uses = jule::alloc_for_append(_93921_ref_s.get()._field_uses,1);_93921_ref_s.get()._field_uses.__push(_93252_s);;
				};
			}
		}
		_match_end_229e756c9:;
	};
}



inline jule::Ptr<_244874c5c_StructIns> _245602e5c_build_struct_instance(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _94645_decl, jule::Ptr<_244848912_Struct>& _94672_s) {
	jule::Ptr<_2455ed73d_Referencer> _94817_referencer = (*_self_)._field_referencer;;
	(*_self_)._field_referencer=nullptr;
	jule::Slice<jule::Ptr<_2455e0334_TypeAlias>> _95017_banned_generics = (*_self_)._field_banned_generics;;
	if (((*_self_)._field_banned_generics == nullptr)) {
		{
			auto &_match_expr{ (*_self_)._field_lookup };
			
			if (_match_expr.type_is<jule::Ptr<_245531066_ScopeChecker>>()) {
				_case_begin_229e78699:;
				{
					jule::Ptr<_245531066_ScopeChecker> _95725_sc = (*_self_)._field_lookup.operator jule::Ptr<_245531066_ScopeChecker>();;
					jule::Ptr<_245531066_ScopeChecker> _95825_hard = _2455343dd_get_hard_root(_95725_sc);;
					if (((_95825_hard.get()._field_owner.get()._field_owner == nullptr) || (_95825_hard.get()._field_owner.get()._field_owner.get()._field_decl != _94672_s))) {
						goto _match_end_229e78644;
					};
					jule::I32 _96221_n = (_95825_hard.get()._field_owner.get()._field_generics.len() + _95825_hard.get()._field_owner.get()._field_owner.get()._field_generics.len());;
					(*_self_)._field_banned_generics=_95825_hard.get()._field_table.get()._field_type_aliases.slice(0LL,_96221_n);
				}
			}
			_match_end_229e78644:;
		};
	} else {
		(*_self_)._field_inscatch=true;
	};
	jule::Ptr<_244874c5c_StructIns> _97217_ins = _244830d17_instance(_94672_s);;
	_97217_ins.get()._field_generics=jule::Slice<jule::Ptr<_2455de7ea_InsGeneric>>::alloc(0LL,_94645_decl.get()._field_generics.len());
	{
		auto &expr = _94645_decl.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_229e7c390:;
		if (it != expr.end()) {
			jule::Ptr<_2448581d5_TypeDecl> _97421_g = *it;
			{
				jule::Ptr<_2455e1027_TypeKind> _97521_kind = _2456063e4_build(&(*_self_), _97421_g.get()._field_kind);;
				if ((_97521_kind == nullptr)) {
					return nullptr;
				};
				_97217_ins.get()._field_generics = jule::alloc_for_append(_97217_ins.get()._field_generics,1);_97217_ins.get()._field_generics.__push(jule::new_ptr<_2455de7ea_InsGeneric>(_2455de7ea_InsGeneric{._field_kind=_97521_kind, }));;
			}
			_iter_next_229e7c390:;
			++it;
			goto _iter_begin_229e7c390;
		}
		_iter_end_229e7c390:;
	};
	(*_self_)._field_banned_generics=_95017_banned_generics;
	(*_self_)._field_referencer=_94817_referencer;
	return _97217_ins;
}



inline jule::Ptr<_244874c5c_StructIns> _245603314_from_struct(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _98935_decl, jule::Ptr<_244848912_Struct>& _98962_s) {
	if ((!(_245554397_is_accessible_define((*_self_)._field_s.ptr(), _98962_s.get()._field_public,_98962_s.get()._field_token)))) {
		_2455eeb90_push_err(&(*_self_), _98935_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_98935_decl.get()._field_ident)}));
		return nullptr;
	};
	if ((*_self_)._field_selection) {
		if ((_98935_decl.get()._field_generics.len() > 0LL)) {
			_2455eeb90_push_err(&(*_self_), _98935_decl.get()._field_token,jule::Str("generics are not allowed in this scope", 38),jule::Slice<jule::Any>());
			return nullptr;
		};
		return jule::new_ptr<_244874c5c_StructIns>(_244874c5c_StructIns{._field_decl=_98962_s, });
	};
	jule::Bool _100717_ok = ((*_self_)._field_not_plain || _245601477_check_illegal_cycles(&(*_self_), _98935_decl,jule::Any(_98962_s)));;
	if ((!(_100717_ok))) {
		return nullptr;
	};
	_245602a94_append_used_struct_reference(&(*_self_), _98962_s);
	jule::Ptr<_244874c5c_StructIns> _101317_ins = _245602e5c_build_struct_instance(&(*_self_), _98935_decl,_98962_s);;
	if ((_101317_ins == nullptr)) {
		return nullptr;
	};
	_100717_ok=_245555068_check_generic_quantity((*_self_)._field_s.ptr(), static_cast<jule::I32>(_101317_ins.get()._field_decl.get()._field_generics.len()),static_cast<jule::I32>(_101317_ins.get()._field_generics.len()),_98935_decl.get()._field_token);
	if ((!(_100717_ok))) {
		return nullptr;
	};
	jule::Ptr<_244874c5c_StructIns> _102317_exist_instance = _244835080_append_instance(_98962_s.ptr(), _101317_ins);;
	if ((_102317_exist_instance != nullptr)) {
		if ((!(_24555b118_check_constraints_struct((*_self_)._field_s, _101317_ins,_98935_decl.get()._field_token,_102317_exist_instance)))) {
			return nullptr;
		};
		_229e46090_push_reference(&(*_self_), _102317_exist_instance);
		return _102317_exist_instance;
	};
	if ((!(_2456027ec_check_struct_ins(&(*_self_), _101317_ins,_98935_decl.get()._field_token)))) {
		return nullptr;
	};
	_229e46090_push_reference(&(*_self_), _101317_ins);
	return _101317_ins;
}



inline jule::Trait<_2455e0ae8_Kind> _245603622_get_def(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl>& _104731_decl) {
	{
		auto &expr = (*_self_)._field_ignore_generics;
		auto it = expr.begin();
		_iter_begin_229e87125:;
		if (it != expr.end()) {
			jule::Ptr<_2448657b9_GenericDecl> _104816_g = *it;
			{
				if ((_104816_g.get()._field_ident == _104731_decl.get()._field_ident)) {
					return jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(_104816_g.get()._field_ident), 6);
				};
			}
			_iter_next_229e87125:;
			++it;
			goto _iter_begin_229e87125;
		}
		_iter_end_229e87125:;
	};
	{
		auto &expr = (*_self_)._field_use_generics;
		auto it = expr.begin();
		_iter_begin_229e87950:;
		if (it != expr.end()) {
			jule::Ptr<_2455e0334_TypeAlias> _105421_g = *it;
			{
				if ((_105421_g.get()._field_ident == _104731_decl.get()._field_ident)) {
					if ((_104731_decl.get()._field_generics.len() > 0LL)) {
						_2455eeb90_push_err(&(*_self_), _104731_decl.get()._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>::make({jule::Any(_104731_decl.get()._field_ident)}));
						return nullptr;
					};
					jule::Ptr<_244874c5c_StructIns> _106025_st = _2455e458b_strct(_105421_g.get()._field_kind.get()._field_kind.ptr());;
					if ((_106025_st != nullptr)) {
						jule::Bool _106225_ok = _245601477_check_illegal_cycles(&(*_self_), _104731_decl,jule::Any(_106025_st.get()._field_decl));;
						if ((!(_106225_ok))) {
							return nullptr;
						};
					};
					return _105421_g.get()._field_kind.get()._field_kind.get()._field_kind;
				};
			}
			_iter_next_229e87950:;
			++it;
			goto _iter_begin_229e87950;
		}
		_iter_end_229e87950:;
	};
	if ((!(_104731_decl.get()._field_cpp_linked))) {
		jule::Ptr<_245481e0c_Enum> _107221_e = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560b66e_find_enum((*_self_)._field_lookup, _104731_decl.get()._field_ident);;
		if ((_107221_e != nullptr)) {
			return jule::Trait<_2455e0ae8_Kind>(_245601bd6_from_enum(&(*_self_), _104731_decl,_107221_e), 3);
		};
		jule::Ptr<_245483507_TypeEnum> _107721_te = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560b97c_find_type_enum((*_self_)._field_lookup, _104731_decl.get()._field_ident);;
		if ((_107721_te != nullptr)) {
			return jule::Trait<_2455e0ae8_Kind>(_24560208d_from_type_enum(&(*_self_), _104731_decl,_107721_te), 4);
		};
		jule::Ptr<_24547ec51_Trait> _108221_t = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560b361_find_trait((*_self_)._field_lookup, _104731_decl.get()._field_ident);;
		if (((_108221_t == nullptr) && (!((*_self_)._field_dis_builtin)))) {
			_108221_t=_2456199bd_find_builtin_trait(_104731_decl.get()._field_ident);
		};
		if ((_108221_t != nullptr)) {
			return jule::Trait<_2455e0ae8_Kind>(_245602445_from_trait(&(*_self_), _104731_decl,_108221_t), 2);
		};
	} else if ((*_self_)._field_selection) {
		_2455eeb90_push_err(&(*_self_), _104731_decl.get()._field_token,jule::Str("cpp-linked definitions are not allowed in this scope", 52),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_244848912_Struct> _109417_s = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560ab9b_find_struct((*_self_)._field_lookup, _104731_decl.get()._field_ident,_104731_decl.get()._field_cpp_linked);;
	if ((_109417_s != nullptr)) {
		return jule::Trait<_2455e0ae8_Kind>(_245603314_from_struct(&(*_self_), _104731_decl,_109417_s), 0);
	};
	jule::Ptr<_2455e0334_TypeAlias> _109917_ta = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560a7e4_find_type_alias((*_self_)._field_lookup, _104731_decl.get()._field_ident,_104731_decl.get()._field_cpp_linked);;
	if (((_109917_ta == nullptr) && (!((*_self_)._field_dis_builtin)))) {
		_109917_ta=_245618dda_find_builtin_type_alias(_104731_decl.get()._field_ident);
	};
	if ((_109917_ta != nullptr)) {
		return _24560182e_from_type_alias(&(*_self_), _104731_decl,_109917_ta);
	};
	_2455eeb90_push_err(&(*_self_), _104731_decl.get()._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>::make({jule::Any(_104731_decl.get()._field_ident)}));
	return nullptr;
}



inline jule::Trait<_2455e0ae8_Kind> _245603930_build_ident(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485879b_IdentTypeDecl> _111134_decl) {
	{
		
		if (_245609480_is_prim(_111134_decl.get()._field_ident)) {
			_case_begin_229e94022:;
			{
				return jule::Trait<_2455e0ae8_Kind>(_245600355_build_prim(&(*_self_), _111134_decl), 6);
			}
		}
		else {
			_case_begin_229e937a2:;
			{
				return _245603622_get_def(&(*_self_), _111134_decl);
			}
		}
		_match_end_229e936c5:;
	};
}



inline jule::Trait<_2455e0ae8_Kind> _245603c3d_build_sub_ident(_2455ee486_TypeChecker* _self_, jule::Ptr<_244858dea_SubIdentTypeDecl> _112038_decl) {
	jule::Trait<_2455e0ae8_Kind> _112117_ident = _245603930_build_ident(&(*_self_), _112038_decl.get()._field_idents[0LL]);;
	if ((_112117_ident == nullptr)) {
		return nullptr;
	};
	{
		auto &_match_expr{ _112117_ident };
		
		if (_match_expr.type_is<jule::Ptr<_245483507_TypeEnum>>()) {
			_case_begin_229e95a07:;
			{
				goto _match_end_229e9592a;
			}
		}
		else {
			_case_begin_229e956e9:;
			{
				_2455eeb90_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_229e9592a:;
	};
	jule::Ptr<_245483507_TypeEnum> _113317_t = _112117_ident.operator jule::Ptr<_245483507_TypeEnum>();;
	jule::Slice<jule::Ptr<_24485879b_IdentTypeDecl>> _113417_idents = _112038_decl.get()._field_idents.slice(1LL);;
	{
		auto &expr = _113417_idents;
		auto it = expr.begin();
		_iter_begin_229e96d38:;
		if (it != expr.end()) {
			jule::I32 _113513_i = it - expr.begin();
			jule::Ptr<_24485879b_IdentTypeDecl> _113516_id = *it;
			{
				jule::Ptr<_245482e41_TypeEnumItem> _113621_item = _245484041_find_item(_113317_t.ptr(), _113516_id.get()._field_ident);;
				if ((_113621_item == nullptr)) {
					_2455eeb90_push_err(&(*_self_), _113516_id.get()._field_token,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>::make({jule::Any(_113317_t.get()._field_ident),jule::Any(_113516_id.get()._field_ident)}));
					return nullptr;
				};
				if (((_113417_idents.len() - _113513_i) == 1LL)) {
					_245600850_push_reference_by_kind(&(*_self_), _113621_item.get()._field_kind.get()._field_kind);
					return jule::Trait<_2455e0ae8_Kind>(_113621_item.get()._field_kind.get()._field_kind, 5);
				};
				_113317_t=_2455e3ada_tenm(_113621_item.get()._field_kind.get()._field_kind.ptr());
				if ((_113317_t == nullptr)) {
					_2455eeb90_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return nullptr;
				};
			}
			_iter_next_229e96d38:;
			++it;
			_113513_i++;
			goto _iter_begin_229e96d38;
		}
		_iter_end_229e96d38:;
	};
	return nullptr;
}



inline jule::Ptr<_2455e9283_Sptr> _24560404b_build_sptr_from_type(_2455ee486_TypeChecker* _self_, jule::Ptr<_2455e1027_TypeKind>& _115544_elem) {
	{
		
		if ((_115544_elem == nullptr)) {
			_case_begin_229e977ea:;
			{
				return nullptr;
			}
		}
		else if ((_2455e458b_strct(_115544_elem.ptr()) != nullptr)) {
			_case_begin_229e97872:;
			{
				jule::Ptr<_244874c5c_StructIns> _116117_s = _2455e458b_strct(_115544_elem.ptr());;
				if (((_116117_s.get()._field_decl != nullptr) && _116117_s.get()._field_decl.get()._field_cpp_linked)) {
					_2455eeb90_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
					return nullptr;
				};
			}
		}
		else if (((_2455e3d4e_arr(_115544_elem.ptr()) != nullptr) && _2455e3d4e_arr(_115544_elem.ptr()).get()._field_auto)) {
			_case_begin_229e978e9:;
			{
				_2455eeb90_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_229e976b8:;
	};
	return jule::new_ptr<_2455e9283_Sptr>(_2455e9283_Sptr{._field_elem=_115544_elem});
}



inline jule::Ptr<_2455e9283_Sptr> _245604359_build_sptr(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485958d_SptrTypeDecl> _117533_decl) {
	jule::Bool _117613_not_plain = (*_self_)._field_not_plain;;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_117613_not_plain;
	});;
	jule::Ptr<_2455e1027_TypeKind> _118017_elem = _245606702_check_decl(&(*_self_), _117533_decl.get()._field_elem);;
	return _24560404b_build_sptr_from_type(&(*_self_), _118017_elem);
}



inline jule::Ptr<_2455ec7e7_Ptr> _245604667_build_ptr_from_type(_2455ee486_TypeChecker* _self_, jule::Ptr<_2455e1027_TypeKind>& _118443_elem) {
	{
		
		if ((_118443_elem == nullptr)) {
			_case_begin_229ea0e52:;
			{
				return nullptr;
			}
		}
		else if (((_2455e3d4e_arr(_118443_elem.ptr()) != nullptr) && _2455e3d4e_arr(_118443_elem.ptr()).get()._field_auto)) {
			_case_begin_229ea0ec9:;
			{
				_2455eeb90_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return jule::new_ptr<_2455ec7e7_Ptr>();
			}
		}
		_match_end_229ea0d31:;
	};
	return jule::new_ptr<_2455ec7e7_Ptr>(_2455ec7e7_Ptr{._field_elem=_118443_elem});
}



inline jule::Ptr<_2455ec7e7_Ptr> _245604975_build_ptr(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485a061_PtrTypeDecl> _119932_decl) {
	jule::Bool _120013_not_plain = (*_self_)._field_not_plain;;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_120013_not_plain;
	});;
	jule::Ptr<_2455e1027_TypeKind> _120417_elem = nullptr;;
	if ((!(_24485a3b3_is_unsafe(_119932_decl.ptr())))) {
		_120417_elem=_245606702_check_decl(&(*_self_), _119932_decl.get()._field_elem);
		return _245604667_build_ptr_from_type(&(*_self_), _120417_elem);
	};
	return jule::new_ptr<_2455ec7e7_Ptr>(_2455ec7e7_Ptr{._field_elem=_120417_elem});
}



inline jule::Ptr<_2455e9be0_Slc> _245604c83_build_slc(_2455ee486_TypeChecker* _self_, jule::Ptr<_244859989_SlcTypeDecl> _121632_decl) {
	jule::Bool _121713_not_plain = (*_self_)._field_not_plain;;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_121713_not_plain;
	});;
	jule::Ptr<_2455e1027_TypeKind> _122117_elem = _245606702_check_decl(&(*_self_), _121632_decl.get()._field_elem);;
	{
		
		if ((_122117_elem == nullptr)) {
			_case_begin_229ea61ee:;
			{
				return nullptr;
			}
		}
		else if (((_2455e3d4e_arr(_122117_elem.ptr()) != nullptr) && _2455e3d4e_arr(_122117_elem.ptr()).get()._field_auto)) {
			_case_begin_229ea6276:;
			{
				_2455eeb90_push_err(&(*_self_), _121632_decl.get()._field_elem.get()._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_229ea6144:;
	};
	return jule::new_ptr<_2455e9be0_Slc>(_2455e9be0_Slc{._field_elem=_122117_elem});
}



inline jule::Ptr<_2455ebd8a_Arr> _245605091_build_arr(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485a6e3_ArrTypeDecl> _123732_decl) {
	jule::Bool _123813_not_plain = (*_self_)._field_not_plain;;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_123813_not_plain;
	});;
	jule::I32 _124217_n = 0LL;;
	if ((!(_24485aabc_auto_sized(_123732_decl.ptr())))) {
		jule::Ptr<_2455b5051_Data> _124521_size = _2455d26de_eval_expr(_2455592d1_eval((*_self_)._field_s, (*_self_)._field_lookup), _123732_decl.get()._field_size);;
		if ((_124521_size == nullptr)) {
			return nullptr;
		};
		if ((!(_2455b5914_is_const(_124521_size.ptr())))) {
			_2455eeb90_push_err(&(*_self_), _123732_decl.get()._field_size.get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
			return nullptr;
		} else if (((_2455e3139_prim(_124521_size.get()._field_kind.ptr()) == nullptr) || (!(_245528646_is_int(_2455e3139_prim(_124521_size.get()._field_kind.ptr()).get()._field_kind))))) {
			_2455eeb90_push_err(&(*_self_), _123732_decl.get()._field_size.get()._field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>());
			return nullptr;
		};
		_124217_n=static_cast<jule::I32>(static_cast<jule::I32>(_24491821d_as_i64(_124521_size.get()._field_constant.ptr())));
		if ((_124217_n < 0LL)) {
			_2455eeb90_push_err(&(*_self_), _123732_decl.get()._field_elem.get()._field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>());
			return nullptr;
		} else if (((_245513642_BIT_SIZE != 64LL) && (static_cast<jule::F64>(_124217_n) > _245523267_max(jule::Str("int", 3))))) {
			_2455eeb90_push_err(&(*_self_), _123732_decl.get()._field_size.get()._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
			return nullptr;
		};
	};
	jule::Ptr<_2455e1027_TypeKind> _126817_elem = _245606702_check_decl(&(*_self_), _123732_decl.get()._field_elem);;
	{
		
		if ((_126817_elem == nullptr)) {
			_case_begin_229eaec1e:;
			{
				return nullptr;
			}
		}
		else if (((_2455e3d4e_arr(_126817_elem.ptr()) != nullptr) && _2455e3d4e_arr(_126817_elem.ptr()).get()._field_auto)) {
			_case_begin_229eaec85:;
			{
				_2455eeb90_push_err(&(*_self_), _123732_decl.get()._field_elem.get()._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_229eae999:;
	};
	return jule::new_ptr<_2455ebd8a_Arr>(_2455ebd8a_Arr{._field_auto=_24485aabc_auto_sized(_123732_decl.ptr()), ._field_n=_124217_n, ._field_elem=_126817_elem});
}



inline jule::Ptr<_2455eb296_Map> _24560539e_build_map(_2455ee486_TypeChecker* _self_, jule::Ptr<_24485ae41_MapTypeDecl> _128632_decl) {
	jule::Bool _128713_not_plain = (*_self_)._field_not_plain;;
	(*_self_)._field_not_plain=true;
	__JULE_DEFER({
		(*_self_)._field_not_plain=_128713_not_plain;
	});;
	jule::Ptr<_2455e1027_TypeKind> _129117_key = _245606702_check_decl(&(*_self_), _128632_decl.get()._field_key);;
	if ((_129117_key == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_2455e1027_TypeKind> _129617_val = _245606702_check_decl(&(*_self_), _128632_decl.get()._field_val);;
	if ((_129617_val == nullptr)) {
		return nullptr;
	};
	if ((_2455e3876_enm(_129617_val.ptr()) != nullptr)) {
		_2455eeb90_push_err(&(*_self_), _128632_decl.get()._field_val.get()._field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>());
	};
	return jule::new_ptr<_2455eb296_Map>(_2455eb296_Map{._field_key=_129117_key, ._field_val=_129617_val});
}



inline jule::Ptr<_2455ea76d_Tuple> _2456056ac_build_tuple(_2455ee486_TypeChecker* _self_, jule::Ptr<_244859c75_TupleTypeDecl> _131034_decl) {
	jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _131117_types = jule::Slice<jule::Ptr<_2455e1027_TypeKind>>::alloc(0LL,_131034_decl.get()._field_types.len());;
	{
		auto &expr = _131034_decl.get()._field_types;
		auto it = expr.begin();
		_iter_begin_229eb53c8:;
		if (it != expr.end()) {
			jule::Ptr<_2448581d5_TypeDecl> _131221_t = *it;
			{
				jule::Ptr<_2455e1027_TypeKind> _131321_kind = _245606702_check_decl(&(*_self_), _131221_t);;
				if ((_131321_kind == nullptr)) {
					return nullptr;
				};
				_131117_types = jule::alloc_for_append(_131117_types,1);_131117_types.__push(_131321_kind);;
			}
			_iter_next_229eb53c8:;
			++it;
			goto _iter_begin_229eb53c8;
		}
		_iter_end_229eb53c8:;
	};
	return jule::new_ptr<_2455ea76d_Tuple>(_2455ea76d_Tuple{._field_types=_131117_types});
}



inline jule::Bool _2456059ba_check_fn_types(_2455ee486_TypeChecker* _self_, jule::Ptr<_2449299b0_FnIns>& _132338_f) {
	jule::Bool _132351_ok = jule::Bool();
	{
		auto &expr = _132338_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_229eb72cb:;
		if (it != expr.end()) {
			jule::Ptr<_244928ae1_ParamIns> _132421_p = *it;
			{
				_132421_p.get()._field_kind=_2456063e4_build(&(*_self_), _132421_p.get()._field_decl.get()._field_kind.get()._field_decl.get()._field_kind);
				_132351_ok=(_132421_p.get()._field_kind != nullptr);
				if ((!(_132351_ok))) {
					_132351_ok = false;
					return _132351_ok;
				};
				_24555b756_check_fn_param_kind((*_self_)._field_s, _132421_p);
			}
			_iter_next_229eb72cb:;
			++it;
			goto _iter_begin_229eb72cb;
		}
		_iter_end_229eb72cb:;
	};
	if ((!(_244927271_is_void(_132338_f.get()._field_decl.ptr())))) {
		_132338_f.get()._field_result=_2456063e4_build(&(*_self_), _132338_f.get()._field_decl.get()._field_result.get()._field_kind.get()._field_decl.get()._field_kind);
		_132351_ok = (_132338_f.get()._field_result != nullptr);
		return _132351_ok;
	};
	_132351_ok = true;
	return _132351_ok;
}



inline jule::Ptr<_2449299b0_FnIns> _245605cc8_build_fn(_2455ee486_TypeChecker* _self_, jule::Ptr<_244869ee9_FnDecl> _134131_decl) {
	if ((_134131_decl.get()._field_generics.len() > 0LL)) {
		_2455eeb90_push_err(&(*_self_), _134131_decl.get()._field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_244926d0e_Fn> _134717_f = _244930b2b_build_fn(_134131_decl);;
	jule::I32 _134913_n = (*_self_)._field_s.get()._field_errors.len();;
	_24556385c_check_fn_decl((*_self_)._field_s, _134717_f);
	if ((_134913_n != (*_self_)._field_s.get()._field_errors.len())) {
		return nullptr;
	};
	jule::Ptr<_2449299b0_FnIns> _135517_ins = _2449281ea_instance_force(_134717_f);;
	_135517_ins.get()._field_anon=true;
	jule::Bool _135813_ok = _2456059ba_check_fn_types(&(*_self_), _135517_ins);;
	if ((!(_135813_ok))) {
		return nullptr;
	};
	return _135517_ins;
}



inline jule::Trait<_2455e0ae8_Kind> _2456060d6_build_by_namespace(_2455ee486_TypeChecker* _self_, jule::Ptr<_2448592a2_NamespaceTypeDecl> _136641_decl) {
	jule::Str _136713_path = _245608a78_build_link_path_by_tokens(_136641_decl.get()._field_idents);;
	jule::Ptr<_245547db3_ImportInfo> _136817_imp = _24560bac0_Lookup_mptr_data[((*_self_)._field_lookup).type_offset]._24560a085_select_package((*_self_)._field_lookup, jule::Fn<jule::Bool(jule::Ptr<_245547db3_ImportInfo>)>([=](jule::Ptr<_245547db3_ImportInfo> _136853_imp) mutable -> jule::Bool {
		if (((_136641_decl.get()._field_idents.len() == 1LL) && (_136853_imp.get()._field_alias == _136713_path))) {
			return true;
		};
		return ((_136853_imp.get()._field_link_path == _136713_path) && _24554aa20_is_accessible_via_selection(_136853_imp.ptr()));
	}));;
	if (((_136817_imp == nullptr) || (!(_24554a47b_is_lookupable(_136817_imp.ptr(), jule::Str("self", 4)))))) {
		_2455eeb90_push_err(&(*_self_), _136641_decl.get()._field_idents[0LL],jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>::make({jule::Any(_136713_path)}));
		return nullptr;
	};
	_245600047_disallow_builtin(&(*_self_));
	jule::Trait<_24560bac0_Lookup> _138117_lookup = (*_self_)._field_lookup;;
	(*_self_)._field_lookup=jule::Trait<_24560bac0_Lookup>(_136817_imp, 1);
	jule::Ptr<_2455e1027_TypeKind> _138317_kind = _245606702_check_decl(&(*_self_), _136641_decl.get()._field_kind);;
	(*_self_)._field_lookup=_138117_lookup;
	_2455eed6b_allow_builtin(&(*_self_));
	return jule::Trait<_2455e0ae8_Kind>(_138317_kind, 5);
}



inline jule::Ptr<_2455e1027_TypeKind> _2456063e4_build(_2455ee486_TypeChecker* _self_, jule::Any& _139029_decl_kind) {
	jule::Trait<_2455e0ae8_Kind> _139117_kind = nullptr;;
	{
		auto &_match_expr{ _139029_decl_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485879b_IdentTypeDecl>>()) {
			_case_begin_229ec5b7a:;
			{
				jule::Trait<_2455e0ae8_Kind> _139421_t = _245603930_build_ident(&(*_self_), _139029_decl_kind.operator jule::Ptr<_24485879b_IdentTypeDecl>());;
				if ((_139421_t != nullptr)) {
					_139117_kind=_139421_t;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244858dea_SubIdentTypeDecl>>()) {
			_case_begin_229ec650a:;
			{
				jule::Trait<_2455e0ae8_Kind> _139921_t = _245603c3d_build_sub_ident(&(*_self_), _139029_decl_kind.operator jule::Ptr<_244858dea_SubIdentTypeDecl>());;
				if ((_139921_t != nullptr)) {
					_139117_kind=_139921_t;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485958d_SptrTypeDecl>>()) {
			_case_begin_229ec6571:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_2455e9283_Sptr> _140521_t = _245604359_build_sptr(&(*_self_), _139029_decl_kind.operator jule::Ptr<_24485958d_SptrTypeDecl>());;
				if ((_140521_t != nullptr)) {
					_139117_kind=jule::Trait<_2455e0ae8_Kind>(_140521_t, 7);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485a061_PtrTypeDecl>>()) {
			_case_begin_229ec4d66:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_2455ec7e7_Ptr> _141121_t = _245604975_build_ptr(&(*_self_), _139029_decl_kind.operator jule::Ptr<_24485a061_PtrTypeDecl>());;
				if ((_141121_t != nullptr)) {
					_139117_kind=jule::Trait<_2455e0ae8_Kind>(_141121_t, 12);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244859989_SlcTypeDecl>>()) {
			_case_begin_229ec4dcc:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_2455e9be0_Slc> _141721_t = _245604c83_build_slc(&(*_self_), _139029_decl_kind.operator jule::Ptr<_244859989_SlcTypeDecl>());;
				if ((_141721_t != nullptr)) {
					_139117_kind=jule::Trait<_2455e0ae8_Kind>(_141721_t, 8);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485a6e3_ArrTypeDecl>>()) {
			_case_begin_229ec4e43:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_2455ebd8a_Arr> _142321_t = _245605091_build_arr(&(*_self_), _139029_decl_kind.operator jule::Ptr<_24485a6e3_ArrTypeDecl>());;
				if ((_142321_t != nullptr)) {
					_139117_kind=jule::Trait<_2455e0ae8_Kind>(_142321_t, 11);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485ae41_MapTypeDecl>>()) {
			_case_begin_229ec4ea9:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_2455eb296_Map> _142921_t = _24560539e_build_map(&(*_self_), _139029_decl_kind.operator jule::Ptr<_24485ae41_MapTypeDecl>());;
				if ((_142921_t != nullptr)) {
					_139117_kind=jule::Trait<_2455e0ae8_Kind>(_142921_t, 10);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244859c75_TupleTypeDecl>>()) {
			_case_begin_229ec6c14:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_2455ea76d_Tuple> _143521_t = _2456056ac_build_tuple(&(*_self_), _139029_decl_kind.operator jule::Ptr<_244859c75_TupleTypeDecl>());;
				if ((_143521_t != nullptr)) {
					_139117_kind=jule::Trait<_2455e0ae8_Kind>(_143521_t, 9);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244869ee9_FnDecl>>()) {
			_case_begin_229ec6c7a:;
			{
				(*_self_)._field_inscatch=true;
				jule::Ptr<_2449299b0_FnIns> _144121_t = _245605cc8_build_fn(&(*_self_), _139029_decl_kind.operator jule::Ptr<_244869ee9_FnDecl>());;
				if ((_144121_t != nullptr)) {
					_139117_kind=jule::Trait<_2455e0ae8_Kind>(_144121_t, 1);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448592a2_NamespaceTypeDecl>>()) {
			_case_begin_229ec6ce1:;
			{
				(*_self_)._field_inscatch=true;
				jule::Trait<_2455e0ae8_Kind> _144721_t = _2456060d6_build_by_namespace(&(*_self_), _139029_decl_kind.operator jule::Ptr<_2448592a2_NamespaceTypeDecl>());;
				if ((_144721_t != nullptr)) {
					_139117_kind=_144721_t;
				};
			}
		}
		else {
			_case_begin_229ec4bbd:;
			{
				jule::Any _145221_udecl_kind = (*(((jule::Any*)((&(_139029_decl_kind))))));;
				{
					auto &_match_expr{ _145221_udecl_kind };
					
					if (_match_expr.type_is<jule::Ptr<_2455e9283_Sptr>>()) {
						_case_begin_229ec5a9d:;
						{
							_139117_kind=jule::Trait<_2455e0ae8_Kind>(_145221_udecl_kind.operator jule::Ptr<_2455e9283_Sptr>(), 7);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_2455ec7e7_Ptr>>()) {
						_case_begin_229ec5b14:;
						{
							_139117_kind=jule::Trait<_2455e0ae8_Kind>(_145221_udecl_kind.operator jule::Ptr<_2455ec7e7_Ptr>(), 12);
						}
					}
					else {
						_case_begin_229ec5949:;
						{
							_2455eeb90_push_err(&(*_self_), (*_self_)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_229ec585b:;
				};
			}
		}
		_match_end_229ec4b68:;
	};
	if ((_139117_kind == nullptr)) {
		return nullptr;
	};
	{
		auto &_match_expr{ _139117_kind };
		
		if (_match_expr.type_is<jule::Ptr<_2455e1027_TypeKind>>()) {
			_case_begin_229ed3b99:;
			{
				return _139117_kind.operator jule::Ptr<_2455e1027_TypeKind>();
			}
		}
		else {
			_case_begin_229ed34d4:;
			{
				return jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=_139117_kind});
			}
		}
		_match_end_229ec72ec:;
	};
}



inline jule::Ptr<_2455e1027_TypeKind> _245606702_check_decl(_2455ee486_TypeChecker* _self_, jule::Ptr<_2448581d5_TypeDecl>& _147634_decl) {
	jule::Ptr<_2431e4523_Token> _147817_error_token = (*_self_)._field_error_token;;
	(*_self_)._field_error_token=_147634_decl.get()._field_token;
	jule::Ptr<_2455e1027_TypeKind> _148117_kind = _2456063e4_build(&(*_self_), _147634_decl.get()._field_kind);;
	(*_self_)._field_error_token=_147817_error_token;
	return _148117_kind;
}



inline void _245606977_check(_2455ee486_TypeChecker* _self_, jule::Ptr<_2455e5180_TypeSymbol>& _148729_t) {
	if ((_148729_t.get()._field_decl == nullptr)) {
		return;;
	};
	jule::Ptr<_2455e1027_TypeKind> _149117_kind = _245606702_check_decl(&(*_self_), _148729_t.get()._field_decl);;
	if ((_149117_kind == nullptr)) {
		_2455e5713_remove_kind(_148729_t.ptr());
		return;;
	};
	_148729_t.get()._field_kind=_149117_kind;
}







std::ostream &operator<<(std::ostream &_Stream, _2455ee486_TypeChecker _Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "selection:" << _Src._field_selection << ", ";
	_Stream << "owner_alias:" << _Src._field_owner_alias << ", ";
	_Stream << "banned_generics:" << _Src._field_banned_generics << ", ";
	_Stream << "inscatch:" << _Src._field_inscatch;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool static__2456070d7___ident_type_decl(jule::Str& _150334_ident, jule::Ptr<_24485879b_IdentTypeDecl> _150346_t) {
	if ((_150346_t.get()._field_ident == _150334_ident)) {
		return true;
	};
	{
		auto &expr = _150346_t.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_229ed76d6:;
		if (it != expr.end()) {
			jule::Ptr<_2448581d5_TypeDecl> &_150716_g = *it;
			{
				if (static__245607428_exist(_150334_ident,_150716_g.get()._field_kind)) {
					return true;
				};
			}
			_iter_next_229ed76d6:;
			++it;
			goto _iter_begin_229ed76d6;
		}
		_iter_end_229ed76d6:;
	};
	return false;
}



inline jule::Bool static__245607428_exist(jule::Str& _151522_ident, jule::Any& _151535_k) {
	{
		auto &_match_expr{ _151535_k };
		
		if (_match_expr.type_is<jule::Ptr<_24485879b_IdentTypeDecl>>()) {
			_case_begin_229ed87d6:;
			{
				return static__2456070d7___ident_type_decl(_151522_ident,_151535_k.operator jule::Ptr<_24485879b_IdentTypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244858dea_SubIdentTypeDecl>>()) {
			_case_begin_229ed884c:;
			{
				jule::Ptr<_244858dea_SubIdentTypeDecl> _152017_sit = _151535_k.operator jule::Ptr<_244858dea_SubIdentTypeDecl>();;
				{
					auto &expr = _152017_sit.get()._field_idents;
					auto it = expr.begin();
					_iter_begin_229eda156:;
					if (it != expr.end()) {
						jule::Ptr<_24485879b_IdentTypeDecl> &_152120_id = *it;
						{
							if (static__2456070d7___ident_type_decl(_151522_ident,_152120_id)) {
								return true;
							};
						}
						_iter_next_229eda156:;
						++it;
						goto _iter_begin_229eda156;
					}
					_iter_end_229eda156:;
				};
				return false;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485958d_SptrTypeDecl>>()) {
			_case_begin_229ed8a39:;
			{
				jule::Ptr<_24485958d_SptrTypeDecl> _152817_sptr = _151535_k.operator jule::Ptr<_24485958d_SptrTypeDecl>();;
				return static__245607428_exist(_151522_ident,_152817_sptr.get()._field_elem.get()._field_kind);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485a061_PtrTypeDecl>>()) {
			_case_begin_229ed8aa0:;
			{
				jule::Ptr<_24485a061_PtrTypeDecl> _153117_ptr = _151535_k.operator jule::Ptr<_24485a061_PtrTypeDecl>();;
				return static__245607428_exist(_151522_ident,_153117_ptr.get()._field_elem.get()._field_kind);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244859989_SlcTypeDecl>>()) {
			_case_begin_229ed8b16:;
			{
				jule::Ptr<_244859989_SlcTypeDecl> _153417_slc = _151535_k.operator jule::Ptr<_244859989_SlcTypeDecl>();;
				return static__245607428_exist(_151522_ident,_153417_slc.get()._field_elem.get()._field_kind);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485a6e3_ArrTypeDecl>>()) {
			_case_begin_229ed8b7c:;
			{
				jule::Ptr<_24485a6e3_ArrTypeDecl> _153717_arr = _151535_k.operator jule::Ptr<_24485a6e3_ArrTypeDecl>();;
				return static__245607428_exist(_151522_ident,_153717_arr.get()._field_elem.get()._field_kind);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485ae41_MapTypeDecl>>()) {
			_case_begin_229ed8be3:;
			{
				jule::Ptr<_24485ae41_MapTypeDecl> _154017_map = _151535_k.operator jule::Ptr<_24485ae41_MapTypeDecl>();;
				return (static__245607428_exist(_151522_ident,_154017_map.get()._field_key.get()._field_kind) || static__245607428_exist(_151522_ident,_154017_map.get()._field_val.get()._field_kind));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244869ee9_FnDecl>>()) {
			_case_begin_229ed8c59:;
			{
				jule::Ptr<_244869ee9_FnDecl> _154417_f = _151535_k.operator jule::Ptr<_244869ee9_FnDecl>();;
				{
					auto &expr = _154417_f.get()._field_params;
					auto it = expr.begin();
					_iter_begin_229ee0502:;
					if (it != expr.end()) {
						jule::Ptr<_244868bc9_ParamDecl> &_154520_p = *it;
						{
							if (_24486903c_is_self(_154520_p.ptr())) {
								goto _iter_next_229ee0502;
							};
							if (static__245607428_exist(_151522_ident,_154520_p.get()._field_kind.get()._field_kind)) {
								return true;
							};
						}
						_iter_next_229ee0502:;
						++it;
						goto _iter_begin_229ee0502;
					}
					_iter_end_229ee0502:;
				};
				if ((_154417_f.get()._field_result != nullptr)) {
					return static__245607428_exist(_151522_ident,_154417_f.get()._field_result.get()._field_kind.get()._field_kind);
				};
				return false;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244859c75_TupleTypeDecl>>()) {
			_case_begin_229ed8cd1:;
			{
				jule::Ptr<_244859c75_TupleTypeDecl> _155817_tup = _151535_k.operator jule::Ptr<_244859c75_TupleTypeDecl>();;
				{
					auto &expr = _155817_tup.get()._field_types;
					auto it = expr.begin();
					_iter_begin_229ee28ab:;
					if (it != expr.end()) {
						jule::Ptr<_2448581d5_TypeDecl> &_155920_t = *it;
						{
							if (static__245607428_exist(_151522_ident,_155920_t.get()._field_kind)) {
								return true;
							};
						}
						_iter_next_229ee28ab:;
						++it;
						goto _iter_begin_229ee28ab;
					}
					_iter_end_229ee28ab:;
				};
				return false;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448592a2_NamespaceTypeDecl>>()) {
			_case_begin_229ed8d58:;
			{
				jule::Ptr<_2448592a2_NamespaceTypeDecl> _156617_ns = _151535_k.operator jule::Ptr<_2448592a2_NamespaceTypeDecl>();;
				return static__245607428_exist(_151522_ident,_156617_ns.get()._field_kind.get()._field_kind);
			}
		}
		else {
			_case_begin_229ed861b:;
			{
				return false;
			}
		}
		_match_end_229ed85b6:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _245606b97_IdentTypeLookup _Src) {
	_Stream << "IdentTypeLookup{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2279da6c5_FileInfo _Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _227a3a406_stmt _Src) {
	_Stream << "stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _227a3b3b3_stop(_227a3ac31_ScopeParser* _self_) {
	(*_self_)._field_pos=-1LL;
}



inline jule::Bool _227a3b627_stopped(_227a3ac31_ScopeParser* _self_) {
	return ((*_self_)._field_pos == -1LL);
}



inline jule::Bool _227a3b88b_finished(_227a3ac31_ScopeParser* _self_) {
	return ((*_self_)._field_pos >= (*_self_)._field_stmts.len());
}



inline jule::Bool _227a3bb00_is_last_st(_227a3ac31_ScopeParser* _self_) {
	return (((*_self_)._field_pos + 1LL) >= (*_self_)._field_stmts.len());
}



inline void _227a3be1e_push_err(_227a3ac31_ScopeParser* _self_, jule::Ptr<_2431e4523_Token> _19227_token, jule::Str _19242_fmt) {
	_227a57423_push_err((*_self_)._field_p.ptr(), _19227_token,_19242_fmt,jule::Slice<jule::Any>());
}



inline void _227a3c23d_push_suggestion(_227a3ac31_ScopeParser* _self_, jule::Str _19734_fmt, jule::Slice<jule::Any> _19747_args) {
	_227a57742_push_suggestion((*_self_)._field_p.ptr(), _19734_fmt,jule::Any(_19747_args));
}



inline void _227a3c4b3_insert_as_next(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _20138_tokens) {
	(*_self_)._field_stmts=jule::append((*_self_)._field_stmts.slice(0LL,((*_self_)._field_pos + 1LL)),(*_self_)._field_stmts.slice((*_self_)._field_pos));
	(*_self_)._field_stmts[((*_self_)._field_pos + 1LL)]=jule::new_ptr<_227a3a406_stmt>(_227a3a406_stmt{._field_tokens=_20138_tokens, });
}



inline jule::Ptr<_227a3a406_stmt> _227a3c727_next(_227a3ac31_ScopeParser* _self_) {
	((*_self_)._field_pos)++;
	return (*_self_)._field_stmts[(*_self_)._field_pos];
}



inline jule::Ptr<_244868503_ScopeTree> _227a3cace_build_scope(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _21135_tokens, jule::Ptr<_2431e4523_Token> _21157_end) {
	jule::Ptr<_244868503_ScopeTree> _21217_s = _227a392a1_new_scope();;
	_21217_s.get()._field_parent=(*_self_)._field_s;
	_21217_s.get()._field_end=_21157_end;
	_227a3ac31_ScopeParser _21517_ssp = _227a3ac31_ScopeParser{._field_p=(*_self_)._field_p, };;
	_227a46753_build(&_21517_ssp, _21135_tokens,_21217_s);
	return _21217_s;
}



inline jule::Ptr<_24486aec8_VarDecl> _227a3cddc_build_var_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _22236_tokens) {
	jule::Ptr<_24486aec8_VarDecl> _22317_v = _227a59e1a_build_var((*_self_)._field_p, _22236_tokens);;
	_22317_v.get()._field_scope=(*_self_)._field_s;
	return _22317_v;
}



inline jule::Ptr<_24486b380_RetSt> _227a3d1ea_build_ret_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _22835_tokens) {
	jule::Ptr<_24486b380_RetSt> _22917_st = jule::new_ptr<_24486b380_RetSt>(_24486b380_RetSt{._field_token=_22835_tokens[0LL], });;
	if ((_22835_tokens.len() > 1LL)) {
		_22835_tokens=_22835_tokens.slice(1LL);
		_22917_st.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _22835_tokens);
	};
	return _22917_st;
}



inline jule::Ptr<_24486b9e0_Iter> _227a3d508_build_while_next_iter(_227a3ac31_ScopeParser* _self_, jule::Ptr<_227a3a406_stmt>& _23945_s) {
	jule::Ptr<_24486b9e0_Iter> _24017_it = jule::new_ptr<_24486b9e0_Iter>(_24486b9e0_Iter{._field_token=_23945_s.get()._field_tokens[0LL], });;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _24317_tokens = _23945_s.get()._field_tokens.slice(1LL);;
	jule::Ptr<_24486c2b5_WhileKind> _24417_kind = jule::new_ptr<_24486c2b5_WhileKind>(_24486c2b5_WhileKind{});;
	if ((_24317_tokens.len() > 0LL)) {
		_24417_kind.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _24317_tokens);
	};
	if (_227a3bb00_is_last_st(&(*_self_))) {
		_227a3be1e_push_err(&(*_self_), _24017_it.get()._field_token,jule::Str("invalid syntax", 14));
		return nullptr;
	};
	_24317_tokens=_227a3c727_next(&(*_self_)).get()._field_tokens;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _25617_st_tokens = _227a471d2_get_block_expr(_24317_tokens);;
	if ((_25617_st_tokens.len() > 0LL)) {
		jule::Ptr<_227a3a406_stmt> _25821_stmt = jule::new_ptr<_227a3a406_stmt>(_227a3a406_stmt{._field_tokens=_25617_st_tokens, ._field_terminated=_23945_s.get()._field_terminated});;
		_24417_kind.get()._field_next_token=_25617_st_tokens[0LL];
		_24417_kind.get()._field_next=_227a46434_build_st(&(*_self_), _25821_stmt);
	};
	jule::I32 _26617_i = _25617_st_tokens.len();;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _26717_block_tokens = _227a54b6d_range(_26617_i,jule::Str("{", 1),jule::Str("}", 1),_24317_tokens);;
	if ((_26717_block_tokens == nullptr)) {
		_227a3b3b3_stop(&(*_self_));
		_227a3be1e_push_err(&(*_self_), _24017_it.get()._field_token,jule::Str("body is not exist", 17));
		_227a3c23d_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_26617_i < _24317_tokens.len())) {
		_227a3be1e_push_err(&(*_self_), _24317_tokens[_26617_i],jule::Str("invalid syntax", 14));
	};
	_24017_it.get()._field_scope=_227a3cace_build_scope(&(*_self_), _26717_block_tokens,_24317_tokens[(_26617_i - 1LL)]);
	_24017_it.get()._field_kind=static_cast<jule::Any>(_24417_kind);
	return _24017_it;
}



inline jule::Ptr<_24486c2b5_WhileKind> _227a3d816_build_while_iter_kind(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _28445_tokens) {
	return jule::new_ptr<_24486c2b5_WhileKind>(_24486c2b5_WhileKind{._field_expr=_227a57a50_build_expr((*_self_)._field_p, _28445_tokens), });
}



inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a3db46_get_range_kind_keys_tokens(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _29050_toks) {
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _29118_vars;;
	jule::Slice<_242dbab89_Log> _29124_errs;;
	std::tie(_29118_vars,_29124_errs) = _227a55762_parts(_29050_toks,static_cast<jule::U32>(8LLU),true);
	(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_29124_errs);
	return _29118_vars;
}



inline jule::Ptr<_24486aec8_VarDecl> _227a3de65_build_range_kind_key(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _29644_tokens) {
	if ((_29644_tokens.len() == 0LL)) {
		return nullptr;
	};
	jule::Ptr<_24486aec8_VarDecl> _30017_key = jule::new_ptr<_24486aec8_VarDecl>(_24486aec8_VarDecl{._field_token=_29644_tokens[0LL], });;
	if ((_30017_key.get()._field_token.get()._field_id == static_cast<jule::U32>(36LLU))) {
		_30017_key.get()._field_mutable=true;
		if ((_29644_tokens.len() == 1LL)) {
			_227a3be1e_push_err(&(*_self_), _30017_key.get()._field_token,jule::Str("invalid syntax", 14));
		};
		_30017_key.get()._field_token=_29644_tokens[1LL];
	} else if ((_29644_tokens.len() > 1LL)) {
		_227a3be1e_push_err(&(*_self_), _29644_tokens[1LL],jule::Str("invalid syntax", 14));
	};
	if ((_30017_key.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a3be1e_push_err(&(*_self_), _30017_key.get()._field_token,jule::Str("invalid syntax", 14));
		_227a3c23d_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	};
	_30017_key.get()._field_ident=_30017_key.get()._field_token.get()._field_kind;
	return _30017_key;
}



inline jule::Slice<jule::Ptr<_24486aec8_VarDecl>> _227a3e273_build_range_kind_keys(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>& _32145_parts) {
	jule::Slice<jule::Ptr<_24486aec8_VarDecl>> _32217_keys = nullptr;;
	{
		auto &expr = _32145_parts;
		auto it = expr.begin();
		_iter_begin_22a153d3b:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _32321_tokens = *it;
			{
				_32217_keys = jule::alloc_for_append(_32217_keys,1);_32217_keys.__push(_227a3de65_build_range_kind_key(&(*_self_), _32321_tokens));;
			}
			_iter_next_22a153d3b:;
			++it;
			goto _iter_begin_22a153d3b;
		}
		_iter_end_22a153d3b:;
	};
	return _32217_keys;
}



inline void _227a3e5b4_setup_range_kind_keys_plain(_227a3ac31_ScopeParser* _self_, jule::Ptr<_24486cb56_RangeKind>& _32951_rng, jule::Slice<jule::Ptr<_2431e4523_Token>>& _32973_tokens) {
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _33017_key_tokens = _227a3db46_get_range_kind_keys_tokens(&(*_self_), _32973_tokens);;
	if ((_33017_key_tokens.len() == 0LL)) {
		return;;
	};
	if ((_33017_key_tokens.len() > 2LL)) {
		_227a3be1e_push_err(&(*_self_), _32951_rng.get()._field_in_token,jule::Str("range variables can be maximum two", 34));
	};
	jule::Slice<jule::Ptr<_24486aec8_VarDecl>> _33717_keys = _227a3e273_build_range_kind_keys(&(*_self_), _33017_key_tokens);;
	_32951_rng.get()._field_key_a=_33717_keys[0LL];
	if ((_33717_keys.len() > 1LL)) {
		_32951_rng.get()._field_key_b=_33717_keys[1LL];
	};
}



inline void _227a3e916_setup_range_kind_keys_explicit(_227a3ac31_ScopeParser* _self_, jule::Ptr<_24486cb56_RangeKind>& _34454_rng, jule::Slice<jule::Ptr<_2431e4523_Token>>& _34476_tokens) {
	jule::I32 _34517_i = 0LL;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _34617_rang = _227a54b6d_range(_34517_i,jule::Str("(", 1),jule::Str(")", 1),_34476_tokens);;
	if ((_34517_i < _34476_tokens.len())) {
		_227a3be1e_push_err(&(*_self_), _34454_rng.get()._field_in_token,jule::Str("invalid syntax", 14));
	};
	_227a3e5b4_setup_range_kind_keys_plain(&(*_self_), _34454_rng,_34617_rang);
}



inline void _227a3ec46_setup_range_kind_keys(_227a3ac31_ScopeParser* _self_, jule::Ptr<_24486cb56_RangeKind>& _35345_rng, jule::Slice<jule::Ptr<_2431e4523_Token>>& _35367_tokens) {
	if ((_35367_tokens[0LL].get()._field_id == static_cast<jule::U32>(3LLU))) {
		if ((_35367_tokens[0LL].get()._field_kind != jule::Str("(", 1))) {
			_227a3be1e_push_err(&(*_self_), _35367_tokens[0LL],jule::Str("invalid syntax", 14));
			return;;
		};
		_227a3e916_setup_range_kind_keys_explicit(&(*_self_), _35345_rng,_35367_tokens);
		return;;
	};
	_227a3e5b4_setup_range_kind_keys_plain(&(*_self_), _35345_rng,_35367_tokens);
}



inline jule::Ptr<_24486cb56_RangeKind> _227a40197_build_range_iter_kind(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _36545_var_tokens, jule::Slice<jule::Ptr<_2431e4523_Token>>& _36614_expr_tokens, jule::Ptr<_2431e4523_Token>& _36642_in_token) {
	jule::Ptr<_24486cb56_RangeKind> _36717_rng = jule::new_ptr<_24486cb56_RangeKind>(_24486cb56_RangeKind{._field_in_token=_36642_in_token, });;
	if ((_36614_expr_tokens.len() == 0LL)) {
		_227a3be1e_push_err(&(*_self_), _36717_rng.get()._field_in_token,jule::Str("expression missing", 18));
		return _36717_rng;
	};
	_36717_rng.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _36614_expr_tokens);
	if ((_36545_var_tokens.len() > 0LL)) {
		_227a3ec46_setup_range_kind_keys(&(*_self_), _36717_rng,_36545_var_tokens);
	};
	return _36717_rng;
}



inline jule::Any _227a4054e_build_common_iter_kind(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _38146_tokens, jule::Ptr<_2431e4523_Token>& _38165_err_tok) {
	jule::I32 _38217_brace_n = 0LL;;
	{
		auto &expr = _38146_tokens;
		auto it = expr.begin();
		_iter_begin_22a15e95c:;
		if (it != expr.end()) {
			jule::I32 _38314_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _38321_tok = *it;
			{
				if ((_38321_tok.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _38321_tok.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a160919:;
							{
								(_38217_brace_n)++;
								goto _iter_next_22a15e95c;
							}
						}
						else {
							_case_begin_22a160be4:;
							{
								(_38217_brace_n)--;
							}
						}
						_match_end_22a1609d5:;
					};
				};
				if ((_38217_brace_n != 0LL)) {
					goto _iter_next_22a15e95c;
				};
				{
					auto &_match_expr{ _38321_tok.get()._field_id };
					
					if (_match_expr == static_cast<jule::U32>(15LLU)) {
						_case_begin_22a16060b:;
						{
							jule::Slice<jule::Ptr<_2431e4523_Token>> _40025_decl_tokens = _38146_tokens.slice(0LL,_38314_i);;
							jule::Slice<jule::Ptr<_2431e4523_Token>> _40125_expr_tokens = _38146_tokens.slice((_38314_i + 1LL));;
							return static_cast<jule::Any>(_227a40197_build_range_iter_kind(&(*_self_), _40025_decl_tokens,_40125_expr_tokens,_38321_tok));
						}
					}
					_match_end_22a1611ab:;
				};
			}
			_iter_next_22a15e95c:;
			++it;
			_38314_i++;
			goto _iter_begin_22a15e95c;
		}
		_iter_end_22a15e95c:;
	};
	return static_cast<jule::Any>(_227a3d816_build_while_iter_kind(&(*_self_), _38146_tokens));
}



inline jule::Ptr<_24486b9e0_Iter> _227a4085c_build_common_iter(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _40840_tokens) {
	jule::Ptr<_24486b9e0_Iter> _40917_it = jule::new_ptr<_24486b9e0_Iter>(_24486b9e0_Iter{._field_token=_40840_tokens[0LL], });;
	_40840_tokens=_40840_tokens.slice(1LL);
	if ((_40840_tokens.len() == 0LL)) {
		_227a3b3b3_stop(&(*_self_));
		_227a3be1e_push_err(&(*_self_), _40917_it.get()._field_token,jule::Str("body is not exist", 17));
		_227a3c23d_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _41917_expr_tokens = _227a471d2_get_block_expr(_40840_tokens);;
	if ((_41917_expr_tokens.len() > 0LL)) {
		_40917_it.get()._field_kind=_227a4054e_build_common_iter_kind(&(*_self_), _41917_expr_tokens,_40917_it.get()._field_token);
	};
	jule::I32 _42317_i = _41917_expr_tokens.len();;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _42417_scope_tokens = _227a54b6d_range(_42317_i,jule::Str("{", 1),jule::Str("}", 1),_40840_tokens);;
	if ((_42417_scope_tokens == nullptr)) {
		_227a3b3b3_stop(&(*_self_));
		_227a3be1e_push_err(&(*_self_), _40917_it.get()._field_token,jule::Str("body is not exist", 17));
		_227a3c23d_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_42317_i < _40840_tokens.len())) {
		_227a3be1e_push_err(&(*_self_), _40840_tokens[_42317_i],jule::Str("invalid syntax", 14));
	};
	_40917_it.get()._field_scope=_227a3cace_build_scope(&(*_self_), _42417_scope_tokens,_40840_tokens[(_42317_i - 1LL)]);
	return _40917_it;
}



inline jule::Ptr<_24486b9e0_Iter> _227a40b6a_build_iter_st(_227a3ac31_ScopeParser* _self_, jule::Ptr<_227a3a406_stmt>& _43837_st) {
	if (_43837_st.get()._field_terminated) {
		return _227a3d508_build_while_next_iter(&(*_self_), _43837_st);
	};
	return _227a4085c_build_common_iter(&(*_self_), _43837_st.get()._field_tokens);
}



inline jule::Ptr<_24486d00d_BreakSt> _227a40e78_build_break_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _44538_tokens) {
	jule::Ptr<_24486d00d_BreakSt> _44617_brk = jule::new_ptr<_24486d00d_BreakSt>(_24486d00d_BreakSt{._field_token=_44538_tokens[0LL], });;
	if ((_44538_tokens.len() > 1LL)) {
		if ((_44538_tokens[1LL].get()._field_id != static_cast<jule::U32>(2LLU))) {
			_227a3be1e_push_err(&(*_self_), _44538_tokens[1LL],jule::Str("invalid syntax", 14));
			_227a3c23d_push_suggestion(&(*_self_), jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			_44617_brk.get()._field_label=_44538_tokens[1LL];
			if ((_44538_tokens.len() > 2LL)) {
				_227a3be1e_push_err(&(*_self_), _44538_tokens[1LL],jule::Str("invalid syntax", 14));
			};
		};
	};
	return _44617_brk;
}



inline jule::Ptr<_24486d3b5_ContSt> _227a41286_build_cont_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _46337_tokens) {
	jule::Ptr<_24486d3b5_ContSt> _46417_cont = jule::new_ptr<_24486d3b5_ContSt>(_24486d3b5_ContSt{._field_token=_46337_tokens[0LL], });;
	if ((_46337_tokens.len() > 1LL)) {
		if ((_46337_tokens[1LL].get()._field_id != static_cast<jule::U32>(2LLU))) {
			_227a3be1e_push_err(&(*_self_), _46337_tokens[1LL],jule::Str("invalid syntax", 14));
			_227a3c23d_push_suggestion(&(*_self_), jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			_46417_cont.get()._field_label=_46337_tokens[1LL];
			if ((_46337_tokens.len() > 2LL)) {
				_227a3be1e_push_err(&(*_self_), _46337_tokens[1LL],jule::Str("invalid syntax", 14));
			};
		};
	};
	return _46417_cont;
}



inline jule::Ptr<_24486d838_If> _227a41594_build_if(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _48132_tokens) {
	jule::Ptr<_24486d838_If> _48217_model = jule::new_ptr<_24486d838_If>(_24486d838_If{._field_token=_48132_tokens[0LL], });;
	_48132_tokens=_48132_tokens.slice(1LL);
	jule::Slice<jule::Ptr<_2431e4523_Token>> _48617_expr_tokens = _227a471d2_get_block_expr(_48132_tokens);;
	jule::I32 _48717_i = 0LL;;
	if ((_48617_expr_tokens.len() == 0LL)) {
		_227a3be1e_push_err(&(*_self_), _48217_model.get()._field_token,jule::Str("expression missing", 18));
	} else {
		_48717_i=static_cast<jule::I32>(_48617_expr_tokens.len());
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _49317_scope_tokens = _227a54b6d_range(_48717_i,jule::Str("{", 1),jule::Str("}", 1),_48132_tokens);;
	if ((_49317_scope_tokens == nullptr)) {
		_227a3b3b3_stop(&(*_self_));
		_227a3be1e_push_err(&(*_self_), _48217_model.get()._field_token,jule::Str("body is not exist", 17));
		_227a3c23d_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2431e4523_Token> _50017_end = _48132_tokens[(_48717_i - 1LL)];;
	if ((_48717_i < _48132_tokens.len())) {
		if ((_48132_tokens[_48717_i].get()._field_id == static_cast<jule::U32>(17LLU))) {
			_48132_tokens=_48132_tokens.slice(_48717_i);
		} else {
			_227a3be1e_push_err(&(*_self_), _48132_tokens[_48717_i],jule::Str("invalid syntax", 14));
			_48132_tokens=nullptr;
		};
	};
	_48217_model.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _48617_expr_tokens);
	_48217_model.get()._field_scope=_227a3cace_build_scope(&(*_self_), _49317_scope_tokens,_50017_end);
	return _48217_model;
}



inline jule::Ptr<_24486dbe0_Else> _227a418a2_build_else(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _51434_tokens) {
	jule::Ptr<_24486dbe0_Else> _51517_els = jule::new_ptr<_24486dbe0_Else>(_24486dbe0_Else{._field_token=_51434_tokens[0LL], });;
	_51434_tokens=_51434_tokens.slice(1LL);
	jule::I32 _51917_i = 0LL;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _52017_scope_tokens = _227a54b6d_range(_51917_i,jule::Str("{", 1),jule::Str("}", 1),_51434_tokens);;
	if ((_52017_scope_tokens == nullptr)) {
		if ((_51917_i < _51434_tokens.len())) {
			_227a3be1e_push_err(&(*_self_), _51517_els.get()._field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			_227a3b3b3_stop(&(*_self_));
			_227a3be1e_push_err(&(*_self_), _51517_els.get()._field_token,jule::Str("body is not exist", 17));
			_227a3c23d_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		};
		return nullptr;
	};
	if ((_51917_i < _51434_tokens.len())) {
		_227a3be1e_push_err(&(*_self_), _51434_tokens[_51917_i],jule::Str("invalid syntax", 14));
	};
	_51517_els.get()._field_scope=_227a3cace_build_scope(&(*_self_), _52017_scope_tokens,_51434_tokens[(_51917_i - 1LL)]);
	return _51517_els;
}



inline jule::Ptr<_24486e163_Conditional> _227a41bb0_build_if_else_chain(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _53842_tokens) {
	jule::Ptr<_24486e163_Conditional> _53917_chain = jule::new_ptr<_24486e163_Conditional>(_24486e163_Conditional{._field_head=_227a41594_build_if(&(*_self_), _53842_tokens), });;
	if ((_53917_chain.get()._field_head == nullptr)) {
		return nullptr;
	};
	while ((_53842_tokens.len() != 0LL)) {
		{
			if ((_53842_tokens[0LL].get()._field_id != static_cast<jule::U32>(17LLU))) {
				goto _iter_end_22a17c073;
			};
			if (((_53842_tokens.len() > 1LL) && (_53842_tokens[1LL].get()._field_id == static_cast<jule::U32>(16LLU)))) {
				_53842_tokens=_53842_tokens.slice(1LL);
				jule::Ptr<_24486d838_If> _55125_elif = _227a41594_build_if(&(*_self_), _53842_tokens);;
				_53917_chain.get()._field_tail = jule::alloc_for_append(_53917_chain.get()._field_tail,1);_53917_chain.get()._field_tail.__push(_55125_elif);;
				goto _iter_next_22a17c073;
			};
			_53917_chain.get()._field_default=_227a418a2_build_else(&(*_self_), _53842_tokens);
			goto _iter_end_22a17c073;
		}
	_iter_next_22a17c073:;
	}
	_iter_end_22a17c073:;;
	return _53917_chain;
}



inline jule::Ptr<_24485e2eb_CoExpr> _227a41ebd_build_co_call_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _56139_tokens) {
	jule::Ptr<_24485e2eb_CoExpr> _56217_c = jule::new_ptr<_24485e2eb_CoExpr>(_24485e2eb_CoExpr{._field_token=_56139_tokens[0LL], });;
	_56139_tokens=_56139_tokens.slice(1LL);
	_56217_c.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _56139_tokens);
	return _56217_c;
}



inline jule::Ptr<_244866028_GotoSt> _227a422cb_build_goto_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _57037_tokens) {
	jule::Ptr<_244866028_GotoSt> _57117_gt = jule::new_ptr<_244866028_GotoSt>(_244866028_GotoSt{._field_token=_57037_tokens[0LL], });;
	if ((_57037_tokens.len() == 1LL)) {
		_227a3be1e_push_err(&(*_self_), _57117_gt.get()._field_token,jule::Str("missing label identifier for goto statement", 43));
		return nullptr;
	} else if ((_57037_tokens.len() > 2LL)) {
		_227a3be1e_push_err(&(*_self_), _57037_tokens[2LL],jule::Str("invalid syntax", 14));
	};
	jule::Ptr<_2431e4523_Token> _58017_ident_token = _57037_tokens[1LL];;
	if ((_58017_ident_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a3be1e_push_err(&(*_self_), _58017_ident_token,jule::Str("invalid syntax", 14));
		_227a3c23d_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return _57117_gt;
	};
	_57117_gt.get()._field_label=_58017_ident_token;
	return _57117_gt;
}



inline jule::Ptr<_244866314_FallSt> _227a425d9_build_fall_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _59037_tokens) {
	jule::Ptr<_244866314_FallSt> _59117_fll = jule::new_ptr<_244866314_FallSt>(_244866314_FallSt{._field_token=_59037_tokens[0LL]});;
	if ((_59037_tokens.len() > 1LL)) {
		_227a3be1e_push_err(&(*_self_), _59037_tokens[1LL],jule::Str("invalid syntax", 14));
	};
	return _59117_fll;
}



inline jule::Ptr<_24486e839_TypeAliasDecl> _227a428e7_build_type_alias_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _60043_tokens) {
	jule::Ptr<_24486e839_TypeAliasDecl> _60117_tad = _227a5914a_build_type_alias_decl((*_self_)._field_p, _60043_tokens);;
	_60117_tad.get()._field_scope=(*_self_)._field_s;
	return _60117_tad;
}



inline void _227a42d59_push_case_expr(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _60637_tokens, jule::Ptr<_2431e4523_Token> _60659_token, jule::Bool _6079_type_match, jule::Slice<jule::Ptr<_24485c706_Expr>>& _60732_exprs) {
	if ((_60637_tokens.len() == 0LL)) {
		return;;
	};
	if (_6079_type_match) {
		jule::I32 _61321_i = 0LL;;
		jule::Ptr<_2448581d5_TypeDecl> _61422_t;;
		jule::Bool _61425_ok;;
		std::tie(_61422_t,_61425_ok) = _227a58d3c_build_type((*_self_)._field_p, _60637_tokens,(&(_61321_i)),true);
		if (_61425_ok) {
			_60732_exprs = jule::alloc_for_append(_60732_exprs,1);_60732_exprs.__push(jule::new_ptr<_24485c706_Expr>(_24485c706_Expr{._field_token=_60637_tokens[0LL], ._field_end=_60637_tokens[(_60637_tokens.len() - 1LL)], ._field_kind=static_cast<jule::Any>(_61422_t)}));;
			if ((_61321_i < _60637_tokens.len())) {
				_227a3be1e_push_err(&(*_self_), _60637_tokens[_61321_i],jule::Str("invalid syntax", 14));
			};
		};
		return;;
	};
	_60732_exprs = jule::alloc_for_append(_60732_exprs,1);_60732_exprs.__push(_227a57a50_build_expr((*_self_)._field_p, _60637_tokens));;
}



inline jule::Slice<jule::Ptr<_24485c706_Expr>> _227a43211_build_case_exprs(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _63040_tokens, jule::Bool _63058_type_match) {
	jule::Slice<jule::Ptr<_24485c706_Expr>> _63117_exprs = jule::Slice<jule::Ptr<_24485c706_Expr>>::alloc(0LL,1LL);;
	jule::I32 _63317_brace_n = 0LL;;
	jule::I32 _63417_j = 0LL;;
	{
		auto &expr = _63040_tokens;
		auto it = expr.begin();
		_iter_begin_22a18c616:;
		if (it != expr.end()) {
			jule::I32 _63514_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _63521_tok = *it;
			{
				if ((_63521_tok.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _63521_tok.get()._field_kind };
						
						if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
							_case_begin_22a18d66c:;
							{
								(_63317_brace_n)++;
							}
						}
						else {
							_case_begin_22a18d947:;
							{
								(_63317_brace_n)--;
							}
						}
						_match_end_22a18d738:;
					};
					goto _iter_next_22a18c616;
				} else if ((_63317_brace_n != 0LL)) {
					goto _iter_next_22a18c616;
				};
				{
					
					if (((_63521_tok.get()._field_id == static_cast<jule::U32>(7LLU)) && (_63521_tok.get()._field_kind == jule::Str("|", 1)))) {
						_case_begin_22a18de20:;
						{
							jule::Slice<jule::Ptr<_2431e4523_Token>> _65121_expr_tokens = _63040_tokens.slice(_63417_j,_63514_i);;
							if ((_65121_expr_tokens.len() == 0LL)) {
								_227a3be1e_push_err(&(*_self_), _63521_tok,jule::Str("expression missing", 18));
							} else {
								_227a42d59_push_case_expr(&(*_self_), _63040_tokens.slice(_63417_j,_63514_i),_63521_tok,_63058_type_match,_63117_exprs);
							};
							_63417_j=static_cast<jule::I32>((_63514_i + 1LL));
						}
					}
					else if ((_63521_tok.get()._field_id == static_cast<jule::U32>(11LLU))) {
						_case_begin_22a1944ca:;
						{
							_227a42d59_push_case_expr(&(*_self_), _63040_tokens.slice(_63417_j,_63514_i),_63521_tok,_63058_type_match,_63117_exprs);
							_63040_tokens=_63040_tokens.slice((_63514_i + 1LL));
							return _63117_exprs;
						}
					}
					_match_end_22a18d56d:;
				};
			}
			_iter_next_22a18c616:;
			++it;
			_63514_i++;
			goto _iter_begin_22a18c616;
		}
		_iter_end_22a18c616:;
	};
	_227a3be1e_push_err(&(*_self_), _63040_tokens[0LL],jule::Str("invalid syntax", 14));
	_63040_tokens=nullptr;
	return nullptr;
}



inline jule::Ptr<_244868503_ScopeTree> _227a4351e_build_case_scope(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _66940_tokens) {
	jule::I32 _67017_n = 0LL;;
	for (;;) {
		{
			jule::I32 _67221_i = 0LL;;
			jule::Slice<jule::Ptr<_2431e4523_Token>> _67322_next;;
			std::tie(_67322_next,std::ignore) = _227a3a109_skip_st(_67221_i,_66940_tokens.slice(_67017_n));
			if ((_67322_next.len() == 0LL)) {
				goto _iter_end_22a19804a;
			};
			jule::Ptr<_2431e4523_Token> _67717_tok = _67322_next[0LL];;
			if (((_67717_tok.get()._field_id != static_cast<jule::U32>(7LLU)) || (_67717_tok.get()._field_kind != jule::Str("|", 1)))) {
				_67017_n+=_67221_i;
				goto _iter_next_22a19804a;
			};
			jule::Slice<jule::Ptr<_2431e4523_Token>> _68221_scope_tokens = _66940_tokens.slice(0LL,_67017_n);;
			jule::Ptr<_244868503_ScopeTree> _68321_scope = _227a3cace_build_scope(&(*_self_), _68221_scope_tokens,_66940_tokens[_67017_n]);;
			_66940_tokens=_66940_tokens.slice(_67017_n);
			return _68321_scope;
		}
	_iter_next_22a19804a:;
	}
	_iter_end_22a19804a:;;
	jule::Ptr<_2431e4523_Token> _68717_end = jule::Ptr<_2431e4523_Token>();;
	if ((_66940_tokens.len() > 0LL)) {
		_68717_end=_66940_tokens[(_66940_tokens.len() - 1LL)];
	};
	jule::Ptr<_244868503_ScopeTree> _69117_scope = _227a3cace_build_scope(&(*_self_), _66940_tokens,_68717_end);;
	_66940_tokens=nullptr;
	return _69117_scope;
}



inline std::tuple<jule::Ptr<_24486ecac_Case>,jule::Bool> _227a438c6_build_case(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _69634_tokens, jule::Bool _69652_type_match) {
	jule::Ptr<_24486ecac_Case> _69717_c = jule::new_ptr<_24486ecac_Case>(_24486ecac_Case{._field_token=_69634_tokens[0LL], });;
	_69634_tokens=_69634_tokens.slice(1LL);
	_69717_c.get()._field_exprs=_227a43211_build_case_exprs(&(*_self_), _69634_tokens,_69652_type_match);
	_69717_c.get()._field_scope=_227a4351e_build_case_scope(&(*_self_), _69634_tokens);
	jule::Bool _70313_is_default = (_69717_c.get()._field_exprs.len() == 0LL);;
	return std::make_tuple(_69717_c,_70313_is_default);
}



inline std::tuple<jule::Slice<jule::Ptr<_24486ecac_Case>>,jule::Ptr<_24486dbe0_Else>> _227a43c7d_build_cases(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _70734_tokens, jule::Bool _70752_type_match) {
	jule::Slice<jule::Ptr<_24486ecac_Case>> _70817_cases = nullptr;;
	jule::Ptr<_24486dbe0_Else> _70917_def = nullptr;;
	jule::Bool _71017_def_not_last = false;;
	while ((_70734_tokens.len() > 0LL)) {
		{
			jule::Ptr<_2431e4523_Token> _71221_tok = _70734_tokens[0LL];;
			if (((_71221_tok.get()._field_id != static_cast<jule::U32>(7LLU)) || (_71221_tok.get()._field_kind != jule::Str("|", 1)))) {
				_227a3be1e_push_err(&(*_self_), _71221_tok,jule::Str("invalid syntax", 14));
				goto _iter_end_22a1a0cbc;
			};
			jule::Ptr<_24486ecac_Case> _71722_c;;
			jule::Bool _71725_is_default;;
			std::tie(_71722_c,_71725_is_default) = _227a438c6_build_case(&(*_self_), _70734_tokens,_70752_type_match);
			if (_71725_is_default) {
				_71722_c.get()._field_token=_71221_tok;
				if ((_70917_def == nullptr)) {
					_70917_def=jule::new_ptr<_24486dbe0_Else>(_24486dbe0_Else{._field_token=_71722_c.get()._field_token, ._field_scope=_71722_c.get()._field_scope});
				} else {
					_227a3be1e_push_err(&(*_self_), _71221_tok,jule::Str("invalid syntax", 14));
				};
			} else {
				_71017_def_not_last=(_71017_def_not_last || (_70917_def != nullptr));
				_70817_cases = jule::alloc_for_append(_70817_cases,1);_70817_cases.__push(_71722_c);;
			};
		}
	_iter_next_22a1a0cbc:;
	}
	_iter_end_22a1a0cbc:;;
	if (_71017_def_not_last) {
		_227a3be1e_push_err(&(*_self_), _70917_def.get()._field_token,jule::Str("default case should be last case", 32));
	};
	return std::make_tuple(_70817_cases,_70917_def);
}



inline jule::Ptr<_244870483_MatchCase> _227a4408b_build_match_case(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _74139_tokens) {
	jule::Ptr<_244870483_MatchCase> _74217_m = jule::new_ptr<_244870483_MatchCase>(_244870483_MatchCase{._field_token=_74139_tokens[0LL], });;
	_74139_tokens=_74139_tokens.slice(1LL);
	if (((_74139_tokens.len() > 0LL) && (_74139_tokens[0LL].get()._field_id == static_cast<jule::U32>(10LLU)))) {
		_74217_m.get()._field_type_match=true;
		_74139_tokens=_74139_tokens.slice(1LL);
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _75217_expr_tokens = _227a471d2_get_block_expr(_74139_tokens);;
	if ((_75217_expr_tokens.len() > 0LL)) {
		_74217_m.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _75217_expr_tokens);
	} else if (_74217_m.get()._field_type_match) {
		_227a3be1e_push_err(&(*_self_), _74217_m.get()._field_token,jule::Str("expression missing", 18));
	};
	jule::I32 _75917_i = _75217_expr_tokens.len();;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _76017_block_toks = _227a54b6d_range(_75917_i,jule::Str("{", 1),jule::Str("}", 1),_74139_tokens);;
	if ((_76017_block_toks == nullptr)) {
		_227a3b3b3_stop(&(*_self_));
		_227a3be1e_push_err(&(*_self_), _74217_m.get()._field_token,jule::Str("body is not exist", 17));
		_227a3c23d_push_suggestion(&(*_self_), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((_75917_i < _74139_tokens.len())) {
		_227a3be1e_push_err(&(*_self_), _74139_tokens[_75917_i],jule::Str("invalid syntax", 14));
	};
	_74217_m.get()._field_end=_74139_tokens[(_75917_i - 1LL)];
	std::tie(_74217_m.get()._field_cases,_74217_m.get()._field_default) = _227a43c7d_build_cases(&(*_self_), _76017_block_toks,_74217_m.get()._field_type_match);
	return _74217_m;
}



inline jule::Ptr<_244868503_ScopeTree> _227a44399_build_scope_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _77437_tokens) {
	jule::Bool _77517_is_unsafe = false;;
	jule::Bool _77617_is_deferred = false;;
	jule::Ptr<_2431e4523_Token> _77717_token = _77437_tokens[0LL];;
	if ((_77717_token.get()._field_id == static_cast<jule::U32>(35LLU))) {
		_77517_is_unsafe=true;
		_77437_tokens=_77437_tokens.slice(1LL);
		if ((_77437_tokens.len() == 0LL)) {
			_227a3be1e_push_err(&(*_self_), _77717_token,jule::Str("invalid syntax", 14));
			return nullptr;
		};
		_77717_token=_77437_tokens[0LL];
		if ((_77717_token.get()._field_id == static_cast<jule::U32>(37LLU))) {
			_77617_is_deferred=true;
			_77437_tokens=_77437_tokens.slice(1LL);
			if ((_77437_tokens.len() == 0LL)) {
				_227a3be1e_push_err(&(*_self_), _77717_token,jule::Str("invalid syntax", 14));
				return nullptr;
			};
		};
	} else if ((_77717_token.get()._field_id == static_cast<jule::U32>(37LLU))) {
		_77617_is_deferred=true;
		_77437_tokens=_77437_tokens.slice(1LL);
		if ((_77437_tokens.len() == 0LL)) {
			_227a3be1e_push_err(&(*_self_), _77717_token,jule::Str("invalid syntax", 14));
			return nullptr;
		};
	};
	jule::I32 _80317_i = 0LL;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _80417_scope_tokens = _227a54b6d_range(_80317_i,jule::Str("{", 1),jule::Str("}", 1),_77437_tokens);;
	if ((_80417_scope_tokens == nullptr)) {
		_227a3be1e_push_err(&(*_self_), _77717_token,jule::Str("invalid syntax", 14));
		return nullptr;
	} else if ((_80317_i < _77437_tokens.len())) {
		_227a3be1e_push_err(&(*_self_), _77437_tokens[_80317_i],jule::Str("invalid syntax", 14));
	};
	jule::Ptr<_244868503_ScopeTree> _81117_scope = _227a3cace_build_scope(&(*_self_), _80417_scope_tokens,_77437_tokens[(_80317_i - 1LL)]);;
	_81117_scope.get()._field_unsafety=_77517_is_unsafe;
	_81117_scope.get()._field_deferred=_77617_is_deferred;
	return _81117_scope;
}



inline jule::Ptr<_244865b71_LabelSt> _227a446a7_build_label_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _81738_tokens) {
	jule::Ptr<_244865b71_LabelSt> _81817_lbl = jule::new_ptr<_244865b71_LabelSt>(_244865b71_LabelSt{._field_token=_81738_tokens[0LL], ._field_ident=_81738_tokens[0LL].get()._field_kind});;
	if ((_81738_tokens.len() > 2LL)) {
		_81738_tokens=_81738_tokens.slice(2LL);
		_227a3c4b3_insert_as_next(&(*_self_), _81738_tokens);
	};
	return _81817_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _227a449b5_build_id_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _83235_tokens) {
	jule::Bool _83265_ok = jule::Bool();
	if ((_83235_tokens.len() == 1LL)) {
		return std::make_tuple(jule::Any(),_83265_ok);
	};
	jule::Ptr<_2431e4523_Token> _83717_token = _83235_tokens[1LL];;
	{
		auto &_match_expr{ _83717_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(11LLU)) {
			_case_begin_22a1b6970:;
			{
				_83265_ok = true;
				return std::make_tuple(static_cast<jule::Any>(_227a446a7_build_label_st(&(*_self_), _83235_tokens)),_83265_ok);
			}
		}
		_match_end_22a1b7630:;
	};
	return std::make_tuple(jule::Any(),_83265_ok);
}



inline jule::Ptr<_227a53441_AssignInfo> _227a44cc3_build_assign_info(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _84641_tokens) {
	jule::Ptr<_227a53441_AssignInfo> _84717_info = jule::new_ptr<_227a53441_AssignInfo>(_227a53441_AssignInfo{._field_ok=true});;
	jule::I32 _85017_brace_n = 0LL;;
	{
		auto &expr = _84641_tokens;
		auto it = expr.begin();
		_iter_begin_22a1b9478:;
		if (it != expr.end()) {
			jule::I32 _85114_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _85121_token = *it;
			{
				if ((_85121_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _85121_token.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a1ba479:;
							{
								(_85017_brace_n)++;
							}
						}
						else {
							_case_begin_22a1ba754:;
							{
								(_85017_brace_n)--;
							}
						}
						_match_end_22a1ba545:;
					};
				};
				{
					
					if ((_85017_brace_n > 0LL)) {
						_case_begin_22a1bae3b:;
						{
							goto _iter_next_22a1b9478;
						}
					}
					else if ((_85121_token.get()._field_id != static_cast<jule::U32>(7LLU))) {
						_case_begin_22a1baea2:;
						{
							goto _iter_next_22a1b9478;
						}
					}
					else if ((!(_2431e910a_is_assign_op(_85121_token.get()._field_kind)))) {
						_case_begin_22a1bb029:;
						{
							goto _iter_next_22a1b9478;
						}
					}
					_match_end_22a1bac1b:;
				};
				_84717_info.get()._field_l=_84641_tokens.slice(0LL,_85114_i);
				if ((_84717_info.get()._field_l.len() == 0LL)) {
					_84717_info.get()._field_ok=false;
				};
				_84717_info.get()._field_setter=_85121_token;
				if (((_85114_i + 1LL) >= _84641_tokens.len())) {
					_84717_info.get()._field_r=nullptr;
					_84717_info.get()._field_ok=_2431e8d63_is_postfix_op(_84717_info.get()._field_setter.get()._field_kind);
					goto _iter_end_22a1b9478;
				};
				_84717_info.get()._field_r=_84641_tokens.slice((_85114_i + 1LL));
				if (_2431e8d63_is_postfix_op(_84717_info.get()._field_setter.get()._field_kind)) {
					if ((_84717_info.get()._field_r.len() > 0LL)) {
						_227a3be1e_push_err(&(*_self_), _84717_info.get()._field_r[0LL],jule::Str("invalid syntax", 14));
						_84717_info.get()._field_r=nullptr;
					};
				};
				goto _iter_end_22a1b9478;
			}
			_iter_next_22a1b9478:;
			++it;
			_85114_i++;
			goto _iter_begin_22a1b9478;
		}
		_iter_end_22a1b9478:;
	};
	return _84717_info;
}



inline jule::Ptr<_24486691e_AssignLeft> _227a450d1_build_assign_l(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _89438_tokens) {
	jule::Ptr<_24486691e_AssignLeft> _89517_l = jule::new_ptr<_24486691e_AssignLeft>(_24486691e_AssignLeft{._field_token=_89438_tokens[0LL], });;
	if ((_89438_tokens[0LL].get()._field_id == static_cast<jule::U32>(2LLU))) {
		_89517_l.get()._field_ident=_89517_l.get()._field_token.get()._field_kind;
	};
	_89517_l.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _89438_tokens);
	return _89517_l;
}



inline jule::Slice<jule::Ptr<_24486691e_AssignLeft>> _227a453de_build_assign_ls(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>& _90739_parts) {
	jule::Slice<jule::Ptr<_24486691e_AssignLeft>> _90817_lefts = nullptr;;
	{
		auto &expr = _90739_parts;
		auto it = expr.begin();
		_iter_begin_22a1c2b68:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _90921_part = *it;
			{
				jule::Ptr<_24486691e_AssignLeft> _91021_l = _227a450d1_build_assign_l(&(*_self_), _90921_part);;
				_90817_lefts = jule::alloc_for_append(_90817_lefts,1);_90817_lefts.__push(_91021_l);;
			}
			_iter_next_22a1c2b68:;
			++it;
			goto _iter_begin_22a1c2b68;
		}
		_iter_end_22a1c2b68:;
	};
	return _90817_lefts;
}



inline std::tuple<jule::Ptr<_244866e5d_AssignSt>,jule::Bool> _227a456ec_build_plain_assign(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _91742_tokens) {
	jule::Ptr<_227a53441_AssignInfo> _91817_info = _227a44cc3_build_assign_info(&(*_self_), _91742_tokens);;
	if ((!(_91817_info.get()._field_ok))) {
		return std::make_tuple(nullptr,false);
	};
	jule::Ptr<_244866e5d_AssignSt> _92317_assign = jule::new_ptr<_244866e5d_AssignSt>(_244866e5d_AssignSt{._field_setter=_91817_info.get()._field_setter, });;
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _92718_parts;;
	jule::Slice<_242dbab89_Log> _92725_errs;;
	std::tie(_92718_parts,_92725_errs) = _227a55762_parts(_91817_info.get()._field_l,static_cast<jule::U32>(8LLU),true);
	if ((_92725_errs.len() > 0LL)) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_92725_errs);
		return std::make_tuple(nullptr,false);
	};
	_92317_assign.get()._field_left=_227a453de_build_assign_ls(&(*_self_), _92718_parts);
	if ((_91817_info.get()._field_r != nullptr)) {
		_92317_assign.get()._field_right=_227a57a50_build_expr((*_self_)._field_p, _91817_info.get()._field_r);
	};
	return std::make_tuple(_92317_assign,true);
}



inline std::tuple<jule::Ptr<_244866e5d_AssignSt>,jule::Bool> _227a45a0a_build_decl_assign(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _94140_tokens) {
	if ((_94140_tokens.len() < 1LL)) {
		return std::make_tuple(nullptr,false);
	};
	_94140_tokens=_94140_tokens.slice(1LL);
	jule::Ptr<_2431e4523_Token> _94717_token = _94140_tokens[0LL];;
	if (((_94717_token.get()._field_id != static_cast<jule::U32>(3LLU)) || (_94717_token.get()._field_kind != jule::Str("(", 1)))) {
		return std::make_tuple(nullptr,false);
	};
	jule::Ptr<_244866e5d_AssignSt> _95217_assign = jule::new_ptr<_244866e5d_AssignSt>(_244866e5d_AssignSt{._field_declarative=true, });;
	jule::I32 _95617_i = 0LL;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _95717_rang = _227a54b6d_range(_95617_i,jule::Str("(", 1),jule::Str(")", 1),_94140_tokens);;
	if ((_95717_rang == nullptr)) {
		_227a3be1e_push_err(&(*_self_), _94717_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(nullptr,false);
	} else if (((_95617_i + 1LL) < _94140_tokens.len())) {
		_95217_assign.get()._field_setter=_94140_tokens[_95617_i];
		(_95617_i)++;
		jule::Slice<jule::Ptr<_2431e4523_Token>> _96421_expr_tokens = _94140_tokens.slice(_95617_i);;
		_95217_assign.get()._field_right=_227a57a50_build_expr((*_self_)._field_p, _96421_expr_tokens);
	};
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _96918_parts;;
	jule::Slice<_242dbab89_Log> _96925_errs;;
	std::tie(_96918_parts,_96925_errs) = _227a55762_parts(_95717_rang,static_cast<jule::U32>(8LLU),true);
	if ((_96925_errs.len() > 0LL)) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_96925_errs);
		return std::make_tuple(nullptr,false);
	};
	{
		auto &expr = _96918_parts;
		auto it = expr.begin();
		_iter_begin_22a1cda31:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _97521_part = *it;
			{
				jule::Bool _97621_is_mut = false;;
				jule::Bool _97721_is_ref = false;;
				_94717_token=_97521_part[0LL];
				if ((_94717_token.get()._field_id == static_cast<jule::U32>(36LLU))) {
					_97621_is_mut=true;
					_97521_part=_97521_part.slice(1LL);
					if ((_97521_part.len() == 0LL)) {
						_227a3be1e_push_err(&(*_self_), _94717_token,jule::Str("invalid syntax", 14));
						goto _iter_next_22a1cda31;
					};
				};
				if (((_97521_part[0LL].get()._field_id == static_cast<jule::U32>(7LLU)) && (_97521_part[0LL].get()._field_kind == jule::Str("&", 1)))) {
					_97721_is_ref=true;
					_97521_part=_97521_part.slice(1LL);
					if ((_97521_part.len() == 0LL)) {
						_227a3be1e_push_err(&(*_self_), _94717_token,jule::Str("invalid syntax", 14));
						goto _iter_next_22a1cda31;
					};
				};
				if ((((_97521_part[0LL].get()._field_id != static_cast<jule::U32>(2LLU)) && (_97521_part[0LL].get()._field_id != static_cast<jule::U32>(3LLU))) && (_97521_part[0LL].get()._field_kind != jule::Str("(", 1)))) {
					_227a3be1e_push_err(&(*_self_), _94717_token,jule::Str("invalid syntax", 14));
					goto _iter_next_22a1cda31;
				};
				jule::Ptr<_24486691e_AssignLeft> _100521_l = _227a450d1_build_assign_l(&(*_self_), _97521_part);;
				_100521_l.get()._field_mutable=_97621_is_mut;
				_100521_l.get()._field_reference=_97721_is_ref;
				_95217_assign.get()._field_left = jule::alloc_for_append(_95217_assign.get()._field_left,1);_95217_assign.get()._field_left.__push(_100521_l);;
			}
			_iter_next_22a1cda31:;
			++it;
			goto _iter_begin_22a1cda31;
		}
		_iter_end_22a1cda31:;
	};
	return std::make_tuple(_95217_assign,true);
}



inline std::tuple<jule::Ptr<_244866e5d_AssignSt>,jule::Bool> _227a45d18_build_assign_st(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _101439_tokens) {
	jule::Ptr<_244866e5d_AssignSt> _101459_st = jule::Ptr<_244866e5d_AssignSt>();
	jule::Bool _101474_ok = jule::Bool();
	if ((!(_227a537d7_check_assign_tokens(_101439_tokens)))) {
		_101459_st = nullptr;
		_101474_ok = false;
		return std::make_tuple(_101459_st,_101474_ok);
	};
	{
		auto &_match_expr{ _101439_tokens[0LL].get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(34LLU)) {
			_case_begin_22a1d781a:;
			{
				std::tie(_101459_st,_101474_ok) = _227a45a0a_build_decl_assign(&(*_self_), _101439_tokens);
			}
		}
		else {
			_case_begin_22a1d740d:;
			{
				std::tie(_101459_st,_101474_ok) = _227a456ec_build_plain_assign(&(*_self_), _101439_tokens);
			}
		}
		_match_end_22a1d73a8:;
	};
	return std::make_tuple(_101459_st,_101474_ok);
}



inline jule::Ptr<_24485d097_UseExpr> _227a46126_build_use_expr(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _102938_tokens) {
	if ((_102938_tokens.len() == 1LL)) {
		_227a3be1e_push_err(&(*_self_), _102938_tokens[0LL],jule::Str("expression missing", 18));
		return nullptr;
	};
	jule::Ptr<_24485d097_UseExpr> _103517_ue = jule::new_ptr<_24485d097_UseExpr>(_24485d097_UseExpr{._field_token=_102938_tokens[0LL], });;
	_102938_tokens=_102938_tokens.slice(1LL);
	_103517_ue.get()._field_expr=_227a57a50_build_expr((*_self_)._field_p, _102938_tokens);
	return _103517_ue;
}



inline jule::Any _227a46434_build_st(_227a3ac31_ScopeParser* _self_, jule::Ptr<_227a3a406_stmt>& _104432_st) {
	jule::Ptr<_2431e4523_Token> _104517_token = _104432_st.get()._field_tokens[0LL];;
	if ((_104517_token.get()._field_id == static_cast<jule::U32>(2LLU))) {
		jule::Any _104722_s;;
		jule::Bool _104725_ok;;
		std::tie(_104722_s,_104725_ok) = _227a449b5_build_id_st(&(*_self_), _104432_st.get()._field_tokens);
		if (_104725_ok) {
			return _104722_s;
		};
	};
	jule::Ptr<_244866e5d_AssignSt> _105318_s;;
	jule::Bool _105321_ok;;
	std::tie(_105318_s,_105321_ok) = _227a45d18_build_assign_st(&(*_self_), _104432_st.get()._field_tokens);
	if (_105321_ok) {
		return static_cast<jule::Any>(_105318_s);
	};
	{
		auto &_match_expr{ _104517_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(19LLU)) {
			_case_begin_22a1dc952:;
			{
				return static_cast<jule::Any>(_227a46126_build_use_expr(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(38LLU) || _match_expr == static_cast<jule::U32>(9LLU) || _match_expr == static_cast<jule::U32>(34LLU) || _match_expr == static_cast<jule::U32>(36LLU)) {
			_case_begin_22a1dc721:;
			{
				return static_cast<jule::Any>(_227a3cddc_build_var_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(4LLU)) {
			_case_begin_22a1dcd1a:;
			{
				return static_cast<jule::Any>(_227a3d1ea_build_ret_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(12LLU)) {
			_case_begin_22a1dcd81:;
			{
				return static_cast<jule::Any>(_227a40b6a_build_iter_st(&(*_self_), _104432_st));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(13LLU)) {
			_case_begin_22a1dcde7:;
			{
				return static_cast<jule::Any>(_227a40e78_build_break_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(14LLU)) {
			_case_begin_22a1dce5d:;
			{
				return static_cast<jule::Any>(_227a41286_build_cont_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(16LLU)) {
			_case_begin_22a1dcec4:;
			{
				return static_cast<jule::Any>(_227a41bb0_build_if_else_chain(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(26LLU)) {
			_case_begin_22a1dd03a:;
			{
				return static_cast<jule::Any>(_227a41ebd_build_co_call_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(22LLU)) {
			_case_begin_22a1dd0a1:;
			{
				return static_cast<jule::Any>(_227a422cb_build_goto_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(32LLU)) {
			_case_begin_22a1dd117:;
			{
				return static_cast<jule::Any>(_227a425d9_build_fall_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(10LLU)) {
			_case_begin_22a1dd17d:;
			{
				return static_cast<jule::Any>(_227a428e7_build_type_alias_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(27LLU)) {
			_case_begin_22a1dd1e4:;
			{
				return static_cast<jule::Any>(_227a4408b_build_match_case(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(35LLU) || _match_expr == static_cast<jule::U32>(37LLU)) {
			_case_begin_22a1dd25a:;
			{
				return static_cast<jule::Any>(_227a44399_build_scope_st(&(*_self_), _104432_st.get()._field_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a1dd2c1:;
			{
				if ((_104517_token.get()._field_kind == jule::Str("{", 1))) {
					return static_cast<jule::Any>(_227a44399_build_scope_st(&(*_self_), _104432_st.get()._field_tokens));
				};
			}
		}
		_match_end_22a1dcb3e:;
	};
	jule::Ptr<_24485c706_Expr> _109417_expr = _227a57a50_build_expr((*_self_)._field_p, _104432_st.get()._field_tokens);;
	if ((_109417_expr != nullptr)) {
		return static_cast<jule::Any>(_109417_expr);
	};
	_227a3be1e_push_err(&(*_self_), _104517_token,jule::Str("invalid syntax", 14));
	return nullptr;
}



inline void _227a46753_build(_227a3ac31_ScopeParser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _110229_tokens, jule::Ptr<_244868503_ScopeTree>& _110252_s) {
	if ((_110252_s == nullptr)) {
		return;;
	};
	(*_self_)._field_stmts=_227a3a79c_split_stmts(_110229_tokens);
	(*_self_)._field_pos=-1LL;
	(*_self_)._field_s=_110252_s;
	while (((!(_227a3bb00_is_last_st(&(*_self_)))) && (!(_227a3b88b_finished(&(*_self_)))))) {
		{
			jule::Ptr<_227a3a406_stmt> _111121_st = _227a3c727_next(&(*_self_));;
			jule::Any _111221_data = _227a46434_build_st(&(*_self_), _111121_st);;
			if ((_111221_data != nullptr)) {
				(*_self_)._field_s.get()._field_stmts = jule::alloc_for_append((*_self_)._field_s.get()._field_stmts,1);(*_self_)._field_s.get()._field_stmts.__push(_244867de8_Stmt{._field_token=_111121_st.get()._field_tokens[0LL], ._field_data=_111221_data});;
			};
			if (_227a3b627_stopped(&(*_self_))) {
				goto _iter_end_22a1e62eb;
			};
		}
	_iter_next_22a1e62eb:;
	}
	_iter_end_22a1e62eb:;;
}







std::ostream &operator<<(std::ostream &_Stream, _227a3ac31_ScopeParser _Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline void _227a488cb_push_err(_227a480c3_ExprBuilder* _self_, jule::Ptr<_2431e4523_Token> _19827_token, jule::Str _19842_fmt, jule::Slice<jule::Any> _19855_args) {
	_227a57423_push_err((*_self_)._field_p.ptr(), _19827_token,_19842_fmt,jule::Any(_19855_args));
}



inline void _227a48bea_push_suggestion(_227a480c3_ExprBuilder* _self_, jule::Str _20334_fmt, jule::Slice<jule::Any> _20347_args) {
	_227a57742_push_suggestion((*_self_)._field_p.ptr(), _20334_fmt,jule::Any(_20347_args));
}



inline jule::Ptr<_24485d383_TupleExpr> _227a49008_build_tuple(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>& _20735_parts) {
	jule::Ptr<_24485d383_TupleExpr> _20817_tuple = jule::new_ptr<_24485d383_TupleExpr>(_24485d383_TupleExpr{._field_expr=jule::Slice<jule::Ptr<_24485c706_Expr>>::alloc(0LL,_20735_parts.len())});;
	{
		auto &expr = _20735_parts;
		auto it = expr.begin();
		_iter_begin_22a211dd8:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _21121_part = *it;
			{
				_20817_tuple.get()._field_expr = jule::alloc_for_append(_20817_tuple.get()._field_expr,1);_20817_tuple.get()._field_expr.__push(_227a52a5b_build_from_tokens(&(*_self_), _21121_part));;
			}
			_iter_next_22a211dd8:;
			++it;
			goto _iter_begin_22a211dd8;
		}
		_iter_end_22a211dd8:;
	};
	return _20817_tuple;
}



inline jule::Ptr<_24485d73a_LitExpr> _227a49316_build_lit(_227a480c3_ExprBuilder* _self_, jule::Ptr<_2431e4523_Token> _21728_token) {
	return jule::new_ptr<_24485d73a_LitExpr>(_24485d73a_LitExpr{._field_token=_21728_token, ._field_value=_21728_token.get()._field_kind});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a49624_build_primitive_type(_227a480c3_ExprBuilder* _self_, jule::Ptr<_2431e4523_Token>& _22440_token) {
	return _227a67543_build_prim_type(_22440_token);
}



inline jule::Any _227a49932_build_single(_227a480c3_ExprBuilder* _self_, jule::Ptr<_2431e4523_Token> _22835_token) {
	{
		auto &_match_expr{ _22835_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(6LLU)) {
			_case_begin_22a213b43:;
			{
				return static_cast<jule::Any>(_227a49316_build_lit(&(*_self_), _22835_token));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_22a213ba9:;
			{
				if ((_22835_token.get()._field_kind == jule::Str("...", 3))) {
					return static_cast<jule::Any>(jule::new_ptr<_244860330_VariadicExpr>(_244860330_VariadicExpr{._field_token=_22835_token, }));
				};
			}
		}
		else if (_match_expr == static_cast<jule::U32>(2LLU) || _match_expr == static_cast<jule::U32>(28LLU) || _match_expr == static_cast<jule::U32>(40LLU)) {
			_case_begin_22a213c20:;
			{
				return static_cast<jule::Any>(_227a47aea_build_ident_expr(_22835_token));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(1LLU)) {
			_case_begin_22a213c86:;
			{
				return static_cast<jule::Any>(_227a49624_build_primitive_type(&(*_self_), _22835_token));
			}
		}
		_match_end_22a212aba:;
	};
	_227a488cb_push_err(&(*_self_), _22835_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return nullptr;
}



inline jule::Ptr<_24485e76e_IdentExpr> _227a49c40_build_cpp_linked_ident(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _24946_tokens) {
	if ((_24946_tokens[0LL].get()._field_id != static_cast<jule::U32>(31LLU))) {
		return nullptr;
	} else if ((_24946_tokens[1LL].get()._field_id != static_cast<jule::U32>(20LLU))) {
		_227a488cb_push_err(&(*_self_), _24946_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2431e4523_Token> _25717_token = _24946_tokens[2LL];;
	if ((_25717_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a488cb_push_err(&(*_self_), _24946_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_24485e76e_IdentExpr> _26317_expr = _227a47aea_build_ident_expr(_25717_token);;
	_26317_expr.get()._field_cpp_linked=true;
	return _26317_expr;
}



inline jule::Ptr<_24485ee78_UnaryExpr> _227a4a04d_build_unary(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _26834_tokens) {
	jule::Ptr<_2431e4523_Token> _26917_op = _26834_tokens[0LL];;
	if ((_26834_tokens.len() == 1LL)) {
		_227a488cb_push_err(&(*_self_), _26917_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((!(_2431e4c2c_is_unary_op(_26917_op.get()._field_kind)))) {
		_227a488cb_push_err(&(*_self_), _26917_op,jule::Str("invalid unary operator: @", 25),jule::Slice<jule::Any>::make({jule::Any(_26917_op.get()._field_kind)}));
		return nullptr;
	};
	_26834_tokens=_26834_tokens.slice(1LL);
	return jule::new_ptr<_24485ee78_UnaryExpr>(_24485ee78_UnaryExpr{._field_op=_26917_op, ._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _26834_tokens)});
}



inline jule::Ptr<_244861012_SubIdentExpr> _227a4a35b_build_obj_sub_ident(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _28942_tokens) {
	jule::I32 _29017_i = (_28942_tokens.len() - 1LL);;
	jule::Ptr<_2431e4523_Token> _29117_ident_token = _28942_tokens[_29017_i];;
	(_29017_i)--;
	_28942_tokens=_28942_tokens.slice(0LL,_29017_i);
	if ((_28942_tokens.len() == 0LL)) {
		_227a488cb_push_err(&(*_self_), _29117_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	return jule::new_ptr<_244861012_SubIdentExpr>(_244861012_SubIdentExpr{._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _28942_tokens), ._field_ident=_29117_ident_token});
}



inline jule::Ptr<_244860a8e_NsSelectionExpr> _227a4a669_build_ns_sub_ident(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _30442_tokens) {
	jule::Ptr<_244860a8e_NsSelectionExpr> _30517_ns = jule::new_ptr<_244860a8e_NsSelectionExpr>(_244860a8e_NsSelectionExpr{});;
	{
		auto &expr = _30442_tokens;
		auto it = expr.begin();
		_iter_begin_22a21eba4:;
		if (it != expr.end()) {
			jule::I32 _30614_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _30621_token = *it;
			{
				if (((_30614_i & 1LL) == 0LL)) {
					if ((_30621_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
						_227a488cb_push_err(&(*_self_), _30621_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						_227a48bea_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					};
					_30517_ns.get()._field_ns = jule::alloc_for_append(_30517_ns.get()._field_ns,1);_30517_ns.get()._field_ns.__push(_30621_token);;
				} else if ((_30621_token.get()._field_id != static_cast<jule::U32>(23LLU))) {
					_227a488cb_push_err(&(*_self_), _30621_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					_227a48bea_push_suggestion(&(*_self_), jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>());
				};
			}
			_iter_next_22a21eba4:;
			++it;
			_30614_i++;
			goto _iter_begin_22a21eba4;
		}
		_iter_end_22a21eba4:;
	};
	_30517_ns.get()._field_ident=_30517_ns.get()._field_ns[(_30517_ns.get()._field_ns.len() - 1LL)];
	_30517_ns.get()._field_ns=_30517_ns.get()._field_ns.slice(0LL,(_30517_ns.get()._field_ns.len() - 1LL));
	return _30517_ns;
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a4a977_build_type(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _32334_tokens) {
	jule::I32 _32417_i = 0LL;;
	jule::Ptr<_2448581d5_TypeDecl> _32518_t;;
	jule::Bool _32521_ok;;
	std::tie(_32518_t,_32521_ok) = _227a58d3c_build_type((*_self_)._field_p, _32334_tokens,(&(_32417_i)),false);
	if ((!(_32521_ok))) {
		_227a488cb_push_err(&(*_self_), _32334_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_32417_i < _32334_tokens.len())) {
		_227a488cb_push_err(&(*_self_), _32334_tokens[_32417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	return _32518_t;
}



inline jule::Any _227a4ac85_build_sub_ident(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _33739_tokens) {
	jule::I32 _33813_i = (_33739_tokens.len() - 2LL);;
	jule::Ptr<_2431e4523_Token> _33913_token = _33739_tokens[_33813_i];;
	{
		auto &_match_expr{ _33913_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(20LLU)) {
			_case_begin_22a227816:;
			{
				return static_cast<jule::Any>(_227a4a35b_build_obj_sub_ident(&(*_self_), _33739_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(23LLU)) {
			_case_begin_22a227d44:;
			{
				return static_cast<jule::Any>(_227a4a669_build_ns_sub_ident(&(*_self_), _33739_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a227daa:;
			{
				if ((_33913_token.get()._field_kind == jule::Str("]", 1))) {
					return static_cast<jule::Any>(_227a4a977_build_type(&(*_self_), _33739_tokens));
				};
			}
		}
		_match_end_22a227b9b:;
	};
	_227a488cb_push_err(&(*_self_), _33913_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return nullptr;
}



inline jule::Ptr<_244860330_VariadicExpr> _227a4b093_build_variadic(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _35537_tokens) {
	jule::Ptr<_2431e4523_Token> _35617_token = _35537_tokens[(_35537_tokens.len() - 1LL)];;
	_35537_tokens=_35537_tokens.slice(0LL,(_35537_tokens.len() - 1LL));
	return jule::new_ptr<_244860330_VariadicExpr>(_244860330_VariadicExpr{._field_token=_35617_token, ._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _35537_tokens)});
}



inline jule::Any _227a4b3a1_build_op_right(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _36438_tokens) {
	jule::Ptr<_2431e4523_Token> _36517_token = _36438_tokens[(_36438_tokens.len() - 1LL)];;
	{
		auto &_match_expr{ _36517_token.get()._field_kind };
		
		if (_match_expr == jule::Str("!", 1)) {
			_case_begin_22a22c035:;
			{
				_36438_tokens=_36438_tokens.slice(0LL,(_36438_tokens.len() - 1LL));
				jule::Any _36921_d = _227a52440_build(&(*_self_), _36438_tokens);;
				if ((_36921_d == nullptr)) {
					return nullptr;
				};
				{
					auto &_match_expr{ _36921_d };
					
					if (_match_expr.type_is<jule::Ptr<_2448619c4_FnCallExpr>>()) {
						_case_begin_22a22d487:;
						{
							_36921_d.operator jule::Ptr<_2448619c4_FnCallExpr>().get()._field_exception=jule::new_ptr<_244868503_ScopeTree>(_244868503_ScopeTree{._field_deferred=true, });
							return _36921_d;
						}
					}
					_match_end_22a22d3dd:;
				};
			}
		}
		_match_end_22a22be8b:;
	};
	_227a488cb_push_err(&(*_self_), _36517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return nullptr;
}



inline jule::Ptr<_24485c9e2_RangeExpr> _227a4b6d1_build_between_parentheses(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _38548_tokens) {
	if ((_38548_tokens.len() == 2LL)) {
		_227a488cb_push_err(&(*_self_), _38548_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>());
		return nullptr;
	};
	_38548_tokens=_38548_tokens.slice(1LL,(_38548_tokens.len() - 1LL));
	return jule::new_ptr<_24485c9e2_RangeExpr>(_24485c9e2_RangeExpr{._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _38548_tokens)});
}



inline jule::Ptr<_2448606d7_CastExpr> _227a4ba00_try_build_cast(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _39738_tokens) {
	jule::I32 _39817_range_n = 0LL;;
	{
		auto &expr = _39738_tokens;
		auto it = expr.begin();
		_iter_begin_22a231aea:;
		if (it != expr.end()) {
			jule::I32 _39913_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _39916_token = *it;
			{
				if ((_39916_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _39916_token.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a232a0d:;
							{
								(_39817_range_n)++;
								goto _iter_next_22a231aea;
							}
						}
						else {
							_case_begin_22a232cd8:;
							{
								(_39817_range_n)--;
							}
						}
						_match_end_22a232ac9:;
					};
				};
				if ((_39817_range_n > 0LL)) {
					goto _iter_next_22a231aea;
				} else if (((_39913_i + 1LL) == _39738_tokens.len())) {
					return nullptr;
				};
				jule::Slice<jule::Ptr<_2431e4523_Token>> _41821_type_tokens = _39738_tokens.slice(0LL,(_39913_i + 1LL));;
				jule::Slice<jule::Ptr<_2431e4523_Token>> _41921_expr_tokens = _39738_tokens.slice((_39913_i + 1LL));;
				if ((_41921_expr_tokens.len() == 0LL)) {
					return nullptr;
				};
				jule::Ptr<_2431e4523_Token> _42617_tok = _41921_expr_tokens[0LL];;
				if (((_42617_tok.get()._field_id != static_cast<jule::U32>(3LLU)) || (_42617_tok.get()._field_kind != jule::Str("(", 1)))) {
					return nullptr;
				};
				jule::Ptr<_2448606d7_CastExpr> _43121_cast = jule::new_ptr<_2448606d7_CastExpr>(_2448606d7_CastExpr{});;
				if ((_41921_expr_tokens.len() == 2LL)) {
					_227a488cb_push_err(&(*_self_), _41921_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
					_227a48bea_push_suggestion(&(*_self_), jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>());
				};
				if ((_41821_type_tokens.len() == 2LL)) {
					_227a488cb_push_err(&(*_self_), _41821_type_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
					_227a48bea_push_suggestion(&(*_self_), jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>());
				} else {
					_41821_type_tokens=_41821_type_tokens.slice(1LL,(_41821_type_tokens.len() - 1LL));
					jule::I32 _44525_type_index = 0LL;;
					jule::Ptr<_2448581d5_TypeDecl> _44626_t;;
					jule::Bool _44629_ok;;
					std::tie(_44626_t,_44629_ok) = _227a58d3c_build_type((*_self_)._field_p, _41821_type_tokens,(&(_44525_type_index)),true);
					if ((_44629_ok && (_44525_type_index < _41821_type_tokens.len()))) {
						_227a488cb_push_err(&(*_self_), _41821_type_tokens[_44525_type_index],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					} else if ((!(_44629_ok))) {
						return _43121_cast;
					};
					_43121_cast.get()._field_kind=_44626_t;
					if ((_41921_expr_tokens.len() > 2LL)) {
						jule::I32 _45629_j = 0LL;;
						_227a54b6d_range(_45629_j,jule::Str("(", 1),jule::Str(")", 1),_41921_expr_tokens);
						if ((_45629_j < _41921_expr_tokens.len())) {
							return nullptr;
						};
						_41921_expr_tokens=_41921_expr_tokens.slice(0LL,_45629_j);
						_43121_cast.get()._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _41921_expr_tokens);
					};
				};
				return _43121_cast;
			}
			_iter_next_22a231aea:;
			++it;
			_39913_i++;
			goto _iter_begin_22a231aea;
		}
		_iter_end_22a231aea:;
	};
	return nullptr;
}



inline void _227a4bdb8_push_arg(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_24485c706_Expr>>& _47132_args, jule::Slice<jule::Ptr<_2431e4523_Token>> _47151_tokens, jule::Ptr<_2431e4523_Token> _47169_err_token) {
	if ((_47151_tokens.len() == 0LL)) {
		_227a488cb_push_err(&(*_self_), _47169_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;;
	};
	_47132_args = jule::alloc_for_append(_47132_args,1);_47132_args.__push(_227a52a5b_build_from_tokens(&(*_self_), _47151_tokens));;
}



inline jule::Slice<jule::Ptr<_24485c706_Expr>> _227a4c1c6_build_args(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _48033_tokens) {
	if ((_48033_tokens.len() < 2LL)) {
		return nullptr;
	};
	jule::Slice<jule::Ptr<_24485c706_Expr>> _48617_args = nullptr;;
	jule::I32 _48717_last = 0LL;;
	jule::I32 _48817_range_n = 0LL;;
	_48033_tokens=_48033_tokens.slice(1LL,(_48033_tokens.len() - 1LL));
	{
		auto &expr = _48033_tokens;
		auto it = expr.begin();
		_iter_begin_22a241159:;
		if (it != expr.end()) {
			jule::I32 _49013_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _49016_token = *it;
			{
				if ((_49016_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _49016_token.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a241e4b:;
							{
								(_48817_range_n)++;
							}
						}
						else {
							_case_begin_22a242226:;
							{
								(_48817_range_n)--;
							}
						}
						_match_end_22a242017:;
					};
				};
				if (((_48817_range_n > 0LL) || (_49016_token.get()._field_id != static_cast<jule::U32>(8LLU)))) {
					goto _iter_next_22a241159;
				};
				_227a4bdb8_push_arg(&(*_self_), _48617_args,_48033_tokens.slice(_48717_last,_49013_i),_49016_token);
				_48717_last=static_cast<jule::I32>((_49013_i + 1LL));
			}
			_iter_next_22a241159:;
			++it;
			_49013_i++;
			goto _iter_begin_22a241159;
		}
		_iter_end_22a241159:;
	};
	if ((_48717_last < _48033_tokens.len())) {
		if ((_48717_last == 0LL)) {
			if ((_48033_tokens.len() > 0LL)) {
				_227a4bdb8_push_arg(&(*_self_), _48617_args,_48033_tokens.slice(_48717_last),_48033_tokens[_48717_last]);
			};
		} else {
			_227a4bdb8_push_arg(&(*_self_), _48617_args,_48033_tokens.slice(_48717_last),_48033_tokens[(_48717_last - 1LL)]);
		};
	};
	return _48617_args;
}



inline jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _227a4c4d4_build_call_generics(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _52242_tokens) {
	if ((_52242_tokens.len() == 0LL)) {
		return nullptr;
	};
	_52242_tokens=_52242_tokens.slice(1LL,(_52242_tokens.len() - 1LL));
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _52818_parts;;
	jule::Slice<_242dbab89_Log> _52825_errs;;
	std::tie(_52818_parts,_52825_errs) = _227a55762_parts(_52242_tokens,static_cast<jule::U32>(8LLU),true);
	jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _52917_generics = jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>::alloc(0LL,_52818_parts.len());;
	(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_52825_errs);
	{
		auto &expr = _52818_parts;
		auto it = expr.begin();
		_iter_begin_22a24758e:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _53121_part = *it;
			{
				if ((_53121_part.len() == 0LL)) {
					goto _iter_next_22a24758e;
				};
				jule::I32 _53521_j = 0LL;;
				jule::Ptr<_2448581d5_TypeDecl> _53622_generic;;
				std::tie(_53622_generic,std::ignore) = _227a58d3c_build_type((*_self_)._field_p, _53121_part,(&(_53521_j)),true);
				if ((_53521_j < _53121_part.len())) {
					_227a488cb_push_err(&(*_self_), _53121_part[_53521_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				};
				_52917_generics = jule::alloc_for_append(_52917_generics,1);_52917_generics.__push(_53622_generic);;
			}
			_iter_next_22a24758e:;
			++it;
			goto _iter_begin_22a24758e;
		}
		_iter_end_22a24758e:;
	};
	return _52917_generics;
}



inline jule::Ptr<_2448619c4_FnCallExpr> _227a4c935_build_fn_call(_227a480c3_ExprBuilder* _self_, jule::Ptr<_2431e4523_Token>& _54637_token, jule::Slice<jule::Ptr<_2431e4523_Token>>& _54657_expr, jule::Slice<jule::Ptr<_2431e4523_Token>>& _54678_args) {
	return jule::new_ptr<_2448619c4_FnCallExpr>(_2448619c4_FnCallExpr{._field_token=_54637_token, ._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _54657_expr), ._field_args=_227a4c1c6_build_args(&(*_self_), _54678_args), });
}



inline jule::Any _227a4cc65_build_parentheses_range(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _55447_tokens) {
	jule::Ptr<_2431e4523_Token> _55517_token = _55447_tokens[0LL];;
	{
		auto &_match_expr{ _55517_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a24b95b:;
			{
				{
					auto &_match_expr{ _55517_token.get()._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_22a24c1ed:;
						{
							jule::Ptr<_2448606d7_CastExpr> _56025_expr = _227a4ba00_try_build_cast(&(*_self_), _55447_tokens);;
							if ((_56025_expr != nullptr)) {
								return static_cast<jule::Any>(_56025_expr);
							};
						}
					}
					_match_end_22a24c033:;
				};
			}
		}
		_match_end_22a24b8b2:;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _56618_expr_tokens;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _56635_args_tokens;;
	std::tie(_56618_expr_tokens,_56635_args_tokens) = _227a54e15_range_last(_55447_tokens);
	if ((_56618_expr_tokens.len() == 0LL)) {
		return static_cast<jule::Any>(_227a4b6d1_build_between_parentheses(&(*_self_), _56635_args_tokens));
	};
	return static_cast<jule::Any>(_227a4c935_build_fn_call(&(*_self_), _55517_token,_56618_expr_tokens,_56635_args_tokens));
}



inline jule::Ptr<_24485de44_UnsafeExpr> _227a4d084_build_unsafe_expr(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _57540_tokens) {
	jule::Ptr<_2431e4523_Token> _57617_token = _57540_tokens[0LL];;
	_57540_tokens=_57540_tokens.slice(1LL);
	jule::I32 _57817_i = 0LL;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _57917_range_tokens = _227a54b6d_range(_57817_i,jule::Str("{", 1),jule::Str("}", 1),_57540_tokens);;
	if ((_57917_range_tokens.len() == 0LL)) {
		_227a488cb_push_err(&(*_self_), _57540_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	return jule::new_ptr<_24485de44_UnsafeExpr>(_24485de44_UnsafeExpr{._field_token=_57617_token, ._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _57917_range_tokens)});
}



inline jule::Ptr<_244869ee9_FnDecl> _227a4d392_build_anon_fn(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _59037_tokens) {
	jule::Ptr<_244869ee9_FnDecl> _59117_f = _227a5ce40_build_fn((*_self_)._field_p, _59037_tokens,false,false);;
	if ((!(_24486a34b_is_anon(_59117_f.ptr())))) {
		_227a488cb_push_err(&(*_self_), _59117_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>());
	};
	return _59117_f;
}



inline jule::Any _227a4d6a0_build_unsafe(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _59936_tokens) {
	{
		auto &_match_expr{ _59936_tokens[1LL].get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(33LLU)) {
			_case_begin_22a2536bb:;
			{
				return static_cast<jule::Any>(_227a4d392_build_anon_fn(&(*_self_), _59936_tokens));
			}
		}
		else {
			_case_begin_22a253bb6:;
			{
				return static_cast<jule::Any>(_227a4d084_build_unsafe_expr(&(*_self_), _59936_tokens));
			}
		}
		_match_end_22a253b0b:;
	};
}



inline void _227a4da68_push_range_lit_part(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _60942_part, jule::Ptr<_2431e4523_Token> _6109_error_token, jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>& _61035_parts) {
	if ((_60942_part.len() == 0LL)) {
		_227a488cb_push_err(&(*_self_), _6109_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;;
	};
	_61035_parts = jule::alloc_for_append(_61035_parts,1);_61035_parts.__push(_60942_part);;
}



inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a4dd98_get_brace_range_lit_expr_parts(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _62053_tokens) {
	if ((_62053_tokens.len() < 2LL)) {
		return nullptr;
	};
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _62617_parts = nullptr;;
	jule::I32 _62817_last = 0LL;;
	jule::I32 _62917_range_n = 0LL;;
	_62053_tokens=_62053_tokens.slice(1LL,(_62053_tokens.len() - 1LL));
	{
		auto &expr = _62053_tokens;
		auto it = expr.begin();
		_iter_begin_22a25833b:;
		if (it != expr.end()) {
			jule::I32 _63113_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _63116_token = *it;
			{
				if ((_63116_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _63116_token.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a25912d:;
							{
								(_62917_range_n)++;
							}
						}
						else {
							_case_begin_22a259408:;
							{
								(_62917_range_n)--;
							}
						}
						_match_end_22a2591e9:;
					};
				};
				if (((_62917_range_n > 0LL) || (_63116_token.get()._field_id != static_cast<jule::U32>(8LLU)))) {
					goto _iter_next_22a25833b;
				};
				_227a4da68_push_range_lit_part(&(*_self_), _62053_tokens.slice(_62817_last,_63113_i),_63116_token,_62617_parts);
				_62817_last=static_cast<jule::I32>((_63113_i + 1LL));
			}
			_iter_next_22a25833b:;
			++it;
			_63113_i++;
			goto _iter_begin_22a25833b;
		}
		_iter_end_22a25833b:;
	};
	if ((_62817_last < _62053_tokens.len())) {
		if ((_62817_last == 0LL)) {
			if ((_62053_tokens.len() > 0LL)) {
				_227a4da68_push_range_lit_part(&(*_self_), _62053_tokens.slice(_62817_last),_62053_tokens[_62817_last],_62617_parts);
			};
		} else {
			_227a4da68_push_range_lit_part(&(*_self_), _62053_tokens.slice(_62817_last),_62053_tokens[(_62817_last - 1LL)],_62617_parts);
		};
	};
	return _62617_parts;
}



inline jule::Ptr<_244862453_FieldExprPair> _227a4e1b7_build_field_expr_pair(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _66244_tokens) {
	if (((_66244_tokens.len() - 2LL) == 0LL)) {
		_227a488cb_push_err(&(*_self_), _66244_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_244862453_FieldExprPair> _66717_pair = jule::new_ptr<_244862453_FieldExprPair>(_244862453_FieldExprPair{._field_field=_66244_tokens[0LL], });;
	_66244_tokens=_66244_tokens.slice(2LL);
	_66717_pair.get()._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _66244_tokens);
	return _66717_pair;
}



inline jule::Ptr<_24485c706_Expr> _227a4e4c5_build_struct_lit_expr(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _67545_tokens) {
	jule::Ptr<_2431e4523_Token> _67617_token = _67545_tokens[0LL];;
	if (((_67617_token.get()._field_id == static_cast<jule::U32>(2LLU)) && (_67545_tokens.len() > 1LL))) {
		_67617_token=_67545_tokens[1LL];
		if ((_67617_token.get()._field_id == static_cast<jule::U32>(11LLU))) {
			return jule::new_ptr<_24485c706_Expr>(_24485c706_Expr{._field_token=_67617_token, ._field_end=_67545_tokens[(_67545_tokens.len() - 1LL)], ._field_kind=static_cast<jule::Any>(_227a4e1b7_build_field_expr_pair(&(*_self_), _67545_tokens))});
		};
	};
	return _227a52a5b_build_from_tokens(&(*_self_), _67545_tokens);
}



inline jule::Slice<jule::Ptr<_24485c706_Expr>> _227a4e7d3_build_struct_lit_exprs(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _69046_tokens) {
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _69117_parts = _227a4dd98_get_brace_range_lit_expr_parts(&(*_self_), _69046_tokens);;
	if ((_69117_parts.len() == 0LL)) {
		return nullptr;
	};
	jule::Slice<jule::Ptr<_24485c706_Expr>> _69617_pairs = jule::Slice<jule::Ptr<_24485c706_Expr>>::alloc(0LL,_69117_parts.len());;
	{
		auto &expr = _69117_parts;
		auto it = expr.begin();
		_iter_begin_22a263b4e:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _69721_part = *it;
			{
				_69617_pairs = jule::alloc_for_append(_69617_pairs,1);_69617_pairs.__push(_227a4e4c5_build_struct_lit_expr(&(*_self_), _69721_part));;
			}
			_iter_next_22a263b4e:;
			++it;
			goto _iter_begin_22a263b4e;
		}
		_iter_end_22a263b4e:;
	};
	return _69617_pairs;
}



inline jule::Ptr<_244862ba1_StructLit> _227a4eb13_build_typed_struct_literal(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _70349_tokens) {
	jule::I32 _70417_i = 0LL;;
	jule::Ptr<_2448581d5_TypeDecl> _70518_t;;
	jule::Bool _70521_ok;;
	std::tie(_70518_t,_70521_ok) = _227a58d3c_build_type((*_self_)._field_p, _70349_tokens,(&(_70417_i)),true);
	if ((!(_70521_ok))) {
		return nullptr;
	} else if ((_70417_i >= _70349_tokens.len())) {
		_227a488cb_push_err(&(*_self_), _70349_tokens[_70417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	_70349_tokens=_70349_tokens.slice(_70417_i);
	jule::Ptr<_2431e4523_Token> _71413_token = _70349_tokens[0LL];;
	if (((_71413_token.get()._field_id != static_cast<jule::U32>(3LLU)) || (_71413_token.get()._field_kind != jule::Str("{", 1)))) {
		_227a488cb_push_err(&(*_self_), _71413_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	return jule::new_ptr<_244862ba1_StructLit>(_244862ba1_StructLit{._field_end=_70349_tokens[(_70349_tokens.len() - 1LL)], ._field_kind=_70518_t, ._field_exprs=_227a4e7d3_build_struct_lit_exprs(&(*_self_), _70349_tokens)});
}



inline jule::Ptr<_24485c706_Expr> _227a4ee32_build_brace_lit_part(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _72744_tokens) {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _72818_l;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _72825_r;;
	std::tie(_72818_l,_72825_r) = _227a47534_split_delim(_72744_tokens,static_cast<jule::U32>(11LLU));
	if ((_72818_l != nullptr)) {
		return jule::new_ptr<_24485c706_Expr>(_24485c706_Expr{._field_token=_72744_tokens[0LL], ._field_end=_72744_tokens[(_72744_tokens.len() - 1LL)], ._field_kind=static_cast<jule::Any>(jule::new_ptr<_244863b3b_KeyValPair>(_244863b3b_KeyValPair{._field_key=_227a52a5b_build_from_tokens(&(*_self_), _72818_l), ._field_val=_227a52a5b_build_from_tokens(&(*_self_), _72825_r), ._field_colon=_72744_tokens[_72818_l.len()]}))});
	};
	return _227a52a5b_build_from_tokens(&(*_self_), _72744_tokens);
}



inline jule::Ptr<_244863124_BraceLit> _227a50240_build_brace_lit(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _74439_tokens) {
	jule::Ptr<_244863124_BraceLit> _74517_lit = jule::new_ptr<_244863124_BraceLit>(_244863124_BraceLit{._field_token=_74439_tokens[0LL], ._field_end=_74439_tokens[(_74439_tokens.len() - 1LL)], });;
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _75017_parts = _227a4dd98_get_brace_range_lit_expr_parts(&(*_self_), _74439_tokens);;
	if ((_75017_parts == nullptr)) {
		return _74517_lit;
	};
	_74517_lit.get()._field_exprs=jule::Slice<jule::Ptr<_24485c706_Expr>>::alloc(0LL,_75017_parts.len());
	{
		auto &expr = _75017_parts;
		auto it = expr.begin();
		_iter_begin_22a26cbd0:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _75621_part = *it;
			{
				_74517_lit.get()._field_exprs = jule::alloc_for_append(_74517_lit.get()._field_exprs,1);_74517_lit.get()._field_exprs.__push(_227a4ee32_build_brace_lit_part(&(*_self_), _75621_part));;
			}
			_iter_next_22a26cbd0:;
			++it;
			goto _iter_begin_22a26cbd0;
		}
		_iter_end_22a26cbd0:;
	};
	return _74517_lit;
}



inline jule::Any _227a5054d_build_brace_range(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _76341_tokens) {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _76418_expr_tokens;;
	jule::I32 _76431_range_n;;
	std::tie(_76418_expr_tokens,_76431_range_n) = _227a47d92_get_range_expr_tokens(_76341_tokens);
	{
		
		if ((_76418_expr_tokens.len() == 0LL)) {
			_case_begin_22a26e484:;
			{
				return static_cast<jule::Any>(_227a50240_build_brace_lit(&(*_self_), _76341_tokens));
			}
		}
		else if ((_76431_range_n > 0LL)) {
			_case_begin_22a26e50b:;
			{
				_227a488cb_push_err(&(*_self_), _76341_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_22a26e3eb:;
	};
	jule::Ptr<_2431e4523_Token> _77513_else_token = _76418_expr_tokens[(_76418_expr_tokens.len() - 1LL)];;
	if ((_76418_expr_tokens[(_76418_expr_tokens.len() - 1LL)].get()._field_id == static_cast<jule::U32>(17LLU))) {
		_76418_expr_tokens=_76418_expr_tokens.slice(0LL,(_76418_expr_tokens.len() - 1LL));
		jule::Any _77821_d = _227a52440_build(&(*_self_), _76418_expr_tokens);;
		if ((_77821_d == nullptr)) {
			return nullptr;
		};
		{
			auto &_match_expr{ _77821_d };
			
			if (_match_expr.type_is<jule::Ptr<_2448619c4_FnCallExpr>>()) {
				_case_begin_22a2729e8:;
				{
					_76341_tokens=_76341_tokens.slice((_76418_expr_tokens.len() + 1LL));
					jule::I32 _78525_i = 0LL;;
					jule::Slice<jule::Ptr<_2431e4523_Token>> _78625_range_tokens = _227a54b6d_range(_78525_i,jule::Str("{", 1),jule::Str("}", 1),_76341_tokens);;
					jule::Ptr<_2448619c4_FnCallExpr> _78725_model = _77821_d.operator jule::Ptr<_2448619c4_FnCallExpr>();;
					if (_24486209b_ignored(_78725_model.ptr())) {
						_227a488cb_push_err(&(*_self_), _77513_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						_227a48bea_push_suggestion(&(*_self_), jule::Str("just ignore exceptional or handle it but you cannot do both at same time", 72),jule::Slice<jule::Any>());
					};
					_78725_model.get()._field_exception=_227a5848a_build_scope((*_self_)._field_p, _78625_range_tokens,_76341_tokens[(_78525_i - 1LL)]);
					return _77821_d;
				}
			}
			else {
				_case_begin_22a27291b:;
				{
					_227a488cb_push_err(&(*_self_), _76418_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return nullptr;
				}
			}
			_match_end_22a2726c9:;
		};
	};
	{
		auto &_match_expr{ _76418_expr_tokens[0LL].get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(35LLU)) {
			_case_begin_22a276986:;
			{
				return _227a4d6a0_build_unsafe(&(*_self_), _76341_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(33LLU)) {
			_case_begin_22a2769ec:;
			{
				return static_cast<jule::Any>(_227a4d392_build_anon_fn(&(*_self_), _76341_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(2LLU) || _match_expr == static_cast<jule::U32>(31LLU)) {
			_case_begin_22a276a63:;
			{
				return static_cast<jule::Any>(_227a4eb13_build_typed_struct_literal(&(*_self_), _76341_tokens));
			}
		}
		else {
			_case_begin_22a272a5e:;
			{
				_227a488cb_push_err(&(*_self_), _76418_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_22a271497:;
	};
}



inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a5085b_get_enumerable_parts(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _81543_tokens) {
	_81543_tokens=_81543_tokens.slice(1LL,(_81543_tokens.len() - 1LL));
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _81718_parts;;
	jule::Slice<_242dbab89_Log> _81725_errors;;
	std::tie(_81718_parts,_81725_errors) = _227a55762_parts(_81543_tokens,static_cast<jule::U32>(8LLU),true);
	(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_81725_errors);
	return _81718_parts;
}



inline jule::Ptr<_2448640ae_SliceExpr> _227a50b69_build_slice(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _82234_tokens) {
	jule::Ptr<_2448640ae_SliceExpr> _82317_slc = jule::new_ptr<_2448640ae_SliceExpr>(_2448640ae_SliceExpr{._field_token=_82234_tokens[0LL], ._field_end=_82234_tokens[(_82234_tokens.len() - 1LL)], });;
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _82817_parts = _227a5085b_get_enumerable_parts(&(*_self_), _82234_tokens);;
	if ((_82817_parts.len() == 0LL)) {
		return _82317_slc;
	};
	_82317_slc.get()._field_exprs=jule::Slice<jule::Ptr<_24485c706_Expr>>::alloc(0LL,_82817_parts.len());
	{
		auto &expr = _82817_parts;
		auto it = expr.begin();
		_iter_begin_22a27c250:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _83421_p = *it;
			{
				if ((_83421_p.len() == 0LL)) {
					goto _iter_next_22a27c250;
				};
				_82317_slc.get()._field_exprs = jule::alloc_for_append(_82317_slc.get()._field_exprs,1);_82317_slc.get()._field_exprs.__push(_227a52a5b_build_from_tokens(&(*_self_), _83421_p));;
			}
			_iter_next_22a27c250:;
			++it;
			goto _iter_begin_22a27c250;
		}
		_iter_end_22a27c250:;
	};
	return _82317_slc;
}



inline jule::Ptr<_244864950_IndexingExpr> _227a510ba_build_indexing(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _84437_expr_tokens, jule::Slice<jule::Ptr<_2431e4523_Token>> _84513_tokens, jule::Ptr<_2431e4523_Token> _84535_error_token) {
	jule::Ptr<_2431e4523_Token> _84617_end = _84513_tokens[(_84513_tokens.len() - 1LL)];;
	_84513_tokens=_84513_tokens.slice(1LL,(_84513_tokens.len() - 1LL));
	if ((_84513_tokens.len() == 0LL)) {
		_227a488cb_push_err(&(*_self_), _84535_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_24485c706_Expr> _85217_expr = _227a52a5b_build_from_tokens(&(*_self_), _84437_expr_tokens);;
	if ((_85217_expr == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_24485c706_Expr> _85617_index = _227a52a5b_build_from_tokens(&(*_self_), _84513_tokens);;
	if ((_85617_index == nullptr)) {
		return nullptr;
	};
	return jule::new_ptr<_244864950_IndexingExpr>(_244864950_IndexingExpr{._field_token=_84535_error_token, ._field_end=_84617_end, ._field_expr=_85217_expr, ._field_index=_85617_index});
}



inline jule::Ptr<_24486505a_SlicingExpr> _227a5165e_build_slicing(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _86837_expr_tokens, jule::Slice<jule::Ptr<_2431e4523_Token>>& _86865_start, jule::Slice<jule::Ptr<_2431e4523_Token>>& _86914_to, jule::Ptr<_2431e4523_Token>& _86933_error_token, jule::Ptr<_2431e4523_Token> _86958_end) {
	jule::Ptr<_24486505a_SlicingExpr> _87017_slc = jule::new_ptr<_24486505a_SlicingExpr>(_24486505a_SlicingExpr{._field_token=_86933_error_token, ._field_end=_86958_end, ._field_expr=_227a52a5b_build_from_tokens(&(*_self_), _86837_expr_tokens), });;
	if ((_86865_start.len() > 0LL)) {
		_87017_slc.get()._field_start=_227a52a5b_build_from_tokens(&(*_self_), _86865_start);
	};
	if ((_86914_to.len() > 0LL)) {
		_87017_slc.get()._field_to=_227a52a5b_build_from_tokens(&(*_self_), _86914_to);
	};
	return _87017_slc;
}



inline jule::Any _227a5196c_build_bracket_range(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _88442_tokens) {
	jule::Ptr<_2431e4523_Token> _88517_error_token = _88442_tokens[0LL];;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _88618_expr_tokens;;
	jule::I32 _88631_range_n;;
	std::tie(_88618_expr_tokens,_88631_range_n) = _227a47d92_get_range_expr_tokens(_88442_tokens);
	if ((_88618_expr_tokens.len() == 0LL)) {
		return static_cast<jule::Any>(_227a50b69_build_slice(&(*_self_), _88442_tokens));
	} else if ((_88631_range_n > 0LL)) {
		_227a488cb_push_err(&(*_self_), _88517_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	_88442_tokens=_88442_tokens.slice(_88618_expr_tokens.len());
	jule::Slice<jule::Ptr<_2431e4523_Token>> _90117_split_tokens = _88442_tokens.slice(1LL,(_88442_tokens.len() - 1LL));;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _90218_start;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _90229_to;;
	std::tie(_90218_start,_90229_to) = _227a47534_split_delim(_90117_split_tokens,static_cast<jule::U32>(11LLU));
	if (((_90218_start != nullptr) || (_90229_to != nullptr))) {
		return static_cast<jule::Any>(_227a5165e_build_slicing(&(*_self_), _88618_expr_tokens,_90218_start,_90229_to,_88517_error_token,_88442_tokens[(_88442_tokens.len() - 1LL)]));
	};
	return static_cast<jule::Any>(_227a510ba_build_indexing(&(*_self_), _88618_expr_tokens,_88442_tokens,_88517_error_token));
}



inline jule::Any _227a51c7a_build_data(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _90934_tokens) {
	{
		auto _match_expr{ _90934_tokens.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_22a28915d:;
			{
				return nullptr;
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_22a2891d5:;
			{
				return _227a49932_build_single(&(*_self_), _90934_tokens[0LL]);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_22a28925c:;
			{
				if ((_90934_tokens[0LL].get()._field_id == static_cast<jule::U32>(31LLU))) {
					return static_cast<jule::Any>(_227a49c40_build_cpp_linked_ident(&(*_self_), _90934_tokens));
				};
			}
		}
		_match_end_22a288de9:;
	};
	jule::Ptr<_2431e4523_Token> _92117_token = _90934_tokens[(_90934_tokens.len() - 1LL)];;
	if (((_92117_token.get()._field_id == static_cast<jule::U32>(7LLU)) && (_92117_token.get()._field_kind == jule::Str("...", 3)))) {
		return static_cast<jule::Any>(_227a4b093_build_variadic(&(*_self_), _90934_tokens));
	};
	_92117_token=_90934_tokens[0LL];
	{
		auto &_match_expr{ _92117_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_22a28c53a:;
			{
				if (((_90934_tokens.len() > 1LL) && (_92117_token.get()._field_kind == jule::Str("*", 1)))) {
					_92117_token=_90934_tokens[1LL];
					if (((_92117_token.get()._field_id == static_cast<jule::U32>(1LLU)) || (_92117_token.get()._field_id == static_cast<jule::U32>(35LLU)))) {
						return static_cast<jule::Any>(_227a4a977_build_type(&(*_self_), _90934_tokens));
					};
				};
				return static_cast<jule::Any>(_227a4a04d_build_unary(&(*_self_), _90934_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a28c5b2:;
			{
				if ((_90934_tokens.len() < 3LL)) {
					goto _match_end_22a28c45d;
				};
				if ((_90934_tokens.len() > 3LL)) {
					jule::Ptr<_2431e4523_Token> _94321_t = _90934_tokens[(_90934_tokens.len() - 1LL)];;
					if (((_94321_t.get()._field_id == static_cast<jule::U32>(3LLU)) && (_94321_t.get()._field_kind == jule::Str(")", 1)))) {
						goto _match_end_22a28c45d;
					};
				};
				jule::Ptr<_2431e4523_Token> _94917_next = _90934_tokens[1LL];;
				if (((_94917_next.get()._field_id != static_cast<jule::U32>(3LLU)) || (_94917_next.get()._field_kind != jule::Str("]", 1)))) {
					jule::I32 _95225_delim = 0LL;;
					_95225_delim=static_cast<jule::I32>(_227a67884_map_colon(_90934_tokens,_95225_delim));
					if ((_95225_delim == -1LL)) {
						goto _match_end_22a28c45d;
					};
				};
				return static_cast<jule::Any>(_227a4a977_build_type(&(*_self_), _90934_tokens));
			}
		}
		_match_end_22a28c45d:;
	};
	_92117_token=_90934_tokens[(_90934_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _92117_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(2LLU)) {
			_case_begin_22a28caac:;
			{
				return _227a4ac85_build_sub_ident(&(*_self_), _90934_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(1LLU)) {
			_case_begin_22a293c6c:;
			{
				return static_cast<jule::Any>(_227a4a977_build_type(&(*_self_), _90934_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_22a293cd3:;
			{
				return _227a4b3a1_build_op_right(&(*_self_), _90934_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a293d49:;
			{
				{
					auto &_match_expr{ _92117_token.get()._field_kind };
					
					if (_match_expr == jule::Str(")", 1)) {
						_case_begin_22a295686:;
						{
							return _227a4cc65_build_parentheses_range(&(*_self_), _90934_tokens);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_22a2956ec:;
						{
							return _227a5054d_build_brace_range(&(*_self_), _90934_tokens);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_22a295774:;
						{
							return _227a5196c_build_bracket_range(&(*_self_), _90934_tokens);
						}
					}
					_match_end_22a2950c0:;
				};
			}
		}
		_match_end_22a28ca57:;
	};
	if ((_92117_token.get()._field_id == static_cast<jule::U32>(33LLU))) {
		return static_cast<jule::Any>(_227a4a977_build_type(&(*_self_), _90934_tokens));
	};
	_227a488cb_push_err(&(*_self_), _92117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return nullptr;
}



inline jule::Ptr<_244861485_BinopExpr> _227a52132_build_binop(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _99035_tokens, jule::I32 _99053_i) {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _99117_left_tokens = _99035_tokens.slice(0LL,_99053_i);;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _99217_right_tokens = _99035_tokens.slice((_99053_i + 1LL));;
	if ((_99117_left_tokens.len() == 0LL)) {
		_227a488cb_push_err(&(*_self_), _99035_tokens[_99053_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_99217_right_tokens.len() == 0LL)) {
		_227a488cb_push_err(&(*_self_), _99035_tokens[_99053_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a48bea_push_suggestion(&(*_self_), jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	};
	return jule::new_ptr<_244861485_BinopExpr>(_244861485_BinopExpr{._field_left=_227a52a5b_build_from_tokens(&(*_self_), _99117_left_tokens), ._field_right=_227a52a5b_build_from_tokens(&(*_self_), _99217_right_tokens), ._field_op=_99035_tokens[_99053_i]});
}



inline jule::Any _227a52440_build(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _101029_tokens) {
	jule::I32 _101113_i = _227a477cb_find_lowest_prec_op(_101029_tokens);;
	if ((_101113_i == -1LL)) {
		return _227a51c7a_build_data(&(*_self_), _101029_tokens);
	};
	return static_cast<jule::Any>(_227a52132_build_binop(&(*_self_), _101029_tokens,_101113_i));
}



inline jule::Any _227a5274d_build_kind(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _101834_tokens) {
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _101918_parts;;
	jule::Slice<_242dbab89_Log> _101925_errors;;
	std::tie(_101918_parts,_101925_errors) = _227a55762_parts(_101834_tokens,static_cast<jule::U32>(8LLU),true);
	if ((_101925_errors != nullptr)) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_101925_errors);
		return nullptr;
	} else if ((_101918_parts.len() > 1LL)) {
		return static_cast<jule::Any>(_227a49008_build_tuple(&(*_self_), _101918_parts));
	};
	return _227a52440_build(&(*_self_), _101834_tokens);
}



inline jule::Ptr<_24485c706_Expr> _227a52a5b_build_from_tokens(_227a480c3_ExprBuilder* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _102940_tokens) {
	if ((_102940_tokens.len() == 0LL)) {
		return nullptr;
	};
	return jule::new_ptr<_24485c706_Expr>(_24485c706_Expr{._field_token=_102940_tokens[0LL], ._field_end=_102940_tokens[(_102940_tokens.len() - 1LL)], ._field_kind=_227a5274d_build_kind(&(*_self_), _102940_tokens)});
}







std::ostream &operator<<(std::ostream &_Stream, _227a480c3_ExprBuilder _Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _227a53441_AssignInfo _Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}



inline void _227a56ce6_stop(_227a569b6_Parser* _self_) {
	(*_self_)._field_ast=nullptr;
}



inline jule::Bool _227a5705a_stopped(_227a569b6_Parser* _self_) {
	return ((*_self_)._field_ast == nullptr);
}



inline void _227a57423_push_err(_227a569b6_Parser* _self_, jule::Ptr<_2431e4523_Token> _28727_token, jule::Str _28742_fmt, jule::Slice<jule::Any> _28755_args) {
	(*_self_)._field_errors = jule::alloc_for_append((*_self_)._field_errors,1);(*_self_)._field_errors.__push(_227a55de4_compiler_err(_28727_token,_28742_fmt,jule::Any(_28755_args)));;
}



inline void _227a57742_push_suggestion(_227a569b6_Parser* _self_, jule::Str _29234_fmt, jule::Slice<jule::Any> _29247_args) {
	{
		_227a56356_push_suggestion((&((*_self_)._field_errors[((*_self_)._field_errors.len() - 1LL)])),_29234_fmt,jule::Any(_29247_args));
	};
}



inline jule::Ptr<_24485c706_Expr> _227a57a50_build_expr(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _29635_tokens) {
	jule::Ptr<_227a480c3_ExprBuilder> _29717_ep = jule::new_ptr<_227a480c3_ExprBuilder>(_227a480c3_ExprBuilder{._field_p=_self_});;
	jule::Ptr<_24485c706_Expr> _30017_expr = _227a52a5b_build_from_tokens(_29717_ep.ptr(), _29635_tokens);;
	return _30017_expr;
}



inline jule::Ptr<_2448249dc_Directive> _227a57d5d_build_directive(_227a569b6_Parser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _30438_tokens) {
	if ((_30438_tokens.len() == 1LL)) {
		_227a57423_push_err(&(*_self_), _30438_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_30438_tokens[1LL].get()._field_column != (_30438_tokens[0LL].get()._field_column + 1LL))) {
		_227a57423_push_err(&(*_self_), _30438_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	return jule::new_ptr<_2448249dc_Directive>(_2448249dc_Directive{._field_tag=_30438_tokens[1LL], ._field_args=_30438_tokens.slice(2LL)});
}



inline void _227a580d3_push_directive(_227a569b6_Parser* _self_, jule::Ptr<_2448249dc_Directive> _32137_d) {
	if ((_32137_d == nullptr)) {
		return;;
	};
	{
		auto &expr = (*_self_)._field_directives;
		auto it = expr.begin();
		_iter_begin_22a2c94de:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _32716_pd = *it;
			{
				if ((_32137_d.get()._field_tag.get()._field_kind == _32716_pd.get()._field_tag.get()._field_kind)) {
					return;;
				};
			}
			_iter_next_22a2c94de:;
			++it;
			goto _iter_begin_22a2c94de;
		}
		_iter_end_22a2c94de:;
	};
	(*_self_)._field_directives = jule::alloc_for_append((*_self_)._field_directives,1);(*_self_)._field_directives.__push(_32137_d);;
}



inline jule::Ptr<_244868503_ScopeTree> _227a5848a_build_scope(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _33536_tokens, jule::Ptr<_2431e4523_Token> _33558_end) {
	jule::Ptr<_244868503_ScopeTree> _33617_s = _227a392a1_new_scope();;
	_33617_s.get()._field_end=_33558_end;
	_227a3ac31_ScopeParser _33817_sp = _227a3ac31_ScopeParser{._field_p=_self_, };;
	_227a46753_build(&_33817_sp, _33536_tokens,_33617_s);
	return _33617_s;
}



inline std::tuple<jule::Ptr<_2448581d5_TypeDecl>,jule::Bool> _227a588db___build_type(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _34544_tokens, jule::I32* _34613_i, jule::Bool _34622_err) {
	_227a67d90_TypeBuilder _34717_tb = _227a67d90_TypeBuilder{._field_p=_self_, ._field_tokens=_34544_tokens, ._field_i=_34613_i, ._field_err=_34622_err};;
	jule::Ptr<_2448581d5_TypeDecl> _35318_decl;;
	jule::Bool _35324_ok;;
	std::tie(_35318_decl,_35324_ok) = _227a6b24a_build(&_34717_tb);
	return std::make_tuple(_35318_decl,_35324_ok);
}



inline std::tuple<jule::Ptr<_2448581d5_TypeDecl>,jule::Bool> _227a58d3c_build_type(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _35842_tokens, jule::I32* _35913_i, jule::Bool _35922_err) {
	jule::Ptr<_2431e4523_Token> _36013_token = _35842_tokens[(*(_35913_i))];;
	jule::Ptr<_2448581d5_TypeDecl> _36118_t;;
	jule::Bool _36121_ok;;
	std::tie(_36118_t,_36121_ok) = _227a588db___build_type(_self_, _35842_tokens,_35913_i,_35922_err);
	if ((_35922_err && (!(_36121_ok)))) {
		_227a57423_push_err(_self_.ptr(), _36013_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	};
	return std::make_tuple(_36118_t,_36121_ok);
}



inline jule::Ptr<_24486e839_TypeAliasDecl> _227a5914a_build_type_alias_decl(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _36846_tokens) {
	jule::I32 _36917_i = 1LL;;
	if ((_36917_i >= _36846_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _36846_tokens[(_36917_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_24486e839_TypeAliasDecl> _37417_tad = jule::new_ptr<_24486e839_TypeAliasDecl>(_24486e839_TypeAliasDecl{._field_token=_36846_tokens[1LL], ._field_ident=_36846_tokens[1LL].get()._field_kind, });;
	jule::Ptr<_2431e4523_Token> _37817_token = _36846_tokens[_36917_i];;
	if ((_37817_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _37817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	};
	(_36917_i)++;
	if ((_36917_i >= _36846_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _36846_tokens[(_36917_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _37417_tad;
	};
	_37817_token=_36846_tokens[_36917_i];
	if ((_37817_token.get()._field_id != static_cast<jule::U32>(11LLU))) {
		_227a57423_push_err(_self_.ptr(), _36846_tokens[(_36917_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>());
		return _37417_tad;
	};
	(_36917_i)++;
	if ((_36917_i >= _36846_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _36846_tokens[(_36917_i - 1LL)],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return _37417_tad;
	};
	jule::Ptr<_2448581d5_TypeDecl> _39918_t;;
	jule::Bool _39921_ok;;
	std::tie(_39918_t,_39921_ok) = _227a58d3c_build_type(_self_, _36846_tokens,(&(_36917_i)),true);
	_37417_tad.get()._field_kind=_39918_t;
	if ((_39921_ok && (_36917_i < _36846_tokens.len()))) {
		_227a57423_push_err(_self_.ptr(), _36846_tokens[_36917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	return _37417_tad;
}



inline void _227a5948b_build_var_type_and_expr(jule::Ptr<_227a569b6_Parser> _self_, jule::Ptr<_24486aec8_VarDecl>& _40748_v, jule::Slice<jule::Ptr<_2431e4523_Token>>& _40766_tokens) {
	jule::I32 _40817_i = 0LL;;
	jule::Ptr<_2431e4523_Token> _40917_tok = _40766_tokens[_40817_i];;
	if ((_40917_tok.get()._field_id == static_cast<jule::U32>(11LLU))) {
		(_40817_i)++;
		if (((_40817_i >= _40766_tokens.len()) || ((_40766_tokens[_40817_i].get()._field_id == static_cast<jule::U32>(7LLU)) && (_40766_tokens[_40817_i].get()._field_kind == jule::Str("=", 1))))) {
			_227a57423_push_err(_self_.ptr(), _40917_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
			return;;
		};
		jule::Ptr<_2448581d5_TypeDecl> _41722_t;;
		jule::Bool _41725_ok;;
		std::tie(_41722_t,_41725_ok) = _227a58d3c_build_type(_self_, _40766_tokens,(&(_40817_i)),true);
		if (_41725_ok) {
			_40748_v.get()._field_kind=_41722_t;
			if ((_40817_i >= _40766_tokens.len())) {
				return;;
			};
			_40917_tok=_40766_tokens[_40817_i];
		};
	};
	if ((_40917_tok.get()._field_id == static_cast<jule::U32>(7LLU))) {
		if ((_40917_tok.get()._field_kind != jule::Str("=", 1))) {
			_227a57423_push_err(_self_.ptr(), _40917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return;;
		};
		jule::Slice<jule::Ptr<_2431e4523_Token>> _43221_expr_tokens = _40766_tokens.slice((_40817_i + 1LL));;
		if ((_43221_expr_tokens.len() == 0LL)) {
			_227a57423_push_err(_self_.ptr(), _40917_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return;;
		};
		_40748_v.get()._field_expr=_227a57a50_build_expr(_self_, _43221_expr_tokens);
	} else {
		_227a57423_push_err(_self_.ptr(), _40917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
}



inline void _227a59744_build_var_common(jule::Ptr<_227a569b6_Parser> _self_, jule::Ptr<_24486aec8_VarDecl>& _44341_v, jule::Slice<jule::Ptr<_2431e4523_Token>> _44358_tokens) {
	_44341_v.get()._field_token=_44358_tokens[0LL];
	if ((_44341_v.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _44341_v.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;;
	};
	_44341_v.get()._field_ident=_44341_v.get()._field_token.get()._field_kind;
	_44341_v.get()._field_kind=nullptr;
	if ((_44358_tokens.len() > 1LL)) {
		_44358_tokens=_44358_tokens.slice(1LL);
		_227a5948b_build_var_type_and_expr(_self_, _44341_v,_44358_tokens);
	};
}



inline void _227a59b0c_build_var_begin(_227a569b6_Parser* _self_, jule::Ptr<_24486aec8_VarDecl>& _45839_v, jule::I32& _45857_i, jule::Slice<jule::Ptr<_2431e4523_Token>>& _45866_tokens) {
	jule::Ptr<_2431e4523_Token> _45913_tok = _45866_tokens[_45857_i];;
	{
		auto &_match_expr{ _45913_tok.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(38LLU)) {
			_case_begin_22a2e4053:;
			{
				_45839_v.get()._field_statically=true;
				goto _case_begin_22a2e40b9;
			}
		}
		else if (_match_expr == static_cast<jule::U32>(34LLU)) {
			_case_begin_22a2e40b9:;
			{
				(_45857_i)++;
				if ((_45857_i >= _45866_tokens.len())) {
					_227a57423_push_err(&(*_self_), _45913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				if ((_45866_tokens[_45857_i].get()._field_id == static_cast<jule::U32>(36LLU))) {
					_45839_v.get()._field_mutable=true;
					(_45857_i)++;
				};
			}
		}
		else if (_match_expr == static_cast<jule::U32>(9LLU)) {
			_case_begin_22a2e374a:;
			{
				(_45857_i)++;
				_45839_v.get()._field_constant=true;
			}
		}
		else {
			_case_begin_22a2e367e:;
			{
				_227a57423_push_err(&(*_self_), _45913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;;
			}
		}
		_match_end_22a2e34d6:;
	};
	if ((_45857_i >= _45866_tokens.len())) {
		_227a57423_push_err(&(*_self_), _45913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
}



inline jule::Ptr<_24486aec8_VarDecl> _227a59e1a_build_var(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _48833_tokens) {
	jule::I32 _48917_i = 0LL;;
	jule::Ptr<_24486aec8_VarDecl> _49017_v = jule::new_ptr<_24486aec8_VarDecl>(_24486aec8_VarDecl{._field_token=_48833_tokens[0LL], });;
	_227a59b0c_build_var_begin(_self_.ptr(), _49017_v,_48917_i,_48833_tokens);
	if ((_48917_i >= _48833_tokens.len())) {
		return nullptr;
	};
	_48833_tokens=_48833_tokens.slice(_48917_i);
	if (((_48833_tokens[0LL].get()._field_id == static_cast<jule::U32>(7LLU)) && (_48833_tokens[0LL].get()._field_kind == jule::Str("&", 1)))) {
		_49017_v.get()._field_reference=true;
		if ((_48833_tokens.len() == 1LL)) {
			return nullptr;
		};
		_48833_tokens=_48833_tokens.slice(1LL);
	};
	_227a59744_build_var_common(_self_, _49017_v,_48833_tokens);
	return _49017_v;
}



inline jule::Ptr<_2448657b9_GenericDecl> _227a5a228_build_generic(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _51038_tokens) {
	jule::Ptr<_2448657b9_GenericDecl> _51117_g = jule::new_ptr<_2448657b9_GenericDecl>(_2448657b9_GenericDecl{._field_token=_51038_tokens[0LL], });;
	if ((_51117_g.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _51117_g.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	};
	_51117_g.get()._field_ident=_51117_g.get()._field_token.get()._field_kind;
	if ((_51038_tokens.len() > 1LL)) {
		if ((_51038_tokens[1LL].get()._field_id != static_cast<jule::U32>(11LLU))) {
			_227a57423_push_err(_self_.ptr(), _51038_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		if ((_51038_tokens.len() == 2LL)) {
			_227a57423_push_err(_self_.ptr(), _51038_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return nullptr;
		};
		jule::Slice<jule::Ptr<_2431e4523_Token>> _52821_constraint_tokens = _51038_tokens.slice(2LL);;
		jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _52922_parts;;
		jule::Slice<_242dbab89_Log> _52929_errors;;
		std::tie(_52922_parts,_52929_errors) = _227a55377_parts_kind(_52821_constraint_tokens,jule::Str("|", 1),true);
		if ((_52929_errors.len() > 0LL)) {
			_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_52929_errors);
			return nullptr;
		};
		_51117_g.get()._field_constraint=jule::new_ptr<_244865346_Constraint>(_244865346_Constraint{._field_mask=jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>::alloc(0LL,_52922_parts.len())});
		{
			auto &expr = _52922_parts;
			auto it = expr.begin();
			_iter_begin_22a3055e7:;
			if (it != expr.end()) {
				jule::Slice<jule::Ptr<_2431e4523_Token>> _53525_part = *it;
				{
					jule::I32 _53625_i = 0LL;;
					jule::Ptr<_2448581d5_TypeDecl> _53726_kind;;
					std::tie(_53726_kind,std::ignore) = _227a58d3c_build_type(_self_, _53525_part,(&(_53625_i)),true);
					_51117_g.get()._field_constraint.get()._field_mask = jule::alloc_for_append(_51117_g.get()._field_constraint.get()._field_mask,1);_51117_g.get()._field_constraint.get()._field_mask.__push(_53726_kind);;
					if ((_53625_i < _53525_part.len())) {
						_227a57423_push_err(_self_.ptr(), _53525_part[_53625_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					};
				}
				_iter_next_22a3055e7:;
				++it;
				goto _iter_begin_22a3055e7;
			}
			_iter_end_22a3055e7:;
		};
	};
	return _51117_g;
}



inline jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _227a5a5d0_build_generics(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _54739_tokens, jule::Ptr<_2431e4523_Token>& _54758_error_token) {
	if ((_54739_tokens.len() == 0LL)) {
		_227a57423_push_err(_self_.ptr(), _54758_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _55318_parts;;
	jule::Slice<_242dbab89_Log> _55325_errors;;
	std::tie(_55318_parts,_55325_errors) = _227a55762_parts(_54739_tokens,static_cast<jule::U32>(8LLU),true);
	if ((_55325_errors.len() > 0LL)) {
		_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_55325_errors);
		return nullptr;
	};
	jule::Slice<jule::Ptr<_2448657b9_GenericDecl>> _55917_generics = jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>::alloc(0LL,_55318_parts.len());;
	{
		auto &expr = _55318_parts;
		auto it = expr.begin();
		_iter_begin_22a30ac29:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _56021_part = *it;
			{
				_55917_generics = jule::alloc_for_append(_55917_generics,1);_55917_generics.__push(_227a5a228_build_generic(_self_, _56021_part));;
			}
			_iter_next_22a30ac29:;
			++it;
			goto _iter_begin_22a30ac29;
		}
		_iter_end_22a30ac29:;
	};
	return _55917_generics;
}



inline jule::Ptr<_244868bc9_ParamDecl> _227a5a8dd_build_self_param(_227a569b6_Parser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _56739_tokens) {
	if ((_56739_tokens.len() == 0LL)) {
		return nullptr;
	};
	jule::Ptr<_244868bc9_ParamDecl> _57217_param = jule::new_ptr<_244868bc9_ParamDecl>();;
	jule::I32 _57517_i = 0LL;;
	if ((_56739_tokens[_57517_i].get()._field_id == static_cast<jule::U32>(36LLU))) {
		_57217_param.get()._field_mutable=true;
		(_57517_i)++;
		if ((_57517_i >= _56739_tokens.len())) {
			_227a57423_push_err(&(*_self_), _56739_tokens[(_57517_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
	};
	if ((_56739_tokens[_57517_i].get()._field_kind == jule::Str("&", 1))) {
		_57217_param.get()._field_ident=jule::Str("&", 1);
		(_57517_i)++;
		if ((_57517_i >= _56739_tokens.len())) {
			_227a57423_push_err(&(*_self_), _56739_tokens[(_57517_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
	};
	if ((_56739_tokens[_57517_i].get()._field_id == static_cast<jule::U32>(28LLU))) {
		_57217_param.get()._field_ident+=jule::Str("self", 4);
		_57217_param.get()._field_token=_56739_tokens[_57517_i];
		(_57517_i)++;
		if ((_57517_i < _56739_tokens.len())) {
			_227a57423_push_err(&(*_self_), _56739_tokens[_57517_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		};
	};
	return _57217_param;
}



inline void _227a5aca6_param_type_begin(_227a569b6_Parser* _self_, jule::Ptr<_244868bc9_ParamDecl>& _60640_param, jule::I32& _60664_i, jule::Slice<jule::Ptr<_2431e4523_Token>>& _60673_tokens) {
	for (; (_60664_i < _60673_tokens.len()); (_60664_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _60817_token = _60673_tokens[_60664_i];;
			if ((_60817_token.get()._field_id != static_cast<jule::U32>(7LLU))) {
				return;;
			} else if ((_60817_token.get()._field_kind != jule::Str("...", 3))) {
				return;;
			};
			if (_60640_param.get()._field_variadic) {
				_227a57423_push_err(&(*_self_), _60817_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>());
				goto _iter_next_22a312725;
			};
			_60640_param.get()._field_variadic=true;
		}
	_iter_next_22a312725:;
	}
	_iter_end_22a312725:;;
}



inline void _227a5b0c5_build_param_type(jule::Ptr<_227a569b6_Parser> _self_, jule::Ptr<_244868bc9_ParamDecl>& _62341_param, jule::Slice<jule::Ptr<_2431e4523_Token>>& _62365_tokens) {
	jule::I32 _62417_i = 0LL;;
	_227a5aca6_param_type_begin(_self_.ptr(), _62341_param,_62417_i,_62365_tokens);
	if ((_62417_i >= _62365_tokens.len())) {
		return;;
	};
	std::tie(_62341_param.get()._field_kind,std::ignore) = _227a58d3c_build_type(_self_, _62365_tokens,(&(_62417_i)),true);
	if ((_62417_i < _62365_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _62365_tokens[_62417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
}



inline void _227a5b3e4_build_param_body(jule::Ptr<_227a569b6_Parser> _self_, jule::Ptr<_244868bc9_ParamDecl>& _63641_param, jule::Slice<jule::Ptr<_2431e4523_Token>> _63664_tokens) {
	jule::Ptr<_2431e4523_Token> _63717_tok = _63664_tokens[0LL];;
	_63641_param.get()._field_ident=_63717_tok.get()._field_kind;
	if ((_63664_tokens.len() == 1LL)) {
		return;;
	} else if ((_63664_tokens.len() < 3LL)) {
		_227a57423_push_err(_self_.ptr(), _63717_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return;;
	};
	if ((_63664_tokens[1LL].get()._field_id != static_cast<jule::U32>(11LLU))) {
		_227a5b0c5_build_param_type(_self_, _63641_param,_63664_tokens);
		return;;
	};
	_63664_tokens=_63664_tokens.slice(2LL);
	_227a5b0c5_build_param_type(_self_, _63641_param,_63664_tokens);
}



inline jule::Ptr<_244868bc9_ParamDecl> _227a5b702_build_param(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _65435_tokens) {
	jule::Ptr<_244868bc9_ParamDecl> _65517_param = jule::new_ptr<_244868bc9_ParamDecl>(_244868bc9_ParamDecl{._field_token=_65435_tokens[0LL], });;
	if ((_65517_param.get()._field_token.get()._field_id == static_cast<jule::U32>(36LLU))) {
		_65517_param.get()._field_mutable=true;
		if ((_65435_tokens.len() == 1LL)) {
			_227a57423_push_err(_self_.ptr(), _65435_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		_65435_tokens=_65435_tokens.slice(1LL);
		_65517_param.get()._field_token=_65435_tokens[0LL];
	};
	if ((_65435_tokens.len() >= 3LL)) {
		if (((_65517_param.get()._field_token.get()._field_id == static_cast<jule::U32>(7LLU)) && (_65517_param.get()._field_token.get()._field_kind == jule::Str("&", 1)))) {
			if ((_65435_tokens.len() == 1LL)) {
				_227a57423_push_err(_self_.ptr(), _65435_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			};
			if (((_65435_tokens[1LL].get()._field_id == static_cast<jule::U32>(2LLU)) && (_65435_tokens[2LL].get()._field_id == static_cast<jule::U32>(11LLU)))) {
				_65517_param.get()._field_reference=true;
				_65435_tokens=_65435_tokens.slice(1LL);
				_65517_param.get()._field_token=_65435_tokens[0LL];
			};
		};
	};
	if ((_65517_param.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_65517_param.get()._field_ident=jule::Str("<anonymous>", 11);
		_227a5b0c5_build_param_type(_self_, _65517_param,_65435_tokens);
	} else {
		_227a5b3e4_build_param_body(_self_, _65517_param,_65435_tokens);
	};
	return _65517_param;
}



inline void _227a5b977_check_params(_227a569b6_Parser* _self_, jule::Slice<jule::Ptr<_244868bc9_ParamDecl>>& _69736_params) {
	{
		auto &expr = _69736_params;
		auto it = expr.begin();
		_iter_begin_22a321bc9:;
		if (it != expr.end()) {
			jule::Ptr<_244868bc9_ParamDecl> _69821_param = *it;
			{
				if ((_24486903c_is_self(_69821_param.ptr()) || (_69821_param.get()._field_kind != nullptr))) {
					goto _iter_next_22a321bc9;
				};
				if ((_69821_param.get()._field_token == nullptr)) {
					_227a57423_push_err(&(*_self_), _69821_param.get()._field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
				} else {
					_69821_param.get()._field_kind=jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_69821_param.get()._field_token, ._field_kind=static_cast<jule::Any>(jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_69821_param.get()._field_token, ._field_ident=_69821_param.get()._field_token.get()._field_kind, }))});
					_69821_param.get()._field_ident=jule::Str("<anonymous>", 11);
				};
			}
			_iter_next_22a321bc9:;
			++it;
			goto _iter_begin_22a321bc9;
		}
		_iter_end_22a321bc9:;
	};
}



inline jule::Slice<jule::Ptr<_244868bc9_ParamDecl>> _227a5bd2e_build_params(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _71737_tokens, jule::Bool _71755_method) {
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _71818_parts;;
	jule::Slice<_242dbab89_Log> _71825_errs;;
	std::tie(_71818_parts,_71825_errs) = _227a55762_parts(_71737_tokens,static_cast<jule::U32>(8LLU),true);
	_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_71825_errs);
	if ((_71818_parts.len() == 0LL)) {
		return nullptr;
	};
	jule::Slice<jule::Ptr<_244868bc9_ParamDecl>> _72417_params = nullptr;;
	if ((_71755_method && (_71818_parts.len() > 0LL))) {
		jule::Ptr<_244868bc9_ParamDecl> _72621_param = _227a5a8dd_build_self_param(_self_.ptr(), _71818_parts[0LL]);;
		if (((_72621_param != nullptr) && _24486903c_is_self(_72621_param.ptr()))) {
			_72417_params = jule::alloc_for_append(_72417_params,1);_72417_params.__push(_72621_param);;
			_71818_parts=_71818_parts.slice(1LL);
		};
	};
	{
		auto &expr = _71818_parts;
		auto it = expr.begin();
		_iter_begin_22a3264c5:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _73321_part = *it;
			{
				jule::Ptr<_244868bc9_ParamDecl> _73421_param = _227a5b702_build_param(_self_, _73321_part);;
				if ((_73421_param != nullptr)) {
					_72417_params = jule::alloc_for_append(_72417_params,1);_72417_params.__push(_73421_param);;
				};
			}
			_iter_next_22a3264c5:;
			++it;
			goto _iter_begin_22a3264c5;
		}
		_iter_end_22a3264c5:;
	};
	_227a5b977_check_params(_self_.ptr(), _72417_params);
	return _72417_params;
}



inline std::tuple<jule::Ptr<_24485b2e8_RetTypeDecl>,jule::Bool> _227a5c1d6_build_multi_ret_type(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _74445_tokens, jule::I32& _74468_i) {
	jule::Ptr<_24485b2e8_RetTypeDecl> _74478_t = jule::Ptr<_24485b2e8_RetTypeDecl>();
	jule::Bool _74495_ok = jule::Bool();
	_74478_t=jule::new_ptr<_24485b2e8_RetTypeDecl>();
	(_74468_i)++;
	if ((_74468_i >= _74445_tokens.len())) {
		(_74468_i)--;
		std::tie(_74478_t.get()._field_kind,_74495_ok) = _227a58d3c_build_type(_self_, _74445_tokens,(&(_74468_i)),false);
		return std::make_tuple(_74478_t,_74495_ok);
	};
	(_74468_i)--;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _75417_range_tokens = _227a54b6d_range(_74468_i,jule::Str("(", 1),jule::Str(")", 1),_74445_tokens);;
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _75618_parts;;
	jule::Slice<_242dbab89_Log> _75625_errs;;
	std::tie(_75618_parts,_75625_errs) = _227a55762_parts(_75417_range_tokens,static_cast<jule::U32>(8LLU),true);
	_self_.get()._field_errors=jule::append(_self_.get()._field_errors,_75625_errs);
	if ((_75618_parts.len() == 0LL)) {
		return std::make_tuple(_74478_t,_74495_ok);
	};
	jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _76217_types = jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>::alloc(0LL,_75618_parts.len());;
	_74478_t.get()._field_idents=jule::Slice<jule::Ptr<_2431e4523_Token>>::alloc(0LL,_75618_parts.len());
	{
		auto &expr = _75618_parts;
		auto it = expr.begin();
		_iter_begin_22a32cb4c:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _76421_part = *it;
			{
				jule::Ptr<_2431e4523_Token> _76521_token = _76421_part[0LL];;
				jule::I32 _76621_offset = 0LL;;
				if ((_76421_part.len() > 1LL)) {
					_76521_token=_76421_part[1LL];
					if ((_76521_token.get()._field_id == static_cast<jule::U32>(11LLU))) {
						_76621_offset=2LL;
						if ((_76421_part.len() < 3LL)) {
							_227a57423_push_err(_self_.ptr(), _76521_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
							goto _iter_next_22a32cb4c;
						};
					};
				};
				_76521_token=_76421_part[0LL];
				if ((_76621_offset != 2LL)) {
					jule::Ptr<_2431e4523_Token> _78225_new_token = jule::new_ptr<_2431e4523_Token>((*(_76521_token)));;
					_78225_new_token.get()._field_kind=jule::Str("<anonymous>", 11);
					_74478_t.get()._field_idents = jule::alloc_for_append(_74478_t.get()._field_idents,1);_74478_t.get()._field_idents.__push(_78225_new_token);;
				} else {
					_74478_t.get()._field_idents = jule::alloc_for_append(_74478_t.get()._field_idents,1);_74478_t.get()._field_idents.__push(_76521_token);;
				};
				jule::Ptr<_2448581d5_TypeDecl> _78922_tk;;
				std::tie(_78922_tk,std::ignore) = _227a58d3c_build_type(_self_, _76421_part,(&(_76621_offset)),true);
				if ((_76621_offset < _76421_part.len())) {
					_227a57423_push_err(_self_.ptr(), _76421_part[_76621_offset],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				};
				_76217_types = jule::alloc_for_append(_76217_types,1);_76217_types.__push(_78922_tk);;
			}
			_iter_next_22a32cb4c:;
			++it;
			goto _iter_begin_22a32cb4c;
		}
		_iter_end_22a32cb4c:;
	};
	if ((_76217_types.len() > 1LL)) {
		_74478_t.get()._field_kind=jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_74445_tokens[0LL], ._field_kind=static_cast<jule::Any>(jule::new_ptr<_244859c75_TupleTypeDecl>(_244859c75_TupleTypeDecl{._field_types=_76217_types}))});
	} else {
		_74478_t.get()._field_kind=_76217_types[0LL];
	};
	_74495_ok=true;
	return std::make_tuple(_74478_t,_74495_ok);
}



inline std::tuple<jule::Ptr<_24485b2e8_RetTypeDecl>,jule::Bool> _227a5c58d_build_ret_type(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _81239_tokens, jule::I32& _81262_i) {
	jule::Ptr<_24485b2e8_RetTypeDecl> _81272_t = jule::Ptr<_24485b2e8_RetTypeDecl>();
	jule::Bool _81289_ok = jule::Bool();
	_81272_t=jule::new_ptr<_24485b2e8_RetTypeDecl>();
	if ((_81262_i >= _81239_tokens.len())) {
		return std::make_tuple(_81272_t,_81289_ok);
	};
	jule::Ptr<_2431e4523_Token> _81817_token = _81239_tokens[_81262_i];;
	{
		auto &_match_expr{ _81817_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a33665b:;
			{
				if ((_81817_token.get()._field_kind == jule::Str("{", 1))) {
					return std::make_tuple(_81272_t,_81289_ok);
				};
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_22a3366c2:;
			{
				if ((_81817_token.get()._field_kind == jule::Str("=", 1))) {
					return std::make_tuple(_81272_t,_81289_ok);
				};
			}
		}
		else if (_match_expr == static_cast<jule::U32>(11LLU)) {
			_case_begin_22a336738:;
			{
				if (((_81262_i + 1LL) >= _81239_tokens.len())) {
					_227a57423_push_err(_self_.ptr(), _81817_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					return std::make_tuple(_81272_t,_81289_ok);
				};
				(_81262_i)++;
				_81817_token=_81239_tokens[_81262_i];
				if ((_81817_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _81817_token.get()._field_kind };
						
						if (_match_expr == jule::Str("(", 1)) {
							_case_begin_22a339274:;
							{
								std::tie(_81272_t,_81289_ok) = _227a5c1d6_build_multi_ret_type(_self_, _81239_tokens,_81262_i);
								return std::make_tuple(_81272_t,_81289_ok);
							}
						}
						else if (_match_expr == jule::Str("{", 1)) {
							_case_begin_22a3392da:;
							{
								_227a57423_push_err(_self_.ptr(), _81817_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
								return std::make_tuple(_81272_t,_81289_ok);
							}
						}
						_match_end_22a3391b9:;
					};
				};
				std::tie(_81272_t.get()._field_kind,_81289_ok) = _227a58d3c_build_type(_self_, _81239_tokens,(&(_81262_i)),true);
				return std::make_tuple(_81272_t,_81289_ok);
			}
		}
		_match_end_22a3365a1:;
	};
	(_81262_i)++;
	_227a57423_push_err(_self_.ptr(), _81817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return std::make_tuple(_81272_t,_81289_ok);
}



inline jule::Ptr<_244869ee9_FnDecl> _227a5c9de_build_fn_prototype(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _85743_tokens, jule::I32& _85766_i, jule::Bool _85774_method) {
	jule::Ptr<_244869ee9_FnDecl> _85817_f = jule::new_ptr<_244869ee9_FnDecl>(_244869ee9_FnDecl{._field_token=_85743_tokens[_85766_i], });;
	if ((_85817_f.get()._field_token.get()._field_id == static_cast<jule::U32>(38LLU))) {
		_85817_f.get()._field_statically=true;
		(_85766_i)++;
		if ((_85766_i >= _85743_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _85817_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		_85817_f.get()._field_token=_85743_tokens[_85766_i];
	};
	if ((_85817_f.get()._field_token.get()._field_id == static_cast<jule::U32>(35LLU))) {
		_85817_f.get()._field_unsafety=true;
		(_85766_i)++;
		if ((_85766_i >= _85743_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _85817_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		_85817_f.get()._field_token=_85743_tokens[_85766_i];
	};
	(_85766_i)++;
	if ((_85766_i >= _85743_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _85817_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2431e4523_Token> _89113_tok = _85743_tokens[_85766_i];;
	if ((_89113_tok.get()._field_id == static_cast<jule::U32>(2LLU))) {
		(_85766_i)++;
		if ((_85766_i >= _85743_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _85817_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		_85817_f.get()._field_ident=_89113_tok.get()._field_kind;
	} else {
		_85817_f.get()._field_ident=jule::Str("<anonymous>", 11);
	};
	jule::Ptr<_2431e4523_Token> _90313_error_token = _85743_tokens[_85766_i];;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _90417_generics_tokens = _227a54b6d_range(_85766_i,jule::Str("[", 1),jule::Str("]", 1),_85743_tokens);;
	if ((_90417_generics_tokens != nullptr)) {
		_85817_f.get()._field_generics=_227a5a5d0_build_generics(_self_, _90417_generics_tokens,_90313_error_token);
	};
	if ((_85743_tokens[_85766_i].get()._field_kind != jule::Str("(", 1))) {
		_227a57423_push_err(_self_.ptr(), _85743_tokens[_85766_i],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _91417_params_toks = _227a54b6d_range(_85766_i,jule::Str("(", 1),jule::Str(")", 1),_85743_tokens);;
	if ((_91417_params_toks.len() > 0LL)) {
		_85817_f.get()._field_params=_227a5bd2e_build_params(_self_, _91417_params_toks,_85774_method);
	};
	if ((_85766_i < _85743_tokens.len())) {
		jule::Ptr<_2431e4523_Token> _92017_token = _85743_tokens[_85766_i];;
		if (((_92017_token.get()._field_id == static_cast<jule::U32>(7LLU)) && (_92017_token.get()._field_kind == jule::Str("!", 1)))) {
			_85817_f.get()._field_exceptional=true;
			(_85766_i)++;
		};
	};
	std::tie(_85817_f.get()._field_result,std::ignore) = _227a5c58d_build_ret_type(_self_, _85743_tokens,_85766_i);
	return _85817_f;
}



inline jule::Ptr<_244869ee9_FnDecl> _227a5ce40_build_fn(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _93333_tokens, jule::Bool _93351_method, jule::Bool _93365_prototype) {
	jule::I32 _93417_i = 0LL;;
	jule::Ptr<_244869ee9_FnDecl> _93517_f = _227a5c9de_build_fn_prototype(_self_, _93333_tokens,_93417_i,_93351_method);;
	if (_93365_prototype) {
		if ((_93417_i < _93333_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _93333_tokens[(_93417_i + 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		};
		return _93517_f;
	} else if ((_93517_f == nullptr)) {
		return _93517_f;
	};
	if ((_93417_i >= _93333_tokens.len())) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _93517_f.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _95117_block_tokens = _227a54b6d_range(_93417_i,jule::Str("{", 1),jule::Str("}", 1),_93333_tokens);;
	if ((_95117_block_tokens != nullptr)) {
		_93517_f.get()._field_scope=_227a5848a_build_scope(_self_, _95117_block_tokens,_93333_tokens[(_93417_i - 1LL)]);
		_93517_f.get()._field_scope.get()._field_unsafety=_93517_f.get()._field_unsafety;
		if ((_93417_i < _93333_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _93333_tokens[_93417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		};
	} else {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _93517_f.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	return _93517_f;
}



inline jule::Slice<jule::Ptr<_2431e4523_Token>> _227a5d24d_get_use_decl_selectors(_227a569b6_Parser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _96745_tokens) {
	jule::I32 _96817_i = 0LL;;
	_96745_tokens=_227a54b6d_range(_96817_i,jule::Str("{", 1),jule::Str("}", 1),_96745_tokens);
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _97018_parts;;
	jule::Slice<_242dbab89_Log> _97025_errs;;
	std::tie(_97018_parts,_97025_errs) = _227a55762_parts(_96745_tokens,static_cast<jule::U32>(8LLU),true);
	if ((_97025_errs.len() > 0LL)) {
		(*_self_)._field_errors=jule::append((*_self_)._field_errors,_97025_errs);
		return nullptr;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _97617_selectors = jule::Slice<jule::Ptr<_2431e4523_Token>>::alloc(0LL,_97018_parts.len());;
	{
		auto &expr = _97018_parts;
		auto it = expr.begin();
		_iter_begin_22a350664:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _97721_part = *it;
			{
				if ((_97721_part.len() > 1LL)) {
					_227a57423_push_err(&(*_self_), _97721_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				};
				jule::Ptr<_2431e4523_Token> _98121_tok = _97721_part[0LL];;
				if (((_98121_tok.get()._field_id != static_cast<jule::U32>(2LLU)) && (_98121_tok.get()._field_id != static_cast<jule::U32>(28LLU)))) {
					_227a57423_push_err(&(*_self_), _98121_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					_227a57742_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					goto _iter_next_22a350664;
				};
				_97617_selectors = jule::alloc_for_append(_97617_selectors,1);_97617_selectors.__push(_98121_tok);;
			}
			_iter_next_22a350664:;
			++it;
			goto _iter_begin_22a350664;
		}
		_iter_end_22a350664:;
	};
	return _97617_selectors;
}



inline void _227a5d56c_build_cpp_use_decl(_227a569b6_Parser* _self_, jule::Ptr<_244870c25_UseDecl>& _99242_decl, jule::Slice<jule::Ptr<_2431e4523_Token>>& _99259_tokens) {
	if ((_99259_tokens.len() > 1LL)) {
		_227a57423_push_err(&(*_self_), _99259_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2431e4523_Token> _99613_token = _99259_tokens[0LL];;
	if (((_99613_token.get()._field_id != static_cast<jule::U32>(6LLU)) || ((_99613_token.get()._field_kind[0LL] != '`') && (_99613_token.get()._field_kind[0LL] != '\"')))) {
		_227a57423_push_err(&(*_self_), _99613_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;;
	};
	_99242_decl.get()._field_cpp_linked=true;
	_99242_decl.get()._field_link_path=_99613_token.get()._field_kind.slice(1LL,(_99613_token.get()._field_kind.len() - 1LL));
}



inline void _227a5d88b_build_std_use_decl(_227a569b6_Parser* _self_, jule::Ptr<_244870c25_UseDecl>& _100542_decl, jule::Slice<jule::Ptr<_2431e4523_Token>> _100562_tokens) {
	_100542_decl.get()._field_std=true;
	jule::Ptr<_2431e4523_Token> _100817_token = _100562_tokens[0LL];;
	if ((_100562_tokens.len() < 3LL)) {
		_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;;
	};
	_100562_tokens=_100562_tokens.slice(2LL);
	_100817_token=_100562_tokens[(_100562_tokens.len() - 1LL)];
	{
		auto &_match_expr{ _100817_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(23LLU)) {
			_case_begin_22a35942b:;
			{
				_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;;
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a3594a3:;
			{
				if ((_100817_token.get()._field_kind != jule::Str("}", 1))) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				jule::Slice<jule::Ptr<_2431e4523_Token>> _102521_selectors = nullptr;;
				std::tie(_100562_tokens,_102521_selectors) = _227a54e15_range_last(_100562_tokens);
				_100542_decl.get()._field_selected=_227a5d24d_get_use_decl_selectors(&(*_self_), _102521_selectors);
				if ((_100562_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_100817_token=_100562_tokens[(_100562_tokens.len() - 1LL)];
				if ((_100817_token.get()._field_id != static_cast<jule::U32>(23LLU))) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_100562_tokens=_100562_tokens.slice(0LL,(_100562_tokens.len() - 1LL));
				if ((_100562_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_22a35952a:;
			{
				if ((_100817_token.get()._field_kind != jule::Str("*", 1))) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_100562_tokens=_100562_tokens.slice(0LL,(_100562_tokens.len() - 1LL));
				if ((_100562_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_100817_token=_100562_tokens[(_100562_tokens.len() - 1LL)];
				if ((_100817_token.get()._field_id != static_cast<jule::U32>(23LLU))) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_100562_tokens=_100562_tokens.slice(0LL,(_100562_tokens.len() - 1LL));
				if ((_100562_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _100817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_100542_decl.get()._field_full=true;
			}
		}
		_match_end_22a3593a4:;
	};
	_100542_decl.get()._field_link_path=(jule::Str("std::", 5) + _227a565ed_tokstoa(_100562_tokens));
}



inline void _227a5dbaa_build_ident_use_decl(_227a569b6_Parser* _self_, jule::Ptr<_244870c25_UseDecl>& _106744_decl, jule::Slice<jule::Ptr<_2431e4523_Token>> _106764_tokens) {
	_106744_decl.get()._field_std=false;
	jule::Ptr<_2431e4523_Token> _107017_token = _106764_tokens[(_106764_tokens.len() - 1LL)];;
	{
		auto &_match_expr{ _107017_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(23LLU)) {
			_case_begin_22a3644ad:;
			{
				_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;;
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a364689:;
			{
				if ((_107017_token.get()._field_kind != jule::Str("}", 1))) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				jule::Slice<jule::Ptr<_2431e4523_Token>> _108121_selectors = nullptr;;
				std::tie(_106764_tokens,_108121_selectors) = _227a54e15_range_last(_106764_tokens);
				_106744_decl.get()._field_selected=_227a5d24d_get_use_decl_selectors(&(*_self_), _108121_selectors);
				if ((_106764_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_107017_token=_106764_tokens[(_106764_tokens.len() - 1LL)];
				if ((_107017_token.get()._field_id != static_cast<jule::U32>(23LLU))) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_106764_tokens=_106764_tokens.slice(0LL,(_106764_tokens.len() - 1LL));
				if ((_106764_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_22a364700:;
			{
				if ((_107017_token.get()._field_kind != jule::Str("*", 1))) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_106764_tokens=_106764_tokens.slice(0LL,(_106764_tokens.len() - 1LL));
				if ((_106764_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_107017_token=_106764_tokens[(_106764_tokens.len() - 1LL)];
				if ((_107017_token.get()._field_id != static_cast<jule::U32>(23LLU))) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_106764_tokens=_106764_tokens.slice(0LL,(_106764_tokens.len() - 1LL));
				if ((_106764_tokens.len() == 0LL)) {
					_227a57423_push_err(&(*_self_), _107017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;;
				};
				_106744_decl.get()._field_full=true;
			}
		}
		_match_end_22a364458:;
	};
	_106744_decl.get()._field_link_path=_227a565ed_tokstoa(_106764_tokens);
}



inline void _227a5dec9_parse_use_decl(_227a569b6_Parser* _self_, jule::Ptr<_244870c25_UseDecl>& _113038_decl, jule::Slice<jule::Ptr<_2431e4523_Token>> _113058_tokens) {
	if (_113038_decl.get()._field_cpp_linked) {
		_227a5d56c_build_cpp_use_decl(&(*_self_), _113038_decl,_113058_tokens);
		return;;
	};
	jule::Ptr<_2431e4523_Token> _113617_token = _113058_tokens[0LL];;
	if ((_113617_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(&(*_self_), _113617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;;
	};
	if (((_113058_tokens.len() > 2LL) && (_113058_tokens[1LL].get()._field_id == static_cast<jule::U32>(12LLU)))) {
		_113038_decl.get()._field_alias=_113617_token.get()._field_kind;
		if ((_113058_tokens[2LL].get()._field_id != static_cast<jule::U32>(2LLU))) {
			_227a57423_push_err(&(*_self_), _113617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			_227a57742_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			return;;
		};
		_113058_tokens=_113058_tokens.slice(2LL);
		_113617_token=_113058_tokens[0LL];
	};
	;
	{
		
		if ((_113617_token.get()._field_kind == jule::Str("std", 3))) {
			_case_begin_22a370d05:;
			{
				_227a5d88b_build_std_use_decl(&(*_self_), _113038_decl,_113058_tokens);
			}
		}
		else {
			_case_begin_22a372dc3:;
			{
				_227a5dbaa_build_ident_use_decl(&(*_self_), _113038_decl,_113058_tokens);
			}
		}
		_match_end_22a372d5c:;
	};
}



inline jule::Ptr<_244870c25_UseDecl> _227a5e381_build_use_decl(_227a569b6_Parser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _116437_tokens, jule::Bool _116455_cpp_linked) {
	jule::Ptr<_244870c25_UseDecl> _116517_decl = jule::new_ptr<_244870c25_UseDecl>(_244870c25_UseDecl{._field_token=_116437_tokens[0LL], ._field_cpp_linked=_116455_cpp_linked, });;
	if ((_116437_tokens.len() < 2LL)) {
		_227a57423_push_err(&(*_self_), _116517_decl.get()._field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>());
		return nullptr;
	};
	_116437_tokens=_116437_tokens.slice(1LL);
	_227a5dec9_parse_use_decl(&(*_self_), _116517_decl,_116437_tokens);
	return _116517_decl;
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a5e75a_build_type_enum_item_kind(jule::Ptr<_227a569b6_Parser> _self_, jule::I32& _117850_i, jule::Slice<jule::Ptr<_2431e4523_Token>>& _117863_tokens) {
	jule::I32 _117917_brace_n = 0LL;;
	jule::I32 _118013_expr_start = _117850_i;;
	for (; (_117850_i < _117863_tokens.len()); (_117850_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _118217_t = _117863_tokens[_117850_i];;
			if ((_118217_t.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _118217_t.get()._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_22a3773e4:;
						{
							(_117917_brace_n)++;
							goto _iter_next_22a376c2e;
						}
					}
					else {
						_case_begin_22a377ca7:;
						{
							(_117917_brace_n)--;
						}
					}
					_match_end_22a377a98:;
				};
			};
			if ((_117917_brace_n > 0LL)) {
				goto _iter_next_22a376c2e;
			};
			if (((_118217_t.get()._field_id == static_cast<jule::U32>(8LLU)) || ((_117850_i + 1LL) >= _117863_tokens.len()))) {
				jule::Slice<jule::Ptr<_2431e4523_Token>> _119825_kind_tokens = nullptr;;
				if ((_118217_t.get()._field_id == static_cast<jule::U32>(8LLU))) {
					_119825_kind_tokens=_117863_tokens.slice(_118013_expr_start,_117850_i);
				} else {
					_119825_kind_tokens=_117863_tokens.slice(_118013_expr_start);
				};
				jule::I32 _120425_j = 0LL;;
				jule::Ptr<_2448581d5_TypeDecl> _120526_kind;;
				std::tie(_120526_kind,std::ignore) = _227a58d3c_build_type(_self_, _119825_kind_tokens,(&(_120425_j)),true);
				if ((_120425_j < _119825_kind_tokens.len())) {
					_227a57423_push_err(_self_.ptr(), _119825_kind_tokens[_120425_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				};
				return _120526_kind;
			};
		}
	_iter_next_22a376c2e:;
	}
	_iter_end_22a376c2e:;;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>> _227a5ea79_build_type_enum_items(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _121546_tokens) {
	jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>> _121617_items = jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>>::alloc(0LL,1LL);;
	jule::I32 _121717_i = 0LL;;
	for (; (_121717_i < _121546_tokens.len()); (_121717_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _121921_t = _121546_tokens[_121717_i];;
			jule::Ptr<_2448726c7_TypeEnumItemDecl> _122021_item = jule::new_ptr<_2448726c7_TypeEnumItemDecl>();;
			_122021_item.get()._field_token=_121921_t;
			if (((_122021_item.get()._field_token.get()._field_id == static_cast<jule::U32>(2LLU)) && ((_121546_tokens.len() - _121717_i) > 2LL))) {
				_122021_item.get()._field_ident=_122021_item.get()._field_token.get()._field_kind;
				_121921_t=_121546_tokens[(_121717_i + 1LL)];
				if ((_121921_t.get()._field_id == static_cast<jule::U32>(11LLU))) {
					_121717_i+=2LL;
					if (((_121717_i >= _121546_tokens.len()) || (_121546_tokens[_121717_i].get()._field_id == static_cast<jule::U32>(8LLU)))) {
						_227a57423_push_err(_self_.ptr(), _121921_t,jule::Str("type missing", 12),jule::Slice<jule::Any>());
						goto _iter_next_22a37cc02;
					};
				};
			};
			_122021_item.get()._field_kind=_227a5e75a_build_type_enum_item_kind(_self_, _121717_i,_121546_tokens);
			_121617_items = jule::alloc_for_append(_121617_items,1);_121617_items.__push(_122021_item);;
		}
	_iter_next_22a37cc02:;
	}
	_iter_end_22a37cc02:;;
	return _121617_items;
}



inline jule::Ptr<_2448728c5_TypeEnumDecl> _227a5ed87_build_type_enum_decl(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _123945_tokens) {
	jule::I32 _124017_i = 1LL;;
	jule::Ptr<_2448728c5_TypeEnumDecl> _124117_e = jule::new_ptr<_2448728c5_TypeEnumDecl>(_2448728c5_TypeEnumDecl{._field_token=_123945_tokens[_124017_i], });;
	if ((_124117_e.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _124117_e.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	};
	_124117_e.get()._field_ident=_124117_e.get()._field_token.get()._field_kind;
	_124017_i+=3LL;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _125017_item_tokens = _227a54b6d_range(_124017_i,jule::Str("{", 1),jule::Str("}", 1),_123945_tokens);;
	if ((_125017_item_tokens == nullptr)) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _124117_e.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _124117_e;
	} else if ((_124017_i < _123945_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _123945_tokens[_124017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	_124117_e.get()._field_end=_123945_tokens[(_124017_i - 1LL)];
	_124117_e.get()._field_items=_227a5ea79_build_type_enum_items(_self_, _125017_item_tokens);
	return _124117_e;
}



inline jule::Ptr<_24485c706_Expr> _227a6023e_build_enum_item_expr(jule::Ptr<_227a569b6_Parser> _self_, jule::I32& _126445_i, jule::Slice<jule::Ptr<_2431e4523_Token>>& _126458_tokens) {
	jule::I32 _126517_brace_n = 0LL;;
	jule::I32 _126613_expr_start = _126445_i;;
	for (; (_126445_i < _126458_tokens.len()); (_126445_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _126817_t = _126458_tokens[_126445_i];;
			if ((_126817_t.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _126817_t.get()._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_22a3885ae:;
						{
							(_126517_brace_n)++;
							goto _iter_next_22a387de9;
						}
					}
					else {
						_case_begin_22a388e72:;
						{
							(_126517_brace_n)--;
						}
					}
					_match_end_22a388c63:;
				};
			};
			if ((_126517_brace_n > 0LL)) {
				goto _iter_next_22a387de9;
			};
			if (((_126817_t.get()._field_id == static_cast<jule::U32>(8LLU)) || ((_126445_i + 1LL) >= _126458_tokens.len()))) {
				jule::Slice<jule::Ptr<_2431e4523_Token>> _128425_expr_tokens = nullptr;;
				if ((_126817_t.get()._field_id == static_cast<jule::U32>(8LLU))) {
					_128425_expr_tokens=_126458_tokens.slice(_126613_expr_start,_126445_i);
				} else {
					_128425_expr_tokens=_126458_tokens.slice(_126613_expr_start);
				};
				return _227a57a50_build_expr(_self_, _128425_expr_tokens);
			};
		}
	_iter_next_22a387de9:;
	}
	_iter_end_22a387de9:;;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_244871198_EnumItemDecl>> _227a6054c_build_enum_items(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _129641_tokens) {
	jule::Slice<jule::Ptr<_244871198_EnumItemDecl>> _129717_items = jule::Slice<jule::Ptr<_244871198_EnumItemDecl>>::alloc(0LL,1LL);;
	jule::I32 _129817_i = 0LL;;
	for (; (_129817_i < _129641_tokens.len()); (_129817_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _130021_t = _129641_tokens[_129817_i];;
			jule::Ptr<_244871198_EnumItemDecl> _130121_item = jule::new_ptr<_244871198_EnumItemDecl>();;
			_130121_item.get()._field_token=_130021_t;
			if ((_130121_item.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
				_227a57423_push_err(_self_.ptr(), _130121_item.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			};
			_130121_item.get()._field_ident=_130121_item.get()._field_token.get()._field_kind;
			if ((((_129817_i + 1LL) >= _129641_tokens.len()) || (_129641_tokens[(_129817_i + 1LL)].get()._field_id == static_cast<jule::U32>(8LLU)))) {
				if (((_129817_i + 1LL) < _129641_tokens.len())) {
					(_129817_i)++;
				};
				_129717_items = jule::alloc_for_append(_129717_items,1);_129717_items.__push(_130121_item);;
				goto _iter_next_22a38c926;
			};
			(_129817_i)++;
			_130021_t=_129641_tokens[_129817_i];
			(_129817_i)++;
			if ((_130021_t.get()._field_id != static_cast<jule::U32>(11LLU))) {
				_227a57423_push_err(_self_.ptr(), _130021_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected colon \":\" for assignment", 33),jule::Slice<jule::Any>());
				goto _iter_next_22a38c926;
			};
			if (((_129817_i >= _129641_tokens.len()) || (_129641_tokens[_129817_i].get()._field_id == static_cast<jule::U32>(8LLU)))) {
				_227a57423_push_err(_self_.ptr(), _130021_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
				goto _iter_next_22a38c926;
			};
			_130121_item.get()._field_expr=_227a6023e_build_enum_item_expr(_self_, _129817_i,_129641_tokens);
			_129717_items = jule::alloc_for_append(_129717_items,1);_129717_items.__push(_130121_item);;
		}
	_iter_next_22a38c926:;
	}
	_iter_end_22a38c926:;;
	return _129717_items;
}



inline jule::Ptr<_244871bc1_EnumDecl> _227a6085a_build_enum_decl(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _133340_tokens) {
	if ((_133340_tokens.len() < 3LL)) {
		_227a57423_push_err(_self_.ptr(), _133340_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_244871bc1_EnumDecl> _133817_e = jule::new_ptr<_244871bc1_EnumDecl>(_244871bc1_EnumDecl{._field_token=_133340_tokens[1LL], });;
	if ((_133817_e.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _133817_e.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	};
	_133817_e.get()._field_ident=_133817_e.get()._field_token.get()._field_kind;
	jule::I32 _134617_i = 2LL;;
	if ((_133340_tokens[_134617_i].get()._field_id == static_cast<jule::U32>(11LLU))) {
		(_134617_i)++;
		if ((_134617_i >= _133340_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _133340_tokens[(_134617_i - 1LL)],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return _133817_e;
		};
		std::tie(_133817_e.get()._field_kind,std::ignore) = _227a58d3c_build_type(_self_, _133340_tokens,(&(_134617_i)),true);
		if ((_134617_i >= _133340_tokens.len())) {
			_227a56ce6_stop(_self_.ptr());
			_227a57423_push_err(_self_.ptr(), _133817_e.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
			_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
			return _133817_e;
		};
	} else {
		_133817_e.get()._field_kind=nullptr;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _136317_item_tokens = _227a54b6d_range(_134617_i,jule::Str("{", 1),jule::Str("}", 1),_133340_tokens);;
	if ((_136317_item_tokens == nullptr)) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _133817_e.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _133817_e;
	} else if ((_134617_i < _133340_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _133340_tokens[_134617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	_133817_e.get()._field_end=_133340_tokens[(_134617_i - 1LL)];
	_133817_e.get()._field_items=_227a6054c_build_enum_items(_self_, _136317_item_tokens);
	return _133817_e;
}



inline jule::Any _227a60b68_build_node_enum_decl(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _137745_tokens) {
	if (((_137745_tokens.len() > 3LL) && (_137745_tokens[2LL].get()._field_id == static_cast<jule::U32>(11LLU)))) {
		if ((_137745_tokens[3LL].get()._field_id == static_cast<jule::U32>(10LLU))) {
			return static_cast<jule::Any>(_227a5ed87_build_type_enum_decl(_self_, _137745_tokens));
		};
	};
	return static_cast<jule::Any>(_227a6085a_build_enum_decl(_self_, _137745_tokens));
}



inline jule::Ptr<_244872e25_FieldDecl> _227a60e76_build_field(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _138635_tokens) {
	jule::Ptr<_244872e25_FieldDecl> _138717_f = jule::new_ptr<_244872e25_FieldDecl>(_244872e25_FieldDecl{});;
	_138717_f.get()._field_public=(_138635_tokens[0LL].get()._field_id == static_cast<jule::U32>(21LLU));
	if (_138717_f.get()._field_public) {
		if ((_138635_tokens.len() == 1LL)) {
			_227a57423_push_err(_self_.ptr(), _138635_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		_138635_tokens=_138635_tokens.slice(1LL);
	};
	_138717_f.get()._field_mutable=(_138635_tokens[0LL].get()._field_id == static_cast<jule::U32>(36LLU));
	if (_138717_f.get()._field_mutable) {
		if ((_138635_tokens.len() == 1LL)) {
			_227a57423_push_err(_self_.ptr(), _138635_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		_138635_tokens=_138635_tokens.slice(1LL);
	};
	_138717_f.get()._field_token=_138635_tokens[0LL];
	if ((_138717_f.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _138717_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	};
	_138717_f.get()._field_ident=_138717_f.get()._field_token.get()._field_kind;
	if ((_138635_tokens.len() == 1LL)) {
		_227a57423_push_err(_self_.ptr(), _138635_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((_138635_tokens[1LL].get()._field_id != static_cast<jule::U32>(11LLU))) {
		_227a57423_push_err(_self_.ptr(), _138635_tokens[1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	};
	_138635_tokens=_138635_tokens.slice(2LL);
	jule::I32 _142417_i = 0LL;;
	std::tie(_138717_f.get()._field_kind,std::ignore) = _227a58d3c_build_type(_self_, _138635_tokens,(&(_142417_i)),true);
	if ((_142417_i < _138635_tokens.len())) {
		jule::Ptr<_2431e4523_Token> _142717_token = _138635_tokens[_142417_i];;
		if (((_142717_token.get()._field_id != static_cast<jule::U32>(7LLU)) || (_142717_token.get()._field_kind != jule::Str("=", 1)))) {
			_227a57423_push_err(_self_.ptr(), _138635_tokens[_142417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		(_142417_i)++;
		if ((_142417_i >= _138635_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _142717_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return nullptr;
		};
		_138635_tokens=_138635_tokens.slice(_142417_i);
		_138717_f.get()._field_default=_227a57a50_build_expr(_self_, _138635_tokens);
	};
	return _138717_f;
}



inline jule::Slice<jule::Ptr<_244872e25_FieldDecl>> _227a612a6_build_struct_decl_fields(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _144448_tokens) {
	jule::Slice<jule::Ptr<_244872e25_FieldDecl>> _144517_fields = nullptr;;
	jule::Slice<jule::Ptr<_227a3a406_stmt>> _144617_stmts = _227a3a79c_split_stmts(_144448_tokens);;
	{
		auto &expr = _144617_stmts;
		auto it = expr.begin();
		_iter_begin_22a3aab31:;
		if (it != expr.end()) {
			jule::Ptr<_227a3a406_stmt> _144721_stmt = *it;
			{
				_144448_tokens=_144721_stmt.get()._field_tokens;
				jule::Ptr<_244872e25_FieldDecl> _144921_f = _227a60e76_build_field(_self_, _144448_tokens);;
				_144517_fields = jule::alloc_for_append(_144517_fields,1);_144517_fields.__push(_144921_f);;
			}
			_iter_next_22a3aab31:;
			++it;
			goto _iter_begin_22a3aab31;
		}
		_iter_end_22a3aab31:;
	};
	return _144517_fields;
}



inline jule::Ptr<_244873783_StructDecl> _227a615c5_build_struct_decl(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _145542_tokens) {
	if ((_145542_tokens.len() < 3LL)) {
		_227a57423_push_err(_self_.ptr(), _145542_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::I32 _146117_i = 1LL;;
	jule::Ptr<_244873783_StructDecl> _146217_s = jule::new_ptr<_244873783_StructDecl>(_244873783_StructDecl{._field_token=_145542_tokens[_146117_i], });;
	if ((_146217_s.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _146217_s.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	};
	(_146117_i)++;
	if ((_146117_i >= _145542_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _145542_tokens[_146117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _146217_s;
	};
	_146217_s.get()._field_ident=_146217_s.get()._field_token.get()._field_kind;
	jule::Ptr<_2431e4523_Token> _147613_error_token = _145542_tokens[_146117_i];;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _147717_generics_tokens = _227a54b6d_range(_146117_i,jule::Str("[", 1),jule::Str("]", 1),_145542_tokens);;
	if ((_147717_generics_tokens != nullptr)) {
		_146217_s.get()._field_generics=_227a5a5d0_build_generics(_self_, _147717_generics_tokens,_147613_error_token);
	};
	if ((_146117_i >= _145542_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _145542_tokens[(_146117_i - 1LL)],jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _146217_s;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _148717_body_tokens = _227a54b6d_range(_146117_i,jule::Str("{", 1),jule::Str("}", 1),_145542_tokens);;
	if ((_148717_body_tokens == nullptr)) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _146217_s.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _146217_s;
	};
	if ((_146117_i < _145542_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _145542_tokens[_146117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	_146217_s.get()._field_fields=_227a612a6_build_struct_decl_fields(_self_, _148717_body_tokens);
	_146217_s.get()._field_end=_145542_tokens[(_146117_i - 1LL)];
	return _146217_s;
}



inline void _227a6184a_check_method_receiver(_227a569b6_Parser* _self_, jule::Ptr<_244869ee9_FnDecl>& _150241_f) {
	if (_150241_f.get()._field_statically) {
		if (((_150241_f.get()._field_params.len() > 0LL) && _24486903c_is_self(_150241_f.get()._field_params[0LL].ptr()))) {
			_227a57423_push_err(&(*_self_), _150241_f.get()._field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>());
		};
		return;;
	};
	if ((_150241_f.get()._field_params.len() == 0LL)) {
		_227a57423_push_err(&(*_self_), _150241_f.get()._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;;
	};
	jule::Ptr<_244868bc9_ParamDecl> _151513_param = _150241_f.get()._field_params[0LL];;
	if ((!(_24486903c_is_self(_151513_param.ptr())))) {
		_227a57423_push_err(&(*_self_), _150241_f.get()._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;;
	};
}



inline jule::Slice<jule::Ptr<_244869ee9_FnDecl>> _227a61b58_build_trait_methods(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _152243_tokens) {
	jule::Slice<jule::Ptr<_244869ee9_FnDecl>> _152317_methods = nullptr;;
	jule::Slice<jule::Ptr<_227a3a406_stmt>> _152417_stmts = _227a3a79c_split_stmts(_152243_tokens);;
	{
		auto &expr = _152417_stmts;
		auto it = expr.begin();
		_iter_begin_22a3ba019:;
		if (it != expr.end()) {
			jule::Ptr<_227a3a406_stmt> _152521_stmt = *it;
			{
				_152243_tokens=_152521_stmt.get()._field_tokens;
				if ((_152243_tokens.len() == 0LL)) {
					goto _iter_next_22a3ba019;
				};
				jule::Bool _153121_is_pub = false;;
				if ((_152243_tokens[0LL].get()._field_id == static_cast<jule::U32>(21LLU))) {
					_153121_is_pub=true;
					if ((_152243_tokens.len() == 1LL)) {
						_227a57423_push_err(_self_.ptr(), _152243_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						goto _iter_next_22a3ba019;
					};
					_152243_tokens=_152243_tokens.slice(1LL);
				};
				jule::Ptr<_244869ee9_FnDecl> _154121_f = _227a5ce40_build_fn(_self_, _152243_tokens,true,true);;
				if ((_154121_f != nullptr)) {
					if (_24486a34b_is_anon(_154121_f.ptr())) {
						_227a57423_push_err(_self_.ptr(), _154121_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					};
					_227a6184a_check_method_receiver(_self_.ptr(), _154121_f);
					if ((_154121_f.get()._field_generics.len() > 0LL)) {
						_227a57423_push_err(_self_.ptr(), _154121_f.get()._field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>());
					};
					_154121_f.get()._field_public=_153121_is_pub;
					_152317_methods = jule::alloc_for_append(_152317_methods,1);_152317_methods.__push(_154121_f);;
				};
			}
			_iter_next_22a3ba019:;
			++it;
			goto _iter_begin_22a3ba019;
		}
		_iter_end_22a3ba019:;
	};
	return _152317_methods;
}



inline jule::Ptr<_244873d8d_TraitDecl> _227a61e66_build_trait_decl(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _155741_tokens) {
	if ((_155741_tokens.len() < 3LL)) {
		_227a57423_push_err(_self_.ptr(), _155741_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_244873d8d_TraitDecl> _156217_t = jule::new_ptr<_244873d8d_TraitDecl>(_244873d8d_TraitDecl{._field_token=_155741_tokens[1LL], });;
	if ((_156217_t.get()._field_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a57423_push_err(_self_.ptr(), _156217_t.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	};
	_156217_t.get()._field_ident=_156217_t.get()._field_token.get()._field_kind;
	jule::I32 _157017_i = 2LL;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _157117_body_tokens = _227a54b6d_range(_157017_i,jule::Str("{", 1),jule::Str("}", 1),_155741_tokens);;
	if ((_157117_body_tokens == nullptr)) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _156217_t.get()._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_157017_i < _155741_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _155741_tokens[_157017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	_156217_t.get()._field_methods=_227a61b58_build_trait_methods(_self_, _157117_body_tokens);
	_156217_t.get()._field_end=_155741_tokens[(_157017_i - 1LL)];
	return _156217_t;
}



inline jule::Ptr<_244869ee9_FnDecl> _227a62274_build_cpp_link_fn(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _158641_tokens) {
	_158641_tokens=_158641_tokens.slice(1LL);
	jule::Ptr<_244869ee9_FnDecl> _158817_f = _227a5ce40_build_fn(_self_, _158641_tokens,false,true);;
	if ((_158817_f != nullptr)) {
		if (_24486a34b_is_anon(_158817_f.ptr())) {
			_227a57423_push_err(_self_.ptr(), _158817_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		};
		_158817_f.get()._field_cpp_linked=true;
	};
	return _158817_f;
}



inline jule::Ptr<_24486aec8_VarDecl> _227a62582_build_cpp_link_var(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _159842_tokens) {
	_159842_tokens=_159842_tokens.slice(1LL);
	jule::Ptr<_24486aec8_VarDecl> _160017_v = _227a59e1a_build_var(_self_, _159842_tokens);;
	if ((_160017_v != nullptr)) {
		_160017_v.get()._field_cpp_linked=true;
		if ((_160017_v.get()._field_expr != nullptr)) {
			_227a57423_push_err(_self_.ptr(), _160017_v.get()._field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>());
		};
	};
	return _160017_v;
}



inline jule::Ptr<_244873783_StructDecl> _227a62890_build_cpp_link_struct(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _161045_tokens) {
	_161045_tokens=_161045_tokens.slice(1LL);
	jule::Ptr<_244873783_StructDecl> _161217_s = _227a615c5_build_struct_decl(_self_, _161045_tokens);;
	if ((_161217_s != nullptr)) {
		_161217_s.get()._field_cpp_linked=true;
	};
	return _161217_s;
}



inline jule::Ptr<_24486e839_TypeAliasDecl> _227a62bc0_build_cpp_link_type_alias(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _161949_tokens) {
	_161949_tokens=_161949_tokens.slice(1LL);
	jule::Ptr<_24486e839_TypeAliasDecl> _162117_t = _227a5914a_build_type_alias_decl(_self_, _161949_tokens);;
	if ((_162117_t != nullptr)) {
		_162117_t.get()._field_cpp_linked=true;
	};
	return _162117_t;
}



inline jule::Ptr<_244870c25_UseDecl> _227a62ede_build_cpp_link_use(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _162842_tokens) {
	if ((_162842_tokens.len() == 1LL)) {
		_227a57423_push_err(_self_.ptr(), _162842_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	_162842_tokens=_162842_tokens.slice(1LL);
	;
	return _227a5e381_build_use_decl(_self_.ptr(), _162842_tokens,true);
}



inline jule::Any _227a632ec_build_cpp_link(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _163939_tokens) {
	jule::Ptr<_2431e4523_Token> _164017_token = _163939_tokens[0LL];;
	if ((_163939_tokens.len() == 1LL)) {
		_227a57423_push_err(_self_.ptr(), _164017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	_164017_token=_163939_tokens[1LL];
	{
		auto &_match_expr{ _164017_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(33LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
			_case_begin_22a3cee1e:;
			{
				return static_cast<jule::Any>(_227a62274_build_cpp_link_fn(_self_, _163939_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(9LLU) || _match_expr == static_cast<jule::U32>(34LLU)) {
			_case_begin_22a3d0b34:;
			{
				return static_cast<jule::Any>(_227a62582_build_cpp_link_var(_self_, _163939_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(25LLU)) {
			_case_begin_22a3d0b9a:;
			{
				return static_cast<jule::Any>(_227a62890_build_cpp_link_struct(_self_, _163939_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(10LLU)) {
			_case_begin_22a3d0c11:;
			{
				return static_cast<jule::Any>(_227a62bc0_build_cpp_link_type_alias(_self_, _163939_tokens));
			}
		}
		else {
			_case_begin_22a3d0a46:;
			{
				_227a57423_push_err(_self_.ptr(), _164017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_22a3d09d0:;
	};
	return nullptr;
}



inline jule::Ptr<_244869ee9_FnDecl> _227a6360a_get_method(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _166335_tokens) {
	jule::I32 _166417_i = 0LL;;
	jule::Ptr<_2431e4523_Token> _166517_token = _166335_tokens[_166417_i];;
	if ((_166517_token.get()._field_id == static_cast<jule::U32>(38LLU))) {
		if (((_166417_i + 1LL) >= _166335_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _166517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		(_166417_i)++;
		_166517_token=_166335_tokens[_166417_i];
	};
	if ((_166517_token.get()._field_id == static_cast<jule::U32>(35LLU))) {
		if (((_166417_i + 1LL) >= _166335_tokens.len())) {
			_227a57423_push_err(_self_.ptr(), _166517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		};
		(_166417_i)++;
		_166517_token=_166335_tokens[_166417_i];
	};
	if ((_166517_token.get()._field_id != static_cast<jule::U32>(33LLU))) {
		_227a57423_push_err(_self_.ptr(), _166517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_244869ee9_FnDecl> _168917_f = _227a5ce40_build_fn(_self_, _166335_tokens,true,false);;
	if (((_168917_f != nullptr) && _24486a34b_is_anon(_168917_f.ptr()))) {
		_227a57423_push_err(_self_.ptr(), _168917_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	return _168917_f;
}



inline void _227a63929_parse_impl_body(jule::Ptr<_227a569b6_Parser> _self_, jule::Ptr<_244874498_Impl>& _169640_ipl, jule::Slice<jule::Ptr<_2431e4523_Token>>& _169657_tokens) {
	jule::Slice<jule::Ptr<_227a3a406_stmt>> _169717_stmts = _227a3a79c_split_stmts(_169657_tokens);;
	{
		auto &expr = _169717_stmts;
		auto it = expr.begin();
		_iter_begin_22a3d9038:;
		if (it != expr.end()) {
			jule::Ptr<_227a3a406_stmt> _169821_stmt = *it;
			{
				_169657_tokens=_169821_stmt.get()._field_tokens;
				jule::Ptr<_2431e4523_Token> _170021_token = _169657_tokens[0LL];;
				jule::Bool _170121_is_pub = false;;
				{
					auto &_match_expr{ _170021_token.get()._field_id };
					
					if (_match_expr == static_cast<jule::U32>(39LLU)) {
						_case_begin_22a3da798:;
						{
							_227a580d3_push_directive(_self_.ptr(), _227a57d5d_build_directive(_self_.ptr(), _169657_tokens));
							goto _iter_next_22a3d9038;
						}
					}
					else if (_match_expr == static_cast<jule::U32>(21LLU)) {
						_case_begin_22a3da842:;
						{
							_170121_is_pub=true;
							if ((_169657_tokens.len() == 1LL)) {
								_227a57423_push_err(_self_.ptr(), _169657_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
								goto _iter_next_22a3d9038;
							};
							_169657_tokens=_169657_tokens.slice(1LL);
							if ((_169657_tokens.len() > 0LL)) {
								_170021_token=_169657_tokens[0LL];
							};
						}
					}
					_match_end_22a3da732:;
				};
				{
					auto &_match_expr{ _170021_token.get()._field_id };
					
					if (_match_expr == static_cast<jule::U32>(9LLU)) {
						_case_begin_22a3d981e:;
						{
							jule::Ptr<_24486aec8_VarDecl> _172025_v = _227a59e1a_build_var(_self_, _169657_tokens);;
							if ((_172025_v != nullptr)) {
								_172025_v.get()._field_public=_170121_is_pub;
								_169640_ipl.get()._field_statics = jule::alloc_for_append(_169640_ipl.get()._field_statics,1);_169640_ipl.get()._field_statics.__push(_172025_v);;
							};
						}
					}
					else if (_match_expr == static_cast<jule::U32>(38LLU) || _match_expr == static_cast<jule::U32>(33LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
						_case_begin_22a3db58a:;
						{
							jule::Ptr<_244869ee9_FnDecl> _172825_f = _227a6360a_get_method(_self_, _169657_tokens);;
							if ((_172825_f != nullptr)) {
								_227a6184a_check_method_receiver(_self_.ptr(), _172825_f);
								_227a64364_apply_fn_meta(_self_.ptr(), _172825_f,_170121_is_pub);
								_169640_ipl.get()._field_methods = jule::alloc_for_append(_169640_ipl.get()._field_methods,1);_169640_ipl.get()._field_methods.__push(_172825_f);;
							};
						}
					}
					else {
						_case_begin_22a3dac3d:;
						{
							_227a57423_push_err(_self_.ptr(), _170021_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							goto _iter_next_22a3d9038;
						}
					}
					_match_end_22a3dca75:;
				};
			}
			_iter_next_22a3d9038:;
			++it;
			goto _iter_begin_22a3d9038;
		}
		_iter_end_22a3d9038:;
	};
}



inline jule::Ptr<_244874498_Impl> _227a63c37_build_impl(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _174134_tokens) {
	jule::Ptr<_2431e4523_Token> _174217_token = _174134_tokens[0LL];;
	if ((_174134_tokens.len() < 2LL)) {
		_227a57423_push_err(_self_.ptr(), _174217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::I32 _174817_i = 1LL;;
	jule::Ptr<_2448581d5_TypeDecl> _175018_base;;
	jule::Bool _175028_ok;;
	std::tie(_175018_base,_175028_ok) = _227a58d3c_build_type(_self_, _174134_tokens,(&(_174817_i)),true);
	if ((!(_175028_ok))) {
		return nullptr;
	};
	if ((_174817_i >= _174134_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _174217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_244874498_Impl> _175917_ipl = jule::new_ptr<_244874498_Impl>(_244874498_Impl{._field_base=_175018_base, });;
	_174217_token=_174134_tokens[_174817_i];
	if ((_174217_token.get()._field_id != static_cast<jule::U32>(12LLU))) {
		if (((_174217_token.get()._field_id == static_cast<jule::U32>(3LLU)) && (_174217_token.get()._field_kind == jule::Str("{", 1)))) {
			std::tie(_175917_ipl.get()._field_base,_175917_ipl.get()._field_dest) = std::make_tuple(_175917_ipl.get()._field_dest,_175917_ipl.get()._field_base);
			goto _julec_label_body;
		};
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _174217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	(_174817_i)++;
	if ((_174817_i >= _174134_tokens.len())) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _174217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	std::tie(_175917_ipl.get()._field_dest,_175028_ok) = _227a58d3c_build_type(_self_, _174134_tokens,(&(_174817_i)),true);
	if ((!(_175028_ok))) {
		return nullptr;
	};
	if ((_174817_i >= _174134_tokens.len())) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _174217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	_julec_label_body:;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _179917_body_tokens = _227a54b6d_range(_174817_i,jule::Str("{", 1),jule::Str("}", 1),_174134_tokens);;
	if ((_179917_body_tokens == nullptr)) {
		_227a56ce6_stop(_self_.ptr());
		_227a57423_push_err(_self_.ptr(), _174217_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((_174817_i < _174134_tokens.len())) {
		_227a57423_push_err(_self_.ptr(), _174134_tokens[_174817_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	};
	_175917_ipl.get()._field_end=_174134_tokens[(_174817_i - 1LL)];
	_227a63929_parse_impl_body(_self_, _175917_ipl,_179917_body_tokens);
	return _175917_ipl;
}



inline jule::Any _227a64045_build_node_data(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _181440_tokens) {
	jule::Ptr<_2431e4523_Token> _181517_token = _181440_tokens[0LL];;
	{
		auto &_match_expr{ _181517_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(33LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
			_case_begin_22a3ed9ba:;
			{
				jule::Ptr<_244869ee9_FnDecl> _181921_f = _227a5ce40_build_fn(_self_, _181440_tokens,false,false);;
				if ((_181921_f != nullptr)) {
					_181921_f.get()._field_global=true;
					if (_24486a34b_is_anon(_181921_f.ptr())) {
						_227a57423_push_err(_self_.ptr(), _181921_f.get()._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					};
				};
				return static_cast<jule::Any>(_181921_f);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(34LLU) || _match_expr == static_cast<jule::U32>(9LLU) || _match_expr == static_cast<jule::U32>(36LLU) || _match_expr == static_cast<jule::U32>(38LLU)) {
			_case_begin_22a3eda31:;
			{
				return static_cast<jule::Any>(_227a59e1a_build_var(_self_, _181440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(10LLU)) {
			_case_begin_22a3ee23a:;
			{
				return static_cast<jule::Any>(_227a5914a_build_type_alias_decl(_self_, _181440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(24LLU)) {
			_case_begin_22a3ee2a1:;
			{
				return _227a60b68_build_node_enum_decl(_self_, _181440_tokens);
			}
		}
		else if (_match_expr == static_cast<jule::U32>(25LLU)) {
			_case_begin_22a3ee317:;
			{
				return static_cast<jule::Any>(_227a615c5_build_struct_decl(_self_, _181440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(29LLU)) {
			_case_begin_22a3ee37d:;
			{
				return static_cast<jule::Any>(_227a61e66_build_trait_decl(_self_, _181440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(30LLU)) {
			_case_begin_22a3ee3e4:;
			{
				return static_cast<jule::Any>(_227a63c37_build_impl(_self_, _181440_tokens));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(31LLU)) {
			_case_begin_22a3ee46b:;
			{
				return _227a632ec_build_cpp_link(_self_, _181440_tokens);
			}
		}
		else {
			_case_begin_22a3ed8aa:;
			{
				_227a57423_push_err(_self_.ptr(), _181517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_22a3ed811:;
	};
}



inline void _227a64364_apply_fn_meta(_227a569b6_Parser* _self_, jule::Ptr<_244869ee9_FnDecl>& _185037_f, jule::Bool _185049_is_pub) {
	_185037_f.get()._field_public=_185049_is_pub;
	_185037_f.get()._field_directives=(*_self_)._field_directives;
	(*_self_)._field_directives=nullptr;
}



inline void _227a64683_apply_meta(_227a569b6_Parser* _self_, _2448245e1_Node& _185634_node, jule::Bool _185646_is_pub) {
	{
		auto &_match_expr{ _185634_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_24486aec8_VarDecl>>()) {
			_case_begin_22a405e45:;
			{
				jule::Ptr<_24486aec8_VarDecl> _185921_v = _185634_node._field_data.operator jule::Ptr<_24486aec8_VarDecl>();;
				if ((_185921_v == nullptr)) {
					return;;
				};
				_185921_v.get()._field_public=_185646_is_pub;
				_185921_v.get()._field_directives=(*_self_)._field_directives;
				(*_self_)._field_directives=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244869ee9_FnDecl>>()) {
			_case_begin_22a405593:;
			{
				jule::Ptr<_244869ee9_FnDecl> _186721_f = _185634_node._field_data.operator jule::Ptr<_244869ee9_FnDecl>();;
				if ((_186721_f == nullptr)) {
					return;;
				};
				_227a64364_apply_fn_meta(&(*_self_), _186721_f,_185646_is_pub);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24486e839_TypeAliasDecl>>()) {
			_case_begin_22a40561a:;
			{
				jule::Ptr<_24486e839_TypeAliasDecl> _187321_tad = _185634_node._field_data.operator jule::Ptr<_24486e839_TypeAliasDecl>();;
				if ((_187321_tad == nullptr)) {
					return;;
				};
				_187321_tad.get()._field_public=_185646_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244871bc1_EnumDecl>>()) {
			_case_begin_22a405692:;
			{
				jule::Ptr<_244871bc1_EnumDecl> _187921_ed = _185634_node._field_data.operator jule::Ptr<_244871bc1_EnumDecl>();;
				if ((_187921_ed == nullptr)) {
					return;;
				};
				_187921_ed.get()._field_public=_185646_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448728c5_TypeEnumDecl>>()) {
			_case_begin_22a4059a0:;
			{
				jule::Ptr<_2448728c5_TypeEnumDecl> _188521_ted = _185634_node._field_data.operator jule::Ptr<_2448728c5_TypeEnumDecl>();;
				if ((_188521_ted == nullptr)) {
					return;;
				};
				_188521_ted.get()._field_public=_185646_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244873783_StructDecl>>()) {
			_case_begin_22a405a16:;
			{
				jule::Ptr<_244873783_StructDecl> _189121_sd = _185634_node._field_data.operator jule::Ptr<_244873783_StructDecl>();;
				if ((_189121_sd == nullptr)) {
					return;;
				};
				_189121_sd.get()._field_directives=(*_self_)._field_directives;
				(*_self_)._field_directives=nullptr;
				_189121_sd.get()._field_public=_185646_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244873d8d_TraitDecl>>()) {
			_case_begin_22a405a7c:;
			{
				jule::Ptr<_244873d8d_TraitDecl> _189921_td = _185634_node._field_data.operator jule::Ptr<_244873d8d_TraitDecl>();;
				if ((_189921_td == nullptr)) {
					return;;
				};
				_189921_td.get()._field_public=_185646_is_pub;
			}
		}
		else {
			_case_begin_22a4054e9:;
			{
				if (_185646_is_pub) {
					_227a57423_push_err(&(*_self_), _185634_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>());
				};
			}
		}
		_match_end_22a405351:;
	};
}



inline std::tuple<jule::Bool,jule::Any> _227a649b3_build_general_scope_node_data(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _191153_st) {
	jule::Bool _191169_is_pub = jule::Bool();
	jule::Any _191183_data = jule::Any();
	if ((_191153_st[0LL].get()._field_id == static_cast<jule::U32>(21LLU))) {
		_191169_is_pub=true;
		_191153_st=_191153_st.slice(1LL);
		if ((_191153_st.len() == 0LL)) {
			_227a57423_push_err(_self_.ptr(), _191153_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return std::make_tuple(_191169_is_pub,_191183_data);
		};
	};
	_191183_data=_227a64045_build_node_data(_self_, _191153_st);
	return std::make_tuple(_191169_is_pub,_191183_data);
}



inline void _227a64c49_push_use_decl(jule::Ptr<_227a569b6_Parser> _self_, jule::Ptr<_244870c25_UseDecl>& _192638_decl) {
	_self_.get()._field_ast.get()._field_use_decls = jule::alloc_for_append(_self_.get()._field_ast.get()._field_use_decls,1);_self_.get()._field_ast.get()._field_use_decls.__push(_192638_decl);;
	if ((_self_.get()._field_ast.get()._field_nodes.len() > 0LL)) {
		_227a57423_push_err(_self_.ptr(), _192638_decl.get()._field_token,jule::Str("use declarations must declared top of source code", 49),jule::Slice<jule::Any>());
		_227a57742_push_suggestion(_self_.ptr(), jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>());
	};
}



inline jule::Bool _227a65057_push_meta_nodes(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _193440_tokens) {
	{
		auto &_match_expr{ _193440_tokens[0LL].get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(19LLU)) {
			_case_begin_22a4134a2:;
			{
				;
				jule::Ptr<_244870c25_UseDecl> _193821_decl = _227a5e381_build_use_decl(_self_.ptr(), _193440_tokens,false);;
				_227a64c49_push_use_decl(_self_, _193821_decl);
				return true;
			}
		}
		else if (_match_expr == static_cast<jule::U32>(31LLU)) {
			_case_begin_22a413518:;
			{
				if (((_193440_tokens.len() > 1LL) && (_193440_tokens[1LL].get()._field_id == static_cast<jule::U32>(19LLU)))) {
					jule::Ptr<_244870c25_UseDecl> _194325_decl = _227a62ede_build_cpp_link_use(_self_, _193440_tokens);;
					_227a64c49_push_use_decl(_self_, _194325_decl);
					return true;
				};
			}
		}
		else if (_match_expr == static_cast<jule::U32>(39LLU)) {
			_case_begin_22a413590:;
			{
				_227a580d3_push_directive(_self_.ptr(), _227a57d5d_build_directive(_self_.ptr(), _193440_tokens));
				return true;
			}
		}
		_match_end_22a4133a3:;
	};
	return false;
}



inline _2448245e1_Node _227a65365_parse_node(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _195435_st) {
	_2448245e1_Node _195517_node = _2448245e1_Node{._field_token=_195435_st[0LL], };;
	if (_227a65057_push_meta_nodes(_self_, _195435_st)) {
		return _195517_node;
	};
	jule::Bool _196314_is_pub;;
	jule::Any _196326_data;;
	std::tie(_196314_is_pub,_196326_data) = _227a649b3_build_general_scope_node_data(_self_, _195435_st);
	if ((_196326_data == nullptr)) {
		return _195517_node;
	};
	_195517_node._field_data=_196326_data;
	_227a64683_apply_meta(_self_.ptr(), _195517_node,_196314_is_pub);
	if ((_self_.get()._field_directives.len() != 0LL)) {
		_227a57423_push_err(_self_.ptr(), _self_.get()._field_directives[0LL].get()._field_tag,jule::Str("this directive is out of scope, put it where it will be useful or delete it", 75),jule::Slice<jule::Any>());
	};
	_self_.get()._field_directives=nullptr;
	return _195517_node;
}



inline void _227a655da_append_node(jule::Ptr<_227a569b6_Parser> _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _197836_st) {
	if ((_197836_st.len() == 0LL)) {
		return;;
	};
	_2448245e1_Node _198317_node = _227a65365_parse_node(_self_, _197836_st);;
	if (((_198317_node._field_data == nullptr) || _227a5705a_stopped(_self_.ptr()))) {
		return;;
	};
	_self_.get()._field_ast.get()._field_nodes = jule::alloc_for_append(_self_.get()._field_ast.get()._field_nodes,1);_self_.get()._field_ast.get()._field_nodes.__push(_198317_node);;
}



inline void _227a65a4c_remove_range(_227a569b6_Parser* _self_, jule::I32 _199031_i, jule::Str _199039_kind, jule::Slice<jule::Ptr<_2431e4523_Token>>& _199051_tokens, jule::Slice<jule::I32>& _199074_ranges) {
	jule::Str _199113_close = _227a55a2b_get_close_kind_of_brace(_199039_kind);;
	for (; (_199031_i >= 0LL); (_199031_i)--) {
		{
			jule::Ptr<_2431e4523_Token> _199317_tok = _199051_tokens[_199074_ranges[_199031_i]];;
			if ((_199317_tok.get()._field_kind != _199113_close)) {
				goto _iter_next_22a41d0a0;
			};
			_199074_ranges=jule::append(_199074_ranges.slice(0LL,_199031_i),_199074_ranges.slice((_199031_i + 1LL)));
			goto _iter_end_22a41d0a0;
		}
	_iter_next_22a41d0a0:;
	}
	_iter_end_22a41d0a0:;;
}



inline void _227a65e37_push_wrong_order_close_err(_227a569b6_Parser* _self_, jule::Ptr<_2431e4523_Token>& _200246_t, jule::Slice<jule::Ptr<_2431e4523_Token>>& _200258_tokens, jule::Slice<jule::I32>& _200277_ranges) {
	{
		auto &_match_expr{ _200258_tokens[_200277_ranges[(_200277_ranges.len() - 1LL)]].get()._field_kind };
		
		if (_match_expr == jule::Str("(", 1)) {
			_case_begin_22a420206:;
			{
				_227a57423_push_err(&(*_self_), _200246_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("{", 1)) {
			_case_begin_22a42027d:;
			{
				_227a57423_push_err(&(*_self_), _200246_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("[", 1)) {
			_case_begin_22a420305:;
			{
				_227a57423_push_err(&(*_self_), _200246_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>());
			}
		}
		_match_end_22a4200c4:;
	};
}



inline void _227a663aa_push_range_close(_227a569b6_Parser* _self_, jule::Ptr<_2431e4523_Token> _201335_t, jule::Str _201346_left, jule::Slice<jule::Ptr<_2431e4523_Token>>& _201358_tokens, jule::Slice<jule::I32>& _201381_ranges) {
	jule::I32 _201413_n = _201381_ranges.len();;
	if ((_201413_n == 0LL)) {
		{
			auto &_match_expr{ _201335_t.get()._field_kind };
			
			if (_match_expr == jule::Str("]", 1)) {
				_case_begin_22a422d96:;
				{
					_227a57423_push_err(&(*_self_), _201335_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str("}", 1)) {
				_case_begin_22a422e0c:;
				{
					_227a57423_push_err(&(*_self_), _201335_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str(")", 1)) {
				_case_begin_22a422e84:;
				{
					_227a57423_push_err(&(*_self_), _201335_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>());
				}
			}
			_match_end_22a422b43:;
		};
		return;;
	} else if ((_201358_tokens[_201381_ranges[(_201413_n - 1LL)]].get()._field_kind != _201346_left)) {
		_227a65e37_push_wrong_order_close_err(&(*_self_), _201335_t,_201358_tokens,_201381_ranges);
	};
	_227a65a4c_remove_range(&(*_self_), static_cast<jule::I32>((_201413_n - 1LL)),_201335_t.get()._field_kind,_201358_tokens,_201381_ranges);
}



inline void _227a66630_check_ranges(_227a569b6_Parser* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>>& _203132_tokens) {
	jule::Slice<jule::I32> _203217_ranges = nullptr;;
	{
		auto &expr = _203132_tokens;
		auto it = expr.begin();
		_iter_begin_22a426196:;
		if (it != expr.end()) {
			jule::I32 _203413_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> &_203416_token = *it;
			{
				if ((_203416_token.get()._field_id != static_cast<jule::U32>(3LLU))) {
					goto _iter_next_22a426196;
				};
				{
					auto &_match_expr{ _203416_token.get()._field_kind };
					
					if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
						_case_begin_22a42742d:;
						{
							_203217_ranges = jule::alloc_for_append(_203217_ranges,1);_203217_ranges.__push(_203413_i);;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_22a4274c7:;
						{
							_227a663aa_push_range_close(&(*_self_), _203416_token,jule::Str("(", 1),_203132_tokens,_203217_ranges);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_22a42753d:;
						{
							_227a663aa_push_range_close(&(*_self_), _203416_token,jule::Str("{", 1),_203132_tokens,_203217_ranges);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_22a4275a4:;
						{
							_227a663aa_push_range_close(&(*_self_), _203416_token,jule::Str("[", 1),_203132_tokens,_203217_ranges);
						}
					}
					_match_end_22a426eaa:;
				};
			}
			_iter_next_22a426196:;
			++it;
			_203413_i++;
			goto _iter_begin_22a426196;
		}
		_iter_end_22a426196:;
	};
	{
		auto &expr = _203217_ranges;
		auto it = expr.begin();
		_iter_begin_22a428dd0:;
		if (it != expr.end()) {
			jule::I32 _205216_i = *it;
			{
				jule::Ptr<_2431e4523_Token> _205317_token = _203132_tokens[_205216_i];;
				{
					auto &_match_expr{ _205317_token.get()._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_22a429c49:;
						{
							_227a57423_push_err(&(*_self_), _205317_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("{", 1)) {
						_case_begin_22a429cc1:;
						{
							_227a57423_push_err(&(*_self_), _205317_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("[", 1)) {
						_case_begin_22a429d48:;
						{
							_227a57423_push_err(&(*_self_), _205317_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					_match_end_22a429b7d:;
				};
			}
			_iter_next_22a428dd0:;
			++it;
			goto _iter_begin_22a428dd0;
		}
		_iter_end_22a428dd0:;
	};
}



inline void _227a668a5_parse(jule::Ptr<_227a569b6_Parser> _self_, jule::Ptr<_2431e98ad_File>& _206530_f) {
	_self_.get()._field_ast=jule::new_ptr<_244823942_Ast>(_244823942_Ast{._field_file=_206530_f, });
	_227a66630_check_ranges(_self_.ptr(), _206530_f.get()._field_tokens);
	if ((_self_.get()._field_errors.len() > 0LL)) {
		return;;
	};
	jule::Slice<jule::Ptr<_227a3a406_stmt>> _207517_stmts = _227a3a79c_split_stmts(_206530_f.get()._field_tokens);;
	jule::I32 _207817_i = 0LL;;
	for (; (_207817_i < _207517_stmts.len()); (_207817_i)++) {
		{
			jule::Ptr<_227a3a406_stmt> _208021_stmt = _207517_stmts[_207817_i];;
			if ((_208021_stmt.get()._field_tokens.len() < 2LL)) {
				return;;
			};
			if ((_208021_stmt.get()._field_tokens[0LL].get()._field_id != static_cast<jule::U32>(39LLU))) {
				goto _iter_end_22a42cde5;
			};
			if ((!(_242dbcaae_is_top_directive(_208021_stmt.get()._field_tokens[1LL].get()._field_kind)))) {
				goto _iter_end_22a42cde5;
			};
			_self_.get()._field_ast.get()._field_top_directives = jule::alloc_for_append(_self_.get()._field_ast.get()._field_top_directives,1);_self_.get()._field_ast.get()._field_top_directives.__push(_227a57d5d_build_directive(_self_.ptr(), _208021_stmt.get()._field_tokens));;
		}
	_iter_next_22a42cde5:;
	}
	_iter_end_22a42cde5:;;
	_self_.get()._field_errors=nullptr;
	for (; (_207817_i < _207517_stmts.len()); (_207817_i)++) {
		{
			jule::Ptr<_227a3a406_stmt> _209721_stmt = _207517_stmts[_207817_i];;
			_227a655da_append_node(_self_, _209721_stmt.get()._field_tokens);
			if (_227a5705a_stopped(_self_.ptr())) {
				goto _iter_end_22a4309ca;
			};
		}
	_iter_next_22a4309ca:;
	}
	_iter_end_22a4309ca:;;
	if ((_self_.get()._field_directives.len() != 0LL)) {
		_227a57423_push_err(_self_.ptr(), _self_.get()._field_directives[0LL].get()._field_tag,jule::Str("this directive is out of scope, put it where it will be useful or delete it", 75),jule::Slice<jule::Any>());
	};
}







std::ostream &operator<<(std::ostream &_Stream, _227a569b6_Parser _Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _227a68434_push_err(_227a67d90_TypeBuilder* _self_, jule::Ptr<_2431e4523_Token> _7327_token, jule::Str _7342_fmt) {
	if ((*_self_)._field_err) {
		_227a57423_push_err((*_self_)._field_p.ptr(), _7327_token,_7342_fmt,jule::Slice<jule::Any>());
	};
}



inline void _227a68753_push_suggestion(_227a67d90_TypeBuilder* _self_, jule::Str _8034_fmt, jule::Slice<jule::Any> _8047_args) {
	if ((*_self_)._field_err) {
		_227a57742_push_suggestion((*_self_)._field_p.ptr(), _8034_fmt,jule::Any(_8047_args));
	};
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a689b7_build_prim(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2448581d5_TypeDecl> _8717_t = _227a67543_build_prim_type((*_self_)._field_tokens[(*((*_self_)._field_i))]);;
	((*((*_self_)._field_i)))++;
	return _8717_t;
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a68c2b_build_namespace(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2448581d5_TypeDecl> _9317_t = jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=(*_self_)._field_tokens[(*((*_self_)._field_i))], });;
	jule::Ptr<_2448592a2_NamespaceTypeDecl> _9717_nst = jule::new_ptr<_2448592a2_NamespaceTypeDecl>();;
	jule::I32 _9817_n = 0LL;;
	for (; ((*((*_self_)._field_i)) < (*_self_)._field_tokens.len()); ((*((*_self_)._field_i)))++) {
		{
			jule::Ptr<_2431e4523_Token> _10021_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
			if (((_9817_n & 1LL) == 0LL)) {
				if ((_10021_token.get()._field_id != static_cast<jule::U32>(2LLU))) {
					_227a68434_push_err(&(*_self_), _10021_token,jule::Str("invalid syntax", 14));
					_227a68753_push_suggestion(&(*_self_), jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
				};
				_9717_nst.get()._field_idents = jule::alloc_for_append(_9717_nst.get()._field_idents,1);_9717_nst.get()._field_idents.__push(_10021_token);;
			} else if ((_10021_token.get()._field_id != static_cast<jule::U32>(23LLU))) {
				goto _iter_end_22a43a83c;
			};
			(_9817_n)++;
		}
	_iter_next_22a43a83c:;
	}
	_iter_end_22a43a83c:;;
	_9717_nst.get()._field_idents=_9717_nst.get()._field_idents.slice(0LL,(_9717_nst.get()._field_idents.len() - 1LL));
	((*((*_self_)._field_i)))--;
	_9717_nst.get()._field_kind=_227a69468_build_ident(&(*_self_));
	_9317_t.get()._field_kind=static_cast<jule::Any>(_9717_nst);
	return _9317_t;
}



inline jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _227a68e90_build_generics(_227a67d90_TypeBuilder* _self_) {
	if (((*((*_self_)._field_i)) >= (*_self_)._field_tokens.len())) {
		return nullptr;
	};
	jule::Ptr<_2431e4523_Token> _12613_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	if (((_12613_token.get()._field_id != static_cast<jule::U32>(3LLU)) || (_12613_token.get()._field_kind != jule::Str("[", 1)))) {
		return nullptr;
	};
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _13117_parts = _227a69204_ident_generics(&(*_self_));;
	if ((_13117_parts.len() == 0LL)) {
		_227a68434_push_err(&(*_self_), _12613_token,jule::Str("invalid syntax", 14));
		return nullptr;
	};
	jule::Slice<jule::Ptr<_2448581d5_TypeDecl>> _13717_types = jule::Slice<jule::Ptr<_2448581d5_TypeDecl>>::alloc(0LL,_13117_parts.len());;
	{
		auto &expr = _13117_parts;
		auto it = expr.begin();
		_iter_begin_22a44347c:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _13821_part = *it;
			{
				jule::I32 _13921_j = 0LL;;
				jule::Ptr<_2448581d5_TypeDecl> _14022_t;;
				std::tie(_14022_t,std::ignore) = _227a58d3c_build_type((*_self_)._field_p, _13821_part,(&(_13921_j)),true);
				if ((_13921_j < _13821_part.len())) {
					_227a68434_push_err(&(*_self_), _13821_part[_13921_j],jule::Str("invalid syntax", 14));
				};
				_13717_types = jule::alloc_for_append(_13717_types,1);_13717_types.__push(_14022_t);;
			}
			_iter_next_22a44347c:;
			++it;
			goto _iter_begin_22a44347c;
		}
		_iter_end_22a44347c:;
	};
	return _13717_types;
}



inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a69204_ident_generics(_227a67d90_TypeBuilder* _self_) {
	jule::I32 _15013_first = (*((*_self_)._field_i));;
	jule::I32 _15117_range_n = 0LL;;
	for (; ((*((*_self_)._field_i)) < (*_self_)._field_tokens.len()); ((*((*_self_)._field_i)))++) {
		{
			jule::Ptr<_2431e4523_Token> _15317_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
			if ((_15317_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _15317_token.get()._field_kind };
					
					if (_match_expr == jule::Str("[", 1)) {
						_case_begin_22a447151:;
						{
							(_15117_range_n)++;
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_22a4471c8:;
						{
							(_15117_range_n)--;
						}
					}
					_match_end_22a446e20:;
				};
			};
			if ((_15117_range_n == 0LL)) {
				((*((*_self_)._field_i)))++;
				goto _iter_end_22a445cba;
			};
		}
	_iter_next_22a445cba:;
	}
	_iter_end_22a445cba:;;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _16717_tokens = (*_self_)._field_tokens.slice((_15013_first + 1LL),((*((*_self_)._field_i)) - 1LL));;
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _16818_parts;;
	jule::Slice<_242dbab89_Log> _16825_errors;;
	std::tie(_16818_parts,_16825_errors) = _227a55762_parts(_16717_tokens,static_cast<jule::U32>(8LLU),true);
	if ((*_self_)._field_err) {
		(*_self_)._field_p.get()._field_errors=jule::append((*_self_)._field_p.get()._field_errors,_16825_errors);
	};
	return _16818_parts;
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a69468_build_ident(_227a67d90_TypeBuilder* _self_) {
	jule::Bool _17617_next = (((*((*_self_)._field_i)) + 1LL) < (*_self_)._field_tokens.len());;
	if ((_17617_next && ((*_self_)._field_tokens[((*((*_self_)._field_i)) + 1LL)].get()._field_id == static_cast<jule::U32>(23LLU)))) {
		return _227a68c2b_build_namespace(&(*_self_));
	};
	jule::Ptr<_2431e4523_Token> _18017_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	jule::Ptr<_24485879b_IdentTypeDecl> _18117_it = jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_18017_token, ._field_ident=_18017_token.get()._field_kind, ._field_cpp_linked=false, });;
	((*((*_self_)._field_i)))++;
	jule::Ptr<_2448581d5_TypeDecl> _18717_itd = jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_18017_token, ._field_kind=static_cast<jule::Any>(_18117_it)});;
	if (((!(_17617_next)) || ((*_self_)._field_tokens[(*((*_self_)._field_i))].get()._field_id != static_cast<jule::U32>(20LLU)))) {
		_18117_it.get()._field_generics=_227a68e90_build_generics(&(*_self_));
		return _18717_itd;
	};
	if ((((*_self_)._field_tokens.len() - (*((*_self_)._field_i))) == 1LL)) {
		_227a68434_push_err(&(*_self_), _18017_token,jule::Str("invalid syntax", 14));
		return _18717_itd;
	};
	((*((*_self_)._field_i)))++;
	if (((*_self_)._field_tokens[(*((*_self_)._field_i))].get()._field_id != static_cast<jule::U32>(2LLU))) {
		_227a68434_push_err(&(*_self_), (*_self_)._field_tokens[((*((*_self_)._field_i)) - 1LL)],jule::Str("invalid syntax", 14));
		return _18717_itd;
	};
	jule::Ptr<_244858dea_SubIdentTypeDecl> _20417_sit = jule::new_ptr<_244858dea_SubIdentTypeDecl>();;
	_20417_sit.get()._field_idents = jule::alloc_for_append(_20417_sit.get()._field_idents,1);_20417_sit.get()._field_idents.__push(_18117_it);;
	jule::Ptr<_2448581d5_TypeDecl> _20617_ident = _227a69468_build_ident(&(*_self_));;
	{
		auto &_match_expr{ _20617_ident.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_24485879b_IdentTypeDecl>>()) {
			_case_begin_22a45236a:;
			{
				_20417_sit.get()._field_idents = jule::alloc_for_append(_20417_sit.get()._field_idents,1);_20417_sit.get()._field_idents.__push(_20617_ident.get()._field_kind.operator jule::Ptr<_24485879b_IdentTypeDecl>());;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244858dea_SubIdentTypeDecl>>()) {
			_case_begin_22a452436:;
			{
				_20417_sit.get()._field_idents=jule::append(_20417_sit.get()._field_idents,_20617_ident.get()._field_kind.operator jule::Ptr<_244858dea_SubIdentTypeDecl>().get()._field_idents);
			}
		}
		_match_end_22a452315:;
	};
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_18017_token, ._field_kind=static_cast<jule::Any>(_20417_sit)});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a696cc_build_cpp_link(_227a67d90_TypeBuilder* _self_) {
	if (((((*((*_self_)._field_i)) + 1LL) >= (*_self_)._field_tokens.len()) || ((*_self_)._field_tokens[((*((*_self_)._field_i)) + 1LL)].get()._field_id != static_cast<jule::U32>(20LLU)))) {
		_227a68434_push_err(&(*_self_), (*_self_)._field_tokens[(*((*_self_)._field_i))],jule::Str("invalid syntax", 14));
		return nullptr;
	};
	(*((*_self_)._field_i))+=2LL;
	jule::Ptr<_2448581d5_TypeDecl> _22517_t = _227a69468_build_ident(&(*_self_));;
	_22517_t.get()._field_kind.operator jule::Ptr<_24485879b_IdentTypeDecl>().get()._field_cpp_linked=true;
	return _22517_t;
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a69941_build_fn(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2431e4523_Token> _23117_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	jule::Ptr<_244869ee9_FnDecl> _23217_f = _227a5c9de_build_fn_prototype((*_self_)._field_p, (*_self_)._field_tokens,(*((*_self_)._field_i)),false);;
	if ((_23217_f == nullptr)) {
		return nullptr;
	};
	if ((!(_24486a34b_is_anon(_23217_f.ptr())))) {
		_227a68434_push_err(&(*_self_), _23217_f.get()._field_token,jule::Str("invalid syntax", 14));
	};
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_23117_token, ._field_kind=static_cast<jule::Any>(_23217_f)});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a69ba5_build_ptr(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2431e4523_Token> _24617_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	if ((((*((*_self_)._field_i)) + 1LL) >= (*_self_)._field_tokens.len())) {
		_227a68434_push_err(&(*_self_), _24617_token,jule::Str("invalid syntax", 14));
		return nullptr;
	};
	((*((*_self_)._field_i)))++;
	if (((*_self_)._field_tokens[(*((*_self_)._field_i))].get()._field_id == static_cast<jule::U32>(35LLU))) {
		((*((*_self_)._field_i)))++;
		return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_24617_token, ._field_kind=static_cast<jule::Any>(jule::new_ptr<_24485a061_PtrTypeDecl>(_24485a061_PtrTypeDecl{._field_elem=nullptr}))});
	};
	jule::Ptr<_2448581d5_TypeDecl> _26317_elem = _227a6aed6_step(&(*_self_));;
	if ((_26317_elem == nullptr)) {
		return nullptr;
	};
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_24617_token, ._field_kind=static_cast<jule::Any>(jule::new_ptr<_24485a061_PtrTypeDecl>(_24485a061_PtrTypeDecl{._field_elem=_26317_elem}))});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a69e19_build_sptr(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2431e4523_Token> _27717_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	if ((((*((*_self_)._field_i)) + 1LL) >= (*_self_)._field_tokens.len())) {
		_227a68434_push_err(&(*_self_), _27717_token,jule::Str("invalid syntax", 14));
		return nullptr;
	};
	((*((*_self_)._field_i)))++;
	jule::Ptr<_2448581d5_TypeDecl> _28417_elem = _227a6aed6_step(&(*_self_));;
	if ((_28417_elem == nullptr)) {
		return nullptr;
	};
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_27717_token, ._field_kind=static_cast<jule::Any>(jule::new_ptr<_24485958d_SptrTypeDecl>(_24485958d_SptrTypeDecl{._field_elem=_28417_elem}))});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a6a17d_build_op(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2431e4523_Token> _29817_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	{
		auto &_match_expr{ _29817_token.get()._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_22a4657ce:;
			{
				return _227a69ba5_build_ptr(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_22a465845:;
			{
				return _227a69e19_build_sptr(&(*_self_));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_22a4658ab:;
			{
				return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_kind=static_cast<jule::Any>(jule::new_ptr<_24485958d_SptrTypeDecl>(_24485958d_SptrTypeDecl{._field_elem=_227a69e19_build_sptr(&(*_self_))}))});
			}
		}
		else {
			_case_begin_22a465724:;
			{
				_227a68434_push_err(&(*_self_), _29817_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_22a46567a:;
	};
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a6a3e2_build_slc(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2431e4523_Token> _31717_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	((*((*_self_)._field_i)))++;
	jule::Ptr<_2448581d5_TypeDecl> _31917_elem = _227a6aed6_step(&(*_self_));;
	if ((_31917_elem == nullptr)) {
		return nullptr;
	};
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_31717_token, ._field_kind=static_cast<jule::Any>(jule::new_ptr<_244859989_SlcTypeDecl>(_244859989_SlcTypeDecl{._field_elem=_31917_elem}))});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a6a656_build_arr(_227a67d90_TypeBuilder* _self_) {
	if (((*((*_self_)._field_i)) >= (*_self_)._field_tokens.len())) {
		_227a68434_push_err(&(*_self_), (*_self_)._field_tokens[((*((*_self_)._field_i)) - 1LL)],jule::Str("type missing", 12));
		return nullptr;
	};
	jule::I32 _34013_expr_delta = (*((*_self_)._field_i));;
	jule::Ptr<_2448581d5_TypeDecl> _34217_elem = _227a6aed6_step(&(*_self_));;
	if ((_34217_elem == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_24485a6e3_ArrTypeDecl> _34717_arrt = jule::new_ptr<_24485a6e3_ArrTypeDecl>(_24485a6e3_ArrTypeDecl{._field_elem=_34217_elem, });;
	jule::Slice<jule::Ptr<_2431e4523_Token>> _35117_expr_tokens = (*_self_)._field_tokens.slice(0LL,_34013_expr_delta);;
	std::tie(std::ignore,_35117_expr_tokens) = _227a54e15_range_last(_35117_expr_tokens);
	_35117_expr_tokens=_35117_expr_tokens.slice(1LL,(_35117_expr_tokens.len() - 1LL));
	jule::Ptr<_2431e4523_Token> _35417_token = _35117_expr_tokens[0LL];;
	if ((((_35117_expr_tokens.len() == 1LL) && (_35417_token.get()._field_id == static_cast<jule::U32>(7LLU))) && (_35417_token.get()._field_kind == jule::Str("...", 3)))) {
	} else {
		_34717_arrt.get()._field_size=_227a57a50_build_expr((*_self_)._field_p, _35117_expr_tokens);
	};
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_35417_token, ._field_kind=static_cast<jule::Any>(_34717_arrt)});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a6aa0d_build_map(_227a67d90_TypeBuilder* _self_, jule::I32 _36735_start, jule::I32 _36747_delim) {
	jule::Ptr<_2431e4523_Token> _36817_delim_token = (*_self_)._field_tokens[_36747_delim];;
	if (((_36747_delim == 0LL) || ((_36747_delim + 1LL) >= (*_self_)._field_tokens.len()))) {
		_227a68434_push_err(&(*_self_), _36817_delim_token,jule::Str("type missing", 12));
		return nullptr;
	};
	jule::Slice<jule::Ptr<_2431e4523_Token>> _37517_key_tokens = (*_self_)._field_tokens.slice((_36735_start + 1LL),(_36747_delim - 1LL));;
	if ((_37517_key_tokens.len() == 0LL)) {
		_227a68434_push_err(&(*_self_), _36817_delim_token,jule::Str("type missing", 12));
		return nullptr;
	};
	jule::Ptr<_24485ae41_MapTypeDecl> _38117_mapt = jule::new_ptr<_24485ae41_MapTypeDecl>();;
	jule::I32 _38317_j = 0LL;;
	jule::Ptr<_2448581d5_TypeDecl> _38418_keyt;;
	jule::Bool _38428_ok;;
	std::tie(_38418_keyt,_38428_ok) = _227a58d3c_build_type((*_self_)._field_p, _37517_key_tokens,(&(_38317_j)),(*_self_)._field_err);
	if ((!(_38428_ok))) {
		return nullptr;
	} else if ((_38317_j < _37517_key_tokens.len())) {
		_227a68434_push_err(&(*_self_), _37517_key_tokens[_38317_j],jule::Str("invalid syntax", 14));
	};
	_38117_mapt.get()._field_key=_38418_keyt;
	((*((*_self_)._field_i)))++;
	jule::Ptr<_2448581d5_TypeDecl> _39318_valt;;
	std::tie(_39318_valt,_38428_ok) = _227a58d3c_build_type((*_self_)._field_p, (*_self_)._field_tokens,(*_self_)._field_i,(*_self_)._field_err);
	if ((!(_38428_ok))) {
		return nullptr;
	};
	_38117_mapt.get()._field_val=_39318_valt;
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_36817_delim_token, ._field_kind=static_cast<jule::Any>(_38117_mapt)});
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a6ac72_build_enumerable(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2431e4523_Token> _40517_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	if ((((((*((*_self_)._field_i)) + 2LL) >= (*_self_)._field_tokens.len()) || (_40517_token.get()._field_id != static_cast<jule::U32>(3LLU))) || (_40517_token.get()._field_kind != jule::Str("[", 1)))) {
		_227a68434_push_err(&(*_self_), _40517_token,jule::Str("invalid syntax", 14));
		return nullptr;
	};
	((*((*_self_)._field_i)))++;
	_40517_token=(*_self_)._field_tokens[(*((*_self_)._field_i))];
	if (((_40517_token.get()._field_id == static_cast<jule::U32>(3LLU)) && (_40517_token.get()._field_kind == jule::Str("]", 1)))) {
		return _227a6a3e2_build_slc(&(*_self_));
	};
	((*((*_self_)._field_i)))--;
	jule::I32 _41913_i = (*((*_self_)._field_i));;
	jule::I32 _42017_delim = _227a67884_map_colon((*_self_)._field_tokens,(*((*_self_)._field_i)));;
	((*((*_self_)._field_i)))++;
	if ((_42017_delim == -1LL)) {
		return _227a6a656_build_arr(&(*_self_));
	};
	return _227a6aa0d_build_map(&(*_self_), _41913_i,_42017_delim);
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a6aed6_step(_227a67d90_TypeBuilder* _self_) {
	jule::Ptr<_2431e4523_Token> _42913_token = (*_self_)._field_tokens[(*((*_self_)._field_i))];;
	{
		auto &_match_expr{ _42913_token.get()._field_id };
		
		if (_match_expr == static_cast<jule::U32>(1LLU)) {
			_case_begin_22a47bb36:;
			{
				return _227a689b7_build_prim(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(2LLU)) {
			_case_begin_22a47ba26:;
			{
				return _227a69468_build_ident(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(31LLU)) {
			_case_begin_22a47ba8c:;
			{
				return _227a696cc_build_cpp_link(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(33LLU)) {
			_case_begin_22a47ae54:;
			{
				return _227a69941_build_fn(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(7LLU)) {
			_case_begin_22a47aeba:;
			{
				return _227a6a17d_build_op(&(*_self_));
			}
		}
		else if (_match_expr == static_cast<jule::U32>(3LLU)) {
			_case_begin_22a47b031:;
			{
				return _227a6ac72_build_enumerable(&(*_self_));
			}
		}
		else {
			_case_begin_22a47addd:;
			{
				((*((*_self_)._field_i)))++;
				_227a68434_push_err(&(*_self_), _42913_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_22a47ac67:;
	};
}



inline std::tuple<jule::Ptr<_2448581d5_TypeDecl>,jule::Bool> _227a6b24a_build(_227a67d90_TypeBuilder* _self_) {
	jule::Bool _45244_ok = jule::Bool();
	jule::Ptr<_2448581d5_TypeDecl> _45317_root = _227a6aed6_step(&(*_self_));;
	if ((_45317_root == nullptr)) {
		_45244_ok = false;
		return std::make_tuple(_227a672ce_build_void_type(),_45244_ok);
	};
	_45244_ok = true;
	return std::make_tuple(_45317_root,_45244_ok);
}







std::ostream &operator<<(std::ostream &_Stream, _227a67d90_TypeBuilder _Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24578ca31_CompileInfo _Src) {
	_Stream << "CompileInfo{";
	_Stream << "prod:" << _Src._field_prod << ", ";
	_Stream << "test:" << _Src._field_test << ", ";
	_Stream << "compiler:" << _Src._field_compiler << ", ";
	_Stream << "cpp_std:" << _Src._field_cpp_std;
	_Stream << "}";
	return _Stream;
}



inline void _24578e3d4_push_err(_24578dd84_DirectiveEval* _self_, jule::Ptr<_2431e4523_Token> _2127_t, jule::Str _2138_fmt, jule::Slice<jule::Any> _2151_args) {
	(*_self_)._field_logs = jule::alloc_for_append((*_self_)._field_logs,1);(*_self_)._field_logs.__push(_242dbab89_Log{._field_kind=static_cast<jule::I32>(1LL), ._field_row=_2127_t.get()._field_row, ._field_column=_2127_t.get()._field_column, ._field_path=_2127_t.get()._field_file.get()._field_path, ._field_text=_242dbb0c9_logf(_2138_fmt,jule::Any(_2151_args)), });;
}



inline jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _24578e78b_split_operans(_24578dd84_DirectiveEval* _self_, jule::Str _3332_op, jule::Slice<jule::Ptr<_2431e4523_Token>>& _3352_tokens) {
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _3417_parts = jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>::alloc(0LL,10LL);;
	jule::I32 _3617_i = 0LL;;
	jule::I32 _3717_range_n = 0LL;;
	jule::I32 _3817_last = 0LL;;
	for (; (_3617_i < (_3352_tokens.len() - 1LL)); (_3617_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _4017_b = _3352_tokens[_3617_i];;
			if ((_4017_b.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _4017_b.get()._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_22a4a30be:;
						{
							(_3717_range_n)++;
							goto _iter_next_22a4a1ebe;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_22a4a3135:;
						{
							(_3717_range_n)--;
						}
					}
					_match_end_22a4a2db0:;
				};
			};
			if (((_3717_range_n > 0LL) || (_4017_b.get()._field_id != static_cast<jule::U32>(7LLU)))) {
				goto _iter_next_22a4a1ebe;
			};
			if ((_4017_b.get()._field_kind == _3332_op)) {
				_3417_parts = jule::alloc_for_append(_3417_parts,1);_3417_parts.__push(_3352_tokens.slice(_3817_last,_3617_i));;
				_3817_last=static_cast<jule::I32>((_3617_i + 1LL));
			};
		}
	_iter_next_22a4a1ebe:;
	}
	_iter_end_22a4a1ebe:;;
	if ((_3817_last < _3352_tokens.len())) {
		_3417_parts = jule::alloc_for_append(_3417_parts,1);_3417_parts.__push(_3352_tokens.slice(_3817_last));;
	} else {
		_24578e3d4_push_err(&(*_self_), _3352_tokens[(_3817_last - 1LL)],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	return _3417_parts;
}



inline jule::Bool _24578ea99_eval_directive_ident(_24578dd84_DirectiveEval* _self_, jule::Str _7335_ident) {
	if (_7335_ident.empty()) {
		return false;
	};
	{
		auto &expr = (*_self_)._field_vars;
		auto it = expr.begin();
		_iter_begin_22a4a6644:;
		if (it != expr.end()) {
			jule::Str &_7716_var = *it;
			{
				if ((_7716_var == _7335_ident)) {
					return true;
				};
			}
			_iter_next_22a4a6644:;
			++it;
			goto _iter_begin_22a4a6644;
		}
		_iter_end_22a4a6644:;
	};
	return false;
}



inline jule::Bool _24578eda7_eval_directive_part(_24578dd84_DirectiveEval* _self_, jule::Slice<jule::Ptr<_2431e4523_Token>> _8742_part) {
	jule::Bool _8813_logical_not = ((_8742_part[0LL].get()._field_id == static_cast<jule::U32>(7LLU)) && (_8742_part[0LL].get()._field_kind == jule::Str("!", 1)));;
	if (_8813_logical_not) {
		_8742_part=_8742_part.slice(1LL);
	};
	if ((_8742_part.len() > 1LL)) {
		_24578e3d4_push_err(&(*_self_), _8742_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	};
	jule::Bool _9817_result = _24578ea99_eval_directive_ident(&(*_self_), _8742_part[0LL].get()._field_kind);;
	if (_8813_logical_not) {
		_9817_result=(!(_9817_result));
	};
	return _9817_result;
}



inline jule::Bool _24579011b_eval(_24578dd84_DirectiveEval* _self_) {
	if (((*_self_)._field_d.get()._field_args.len() == 0LL)) {
		_24578e3d4_push_err(&(*_self_), (*_self_)._field_d.get()._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return false;
	};
	jule::Bool _11117_result = false;;
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _11317_logical_or_parts = _24578e78b_split_operans(&(*_self_), jule::Str("||", 2),(*_self_)._field_d.get()._field_args);;
	if ((_11317_logical_or_parts == nullptr)) {
		return false;
	};
	{
		auto &expr = _11317_logical_or_parts;
		auto it = expr.begin();
		_iter_begin_22a4ac86a:;
		if (it != expr.end()) {
			jule::Slice<jule::Ptr<_2431e4523_Token>> _11821_part = *it;
			{
				jule::Bool _11921_and = true;;
				jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _12021_logical_and_parts = _24578e78b_split_operans(&(*_self_), jule::Str("&&", 2),_11821_part);;
				if ((_12021_logical_and_parts == nullptr)) {
					return false;
				};
				{
					auto &expr = _12021_logical_and_parts;
					auto it = expr.begin();
					_iter_begin_22a4adc56:;
					if (it != expr.end()) {
						jule::Slice<jule::Ptr<_2431e4523_Token>> _12525_and_part = *it;
						{
							jule::Ptr<_2431e4523_Token> _12621_first = _12525_and_part[0LL];;
							if (((_12621_first.get()._field_id == static_cast<jule::U32>(3LLU)) && (_12621_first.get()._field_kind == jule::Str("(", 1)))) {
								jule::Ptr<_2431e4523_Token> _12825_end = _12525_and_part[(_12525_and_part.len() - 1LL)];;
								if (((_12825_end.get()._field_id != static_cast<jule::U32>(3LLU)) || (_12825_end.get()._field_kind != jule::Str(")", 1)))) {
									_24578e3d4_push_err(&(*_self_), _12621_first,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
									return false;
								};
								_12525_and_part=_12525_and_part.slice(1LL,(_12525_and_part.len() - 1LL));
							};
							_11921_and=(_11921_and && _24578eda7_eval_directive_part(&(*_self_), _12525_and_part));
						}
						_iter_next_22a4adc56:;
						++it;
						goto _iter_begin_22a4adc56;
					}
					_iter_end_22a4adc56:;
				};
				_11117_result=(_11117_result || _11921_and);
			}
			_iter_next_22a4ac86a:;
			++it;
			goto _iter_begin_22a4ac86a;
		}
		_iter_end_22a4ac86a:;
	};
	return _11117_result;
}







std::ostream &operator<<(std::ostream &_Stream, _24578dd84_DirectiveEval _Src) {
	_Stream << "DirectiveEval{";
	_Stream << "logs:" << _Src._field_logs << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "vars:" << _Src._field_vars;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_246491d50_JuleImporter> static__2464a5814_new(_24578ca31_CompileInfo _5823_info) {
	jule::Ptr<_246491d50_JuleImporter> _5917_imp = jule::new_ptr<_246491d50_JuleImporter>(_246491d50_JuleImporter{._field_mods=jule::Slice<jule::Str>::make({_242ddd4e7_PATH_STDLIB}), });;
	_24578d34a_init_vars(_5917_imp.get()._field_vars,_5823_info);
	return _5917_imp;
}



inline jule::Slice<jule::Ptr<_245547db3_ImportInfo>> _2464ea89d_all_packages(_246491d50_JuleImporter* _self_) {
	return (*_self_)._field_pkgs;
}



inline void _24650aa45_set_mod_path(_246491d50_JuleImporter* _self_, jule::Str _7535_path) {
	(*_self_)._field_mod=_7535_path;
}



inline jule::Str _246515c4d_get_mod_path(_246491d50_JuleImporter* _self_) {
	return (*_self_)._field_mod;
}



inline jule::Str _22754894d_mod_by_id(_246491d50_JuleImporter* _self_, jule::I32 _8328_id) {
	return (*_self_)._field_mods[_8328_id];
}



inline jule::Ptr<_245547db3_ImportInfo> _22760041c_get_import(_246491d50_JuleImporter* _self_, jule::Str _8733_path) {
	{
		auto &expr = (*_self_)._field_pkgs;
		auto it = expr.begin();
		_iter_begin_22a4b6203:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _8821_p = *it;
			{
				if ((_8821_p.get()._field_path == _8733_path)) {
					return _8821_p;
				};
			}
			_iter_next_22a4b6203:;
			++it;
			goto _iter_begin_22a4b6203;
		}
		_iter_end_22a4b6203:;
	};
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_244823942_Ast>>,jule::Slice<_242dbab89_Log>> _227607204_import_package(_246491d50_JuleImporter* _self_, jule::Str _9637_path, jule::Bool _9648_update_mod) {
	jule::Slice<jule::Ptr<_2410caa8d_DirEntry>> _9717_dirents = ({
		auto except = static__241d9a83a_read(_9637_path);
		(except.ok()) ? (except.result) : ({{
			return std::make_tuple(nullptr,jule::Slice<_242dbab89_Log>::make({_24648b50e_flat_compiler_err((jule::Str("connot read package directory: ", 31) + _9637_path))}));
		} jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>();});
	});;
	if (_9648_update_mod) {
		jule::Str _10217_new_mod = _24579dca6_find_module_file_deep(_9637_path);;
		if ((_10217_new_mod != (*_self_)._field_mod)) {
			(*_self_)._field_mod=_10217_new_mod;
			jule::Slice<_242dbab89_Log> _10525_errs = _24579e03c_check_module_file((*_self_)._field_mod);;
			if ((_10525_errs.len() != 0LL)) {
				return std::make_tuple(nullptr,_10525_errs);
			};
		};
	};
	jule::Slice<jule::Ptr<_244823942_Ast>> _11217_asts = jule::Slice<jule::Ptr<_244823942_Ast>>::alloc(0LL,_9717_dirents.len());;
	{
		auto &expr = _9717_dirents;
		auto it = expr.begin();
		_iter_begin_22a4ba449:;
		if (it != expr.end()) {
			jule::Ptr<_2410caa8d_DirEntry> _11316_dirent = *it;
			{
				if ((_2410b81b8_is_dir(_11316_dirent.get()._field_stat.ptr()) || (!(_242cb8d2e_has_suffix(_11316_dirent.get()._field_name,jule::Str(".jule", 5)))))) {
					goto _iter_next_22a4ba449;
				};
				jule::Str _11917__path = _241e8b167_join(jule::Slice<jule::Str>::make({_9637_path,_11316_dirent.get()._field_name}));;
				jule::Ptr<_2431e98ad_File> _12021_file = _2431eaddc_new_file_set(_11917__path);;
				_2431ea040_fill(_12021_file.ptr(), _24646ed83_read_buff(_12021_file.get()._field_path));
				jule::Slice<_242dbab89_Log> _12221_errors = _243206854_lex(_12021_file,static_cast<jule::I32>(0LL));;
				if ((_12221_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_12221_errors);
				};
				jule::Ptr<_2279da6c5_FileInfo> _12721_finfo = _2279e237a_parse_file(_12021_file);;
				if ((_12721_finfo.get()._field_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_12721_finfo.get()._field_errors);
				};
				if ((!(_2457736b5_is_pass_file_annotation(_11316_dirent.get()._field_name)))) {
					goto _iter_next_22a4ba449;
				};
				jule::Bool _13718_r;;
				jule::Slice<_242dbab89_Log> _13725_logs;;
				std::tie(_13718_r,_13725_logs) = _227626d4a_is_pass_build_directives(&(*_self_), _12721_finfo.get()._field_ast);
				if ((_13725_logs.len() > 0LL)) {
					return std::make_tuple(nullptr,_13725_logs);
				};
				if ((!(_13718_r))) {
					goto _iter_next_22a4ba449;
				};
				_11217_asts = jule::alloc_for_append(_11217_asts,1);_11217_asts.__push(_12721_finfo.get()._field_ast);;
			}
			_iter_next_22a4ba449:;
			++it;
			goto _iter_begin_22a4ba449;
		}
		_iter_end_22a4ba449:;
	};
	return std::make_tuple(_11217_asts,nullptr);
}



inline void _227615c90_imported(_246491d50_JuleImporter* _self_, jule::Ptr<_245547db3_ImportInfo> _15335_imp) {
	{
		auto &expr = (*_self_)._field_pkgs;
		auto it = expr.begin();
		_iter_begin_22a4c0ecc:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _15516_p = *it;
			{
				if (((_15516_p.get()._field_cpp_linked == _15335_imp.get()._field_cpp_linked) && (_15516_p.get()._field_link_path == _15335_imp.get()._field_link_path))) {
					return;;
				};
			}
			_iter_next_22a4c0ecc:;
			++it;
			goto _iter_begin_22a4c0ecc;
		}
		_iter_end_22a4c0ecc:;
	};
	if (((*_self_)._field_mod.len() != 0LL)) {
		{
			auto &expr = (*_self_)._field_mods;
			auto it = expr.begin();
			_iter_begin_22a4c28b3:;
			if (it != expr.end()) {
				jule::I32 _16217_i = it - expr.begin();
				jule::Str _16220_mod = *it;
				{
					if (((*_self_)._field_mod == _16220_mod)) {
						_15335_imp.get()._field_mod_id=_16217_i;
						goto _julec_label_setted;
					};
				}
				_iter_next_22a4c28b3:;
				++it;
				_16217_i++;
				goto _iter_begin_22a4c28b3;
			}
			_iter_end_22a4c28b3:;
		};
		_15335_imp.get()._field_mod_id=static_cast<jule::I32>((*_self_)._field_mods.len());
		(*_self_)._field_mods = jule::alloc_for_append((*_self_)._field_mods,1);(*_self_)._field_mods.__push((*_self_)._field_mod);;
		_julec_label_setted:;
	};
	(*_self_)._field_pkgs = jule::alloc_for_append((*_self_)._field_pkgs,1);(*_self_)._field_pkgs.__push(_15335_imp);;
}



inline std::tuple<jule::Bool,jule::Slice<_242dbab89_Log>> _227626d4a_is_pass_build_directives(_246491d50_JuleImporter* _self_, jule::Ptr<_244823942_Ast>& _17948_file) {
	{
		auto &expr = _17948_file.get()._field_top_directives;
		auto it = expr.begin();
		_iter_begin_22a4c5b3b:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _18021_td = *it;
			{
				if ((_18021_td.get()._field_tag.get()._field_kind != jule::Str("build", 5))) {
					goto _iter_next_22a4c5b3b;
				};
				_24578dd84_DirectiveEval _18421_de = _24578dd84_DirectiveEval{._field_d=_18021_td, ._field_vars=(*_self_)._field_vars};;
				jule::Bool _18817_result = _24579011b_eval(&_18421_de);;
				if ((_18421_de._field_logs.len() > 0LL)) {
					return std::make_tuple(false,_18421_de._field_logs);
				};
				if ((!(_18817_result))) {
					return std::make_tuple(false,nullptr);
				};
			}
			_iter_next_22a4c5b3b:;
			++it;
			goto _iter_begin_22a4c5b3b;
		}
		_iter_end_22a4c5b3b:;
	};
	return std::make_tuple(true,nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, _246491d50_JuleImporter _Src) {
	_Stream << "JuleImporter{";
	_Stream << "mods:" << _Src._field_mods << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "pkgs:" << _Src._field_pkgs << ", ";
	_Stream << "vars:" << _Src._field_vars;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _24572d54e_OrderedDefines _Src) {
	_Stream << "OrderedDefines{";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "globals:" << _Src._field_globals;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _22a4e7e5a_is_common_ordered(jule::Slice<jule::Ptr<_244848912_Struct>>& _1837_s, jule::Ptr<_244848912_Struct> _1846_t) {
	jule::Ptr<_244848912_Struct>* _1917_p = (&(_1846_t.get()._field_depends[0LL]));;
	jule::Ptr<_244848912_Struct>* _2013_end = (_1917_p + _1846_t.get()._field_depends.len());;
	{
		auto &expr = _1837_s;
		auto it = expr.begin();
		_iter_begin_22a4ead92:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> &_2116_tt = *it;
			{
				{
					if ((_2116_tt == _1846_t)) {
						goto _iter_end_22a4ead92;
					};
					if ((((*(_1917_p)).get()._field_cpp_linked || ((*(_1917_p)).get()._field_depends.len() == 0LL)) || (_2116_tt == (*(_1917_p))))) {
						(_1917_p)++;
						if ((_1917_p == _2013_end)) {
							return true;
						};
					};
				};
			}
			_iter_next_22a4ead92:;
			++it;
			goto _iter_begin_22a4ead92;
		}
		_iter_end_22a4ead92:;
	};
	return false;
}

inline jule::Bool _22a50131a_is_common_ordered(jule::Slice<jule::Ptr<_24556cc1d_Var>>& _1837_s, jule::Ptr<_24556cc1d_Var> _1846_t) {
	jule::Ptr<_24556cc1d_Var>* _1917_p = (&(_1846_t.get()._field_depends[0LL]));;
	jule::Ptr<_24556cc1d_Var>* _2013_end = (_1917_p + _1846_t.get()._field_depends.len());;
	{
		auto &expr = _1837_s;
		auto it = expr.begin();
		_iter_begin_22a50420d:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> &_2116_tt = *it;
			{
				{
					if ((_2116_tt == _1846_t)) {
						goto _iter_end_22a50420d;
					};
					if ((((*(_1917_p)).get()._field_cpp_linked || ((*(_1917_p)).get()._field_depends.len() == 0LL)) || (_2116_tt == (*(_1917_p))))) {
						(_1917_p)++;
						if ((_1917_p == _2013_end)) {
							return true;
						};
					};
				};
			}
			_iter_next_22a50420d:;
			++it;
			goto _iter_begin_22a50420d;
		}
		_iter_end_22a50420d:;
	};
	return false;
}



inline void _22a4e3e9a_order_common(jule::Slice<jule::Ptr<_244848912_Struct>>& _3940_s) {
	jule::I32 _4017_i = 0LL;;
	{
		auto &expr = _3940_s;
		auto it = expr.begin();
		_iter_begin_22a4e52ed:;
		if (it != expr.end()) {
			jule::I32 _4114_j = it - expr.begin();
			jule::Ptr<_244848912_Struct> _4121_t = *it;
			{
				if ((_4121_t.get()._field_cpp_linked || (_4121_t.get()._field_depends.len() == 0LL))) {
					_3940_s.swap(_4017_i,_4114_j);
					(_4017_i)++;
				};
			}
			_iter_next_22a4e52ed:;
			++it;
			_4114_j++;
			goto _iter_begin_22a4e52ed;
		}
		_iter_end_22a4e52ed:;
	};
	jule::I32 _4817_j = _4017_i;;
	for (; (_4817_j < _3940_s.len()); (_4817_j)++) {
		{
			jule::I32 _5021_k = _4017_i;;
			for (; (_5021_k < (_3940_s.len() - 1LL)); (_5021_k)++) {
				{
					if ((!(_22a4e7e5a_is_common_ordered(_3940_s,_3940_s[_5021_k])))) {
						_3940_s.swap(_5021_k,static_cast<jule::I32>((_5021_k + 1LL)));
					};
				}
			_iter_next_22a4e7872:;
			}
			_iter_end_22a4e7872:;;
		}
	_iter_next_22a4e5276:;
	}
	_iter_end_22a4e5276:;;
}

inline void _22a4e47d6_order_common(jule::Slice<jule::Ptr<_24556cc1d_Var>>& _3940_s) {
	jule::I32 _4017_i = 0LL;;
	{
		auto &expr = _3940_s;
		auto it = expr.begin();
		_iter_begin_22a4ed6ad:;
		if (it != expr.end()) {
			jule::I32 _4114_j = it - expr.begin();
			jule::Ptr<_24556cc1d_Var> _4121_t = *it;
			{
				if ((_4121_t.get()._field_cpp_linked || (_4121_t.get()._field_depends.len() == 0LL))) {
					_3940_s.swap(_4017_i,_4114_j);
					(_4017_i)++;
				};
			}
			_iter_next_22a4ed6ad:;
			++it;
			_4114_j++;
			goto _iter_begin_22a4ed6ad;
		}
		_iter_end_22a4ed6ad:;
	};
	jule::I32 _4817_j = _4017_i;;
	for (; (_4817_j < _3940_s.len()); (_4817_j)++) {
		{
			jule::I32 _5021_k = _4017_i;;
			for (; (_5021_k < (_3940_s.len() - 1LL)); (_5021_k)++) {
				{
					if ((!(_22a50131a_is_common_ordered(_3940_s,_3940_s[_5021_k])))) {
						_3940_s.swap(_5021_k,static_cast<jule::I32>((_5021_k + 1LL)));
					};
				}
			_iter_next_22a500c32:;
			}
			_iter_end_22a500c32:;;
		}
	_iter_next_22a4ed636:;
	}
	_iter_end_22a4ed636:;;
}



inline void static__22782c171_order_structures(jule::Slice<jule::Ptr<_244848912_Struct>>& _6141_structs) {
	_22a4e3e9a_order_common(_6141_structs);
}



inline void static__227837610_order_vars(jule::Slice<jule::Ptr<_24556cc1d_Var>>& _6735_vars) {
	_22a4e47d6_order_common(_6735_vars);
}







std::ostream &operator<<(std::ostream &_Stream, _2279dcc7c_DefineOrderer _Src) {
	_Stream << "DefineOrderer{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _227b315a7_LiveTable _Src) {
	_Stream << "LiveTable{";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "fns:" << _Src._field_fns << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "traits:" << _Src._field_traits;
	_Stream << "}";
	return _Stream;
}



inline void _227b63650_optimize_child(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552937d_Scope>& _3939_s) {
	jule::Ptr<_227b63177_ScopeDeadCode> _4017_sdc = jule::new_ptr<_227b63177_ScopeDeadCode>(_227b63177_ScopeDeadCode{._field_parent=_self_, ._field_s=_3939_s, ._field_stmts=(&(_3939_s.get()._field_stmts)), ._field_labels=_self_.get()._field_labels, ._field_gotos=_self_.get()._field_gotos, });;
	{
		_227b65c90_optimize_stmts(_4017_sdc);
	};
}



inline void _227b638e7_optimize_body_child_exceptional(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552937d_Scope>& _5056_s) {
	jule::Ptr<_227b63177_ScopeDeadCode> _5117_sdc = jule::new_ptr<_227b63177_ScopeDeadCode>(_227b63177_ScopeDeadCode{._field_s=_5056_s, ._field_stmts=(&(_5056_s.get()._field_stmts)), ._field_labels=_self_.get()._field_labels, ._field_gotos=_self_.get()._field_gotos, ._field_except=true});;
	{
		_227b65c90_optimize_stmts(_5117_sdc);
	};
}



inline void _227b63b7d_optimize_body_child(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552937d_Scope>& _6144_s) {
	jule::Ptr<_227b63177_ScopeDeadCode> _6217_sdc = jule::new_ptr<_227b63177_ScopeDeadCode>(_227b63177_ScopeDeadCode{._field_s=_6144_s, ._field_stmts=(&(_6144_s.get()._field_stmts)), ._field_labels=_self_.get()._field_labels, ._field_gotos=_self_.get()._field_gotos, });;
	{
		_227b65c90_optimize_stmts(_6217_sdc);
	};
}



inline void _227b63e03_optimize_expr_model(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Any& _7144_model) {
	_227b67115_ExprDeadCode _7213_edc = static__227b6770e_new(_self_);;
	_227b6cba9_optimize(&_7213_edc, _7144_model);
}



inline void _227b640ce_eliminate_followed(_227b63177_ScopeDeadCode* _self_) {
	if (((*_self_)._field_gotos.get().len() != 0LL)) {
		return;;
	};
	{
		(*((*_self_)._field_stmts))=(*((*_self_)._field_stmts)).slice(0LL,((*_self_)._field_i + 1LL));
	};
	jule::Ptr<_227b63177_ScopeDeadCode> _8317_parent = (*_self_)._field_parent;;
	while ((_8317_parent != nullptr)) {
		{
			{
				(*(_8317_parent.get()._field_stmts))=(*(_8317_parent.get()._field_stmts)).slice(0LL,(_8317_parent.get()._field_i + 1LL));
			};
			_8317_parent=_8317_parent.get()._field_parent;
		}
	_iter_next_22a573c0b:;
	}
	_iter_end_22a573c0b:;;
}



inline void _227b64354_push_goto(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552be30_GotoSt> _9233_gt) {
	jule::I32 _9317_i = 0LL;;
	for (; (_9317_i < _self_.get()._field_labels.get().len()); (_9317_i)++) {
		{
			if ((_9233_gt.get()._field_ident == (*(_self_.get()._field_labels))[_9317_i].get()._field_ident)) {
				return;;
			};
		}
	_iter_next_22a576637:;
	}
	_iter_end_22a576637:;;
	(*(_self_.get()._field_gotos))=jule::append((*(_self_.get()._field_gotos)),jule::Slice<jule::Ptr<_24552be30_GotoSt>>::make({_9233_gt}));
}



inline void _227b645c9_push_label(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552bb44_Label> _10234_l) {
	jule::I32 _10317_i = 0LL;;
	while ((_10317_i < _self_.get()._field_gotos.get().len())) {
		{
			if ((_10234_l.get()._field_ident == (*(_self_.get()._field_gotos))[_10317_i].get()._field_ident)) {
				jule::copy(((*(_self_.get()._field_gotos)).slice(_10317_i)), ((*(_self_.get()._field_gotos)).slice((_10317_i + 1LL))));
				(*(_self_.get()._field_gotos))=(*(_self_.get()._field_gotos)).slice(0LL,(_self_.get()._field_gotos.get().len() - 1LL));
				goto _iter_next_22a5783a3;
			};
			(_10317_i)++;
		}
	_iter_next_22a5783a3:;
	}
	_iter_end_22a5783a3:;;
	(*(_self_.get()._field_labels))=jule::append((*(_self_.get()._field_labels)),jule::Slice<jule::Ptr<_24552bb44_Label>>::make({_10234_l}));
}



inline void _227b6484e_optimize_range_iter(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552b0a5_RangeIter> _11543_it) {
	_227b63e03_optimize_expr_model(_self_, _11543_it.get()._field_expr.get()._field_model);
	_227b63b7d_optimize_body_child(_self_, _11543_it.get()._field_scope);
}



inline void _227b64ac4_optimize_while_iter(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552a6c0_WhileIter> _12043_it) {
	_227b63e03_optimize_expr_model(_self_, _12043_it.get()._field_expr);
	if ((_12043_it.get()._field_next != nullptr)) {
		_227b65ab4_optimize_stmt(_self_, _12043_it.get()._field_next);
	};
	_227b63b7d_optimize_body_child(_self_, _12043_it.get()._field_scope);
}



inline void _227b64d49_optimize_inf_iter(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552a24c_InfIter> _12841_it) {
	_227b63b7d_optimize_body_child(_self_, _12841_it.get()._field_scope);
}



inline void _227b650be_optimize_conditional(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_245529e61_Conditional> _13244_c) {
	{
		auto &expr = _13244_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_22a57de03:;
		if (it != expr.end()) {
			jule::Ptr<_245529779_If> _13321_case = *it;
			{
				if ((_13321_case != nullptr)) {
					_227b63e03_optimize_expr_model(_self_, _13321_case.get()._field_expr);
					_227b63b7d_optimize_body_child(_self_, _13321_case.get()._field_scope);
				};
			}
			_iter_next_22a57de03:;
			++it;
			goto _iter_begin_22a57de03;
		}
		_iter_end_22a57de03:;
	};
	if ((_13244_c.get()._field_default != nullptr)) {
		if ((_13244_c.get()._field_elifs.len() == 0LL)) {
			_227b63650_optimize_child(_self_, _13244_c.get()._field_default.get()._field_scope);
		} else {
			_227b63b7d_optimize_body_child(_self_, _13244_c.get()._field_default.get()._field_scope);
		};
	};
}



inline void _227b65344_optimize_match(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552d151_Match> _15038_m) {
	{
		auto &expr = _15038_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_22a581a60:;
		if (it != expr.end()) {
			jule::Ptr<_24552db9b_Case> _15121_case = *it;
			{
				{
					auto &expr = _15121_case.get()._field_exprs;
					auto it = expr.begin();
					_iter_begin_22a5823ce:;
					if (it != expr.end()) {
						jule::Ptr<_2455b5051_Data> _15225_expr = *it;
						{
							_227b63e03_optimize_expr_model(_self_, _15225_expr.get()._field_model);
						}
						_iter_next_22a5823ce:;
						++it;
						goto _iter_begin_22a5823ce;
					}
					_iter_end_22a5823ce:;
				};
				_227b63b7d_optimize_body_child(_self_, _15121_case.get()._field_scope);
			}
			_iter_next_22a581a60:;
			++it;
			goto _iter_begin_22a581a60;
		}
		_iter_end_22a581a60:;
	};
	if ((_15038_m.get()._field_default != nullptr)) {
		if ((_15038_m.get()._field_cases.len() == 0LL)) {
			_227b63650_optimize_child(_self_, _15038_m.get()._field_default.get()._field_scope);
		} else {
			_227b63b7d_optimize_body_child(_self_, _15038_m.get()._field_default.get()._field_scope);
		};
	};
}



inline void _227b655b9_optimize_assign(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552c75a_Assign> _16839_assign) {
	_227b63e03_optimize_expr_model(_self_, _16839_assign.get()._field_l.get()._field_model);
	_227b63e03_optimize_expr_model(_self_, _16839_assign.get()._field_r.get()._field_model);
}



inline void _227b6583e_optimize_multi_assign(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Ptr<_24552cb12_MultiAssign> _17345_assign) {
	{
		auto &expr = _17345_assign.get()._field_l;
		auto it = expr.begin();
		_iter_begin_22a585877:;
		if (it != expr.end()) {
			jule::Any _17421_l = *it;
			{
				if ((_17421_l != nullptr)) {
					_227b63e03_optimize_expr_model(_self_, _17421_l);
				};
			}
			_iter_next_22a585877:;
			++it;
			goto _iter_begin_22a585877;
		}
		_iter_end_22a585877:;
	};
	_227b63e03_optimize_expr_model(_self_, _17345_assign.get()._field_r);
}



inline void _227b65ab4_optimize_stmt(jule::Ptr<_227b63177_ScopeDeadCode> _self_, jule::Any _18237_st) {
	{
		auto &_match_expr{ _18237_st };
		
		if (_match_expr.type_is<jule::Ptr<_24552937d_Scope>>()) {
			_case_begin_22a586eb6:;
			{
				jule::Ptr<_24552937d_Scope> _18521_scope = _18237_st.operator jule::Ptr<_24552937d_Scope>();;
				if (_18521_scope.get()._field_deferred) {
					_227b6607b_eliminate_dead_code_of_scope(_18521_scope);
				} else {
					_227b63650_optimize_child(_self_, _18521_scope);
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552b0a5_RangeIter>>()) {
			_case_begin_22a58713c:;
			{
				_227b6484e_optimize_range_iter(_self_, _18237_st.operator jule::Ptr<_24552b0a5_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a6c0_WhileIter>>()) {
			_case_begin_22a5871a3:;
			{
				_227b64ac4_optimize_while_iter(_self_, _18237_st.operator jule::Ptr<_24552a6c0_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a24c_InfIter>>()) {
			_case_begin_22a587219:;
			{
				_227b64d49_optimize_inf_iter(_self_, _18237_st.operator jule::Ptr<_24552a24c_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245529e61_Conditional>>()) {
			_case_begin_22a587291:;
			{
				_227b650be_optimize_conditional(_self_, _18237_st.operator jule::Ptr<_245529e61_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552d151_Match>>()) {
			_case_begin_22a587318:;
			{
				_227b65344_optimize_match(_self_, _18237_st.operator jule::Ptr<_24552d151_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552c75a_Assign>>()) {
			_case_begin_22a587390:;
			{
				_227b655b9_optimize_assign(_self_, _18237_st.operator jule::Ptr<_24552c75a_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552cb12_MultiAssign>>()) {
			_case_begin_22a587417:;
			{
				_227b6583e_optimize_multi_assign(_self_, _18237_st.operator jule::Ptr<_24552cb12_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_22a58748e:;
			{
				jule::Ptr<_2455b5051_Data> _20621_d = _18237_st.operator jule::Ptr<_2455b5051_Data>();;
				if (_self_.get()._field_except) {
					goto _match_end_22a5870c6;
				};
				{
					auto &_match_expr{ _20621_d.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>() || _match_expr.type_is<jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>>()) {
						_case_begin_22a58c62b:;
						{
							_227b640ce_eliminate_followed(_self_.ptr());
						}
					}
					else {
						_case_begin_22a58cb48:;
						{
							_227b63e03_optimize_expr_model(_self_, _20621_d.get()._field_model);
						}
					}
					_match_end_22a58cae3:;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552e6c4_RetSt>>()) {
			_case_begin_22a587516:;
			{
				_227b640ce_eliminate_followed(_self_.ptr());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552be30_GotoSt>>()) {
			_case_begin_22a58758d:;
			{
				_227b64354_push_goto(_self_, _18237_st.operator jule::Ptr<_24552be30_GotoSt>());
				_227b640ce_eliminate_followed(_self_.ptr());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552bb44_Label>>()) {
			_case_begin_22a587615:;
			{
				_227b645c9_push_label(_self_, _18237_st.operator jule::Ptr<_24552bb44_Label>());
			}
		}
		_match_end_22a5870c6:;
	};
}



inline void _227b65c90_optimize_stmts(jule::Ptr<_227b63177_ScopeDeadCode> _self_) {
	_self_.get()._field_i=0LL;
	for (; (_self_.get()._field_i < _self_.get()._field_stmts->len()); (_self_.get()._field_i)++) {
		{
			_227b65ab4_optimize_stmt(_self_, (*(_self_.get()._field_stmts))[_self_.get()._field_i]);
		}
	_iter_next_22a58ea3a:;
	}
	_iter_end_22a58ea3a:;;
}







std::ostream &operator<<(std::ostream &_Stream, _227b63177_ScopeDeadCode _Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "except:" << _Src._field_except;
	_Stream << "}";
	return _Stream;
}



inline _227b67115_ExprDeadCode static__227b6770e_new(jule::Ptr<_227b63177_ScopeDeadCode>& _4724_s) {
	return _227b67115_ExprDeadCode{._field_s=_4724_s};
}



inline void _227b67984_binary(_227b67115_ExprDeadCode* _self_, jule::Ptr<_24491ea82_BinopExprModel> _5325_m) {
	_227b6cba9_optimize(&(*_self_), _5325_m.get()._field_left.get()._field_model);
	_227b6cba9_optimize(&(*_self_), _5325_m.get()._field_right.get()._field_model);
}



inline void _227b67c09_unary(_227b67115_ExprDeadCode* _self_, jule::Ptr<_24491ec6e_UnaryExprModel> _5824_m) {
	_227b6cba9_optimize(&(*_self_), _5824_m.get()._field_expr.get()._field_model);
}



inline void _227b67e7e_structure_lit(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244920148_StructLitExprModel> _6232_m) {
	{
		auto &expr = _6232_m.get()._field_args;
		auto it = expr.begin();
		_iter_begin_22a593203:;
		if (it != expr.end()) {
			jule::Ptr<_24491ee5b_StructArgExprModel> _6321_arg = *it;
			{
				_227b6cba9_optimize(&(*_self_), _6321_arg.get()._field_expr);
			}
			_iter_next_22a593203:;
			++it;
			goto _iter_begin_22a593203;
		}
		_iter_end_22a593203:;
	};
}



inline void _227b68204_alloc_structure(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244920335_AllocStructLitExprModel> _6834_m) {
	_227b67e7e_structure_lit(&(*_self_), _6834_m.get()._field_lit);
}



inline void _227b68479_casting(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244920522_CastingExprModel> _7226_m) {
	_227b6cba9_optimize(&(*_self_), _7226_m.get()._field_expr);
}



inline void _227b686ee_args(_227b67115_ExprDeadCode* _self_, jule::Slice<jule::Any>& _7624_args) {
	{
		auto &expr = _7624_args;
		auto it = expr.begin();
		_iter_begin_22a59547a:;
		if (it != expr.end()) {
			jule::Any _7721_arg = *it;
			{
				_227b6cba9_optimize(&(*_self_), _7721_arg);
			}
			_iter_next_22a59547a:;
			++it;
			goto _iter_begin_22a59547a;
		}
		_iter_end_22a59547a:;
	};
}



inline void _227b68974_func_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_24492070e_FnCallExprModel> _8228_m) {
	_227b6cba9_optimize(&(*_self_), _8228_m.get()._field_expr);
	_227b686ee_args(&(*_self_), _8228_m.get()._field_args);
	if ((_8228_m.get()._field_except != nullptr)) {
		_227b638e7_optimize_body_child_exceptional((*_self_)._field_s, _8228_m.get()._field_except);
	};
}



inline void _227b68be9_slice(_227b67115_ExprDeadCode* _self_, jule::Ptr<_2449208eb_SliceExprModel> _9024_m) {
	_227b686ee_args(&(*_self_), _9024_m.get()._field_elems);
}



inline void _227b68e6e_array(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244921d70_ArrayExprModel> _9424_m) {
	if (((_9424_m.get()._field_elems.len() == 2LL) && (_9424_m.get()._field_elems[1LL] == nullptr))) {
		_227b6cba9_optimize(&(*_self_), _9424_m.get()._field_elems[0LL]);
	};
	_227b686ee_args(&(*_self_), _9424_m.get()._field_elems);
}



inline void _227b691e4_indexing(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244920ad8_IndexingExprModel> _10127_m) {
	_227b6cba9_optimize(&(*_self_), _10127_m.get()._field_expr.get()._field_model);
	_227b6cba9_optimize(&(*_self_), _10127_m.get()._field_index.get()._field_model);
}



inline void _227b69469_anon_func(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244920cc5_AnonFnExprModel> _10628_m) {
	_227b6607b_eliminate_dead_code_of_scope(_10628_m.get()._field_func.get()._field_scope);
}



inline void _227b696de_map(_227b67115_ExprDeadCode* _self_, jule::Ptr<_24492119e_MapExprModel> _11022_m) {
	{
		auto &expr = _11022_m.get()._field_entries;
		auto it = expr.begin();
		_iter_begin_22a59b3b5:;
		if (it != expr.end()) {
			jule::Ptr<_244920eb2_KeyValPairExprModel> _11121_pair = *it;
			{
				_227b6cba9_optimize(&(*_self_), _11121_pair.get()._field_key);
				_227b6cba9_optimize(&(*_self_), _11121_pair.get()._field_val);
			}
			_iter_next_22a59b3b5:;
			++it;
			goto _iter_begin_22a59b3b5;
		}
		_iter_end_22a59b3b5:;
	};
}



inline void _227b69964_slicing(_227b67115_ExprDeadCode* _self_, jule::Ptr<_24492138b_SlicingExprModel> _11726_m) {
	_227b6cba9_optimize(&(*_self_), _11726_m.get()._field_expr);
	_227b6cba9_optimize(&(*_self_), _11726_m.get()._field_left);
	if ((_11726_m.get()._field_right != nullptr)) {
		_227b6cba9_optimize(&(*_self_), _11726_m.get()._field_right);
	};
}



inline void _227b69bd9_trait_sub(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244921578_TraitSubIdentExprModel> _12528_m) {
	_227b6cba9_optimize(&(*_self_), _12528_m.get()._field_expr);
}



inline void _227b69e5e_structure_sub(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244921996_StructSubIdentExprModel> _12932_m) {
	_227b6cba9_optimize(&(*_self_), _12932_m.get()._field_expr.get()._field_model);
}



inline void _227b6a1d4_common_sub(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244922249_CommonSubIdentExprModel> _13329_m) {
	_227b6cba9_optimize(&(*_self_), _13329_m.get()._field_expr);
}



inline void _227b6a459_tuple(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244922436_TupleExprModel> _13724_m) {
	{
		auto &expr = _13724_m.get()._field_datas;
		auto it = expr.begin();
		_iter_begin_22a5a08a3:;
		if (it != expr.end()) {
			jule::Ptr<_2455b5051_Data> _13821_d = *it;
			{
				_227b6cba9_optimize(&(*_self_), _13821_d.get()._field_model);
			}
			_iter_next_22a5a08a3:;
			++it;
			goto _iter_begin_22a5a08a3;
		}
		_iter_end_22a5a08a3:;
	};
}



inline void _227b6a6ce_new_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244922bd9_BuiltinNewCallExprModel> _14327_m) {
	if ((_14327_m.get()._field_init != nullptr)) {
		_227b6cba9_optimize(&(*_self_), _14327_m.get()._field_init);
	};
}



inline void _227b6a954_out_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244922623_BuiltinOutCallExprModel> _14927_m) {
	_227b6cba9_optimize(&(*_self_), _14927_m.get()._field_expr);
}



inline void _227b6abc9_outln_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244922810_BuiltinOutlnCallExprModel> _15329_m) {
	_227b6cba9_optimize(&(*_self_), _15329_m.get()._field_expr);
}



inline void _227b6ae4e_panic_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244922dc6_BuiltinPanicCallExprModel> _15729_m) {
	_227b6cba9_optimize(&(*_self_), _15729_m.get()._field_expr);
}



inline void _227b6b1c4_assert_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_2449230b3_BuiltinAssertCallExprModel> _16130_m) {
	_227b6cba9_optimize(&(*_self_), _16130_m.get()._field_expr);
}



inline void _227b6b449_error_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244923866_BuiltinErrorCallExprModel> _16529_m) {
	_227b6cba9_optimize(&(*_self_), _16529_m.get()._field_err);
}



inline void _227b6b6be_make_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel> _16928_m) {
	if ((_16928_m.get()._field_len != nullptr)) {
		_227b6cba9_optimize(&(*_self_), _16928_m.get()._field_len);
	};
	if ((_16928_m.get()._field_cap != nullptr)) {
		_227b6cba9_optimize(&(*_self_), _16928_m.get()._field_cap);
	};
}



inline void _227b6b944_append_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_24492348c_BuiltinAppendCallExprModel> _17830_m) {
	_227b6cba9_optimize(&(*_self_), _17830_m.get()._field_dest);
	_227b6cba9_optimize(&(*_self_), _17830_m.get()._field_elements);
}



inline void _227b6bbb9_clone_call(_227b67115_ExprDeadCode* _self_, jule::Ptr<_2449229ec_BuiltinCloneCallExprModel> _18329_m) {
	_227b6cba9_optimize(&(*_self_), _18329_m.get()._field_expr);
}



inline void _227b6be3e_sizeof(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244921765_SizeofExprModel> _18725_m) {
	_227b6cba9_optimize(&(*_self_), _18725_m.get()._field_expr);
}



inline void _227b6c1b4_alignof(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244923ec6_AlignofExprModel> _19126_m) {
	_227b6cba9_optimize(&(*_self_), _19126_m.get()._field_expr);
}



inline void _227b6c439_integrated_to_str(_227b67115_ExprDeadCode* _self_, jule::Ptr<_2449243a0_IntegratedToStrExprModel> _19536_m) {
	_227b6cba9_optimize(&(*_self_), _19536_m.get()._field_expr);
}



inline void _227b6c6ae_free(_227b67115_ExprDeadCode* _self_, jule::Ptr<_244924779_FreeExprModel> _19923_m) {
	_227b6cba9_optimize(&(*_self_), _19923_m.get()._field_expr);
}



inline void _227b6c934_backend_emit(_227b67115_ExprDeadCode* _self_, jule::Ptr<_24492458c_BackendEmitExprModel> _20331_m) {
	_227b686ee_args(&(*_self_), _20331_m.get()._field_exprs);
}



inline void _227b6cba9_optimize(_227b67115_ExprDeadCode* _self_, jule::Any& _20728_model) {
	{
		auto &_match_expr{ _20728_model };
		
		if (_match_expr.type_is<jule::Ptr<_24491ea82_BinopExprModel>>()) {
			_case_begin_22a5aaa78:;
			{
				_227b67984_binary(&(*_self_), _20728_model.operator jule::Ptr<_24491ea82_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24491ec6e_UnaryExprModel>>()) {
			_case_begin_22a5aab00:;
			{
				_227b67c09_unary(&(*_self_), _20728_model.operator jule::Ptr<_24491ec6e_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920148_StructLitExprModel>>()) {
			_case_begin_22a5aab77:;
			{
				_227b67e7e_structure_lit(&(*_self_), _20728_model.operator jule::Ptr<_244920148_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920335_AllocStructLitExprModel>>()) {
			_case_begin_22a5ab01d:;
			{
				_227b68204_alloc_structure(&(*_self_), _20728_model.operator jule::Ptr<_244920335_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920522_CastingExprModel>>()) {
			_case_begin_22a5ab084:;
			{
				_227b68479_casting(&(*_self_), _20728_model.operator jule::Ptr<_244920522_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
			_case_begin_22a5ab10b:;
			{
				_227b68974_func_call(&(*_self_), _20728_model.operator jule::Ptr<_24492070e_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449208eb_SliceExprModel>>()) {
			_case_begin_22a5ab183:;
			{
				_227b68be9_slice(&(*_self_), _20728_model.operator jule::Ptr<_2449208eb_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921d70_ArrayExprModel>>()) {
			_case_begin_22a5ab20a:;
			{
				_227b68e6e_array(&(*_self_), _20728_model.operator jule::Ptr<_244921d70_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920ad8_IndexingExprModel>>()) {
			_case_begin_22a5ab282:;
			{
				_227b691e4_indexing(&(*_self_), _20728_model.operator jule::Ptr<_244920ad8_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920cc5_AnonFnExprModel>>()) {
			_case_begin_22a5ab309:;
			{
				_227b69469_anon_func(&(*_self_), _20728_model.operator jule::Ptr<_244920cc5_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492119e_MapExprModel>>()) {
			_case_begin_22a5ab381:;
			{
				_227b696de_map(&(*_self_), _20728_model.operator jule::Ptr<_24492119e_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492138b_SlicingExprModel>>()) {
			_case_begin_22a5ab408:;
			{
				_227b69964_slicing(&(*_self_), _20728_model.operator jule::Ptr<_24492138b_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921578_TraitSubIdentExprModel>>()) {
			_case_begin_22a5ab480:;
			{
				_227b69bd9_trait_sub(&(*_self_), _20728_model.operator jule::Ptr<_244921578_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
			_case_begin_22a5ab507:;
			{
				_227b69e5e_structure_sub(&(*_self_), _20728_model.operator jule::Ptr<_244921996_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922249_CommonSubIdentExprModel>>()) {
			_case_begin_22a5ab57e:;
			{
				_227b6a1d4_common_sub(&(*_self_), _20728_model.operator jule::Ptr<_244922249_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922436_TupleExprModel>>()) {
			_case_begin_22a5ab606:;
			{
				_227b6a459_tuple(&(*_self_), _20728_model.operator jule::Ptr<_244922436_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922623_BuiltinOutCallExprModel>>()) {
			_case_begin_22a5ab67d:;
			{
				_227b6a954_out_call(&(*_self_), _20728_model.operator jule::Ptr<_244922623_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922810_BuiltinOutlnCallExprModel>>()) {
			_case_begin_22a5ab705:;
			{
				_227b6abc9_outln_call(&(*_self_), _20728_model.operator jule::Ptr<_244922810_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922bd9_BuiltinNewCallExprModel>>()) {
			_case_begin_22a5ab77c:;
			{
				_227b6a6ce_new_call(&(*_self_), _20728_model.operator jule::Ptr<_244922bd9_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>>()) {
			_case_begin_22a5ab804:;
			{
				_227b6ae4e_panic_call(&(*_self_), _20728_model.operator jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>>()) {
			_case_begin_22a5ab87b:;
			{
				_227b6b1c4_assert_call(&(*_self_), _20728_model.operator jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>()) {
			_case_begin_22a5ab903:;
			{
				_227b6b449_error_call(&(*_self_), _20728_model.operator jule::Ptr<_244923866_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>>()) {
			_case_begin_22a5ab97a:;
			{
				_227b6b6be_make_call(&(*_self_), _20728_model.operator jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492348c_BuiltinAppendCallExprModel>>()) {
			_case_begin_22a5aba02:;
			{
				_227b6b944_append_call(&(*_self_), _20728_model.operator jule::Ptr<_24492348c_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>>()) {
			_case_begin_22a5aba79:;
			{
				_227b6bbb9_clone_call(&(*_self_), _20728_model.operator jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921765_SizeofExprModel>>()) {
			_case_begin_22a5abb01:;
			{
				_227b6be3e_sizeof(&(*_self_), _20728_model.operator jule::Ptr<_244921765_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244923ec6_AlignofExprModel>>()) {
			_case_begin_22a5abb78:;
			{
				_227b6c1b4_alignof(&(*_self_), _20728_model.operator jule::Ptr<_244923ec6_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449243a0_IntegratedToStrExprModel>>()) {
			_case_begin_22a5abc00:;
			{
				_227b6c439_integrated_to_str(&(*_self_), _20728_model.operator jule::Ptr<_2449243a0_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244924779_FreeExprModel>>()) {
			_case_begin_22a5abc77:;
			{
				_227b6c6ae_free(&(*_self_), _20728_model.operator jule::Ptr<_244924779_FreeExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492458c_BackendEmitExprModel>>()) {
			_case_begin_22a5abcee:;
			{
				_227b6c934_backend_emit(&(*_self_), _20728_model.operator jule::Ptr<_24492458c_BackendEmitExprModel>());
			}
		}
		_match_end_22a5aac76:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _227b67115_ExprDeadCode _Src) {
	_Stream << "ExprDeadCode{";
	_Stream << "s:" << _Src._field_s;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2456a7176_UnsafeBinopExprModel _Src) {
	_Stream << "UnsafeBinopExprModel{";
	_Stream << "node:" << _Src._field_node;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2456a7495_UnsafeIndexingExprModel _Src) {
	_Stream << "UnsafeIndexingExprModel{";
	_Stream << "node:" << _Src._field_node;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2456a785d_PushToSliceExprModel _Src) {
	_Stream << "PushToSliceExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2456a7e24_MutSlicingExprModel _Src) {
	_Stream << "MutSlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _2456a82ba_StrInsertBeginExprModel _Src) {
	_Stream << "StrInsertBeginExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2456a9442_ScopeOptimizer> static__2456a9992_new(jule::Ptr<_24552937d_Scope> _4527_scope) {
	return jule::new_ptr<_2456a9442_ScopeOptimizer>(_2456a9442_ScopeOptimizer{._field_scope=_4527_scope});
}



inline void _2456a9c17_set_current_stmt(_2456a9442_ScopeOptimizer* _self_, jule::Any _5139_stmt) {
	(*_self_)._field_scope.get()._field_stmts[(*_self_)._field_i]=(*(((jule::Any*)((&(_5139_stmt))))));
}



inline void _2456a9e8c_optimize_data(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_2455b5051_Data> _5536_d) {
	{
		auto &_match_expr{ _5536_d.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
			_case_begin_22a5eb415:;
			{
				jule::Ptr<_24492070e_FnCallExprModel> _5821_m = _5536_d.get()._field_model.operator jule::Ptr<_24492070e_FnCallExprModel>();;
				if (_240e658e5_PRODUCTION) {
					if (((!(_24492ad46_is_builtin(_5821_m.get()._field_func.ptr()))) && _2456acce7_is_std_package(_5821_m.get()._field_func.get()._field_decl.get()._field_token.get()._field_file.get()._field_path,jule::Str("debug", 5)))) {
						_2456a9c17_set_current_stmt(&(*_self_), nullptr);
						return;;
					};
				};
			}
		}
		_match_end_22a5eb206:;
	};
	static__2456b004c_optimize(_5536_d.get()._field_model);
}



inline void _2456aa212_optimize_var(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24556cc1d_Var> _7035_v) {
	if ((_7035_v.get()._field_value != nullptr)) {
		static__2456b004c_optimize(_7035_v.get()._field_value.get()._field_data.get()._field_model);
	};
}



inline void _2456aa487_optimize_conditional(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_245529e61_Conditional> _7643_c) {
	{
		auto &expr = _7643_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_22a5ee45c:;
		if (it != expr.end()) {
			jule::Ptr<_245529779_If> _7721_elif = *it;
			{
				static__2456b004c_optimize(_7721_elif.get()._field_expr);
				_2456ac720_optimize_child(&(*_self_), _7721_elif.get()._field_scope);
			}
			_iter_next_22a5ee45c:;
			++it;
			goto _iter_begin_22a5ee45c;
		}
		_iter_end_22a5ee45c:;
	};
	if ((_7643_c.get()._field_default != nullptr)) {
		_2456ac720_optimize_child(&(*_self_), _7643_c.get()._field_default.get()._field_scope);
	};
	if ((!(_2456b7ebc_COND))) {
		return;;
	};
	jule::Bool _8917_const_case = false;;
	{
		auto &expr = _7643_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_22a601492:;
		if (it != expr.end()) {
			jule::I32 _9214_i = it - expr.begin();
			jule::Ptr<_245529779_If> _9221_elif = *it;
			{
				if ((!(_2456ad116_is_constant_valid_conditional_case(_9221_elif)))) {
					goto _iter_next_22a601492;
				};
				_8917_const_case=true;
				_7643_c.get()._field_elifs=_7643_c.get()._field_elifs.slice(0LL,_9214_i);
				_7643_c.get()._field_default=jule::new_ptr<_245529a65_Else>(_245529a65_Else{._field_scope=_9221_elif.get()._field_scope});
				goto _iter_end_22a601492;
			}
			_iter_next_22a601492:;
			++it;
			_9214_i++;
			goto _iter_begin_22a601492;
		}
		_iter_end_22a601492:;
	};
	if ((_7643_c.get()._field_elifs.len() == 0LL)) {
		return;;
	};
	jule::Ptr<_245529779_If>* _10917_i = (&(_7643_c.get()._field_elifs[0LL]));;
	jule::Ptr<_245529779_If>* _11013_end = (&(_7643_c.get()._field_elifs[(_7643_c.get()._field_elifs.len() - 1LL)]));;
	for (; (_10917_i <= _11013_end); (_10917_i)++) {
		{
			{
				if (_2456ad996_is_unreachable_conditional_case((*(_10917_i)))) {
					(*(_10917_i))=nullptr;
				};
			};
		}
	_iter_next_22a6047b4:;
	}
	_iter_end_22a6047b4:;;
	if ((_7643_c.get()._field_elifs.len() == 0LL)) {
		return;;
	};
	if ((!(_8917_const_case))) {
		return;;
	};
	jule::I32 _12817_only = -1LL;;
	{
		auto &expr = _7643_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_22a606024:;
		if (it != expr.end()) {
			jule::I32 _12913_j = it - expr.begin();
			jule::Ptr<_245529779_If> _12916_elif = *it;
			{
				if ((_12916_elif != nullptr)) {
					if ((_12817_only != -1LL)) {
						return;;
					};
					_12817_only=_12913_j;
				};
			}
			_iter_next_22a606024:;
			++it;
			_12913_j++;
			goto _iter_begin_22a606024;
		}
		_iter_end_22a606024:;
	};
	if ((_12817_only != -1LL)) {
		_2456a9c17_set_current_stmt(&(*_self_), jule::Any(_7643_c.get()._field_elifs[_12817_only].get()._field_scope));
	};
}



inline void _2456aa872_build_default_constat_true_case(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552db9b_Case> _14554_case, jule::I32& _14572_i, jule::Ptr<_24552d151_Match>& _14585_m) {
	_14554_case.get()._field_exprs=nullptr;
	jule::I32 _14713_start = _14572_i;;
	_julec_label_loop:;
	for (;;) {
		{
			if ((_14554_case.get()._field_scope.get()._field_stmts.len() == 0LL)) {
				goto _iter_end_22a60871e;
			};
			jule::Any &_15322_stmt = _14554_case.get()._field_scope.get()._field_stmts[(_14554_case.get()._field_scope.get()._field_stmts.len() - 1LL)];;
			{
				auto &_match_expr{ _15322_stmt };
				
				if (_match_expr.type_is<jule::Ptr<_24552e251_FallSt>>()) {
					_case_begin_22a6090d2:;
					{
						(_14572_i)++;
						if ((_14572_i >= _14585_m.get()._field_cases.len())) {
							_15322_stmt=static_cast<jule::Any>(_14585_m.get()._field_default.get()._field_scope);
							goto _iter_end_22a60871e;
						};
						_14554_case=_14585_m.get()._field_cases[_14572_i];
						_15322_stmt=static_cast<jule::Any>(_14554_case.get()._field_scope);
					}
				}
				else {
					_case_begin_22a60a622:;
					{
						goto _iter_end_22a60871e;
					}
				}
				_match_end_22a60a534:;
			};
		}
	_iter_next_22a60871e:;
	}
	_iter_end_22a60871e:;;
	_14585_m.get()._field_default=_14585_m.get()._field_cases[_14713_start];
	_14585_m.get()._field_cases=_14585_m.get()._field_cases.slice(0LL,_14713_start);
}



inline void _2456aaa81_optimize_match(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552d151_Match> _17137_m) {
	{
		auto &expr = _17137_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_22a60c6ac:;
		if (it != expr.end()) {
			jule::Ptr<_24552db9b_Case> _17221_case = *it;
			{
				{
					auto &expr = _17221_case.get()._field_exprs;
					auto it = expr.begin();
					_iter_begin_22a60d04d:;
					if (it != expr.end()) {
						jule::Ptr<_2455b5051_Data> _17325_expr = *it;
						{
							static__2456b004c_optimize(_17325_expr.get()._field_model);
						}
						_iter_next_22a60d04d:;
						++it;
						goto _iter_begin_22a60d04d;
					}
					_iter_end_22a60d04d:;
				};
				_2456ac720_optimize_child(&(*_self_), _17221_case.get()._field_scope);
			}
			_iter_next_22a60c6ac:;
			++it;
			goto _iter_begin_22a60c6ac;
		}
		_iter_end_22a60c6ac:;
	};
	if ((_17137_m.get()._field_default != nullptr)) {
		_2456ac720_optimize_child(&(*_self_), _17137_m.get()._field_default.get()._field_scope);
	};
	if ((!(_2456b7ebc_COND))) {
		return;;
	};
	jule::Bool _18617_const_case = false;;
	{
		auto &expr = _17137_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_22a60ecca:;
		if (it != expr.end()) {
			jule::I32 _18918_i = it - expr.begin();
			jule::Ptr<_24552db9b_Case> _18925_case = *it;
			{
				if ((!(_2456ad6ee_is_constant_valid_match_case(_18925_case)))) {
					goto _iter_next_22a60ecca;
				};
				_18617_const_case=true;
				_2456aa872_build_default_constat_true_case(&(*_self_), _18925_case,_18918_i,_17137_m);
				goto _iter_end_22a60ecca;
			}
			_iter_next_22a60ecca:;
			++it;
			_18918_i++;
			goto _iter_begin_22a60ecca;
		}
		_iter_end_22a60ecca:;
	};
	if ((_17137_m.get()._field_cases.len() == 0LL)) {
		return;;
	};
	jule::Ptr<_24552db9b_Case>* _20317_i = (&(_17137_m.get()._field_cases[0LL]));;
	jule::Ptr<_24552db9b_Case>* _20413_end = (&(_17137_m.get()._field_cases[(_17137_m.get()._field_cases.len() - 1LL)]));;
	for (; (_20317_i <= _20413_end); (_20317_i)++) {
		{
			{
				if (_2456adc71_is_unreachable_match_case((*(_20317_i)))) {
					(*(_20317_i))=nullptr;
				};
			};
		}
	_iter_next_22a612b79:;
	}
	_iter_end_22a612b79:;;
	if ((!(_18617_const_case))) {
		return;;
	};
	jule::I32 _21817_only = -1LL;;
	{
		auto &expr = _17137_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_22a613d23:;
		if (it != expr.end()) {
			jule::I32 _21913_j = it - expr.begin();
			jule::Ptr<_24552db9b_Case> _21916_case = *it;
			{
				if ((_21916_case != nullptr)) {
					if ((_21817_only != -1LL)) {
						return;;
					};
					_21817_only=_21913_j;
				};
			}
			_iter_next_22a613d23:;
			++it;
			_21913_j++;
			goto _iter_begin_22a613d23;
		}
		_iter_end_22a613d23:;
	};
	if ((_21817_only != -1LL)) {
		_2456a9c17_set_current_stmt(&(*_self_), jule::Any(_17137_m.get()._field_cases[_21817_only].get()._field_scope));
	};
}



inline void _2456aad06_optimize_range_iter(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552b0a5_RangeIter> _23542_it) {
	static__2456b004c_optimize(_23542_it.get()._field_expr.get()._field_model);
	_2456ac720_optimize_child(&(*_self_), _23542_it.get()._field_scope);
}



inline void _2456ab07b_optimize_while_iter(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552a6c0_WhileIter> _24042_it) {
	static__2456b004c_optimize(_24042_it.get()._field_expr);
	_2456ac49a_optimize_stmt(&(*_self_), _24042_it.get()._field_next);
	_2456ac720_optimize_child(&(*_self_), _24042_it.get()._field_scope);
}



inline jule::Bool _2456ab389_substr(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552c75a_Assign> _24629_a) {
	{
		auto &_match_expr{ _24629_a.get()._field_r.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24492138b_SlicingExprModel>>()) {
			_case_begin_22a618025:;
			{
				jule::Ptr<_24492138b_SlicingExprModel> _24921_sem = _24629_a.get()._field_r.get()._field_model.operator jule::Ptr<_24492138b_SlicingExprModel>();;
				if ((_24921_sem.get()._field_expr == _24629_a.get()._field_l.get()._field_model)) {
					_2456a9c17_set_current_stmt(&(*_self_), jule::Any(jule::new_ptr<_2456a7e24_MutSlicingExprModel>(_2456a7e24_MutSlicingExprModel{._field_token=_24921_sem.get()._field_token, ._field_expr=_24921_sem.get()._field_expr, ._field_left=_24921_sem.get()._field_left, ._field_right=_24921_sem.get()._field_right})));
					return true;
				};
			}
		}
		_match_end_22a617ec0:;
	};
	return false;
}



inline jule::Bool _2456ab697_str_insert(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552c75a_Assign> _26333_a) {
	{
		auto &_match_expr{ _26333_a.get()._field_r.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24491ea82_BinopExprModel>>()) {
			_case_begin_22a61a434:;
			{
				jule::Ptr<_24491ea82_BinopExprModel> _26621_m = _26333_a.get()._field_r.get()._field_model.operator jule::Ptr<_24491ea82_BinopExprModel>();;
				if ((_26621_m.get()._field_right.get()._field_model == _26333_a.get()._field_l.get()._field_model)) {
					_2456a9c17_set_current_stmt(&(*_self_), jule::Any(jule::new_ptr<_2456a82ba_StrInsertBeginExprModel>(_2456a82ba_StrInsertBeginExprModel{._field_dest=_26333_a.get()._field_l.get()._field_model, ._field_expr=_26621_m.get()._field_left.get()._field_model})));
					return true;
				};
			}
		}
		_match_end_22a61a3ce:;
	};
	return false;
}



inline jule::Bool _2456ab9a5_str_assign(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552c75a_Assign> _27833_a) {
	if ((_27833_a.get()._field_op.get()._field_kind != jule::Str("=", 1))) {
		return false;
	};
	jule::Ptr<_2455e59ee_Prim> _28213_lp = _2455e3139_prim(_27833_a.get()._field_l.get()._field_kind.ptr());;
	if (((_28213_lp == nullptr) || (!(_2455e8c33_is_str(_28213_lp.ptr()))))) {
		return false;
	};
	{
		
		if (_2456ab389_substr(&(*_self_), _27833_a) || _2456ab697_str_insert(&(*_self_), _27833_a)) {
			_case_begin_22a61dd61:;
			{
				return true;
			}
		}
		_match_end_22a61dcc8:;
	};
	return false;
}



inline void _2456abc2a_optimize_assign(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552c75a_Assign> _29438_assign) {
	if ((_2456b66b3_COPY && _2456ab9a5_str_assign(&(*_self_), _29438_assign))) {
		return;;
	};
	static__2456b004c_optimize(_29438_assign.get()._field_l.get()._field_model);
	static__2456b004c_optimize(_29438_assign.get()._field_r.get()._field_model);
	{
		auto &_match_expr{ _29438_assign.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("/=", 2) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_22a620d52:;
			{
				if ((_2456b7175_MATH && (_2455e458b_strct(_29438_assign.get()._field_l.get()._field_kind.ptr()) == nullptr))) {
					_29438_assign.get()._field_op.get()._field_kind=_29438_assign.get()._field_op.get()._field_kind.slice(0LL,(_29438_assign.get()._field_op.get()._field_kind.len() - 1LL));
					jule::Any _30725_model = static_cast<jule::Any>(jule::new_ptr<_24491ea82_BinopExprModel>(_24491ea82_BinopExprModel{._field_left=_29438_assign.get()._field_l, ._field_right=_29438_assign.get()._field_r, ._field_op=_29438_assign.get()._field_op}));;
					static__2456b004c_optimize(_30725_model);
					{
						auto &_match_expr{ _30725_model };
						
						if (_match_expr.type_is<jule::Ptr<_24491ea82_BinopExprModel>>()) {
							_case_begin_22a623492:;
							{
								_29438_assign.get()._field_r=jule::new_ptr<_24491e895_OperandExprModel>((*(_29438_assign.get()._field_r)));
								_29438_assign.get()._field_op.get()._field_kind=jule::Str("=", 1);
								_29438_assign.get()._field_r.get()._field_model=_30725_model;
								return;;
							}
						}
						_match_end_22a62330a:;
					};
					_29438_assign.get()._field_op.get()._field_kind+=jule::Str("=", 1);
					return;;
				};
			}
		}
		_match_end_22a620cec:;
	};
	if (_2456b6d23_APPEND) {
		{
			auto &_match_expr{ _29438_assign.get()._field_r.get()._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_24492348c_BuiltinAppendCallExprModel>>()) {
				_case_begin_22a624d89:;
				{
					jule::Ptr<_24492348c_BuiltinAppendCallExprModel> _32825_m = _29438_assign.get()._field_r.get()._field_model.operator jule::Ptr<_24492348c_BuiltinAppendCallExprModel>();;
					{
						auto &_match_expr{ _32825_m.get()._field_elements };
						
						if (_match_expr.type_is<jule::Ptr<_2449208eb_SliceExprModel>>()) {
							_case_begin_22a625e01:;
							{
								{
									auto &_match_expr{ _32825_m.get()._field_dest };
									
									if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>() || _match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
										_case_begin_22a6266d7:;
										{
											_2456a9c17_set_current_stmt(&(*_self_), jule::Any(jule::new_ptr<_2456a785d_PushToSliceExprModel>(_2456a785d_PushToSliceExprModel{._field_dest=_32825_m.get()._field_dest, ._field_elems=_32825_m.get()._field_elements.operator jule::Ptr<_2449208eb_SliceExprModel>()})));
										}
									}
									_match_end_22a626682:;
								};
							}
						}
						_match_end_22a625c47:;
					};
				}
			}
			_match_end_22a6218ad:;
		};
	};
}



inline void _2456abea0_optimize_multi_assign(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552cb12_MultiAssign> _34444_assign) {
	{
		auto &expr = _34444_assign.get()._field_l;
		auto it = expr.begin();
		_iter_begin_22a621281:;
		if (it != expr.end()) {
			jule::I32 _34514_i = it - expr.begin();
			jule::Any _34521_l = *it;
			{
				if ((_34521_l != nullptr)) {
					static__2456b004c_optimize(_34521_l);
					_34444_assign.get()._field_l[_34514_i]=_34521_l;
				};
			}
			_iter_next_22a621281:;
			++it;
			_34514_i++;
			goto _iter_begin_22a621281;
		}
		_iter_end_22a621281:;
	};
	static__2456b004c_optimize(_34444_assign.get()._field_r);
}



inline void _2456ac225_optimize_ret(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552e6c4_RetSt> _35435_r) {
	static__2456b004c_optimize(_35435_r.get()._field_expr);
}



inline void _2456ac49a_optimize_stmt(_2456a9442_ScopeOptimizer* _self_, jule::Any _35836_stmt) {
	{
		auto &_match_expr{ _35836_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_24552937d_Scope>>()) {
			_case_begin_22a6293aa:;
			{
				_2456ac720_optimize_child(&(*_self_), _35836_stmt.operator jule::Ptr<_24552937d_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_22a629421:;
			{
				_2456a9e8c_optimize_data(&(*_self_), _35836_stmt.operator jule::Ptr<_2455b5051_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_22a629487:;
			{
				_2456aa212_optimize_var(&(*_self_), _35836_stmt.operator jule::Ptr<_24556cc1d_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245529e61_Conditional>>()) {
			_case_begin_22a6294ed:;
			{
				_2456aa487_optimize_conditional(&(*_self_), _35836_stmt.operator jule::Ptr<_245529e61_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552b0a5_RangeIter>>()) {
			_case_begin_22a629564:;
			{
				_2456aad06_optimize_range_iter(&(*_self_), _35836_stmt.operator jule::Ptr<_24552b0a5_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a6c0_WhileIter>>()) {
			_case_begin_22a6295ca:;
			{
				_2456ab07b_optimize_while_iter(&(*_self_), _35836_stmt.operator jule::Ptr<_24552a6c0_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a24c_InfIter>>()) {
			_case_begin_22a629641:;
			{
				_2456ac720_optimize_child(&(*_self_), _35836_stmt.operator jule::Ptr<_24552a24c_InfIter>().get()._field_scope);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552c75a_Assign>>()) {
			_case_begin_22a6296a7:;
			{
				_2456abc2a_optimize_assign(&(*_self_), _35836_stmt.operator jule::Ptr<_24552c75a_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552cb12_MultiAssign>>()) {
			_case_begin_22a62971d:;
			{
				_2456abea0_optimize_multi_assign(&(*_self_), _35836_stmt.operator jule::Ptr<_24552cb12_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552d151_Match>>()) {
			_case_begin_22a629795:;
			{
				_2456aaa81_optimize_match(&(*_self_), _35836_stmt.operator jule::Ptr<_24552d151_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552e6c4_RetSt>>()) {
			_case_begin_22a62981c:;
			{
				_2456ac225_optimize_ret(&(*_self_), _35836_stmt.operator jule::Ptr<_24552e6c4_RetSt>());
			}
		}
		_match_end_22a629256:;
	};
}



inline void _2456ac720_optimize_child(_2456a9442_ScopeOptimizer* _self_, jule::Ptr<_24552937d_Scope> _38537_child) {
	jule::Ptr<_2456a9442_ScopeOptimizer> _38617_so = static__2456a9992_new(_38537_child);;
	_2456ac8eb_optimize(_38617_so.ptr());
}



inline void _2456ac8eb_optimize(_2456a9442_ScopeOptimizer* _self_) {
	{
		auto &expr = (*_self_)._field_scope.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_22a630878:;
		if (it != expr.end()) {
			jule::I32 _39214_i = it - expr.begin();
			jule::Any _39221_stmt = *it;
			{
				(*_self_)._field_i=_39214_i;
				_2456ac49a_optimize_stmt(&(*_self_), _39221_stmt);
			}
			_iter_next_22a630878:;
			++it;
			_39214_i++;
			goto _iter_begin_22a630878;
		}
		_iter_end_22a630878:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _2456a9442_ScopeOptimizer _Src) {
	_Stream << "ScopeOptimizer{";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline void static__2456b004c_optimize(jule::Any& _5533_model) {
	if (_227a6d769_expr_enabled) {
		jule::Ptr<_2456aea74_ExprOptimizer> _5821_exop = jule::new_ptr<_2456aea74_ExprOptimizer>(_2456aea74_ExprOptimizer{._field_model=((jule::Ptr<jule::Any>)((&(_5533_model))))});;
		_2456b59d1_do(_5821_exop.ptr());
	};
}



inline jule::Bool _2456b035a_str_cond(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24491ea82_BinopExprModel> _6527_m) {
	jule::Ptr<_2455e59ee_Prim> _6613_lp = _2455e3139_prim(_6527_m.get()._field_left.get()._field_kind.ptr());;
	if (((_6613_lp == nullptr) || (!(_2455e8c33_is_str(_6613_lp.ptr()))))) {
		return false;
	};
	if (((_6527_m.get()._field_op.get()._field_kind != jule::Str("==", 2)) && (_6527_m.get()._field_op.get()._field_kind != jule::Str("!=", 2)))) {
		return false;
	};
	{
		auto &_match_expr{ _6527_m.get()._field_left.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
			_case_begin_22a639d7c:;
			{
				std::tie(_6527_m.get()._field_left,_6527_m.get()._field_right) = std::make_tuple(_6527_m.get()._field_right,_6527_m.get()._field_left);
				goto _julec_label_opt;
			}
		}
		_match_end_22a639d27:;
	};
	{
		auto &_match_expr{ _6527_m.get()._field_right.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
			_case_begin_22a63ad7d:;
			{
				goto _match_end_22a63ac90;
			}
		}
		else {
			_case_begin_22a63ad06:;
			{
				return true;
			}
		}
		_match_end_22a63ac90:;
	};
	_julec_label_opt:;
	jule::Ptr<_2448ab524_Const> _8513_c = _6527_m.get()._field_right.get()._field_model.operator jule::Ptr<_2448ab524_Const>();;
	if ((!(_244917c45_read_str(_8513_c.ptr()).empty()))) {
		return false;
	};
	{
		auto &_match_expr{ _6527_m.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_22a63c643:;
			{
				(*((*_self_)._field_model))=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_6527_m.get()._field_left.get()._field_kind, ._field_expr=_6527_m.get()._field_left.get()._field_model, ._field_ident=jule::Str("empty()", 7)}));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_22a63c6a9:;
			{
				jule::Ptr<_2431e4523_Token> _9721_op = _6527_m.get()._field_op;;
				_9721_op.get()._field_kind=jule::Str("!", 1);
				(*((*_self_)._field_model))=static_cast<jule::Any>(jule::new_ptr<_24491ec6e_UnaryExprModel>(_24491ec6e_UnaryExprModel{._field_expr=jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_model=static_cast<jule::Any>(jule::new_ptr<_244922249_CommonSubIdentExprModel>(_244922249_CommonSubIdentExprModel{._field_expr_kind=_6527_m.get()._field_left.get()._field_kind, ._field_expr=_6527_m.get()._field_left.get()._field_model, ._field_ident=jule::Str("empty()", 7)})), }), ._field_op=_9721_op}));
			}
		}
		_match_end_22a63c522:;
	};
	return true;
}



inline void _2456b05d0_binary(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24491ea82_BinopExprModel> _11325_m) {
	static__2456b004c_optimize(_11325_m.get()._field_left.get()._field_model);
	static__2456b004c_optimize(_11325_m.get()._field_right.get()._field_model);
	{
		auto &_match_expr{ _11325_m.get()._field_right.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
			_case_begin_22a641647:;
			{
				goto _match_end_22a641119;
			}
		}
		else {
			_case_begin_22a6411b3:;
			{
				return;;
			}
		}
		_match_end_22a641119:;
	};
	if ((_2456b7ebc_COND && _2456b035a_str_cond(&(*_self_), _11325_m))) {
		return;;
	};
	if ((!(_2456b7175_MATH))) {
		return;;
	};
	{
		auto &_match_expr{ _11325_m.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_22a642318:;
			{
				jule::Bool _13318_ok;;
				jule::U64 _13322_x;;
				std::tie(_13318_ok,_13322_x) = _2456b5dee_check_for_bit_shift_opt(_11325_m.get()._field_left,_11325_m.get()._field_right);
				if (_13318_ok) {
					_11325_m.get()._field_op.get()._field_kind=jule::Str("<<", 2);
					jule::Ptr<_2448ab524_Const> _13625_c = _11325_m.get()._field_right.get()._field_model.operator jule::Ptr<_2448ab524_Const>();;
					_244918be1_set_u64(_13625_c.ptr(), _13322_x);
					return;;
				};
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_22a64237e:;
			{
				jule::Bool _14118_ok;;
				jule::U64 _14122_x;;
				std::tie(_14118_ok,_14122_x) = _2456b5dee_check_for_bit_shift_opt(_11325_m.get()._field_left,_11325_m.get()._field_right);
				if (_14118_ok) {
					_11325_m.get()._field_op.get()._field_kind=jule::Str(">>", 2);
					jule::Ptr<_2448ab524_Const> _14425_c = _11325_m.get()._field_right.get()._field_model.operator jule::Ptr<_2448ab524_Const>();;
					_244918be1_set_u64(_14425_c.ptr(), _14122_x);
					return;;
				};
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_22a642406:;
			{
				jule::Ptr<_2448ab524_Const> _14921_c = _11325_m.get()._field_right.get()._field_model.operator jule::Ptr<_2448ab524_Const>();;
				jule::F64 _15017_d = _2449186e6_as_f64(_14921_c.ptr());;
				if ((_15017_d == 2LL)) {
					_11325_m.get()._field_op.get()._field_kind=jule::Str("&", 1);
					_24491896b_set_i64(_14921_c.ptr(), 1LL);
				};
			}
		}
		_match_end_22a6422b3:;
	};
	jule::Any _15617_model = jule::Any(jule::new_ptr<_2456a7176_UnsafeBinopExprModel>(_2456a7176_UnsafeBinopExprModel{._field_node=_11325_m}));;
	(*((*_self_)._field_model))=(*(((jule::Any*)((&(_15617_model))))));
}



inline void _2456b0855_unary(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24491ec6e_UnaryExprModel> _16024_m) {
	static__2456b004c_optimize(_16024_m.get()._field_expr.get()._field_model);
	if ((_2456b7a9e_PTR && (_16024_m.get()._field_op.get()._field_kind == jule::Str("*", 1)))) {
		{
			auto &_match_expr{ _16024_m.get()._field_expr.get()._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_24491ec6e_UnaryExprModel>>()) {
				_case_begin_22a6496b6:;
				{
					jule::Ptr<_24491ec6e_UnaryExprModel> _16525_um = _16024_m.get()._field_expr.get()._field_model.operator jule::Ptr<_24491ec6e_UnaryExprModel>();;
					if ((_16525_um.get()._field_op.get()._field_kind == jule::Str("&", 1))) {
						(*((*_self_)._field_model))=_16525_um.get()._field_expr.get()._field_model;
					};
				}
			}
			_match_end_22a649661:;
		};
	};
}



inline void _2456b0aca_structure_lit(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244920148_StructLitExprModel> _17332_m) {
	{
		auto &expr = _17332_m.get()._field_args;
		auto it = expr.begin();
		_iter_begin_22a64b212:;
		if (it != expr.end()) {
			jule::Ptr<_24491ee5b_StructArgExprModel> _17421_arg = *it;
			{
				static__2456b004c_optimize(_17421_arg.get()._field_expr);
			}
			_iter_next_22a64b212:;
			++it;
			goto _iter_begin_22a64b212;
		}
		_iter_end_22a64b212:;
	};
}



inline void _2456b0d50_alloc_structure(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244920335_AllocStructLitExprModel> _17934_m) {
	_2456b0aca_structure_lit(&(*_self_), _17934_m.get()._field_lit);
}



inline void _2456b10c5_casting(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244920522_CastingExprModel> _18326_m) {
	static__2456b004c_optimize(_18326_m.get()._field_expr);
}



inline void _2456b134a_args(_2456aea74_ExprOptimizer* _self_, jule::Slice<jule::Any>& _18724_args) {
	{
		auto &expr = _18724_args;
		auto it = expr.begin();
		_iter_begin_22a64cc91:;
		if (it != expr.end()) {
			jule::I32 _18814_i = it - expr.begin();
			jule::Any _18821_arg = *it;
			{
				static__2456b004c_optimize(_18821_arg);
				_18724_args[_18814_i]=_18821_arg;
			}
			_iter_next_22a64cc91:;
			++it;
			_18814_i++;
			goto _iter_begin_22a64cc91;
		}
		_iter_end_22a64cc91:;
	};
}



inline void _2456b15c0_scope(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24552937d_Scope>& _19425_s) {
	jule::Ptr<_2456a9442_ScopeOptimizer> _19517_scopt = static__2456a9992_new(_19425_s);;
	_2456ac8eb_optimize(_19517_scopt.ptr());
}



inline void _2456b1845_func_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24492070e_FnCallExprModel> _19928_m) {
	static__2456b004c_optimize(_19928_m.get()._field_expr);
	_2456b134a_args(&(*_self_), _19928_m.get()._field_args);
	if ((_19928_m.get()._field_except != nullptr)) {
		_2456b15c0_scope(&(*_self_), _19928_m.get()._field_except);
	};
}



inline void _2456b1aba_slice(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_2449208eb_SliceExprModel> _20724_m) {
	_2456b134a_args(&(*_self_), _20724_m.get()._field_elems);
}



inline void _2456b1d40_array(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244921d70_ArrayExprModel> _21124_m) {
	if (((_21124_m.get()._field_elems.len() == 2LL) && (_21124_m.get()._field_elems[1LL] == nullptr))) {
		jule::Any _21321_elem = _21124_m.get()._field_elems[0LL];;
		static__2456b004c_optimize(_21321_elem);
		_21124_m.get()._field_elems[0LL]=_21321_elem;
	};
	_2456b134a_args(&(*_self_), _21124_m.get()._field_elems);
}



inline void _2456b20b5_indexing(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244920ad8_IndexingExprModel> _22027_m) {
	static__2456b004c_optimize(_22027_m.get()._field_expr.get()._field_model);
	static__2456b004c_optimize(_22027_m.get()._field_index.get()._field_model);
	if ((!(_2456b7483_ACCESS))) {
		return;;
	};
	jule::Bool _22613_array = (_2455e3d4e_arr(_22027_m.get()._field_expr.get()._field_kind.ptr()) != nullptr);;
	if ((_22613_array && _2455b5914_is_const(_22027_m.get()._field_index.ptr()))) {
		jule::Any _22921_model = jule::Any(jule::new_ptr<_2456a7495_UnsafeIndexingExprModel>(_2456a7495_UnsafeIndexingExprModel{._field_node=_22027_m}));;
		(*((*_self_)._field_model))=(*(((jule::Any*)((&(_22921_model))))));
		return;;
	};
	{
		auto &_match_expr{ _22027_m.get()._field_index.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_22a65685a:;
			{
				jule::Ptr<_24556cc1d_Var> _23517_i = _22027_m.get()._field_index.get()._field_model.operator jule::Ptr<_24556cc1d_Var>();;
				if ((_23517_i.get()._field_mutable || (_23517_i.get()._field_iter_relation == nullptr))) {
					goto _match_end_22a656706;
				};
				{
					auto &_match_expr{ _22027_m.get()._field_expr.get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
						_case_begin_22a658120:;
						{
							jule::Ptr<_24556cc1d_Var> _24121_r = _22027_m.get()._field_expr.get()._field_model.operator jule::Ptr<_24556cc1d_Var>();;
							if ((_23517_i.get()._field_iter_relation.get()._field_range == _24121_r)) {
								jule::Any _24429_model = jule::Any(jule::new_ptr<_2456a7495_UnsafeIndexingExprModel>(_2456a7495_UnsafeIndexingExprModel{._field_node=_22027_m}));;
								(*((*_self_)._field_model))=(*(((jule::Any*)((&(_24429_model))))));
							};
						}
					}
					_match_end_22a6580ba:;
				};
			}
		}
		_match_end_22a656706:;
	};
}



inline void _2456b233a_anon_func(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244920cc5_AnonFnExprModel> _25128_m) {
	_2456b15c0_scope(&(*_self_), _25128_m.get()._field_func.get()._field_scope);
}



inline void _2456b25b0_map(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24492119e_MapExprModel> _25522_m) {
	{
		auto &expr = _25522_m.get()._field_entries;
		auto it = expr.begin();
		_iter_begin_22a65a7a4:;
		if (it != expr.end()) {
			jule::Ptr<_244920eb2_KeyValPairExprModel> _25621_pair = *it;
			{
				static__2456b004c_optimize(_25621_pair.get()._field_key);
				static__2456b004c_optimize(_25621_pair.get()._field_val);
			}
			_iter_next_22a65a7a4:;
			++it;
			goto _iter_begin_22a65a7a4;
		}
		_iter_end_22a65a7a4:;
	};
}



inline void _2456b2835_slicing(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24492138b_SlicingExprModel> _26226_m) {
	static__2456b004c_optimize(_26226_m.get()._field_expr);
	static__2456b004c_optimize(_26226_m.get()._field_left);
	if ((_26226_m.get()._field_right != nullptr)) {
		static__2456b004c_optimize(_26226_m.get()._field_right);
	};
}



inline void _2456b2aaa_trait_sub(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244921578_TraitSubIdentExprModel> _27028_m) {
	static__2456b004c_optimize(_27028_m.get()._field_expr);
}



inline void _2456b2d30_structure_sub(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244921996_StructSubIdentExprModel> _27432_m) {
	static__2456b004c_optimize(_27432_m.get()._field_expr.get()._field_model);
}



inline void _2456b30a5_common_sub(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244922249_CommonSubIdentExprModel> _27829_m) {
	static__2456b004c_optimize(_27829_m.get()._field_expr);
}



inline void _2456b332a_tuple(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244922436_TupleExprModel> _28224_m) {
	{
		auto &expr = _28224_m.get()._field_datas;
		auto it = expr.begin();
		_iter_begin_22a65dc5d:;
		if (it != expr.end()) {
			jule::Ptr<_2455b5051_Data> _28321_d = *it;
			{
				static__2456b004c_optimize(_28321_d.get()._field_model);
			}
			_iter_next_22a65dc5d:;
			++it;
			goto _iter_begin_22a65dc5d;
		}
		_iter_end_22a65dc5d:;
	};
}



inline void _2456b35a0_new_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244922bd9_BuiltinNewCallExprModel> _28827_m) {
	if ((_28827_m.get()._field_init != nullptr)) {
		static__2456b004c_optimize(_28827_m.get()._field_init);
	};
}



inline void _2456b3825_out_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244922623_BuiltinOutCallExprModel> _29427_m) {
	static__2456b004c_optimize(_29427_m.get()._field_expr);
}



inline void _2456b3a9a_outln_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244922810_BuiltinOutlnCallExprModel> _29829_m) {
	static__2456b004c_optimize(_29829_m.get()._field_expr);
}



inline void _2456b3d20_panic_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244922dc6_BuiltinPanicCallExprModel> _30229_m) {
	static__2456b004c_optimize(_30229_m.get()._field_expr);
}



inline void _2456b4095_assert_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_2449230b3_BuiltinAssertCallExprModel> _30630_m) {
	static__2456b004c_optimize(_30630_m.get()._field_expr);
}



inline void _2456b431a_error_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244923866_BuiltinErrorCallExprModel> _31029_m) {
	static__2456b004c_optimize(_31029_m.get()._field_err);
}



inline void _2456b4590_make_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel> _31428_m) {
	if ((_31428_m.get()._field_len != nullptr)) {
		static__2456b004c_optimize(_31428_m.get()._field_len);
	};
	if ((_31428_m.get()._field_cap != nullptr)) {
		static__2456b004c_optimize(_31428_m.get()._field_cap);
	};
}



inline void _2456b4815_append_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24492348c_BuiltinAppendCallExprModel> _32330_m) {
	static__2456b004c_optimize(_32330_m.get()._field_dest);
	static__2456b004c_optimize(_32330_m.get()._field_elements);
}



inline void _2456b4a8a_clone_call(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_2449229ec_BuiltinCloneCallExprModel> _32829_m) {
	static__2456b004c_optimize(_32829_m.get()._field_expr);
}



inline void _2456b4d10_sizeof(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244921765_SizeofExprModel> _33225_m) {
	static__2456b004c_optimize(_33225_m.get()._field_expr);
}



inline void _2456b5085_alignof(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244923ec6_AlignofExprModel> _33626_m) {
	static__2456b004c_optimize(_33626_m.get()._field_expr);
}



inline void _2456b530a_integrated_to_str(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_2449243a0_IntegratedToStrExprModel> _34036_m) {
	static__2456b004c_optimize(_34036_m.get()._field_expr);
}



inline void _2456b5580_free(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_244924779_FreeExprModel> _34423_m) {
	static__2456b004c_optimize(_34423_m.get()._field_expr);
}



inline void _2456b5805_backend_emit(_2456aea74_ExprOptimizer* _self_, jule::Ptr<_24492458c_BackendEmitExprModel> _34831_m) {
	_2456b134a_args(&(*_self_), _34831_m.get()._field_exprs);
}



inline void _2456b59d1_do(_2456aea74_ExprOptimizer* _self_) {
	{
		auto &_match_expr{ (*((*_self_)._field_model)) };
		
		if (_match_expr.type_is<jule::Ptr<_24491ea82_BinopExprModel>>()) {
			_case_begin_22a666518:;
			{
				_2456b05d0_binary(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_24491ea82_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24491ec6e_UnaryExprModel>>()) {
			_case_begin_22a6667d2:;
			{
				_2456b0855_unary(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_24491ec6e_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920148_StructLitExprModel>>()) {
			_case_begin_22a666848:;
			{
				_2456b0aca_structure_lit(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244920148_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920335_AllocStructLitExprModel>>()) {
			_case_begin_22a6668ae:;
			{
				_2456b0d50_alloc_structure(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244920335_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920522_CastingExprModel>>()) {
			_case_begin_22a666925:;
			{
				_2456b10c5_casting(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244920522_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
			_case_begin_22a66699c:;
			{
				_2456b1845_func_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_24492070e_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449208eb_SliceExprModel>>()) {
			_case_begin_22a666a24:;
			{
				_2456b1aba_slice(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_2449208eb_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921d70_ArrayExprModel>>()) {
			_case_begin_22a666a9b:;
			{
				_2456b1d40_array(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244921d70_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920ad8_IndexingExprModel>>()) {
			_case_begin_22a666b23:;
			{
				_2456b20b5_indexing(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244920ad8_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920cc5_AnonFnExprModel>>()) {
			_case_begin_22a666b9a:;
			{
				_2456b233a_anon_func(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244920cc5_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492119e_MapExprModel>>()) {
			_case_begin_22a666c22:;
			{
				_2456b25b0_map(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_24492119e_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492138b_SlicingExprModel>>()) {
			_case_begin_22a666c99:;
			{
				_2456b2835_slicing(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_24492138b_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921578_TraitSubIdentExprModel>>()) {
			_case_begin_22a666d21:;
			{
				_2456b2aaa_trait_sub(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244921578_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
			_case_begin_22a666d98:;
			{
				_2456b2d30_structure_sub(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244921996_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922249_CommonSubIdentExprModel>>()) {
			_case_begin_22a666e20:;
			{
				_2456b30a5_common_sub(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244922249_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922436_TupleExprModel>>()) {
			_case_begin_22a666e97:;
			{
				_2456b332a_tuple(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244922436_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922623_BuiltinOutCallExprModel>>()) {
			_case_begin_22a66701e:;
			{
				_2456b3825_out_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244922623_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922810_BuiltinOutlnCallExprModel>>()) {
			_case_begin_22a667096:;
			{
				_2456b3a9a_outln_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244922810_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922bd9_BuiltinNewCallExprModel>>()) {
			_case_begin_22a66711d:;
			{
				_2456b35a0_new_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244922bd9_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>>()) {
			_case_begin_22a667195:;
			{
				_2456b3d20_panic_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>>()) {
			_case_begin_22a66721c:;
			{
				_2456b4095_assert_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>()) {
			_case_begin_22a667294:;
			{
				_2456b431a_error_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244923866_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>>()) {
			_case_begin_22a66731b:;
			{
				_2456b4590_make_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492348c_BuiltinAppendCallExprModel>>()) {
			_case_begin_22a667393:;
			{
				_2456b4815_append_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_24492348c_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>>()) {
			_case_begin_22a66741a:;
			{
				_2456b4a8a_clone_call(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921765_SizeofExprModel>>()) {
			_case_begin_22a667492:;
			{
				_2456b4d10_sizeof(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244921765_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244923ec6_AlignofExprModel>>()) {
			_case_begin_22a667519:;
			{
				_2456b5085_alignof(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244923ec6_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449243a0_IntegratedToStrExprModel>>()) {
			_case_begin_22a667591:;
			{
				_2456b530a_integrated_to_str(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_2449243a0_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244924779_FreeExprModel>>()) {
			_case_begin_22a667618:;
			{
				_2456b5580_free(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_244924779_FreeExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492458c_BackendEmitExprModel>>()) {
			_case_begin_22a667690:;
			{
				_2456b5805_backend_emit(&(*_self_), (*((*_self_)._field_model)).operator jule::Ptr<_24492458c_BackendEmitExprModel>());
			}
		}
		_match_end_22a6664b3:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _2456aea74_ExprOptimizer _Src) {
	_Stream << "ExprOptimizer{";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_227b3b936_Optimizer> static__227a9a224_new(jule::Ptr<_2276b0301_IR>& _2528_ir) {
	return jule::new_ptr<_227b3b936_Optimizer>(_227b3b936_Optimizer{._field_ir=_2528_ir});
}



inline void _227a6de62_optimize_global(_227b3b936_Optimizer* _self_, jule::Ptr<_24556cc1d_Var>& _3139_v) {
	if ((!(_3139_v.get()._field_cpp_linked))) {
		static__2456b004c_optimize(_3139_v.get()._field_value.get()._field_data.get()._field_model);
	};
}



inline void _227acdc19_optimize_function(_227b3b936_Optimizer* _self_, jule::Ptr<_244926d0e_Fn>& _3741_func) {
	if (_3741_func.get()._field_cpp_linked) {
		return;;
	};
	{
		auto &expr = _3741_func.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22a67d442:;
		if (it != expr.end()) {
			jule::Ptr<_2449299b0_FnIns> _4121_ins = *it;
			{
				jule::Ptr<_2456a9442_ScopeOptimizer> _4221_so = static__2456a9992_new(_4121_ins.get()._field_scope);;
				_2456ac8eb_optimize(_4221_so.ptr());
			}
			_iter_next_22a67d442:;
			++it;
			goto _iter_begin_22a67d442;
		}
		_iter_end_22a67d442:;
	};
}



inline void _227ad305e_optimize_struct(_227b3b936_Optimizer* _self_, jule::Ptr<_244848912_Struct>& _4739_s) {
	if (_4739_s.get()._field_cpp_linked) {
		return;;
	};
	{
		auto &expr = _4739_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22a67e8a5:;
		if (it != expr.end()) {
			jule::Ptr<_244874c5c_StructIns> _5121_ins = *it;
			{
				{
					auto &expr = _5121_ins.get()._field_fields;
					auto it = expr.begin();
					_iter_begin_22a680048:;
					if (it != expr.end()) {
						jule::Ptr<_244851079_FieldIns> _5225_f = *it;
						{
							if ((_5225_f.get()._field_default != nullptr)) {
								static__2456b004c_optimize(_5225_f.get()._field_default.get()._field_model);
							};
						}
						_iter_next_22a680048:;
						++it;
						goto _iter_begin_22a680048;
					}
					_iter_end_22a680048:;
				};
				{
					auto &expr = _5121_ins.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_22a680e5b:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _5725_m = *it;
						{
							_227acdc19_optimize_function(&(*_self_), _5725_m);
						}
						_iter_next_22a680e5b:;
						++it;
						goto _iter_begin_22a680e5b;
					}
					_iter_end_22a680e5b:;
				};
			}
			_iter_next_22a67e8a5:;
			++it;
			goto _iter_begin_22a67e8a5;
		}
		_iter_end_22a67e8a5:;
	};
}



inline void _227ad6bab_optimize_globals(_227b3b936_Optimizer* _self_, jule::Ptr<_24554ad1c_Package>& _6340_p) {
	{
		auto &expr = _6340_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a681522:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _6421_f = *it;
			{
				{
					auto &expr = _6421_f.get()._field_vars;
					auto it = expr.begin();
					_iter_begin_22a68226a:;
					if (it != expr.end()) {
						jule::Ptr<_24556cc1d_Var> _6525_v = *it;
						{
							_227a6de62_optimize_global(&(*_self_), _6525_v);
						}
						_iter_next_22a68226a:;
						++it;
						goto _iter_begin_22a68226a;
					}
					_iter_end_22a68226a:;
				};
			}
			_iter_next_22a681522:;
			++it;
			goto _iter_begin_22a681522;
		}
		_iter_end_22a681522:;
	};
}



inline void _227add014_optimize_functions(_227b3b936_Optimizer* _self_, jule::Ptr<_24554ad1c_Package>& _7142_p) {
	{
		auto &expr = _7142_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a6828a8:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _7221_f = *it;
			{
				{
					auto &expr = _7221_f.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_22a683601:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _7325_func = *it;
						{
							_227acdc19_optimize_function(&(*_self_), _7325_func);
						}
						_iter_next_22a683601:;
						++it;
						goto _iter_begin_22a683601;
					}
					_iter_end_22a683601:;
				};
			}
			_iter_next_22a6828a8:;
			++it;
			goto _iter_begin_22a6828a8;
		}
		_iter_end_22a6828a8:;
	};
}



inline void _227ae6171_optimize_structs(_227b3b936_Optimizer* _self_, jule::Ptr<_24554ad1c_Package>& _7940_p) {
	{
		auto &expr = _7940_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a683c3e:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _8021_f = *it;
			{
				{
					auto &expr = _8021_f.get()._field_structs;
					auto it = expr.begin();
					_iter_begin_22a684987:;
					if (it != expr.end()) {
						jule::Ptr<_244848912_Struct> _8125_s = *it;
						{
							_227ad305e_optimize_struct(&(*_self_), _8125_s);
						}
						_iter_next_22a684987:;
						++it;
						goto _iter_begin_22a684987;
					}
					_iter_end_22a684987:;
				};
			}
			_iter_next_22a683c3e:;
			++it;
			goto _iter_begin_22a683c3e;
		}
		_iter_end_22a683c3e:;
	};
}



inline void _227b01775_optimize_package(_227b3b936_Optimizer* _self_, jule::Ptr<_24554ad1c_Package>& _8740_p) {
	_227ad6bab_optimize_globals(&(*_self_), _8740_p);
	_227add014_optimize_functions(&(*_self_), _8740_p);
	_227ae6171_optimize_structs(&(*_self_), _8740_p);
}



inline void _227b05da6_optimize(_227b3b936_Optimizer* _self_) {
	_227b075d3_detect_enabled();
	if (_2456b6a15_DEADCODE) {
		_227b61c58_eliminate_defines((*_self_)._field_ir);
	};
	if ((_227a6e8be_scope_enabled || _227a6d769_expr_enabled)) {
		{
			auto &expr = (*_self_)._field_ir.get()._field_used;
			auto it = expr.begin();
			_iter_begin_22a685081:;
			if (it != expr.end()) {
				jule::Ptr<_245547db3_ImportInfo> _10325_u = *it;
				{
					if ((!(_10325_u.get()._field_cpp_linked))) {
						_227b01775_optimize_package(&(*_self_), _10325_u.get()._field_package);
					};
				}
				_iter_next_22a685081:;
				++it;
				goto _iter_begin_22a685081;
			}
			_iter_end_22a685081:;
		};
		_227b01775_optimize_package(&(*_self_), (*_self_)._field_ir.get()._field_main);
	};
	if (_2456b6a15_DEADCODE) {
		_227b66a0a_eliminate_scopes((*_self_)._field_ir);
	};
}







std::ostream &operator<<(std::ostream &_Stream, _227b3b936_Optimizer _Src) {
	_Stream << "Optimizer{";
	_Stream << "ir:" << _Src._field_ir;
	_Stream << "}";
	return _Stream;
}



inline void static__227b8076b_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void static__227b81a36_print(jule::Str _1925_escape, jule::Str _1938_text) {
	jule::out(_1925_escape);
	jule::out(_1938_text);
	static__227b8076b_reset();
}







std::ostream &operator<<(std::ostream &_Stream, _227b81849_AnsiEscape _Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void static__227b831db_log_flat(_242dbab89_Log& _1429_l) {
	jule::outln(_1429_l._field_text);
}



inline void static__227b833ea_log_error(_242dbab89_Log& _1930_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_1930_l._field_text);
	static__227b8076b_reset();
	if ((_1930_l._field_path.len() != 0LL)) {
		jule::out(jule::Str("\n  --> ", 7));
		jule::out(_1930_l._field_path);
	};
	if (((_1930_l._field_row != 0LL) && (_1930_l._field_column != 0LL))) {
		jule::out(jule::Str(":", 1));
		jule::out(_24547d975_itoa(_1930_l._field_row));
		jule::out(jule::Str(":", 1));
		jule::out(_24547d975_itoa(_1930_l._field_column));
	};
	if ((_1930_l._field_line.len() != 0LL)) {
		jule::Str _3621_line = _242d63868_trim_left(_1930_l._field_line,jule::Str("\r\n\v\b ", 5));;
		jule::I32 _3721_offset = ((_1930_l._field_line.len() - _3621_line.len()) + 1LL);;
		jule::I32 _3821_old_len = _3621_line.len();;
		_3621_line=_242d63868_trim_left(_3621_line,jule::Str("\t", 1));
		if ((_3821_old_len != _3621_line.len())) {
			_3721_offset+=((_3821_old_len - _3621_line.len()) << 3LLU);
		};
		jule::out(jule::Str("\n  ", 3));
		jule::Str _4417_row = _24547d975_itoa(_1930_l._field_row);;
		jule::out(_4417_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_3621_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_241ec9e0e_repeat(jule::Str(" ", 1),static_cast<jule::I32>(_4417_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_241ec9e0e_repeat(jule::Str(" ", 1),static_cast<jule::I32>((_1930_l._field_column - _3721_offset))));
		jule::out(jule::Str("^", 1));
		if ((_1930_l._field_suggestion.len() != 0LL)) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_241ec9e0e_repeat(jule::Str(" ", 1),static_cast<jule::I32>(_4417_row.len())));
			jule::out(jule::Str(" | ", 3));
			static__227b81a36_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_1930_l._field_suggestion);
		};
	};
	jule::outln(jule::Str("\n", 1));
}



inline void static__227b83609_log(_242dbab89_Log& _6524_l) {
	{
		auto &_match_expr{ _6524_l._field_kind };
		
		if (_match_expr == static_cast<jule::I32>(0LL)) {
			_case_begin_22a696b97:;
			{
				static__227b831db_log_flat(_6524_l);
			}
		}
		else if (_match_expr == static_cast<jule::I32>(1LL)) {
			_case_begin_22a696c0d:;
			{
				static__227b833ea_log_error(_6524_l);
			}
		}
		_match_end_22a696a43:;
	};
}



inline void static__227b83818_print_logs(jule::Slice<_242dbab89_Log>& _7531_logs) {
	{
		auto &expr = _7531_logs;
		auto it = expr.begin();
		_iter_begin_22a68b9c2:;
		if (it != expr.end()) {
			_242dbab89_Log &_7616_l = *it;
			{
				static__227b83609_log(_7616_l);
			}
			_iter_next_22a68b9c2:;
			++it;
			goto _iter_begin_22a68b9c2;
		}
		_iter_end_22a68b9c2:;
	};
	jule::out(jule::Str("=== ", 4));
	jule::out(_24547d975_itoa(static_cast<jule::I32>(_7531_logs.len())));
	jule::outln(jule::Str(" error generated ===", 20));
}







std::ostream &operator<<(std::ostream &_Stream, _227b82e33_Logger _Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}



inline jule::U64 _22825611b_unix(_228255c64_AbsTime* _self_) {
	jule::Bool _5617_leap = false;;
	jule::U64 _5717_y = ((*_self_)._field_year - 1900LLU);;
	jule::U64 _5817_m = ((*_self_)._field_month - 1LLU);;
	if (((_5817_m >= 12LLU) || (_5817_m < 0LLU))) {
		jule::U64 _6021_adj = (_5817_m / 12LLU);;
		_5817_m%=12LL;
		if ((_5817_m < 0LLU)) {
			(_6021_adj)--;
			_5817_m+=12LLU;
		};
		_5717_y+=_6021_adj;
	};
	jule::U64 _6817_t = _22825b231_unix_year_to_seconds(_5717_y,_5617_leap);;
	_6817_t+=_22825b5b6_unix_month_to_seconds(_5817_m,_5617_leap);
	_6817_t+=(86400LLU * ((*_self_)._field_day - 1LLU));
	_6817_t+=(3600LLU * (*_self_)._field_hour);
	_6817_t+=(60LLU * (*_self_)._field_minute);
	_6817_t+=(*_self_)._field_second;
	return _6817_t;
}







std::ostream &operator<<(std::ostream &_Stream, _228255c64_AbsTime _Src) {
	_Stream << "AbsTime{";
	_Stream << "day:" << _Src._field_day << ", ";
	_Stream << "week_day:" << _Src._field_week_day << ", ";
	_Stream << "year_day:" << _Src._field_year_day << ", ";
	_Stream << "month:" << _Src._field_month << ", ";
	_Stream << "year:" << _Src._field_year << ", ";
	_Stream << "second:" << _Src._field_second << ", ";
	_Stream << "minute:" << _Src._field_minute << ", ";
	_Stream << "hour:" << _Src._field_hour;
	_Stream << "}";
	return _Stream;
}



inline _228256407_Time static__22825679d_unix(jule::U64 _9124_sec) {
	return _228256407_Time{._field_sec=_9124_sec};
}



inline _228256407_Time static__22825699b_now(void) {
	return static__22825679d_unix(static_cast<jule::U64>(_22825ade0_unix()));
}



inline jule::U64 _228256dec_unix(_228256407_Time* _self_) {
	return (*_self_)._field_sec;
}



inline jule::U64 _228257161_day(_228256407_Time* _self_) {
	return _2282580da_abs(&(*_self_))._field_day;
}



inline jule::U64 _2282573c5_month(_228256407_Time* _self_) {
	return _2282580da_abs(&(*_self_))._field_month;
}



inline jule::U64 _228257639_year(_228256407_Time* _self_) {
	return _2282580da_abs(&(*_self_))._field_year;
}



inline jule::U64 _22825789d_second(_228256407_Time* _self_) {
	return _2282580da_abs(&(*_self_))._field_second;
}



inline jule::U64 _228257b12_minute(_228256407_Time* _self_) {
	return _2282580da_abs(&(*_self_))._field_minute;
}



inline jule::U64 _228257d76_hour(_228256407_Time* _self_) {
	return _2282580da_abs(&(*_self_))._field_hour;
}



inline _228255c64_AbsTime _2282580da_abs(_228256407_Time* _self_) {
	jule::U64 _12713_secs = ((*_self_)._field_sec - 951868800LLU);;
	jule::U64 _12817_days = (_12713_secs / 86400LLU);;
	jule::U64 _12917_rem_secs = (_12713_secs % 86400LL);;
	if ((_12917_rem_secs < 0LLU)) {
		_12917_rem_secs+=86400LLU;
		(_12817_days)--;
	};
	jule::U64 _13517_qc_cycles = (_12817_days / 146097LLU);;
	jule::U64 _13617_rem_days = (_12817_days % 146097LL);;
	if ((_13617_rem_days < 0LLU)) {
		_13617_rem_days+=146097LLU;
		(_13517_qc_cycles)--;
	};
	jule::U64 _14217_c_cycles = (_13617_rem_days / 36524LLU);;
	if ((_14217_c_cycles == 4LLU)) {
		(_14217_c_cycles)--;
	};
	_13617_rem_days-=(_14217_c_cycles * 36524LLU);
	jule::U64 _14817_q_cycles = (_13617_rem_days / 1461LLU);;
	if ((_14817_q_cycles == 25LLU)) {
		(_14817_q_cycles)--;
	};
	_13617_rem_days-=(_14817_q_cycles * 1461LLU);
	jule::U64 _15417_rem_years = (_13617_rem_days / 365LLU);;
	if ((_15417_rem_years == 4LLU)) {
		(_15417_rem_years)--;
	};
	_13617_rem_days-=(_15417_rem_years * 365LLU);
	jule::U64 _16017_leap = static_cast<jule::U64>(0LLU);;
	if (((_15417_rem_years == 0LLU) && ((_14817_q_cycles > 0LLU) || (_14217_c_cycles == 0LLU)))) {
		_16017_leap=1LLU;
	};
	jule::U64 _16417_y_day = (((_13617_rem_days + 31LLU) + 28LLU) + _16017_leap);;
	if ((_16417_y_day >= (365LLU + _16017_leap))) {
		_16417_y_day-=(365LLU + _16017_leap);
	};
	jule::U64 _16917_months = 0LLU;;
	for (; (_228255307_MDAYS[static_cast<jule::I32>(_16917_months)] <= _13617_rem_days); (_16917_months)++) {
		{
			_13617_rem_days-=_228255307_MDAYS[static_cast<jule::I32>(_16917_months)];
		}
	_iter_next_22a6c3b3b:;
	}
	_iter_end_22a6c3b3b:;;
	_228255c64_AbsTime _17417_t = _228255c64_AbsTime{};;
	_17417_t._field_year=static_cast<jule::U64>(((((_15417_rem_years + (4LLU * _14817_q_cycles)) + (100LLU * _14217_c_cycles)) + (400LLU * _13517_qc_cycles)) + 100LLU));
	_17417_t._field_month=static_cast<jule::U64>((_16917_months + 2LLU));
	if ((_17417_t._field_month >= 12LLU)) {
		_17417_t._field_month-=12LLU;
		(_17417_t._field_year)++;
	};
	_17417_t._field_month+=1LLU;
	_17417_t._field_year+=1900LLU;
	_17417_t._field_day=static_cast<jule::U64>((_13617_rem_days + 1LLU));
	_17417_t._field_week_day=static_cast<jule::U64>(((3LLU + _12817_days) % 7LL));
	if ((_17417_t._field_week_day < 0LLU)) {
		_17417_t._field_week_day+=7LLU;
	};
	_17417_t._field_year_day=_16417_y_day;
	_17417_t._field_hour=static_cast<jule::U64>((_12917_rem_secs / 3600LLU));
	_17417_t._field_minute=static_cast<jule::U64>(((_12917_rem_secs / 60LLU) % 60LL));
	_17417_t._field_second=static_cast<jule::U64>((_12917_rem_secs % 60LL));
	return _17417_t;
}







std::ostream &operator<<(std::ostream &_Stream, _228256407_Time _Src) {
	_Stream << "Time{";
	_Stream << "sec:" << _Src._field_sec;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2281cee96_ScopeCoder> static__2281d05b2_new(jule::Ptr<_22825bb05_ObjectCoder>& _5524_oc) {
	return jule::new_ptr<_2281cee96_ScopeCoder>(_2281cee96_ScopeCoder{._field_oc=_5524_oc});
}



inline void _2281d0837_range_index_iter(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552b0a5_RangeIter>& _6141_it) {
	jule::Str _6213_begin = static__2281eb743_iter_begin(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_6141_it)));;
	jule::Str _6313_next = static__2281ebc82_iter_next(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_6141_it)));;
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("{\n", 2));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto ", 5));
	if ((_2456b66b3_COPY && _2281d54eb_is_copy_optimizable(_6141_it.get()._field_expr))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("&", 1));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("expr = ", 7));
	_2281e2ddd_model(_self_.get()._field_oc.get()._field_ec, _6141_it.get()._field_expr.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto it = expr.begin();\n", 24));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, _6213_begin);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (it != expr.end()) {\n", 24));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	if ((_6141_it.get()._field_key_a != nullptr)) {
		_22825d794_var_init_expr(_self_.get()._field_oc, _6141_it.get()._field_key_a,jule::Fn<void(void)>([=](void) mutable -> void {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("it - expr.begin()", 17));
		}));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
		_228241e3c_indent(_self_.get()._field_oc);
	};
	if ((_6141_it.get()._field_key_b != nullptr)) {
		if (_2456b66b3_COPY) {
			_6141_it.get()._field_key_b.get()._field_reference=_2281d58a3_is_iter_copy_optimizable(_6141_it.get()._field_expr,_6141_it.get()._field_key_b);
		};
		_22825d794_var_init_expr(_self_.get()._field_oc, _6141_it.get()._field_key_b,jule::Fn<void(void)>([=](void) mutable -> void {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("*it", 3));
		}));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
		_228241e3c_indent(_self_.get()._field_oc);
	};
	_2281d4e24_scope(_self_, _6141_it.get()._field_scope);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, _6313_next);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("++it;\n", 6));
	_228241e3c_indent(_self_.get()._field_oc);
	if ((_6141_it.get()._field_key_a != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, static__2281eb49b_var(_6141_it.get()._field_key_a));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("++;\n", 4));
		_228241e3c_indent(_self_.get()._field_oc);
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("goto ", 5));
	_22823ee5c_write(_self_.get()._field_oc, _6213_begin);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281eb9da_iter_end(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_6141_it))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
}



inline void _2281d0aac_range_hashmap_iter(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552b0a5_RangeIter>& _12943_it) {
	jule::Str _13013_begin = static__2281eb743_iter_begin(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_12943_it)));;
	jule::Str _13113_next = static__2281ebc82_iter_next(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_12943_it)));;
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("{\n", 2));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto ", 5));
	if ((_2456b66b3_COPY && _2281d54eb_is_copy_optimizable(_12943_it.get()._field_expr))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("&", 1));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("expr = ", 7));
	_2281e2ddd_model(_self_.get()._field_oc.get()._field_ec, _12943_it.get()._field_expr.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto it = expr.begin();\n", 24));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, _13013_begin);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (it != expr.end()) {\n", 24));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	if ((_12943_it.get()._field_key_a != nullptr)) {
		if (_2456b66b3_COPY) {
			_12943_it.get()._field_key_a.get()._field_reference=_2281d58a3_is_iter_copy_optimizable(_12943_it.get()._field_expr,_12943_it.get()._field_key_a);
		};
		_22825d794_var_init_expr(_self_.get()._field_oc, _12943_it.get()._field_key_a,jule::Fn<void(void)>([=](void) mutable -> void {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("it->first", 9));
		}));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
		_228241e3c_indent(_self_.get()._field_oc);
	};
	if ((_12943_it.get()._field_key_b != nullptr)) {
		if (_2456b66b3_COPY) {
			_12943_it.get()._field_key_b.get()._field_reference=_2281d58a3_is_iter_copy_optimizable(_12943_it.get()._field_expr,_12943_it.get()._field_key_b);
		};
		_22825d794_var_init_expr(_self_.get()._field_oc, _12943_it.get()._field_key_b,jule::Fn<void(void)>([=](void) mutable -> void {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("it->second", 10));
		}));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
		_228241e3c_indent(_self_.get()._field_oc);
	};
	_2281d4e24_scope(_self_, _12943_it.get()._field_scope);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, _13113_next);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("++it;\n", 6));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("goto ", 5));
	_22823ee5c_write(_self_.get()._field_oc, _13013_begin);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281eb9da_iter_end(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_12943_it))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
}



inline void _2281d0d32_if_case(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_245529779_If> _19531_i) {
	if ((_19531_i.get()._field_expr != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (", 4));
		_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _19531_i.get()._field_expr);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(") ", 2));
	};
	_2281d4e24_scope(_self_, _19531_i.get()._field_scope);
}



inline void _2281d10a7_conditional(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_245529e61_Conditional> _20435_c) {
	jule::Bool _20517_writed = false;;
	{
		auto &expr = _20435_c.get()._field_elifs;
		auto it = expr.begin();
		_iter_begin_22a76c7c8:;
		if (it != expr.end()) {
			jule::Ptr<_245529779_If> _20621_elif = *it;
			{
				if ((_20621_elif == nullptr)) {
					goto _iter_next_22a76c7c8;
				};
				if (_20517_writed) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(" else ", 6));
				};
				_20517_writed=true;
				_2281d0d32_if_case(_self_, _20621_elif);
			}
			_iter_next_22a76c7c8:;
			++it;
			goto _iter_begin_22a76c7c8;
		}
		_iter_end_22a76c7c8:;
	};
	if ((_20435_c.get()._field_default != nullptr)) {
		if (_20517_writed) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str(" else ", 6));
		};
		_2281d4e24_scope(_self_, _20435_c.get()._field_default.get()._field_scope);
	};
}



inline void _2281d132c_inf_iter(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552a24c_InfIter> _22432_it) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("for (;;) {\n", 11));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_2281d4e24_scope(_self_, _22432_it.get()._field_scope);
	_2282416de_done_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281ebc82_iter_next(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_22432_it))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281eb9da_iter_end(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_22432_it))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;", 2));
}



inline void _2281d15a2_while_iter(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552a6c0_WhileIter> _24134_it) {
	if (((_24134_it.get()._field_expr != nullptr) && (_24134_it.get()._field_next == nullptr))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("while (", 7));
		_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _24134_it.get()._field_expr);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(") {\n", 4));
	} else {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("for (; ", 7));
		if ((_24134_it.get()._field_expr != nullptr)) {
			_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _24134_it.get()._field_expr);
		};
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("; ", 2));
		if ((_24134_it.get()._field_next != nullptr)) {
			_2281d4929_st(_self_, _24134_it.get()._field_next);
		};
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(") {\n", 4));
	};
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_2281d4e24_scope(_self_, _24134_it.get()._field_scope);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281ebc82_iter_next(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_24134_it))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281eb9da_iter_end(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_24134_it))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;", 2));
}



inline void _2281d1827_range_iter(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552b0a5_RangeIter> _27434_it) {
	{
		
		if ((_2455e40b3_slc(_27434_it.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a77cc8e:;
			{
				_2281d0837_range_index_iter(_self_, _27434_it);
			}
		}
		else if ((_2455e3d4e_arr(_27434_it.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a77c95e:;
			{
				_2281d0837_range_index_iter(_self_, _27434_it);
			}
		}
		else if ((_2455e4a64_map(_27434_it.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a77c9c5:;
			{
				_2281d0aac_range_hashmap_iter(_self_, _27434_it);
			}
		}
		else {
			_case_begin_22a77c8e8:;
			{
				_2281d0837_range_index_iter(_self_, _27434_it);
			}
		}
		_match_end_22a77c81b:;
	};
}



inline void _2281d1a9c_cont(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552b4a1_ContSt> _28724_c) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("goto ", 5));
	_22823ee5c_write(_self_.get()._field_oc, static__2281ebc82_iter_next(_28724_c.get()._field_it));
}



inline void _2281d1d22_label(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552bb44_Label> _29225_l) {
	_22823ee5c_write(_self_.get()._field_oc, static__2281ec029_label(_29225_l.get()._field_ident));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":", 1));
}



inline void _2281d2097_goto_st(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552be30_GotoSt> _29727_gt) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("goto ", 5));
	_22823ee5c_write(_self_.get()._field_oc, static__2281ec029_label(_29727_gt.get()._field_ident));
}



inline void _2281d231c_postfix(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552c2d7_Postfix> _30231_p) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _30231_p.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	_22823ee5c_write(_self_.get()._field_oc, _30231_p.get()._field_op);
}



inline void _2281d2592_assign(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552c75a_Assign> _30930_a) {
	_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _30930_a.get()._field_l.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, _30930_a.get()._field_op.get()._field_kind);
	_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _30930_a.get()._field_r.get()._field_model);
}



inline void _2281d2817_multi_assign(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552cb12_MultiAssign> _31536_a) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("std::tie(", 9));
	{
		auto &expr = _31536_a.get()._field_l;
		auto it = expr.begin();
		_iter_begin_22a786e96:;
		if (it != expr.end()) {
			jule::I32 _31714_i = it - expr.begin();
			jule::Any _31721_l = *it;
			{
				if ((_31721_l == nullptr)) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("std::ignore", 11));
				} else {
					_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _31721_l);
				};
				if (((_31536_a.get()._field_l.len() - _31714_i) > 1LL)) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
				};
			}
			_iter_next_22a786e96:;
			++it;
			_31714_i++;
			goto _iter_begin_22a786e96;
		}
		_iter_end_22a786e96:;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(") = ", 4));
	_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _31536_a.get()._field_r);
}



inline jule::Fn<void(void)> _2281d2b25_match_expr(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552d151_Match> _33134_m) {
	if ((!(_2455b5914_is_const(_33134_m.get()._field_expr.ptr())))) {
		return jule::Fn<void(void)>([=](void) mutable -> void {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("_match_expr", 11));
		});
	};
	if (((!(_244919d79_is_bool(_33134_m.get()._field_expr.get()._field_constant.ptr()))) || (!(_2449179d1_read_bool(_33134_m.get()._field_expr.get()._field_constant.ptr()))))) {
		return jule::Fn<void(void)>([=](void) mutable -> void {
			_2281e2ddd_model(_self_.get()._field_oc.get()._field_ec, _33134_m.get()._field_expr.get()._field_model);
		});
	};
	return nullptr;
}



inline void _2281d2e44_case(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552d151_Match> _34128_m, jule::Ptr<_24552db9b_Case> _34143_c) {
	if (((_34143_c.get()._field_exprs.len() != 0LL) && (!(_24552d65c_is_generic_type_match(_34128_m.ptr()))))) {
		if (((_34128_m.get()._field_cases.len() > 0LL) && (_34128_m.get()._field_cases[0LL] == _34143_c))) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (", 4));
		} else {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("else if (", 9));
		};
		{
			auto &expr = _34143_c.get()._field_exprs;
			auto it = expr.begin();
			_iter_begin_22a790037:;
			if (it != expr.end()) {
				jule::I32 _34818_i = it - expr.begin();
				jule::Ptr<_2455b5051_Data> _34825_expr = *it;
				{
					{
						
						if ((!(_34128_m.get()._field_type_match))) {
							_case_begin_22a7923e1:;
							{
								jule::Fn<void(void)> _35125_case_expr = _2281d2b25_match_expr(_self_, _34128_m);;
								if (_2455b5c22_good_operand(_34128_m.get()._field_expr.ptr(), _34825_expr)) {
									if ((_35125_case_expr != nullptr)) {
										_35125_case_expr();
										_22823ee5c_write(_self_.get()._field_oc, jule::Str(" == ", 4));
									};
									_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _34825_expr.get()._field_model);
								} else {
									_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _34825_expr.get()._field_model);
									if ((_35125_case_expr != nullptr)) {
										_22823ee5c_write(_self_.get()._field_oc, jule::Str(" == ", 4));
										_35125_case_expr();
									};
								};
							}
						}
						else {
							_case_begin_22a790d4b:;
							{
								_22823ee5c_write(_self_.get()._field_oc, jule::Str("_match_expr", 11));
								_22823ee5c_write(_self_.get()._field_oc, jule::Str(".type_is<", 9));
								_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _34825_expr.get()._field_model);
								_22823ee5c_write(_self_.get()._field_oc, jule::Str(">()", 3));
							}
						}
						_match_end_22a790c6e:;
					};
					if (((_34143_c.get()._field_exprs.len() - _34818_i) > 1LL)) {
						_22823ee5c_write(_self_.get()._field_oc, jule::Str(" || ", 4));
					};
				}
				_iter_next_22a790037:;
				++it;
				_34818_i++;
				goto _iter_begin_22a790037;
			}
			_iter_end_22a790037:;
		};
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(") ", 2));
	} else if (((_34128_m.get()._field_default == _34143_c) && (_34128_m.get()._field_cases.len() != 0LL))) {
		_228241e3c_indent(_self_.get()._field_oc);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("else ", 5));
	};
	_2282406ee_add_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("{\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281ec568_case_begin(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_34143_c))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;\n", 3));
	if ((_34143_c.get()._field_scope.get()._field_stmts.len() > 0LL)) {
		_228241e3c_indent(_self_.get()._field_oc);
		_2281d4e24_scope(_self_, _34143_c.get()._field_scope);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
	};
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
}



inline void _2281d31b9_match_st(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552d151_Match> _40032_m) {
	if (((_40032_m.get()._field_cases.len() == 0LL) && (_40032_m.get()._field_default == nullptr))) {
		return;;
	};
	jule::Bool _40513_generic_type_match = _24552d65c_is_generic_type_match(_40032_m.ptr());;
	if ((_40513_generic_type_match && ((_40032_m.get()._field_default == nullptr) || (_40032_m.get()._field_default.get()._field_scope.get()._field_stmts.len() == 0LL)))) {
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("{\n", 2));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	if (((!(_40513_generic_type_match)) && (!(_2455b5914_is_const(_40032_m.get()._field_expr.ptr()))))) {
		if ((_2456b66b3_COPY && _2281d54eb_is_copy_optimizable(_40032_m.get()._field_expr))) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto &_match_expr{ ", 19));
		} else {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto _match_expr{ ", 18));
		};
		_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _40032_m.get()._field_expr.get()._field_model);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(" };\n", 4));
		_228241e3c_indent(_self_.get()._field_oc);
	};
	if ((_40032_m.get()._field_cases.len() > 0LL)) {
		{
			auto &expr = _40032_m.get()._field_cases;
			auto it = expr.begin();
			_iter_begin_22a7a1d29:;
			if (it != expr.end()) {
				jule::Ptr<_24552db9b_Case> _42925_c = *it;
				{
					if ((_42925_c == nullptr)) {
						goto _iter_next_22a7a1d29;
					};
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
					_228241e3c_indent(_self_.get()._field_oc);
					_2281d2e44_case(_self_, _40032_m,_42925_c);
				}
				_iter_next_22a7a1d29:;
				++it;
				goto _iter_begin_22a7a1d29;
			}
			_iter_end_22a7a1d29:;
		};
	};
	if ((_40032_m.get()._field_default != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
		_2281d2e44_case(_self_, _40032_m,_40032_m.get()._field_default);
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281ec2c1_match_end(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_40032_m))));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(":;", 2));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
}



inline void _2281d343e_fall_st(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552e251_FallSt> _45627_f) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("goto ", 5));
	_22823ee5c_write(_self_.get()._field_oc, static__2281ec568_case_begin(_45627_f.get()._field_dest_case));
}



inline void _2281d36b4_break_st(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552b858_BreakSt> _46128_b) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("goto ", 5));
	if ((_46128_b.get()._field_it != 0LLU)) {
		_22823ee5c_write(_self_.get()._field_oc, static__2281eb9da_iter_end(_46128_b.get()._field_it));
	} else {
		_22823ee5c_write(_self_.get()._field_oc, static__2281ec2c1_match_end(_46128_b.get()._field_mtch));
	};
}



inline void _2281d3939_ret_with_vars(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552e6c4_RetSt> _47037_r) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("return ", 7));
	if (_47037_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::Exceptional<", 18));
		_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_47037_r.get()._field_func.get()._field_result));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(jule::Any(), ", 15));
	};
	if ((_47037_r.get()._field_vars.len() > 1LL)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("std::make_tuple(", 16));
	};
	{
		auto &expr = _47037_r.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_22a7ac472:;
		if (it != expr.end()) {
			jule::I32 _48014_i = it - expr.begin();
			jule::Ptr<_24556cc1d_Var> _48021_v = *it;
			{
				if (_2431e6cb7_is_ignore_ident(_48021_v.get()._field_ident)) {
					_2281e365d_init_expr(_self_.get()._field_oc.get()._field_ec, _48021_v.get()._field_kind.get()._field_kind);
				} else {
					_22823ee5c_write(_self_.get()._field_oc, static__2281eb49b_var(_48021_v));
				};
				if (((_47037_r.get()._field_vars.len() - _48014_i) > 1LL)) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
				};
			}
			_iter_next_22a7ac472:;
			++it;
			_48014_i++;
			goto _iter_begin_22a7ac472;
		}
		_iter_end_22a7ac472:;
	};
	if ((_47037_r.get()._field_vars.len() > 1LL)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	};
	if (_47037_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	};
}



inline void _2281d3bae_ret_tuple(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552e6c4_RetSt> _50033_r) {
	jule::Slice<jule::Ptr<_2455b5051_Data>> _50117_datas = _50033_r.get()._field_expr.operator jule::Ptr<_244922436_TupleExprModel>().get()._field_datas;;
	{
		auto &expr = _50033_r.get()._field_vars;
		auto it = expr.begin();
		_iter_begin_22a7b194e:;
		if (it != expr.end()) {
			jule::I32 _50214_i = it - expr.begin();
			jule::Ptr<_24556cc1d_Var> _50221_v = *it;
			{
				if (_2431e6cb7_is_ignore_ident(_50221_v.get()._field_ident)) {
					goto _iter_next_22a7b194e;
				};
				jule::Any _50621_model = _50117_datas[_50214_i].get()._field_model;;
				if ((_50621_model == _50221_v)) {
					goto _iter_next_22a7b194e;
				};
				_22823ee5c_write(_self_.get()._field_oc, static__2281eb49b_var(_50221_v));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(" = ", 3));
				_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _50621_model);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
				_228241e3c_indent(_self_.get()._field_oc);
			}
			_iter_next_22a7b194e:;
			++it;
			_50214_i++;
			goto _iter_begin_22a7b194e;
		}
		_iter_end_22a7b194e:;
	};
	if (_50033_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("return jule::Exceptional<", 25));
		_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_50033_r.get()._field_func.get()._field_result));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(jule::Any(),", 14));
	} else {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("return ", 7));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("std::make_tuple(", 16));
	{
		auto &expr = _50117_datas;
		auto it = expr.begin();
		_iter_begin_22a7b69cb:;
		if (it != expr.end()) {
			jule::I32 _52714_i = it - expr.begin();
			jule::Ptr<_2455b5051_Data> _52721_d = *it;
			{
				jule::Ptr<_24556cc1d_Var> _52821_v = _50033_r.get()._field_vars[_52714_i];;
				if (_2431e6cb7_is_ignore_ident(_52821_v.get()._field_ident)) {
					_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _52721_d.get()._field_model);
				} else {
					_22823ee5c_write(_self_.get()._field_oc, static__2281eb49b_var(_52821_v));
				};
				if (((_50117_datas.len() - _52714_i) > 1LL)) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
				};
			}
			_iter_next_22a7b69cb:;
			++it;
			_52714_i++;
			goto _iter_begin_22a7b69cb;
		}
		_iter_end_22a7b69cb:;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	if (_50033_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	};
}



inline void _2281d3e34_ret_with_exprs(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552e6c4_RetSt> _54538_r) {
	if ((_54538_r.get()._field_vars.len() > 1LL)) {
		_2281d3bae_ret_tuple(_self_, _54538_r);
		return;;
	};
	if ((_54538_r.get()._field_vars.len() > 0LL)) {
		jule::Ptr<_24556cc1d_Var> _55321_v = _54538_r.get()._field_vars[0LL];;
		if (((!(_2431e6cb7_is_ignore_ident(_55321_v.get()._field_ident))) && (_54538_r.get()._field_expr != _55321_v))) {
			jule::Str _55521_ident = static__2281eb49b_var(_55321_v);;
			_22823ee5c_write(_self_.get()._field_oc, _55521_ident);
			_22823ee5c_write(_self_.get()._field_oc, jule::Str(" = ", 3));
			_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _54538_r.get()._field_expr);
			_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
			_228241e3c_indent(_self_.get()._field_oc);
			if (_54538_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("return jule::Exceptional<", 25));
				_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_54538_r.get()._field_func.get()._field_result));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(jule::Any(),", 14));
				_22823ee5c_write(_self_.get()._field_oc, _55521_ident);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
			} else {
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("return ", 7));
				_22823ee5c_write(_self_.get()._field_oc, _55521_ident);
			};
			return;;
		};
	};
	if (_54538_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("return jule::Exceptional<", 25));
		_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_54538_r.get()._field_func.get()._field_result));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(jule::Any(),", 14));
		_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _54538_r.get()._field_expr);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("return ", 7));
	_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _54538_r.get()._field_expr);
	return;;
}



inline void _2281d41a9_ret_st(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552e6c4_RetSt> _58930_r) {
	if (((_58930_r.get()._field_expr == nullptr) && (_58930_r.get()._field_vars.len() == 0LL))) {
		if (_58930_r.get()._field_func.get()._field_decl.get()._field_exceptional) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("return jule::VoidExceptional();", 31));
			return;;
		};
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("return;", 7));
		return;;
	};
	if ((_58930_r.get()._field_expr == nullptr)) {
		_2281d3939_ret_with_vars(_self_, _58930_r);
		return;;
	};
	_2281d3e34_ret_with_exprs(_self_, _58930_r);
}



inline void _2281d46a4_var(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24556cc1d_Var> _62427_v) {
	if ((!(_62427_v.get()._field_constant))) {
		_22825da19_var(_self_.get()._field_oc, _62427_v);
	};
}



inline void _2281d4929_st(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Any _63126_st) {
	if ((_63126_st == nullptr)) {
		return;;
	};
	{
		auto &_match_expr{ _63126_st };
		
		if (_match_expr.type_is<jule::Ptr<_24552937d_Scope>>()) {
			_case_begin_22a7ccd77:;
			{
				_2281d4e24_scope(_self_, _63126_st.operator jule::Ptr<_24552937d_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_22a7cca36:;
			{
				_2281d46a4_var(_self_, _63126_st.operator jule::Ptr<_24556cc1d_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_22a7cd493:;
			{
				_2281e3163_expr(_self_.get()._field_oc.get()._field_ec, _63126_st.operator jule::Ptr<_2455b5051_Data>().get()._field_model);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245529e61_Conditional>>()) {
			_case_begin_22a7cd509:;
			{
				_2281d10a7_conditional(_self_, _63126_st.operator jule::Ptr<_245529e61_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a24c_InfIter>>()) {
			_case_begin_22a7cd570:;
			{
				_2281d132c_inf_iter(_self_, _63126_st.operator jule::Ptr<_24552a24c_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a6c0_WhileIter>>()) {
			_case_begin_22a7cd5d6:;
			{
				_2281d15a2_while_iter(_self_, _63126_st.operator jule::Ptr<_24552a6c0_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552b0a5_RangeIter>>()) {
			_case_begin_22a7cd64c:;
			{
				_2281d1827_range_iter(_self_, _63126_st.operator jule::Ptr<_24552b0a5_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552b4a1_ContSt>>()) {
			_case_begin_22a7cd6b3:;
			{
				_2281d1a9c_cont(_self_, _63126_st.operator jule::Ptr<_24552b4a1_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552bb44_Label>>()) {
			_case_begin_22a7cd729:;
			{
				_2281d1d22_label(_self_, _63126_st.operator jule::Ptr<_24552bb44_Label>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552be30_GotoSt>>()) {
			_case_begin_22a7cd790:;
			{
				_2281d2097_goto_st(_self_, _63126_st.operator jule::Ptr<_24552be30_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552c2d7_Postfix>>()) {
			_case_begin_22a7cd806:;
			{
				_2281d231c_postfix(_self_, _63126_st.operator jule::Ptr<_24552c2d7_Postfix>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552c75a_Assign>>()) {
			_case_begin_22a7cd86c:;
			{
				_2281d2592_assign(_self_, _63126_st.operator jule::Ptr<_24552c75a_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552cb12_MultiAssign>>()) {
			_case_begin_22a7cd8e4:;
			{
				_2281d2817_multi_assign(_self_, _63126_st.operator jule::Ptr<_24552cb12_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552d151_Match>>()) {
			_case_begin_22a7cd96b:;
			{
				_2281d31b9_match_st(_self_, _63126_st.operator jule::Ptr<_24552d151_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552e251_FallSt>>()) {
			_case_begin_22a7cd9e3:;
			{
				_2281d343e_fall_st(_self_, _63126_st.operator jule::Ptr<_24552e251_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552b858_BreakSt>>()) {
			_case_begin_22a7cda6a:;
			{
				_2281d36b4_break_st(_self_, _63126_st.operator jule::Ptr<_24552b858_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552e6c4_RetSt>>()) {
			_case_begin_22a7cdae2:;
			{
				_2281d41a9_ret_st(_self_, _63126_st.operator jule::Ptr<_24552e6c4_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2456a785d_PushToSliceExprModel>>()) {
			_case_begin_22a7cdb69:;
			{
				_2281e0d75_push_to_slice(_self_.get()._field_oc.get()._field_ec, _63126_st.operator jule::Ptr<_2456a785d_PushToSliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2456a7e24_MutSlicingExprModel>>()) {
			_case_begin_22a7cdbe1:;
			{
				_2281e28e3_mut_slicing(_self_.get()._field_oc.get()._field_ec, _63126_st.operator jule::Ptr<_2456a7e24_MutSlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2456a82ba_StrInsertBeginExprModel>>()) {
			_case_begin_22a7cdc68:;
			{
				_2281e2b68_str_insert_begin(_self_.get()._field_oc.get()._field_ec, _63126_st.operator jule::Ptr<_2456a82ba_StrInsertBeginExprModel>());
			}
		}
		else {
			_case_begin_22a7cc77d:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("<unimplemented_stmt>", 20));
			}
		}
		_match_end_22a7cc728:;
	};
}



inline void _2281d4b9e_scope_stmts(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552937d_Scope>& _68136_s) {
	{
		auto &expr = _68136_s.get()._field_stmts;
		auto it = expr.begin();
		_iter_begin_22a7d8bb8:;
		if (it != expr.end()) {
			jule::Any _68221_st = *it;
			{
				_228241e3c_indent(_self_.get()._field_oc);
				_2281d4929_st(_self_, _68221_st);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
			}
			_iter_next_22a7d8bb8:;
			++it;
			goto _iter_begin_22a7d8bb8;
		}
		_iter_end_22a7d8bb8:;
	};
}



inline void _2281d4e24_scope(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_24552937d_Scope> _69029_s) {
	_2282406ee_add_indent(_self_.get()._field_oc);
	if (_69029_s.get()._field_deferred) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("__JULE_DEFER(", 13));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("{\n", 2));
	_2281d4b9e_scope_stmts(_self_, _69029_s);
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
	if (_69029_s.get()._field_deferred) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(");", 2));
	};
}



inline void _2281d5199_func_scope(jule::Ptr<_2281cee96_ScopeCoder> _self_, jule::Ptr<_2449299b0_FnIns> _70634_f) {
	if ((_70634_f.get()._field_scope == nullptr)) {
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("{\n", 2));
	_2282406ee_add_indent(_self_.get()._field_oc);
	if ((!(_244927271_is_void(_70634_f.get()._field_decl.ptr())))) {
		jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _71321_types = _24492aad2_types(_70634_f.ptr());;
		{
			auto &expr = _70634_f.get()._field_decl.get()._field_result.get()._field_idents;
			auto it = expr.begin();
			_iter_begin_22a7de97c:;
			if (it != expr.end()) {
				jule::I32 _71417_i = it - expr.begin();
				jule::Ptr<_2431e4523_Token> _71420_ident = *it;
				{
					if ((_2431e6cb7_is_ignore_ident(_71420_ident.get()._field_kind) || _2431e705e_is_anon_ident(_71420_ident.get()._field_kind))) {
						goto _iter_next_22a7de97c;
					};
					_228241e3c_indent(_self_.get()._field_oc);
					_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_71321_types[_71417_i]));
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(" ", 1));
					_22823ee5c_write(_self_.get()._field_oc, static__2281e9d90_to_local(_71420_ident.get()._field_row,_71420_ident.get()._field_column,_71420_ident.get()._field_kind));
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(" = ", 3));
					_2281e365d_init_expr(_self_.get()._field_oc.get()._field_ec, _71321_types[_71417_i]);
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
				}
				_iter_next_22a7de97c:;
				++it;
				_71417_i++;
				goto _iter_begin_22a7de97c;
			}
			_iter_end_22a7de97c:;
		};
	};
	_2281d4b9e_scope_stmts(_self_, _70634_f.get()._field_scope);
	if ((_70634_f.get()._field_decl.get()._field_exceptional && _244927271_is_void(_70634_f.get()._field_decl.ptr()))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(" return jule::VoidExceptional();\n", 33));
	};
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
}







std::ostream &operator<<(std::ostream &_Stream, _2281cee96_ScopeCoder _Src) {
	_Stream << "ScopeCoder{";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2281d7a1a_ExprCoder> static__2281d7e16_new(jule::Ptr<_22825bb05_ObjectCoder>& _9724_oc) {
	return jule::new_ptr<_2281d7a1a_ExprCoder>(_2281d7a1a_ExprCoder{._field_oc=_9724_oc});
}



inline void _2281d818b_string(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2448ab524_Const>& _10327_c) {
	jule::Str _10413_content = _244917c45_read_str(_10327_c.ptr());;
	if ((_10413_content.len() == 0LL)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::Str()", 11));
		return;;
	};
	jule::Slice<jule::U8> _10913_bytes = static_cast<jule::Slice<jule::U8>>(_10413_content);;
	jule::Str _11013_len = _24547d6cd_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_10913_bytes.len())),10LL);;
	jule::Str _11113_lit = _2281e4362_cstr_lit(_10913_bytes);;
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::Str", 9));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_22823ee5c_write(_self_.get()._field_oc, _11113_lit);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(", ", 2));
	_22823ee5c_write(_self_.get()._field_oc, _11013_len);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281d8411_boolean(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2448ab524_Const>& _12028_c) {
	if (_2449179d1_read_bool(_12028_c.ptr())) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("true", 4));
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("false", 5));
}



inline void _2281d85dc_nil_lit(jule::Ptr<_2281d7a1a_ExprCoder> _self_) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("nullptr", 7));
}



inline jule::Bool _2281d88ea_ftoa_special_cases(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::F64& _13239_x) {
	{
		
		if (_2453b4845_is_nan(_13239_x)) {
			_case_begin_22a80e3c5:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("NAN", 3));
			}
		}
		else if (_2453bbb49_is_inf(_13239_x,1LL)) {
			_case_begin_22a80db88:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("INFINITY", 8));
			}
		}
		else if (_2453bbb49_is_inf(_13239_x,-1LL)) {
			_case_begin_22a80dbee:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("-INFINITY", 9));
			}
		}
		else {
			_case_begin_22a80db22:;
			{
				return false;
			}
		}
		_match_end_22a80da45:;
	};
	return true;
}



inline void _2281d8b70_float32(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2448ab524_Const>& _14628_c) {
	jule::F64 _14713_x = _2449186e6_as_f64(_14628_c.ptr());;
	if (_2281d88ea_ftoa_special_cases(_self_, _14713_x)) {
		return;;
	};
	{
		
		if ((_14713_x == 340282346638528860000000000000000000000.0)) {
			_case_begin_22a811d9a:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::MAX_F32", 13));
			}
		}
		else if ((_14713_x == -340282346638528860000000000000000000000.0)) {
			_case_begin_22a811a9d:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::MIN_F32", 13));
			}
		}
		else {
			_case_begin_22a81141b:;
			{
				_22823ee5c_write(_self_.get()._field_oc, _2281e4670_ftoa(_14713_x,32LL));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("f", 1));
			}
		}
		_match_end_22a8117d4:;
	};
}



inline void _2281d8de5_float64(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2448ab524_Const>& _16528_c) {
	jule::F64 _16613_x = _2449186e6_as_f64(_16528_c.ptr());;
	if (_2281d88ea_ftoa_special_cases(_self_, _16613_x)) {
		return;;
	};
	{
		
		if ((_16613_x == jule::MAX_F64)) {
			_case_begin_22a814de2:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::MAX_F64", 13));
			}
		}
		else if ((_16613_x == jule::MIN_F64)) {
			_case_begin_22a815552:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::MIN_F64", 13));
			}
		}
		else {
			_case_begin_22a814463:;
			{
				_22823ee5c_write(_self_.get()._field_oc, _2281e4670_ftoa(_16613_x,64LL));
			}
		}
		_match_end_22a81482b:;
	};
}



inline void _2281d9214_constant(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2448ab524_Const> _18432_c, jule::Bool _18443_fx32) {
	{
		
		if (_24491a0dd_is_str(_18432_c.ptr())) {
			_case_begin_22a816d5b:;
			{
				_2281d818b_string(_self_, _18432_c);
			}
		}
		else if (_244919d79_is_bool(_18432_c.ptr())) {
			_case_begin_22a816dc2:;
			{
				_2281d8411_boolean(_self_, _18432_c);
			}
		}
		else if (_24491a352_is_f64(_18432_c.ptr())) {
			_case_begin_22a816e38:;
			{
				{
					
					if (_18443_fx32) {
						_case_begin_22a819127:;
						{
							_2281d8b70_float32(_self_, _18432_c);
						}
					}
					else {
						_case_begin_22a818c81:;
						{
							_2281d8de5_float64(_self_, _18432_c);
						}
					}
					_match_end_22a818ba4:;
				};
			}
		}
		else if (_2449198a1_is_i64(_18432_c.ptr())) {
			_case_begin_22a816e9e:;
			{
				_22823ee5c_write(_self_.get()._field_oc, _2281e4917_itoa(static_cast<jule::I64>(_244917508_read_i64(_18432_c.ptr()))));
			}
		}
		else if (_244919b15_is_u64(_18432_c.ptr())) {
			_case_begin_22a8177eb:;
			{
				_22823ee5c_write(_self_.get()._field_oc, _2281e4bae_utoa(static_cast<jule::U64>(_24491776c_read_u64(_18432_c.ptr()))));
			}
		}
		else if (_24491a5b6_is_nil(_18432_c.ptr())) {
			_case_begin_22a817862:;
			{
				_2281d85dc_nil_lit(_self_);
			}
		}
		else {
			_case_begin_22a816ce5:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("<unimplemented_constant_expression>", 35));
			}
		}
		_match_end_22a816c18:;
	};
}



inline void _2281d95cc_div_by_zero_binary(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2431e4523_Token>& _20839_op, jule::Ptr<_24491e895_OperandExprModel>& _20856_l, jule::Ptr<_24491e895_OperandExprModel>& _20883_r) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::", 6));
	{
		auto &_match_expr{ _20839_op.get()._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("/=", 2)) {
			_case_begin_22a81c229:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("div(", 4));
			}
		}
		else if (_match_expr == jule::Str("%", 1) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_22a81c290:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("mod(", 4));
			}
		}
		_match_end_22a81c12a:;
	};
	if ((!(_240e658e5_PRODUCTION))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
		_228243328_loc_info(_self_.get()._field_oc, _20839_op);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\",", 2));
	};
	_2281e3163_expr(_self_, _20856_l.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
	_2281e3163_expr(_self_, _20883_r.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281d9852_unsafe_binary(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24491ea82_BinopExprModel> _23037_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_2281e2ddd_model(_self_, _23037_m.get()._field_left.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(" ", 1));
	_22823ee5c_write(_self_.get()._field_oc, _23037_m.get()._field_op.get()._field_kind);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(" ", 1));
	_2281e2ddd_model(_self_, _23037_m.get()._field_right.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281d9ac7_binary(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24491ea82_BinopExprModel> _24030_m) {
	{
		auto &_match_expr{ _24030_m.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("%", 1)) {
			_case_begin_22a82386d:;
			{
				if ((_2455e458b_strct(_24030_m.get()._field_left.get()._field_kind.ptr()) == nullptr)) {
					_2281d95cc_div_by_zero_binary(_self_, _24030_m.get()._field_op,_24030_m.get()._field_left,_24030_m.get()._field_right);
					return;;
				};
			}
		}
		_match_end_22a8237b3:;
	};
	_2281d9852_unsafe_binary(_self_, _24030_m);
}



inline void _2281d9d4c_var(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24556cc1d_Var> _25227_m) {
	if (_25227_m.get()._field_cpp_linked) {
		jule::Ptr<_2448249dc_Directive> _25417_d = _228269d88_find_directive(_25227_m.get()._field_directives,jule::Str("namespace", 9));;
		if ((_25417_d != nullptr)) {
			_22823ee5c_write(_self_.get()._field_oc, _228261962_concat_all_parts(_25417_d.get()._field_args));
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("::", 2));
		};
	};
	_22823ee5c_write(_self_.get()._field_oc, static__2281eb49b_var(_25227_m));
}



inline void _2281da0c2_structure_ins(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244874c5c_StructIns> _26337_m) {
	_22823ee5c_write(_self_.get()._field_oc, static__228265e1c_structure_ins(_26337_m));
}



inline void _2281da347_unary(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24491ec6e_UnaryExprModel> _26729_m) {
	{
		auto &_match_expr{ _26729_m.get()._field_op.get()._field_kind };
		
		if (_match_expr == jule::Str("^", 1)) {
			_case_begin_22a828400:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("(~(", 3));
				_2281e3163_expr(_self_, _26729_m.get()._field_expr.get()._field_model);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("))", 2));
				return;;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_22a828466:;
			{
				if ((_240e658e5_PRODUCTION || (_2455e339d_sptr(_26729_m.get()._field_expr.get()._field_kind.ptr()) == nullptr))) {
					goto _match_end_22a828345;
				};
				_2281e3163_expr(_self_, _26729_m.get()._field_expr.get()._field_model);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(".get(\"", 6));
				_228243328_loc_info(_self_.get()._field_oc, _26729_m.get()._field_op);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("\")", 2));
				return;;
			}
		}
		_match_end_22a828345:;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_22823ee5c_write(_self_.get()._field_oc, _26729_m.get()._field_op.get()._field_kind);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_2281e3163_expr(_self_, _26729_m.get()._field_expr.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("))", 2));
}



inline void _2281da5bc_structure_lit(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244920148_StructLitExprModel> _29137_m) {
	if (_29137_m.get()._field_strct.get()._field_decl.get()._field_cpp_linked) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	};
	_22823ee5c_write(_self_.get()._field_oc, static__2281eae5c_structure_ins(_29137_m.get()._field_strct));
	if (_29137_m.get()._field_strct.get()._field_decl.get()._field_cpp_linked) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("{", 1));
	if ((_29137_m.get()._field_args.len() > 0LL)) {
		_julec_label_iter:;
		{
			auto &expr = _29137_m.get()._field_strct.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_22a830a56:;
			if (it != expr.end()) {
				jule::I32 _30417_i = it - expr.begin();
				jule::Ptr<_244851079_FieldIns> _30420_f = *it;
				{
					{
						auto &expr = _29137_m.get()._field_args;
						auto it = expr.begin();
						_iter_begin_22a831628:;
						if (it != expr.end()) {
							jule::Ptr<_24491ee5b_StructArgExprModel> _30529_arg = *it;
							{
								if ((_30529_arg.get()._field_field == _30420_f)) {
									_22823ee5c_write(_self_.get()._field_oc, jule::Str(".", 1));
									_22823ee5c_write(_self_.get()._field_oc, static__2281eb204_field(_30529_arg.get()._field_field.get()._field_decl));
									_22823ee5c_write(_self_.get()._field_oc, jule::Str("=", 1));
									_2281e3163_expr(_self_, _30529_arg.get()._field_expr);
									if (((_29137_m.get()._field_strct.get()._field_fields.len() - _30417_i) > 1LL)) {
										_22823ee5c_write(_self_.get()._field_oc, jule::Str(", ", 2));
									};
									goto _iter_next_22a830a56;
								};
							}
							_iter_next_22a831628:;
							++it;
							goto _iter_begin_22a831628;
						}
						_iter_end_22a831628:;
					};
				}
				_iter_next_22a830a56:;
				++it;
				_30417_i++;
				goto _iter_begin_22a830a56;
			}
			_iter_end_22a830a56:;
		};
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
}



inline void _2281da842_alloc_structure(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244920335_AllocStructLitExprModel> _32239_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::new_ptr<", 14));
	_22823ee5c_write(_self_.get()._field_oc, static__2281eae5c_structure_ins(_32239_m.get()._field_lit.get()._field_strct));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(", 2));
	_2281da5bc_structure_lit(_self_, _32239_m.get()._field_lit);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281daab7_casting(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244920522_CastingExprModel> _33031_m) {
	{
		
		if (((_2455e3139_prim(_33031_m.get()._field_kind.ptr()) != nullptr) && _2455e8e97_is_any(_2455e3139_prim(_33031_m.get()._field_kind.ptr()).ptr()))) {
			_case_begin_22a8374ca:;
			{
				_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_33031_m.get()._field_kind));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
				_2281e2ddd_model(_self_, _33031_m.get()._field_expr);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
			}
		}
		else if ((_2455e3612_ptr(_33031_m.get()._field_expr_kind.ptr()) != nullptr) || (_2455e3612_ptr(_33031_m.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a83719a:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("((", 2));
				_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_33031_m.get()._field_kind));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(")(", 2));
				_2281e3163_expr(_self_, _33031_m.get()._field_expr);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("))", 2));
			}
		}
		else if ((_2455e4800_trt(_33031_m.get()._field_expr_kind.ptr()) != nullptr) || ((_2455e3139_prim(_33031_m.get()._field_expr_kind.ptr()) != nullptr) && _2455e8e97_is_any(_2455e3139_prim(_33031_m.get()._field_expr_kind.ptr()).ptr())) || (_2455e3ada_tenm(_33031_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_case_begin_22a837211:;
			{
				_2281e2ddd_model(_self_, _33031_m.get()._field_expr);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(".", 1));
				if (_240e658e5_PRODUCTION) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("operator ", 9));
					_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_33031_m.get()._field_kind));
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("()", 2));
				} else {
					if ((_2455e339d_sptr(_33031_m.get()._field_kind.ptr()) != nullptr)) {
						_22823ee5c_write(_self_.get()._field_oc, jule::Str("cast_ptr<", 9));
						_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_2455e339d_sptr(_33031_m.get()._field_kind.ptr()).get()._field_elem));
					} else {
						_22823ee5c_write(_self_.get()._field_oc, jule::Str("cast<", 5));
						_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_33031_m.get()._field_kind));
					};
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(\"", 3));
					_228243328_loc_info(_self_.get()._field_oc, _33031_m.get()._field_token);
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("\")", 2));
				};
			}
		}
		else if ((_2455e4800_trt(_33031_m.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a837277:;
			{
				_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_33031_m.get()._field_kind));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
				_2281e3163_expr(_self_, _33031_m.get()._field_expr);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(", ", 2));
				_22823ee5c_write(_self_.get()._field_oc, _24547d975_itoa(static_cast<jule::I32>(_2282312b1_find_type_offset(_self_.get()._field_oc.ptr(), _2455e4800_trt(_33031_m.get()._field_kind.ptr()),_33031_m.get()._field_expr_kind))));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
			}
		}
		else {
			_case_begin_22a837134:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("static_cast<", 12));
				_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_33031_m.get()._field_kind));
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(", 2));
				_2281e3163_expr(_self_, _33031_m.get()._field_expr);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
			}
		}
		_match_end_22a837057:;
	};
}



inline void _2281dad3c_args(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Slice<jule::Any> _38128_args) {
	if ((_38128_args.len() == 0LL)) {
		return;;
	};
	{
		auto &expr = _38128_args;
		auto it = expr.begin();
		_iter_begin_22a847aa1:;
		if (it != expr.end()) {
			jule::I32 _38514_i = it - expr.begin();
			jule::Any _38521_a = *it;
			{
				_2281e3163_expr(_self_, _38521_a);
				if (((_38128_args.len() - _38514_i) > 1LL)) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
				};
			}
			_iter_next_22a847aa1:;
			++it;
			_38514_i++;
			goto _iter_begin_22a847aa1;
		}
		_iter_end_22a847aa1:;
	};
}



inline void _2281db0b2_model_for_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Any _39338_expr) {
	{
		auto &_match_expr{ _39338_expr };
		
		if (_match_expr.type_is<jule::Ptr<_2449299b0_FnIns>>()) {
			_case_begin_22a849a70:;
			{
				_2281ddd95_func_ins(_self_, _39338_expr.operator jule::Ptr<_2449299b0_FnIns>());
				return;;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
			_case_begin_22a849ae7:;
			{
				jule::Ptr<_244921996_StructSubIdentExprModel> _39921_ssie = _39338_expr.operator jule::Ptr<_244921996_StructSubIdentExprModel>();;
				if ((_39921_ssie.get()._field_method != nullptr)) {
					_2281ddd95_func_ins(_self_, _39921_ssie.get()._field_method);
					return;;
				};
			}
		}
		_match_end_22a849960:;
	};
	_2281e2ddd_model(_self_, _39338_expr);
}



inline void _2281db337_push_call_inf(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492070e_FnCallExprModel>& _40834_m) {
	if ((_240e658e5_PRODUCTION || ((!(_40834_m.get()._field_func.get()._field_anon)) && (!(_2281e5330_is_builtin_call_has_debuginf(_40834_m)))))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
		return;;
	};
	if (_40834_m.get()._field_func.get()._field_anon) {
		{
			auto &_match_expr{ _40834_m.get()._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
				_case_begin_22a84ce4c:;
				{
					if (_40834_m.get()._field_expr.operator jule::Ptr<_244921996_StructSubIdentExprModel>().get()._field_field.get()._field_decl.get()._field_owner.get()._field_cpp_linked) {
						_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
						return;;
					};
					goto _case_begin_22a84d128;
				}
			}
			else {
				_case_begin_22a84d128:;
				{
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(".call", 5));
				}
			}
			_match_end_22a84d007:;
		};
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(\"", 2));
	_228243328_loc_info(_self_.get()._field_oc, _40834_m.get()._field_token);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
	if ((_40834_m.get()._field_args.len() != 0LL)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
	};
}



inline jule::Bool _2281db645_is_wrapped(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492070e_FnCallExprModel>& _43335_m) {
	if ((((!(_24492ad46_is_builtin(_43335_m.get()._field_func.ptr()))) && (_43335_m.get()._field_func.get()._field_decl.get()._field_params.len() > 0LL)) && _244925aee_is_self(_43335_m.get()._field_func.get()._field_decl.get()._field_params[0LL].ptr()))) {
		{
			auto &_match_expr{ _43335_m.get()._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
				_case_begin_22a851b87:;
				{
					jule::Ptr<_244921996_StructSubIdentExprModel> _43725_ssie = _43335_m.get()._field_expr.operator jule::Ptr<_244921996_StructSubIdentExprModel>();;
					{
						
						if (_244925d63_is_ref(_43335_m.get()._field_func.get()._field_decl.get()._field_params[0LL].ptr()) || (_2455e339d_sptr(_43725_ssie.get()._field_expr_kind.ptr()) != nullptr)) {
							_case_begin_22a8524b2:;
							{
								goto _match_end_22a852a45;
							}
						}
						else {
							_case_begin_22a852aab:;
							{
								if ((_2455e458b_strct(_43725_ssie.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
									if ((!(_43725_ssie.get()._field_expr.get()._field_lvalue))) {
										_22823ee5c_write(_self_.get()._field_oc, jule::Str("({ auto _wrap_copy = ", 21));
										_2281e2ddd_model(_self_, _43725_ssie.get()._field_expr.get()._field_model);
										_22823ee5c_write(_self_.get()._field_oc, jule::Str("; ", 2));
										return true;
									};
								};
							}
						}
						_match_end_22a852a45:;
					};
				}
			}
			_match_end_22a851978:;
		};
	};
	return false;
}



inline void _2281db8ba_pure_func_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492070e_FnCallExprModel>& _45739_m) {
	jule::Bool _45813_wrapped = _2281db645_is_wrapped(_self_, _45739_m);;
	if (_45739_m.get()._field_is_co) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("__JULE_CO(", 10));
	};
	_2281db0b2_model_for_call(_self_, _45739_m.get()._field_expr);
	if ((!(_24492ad46_is_builtin(_45739_m.get()._field_func.ptr())))) {
		if ((_45739_m.get()._field_func.get()._field_decl.get()._field_cpp_linked && (_45739_m.get()._field_func.get()._field_generics.len() > 0LL))) {
			if ((!(_22826a21d_has_directive(_45739_m.get()._field_func.get()._field_decl.get()._field_directives,jule::Str("cdef", 4))))) {
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("<", 1));
				{
					auto &expr = _45739_m.get()._field_func.get()._field_generics;
					auto it = expr.begin();
					_iter_begin_22a858dd1:;
					if (it != expr.end()) {
						jule::I32 _46726_i = it - expr.begin();
						jule::Ptr<_2455de7ea_InsGeneric> _46733_g = *it;
						{
							_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_46733_g.get()._field_kind));
							if (((_45739_m.get()._field_func.get()._field_generics.len() - _46726_i) > 1LL)) {
								_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
							};
						}
						_iter_next_22a858dd1:;
						++it;
						_46726_i++;
						goto _iter_begin_22a858dd1;
					}
					_iter_end_22a858dd1:;
				};
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(">", 1));
			};
		};
	};
	_2281db337_push_call_inf(_self_, _45739_m);
	jule::Bool _47817_locinfo = false;;
	if ((((!(_24492ad46_is_builtin(_45739_m.get()._field_func.ptr()))) && (_45739_m.get()._field_func.get()._field_decl.get()._field_params.len() > 0LL)) && _244925aee_is_self(_45739_m.get()._field_func.get()._field_decl.get()._field_params[0LL].ptr()))) {
		{
			auto &_match_expr{ _45739_m.get()._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
				_case_begin_22a857ae4:;
				{
					jule::Ptr<_244921996_StructSubIdentExprModel> _48225_ssie = _45739_m.get()._field_expr.operator jule::Ptr<_244921996_StructSubIdentExprModel>();;
					{
						
						if (_244925d63_is_ref(_45739_m.get()._field_func.get()._field_decl.get()._field_params[0LL].ptr())) {
							_case_begin_22a85eaa7:;
							{
								_2281e2ddd_model(_self_, _48225_ssie.get()._field_expr.get()._field_model);
							}
						}
						else if ((_2455e339d_sptr(_48225_ssie.get()._field_expr_kind.ptr()) != nullptr)) {
							_case_begin_22a860118:;
							{
								_2281e2ddd_model(_self_, _48225_ssie.get()._field_expr.get()._field_model);
								_22823ee5c_write(_self_.get()._field_oc, jule::Str(".ptr(", 5));
								if ((!(_240e658e5_PRODUCTION))) {
									_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
									_228243328_loc_info(_self_.get()._field_oc, _45739_m.get()._field_token);
									_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
								};
								_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
							}
						}
						else {
							_case_begin_22a85d710:;
							{
								if ((_2455e458b_strct(_48225_ssie.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
									_22823ee5c_write(_self_.get()._field_oc, jule::Str("&", 1));
								};
								if (_45813_wrapped) {
									_22823ee5c_write(_self_.get()._field_oc, jule::Str("_wrap_copy", 10));
								} else {
									_2281e2ddd_model(_self_, _48225_ssie.get()._field_expr.get()._field_model);
								};
							}
						}
						_match_end_22a85d699:;
					};
					if ((_45739_m.get()._field_args.len() > 0LL)) {
						_22823ee5c_write(_self_.get()._field_oc, jule::Str(", ", 2));
					};
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_244921578_TraitSubIdentExprModel>>()) {
				_case_begin_22a85c786:;
				{
					_2281e2ddd_model(_self_, _45739_m.get()._field_expr.operator jule::Ptr<_244921578_TraitSubIdentExprModel>().get()._field_expr);
					if ((!(_240e658e5_PRODUCTION))) {
						_47817_locinfo=true;
					};
					if ((_45739_m.get()._field_args.len() > 0LL)) {
						_22823ee5c_write(_self_.get()._field_oc, jule::Str(", ", 2));
					};
				}
			}
			_match_end_22a85c621:;
		};
	};
	_2281dad3c_args(_self_, _45739_m.get()._field_args);
	if (_47817_locinfo) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(", \"", 3));
		_228243328_loc_info(_self_.get()._field_oc, _45739_m.get()._field_token);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	if (_45813_wrapped) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("; })", 4));
	};
	if (_45739_m.get()._field_is_co) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	};
}



inline void _2281dbb40_func_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492070e_FnCallExprModel> _53633_m) {
	if (((_24492ad46_is_builtin(_53633_m.get()._field_func.ptr()) || (!(_53633_m.get()._field_func.get()._field_decl.get()._field_exceptional))) || ((_53633_m.get()._field_except != nullptr) && (_53633_m.get()._field_except.get()._field_stmts.len() == 0LL)))) {
		_2281db8ba_pure_func_call(_self_, _53633_m);
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("({\n", 3));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto except = ", 14));
	_2281db8ba_pure_func_call(_self_, _53633_m);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	if ((_53633_m.get()._field_except != nullptr)) {
		if (((_53633_m.get()._field_func.get()._field_result == nullptr) || (!(_53633_m.get()._field_assigned)))) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (!except.ok()) ", 18));
			_2281d4e24_scope(_self_.get()._field_oc.get()._field_sc, _53633_m.get()._field_except);
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n", 1));
		} else {
			jule::Bool _55821_forwarded = _2281e5066_is_forwarded(_53633_m.get()._field_except);;
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("(except.ok()) ? (except.result) : (", 35));
			if (_55821_forwarded) {
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("{", 1));
			};
			_2281d4e24_scope(_self_.get()._field_oc.get()._field_sc, _53633_m.get()._field_except);
			if (_55821_forwarded) {
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(" ", 1));
				_2281e365d_init_expr(_self_, _53633_m.get()._field_func.get()._field_result);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(";}", 2));
			};
			_22823ee5c_write(_self_.get()._field_oc, jule::Str(");\n", 3));
		};
		_2282416de_done_indent(_self_.get()._field_oc);
	} else {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (!except.ok()) jule::panic(jule::Str(\"unhandled exceptional: \") + except.error.type->to_str(except.error.data) + jule::Str(\"\\nlocation: ", 139));
		_228243328_loc_info(_self_.get()._field_oc, _53633_m.get()._field_token);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"));\n", 5));
		if ((!(_244927271_is_void(_53633_m.get()._field_func.get()._field_decl.ptr())))) {
			_228241e3c_indent(_self_.get()._field_oc);
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("(except.result);\n", 17));
		};
		_2282416de_done_indent(_self_.get()._field_oc);
	};
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("})", 2));
}



inline void _2281dbdb5_slice(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449208eb_SliceExprModel> _58729_m) {
	if ((_58729_m.get()._field_elems.len() == 0LL)) {
		_22823ee5c_write(_self_.get()._field_oc, static__228264d50_as_slice(_58729_m.get()._field_elem_kind));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("()", 2));
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, static__228264d50_as_slice(_58729_m.get()._field_elem_kind));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("::make({", 8));
	_2281dad3c_args(_self_, _58729_m.get()._field_elems);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("})", 2));
}



inline void _2281dc13a_indexing(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244920ad8_IndexingExprModel> _59932_m) {
	_2281e2ddd_model(_self_, _59932_m.get()._field_expr.get()._field_model);
	{
		
		if (_240e658e5_PRODUCTION || (_2455e3612_ptr(_59932_m.get()._field_expr.get()._field_kind.ptr()) != nullptr) || (_2455e4a64_map(_59932_m.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a87d235:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("[", 1));
				_2281e3163_expr(_self_, _59932_m.get()._field_index.get()._field_model);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("]", 1));
			}
		}
		else {
			_case_begin_22a87d9c7:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(".at(\"", 5));
				_228243328_loc_info(_self_.get()._field_oc, _59932_m.get()._field_token);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("\",", 2));
				_2281e3163_expr(_self_, _59932_m.get()._field_index.get()._field_model);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
			}
		}
		_match_end_22a87d961:;
	};
}



inline void _2281dc3b0_unsafe_indexing(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2456a7495_UnsafeIndexingExprModel> _61839_m) {
	_2281e2ddd_model(_self_, _61839_m.get()._field_node.get()._field_expr.get()._field_model);
	{
		
		if (_240e658e5_PRODUCTION || (_2455e3612_ptr(_61839_m.get()._field_node.get()._field_expr.get()._field_kind.ptr()) != nullptr) || (_2455e4a64_map(_61839_m.get()._field_node.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a8815ce:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("[", 1));
				_2281e3163_expr(_self_, _61839_m.get()._field_node.get()._field_index.get()._field_model);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("]", 1));
			}
		}
		else {
			_case_begin_22a882eb5:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(".__at(", 6));
				_2281e3163_expr(_self_, _61839_m.get()._field_node.get()._field_index.get()._field_model);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
			}
		}
		_match_end_22a882e4e:;
	};
}



inline void _2281dc635_anon_func(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244920cc5_AnonFnExprModel> _63533_m) {
	_22823ee5c_write(_self_.get()._field_oc, static__228267281_func(_63533_m.get()._field_func));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("([=]", 4));
	_22825d475_params_ins(_self_.get()._field_oc, _63533_m.get()._field_func.get()._field_params);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(" mutable -> ", 12));
	_22823ee5c_write(_self_.get()._field_oc, static__228266c42_func_ins_result(_63533_m.get()._field_func));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(" ", 1));
	_2281d5199_func_scope(_self_.get()._field_oc.get()._field_sc, _63533_m.get()._field_func);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281dc8aa_map(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492119e_MapExprModel> _64627_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::Map<", 10));
	_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_64627_m.get()._field_key_kind));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
	_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_64627_m.get()._field_val_kind));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(">({", 3));
	if ((_64627_m.get()._field_entries.len() > 0LL)) {
		{
			auto &expr = _64627_m.get()._field_entries;
			auto it = expr.begin();
			_iter_begin_22a88b980:;
			if (it != expr.end()) {
				jule::I32 _65318_i = it - expr.begin();
				jule::Ptr<_244920eb2_KeyValPairExprModel> _65325_pair = *it;
				{
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("{", 1));
					_2281e3163_expr(_self_, _65325_pair.get()._field_key);
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
					_2281e3163_expr(_self_, _65325_pair.get()._field_val);
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
					if (((_64627_m.get()._field_entries.len() - _65318_i) > 1LL)) {
						_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
					};
				}
				_iter_next_22a88b980:;
				++it;
				_65318_i++;
				goto _iter_begin_22a88b980;
			}
			_iter_end_22a88b980:;
		};
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("})", 2));
}



inline void _2281dcb30_slicing(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492138b_SlicingExprModel> _66731_m) {
	_2281e2ddd_model(_self_, _66731_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(".slice(", 7));
	if ((!(_240e658e5_PRODUCTION))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
		_228243328_loc_info(_self_.get()._field_oc, _66731_m.get()._field_token);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\",", 2));
	};
	_2281e3163_expr(_self_, _66731_m.get()._field_left);
	if ((_66731_m.get()._field_right != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
		_2281e3163_expr(_self_, _66731_m.get()._field_right);
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281dcda5_trait_sub(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244921578_TraitSubIdentExprModel> _68333_m) {
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea676_trait_decl(_68333_m.get()._field_trt));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("_mptr_data", 10));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("[(", 2));
	_2281e2ddd_model(_self_, _68333_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(").type_offset].", 15));
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea137_func(_68333_m.get()._field_method));
}



inline void _2281dd12a_structure_sub(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244921996_StructSubIdentExprModel> _69237_m) {
	_2281e2ddd_model(_self_, _69237_m.get()._field_expr.get()._field_model);
	if ((_69237_m.get()._field_field != nullptr)) {
		if ((_2455e3612_ptr(_69237_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("->", 2));
		} else if ((_2455e339d_sptr(_69237_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str(".get(", 5));
			if ((!(_240e658e5_PRODUCTION))) {
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
				_228243328_loc_info(_self_.get()._field_oc, _69237_m.get()._field_token);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
			};
			_22823ee5c_write(_self_.get()._field_oc, jule::Str(").", 2));
		} else {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str(".", 1));
		};
		_22823ee5c_write(_self_.get()._field_oc, static__2281eb204_field(_69237_m.get()._field_field.get()._field_decl));
	};
}



inline void _2281dd3a0_common_ident(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492205c_CommonIdentExprModel> _71232_m) {
	_22823ee5c_write(_self_.get()._field_oc, _71232_m.get()._field_ident);
}



inline void _2281dd625_common_sub(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244922249_CommonSubIdentExprModel> _71634_m) {
	_2281e2ddd_model(_self_, _71634_m.get()._field_expr);
	{
		
		if ((_2455e3612_ptr(_71634_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_case_begin_22a89ad35:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("->", 2));
			}
		}
		else if ((_2455e339d_sptr(_71634_m.get()._field_expr_kind.ptr()) != nullptr)) {
			_case_begin_22a89b561:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(".get(", 5));
				if ((!(_240e658e5_PRODUCTION))) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
					_228243328_loc_info(_self_.get()._field_oc, _71634_m.get()._field_token);
					_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
				};
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(").", 2));
			}
		}
		else {
			_case_begin_22a89b4ea:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(".", 1));
			}
		}
		_match_end_22a89b484:;
	};
	_22823ee5c_write(_self_.get()._field_oc, _71634_m.get()._field_ident);
}



inline void _2281dd89a_array(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244921d70_ArrayExprModel> _73529_m) {
	_22823ee5c_write(_self_.get()._field_oc, static__2282661b4_array(_73529_m.get()._field_kind));
	if ((_73529_m.get()._field_elems.len() == 0LL)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("()", 2));
		return;;
	};
	if (((_73529_m.get()._field_elems.len() == 2LL) && (_73529_m.get()._field_elems[1LL] == nullptr))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
		_2281e3163_expr(_self_, _73529_m.get()._field_elems[0LL]);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("({", 2));
	_2281dad3c_args(_self_, _73529_m.get()._field_elems);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("})", 2));
	return;;
}



inline void _2281ddb20_func_ins_common(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449299b0_FnIns> _75839_m) {
	_22823ee5c_write(_self_.get()._field_oc, static__228267281_func(_75839_m));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_2281ddd95_func_ins(_self_, _75839_m);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281ddd95_func_ins(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449299b0_FnIns> _76532_m) {
	if (((_76532_m.get()._field_decl != nullptr) && _76532_m.get()._field_decl.get()._field_cpp_linked)) {
		jule::Ptr<_2448249dc_Directive> _76717_d = _228269d88_find_directive(_76532_m.get()._field_decl.get()._field_directives,jule::Str("namespace", 9));;
		if ((_76717_d != nullptr)) {
			_22823ee5c_write(_self_.get()._field_oc, _228261962_concat_all_parts(_76717_d.get()._field_args));
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("::", 2));
		};
	};
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea3ce_func_ins(_76532_m));
}



inline void _2281de11a_tuple(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244922436_TupleExprModel> _77629_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("std::make_tuple(", 16));
	{
		auto &expr = _77629_m.get()._field_datas;
		auto it = expr.begin();
		_iter_begin_22a8a8bab:;
		if (it != expr.end()) {
			jule::I32 _77814_i = it - expr.begin();
			jule::Ptr<_2455b5051_Data> _77821_d = *it;
			{
				_2281e3163_expr(_self_, _77821_d.get()._field_model);
				if (((_77629_m.get()._field_datas.len() - _77814_i) > 1LL)) {
					_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
				};
			}
			_iter_next_22a8a8bab:;
			++it;
			_77814_i++;
			goto _iter_begin_22a8a8bab;
		}
		_iter_end_22a8a8bab:;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281de390_new_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244922bd9_BuiltinNewCallExprModel> _78732_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::new_ptr<", 14));
	_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_78732_m.get()._field_kind));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(", 2));
	if ((_78732_m.get()._field_init != nullptr)) {
		_2281e3163_expr(_self_, _78732_m.get()._field_init);
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281de615_out_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244922623_BuiltinOutCallExprModel> _79732_m) {
	if ((_79732_m.get()._field_debug && _240e658e5_PRODUCTION)) {
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::out(", 10));
	_2281e3163_expr(_self_, _79732_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281de88a_outln_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244922810_BuiltinOutlnCallExprModel> _80634_m) {
	if ((_80634_m.get()._field_debug && _240e658e5_PRODUCTION)) {
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::outln(", 12));
	_2281e3163_expr(_self_, _80634_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281deb10_panic_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244922dc6_BuiltinPanicCallExprModel> _81534_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::panic(", 12));
	_2281e3163_expr(_self_, _81534_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(" + jule::Str(\"\\nlocation: ", 26));
	_228243328_loc_info(_self_.get()._field_oc, _81534_m.get()._field_token);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"));", 4));
}



inline void _2281ded85_assert_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449230b3_BuiltinAssertCallExprModel> _82335_m) {
	if (_240e658e5_PRODUCTION) {
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (!(", 6));
	_2281e3163_expr(_self_, _82335_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")) jule::panic(jule::Str(", 25));
	_22823ee5c_write(_self_.get()._field_oc, _2281e4362_cstr_lit(static_cast<jule::Slice<jule::U8>>(_82335_m.get()._field_log)));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(") + jule::Str(\"\\nlocation: ", 27));
	_228243328_loc_info(_self_.get()._field_oc, _82335_m.get()._field_token);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"));", 4));
}



inline void _2281e010a_error_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244923866_BuiltinErrorCallExprModel> _83634_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("return ", 7));
	if (_244927271_is_void(_83634_m.get()._field_func.get()._field_decl.ptr())) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::VoidExceptional(", 22));
	} else {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::Exceptional<", 18));
		_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_83634_m.get()._field_func.get()._field_result));
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(", 2));
	};
	_2281e3163_expr(_self_, _83634_m.get()._field_err);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e0380_copy_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244923679_BuiltinCopyCallExprModel> _84933_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::copy((", 12));
	_2281e2ddd_model(_self_, _84933_m.get()._field_dest.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	if ((_2455e3139_prim(_84933_m.get()._field_dest.get()._field_kind.ptr()) != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(".fake_slice()", 13));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(", (", 3));
	_2281e2ddd_model(_self_, _84933_m.get()._field_src.get()._field_model);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
	if ((_2455e3139_prim(_84933_m.get()._field_src.get()._field_kind.ptr()) != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(".fake_slice()", 13));
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e0605_make_call_slice(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>& _86540_m) {
	jule::Ptr<_2455e9be0_Slc> _86617_slice = _2455e40b3_slc(_86540_m.get()._field_kind.ptr());;
	_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_86540_m.get()._field_kind));
	if ((_2455e3876_enm(_86617_slice.get()._field_elem.ptr()) != nullptr)) {
		if ((_86540_m.get()._field_cap != nullptr)) {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("::alloc(", 8));
		} else {
			_22823ee5c_write(_self_.get()._field_oc, jule::Str("::alloc_def(", 12));
		};
	} else {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("::alloc(", 8));
	};
	_2281e3163_expr(_self_, _86540_m.get()._field_len);
	if ((_86540_m.get()._field_cap != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
		_2281e3163_expr(_self_, _86540_m.get()._field_cap);
	};
	if ((_2455e3876_enm(_86617_slice.get()._field_elem.ptr()) != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
		_2281e365d_init_expr(_self_, _86617_slice.get()._field_elem);
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e087a_make_call_str(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>& _89138_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::Str", 9));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("::alloc(", 8));
	_2281e3163_expr(_self_, _89138_m.get()._field_len);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e0b00_make_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449232a0_BuiltinMakeCallExprModel> _89833_m) {
	if ((_2455e40b3_slc(_89833_m.get()._field_kind.ptr()) != nullptr)) {
		_2281e0605_make_call_slice(_self_, _89833_m);
		return;;
	};
	_2281e087a_make_call_str(_self_, _89833_m);
}



inline void _2281e0d75_push_to_slice(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2456a785d_PushToSliceExprModel> _90637_m) {
	jule::I32 _90713_n = _self_.get()._field_oc.get()._field_obj.len();;
	_2281e2ddd_model(_self_, _90637_m.get()._field_dest);
	jule::Str _90913_dest = _self_.get()._field_oc.get()._field_obj.slice(_90713_n);;
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(" = jule::alloc_for_append(", 26));
	_22823ee5c_write(_self_.get()._field_oc, _90913_dest);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
	_22823ee5c_write(_self_.get()._field_oc, _24547d975_itoa(static_cast<jule::I32>(_90637_m.get()._field_elems.get()._field_elems.len())));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(");", 2));
	{
		auto &expr = _90637_m.get()._field_elems.get()._field_elems;
		auto it = expr.begin();
		_iter_begin_22a8c8b10:;
		if (it != expr.end()) {
			jule::Any _91621_e = *it;
			{
				_22823ee5c_write(_self_.get()._field_oc, _90913_dest);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(".__push(", 8));
				_2281e2ddd_model(_self_, _91621_e);
				_22823ee5c_write(_self_.get()._field_oc, jule::Str(");", 2));
			}
			_iter_next_22a8c8b10:;
			++it;
			goto _iter_begin_22a8c8b10;
		}
		_iter_end_22a8c8b10:;
	};
}



inline void _2281e10ea_append_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492348c_BuiltinAppendCallExprModel> _92535_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::append(", 13));
	_2281e2ddd_model(_self_, _92535_m.get()._field_dest);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
	_2281e2ddd_model(_self_, _92535_m.get()._field_elements);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e1370_clone_call(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449229ec_BuiltinCloneCallExprModel> _93334_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::clone(", 12));
	_2281e2ddd_model(_self_, _93334_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e15e5_sizeof(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244921765_SizeofExprModel> _93930_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("sizeof(", 7));
	_2281e2ddd_model(_self_, _93930_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e186a_alignof(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244923ec6_AlignofExprModel> _94531_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("alignof(", 8));
	_2281e2ddd_model(_self_, _94531_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline jule::Str _2281e1b78_rune_lit(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449241b3_RuneExprModel> _95128_m) {
	if ((_95128_m.get()._field_code <= 127LL)) {
		jule::Str _95321_b = _2281e3c9b_sbtoa(static_cast<jule::U8>(static_cast<jule::U8>(_95128_m.get()._field_code)));;
		if ((_95321_b == jule::Str("'", 1))) {
			_95321_b=jule::Str("\\'", 2);
		};
		return ((jule::Str("'", 1) + _95321_b) + jule::Str("'", 1));
	};
	return _2281e4917_itoa(static_cast<jule::I64>(static_cast<jule::I64>(_95128_m.get()._field_code)));
}



inline void _2281e1ded_structure_static(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244921b83_StructStaticIdentExprModel> _96240_m) {
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea3ce_func_ins(_96240_m.get()._field_method));
}



inline void _2281e2173_integrated_to_str(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2449243a0_IntegratedToStrExprModel> _96641_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::to_str(", 13));
	_2281e2ddd_model(_self_, _96641_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(")", 1));
}



inline void _2281e23e8_backend_emit(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_24492458c_BackendEmitExprModel> _97236_m) {
	if ((_97236_m.get()._field_exprs.len() == 0LL)) {
		_22823ee5c_write(_self_.get()._field_oc, _97236_m.get()._field_code);
		return;;
	};
	jule::I32 _97713_n = _self_.get()._field_oc.get()._field_obj.len();;
	jule::Slice<jule::Any> _97817_args = jule::Slice<jule::Any>::alloc(_97236_m.get()._field_exprs.len());;
	{
		auto &expr = _97236_m.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_22a8d659b:;
		if (it != expr.end()) {
			jule::I32 _97914_i = it - expr.begin();
			jule::Any _97921_expr = *it;
			{
				_2281e3163_expr(_self_, _97921_expr);
				_97817_args[_97914_i]=jule::Any(_self_.get()._field_oc.get()._field_obj.slice(_97713_n));
				_self_.get()._field_oc.get()._field_obj=_self_.get()._field_oc.get()._field_obj.slice(0LL,_97713_n);
			}
			_iter_next_22a8d659b:;
			++it;
			_97914_i++;
			goto _iter_begin_22a8d659b;
		}
		_iter_end_22a8d659b:;
	};
	_22823ee5c_write(_self_.get()._field_oc, _245697be4_format(_97236_m.get()._field_code,jule::Any(_97817_args)));
}



inline void _2281e266d_free(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_244924779_FreeExprModel> _98728_m) {
	_2281e3163_expr(_self_, _98728_m.get()._field_expr);
	if (_240e651b9_RC) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(".dealloc()", 10));
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(".__free()", 9));
}



inline void _2281e28e3_mut_slicing(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2456a7e24_MutSlicingExprModel> _99635_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_2281e2ddd_model(_self_, _99635_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(").mut_slice(", 12));
	if ((!(_240e658e5_PRODUCTION))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\"", 1));
		_228243328_loc_info(_self_.get()._field_oc, _99635_m.get()._field_token);
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("\",", 2));
	};
	_2281e3163_expr(_self_, _99635_m.get()._field_left);
	if ((_99635_m.get()._field_right != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str(",", 1));
		_2281e3163_expr(_self_, _99635_m.get()._field_right);
	};
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(");", 2));
}



inline void _2281e2b68_str_insert_begin(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2456a82ba_StrInsertBeginExprModel> _101340_m) {
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(", 1));
	_2281e2ddd_model(_self_, _101340_m.get()._field_dest);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(").buffer.insert(0, (", 20));
	_2281e2ddd_model(_self_, _101340_m.get()._field_expr);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("));", 3));
}



inline void _2281e2ddd_model(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Any _102129_m) {
	{
		auto &_match_expr{ _102129_m };
		
		if (_match_expr.type_is<jule::Ptr<_2455e1027_TypeKind>>()) {
			_case_begin_22a8e063d:;
			{
				_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_102129_m.operator jule::Ptr<_2455e1027_TypeKind>()));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
			_case_begin_22a8e0918:;
			{
				_2281d9214_constant(_self_, _102129_m.operator jule::Ptr<_2448ab524_Const>(),false);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_22a8e097e:;
			{
				_2281d9d4c_var(_self_, _102129_m.operator jule::Ptr<_24556cc1d_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244874c5c_StructIns>>()) {
			_case_begin_22a8e09e5:;
			{
				_2281da0c2_structure_ins(_self_, _102129_m.operator jule::Ptr<_244874c5c_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449299b0_FnIns>>()) {
			_case_begin_22a8e0a5b:;
			{
				_2281ddb20_func_ins_common(_self_, _102129_m.operator jule::Ptr<_2449299b0_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2456a7176_UnsafeBinopExprModel>>()) {
			_case_begin_22a8e1573:;
			{
				_2281d9852_unsafe_binary(_self_, _102129_m.operator jule::Ptr<_2456a7176_UnsafeBinopExprModel>().get()._field_node);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24491ea82_BinopExprModel>>()) {
			_case_begin_22a8e15d9:;
			{
				_2281d9ac7_binary(_self_, _102129_m.operator jule::Ptr<_24491ea82_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24491ec6e_UnaryExprModel>>()) {
			_case_begin_22a8e1650:;
			{
				_2281da347_unary(_self_, _102129_m.operator jule::Ptr<_24491ec6e_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920148_StructLitExprModel>>()) {
			_case_begin_22a8e16b6:;
			{
				_2281da5bc_structure_lit(_self_, _102129_m.operator jule::Ptr<_244920148_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920335_AllocStructLitExprModel>>()) {
			_case_begin_22a8e172c:;
			{
				_2281da842_alloc_structure(_self_, _102129_m.operator jule::Ptr<_244920335_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920522_CastingExprModel>>()) {
			_case_begin_22a8e1793:;
			{
				_2281daab7_casting(_self_, _102129_m.operator jule::Ptr<_244920522_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
			_case_begin_22a8e1809:;
			{
				_2281dbb40_func_call(_self_, _102129_m.operator jule::Ptr<_24492070e_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449208eb_SliceExprModel>>()) {
			_case_begin_22a8e1870:;
			{
				_2281dbdb5_slice(_self_, _102129_m.operator jule::Ptr<_2449208eb_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921d70_ArrayExprModel>>()) {
			_case_begin_22a8e18d6:;
			{
				_2281dd89a_array(_self_, _102129_m.operator jule::Ptr<_244921d70_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2456a7495_UnsafeIndexingExprModel>>()) {
			_case_begin_22a8e194c:;
			{
				_2281dc3b0_unsafe_indexing(_self_, _102129_m.operator jule::Ptr<_2456a7495_UnsafeIndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920ad8_IndexingExprModel>>()) {
			_case_begin_22a8e19b3:;
			{
				_2281dc13a_indexing(_self_, _102129_m.operator jule::Ptr<_244920ad8_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244920cc5_AnonFnExprModel>>()) {
			_case_begin_22a8e1a29:;
			{
				_2281dc635_anon_func(_self_, _102129_m.operator jule::Ptr<_244920cc5_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492119e_MapExprModel>>()) {
			_case_begin_22a8e1a90:;
			{
				_2281dc8aa_map(_self_, _102129_m.operator jule::Ptr<_24492119e_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492138b_SlicingExprModel>>()) {
			_case_begin_22a8e1b06:;
			{
				_2281dcb30_slicing(_self_, _102129_m.operator jule::Ptr<_24492138b_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921578_TraitSubIdentExprModel>>()) {
			_case_begin_22a8e1b6c:;
			{
				_2281dcda5_trait_sub(_self_, _102129_m.operator jule::Ptr<_244921578_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
			_case_begin_22a8e1be4:;
			{
				_2281dd12a_structure_sub(_self_, _102129_m.operator jule::Ptr<_244921996_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492205c_CommonIdentExprModel>>()) {
			_case_begin_22a8e1c6b:;
			{
				_2281dd3a0_common_ident(_self_, _102129_m.operator jule::Ptr<_24492205c_CommonIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922249_CommonSubIdentExprModel>>()) {
			_case_begin_22a8e1ce3:;
			{
				_2281dd625_common_sub(_self_, _102129_m.operator jule::Ptr<_244922249_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922436_TupleExprModel>>()) {
			_case_begin_22a8e1d6a:;
			{
				_2281de11a_tuple(_self_, _102129_m.operator jule::Ptr<_244922436_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922623_BuiltinOutCallExprModel>>()) {
			_case_begin_22a8e1de2:;
			{
				_2281de615_out_call(_self_, _102129_m.operator jule::Ptr<_244922623_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922810_BuiltinOutlnCallExprModel>>()) {
			_case_begin_22a8e1e69:;
			{
				_2281de88a_outln_call(_self_, _102129_m.operator jule::Ptr<_244922810_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922bd9_BuiltinNewCallExprModel>>()) {
			_case_begin_22a8e1ee1:;
			{
				_2281de390_new_call(_self_, _102129_m.operator jule::Ptr<_244922bd9_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>>()) {
			_case_begin_22a8e2068:;
			{
				_2281deb10_panic_call(_self_, _102129_m.operator jule::Ptr<_244922dc6_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>>()) {
			_case_begin_22a8e20e0:;
			{
				_2281ded85_assert_call(_self_, _102129_m.operator jule::Ptr<_2449230b3_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>()) {
			_case_begin_22a8e2167:;
			{
				_2281e010a_error_call(_self_, _102129_m.operator jule::Ptr<_244923866_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>>()) {
			_case_begin_22a8e21de:;
			{
				_2281e0b00_make_call(_self_, _102129_m.operator jule::Ptr<_2449232a0_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492348c_BuiltinAppendCallExprModel>>()) {
			_case_begin_22a8e2266:;
			{
				_2281e10ea_append_call(_self_, _102129_m.operator jule::Ptr<_24492348c_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>>()) {
			_case_begin_22a8e22dd:;
			{
				_2281e1370_clone_call(_self_, _102129_m.operator jule::Ptr<_2449229ec_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244923679_BuiltinCopyCallExprModel>>()) {
			_case_begin_22a8e2365:;
			{
				_2281e0380_copy_call(_self_, _102129_m.operator jule::Ptr<_244923679_BuiltinCopyCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921765_SizeofExprModel>>()) {
			_case_begin_22a8e23dc:;
			{
				_2281e15e5_sizeof(_self_, _102129_m.operator jule::Ptr<_244921765_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244923ec6_AlignofExprModel>>()) {
			_case_begin_22a8e2464:;
			{
				_2281e186a_alignof(_self_, _102129_m.operator jule::Ptr<_244923ec6_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449241b3_RuneExprModel>>()) {
			_case_begin_22a8e24db:;
			{
				_22823ee5c_write(_self_.get()._field_oc, _2281e1b78_rune_lit(_self_, _102129_m.operator jule::Ptr<_2449241b3_RuneExprModel>()));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921b83_StructStaticIdentExprModel>>()) {
			_case_begin_22a8e2563:;
			{
				_2281e1ded_structure_static(_self_, _102129_m.operator jule::Ptr<_244921b83_StructStaticIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2449243a0_IntegratedToStrExprModel>>()) {
			_case_begin_22a8e25da:;
			{
				_2281e2173_integrated_to_str(_self_, _102129_m.operator jule::Ptr<_2449243a0_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24492458c_BackendEmitExprModel>>()) {
			_case_begin_22a8e2662:;
			{
				_2281e23e8_backend_emit(_self_, _102129_m.operator jule::Ptr<_24492458c_BackendEmitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244924779_FreeExprModel>>()) {
			_case_begin_22a8e26d9:;
			{
				_2281e266d_free(_self_, _102129_m.operator jule::Ptr<_244924779_FreeExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2456a7e24_MutSlicingExprModel>>()) {
			_case_begin_22a8e2761:;
			{
				_2281e28e3_mut_slicing(_self_, _102129_m.operator jule::Ptr<_2456a7e24_MutSlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2456a82ba_StrInsertBeginExprModel>>()) {
			_case_begin_22a8e27d8:;
			{
				_2281e2b68_str_insert_begin(_self_, _102129_m.operator jule::Ptr<_2456a82ba_StrInsertBeginExprModel>());
			}
		}
		else {
			_case_begin_22a8e07b4:;
			{
				_22823ee5c_write(_self_.get()._field_oc, jule::Str("<unimplemented_expression_model>", 32));
			}
		}
		_match_end_22a8e06d7:;
	};
}



inline void _2281e3163_expr(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Any _111428_e) {
	_2281e2ddd_model(_self_, _111428_e);
}



inline void _2281e33d8_val(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2455b60c9_Value> _111827_v) {
	if (_2455b5914_is_const(_111827_v.get()._field_data.ptr())) {
		_2281d9214_constant(_self_, _111827_v.get()._field_data.get()._field_constant,((_111827_v.get()._field_data.get()._field_kind != nullptr) && _2455e7ca9_is_f32(_2455e3139_prim(_111827_v.get()._field_data.get()._field_kind.ptr()).ptr())));
		return;;
	};
	_2281e3163_expr(_self_, _111827_v.get()._field_data.get()._field_model);
}



inline void _2281e365d_init_expr(jule::Ptr<_2281d7a1a_ExprCoder> _self_, jule::Ptr<_2455e1027_TypeKind> _112633_t) {
	if ((_2455e3612_ptr(_112633_t.ptr()) != nullptr)) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("nullptr", 7));
		return;;
	};
	jule::Ptr<_245481e0c_Enum> _113117_enm = _2455e3876_enm(_112633_t.ptr());;
	if ((_113117_enm != nullptr)) {
		_2281e33d8_val(_self_, _113117_enm.get()._field_items[0LL].get()._field_value);
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, static__228267528_kind(_112633_t));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("()", 2));
}







std::ostream &operator<<(std::ostream &_Stream, _2281d7a1a_ExprCoder _Src) {
	_Stream << "ExprCoder{";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Str static__2281e5bc1_clone_func_decl(jule::Ptr<_244848912_Struct>& _1032_s) {
	jule::Str _1117_obj = static__228265b75_structure(_1032_s);;
	_1117_obj+=jule::Str(" clone(void) const ", 19);
	return _1117_obj;
}



inline jule::Str static__2281e5e68_clone_func_def(jule::Ptr<_244848912_Struct>& _1631_s) {
	jule::Str _1717_obj = static__228265b75_structure(_1631_s);;
	_1717_obj+=(jule::Str(" ", 1) + _1717_obj);
	_1717_obj+=jule::Str("::clone(void) const ", 20);
	return _1717_obj;
}







std::ostream &operator<<(std::ostream &_Stream, _2281e5918_DeriveCoder _Src) {
	_Stream << "DeriveCoder{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2281e6d48_TestCoder> static__2281e72bb_new(jule::Ptr<_22825bb05_ObjectCoder>& _2828_oc) {
	return jule::new_ptr<_2281e6d48_TestCoder>(_2281e6d48_TestCoder{._field_oc=_2828_oc});
}



inline jule::Ptr<_245547db3_ImportInfo> _2281e7530_find_testing_package(jule::Ptr<_2281e6d48_TestCoder> _self_) {
	{
		auto &expr = _self_.get()._field_oc.get()._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_22a90ea47:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _3521_imp = *it;
			{
				if ((_3521_imp.get()._field_link_path == jule::Str("std::testing", 12))) {
					return _3521_imp;
				};
			}
			_iter_next_22a90ea47:;
			++it;
			goto _iter_begin_22a90ea47;
		}
		_iter_end_22a90ea47:;
	};
	return nullptr;
}



inline void _2281e77a5_append_test(jule::Ptr<_2281e6d48_TestCoder> _self_, jule::Ptr<_2449299b0_FnIns> _4335_f) {
	_228241e3c_indent(_self_.get()._field_oc);
	_2281e7e6a_call_tm_reset(_self_);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(";\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("std::cout << \">>> TEST RUNNING: \";\n", 35));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::outln(", 12));
	_22823ee5c_write(_self_.get()._field_oc, _2281e4362_cstr_lit(static_cast<jule::Slice<jule::U8>>(_4335_f.get()._field_decl.get()._field_ident)));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(");\n", 3));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea3ce_func_ins(_4335_f));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(_t);\n", 6));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("post_test();\n", 13));
}



inline void _2281e7a2a_append_package_tests(jule::Ptr<_2281e6d48_TestCoder> _self_, jule::Ptr<_24554ad1c_Package>& _6045_p) {
	{
		auto &expr = _6045_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a9157d9:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _6121_file = *it;
			{
				{
					auto &expr = _6121_file.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_22a91617a:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _6225_f = *it;
						{
							if (_22826a21d_has_directive(_6225_f.get()._field_directives,jule::Str("test", 4))) {
								_2281e77a5_append_test(_self_, _6225_f.get()._field_instances[0LL]);
							};
						}
						_iter_next_22a91617a:;
						++it;
						goto _iter_begin_22a91617a;
					}
					_iter_end_22a91617a:;
				};
			}
			_iter_next_22a9157d9:;
			++it;
			goto _iter_begin_22a9157d9;
		}
		_iter_end_22a9157d9:;
	};
}



inline jule::Bool _2281e7c8e_ready_testing_package(jule::Ptr<_2281e6d48_TestCoder> _self_) {
	jule::Ptr<_245547db3_ImportInfo> _7117_p = _2281e7530_find_testing_package(_self_);;
	if ((_7117_p == nullptr)) {
		return false;
	};
	_self_.get()._field_t=_245549304_find_struct(_7117_p.ptr(), jule::Str("T", 1),false).get()._field_instances[0LL];
	_self_.get()._field_tm_reset=_24484edd0_find_method(_self_.get()._field_t.ptr(), jule::Str("reset", 5),false);
	_self_.get()._field_tm_failed=_24484edd0_find_method(_self_.get()._field_t.ptr(), jule::Str("failed", 6),false);
	_self_.get()._field_tm_skipped=_24484edd0_find_method(_self_.get()._field_t.ptr(), jule::Str("skipped", 7),false);
	return true;
}



inline void _2281e7e6a_call_tm_reset(jule::Ptr<_2281e6d48_TestCoder> _self_) {
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea137_func(_self_.get()._field_tm_reset));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(_t)", 4));
}



inline void _2281e8146_call_tm_failed(jule::Ptr<_2281e6d48_TestCoder> _self_) {
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea137_func(_self_.get()._field_tm_failed));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(_t)", 4));
}



inline void _2281e8322_call_tm_skipped(jule::Ptr<_2281e6d48_TestCoder> _self_) {
	_22823ee5c_write(_self_.get()._field_oc, static__2281ea137_func(_self_.get()._field_tm_skipped));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("(_t)", 4));
}



inline void _2281e84ed_serialize(jule::Ptr<_2281e6d48_TestCoder> _self_) {
	_228260e28_serialize_head(_self_.get()._field_oc);
	__JULE_DEFER({
		_228260c4c_end(_self_.get()._field_oc);
	});;
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\nvoid test_point(void) {\n", 25));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	if ((!(_2281e7c8e_ready_testing_package(_self_)))) {
		_22823ee5c_write(_self_.get()._field_oc, jule::Str("}", 1));
		_2282416de_done_indent(_self_.get()._field_oc);
		return;;
	};
	_22823ee5c_write(_self_.get()._field_oc, static__228263c83_as_sptr(static__228265e1c_structure_ins(_self_.get()._field_t)));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(" _t = jule::new_ptr<", 20));
	_22823ee5c_write(_self_.get()._field_oc, static__228265e1c_structure_ins(_self_.get()._field_t));
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(">(); _t.ref = nullptr;\n", 23));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("jule::Uint total = 0, failed = 0, skipped = 0;\n", 47));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("auto post_test = [&](void) {\n", 29));
	_2282406ee_add_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("++total;\n", 9));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (", 4));
	_2281e8146_call_tm_failed(_self_);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(") { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n", 60));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("else if (", 9));
	_2281e8322_call_tm_skipped(_self_);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str(") { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n", 62));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("else { std::cout << \"    [*] PASSED\" << std::endl; }\n", 53));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("};\n", 3));
	_2281e7a2a_append_package_tests(_self_, _self_.get()._field_oc.get()._field_ir.get()._field_main);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("\n\n", 2));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("std::cout << std::endl << \"total tests: \" << total << \" skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n", 154));
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("if (failed != 0) std::exit(1);\n", 31));
	_2282416de_done_indent(_self_.get()._field_oc);
	_228241e3c_indent(_self_.get()._field_oc);
	_22823ee5c_write(_self_.get()._field_oc, jule::Str("}\n", 2));
}







std::ostream &operator<<(std::ostream &_Stream, _2281e6d48_TestCoder _Src) {
	_Stream << "TestCoder{";
	_Stream << "t:" << _Src._field_t << ", ";
	_Stream << "tm_reset:" << _Src._field_tm_reset << ", ";
	_Stream << "tm_failed:" << _Src._field_tm_failed << ", ";
	_Stream << "tm_skipped:" << _Src._field_tm_skipped << ", ";
	_Stream << "oc:" << _Src._field_oc;
	_Stream << "}";
	return _Stream;
}



inline jule::Str static__2281e99a5_to_out(jule::Str& _3323_ident, jule::Uintptr _3335_addr) {
	if ((_3335_addr != 0LLU)) {
		jule::Str _3521_obj = jule::Str::alloc(40LL);;
		_3521_obj+=jule::Str("_", 1);
		_3521_obj+=_24547d348_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_3335_addr)),15LL);
		_3521_obj+=jule::Str("_", 1);
		_3521_obj+=_3323_ident;
		return _3521_obj;
	};
	jule::Str _4217_obj = jule::Str::alloc((_3323_ident.len() + 1LL));;
	_4217_obj+=jule::Str("_", 1);
	_4217_obj+=_3323_ident;
	return _4217_obj;
}



inline jule::Str static__2281e9d90_to_local(jule::I32 _5424_row, jule::I32 _5434_col, jule::Str& _5445_ident) {
	jule::Str _5517_obj = jule::Str::alloc(40LL);;
	_5517_obj+=jule::Str("_", 1);
	_5517_obj+=_24547d975_itoa(_5424_row);
	_5517_obj+=_24547d975_itoa(_5434_col);
	_5517_obj+=jule::Str("_", 1);
	_5517_obj+=_5445_ident;
	return _5517_obj;
}



inline jule::Str static__2281ea137_func(jule::Ptr<_244926d0e_Fn>& _6521_f) {
	{
		
		if (_6521_f.get()._field_cpp_linked) {
			_case_begin_22a92d956:;
			{
				return _6521_f.get()._field_ident;
			}
		}
		else if ((_6521_f.get()._field_ident == jule::Str("main", 4))) {
			_case_begin_22a92d9bc:;
			{
				return jule::Str("entry_point", 11);
			}
		}
		else if (_2449274d5_is_method(_6521_f.ptr())) {
			_case_begin_22a92cd2e:;
			{
				jule::Str _7221_obj = static__2281e99a5_to_out(_6521_f.get()._field_ident,static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_6521_f)));;
				if (_6521_f.get()._field_statically) {
					(_7221_obj).buffer.insert(0, (jule::Str("static_", 7)));;
					return _7221_obj;
				};
				return _7221_obj;
			}
		}
		else {
			_case_begin_22a92cc63:;
			{
				return static__2281e99a5_to_out(_6521_f.get()._field_ident,static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_6521_f)));
			}
		}
		_match_end_22a92cb86:;
	};
}



inline jule::Str static__2281ea3ce_func_ins(jule::Ptr<_2449299b0_FnIns>& _8425_f) {
	if (_24492ad46_is_builtin(_8425_f.ptr())) {
		return (jule::Str("jule::", 6) + _8425_f.get()._field_decl.get()._field_ident);
	};
	if ((_8425_f.get()._field_decl.get()._field_cpp_linked || (_8425_f.get()._field_generics.len() == 0LL))) {
		return static__2281ea137_func(_8425_f.get()._field_decl);
	};
	return static__2281e99a5_to_out(_8425_f.get()._field_decl.get()._field_ident,static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_8425_f)));
}



inline jule::Str static__2281ea676_trait_decl(jule::Ptr<_24547ec51_Trait> _9526_t) {
	if (_24548078a_is_builtin(_9526_t.ptr())) {
		return (jule::Str("jule::", 6) + _9526_t.get()._field_ident);
	};
	return static__2281e99a5_to_out(_9526_t.get()._field_ident,static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_9526_t)));
}



inline jule::Str static__2281ea91d_param(jule::Ptr<_2449254c2_Param>& _10322_p) {
	if ((_2431e705e_is_anon_ident(_10322_p.get()._field_ident) || _2431e6cb7_is_ignore_ident(_10322_p.get()._field_ident))) {
		return jule::Str();
	};
	if (_244925aee_is_self(_10322_p.ptr())) {
		return jule::Str("_self_", 6);
	};
	if ((_10322_p.get()._field_token == nullptr)) {
		return static__2281e9d90_to_local(0LL,0LL,_10322_p.get()._field_ident);
	};
	return static__2281e9d90_to_local(_10322_p.get()._field_token.get()._field_row,_10322_p.get()._field_token.get()._field_column,_10322_p.get()._field_ident);
}



inline jule::Str static__2281eabb5_structure(jule::Ptr<_244848912_Struct>& _11726_s) {
	if (_11726_s.get()._field_cpp_linked) {
		if (_22826a21d_has_directive(_11726_s.get()._field_directives,jule::Str("typedef", 7))) {
			return _11726_s.get()._field_ident;
		};
		return (jule::Str("struct ", 7) + _11726_s.get()._field_ident);
	};
	return static__2281e99a5_to_out(_11726_s.get()._field_ident,static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11726_s)));
}



inline jule::Str static__2281eae5c_structure_ins(jule::Ptr<_244874c5c_StructIns>& _12830_s) {
	if ((_12830_s.get()._field_decl.get()._field_cpp_linked || (_12830_s.get()._field_generics.len() == 0LL))) {
		return static__2281eabb5_structure(_12830_s.get()._field_decl);
	};
	return static__2281e99a5_to_out(_12830_s.get()._field_decl.get()._field_ident,static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_12830_s)));
}



inline jule::Str static__2281eb204_field(jule::Ptr<_24483adcc_Field>& _13622_f) {
	if (_13622_f.get()._field_owner.get()._field_cpp_linked) {
		return _13622_f.get()._field_ident;
	};
	return (jule::Str("_field_", 7) + _13622_f.get()._field_ident);
}



inline jule::Str static__2281eb49b_var(jule::Ptr<_24556cc1d_Var> _14423_v) {
	{
		
		if (_14423_v.get()._field_cpp_linked) {
			_case_begin_22a938c3b:;
			{
				return _14423_v.get()._field_ident;
			}
		}
		else if ((_14423_v.get()._field_ident == jule::Str("error", 5))) {
			_case_begin_22a938ca2:;
			{
				return jule::Str("except.error", 12);
			}
		}
		else if ((_14423_v.get()._field_ident == jule::Str("self", 4))) {
			_case_begin_22a9380c0:;
			{
				if ((_2455e339d_sptr(_14423_v.get()._field_kind.get()._field_kind.ptr()) == nullptr)) {
					return jule::Str("(*_self_)", 9);
				};
				return jule::Str("_self_", 6);
			}
		}
		else if ((_14423_v.get()._field_scope != nullptr)) {
			_case_begin_22a938136:;
			{
				return static__2281e9d90_to_local(_14423_v.get()._field_token.get()._field_row,_14423_v.get()._field_token.get()._field_column,_14423_v.get()._field_ident);
			}
		}
		else {
			_case_begin_22a938059:;
			{
				return static__2281e99a5_to_out(_14423_v.get()._field_ident,static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_14423_v)));
			}
		}
		_match_end_22a937e9e:;
	};
}



inline jule::Str static__2281eb743_iter_begin(jule::Uintptr _16326_it) {
	jule::Str _16417_obj = jule::Str::alloc(30LL);;
	_16417_obj+=jule::Str("_iter_begin_", 12);
	_16417_obj+=_24547d348_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_16326_it)),15LL);
	return _16417_obj;
}



inline jule::Str static__2281eb9da_iter_end(jule::Uintptr _17124_it) {
	jule::Str _17217_obj = jule::Str::alloc(30LL);;
	_17217_obj+=jule::Str("_iter_end_", 10);
	_17217_obj+=_24547d348_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_17124_it)),15LL);
	return _17217_obj;
}



inline jule::Str static__2281ebc82_iter_next(jule::Uintptr _17925_it) {
	jule::Str _18017_obj = jule::Str::alloc(30LL);;
	_18017_obj+=jule::Str("_iter_next_", 11);
	_18017_obj+=_24547d348_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_17925_it)),15LL);
	return _18017_obj;
}



inline jule::Str static__2281ec029_label(jule::Str& _18722_ident) {
	jule::Str _18817_obj = jule::Str::alloc(30LL);;
	_18817_obj+=jule::Str("_julec_label_", 13);
	_18817_obj+=_18722_ident;
	return _18817_obj;
}



inline jule::Str static__2281ec2c1_match_end(jule::Uintptr _19525_m) {
	jule::Str _19617_obj = jule::Str::alloc(30LL);;
	_19617_obj+=jule::Str("_match_end_", 11);
	_19617_obj+=_24547d348_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_19525_m)),15LL);
	return _19617_obj;
}



inline jule::Str static__2281ec568_case_begin(jule::Uintptr _20326_c) {
	jule::Str _20417_obj = jule::Str::alloc(30LL);;
	_20417_obj+=jule::Str("_case_begin_", 12);
	_20417_obj+=_24547d348_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_20326_c)),15LL);
	return _20417_obj;
}







std::ostream &operator<<(std::ostream &_Stream, _2281e9499_IdentCoder _Src) {
	_Stream << "IdentCoder{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _22825b72b_SerializationInfo _Src) {
	_Stream << "SerializationInfo{";
	_Stream << "compiler:" << _Src._field_compiler << ", ";
	_Stream << "compiler_command:" << _Src._field_compiler_command;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, _22825b918_TraitHash _Src) {
	_Stream << "TraitHash{";
	_Stream << "t:" << _Src._field_t << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _228262941_to_str(_228262677_CustomType* _self_) {
	return (*_self_)._field_kind;
}



inline jule::Bool _228262c4e_equals(jule::Ptr<_228262677_CustomType> _self_, jule::Ptr<_2455e1027_TypeKind> _3926_k) {
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, _228262677_CustomType _Src) {
	_Stream << _228262941_to_str(&_Src);
	return _Stream;
}



inline jule::Str static__22826349c_to_type(jule::Str _6027_id) {
	if ((_6027_id != jule::Str("uintptr", 7))) {
		_6027_id=_24551b958_real_kind_of(_6027_id);
	};
	if (((97LL <= _6027_id[0LL]) && (_6027_id[0LL] <= 122LLU))) {
		_6027_id[0LL]-=32LLU;
	};
	return (jule::Str("jule::", 6) + _6027_id);
}



inline jule::Str static__228263744_prim(jule::Ptr<_2455e59ee_Prim> _7120_p) {
	return static__22826349c_to_type(_2455e5d62_to_str(_7120_p.ptr()));
}



inline jule::Str static__2282639db_tuple(jule::Ptr<_2455ea76d_Tuple> _7625_t) {
	jule::Str _7717_obj = jule::Str("std::tuple<", 11);;
	{
		auto &expr = _7625_t.get()._field_types;
		auto it = expr.begin();
		_iter_begin_22aa1a67a:;
		if (it != expr.end()) {
			jule::Ptr<_2455e1027_TypeKind> _7821_tk = *it;
			{
				_7717_obj+=static__228267528_kind(_7821_tk);
				_7717_obj+=jule::Str(",", 1);
			}
			_iter_next_22aa1a67a:;
			++it;
			goto _iter_begin_22aa1a67a;
		}
		_iter_end_22aa1a67a:;
	};
	(_7717_obj).mut_slice(0LL,(_7717_obj.len() - 1LL));;
	_7717_obj+=jule::Str(">", 1);
	return _7717_obj;
}



inline jule::Str static__228263c83_as_sptr(jule::Str _8823_elem) {
	jule::Str _8917_obj = jule::Str("jule::Ptr<", 10);;
	_8917_obj+=_8823_elem;
	_8917_obj+=jule::Str(">", 1);
	return _8917_obj;
}



inline jule::Str static__22826402a_as_ptr(jule::Str _9622_elem) {
	return (_9622_elem + jule::Str("*", 1));
}



inline jule::Str static__2282642c2_sptr(jule::Ptr<_2455e9283_Sptr> _10124_sptr) {
	return static__228263c83_as_sptr(static__228267528_kind(_10124_sptr.get()._field_elem));
}



inline jule::Str static__228264569_ptr(jule::Ptr<_2455ec7e7_Ptr> _10623_p) {
	;
	if (_2455ed2ba_is_unsafe(_10623_p.ptr())) {
		return jule::Str("void*", 5);
	};
	jule::Str _11117_elem = static__228267528_kind(_10623_p.get()._field_elem);;
	_11117_elem+=jule::Str("*", 1);
	return _11117_elem;
}



inline jule::Str static__228264811_enum_decl(jule::Ptr<_245481e0c_Enum> _11729_e) {
	return static__228267528_kind(_11729_e.get()._field_kind.get()._field_kind);
}



inline jule::Str static__228264aa8_type_enum_decl(jule::Ptr<_245483507_TypeEnum> _12234_e) {
	return jule::Str("jule::Any", 9);
}



inline jule::Str static__228264d50_as_slice(jule::Ptr<_2455e1027_TypeKind> _12628_elem) {
	jule::Str _12717_obj = jule::Str("jule::Slice<", 12);;
	_12717_obj+=static__228267528_kind(_12628_elem);
	_12717_obj+=jule::Str(">", 1);
	return _12717_obj;
}



inline jule::Str static__2282650e7_slice(jule::Ptr<_2455e9be0_Slc> _13425_s) {
	return static__228264d50_as_slice(_13425_s.get()._field_elem);
}



inline jule::Str static__22826538e_map(jule::Ptr<_2455eb296_Map> _13923_m) {
	jule::Str _14017_obj = jule::Str("jule::Map<", 10);;
	_14017_obj+=static__228267528_kind(_13923_m.get()._field_key);
	_14017_obj+=jule::Str(",", 1);
	_14017_obj+=static__228267528_kind(_13923_m.get()._field_val);
	_14017_obj+=jule::Str(">", 1);
	return _14017_obj;
}



inline jule::Str static__228265636_trait_ident(jule::Str _14827_ident) {
	jule::Str _14917_obj = jule::Str("jule::Trait<", 12);;
	_14917_obj+=_14827_ident;
	_14917_obj+=jule::Str(">", 1);
	return _14917_obj;
}



inline jule::Str static__2282658cd_trait_decl(jule::Ptr<_24547ec51_Trait> _15626_t) {
	return static__228265636_trait_ident(static__2281ea676_trait_decl(_15626_t));
}



inline jule::Str static__228265b75_structure(jule::Ptr<_244848912_Struct> _16125_s) {
	jule::Str _16217_rep = jule::Str();;
	if ((_16125_s.get()._field_cpp_linked && (!(_22826a21d_has_directive(_16125_s.get()._field_directives,jule::Str("typedef", 7)))))) {
		_16217_rep+=jule::Str("struct ", 7);
	};
	_16217_rep+=static__2281eabb5_structure(_16125_s);
	return _16217_rep;
}



inline jule::Str static__228265e1c_structure_ins(jule::Ptr<_244874c5c_StructIns> _17133_s) {
	if (_17133_s.get()._field_decl.get()._field_cpp_linked) {
		jule::Str _17321_ident = static__2281eae5c_structure_ins(_17133_s);;
		if ((_17133_s.get()._field_generics.len() > 0LL)) {
			_17321_ident+=jule::Str("<", 1);
			{
				auto &expr = _17133_s.get()._field_generics;
				auto it = expr.begin();
				_iter_begin_22aa259e8:;
				if (it != expr.end()) {
					jule::Ptr<_2455de7ea_InsGeneric> _17629_g = *it;
					{
						_17321_ident+=static__228267528_kind(_17629_g.get()._field_kind);
						_17321_ident+=jule::Str(",", 1);
					}
					_iter_next_22aa259e8:;
					++it;
					goto _iter_begin_22aa259e8;
				}
				_iter_end_22aa259e8:;
			};
			(_17321_ident).mut_slice(0LL,(_17321_ident.len() - 1LL));;
			_17321_ident+=jule::Str(">", 1);
		};
		jule::Ptr<_2448249dc_Directive> _18317_d = _228269d88_find_directive(_17133_s.get()._field_decl.get()._field_directives,jule::Str("namespace", 9));;
		if ((_18317_d != nullptr)) {
			(_17321_ident).buffer.insert(0, ((_228261962_concat_all_parts(_18317_d.get()._field_args) + jule::Str("::", 2))));;
		};
		return _17321_ident;
	};
	return static__2281eae5c_structure_ins(_17133_s);
}



inline jule::Str static__2282661b4_array(jule::Ptr<_2455ebd8a_Arr> _19325_a) {
	jule::Str _19417_obj = jule::Str("jule::Array<", 12);;
	_19417_obj+=static__228267528_kind(_19325_a.get()._field_elem);
	_19417_obj+=jule::Str(",", 1);
	_19417_obj+=_24547d975_itoa(_19325_a.get()._field_n);
	_19417_obj+=jule::Str(">", 1);
	return _19417_obj;
}



inline jule::Str static__228266703_param_ins(jule::Ptr<_244928ae1_ParamIns>& _21930_p) {
	jule::Str _22017_obj = jule::Str();;
	if (_21930_p.get()._field_decl.get()._field_variadic) {
		_22017_obj+=jule::Str("jule::Slice<", 12);
		_22017_obj+=static__228267528_kind(_21930_p.get()._field_kind);
		_22017_obj+=jule::Str(">", 1);
	} else {
		_22017_obj+=static__228267528_kind(_21930_p.get()._field_kind);
	};
	if (_21930_p.get()._field_decl.get()._field_reference) {
		_22017_obj+=jule::Str("&", 1);
	};
	return _22017_obj;
}



inline jule::Str static__228266c42_func_ins_result(jule::Ptr<_2449299b0_FnIns>& _24936_f) {
	if (_244927271_is_void(_24936_f.get()._field_decl.ptr())) {
		if (_24936_f.get()._field_decl.get()._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		};
		return jule::Str("void", 4);
	};
	if (_24936_f.get()._field_decl.get()._field_exceptional) {
		return ((jule::Str("jule::Exceptional<", 18) + static__228267528_kind(_24936_f.get()._field_result)) + jule::Str(">", 1));
	};
	return static__228267528_kind(_24936_f.get()._field_result);
}



inline jule::Str static__228266ed9_anon_func(jule::Ptr<_2449299b0_FnIns> _26229_f) {
	jule::Str _26317_decl = static__228266c42_func_ins_result(_26229_f);;
	_26317_decl+=jule::Str("(", 1);
	if ((_26229_f.get()._field_params.len() > 0LL)) {
		{
			auto &expr = _26229_f.get()._field_params;
			auto it = expr.begin();
			_iter_begin_22aa32351:;
			if (it != expr.end()) {
				jule::Ptr<_244928ae1_ParamIns> _26625_param = *it;
				{
					if (_244925aee_is_self(_26625_param.get()._field_decl.ptr())) {
						goto _iter_next_22aa32351;
					};
					_26317_decl+=static__228266703_param_ins(_26625_param);
					_26317_decl+=jule::Str(",", 1);
				}
				_iter_next_22aa32351:;
				++it;
				goto _iter_begin_22aa32351;
			}
			_iter_end_22aa32351:;
		};
		(_26317_decl).mut_slice(0LL,(_26317_decl.len() - 1LL));;
	} else {
		_26317_decl+=jule::Str("void", 4);
	};
	_26317_decl+=jule::Str(")", 1);
	return _26317_decl;
}



inline jule::Str static__228267281_func(jule::Ptr<_2449299b0_FnIns> _28224_f) {
	jule::Str _28317_obj = jule::Str("jule::Fn<", 9);;
	_28317_obj+=static__228266ed9_anon_func(_28224_f);
	_28317_obj+=jule::Str(">", 1);
	return _28317_obj;
}



inline jule::Str static__228267528_kind(jule::Ptr<_2455e1027_TypeKind> _29024_k) {
	{
		
		if (_2455e1bd7_cpp_linked(_29024_k.ptr())) {
			_case_begin_22aa34d7b:;
			{
				return _29024_k.get()._field_cpp_ident;
			}
		}
		else if ((_2455e3139_prim(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35013:;
			{
				return static__228263744_prim(_2455e3139_prim(_29024_k.ptr()));
			}
		}
		else if ((_2455e4cc8_tup(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35079:;
			{
				return static__2282639db_tuple(_2455e4cc8_tup(_29024_k.ptr()));
			}
		}
		else if ((_2455e339d_sptr(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35101:;
			{
				return static__2282642c2_sptr(_2455e339d_sptr(_29024_k.ptr()));
			}
		}
		else if ((_2455e3612_ptr(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35178:;
			{
				return static__228264569_ptr(_2455e3612_ptr(_29024_k.ptr()));
			}
		}
		else if ((_2455e3876_enm(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35200:;
			{
				return static__228264811_enum_decl(_2455e3876_enm(_29024_k.ptr()));
			}
		}
		else if ((_2455e3ada_tenm(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35277:;
			{
				return static__228264aa8_type_enum_decl(_2455e3ada_tenm(_29024_k.ptr()));
			}
		}
		else if ((_2455e40b3_slc(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa352ee:;
			{
				return static__2282650e7_slice(_2455e40b3_slc(_29024_k.ptr()));
			}
		}
		else if ((_2455e4a64_map(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35376:;
			{
				return static__22826538e_map(_2455e4a64_map(_29024_k.ptr()));
			}
		}
		else if ((_2455e4800_trt(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa353ed:;
			{
				return static__2282658cd_trait_decl(_2455e4800_trt(_29024_k.ptr()));
			}
		}
		else if ((_2455e458b_strct(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35475:;
			{
				return static__228265e1c_structure_ins(_2455e458b_strct(_29024_k.ptr()));
			}
		}
		else if ((_2455e3d4e_arr(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa354ec:;
			{
				return static__2282661b4_array(_2455e3d4e_arr(_29024_k.ptr()));
			}
		}
		else if ((_2455e4327_fnc(_29024_k.ptr()) != nullptr)) {
			_case_begin_22aa35574:;
			{
				return static__228267281_func(_2455e4327_fnc(_29024_k.ptr()));
			}
		}
		_match_end_22aa34c8d:;
	};
	{
		auto &_match_expr{ _29024_k.get()._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228262677_CustomType>>()) {
			_case_begin_22aa35651:;
			{
				return _29024_k.get()._field_kind.operator jule::Ptr<_228262677_CustomType>().get()._field_kind;
			}
		}
		else {
			_case_begin_22aa3ba86:;
			{
				return jule::Str("[<unimplemented_type_kind>]", 27);
			}
		}
		_match_end_22aa3ba31:;
	};
}







std::ostream &operator<<(std::ostream &_Stream, _228262e6e_TypeCoder _Src) {
	_Stream << "TypeCoder{";
	_Stream << "}";
	return _Stream;
}



inline jule::Str _22a8347b3_name(_22aa3da99_Flag* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _22a8348e5_what(_22aa3da99_Flag* _self_) {
	return (*_self_)._field__what;
}



inline void _22aa3de84_reset(_22aa3da99_Flag* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _22aa3e0b6_short(_22aa3da99_Flag* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _22aa3da99_Flag _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _22aa422a6_name(_22aa4275c_Flag* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _22aa42a26_what(_22aa4275c_Flag* _self_) {
	return (*_self_)._field__what;
}



inline void _22aa42b58_reset(_22aa4275c_Flag* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _22aa42c8a_short(_22aa4275c_Flag* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _22aa4275c_Flag _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _22aa45c8d_name(_22aa46244_Flag* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _22aa4650d_what(_22aa46244_Flag* _self_) {
	return (*_self_)._field__what;
}



inline void _22aa46640_reset(_22aa46244_Flag* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _22aa46772_short(_22aa46244_Flag* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _22aa46244_Flag _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _22aa497b9_name(_22aa49c70_Flag* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _22aa4a039_what(_22aa49c70_Flag* _self_) {
	return (*_self_)._field__what;
}



inline void _22aa4a16b_reset(_22aa49c70_Flag* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _22aa4a29d_short(_22aa49c70_Flag* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _22aa49c70_Flag _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _22aa4d2a1_name(_22aa4d757_Flag* _self_) {
	return (*_self_)._field__name;
}



inline jule::Str _22aa4da21_what(_22aa4d757_Flag* _self_) {
	return (*_self_)._field__what;
}



inline void _22aa4db53_reset(_22aa4d757_Flag* _self_) {
	(*((*_self_)._field__data))=(*_self_)._field__default;
}



inline jule::I32 _22aa4dc85_short(_22aa4d757_Flag* _self_) {
	return (*_self_)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, _22aa4d757_Flag _Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_22829d5c5_FlagSet> static__22829d8b1_new(void) {
	return jule::new_ptr<_22829d5c5_FlagSet>(_22829d5c5_FlagSet{._field__flags=jule::Slice<jule::Trait<_227d88886_CommonFlag>>::alloc(0LL,20LL)});
}



inline jule::Trait<_227d88886_CommonFlag> _22829dd45_find_flag(_22829d5c5_FlagSet* _self_, jule::Str _7132_name) {
	{
		auto &expr = (*_self_)._field__flags;
		auto it = expr.begin();
		_iter_begin_22aa59400:;
		if (it != expr.end()) {
			jule::Trait<_227d88886_CommonFlag> _7221_flag = *it;
			{
				if ((_227d88886_CommonFlag_mptr_data[(_7221_flag).type_offset]._227d88754_name(_7221_flag) == _7132_name)) {
					return _7221_flag;
				};
			}
			_iter_next_22aa59400:;
			++it;
			goto _iter_begin_22aa59400;
		}
		_iter_end_22aa59400:;
	};
	return nullptr;
}



inline jule::Trait<_227d88886_CommonFlag> _22829e153_find_flag_short(_22829d5c5_FlagSet* _self_, jule::I32 _8138_name) {
	{
		auto &expr = (*_self_)._field__flags;
		auto it = expr.begin();
		_iter_begin_22aa59862:;
		if (it != expr.end()) {
			jule::Trait<_227d88886_CommonFlag> _8221_flag = *it;
			{
				if ((_227d88886_CommonFlag_mptr_data[(_8221_flag).type_offset]._22827a827_short(_8221_flag) == _8138_name)) {
					return _8221_flag;
				};
			}
			_iter_next_22aa59862:;
			++it;
			goto _iter_begin_22aa59862;
		}
		_iter_end_22aa59862:;
	};
	return nullptr;
}



inline jule::Slice<jule::Trait<_227d88886_CommonFlag>> _22829e3b7_flags(_22829d5c5_FlagSet* _self_) {
	return (*_self_)._field__flags;
}



inline jule::Exceptional<jule::Slice<jule::Str>> _22829e6c5_parse(_22829d5c5_FlagSet* _self_, jule::Slice<jule::Str> _11528_args) {
	_2282a0c9d_ArgParser _11617_ap = _2282a0c9d_ArgParser{._field_set=(*_self_), ._field_args=_11528_args, };;
	({
		auto except = _2282a2189_parse(&_11617_ap);
		if (!except.ok()) {
			return jule::Exceptional<jule::Slice<jule::Str>>(except.error);
		}
	});
	return jule::Exceptional<jule::Slice<jule::Str>>(jule::Any(),_11617_ap._field_content);
}



inline void _22829e8a1_reset(_22829d5c5_FlagSet* _self_) {
	{
		auto &expr = (*_self_)._field__flags;
		auto it = expr.begin();
		_iter_begin_22aa5cc0b:;
		if (it != expr.end()) {
			jule::Trait<_227d88886_CommonFlag> _12616_f = *it;
			{
				_227d88886_CommonFlag_mptr_data[(_12616_f).type_offset]._22829bc77_reset(_12616_f);
			}
			_iter_next_22aa5cc0b:;
			++it;
			goto _iter_begin_22aa5cc0b;
		}
		_iter_end_22aa5cc0b:;
	};
}



inline jule::Ptr<_22aa4d757_Flag> _22aac4899_add_flag_common(_22829d5c5_FlagSet* _self_, jule::Str _13141_name, jule::I32 _13152_short, jule::Str _13165_what) {
	{
		
{
			_case_begin_22aac601b:;
			{
				goto _match_end_22aac5ea5;
			}
		}
		_match_end_22aac5ea5:;
	};
	if ((_22829dd45_find_flag(&(*_self_), _13141_name) != nullptr)) {
		jule::panic((jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _13141_name) + jule::Str("\nlocation: std/flag/flag.jule:141:13"));;
	};
	if (((_13152_short != 0LL) && (_22829e153_find_flag_short(&(*_self_), _13152_short) != nullptr))) {
		jule::panic((jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_13152_short)) + jule::Str("\nlocation: std/flag/flag.jule:145:13"));;
	};
	jule::Ptr<_22aa4d757_Flag> _14817_flag = jule::new_ptr<_22aa4d757_Flag>(_22aa4d757_Flag{._field__name=_13141_name, ._field__short=_13152_short, ._field__what=_13165_what, });;
	(*_self_)._field__flags = jule::alloc_for_append((*_self_)._field__flags,1);(*_self_)._field__flags.__push(jule::Trait<_227d88886_CommonFlag>(_14817_flag, 4));;
	return _14817_flag;
}

inline jule::Ptr<_22aa49c70_Flag> _22aacd4b8_add_flag_common(_22829d5c5_FlagSet* _self_, jule::Str _13141_name, jule::I32 _13152_short, jule::Str _13165_what) {
	{
		
{
			_case_begin_22aaceaa2:;
			{
				goto _match_end_22aacea2a;
			}
		}
		_match_end_22aacea2a:;
	};
	if ((_22829dd45_find_flag(&(*_self_), _13141_name) != nullptr)) {
		jule::panic((jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _13141_name) + jule::Str("\nlocation: std/flag/flag.jule:141:13"));;
	};
	if (((_13152_short != 0LL) && (_22829e153_find_flag_short(&(*_self_), _13152_short) != nullptr))) {
		jule::panic((jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_13152_short)) + jule::Str("\nlocation: std/flag/flag.jule:145:13"));;
	};
	jule::Ptr<_22aa49c70_Flag> _14817_flag = jule::new_ptr<_22aa49c70_Flag>(_22aa49c70_Flag{._field__name=_13141_name, ._field__short=_13152_short, ._field__what=_13165_what, });;
	(*_self_)._field__flags = jule::alloc_for_append((*_self_)._field__flags,1);(*_self_)._field__flags.__push(jule::Trait<_227d88886_CommonFlag>(_14817_flag, 3));;
	return _14817_flag;
}



inline void _22aac2864_add_var(_22829d5c5_FlagSet* _self_, jule::Ptr<jule::Str> _17537_var, jule::Str _17546_name, jule::I32 _17557_short, jule::Str _17570_what) {
	jule::Ptr<_22aa4d757_Flag> _17617_flag = _22aac4899_add_flag_common(&(*_self_), _17546_name,_17557_short,_17570_what);;
	_17617_flag.get()._field__default=(*(_17537_var));
	_17617_flag.get()._field__data=_17537_var;
}

inline void _22aacb494_add_var(_22829d5c5_FlagSet* _self_, jule::Ptr<jule::Bool> _17537_var, jule::Str _17546_name, jule::I32 _17557_short, jule::Str _17570_what) {
	jule::Ptr<_22aa49c70_Flag> _17617_flag = _22aacd4b8_add_flag_common(&(*_self_), _17546_name,_17557_short,_17570_what);;
	_17617_flag.get()._field__default=(*(_17537_var));
	_17617_flag.get()._field__data=_17537_var;
}







std::ostream &operator<<(std::ostream &_Stream, _22829d5c5_FlagSet _Src) {
	_Stream << "FlagSet{";
	_Stream << "_flags:" << _Src._field__flags;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ptr<_2276b0301_IR>,jule::Slice<_242dbab89_Log>> static__24571502a_build(jule::Str _2825_path, jule::I32 _2836_flags) {
	jule::Ptr<_246491d50_JuleImporter> _2917_importer = static__2464a5814_new(_22780a66b_build_compile_info());;
	jule::Slice<jule::Ptr<_244823942_Ast>> _3018_files;;
	jule::Slice<_242dbab89_Log> _3029_logs;;
	std::tie(_3018_files,_3029_logs) = _227607204_import_package(_2917_importer.ptr(), _2825_path,true);
	if ((_3029_logs.len() > 0LL)) {
		return std::make_tuple(nullptr,_3029_logs);
	};
	jule::Str _3413_root = _2825_path;;
	if ((_3018_files.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	};
	jule::Ptr<_24554ad1c_Package> _4018_pkg;;
	std::tie(_4018_pkg,_3029_logs) = _24560ce45_analyze_package(_3018_files,jule::Trait<_2455455b9_Importer>(_2917_importer, 0),_2836_flags);
	if ((_3029_logs.len() > 0LL)) {
		return std::make_tuple(nullptr,_3029_logs);
	};
	jule::Ptr<_2276b0301_IR> _4517_ir = jule::new_ptr<_2276b0301_IR>(_2276b0301_IR{._field_root=_3413_root, ._field_main=_4018_pkg, ._field_used=_2464ea89d_all_packages(_2917_importer.ptr()), });;
	_4517_ir.get()._field_passes=_22769478b_get_all_unique_passes(_4517_ir.get()._field_main,_4517_ir.get()._field_used);
	return std::make_tuple(_4517_ir,nullptr);
}



inline void _245748080_append_structs(_2276b0301_IR* _self_, jule::Ptr<_24554ad1c_Package>& _5734_p, jule::Slice<jule::Ptr<_244848912_Struct>>& _5758_buffer) {
	{
		auto &expr = _5734_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a4db1d4:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _5821_f = *it;
			{
				{
					auto &expr = _5821_f.get()._field_structs;
					auto it = expr.begin();
					_iter_begin_22a4dba75:;
					if (it != expr.end()) {
						jule::Ptr<_244848912_Struct> _5925_s = *it;
						{
							if ((!(_5925_s.get()._field_cpp_linked))) {
								_5758_buffer = jule::alloc_for_append(_5758_buffer,1);_5758_buffer.__push(_5925_s);;
							};
						}
						_iter_next_22a4dba75:;
						++it;
						goto _iter_begin_22a4dba75;
					}
					_iter_end_22a4dba75:;
				};
			}
			_iter_next_22a4db1d4:;
			++it;
			goto _iter_begin_22a4db1d4;
		}
		_iter_end_22a4db1d4:;
	};
}



inline jule::Slice<jule::Ptr<_244848912_Struct>> _24575174d_get_all_structures(_2276b0301_IR* _self_) {
	jule::Slice<jule::Ptr<_244848912_Struct>> _7017_buffer = nullptr;;
	_245748080_append_structs(&(*_self_), (*_self_)._field_main,_7017_buffer);
	{
		auto &expr = (*_self_)._field_used;
		auto it = expr.begin();
		_iter_begin_22a4dc4e3:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _7221_u = *it;
			{
				if ((!(_7221_u.get()._field_cpp_linked))) {
					_245748080_append_structs(&(*_self_), _7221_u.get()._field_package,_7017_buffer);
				};
			}
			_iter_next_22a4dc4e3:;
			++it;
			goto _iter_begin_22a4dc4e3;
		}
		_iter_end_22a4dc4e3:;
	};
	return _7017_buffer;
}



inline void _245773e8a_append_globals(_2276b0301_IR* _self_, jule::Ptr<_24554ad1c_Package>& _8034_p, jule::Slice<jule::Ptr<_24556cc1d_Var>>& _8058_buffer) {
	{
		auto &expr = _8034_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a4de36e:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _8121_f = *it;
			{
				{
					auto &expr = _8121_f.get()._field_vars;
					auto it = expr.begin();
					_iter_begin_22a4debbb:;
					if (it != expr.end()) {
						jule::Ptr<_24556cc1d_Var> _8225_v = *it;
						{
							if ((((_8225_v.get()._field_token != nullptr) && (!(_8225_v.get()._field_cpp_linked))) && (!(_8225_v.get()._field_constant)))) {
								_8058_buffer = jule::alloc_for_append(_8058_buffer,1);_8058_buffer.__push(_8225_v);;
							};
						}
						_iter_next_22a4debbb:;
						++it;
						goto _iter_begin_22a4debbb;
					}
					_iter_end_22a4debbb:;
				};
			}
			_iter_next_22a4de36e:;
			++it;
			goto _iter_begin_22a4de36e;
		}
		_iter_end_22a4de36e:;
	};
}



inline jule::Slice<jule::Ptr<_24556cc1d_Var>> _2276321c9_get_all_globals(_2276b0301_IR* _self_) {
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _9317_buffer = nullptr;;
	_245773e8a_append_globals(&(*_self_), (*_self_)._field_main,_9317_buffer);
	{
		auto &expr = (*_self_)._field_used;
		auto it = expr.begin();
		_iter_begin_22a4e16b2:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _9521_u = *it;
			{
				if ((!(_9521_u.get()._field_cpp_linked))) {
					_245773e8a_append_globals(&(*_self_), _9521_u.get()._field_package,_9317_buffer);
				};
			}
			_iter_next_22a4e16b2:;
			++it;
			goto _iter_begin_22a4e16b2;
		}
		_iter_end_22a4e16b2:;
	};
	return _9317_buffer;
}



inline void _22767cd5c_order(_2276b0301_IR* _self_) {
	(*_self_)._field_ordered._field_structs=_24575174d_get_all_structures(&(*_self_));
	(*_self_)._field_ordered._field_globals=_2276321c9_get_all_globals(&(*_self_));
	static__22782c171_order_structures((*_self_)._field_ordered._field_structs);
	static__227837610_order_vars((*_self_)._field_ordered._field_globals);
}







std::ostream &operator<<(std::ostream &_Stream, _2276b0301_IR _Src) {
	_Stream << "IR{";
	_Stream << "root:" << _Src._field_root << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "ordered:" << _Src._field_ordered;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _24484a5e5_to_str(_244874c5c_StructIns* _self_) {
	jule::Str _24317_kind = jule::Str();;
	_24317_kind+=(*_self_)._field_decl.get()._field_ident;
	if (((*_self_)._field_generics.len() > 0LL)) {
		_24317_kind+=jule::Str("[", 1);
		{
			auto &expr = (*_self_)._field_generics;
			auto it = expr.begin();
			_iter_begin_2294e6058:;
			if (it != expr.end()) {
				jule::Ptr<_2455de7ea_InsGeneric> &_24720_g = *it;
				{
					_24317_kind+=_2455e1423_to_str(_24720_g.get()._field_kind.ptr());
					_24317_kind+=jule::Str(",", 1);
				}
				_iter_next_2294e6058:;
				++it;
				goto _iter_begin_2294e6058;
			}
			_iter_end_2294e6058:;
		};
		(_24317_kind).mut_slice(0LL,(_24317_kind.len() - 1LL));;
		_24317_kind+=jule::Str("]", 1);
	};
	return _24317_kind;
}



inline jule::Bool _24484b75b_equals(jule::Ptr<_244874c5c_StructIns> _self_, jule::Ptr<_2455e1027_TypeKind> _25826_other) {
	jule::Ptr<_244874c5c_StructIns> _25913_s = _2455e458b_strct(_25826_other.ptr());;
	if ((_25913_s == nullptr)) {
		return false;
	};
	if ((_self_.get()._field_decl != _25913_s.get()._field_decl)) {
		return false;
	};
	if ((_self_.get()._field_generics.len() != _25913_s.get()._field_generics.len())) {
		return false;
	};
	jule::I32 _27217_i = 0LL;;
	for (; (_27217_i < _self_.get()._field_generics.len()); (_27217_i)++) {
		{
			if ((!(_2455e1731_equals(_self_.get()._field_generics[_27217_i].get()._field_kind, _25913_s.get()._field_generics[_27217_i].get()._field_kind)))) {
				return false;
			};
		}
	_iter_next_2294e9787:;
	}
	_iter_end_2294e9787:;;
	return true;
}



inline jule::Bool _24484dab0_same(_244874c5c_StructIns* _self_, jule::Ptr<_244874c5c_StructIns> _28623_s) {
	if ((((*_self_)._field_decl != _28623_s.get()._field_decl) || (_28623_s.get()._field_generics.len() != (*_self_)._field_generics.len()))) {
		return false;
	};
	{
		auto &expr = (*_self_)._field_generics;
		auto it = expr.begin();
		_iter_begin_2294ebc0c:;
		if (it != expr.end()) {
			jule::I32 _29113_i = it - expr.begin();
			jule::Ptr<_2455de7ea_InsGeneric> &_29116_g = *it;
			{
				if ((!(_2455e1731_equals(_29116_g.get()._field_kind, _28623_s.get()._field_generics[_29113_i].get()._field_kind)))) {
					return false;
				};
			}
			_iter_next_2294ebc0c:;
			++it;
			_29113_i++;
			goto _iter_begin_2294ebc0c;
		}
		_iter_end_2294ebc0c:;
	};
	return true;
}



inline jule::Ptr<_244926d0e_Fn> _24484edd0_find_method(_244874c5c_StructIns* _self_, jule::Str _30134_ident, jule::Bool _30146_statically) {
	{
		auto &expr = (*_self_)._field_methods;
		auto it = expr.begin();
		_iter_begin_2294ed6e2:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _30221_f = *it;
			{
				if (((_30221_f.get()._field_statically == _30146_statically) && (_30221_f.get()._field_ident == _30134_ident))) {
					return _30221_f;
				};
			}
			_iter_next_2294ed6e2:;
			++it;
			goto _iter_begin_2294ed6e2;
		}
		_iter_end_2294ed6e2:;
	};
	return nullptr;
}



inline jule::Ptr<_244851079_FieldIns> _2448528e9_find_field(_244874c5c_StructIns* _self_, jule::Str _31233_ident) {
	{
		auto &expr = (*_self_)._field_fields;
		auto it = expr.begin();
		_iter_begin_2294ee968:;
		if (it != expr.end()) {
			jule::Ptr<_244851079_FieldIns> _31321_f = *it;
			{
				if ((_31321_f.get()._field_decl.get()._field_ident == _31233_ident)) {
					return _31321_f;
				};
			}
			_iter_next_2294ee968:;
			++it;
			goto _iter_begin_2294ee968;
		}
		_iter_end_2294ee968:;
	};
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, _244874c5c_StructIns _Src) {
	_Stream << _24484a5e5_to_str(&_Src);
	return _Stream;
}



inline jule::Ptr<_227b31871_ObjectDeadCode> static__227b31cc2_new(jule::Ptr<_2276b0301_IR>& _3424_ir) {
	return jule::new_ptr<_227b31871_ObjectDeadCode>(_227b31871_ObjectDeadCode{._field_ir=_3424_ir});
}



inline jule::Bool _22a52b1ad_is_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24547ec51_Trait>& _4031_t) {
	jule::Slice<jule::Ptr<_24547ec51_Trait>> _4117_live = nullptr;;
	{
		
{
			_case_begin_22a52d237:;
			{
				_4117_live=_self_.get()._field_live._field_traits;
			}
		}
		_match_end_22a52ce4b:;
	};
	{
		auto &expr = _4117_live;
		auto it = expr.begin();
		_iter_begin_22a52d90d:;
		if (it != expr.end()) {
			jule::I32 _5213_i = it - expr.begin();
			{
				if ((_4117_live[_5213_i] == _4031_t)) {
					return true;
				};
			}
			_iter_next_22a52d90d:;
			++it;
			_5213_i++;
			goto _iter_begin_22a52d90d;
		}
		_iter_end_22a52d90d:;
	};
	return false;
}

inline jule::Bool _22a531e83_is_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_2449299b0_FnIns>& _4031_t) {
	jule::Slice<jule::Ptr<_2449299b0_FnIns>> _4117_live = nullptr;;
	{
		
{
			_case_begin_22a5337ae:;
			{
				_4117_live=_self_.get()._field_live._field_fns;
			}
		}
		_match_end_22a533704:;
	};
	{
		auto &expr = _4117_live;
		auto it = expr.begin();
		_iter_begin_22a533d64:;
		if (it != expr.end()) {
			jule::I32 _5213_i = it - expr.begin();
			{
				if ((_4117_live[_5213_i] == _4031_t)) {
					return true;
				};
			}
			_iter_next_22a533d64:;
			++it;
			_5213_i++;
			goto _iter_begin_22a533d64;
		}
		_iter_end_22a533d64:;
	};
	return false;
}

inline jule::Bool _22a538110_is_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_244874c5c_StructIns>& _4031_t) {
	jule::Slice<jule::Ptr<_244874c5c_StructIns>> _4117_live = nullptr;;
	{
		
{
			_case_begin_22a53c653:;
			{
				_4117_live=_self_.get()._field_live._field_structs;
			}
		}
		_match_end_22a53c3cd:;
	};
	{
		auto &expr = _4117_live;
		auto it = expr.begin();
		_iter_begin_22a53c730:;
		if (it != expr.end()) {
			jule::I32 _5213_i = it - expr.begin();
			{
				if ((_4117_live[_5213_i] == _4031_t)) {
					return true;
				};
			}
			_iter_next_22a53c730:;
			++it;
			_5213_i++;
			goto _iter_begin_22a53c730;
		}
		_iter_end_22a53c730:;
	};
	return false;
}

inline jule::Bool _22a540029_is_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24556cc1d_Var>& _4031_t) {
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _4117_live = nullptr;;
	{
		
{
			_case_begin_22a541d94:;
			{
				_4117_live=_self_.get()._field_live._field_vars;
			}
		}
		_match_end_22a541c73:;
	};
	{
		auto &expr = _4117_live;
		auto it = expr.begin();
		_iter_begin_22a54279b:;
		if (it != expr.end()) {
			jule::I32 _5213_i = it - expr.begin();
			{
				if ((_4117_live[_5213_i] == _4031_t)) {
					return true;
				};
			}
			_iter_next_22a54279b:;
			++it;
			_5213_i++;
			goto _iter_begin_22a54279b;
		}
		_iter_end_22a54279b:;
	};
	return false;
}



inline void _22a52b752_push_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24547ec51_Trait> _6036_t) {
	{
		
{
			_case_begin_22a530448:;
			{
				_self_.get()._field_live._field_traits = jule::alloc_for_append(_self_.get()._field_live._field_traits,1);_self_.get()._field_live._field_traits.__push(_6036_t);;
			}
		}
		_match_end_22a5300e6:;
	};
}

inline void _22a5355b3_push_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_2449299b0_FnIns> _6036_t) {
	{
		
{
			_case_begin_22a536240:;
			{
				_self_.get()._field_live._field_fns = jule::alloc_for_append(_self_.get()._field_live._field_fns,1);_self_.get()._field_live._field_fns.__push(_6036_t);;
			}
		}
		_match_end_22a535eba:;
	};
}

inline void _22a538693_push_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_244874c5c_StructIns> _6036_t) {
	{
		
{
			_case_begin_22a539e58:;
			{
				_self_.get()._field_live._field_structs = jule::alloc_for_append(_self_.get()._field_live._field_structs,1);_self_.get()._field_live._field_structs.__push(_6036_t);;
			}
		}
		_match_end_22a539b6c:;
	};
}

inline void _22a543912_push_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24556cc1d_Var> _6036_t) {
	{
		
{
			_case_begin_22a5443e6:;
			{
				_self_.get()._field_live._field_vars = jule::alloc_for_append(_self_.get()._field_live._field_vars,1);_self_.get()._field_live._field_vars.__push(_6036_t);;
			}
		}
		_match_end_22a544319:;
	};
}



inline void _227b5ee21_set_references_as_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24492c8b4_ReferenceStack>& _7347_rs) {
	if ((_7347_rs == nullptr)) {
		return;;
	};
	jule::I32 _7717_i = 0LL;;
	for (; (_7717_i < _24492d035_len(_7347_rs.ptr())); (_7717_i)++) {
		{
			jule::Any _7921_ref = _24492d343_at(_7347_rs.ptr(), _7717_i);;
			{
				auto &_match_expr{ _7921_ref };
				
				if (_match_expr.type_is<jule::Ptr<_24547ec51_Trait>>()) {
					_case_begin_22a52a223:;
					{
						jule::Ptr<_24547ec51_Trait> _8225_t = _7921_ref.operator jule::Ptr<_24547ec51_Trait>();;
						if (_22a52b1ad_is_live(_self_, _8225_t)) {
							goto _iter_next_22a52950d;
						};
						_22a52b752_push_live(_self_, _8225_t);
						{
							auto &expr = _8225_t.get()._field_methods;
							auto it = expr.begin();
							_iter_begin_22a52ebd9:;
							if (it != expr.end()) {
								jule::Ptr<_244926d0e_Fn> _8729_ins = *it;
								{
									{
										auto &expr = _8729_ins.get()._field_instances;
										auto it = expr.begin();
										_iter_begin_22a52ee09:;
										if (it != expr.end()) {
											jule::Ptr<_2449299b0_FnIns> _8833_mins = *it;
											{
												if (_22a531e83_is_live(_self_, _8833_mins)) {
													goto _iter_next_22a52ee09;
												};
												_22a5355b3_push_live(_self_, _8833_mins);
												_227b5ee21_set_references_as_live(_self_, _8833_mins.get()._field_refers);
											}
											_iter_next_22a52ee09:;
											++it;
											goto _iter_begin_22a52ee09;
										}
										_iter_end_22a52ee09:;
									};
								}
								_iter_next_22a52ebd9:;
								++it;
								goto _iter_begin_22a52ebd9;
							}
							_iter_end_22a52ebd9:;
						};
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_2449299b0_FnIns>>()) {
					_case_begin_22a52a289:;
					{
						jule::Ptr<_2449299b0_FnIns> _9725_f = _7921_ref.operator jule::Ptr<_2449299b0_FnIns>();;
						if (_22a531e83_is_live(_self_, _9725_f)) {
							goto _match_end_22a529d9e;
						};
						if (((_9725_f.get()._field_owner != nullptr) && (!(_9725_f.get()._field_decl.get()._field_statically)))) {
							if ((!(_22a538110_is_live(_self_, _9725_f.get()._field_owner)))) {
								_22a538693_push_live(_self_, _9725_f.get()._field_owner);
								_227b5ee21_set_references_as_live(_self_, _9725_f.get()._field_owner.get()._field_refers);
							};
						};
						_22a5355b3_push_live(_self_, _9725_f);
						_227b5ee21_set_references_as_live(_self_, _9725_f.get()._field_refers);
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
					_case_begin_22a52a377:;
					{
						jule::Ptr<_24556cc1d_Var> _11025_v = _7921_ref.operator jule::Ptr<_24556cc1d_Var>();;
						if (_22a540029_is_live(_self_, _11025_v)) {
							goto _match_end_22a529d9e;
						};
						_22a543912_push_live(_self_, _11025_v);
						_227b5ee21_set_references_as_live(_self_, _11025_v.get()._field_refers);
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_244874c5c_StructIns>>()) {
					_case_begin_22a52a3dd:;
					{
						jule::Ptr<_244874c5c_StructIns> _11725_s = _7921_ref.operator jule::Ptr<_244874c5c_StructIns>();;
						if (_22a538110_is_live(_self_, _11725_s)) {
							goto _match_end_22a529d9e;
						};
						_22a538693_push_live(_self_, _11725_s);
						_227b5ee21_set_references_as_live(_self_, _11725_s.get()._field_refers);
						{
							auto &expr = _11725_s.get()._field_methods;
							auto it = expr.begin();
							_iter_begin_22a54787d:;
							if (it != expr.end()) {
								jule::Ptr<_244926d0e_Fn> _12329_ins = *it;
								{
									{
										auto &expr = _12329_ins.get()._field_instances;
										auto it = expr.begin();
										_iter_begin_22a543c75:;
										if (it != expr.end()) {
											jule::Ptr<_2449299b0_FnIns> _12433_mins = *it;
											{
												if (_22a531e83_is_live(_self_, _12433_mins)) {
													goto _iter_next_22a543c75;
												};
												_22a5355b3_push_live(_self_, _12433_mins);
												_227b5ee21_set_references_as_live(_self_, _12433_mins.get()._field_refers);
											}
											_iter_next_22a543c75:;
											++it;
											goto _iter_begin_22a543c75;
										}
										_iter_end_22a543c75:;
									};
								}
								_iter_next_22a54787d:;
								++it;
								goto _iter_begin_22a54787d;
							}
							_iter_end_22a54787d:;
						};
					}
				}
				_match_end_22a529d9e:;
			};
		}
	_iter_next_22a52950d:;
	}
	_iter_end_22a52950d:;;
}



inline void _227b60196_inits(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24554ad1c_Package>& _13630_pkg) {
	{
		auto &expr = _13630_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a5298c6:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _13721_file = *it;
			{
				{
					auto &expr = _13721_file.get()._field_funcs;
					auto it = expr.begin();
					_iter_begin_22a54a85e:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _13825_f = *it;
						{
							if ((_13825_f.get()._field_ident == jule::Str("init", 4))) {
								jule::Ptr<_2449299b0_FnIns> _14029_ins = _13825_f.get()._field_instances[0LL];;
								_self_.get()._field_live._field_fns = jule::alloc_for_append(_self_.get()._field_live._field_fns,1);_self_.get()._field_live._field_fns.__push(_14029_ins);;
								_227b5ee21_set_references_as_live(_self_, _14029_ins.get()._field_refers);
							};
						}
						_iter_next_22a54a85e:;
						++it;
						goto _iter_begin_22a54a85e;
					}
					_iter_end_22a54a85e:;
				};
			}
			_iter_next_22a5298c6:;
			++it;
			goto _iter_begin_22a5298c6;
		}
		_iter_end_22a5298c6:;
	};
}



inline void _227b6041b_collect_live_package(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24554ad1c_Package>& _14845_pkg) {
	_227b60196_inits(_self_, _14845_pkg);
	if (_240e64dab_TEST) {
		{
			auto &expr = _14845_pkg.get()._field_files;
			auto it = expr.begin();
			_iter_begin_22a54cd28:;
			if (it != expr.end()) {
				jule::Ptr<_2455b02e3_SymbolTable> _15425_file = *it;
				{
					{
						auto &expr = _15425_file.get()._field_funcs;
						auto it = expr.begin();
						_iter_begin_22a54d6b9:;
						if (it != expr.end()) {
							jule::Ptr<_244926d0e_Fn> _15529_f = *it;
							{
								if (_227b6242e_has_directive(_15529_f.get()._field_directives,jule::Str("test", 4))) {
									jule::Ptr<_2449299b0_FnIns> _15733_ins = _15529_f.get()._field_instances[0LL];;
									_self_.get()._field_live._field_fns = jule::alloc_for_append(_self_.get()._field_live._field_fns,1);_self_.get()._field_live._field_fns.__push(_15733_ins);;
									_227b5ee21_set_references_as_live(_self_, _15733_ins.get()._field_refers);
								};
							}
							_iter_next_22a54d6b9:;
							++it;
							goto _iter_begin_22a54d6b9;
						}
						_iter_end_22a54d6b9:;
					};
				}
				_iter_next_22a54cd28:;
				++it;
				goto _iter_begin_22a54cd28;
			}
			_iter_end_22a54cd28:;
		};
	};
}



inline void _227b605e7_collect_live(jule::Ptr<_227b31871_ObjectDeadCode> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_22a54e126:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _16721_used = *it;
			{
				if ((!(_16721_used.get()._field_cpp_linked))) {
					_227b6041b_collect_live_package(_self_, _16721_used.get()._field_package);
				};
			}
			_iter_next_22a54e126:;
			++it;
			goto _iter_begin_22a54e126;
		}
		_iter_end_22a54e126:;
	};
	_227b6041b_collect_live_package(_self_, _self_.get()._field_ir.get()._field_main);
	jule::Ptr<_244926d0e_Fn> _17517_main = _24554c5c1_find_fn(_self_.get()._field_ir.get()._field_main.ptr(), jule::Str("main", 4),false);;
	jule::Ptr<_2449299b0_FnIns> _17617_ins = _17517_main.get()._field_instances[0LL];;
	_self_.get()._field_live._field_fns = jule::alloc_for_append(_self_.get()._field_live._field_fns,1);_self_.get()._field_live._field_fns.__push(_17617_ins);;
	_227b5ee21_set_references_as_live(_self_, _17617_ins.get()._field_refers);
}



inline void _227b6086c_remove_dead_globals(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Slice<jule::Ptr<_24556cc1d_Var>>& _18144_vars) {
	jule::I32 _18217_i = 0LL;;
	while ((_18217_i < _18144_vars.len())) {
		{
			jule::Ptr<_24556cc1d_Var> _18417_v = _18144_vars[_18217_i];;
			if (_22a540029_is_live(_self_, _18417_v)) {
				(_18217_i)++;
				goto _iter_next_22a553526;
			};
			_18144_vars=jule::append(_18144_vars.slice(0LL,_18217_i),_18144_vars.slice((_18217_i + 1LL)));
		}
	_iter_next_22a553526:;
	}
	_iter_end_22a553526:;;
}



inline void _227b60ae2_remove_dead_fns(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Slice<jule::Ptr<_244926d0e_Fn>>& _19340_funcs) {
	jule::I32 _19417_i = 0LL;;
	while ((_19417_i < _19340_funcs.len())) {
		{
			jule::Ptr<_244926d0e_Fn> _19621_f = _19340_funcs[_19417_i];;
			jule::I32 _19721_j = 0LL;;
			while ((_19721_j < _19621_f.get()._field_instances.len())) {
				{
					jule::Ptr<_2449299b0_FnIns> _19921_ins = _19621_f.get()._field_instances[_19721_j];;
					if (_22a531e83_is_live(_self_, _19921_ins)) {
						(_19721_j)++;
						goto _iter_next_22a556b56;
					};
					_19621_f.get()._field_instances=jule::append(_19621_f.get()._field_instances.slice(0LL,_19721_j),_19621_f.get()._field_instances.slice((_19721_j + 1LL)));
				}
			_iter_next_22a556b56:;
			}
			_iter_end_22a556b56:;;
			if ((_19621_f.get()._field_instances.len() == 0LL)) {
				_19340_funcs=jule::append(_19340_funcs.slice(0LL,_19417_i),_19340_funcs.slice((_19417_i + 1LL)));
				goto _iter_next_22a553a21;
			};
			(_19417_i)++;
		}
	_iter_next_22a553a21:;
	}
	_iter_end_22a553a21:;;
}



inline void _227b60d67_remove_dead_structs(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Slice<jule::Ptr<_244848912_Struct>>& _21444_structs) {
	jule::I32 _21517_i = 0LL;;
	while ((_21517_i < _21444_structs.len())) {
		{
			jule::Ptr<_244848912_Struct> _21721_s = _21444_structs[_21517_i];;
			jule::I32 _21821_j = 0LL;;
			while ((_21821_j < _21721_s.get()._field_instances.len())) {
				{
					jule::Ptr<_244874c5c_StructIns> _22025_ins = _21721_s.get()._field_instances[_21821_j];;
					_227b60ae2_remove_dead_fns(_self_, _22025_ins.get()._field_methods);
					if (((_22025_ins.get()._field_methods.len() != 0LL) || _22a538110_is_live(_self_, _22025_ins))) {
						(_21821_j)++;
						goto _iter_next_22a55ad7a;
					};
					_21721_s.get()._field_instances=jule::append(_21721_s.get()._field_instances.slice(0LL,_21821_j),_21721_s.get()._field_instances.slice((_21821_j + 1LL)));
				}
			_iter_next_22a55ad7a:;
			}
			_iter_end_22a55ad7a:;;
			if ((_21721_s.get()._field_instances.len() == 0LL)) {
				_21444_structs=jule::append(_21444_structs.slice(0LL,_21517_i),_21444_structs.slice((_21517_i + 1LL)));
				goto _iter_next_22a559bc0;
			};
			(_21517_i)++;
		}
	_iter_next_22a559bc0:;
	}
	_iter_end_22a559bc0:;;
}



inline void _227b610dc_remove_dead_traits(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Slice<jule::Ptr<_24547ec51_Trait>>& _23643_traits) {
	jule::I32 _23717_i = 0LL;;
	while ((_23717_i < _23643_traits.len())) {
		{
			jule::Ptr<_24547ec51_Trait> _23921_t = _23643_traits[_23717_i];;
			if ((!(_22a52b1ad_is_live(_self_, _23921_t)))) {
				_23643_traits=jule::append(_23643_traits.slice(0LL,_23717_i),_23643_traits.slice((_23717_i + 1LL)));
				goto _iter_next_22a55e7eb;
			};
			jule::I32 _24421_j = 0LL;;
			while ((_24421_j < _23921_t.get()._field_implemented.len())) {
				{
					jule::Ptr<_244848912_Struct> _24621_s = _23921_t.get()._field_implemented[_24421_j];;
					if ((_24621_s.get()._field_instances.len() > 0LL)) {
						(_24421_j)++;
						goto _iter_next_22a560489;
					};
					_23921_t.get()._field_implemented=jule::append(_23921_t.get()._field_implemented.slice(0LL,_24421_j),_23921_t.get()._field_implemented.slice((_24421_j + 1LL)));
				}
			_iter_next_22a560489:;
			}
			_iter_end_22a560489:;;
			(_23717_i)++;
		}
	_iter_next_22a55e7eb:;
	}
	_iter_end_22a55e7eb:;;
}



inline void _227b61362_remove_deads_file(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_2455b02e3_SymbolTable>& _25742_file) {
	_227b60ae2_remove_dead_fns(_self_, _25742_file.get()._field_funcs);
	_227b60d67_remove_dead_structs(_self_, _25742_file.get()._field_structs);
	_227b610dc_remove_dead_traits(_self_, _25742_file.get()._field_traits);
	_227b6086c_remove_dead_globals(_self_, _25742_file.get()._field_vars);
}



inline void _227b615d7_remove_deads_package(jule::Ptr<_227b31871_ObjectDeadCode> _self_, jule::Ptr<_24554ad1c_Package>& _26445_pkg) {
	{
		auto &expr = _26445_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a564ee9:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _26521_file = *it;
			{
				_227b61362_remove_deads_file(_self_, _26521_file);
			}
			_iter_next_22a564ee9:;
			++it;
			goto _iter_begin_22a564ee9;
		}
		_iter_end_22a564ee9:;
	};
}



inline void _227b617b3_remove_deads(jule::Ptr<_227b31871_ObjectDeadCode> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_22a565e1d:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _27121_used = *it;
			{
				if ((!(_27121_used.get()._field_cpp_linked))) {
					_227b615d7_remove_deads_package(_self_, _27121_used.get()._field_package);
				};
			}
			_iter_next_22a565e1d:;
			++it;
			goto _iter_begin_22a565e1d;
		}
		_iter_end_22a565e1d:;
	};
	_227b615d7_remove_deads_package(_self_, _self_.get()._field_ir.get()._field_main);
}



inline void _227b6198e_elimanate(jule::Ptr<_227b31871_ObjectDeadCode> _self_) {
	_227b605e7_collect_live(_self_);
	_227b617b3_remove_deads(_self_);
}







std::ostream &operator<<(std::ostream &_Stream, _227b31871_ObjectDeadCode _Src) {
	_Stream << "ObjectDeadCode{";
	_Stream << "live:" << _Src._field_live << ", ";
	_Stream << "ir:" << _Src._field_ir;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_22825bb05_ObjectCoder> static__22823eb2c_new(jule::Ptr<_2276b0301_IR>& _7228_ir, _22825b72b_SerializationInfo _7237_info) {
	jule::Ptr<_22825bb05_ObjectCoder> _7317_oc = jule::new_ptr<_22825bb05_ObjectCoder>(_22825bb05_ObjectCoder{._field_ir=_7228_ir, ._field_info=_7237_info, });;
	_7317_oc.get()._field_ec=static__2281d7e16_new(_7317_oc);
	_7317_oc.get()._field_sc=static__2281d05b2_new(_7317_oc);
	return _7317_oc;
}



inline void _22823ee5c_write(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Str _8225_s) {
	_self_.get()._field_obj+=_8225_s;
}



inline void _2282406ee_add_indent(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	;
	_self_.get()._field_indent_buffer+=jule::Str("\t", 1);
}



inline void _2282416de_done_indent(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_self_.get()._field_indent_buffer=_self_.get()._field_indent_buffer.slice(0LL,(_self_.get()._field_indent_buffer.len() - 1LL));
}



inline void _228241e3c_indent(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_self_.get()._field_obj+=_self_.get()._field_indent_buffer;
}



inline jule::I32 _2282312b1_find_type_offset(_22825bb05_ObjectCoder* _self_, jule::Ptr<_24547ec51_Trait> _10231_t, jule::Ptr<_2455e1027_TypeKind> _10246_k) {
	if ((_10231_t.get()._field_implemented.len() == 0LL)) {
		return 0LL;
	};
	jule::Ptr<_244874c5c_StructIns> _10617_s = nullptr;;
	if ((_2455e339d_sptr(_10246_k.ptr()) != nullptr)) {
		_10246_k=_2455e339d_sptr(_10246_k.ptr()).get()._field_elem;
	};
	if ((_2455e458b_strct(_10246_k.ptr()) == nullptr)) {
		return -1LL;
	};
	_10617_s=_2455e458b_strct(_10246_k.ptr());
	{
		auto &expr = (*_self_)._field_tmap;
		auto it = expr.begin();
		_iter_begin_22a94d701:;
		if (it != expr.end()) {
			jule::Ptr<_22825b918_TraitHash> &_11416_hash = *it;
			{
				if (((_11416_hash.get()._field_t == _10231_t) && (_11416_hash.get()._field_s == _10617_s))) {
					return _11416_hash.get()._field_i;
				};
			}
			_iter_next_22a94d701:;
			++it;
			goto _iter_begin_22a94d701;
		}
		_iter_end_22a94d701:;
	};
	return -1LL;
}



inline void _228243328_loc_info(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_2431e4523_Token>& _12329_t) {
	jule::Str &_12414_loc = _12329_t.get()._field_file.get()._field_path;;
	if (_240e658e5_PRODUCTION) {
		{
			
			if (_241ec93e7_has_prefix(_12414_loc,_242ddd4e7_PATH_STDLIB)) {
				_case_begin_22a950b54:;
				{
					_22823ee5c_write(_self_, _2281e4043_cstr_bytes(static_cast<jule::Slice<jule::U8>>(_12414_loc.slice((_241ea74c4_dir(_242ddd4e7_PATH_STDLIB).len() + 1LL)))));
				}
			}
			else if (_241ec93e7_has_prefix(_12414_loc,_self_.get()._field_ir.get()._field_root)) {
				_case_begin_22a950824:;
				{
					_22823ee5c_write(_self_, _2281e4043_cstr_bytes(static_cast<jule::Slice<jule::U8>>(_12414_loc.slice((_241ea74c4_dir(_self_.get()._field_ir.get()._field_root).len() + 1LL)))));
				}
			}
			else {
				_case_begin_22a9507ad:;
				{
					_22823ee5c_write(_self_, _2281e4043_cstr_bytes(static_cast<jule::Slice<jule::U8>>(_12414_loc)));
				}
			}
			_match_end_22a9506d1:;
		};
	} else {
		_22823ee5c_write(_self_, _2281e4043_cstr_bytes(static_cast<jule::Slice<jule::U8>>(_12414_loc)));
	};
	_22823ee5c_write(_self_, jule::Str(":", 1));
	_22823ee5c_write(_self_, _24547d975_itoa(_12329_t.get()._field_row));
	_22823ee5c_write(_self_, jule::Str(":", 1));
	_22823ee5c_write(_self_, _24547d975_itoa(_12329_t.get()._field_column));
}



inline void _228222956_head(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_228256407_Time _15013_time = static__22825699b_now();;
	_228255c64_AbsTime _15113_abs = _2282580da_abs(&_15013_time);;
	_22823ee5c_write(_self_, jule::Str("// Auto generated by JuleC.\n", 28));
	_22823ee5c_write(_self_, jule::Str("// JuleC version: ", 18));
	_22823ee5c_write(_self_, jule::Str("jule0.0.12 @master", 18));
	_22823ee5c_write(_self_, jule::Str("\n", 1));
	_22823ee5c_write(_self_, jule::Str("// Date: ", 9));
	_22823ee5c_write(_self_, _24547d348_fmt_uint(_15113_abs._field_day,10LL));
	_22823ee5c_write(_self_, jule::Str("/", 1));
	_22823ee5c_write(_self_, _24547d348_fmt_uint(_15113_abs._field_month,10LL));
	_22823ee5c_write(_self_, jule::Str("/", 1));
	_22823ee5c_write(_self_, _24547d348_fmt_uint(_15113_abs._field_year,10LL));
	_22823ee5c_write(_self_, jule::Str(" (DD/MM/YYYY) UTC\n//\n// Recomended Compile Command;\n// ", 55));
	_22823ee5c_write(_self_, _self_.get()._field_info._field_compiler);
	_22823ee5c_write(_self_, jule::Str(" ", 1));
	_22823ee5c_write(_self_, _self_.get()._field_info._field_compiler_command);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	if (_240e658e5_PRODUCTION) {
		_22823ee5c_write(_self_, jule::Str("#define __JULE_ENABLE__PRODUCTION\n", 34));
	};
	if ((!(_240e651b9_RC))) {
		_22823ee5c_write(_self_, jule::Str("#define __JULE_DISABLE__REFERENCE_COUNTING\n", 43));
	};
	if ((!(_240e655d7_SAFETY))) {
		_22823ee5c_write(_self_, jule::Str("#define __JULE_DISABLE__SAFETY\n", 31));
	};
	_22823ee5c_write(_self_, jule::Str("\n\n#include \"", 12));
	_22823ee5c_write(_self_, _242e105e6_PATH_API);
	_22823ee5c_write(_self_, jule::Str("\"\n\n", 3));
}



inline void _228240e4c_links(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_22a95ba94:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _18316_used = *it;
			{
				{
					
					if ((!(_18316_used.get()._field_cpp_linked))) {
						_case_begin_22a95d557:;
						{
							goto _iter_next_22a95ba94;
						}
					}
					else if (_242dae133_is_std_header_path(_18316_used.get()._field_path)) {
						_case_begin_22a95c963:;
						{
							_22823ee5c_write(_self_, jule::Str("#include ", 9));
							_22823ee5c_write(_self_, _18316_used.get()._field_path);
							_22823ee5c_write(_self_, jule::Str("\n", 1));
						}
					}
					else {
						_case_begin_22a95c5bc:;
						{
							_22823ee5c_write(_self_, jule::Str("#include \"", 10));
							_22823ee5c_write(_self_, _18316_used.get()._field_path);
							_22823ee5c_write(_self_, jule::Str("\"\n", 2));
						}
					}
					_match_end_22a95c4e0:;
				};
			}
			_iter_next_22a95ba94:;
			++it;
			goto _iter_begin_22a95ba94;
		}
		_iter_end_22a95ba94:;
	};
}



inline void _228226284_prepare_structures(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_22a95c2ae:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _20021_s = *it;
			{
				if ((_20021_s.get()._field_token != nullptr)) {
					_2282616ba_prepare_structure(_20021_s);
				};
			}
			_iter_next_22a95c2ae:;
			++it;
			goto _iter_begin_22a95c2ae;
		}
		_iter_end_22a95c2ae:;
	};
}



inline void _22822d0c1_iter_packages(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)> _20733_f) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_22a96025c:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _20821_used = *it;
			{
				if ((!(_20821_used.get()._field_cpp_linked))) {
					_20733_f(_20821_used.get()._field_package);
				};
			}
			_iter_next_22a96025c:;
			++it;
			goto _iter_begin_22a96025c;
		}
		_iter_end_22a96025c:;
	};
	_20733_f(_self_.get()._field_ir.get()._field_main);
}



inline void _22822d654_build_trait_map(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22822d0c1_iter_packages(_self_, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)>([=](jule::Ptr<_24554ad1c_Package>& _21736_pkg) mutable -> void {
		_228261467_iter_files(_21736_pkg,jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)>([=](jule::Ptr<_2455b02e3_SymbolTable>& _21837_file) mutable -> void {
			{
				auto &expr = _21837_file.get()._field_traits;
				auto it = expr.begin();
				_iter_begin_22a9640b8:;
				if (it != expr.end()) {
					jule::Ptr<_24547ec51_Trait> _21929_t = *it;
					{
						if ((_21929_t.get()._field_token == nullptr)) {
							return;;
						};
						if ((_21929_t.get()._field_implemented.len() == 0LL)) {
							_self_.get()._field_tmap = jule::alloc_for_append(_self_.get()._field_tmap,1);_self_.get()._field_tmap.__push(jule::new_ptr<_22825b918_TraitHash>(_22825b918_TraitHash{._field_t=_21929_t, ._field_s=nullptr, ._field_i=0LL}));;
							goto _iter_next_22a9640b8;
						};
						jule::I32 _23129_i = 0LL;;
						{
							auto &expr = _21929_t.get()._field_implemented;
							auto it = expr.begin();
							_iter_begin_22a9653a5:;
							if (it != expr.end()) {
								jule::Ptr<_244848912_Struct> _23233_s = *it;
								{
									{
										auto &expr = _23233_s.get()._field_instances;
										auto it = expr.begin();
										_iter_begin_22a964b79:;
										if (it != expr.end()) {
											jule::Ptr<_244874c5c_StructIns> _23337_ins = *it;
											{
												_self_.get()._field_tmap = jule::alloc_for_append(_self_.get()._field_tmap,1);_self_.get()._field_tmap.__push(jule::new_ptr<_22825b918_TraitHash>(_22825b918_TraitHash{._field_t=_21929_t, ._field_s=_23337_ins, ._field_i=_23129_i}));;
												(_23129_i)++;
											}
											_iter_next_22a964b79:;
											++it;
											goto _iter_begin_22a964b79;
										}
										_iter_end_22a964b79:;
									};
								}
								_iter_next_22a9653a5:;
								++it;
								goto _iter_begin_22a9653a5;
							}
							_iter_end_22a9653a5:;
						};
					}
					_iter_next_22a9640b8:;
					++it;
					goto _iter_begin_22a9640b8;
				}
				_iter_end_22a9640b8:;
			};
		}));
	}));
}



inline void _22822e523_trait_decls(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22822d0c1_iter_packages(_self_, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)>([=](jule::Ptr<_24554ad1c_Package>& _24836_pkg) mutable -> void {
		_228261467_iter_files(_24836_pkg,jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)>([=](jule::Ptr<_2455b02e3_SymbolTable>& _24937_file) mutable -> void {
			{
				auto &expr = _24937_file.get()._field_traits;
				auto it = expr.begin();
				_iter_begin_22a968b7d:;
				if (it != expr.end()) {
					jule::Ptr<_24547ec51_Trait> _25029_t = *it;
					{
						if ((_25029_t.get()._field_token == nullptr)) {
							return;;
						};
						_228241e3c_indent(_self_);
						_22823ee5c_write(_self_, jule::Str("struct ", 7));
						_22823ee5c_write(_self_, static__2281ea676_trait_decl(_25029_t));
						_22823ee5c_write(_self_, jule::Str("{};\n", 4));
					}
					_iter_next_22a968b7d:;
					++it;
					goto _iter_begin_22a968b7d;
				}
				_iter_end_22a968b7d:;
			};
		}));
	}));
}



inline void _22822ebd8_structure_plain_decl(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244848912_Struct>& _26345_s) {
	{
		auto &expr = _26345_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22a968771:;
		if (it != expr.end()) {
			jule::Ptr<_244874c5c_StructIns> _26421_ins = *it;
			{
				_22823ee5c_write(_self_, jule::Str("struct ", 7));
				_22823ee5c_write(_self_, static__2281eae5c_structure_ins(_26421_ins));
				_22823ee5c_write(_self_, jule::Str(";\n", 2));
			}
			_iter_next_22a968771:;
			++it;
			goto _iter_begin_22a968771;
		}
		_iter_end_22a968771:;
	};
}



inline void _22823039d_structure_plain_decls(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_22a96ae16:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _27221_s = *it;
			{
				if ((_27221_s.get()._field_token != nullptr)) {
					_22822ebd8_structure_plain_decl(_self_, _27221_s);
				};
			}
			_iter_next_22a96ae16:;
			++it;
			goto _iter_begin_22a96ae16;
		}
		_iter_end_22a96ae16:;
	};
}



inline void _228230a63_field_decl(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244851079_FieldIns>& _27935_f) {
	_22823ee5c_write(_self_, static__228267528_kind(_27935_f.get()._field_kind));
	_22823ee5c_write(_self_, jule::Str(" ", 1));
	_22823ee5c_write(_self_, static__2281eb204_field(_27935_f.get()._field_decl));
	_22823ee5c_write(_self_, jule::Str(" = ", 3));
	if ((_27935_f.get()._field_default == nullptr)) {
		_2281e365d_init_expr(_self_.get()._field_ec, _27935_f.get()._field_kind);
	} else {
		_2281e3163_expr(_self_.get()._field_ec, _27935_f.get()._field_default.get()._field_model);
	};
	_22823ee5c_write(_self_, jule::Str(";", 1));
}



inline void _22822764d_structure_destructor(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _29445_s) {
	;
	jule::Ptr<_244926d0e_Fn> _29613_dispose_method = _24484edd0_find_method(_29445_s.ptr(), jule::Str("dispose", 7),false);;
	jule::Bool _29717_disposed = static__24556ddb7_dispose(_29613_dispose_method);;
	if ((!(_29717_disposed))) {
		return;;
	};
	_22823ee5c_write(_self_, jule::Str("~", 1));
	_22823ee5c_write(_self_, static__2281eae5c_structure_ins(_29445_s));
	_22823ee5c_write(_self_, jule::Str("(void) { ", 9));
	_22823ee5c_write(_self_, static__2281ea137_func(_29613_dispose_method));
	_22823ee5c_write(_self_, jule::Str("(this); }", 9));
}



inline void _22825c199_structure_derive_defs_decls(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _30948_s) {
	if (_244839969_is_derives(_30948_s.get()._field_decl.ptr(), jule::Str("Clone", 5))) {
		_228241e3c_indent(_self_);
		_22823ee5c_write(_self_, static__2281e5bc1_clone_func_decl(_30948_s.get()._field_decl));
		_22823ee5c_write(_self_, jule::Str(";\n\n", 3));
	};
}



inline void _22825c2cb_structure_operator_eq(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Str& _31742_ident, jule::Ptr<_244874c5c_StructIns>& _31759_s) {
	if ((_31759_s.get()._field_operators._field_eq != nullptr)) {
		_22825c540_structure_operator(_self_, _31742_ident,_31759_s.get()._field_operators._field_eq,jule::Str("==", 2));
		return;;
	};
	_228241e3c_indent(_self_);
	if (_2456b7791_INLINE) {
		_22823ee5c_write(_self_, jule::Str("inline ", 7));
	};
	_22823ee5c_write(_self_, jule::Str("bool operator==(", 16));
	_22823ee5c_write(_self_, _31742_ident);
	_22823ee5c_write(_self_, jule::Str(" _other) {", 10));
	if ((_31759_s.get()._field_fields.len() > 0LL)) {
		_2282406ee_add_indent(_self_);
		_22823ee5c_write(_self_, jule::Str("\n", 1));
		_228241e3c_indent(_self_);
		_22823ee5c_write(_self_, jule::Str("return ", 7));
		_2282406ee_add_indent(_self_);
		jule::Bool _33721_writed = false;;
		{
			auto &expr = _31759_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_22a979397:;
			if (it != expr.end()) {
				jule::Ptr<_244851079_FieldIns> _33825_f = *it;
				{
					jule::Ptr<_244874c5c_StructIns> _34021_strct = _2455e458b_strct(_33825_f.get()._field_kind.ptr());;
					if ((((_34021_strct != nullptr) && (_34021_strct.get()._field_decl != nullptr)) && _34021_strct.get()._field_decl.get()._field_cpp_linked)) {
						goto _iter_next_22a979397;
					};
					if (_33721_writed) {
						_22823ee5c_write(_self_, jule::Str(" &&", 3));
					};
					_33721_writed=true;
					_22823ee5c_write(_self_, jule::Str("\n", 1));
					_228241e3c_indent(_self_);
					_22823ee5c_write(_self_, jule::Str("this->", 6));
					jule::Str _35221_f_ident = static__2281eb204_field(_33825_f.get()._field_decl);;
					_22823ee5c_write(_self_, _35221_f_ident);
					_22823ee5c_write(_self_, jule::Str(" == _other.", 11));
					_22823ee5c_write(_self_, _35221_f_ident);
				}
				_iter_next_22a979397:;
				++it;
				goto _iter_begin_22a979397;
			}
			_iter_end_22a979397:;
		};
		_2282416de_done_indent(_self_);
		if ((!(_33721_writed))) {
			_22823ee5c_write(_self_, jule::Str("true", 4));
		};
		_22823ee5c_write(_self_, jule::Str(";\n", 2));
		_2282416de_done_indent(_self_);
		_228241e3c_indent(_self_);
		_22823ee5c_write(_self_, jule::Str("}", 1));
	} else {
		_22823ee5c_write(_self_, jule::Str(" return true; }", 15));
	};
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
}



inline void _22825c40d_structure_operator_not_eq(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Str& _37146_ident, jule::Ptr<_244874c5c_StructIns>& _37163_s) {
	_228241e3c_indent(_self_);
	if (_2456b7791_INLINE) {
		_22823ee5c_write(_self_, jule::Str("inline ", 7));
	};
	_22823ee5c_write(_self_, jule::Str("bool operator!=(", 16));
	_22823ee5c_write(_self_, _37146_ident);
	_22823ee5c_write(_self_, jule::Str(" _other) { return !this->operator==(_other); }\n\n", 48));
}



inline void _22825c540_structure_operator(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Str& _38239_ident, jule::Ptr<_2449299b0_FnIns>& _38256_f, jule::Str _38267_op) {
	if ((_38256_f == nullptr)) {
		return;;
	};
	jule::Bool _38713_unary = (_38256_f.get()._field_params.len() == 1LL);;
	jule::Bool _38813_assignment = _244927271_is_void(_38256_f.get()._field_decl.ptr());;
	_228241e3c_indent(_self_);
	if (_2456b7791_INLINE) {
		_22823ee5c_write(_self_, jule::Str("inline ", 7));
	};
	if (_38813_assignment) {
		_22823ee5c_write(_self_, _38239_ident);
		_22823ee5c_write(_self_, jule::Str("&", 1));
	} else {
		if ((_2455e3139_prim(_38256_f.get()._field_result.ptr()) == nullptr)) {
			_22823ee5c_write(_self_, _38239_ident);
		} else {
			_22823ee5c_write(_self_, jule::Str("jule::Bool", 10));
		};
	};
	_22823ee5c_write(_self_, jule::Str(" operator", 9));
	_22823ee5c_write(_self_, _38267_op);
	_22823ee5c_write(_self_, jule::Str("(", 1));
	if ((!(_38713_unary))) {
		jule::Ptr<_244928ae1_ParamIns> _41021_p = _38256_f.get()._field_params[1LL];;
		_22823ee5c_write(_self_, static__228266703_param_ins(_41021_p));
		_22823ee5c_write(_self_, jule::Str(" _other", 7));
	};
	_22823ee5c_write(_self_, jule::Str(") { ", 4));
	if ((!(_38813_assignment))) {
		_22823ee5c_write(_self_, jule::Str("return ", 7));
	};
	_22823ee5c_write(_self_, static__2281ea3ce_func_ins(_38256_f));
	if ((!(_38713_unary))) {
		_22823ee5c_write(_self_, jule::Str("(this, _other); ", 16));
		if (_38813_assignment) {
			_22823ee5c_write(_self_, jule::Str("return *this; ", 14));
		};
		_22823ee5c_write(_self_, jule::Str("}", 1));
	} else {
		_22823ee5c_write(_self_, jule::Str("(this); }", 9));
	};
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
}



inline void _22825c672_structure_operators(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _43144_s) {
	jule::Str _43213_ident = static__2281eae5c_structure_ins(_43144_s);;
	_22825c2cb_structure_operator_eq(_self_, _43213_ident,_43144_s);
	_22825c40d_structure_operator_not_eq(_self_, _43213_ident,_43144_s);
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_gt,jule::Str(">", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_gt_eq,jule::Str(">=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_lt,jule::Str("<", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_lt_eq,jule::Str("<=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_shl,jule::Str("<<", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_shr,jule::Str(">>", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_add,jule::Str("+", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_sub,jule::Str("-", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_div,jule::Str("/", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_mul,jule::Str("*", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_mod,jule::Str("%", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_bit_and,jule::Str("&", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_bit_or,jule::Str("|", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_bit_xor,jule::Str("^", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_neg,jule::Str("-", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_pos,jule::Str("+", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_bit_not,jule::Str("~", 1));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_add_assign,jule::Str("+=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_sub_assign,jule::Str("-=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_div_assign,jule::Str("/=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_mul_assign,jule::Str("*=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_mod_assign,jule::Str("%=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_shl_assign,jule::Str("<<=", 3));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_shr_assign,jule::Str(">>=", 3));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_bit_or_assign,jule::Str("|=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_bit_and_assign,jule::Str("&=", 2));
	_22825c540_structure_operator(_self_, _43213_ident,_43144_s.get()._field_operators._field_bit_xor_assign,jule::Str("^=", 2));
}



inline void _22825c7a4_structure_ins_decl(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _47043_s) {
	if ((_47043_s.get()._field_methods.len() > 0LL)) {
		{
			auto &expr = _47043_s.get()._field_methods;
			auto it = expr.begin();
			_iter_begin_22a997283:;
			if (it != expr.end()) {
				jule::Ptr<_244926d0e_Fn> _47225_m = *it;
				{
					_22825cdae_func_decl(_self_, _47225_m,false);
				}
				_iter_next_22a997283:;
				++it;
				goto _iter_begin_22a997283;
			}
			_iter_end_22a997283:;
		};
	};
	_22823ee5c_write(_self_, jule::Str("struct ", 7));
	jule::Str _47813_out_ident = static__2281eae5c_structure_ins(_47043_s);;
	_22823ee5c_write(_self_, _47813_out_ident);
	_22823ee5c_write(_self_, jule::Str(" {\n", 3));
	_2282406ee_add_indent(_self_);
	{
		auto &expr = _47043_s.get()._field_fields;
		auto it = expr.begin();
		_iter_begin_22a999285:;
		if (it != expr.end()) {
			jule::Ptr<_244851079_FieldIns> _48421_f = *it;
			{
				_228241e3c_indent(_self_);
				_228230a63_field_decl(_self_, _48421_f);
				_22823ee5c_write(_self_, jule::Str("\n", 1));
			}
			_iter_next_22a999285:;
			++it;
			goto _iter_begin_22a999285;
		}
		_iter_end_22a999285:;
	};
	_228241e3c_indent(_self_);
	_22822764d_structure_destructor(_self_, _47043_s);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	_228241e3c_indent(_self_);
	_22823ee5c_write(_self_, _47813_out_ident);
	_22823ee5c_write(_self_, jule::Str("(void) = default;\n\n", 19));
	_22825c199_structure_derive_defs_decls(_self_, _47043_s);
	_22825c672_structure_operators(_self_, _47043_s);
	_22823ee5c_write(_self_, jule::Str("\n", 1));
	_2282416de_done_indent(_self_);
	_228241e3c_indent(_self_);
	_22823ee5c_write(_self_, jule::Str("};", 2));
}



inline void _22825c8d6_structure_decl(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244848912_Struct>& _50939_s) {
	{
		auto &expr = _50939_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22a99d311:;
		if (it != expr.end()) {
			jule::Ptr<_244874c5c_StructIns> _51021_ins = *it;
			{
				_22825c7a4_structure_ins_decl(_self_, _51021_ins);
			}
			_iter_next_22a99d311:;
			++it;
			goto _iter_begin_22a99d311;
		}
		_iter_end_22a99d311:;
	};
}



inline void _22825ca18_structure_decls(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_22a99e235:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _51621_s = *it;
			{
				if ((_51621_s.get()._field_token != nullptr)) {
					_22825c8d6_structure_decl(_self_, _51621_s);
					_22823ee5c_write(_self_, jule::Str("\n", 1));
				};
			}
			_iter_next_22a99e235:;
			++it;
			goto _iter_begin_22a99e235;
		}
		_iter_end_22a99e235:;
	};
}



inline void _22825cb4a_params_decls(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>& _52437_params) {
	if ((_52437_params.len() == 0LL)) {
		_22823ee5c_write(_self_, jule::Str("(void)", 6));
		return;;
	};
	_22823ee5c_write(_self_, jule::Str("(", 1));
	{
		auto &expr = _52437_params;
		auto it = expr.begin();
		_iter_begin_22a9a1303:;
		if (it != expr.end()) {
			jule::I32 _53114_i = it - expr.begin();
			jule::Ptr<_244928ae1_ParamIns> _53121_p = *it;
			{
				_22823ee5c_write(_self_, static__228266703_param_ins(_53121_p));
				if (((_52437_params.len() - _53114_i) > 1LL)) {
					_22823ee5c_write(_self_, jule::Str(", ", 2));
				};
			}
			_iter_next_22a9a1303:;
			++it;
			_53114_i++;
			goto _iter_begin_22a9a1303;
		}
		_iter_end_22a9a1303:;
	};
	_22823ee5c_write(_self_, jule::Str(")", 1));
}



inline void _22825cc7c_func_head(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_2449299b0_FnIns>& _54134_f, jule::Bool _54145_ptr) {
	if ((((!(_54145_ptr)) && _2456b7791_INLINE) && (!(_244927749_is_entry_point(_54134_f.get()._field_decl.ptr()))))) {
		_22823ee5c_write(_self_, jule::Str("inline ", 7));
	};
	_22823ee5c_write(_self_, static__228266c42_func_ins_result(_54134_f));
	if (_54145_ptr) {
		_22823ee5c_write(_self_, jule::Str("(*", 2));
		_22823ee5c_write(_self_, static__2281ea3ce_func_ins(_54134_f));
		_22823ee5c_write(_self_, jule::Str(")", 1));
	} else {
		_22823ee5c_write(_self_, jule::Str(" ", 1));
		_22823ee5c_write(_self_, static__2281ea3ce_func_ins(_54134_f));
	};
}



inline void _22825cdae_func_decl(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244926d0e_Fn>& _55634_f, jule::Bool _55642_ptr) {
	{
		auto &expr = _55634_f.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22a9a676a:;
		if (it != expr.end()) {
			jule::Ptr<_2449299b0_FnIns> _55721_c = *it;
			{
				_228241e3c_indent(_self_);
				_22825cc7c_func_head(_self_, _55721_c,_55642_ptr);
				_22825cb4a_params_decls(_self_, _55721_c.get()._field_params);
				_22823ee5c_write(_self_, jule::Str(";\n", 2));
			}
			_iter_next_22a9a676a:;
			++it;
			goto _iter_begin_22a9a676a;
		}
		_iter_end_22a9a676a:;
	};
}



inline void _22825cee1_func_decls(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22822d0c1_iter_packages(_self_, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)>([=](jule::Ptr<_24554ad1c_Package>& _56636_pkg) mutable -> void {
		_228261467_iter_files(_56636_pkg,jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)>([=](jule::Ptr<_2455b02e3_SymbolTable>& _56737_file) mutable -> void {
			{
				auto &expr = _56737_file.get()._field_funcs;
				auto it = expr.begin();
				_iter_begin_22a9a9d45:;
				if (it != expr.end()) {
					jule::Ptr<_244926d0e_Fn> _56829_f = *it;
					{
						if (((!(_56829_f.get()._field_cpp_linked)) && (_56829_f.get()._field_token != nullptr))) {
							_22825cdae_func_decl(_self_, _56829_f,false);
						};
					}
					_iter_next_22a9a9d45:;
					++it;
					goto _iter_begin_22a9a9d45;
				}
				_iter_end_22a9a9d45:;
			};
		}));
	}));
}



inline void _22825d123_trait_data_types(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22822d0c1_iter_packages(_self_, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)>([=](jule::Ptr<_24554ad1c_Package>& _57836_pkg) mutable -> void {
		_228261467_iter_files(_57836_pkg,jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)>([=](jule::Ptr<_2455b02e3_SymbolTable>& _57937_file) mutable -> void {
			{
				auto &expr = _57937_file.get()._field_traits;
				auto it = expr.begin();
				_iter_begin_22a9acb28:;
				if (it != expr.end()) {
					jule::Ptr<_24547ec51_Trait> _58029_t = *it;
					{
						if ((_58029_t.get()._field_token == nullptr)) {
							return;;
						};
						_22823ee5c_write(_self_, jule::Str("struct ", 7));
						_22823ee5c_write(_self_, static__2281ea676_trait_decl(_58029_t));
						_22823ee5c_write(_self_, jule::Str("MptrData", 8));
						_22823ee5c_write(_self_, jule::Str(" {\n", 3));
						_2282406ee_add_indent(_self_);
						{
							auto &expr = _58029_t.get()._field_methods;
							auto it = expr.begin();
							_iter_begin_22a9ae8d8:;
							if (it != expr.end()) {
								jule::Ptr<_244926d0e_Fn> _58933_m = *it;
								{
									jule::Ptr<_2449299b0_FnIns> _59033_ins = _58933_m.get()._field_instances[0LL];;
									jule::Ptr<_244928ae1_ParamIns> _59133_p = _59033_ins.get()._field_params[0LL];;
									_59133_p.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_58029_t, 2)});
									{
										auto expr = _59033_ins.get()._field_params.slice(1LL);
										auto it = expr.begin();
										_iter_begin_22a9b1d4c:;
										if (it != expr.end()) {
											jule::I32 _59530_i = it - expr.begin();
											jule::Ptr<_244928ae1_ParamIns> _59537_ip = *it;
											{
												if (_2431e705e_is_anon_ident(_59537_ip.get()._field_decl.get()._field_ident)) {
													_59537_ip.get()._field_decl.get()._field_ident=(jule::Str("_", 1) + _24547d975_itoa(_59530_i));
												};
											}
											_iter_next_22a9b1d4c:;
											++it;
											_59530_i++;
											goto _iter_begin_22a9b1d4c;
										}
										_iter_end_22a9b1d4c:;
									};
									if ((!(_240e658e5_PRODUCTION))) {
										_59033_ins.get()._field_params = jule::alloc_for_append(_59033_ins.get()._field_params,1);_59033_ins.get()._field_params.__push(jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_ident=jule::Str("__file", 6)}), ._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_228262677_CustomType>(_228262677_CustomType{._field_kind=jule::Str("const char*", 11)}), 13)})}));;
									};
									_22825cdae_func_decl(_self_, _58933_m,true);
								}
								_iter_next_22a9ae8d8:;
								++it;
								goto _iter_begin_22a9ae8d8;
							}
							_iter_end_22a9ae8d8:;
						};
						_2282416de_done_indent(_self_);
						_228241e3c_indent(_self_);
						_22823ee5c_write(_self_, jule::Str("};\n\n", 4));
					}
					_iter_next_22a9acb28:;
					++it;
					goto _iter_begin_22a9acb28;
				}
				_iter_end_22a9acb28:;
			};
		}));
	}));
}



inline void _22825d255_param_ins(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244928ae1_ParamIns>& _62234_p) {
	_22823ee5c_write(_self_, static__228266703_param_ins(_62234_p));
	_22823ee5c_write(_self_, jule::Str(" ", 1));
	_22823ee5c_write(_self_, static__2281ea91d_param(_62234_p.get()._field_decl));
}



inline void _22825d475_params_ins(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Slice<jule::Ptr<_244928ae1_ParamIns>>& _62835_params) {
	if ((_62835_params.len() == 0LL)) {
		_22823ee5c_write(_self_, jule::Str("(void)", 6));
		return;;
	};
	_22823ee5c_write(_self_, jule::Str("(", 1));
	{
		auto &expr = _62835_params;
		auto it = expr.begin();
		_iter_begin_22a9b655a:;
		if (it != expr.end()) {
			jule::I32 _63414_i = it - expr.begin();
			jule::Ptr<_244928ae1_ParamIns> _63421_p = *it;
			{
				_22825d255_param_ins(_self_, _63421_p);
				if (((_62835_params.len() - _63414_i) > 1LL)) {
					_22823ee5c_write(_self_, jule::Str(", ", 2));
				};
			}
			_iter_next_22a9b655a:;
			++it;
			_63414_i++;
			goto _iter_begin_22a9b655a;
		}
		_iter_end_22a9b655a:;
	};
	_22823ee5c_write(_self_, jule::Str(")", 1));
}



inline void _22825d794_var_init_expr(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_24556cc1d_Var>& _64338_v, jule::Fn<void(void)> _64347_init) {
	if (_64338_v.get()._field_statically) {
		_22823ee5c_write(_self_, jule::Str("static ", 7));
	};
	_22823ee5c_write(_self_, static__228267528_kind(_64338_v.get()._field_kind.get()._field_kind));
	_22823ee5c_write(_self_, jule::Str(" ", 1));
	if (_64338_v.get()._field_reference) {
		_22823ee5c_write(_self_, jule::Str("&", 1));
	};
	_22823ee5c_write(_self_, static__2281eb49b_var(_64338_v));
	if ((_64347_init != nullptr)) {
		_22823ee5c_write(_self_, jule::Str(" = ", 3));
		_64347_init();
	};
	_22823ee5c_write(_self_, jule::Str(";", 1));
}



inline void _22825da19_var(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_24556cc1d_Var> _66127_v) {
	if (_2431e6cb7_is_ignore_ident(_66127_v.get()._field_ident)) {
		return;;
	};
	if (((_66127_v.get()._field_value != nullptr) && (_66127_v.get()._field_value.get()._field_expr != nullptr))) {
		if ((_66127_v.get()._field_value.get()._field_data.get()._field_model != nullptr)) {
			_22825d794_var_init_expr(_self_, _66127_v,jule::Fn<void(void)>([=](void) mutable -> void {
				_2281e33d8_val(_self_.get()._field_ec, _66127_v.get()._field_value);
			}));
			return;;
		};
		_22825d794_var_init_expr(_self_, _66127_v,nullptr);
		return;;
	};
	_22825d794_var_init_expr(_self_, _66127_v,jule::Fn<void(void)>([=](void) mutable -> void {
		_2281e365d_init_expr(_self_.get()._field_ec, _66127_v.get()._field_kind.get()._field_kind);
	}));
}



inline void _22825dc8e_func(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244926d0e_Fn>& _67629_f) {
	{
		auto &expr = _67629_f.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22a9c04dc:;
		if (it != expr.end()) {
			jule::Ptr<_2449299b0_FnIns> _67721_ins = *it;
			{
				_22825cc7c_func_head(_self_, _67721_ins,false);
				_22825d475_params_ins(_self_, _67721_ins.get()._field_params);
				_22823ee5c_write(_self_, jule::Str(" ", 1));
				_2281d5199_func_scope(_self_.get()._field_sc, _67721_ins);
				if ((_67721_ins.get()._field_scope != nullptr)) {
					_22823ee5c_write(_self_, jule::Str("\n\n", 2));
				};
			}
			_iter_next_22a9c04dc:;
			++it;
			goto _iter_begin_22a9c04dc;
		}
		_iter_end_22a9c04dc:;
	};
}



inline void _22825de6a_trait_wrappers(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	{
		auto &expr = _self_.get()._field_tmap;
		auto it = expr.begin();
		_iter_begin_22a9c0c29:;
		if (it != expr.end()) {
			jule::Ptr<_22825b918_TraitHash> _68921_hash = *it;
			{
				{
					auto &expr = _68921_hash.get()._field_t.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_22a9c307d:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _69025_m = *it;
						{
							jule::Str _69121_ident = _69025_m.get()._field_ident;;
							_69025_m.get()._field_instances[0LL].get()._field_scope=nullptr;
							_69025_m.get()._field_ident=((_69121_ident + jule::Str("_", 1)) + _24547d975_itoa(_68921_hash.get()._field_i));
							_22825dc8e_func(_self_, _69025_m);
							_69025_m.get()._field_ident=_69121_ident;
							if ((_68921_hash.get()._field_s == nullptr)) {
								if (_240e658e5_PRODUCTION) {
									_22823ee5c_write(_self_, jule::Str(" { jule::panic(__JULE_ERROR__INVALID_MEMORY); }\n", 48));
								} else {
									_22823ee5c_write(_self_, jule::Str(" { jule::panic(jule::Str(__JULE_ERROR__INVALID_MEMORY \"\\nlocation: \") + jule::Str(_00___file)); }\n", 98));
								};
								goto _iter_next_22a9c307d;
							};
							jule::Bool _70721_ptr = (!(_244925d63_is_ref(_69025_m.get()._field_params[0LL].ptr())));;
							jule::Ptr<_244926d0e_Fn> _70925_sm = _24484edd0_find_method(_68921_hash.get()._field_s.ptr(), _69025_m.get()._field_ident,false);;
							if (((_70925_sm == nullptr) || (_70925_sm.get()._field_instances.len() == 0LL))) {
								goto _iter_next_22a9c307d;
							};
							_2282406ee_add_indent(_self_);
							_22823ee5c_write(_self_, jule::Str("{\n", 2));
							_228241e3c_indent(_self_);
							if ((!(_244927271_is_void(_70925_sm.ptr())))) {
								_22823ee5c_write(_self_, jule::Str("return ", 7));
							};
							_22823ee5c_write(_self_, static__2281ea137_func(_70925_sm));
							_22823ee5c_write(_self_, jule::Str("(", 1));
							if (_70721_ptr) {
								_22823ee5c_write(_self_, jule::Str("_self_.safe_ptr<", 16));
								_22823ee5c_write(_self_, static__228265e1c_structure_ins(_68921_hash.get()._field_s));
								_22823ee5c_write(_self_, jule::Str(">(", 2));
								if ((!(_240e658e5_PRODUCTION))) {
									_22823ee5c_write(_self_, jule::Str("_00___file", 10));
								};
								_22823ee5c_write(_self_, jule::Str(")", 1));
							} else {
								_22823ee5c_write(_self_, jule::Str("_self_.data.as<", 15));
								_22823ee5c_write(_self_, static__228265b75_structure(_70925_sm.get()._field_owner));
								_22823ee5c_write(_self_, jule::Str(">()", 3));
							};
							{
								auto expr = _69025_m.get()._field_params.slice(1LL);
								auto it = expr.begin();
								_iter_begin_22a9cc3c8:;
								if (it != expr.end()) {
									jule::Ptr<_2449254c2_Param> _73524_mp = *it;
									{
										_22823ee5c_write(_self_, jule::Str(", ", 2));
										_22823ee5c_write(_self_, static__2281ea91d_param(_73524_mp));
									}
									_iter_next_22a9cc3c8:;
									++it;
									goto _iter_begin_22a9cc3c8;
								}
								_iter_end_22a9cc3c8:;
							};
							_22823ee5c_write(_self_, jule::Str(");\n}\n", 5));
							_2282416de_done_indent(_self_);
						}
						_iter_next_22a9c307d:;
						++it;
						goto _iter_begin_22a9c307d;
					}
					_iter_end_22a9c307d:;
				};
			}
			_iter_next_22a9c0c29:;
			++it;
			goto _iter_begin_22a9c0c29;
		}
		_iter_end_22a9c0c29:;
	};
}



inline void _22825e146_trait_datas(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	jule::Ptr<_24547ec51_Trait> _74617_old = nullptr;;
	{
		auto &expr = _self_.get()._field_tmap;
		auto it = expr.begin();
		_iter_begin_22a9cdb9e:;
		if (it != expr.end()) {
			jule::Ptr<_22825b918_TraitHash> _74721_hash = *it;
			{
				jule::Str _74817_ident = static__2281ea676_trait_decl(_74721_hash.get()._field_t);;
				if ((_74721_hash.get()._field_t != _74617_old)) {
					if ((_74617_old != nullptr)) {
						_2282416de_done_indent(_self_);
						_228241e3c_indent(_self_);
						_22823ee5c_write(_self_, jule::Str("};\n", 3));
					};
					_22823ee5c_write(_self_, jule::Str("static ", 7));
					_22823ee5c_write(_self_, _74817_ident);
					_22823ee5c_write(_self_, jule::Str("MptrData ", 9));
					_22823ee5c_write(_self_, _74817_ident);
					_22823ee5c_write(_self_, jule::Str("_mptr_data[] = {\n", 17));
					_74617_old=_74721_hash.get()._field_t;
					_2282406ee_add_indent(_self_);
				};
				_228241e3c_indent(_self_);
				_22823ee5c_write(_self_, jule::Str("{\n", 2));
				_2282406ee_add_indent(_self_);
				{
					auto &expr = _74721_hash.get()._field_t.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_22a9d29d8:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _76625_m = *it;
						{
							jule::Str _76721_m_ident = static__2281ea137_func(_76625_m);;
							_228241e3c_indent(_self_);
							_22823ee5c_write(_self_, jule::Str(".", 1));
							_22823ee5c_write(_self_, _76721_m_ident);
							_22823ee5c_write(_self_, jule::Str("=", 1));
							_22823ee5c_write(_self_, _76721_m_ident);
							_22823ee5c_write(_self_, jule::Str("_", 1));
							_22823ee5c_write(_self_, _24547d975_itoa(_74721_hash.get()._field_i));
							_22823ee5c_write(_self_, jule::Str(",\n", 2));
						}
						_iter_next_22a9d29d8:;
						++it;
						goto _iter_begin_22a9d29d8;
					}
					_iter_end_22a9d29d8:;
				};
				_2282416de_done_indent(_self_);
				_228241e3c_indent(_self_);
				_22823ee5c_write(_self_, jule::Str("},\n", 3));
			}
			_iter_next_22a9cdb9e:;
			++it;
			goto _iter_begin_22a9cdb9e;
		}
		_iter_end_22a9cdb9e:;
	};
	if ((_74617_old != nullptr)) {
		_2282416de_done_indent(_self_);
		_228241e3c_indent(_self_);
		_22823ee5c_write(_self_, jule::Str("};\n", 3));
	};
}



inline void _22825e322_globals(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_ordered._field_globals;
		auto it = expr.begin();
		_iter_begin_22a9db54c:;
		if (it != expr.end()) {
			jule::Ptr<_24556cc1d_Var> _78921_v = *it;
			{
				_22823ee5c_write(_self_, static__228267528_kind(_78921_v.get()._field_kind.get()._field_kind));
				_22823ee5c_write(_self_, jule::Str(" ", 1));
				if (_78921_v.get()._field_reference) {
					_22823ee5c_write(_self_, jule::Str("&", 1));
				};
				_22823ee5c_write(_self_, static__2281eb49b_var(_78921_v));
				_22823ee5c_write(_self_, jule::Str(" = ", 3));
				_2281e33d8_val(_self_.get()._field_ec, _78921_v.get()._field_value);
				_22823ee5c_write(_self_, jule::Str(";\n", 2));
			}
			_iter_next_22a9db54c:;
			++it;
			goto _iter_begin_22a9db54c;
		}
		_iter_end_22a9db54c:;
	};
}



inline void _22825e4ed_decls(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22822e523_trait_decls(_self_);
	_22823039d_structure_plain_decls(_self_);
	_22825ca18_structure_decls(_self_);
	_22825cee1_func_decls(_self_);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	_22825d123_trait_data_types(_self_);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	_22825de6a_trait_wrappers(_self_);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	_22825e146_trait_datas(_self_);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	_22825e322_globals(_self_);
}



inline void _22825e773_structure_methods(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _81742_s) {
	{
		auto &expr = _81742_s.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_22a9e2bc4:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _81821_f = *it;
			{
				_22825dc8e_func(_self_, _81821_f);
				_22823ee5c_write(_self_, jule::Str("\n\n", 2));
			}
			_iter_next_22a9e2bc4:;
			++it;
			goto _iter_begin_22a9e2bc4;
		}
		_iter_end_22a9e2bc4:;
	};
}



inline void _22825e9e8_structure_derive_defs(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _82446_s) {
	if (_244839969_is_derives(_82446_s.get()._field_decl.ptr(), jule::Str("Clone", 5))) {
		_22823ee5c_write(_self_, static__2281e5e68_clone_func_def(_82446_s.get()._field_decl));
		_22823ee5c_write(_self_, jule::Str("{\n", 2));
		_2282406ee_add_indent(_self_);
		_228241e3c_indent(_self_);
		_22823ee5c_write(_self_, static__228265e1c_structure_ins(_82446_s));
		_22823ee5c_write(_self_, jule::Str(" clone;\n", 8));
		{
			auto &expr = _82446_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_22a9e591e:;
			if (it != expr.end()) {
				jule::Ptr<_244851079_FieldIns> _83220_f = *it;
				{
					jule::Str _83321_ident = static__2281eb204_field(_83220_f.get()._field_decl);;
					_228241e3c_indent(_self_);
					_22823ee5c_write(_self_, jule::Str("clone.", 6));
					_22823ee5c_write(_self_, _83321_ident);
					_22823ee5c_write(_self_, jule::Str(" = jule::clone(this->", 21));
					_22823ee5c_write(_self_, _83321_ident);
					_22823ee5c_write(_self_, jule::Str(");\n", 3));
				}
				_iter_next_22a9e591e:;
				++it;
				goto _iter_begin_22a9e591e;
			}
			_iter_end_22a9e591e:;
		};
		_228241e3c_indent(_self_);
		_22823ee5c_write(_self_, jule::Str("return clone;\n", 14));
		_2282416de_done_indent(_self_);
		_22823ee5c_write(_self_, jule::Str("}", 1));
	};
}



inline void _22825ec6d_structure_ostream(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _84842_s) {
	_228241e3c_indent(_self_);
	_22823ee5c_write(_self_, jule::Str("std::ostream &operator<<(std::ostream &_Stream, ", 48));
	_22823ee5c_write(_self_, static__2281eae5c_structure_ins(_84842_s));
	_22823ee5c_write(_self_, jule::Str(" _Src) {\n", 9));
	_2282406ee_add_indent(_self_);
	_228241e3c_indent(_self_);
	jule::Ptr<_244926d0e_Fn> _85617_fts = _24484edd0_find_method(_84842_s.ptr(), jule::Str("to_str", 6),false);;
	if (static__24556e15e_to_str(_85617_fts)) {
		_22823ee5c_write(_self_, jule::Str("_Stream << ", 11));
		_22823ee5c_write(_self_, static__2281ea137_func(_85617_fts));
		_22823ee5c_write(_self_, jule::Str("(&_Src);\n", 9));
	} else {
		_22823ee5c_write(_self_, jule::Str("_Stream << \"", 12));
		_22823ee5c_write(_self_, _84842_s.get()._field_decl.get()._field_ident);
		_22823ee5c_write(_self_, jule::Str("{\";\n", 4));
		{
			auto &expr = _84842_s.get()._field_fields;
			auto it = expr.begin();
			_iter_begin_22a9ed30b:;
			if (it != expr.end()) {
				jule::I32 _86618_i = it - expr.begin();
				jule::Ptr<_244851079_FieldIns> _86625_f = *it;
				{
					_228241e3c_indent(_self_);
					_22823ee5c_write(_self_, jule::Str("_Stream << \"", 12));
					_22823ee5c_write(_self_, _86625_f.get()._field_decl.get()._field_ident);
					_22823ee5c_write(_self_, jule::Str(":", 1));
					jule::Ptr<_244874c5c_StructIns> _87321_strct = _2455e458b_strct(_86625_f.get()._field_kind.ptr());;
					if ((((_87321_strct != nullptr) && (_87321_strct.get()._field_decl != nullptr)) && _87321_strct.get()._field_decl.get()._field_cpp_linked)) {
						_22823ee5c_write(_self_, jule::Str(" cpp.", 5));
						_22823ee5c_write(_self_, static__2281eb204_field(_86625_f.get()._field_decl));
						_22823ee5c_write(_self_, jule::Str("\"", 1));
					} else {
						_22823ee5c_write(_self_, jule::Str("\" << _Src.", 10));
						_22823ee5c_write(_self_, static__2281eb204_field(_86625_f.get()._field_decl));
					};
					if (((_86618_i + 1LL) < _84842_s.get()._field_fields.len())) {
						_22823ee5c_write(_self_, jule::Str(" << \", \"", 8));
					};
					_22823ee5c_write(_self_, jule::Str(";\n", 2));
				}
				_iter_next_22a9ed30b:;
				++it;
				_86618_i++;
				goto _iter_begin_22a9ed30b;
			}
			_iter_end_22a9ed30b:;
		};
		_228241e3c_indent(_self_);
		_22823ee5c_write(_self_, jule::Str("_Stream << \"}\";\n", 16));
	};
	_228241e3c_indent(_self_);
	_22823ee5c_write(_self_, jule::Str("return _Stream;\n", 16));
	_2282416de_done_indent(_self_);
	_22823ee5c_write(_self_, jule::Str("}", 1));
}



inline void _22825eee3_structure_ins(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244874c5c_StructIns>& _89938_s) {
	_22825e773_structure_methods(_self_, _89938_s);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	_22825e9e8_structure_derive_defs(_self_, _89938_s);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
	_22825ec6d_structure_ostream(_self_, _89938_s);
}



inline void _228260268_structure(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_244848912_Struct>& _90734_s) {
	{
		auto &expr = _90734_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22aa06303:;
		if (it != expr.end()) {
			jule::Ptr<_244874c5c_StructIns> _90821_ins = *it;
			{
				_22825eee3_structure_ins(_self_, _90821_ins);
				_22823ee5c_write(_self_, jule::Str("\n\n", 2));
			}
			_iter_next_22aa06303:;
			++it;
			goto _iter_begin_22aa06303;
		}
		_iter_end_22aa06303:;
	};
}



inline void _228260444_structures(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	{
		auto &expr = _self_.get()._field_ir.get()._field_ordered._field_structs;
		auto it = expr.begin();
		_iter_begin_22aa06a84:;
		if (it != expr.end()) {
			jule::Ptr<_244848912_Struct> _91521_s = *it;
			{
				if ((_91521_s.get()._field_token != nullptr)) {
					_228260268_structure(_self_, _91521_s);
					_22823ee5c_write(_self_, jule::Str("\n\n", 2));
				};
			}
			_iter_next_22aa06a84:;
			++it;
			goto _iter_begin_22aa06a84;
		}
		_iter_end_22aa06a84:;
	};
}



inline void _228260620_funcs(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22822d0c1_iter_packages(_self_, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)>([=](jule::Ptr<_24554ad1c_Package>& _92436_pkg) mutable -> void {
		_228261467_iter_files(_92436_pkg,jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)>([=](jule::Ptr<_2455b02e3_SymbolTable>& _92537_file) mutable -> void {
			{
				auto &expr = _92537_file.get()._field_funcs;
				auto it = expr.begin();
				_iter_begin_22aa0a824:;
				if (it != expr.end()) {
					jule::Ptr<_244926d0e_Fn> _92629_f = *it;
					{
						if (((!(_240e64dab_TEST)) && _22826a21d_has_directive(_92629_f.get()._field_directives,jule::Str("test", 4)))) {
							goto _iter_next_22aa0a824;
						};
						if (((!(_92629_f.get()._field_cpp_linked)) && (_92629_f.get()._field_token != nullptr))) {
							_22825dc8e_func(_self_, _92629_f);
							_22823ee5c_write(_self_, jule::Str("\n\n", 2));
						};
					}
					_iter_next_22aa0a824:;
					++it;
					goto _iter_begin_22aa0a824;
				}
				_iter_end_22aa0a824:;
			};
		}));
	}));
}



inline void _228260895_push_init(jule::Ptr<_22825bb05_ObjectCoder> _self_, jule::Ptr<_24554ad1c_Package>& _93934_pkg) {
	_228261467_iter_files(_93934_pkg,jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)>([=](jule::Ptr<_2455b02e3_SymbolTable>& _94033_file) mutable -> void {
		{
			auto &expr = _94033_file.get()._field_funcs;
			auto it = expr.begin();
			_iter_begin_22aa0d1c8:;
			if (it != expr.end()) {
				jule::Ptr<_244926d0e_Fn> _94120_f = *it;
				{
					if ((_94120_f.get()._field_ident == jule::Str("init", 4))) {
						_228241e3c_indent(_self_);
						_22823ee5c_write(_self_, static__2281ea137_func(_94120_f));
						_22823ee5c_write(_self_, jule::Str("();\n", 4));
					};
				}
				_iter_next_22aa0d1c8:;
				++it;
				goto _iter_begin_22aa0d1c8;
			}
			_iter_end_22aa0d1c8:;
		};
	}));
}



inline void _228260a71_init_caller(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22823ee5c_write(_self_, jule::Str("void __jule_call_initializers(void) {\n", 38));
	_2282406ee_add_indent(_self_);
	_22822d0c1_iter_packages(_self_, jule::Fn<void(jule::Ptr<_24554ad1c_Package>&)>([=](jule::Ptr<_24554ad1c_Package>& _95436_pkg) mutable -> void {
		_228260895_push_init(_self_, _95436_pkg);
	}));
	_2282416de_done_indent(_self_);
	_22823ee5c_write(_self_, jule::Str("\n}", 2));
}



inline void _228260c4c_end(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_22823ee5c_write(_self_, jule::Str("int main(int argc, char *argv[], char *envp[]) {\n    jule::setup_argv(argc, argv);\n    jule::setup_envp(envp);\n\n    __jule_call_initializers();\n    ", 148));
	if (_240e64dab_TEST) {
		_22823ee5c_write(_self_, jule::Str("test_point();", 13));
	} else {
		_22823ee5c_write(_self_, jule::Str("entry_point();", 14));
	};
	_22823ee5c_write(_self_, jule::Str("\n\n    return EXIT_SUCCESS;\n}", 28));
}



inline void _228260e28_serialize_head(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_228226284_prepare_structures(_self_);
	_22822d654_build_trait_map(_self_);
	_228222956_head(_self_);
	_228240e4c_links(_self_);
	_22823ee5c_write(_self_, jule::Str("\n", 1));
	_22825e4ed_decls(_self_);
	_22823ee5c_write(_self_, jule::Str("\n", 1));
	_228260444_structures(_self_);
	_228260620_funcs(_self_);
	_228260a71_init_caller(_self_);
	_22823ee5c_write(_self_, jule::Str("\n\n", 2));
}



inline void _228261104_serialize(jule::Ptr<_22825bb05_ObjectCoder> _self_) {
	_228260e28_serialize_head(_self_);
	_228260c4c_end(_self_);
}







std::ostream &operator<<(std::ostream &_Stream, _22825bb05_ObjectCoder _Src) {
	_Stream << "ObjectCoder{";
	_Stream << "obj:" << _Src._field_obj << ", ";
	_Stream << "ir:" << _Src._field_ir << ", ";
	_Stream << "info:" << _Src._field_info << ", ";
	_Stream << "tmap:" << _Src._field_tmap << ", ";
	_Stream << "indent_buffer:" << _Src._field_indent_buffer << ", ";
	_Stream << "ec:" << _Src._field_ec << ", ";
	_Stream << "sc:" << _Src._field_sc;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::I64,jule::Bool> _22aa628c0_parse_integer(_2282a0c9d_ArgParser* _self_, jule::Str& _19032_s, jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I32)> _19040_parser) {
	jule::I64 _19084_x = jule::I64();
	jule::Bool _19090_ok = jule::Bool();
	{
		
		if (_19032_s.empty()) {
			_case_begin_22aa65450:;
			{
				_19084_x = 0LL;
				_19090_ok = false;
				return std::make_tuple(_19084_x,_19090_ok);
			}
		}
		else if (_241ec93e7_has_prefix(_19032_s,jule::Str("0x", 2))) {
			_case_begin_22aa65928:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(2LL),16LL);
			}
		}
		else if (_241ec93e7_has_prefix(_19032_s,jule::Str("0b", 2))) {
			_case_begin_22aa657b3:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(2LL),2LL);
			}
		}
		else if (_241ec93e7_has_prefix(_19032_s,jule::Str("0o", 2))) {
			_case_begin_22aa65a16:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(2LL),8LL);
			}
		}
		else if ((_19032_s[0LL] == '0')) {
			_case_begin_22aa65a7c:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_22aa650a9:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s,10LL);
			}
		}
		_match_end_22aa64ecc:;
	};
	return std::make_tuple(_19084_x,_19090_ok);
}

inline std::tuple<jule::U64,jule::Bool> _22aa6a763_parse_integer(_2282a0c9d_ArgParser* _self_, jule::Str& _19032_s, jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I32)> _19040_parser) {
	jule::U64 _19084_x = jule::U64();
	jule::Bool _19090_ok = jule::Bool();
	{
		
		if (_19032_s.empty()) {
			_case_begin_22aa6d4be:;
			{
				_19084_x = 0LLU;
				_19090_ok = false;
				return std::make_tuple(_19084_x,_19090_ok);
			}
		}
		else if (_241ec93e7_has_prefix(_19032_s,jule::Str("0x", 2))) {
			_case_begin_22aa6d997:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(2LL),16LL);
			}
		}
		else if (_241ec93e7_has_prefix(_19032_s,jule::Str("0b", 2))) {
			_case_begin_22aa6d832:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(2LL),2LL);
			}
		}
		else if (_241ec93e7_has_prefix(_19032_s,jule::Str("0o", 2))) {
			_case_begin_22aa6da85:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(2LL),8LL);
			}
		}
		else if ((_19032_s[0LL] == '0')) {
			_case_begin_22aa6daeb:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_22aa6d128:;
			{
				std::tie(_19084_x,_19090_ok) = _19040_parser(_19032_s,10LL);
			}
		}
		_match_end_22aa6d04b:;
	};
	return std::make_tuple(_19084_x,_19090_ok);
}



inline jule::Str _2282a1595_get_data(_2282a0c9d_ArgParser* _self_) {
	if ((((*_self_)._field_i + 1LL) >= (*_self_)._field_args.len())) {
		return jule::Str();
	};
	((*_self_)._field_i)++;
	return (*_self_)._field_args[(*_self_)._field_i];
}



inline jule::VoidExceptional _2282a17d7_process_flag(_2282a0c9d_ArgParser* _self_, jule::Trait<_227d88886_CommonFlag>& _21736_flag) {
	{
		auto &_match_expr{ _21736_flag };
		
		if (_match_expr.type_is<jule::Ptr<_22aa49c70_Flag>>()) {
			_case_begin_22aa5e8bc:;
			{
				jule::Ptr<_22aa49c70_Flag> _22021_bf = _21736_flag.operator jule::Ptr<_22aa49c70_Flag>();;
				(*(_22021_bf.get()._field__data))=(!(_22021_bf.get()._field__default));
				return jule::VoidExceptional();;
			}
		}
		_match_end_22aa5e856:;
	};
	jule::Str _22513_data = _2282a1595_get_data(&(*_self_));;
	if (_22513_data.empty()) {
		return jule::VoidExceptional(((jule::Str("--", 2) + _227d88886_CommonFlag_mptr_data[(_21736_flag).type_offset]._227d88754_name(_21736_flag)) + jule::Str(": expression missing", 20)));
	};
	{
		auto &_match_expr{ _21736_flag };
		
		if (_match_expr.type_is<jule::Ptr<_22aa3da99_Flag>>()) {
			_case_begin_22aa61072:;
			{
				jule::Ptr<_22aa3da99_Flag> _23221_intf = _21736_flag.operator jule::Ptr<_22aa3da99_Flag>();;
				jule::Bool _23333_ok;;
				std::tie((*(_23221_intf.get()._field__data)),_23333_ok) = _22aa628c0_parse_integer(&(*_self_), _22513_data,jule::Fn<std::tuple<jule::I64,jule::Bool>(jule::Str,jule::I32)>([=](jule::Str _23372_s, jule::I32 _23380_base) mutable -> std::tuple<jule::I64,jule::Bool> {
					return std::make_tuple(static_cast<jule::I64>(({
						auto except = _24546c843_parse_int(_23372_s,_23380_base,64LL);
						(except.ok()) ? (except.result) : ({{
							return std::make_tuple(0LL,false);
						} jule::I64();});
					})),true);
				}));
				if ((!(_23333_ok))) {
					return jule::VoidExceptional(((jule::Str("--", 2) + _227d88886_CommonFlag_mptr_data[(_21736_flag).type_offset]._227d88754_name(_21736_flag)) + jule::Str(": expression must be valid signed integer", 41)));
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_22aa4275c_Flag>>()) {
			_case_begin_22aa619ac:;
			{
				jule::Ptr<_22aa4275c_Flag> _24021_uintf = _21736_flag.operator jule::Ptr<_22aa4275c_Flag>();;
				jule::Bool _24134_ok;;
				std::tie((*(_24021_uintf.get()._field__data)),_24134_ok) = _22aa6a763_parse_integer(&(*_self_), _22513_data,jule::Fn<std::tuple<jule::U64,jule::Bool>(jule::Str,jule::I32)>([=](jule::Str _24173_s, jule::I32 _24181_base) mutable -> std::tuple<jule::U64,jule::Bool> {
					return std::make_tuple(static_cast<jule::U64>(({
						auto except = _24546c3d1_parse_uint(_24173_s,_24181_base,64LL);
						(except.ok()) ? (except.result) : ({{
							return std::make_tuple(0LLU,false);
						} jule::U64();});
					})),true);
				}));
				if ((!(_24134_ok))) {
					return jule::VoidExceptional(((jule::Str("--", 2) + _227d88886_CommonFlag_mptr_data[(_21736_flag).type_offset]._227d88754_name(_21736_flag)) + jule::Str(": expression must be valid unsigned integer", 43)));
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_22aa46244_Flag>>()) {
			_case_begin_22aa61a23:;
			{
				jule::Ptr<_22aa46244_Flag> _24821_ff = _21736_flag.operator jule::Ptr<_22aa46244_Flag>();;
				(*(_24821_ff.get()._field__data))=static_cast<jule::F64>(({
					auto except = _2454740b9_parse_float(_22513_data,64LL);
					(except.ok()) ? (except.result) : ({{
						return jule::VoidExceptional(((jule::Str("--", 2) + _227d88886_CommonFlag_mptr_data[(_21736_flag).type_offset]._227d88754_name(_21736_flag)) + jule::Str(": expression must be valid floating-point", 41)));
					} jule::F64();});
				}));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_22aa4d757_Flag>>()) {
			_case_begin_22aa61a89:;
			{
				(*(_21736_flag.operator jule::Ptr<_22aa4d757_Flag>().get()._field__data))=_22513_data;
			}
		}
		_match_end_22aa61946:;
	};
 return jule::VoidExceptional();
}



inline jule::VoidExceptional _2282a1a5c_single_dash(_2282a0c9d_ArgParser* _self_, jule::Str& _25731_arg) {
	if ((_25731_arg.len() == 1LL)) {
		return jule::VoidExceptional((_25731_arg + jule::Str(": missing argument", 18)));
	};
	jule::Slice<jule::I32> _26113_rarg = static_cast<jule::Slice<jule::I32>>(_25731_arg).slice(1LL);;
	{
		auto &expr = _26113_rarg;
		auto it = expr.begin();
		_iter_begin_22aa7587d:;
		if (it != expr.end()) {
			jule::I32 &_26216_r = *it;
			{
				jule::Trait<_227d88886_CommonFlag> _26321_flag = _22829e153_find_flag_short(&(*_self_)._field_set, _26216_r);;
				if ((_26321_flag == nullptr)) {
					return jule::VoidExceptional(((_25731_arg + jule::Str(": flag is not exist: ", 21)) + static_cast<jule::Str>(_26216_r)));
				};
				({
					auto except = _2282a17d7_process_flag(&(*_self_), _26321_flag);
					if (!except.ok()) {
						return jule::VoidExceptional(except.error);
					}
				});
			}
			_iter_next_22aa7587d:;
			++it;
			goto _iter_begin_22aa7587d;
		}
		_iter_end_22aa7587d:;
	};
 return jule::VoidExceptional();
}



inline jule::VoidExceptional _2282a1cd2_double_dash(_2282a0c9d_ArgParser* _self_, jule::Str& _27231_arg) {
	if ((_27231_arg.len() == 2LL)) {
		return jule::VoidExceptional((_27231_arg + jule::Str(": missing argument", 18)));
	};
	jule::Trait<_227d88886_CommonFlag> _27617_flag = _22829dd45_find_flag(&(*_self_)._field_set, _27231_arg.slice(2LL));;
	if ((_27617_flag == nullptr)) {
		return jule::VoidExceptional((_27231_arg + jule::Str(": flag is not exist", 19)));
	};
	({
		auto except = _2282a17d7_process_flag(&(*_self_), _27617_flag);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
 return jule::VoidExceptional();
}



inline jule::VoidExceptional _2282a1ead_try_arg(_2282a0c9d_ArgParser* _self_) {
	jule::Str _28513_arg = (*_self_)._field_args[(*_self_)._field_i];;
	if (((*_self_)._field_args.len() == 0LL)) {
		return jule::VoidExceptional();;
	};
	if ((_28513_arg[0LL] == '-')) {
		if (((_28513_arg.len() > 1LL) && (_28513_arg[1LL] == '-'))) {
			({
				auto except = _2282a1cd2_double_dash(&(*_self_), _28513_arg);
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
			return jule::VoidExceptional();;
		};
		({
			auto except = _2282a1a5c_single_dash(&(*_self_), _28513_arg);
			if (!except.ok()) {
				return jule::VoidExceptional(except.error);
			}
		});
		return jule::VoidExceptional();;
	};
	(*_self_)._field_content = jule::alloc_for_append((*_self_)._field_content,1);(*_self_)._field_content.__push(_28513_arg);;
 return jule::VoidExceptional();
}



inline jule::VoidExceptional _2282a2189_parse(_2282a0c9d_ArgParser* _self_) {
	for (; ((*_self_)._field_i < (*_self_)._field_args.len()); ((*_self_)._field_i)++) {
		{
			({
				auto except = _2282a1ead_try_arg(&(*_self_));
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
		}
	_iter_next_22aa7d952:;
	}
	_iter_end_22aa7d952:;;
 return jule::VoidExceptional();
}







std::ostream &operator<<(std::ostream &_Stream, _2282a0c9d_ArgParser _Src) {
	_Stream << "ArgParser{";
	_Stream << "set:" << _Src._field_set << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "content:" << _Src._field_content << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::I32 _241c9e61d_decode_rune(jule::I32 _6820_r1, jule::I32 _6830_r2) {
	if (((((55296LL <= _6820_r1) && (_6820_r1 < 56320LL)) && (56320LL <= _6830_r2)) && (_6830_r2 < 57344LL))) {
		return static_cast<jule::I32>(((((_6820_r1 - 55296LL) << 10LL) | (_6830_r2 - 56320LL)) + 65536LL));
	};
	return 65533LL;
}



inline std::tuple<jule::I32,jule::I32> _241c9e8b5_encode_rune(jule::I32 _7824_r) {
	jule::I32 _7835_r1 = jule::I32();
	jule::I32 _7845_r2 = jule::I32();
	if (((_7824_r < 65536LL) || (_7824_r > 1114111LL))) {
		_7835_r1 = 65533LL;
		_7845_r2 = 65533LL;
		return std::make_tuple(_7835_r1,_7845_r2);
	};
	_7824_r-=65536LL;
	_7835_r1 = static_cast<jule::I32>((55296LL + ((_7824_r >> 10LL) & 1023LL)));
	_7845_r2 = static_cast<jule::I32>((56320LL + (_7824_r & 1023LL)));
	return std::make_tuple(_7835_r1,_7845_r2);
}



inline jule::Slice<jule::I32> _241c9ee7b_decode(jule::Slice<jule::U16> _11915_s) {
	jule::Slice<jule::I32> _12013_a = jule::Slice<jule::I32>::alloc(_11915_s.len());;
	jule::I32 _12113_n = 0LL;;
	jule::I32 _12213_i = 0LL;;
	for (; (_12213_i < _11915_s.len()); (_12213_i)++) {
		{
			jule::U16 _12413_r = _11915_s[_12213_i];;
			{
				
				if ((_12413_r < 55296LLU) || (57344LL <= _12413_r)) {
					_case_begin_2282b2034:;
					{
						_12013_a[_12113_n]=static_cast<jule::I32>(static_cast<jule::I32>(_12413_r));
					}
				}
				else if (((((_12413_r < 56320LLU) && ((_12213_i + 1LL) < _11915_s.len())) && (56320LL <= _11915_s[(_12213_i + 1LL)])) && (_11915_s[(_12213_i + 1LL)] < 57344LLU))) {
					_case_begin_2282b2aa1:;
					{
						_12013_a[_12113_n]=static_cast<jule::I32>(_241c9e61d_decode_rune(static_cast<jule::I32>(static_cast<jule::I32>(_12413_r)),static_cast<jule::I32>(static_cast<jule::I32>(_11915_s[(_12213_i + 1LL)]))));
						(_12213_i)++;
					}
				}
				else {
					_case_begin_2282b251d:;
					{
						_12013_a[_12113_n]=65533LL;
					}
				}
				_match_end_2282b24a7:;
			};
			(_12113_n)++;
		}
	_iter_next_2282b1066:;
	}
	_iter_end_2282b1066:;;
	return _12013_a.slice(0LL,_12113_n);
}



inline jule::Slice<jule::U16> _241ca0289_append_rune(jule::Slice<jule::U16> _14924_a, jule::I32 _14934_r) {
	{
		
		if (((0LL <= _14934_r) && (_14934_r < 55296LL)) || ((57344LL <= _14934_r) && (_14934_r < 65536LL))) {
			_case_begin_2282b5ad7:;
			{
				return jule::append(_14924_a,jule::Slice<jule::U16>::make({static_cast<jule::U16>(static_cast<jule::U16>(_14934_r))}));
			}
		}
		else if (((65536LL <= _14934_r) && (_14934_r <= 1114111LL))) {
			_case_begin_2282b5b5e:;
			{
				jule::I32 _15614_r1;;
				jule::I32 _15618_r2;;
				std::tie(_15614_r1,_15618_r2) = _241c9e8b5_encode_rune(_14934_r);
				return jule::append(_14924_a,jule::Slice<jule::U16>::make({static_cast<jule::U16>(static_cast<jule::U16>(_15614_r1)),static_cast<jule::U16>(static_cast<jule::U16>(_15618_r2))}));
			}
		}
		_match_end_2282b4ab4:;
	};
	return jule::append(_14924_a,jule::Slice<jule::U16>::make({65533LLU}));
}



inline jule::Slice<jule::U16> _241c89d9a_utf16_from_str(jule::Str _1423_s) {
	;
	jule::Slice<jule::I32> _209_runes = static_cast<jule::Slice<jule::I32>>(_1423_s);;
	jule::Slice<jule::U16> _2113_buff = jule::Slice<jule::U16>::alloc(0LL,_209_runes.len());;
	{
		auto &expr = _209_runes;
		auto it = expr.begin();
		_iter_begin_2282c2709:;
		if (it != expr.end()) {
			jule::I32 &_2212_r = *it;
			{
				if ((_2212_r == 0LL)) {
					goto _iter_end_2282c2709;
				};
				_2113_buff=_241ca0289_append_rune(_2113_buff,_2212_r);
			}
			_iter_next_2282c2709:;
			++it;
			goto _iter_begin_2282c2709;
		}
		_iter_end_2282c2709:;
	};
	return _241ca0289_append_rune(_2113_buff,0LL);
}



inline jule::Str _241c8a9d3_utf16_to_str(jule::Slice<jule::U16> _3421_s) {
	if ((_3421_s == nullptr)) {
		return jule::Str();
	};
	jule::Slice<jule::U16> _3813_code_page = _3421_s;;
	{
		auto &expr = _3421_s;
		auto it = expr.begin();
		_iter_begin_2282c3dc0:;
		if (it != expr.end()) {
			jule::I32 _399_i = it - expr.begin();
			jule::U16 &_3912_v = *it;
			{
				if ((_3912_v == 0LLU)) {
					_3813_code_page=_3813_code_page.slice(0LL,_399_i);
					goto _iter_end_2282c3dc0;
				};
			}
			_iter_next_2282c3dc0:;
			++it;
			_399_i++;
			goto _iter_begin_2282c3dc0;
		}
		_iter_end_2282c3dc0:;
	};
	return static_cast<jule::Str>(_241c9ee7b_decode(_3813_code_page));
}



inline jule::Str _241c8ab15_u16_ptr_to_str(jule::U16* _5030_s) {
	if ((_5030_s == nullptr)) {
		return jule::Str();
	};
	jule::Slice<jule::U16> _5513_code_page = nullptr;;
	jule::I32 _5613_i = 0LL;;
	for (; ; (_5613_i)++) {
		{
			jule::U16 _5813_r = _5030_s[_5613_i];;
			if ((_5813_r == 0LLU)) {
				return static_cast<jule::Str>(_241c9ee7b_decode(_5513_code_page));
			};
			_5513_code_page = jule::alloc_for_append(_5513_code_page,1);_5513_code_page.__push(_5813_r);;
		}
	_iter_next_2282c5234:;
	}
	_iter_end_2282c5234:;;
	return jule::Str();
}



inline jule::I32 _240ee9281_get_last_errno(void) {
	return errno;
}



inline jule::Uintptr _241ca18a6_get_std_handle(jule::Uintptr _5423_stdh) {
	return static_cast<jule::Uintptr>(((jule::Uintptr)(GetStdHandle(_5423_stdh))));
}



inline jule::I32 _241ca1d07_wstat(jule::U16* _5821_path, struct stat* _5837_stat) {
	return static_cast<jule::I32>(wstat(((wchar_t*)(_5821_path)),_5837_stat));
}



inline jule::I32 _241ca21e2__wopen(jule::U16* _6322_path, jule::I32 _6334_flag, jule::I32 _6345_mode) {
	return static_cast<jule::I32>(_wopen(((wchar_t*)((&(_6322_path[0LL])))),_6334_flag,_6345_mode));
}



inline jule::U32 _241ca23e0_get_last_error(void) {
	return static_cast<jule::U32>(GetLastError());
}



inline jule::U32 _241ca2731_get_current_directory(jule::U32 _7237_bufflen, jule::U16* _7255_buff) {
	return static_cast<jule::U32>(GetCurrentDirectoryW(_7237_bufflen,((wchar_t*)(_7255_buff))));
}



inline jule::Bool _241ca2c70_delete_file(jule::U16* _8327_path) {
	return DeleteFileW(((wchar_t*)(_8327_path)));
}



inline jule::Bool _241ca3017_create_directory(jule::U16* _8832_path) {
	return CreateDirectoryW(((wchar_t*)(_8832_path)),nullptr);
}



inline jule::Bool _241ca32ae_remove_directory(jule::U16* _9332_path) {
	return RemoveDirectoryW(((wchar_t*)(_9332_path)));
}



inline _WDIR* _241ca3556__wopendir(jule::U16* _9825_path) {
	return _wopendir(((wchar_t*)(_9825_path)));
}



inline struct _wdirent* _241ca37ed__wreaddir(_WDIR* _10129_dir) {
	return _wreaddir(_10129_dir);
}



inline jule::I32 _241ca3a95__wclosedir(_WDIR* _10430_dir) {
	return static_cast<jule::I32>(_wclosedir(_10430_dir));
}



inline jule::U32 _241ca426b_get_full_path_name(jule::U16* _10734_path, jule::U32 _10746_bufflen, jule::U16* _1085_buff, jule::U16** _10817_fname) {
	return static_cast<jule::U32>(GetFullPathNameW(((wchar_t*)(_10734_path)),_10746_bufflen,((wchar_t*)(_1085_buff)),((wchar_t**)(_10817_fname))));
}



inline jule::Bool _241ca45ac_get_console_mode(jule::Uintptr _11325_handle, jule::I32& _11346_mode) {
	return GetConsoleMode(((HANDLE)(_11325_handle)),((DWORD*)((&(_11346_mode)))));
}



inline jule::Bool _241ca48ed_set_console_mode(jule::Uintptr _11825_handle, jule::I32 _11841_mode) {
	return SetConsoleMode(((HANDLE)(_11825_handle)),static_cast<DWORD>(_11841_mode));
}



inline jule::Bool _241ca4e2b_write_console(jule::Uintptr _12329_handle, jule::U16* _12345_buffer, jule::I32 _12359_to_write, jule::I32& _12410_written, void* _12424_reserved) {
	return WriteConsoleW(((HANDLE)(_12329_handle)),((void*)(_12345_buffer)),static_cast<DWORD>(_12359_to_write),((DWORD*)(_12410_written)),_12424_reserved);
}



inline jule::Bool _241ca5459_read_console(jule::Uintptr _13028_handle, jule::U16* _13048_buffer, jule::I32 _13062_to_read, jule::I32& _13110_readed, void* _13123_input_control) {
	return ReadConsoleW(((HANDLE)(_13028_handle)),((void*)(_13048_buffer)),static_cast<DWORD>(_13062_to_read),((DWORD*)((&(_13110_readed)))),_13123_input_control);
}



inline jule::I32 _241ca77e1_seek(jule::I32 _2613_handle, jule::I32 _2626_offset, jule::I32 _2639_origin) {
	return static_cast<jule::I32>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::I32 _241ca7bcb_read(jule::I32 _3120_handle, void* _3137_buff, jule::U32 _3152_n) {
	return static_cast<jule::I32>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::I32 _241ca8050_close(jule::I32 _3614_handle) {
	return static_cast<jule::I32>(close(_3614_handle));
}



inline jule::I32 _241ca843a_write(jule::I32 _3921_handle, void* _3934_buff, jule::U32 _3949_n) {
	return static_cast<jule::I32>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _241ca8649_exit(jule::I32 _4413_code) {
	exit(_4413_code);
}



inline std::tuple<jule::I32,jule::I32> _241d86859_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::I32 _18233_r = jule::I32();
	jule::I32 _18242_size = jule::I32();
	if ((_18220_p.len() < 1LL)) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	jule::U8 _1869_p0 = _18220_p[0LL];;
	jule::U8 _1879_x = _241d85704_FIRST[static_cast<jule::I32>(_1869_p0)];;
	if ((_1879_x >= 240LLU)) {
		jule::I32 _19213_mask = static_cast<jule::I32>(((_1879_x << 31LLU) >> 31LLU));;
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_18220_p[0LL]) & (~(_19213_mask))) | (65533LL & _19213_mask)));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	jule::I32 _1959_sz = static_cast<jule::I32>((_1879_x & 7LLU));;
	_241d85c76_accept_range _1969_accept = _241d860d9_ACCEPT_RANGES[static_cast<jule::I32>((_1879_x >> 4LLU))];;
	if ((_18220_p.len() < _1959_sz)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	jule::U8 _2009_b1 = _18220_p[1LL];;
	if (((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1))) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	if ((_1959_sz <= 2LL)) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>((_1869_p0 & 31LLU)) << 6LL) | static_cast<jule::I32>((_2009_b1 & 63LLU))));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	jule::U8 _2079_b2 = _18220_p[2LL];;
	if (((_2079_b2 < 128LLU) || (191LL < _2079_b2))) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	if ((_1959_sz <= 3LL)) {
		_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>((_1869_p0 & 15LLU)) << 12LL) | (static_cast<jule::I32>((_2009_b1 & 63LLU)) << 6LL)) | static_cast<jule::I32>((_2079_b2 & 63LLU))));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	jule::U8 _2149_b3 = _18220_p[3LL];;
	if (((_2149_b3 < 128LLU) || (191LL < _2149_b3))) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	};
	_18233_r = static_cast<jule::I32>(((((static_cast<jule::I32>((_1869_p0 & 7LLU)) << 18LL) | (static_cast<jule::I32>((_2009_b1 & 63LLU)) << 12LL)) | (static_cast<jule::I32>((_2079_b2 & 63LLU)) << 6LL)) | static_cast<jule::I32>((_2149_b3 & 63LLU))));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::I32> _241d86e20_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::I32 _27638_r = jule::I32();
	jule::I32 _27647_size = jule::I32();
	if ((_27625_p.len() == 0LL)) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	};
	jule::I32 _2809_end = _27625_p.len();;
	jule::I32 _28113_start = (_2809_end - 1LL);;
	_27638_r=static_cast<jule::I32>(static_cast<jule::I32>(_27625_p[_28113_start]));
	if ((_27638_r < 128LL)) {
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	};
	jule::I32 _28913_lim = (_2809_end - 4LL);;
	if ((_28913_lim < 0LL)) {
		_28913_lim=0LL;
	};
	(_28113_start)--;
	for (; (_28113_start >= _28913_lim); (_28113_start)--) {
		{
			if (_241d887e5_rune_start(_27625_p[_28113_start])) {
				goto _iter_end_228348b9d;
			};
		}
	_iter_next_228348b9d:;
	}
	_iter_end_228348b9d:;;
	if ((_28113_start < 0LL)) {
		_28113_start=0LL;
	};
	std::tie(_27638_r,_27647_size) = _241d86859_decode_rune(_27625_p.slice(_28113_start,_2809_end));
	if (((_28113_start + _27647_size) != _2809_end)) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	};
	return std::make_tuple(_27638_r,_27647_size);
}



inline jule::I32 _241d8745e_rune_len(jule::I32 _35217_r) {
	{
		
		if ((_35217_r < 0LL)) {
			_case_begin_228350d70:;
			{
				return -1LL;
			}
		}
		else if ((_35217_r <= 127LL)) {
			_case_begin_2283505ab:;
			{
				return 1LL;
			}
		}
		else if ((_35217_r <= 2047LL)) {
			_case_begin_228350633:;
			{
				return 2LL;
			}
		}
		else if (((55296LL <= _35217_r) && (_35217_r <= 57343LL))) {
			_case_begin_2283506aa:;
			{
				return -1LL;
			}
		}
		else if ((_35217_r <= 65535LL)) {
			_case_begin_228350732:;
			{
				return 3LL;
			}
		}
		else if ((_35217_r <= 1114111LL)) {
			_case_begin_2283509c9:;
			{
				return 4LL;
			}
		}
		else {
			_case_begin_228350545:;
			{
				return -1LL;
			}
		}
		_match_end_22835048a:;
	};
}



inline jule::I32 _241d8787c_encode_rune(jule::Slice<jule::U8> _37424_p, jule::I32 _37439_r) {
	jule::U32 _3769_i = static_cast<jule::U32>(_37439_r);;
	{
		
		if ((_3769_i <= 127LLU)) {
			_case_begin_2283561d8:;
			{
				_37424_p[0LL]=static_cast<jule::U8>(static_cast<jule::U8>(_37439_r));
				return 1LL;
			}
		}
		else if ((_3769_i <= 2047LLU)) {
			_case_begin_22835624e:;
			{
				_37424_p[0LL]=static_cast<jule::U8>((192LLU | static_cast<jule::U8>((_37439_r >> 6LL))));
				_37424_p[1LL]=static_cast<jule::U8>((128LLU | (static_cast<jule::U8>(_37439_r) & 63LLU)));
				return 2LL;
			}
		}
		else if ((_3769_i > 1114111LLU) || ((55296LL <= _3769_i) && (_3769_i <= 57343LLU))) {
			_case_begin_228355e96:;
			{
				_37439_r=65533LL;
				goto _case_begin_22835600c;
			}
		}
		else if ((_3769_i <= 65535LLU)) {
			_case_begin_22835600c:;
			{
				_37424_p[0LL]=static_cast<jule::U8>((224LLU | static_cast<jule::U8>((_37439_r >> 12LL))));
				_37424_p[1LL]=static_cast<jule::U8>((128LLU | (static_cast<jule::U8>((_37439_r >> 6LL)) & 63LLU)));
				_37424_p[2LL]=static_cast<jule::U8>((128LLU | (static_cast<jule::U8>(_37439_r) & 63LLU)));
				return 3LL;
			}
		}
		else {
			_case_begin_228353702:;
			{
				_37424_p[0LL]=static_cast<jule::U8>((240LLU | static_cast<jule::U8>((_37439_r >> 18LL))));
				_37424_p[1LL]=static_cast<jule::U8>((128LLU | (static_cast<jule::U8>((_37439_r >> 12LL)) & 63LLU)));
				_37424_p[2LL]=static_cast<jule::U8>((128LLU | (static_cast<jule::U8>((_37439_r >> 6LL)) & 63LLU)));
				_37424_p[3LL]=static_cast<jule::U8>((128LLU | (static_cast<jule::U8>(_37439_r) & 63LLU)));
				return 4LL;
			}
		}
		_match_end_22835369c:;
	};
}



inline jule::Slice<jule::U8> _241d87bbd_append_rune(jule::Slice<jule::U8> _40524_p, jule::I32 _40535_r) {
	if ((_40535_r <= 127LL)) {
		return jule::append(_40524_p,jule::Slice<jule::U8>::make({static_cast<jule::U8>(static_cast<jule::U8>(_40535_r))}));
	};
	return _241d8800e_append_rune_non_ascii(_40524_p,_40535_r);
}



inline jule::Slice<jule::U8> _241d8800e_append_rune_non_ascii(jule::Slice<jule::U8> _41230_p, jule::I32 _41245_r) {
	jule::U32 _4149_i = static_cast<jule::U32>(_41245_r);;
	{
		
		if ((_4149_i <= 2047LLU)) {
			_case_begin_22835e3bc:;
			{
				return jule::append(_41230_p,jule::Slice<jule::U8>::make({static_cast<jule::U8>((192LLU | static_cast<jule::U8>((_41245_r >> 6LL)))),static_cast<jule::U8>((128LLU | (static_cast<jule::U8>(_41245_r) & 63LLU)))}));
			}
		}
		else if ((_4149_i > 1114111LLU) || ((55296LL <= _4149_i) && (_4149_i <= 57343LLU))) {
			_case_begin_22835ca5d:;
			{
				_41245_r=65533LL;
				goto _case_begin_22835cac4;
			}
		}
		else if ((_4149_i <= 65535LLU)) {
			_case_begin_22835cac4:;
			{
				return jule::append(_41230_p,jule::Slice<jule::U8>::make({static_cast<jule::U8>((224LLU | static_cast<jule::U8>((_41245_r >> 12LL)))),static_cast<jule::U8>((128LLU | (static_cast<jule::U8>((_41245_r >> 6LL)) & 63LLU))),static_cast<jule::U8>((128LLU | (static_cast<jule::U8>(_41245_r) & 63LLU)))}));
			}
		}
		else {
			_case_begin_22835c046:;
			{
				return jule::append(_41230_p,jule::Slice<jule::U8>::make({static_cast<jule::U8>((240LLU | static_cast<jule::U8>((_41245_r >> 18LL)))),static_cast<jule::U8>((128LLU | (static_cast<jule::U8>((_41245_r >> 12LL)) & 63LLU))),static_cast<jule::U8>((128LLU | (static_cast<jule::U8>((_41245_r >> 6LL)) & 63LLU))),static_cast<jule::U8>((128LLU | (static_cast<jule::U8>(_41245_r) & 63LLU)))}));
			}
		}
		_match_end_22835bee1:;
	};
}



inline jule::I32 _241d8854d_rune_count_str(jule::Str _47323_s) {
	jule::I32 _47333_n = jule::I32();
	jule::I32 _47413_i = 0LL;;
	for (; (_47413_i < _47323_s.len()); (_47333_n)++) {
		{
			jule::U8 _47617_c = _47323_s[_47413_i];;
			if ((_47617_c < 128LLU)) {
				(_47413_i)++;
				goto _iter_next_228366814;
			};
			jule::U8 _48213_x = _241d85704_FIRST[static_cast<jule::I32>(_47617_c)];;
			if ((_48213_x == 241LLU)) {
				(_47413_i)++;
				goto _iter_next_228366814;
			};
			jule::I32 _48717_size = static_cast<jule::I32>((_48213_x & 7LLU));;
			if (((_47413_i + _48717_size) > _47323_s.len())) {
				(_47413_i)++;
				goto _iter_next_228366814;
			};
			_241d85c76_accept_range _49213_accept = _241d860d9_ACCEPT_RANGES[static_cast<jule::I32>((_48213_x >> 4LLU))];;
			_47617_c=_47323_s[(_47413_i + 1LL)];
			if (((_47617_c < _49213_accept._field_lo) || (_49213_accept._field_hi < _47617_c))) {
				_48717_size=1LL;
			} else if ((_48717_size == 2LL)) {
			} else {
				_47617_c=_47323_s[(_47413_i + 2LL)];
				if (((_47617_c < 128LLU) || (191LL < _47617_c))) {
					_48717_size=1LL;
				} else if ((_48717_size == 3LL)) {
				} else {
					_47617_c=_47323_s[(_47413_i + 3LL)];
					if (((_47617_c < 128LLU) || (191LL < _47617_c))) {
						_48717_size=1LL;
					};
				};
			};
			_47413_i+=_48717_size;
		}
	_iter_next_228366814:;
	}
	_iter_end_228366814:;;
	return _47333_n;
}



inline jule::Bool _241d887e5_rune_start(jule::U8 _51719_b) {
	return ((_51719_b & 192LLU) != 128LLU);
}



inline jule::I32 _241e32b36_get_last_os_error_windows(void) {
	jule::U32 _169_err = _241ca23e0_get_last_error();;
	{
		auto &_match_expr{ _169_err };
		
		if (_match_expr == 5LL) {
			_case_begin_22838c3d9:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_22838e430:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_22838e496:;
			{
				return static_cast<jule::I32>(7LL);
			}
		}
		else if (_match_expr == 123LL) {
			_case_begin_22838e50c:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else {
			_case_begin_22838c6e7:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		_match_end_22838e3b9:;
	};
}



inline jule::Slice<jule::Str> _241e36cd3_args(void) {
	return jule::args();
}



inline jule::Exceptional<jule::Str> _241e37256_working_dir(void) {
	return jule::Exceptional<jule::Str>(jule::Any(),({
		auto except = _241e37b19___getwd();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Str>(except.error);
		} jule::Str();});
	}));
}



inline jule::Exceptional<jule::Str> _241e37b19___getwd(void) {
	jule::Array<jule::U16,261> _1513_buff = jule::Array<jule::U16,261>();;
	jule::U32 _169_n = _241ca2731_get_current_directory(261LLU,(&(_1513_buff[0LL])));;
	if ((_169_n == 0LLU)) {
		return jule::Exceptional<jule::Str>(_241e32b36_get_last_os_error_windows());
	};
	return jule::Exceptional<jule::Str>(jule::Any(),_241c8ab15_u16_ptr_to_str((&(_1513_buff[0LL]))));
}



inline jule::Slice<jule::U8> _241ec008b_stobs(jule::Str& _1315_s) {
	return _1315_s.fake_slice();
}



inline jule::Bool _242cdd23d_is_letter(jule::I32 _7618_r) {
	if ((static_cast<jule::U32>(_7618_r) <= 255LLU)) {
		return ((_242d57791__PROPERTIES[static_cast<jule::I32>(static_cast<jule::U8>(_7618_r))] & 96LLU) != 0LLU);
	};
	return _242d6124a_is_excluding_latin(_242ce81b0_LETTER,_7618_r);
}



inline jule::Bool _242d60667_is16(jule::Slice<_242d5daa5_Range16> _1919_ranges, jule::U16 _19128_r) {
	if (((_1919_ranges.len() <= 18LL) || (_19128_r <= 255LLU))) {
		{
			auto &expr = _1919_ranges;
			auto it = expr.begin();
			_iter_begin_228989002:;
			if (it != expr.end()) {
				jule::I32 _19313_i = it - expr.begin();
				{
					_242d5daa5_Range16* _19417_range = (&(_1919_ranges[_19313_i]));;
					{
						if ((_19128_r < _19417_range->_field_lo)) {
							return false;
						};
						if ((_19128_r <= _19417_range->_field_hi)) {
							return ((_19417_range->_field_stride == 1LLU) || (jule::mod((_19128_r - _19417_range->_field_lo),_19417_range->_field_stride) == 0LLU));
						};
					};
				}
				_iter_next_228989002:;
				++it;
				_19313_i++;
				goto _iter_begin_228989002;
			}
			_iter_end_228989002:;
		};
		return false;
	};
	jule::I32 _20813_lo = 0LL;;
	jule::I32 _20913_hi = _1919_ranges.len();;
	while ((_20813_lo < _20913_hi)) {
		{
			jule::I32 _21113_m = (_20813_lo + ((_20913_hi - _20813_lo) >> 1LLU));;
			_242d5daa5_Range16* _21213_range = (&(_1919_ranges[_21113_m]));;
			{
				if (((_21213_range->_field_lo <= _19128_r) && (_19128_r <= _21213_range->_field_hi))) {
					return ((_21213_range->_field_stride == 1LLU) || (jule::mod((_19128_r - _21213_range->_field_lo),_21213_range->_field_stride) == 0LLU));
				};
				if ((_19128_r < _21213_range->_field_lo)) {
					_20913_hi=_21113_m;
				} else {
					_20813_lo=static_cast<jule::I32>((_21113_m + 1LL));
				};
			};
		}
	_iter_next_228987880:;
	}
	_iter_end_228987880:;;
	return false;
}



inline jule::Bool _242d609a8_is32(jule::Slice<_242d5e028_Range32> _2289_ranges, jule::U32 _22828_r) {
	if ((_2289_ranges.len() <= 18LL)) {
		{
			auto &expr = _2289_ranges;
			auto it = expr.begin();
			_iter_begin_22899068a:;
			if (it != expr.end()) {
				jule::I32 _23013_i = it - expr.begin();
				{
					_242d5e028_Range32* _23117_range = (&(_2289_ranges[_23013_i]));;
					{
						if ((_22828_r < _23117_range->_field_lo)) {
							return false;
						};
						if ((_22828_r <= _23117_range->_field_hi)) {
							return ((_23117_range->_field_stride == 1LLU) || (jule::mod((_22828_r - _23117_range->_field_lo),_23117_range->_field_stride) == 0LLU));
						};
					};
				}
				_iter_next_22899068a:;
				++it;
				_23013_i++;
				goto _iter_begin_22899068a;
			}
			_iter_end_22899068a:;
		};
		return false;
	};
	jule::I32 _24513_lo = 0LL;;
	jule::I32 _24613_hi = _2289_ranges.len();;
	while ((_24513_lo < _24613_hi)) {
		{
			jule::I32 _24813_m = (_24513_lo + ((_24613_hi - _24513_lo) >> 1LLU));;
			_242d5e028_Range32* _24913_range = (&(_2289_ranges[_24813_m]));;
			{
				if (((_24913_range->_field_lo <= _22828_r) && (_22828_r <= _24913_range->_field_hi))) {
					return ((_24913_range->_field_stride == 1LLU) || (jule::mod((_22828_r - _24913_range->_field_lo),_24913_range->_field_stride) == 0LLU));
				};
				if ((_22828_r < _24913_range->_field_lo)) {
					_24613_hi=_24813_m;
				} else {
					_24513_lo=static_cast<jule::I32>((_24813_m + 1LL));
				};
			};
		}
	_iter_next_22898c324:;
	}
	_iter_end_22898c324:;;
	return false;
}



inline jule::Bool _242d6124a_is_excluding_latin(jule::Ptr<_242d5e49b_RangeTable> _27823_range_tab, jule::I32 _27847_r) {
	{
		jule::Slice<_242d5daa5_Range16> &_28014_r16 = _27823_range_tab.get()._field_r16;;
		jule::I32 _28213_off = _27823_range_tab.get()._field_latin_offset;;
		if (((_28014_r16.len() > _28213_off) && (static_cast<jule::U32>(_27847_r) <= static_cast<jule::U32>(_28014_r16[(_28014_r16.len() - 1LL)]._field_hi)))) {
			return _242d60667_is16(_28014_r16.slice(_28213_off),static_cast<jule::U16>(static_cast<jule::U16>(_27847_r)));
		};
	};
	jule::Slice<_242d5e028_Range32> &_28710_r32 = _27823_range_tab.get()._field_r32;;
	if (((_28710_r32.len() > 0LL) && (_27847_r >= static_cast<jule::I32>(_28710_r32[0LL]._field_lo)))) {
		return _242d609a8_is32(_28710_r32,static_cast<jule::U32>(static_cast<jule::U32>(_27847_r)));
	};
	return false;
}



inline jule::Str _241ec9e0e_repeat(jule::Str _1415_s, jule::I32 _1427_n) {
	if ((_1427_n <= 0LL)) {
		return jule::Str();
	};
	if ((_1415_s.len() > jule::div(2147483647LL,_1427_n))) {
		jule::panic(jule::Str("std::strings: repeat: integer buffer size overflow", 50) + jule::Str("\nlocation: std/strings/strings.jule:19:9"));;
	};
	jule::Str _2213_ss = jule::Str::alloc((_1415_s.len() * _1427_n));;
	for (; (_1427_n > 0LL); (_1427_n)--) {
		{
			_2213_ss+=_1415_s;
		}
	_iter_next_2289b30b4:;
	}
	_iter_end_2289b30b4:;;
	return _2213_ss;
}



inline jule::Bool _241ecce9a__has_prefix(jule::Str& _2917_s, jule::Str& _2926_sub, jule::I32 _2940_start) {
	if (((_2926_sub.len() == 0LL) || ((_2917_s.len() - _2940_start) < _2926_sub.len()))) {
		return false;
	};
	jule::I32 _3413_i = 0LL;;
	for (; (_3413_i < _2926_sub.len()); std::tie(_3413_i,_2940_start) = std::make_tuple(static_cast<jule::I32>((_3413_i + 1LL)),static_cast<jule::I32>((_2940_start + 1LL)))) {
		{
			if ((_2917_s[_2940_start] != _2926_sub[_3413_i])) {
				return false;
			};
		}
	_iter_next_2289b6183:;
	}
	_iter_end_2289b6183:;;
	return true;
}



inline jule::Bool _241ec93e7_has_prefix(jule::Str _4419_s, jule::Str _4427_sub) {
	return _241ecce9a__has_prefix(_4419_s,_4427_sub,0LL);
}



inline jule::Bool _241ed084e__has_suffix(jule::Str& _4817_s, jule::Str& _4826_sub, jule::I32 _4840_start) {
	if (((_4826_sub.len() == 0LL) || ((_4817_s.len() - _4840_start) < _4826_sub.len()))) {
		return false;
	};
	_4840_start=static_cast<jule::I32>((_4817_s.len() - _4840_start));
	jule::I32 _5413_i = 0LL;;
	for (; (_5413_i < _4826_sub.len()); (_5413_i)++) {
		{
			if ((_4817_s[((_4840_start - _5413_i) - 1LL)] != _4826_sub[((_4826_sub.len() - _5413_i) - 1LL)])) {
				return false;
			};
		}
	_iter_next_2289b8196:;
	}
	_iter_end_2289b8196:;;
	return true;
}



inline jule::Bool _242cb8d2e_has_suffix(jule::Str _6419_s, jule::Str _6427_sub) {
	return _241ed084e__has_suffix(_6419_s,_6427_sub,0LL);
}



inline jule::I32 _242cc21cd_find_at(jule::Str _7216_s, jule::Str _7224_sub, jule::I32 _7238_i) {
	if ((((_7238_i < 0LL) || (_7216_s.len() < _7224_sub.len())) || (_7224_sub.len() == 0LL))) {
		return -1LL;
	};
	for (; (_7238_i < _7216_s.len()); (_7238_i)++) {
		{
			if (_241ecce9a__has_prefix(_7216_s,_7224_sub,_7238_i)) {
				return _7238_i;
			};
		}
	_iter_next_2289bbb39:;
	}
	_iter_end_2289bbb39:;;
	return -1LL;
}



inline jule::I32 _242cd5059_find_last_at(jule::Str _9521_s, jule::Str _9529_sub, jule::I32 _9539_i) {
	jule::I32 _9613_j = ((_9539_i - _9529_sub.len()) + 1LL);;
	if (((((_9529_sub.len() == 0LL) || (_9539_i < 0LL)) || (_9539_i >= _9521_s.len())) || (_9613_j < 0LL))) {
		return -1LL;
	};
	_julec_label_loop:;
	for (; (_9613_j >= 0LL); (_9613_j)--) {
		{
			jule::I32 _10217_k = _9613_j;;
			jule::I32 _10317_z = 0LL;;
			for (; (_10317_z < _9529_sub.len()); std::tie(_10217_k,_10317_z) = std::make_tuple(static_cast<jule::I32>((_10217_k + 1LL)),static_cast<jule::I32>((_10317_z + 1LL)))) {
				{
					if ((_9521_s[_10217_k] != _9529_sub[_10317_z])) {
						goto _iter_next_2289be301;
					};
				}
			_iter_next_2289c12d1:;
			}
			_iter_end_2289c12d1:;;
			return _9613_j;
		}
	_iter_next_2289be301:;
	}
	_iter_end_2289be301:;;
	return -1LL;
}



inline jule::I32 _242cd87cc_find_last(jule::Str _11718_s, jule::Str _11726_sub) {
	return static_cast<jule::I32>(_242cd5059_find_last_at(_11718_s,_11726_sub,static_cast<jule::I32>((_11718_s.len() - 1LL))));
}



inline jule::I32 _242d619ed__find_rune(jule::Slice<jule::U8>& _17316_s, jule::I32 _17327_r) {
	jule::I32 _17413_i = 0LL;;
	while ((_17413_i < _17316_s.len())) {
		{
			jule::I32 _17614_br;;
			jule::I32 _17618_n;;
			std::tie(_17614_br,_17618_n) = _241d86859_decode_rune(_17316_s.slice(_17413_i));
			if ((_17327_r == _17614_br)) {
				return _17413_i;
			};
			_17413_i+=_17618_n;
		}
	_iter_next_2289c8c9a:;
	}
	_iter_end_2289c8c9a:;;
	return -1LL;
}



inline jule::I32 _242d61e93_find_last_byte(jule::Str _20023_s, jule::U8 _20031_b) {
	jule::I32 _20113_i = (_20023_s.len() - 1LL);;
	for (; (_20113_i >= 0LL); (_20113_i)--) {
		{
			if ((_20023_s[_20113_i] == _20031_b)) {
				return _20113_i;
			};
		}
	_iter_next_2289cbd03:;
	}
	_iter_end_2289cbd03:;;
	return -1LL;
}



inline jule::I32 _242d6246b_find_any(jule::Str _24117_s, jule::Str _24125_runes) {
	jule::Slice<jule::U8> _2429_sb = _241ec008b_stobs(_24117_s);;
	jule::Slice<jule::U8> _24313_rb = _241ec008b_stobs(_24125_runes);;
	jule::I32 _24413_i = 0LL;;
	while ((_24413_i < _2429_sb.len())) {
		{
			jule::I32 _24614_r;;
			jule::I32 _24617_n;;
			std::tie(_24614_r,_24617_n) = _241d86859_decode_rune(_2429_sb.slice(_24413_i));
			if ((_242d619ed__find_rune(_24313_rb,_24614_r) != -1LL)) {
				return _24413_i;
			};
			_24413_i+=_24617_n;
		}
	_iter_next_2289d170e:;
	}
	_iter_end_2289d170e:;;
	return -1LL;
}



inline jule::Slice<jule::Str> _242d626d0_split(jule::Str _27514_s, jule::Str _27522_sub, jule::I32 _27536_n) {
	jule::I32 _27613_cap = _27536_n;;
	if ((_27536_n < 0LL)) {
		_27613_cap=16LL;
	};
	jule::Slice<jule::Str> _28013_parts = jule::Slice<jule::Str>::alloc(0LL,_27613_cap);;
	if ((_27536_n == 0LL)) {
		return _28013_parts;
	};
	if ((_27536_n < 0LL)) {
		_27536_n=static_cast<jule::I32>(_27514_s.len());
	};
	jule::I32 _28713_i = 0LL;;
	for (; (_27536_n > 0LL); (_27536_n)--) {
		{
			jule::I32 _28913_j = _242cc21cd_find_at(_27514_s,_27522_sub,_28713_i);;
			if ((_28913_j == -1LL)) {
				goto _iter_end_2289d83d6;
			};
			_28013_parts = jule::alloc_for_append(_28013_parts,1);_28013_parts.__push(_27514_s.slice(_28713_i,_28913_j));;
			_28713_i=static_cast<jule::I32>((_28913_j + _27522_sub.len()));
		}
	_iter_next_2289d83d6:;
	}
	_iter_end_2289d83d6:;;
	if (((_27536_n > 0LL) && (_28713_i < _27514_s.len()))) {
		_28013_parts = jule::alloc_for_append(_28013_parts,1);_28013_parts.__push(_27514_s.slice(_28713_i));;
	};
	return _28013_parts;
}



inline jule::Bool _242d62812_contains(jule::Str _30317_s, jule::Str _30325_sub) {
	return (_242cc21cd_find_at(_30317_s,_30325_sub,0LL) != -1LL);
}



inline jule::Bool _242d62ba8_contains_any(jule::Str _31921_s, jule::Str _31929_runes) {
	return (_242d6246b_find_any(_31921_s,_31929_runes) != -1LL);
}



inline jule::I32 _242d62cda_count(jule::Str _32514_s, jule::Str _32522_sub) {
	if ((_32522_sub.len() == 0LL)) {
		return 0LL;
	};
	jule::I32 _32913_n = 0LL;;
	jule::I32 _33013_i = 0LL;;
	for (;;) {
		{
			jule::I32 _33213_j = _242cc21cd_find_at(_32514_s,_32522_sub,_33013_i);;
			if ((_33213_j == -1LL)) {
				goto _iter_end_2289ddd04;
			};
			(_32913_n)++;
			_33013_i=static_cast<jule::I32>((_33213_j + _32522_sub.len()));
		}
	_iter_next_2289ddd04:;
	}
	_iter_end_2289ddd04:;;
	return _32913_n;
}



inline jule::Str _242d62e1c_replace(jule::Str _34516_s, jule::Str _34524_sub, jule::Str _34534_new, jule::I32 _34548_n) {
	if (((_34548_n == 0LL) || (_34524_sub == _34534_new))) {
		return _34516_s;
	};
	jule::I32 _3509_m = _242d62cda_count(_34516_s,_34524_sub);;
	if ((_3509_m == 0LL)) {
		return _34516_s;
	};
	if (((_34548_n < 0LL) || (_3509_m < _34548_n))) {
		_34548_n=_3509_m;
	};
	jule::Str _35813_ss = jule::Str::alloc((_34516_s.len() + (_34548_n * (_34534_new.len() - _34524_sub.len()))));;
	jule::I32 _35913_i = 0LL;;
	for (; (_34548_n > 0LL); (_34548_n)--) {
		{
			jule::I32 _36113_j = _242cc21cd_find_at(_34516_s,_34524_sub,_35913_i);;
			if ((_36113_j == -1LL)) {
				goto _iter_end_2289e2d08;
			};
			_35813_ss+=_34516_s.slice(_35913_i,_36113_j);
			_35813_ss+=_34534_new;
			_35913_i=static_cast<jule::I32>((_36113_j + _34524_sub.len()));
		}
	_iter_next_2289e2d08:;
	}
	_iter_end_2289e2d08:;;
	_35813_ss+=_34516_s.slice(_35913_i);
	return _35813_ss;
}



inline void _242d61c62__trim_left(jule::Slice<jule::U8>& _40120_s, jule::Slice<jule::U8>& _40132_cutset) {
	jule::I32 _40213_i = 0LL;;
	while ((_40213_i < _40120_s.len())) {
		{
			jule::I32 _40414_r;;
			jule::I32 _40417_n;;
			std::tie(_40414_r,_40417_n) = _241d86859_decode_rune(_40120_s.slice(_40213_i));
			if ((_242d619ed__find_rune(_40132_cutset,_40414_r) == -1LL)) {
				_40120_s=_40120_s.slice(_40213_i);
				return;;
			};
			_40213_i+=_40417_n;
		}
	_iter_next_2289e7bba:;
	}
	_iter_end_2289e7bba:;;
	_40120_s=nullptr;
}



inline jule::Str _242d63868_trim_left(jule::Str _41618_s, jule::Str _41626_cutset) {
	jule::Slice<jule::U8> _41713_bytes = _241ec008b_stobs(_41618_s);;
	jule::Slice<jule::U8> _4189_bcutset = _241ec008b_stobs(_41626_cutset);;
	_242d61c62__trim_left(_41713_bytes,_4189_bcutset);
	return static_cast<jule::Str>(_41713_bytes);
}



inline void _242d6399a__trim_right(jule::Slice<jule::U8>& _42321_s, jule::Slice<jule::U8>& _42333_cutset) {
	jule::I32 _42413_i = _42321_s.len();;
	while ((_42413_i > 0LL)) {
		{
			jule::I32 _42614_r;;
			jule::I32 _42617_n;;
			std::tie(_42614_r,_42617_n) = _241d86e20_decode_last_rune(_42321_s.slice(0LL,_42413_i));
			if ((_242d619ed__find_rune(_42333_cutset,_42614_r) == -1LL)) {
				_42321_s=_42321_s.slice(0LL,_42413_i);
				return;;
			};
			_42413_i-=_42617_n;
		}
	_iter_next_2289eb11e:;
	}
	_iter_end_2289eb11e:;;
	_42321_s=nullptr;
}



inline jule::Str _242d63c0e_trim(jule::Str _44713_s, jule::Str _44721_cutset) {
	jule::Slice<jule::U8> _44813_bytes = _241ec008b_stobs(_44713_s);;
	jule::Slice<jule::U8> _4499_bcutset = _241ec008b_stobs(_44721_cutset);;
	_242d61c62__trim_left(_44813_bytes,_4499_bcutset);
	_242d6399a__trim_right(_44813_bytes,_4499_bcutset);
	return static_cast<jule::Str>(_44813_bytes);
}



inline jule::Bool _241e0e926_is_path_sep(jule::U8 _4820_c) {
	return ((_4820_c == 92LLU) || (_4820_c == '/'));
}



inline jule::Bool _241e0ea58_is_slash(jule::U8 _5213_c) {
	return ((_5213_c == '\\') || (_5213_c == '/'));
}



inline jule::U8 _241e0ec23_to_upper(jule::U8 _5413_c) {
	if ((('a' <= _5413_c) && (_5413_c <= 'z'))) {
		return static_cast<jule::U8>((_5413_c - ('a' - 'A')));
	};
	return _5413_c;
}



inline jule::I32 _241e102d9_volume_name_len(jule::Str _8220_path) {
	if ((_8220_path.len() < 2LL)) {
		return 0LL;
	};
	jule::U8 _879_c = _8220_path[0LL];;
	if (((_8220_path[1LL] == ':') && ((('a' <= _879_c) && (_879_c <= 'z')) || (('A' <= _879_c) && (_879_c <= 'Z'))))) {
		return 2LL;
	};
	if (((!(_241e0ea58_is_slash(_8220_path[0LL]))) || (!(_241e0ea58_is_slash(_8220_path[1LL]))))) {
		return 0LL;
	};
	jule::Str _9510_p1;;
	jule::Str _9518_rest;;
	std::tie(_9510_p1,_9518_rest,std::ignore) = _241e10581_cut_path(_8220_path.slice(2LL));
	jule::Str _9613_p2 = jule::Str();;
	jule::Bool _9713_ok = false;;
	std::tie(_9613_p2,_9518_rest,_9713_ok) = _241e10581_cut_path(_9518_rest);
	if ((!(_9713_ok))) {
		return static_cast<jule::I32>(_8220_path.len());
	};
	if (((_9510_p1 != jule::Str(".", 1)) && (_9510_p1 != jule::Str("?", 1)))) {
		return static_cast<jule::I32>(((_8220_path.len() - _9518_rest.len()) - 1LL));
	};
	if (((((_9613_p2.len() == 3LL) && (_241e0ec23_to_upper(_9613_p2[0LL]) == 'U')) && (_241e0ec23_to_upper(_9613_p2[1LL]) == 'N')) && (_241e0ec23_to_upper(_9613_p2[2LL]) == 'C'))) {
		std::tie(std::ignore,_9518_rest,std::ignore) = _241e10581_cut_path(_9518_rest);
		std::tie(std::ignore,_9518_rest,_9713_ok) = _241e10581_cut_path(_9518_rest);
		if ((!(_9713_ok))) {
			return static_cast<jule::I32>(_8220_path.len());
		};
	};
	return static_cast<jule::I32>(((_8220_path.len() - _9518_rest.len()) - 1LL));
}



inline std::tuple<jule::Str,jule::Str,jule::Bool> _241e10581_cut_path(jule::Str _11913_path) {
	jule::Str _11926_before = jule::Str();
	jule::Str _11939_after = jule::Str();
	jule::Bool _11951_found = jule::Bool();
	{
		auto &expr = _11913_path;
		auto it = expr.begin();
		_iter_begin_228a18834:;
		if (it != expr.end()) {
			jule::I32 _1209_i = it - expr.begin();
			{
				if (_241e0ea58_is_slash(_11913_path[_1209_i])) {
					_11926_before = _11913_path.slice(0LL,_1209_i);
					_11939_after = _11913_path.slice((_1209_i + 1LL));
					_11951_found = true;
					return std::make_tuple(_11926_before,_11939_after,_11951_found);
				};
			}
			_iter_next_228a18834:;
			++it;
			_1209_i++;
			goto _iter_begin_228a18834;
		}
		_iter_end_228a18834:;
	};
	_11926_before = _11913_path;
	_11939_after = jule::Str();
	_11951_found = false;
	return std::make_tuple(_11926_before,_11939_after,_11951_found);
}



inline std::tuple<jule::Str,jule::Bool> _241e10828_full_path(jule::Str _12814_name) {
	jule::Str _12827_path = jule::Str();
	jule::Bool _12838_ok = jule::Bool();
	jule::Slice<jule::U16> _1299_utf16_name = _241c89d9a_utf16_from_str(_12814_name);;
	jule::U16* _1309_p = (&(_1299_utf16_name[0LL]));;
	jule::U32 _13113_n = 100LLU;;
	for (;;) {
		{
			jule::Slice<jule::U16> _13317_buff = jule::Slice<jule::U16>::alloc(static_cast<jule::I32>(_13113_n));;
			_13113_n=static_cast<jule::U32>(_241ca426b_get_full_path_name(_1309_p,static_cast<jule::U32>(static_cast<jule::U32>(_13317_buff.len())),(&(_13317_buff[0LL])),nullptr));
			if ((_13113_n == 0LLU)) {
				_12827_path = jule::Str();
				_12838_ok = false;
				return std::make_tuple(_12827_path,_12838_ok);
			};
			if ((_13113_n <= static_cast<jule::U32>(_13317_buff.len()))) {
				_12827_path = _241c8a9d3_utf16_to_str(_13317_buff.slice(0LL,static_cast<jule::I32>(_13113_n)));
				_12838_ok = true;
				return std::make_tuple(_12827_path,_12838_ok);
			};
		}
	_iter_next_228a1a715:;
	}
	_iter_end_228a1a715:;;
	_12827_path = jule::Str();
	_12838_ok = false;
	return std::make_tuple(_12827_path,_12838_ok);
}



inline std::tuple<jule::Str,jule::Bool> _241e10b9c___abs(jule::Str _14514_path) {
	jule::Bool _14532_ok = jule::Bool();
	if (_14514_path.empty()) {
		_14514_path=jule::Str(".", 1);
	};
	std::tie(_14514_path,_14532_ok) = _241e10828_full_path(_14514_path);
	if ((!(_14532_ok))) {
		_14532_ok = false;
		return std::make_tuple(jule::Str(),_14532_ok);
	};
	_14532_ok = true;
	return std::make_tuple(_241e7ba09_clean(_14514_path),_14532_ok);
}



inline jule::Str _241e10e44___join(jule::Slice<jule::Str> _15915_elem) {
	jule::Str _16013_s = jule::Str();;
	jule::U8 _16113_last_char = 0LLU;;
	{
		auto &expr = _15915_elem;
		auto it = expr.begin();
		_iter_begin_228a20e8a:;
		if (it != expr.end()) {
			jule::Str _16217_e = *it;
			{
				{
					
					if ((_16013_s.len() == 0LL)) {
						_case_begin_228a2292b:;
					}
					else if (_241e0ea58_is_slash(_16113_last_char)) {
						_case_begin_228a22ac4:;
						{
							while (((_16217_e.len() > 0LL) && _241e0ea58_is_slash(_16217_e[0LL]))) {
								{
									(_16217_e).mut_slice(1LL);;
								}
							_iter_next_228a2329a:;
							}
							_iter_end_228a2329a:;;
						}
					}
					else if ((_16113_last_char == ':')) {
						_case_begin_228a22b3a:;
					}
					else {
						_case_begin_228a22574:;
						{
							_16013_s+=jule::Str("\\", 1);
							_16113_last_char='\\';
						}
					}
					_match_end_228a22497:;
				};
				if ((_16217_e.len() > 0LL)) {
					_16013_s+=_16217_e;
					_16113_last_char=_16217_e[(_16217_e.len() - 1LL)];
				};
			}
			_iter_next_228a20e8a:;
			++it;
			goto _iter_begin_228a20e8a;
		}
		_iter_end_228a20e8a:;
	};
	if ((_16013_s.len() == 0LL)) {
		return jule::Str();
	};
	return _241e7ba09_clean(_16013_s);
}



inline jule::Str _241e7ba09_clean(jule::Str _10818_path) {
	jule::Str _1099_original_path = _10818_path;;
	jule::I32 _1109_vol_len = _241e102d9_volume_name_len(_10818_path);;
	(_10818_path).mut_slice(_1109_vol_len);;
	if (_10818_path.empty()) {
		if ((((_1109_vol_len > 1LL) && _241e0e926_is_path_sep(_1099_original_path[0LL])) && _241e0e926_is_path_sep(_1099_original_path[1LL]))) {
			return _241e810d5_from_slash(_1099_original_path);
		};
		return (_1099_original_path + jule::Str(".", 1));
	};
	jule::Bool _1199_rooted = _241e0e926_is_path_sep(_10818_path[0LL]);;
	jule::I32 _1269_n = _10818_path.len();;
	_241e6e722_LazyBuff _12713_out = _241e6e722_LazyBuff{._field_path=_10818_path, ._field_vol_and_path=_1099_original_path, ._field_vol_len=_1109_vol_len};;
	jule::I32 _13214_r = 0LL;;
	jule::I32 _13221_dotdot = 0LL;;
	std::tie(_13214_r,_13221_dotdot) = std::make_tuple(0LL,0LL);
	if (_1199_rooted) {
		_241e75eed_append(&_12713_out, 92LLU);
		std::tie(_13214_r,_13221_dotdot) = std::make_tuple(1LL,1LL);
	};
	while ((_13214_r < _1269_n)) {
		{
			{
				
				if (_241e0e926_is_path_sep(_10818_path[_13214_r])) {
					_case_begin_228a2bced:;
					{
						(_13214_r)++;
					}
				}
				else if (((_10818_path[_13214_r] == '.') && (((_13214_r + 1LL) == _1269_n) || _241e0e926_is_path_sep(_10818_path[(_13214_r + 1LL)])))) {
					_case_begin_228a2e9e3:;
					{
						(_13214_r)++;
					}
				}
				else if ((((_10818_path[_13214_r] == '.') && (_10818_path[(_13214_r + 1LL)] == '.')) && (((_13214_r + 2LL) == _1269_n) || _241e0e926_is_path_sep(_10818_path[(_13214_r + 2LL)])))) {
					_case_begin_228a2ea59:;
					{
						_13214_r+=2LL;
						{
							
							if ((_12713_out._field_w > _13221_dotdot)) {
								_case_begin_228a329a2:;
								{
									(_12713_out._field_w)--;
									while (((_12713_out._field_w > _13221_dotdot) && (!(_241e0e926_is_path_sep(static_cast<jule::U8>(_241e6ebd9_index(&_12713_out, _12713_out._field_w))))))) {
										{
											(_12713_out._field_w)--;
										}
									_iter_next_228a32c9e:;
									}
									_iter_end_228a32c9e:;;
								}
							}
							else if ((!(_1199_rooted))) {
								_case_begin_228a32a18:;
								{
									if ((_12713_out._field_w > 0LL)) {
										_241e75eed_append(&_12713_out, 92LLU);
									};
									_241e75eed_append(&_12713_out, '.');
									_241e75eed_append(&_12713_out, '.');
									_13221_dotdot=_12713_out._field_w;
								}
							}
							_match_end_228a325d9:;
						};
					}
				}
				else {
					_case_begin_228a2a170:;
					{
						if (((_1199_rooted && (_12713_out._field_w != 1LL)) || ((!(_1199_rooted)) && (_12713_out._field_w != 0LL)))) {
							_241e75eed_append(&_12713_out, 92LLU);
						};
						if ((((true && (_12713_out._field_w == 0LL)) && (_12713_out._field_vol_len == 0LL)) && (_13214_r != 0LL))) {
							jule::I32 _17525_i = _13214_r;;
							for (; ((_17525_i < _1269_n) && (!(_241e0e926_is_path_sep(_10818_path[_17525_i])))); (_17525_i)++) {
								{
									if ((_10818_path[_17525_i] == ':')) {
										_241e75eed_append(&_12713_out, '.');
										_241e75eed_append(&_12713_out, 92LLU);
										goto _iter_end_228a2bd97;
									};
								}
							_iter_next_228a2bd97:;
							}
							_iter_end_228a2bd97:;;
						};
						for (; ((_13214_r < _1269_n) && (!(_241e0e926_is_path_sep(_10818_path[_13214_r])))); (_13214_r)++) {
							{
								_241e75eed_append(&_12713_out, _10818_path[_13214_r]);
							}
						_iter_next_228a2b7ae:;
						}
						_iter_end_228a2b7ae:;;
					}
				}
				_match_end_228a2a093:;
			};
		}
	_iter_next_228a29702:;
	}
	_iter_end_228a29702:;;
	if ((_12713_out._field_w == 0LL)) {
		_241e75eed_append(&_12713_out, '.');
	};
	return _241e810d5_from_slash(_241e78aa0_string(&_12713_out));
}



inline jule::Str _241e810d5_from_slash(jule::Str _21119_path) {
	if ((92LL == '/')) {
		return _21119_path;
	};
	return _242d62e1c_replace(_21119_path,jule::Str("/", 1),static_cast<jule::Str>(92LL),-1LL);
}



inline jule::Str _241e8b167_join(jule::Slice<jule::Str> _22513_elem) {
	return _241e10e44___join(_22513_elem);
}



inline jule::Str _241e8d1ad_ext(jule::Str _23012_path) {
	jule::I32 _23113_i = (_23012_path.len() - 1LL);;
	for (; ((_23113_i >= 0LL) && (!(_241e0e926_is_path_sep(_23012_path[_23113_i])))); (_23113_i)--) {
		{
			if ((_23012_path[_23113_i] == '.')) {
				return _23012_path.slice(_23113_i);
			};
		}
	_iter_next_228a37930:;
	}
	_iter_end_228a37930:;;
	return jule::Str();
}



inline std::tuple<jule::Str,jule::Bool> _241e9c8b5_abs(jule::Str _24512_path) {
	jule::Str _24610_abs_path;;
	jule::Bool _24620_ok;;
	std::tie(_24610_abs_path,_24620_ok) = _241e10b9c___abs(_24512_path);
	return std::make_tuple(_24610_abs_path,_24620_ok);
}



inline jule::Str _241e9e2ac_base(jule::Str _25417_path) {
	if (_25417_path.empty()) {
		return jule::Str(".", 1);
	};
	while (((_25417_path.len() > 0LL) && _241e0e926_is_path_sep(_25417_path[(_25417_path.len() - 1LL)]))) {
		{
			(_25417_path).mut_slice(0LL,(_25417_path.len() - 1LL));;
		}
	_iter_next_228a39745:;
	}
	_iter_end_228a39745:;;
	(_25417_path).mut_slice(_241ead9b4_volume_name(_25417_path).len());;
	jule::I32 _26513_i = (_25417_path.len() - 1LL);;
	while (((_26513_i >= 0LL) && (!(_241e0e926_is_path_sep(_25417_path[_26513_i]))))) {
		{
			(_26513_i)--;
		}
	_iter_next_228a3b6d1:;
	}
	_iter_end_228a3b6d1:;;
	if ((_26513_i >= 0LL)) {
		(_25417_path).mut_slice((_26513_i + 1LL));;
	};
	if (_25417_path.empty()) {
		return static_cast<jule::Str>(92LL);
	};
	return _25417_path;
}



inline jule::Str _241ea74c4_dir(jule::Str _28512_path) {
	jule::Str _2869_vol = _241ead9b4_volume_name(_28512_path);;
	jule::I32 _28713_i = (_28512_path.len() - 1LL);;
	while (((_28713_i >= _2869_vol.len()) && (!(_241e0e926_is_path_sep(_28512_path[_28713_i]))))) {
		{
			(_28713_i)--;
		}
	_iter_next_228a3db56:;
	}
	_iter_end_228a3db56:;;
	jule::Str _2919_dir = _241e7ba09_clean(_28512_path.slice(_2869_vol.len(),(_28713_i + 1LL)));;
	if (((_2919_dir == jule::Str(".", 1)) && (_2869_vol.len() > 2LL))) {
		return _2869_vol;
	};
	return (_2869_vol + _2919_dir);
}



inline jule::Str _241ead9b4_volume_name(jule::Str _30320_path) {
	return _241e810d5_from_slash(_30320_path.slice(0LL,_241e102d9_volume_name_len(_30320_path)));
}



inline jule::I32 _2410aeb71_get_last_fs_error(void) {
	jule::I32 _729_err = _240ee9281_get_last_errno();;
	{
		auto &_match_expr{ _729_err };
		
		if (_match_expr == 13LL) {
			_case_begin_228a52d35:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_228a5231d:;
			{
				return static_cast<jule::I32>(1LL);
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_228a52791:;
			{
				return static_cast<jule::I32>(2LL);
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_228a52807:;
			{
				return static_cast<jule::I32>(3LL);
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_228a5286d:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_228a528d4:;
			{
				return static_cast<jule::I32>(5LL);
			}
		}
		else if (_match_expr == 132LL) {
			_case_begin_228a53044:;
			{
				return static_cast<jule::I32>(6LL);
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_228a530aa:;
			{
				return static_cast<jule::I32>(7LL);
			}
		}
		else if (_match_expr == 24LL) {
			_case_begin_228a53121:;
			{
				return static_cast<jule::I32>(8LL);
			}
		}
		else if (_match_expr == 23LL) {
			_case_begin_228a53187:;
			{
				return static_cast<jule::I32>(9LL);
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_228a531ed:;
			{
				return static_cast<jule::I32>(10LL);
			}
		}
		else if (_match_expr == 17LL) {
			_case_begin_228a53264:;
			{
				return static_cast<jule::I32>(11LL);
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_228a532ca:;
			{
				return static_cast<jule::I32>(12LL);
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_228a53352:;
			{
				return static_cast<jule::I32>(13LL);
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_228a533c9:;
			{
				return static_cast<jule::I32>(14LL);
			}
		}
		else if (_match_expr == 124LL) {
			_case_begin_228a53451:;
			{
				return static_cast<jule::I32>(15LL);
			}
		}
		else if (_match_expr == 28LL) {
			_case_begin_228a534c8:;
			{
				return static_cast<jule::I32>(16LL);
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_228a53550:;
			{
				return static_cast<jule::I32>(17LL);
			}
		}
		else if (_match_expr == 30LL) {
			_case_begin_228a535c7:;
			{
				return static_cast<jule::I32>(18LL);
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_228a5364e:;
			{
				return static_cast<jule::I32>(19LL);
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_228a536c6:;
			{
				return static_cast<jule::I32>(20LL);
			}
		}
		else if (_match_expr == 27LL) {
			_case_begin_228a5374d:;
			{
				return static_cast<jule::I32>(21LL);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_228a537c5:;
			{
				return static_cast<jule::I32>(22LL);
			}
		}
		else if (_match_expr == 34LL) {
			_case_begin_228a5384c:;
			{
				return static_cast<jule::I32>(23LL);
			}
		}
		else if (_match_expr == 29LL) {
			_case_begin_228a538c4:;
			{
				return static_cast<jule::I32>(24LL);
			}
		}
		else if (_match_expr == 119LL) {
			_case_begin_228a5394b:;
			{
				return static_cast<jule::I32>(25LL);
			}
		}
		else if (_match_expr == 104LL) {
			_case_begin_228a539c3:;
			{
				return static_cast<jule::I32>(26LL);
			}
		}
		else if (_match_expr == 41LL) {
			_case_begin_228a53a4a:;
			{
				return static_cast<jule::I32>(27LL);
			}
		}
		else {
			_case_begin_228a52609:;
			{
				return static_cast<jule::I32>(1LL);
			}
		}
		_match_end_228a525a4:;
	};
}



inline jule::Bool _241d595a7_is_console_handle(jule::Uintptr _11622_handle) {
	return (((_11622_handle == _241c8ae23_STDIN) || (_11622_handle == _241c8e960_STDOUT)) || (_11622_handle == _241c89383_STDERR));
}



inline jule::I32 _242e08a40_get_last_process_error(void) {
	jule::I32 _429_err = _240ee9281_get_last_errno();;
	{
		auto &_match_expr{ _429_err };
		
		if (_match_expr == 13LL) {
			_case_begin_228a82abd:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		else if (_match_expr == 114LL) {
			_case_begin_228a83041:;
			{
				return static_cast<jule::I32>(1LL);
			}
		}
		else if (_match_expr == 38LL) {
			_case_begin_228a830a7:;
			{
				return static_cast<jule::I32>(2LL);
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_228a8311d:;
			{
				return static_cast<jule::I32>(3LL);
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_228a83184:;
			{
				return static_cast<jule::I32>(4LL);
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_228a833c6:;
			{
				return static_cast<jule::I32>(5LL);
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_228a8343c:;
			{
				return static_cast<jule::I32>(6LL);
			}
		}
		else if (_match_expr == 139LL || _match_expr == 16LL) {
			_case_begin_228a834a3:;
			{
				return static_cast<jule::I32>(7LL);
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_228a83519:;
			{
				return static_cast<jule::I32>(9LL);
			}
		}
		else if (_match_expr == 121LL) {
			_case_begin_228a83580:;
			{
				return static_cast<jule::I32>(10LL);
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_228a835e6:;
			{
				return static_cast<jule::I32>(11LL);
			}
		}
		else {
			_case_begin_228a82da9:;
			{
				return static_cast<jule::I32>(0LL);
			}
		}
		_match_end_228a82d54:;
	};
}



inline jule::Slice<wchar_t*> _242e1eacd_ustr_slice_to_wcstr_slice(jule::Slice<jule::Slice<jule::U16>> _1730_us) {
	jule::Slice<wchar_t*> _1813_wcs = jule::Slice<wchar_t*>::alloc(0LL,(_1730_us.len() + 1LL));;
	{
		auto &expr = _1730_us;
		auto it = expr.begin();
		_iter_begin_228a8b17b:;
		if (it != expr.end()) {
			jule::I32 _199_i = it - expr.begin();
			{
				_1813_wcs = jule::alloc_for_append(_1813_wcs,1);_1813_wcs.__push(((wchar_t*)((&(_1730_us[_199_i][0LL])))));;
			}
			_iter_next_228a8b17b:;
			++it;
			_199_i++;
			goto _iter_begin_228a8b17b;
		}
		_iter_end_228a8b17b:;
	};
	_1813_wcs = jule::alloc_for_append(_1813_wcs,1);_1813_wcs.__push(nullptr);;
	return _1813_wcs;
}



inline jule::Slice<jule::Slice<jule::U16>> _242e1ed75_str_slice_to_ustr_slice(jule::Slice<jule::Str> _2628_s) {
	jule::Slice<jule::Slice<jule::U16>> _2713_us = jule::Slice<jule::Slice<jule::U16>>::alloc(0LL,_2628_s.len());;
	{
		auto &expr = _2628_s;
		auto it = expr.begin();
		_iter_begin_228a8ce4c:;
		if (it != expr.end()) {
			jule::Str &_2812_p = *it;
			{
				_2713_us = jule::alloc_for_append(_2713_us,1);_2713_us.__push(_241c89d9a_utf16_from_str(_2812_p));;
			}
			_iter_next_228a8ce4c:;
			++it;
			goto _iter_begin_228a8ce4c;
		}
		_iter_end_228a8ce4c:;
	};
	return _2713_us;
}



inline jule::I32 _242e201c7_execvp(jule::Str _3411_file, jule::Slice<jule::Str> _3422_argv) {
	jule::Slice<jule::U16> _359_utf16_file = _241c89d9a_utf16_from_str(_3411_file);;
	jule::Slice<jule::Slice<jule::U16>> _369_ucargv = _242e1ed75_str_slice_to_ustr_slice(_3422_argv);;
	jule::Slice<wchar_t*> _379_cargv = _242e1eacd_ustr_slice_to_wcstr_slice(_369_ucargv);;
	return static_cast<jule::I32>(_wspawnvp(P_NOWAIT,((wchar_t*)((&(_359_utf16_file[0LL])))),(&(_379_cargv[0LL]))));
}



inline jule::I32 _242e205b2_execve(jule::Str _4111_file, jule::Slice<jule::Str> _4122_argv, jule::Slice<jule::Str> _4135_env) {
	jule::Slice<jule::Slice<jule::U16>> _429_ucargv = _242e1ed75_str_slice_to_ustr_slice(_4122_argv);;
	jule::Slice<wchar_t*> _439_cargv = _242e1eacd_ustr_slice_to_wcstr_slice(_429_ucargv);;
	jule::Slice<jule::Slice<jule::U16>> _449_ucenv = _242e1ed75_str_slice_to_ustr_slice(_4135_env);;
	jule::Slice<wchar_t*> _459_cenv = _242e1eacd_ustr_slice_to_wcstr_slice(_449_ucenv);;
	jule::Slice<jule::U16> _469_utf16_file = _241c89d9a_utf16_from_str(_4111_file);;
	return static_cast<jule::I32>(_wspawnvpe(P_NOWAIT,((wchar_t*)((&(_469_utf16_file[0LL])))),(&(_439_cargv[0LL])),(&(_459_cenv[0LL]))));
}



inline void _242e212d8_exit(jule::I32 _1213_code) {
	_241ca8649_exit(_1213_code);
}



inline jule::Str _242e214d6_executable(void) {
	return jule::executable();
}



inline jule::Bool _242dae133_is_std_header_path(jule::Str _2627_p) {
	return ((_2627_p[0LL] == '<') && (_2627_p[(_2627_p.len() - 1LL)] == '>'));
}



inline jule::Bool _242dae265_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto &expr = _240e6e3c1_CPP_HEADER_EXTS;
		auto it = expr.begin();
		_iter_begin_228ac3d40:;
		if (it != expr.end()) {
			jule::Str &_3212_valid_ext = *it;
			{
				if ((_3128_ext == _3212_valid_ext)) {
					return true;
				};
			}
			_iter_next_228ac3d40:;
			++it;
			goto _iter_begin_228ac3d40;
		}
		_iter_end_228ac3d40:;
	};
	return false;
}



inline jule::Bool _242dae4b8_is_valid_cpp_ext(jule::Str _4225_ext) {
	if ((_4225_ext == jule::Str(".c", 2))) {
		return true;
	};
	{
		auto &expr = _242daca16_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_228ac5d31:;
		if (it != expr.end()) {
			jule::Str &_4712_e = *it;
			{
				if ((_4225_ext == _4712_e)) {
					return true;
				};
			}
			_iter_next_228ac5d31:;
			++it;
			goto _iter_begin_228ac5d31;
		}
		_iter_end_228ac5d31:;
	};
	{
		auto &expr = _242dae045_OBJECTIVE_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_228ac6a79:;
		if (it != expr.end()) {
			jule::Str &_5312_e = *it;
			{
				if ((_4225_ext == _5312_e)) {
					return true;
				};
			}
			_iter_next_228ac6a79:;
			++it;
			goto _iter_begin_228ac6a79;
		}
		_iter_end_228ac6a79:;
	};
	return false;
}



inline jule::Str _242dbb0c9_logf(jule::Str _29413_fmt, jule::Slice<jule::Any> _29426_args) {
	return _242dbb9e2_apply_fmt(_29413_fmt,jule::Any(_29426_args));
}



inline jule::Str _242dbb3b5_arg_to_str(jule::Any _29815_arg) {
	{
		auto &_match_expr{ _29815_arg };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_228ac7c56:;
			{
				return _29815_arg.operator jule::Str();
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_228ac7cbc:;
			{
				return static_cast<jule::Str>(_29815_arg.operator jule::U8());
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_228ac7d33:;
			{
				return static_cast<jule::Str>(_29815_arg.operator jule::I32());
			}
		}
		else {
			_case_begin_228ac6ded:;
			{
				return jule::Str("<fmt?>", 6);
			}
		}
		_match_end_228ac7849:;
	};
}



inline jule::I32 _242dbb65c_find_next_fmt(jule::Str _31118_fmt) {
	{
		auto &expr = _31118_fmt;
		auto it = expr.begin();
		_iter_begin_228ac9087:;
		if (it != expr.end()) {
			jule::I32 _3129_i = it - expr.begin();
			jule::U8 &_31212_b = *it;
			{
				if ((_31212_b == '@')) {
					return _3129_i;
				};
			}
			_iter_next_228ac9087:;
			++it;
			_3129_i++;
			goto _iter_begin_228ac9087;
		}
		_iter_end_228ac9087:;
	};
	return -1LL;
}



inline jule::Str _242dbb9e2_apply_fmt(jule::Str _32018_fmt, jule::Slice<jule::Any> _32028_args) {
	jule::Str _32113_s = jule::Str();;
	{
		auto &expr = _32028_args;
		auto it = expr.begin();
		_iter_begin_228aca8b3:;
		if (it != expr.end()) {
			jule::Any &_32312_arg = *it;
			{
				jule::I32 _32413_i = _242dbb65c_find_next_fmt(_32018_fmt);;
				if ((_32413_i == -1LL)) {
					goto _iter_end_228aca8b3;
				};
				_32113_s+=_32018_fmt.slice(0LL,_32413_i);
				_32113_s+=_242dbb3b5_arg_to_str(jule::Any(_32312_arg));
				(_32018_fmt).mut_slice((_32413_i + 1LL));;
			}
			_iter_next_228aca8b3:;
			++it;
			goto _iter_begin_228aca8b3;
		}
		_iter_end_228aca8b3:;
	};
	_32113_s+=_32018_fmt;
	return _32113_s;
}



inline jule::Bool _242dbcaae_is_top_directive(jule::Str _2825_directive) {
	return ((_2825_directive == jule::Str("pass", 4)) || (_2825_directive == jule::Str("build", 5)));
}



inline jule::Bool _242dbe682_is_windows(jule::Str _5119_os) {
	return (_5119_os == jule::Str("windows", 7));
}



inline jule::Bool _242dbe96d_is_darwin(jule::Str _5418_os) {
	return (_5418_os == jule::Str("darwin", 6));
}



inline jule::Bool _242dbec15_is_linux(jule::Str _5717_os) {
	return (_5717_os == jule::Str("linux", 5));
}



inline jule::Bool _242dc0034_is_i386(jule::Str _6016_arch) {
	return (_6016_arch == jule::Str("i386", 4));
}



inline jule::Bool _242dc02cb_is_amd64(jule::Str _6317_arch) {
	return (_6317_arch == jule::Str("amd64", 5));
}



inline jule::Bool _242dc0573_is_arm64(jule::Str _6617_arch) {
	return (_6617_arch == jule::Str("arm64", 5));
}



inline jule::Bool _242dc081a_is_unix(jule::Str _6916_os) {
	return (_242dbe96d_is_darwin(_6916_os) || _242dbec15_is_linux(_6916_os));
}



inline jule::Bool _242dc0b8e_is_32bit(jule::Str _7217_arch) {
	return _242dc0034_is_i386(_7217_arch);
}



inline jule::Bool _242dc0e36_is_64bit(jule::Str _7517_arch) {
	return (_242dc02cb_is_amd64(_7517_arch) || _242dc0573_is_arm64(_7517_arch));
}



inline void _242dcd2ea_init(void) {
	jule::Str _2513_path = _242e214d6_executable();;
	if (_2513_path.empty()) {
		jule::panic(jule::Str("std::jule::build: executable file cannot found", 46) + jule::Str("\nlocation: std/jule/build/env.jule:27:9"));;
	};
	{
		_242de0087_PATH_WD=({
			auto except = _241e37256_working_dir();
			(except.ok()) ? (except.result) : ({{
				jule::panic(jule::Str("std::jule::build: working directory path cannot found", 53) + jule::Str("\nlocation: std/jule/build/env.jule:33:13"));;
				return;;
			} jule::Str();});
		});
		_242dde152_PATH_EXEC=_241ea74c4_dir(_2513_path);
		_242ddd4e7_PATH_STDLIB=_241e8b167_join(jule::Slice<jule::Str>::make({_242dde152_PATH_EXEC,jule::Str("..", 2),jule::Str("std", 3)}));
		_242e105e6_PATH_API=_241e8b167_join(jule::Slice<jule::Str>::make({_242dde152_PATH_EXEC,jule::Str("..", 2),jule::Str("api", 3),jule::Str("jule.hpp", 8)}));
	};
}



inline jule::Bool _2431e4c2c_is_unary_op(jule::Str _31320_kind) {
	{
		auto &expr = _2431451cc_UNARY_OPS;
		auto it = expr.begin();
		_iter_begin_228b29758:;
		if (it != expr.end()) {
			jule::Str &_31412_op = *it;
			{
				if ((_31320_kind == _31412_op)) {
					return true;
				};
			}
			_iter_next_228b29758:;
			++it;
			goto _iter_begin_228b29758;
		}
		_iter_end_228b29758:;
	};
	return false;
}



inline jule::Bool _2431e5018_is_bin_op(jule::Str _32418_kind) {
	{
		auto &expr = _24314551d_BIN_OPS;
		auto it = expr.begin();
		_iter_begin_228b2a160:;
		if (it != expr.end()) {
			jule::Str &_32512_op = *it;
			{
				if ((_32418_kind == _32512_op)) {
					return true;
				};
			}
			_iter_next_228b2a160:;
			++it;
			goto _iter_begin_228b2a160;
		}
		_iter_end_228b2a160:;
	};
	return false;
}



inline jule::Bool _2431e55ce_is_str(jule::Str _34615_k) {
	return ((!(_34615_k.empty())) && ((_34615_k[0LL] == '\"') || _2431e5876_is_raw_str(_34615_k)));
}



inline jule::Bool _2431e5876_is_raw_str(jule::Str _34919_k) {
	return ((!(_34919_k.empty())) && (_34919_k[0LL] == '`'));
}



inline jule::Bool _2431e5b1d_is_rune(jule::Str _35316_k) {
	return ((!(_35316_k.empty())) && (_35316_k[0LL] == '\''));
}



inline jule::Bool _2431e6239_is_bool(jule::Str _35916_k) {
	return ((_35916_k == jule::Str("true", 4)) || (_35916_k == jule::Str("false", 5)));
}



inline jule::Bool _2431e64d1_is_float(jule::Str _36217_k) {
	if (_241ec93e7_has_prefix(_36217_k,jule::Str("0x", 2))) {
		return _242d62ba8_contains_any(_36217_k,jule::Str(".pP", 3));
	};
	return _242d62ba8_contains_any(_36217_k,jule::Str(".eE", 3));
}



inline jule::Bool _2431e6778_is_num(jule::Str _37015_k) {
	if (_37015_k.empty()) {
		return false;
	};
	jule::U8 _3759_b = _37015_k[0LL];;
	return ((_3759_b == '.') || (('0' <= _3759_b) && (_3759_b <= '9')));
}



inline jule::Bool _2431e6cb7_is_ignore_ident(jule::Str _38524_ident) {
	return (_38524_ident == jule::Str("_", 1));
}



inline jule::Bool _2431e705e_is_anon_ident(jule::Str _38822_ident) {
	return (_38822_ident == jule::Str("<anonymous>", 11));
}



inline jule::Bool _2431e759d_is_space(jule::I32 _40217_r) {
	{
		auto &expr = _243144e68_SPACES;
		auto it = expr.begin();
		_iter_begin_228b34037:;
		if (it != expr.end()) {
			jule::I32 &_40312_cr = *it;
			{
				if ((_40217_r == _40312_cr)) {
					return true;
				};
			}
			_iter_next_228b34037:;
			++it;
			goto _iter_begin_228b34037;
		}
		_iter_end_228b34037:;
	};
	return false;
}



inline jule::Bool _2431e79ee_is_letter(jule::I32 _41318_r) {
	return _242cdd23d_is_letter(_41318_r);
}



inline jule::Bool _2431e803d_is_decimal(jule::U8 _43519_b) {
	return (('0' <= _43519_b) && (_43519_b <= '9'));
}



inline jule::Bool _2431e82d5_is_binary(jule::U8 _43818_b) {
	return ((_43818_b == '0') || (_43818_b == '1'));
}



inline jule::Bool _2431e857c_is_octal(jule::U8 _44117_b) {
	return (('0' <= _44117_b) && (_44117_b <= '7'));
}



inline jule::Bool _2431e8824_is_hex(jule::U8 _44415_b) {
	{
		
		if ((('0' <= _44415_b) && (_44415_b <= '9'))) {
			_case_begin_228b38d94:;
			{
				return true;
			}
		}
		else if ((('a' <= _44415_b) && (_44415_b <= 'f'))) {
			_case_begin_228b38679:;
			{
				return true;
			}
		}
		else if ((('A' <= _44415_b) && (_44415_b <= 'F'))) {
			_case_begin_228b386e0:;
			{
				return true;
			}
		}
		else {
			_case_begin_228b38613:;
			{
				return false;
			}
		}
		_match_end_228b38558:;
	};
}



inline jule::Bool _2431e8abb_is_assign(jule::U32 _45918_id) {
	return (((((((_45918_id == static_cast<jule::U32>(2LLU)) || (_45918_id == static_cast<jule::U32>(31LLU))) || (_45918_id == static_cast<jule::U32>(34LLU))) || (_45918_id == static_cast<jule::U32>(20LLU))) || (_45918_id == static_cast<jule::U32>(28LLU))) || (_45918_id == static_cast<jule::U32>(3LLU))) || (_45918_id == static_cast<jule::U32>(7LLU)));
}



inline jule::Bool _2431e8d63_is_postfix_op(jule::Str _47022_kind) {
	{
		auto &expr = _2431dd9e5_POSTFIX_OPS;
		auto it = expr.begin();
		_iter_begin_228b3a7e1:;
		if (it != expr.end()) {
			jule::Str &_47112_op = *it;
			{
				if ((_47022_kind == _47112_op)) {
					return true;
				};
			}
			_iter_next_228b3a7e1:;
			++it;
			goto _iter_begin_228b3a7e1;
		}
		_iter_end_228b3a7e1:;
	};
	return false;
}



inline jule::Bool _2431e910a_is_assign_op(jule::Str _48121_kind) {
	if (_2431e8d63_is_postfix_op(_48121_kind)) {
		return true;
	};
	{
		auto &expr = _2431ddd36_ASSING_OPS;
		auto it = expr.begin();
		_iter_begin_228b3d2e9:;
		if (it != expr.end()) {
			jule::Str &_48612_op = *it;
			{
				if ((_48121_kind == _48612_op)) {
					return true;
				};
			}
			_iter_next_228b3d2e9:;
			++it;
			goto _iter_begin_228b3d2e9;
		}
		_iter_end_228b3d2e9:;
	};
	return false;
}



inline jule::Ptr<_2431e98ad_File> _2431eaddc_new_file_set(jule::Str _6321_path) {
	return jule::new_ptr<_2431e98ad_File>(_2431e98ad_File{._field_path=_6321_path, });
}



inline _242dbab89_Log _2431ec718_make_err(jule::I32 _11113_row, jule::I32 _11123_col, jule::Ptr<_2431e98ad_File>& _11134_f, jule::Str _11144_fmt, jule::Slice<jule::Any> _11157_args) {
	return _242dbab89_Log{._field_kind=static_cast<jule::I32>(1LL), ._field_row=_11113_row, ._field_column=_11123_col, ._field_path=_11134_f.get()._field_path, ._field_text=_242dbb0c9_logf(_11144_fmt,jule::Any(_11157_args)), };
}



inline jule::Bool _2431eca9d_bytes_has_prefix(jule::Slice<jule::U8>& _12122_bytes, jule::Str _12137_prefix) {
	if ((_12122_bytes.len() < _12137_prefix.len())) {
		return false;
	};
	{
		auto &expr = _12137_prefix;
		auto it = expr.begin();
		_iter_begin_228b4890e:;
		if (it != expr.end()) {
			jule::I32 _1259_i = it - expr.begin();
			{
				if ((_12122_bytes[_1259_i] != _12137_prefix[_1259_i])) {
					return false;
				};
			}
			_iter_next_228b4890e:;
			++it;
			_1259_i++;
			goto _iter_begin_228b4890e;
		}
		_iter_end_228b4890e:;
	};
	return true;
}



inline jule::Str _2431ecdde_float_fmt_e(jule::Slice<jule::U8>& _13317_txt, jule::I32 _13334_i) {
	jule::Str _13344_lit = jule::Str();
	(_13334_i)++;
	if ((_13334_i >= _13317_txt.len())) {
		return _13344_lit;
	};
	jule::U8 _13913_b = _13317_txt[_13334_i];;
	if ((_13913_b == '_')) {
		return _13344_lit;
	};
	if (((_13913_b == '+') || (_13913_b == '-'))) {
		(_13334_i)++;
		if ((_13334_i >= _13317_txt.len())) {
			return _13344_lit;
		};
		if ((_13317_txt[_13334_i] == '_')) {
			return _13344_lit;
		};
	};
	jule::I32 _1539_first = _13334_i;;
	for (; (_13334_i < _13317_txt.len()); (_13334_i)++) {
		{
			_13913_b=_13317_txt[_13334_i];
			if (((_13913_b != '_') && (!(_2431e803d_is_decimal(_13913_b))))) {
				goto _iter_end_228b4c171;
			};
		}
	_iter_next_228b4c171:;
	}
	_iter_end_228b4c171:;;
	if ((_13334_i == _1539_first)) {
		_13344_lit = jule::Str();
		return _13344_lit;
	};
	_13344_lit = static_cast<jule::Str>(_13317_txt.slice(0LL,_13334_i));
	return _13344_lit;
}



inline jule::Str _2431ed274_float_fmt_p(jule::Slice<jule::U8>& _16717_txt, jule::I32 _16730_i) {
	return _2431ecdde_float_fmt_e(_16717_txt,_16730_i);
}



inline jule::Str _2431ed5b5_float_fmt_dotnp(jule::Slice<jule::U8>& _17121_txt, jule::I32 _17138_i) {
	if ((_17121_txt[_17138_i] != '.')) {
		return jule::Str();
	};
	(_17138_i)++;
	_julec_label_loop:;
	for (; (_17138_i < _17121_txt.len()); (_17138_i)++) {
		{
			jule::U8 _17913_b = _17121_txt[_17138_i];;
			{
				
				if ((_17913_b == '_') || _2431e803d_is_decimal(_17913_b)) {
					_case_begin_228b5043d:;
					{
						goto _iter_next_228b4db56;
					}
				}
				else if (_2431eed69_is_float_fmt_p(_17913_b,_17138_i)) {
					_case_begin_228b504a4:;
					{
						return _2431ed274_float_fmt_p(_17121_txt,_17138_i);
					}
				}
				else {
					_case_begin_228b503c7:;
					{
						goto _iter_end_228b4db56;
					}
				}
				_match_end_228b50361:;
			};
		}
	_iter_next_228b4db56:;
	}
	_iter_end_228b4db56:;;
	return jule::Str();
}



inline jule::Str _2431ed906_float_fmt_dotfp(jule::Slice<jule::U8>& _19221_txt, jule::I32 _19238_i) {
	_19238_i+=2LL;
	return _2431ecdde_float_fmt_e(_19221_txt,_19238_i);
}



inline jule::Str _2431edc47_float_fmt_dotp(jule::Slice<jule::U8>& _19720_txt, jule::I32 _19737_i) {
	(_19737_i)++;
	return _2431ecdde_float_fmt_e(_19720_txt,_19737_i);
}



inline jule::Str _2431ee198_float_num(jule::Slice<jule::U8>& _20215_txt, jule::I32 _20232_i) {
	jule::Str _20242_lit = jule::Str();
	(_20232_i)++;
	if ((_20232_i >= _20215_txt.len())) {
		_20242_lit = static_cast<jule::Str>(_20215_txt);
		return _20242_lit;
	};
	if ((_20215_txt[_20232_i] == '_')) {
		(_20232_i)--;
		_20242_lit = static_cast<jule::Str>(_20215_txt.slice(0LL,_20232_i));
		return _20242_lit;
	};
	for (; (_20232_i < _20215_txt.len()); (_20232_i)++) {
		{
			jule::U8 _21213_b = _20215_txt[_20232_i];;
			if (((_20232_i > 1LL) && ((_21213_b == 'e') || (_21213_b == 'E')))) {
				_20242_lit = _2431ecdde_float_fmt_e(_20215_txt,_20232_i);
				return _20242_lit;
			};
			if (((_21213_b != '_') && (!(_2431e803d_is_decimal(_21213_b))))) {
				goto _iter_end_228b52c59;
			};
		}
	_iter_next_228b52c59:;
	}
	_iter_end_228b52c59:;;
	if ((_20232_i == 1LL)) {
		return _20242_lit;
	};
	_20242_lit = static_cast<jule::Str>(_20215_txt.slice(0LL,_20232_i));
	return _20242_lit;
}



inline jule::Str _2431ee440_common_num(jule::Slice<jule::U8>& _22716_txt) {
	jule::Str _22731_lit = jule::Str();
	jule::I32 _22813_i = 0LL;;
	_julec_label_loop:;
	for (; (_22813_i < _22716_txt.len()); (_22813_i)++) {
		{
			jule::U8 _23113_b = _22716_txt[_22813_i];;
			{
				
				if ((_23113_b == '.')) {
					_case_begin_228b5749a:;
					{
						_22731_lit = _2431ee198_float_num(_22716_txt,_22813_i);
						return _22731_lit;
					}
				}
				else if ((_23113_b == '_')) {
					_case_begin_228b57522:;
					{
						goto _iter_next_228b56730;
					}
				}
				else if (_2431eea28_is_float_fmt_e(_23113_b,_22813_i)) {
					_case_begin_228b57599:;
					{
						_22731_lit = _2431ecdde_float_fmt_e(_22716_txt,_22813_i);
						return _22731_lit;
					}
				}
				else if ((!(_2431e803d_is_decimal(_23113_b)))) {
					_case_begin_228b57621:;
					{
						goto _iter_end_228b56730;
					}
				}
				_match_end_228b573bd:;
			};
		}
	_iter_next_228b56730:;
	}
	_iter_end_228b56730:;;
	if ((_22813_i == 0LL)) {
		return _22731_lit;
	};
	_22731_lit = static_cast<jule::Str>(_22716_txt.slice(0LL,_22813_i));
	return _22731_lit;
}



inline jule::Str _2431ee6d7_binary_num(jule::Slice<jule::U8>& _25016_txt) {
	jule::Str _25031_lit = jule::Str();
	if ((!(_2431eca9d_bytes_has_prefix(_25016_txt,jule::Str("0b", 2))))) {
		_25031_lit = jule::Str();
		return _25031_lit;
	};
	if ((_25016_txt.len() < 2LL)) {
		return _25031_lit;
	};
	;
	jule::I32 _25913_i = 2LL;;
	for (; (_25913_i < _25016_txt.len()); (_25913_i)++) {
		{
			if (((_25016_txt[_25913_i] != '_') && (!(_2431e82d5_is_binary(_25016_txt[_25913_i]))))) {
				goto _iter_end_228b5ac40;
			};
		}
	_iter_next_228b5ac40:;
	}
	_iter_end_228b5ac40:;;
	if ((_25913_i == 2LL)) {
		return _25031_lit;
	};
	_25031_lit = static_cast<jule::Str>(_25016_txt.slice(0LL,_25913_i));
	return _25031_lit;
}



inline jule::Bool _2431eea28_is_float_fmt_e(jule::U8 _27219_b, jule::I32 _27228_i) {
	return ((_27228_i > 0LL) && ((_27219_b == 'e') || (_27219_b == 'E')));
}



inline jule::Bool _2431eed69_is_float_fmt_p(jule::U8 _27619_b, jule::I32 _27628_i) {
	return ((_27628_i > 0LL) && ((_27619_b == 'p') || (_27619_b == 'P')));
}



inline jule::Bool _2432001aa_is_float_fmt_dotnp(jule::Slice<jule::U8>& _28024_txt, jule::I32 _28041_i) {
	if ((_28024_txt[_28041_i] != '.')) {
		return false;
	};
	(_28041_i)++;
	_julec_label_loop:;
	for (; (_28041_i < _28024_txt.len()); (_28041_i)++) {
		{
			jule::U8 _28713_b = _28024_txt[_28041_i];;
			{
				
				if ((_28713_b == '_') || _2431e803d_is_decimal(_28713_b)) {
					_case_begin_228b60607:;
					{
						goto _iter_next_228b5d627;
					}
				}
				else if (_2431eed69_is_float_fmt_p(_28713_b,_28041_i)) {
					_case_begin_228b6066d:;
					{
						return true;
					}
				}
				else {
					_case_begin_228b60591:;
					{
						goto _iter_end_228b5d627;
					}
				}
				_match_end_228b6052a:;
			};
		}
	_iter_next_228b5d627:;
	}
	_iter_end_228b5d627:;;
	return false;
}



inline jule::Bool _2432004eb_is_float_fmt_dotp(jule::Slice<jule::U8>& _30123_txt, jule::I32 _30136_i) {
	{
		
		if ((_30123_txt.len() < 3LL)) {
			_case_begin_228b6240b:;
			{
				goto _case_begin_228b61bbe;
			}
		}
		else if ((_30123_txt[_30136_i] != '.')) {
			_case_begin_228b61bbe:;
			{
				goto _case_begin_228b61c35;
			}
		}
		else if (((_30123_txt[(_30136_i + 1LL)] != 'p') && (_30123_txt[(_30136_i + 1LL)] != 'P'))) {
			_case_begin_228b61c35:;
			{
				return false;
			}
		}
		else {
			_case_begin_228b61b58:;
			{
				return true;
			}
		}
		_match_end_228b61a7b:;
	};
}



inline jule::Bool _24320083c_is_float_fmt_dotfp(jule::Slice<jule::U8>& _31424_txt, jule::I32 _31437_i) {
	{
		
		if ((_31424_txt.len() < 4LL)) {
			_case_begin_228b6471b:;
			{
				goto _case_begin_228b64056;
			}
		}
		else if ((_31424_txt[_31437_i] != '.')) {
			_case_begin_228b64056:;
			{
				goto _case_begin_228b640bc;
			}
		}
		else if (((_31424_txt[(_31437_i + 1LL)] != 'f') && (_31424_txt[(_31437_i + 1LL)] != 'F'))) {
			_case_begin_228b640bc:;
			{
				goto _case_begin_228b64133;
			}
		}
		else if (((_31424_txt[(_31437_i + 2LL)] != 'p') && (_31424_txt[(_31437_i + 1LL)] != 'P'))) {
			_case_begin_228b64133:;
			{
				return false;
			}
		}
		else {
			_case_begin_228b63a17:;
			{
				return true;
			}
		}
		_match_end_228b6393a:;
	};
}



inline jule::Str _243200c8d_octal_num(jule::Slice<jule::U8>& _32915_txt) {
	jule::Str _32930_lit = jule::Str();
	if ((_32915_txt[0LL] != '0')) {
		_32930_lit = jule::Str();
		return _32930_lit;
	};
	if ((_32915_txt.len() < 2LL)) {
		return _32930_lit;
	};
	jule::I32 _33713_octal_start = 1LL;;
	jule::Bool _33913_o = false;;
	if ((_32915_txt[1LL] == 'o')) {
		if ((_32915_txt.len() < 3LL)) {
			return _32930_lit;
		};
		(_33713_octal_start)++;
		_33913_o=true;
	};
	jule::I32 _34813_i = _33713_octal_start;;
	for (; (_34813_i < _32915_txt.len()); (_34813_i)++) {
		{
			jule::U8 _35013_b = _32915_txt[_34813_i];;
			if ((_35013_b == '.')) {
				if (_33913_o) {
					_32930_lit = jule::Str();
					return _32930_lit;
				};
				_32930_lit = _2431ee198_float_num(_32915_txt,_34813_i);
				return _32930_lit;
			};
			if (_2431eea28_is_float_fmt_e(_35013_b,_34813_i)) {
				_32930_lit = _2431ecdde_float_fmt_e(_32915_txt,_34813_i);
				return _32930_lit;
			};
			if (((_35013_b != '_') && (!(_2431e857c_is_octal(_35013_b))))) {
				goto _iter_end_228b69545;
			};
		}
	_iter_next_228b69545:;
	}
	_iter_end_228b69545:;;
	if ((_34813_i == _33713_octal_start)) {
		return _32930_lit;
	};
	_32930_lit = static_cast<jule::Str>(_32915_txt.slice(0LL,_34813_i));
	return _32930_lit;
}



inline jule::Str _243201035_hex_num(jule::Slice<jule::U8>& _37113_txt) {
	jule::Str _37128_lit = jule::Str();
	if ((_37113_txt.len() < 3LL)) {
		return _37128_lit;
	};
	if (((_37113_txt[0LL] != '0') || ((_37113_txt[1LL] != 'x') && (_37113_txt[1LL] != 'X')))) {
		return _37128_lit;
	};
	;
	jule::I32 _38013_i = 2LL;;
	_julec_label_loop:;
	for (; (_38013_i < _37113_txt.len()); (_38013_i)++) {
		{
			jule::U8 _38313_b = _37113_txt[_38013_i];;
			{
				
				if (_2432004eb_is_float_fmt_dotp(_37113_txt,_38013_i)) {
					_case_begin_228b70194:;
					{
						_37128_lit = _2431edc47_float_fmt_dotp(_37113_txt,_38013_i);
						return _37128_lit;
					}
				}
				else if (_24320083c_is_float_fmt_dotfp(_37113_txt,_38013_i)) {
					_case_begin_228b7021b:;
					{
						_37128_lit = _2431ed906_float_fmt_dotfp(_37113_txt,_38013_i);
						return _37128_lit;
					}
				}
				else if (_2431eed69_is_float_fmt_p(_38313_b,_38013_i)) {
					_case_begin_228b70293:;
					{
						_37128_lit = _2431ed274_float_fmt_p(_37113_txt,_38013_i);
						return _37128_lit;
					}
				}
				else if (_2432001aa_is_float_fmt_dotnp(_37113_txt,_38013_i)) {
					_case_begin_228b7031a:;
					{
						_37128_lit = _2431ed5b5_float_fmt_dotnp(_37113_txt,_38013_i);
						return _37128_lit;
					}
				}
				else if (((_38313_b != '_') && (!(_2431e8824_is_hex(_38313_b))))) {
					_case_begin_228b70392:;
					{
						goto _iter_end_228b6e539;
					}
				}
				_match_end_228b700a6:;
			};
		}
	_iter_next_228b6e539:;
	}
	_iter_end_228b6e539:;;
	if ((_38013_i == 2LL)) {
		return _37128_lit;
	};
	_37128_lit = static_cast<jule::Str>(_37113_txt.slice(0LL,_38013_i));
	return _37128_lit;
}



inline jule::Str _243201376_hex_escape(jule::Slice<jule::U8>& _40416_txt, jule::I32 _40429_n) {
	jule::Str _40439_seq = jule::Str();
	if ((_40416_txt.len() < _40429_n)) {
		return _40439_seq;
	};
	;
	jule::I32 _41013_i = 2LL;;
	for (; (_41013_i < _40429_n); (_41013_i)++) {
		{
			if ((!(_2431e8824_is_hex(_40416_txt[_41013_i])))) {
				return _40439_seq;
			};
		}
	_iter_next_228b72eaa:;
	}
	_iter_end_228b72eaa:;;
	_40439_seq=static_cast<jule::Str>(_40416_txt.slice(0LL,_40429_n));
	return _40439_seq;
}



inline jule::Str _243201640_big_unicode_point_escape(jule::Slice<jule::U8>& _42230_txt) {
	return _243201376_hex_escape(_42230_txt,10LL);
}



inline jule::Str _24320180a_little_unicode_point_escape(jule::Slice<jule::U8>& _42733_txt) {
	return _243201376_hex_escape(_42733_txt,6LL);
}



inline jule::Str _243201ab3_hex_byte_escape(jule::Slice<jule::U8>& _43221_txt) {
	return _243201376_hex_escape(_43221_txt,4LL);
}



inline jule::Str _243201d5a_byte_escape(jule::Slice<jule::U8>& _43717_txt) {
	jule::Str _43732_seq = jule::Str();
	if ((_43717_txt.len() < 4LL)) {
		return _43732_seq;
	};
	if ((((!(_2431e857c_is_octal(_43717_txt[1LL]))) || (!(_2431e857c_is_octal(_43717_txt[2LL])))) || (!(_2431e857c_is_octal(_43717_txt[3LL]))))) {
		return _43732_seq;
	};
	_43732_seq = static_cast<jule::Str>(_43717_txt.slice(0LL,4LL));
	return _43732_seq;
}



inline jule::Slice<_242dbab89_Log> _243206854_lex(jule::Ptr<_2431e98ad_File> _83216_f, jule::I32 _83226_mode) {
	if ((_83216_f == nullptr)) {
		return nullptr;
	};
	_243202542_Lex _83713_lex = _243202542_Lex{._field_mode=_83226_mode, ._field_file=_83216_f, ._field_pos=0LL, ._field_row=-1LL, };;
	_2432050d3_new_line(&_83713_lex);
	_2432030d1_lex(&_83713_lex);
	if ((_83713_lex._field_errors.len() > 0LL)) {
		return _83713_lex._field_errors;
	};
	_83216_f.get()._field_tokens=_83713_lex._field_tokens;
	return nullptr;
}



inline void _24491e433_lshift_unsig(_2448ab524_Const& _58722_c, _2448ab524_Const& _58733_x) {
	jule::U64 _5889_l = _244918482_as_u64(&_58722_c);;
	jule::U64 _5899_r = _244918482_as_u64(&_58733_x);;
	_244918be1_set_u64(&_58722_c, static_cast<jule::U64>((_5889_l << _5899_r)));
}



inline void _24491e730_rshift_unsig(_2448ab524_Const& _59322_c, _2448ab524_Const& _59333_x) {
	jule::U64 _5949_l = _244918482_as_u64(&_59322_c);;
	jule::U64 _5959_r = _244918482_as_u64(&_59333_x);;
	_244918be1_set_u64(&_59322_c, static_cast<jule::U64>((_5949_l >> _5959_r)));
}



inline jule::I32 _24542726a_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::I32>((64LL - _24542e97b_len64(_6124_x)));
}



inline jule::I32 _2454282c1_trailing_zeros(jule::U32 _8323_x) {
	;
	return static_cast<jule::I32>(_245428e5e_trailing_zeros64(static_cast<jule::U64>(static_cast<jule::U64>(_8323_x))));
}



inline jule::I32 _245428bb7_trailing_zeros32(jule::U32 _10525_x) {
	if ((_10525_x == 0LLU)) {
		return 32LL;
	};
	return static_cast<jule::I32>(static_cast<jule::I32>(_24542791e_DE_BRUIJN32_TAB[static_cast<jule::I32>((((_10525_x & (-(_10525_x))) * 125613361LLU) >> 27LLU))]));
}



inline jule::I32 _245428e5e_trailing_zeros64(jule::U64 _11425_x) {
	if ((_11425_x == 0LLU)) {
		return 64LL;
	};
	return static_cast<jule::I32>(static_cast<jule::I32>(_24542806d_DE_BRUIJN64_TAB[static_cast<jule::I32>((((_11425_x & (-(_11425_x))) * 285870213051353865LLU) >> 58LLU))]));
}



inline jule::I32 _24542e6d4_len32(jule::U32 _35218_x) {
	jule::I32 _35228_n = jule::I32();
	if ((_35218_x >= 65536LLU)) {
		_35218_x>>=16LLU;
		_35228_n=16LL;
	};
	if ((_35218_x >= 256LLU)) {
		_35218_x>>=8LLU;
		_35228_n+=8LL;
	};
	_35228_n = static_cast<jule::I32>((_35228_n + static_cast<jule::I32>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::I32>(_35218_x)])));
	return _35228_n;
}



inline jule::I32 _24542e97b_len64(jule::U64 _36618_x) {
	jule::I32 _36628_n = jule::I32();
	if ((_36618_x >= 4294967296LLU)) {
		_36618_x>>=32LLU;
		_36628_n=32LL;
	};
	if ((_36618_x >= 65536LLU)) {
		_36618_x>>=16LLU;
		_36628_n+=16LL;
	};
	if ((_36618_x >= 256LLU)) {
		_36618_x>>=8LLU;
		_36628_n+=8LL;
	};
	_36628_n = static_cast<jule::I32>((_36628_n + static_cast<jule::I32>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::I32>(_36618_x)])));
	return _36628_n;
}



inline std::tuple<jule::U64,jule::U64> _24543063b_add64(jule::U64 _41514_x, jule::U64 _41522_y, jule::U64 _41530_carry) {
	jule::U64 _41544_sum = jule::U64();
	jule::U64 _41554_carryout = jule::U64();
	_41544_sum=static_cast<jule::U64>(((_41514_x + _41522_y) + _41530_carry));
	_41554_carryout=static_cast<jule::U64>((((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LLU));
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::U64,jule::U64> _245431cbe_mul64(jule::U64 _49914_x, jule::U64 _49922_y) {
	jule::U64 _49932_hi = jule::U64();
	jule::U64 _49941_lo = jule::U64();
	;
	jule::U64 _5019_x0 = (_49914_x & 4294967295LLU);;
	jule::U64 _5029_x1 = (_49914_x >> 32LLU);;
	jule::U64 _5039_y0 = (_49922_y & 4294967295LLU);;
	jule::U64 _5049_y1 = (_49922_y >> 32LLU);;
	jule::U64 _5059_w0 = (_5019_x0 * _5039_y0);;
	jule::U64 _5069_t = ((_5029_x1 * _5039_y0) + (_5059_w0 >> 32LLU));;
	jule::U64 _50713_w1 = (_5069_t & 4294967295LLU);;
	jule::U64 _5089_w2 = (_5069_t >> 32LLU);;
	_50713_w1+=(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>((((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LLU)));
	_49941_lo=static_cast<jule::U64>((_49914_x * _49922_y));
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline jule::U32 _245347a81_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _245347d6c_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _245348114_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _245348433_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline std::tuple<jule::F64,jule::I32> _24534aa40_frexp(jule::F64 _4718_f) {
	jule::F64 _4728_frac = jule::F64();
	jule::I32 _4739_exp = jule::I32();
	{
		
		if ((_4718_f == 0LL)) {
			_case_begin_228d67de7:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		else if (_2453bbb49_is_inf(_4718_f,0LL) || _2453b4845_is_nan(_4718_f)) {
			_case_begin_228d67e6e:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		_match_end_228d67d09:;
	};
	std::tie(_4718_f,_4739_exp) = _2453bd255_normalize(_4718_f);
	jule::U64 _5613_x = _245348114_f64_bits(_4718_f);;
	_4739_exp+=((static_cast<jule::I32>(((_5613_x >> 52LLU) & 2047LLU)) - 1023LL) + 1LL);
	_5613_x=static_cast<jule::U64>((_5613_x & 9227875636482146303LLU));
	_5613_x|=4602678819172646912LLU;
	_4728_frac=static_cast<jule::F64>(_245348433_f64_from_bits(_5613_x));
	return std::make_tuple(_4728_frac,_4739_exp);
}



inline jule::F64 _2453b3910_nan(void) {
	return static_cast<jule::F64>(_245348433_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _2453b4845_is_nan(jule::F64 _5215_f) {
	return (_5215_f != _5215_f);
}



inline jule::F64 _2453b62d6_inf(jule::I32 _6112_sign) {
	if ((_6112_sign >= 0LL)) {
		return static_cast<jule::F64>(_245348433_f64_from_bits(9218868437227405312LLU));
	};
	return static_cast<jule::F64>(_245348433_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _2453bbb49_is_inf(jule::F64 _7215_f, jule::I32 _7223_sign) {
	return (((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64)));
}



inline std::tuple<jule::F64,jule::I32> _2453bd255_normalize(jule::F64 _8214_x) {
	jule::F64 _8224_y = jule::F64();
	jule::I32 _8232_exp = jule::I32();
	;
	if ((_2453d4d93_abs(_8214_x) < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014)) {
		_8224_y = static_cast<jule::F64>((_8214_x * 4503599627370496LL));
		_8232_exp = -52LL;
		return std::make_tuple(_8224_y,_8232_exp);
	};
	_8224_y = _8214_x;
	_8232_exp = 0LL;
	return std::make_tuple(_8224_y,_8232_exp);
}



inline jule::F64 _2453cd41e_log(jule::F64 _11112_x) {
	;
	;
	;
	;
	;
	;
	;
	;
	;
	{
		
		if (_2453b4845_is_nan(_11112_x) || _2453bbb49_is_inf(_11112_x,1LL)) {
			_case_begin_24325c316:;
			{
				return _11112_x;
			}
		}
		else if ((_11112_x < 0LL)) {
			_case_begin_24325c5be:;
			{
				return static_cast<jule::F64>(_2453b3910_nan());
			}
		}
		else if ((_11112_x == 0LL)) {
			_case_begin_24325c767:;
			{
				return static_cast<jule::F64>(_2453b62d6_inf(-1LL));
			}
		}
		_match_end_2446a0e51:;
	};
	jule::F64 _13314_f1;;
	jule::I32 _13322_ki;;
	std::tie(_13314_f1,_13322_ki) = _24534aa40_frexp(_11112_x);
	if ((_13314_f1 < 0.7071067811865476)) {
		_13314_f1*=2LL;
		(_13322_ki)--;
	};
	jule::F64 _1389_f = (_13314_f1 - 1LL);;
	jule::F64 _1399_k = static_cast<jule::F64>(_13322_ki);;
	jule::F64 _1429_s = jule::div(_1389_f,(2LL + _1389_f));;
	jule::F64 _1439_s2 = (_1429_s * _1429_s);;
	jule::F64 _1449_s4 = (_1439_s2 * _1439_s2);;
	jule::F64 _1459_t1 = (_1439_s2 * (0.6666666666666735 + (_1449_s4 * (0.2857142874366239 + (_1449_s4 * (0.1818357216161805 + (_1449_s4 * 0.14798198605116586)))))));;
	jule::F64 _1469_t2 = (_1449_s4 * (0.3999999999940942 + (_1449_s4 * (0.22222198432149784 + (_1449_s4 * 0.15313837699209373)))));;
	jule::F64 _1479_R = (_1459_t1 + _1469_t2);;
	jule::F64 _1489_hfsq = ((0.5 * _1389_f) * _1389_f);;
	return static_cast<jule::F64>(((_1399_k * 0.6931471803691238) - ((_1489_hfsq - ((_1429_s * (_1489_hfsq + _1479_R)) + (_1399_k * 0.00000000019082149292705877))) - _1389_f)));
}



inline jule::F64 _2453d4d93_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_245348433_f64_from_bits(static_cast<jule::U64>((_245348114_f64_bits(_4312_x) & 9223372036854775807LLU))));
}



inline std::tuple<jule::F64,jule::F64> _24543a8dd_modf(jule::F64 _4413_f) {
	jule::F64 _4423_integer = jule::F64();
	jule::F64 _4437_frac = jule::F64();
	;
	jule::F64 _469_abs_f = _2453d4d93_abs(_4413_f);;
	jule::F64 _4713_i = 0LL;;
	if ((_469_abs_f > 4503599627370496LL)) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>((_469_abs_f + 4503599627370496LL));
		_4713_i-=4503599627370496LL;
		while ((_4713_i > _469_abs_f)) {
			{
				(_4713_i)--;
			}
		_iter_next_243a40599:;
		}
		_iter_end_243a40599:;;
		if ((_4413_f < 0LL)) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		};
	};
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>((_4413_f - _4713_i));
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::F64 _24543b1a2_log2(jule::F64 _4413_x) {
	jule::F64 _4510_frac;;
	jule::I32 _4516_exp;;
	std::tie(_4510_frac,_4516_exp) = _24534aa40_frexp(_4413_x);
	if ((_4510_frac == 0.5)) {
		return static_cast<jule::F64>(static_cast<jule::F64>((_4516_exp - 1LL)));
	};
	return static_cast<jule::F64>(((_2453cd41e_log(_4510_frac) * 1.4426950408889634) + static_cast<jule::F64>(_4516_exp)));
}



inline jule::Str _24546780a_fmt_float(jule::F64 _7818_f, jule::U8 _7826_fmt, jule::I32 _7837_prec, jule::I32 _7848_bit_size) {
	return static_cast<jule::Str>(_245467d7c_generic_ftoa(jule::Slice<jule::U8>::alloc(0LL,_24546ae18_max(static_cast<jule::I32>((_7837_prec + 4LL)),24LL)),_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _245467d7c_generic_ftoa(jule::Slice<jule::U8> _8221_dst, jule::F64 _8234_val, jule::U8 _8244_fmt, jule::I32 _8259_prec, jule::I32 _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;;
	jule::Ptr<_24546660b_FloatInfo> _8413_flt = nullptr;;
	{
		auto &_match_expr{ _8270_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_229054c93:;
			{
				_8313_bits=static_cast<jule::U64>(static_cast<jule::U64>(_245347a81_f32_bits(static_cast<jule::F32>(static_cast<jule::F32>(_8234_val)))));
				_8413_flt=((jule::Ptr<_24546660b_FloatInfo>)((&(_245466a29_F32_INFO))));
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_229054e80:;
			{
				_8313_bits=static_cast<jule::U64>(_245348114_f64_bits(_8234_val));
				_8413_flt=((jule::Ptr<_24546660b_FloatInfo>)((&(_245466d7b_F64_INFO))));
			}
		}
		else {
			_case_begin_229054666:;
			{
				jule::panic(jule::Str("std::conv: illegal bit_size", 27) + jule::Str("\nlocation: std/conv/ftoa.jule:93:9"));;
			}
		}
		_match_end_229053324:;
	};
	jule::Bool _969_neg = ((_8313_bits >> (_8413_flt.get()._field_expbits + _8413_flt.get()._field_mantbits)) != 0LLU);;
	jule::I32 _9713_exp = (static_cast<jule::I32>((_8313_bits >> _8413_flt.get()._field_mantbits)) & static_cast<jule::I32>(((1LL << _8413_flt.get()._field_expbits) - 1LL)));;
	jule::U64 _9813_mant = (_8313_bits & ((static_cast<jule::U64>(1LLU) << _8413_flt.get()._field_mantbits) - 1LLU));;
	{
		auto &_match_expr{ _9713_exp };
		
		if (_match_expr == static_cast<jule::I32>(static_cast<jule::I32>(((1LL << _8413_flt.get()._field_expbits) - 1LL)))) {
			_case_begin_229058626:;
			{
				{
					
					if ((_9813_mant != 0LLU)) {
						_case_begin_22905ab12:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>::make({'n','a','n'}));
						}
					}
					else if (_969_neg) {
						_case_begin_22905ac99:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>::make({'-','i','n','f'}));
						}
					}
					else {
						_case_begin_229059b11:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>::make({'+','i','n','f'}));
						}
					}
					_match_end_229059a34:;
				};
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_229059171:;
			{
				(_9713_exp)++;
			}
		}
		else {
			_case_begin_229054a73:;
			{
				_9813_mant|=(static_cast<jule::U64>(1LLU) << _8413_flt.get()._field_mantbits);
			}
		}
		_match_end_2290585c1:;
	};
	_9713_exp+=_8413_flt.get()._field_bias;
	if ((_8244_fmt == 'b')) {
		return _24546a115_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	};
	if (((_8244_fmt == 'x') || (_8244_fmt == 'X'))) {
		return _24546a786_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	};
	;
	_2454672bb_DecimalSlice _13213_digs = _2454672bb_DecimalSlice{};;
	jule::Bool _13313_ok = false;;
	jule::Bool _1359_shortest = (_8259_prec < 0LL);;
	if (_1359_shortest) {
		_13213_digs._field_d=jule::Slice<jule::U8>::alloc(32LL);
		_245475a27_ryu_ftoa_shortest(_13213_digs,_9813_mant,static_cast<jule::I32>((_9713_exp - static_cast<jule::I32>(_8413_flt.get()._field_mantbits))),(*(_8413_flt)));
		_13313_ok=true;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_22905ecc0:;
				{
					_8259_prec=static_cast<jule::I32>(_24546ae18_max(static_cast<jule::I32>((_13213_digs._field_nd - 1LL)),0LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_22905ed36:;
				{
					_8259_prec=static_cast<jule::I32>(_24546ae18_max(static_cast<jule::I32>((_13213_digs._field_nd - _13213_digs._field_dp)),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_22905ede1:;
				{
					_8259_prec=_13213_digs._field_nd;
				}
			}
			_match_end_22905e0aa:;
		};
	} else if ((_8244_fmt != 'f')) {
		jule::I32 _15217_digits = _8259_prec;;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_229062443:;
				{
					(_15217_digits)++;
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_229061ca0:;
				{
					if ((_8259_prec == 0LL)) {
						_8259_prec=1LL;
					};
					_15217_digits=_8259_prec;
				}
			}
			else {
				_case_begin_229061e7b:;
				{
					_15217_digits=1LL;
				}
			}
			_match_end_229061d38:;
		};
		if (((_8270_bit_size == 32LL) && (_15217_digits <= 9LL))) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_245474839_ryu_ftoa_fixed32(_13213_digs,static_cast<jule::U32>(static_cast<jule::U32>(_9813_mant)),static_cast<jule::I32>((_9713_exp - static_cast<jule::I32>(_8413_flt.get()._field_mantbits))),_15217_digits);
			_13313_ok=true;
		} else if ((_15217_digits <= 18LL)) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_245474c79_ryu_ftoa_fixed64(_13213_digs,_9813_mant,static_cast<jule::I32>((_9713_exp - static_cast<jule::I32>(_8413_flt.get()._field_mantbits))),_15217_digits);
			_13313_ok=true;
		};
	};
	if ((!(_13313_ok))) {
		return _2454684ed_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	};
	return _245468b4c_fmt_digits(_8221_dst,_1359_shortest,_969_neg,_13213_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _2454684ed_big_ftoa(jule::Slice<jule::U8> _18217_dst, jule::I32 _18234_prec, jule::U8 _18245_fmt, jule::Bool _18256_neg, jule::U64 _1835_mant, jule::I32 _18316_exp, _24546660b_FloatInfo& _18327_flt) {
	_2454795ec_Decimal _18413_d = _2454795ec_Decimal{};;
	_2454799c6_assign(&_18413_d, _1835_mant);
	_245479c4b_shift(&_18413_d, static_cast<jule::I32>((_18316_exp - static_cast<jule::I32>(_18327_flt._field_mantbits))));
	_2454672bb_DecimalSlice _18713_digs = _2454672bb_DecimalSlice{};;
	jule::Bool _1889_shortest = (_18234_prec < 0LL);;
	if (_1889_shortest) {
		_245469048_round_shortest(_18413_d,_1835_mant,_18316_exp,_18327_flt);
		_18713_digs=_2454672bb_DecimalSlice{._field_d=_18413_d._field_d.slice(0LL), ._field_nd=_18413_d._field_nd, ._field_dp=_18413_d._field_dp, };
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_2290671b2:;
				{
					_18234_prec=static_cast<jule::I32>((_18713_digs._field_nd - 1LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_229069a11:;
				{
					_18234_prec=static_cast<jule::I32>(_24546ae18_max(static_cast<jule::I32>((_18713_digs._field_nd - _18713_digs._field_dp)),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_229069a77:;
				{
					_18234_prec=_18713_digs._field_nd;
				}
			}
			_match_end_229069181:;
		};
	} else {
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_229068a98:;
				{
					_24547a4bb_round(&_18413_d, static_cast<jule::I32>((_18234_prec + 1LL)));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_229068b0e:;
				{
					_24547a4bb_round(&_18413_d, static_cast<jule::I32>((_18413_d._field_dp + _18234_prec)));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_229068b86:;
				{
					if ((_18234_prec == 0LL)) {
						_18234_prec=1LL;
					};
					_24547a4bb_round(&_18413_d, _18234_prec);
				}
			}
			_match_end_2290689dd:;
		};
		_18713_digs=_2454672bb_DecimalSlice{._field_d=_18413_d._field_d.slice(0LL), ._field_nd=_18413_d._field_nd, ._field_dp=_18413_d._field_dp, };
	};
	return _245468b4c_fmt_digits(_18217_dst,_1889_shortest,_18256_neg,_18713_digs,_18234_prec,_18245_fmt);
}



inline jule::Slice<jule::U8> _245468b4c_fmt_digits(jule::Slice<jule::U8> _21919_dst, jule::Bool _21932_shortest, jule::Bool _21948_neg, _2454672bb_DecimalSlice _2205_digs, jule::I32 _22029_prec, jule::U8 _22040_fmt) {
	{
		auto &_match_expr{ _22040_fmt };
		
		if (_match_expr == 'e' || _match_expr == 'E') {
			_case_begin_22906ea8d:;
			{
				return _245469576_fmt_e(_21919_dst,_21948_neg,_2205_digs,_22029_prec,_22040_fmt);
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_22906eb04:;
			{
				return _245469a0a_fmt_f(_21919_dst,_21948_neg,_2205_digs,_22029_prec);
			}
		}
		else if (_match_expr == 'g' || _match_expr == 'G') {
			_case_begin_22906eb6a:;
			{
				jule::I32 _22817_eprec = _22029_prec;;
				if (((_22817_eprec > _2205_digs._field_nd) && (_2205_digs._field_nd >= _2205_digs._field_dp))) {
					_22817_eprec=_2205_digs._field_nd;
				};
				if (_21932_shortest) {
					_22817_eprec=6LL;
				};
				jule::I32 _23813_exp = (_2205_digs._field_dp - 1LL);;
				if (((_23813_exp < -4LL) || (_23813_exp >= _22817_eprec))) {
					if ((_22029_prec > _2205_digs._field_nd)) {
						_22029_prec=_2205_digs._field_nd;
					};
					return _245469576_fmt_e(_21919_dst,_21948_neg,_2205_digs,static_cast<jule::I32>((_22029_prec - 1LL)),static_cast<jule::U8>(((_22040_fmt + 'e') - 'g')));
				};
				if ((_22029_prec > _2205_digs._field_dp)) {
					_22029_prec=_2205_digs._field_nd;
				};
				return _245469a0a_fmt_f(_21919_dst,_21948_neg,_2205_digs,static_cast<jule::I32>(_24546ae18_max(static_cast<jule::I32>((_22029_prec - _2205_digs._field_dp)),0LL)));
			}
		}
		_match_end_22906e94a:;
	};
	return jule::append(_21919_dst,jule::Slice<jule::U8>::make({'%',_22040_fmt}));
}



inline void _245469048_round_shortest(_2454795ec_Decimal& _25724_d, jule::U64 _25736_mant, jule::I32 _25747_exp, _24546660b_FloatInfo& _25758_flt) {
	if ((_25736_mant == 0LLU)) {
		_25724_d._field_nd=0LL;
		return;;
	};
	jule::I32 _2789_minexp = (_25758_flt._field_bias + 1LL);;
	if (((_25747_exp > _2789_minexp) && ((332LL * (_25724_d._field_dp - _25724_d._field_nd)) >= (100LL * (_25747_exp - static_cast<jule::I32>(_25758_flt._field_mantbits)))))) {
		return;;
	};
	_2454795ec_Decimal _28713_upper = _2454795ec_Decimal{};;
	_2454799c6_assign(&_28713_upper, static_cast<jule::U64>(((_25736_mant << 1LLU) + 1LLU)));
	_245479c4b_shift(&_28713_upper, static_cast<jule::I32>(((_25747_exp - static_cast<jule::I32>(_25758_flt._field_mantbits)) - 1LL)));
	jule::U64 _29713_mantlo = 0LLU;;
	jule::I32 _29813_explo = 0LL;;
	if (((_25736_mant > (1LLU << _25758_flt._field_mantbits)) || (_25747_exp == _2789_minexp))) {
		_29713_mantlo=static_cast<jule::U64>((_25736_mant - 1LLU));
		_29813_explo=_25747_exp;
	} else {
		_29713_mantlo=static_cast<jule::U64>(((_25736_mant << 1LLU) - 1LLU));
		_29813_explo=static_cast<jule::I32>((_25747_exp - 1LL));
	};
	_2454795ec_Decimal _30613_lower = _2454795ec_Decimal{};;
	_2454799c6_assign(&_30613_lower, static_cast<jule::U64>(((_29713_mantlo << 1LLU) + 1LLU)));
	_245479c4b_shift(&_30613_lower, static_cast<jule::I32>(((_29813_explo - static_cast<jule::I32>(_25758_flt._field_mantbits)) - 1LL)));
	jule::Bool _3139_inclusive = ((_25736_mant & 1LL) == 0LLU);;
	jule::U8 _32613_upperdelta = 0LLU;;
	jule::I32 _33013_ui = 0LL;;
	for (; ; (_33013_ui)++) {
		{
			jule::I32 _33513_mi = ((_33013_ui - _28713_upper._field_dp) + _25724_d._field_dp);;
			if ((_33513_mi >= _25724_d._field_nd)) {
				goto _iter_end_22907cb67;
			};
			jule::I32 _33913_li = ((_33013_ui - _28713_upper._field_dp) + _30613_lower._field_dp);;
			jule::U8 _34017_l = static_cast<jule::U8>(48LLU);;
			if (((_33913_li >= 0LL) && (_33913_li < _30613_lower._field_nd))) {
				_34017_l=_30613_lower._field_d[_33913_li];
			};
			jule::U8 _34417_m = static_cast<jule::U8>(48LLU);;
			if ((_33513_mi >= 0LL)) {
				_34417_m=_25724_d._field_d[_33513_mi];
			};
			jule::U8 _34817_u = static_cast<jule::U8>(48LLU);;
			if ((_33013_ui < _28713_upper._field_nd)) {
				_34817_u=_28713_upper._field_d[_33013_ui];
			};
			jule::Bool _35613_okdown = ((_34017_l != _34417_m) || (_3139_inclusive && ((_33913_li + 1LL) == _30613_lower._field_nd)));;
			{
				
				if (((_32613_upperdelta == 0LLU) && ((_34417_m + 1LLU) < _34817_u))) {
					_case_begin_229082ead:;
					{
						_32613_upperdelta=2LLU;
					}
				}
				else if (((_32613_upperdelta == 0LLU) && (_34417_m != _34817_u))) {
					_case_begin_229083035:;
					{
						_32613_upperdelta=1LLU;
					}
				}
				else if (((_32613_upperdelta == 1LLU) && ((_34417_m != '9') || (_34817_u != '0')))) {
					_case_begin_2290830ac:;
					{
						_32613_upperdelta=2LLU;
					}
				}
				_match_end_229082de2:;
			};
			jule::Bool _37713_okup = ((_32613_upperdelta > 0LLU) && ((_3139_inclusive || (_32613_upperdelta > 1LLU)) || ((_33013_ui + 1LL) < _28713_upper._field_nd)));;
			{
				
				if ((_35613_okdown && _37713_okup)) {
					_case_begin_229086258:;
					{
						_24547a4bb_round(&_25724_d, static_cast<jule::I32>((_33513_mi + 1LL)));
						return;;
					}
				}
				else if (_35613_okdown) {
					_case_begin_2290862be:;
					{
						_245479ec1_round_down(&_25724_d, static_cast<jule::I32>((_33513_mi + 1LL)));
						return;;
					}
				}
				else if (_37713_okup) {
					_case_begin_229086346:;
					{
						_24547a246_round_up(&_25724_d, static_cast<jule::I32>((_33513_mi + 1LL)));
						return;;
					}
				}
				_match_end_2290861ae:;
			};
		}
	_iter_next_22907cb67:;
	}
	_iter_end_22907cb67:;;
}



inline jule::Slice<jule::U8> _245469576_fmt_e(jule::Slice<jule::U8> _39614_dst, jule::Bool _39627_neg, _2454672bb_DecimalSlice _39638_d, jule::I32 _39655_prec, jule::U8 _39666_fmt) {
	if (_39627_neg) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('-');;
	};
	jule::U8 _40313_ch = '0';;
	if ((_39638_d._field_nd != 0LL)) {
		_40313_ch=_39638_d._field_d[0LL];
	};
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);;
	if ((_39655_prec > 0LL)) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('.');;
		jule::I32 _41217_i = 1LL;;
		jule::I32 _41313_m = _24546aac7_min(_39638_d._field_nd,static_cast<jule::I32>((_39655_prec + 1LL)));;
		if ((_41217_i < _41313_m)) {
			_39614_dst=jule::append(_39614_dst,_39638_d._field_d.slice(_41217_i,_41313_m));
			_41217_i=_41313_m;
		};
		for (; (_41217_i <= _39655_prec); (_41217_i)++) {
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('0');;
			}
		_iter_next_22908b14d:;
		}
		_iter_end_22908b14d:;;
	};
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_39666_fmt);;
	jule::I32 _42513_exp = (_39638_d._field_dp - 1LL);;
	if ((_39638_d._field_nd == 0LL)) {
		_42513_exp=0LL;
	};
	if ((_42513_exp < 0LL)) {
		_40313_ch='-';
		_42513_exp=static_cast<jule::I32>((-(_42513_exp)));
	} else {
		_40313_ch='+';
	};
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);;
	{
		
		if ((_42513_exp < 10LL)) {
			_case_begin_22908dc22:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push('0');_39614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>(_42513_exp) + '0')));;
			}
		}
		else if ((_42513_exp < 100LL)) {
			_case_begin_22908eedc:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_42513_exp / 10LL)) + '0')));_39614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_42513_exp % 10LL)) + '0')));;
			}
		}
		else {
			_case_begin_22908d35e:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,3);_39614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_42513_exp / 100LL)) + '0')));_39614_dst.__push(static_cast<jule::U8>(((static_cast<jule::U8>((_42513_exp / 10LL)) % 10LL) + '0')));_39614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_42513_exp % 10LL)) + '0')));;
			}
		}
		_match_end_22908b7be:;
	};
	return _39614_dst;
}



inline jule::Slice<jule::U8> _245469a0a_fmt_f(jule::Slice<jule::U8> _45114_dst, jule::Bool _45127_neg, _2454672bb_DecimalSlice _45138_d, jule::I32 _45155_prec) {
	if (_45127_neg) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('-');;
	};
	if ((_45138_d._field_dp > 0LL)) {
		jule::I32 _45917_m = _24546aac7_min(_45138_d._field_nd,_45138_d._field_dp);;
		_45114_dst=jule::append(_45114_dst,_45138_d._field_d.slice(0LL,_45917_m));
		for (; (_45917_m < _45138_d._field_dp); (_45917_m)++) {
			{
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');;
			}
		_iter_next_229092b38:;
		}
		_iter_end_229092b38:;;
	} else {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');;
	};
	if ((_45155_prec > 0LL)) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('.');;
		jule::I32 _47017_i = 0LL;;
		for (; (_47017_i < _45155_prec); (_47017_i)++) {
			{
				jule::U8 _47221_ch = static_cast<jule::U8>(48LLU);;
				jule::I32 _47317_j = (_45138_d._field_dp + _47017_i);;
				if (((0LL <= _47317_j) && (_47317_j < _45138_d._field_nd))) {
					_47221_ch=_45138_d._field_d[_47317_j];
				};
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push(_47221_ch);;
			}
		_iter_next_229094398:;
		}
		_iter_end_229094398:;;
	};
	return _45114_dst;
}



inline jule::Slice<jule::U8> _24546a115_fmt_b(jule::Slice<jule::U8> _48414_dst, jule::Bool _48427_neg, jule::U64 _48438_mant, jule::I32 _48453_exp, _24546660b_FloatInfo& _48464_flt) {
	if (_48427_neg) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('-');;
	};
	std::tie(_48414_dst,std::ignore) = _24547e569_fmt_bits(_48414_dst,_48438_mant,10LL,false,true);
	_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('p');;
	_48453_exp-=static_cast<jule::I32>(_48464_flt._field_mantbits);
	if ((_48453_exp >= 0LL)) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('+');;
	};
	std::tie(_48414_dst,std::ignore) = _24547e569_fmt_bits(_48414_dst,static_cast<jule::U64>(static_cast<jule::U64>(_48453_exp)),10LL,(_48453_exp < 0LL),true);
	return _48414_dst;
}



inline jule::Slice<jule::U8> _24546a786_fmt_x(jule::Slice<jule::U8> _50614_dst, jule::I32 _50627_prec, jule::U8 _50638_fmt, jule::Bool _50649_neg, jule::U64 _5079_mant, jule::I32 _50724_exp, _24546660b_FloatInfo& _50735_flt) {
	if ((_5079_mant == 0LLU)) {
		_50724_exp=0LL;
	};
	_5079_mant<<=(60LLU - _50735_flt._field_mantbits);
	while (((_5079_mant != 0LLU) && ((_5079_mant & 1152921504606846976LLU) == 0LLU))) {
		{
			_5079_mant<<=1LLU;
			(_50724_exp)--;
		}
	_iter_next_229099645:;
	}
	_iter_end_229099645:;;
	if (((_50627_prec >= 0LL) && (_50627_prec < 15LL))) {
		jule::U32 _52113_shift = static_cast<jule::U32>((_50627_prec << 2LLU));;
		jule::U64 _52213_extra = ((_5079_mant << _52113_shift) & 1152921504606846975LLU);;
		_5079_mant>>=(60LLU - _52113_shift);
		if (((_52213_extra | (_5079_mant & 1LLU)) > 576460752303423488LLU)) {
			(_5079_mant)++;
		};
		_5079_mant<<=(60LLU - _52113_shift);
		if (((_5079_mant & 2305843009213693952LLU) != 0LLU)) {
			_5079_mant>>=1LLU;
			(_50724_exp)++;
		};
	};
	jule::Str _53513_hex = jule::Str();;
	if ((_50638_fmt == 'X')) {
		_53513_hex=jule::Str("0123456789ABCDEF", 16);
	} else {
		_53513_hex=jule::Str("0123456789abcdef", 16);
	};
	if (_50649_neg) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('-');;
	};
	_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push('0');_50614_dst.__push(_50638_fmt);_50614_dst.__push(static_cast<jule::U8>(('0' + static_cast<jule::U8>(((_5079_mant >> 60LLU) & 1LLU)))));;
	_5079_mant<<=4LLU;
	if (((_50627_prec < 0LL) && (_5079_mant != 0LLU))) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');;
		while ((_5079_mant != 0LLU)) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_53513_hex[static_cast<jule::I32>(((_5079_mant >> 60LLU) & 15LLU))]);;
				_5079_mant<<=4LLU;
			}
		_iter_next_22909e529:;
		}
		_iter_end_22909e529:;;
	} else if ((_50627_prec > 0LL)) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');;
		jule::I32 _55817_i = 0LL;;
		for (; (_55817_i < _50627_prec); (_55817_i)++) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_53513_hex[static_cast<jule::I32>(((_5079_mant >> 60LLU) & 15LLU))]);;
				_5079_mant<<=4LLU;
			}
		_iter_next_2290a1d45:;
		}
		_iter_end_2290a1d45:;;
	};
	jule::U8 _56613_ch = static_cast<jule::U8>(80LLU);;
	if ((_50638_fmt == _24546bab7_lower(_50638_fmt))) {
		_56613_ch='p';
	};
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56613_ch);;
	if ((_50724_exp < 0LL)) {
		_56613_ch='-';
		_50724_exp=static_cast<jule::I32>((-(_50724_exp)));
	} else {
		_56613_ch='+';
	};
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56613_ch);;
	{
		
		if ((_50724_exp < 100LL)) {
			_case_begin_2290a4287:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,2);_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_50724_exp / 10LL)) + '0')));_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_50724_exp % 10LL)) + '0')));;
			}
		}
		else if ((_50724_exp < 1000LL)) {
			_case_begin_2290a694e:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_50724_exp / 100LL)) + '0')));_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>(((_50724_exp / 10LL) % 10LL)) + '0')));_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_50724_exp % 10LL)) + '0')));;
			}
		}
		else {
			_case_begin_2290a44eb:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,4);_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_50724_exp / 1000LL)) + '0')));_50614_dst.__push(static_cast<jule::U8>(((static_cast<jule::U8>((_50724_exp / 100LL)) % 10LL) + '0')));_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>(((_50724_exp / 10LL) % 10LL)) + '0')));_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>((_50724_exp % 10LL)) + '0')));;
			}
		}
		_match_end_2290a2472:;
	};
	return _50614_dst;
}



inline jule::I32 _24546aac7_min(jule::I32 _5918_a, jule::I32 _59116_b) {
	if ((_5918_a < _59116_b)) {
		return _5918_a;
	};
	return _59116_b;
}



inline jule::I32 _24546ae18_max(jule::I32 _5988_a, jule::I32 _59816_b) {
	if ((_5988_a > _59816_b)) {
		return _5988_a;
	};
	return _59816_b;
}



inline jule::U8 _24546bab7_lower(jule::U8 _4710_c) {
	return static_cast<jule::U8>((_4710_c | ('x' - 'X')));
}



inline std::tuple<jule::U64,jule::I32> _24546bee6___parse_uint(jule::Str _5121_s, jule::I32 _5133_base, jule::I32 _5148_bit_size) {
	if (_5121_s.empty()) {
		return std::make_tuple(0LLU,static_cast<jule::I32>(2LL));
	};
	{
		
		if (((2LL <= _5133_base) && (_5133_base <= 36LL))) {
			_case_begin_2290ab734:;
		}
		else if ((_5133_base == 0LL)) {
			_case_begin_2290ab5d0:;
			{
				_5133_base=10LL;
				if ((_5121_s[0LL] == '0')) {
					{
						
						if (((_5121_s.len() >= 3LL) && (_24546bab7_lower(_5121_s[1LL]) == 'b'))) {
							_case_begin_2290ad4a0:;
							{
								_5133_base=2LL;
								(_5121_s).mut_slice(2LL);;
							}
						}
						else if (((_5121_s.len() >= 3LL) && (_24546bab7_lower(_5121_s[1LL]) == 'o'))) {
							_case_begin_2290ad2b3:;
							{
								_5133_base=8LL;
								(_5121_s).mut_slice(2LL);;
							}
						}
						else if (((_5121_s.len() >= 3LL) && (_24546bab7_lower(_5121_s[1LL]) == 'x'))) {
							_case_begin_2290ad33a:;
							{
								_5133_base=16LL;
								(_5121_s).mut_slice(2LL);;
							}
						}
						else {
							_case_begin_2290ace1c:;
							{
								_5133_base=8LL;
								(_5121_s).mut_slice(1LL);;
							}
						}
						_match_end_2290acd40:;
					};
				};
			}
		}
		else {
			_case_begin_2290aa832:;
			{
				return std::make_tuple(0LLU,static_cast<jule::I32>(3LL));
			}
		}
		_match_end_2290aa7cc:;
	};
	if ((_5148_bit_size == 0LL)) {
		_5148_bit_size=64LL;
	} else if (((_5148_bit_size < 0LL) || (_5148_bit_size > 64LL))) {
		return std::make_tuple(0LLU,static_cast<jule::I32>(4LL));
	};
	jule::U64 _9013_cutoff = 0LLU;;
	{
		auto &_match_expr{ _5133_base };
		
		if (_match_expr == 10LL) {
			_case_begin_2290b3175:;
			{
				_9013_cutoff=1844674407370955265LLU;
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_2290b27b2:;
			{
				_9013_cutoff=1152921504606846977LLU;
			}
		}
		else {
			_case_begin_2290b2a7b:;
			{
				_9013_cutoff=static_cast<jule::U64>((jule::div(jule::MAX_U64,static_cast<jule::U64>(_5133_base)) + 1LLU));
			}
		}
		_match_end_2290b2905:;
	};
	jule::U64 _10013_max_val = 0LLU;;
	{
		auto &_match_expr{ _5148_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_2290b2b69:;
			{
				_10013_max_val=4294967295LLU;
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_2290b431e:;
			{
				_10013_max_val=jule::MAX_U64;
			}
		}
		_match_end_2290b42b9:;
	};
	jule::U64 _10813_n = 0LLU;;
	{
		auto &expr = _5121_s;
		auto it = expr.begin();
		_iter_begin_2290b5331:;
		if (it != expr.end()) {
			jule::U8 _10912_c = *it;
			{
				jule::U8 _11017_d = 0LLU;;
				{
					
					if ((('0' <= _10912_c) && (_10912_c <= '9'))) {
						_case_begin_2290b6981:;
						{
							_11017_d=static_cast<jule::U8>((_10912_c - '0'));
						}
					}
					else if ((('a' <= _24546bab7_lower(_10912_c)) && (_24546bab7_lower(_10912_c) <= 'z'))) {
						_case_begin_2290b684e:;
						{
							_11017_d=static_cast<jule::U8>(((_24546bab7_lower(_10912_c) - 'a') + 10LLU));
						}
					}
					else if ((_10912_c == '_')) {
						_case_begin_2290b68b5:;
						{
							goto _iter_next_2290b5331;
						}
					}
					else {
						_case_begin_2290b63ba:;
						{
							return std::make_tuple(0LLU,static_cast<jule::I32>(2LL));
						}
					}
					_match_end_2290b6354:;
				};
				if ((_11017_d >= static_cast<jule::U8>(_5133_base))) {
					return std::make_tuple(0LLU,static_cast<jule::I32>(2LL));
				};
				if ((_10813_n >= _9013_cutoff)) {
					return std::make_tuple(_10013_max_val,static_cast<jule::I32>(1LL));
				};
				_10813_n*=static_cast<jule::U64>(_5133_base);
				jule::U64 _13213_n1 = (_10813_n + static_cast<jule::U64>(_11017_d));;
				if (((_13213_n1 < _10813_n) || (_13213_n1 > _10013_max_val))) {
					return std::make_tuple(_10013_max_val,static_cast<jule::I32>(1LL));
				};
				_10813_n=_13213_n1;
			}
			_iter_next_2290b5331:;
			++it;
			goto _iter_begin_2290b5331;
		}
		_iter_end_2290b5331:;
	};
	return std::make_tuple(_10813_n,static_cast<jule::I32>(0LL));
}



inline jule::Exceptional<jule::U64> _24546c3d1_parse_uint(jule::Str _14623_s, jule::I32 _14635_base, jule::I32 _14650_bit_size) {
	jule::U64 _14710_un;;
	jule::I32 _14714_err;;
	std::tie(_14710_un,_14714_err) = _24546bee6___parse_uint(_14623_s,_14635_base,_14650_bit_size);
	if ((_14714_err != static_cast<jule::I32>(0LL))) {
		return jule::Exceptional<jule::U64>(_14714_err);
	};
	return jule::Exceptional<jule::U64>(jule::Any(),_14710_un);
}



inline jule::Exceptional<jule::I64> _24546c843_parse_int(jule::Str _17222_s, jule::I32 _17230_base, jule::I32 _17245_bit_size) {
	if (_17222_s.empty()) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I32>(2LL));
	};
	jule::Bool _17813_neg = false;;
	if ((_17222_s[0LL] == '+')) {
		(_17222_s).mut_slice(1LL);;
	} else if ((_17222_s[0LL] == '-')) {
		_17813_neg=true;
		(_17222_s).mut_slice(1LL);;
	};
	jule::U64 _18714_un;;
	jule::I32 _18718_err;;
	std::tie(_18714_un,_18718_err) = _24546bee6___parse_uint(_17222_s,_17230_base,_17245_bit_size);
	if (((_18718_err != static_cast<jule::I32>(0LL)) && (_18718_err != static_cast<jule::I32>(1LL)))) {
		return jule::Exceptional<jule::I64>(_18718_err);
	};
	if ((_17245_bit_size == 0LL)) {
		_17245_bit_size=64LL;
	};
	jule::U64 _1969_cutoff = static_cast<jule::U64>((1LL << static_cast<jule::U32>((_17245_bit_size - 1LL))));;
	if (((!(_17813_neg)) && (_18714_un >= _1969_cutoff))) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I32>(1LL));
	};
	if ((_17813_neg && (_18714_un > _1969_cutoff))) {
		return jule::Exceptional<jule::I64>(static_cast<jule::I32>(1LL));
	};
	jule::I64 _20313_n = static_cast<jule::I64>(_18714_un);;
	if (_17813_neg) {
		_20313_n=static_cast<jule::I64>((-(_20313_n)));
	};
	return jule::Exceptional<jule::I64>(jule::Any(),_20313_n);
}



inline std::tuple<jule::F64,jule::Bool> _24546d459_eisel_lemire64(jule::U64 _4123_man, jule::I32 _4133_exp10, jule::Bool _4145_neg) {
	jule::F64 _4158_f = jule::F64();
	jule::Bool _4166_ok = jule::Bool();
	if ((_4123_man == 0LLU)) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_245348433_f64_from_bits(9223372036854775808LLU));
		};
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	};
	if (((_4133_exp10 < -348LL) || (347LL < _4133_exp10))) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	};
	jule::I32 _579_clz = _24542726a_leading_zeros64(_4123_man);;
	_4123_man<<=static_cast<jule::U32>(_579_clz);
	;
	jule::U64 _6013_ret_exp2 = (static_cast<jule::U64>(((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL)) - static_cast<jule::U64>(_579_clz));;
	jule::U64 _6314_x_hi;;
	jule::U64 _6324_x_lo;;
	std::tie(_6314_x_hi,_6324_x_lo) = _245431cbe_mul64(_4123_man,_24546e3b1_DETAILED_POWS_OF_TEN[(_4133_exp10 - -348LL)][1LL]);
	if ((((_6314_x_hi & 511LLU) == 511LLU) && ((_6324_x_lo + _4123_man) < _4123_man))) {
		jule::U64 _6714_y_hi;;
		jule::U64 _6720_y_lo;;
		std::tie(_6714_y_hi,_6720_y_lo) = _245431cbe_mul64(_4123_man,_24546e3b1_DETAILED_POWS_OF_TEN[(_4133_exp10 - -348LL)][0LL]);
		jule::U64 _6818_merged_hi = _6314_x_hi;;
		jule::U64 _6829_merged_lo = (_6324_x_lo + _6714_y_hi);;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,(_6324_x_lo + _6714_y_hi));
		if ((_6829_merged_lo < _6324_x_lo)) {
			(_6818_merged_hi)++;
		};
		if (((((_6818_merged_hi & 511LLU) == 511LLU) && ((_6829_merged_lo + 1LLU) == 0LLU)) && ((_6720_y_lo + _4123_man) < _4123_man))) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		};
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	};
	jule::U64 _799_msb = (_6314_x_hi >> 63LLU);;
	jule::U64 _8013_ret_mantissa = (_6314_x_hi >> (_799_msb + 9LLU));;
	_6013_ret_exp2-=(1LLU ^ _799_msb);
	if ((((_6324_x_lo == 0LLU) && ((_6314_x_hi & 511LLU) == 0LLU)) && ((_8013_ret_mantissa & 3LLU) == 1LLU))) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	};
	_8013_ret_mantissa+=(_8013_ret_mantissa & 1LLU);
	_8013_ret_mantissa>>=1LLU;
	if (((_8013_ret_mantissa >> 53LLU) > 0LLU)) {
		_8013_ret_mantissa>>=1LLU;
		_6013_ret_exp2+=1LLU;
	};
	if (((_6013_ret_exp2 - 1LLU) >= 2046LLU)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	};
	jule::U64 _10313_ret_bits = ((_6013_ret_exp2 << 52LLU) | (_8013_ret_mantissa & 4503599627370495LLU));;
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	};
	_4158_f = static_cast<jule::F64>(_245348433_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _24546d855_eisel_lemire32(jule::U64 _11023_man, jule::I32 _11033_exp10, jule::Bool _11045_neg) {
	jule::F32 _11058_f = jule::F32();
	jule::Bool _11066_ok = jule::Bool();
	if ((_11023_man == 0LLU)) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_245347d6c_f32_from_bits(2147483648LLU));
		};
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	};
	if (((_11033_exp10 < -348LL) || (347LL < _11033_exp10))) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	};
	jule::I32 _1329_clz = _24542726a_leading_zeros64(_11023_man);;
	_11023_man<<=static_cast<jule::U32>(_1329_clz);
	;
	jule::U64 _13513_ret_exp2 = (static_cast<jule::U64>(((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL)) - static_cast<jule::U64>(_1329_clz));;
	jule::U64 _13814_x_hi;;
	jule::U64 _13824_x_lo;;
	std::tie(_13814_x_hi,_13824_x_lo) = _245431cbe_mul64(_11023_man,_24546e3b1_DETAILED_POWS_OF_TEN[(_11033_exp10 - -348LL)][1LL]);
	if ((((_13814_x_hi & 274877906943LLU) == 274877906943LLU) && ((_13824_x_lo + _11023_man) < _11023_man))) {
		jule::U64 _14214_y_hi;;
		jule::U64 _14220_y_lo;;
		std::tie(_14214_y_hi,_14220_y_lo) = _245431cbe_mul64(_11023_man,_24546e3b1_DETAILED_POWS_OF_TEN[(_11033_exp10 - -348LL)][0LL]);
		jule::U64 _14318_merged_hi = _13814_x_hi;;
		jule::U64 _14329_merged_lo = (_13824_x_lo + _14214_y_hi);;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,(_13824_x_lo + _14214_y_hi));
		if ((_14329_merged_lo < _13824_x_lo)) {
			(_14318_merged_hi)++;
		};
		if (((((_14318_merged_hi & 274877906943LLU) == 274877906943LLU) && ((_14329_merged_lo + 1LLU) == 0LLU)) && ((_14220_y_lo + _11023_man) < _11023_man))) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		};
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	};
	jule::U64 _1549_msb = (_13814_x_hi >> 63LLU);;
	jule::U64 _15513_ret_mantissa = (_13814_x_hi >> (_1549_msb + 38LLU));;
	_13513_ret_exp2-=(1LLU ^ _1549_msb);
	if ((((_13824_x_lo == 0LLU) && ((_13814_x_hi & 274877906943LLU) == 0LLU)) && ((_15513_ret_mantissa & 3LLU) == 1LLU))) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	};
	_15513_ret_mantissa+=(_15513_ret_mantissa & 1LLU);
	_15513_ret_mantissa>>=1LLU;
	if (((_15513_ret_mantissa >> 24LLU) > 0LLU)) {
		_15513_ret_mantissa>>=1LLU;
		_13513_ret_exp2+=1LLU;
	};
	if (((_13513_ret_exp2 - 1LLU) >= 254LLU)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	};
	jule::U64 _17813_ret_bits = ((_13513_ret_exp2 << 23LLU) | (_15513_ret_mantissa & 8388607LLU));;
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LLU;
	};
	_11058_f = static_cast<jule::F32>(_245347d6c_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_17813_ret_bits))));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::I32 _245470725_common_prefix_len_ignore_case(jule::Str _4534_s, jule::Str _4542_prefix) {
	jule::I32 _4613_n = _4542_prefix.len();;
	if ((_4613_n > _4534_s.len())) {
		_4613_n=static_cast<jule::I32>(_4534_s.len());
	};
	jule::I32 _5013_i = 0LL;;
	for (; (_5013_i < _4613_n); (_5013_i)++) {
		{
			jule::U8 _5217_c = _4534_s[_5013_i];;
			if ((('A' <= _5217_c) && (_5217_c <= 'Z'))) {
				_5217_c+=('a' - 'A');
			};
			if ((_5217_c != _4542_prefix[_5013_i])) {
				return _5013_i;
			};
		}
	_iter_next_2290dde09:;
	}
	_iter_end_2290dde09:;;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::I32,jule::Bool> _245470a22_special(jule::Str _6816_s) {
	jule::F64 _6826_f = jule::F64();
	jule::I32 _6834_n = jule::I32();
	jule::Bool _6842_ok = jule::Bool();
	if (_6816_s.empty()) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	};
	jule::I32 _7213_sign = 1LL;;
	jule::I32 _7313_nsign = 0LL;;
	{
		auto &_match_expr{ _6816_s[0LL] };
		
		if (_match_expr == '+' || _match_expr == '-') {
			_case_begin_2290e3815:;
			{
				if ((_6816_s[0LL] == '-')) {
					_7213_sign=-1LL;
				};
				_7313_nsign=1LL;
				(_6816_s).mut_slice(1LL);;
				goto _case_begin_2290e388c;
			}
		}
		else if (_match_expr == 'i' || _match_expr == 'I') {
			_case_begin_2290e388c:;
			{
				jule::I32 _8317_case_n = _245470725_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));;
				if (((3LL < _8317_case_n) && (_8317_case_n < 8LL))) {
					_8317_case_n=3LL;
				};
				if (((_8317_case_n == 3LL) || (_8317_case_n == 8LL))) {
					_6826_f = static_cast<jule::F64>(_2453b62d6_inf(_7213_sign));
					_6834_n = static_cast<jule::I32>((_7313_nsign + _6834_n));
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				};
			}
		}
		else if (_match_expr == 'n' || _match_expr == 'N') {
			_case_begin_2290e3914:;
			{
				if ((_245470725_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL)) {
					_6826_f = static_cast<jule::F64>(_2453b3910_nan());
					_6834_n = 3LL;
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				};
			}
		}
		_match_end_2290e3749:;
	};
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::I32,jule::Bool,jule::Bool,jule::Bool,jule::I32,jule::Bool> _245470cb9_read_float(jule::Str _10315_s) {
	jule::U64 _10325_mantissa = jule::U64();
	jule::I32 _10340_exp = jule::I32();
	jule::Bool _10350_neg = jule::Bool();
	jule::Bool _10361_trunc = jule::Bool();
	jule::Bool _10374_hex = jule::Bool();
	jule::I32 _10385_i = jule::I32();
	jule::Bool _10393_ok = jule::Bool();
	if ((_10385_i >= _10315_s.len())) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10361_trunc,_10374_hex,_10385_i,_10393_ok);
	};
	{
		
		if ((_10315_s[_10385_i] == '+')) {
			_case_begin_2290e9a5d:;
			{
				(_10385_i)++;
			}
		}
		else if ((_10315_s[_10385_i] == '-')) {
			_case_begin_2290e9ac4:;
			{
				_10350_neg=true;
				(_10385_i)++;
			}
		}
		_match_end_2290e9882:;
	};
	jule::U64 _11713_base = 10LLU;;
	jule::I32 _11813_max_mant_digits = 19LL;;
	jule::U8 _11913_exp_char = 'e';;
	if (((((_10385_i + 2LL) < _10315_s.len()) && (_10315_s[_10385_i] == '0')) && (_24546bab7_lower(_10315_s[(_10385_i + 1LL)]) == 'x'))) {
		_11713_base=16LLU;
		_11813_max_mant_digits=16LL;
		_10385_i+=2LL;
		_11913_exp_char='p';
		_10374_hex=true;
	};
	jule::Bool _12713_sawdot = false;;
	jule::Bool _12813_sawdigits = false;;
	jule::I32 _12913_nd = 0LL;;
	jule::I32 _13013_nd_mant = 0LL;;
	jule::I32 _13113_dp = 0LL;;
	for (; (_10385_i < _10315_s.len()); (_10385_i)++) {
		{
			jule::U8 _13313_c = _10315_s[_10385_i];;
			{
				
				if ((_13313_c == '_')) {
					_case_begin_229100ed7:;
					{
						goto _iter_next_2291003d2;
					}
				}
				else if ((_13313_c == '.')) {
					_case_begin_22910105e:;
					{
						if (_12713_sawdot) {
							goto _julec_label_loop_end;
						};
						_12713_sawdot=true;
						_13113_dp=_12913_nd;
						goto _iter_next_2291003d2;
					}
				}
				else if ((('0' <= _13313_c) && (_13313_c <= '9'))) {
					_case_begin_2291010d6:;
					{
						_12813_sawdigits=true;
						if (((_13313_c == '0') && (_12913_nd == 0LL))) {
							(_13113_dp)--;
							goto _iter_next_2291003d2;
						};
						(_12913_nd)++;
						if ((_13013_nd_mant < _11813_max_mant_digits)) {
							_10325_mantissa*=_11713_base;
							_10325_mantissa+=static_cast<jule::U64>((_13313_c - '0'));
							(_13013_nd_mant)++;
						} else if ((_13313_c != '0')) {
							_10361_trunc=true;
						};
						goto _iter_next_2291003d2;
					}
				}
				else if ((((_11713_base == 16LLU) && ('a' <= _24546bab7_lower(_13313_c))) && (_24546bab7_lower(_13313_c) <= 'f'))) {
					_case_begin_22910115d:;
					{
						_12813_sawdigits=true;
						(_12913_nd)++;
						if ((_13013_nd_mant < _11813_max_mant_digits)) {
							_10325_mantissa*=16LLU;
							_10325_mantissa+=static_cast<jule::U64>(((_24546bab7_lower(_13313_c) - 'a') + 10LLU));
							(_13013_nd_mant)++;
						} else {
							_10361_trunc=true;
						};
						goto _iter_next_2291003d2;
					}
				}
				_match_end_229100e0a:;
			};
			goto _iter_end_2291003d2;
		}
	_iter_next_2291003d2:;
	}
	_iter_end_2291003d2:;;
	_julec_label_loop_end:;
	if ((!(_12813_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10361_trunc,_10374_hex,_10385_i,_10393_ok);
	};
	if ((!(_12713_sawdot))) {
		_13113_dp=_12913_nd;
	};
	if ((_11713_base == 16LLU)) {
		_13113_dp*=4LL;
		_13013_nd_mant*=4LL;
	};
	if (((_10385_i < _10315_s.len()) && (_24546bab7_lower(_10315_s[_10385_i]) == _11913_exp_char))) {
		(_10385_i)++;
		if ((_10385_i >= _10315_s.len())) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10361_trunc,_10374_hex,_10385_i,_10393_ok);
		};
		jule::I32 _19617_esign = 1LL;;
		if ((_10315_s[_10385_i] == '+')) {
			(_10385_i)++;
		} else if ((_10315_s[_10385_i] == '-')) {
			(_10385_i)++;
			_19617_esign=-1LL;
		};
		if ((((_10385_i >= _10315_s.len()) || (_10315_s[_10385_i] < '0')) || (_10315_s[_10385_i] > '9'))) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10361_trunc,_10374_hex,_10385_i,_10393_ok);
		};
		jule::I32 _20617_e = 0LL;;
		for (; ((_10385_i < _10315_s.len()) && ((('0' <= _10315_s[_10385_i]) && (_10315_s[_10385_i] <= '9')) || (_10315_s[_10385_i] == '_'))); (_10385_i)++) {
			{
				if ((_10315_s[_10385_i] == '_')) {
					goto _iter_next_22910ab07;
				};
				if ((_20617_e < 10000LL)) {
					_20617_e=static_cast<jule::I32>((((_20617_e * 10LL) + static_cast<jule::I32>(_10315_s[_10385_i])) - '0'));
				};
			}
		_iter_next_22910ab07:;
		}
		_iter_end_22910ab07:;;
		_13113_dp+=(_20617_e * _19617_esign);
	} else if ((_11713_base == 16LLU)) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10361_trunc,_10374_hex,_10385_i,_10393_ok);
	};
	if ((_10325_mantissa != 0LLU)) {
		_10340_exp=static_cast<jule::I32>((_13113_dp - _13013_nd_mant));
	};
	_10393_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10361_trunc,_10374_hex,_10385_i,_10393_ok);
}



inline std::tuple<jule::F64,jule::Bool> _245472826_atof64exact(jule::U64 _48116_mantissa, jule::I32 _48135_exp, jule::Bool _48145_neg) {
	jule::F64 _48158_f = jule::F64();
	jule::Bool _48166_ok = jule::Bool();
	if (((_48116_mantissa >> _245466d7b_F64_INFO._field_mantbits) != 0LLU)) {
		return std::make_tuple(_48158_f,_48166_ok);
	};
	_48158_f=static_cast<jule::F64>(static_cast<jule::F64>(_48116_mantissa));
	if (_48145_neg) {
		_48158_f=static_cast<jule::F64>((-(_48158_f)));
	};
	{
		
		if ((_48135_exp == 0LL)) {
			_case_begin_229116294:;
			{
				_48166_ok = true;
				return std::make_tuple(_48158_f,_48166_ok);
			}
		}
		else if (((_48135_exp > 0LL) && (_48135_exp <= 37LL))) {
			_case_begin_22911631b:;
			{
				if ((_48135_exp > 22LL)) {
					_48158_f*=_245471c10_F64_POW10[(_48135_exp - 22LL)];
					_48135_exp=22LL;
				};
				if (((_48158_f > 1000000000000000LL) || (_48158_f < -1000000000000000LL))) {
					return std::make_tuple(_48158_f,_48166_ok);
				};
				_48158_f = static_cast<jule::F64>((_48158_f * _245471c10_F64_POW10[_48135_exp]));
				_48166_ok = true;
				return std::make_tuple(_48158_f,_48166_ok);
			}
		}
		else if (((_48135_exp < 0LL) && (_48135_exp >= -22LL))) {
			_case_begin_229116393:;
			{
				_48158_f = static_cast<jule::F64>(jule::div(_48158_f,_245471c10_F64_POW10[(-(_48135_exp))]));
				_48166_ok = true;
				return std::make_tuple(_48158_f,_48166_ok);
			}
		}
		_match_end_2291161d9:;
	};
	return std::make_tuple(_48158_f,_48166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _245472c11_atof32exact(jule::U64 _51516_mantissa, jule::I32 _51535_exp, jule::Bool _51549_neg) {
	jule::F32 _51562_f = jule::F32();
	jule::Bool _51570_ok = jule::Bool();
	if (((_51516_mantissa >> _245466a29_F32_INFO._field_mantbits) != 0LLU)) {
		return std::make_tuple(_51562_f,_51570_ok);
	};
	_51562_f=static_cast<jule::F32>(static_cast<jule::F32>(_51516_mantissa));
	if (_51549_neg) {
		_51562_f=static_cast<jule::F32>((-(_51562_f)));
	};
	{
		
		if ((_51535_exp == 0LL)) {
			_case_begin_22911b3ba:;
			{
				_51570_ok = true;
				return std::make_tuple(_51562_f,_51570_ok);
			}
		}
		else if (((_51535_exp > 0LL) && (_51535_exp <= 17LL))) {
			_case_begin_22911b442:;
			{
				if ((_51535_exp > 10LL)) {
					_51562_f*=_245472095_F32_POW10[(_51535_exp - 10LL)];
					_51535_exp=10LL;
				};
				if (((_51562_f > 10000000LL) || (_51562_f < -10000000LL))) {
					return std::make_tuple(_51562_f,_51570_ok);
				};
				_51562_f = static_cast<jule::F32>((_51562_f * _245472095_F32_POW10[_51535_exp]));
				_51570_ok = true;
				return std::make_tuple(_51562_f,_51570_ok);
			}
		}
		else if (((_51535_exp < 0LL) && (_51535_exp >= -10LL))) {
			_case_begin_22911b4b9:;
			{
				_51562_f = static_cast<jule::F32>(jule::div(_51562_f,_245472095_F32_POW10[(-(_51535_exp))]));
				_51570_ok = true;
				return std::make_tuple(_51562_f,_51570_ok);
			}
		}
		_match_end_22911b310:;
	};
	return std::make_tuple(_51562_f,_51570_ok);
}



inline std::tuple<jule::F64,jule::I32> _2454732d8_atof_hex(jule::Str _55113_s, _24546660b_FloatInfo& _55122_flt, jule::U64 _55142_mantissa, jule::I32 _55161_exp, jule::Bool _55171_neg, jule::Bool _55182_trunc) {
	jule::I32 _5529_max_exp = ((static_cast<jule::I32>((1LL << _55122_flt._field_expbits)) + _55122_flt._field_bias) - 2LL);;
	jule::I32 _5539_min_exp = (_55122_flt._field_bias + 1LL);;
	_55161_exp+=static_cast<jule::I32>(_55122_flt._field_mantbits);
	while (((_55142_mantissa != 0LLU) && ((_55142_mantissa >> (_55122_flt._field_mantbits + 2LLU)) == 0LLU))) {
		{
			_55142_mantissa<<=1LLU;
			(_55161_exp)--;
		}
	_iter_next_229121e1a:;
	}
	_iter_end_229121e1a:;;
	if (_55182_trunc) {
		_55142_mantissa|=1LLU;
	};
	while (((_55142_mantissa >> ((1LLU + _55122_flt._field_mantbits) + 2LLU)) != 0LLU)) {
		{
			_55142_mantissa=static_cast<jule::U64>(((_55142_mantissa >> 1LLU) | (_55142_mantissa & 1LLU)));
			(_55161_exp)++;
		}
	_iter_next_2291223d2:;
	}
	_iter_end_2291223d2:;;
	while (((_55142_mantissa > 1LLU) && (_55161_exp < (_5539_min_exp - 2LL)))) {
		{
			_55142_mantissa=static_cast<jule::U64>(((_55142_mantissa >> 1LLU) | (_55142_mantissa & 1LLU)));
			(_55161_exp)++;
		}
	_iter_next_22912401b:;
	}
	_iter_end_22912401b:;;
	jule::U64 _58313_round = (_55142_mantissa & 3LLU);;
	_55142_mantissa>>=2LLU;
	_58313_round|=(_55142_mantissa & 1LLU);
	_55161_exp+=2LL;
	if ((_58313_round == 3LLU)) {
		(_55142_mantissa)++;
		if ((_55142_mantissa == (1LLU << (1LLU + _55122_flt._field_mantbits)))) {
			_55142_mantissa>>=1LLU;
			(_55161_exp)++;
		};
	};
	if (((_55142_mantissa >> _55122_flt._field_mantbits) == 0LLU)) {
		_55161_exp=_55122_flt._field_bias;
	};
	jule::I32 _59813_err = static_cast<jule::I32>(0LL);;
	if ((_55161_exp > _5529_max_exp)) {
		_55142_mantissa=static_cast<jule::U64>(static_cast<jule::U64>((1LL << _55122_flt._field_mantbits)));
		_55161_exp=static_cast<jule::I32>((_5529_max_exp + 1LL));
		_59813_err=static_cast<jule::I32>(1LL);
	};
	jule::U64 _60513_bits = (_55142_mantissa & ((1LLU << _55122_flt._field_mantbits) - 1LLU));;
	_60513_bits|=(static_cast<jule::U64>(((_55161_exp - _55122_flt._field_bias) & static_cast<jule::I32>(((1LL << _55122_flt._field_expbits) - 1LL)))) << _55122_flt._field_mantbits);
	if (_55171_neg) {
		_60513_bits|=((1LLU << _55122_flt._field_mantbits) << _55122_flt._field_expbits);
	};
	if ((_55122_flt == _245466a29_F32_INFO)) {
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_245347d6c_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_60513_bits))))),_59813_err);
	};
	return std::make_tuple(static_cast<jule::F64>(_245348433_f64_from_bits(_60513_bits)),_59813_err);
}



inline std::tuple<jule::F32,jule::I32,jule::I32> _245473690_atof32(jule::Str _61611_s) {
	jule::F32 _61621_f = jule::F32();
	jule::I32 _61629_n = jule::I32();
	jule::I32 _61637_err = 0LL;
	{
		jule::F64 _61814_val;;
		jule::I32 _61819__n;;
		jule::Bool _61823_ok;;
		std::tie(_61814_val,_61819__n,_61823_ok) = _245470a22_special(_61611_s);
		if (_61823_ok) {
			_61621_f = static_cast<jule::F32>(static_cast<jule::F32>(_61814_val));
			_61629_n = _61819__n;
			_61637_err = static_cast<jule::I32>(0LL);
			return std::make_tuple(_61621_f,_61629_n,_61637_err);
		};
	};
	jule::U64 _62410_mantissa;;
	jule::I32 _62420_exp;;
	jule::Bool _62425_neg;;
	jule::Bool _62430_trunc;;
	jule::Bool _62437_hex;;
	jule::I32 _62442__n;;
	jule::Bool _62450_ok;;
	std::tie(_62410_mantissa,_62420_exp,_62425_neg,_62430_trunc,_62437_hex,_62442__n,_62450_ok) = _245470cb9_read_float(_61611_s);
	_61629_n=_62442__n;
	if ((!(_62450_ok))) {
		_61621_f = 0LL;
		_61637_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_61621_f,_61629_n,_61637_err);
	};
	if (_62437_hex) {
		jule::F64 _63117_ff = 0LL;;
		std::tie(_63117_ff,_61637_err) = _2454732d8_atof_hex(_61611_s.slice(0LL,_61629_n),_245466a29_F32_INFO,_62410_mantissa,_62420_exp,_62425_neg,_62430_trunc);
		_61621_f = static_cast<jule::F32>(static_cast<jule::F32>(_63117_ff));
		return std::make_tuple(_61621_f,_61629_n,_61637_err);
	};
	{
		if ((!(_62430_trunc))) {
			std::tie(_61621_f,_62450_ok) = _245472c11_atof32exact(_62410_mantissa,_62420_exp,_62425_neg);
			if (_62450_ok) {
				_61637_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_61621_f,_61629_n,_61637_err);
			};
		};
		std::tie(_61621_f,_62450_ok) = _24546d855_eisel_lemire32(_62410_mantissa,_62420_exp,_62425_neg);
		if (_62450_ok) {
			if ((!(_62430_trunc))) {
				_61637_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_61621_f,_61629_n,_61637_err);
			};
			jule::F32 _65321_f_up = 0LL;;
			std::tie(_65321_f_up,_62450_ok) = _24546d855_eisel_lemire32(static_cast<jule::U64>((_62410_mantissa + 1LLU)),_62420_exp,_62425_neg);
			if ((_62450_ok && (_61621_f == _65321_f_up))) {
				_61637_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_61621_f,_61629_n,_61637_err);
			};
		};
	};
	_2454795ec_Decimal _66213_d = _2454795ec_Decimal{};;
	if ((!(_2454714b2_set(&_66213_d, _61611_s.slice(0LL,_61629_n))))) {
		_61621_f = 0LL;
		_61637_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_61621_f,_61629_n,_61637_err);
	};
	jule::U64 _66610_b;;
	jule::Bool _66613_ovf;;
	std::tie(_66610_b,_66613_ovf) = _2454717c0_float_bits(&_66213_d, _245466a29_F32_INFO);
	_61621_f=static_cast<jule::F32>(_245347d6c_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_66610_b))));
	if (_66613_ovf) {
		_61637_err=static_cast<jule::I32>(1LL);
	};
	return std::make_tuple(_61621_f,_61629_n,_61637_err);
}



inline std::tuple<jule::F64,jule::I32,jule::I32> _245473937_atof64(jule::Str _67411_s) {
	jule::F64 _67421_f = jule::F64();
	jule::I32 _67429_n = jule::I32();
	jule::I32 _67437_err = 0LL;
	{
		jule::F64 _67614_val;;
		jule::I32 _67619__n;;
		jule::Bool _67623_ok;;
		std::tie(_67614_val,_67619__n,_67623_ok) = _245470a22_special(_67411_s);
		if (_67623_ok) {
			_67421_f = _67614_val;
			_67429_n = _67619__n;
			_67437_err = static_cast<jule::I32>(0LL);
			return std::make_tuple(_67421_f,_67429_n,_67437_err);
		};
	};
	jule::U64 _68210_mantissa;;
	jule::I32 _68220_exp;;
	jule::Bool _68225_neg;;
	jule::Bool _68230_trunc;;
	jule::Bool _68237_hex;;
	jule::I32 _68242__n;;
	jule::Bool _68250_ok;;
	std::tie(_68210_mantissa,_68220_exp,_68225_neg,_68230_trunc,_68237_hex,_68242__n,_68250_ok) = _245470cb9_read_float(_67411_s);
	_67429_n=_68242__n;
	if ((!(_68250_ok))) {
		_67421_f = 0LL;
		_67437_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_67421_f,_67429_n,_67437_err);
	};
	if (_68237_hex) {
		std::tie(_67421_f,_67437_err) = _2454732d8_atof_hex(_67411_s.slice(0LL,_67429_n),_245466d7b_F64_INFO,_68210_mantissa,_68220_exp,_68225_neg,_68230_trunc);
		return std::make_tuple(_67421_f,_67429_n,_67437_err);
	};
	{
		if ((!(_68230_trunc))) {
			std::tie(_67421_f,_68250_ok) = _245472826_atof64exact(_68210_mantissa,_68220_exp,_68225_neg);
			if (_68250_ok) {
				_67437_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_67421_f,_67429_n,_67437_err);
			};
		};
		std::tie(_67421_f,_68250_ok) = _24546d459_eisel_lemire64(_68210_mantissa,_68220_exp,_68225_neg);
		if (_68250_ok) {
			if ((!(_68230_trunc))) {
				_67437_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_67421_f,_67429_n,_67437_err);
			};
			jule::F64 _71021_f_up = 0LL;;
			std::tie(_71021_f_up,_68250_ok) = _24546d459_eisel_lemire64(static_cast<jule::U64>((_68210_mantissa + 1LLU)),_68220_exp,_68225_neg);
			if ((_68250_ok && (_67421_f == _71021_f_up))) {
				_67437_err = static_cast<jule::I32>(0LL);
				return std::make_tuple(_67421_f,_67429_n,_67437_err);
			};
		};
	};
	_2454795ec_Decimal _71913_d = _2454795ec_Decimal{};;
	if ((!(_2454714b2_set(&_71913_d, _67411_s.slice(0LL,_67429_n))))) {
		_67421_f = 0LL;
		_67437_err = static_cast<jule::I32>(2LL);
		return std::make_tuple(_67421_f,_67429_n,_67437_err);
	};
	jule::U64 _72310_b;;
	jule::Bool _72313_ovf;;
	std::tie(_72310_b,_72313_ovf) = _2454717c0_float_bits(&_71913_d, _245466d7b_F64_INFO);
	_67421_f=static_cast<jule::F64>(_245348433_f64_from_bits(_72310_b));
	if (_72313_ovf) {
		_67437_err=static_cast<jule::I32>(1LL);
	};
	return std::make_tuple(_67421_f,_67429_n,_67437_err);
}



inline std::tuple<jule::F64,jule::I32,jule::I32> _245473c78_parse_float_prefix(jule::Str _73123_s, jule::I32 _73131_bit_size) {
	if ((_73131_bit_size == 32LL)) {
		jule::F32 _73314_f;;
		jule::I32 _73317_n;;
		jule::I32 _73320_err;;
		std::tie(_73314_f,_73317_n,_73320_err) = _245473690_atof32(_73123_s);
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_73314_f)),_73317_n,_73320_err);
	};
	jule::F64 _73710_f;;
	jule::I32 _73713_n;;
	jule::I32 _73716_err;;
	std::tie(_73710_f,_73713_n,_73716_err) = _245473937_atof64(_73123_s);
	return std::make_tuple(_73710_f,_73713_n,_73716_err);
}



inline jule::Exceptional<jule::F64> _2454740b9_parse_float(jule::Str _76520_s, jule::I32 _76528_bit_size) {
	jule::F64 _76610_f;;
	jule::I32 _76613_n;;
	jule::I32 _76616_err;;
	std::tie(_76610_f,_76613_n,_76616_err) = _245473c78_parse_float_prefix(_76520_s,_76528_bit_size);
	if (((_76613_n != _76520_s.len()) && ((_76616_err == static_cast<jule::I32>(0LL)) || (_76616_err != static_cast<jule::I32>(2LL))))) {
		return jule::Exceptional<jule::F64>(static_cast<jule::I32>(2LL));
	};
	if ((_76616_err != static_cast<jule::I32>(0LL))) {
		return jule::Exceptional<jule::F64>(_76616_err);
	};
	return jule::Exceptional<jule::F64>(jule::Any(),_76610_f);
}



inline void _245474839_ryu_ftoa_fixed32(_2454672bb_DecimalSlice& _4926_d, jule::U32 _4947_mant, jule::I32 _4958_exp, jule::I32 _4968_prec) {
	if ((_4968_prec < 0LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42) + jule::Str("\nlocation: std/conv/ftoaryu.jule:51:9"));;
	};
	if ((_4968_prec > 9LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37) + jule::Str("\nlocation: std/conv/ftoaryu.jule:54:9"));;
	};
	if ((_4947_mant == 0LLU)) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;;
	};
	jule::I32 _6213_e2 = _4958_exp;;
	jule::I32 _639_b = _24542e6d4_len32(_4947_mant);;
	if ((_639_b < 25LL)) {
		_4947_mant<<=static_cast<jule::U32>((25LL - _639_b));
		_6213_e2+=(static_cast<jule::I32>(_639_b) - 25LL);
	};
	jule::I32 _749_q = (((-(_245475cbe_mul_by_log2_log10(static_cast<jule::I32>((_6213_e2 + 24LL))))) + _4968_prec) - 1LL);;
	jule::Bool _7913_exact = ((_749_q <= 27LL) && (_749_q >= 0LL));;
	jule::U32 _8114_di;;
	jule::I32 _8118_dexp2;;
	jule::Bool _8129_d0;;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _2454774b8_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if ((_8118_dexp2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49) + jule::Str("\nlocation: std/conv/ftoaryu.jule:83:9"));;
	};
	if ((((_749_q < 0LL) && (_749_q >= -10LL)) && _245477be4_divisible_by_pow5(static_cast<jule::U64>(static_cast<jule::U64>(_4947_mant)),static_cast<jule::I32>((-(_749_q)))))) {
		_7913_exact=true;
		_8129_d0=true;
	};
	jule::U32 _949_extra = static_cast<jule::U32>((-(_8118_dexp2)));;
	jule::U32 _959_extra_mask = static_cast<jule::U32>(((1LL << _949_extra) - 1LL));;
	jule::U32 _9713_dfrac = 0LLU;;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>((_8114_di >> _949_extra)),static_cast<jule::U32>((_8114_di & _959_extra_mask)));
	jule::Bool _9913_round_up = false;;
	if (_7913_exact) {
		_9913_round_up=(((_9713_dfrac > (1LLU << (_949_extra - 1LLU))) || ((_9713_dfrac == (1LLU << (_949_extra - 1LLU))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LLU << (_949_extra - 1LLU))) && _8129_d0) && ((_8114_di & 1LLU) == 1LLU)));
	} else {
		_9913_round_up=((_9713_dfrac >> (_949_extra - 1LLU)) == 1LLU);
	};
	if ((_9713_dfrac != 0LLU)) {
		_8129_d0=false;
	};
	_2454755a4_format_decimal(_4926_d,static_cast<jule::U64>(static_cast<jule::U64>(_8114_di)),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _245474c79_ryu_ftoa_fixed64(_2454672bb_DecimalSlice& _12126_d, jule::U64 _12147_mant, jule::I32 _12158_exp, jule::I32 _12168_prec) {
	if ((_12168_prec > 18LL)) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38) + jule::Str("\nlocation: std/conv/ftoaryu.jule:123:9"));;
	};
	if ((_12147_mant == 0LLU)) {
		std::tie(_12126_d._field_nd,_12126_d._field_dp) = std::make_tuple(0LL,0LL);
		return;;
	};
	jule::I32 _13113_e2 = _12158_exp;;
	jule::I32 _1329_b = _24542e97b_len64(_12147_mant);;
	if ((_1329_b < 55LL)) {
		_12147_mant=static_cast<jule::U64>((_12147_mant << static_cast<jule::U32>((55LL - _1329_b))));
		_13113_e2+=(static_cast<jule::I32>(_1329_b) - 55LL);
	};
	jule::I32 _1469_q = (((-(_245475cbe_mul_by_log2_log10(static_cast<jule::I32>((_13113_e2 + 54LL))))) + _12168_prec) - 1LL);;
	jule::Bool _15113_exact = ((_1469_q <= 55LL) && (_1469_q >= 0LL));;
	jule::U64 _15314_di;;
	jule::I32 _15318_dexp2;;
	jule::Bool _15329_d0;;
	std::tie(_15314_di,_15318_dexp2,_15329_d0) = _2454778a3_mult128bit_pow10(_12147_mant,_13113_e2,_1469_q);
	if ((_15318_dexp2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: std/conv/ftoaryu.jule:155:9"));;
	};
	if ((((_1469_q < 0LL) && (_1469_q >= -22LL)) && _245477be4_divisible_by_pow5(_12147_mant,static_cast<jule::I32>((-(_1469_q)))))) {
		_15113_exact=true;
		_15329_d0=true;
	};
	jule::U32 _1669_extra = static_cast<jule::U32>((-(_15318_dexp2)));;
	jule::U64 _1679_extra_mask = static_cast<jule::U64>(((1LL << _1669_extra) - 1LL));;
	jule::U64 _16913_dfrac = 0LLU;;
	std::tie(_15314_di,_16913_dfrac) = std::make_tuple(static_cast<jule::U64>((_15314_di >> _1669_extra)),static_cast<jule::U64>((_15314_di & _1679_extra_mask)));
	jule::Bool _17113_round_up = false;;
	if (_15113_exact) {
		_17113_round_up=(((_16913_dfrac > (1LLU << (_1669_extra - 1LLU))) || ((_16913_dfrac == (1LLU << (_1669_extra - 1LLU))) && (!(_15329_d0)))) || (((_16913_dfrac == (1LLU << (_1669_extra - 1LLU))) && _15329_d0) && ((_15314_di & 1LLU) == 1LLU)));
	} else {
		_17113_round_up=((_16913_dfrac >> (_1669_extra - 1LLU)) == 1LLU);
	};
	if ((_16913_dfrac != 0LLU)) {
		_15329_d0=false;
	};
	_2454755a4_format_decimal(_12126_d,_15314_di,(!(_15329_d0)),_17113_round_up,_12168_prec);
	_12126_d._field_dp-=_1469_q;
}



inline void _2454755a4_format_decimal(_2454672bb_DecimalSlice& _20024_d, jule::U64 _20045_m, jule::Bool _20057_trunc, jule::Bool _20074_round_up, jule::I32 _20090_prec) {
	jule::U64 _2019_max = _24547510e_U64_POW10[_20090_prec];;
	jule::I32 _20213_trimmed = 0LL;;
	while ((_20045_m >= _2019_max)) {
		{
			jule::U64 _20414_a = (_20045_m / 10LLU);;
			jule::U64 _20417_b = (_20045_m % 10LL);;
			std::tie(_20414_a,_20417_b) = std::make_tuple((_20045_m / 10LLU),(_20045_m % 10LL));
			_20045_m=_20414_a;
			(_20213_trimmed)++;
			if ((_20417_b > 5LLU)) {
				_20074_round_up=true;
			} else if ((_20417_b < 5LLU)) {
				_20074_round_up=false;
			} else {
				_20074_round_up=(_20057_trunc || ((_20045_m & 1LLU) == 1LLU));
			};
			if ((_20417_b != 0LLU)) {
				_20057_trunc=true;
			};
		}
	_iter_next_22915bb14:;
	}
	_iter_end_22915bb14:;;
	if (_20074_round_up) {
		(_20045_m)++;
	};
	if ((_20045_m >= _2019_max)) {
		_20045_m/=10LLU;
		(_20213_trimmed)++;
	};
	jule::U32 _22913_n = static_cast<jule::U32>(_20090_prec);;
	_20024_d._field_nd=static_cast<jule::I32>(static_cast<jule::I32>(_20090_prec));
	jule::U64 _23113_v = _20045_m;;
	while ((_23113_v >= 100LLU)) {
		{
			jule::U64 _23317_v1 = 0LLU;;
			jule::U64 _23417_v2 = 0LLU;;
			if (((_23113_v >> 32LLU) == 0LLU)) {
				std::tie(_23317_v1,_23417_v2) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U32>(_23113_v) / 100LLU))),static_cast<jule::U64>(static_cast<jule::U64>((static_cast<jule::U32>(_23113_v) % 100LL))));
			} else {
				std::tie(_23317_v1,_23417_v2) = std::make_tuple(static_cast<jule::U64>((_23113_v / 100LLU)),static_cast<jule::U64>((_23113_v % 100LL)));
			};
			_22913_n-=2LLU;
			_20024_d._field_d[static_cast<jule::I32>((_22913_n + 1LLU))]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _23417_v2) + 1LLU))]);
			_20024_d._field_d[static_cast<jule::I32>((_22913_n + 0LLU))]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _23417_v2) + 0LLU))]);
			_23113_v=_23317_v1;
		}
	_iter_next_22916060c:;
	}
	_iter_end_22916060c:;;
	if ((_23113_v > 0LLU)) {
		(_22913_n)--;
		_20024_d._field_d[static_cast<jule::I32>(_22913_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _23113_v) + 1LLU))]);
	};
	if ((_23113_v >= 10LLU)) {
		(_22913_n)--;
		_20024_d._field_d[static_cast<jule::I32>(_22913_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>((2LL * _23113_v))]);
	};
	while ((_20024_d._field_d[(_20024_d._field_nd - 1LL)] == '0')) {
		{
			(_20024_d._field_nd)--;
			(_20213_trimmed)++;
		}
	_iter_next_22916aaac:;
	}
	_iter_end_22916aaac:;;
	_20024_d._field_dp=static_cast<jule::I32>((_20024_d._field_nd + _20213_trimmed));
}



inline void _245475a27_ryu_ftoa_shortest(_2454672bb_DecimalSlice& _26127_d, jule::U64 _26148_mant, jule::I32 _26159_exp, _24546660b_FloatInfo& _26170_flt) {
	if ((_26148_mant == 0LLU)) {
		std::tie(_26127_d._field_nd,_26127_d._field_dp) = std::make_tuple(0LL,0LL);
		return;;
	};
	if (((_26159_exp <= 0LL) && (_245428e5e_trailing_zeros64(_26148_mant) >= (-(_26159_exp))))) {
		_26148_mant>>=static_cast<jule::U32>((-(_26159_exp)));
		_2454769e5_ryu_digits(_26127_d,_26148_mant,_26148_mant,_26148_mant,true,false);
		return;;
	};
	jule::U64 _27310_ml;;
	jule::U64 _27314_mc;;
	jule::U64 _27318_mu;;
	jule::I32 _27326_e2;;
	std::tie(_27310_ml,_27314_mc,_27318_mu,_27326_e2) = _245476451_compute_bounds(_26148_mant,_26159_exp,_26170_flt);
	if ((_27326_e2 == 0LL)) {
		_2454769e5_ryu_digits(_26127_d,_27310_ml,_27314_mc,_27318_mu,true,false);
		return;;
	};
	jule::I32 _2799_q = (_245475cbe_mul_by_log2_log10(static_cast<jule::I32>((-(_27326_e2)))) + 1LL);;
	jule::U64 _28313_dl = 0LLU;;
	jule::U64 _28413_dc = 0LLU;;
	jule::U64 _28513_du = 0LLU;;
	jule::Bool _28613_dl0 = false;;
	jule::Bool _28713_dc0 = false;;
	jule::Bool _28813_du0 = false;;
	if ((_26170_flt == _245466a29_F32_INFO)) {
		jule::U32 _29017_dl32 = 0LLU;;
		jule::U32 _29117_dc32 = 0LLU;;
		jule::U32 _29217_du32 = 0LLU;;
		std::tie(_29017_dl32,std::ignore,_28613_dl0) = _2454774b8_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27310_ml)),_27326_e2,_2799_q);
		std::tie(_29117_dc32,std::ignore,_28713_dc0) = _2454774b8_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27314_mc)),_27326_e2,_2799_q);
		std::tie(_29217_du32,_27326_e2,_28813_du0) = _2454774b8_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27318_mu)),_27326_e2,_2799_q);
		std::tie(_28313_dl,_28413_dc,_28513_du) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(_29017_dl32)),static_cast<jule::U64>(static_cast<jule::U64>(_29117_dc32)),static_cast<jule::U64>(static_cast<jule::U64>(_29217_du32)));
	} else {
		std::tie(_28313_dl,std::ignore,_28613_dl0) = _2454778a3_mult128bit_pow10(_27310_ml,_27326_e2,_2799_q);
		std::tie(_28413_dc,std::ignore,_28713_dc0) = _2454778a3_mult128bit_pow10(_27314_mc,_27326_e2,_2799_q);
		std::tie(_28513_du,_27326_e2,_28813_du0) = _2454778a3_mult128bit_pow10(_27318_mu,_27326_e2,_2799_q);
	};
	if ((_27326_e2 >= 0LL)) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: std/conv/ftoaryu.jule:303:9"));;
	};
	if ((_2799_q > 55LL)) {
		std::tie(_28613_dl0,_28713_dc0,_28813_du0) = std::make_tuple(false,false,false);
	};
	if (((_2799_q < 0LL) && (_2799_q >= -24LL))) {
		if (_245477be4_divisible_by_pow5(_27310_ml,static_cast<jule::I32>((-(_2799_q))))) {
			_28613_dl0=true;
		};
		if (_245477be4_divisible_by_pow5(_27314_mc,static_cast<jule::I32>((-(_2799_q))))) {
			_28713_dc0=true;
		};
		if (_245477be4_divisible_by_pow5(_27318_mu,static_cast<jule::I32>((-(_2799_q))))) {
			_28813_du0=true;
		};
	};
	jule::U32 _3259_extra = static_cast<jule::U32>((-(_27326_e2)));;
	jule::U64 _3269_extra_mask = static_cast<jule::U64>(((1LL << _3259_extra) - 1LL));;
	jule::U64 _32813_fracl = 0LLU;;
	std::tie(_28313_dl,_32813_fracl) = std::make_tuple(static_cast<jule::U64>((_28313_dl >> _3259_extra)),static_cast<jule::U64>((_28313_dl & _3269_extra_mask)));
	jule::U64 _33013_fracc = 0LLU;;
	std::tie(_28413_dc,_33013_fracc) = std::make_tuple(static_cast<jule::U64>((_28413_dc >> _3259_extra)),static_cast<jule::U64>((_28413_dc & _3269_extra_mask)));
	jule::U64 _33213_fracu = 0LLU;;
	std::tie(_28513_du,_33213_fracu) = std::make_tuple(static_cast<jule::U64>((_28513_du >> _3259_extra)),static_cast<jule::U64>((_28513_du & _3269_extra_mask)));
	jule::Bool _33813_uok = ((!(_28813_du0)) || (_33213_fracu > 0LLU));;
	if ((_28813_du0 && (_33213_fracu == 0LLU))) {
		_33813_uok=((_26148_mant & 1LLU) == 0LLU);
	};
	if ((!(_33813_uok))) {
		(_28513_du)--;
	};
	jule::Bool _34713_cup = false;;
	if (_28713_dc0) {
		_34713_cup=((_33013_fracc > (1LLU << (_3259_extra - 1LLU))) || ((_33013_fracc == (1LLU << (_3259_extra - 1LLU))) && ((_28413_dc & 1LLU) == 1LLU)));
	} else {
		_34713_cup=((_33013_fracc >> (_3259_extra - 1LLU)) == 1LLU);
	};
	jule::Bool _3619_lok = ((_28613_dl0 && (_32813_fracl == 0LLU)) && ((_26148_mant & 1LLU) == 0LLU));;
	if ((!(_3619_lok))) {
		(_28313_dl)++;
	};
	jule::Bool _3669_c0 = (_28713_dc0 && (_33013_fracc == 0LLU));;
	_2454769e5_ryu_digits(_26127_d,_28313_dl,_28413_dc,_28513_du,_3669_c0,_34713_cup);
	_26127_d._field_dp-=_2799_q;
}



inline jule::I32 _245475cbe_mul_by_log2_log10(jule::I32 _37722_x) {
	return static_cast<jule::I32>(((_37722_x * 78913LL) >> 18LL));
}



inline jule::I32 _245476066_mul_by_log10_log2(jule::I32 _38722_x) {
	return static_cast<jule::I32>(((_38722_x * 108853LL) >> 15LL));
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::I32> _245476451_compute_bounds(jule::U64 _39519_mant, jule::I32 _39530_exp, _24546660b_FloatInfo& _3966_flt) {
	jule::U64 _39624_lower = jule::U64();
	jule::U64 _39636_central = jule::U64();
	jule::U64 _39650_upper = jule::U64();
	jule::I32 _39662_e2 = jule::I32();
	if (((_39519_mant != (1LLU << _3966_flt._field_mantbits)) || (_39530_exp == ((_3966_flt._field_bias + 1LL) - static_cast<jule::I32>(_3966_flt._field_mantbits))))) {
		std::tie(_39624_lower,_39636_central,_39650_upper) = std::make_tuple(static_cast<jule::U64>(((2LLU * _39519_mant) - 1LLU)),static_cast<jule::U64>((2LLU * _39519_mant)),static_cast<jule::U64>(((2LLU * _39519_mant) + 1LLU)));
		_39662_e2=static_cast<jule::I32>((_39530_exp - 1LL));
	} else {
		std::tie(_39624_lower,_39636_central,_39650_upper) = std::make_tuple(static_cast<jule::U64>(((4LLU * _39519_mant) - 1LLU)),static_cast<jule::U64>((4LLU * _39519_mant)),static_cast<jule::U64>(((4LLU * _39519_mant) + 2LLU)));
		_39662_e2=static_cast<jule::I32>((_39530_exp - 2LL));
	};
	return std::make_tuple(_39624_lower,_39636_central,_39650_upper,_39662_e2);
}



inline void _2454769e5_ryu_digits(_2454672bb_DecimalSlice& _40920_d, jule::U64 _40937_lower, jule::U64 _40949_central, jule::U64 _40963_upper, jule::Bool _40979_c0, jule::Bool _40993_cup) {
	jule::U32 _41014_lhi;;
	jule::U32 _41019_llo;;
	std::tie(_41014_lhi,_41019_llo) = _245477e8b_divmod1e9(_40937_lower);
	jule::U32 _41110_chi;;
	jule::U32 _41115_clo;;
	std::tie(_41110_chi,_41115_clo) = _245477e8b_divmod1e9(_40949_central);
	jule::U32 _41210_uhi;;
	jule::U32 _41215_ulo;;
	std::tie(_41210_uhi,_41215_ulo) = _245477e8b_divmod1e9(_40963_upper);
	if ((_41210_uhi == 0LLU)) {
		_2454770cd_ryu_digits32(_40920_d,_41019_llo,_41115_clo,_41215_ulo,_40979_c0,_40993_cup,8LL);
	} else if ((_41014_lhi < _41210_uhi)) {
		if ((_41019_llo != 0LLU)) {
			(_41014_lhi)++;
		};
		_40979_c0=(_40979_c0 && (_41115_clo == 0LLU));
		_40993_cup=((_41115_clo > 500000000LL) || ((_41115_clo == 500000000LL) && _40993_cup));
		_2454770cd_ryu_digits32(_40920_d,_41014_lhi,_41110_chi,_41210_uhi,_40979_c0,_40993_cup,8LL);
		_40920_d._field_dp+=9LL;
	} else {
		_40920_d._field_nd=0LL;
		jule::U32 _42817_n = static_cast<jule::U32>(9LLU);;
		jule::U32 _42917_v = _41110_chi;;
		while ((_42917_v > 0LLU)) {
			{
				jule::U32 _43118_v1 = (_42917_v / 10LLU);;
				jule::U32 _43122_v2 = (_42917_v % 10LL);;
				std::tie(_43118_v1,_43122_v2) = std::make_tuple((_42917_v / 10LLU),(_42917_v % 10LL));
				_42917_v=_43118_v1;
				(_42817_n)--;
				_40920_d._field_d[static_cast<jule::I32>(_42817_n)]=static_cast<jule::U8>(static_cast<jule::U8>((_43122_v2 + '0')));
			}
		_iter_next_22918b34c:;
		}
		_iter_end_22918b34c:;;
		_40920_d._field_d=_40920_d._field_d.slice(static_cast<jule::I32>(_42817_n));
		_40920_d._field_nd=static_cast<jule::I32>(static_cast<jule::I32>((9LL - _42817_n)));
		_2454770cd_ryu_digits32(_40920_d,_41019_llo,_41115_clo,_41215_ulo,_40979_c0,_40993_cup,static_cast<jule::I32>((_40920_d._field_nd + 8LL)));
	};
	while (((_40920_d._field_nd > 0LL) && (_40920_d._field_d[(_40920_d._field_nd - 1LL)] == '0'))) {
		{
			(_40920_d._field_nd)--;
		}
	_iter_next_22918d63a:;
	}
	_iter_end_22918d63a:;;
	while (((_40920_d._field_nd > 0LL) && (_40920_d._field_d[0LL] == '0'))) {
		{
			(_40920_d._field_nd)--;
			(_40920_d._field_dp)--;
			_40920_d._field_d=_40920_d._field_d.slice(1LL);
		}
	_iter_next_22918b0c7:;
	}
	_iter_end_22918b0c7:;;
}



inline void _2454770cd_ryu_digits32(_2454672bb_DecimalSlice& _45422_d, jule::U32 _45443_lower, jule::U32 _45459_central, jule::U32 _4559_upper, jule::Bool _45525_c0, jule::Bool _45539_cup, jule::I32 _45554_endindex) {
	if ((_4559_upper == 0LLU)) {
		_45422_d._field_dp=static_cast<jule::I32>((_45554_endindex + 1LL));
		return;;
	};
	jule::I32 _46013_trimmed = 0LL;;
	jule::I32 _46313_c_next_digit = 0LL;;
	while ((_4559_upper > 0LLU)) {
		{
			jule::U32 _47013_l = ((_45443_lower + 9LLU) / 10LLU);;
			jule::U32 _47118_c = (_45459_central / 10LLU);;
			jule::U32 _47125_cdigit = (_45459_central % 10LL);;
			std::tie(_47118_c,_47125_cdigit) = std::make_tuple((_45459_central / 10LLU),(_45459_central % 10LL));
			jule::U32 _47213_u = (_4559_upper / 10LLU);;
			if ((_47013_l > _47213_u)) {
				goto _iter_end_229192012;
			};
			if (((_47013_l == (_47118_c + 1LLU)) && (_47118_c < _47213_u))) {
				(_47118_c)++;
				_47125_cdigit=0LLU;
				_45539_cup=false;
			};
			(_46013_trimmed)++;
			_45525_c0=(_45525_c0 && (_46313_c_next_digit == 0LL));
			_46313_c_next_digit=static_cast<jule::I32>(static_cast<jule::I32>(_47125_cdigit));
			std::tie(_45443_lower,_45459_central,_4559_upper) = std::make_tuple(_47013_l,_47118_c,_47213_u);
		}
	_iter_next_229192012:;
	}
	_iter_end_229192012:;;
	if ((_46013_trimmed > 0LL)) {
		_45539_cup=(((_46313_c_next_digit > 5LL) || ((_46313_c_next_digit == 5LL) && (!(_45525_c0)))) || (((_46313_c_next_digit == 5LL) && _45525_c0) && ((_45459_central & 1LLU) == 1LLU)));
	};
	if (((_45459_central < _4559_upper) && _45539_cup)) {
		(_45459_central)++;
	};
	_45554_endindex-=_46013_trimmed;
	jule::U32 _50913_v = _45459_central;;
	jule::I32 _51013_n = _45554_endindex;;
	while ((_51013_n > _45422_d._field_nd)) {
		{
			jule::U32 _51214_v1 = (_50913_v / 100LLU);;
			jule::U32 _51218_v2 = (_50913_v % 100LL);;
			std::tie(_51214_v1,_51218_v2) = std::make_tuple((_50913_v / 100LLU),(_50913_v % 100LL));
			_45422_d._field_d[_51013_n]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _51218_v2) + 1LLU))]);
			_45422_d._field_d[(_51013_n - 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(((2LL * _51218_v2) + 0LLU))]);
			_51013_n-=2LL;
			_50913_v=_51214_v1;
		}
	_iter_next_229198b40:;
	}
	_iter_end_229198b40:;;
	if ((_51013_n == _45422_d._field_nd)) {
		_45422_d._field_d[_51013_n]=static_cast<jule::U8>(static_cast<jule::U8>((_50913_v + '0')));
	};
	_45422_d._field_nd=static_cast<jule::I32>((_45554_endindex + 1LL));
	_45422_d._field_dp=static_cast<jule::I32>((_45422_d._field_nd + _46013_trimmed));
}



inline std::tuple<jule::U32,jule::I32,jule::Bool> _2454774b8_mult64bit_pow10(jule::U32 _53420_m, jule::I32 _53432_e2, jule::I32 _53441_q) {
	jule::U32 _53451_resM = jule::U32();
	jule::I32 _53462_resE = jule::I32();
	jule::Bool _53473_exact = jule::Bool();
	if ((_53441_q == 0LL)) {
		_53451_resM = static_cast<jule::U32>((_53420_m << 6LLU));
		_53462_resE = static_cast<jule::I32>((_53432_e2 - 6LL));
		_53473_exact = true;
		return std::make_tuple(_53451_resM,_53462_resE,_53473_exact);
	};
	if (((_53441_q < -348LL) || (347LL < _53441_q))) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44) + jule::Str("\nlocation: std/conv/ftoaryu.jule:541:9"));;
	};
	jule::U64 _54313_pow = _24546e3b1_DETAILED_POWS_OF_TEN[(_53441_q - -348LL)][1LL];;
	if ((_53441_q < 0LL)) {
		_54313_pow+=1LLU;
	};
	jule::U64 _54810_hi;;
	jule::U64 _54814_lo;;
	std::tie(_54810_hi,_54814_lo) = _245431cbe_mul64(static_cast<jule::U64>(static_cast<jule::U64>(_53420_m)),_54313_pow);
	_53432_e2+=((_245476066_mul_by_log10_log2(_53441_q) - 63LL) + 57LL);
	_53451_resM = static_cast<jule::U32>(static_cast<jule::U32>(((_54810_hi << 7LLU) | (_54814_lo >> 57LLU))));
	_53462_resE = _53432_e2;
	_53473_exact = ((_54814_lo << 7LLU) == 0LLU);
	return std::make_tuple(_53451_resM,_53462_resE,_53473_exact);
}



inline std::tuple<jule::U64,jule::I32,jule::Bool> _2454778a3_mult128bit_pow10(jule::U64 _56221_m, jule::I32 _56233_e2, jule::I32 _56242_q) {
	jule::U64 _56252_resM = jule::U64();
	jule::I32 _56263_resE = jule::I32();
	jule::Bool _56274_exact = jule::Bool();
	if ((_56242_q == 0LL)) {
		_56252_resM = static_cast<jule::U64>((_56221_m << 8LLU));
		_56263_resE = static_cast<jule::I32>((_56233_e2 - 8LL));
		_56274_exact = true;
		return std::make_tuple(_56252_resM,_56263_resE,_56274_exact);
	};
	if (((_56242_q < -348LL) || (347LL < _56242_q))) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45) + jule::Str("\nlocation: std/conv/ftoaryu.jule:569:9"));;
	};
	jule::Array<jule::U64,2> _57113_pow = _24546e3b1_DETAILED_POWS_OF_TEN[(_56242_q - -348LL)];;
	if ((_56242_q < 0LL)) {
		_57113_pow[0LL]+=1LLU;
	};
	_56233_e2+=((_245476066_mul_by_log10_log2(_56242_q) - 127LL) + 119LL);
	jule::U64 _57910_l1;;
	jule::U64 _57914_l0;;
	std::tie(_57910_l1,_57914_l0) = _245431cbe_mul64(_56221_m,_57113_pow[0LL]);
	jule::U64 _58014_h1;;
	jule::U64 _58018_h0;;
	std::tie(_58014_h1,_58018_h0) = _245431cbe_mul64(_56221_m,_57113_pow[1LL]);
	jule::U64 _58110_mid;;
	jule::U64 _58115_carry;;
	std::tie(_58110_mid,_58115_carry) = _24543063b_add64(_57910_l1,_58018_h0,0LLU);
	_58014_h1+=_58115_carry;
	_56252_resM = static_cast<jule::U64>(((_58014_h1 << 9LLU) | (_58110_mid >> 55LLU)));
	_56263_resE = _56233_e2;
	_56274_exact = (((_58110_mid << 9LLU) == 0LLU) && (_57914_l0 == 0LLU));
	return std::make_tuple(_56252_resM,_56263_resE,_56274_exact);
}



inline jule::Bool _245477be4_divisible_by_pow5(jule::U64 _58626_m, jule::I32 _58634_k) {
	if ((_58626_m == 0LLU)) {
		return true;
	};
	jule::I32 _59013_i = 0LL;;
	for (; (_59013_i < _58634_k); (_59013_i)++) {
		{
			if (((_58626_m % 5LL) != 0LLU)) {
				return false;
			};
			_58626_m/=5LLU;
		}
	_iter_next_2291a85cd:;
	}
	_iter_end_2291a85cd:;;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _245477e8b_divmod1e9(jule::U64 _60214_x) {
	{
		return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>((_60214_x / 1000000000LL))),static_cast<jule::U32>(static_cast<jule::U32>((_60214_x % 1000000000LL))));
	};
}



inline void _24547acd5_trim(_2454795ec_Decimal& _33314_a) {
	while (((_33314_a._field_nd > 0LL) && (_33314_a._field_d[(_33314_a._field_nd - 1LL)] == '0'))) {
		{
			(_33314_a._field_nd)--;
		}
	_iter_next_2291acb21:;
	}
	_iter_end_2291acb21:;;
	if ((_33314_a._field_nd == 0LL)) {
		_33314_a._field_dp=0LL;
	};
}



inline void _24547b08d_right_shift(_2454795ec_Decimal& _34321_a, jule::U32 _34333_k) {
	jule::I32 _34413_r = 0LL;;
	jule::I32 _34513_w = 0LL;;
	jule::U32 _34813_n = 0LLU;;
	for (; ((_34813_n >> _34333_k) == 0LLU); (_34413_r)++) {
		{
			if ((_34413_r >= _34321_a._field_nd)) {
				if ((_34813_n == 0LLU)) {
					_34321_a._field_nd=0LL;
					return;;
				};
				while (((_34813_n >> _34333_k) == 0LLU)) {
					{
						_34813_n=static_cast<jule::U32>((_34813_n * 10LLU));
						(_34413_r)++;
					}
				_iter_next_2291b0eba:;
				}
				_iter_end_2291b0eba:;;
				goto _iter_end_2291ae947;
			};
			jule::U32 _36213_c = static_cast<jule::U32>(_34321_a._field_d[_34413_r]);;
			_34813_n=static_cast<jule::U32>((((_34813_n * 10LLU) + _36213_c) - '0'));
		}
	_iter_next_2291ae947:;
	}
	_iter_end_2291ae947:;;
	_34321_a._field_dp-=(_34413_r - 1LL);
	jule::U32 _3679_mask = static_cast<jule::U32>((static_cast<jule::U32>((1LL << _34333_k)) - 1LLU));;
	for (; (_34413_r < _34321_a._field_nd); (_34413_r)++) {
		{
			jule::U32 _37113_c = static_cast<jule::U32>(_34321_a._field_d[_34413_r]);;
			jule::U32 _37213_dig = (_34813_n >> _34333_k);;
			_34813_n&=_3679_mask;
			_34321_a._field_d[_34513_w]=static_cast<jule::U8>(static_cast<jule::U8>((_37213_dig + '0')));
			(_34513_w)++;
			_34813_n=static_cast<jule::U32>((((_34813_n * 10LLU) + _37113_c) - '0'));
		}
	_iter_next_2291b3792:;
	}
	_iter_end_2291b3792:;;
	while ((_34813_n > 0LLU)) {
		{
			jule::U32 _38113_dig = (_34813_n >> _34333_k);;
			_34813_n&=_3679_mask;
			if ((_34513_w < 800LL)) {
				_34321_a._field_d[_34513_w]=static_cast<jule::U8>(static_cast<jule::U8>((_38113_dig + '0')));
				(_34513_w)++;
			} else if ((_38113_dig > 0LLU)) {
				_34321_a._field_trunc=true;
			};
			_34813_n=static_cast<jule::U32>((_34813_n * 10LLU));
		}
	_iter_next_2291b43ec:;
	}
	_iter_end_2291b43ec:;;
	_34321_a._field_nd=_34513_w;
	_24547acd5_trim(_34321_a);
}



inline jule::Bool _24547b500_prefix_is_less_than(jule::Array<jule::U8,800> _39724_b, jule::I32 _39738_end, jule::Str _39748_s) {
	jule::I32 _39813_i = 0LL;;
	for (; (_39813_i < _39748_s.len()); (_39813_i)++) {
		{
			if ((_39813_i >= _39738_end)) {
				return true;
			};
			if ((_39724_b[_39813_i] != _39748_s[_39813_i])) {
				return (_39724_b[_39813_i] < _39748_s[_39813_i]);
			};
		}
	_iter_next_2291b8225:;
	}
	_iter_end_2291b8225:;;
	return false;
}



inline void _24547b775_left_shift(_2454795ec_Decimal& _41120_a, jule::U32 _41132_k) {
	jule::I32 _41213_delta = _245479069_LEFTCHEATS[static_cast<jule::I32>(_41132_k)]._field_delta;;
	if (_24547b500_prefix_is_less_than(_41120_a._field_d,_41120_a._field_nd,_245479069_LEFTCHEATS[static_cast<jule::I32>(_41132_k)]._field_cutoff)) {
		(_41213_delta)--;
	};
	jule::I32 _41713_r = _41120_a._field_nd;;
	jule::I32 _41813_w = (_41120_a._field_nd + _41213_delta);;
	jule::U32 _42113_n = 0LLU;;
	(_41713_r)--;
	for (; (_41713_r >= 0LL); (_41713_r)--) {
		{
			_42113_n+=((static_cast<jule::U32>(_41120_a._field_d[_41713_r]) - '0') << _41132_k);
			jule::U32 _42513_quo = (_42113_n / 10LLU);;
			jule::U32 _42613_rem = (_42113_n - (10LLU * _42513_quo));;
			(_41813_w)--;
			if ((_41813_w < 800LL)) {
				_41120_a._field_d[_41813_w]=static_cast<jule::U8>(static_cast<jule::U8>((_42613_rem + '0')));
			} else if ((_42613_rem != 0LLU)) {
				_41120_a._field_trunc=true;
			};
			_42113_n=_42513_quo;
		}
	_iter_next_2291bbaca:;
	}
	_iter_end_2291bbaca:;;
	while ((_42113_n > 0LLU)) {
		{
			jule::U32 _43813_quo = (_42113_n / 10LLU);;
			jule::U32 _43913_rem = (_42113_n - (10LLU * _43813_quo));;
			(_41813_w)--;
			if ((_41813_w < 800LL)) {
				_41120_a._field_d[_41813_w]=static_cast<jule::U8>(static_cast<jule::U8>((_43913_rem + '0')));
			} else if ((_43913_rem != 0LLU)) {
				_41120_a._field_trunc=true;
			};
			_42113_n=_43813_quo;
		}
	_iter_next_2291be1e8:;
	}
	_iter_end_2291be1e8:;;
	_41120_a._field_nd+=_41213_delta;
	if ((_41120_a._field_nd >= 800LL)) {
		_41120_a._field_nd=800LL;
	};
	_41120_a._field_dp+=_41213_delta;
	_24547acd5_trim(_41120_a);
}



inline jule::Bool _24547bab6_should_round_up(_2454795ec_Decimal& _45821_a, jule::I32 _45833_nd) {
	if (((_45833_nd < 0LL) || (_45833_nd >= _45821_a._field_nd))) {
		return false;
	};
	if (((_45821_a._field_d[_45833_nd] == '5') && ((_45833_nd + 1LL) == _45821_a._field_nd))) {
		if (_45821_a._field_trunc) {
			return true;
		};
		return ((_45833_nd > 0LL) && (((_45821_a._field_d[(_45833_nd - 1LL)] - '0') & 1LL) != 0LLU));
	};
	return (_45821_a._field_d[_45833_nd] >= '5');
}



inline jule::Str _24547d348_fmt_uint(jule::U64 _6017_i, jule::I32 _6025_base) {
	if (((true && (_6017_i < 100LLU)) && (_6025_base == 10LL))) {
		return _24547dc94_small(static_cast<jule::I32>(static_cast<jule::I32>(_6017_i)));
	};
	jule::Str _6413_s;;
	std::tie(std::ignore,_6413_s) = _24547e569_fmt_bits(nullptr,_6017_i,_6025_base,false,false);
	return _6413_s;
}



inline jule::Str _24547d6cd_fmt_int(jule::I64 _7116_i, jule::I32 _7124_base) {
	if ((((true && (0LL <= _7116_i)) && (_7116_i < 100LL)) && (_7124_base == 10LL))) {
		return _24547dc94_small(static_cast<jule::I32>(static_cast<jule::I32>(_7116_i)));
	};
	jule::Str _7513_s;;
	std::tie(std::ignore,_7513_s) = _24547e569_fmt_bits(nullptr,static_cast<jule::U64>(static_cast<jule::U64>(_7116_i)),_7124_base,(_7116_i < 0LL),false);
	return _7513_s;
}



inline jule::Str _24547d975_itoa(jule::I32 _8013_i) {
	return _24547d6cd_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_8013_i)),10LL);
}



inline jule::Str _24547dc94_small(jule::I32 _8510_i) {
	if ((_8510_i < 10LL)) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(_8510_i,(_8510_i + 1LL));
	};
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice((_8510_i << 1LLU),((_8510_i << 1LLU) + 2LL));
}



inline jule::Bool _24547e03b_is_power_of_two(jule::I32 _9220_x) {
	return ((_9220_x & (_9220_x - 1LL)) == 0LL);
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _24547e569_fmt_bits(jule::Slice<jule::U8> _10117_dst, jule::U64 _10134_u, jule::I32 _10142_base, jule::Bool _10153_neg, jule::Bool _10164_append_) {
	jule::Slice<jule::U8> _10181_d = jule::Slice<jule::U8>();
	jule::Str _10192_s = jule::Str();
	if (((_10142_base < 2LL) || (_10142_base > 36LL))) {
		jule::panic(jule::Str("std::conv: illegal base", 23) + jule::Str("\nlocation: std/conv/itoa.jule:103:9"));;
	};
	jule::Slice<jule::U8> _10713_a = jule::Slice<jule::U8>::alloc(65LL);;
	jule::I32 _10813_i = _10713_a.len();;
	if (_10153_neg) {
		_10134_u=static_cast<jule::U64>((-(_10134_u)));
	};
	if ((_10142_base == 10LL)) {
		;
		jule::U32 _14917_us = static_cast<jule::U32>(_10134_u);;
		while ((_14917_us >= 100LLU)) {
			{
				jule::U32 _15117_is = ((_14917_us % 100LL) << 1LLU);;
				_14917_us/=100LLU;
				_10813_i-=2LL;
				_10713_a[(_10813_i + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>((_15117_is + 1LLU))]);
				_10713_a[(_10813_i + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>((_15117_is + 0LLU))]);
			}
		_iter_next_22920d5cd:;
		}
		_iter_end_22920d5cd:;;
		jule::U32 _15913_is = (_14917_us << 1LLU);;
		(_10813_i)--;
		_10713_a[_10813_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>((_15913_is + 1LLU))]);
		if ((_14917_us >= 10LLU)) {
			(_10813_i)--;
			_10713_a[_10813_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::I32>(_15913_is)]);
		};
	} else if (_24547e03b_is_power_of_two(_10142_base)) {
		jule::U32 _17413_shift = (static_cast<jule::U32>(_2454282c1_trailing_zeros(static_cast<jule::U32>(static_cast<jule::U32>(_10142_base)))) & 7LLU);;
		jule::U64 _17513_b = static_cast<jule::U64>(_10142_base);;
		jule::U32 _17613_m = (static_cast<jule::U32>(_10142_base) - 1LLU);;
		while ((_10134_u >= _17513_b)) {
			{
				(_10813_i)--;
				_10713_a[_10813_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>((static_cast<jule::U32>(_10134_u) & _17613_m))]);
				_10134_u>>=_17413_shift;
			}
		_iter_next_2292171ec:;
		}
		_iter_end_2292171ec:;;
		(_10813_i)--;
		_10713_a[_10813_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>(static_cast<jule::U32>(_10134_u))]);
	} else {
		jule::U64 _18713_b = static_cast<jule::U64>(_10142_base);;
		while ((_10134_u >= _18713_b)) {
			{
				(_10813_i)--;
				jule::U64 _19317_q = jule::div(_10134_u,_18713_b);;
				_10713_a[_10813_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>(static_cast<jule::U32>((_10134_u - (_19317_q * _18713_b))))]);
				_10134_u=_19317_q;
			}
		_iter_next_229219e8b:;
		}
		_iter_end_229219e8b:;;
		(_10813_i)--;
		_10713_a[_10813_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::I32>(static_cast<jule::U32>(_10134_u))]);
	};
	if (_10153_neg) {
		(_10813_i)--;
		_10713_a[_10813_i]='-';
	};
	if (_10164_append_) {
		_10181_d=jule::append(_10117_dst,_10713_a.slice(_10813_i));
		return std::make_tuple(_10181_d,_10192_s);
	};
	_10192_s=static_cast<jule::Str>(_10713_a.slice(_10813_i));
	return std::make_tuple(_10181_d,_10192_s);
}



inline jule::Str _24551b958_real_kind_of(jule::Str _4521_kind) {
	{
		auto &_match_expr{ _4521_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_22923588b:;
			{
				return _24551aec9_SYS_INT;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("uintptr", 7)) {
			_case_begin_229235902:;
			{
				return _24551b282_SYS_UINT;
			}
		}
		else {
			_case_begin_22923576a:;
			{
				return _4521_kind;
			}
		}
		_match_end_2292356b0:;
	};
}



inline jule::I32 _24551bc00_bitsize_of(jule::Str _5919_k) {
	{
		auto &_match_expr{ _5919_k };
		
		if (_match_expr == jule::Str("i8", 2) || _match_expr == jule::Str("u8", 2)) {
			_case_begin_22923711d:;
			{
				return 8LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3) || _match_expr == jule::Str("u16", 3)) {
			_case_begin_229237184:;
			{
				return 16LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3) || _match_expr == jule::Str("u32", 3) || _match_expr == jule::Str("f32", 3)) {
			_case_begin_22923697a:;
			{
				return 32LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3) || _match_expr == jule::Str("u64", 3) || _match_expr == jule::Str("f64", 3)) {
			_case_begin_2292369e1:;
			{
				return 64LL;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("int", 3)) {
			_case_begin_229236a57:;
			{
				return _245513642_BIT_SIZE;
			}
		}
		else {
			_case_begin_229236914:;
			{
				return -1LL;
			}
		}
		_match_end_22923666c:;
	};
}



inline jule::Str _24551c01e_int_from_bits(jule::I32 _8622_bits) {
	{
		auto &_match_expr{ _8622_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_229238c35:;
			{
				return jule::Str("i8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_229238c9b:;
			{
				return jule::Str("i16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_229238d12:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_229238e22:;
			{
				return jule::Str("i64", 3);
			}
		}
		else {
			_case_begin_2292380b9:;
			{
				return jule::Str();
			}
		}
		_match_end_229238b14:;
	};
}



inline jule::Str _24551c2b6_uint_from_bits(jule::I32 _10423_bits) {
	{
		auto &_match_expr{ _10423_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_22923a0aa:;
			{
				return jule::Str("u8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_22923a121:;
			{
				return jule::Str("u16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_22923a187:;
			{
				return jule::Str("u32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_22923a484:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_22923962b:;
			{
				return jule::Str();
			}
		}
		_match_end_2292394d8:;
	};
}



inline jule::Str _24551c55d_float_from_bits(jule::I32 _12224_bits) {
	{
		auto &_match_expr{ _12224_bits };
		
		if (_match_expr == 32LL) {
			_case_begin_22923b595:;
			{
				return jule::Str("f32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_22923b60b:;
			{
				return jule::Str("f64", 3);
			}
		}
		else {
			_case_begin_22923ab6b:;
			{
				return jule::Str();
			}
		}
		_match_end_22923aa28:;
	};
}



inline jule::Bool _24551d10d_check_bit_float(jule::Str _15024_val, jule::I32 _15034_bit) {
	({
		auto except = _2454740b9_parse_float(_15024_val,_15034_bit);
		(except.ok()) ? (except.result) : ({{
			return false;
		} jule::F64();});
	});
	return true;
}



inline jule::I32 _24551d3a5_bitsize_of_float(jule::F64 _16025_x) {
	{
		
		if (((-340282346638528860000000000000000000000.0 <= _16025_x) && (_16025_x <= 340282346638528860000000000000000000000.0))) {
			_case_begin_22924017b:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_22924107d:;
			{
				return 64LL;
			}
		}
		_match_end_2292413d0:;
	};
}



inline jule::I32 _24551d64c_bitsize_of_int(jule::I64 _17623_x) {
	{
		
		if (((-128LL <= _17623_x) && (_17623_x <= 127LL))) {
			_case_begin_22924258a:;
			{
				return 8LL;
			}
		}
		else if (((-32768LL <= _17623_x) && (_17623_x <= 32767LL))) {
			_case_begin_229242601:;
			{
				return 16LL;
			}
		}
		else if (((-2147483648LL <= _17623_x) && (_17623_x <= 2147483647LL))) {
			_case_begin_229242678:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_229242359:;
			{
				return 64LL;
			}
		}
		_match_end_22924227c:;
	};
}



inline jule::I32 _24551d8e4_bitsize_of_uint(jule::U64 _19624_x) {
	{
		
		if ((_19624_x <= 255LLU)) {
			_case_begin_229244405:;
			{
				return 8LL;
			}
		}
		else if ((_19624_x <= 65535LLU)) {
			_case_begin_22924446b:;
			{
				return 16LL;
			}
		}
		else if ((_19624_x <= 4294967295LLU)) {
			_case_begin_2292444e3:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_22924434a:;
			{
				return 64LL;
			}
		}
		_match_end_229244977:;
	};
}



inline void _24551da59_update_target(void) {
	{
		{
			auto &_match_expr{ _242ddc903_ARCH };
			
			if (_match_expr == jule::Str("arm64", 5) || _match_expr == jule::Str("amd64", 5)) {
				_case_begin_22924536d:;
				{
					_245513642_BIT_SIZE=64LL;
					_24551aec9_SYS_INT=jule::Str("i64", 3);
					_24551b282_SYS_UINT=jule::Str("u64", 3);
				}
			}
			else if (_match_expr == jule::Str("i386", 4)) {
				_case_begin_229245b87:;
				{
					_245513642_BIT_SIZE=32LL;
					_24551aec9_SYS_INT=jule::Str("i32", 3);
					_24551b282_SYS_UINT=jule::Str("u32", 3);
				}
			}
			_match_end_229245291:;
		};
	};
}



inline void _24551dbbe_init(void) {
	_24551da59_update_target();
}



inline jule::F64 _245522e7b_min(jule::Str _6116_k) {
	_6116_k=_24551b958_real_kind_of(_6116_k);
	{
		auto &_match_expr{ _6116_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_2292489d1:;
			{
				return -128LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_229248a47:;
			{
				return -32768LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_229248481:;
			{
				return -2147483648LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_229248508:;
			{
				return jule::MIN_I64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_229248580:;
			{
				return -340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_229248607:;
			{
				return jule::MIN_F64;
			}
		}
		else {
			_case_begin_2292464d4:;
			{
				return 0LL;
			}
		}
		_match_end_2292462e7:;
	};
}



inline jule::F64 _245523267_max(jule::Str _8316_k) {
	_8316_k=_24551b958_real_kind_of(_8316_k);
	{
		auto &_match_expr{ _8316_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_22924877d:;
			{
				return 127LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_22924a1ca:;
			{
				return 32767LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_22924a241:;
			{
				return 2147483647LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_22924a2a7:;
			{
				return jule::MAX_I64;
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_22924a31d:;
			{
				return 255LL;
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_22924a582:;
			{
				return 65535LL;
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_22924a5e8:;
			{
				return 4294967295LL;
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_22924a65e:;
			{
				return jule::MAX_U64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_22924a6d6:;
			{
				return 340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_22924a75d:;
			{
				return jule::MAX_F64;
			}
		}
		else {
			_case_begin_22924a043:;
			{
				return 0LL;
			}
		}
		_match_end_229248e98:;
	};
}



inline jule::Bool _2455235db_is_i8_compatible(jule::Str _629_k) {
	return (_629_k == jule::Str("i8", 2));
}



inline jule::Bool _2455238c7_is_i16_compatible(jule::Str _1130_k) {
	return ((_1130_k == jule::Str("i8", 2)) || (_1130_k == jule::Str("i16", 3)));
}



inline jule::Bool _245523b6e_is_i32_compatible(jule::Str _1730_k) {
	return ((((_1730_k == jule::Str("i8", 2)) || (_1730_k == jule::Str("i16", 3))) || (_1730_k == jule::Str("i32", 3))) || (_1730_k == jule::Str("u8", 2)));
}



inline jule::Bool _245523e8d_is_i64_compatible(jule::Str _2530_k) {
	return ((((_2530_k == jule::Str("i8", 2)) || (_2530_k == jule::Str("i16", 3))) || (_2530_k == jule::Str("i32", 3))) || (_2530_k == jule::Str("i64", 3)));
}



inline jule::Bool _245524235_is_u8_compatible(jule::Str _3329_k) {
	return (_3329_k == jule::Str("u8", 2));
}



inline jule::Bool _2455244cc_is_u16_compatible(jule::Str _3830_k) {
	return ((_3830_k == jule::Str("u8", 2)) || (_3830_k == jule::Str("u16", 3)));
}



inline jule::Bool _245524774_is_u32_compatible(jule::Str _4330_k) {
	return (((_4330_k == jule::Str("u8", 2)) || (_4330_k == jule::Str("u16", 3))) || (_4330_k == jule::Str("u32", 3)));
}



inline jule::Bool _245524ae8_is_u64_compatible(jule::Str _5030_k) {
	return ((((_5030_k == jule::Str("u8", 2)) || (_5030_k == jule::Str("u16", 3))) || (_5030_k == jule::Str("u32", 3))) || (_5030_k == jule::Str("u64", 3)));
}



inline jule::Bool _245524d90_is_f32_compatible(jule::Str _5830_k) {
	return (_5830_k == jule::Str("f32", 3));
}



inline jule::Bool _245525137_is_f64_compatible(jule::Str _6330_k) {
	return (_6330_k == jule::Str("f64", 3));
}



inline jule::Bool _245525478_types_are_compatible(jule::Str _7033_k1, jule::Str _7042_k2) {
	{
		auto &_match_expr{ _7033_k1 };
		
		if (_match_expr == jule::Str("any", 3)) {
			_case_begin_229253c50:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("int", 3)) {
			_case_begin_229253eb4:;
			{
				return (_7042_k2 == jule::Str("int", 3));
			}
		}
		else if (_match_expr == jule::Str("uintptr", 7)) {
			_case_begin_22925402a:;
			{
				return (_7042_k2 == jule::Str("uintptr", 7));
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_229254091:;
			{
				return (_7042_k2 == jule::Str("uint", 4));
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_229254107:;
			{
				return _2455235db_is_i8_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_22925416d:;
			{
				return _2455238c7_is_i16_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_2292541d4:;
			{
				return _245523b6e_is_i32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_22925424a:;
			{
				return _245523e8d_is_i64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_2292542c2:;
			{
				return _245524235_is_u8_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_229254338:;
			{
				return _2455244cc_is_u16_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_2292543b0:;
			{
				return _245524774_is_u32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_229254437:;
			{
				return _245524ae8_is_u64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_2292544ae:;
			{
				return _245524d90_is_f32_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_229254536:;
			{
				return _245525137_is_f64_compatible(_7042_k2);
			}
		}
		else if (_match_expr == jule::Str("bool", 4)) {
			_case_begin_2292545ad:;
			{
				return (_7042_k2 == jule::Str("bool", 4));
			}
		}
		else if (_match_expr == jule::Str("str", 3)) {
			_case_begin_229254635:;
			{
				return (_7042_k2 == jule::Str("str", 3));
			}
		}
		else {
			_case_begin_229253a0d:;
			{
				return false;
			}
		}
		_match_end_229253942:;
	};
}



inline jule::Bool _245525720_is_i16_greater(jule::Str _11027_k) {
	return (_11027_k == jule::Str("i8", 2));
}



inline jule::Bool _2455259b7_is_i32_greater(jule::Str _11527_k) {
	return ((_11527_k == jule::Str("i8", 2)) || (_11527_k == jule::Str("i16", 3)));
}



inline jule::Bool _245525c5e_is_i64_greater(jule::Str _12027_k) {
	return (((_12027_k == jule::Str("i8", 2)) || (_12027_k == jule::Str("i16", 3))) || (_12027_k == jule::Str("i32", 3)));
}



inline jule::Bool _245526006_is_u16_greater(jule::Str _12727_k) {
	return (_12727_k == jule::Str("u8", 2));
}



inline jule::Bool _245526457_is_u32_greater(jule::Str _13227_k) {
	return ((_13227_k == jule::Str("u8", 2)) || (_13227_k == jule::Str("u16", 3)));
}



inline jule::Bool _2455266ee_is_u64_greater(jule::Str _13827_k) {
	return (((_13827_k == jule::Str("u8", 2)) || (_13827_k == jule::Str("u16", 3))) || (_13827_k == jule::Str("u32", 3)));
}



inline jule::Bool _245526996_is_f32_greater(jule::Str _14523_k) {
	return (_14523_k != jule::Str("f64", 3));
}



inline jule::Bool _245526c3d_is_f64_greater(jule::Str _15023_k) {
	return true;
}



inline jule::Bool _24552707e_is_greater(jule::Str _15523_k1, jule::Str _15532_k2) {
	{
		auto &_match_expr{ _15523_k1 };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_22925c550:;
			{
				return _2455280b3_is_sig_int(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_22925c5b6:;
			{
				return _24552839e_is_unsig_int(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("uintptr", 7)) {
			_case_begin_22925c7b4:;
			{
				return _24552839e_is_unsig_int(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_22925c82a:;
			{
				return _245525720_is_i16_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_22925c891:;
			{
				return _2455259b7_is_i32_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_22925c918:;
			{
				return _245525c5e_is_i64_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_22925c990:;
			{
				return _245526006_is_u16_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_22925ca17:;
			{
				return _245526457_is_u32_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_22925cae4:;
			{
				return _2455266ee_is_u64_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_22925cb5a:;
			{
				return _245526996_is_f32_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_22925cbc1:;
			{
				return _245526c3d_is_f64_greater(_15532_k2);
			}
		}
		else if (_match_expr == jule::Str("any", 3)) {
			_case_begin_22925cc37:;
			{
				return true;
			}
		}
		else {
			_case_begin_22925c30d:;
			{
				return false;
			}
		}
		_match_end_22925bbe2:;
	};
}



inline jule::Bool _2455280b3_is_sig_int(jule::Str _2723_k) {
	return (((((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3))) || (_2723_k == jule::Str("int", 3)));
}



inline jule::Bool _24552839e_is_unsig_int(jule::Str _3625_k) {
	return ((((((_3625_k == jule::Str("u8", 2)) || (_3625_k == jule::Str("u16", 3))) || (_3625_k == jule::Str("u32", 3))) || (_3625_k == jule::Str("u64", 3))) || (_3625_k == jule::Str("uint", 4))) || (_3625_k == jule::Str("uintptr", 7)));
}



inline jule::Bool _245528646_is_int(jule::Str _4615_k) {
	return (_2455280b3_is_sig_int(_4615_k) || _24552839e_is_unsig_int(_4615_k));
}



inline jule::Bool _245528965_is_float(jule::Str _5117_k) {
	return ((_5117_k == jule::Str("f32", 3)) || (_5117_k == jule::Str("f64", 3)));
}



inline jule::Bool _245528c0c_is_num(jule::Str _5615_k) {
	return (_245528646_is_int(_5615_k) || _245528965_is_float(_5615_k));
}



inline jule::Bool _245528ea4_is_sig_num(jule::Str _6119_k) {
	return (_2455280b3_is_sig_int(_6119_k) || _245528965_is_float(_6119_k));
}



inline jule::Bool _245585e34_is_ascii(jule::I32 _1017_r) {
	;
	return (_1017_r <= 127LL);
}



inline jule::I32 _245586066_to_rune(jule::Slice<jule::U8> _1816_bytes) {
	if ((_1816_bytes.len() == 0LL)) {
		return 0LL;
	};
	jule::I32 _2313_r = 0LL;;
	if (((_1816_bytes[0LL] == '\\') && (_1816_bytes.len() > 1LL))) {
		jule::I32 _2517_i = 0LL;;
		_2313_r=static_cast<jule::I32>(_24559d6dd_rune_from_esq_seq(_1816_bytes,_2517_i));
	} else {
		std::tie(_2313_r,std::ignore) = _241d86859_decode_rune(_1816_bytes);
	};
	return _2313_r;
}



inline jule::Str _24559cd80_to_raw_str(jule::Slice<jule::U8> _3719_bytes) {
	return static_cast<jule::Str>(_3719_bytes);
}



inline jule::Str _24559d138_to_str(jule::Slice<jule::U8> _4215_bytes) {
	if ((_4215_bytes.len() == 0LL)) {
		return jule::Str();
	};
	jule::Slice<jule::U8> _4713_s = jule::Slice<jule::U8>::alloc(0LL,_4215_bytes.len());;
	jule::I32 _4813_i = 0LL;;
	while ((_4813_i < _4215_bytes.len())) {
		{
			jule::U8 _5013_b = _4215_bytes[_4813_i];;
			if ((_5013_b == '\\')) {
				_4713_s=jule::append(_4713_s,_24559da2e_str_esq_seq(_4215_bytes,_4813_i));
			} else {
				jule::I32 _5418_r;;
				jule::I32 _5421_size;;
				std::tie(_5418_r,_5421_size) = _241d86859_decode_rune(_4215_bytes.slice(_4813_i));
				_4813_i+=_5421_size;
				_4713_s=_241d87bbd_append_rune(_4713_s,_5418_r);
			};
		}
	_iter_next_22926a76c:;
	}
	_iter_end_22926a76c:;;
	return static_cast<jule::Str>(_4713_s);
}



inline std::tuple<jule::U8,jule::Bool> _24559d3d0_try_btoa_common_esq(jule::Slice<jule::U8> _6224_bytes) {
	jule::U8 _6241_seq = jule::U8();
	jule::Bool _6252_ok = jule::Bool();
	if (((_6224_bytes.len() < 2LL) || (_6224_bytes[0LL] != '\\'))) {
		return std::make_tuple(_6241_seq,_6252_ok);
	};
	{
		auto &_match_expr{ _6224_bytes[1LL] };
		
		if (_match_expr == '\\') {
			_case_begin_229270387:;
			{
				_6241_seq='\\';
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_2292703ed:;
			{
				_6241_seq='\'';
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_229270464:;
			{
				_6241_seq='\"';
			}
		}
		else if (_match_expr == 'a') {
			_case_begin_2292704ca:;
			{
				_6241_seq='\a';
			}
		}
		else if (_match_expr == 'b') {
			_case_begin_229270552:;
			{
				_6241_seq='\b';
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_2292705c9:;
			{
				_6241_seq='\f';
			}
		}
		else if (_match_expr == 'n') {
			_case_begin_229270651:;
			{
				_6241_seq='\n';
			}
		}
		else if (_match_expr == 'r') {
			_case_begin_2292706c8:;
			{
				_6241_seq='\r';
			}
		}
		else if (_match_expr == 't') {
			_case_begin_229270750:;
			{
				_6241_seq='\t';
			}
		}
		else if (_match_expr == 'v') {
			_case_begin_2292707c7:;
			{
				_6241_seq='\v';
			}
		}
		_match_end_229270266:;
	};
	_6252_ok=(_6241_seq != 0LLU);
	return std::make_tuple(_6241_seq,_6252_ok);
}



inline jule::I32 _24559d6dd_rune_from_esq_seq(jule::Slice<jule::U8> _9422_bytes, jule::I32& _9442_i) {
	jule::U8 _9510_b;;
	jule::Bool _9513_ok;;
	std::tie(_9510_b,_9513_ok) = _24559d3d0_try_btoa_common_esq(_9422_bytes.slice(_9442_i));
	(_9442_i)++;
	if (_9513_ok) {
		(_9442_i)++;
		return static_cast<jule::I32>(static_cast<jule::I32>(_9510_b));
	};
	{
		auto &_match_expr{ _9422_bytes[_9442_i] };
		
		if (_match_expr == 'u') {
			_case_begin_229275e5e:;
			{
				;
				jule::I32 _10513_r = static_cast<jule::I32>(({
					auto except = _24546c3d1_parse_uint(static_cast<jule::Str>(_9422_bytes.slice((_9442_i + 1LL),(_9442_i + 5LL))),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:105:22"));
					(except.result);
				}));;
				_9442_i+=5LL;
				return _10513_r;
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_229274c71:;
			{
				;
				jule::I32 _11013_r = static_cast<jule::I32>(({
					auto except = _24546c3d1_parse_uint(static_cast<jule::Str>(_9422_bytes.slice((_9442_i + 1LL),(_9442_i + 9LL))),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:110:22"));
					(except.result);
				}));;
				_9442_i+=9LL;
				return _11013_r;
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_229276745:;
			{
				;
				jule::Slice<jule::U8> _11513_seq = _9422_bytes.slice((_9442_i + 1LL),(_9442_i + 3LL));;
				_9442_i+=3LL;
				return static_cast<jule::I32>(static_cast<jule::I32>(({
					auto except = _24546c3d1_parse_uint(static_cast<jule::Str>(_11513_seq),16LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:117:18"));
					(except.result);
				})));
			}
		}
		else {
			_case_begin_229274e3b:;
			{
				;
				jule::Slice<jule::U8> _12013_seq = _9422_bytes.slice(_9442_i,(_9442_i + 3LL));;
				_9442_i+=3LL;
				return static_cast<jule::I32>(static_cast<jule::I32>(({
					auto except = _24546c3d1_parse_uint(static_cast<jule::Str>(_12013_seq.slice(1LL)),8LL,64LL);
					if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: std/jule/constant/lit/bytes.jule:122:18"));
					(except.result);
				})));
			}
		}
		_match_end_229274dd6:;
	};
}



inline jule::Slice<jule::U8> _24559da2e_str_esq_seq(jule::Slice<jule::U8> _12616_bytes, jule::I32& _12636_i) {
	jule::I32 _1279_r = _24559d6dd_rune_from_esq_seq(_12616_bytes,_12636_i);;
	if ((_1279_r <= 255LL)) {
		return jule::Slice<jule::U8>::make({static_cast<jule::U8>(static_cast<jule::U8>(_1279_r))});
	};
	return static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1279_r));
}



inline jule::I32 _245678c6e_find_format_prefix(jule::Slice<jule::U8>& _924_bytes, jule::I32& _940_start) {
	jule::I32 _1013_i = _940_start;;
	while ((_1013_i < _924_bytes.len())) {
		{
			jule::I32 _1214_r;;
			jule::I32 _1217_size;;
			std::tie(_1214_r,_1217_size) = _241d86859_decode_rune(_924_bytes.slice(_1013_i));
			if ((_1214_r == '{')) {
				return _1013_i;
			};
			_1013_i+=_1217_size;
		}
	_iter_next_2292b71ae:;
	}
	_iter_end_2292b71ae:;;
	return -1LL;
}



inline jule::Slice<jule::U8> _245679533_get_format_range(jule::I32& _2630_i, jule::Slice<jule::U8>& _2643_bytes) {
	jule::I32 _279_start = _2630_i;;
	jule::I32 _2813_braces = 0LL;;
	while ((_2630_i < _2643_bytes.len())) {
		{
			jule::I32 _3014_r;;
			jule::I32 _3017_size;;
			std::tie(_3014_r,_3017_size) = _241d86859_decode_rune(_2643_bytes.slice(_2630_i));
			_2630_i+=_3017_size;
			{
				auto &_match_expr{ _3014_r };
				
				if (_match_expr == '{') {
					_case_begin_2292b9ed6:;
					{
						(_2813_braces)++;
					}
				}
				else if (_match_expr == '}') {
					_case_begin_2292ba05d:;
					{
						(_2813_braces)--;
						if ((_2813_braces == 0LL)) {
							return _2643_bytes.slice(_279_start,_2630_i);
						};
					}
				}
				_match_end_2292b9ac9:;
			};
		}
	_iter_next_2292b9128:;
	}
	_iter_end_2292b9128:;;
	return nullptr;
}



inline jule::Slice<jule::U8> _245660085_fmt_by_default(jule::Any& _4520_arg) {
	if ((_4520_arg == nullptr)) {
		return jule::Slice<jule::U8>::make({'<','n','i','l','>'});
	};
	{
		auto &_match_expr{ _4520_arg };
		
		if (_match_expr.type_is<jule::F32>()) {
			_case_begin_2292bc02c:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24546780a_fmt_float(static_cast<jule::F64>(static_cast<jule::F64>(_4520_arg.operator jule::F32())),'g',-1LL,32LL));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_2292bbbca:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24546780a_fmt_float(static_cast<jule::F64>(_4520_arg.operator jule::F64()),'g',-1LL,64LL));
			}
		}
		else if (_match_expr.type_is<jule::I8>()) {
			_case_begin_2292ba3e3:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d6cd_fmt_int(static_cast<jule::I64>(_4520_arg.operator jule::I8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I16>()) {
			_case_begin_2292ba459:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d6cd_fmt_int(static_cast<jule::I64>(_4520_arg.operator jule::I16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_2292bb8bc:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d6cd_fmt_int(static_cast<jule::I64>(_4520_arg.operator jule::I32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_2292bb933:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d6cd_fmt_int(static_cast<jule::I64>(_4520_arg.operator jule::I64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_2292bb999:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d348_fmt_uint(static_cast<jule::U64>(_4520_arg.operator jule::U8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U16>()) {
			_case_begin_2292bba10:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d348_fmt_uint(static_cast<jule::U64>(_4520_arg.operator jule::U16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U32>()) {
			_case_begin_2292bba76:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d348_fmt_uint(static_cast<jule::U64>(_4520_arg.operator jule::U32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_2292bc0a4:;
			{
				return static_cast<jule::Slice<jule::U8>>(_24547d348_fmt_uint(static_cast<jule::U64>(_4520_arg.operator jule::U64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::Str>()) {
			_case_begin_2292bc11a:;
			{
				return static_cast<jule::Slice<jule::U8>>(_4520_arg.operator jule::Str());
			}
		}
		else if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_2292bc181:;
			{
				if (_4520_arg.operator jule::Bool()) {
					return jule::Slice<jule::U8>::make({'t','r','u','e'});
				};
				return jule::Slice<jule::U8>::make({'f','a','l','s','e'});
			}
		}
		else {
			_case_begin_2292b92d2:;
			{
				return static_cast<jule::Slice<jule::U8>>(jule::to_str(_4520_arg));
			}
		}
		_match_end_2292b927c:;
	};
}



inline jule::Slice<jule::U8> _24565e86a_apply_fmt_by_default(jule::I32& _8330_j, jule::Slice<jule::Any>& _8339_args) {
	jule::Any _849_arg = _8339_args[_8330_j];;
	(_8330_j)++;
	return _245660085_fmt_by_default(_849_arg);
}



inline jule::Slice<jule::U8> _245663143_apply_fmt(jule::Slice<jule::U8>& _9119_fmt, jule::I32& _9137_j, jule::Slice<jule::Any>& _9146_args) {
	if ((_9119_fmt.len() == 2LL)) {
		return _24565e86a_apply_fmt_by_default(_9137_j,_9146_args);
	};
	if (((_9119_fmt.len() == 4LL) && (_9119_fmt == jule::Slice<jule::U8>::make({'{','{','}','}'})))) {
		return jule::Slice<jule::U8>::make({'{','}'});
	};
	return _9119_fmt;
}



inline jule::Slice<jule::U8> _245670b9a_format_bytes(jule::Str _10517_fmt, jule::Slice<jule::Any> _10527_args) {
	jule::Slice<jule::U8> _10613_fmt_bytes = static_cast<jule::Slice<jule::U8>>(_10517_fmt);;
	if ((_10527_args.len() == 0LL)) {
		return _10613_fmt_bytes;
	};
	jule::Slice<jule::U8> _11213_bytes = jule::Slice<jule::U8>::alloc(0LL,_10517_fmt.len());;
	jule::I32 _11413_j = 0LL;;
	jule::I32 _11513_last = 0LL;;
	jule::I32 _11613_i = _245678c6e_find_format_prefix(_10613_fmt_bytes,_11513_last);;
	for (; (_11613_i != -1LL); _11613_i=static_cast<jule::I32>(_245678c6e_find_format_prefix(_10613_fmt_bytes,_11613_i))) {
		{
			_11213_bytes=jule::append(_11213_bytes,_10613_fmt_bytes.slice(_11513_last,_11613_i));
			jule::Slice<jule::U8> _11917_format = _245679533_get_format_range(_11613_i,_10613_fmt_bytes);;
			if ((_11917_format == nullptr)) {
				goto _iter_next_2292cbb52;
			};
			_11213_bytes=jule::append(_11213_bytes,_245663143_apply_fmt(_11917_format,_11413_j,_10527_args));
			if ((_11413_j >= _10527_args.len())) {
				_11213_bytes=jule::append(_11213_bytes,_10613_fmt_bytes.slice(_11613_i));
				_11513_last=static_cast<jule::I32>(_10613_fmt_bytes.len());
				goto _iter_end_2292cbb52;
			};
			_11513_last=_11613_i;
		}
	_iter_next_2292cbb52:;
	}
	_iter_end_2292cbb52:;;
	if ((_11513_last < _10613_fmt_bytes.len())) {
		_11213_bytes=jule::append(_11213_bytes,_10613_fmt_bytes.slice(_11513_last));
	};
	return _11213_bytes;
}



inline jule::Str _245697be4_format(jule::Str _16515_fmt, jule::Slice<jule::Any> _16525_args) {
	return static_cast<jule::Str>(_245670b9a_format_bytes(_16515_fmt,jule::Any(_16525_args)));
}



inline jule::Bool _24492bae4_parameter_uses_generics(jule::Ptr<_2449254c2_Param>& _37729_p, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>& _37741_generics) {
	if (_244925aee_is_self(_37729_p.ptr())) {
		return false;
	};
	return _245607824_kind_uses_generics(_37729_p.get()._field_kind.get()._field_decl.get()._field_kind,_37741_generics);
}



inline jule::Ptr<_2455e5180_TypeSymbol> _24492e0d0_build_type(jule::Ptr<_2448581d5_TypeDecl> _9419_t) {
	if ((_9419_t == nullptr)) {
		return nullptr;
	};
	return jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_decl=_9419_t, });
}



inline jule::Ptr<_2455b60c9_Value> _24492e3bb_build_expr(jule::Ptr<_24485c706_Expr> _10319_expr) {
	if ((_10319_expr == nullptr)) {
		return nullptr;
	};
	return jule::new_ptr<_2455b60c9_Value>(_2455b60c9_Value{._field_expr=_10319_expr, });
}



inline jule::Ptr<_2455e0334_TypeAlias> _24492e663_build_type_alias(jule::Ptr<_24486e839_TypeAliasDecl> _11225_decl) {
	return jule::new_ptr<_2455e0334_TypeAlias>(_2455e0334_TypeAlias{._field_scope=_11225_decl.get()._field_scope, ._field_public=_11225_decl.get()._field_public, ._field_cpp_linked=_11225_decl.get()._field_cpp_linked, ._field_token=_11225_decl.get()._field_token, ._field_ident=_11225_decl.get()._field_ident, ._field_kind=_24492e0d0_build_type(_11225_decl.get()._field_kind), });
}



inline jule::Ptr<_24483adcc_Field> _24492e982_build_field(jule::Ptr<_244872e25_FieldDecl> _12320_decl) {
	return jule::new_ptr<_24483adcc_Field>(_24483adcc_Field{._field_token=_12320_decl.get()._field_token, ._field_public=_12320_decl.get()._field_public, ._field_mutable=_12320_decl.get()._field_mutable, ._field_ident=_12320_decl.get()._field_ident, ._field_kind=_24492e0d0_build_type(_12320_decl.get()._field_kind), ._field_default=_12320_decl.get()._field_default});
}



inline jule::Slice<jule::Ptr<_24483adcc_Field>> _24492ec29_build_fields(jule::Slice<jule::Ptr<_244872e25_FieldDecl>>& _13422_decls) {
	jule::Slice<jule::Ptr<_24483adcc_Field>> _13513_fields = jule::Slice<jule::Ptr<_24483adcc_Field>>::alloc(0LL,_13422_decls.len());;
	{
		auto &expr = _13422_decls;
		auto it = expr.begin();
		_iter_begin_22952a950:;
		if (it != expr.end()) {
			jule::Ptr<_244872e25_FieldDecl> _13617_decl = *it;
			{
				_13513_fields = jule::alloc_for_append(_13513_fields,1);_13513_fields.__push(_24492e982_build_field(_13617_decl));;
			}
			_iter_next_22952a950:;
			++it;
			goto _iter_begin_22952a950;
		}
		_iter_end_22952a950:;
	};
	return _13513_fields;
}



inline jule::Ptr<_244848912_Struct> _24492eec1_build_struct(jule::Ptr<_244873783_StructDecl> _14221_decl) {
	return jule::new_ptr<_244848912_Struct>(_244848912_Struct{._field_token=_14221_decl.get()._field_token, ._field_ident=_14221_decl.get()._field_ident, ._field_fields=_24492ec29_build_fields(_14221_decl.get()._field_fields), ._field_public=_14221_decl.get()._field_public, ._field_cpp_linked=_14221_decl.get()._field_cpp_linked, ._field_directives=_14221_decl.get()._field_directives, ._field_generics=_14221_decl.get()._field_generics, });
}



inline jule::Ptr<_2449254c2_Param> _244930268_build_param(jule::Ptr<_244868bc9_ParamDecl> _15420_decl) {
	return jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_token=_15420_decl.get()._field_token, ._field_mutable=_15420_decl.get()._field_mutable, ._field_variadic=_15420_decl.get()._field_variadic, ._field_reference=_15420_decl.get()._field_reference, ._field_kind=_24492e0d0_build_type(_15420_decl.get()._field_kind), ._field_ident=_15420_decl.get()._field_ident});
}



inline jule::Slice<jule::Ptr<_2449254c2_Param>> _2449305dc_build_params(jule::Slice<jule::Ptr<_244868bc9_ParamDecl>>& _16522_decls) {
	jule::Slice<jule::Ptr<_2449254c2_Param>> _16613_params = jule::Slice<jule::Ptr<_2449254c2_Param>>::alloc(0LL,_16522_decls.len());;
	{
		auto &expr = _16522_decls;
		auto it = expr.begin();
		_iter_begin_22952d7dd:;
		if (it != expr.end()) {
			jule::Ptr<_244868bc9_ParamDecl> _16717_decl = *it;
			{
				_16613_params = jule::alloc_for_append(_16613_params,1);_16613_params.__push(_244930268_build_param(_16717_decl));;
			}
			_iter_next_22952d7dd:;
			++it;
			goto _iter_begin_22952d7dd;
		}
		_iter_end_22952d7dd:;
	};
	return _16613_params;
}



inline jule::Ptr<_244924d0c_RetType> _244930884_build_ret_type(jule::Ptr<_24485b2e8_RetTypeDecl> _17323_decl) {
	if (((_17323_decl.get()._field_idents == nullptr) && (_17323_decl.get()._field_kind == nullptr))) {
		return nullptr;
	};
	return jule::new_ptr<_244924d0c_RetType>(_244924d0c_RetType{._field_kind=_24492e0d0_build_type(_17323_decl.get()._field_kind), ._field_idents=_17323_decl.get()._field_idents});
}



inline jule::Ptr<_244926d0e_Fn> _244930b2b_build_fn(jule::Ptr<_244869ee9_FnDecl> _18317_decl) {
	return jule::new_ptr<_244926d0e_Fn>(_244926d0e_Fn{._field_token=_18317_decl.get()._field_token, ._field_global=_18317_decl.get()._field_global, ._field_unsafety=_18317_decl.get()._field_unsafety, ._field_public=_18317_decl.get()._field_public, ._field_cpp_linked=_18317_decl.get()._field_cpp_linked, ._field_statically=_18317_decl.get()._field_statically, ._field_exceptional=_18317_decl.get()._field_exceptional, ._field_ident=_18317_decl.get()._field_ident, ._field_directives=_18317_decl.get()._field_directives, ._field_scope=_18317_decl.get()._field_scope, ._field_generics=_18317_decl.get()._field_generics, ._field_result=_244930884_build_ret_type(_18317_decl.get()._field_result), ._field_params=_2449305dc_build_params(_18317_decl.get()._field_params), });
}



inline jule::Slice<jule::Ptr<_244926d0e_Fn>> _244930dc3_build_methods(jule::Slice<jule::Ptr<_244869ee9_FnDecl>>& _20123_decls) {
	jule::Slice<jule::Ptr<_244926d0e_Fn>> _20213_methods = jule::Slice<jule::Ptr<_244926d0e_Fn>>::alloc(0LL,_20123_decls.len());;
	{
		auto &expr = _20123_decls;
		auto it = expr.begin();
		_iter_begin_229532281:;
		if (it != expr.end()) {
			jule::Ptr<_244869ee9_FnDecl> _20317_decl = *it;
			{
				_20213_methods = jule::alloc_for_append(_20213_methods,1);_20213_methods.__push(_244930b2b_build_fn(_20317_decl));;
			}
			_iter_next_229532281:;
			++it;
			goto _iter_begin_229532281;
		}
		_iter_end_229532281:;
	};
	return _20213_methods;
}



inline jule::Ptr<_24547ec51_Trait> _24493116a_build_trait(jule::Ptr<_244873d8d_TraitDecl> _20920_decl) {
	return jule::new_ptr<_24547ec51_Trait>(_24547ec51_Trait{._field_token=_20920_decl.get()._field_token, ._field_ident=_20920_decl.get()._field_ident, ._field_public=_20920_decl.get()._field_public, ._field_methods=_244930dc3_build_methods(_20920_decl.get()._field_methods), });
}



inline jule::Ptr<_245481417_EnumItem> _244931412_build_enum_item(jule::Ptr<_244871198_EnumItemDecl> _21824_decl) {
	return jule::new_ptr<_245481417_EnumItem>(_245481417_EnumItem{._field_token=_21824_decl.get()._field_token, ._field_ident=_21824_decl.get()._field_ident, ._field_value=_24492e3bb_build_expr(_21824_decl.get()._field_expr)});
}



inline jule::Slice<jule::Ptr<_245481417_EnumItem>> _2449316a9_build_enum_items(jule::Slice<jule::Ptr<_244871198_EnumItemDecl>>& _22626_decls) {
	jule::Slice<jule::Ptr<_245481417_EnumItem>> _22713_items = jule::Slice<jule::Ptr<_245481417_EnumItem>>::alloc(0LL,_22626_decls.len());;
	{
		auto &expr = _22626_decls;
		auto it = expr.begin();
		_iter_begin_229534816:;
		if (it != expr.end()) {
			jule::Ptr<_244871198_EnumItemDecl> _22817_decl = *it;
			{
				_22713_items = jule::alloc_for_append(_22713_items,1);_22713_items.__push(_244931412_build_enum_item(_22817_decl));;
			}
			_iter_next_229534816:;
			++it;
			goto _iter_begin_229534816;
		}
		_iter_end_229534816:;
	};
	return _22713_items;
}



inline jule::Ptr<_245481e0c_Enum> _244931951_build_enum(jule::Ptr<_244871bc1_EnumDecl> _23419_decl) {
	return jule::new_ptr<_245481e0c_Enum>(_245481e0c_Enum{._field_token=_23419_decl.get()._field_token, ._field_public=_23419_decl.get()._field_public, ._field_ident=_23419_decl.get()._field_ident, ._field_kind=_24492e0d0_build_type(_23419_decl.get()._field_kind), ._field_items=_2449316a9_build_enum_items(_23419_decl.get()._field_items)});
}



inline jule::Ptr<_245482e41_TypeEnumItem> _244931da2_build_type_enum_item(jule::Ptr<_2448726c7_TypeEnumItemDecl> _24429_decl) {
	return jule::new_ptr<_245482e41_TypeEnumItem>(_245482e41_TypeEnumItem{._field_token=_24429_decl.get()._field_token, ._field_ident=_24429_decl.get()._field_ident, ._field_kind=_24492e0d0_build_type(_24429_decl.get()._field_kind)});
}



inline jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>> _244932149_build_type_enum_items(jule::Slice<jule::Ptr<_2448726c7_TypeEnumItemDecl>>& _25231_decls) {
	jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>> _25313_items = jule::Slice<jule::Ptr<_245482e41_TypeEnumItem>>::alloc(0LL,_25231_decls.len());;
	{
		auto &expr = _25231_decls;
		auto it = expr.begin();
		_iter_begin_2295370dd:;
		if (it != expr.end()) {
			jule::Ptr<_2448726c7_TypeEnumItemDecl> _25417_decl = *it;
			{
				_25313_items = jule::alloc_for_append(_25313_items,1);_25313_items.__push(_244931da2_build_type_enum_item(_25417_decl));;
			}
			_iter_next_2295370dd:;
			++it;
			goto _iter_begin_2295370dd;
		}
		_iter_end_2295370dd:;
	};
	return _25313_items;
}



inline jule::Ptr<_245483507_TypeEnum> _2449323e1_build_type_enum(jule::Ptr<_2448728c5_TypeEnumDecl> _26024_decl) {
	return jule::new_ptr<_245483507_TypeEnum>(_245483507_TypeEnum{._field_token=_26024_decl.get()._field_token, ._field_public=_26024_decl.get()._field_public, ._field_ident=_26024_decl.get()._field_ident, ._field_items=_244932149_build_type_enum_items(_26024_decl.get()._field_items)});
}



inline jule::Ptr<_24556cc1d_Var> _244932688_build_var(jule::Ptr<_24486aec8_VarDecl> _26918_decl) {
	return jule::new_ptr<_24556cc1d_Var>(_24556cc1d_Var{._field_token=_26918_decl.get()._field_token, ._field_ident=_26918_decl.get()._field_ident, ._field_cpp_linked=_26918_decl.get()._field_cpp_linked, ._field_constant=_26918_decl.get()._field_constant, ._field_mutable=_26918_decl.get()._field_mutable, ._field_public=_26918_decl.get()._field_public, ._field_statically=_26918_decl.get()._field_statically, ._field_reference=_26918_decl.get()._field_reference, ._field_kind=_24492e0d0_build_type(_26918_decl.get()._field_kind), ._field_value=_24492e3bb_build_expr(_26918_decl.get()._field_expr), ._field_refers=static__24492cba0_new(), ._field_directives=_26918_decl.get()._field_directives, });
}



inline jule::Slice<jule::Ptr<_24556cc1d_Var>> _244932930_build_vars(jule::Slice<jule::Ptr<_24486aec8_VarDecl>> _28619_decls) {
	jule::Slice<jule::Ptr<_24556cc1d_Var>> _28713_vars = jule::Slice<jule::Ptr<_24556cc1d_Var>>::alloc(0LL,_28619_decls.len());;
	{
		auto &expr = _28619_decls;
		auto it = expr.begin();
		_iter_begin_22953a399:;
		if (it != expr.end()) {
			jule::Ptr<_24486aec8_VarDecl> _28817_decl = *it;
			{
				_28713_vars = jule::alloc_for_append(_28713_vars,1);_28713_vars.__push(_244932688_build_var(_28817_decl));;
			}
			_iter_next_22953a399:;
			++it;
			goto _iter_begin_22953a399;
		}
		_iter_end_22953a399:;
	};
	return _28713_vars;
}



inline jule::Ptr<_24551aa45_Impl> _244932bc7_build_impl(jule::Ptr<_244874498_Impl> _29419_decl) {
	return jule::new_ptr<_24551aa45_Impl>(_24551aa45_Impl{._field_base=_29419_decl.get()._field_base, ._field_dest=_29419_decl.get()._field_dest, ._field_methods=_244930dc3_build_methods(_29419_decl.get()._field_methods), ._field_statics=_244932930_build_vars(_29419_decl.get()._field_statics)});
}



inline jule::Bool _2454e2b1b_match_constraint(jule::Str& _13522_c, jule::Ptr<_2455e1027_TypeKind>& _13535_g) {
	{
		auto &_match_expr{ _13522_c };
		
		if (_match_expr == jule::Str("signed", 6)) {
			_case_begin_22959b32d:;
			{
				jule::Ptr<_2455e59ee_Prim> _13813_prim = _2455e3139_prim(_13535_g.ptr());;
				if ((_13813_prim == nullptr)) {
					return false;
				};
				return _245528ea4_is_sig_num(_13813_prim.get()._field_kind);
			}
		}
		else if (_match_expr == jule::Str("unsigned", 8)) {
			_case_begin_22959b394:;
			{
				jule::Ptr<_2455e59ee_Prim> _14413_prim = _2455e3139_prim(_13535_g.ptr());;
				if ((_14413_prim == nullptr)) {
					return false;
				};
				return _24552839e_is_unsig_int(_14413_prim.get()._field_kind);
			}
		}
		else if (_match_expr == jule::Str("float", 5)) {
			_case_begin_22959b4c6:;
			{
				jule::Ptr<_2455e59ee_Prim> _15013_prim = _2455e3139_prim(_13535_g.ptr());;
				if ((_15013_prim == nullptr)) {
					return false;
				};
				return _245528965_is_float(_15013_prim.get()._field_kind);
			}
		}
		else if (_match_expr == jule::Str("numeric", 7)) {
			_case_begin_22959b53c:;
			{
				jule::Ptr<_2455e59ee_Prim> _15613_prim = _2455e3139_prim(_13535_g.ptr());;
				if ((_15613_prim == nullptr)) {
					return false;
				};
				return _245528c0c_is_num(_15613_prim.get()._field_kind);
			}
		}
		else if (_match_expr == jule::Str("mutable", 7)) {
			_case_begin_22959b5a3:;
			{
				return _2455e2424_mutable(_13535_g.ptr());
			}
		}
		else if (_match_expr == jule::Str("immutable", 9)) {
			_case_begin_22959b619:;
			{
				return (!(_2455e2424_mutable(_13535_g.ptr())));
			}
		}
		else if (_match_expr == jule::Str("comparable", 10)) {
			_case_begin_22959b680:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("ordered", 7)) {
			_case_begin_22959b6e6:;
			{
				jule::Ptr<_2455e59ee_Prim> _16813_prim = _2455e3139_prim(_13535_g.ptr());;
				if ((_16813_prim != nullptr)) {
					return (_245528c0c_is_num(_16813_prim.get()._field_kind) || _2455e8c33_is_str(_16813_prim.ptr()));
				};
				if ((_2455e3612_ptr(_13535_g.ptr()) != nullptr)) {
					return true;
				};
				jule::Ptr<_244874c5c_StructIns> _17513_s = _2455e458b_strct(_13535_g.ptr());;
				if ((_17513_s != nullptr)) {
					return ((((_17513_s.get()._field_operators._field_gt != nullptr) && (_17513_s.get()._field_operators._field_gt_eq != nullptr)) && (_17513_s.get()._field_operators._field_lt != nullptr)) && (_17513_s.get()._field_operators._field_lt_eq != nullptr));
				};
				jule::Ptr<_245481e0c_Enum> _18213_enm = _2455e3876_enm(_13535_g.ptr());;
				if ((_18213_enm != nullptr)) {
					return _245528c0c_is_num(_2455e1423_to_str(_18213_enm.get()._field_kind.get()._field_kind.ptr()));
				};
				return false;
			}
		}
		else {
			_case_begin_22959b053:;
			{
				return false;
			}
		}
		_match_end_22959ae98:;
	};
}



inline jule::Bool _2454e956d_is_builtin_constraint(jule::Str& _19227_ident) {
	{
		auto &expr = _24549bee3_BUILTIN_CONSTRAINTS;
		auto it = expr.begin();
		_iter_begin_2295a22ac:;
		if (it != expr.end()) {
			jule::Str &_19312_bc = *it;
			{
				if ((_19227_ident == _19312_bc)) {
					return true;
				};
			}
			_iter_next_2295a22ac:;
			++it;
			goto _iter_begin_2295a22ac;
		}
		_iter_end_2295a22ac:;
	};
	return false;
}



inline jule::Ptr<_245531066_ScopeChecker> _245503841_new_scope_checker_base(jule::Ptr<_24555100e_Sema>& _5932_s, jule::Ptr<_2449299b0_FnIns> _5946_owner) {
	return jule::new_ptr<_245531066_ScopeChecker>(_245531066_ScopeChecker{._field_s=_5932_s, ._field_owner=_5946_owner, ._field_table=jule::new_ptr<_2455b02e3_SymbolTable>(), });
}



inline jule::Ptr<_245531066_ScopeChecker> _2455043be_new_scope_checker(jule::Ptr<_24555100e_Sema>& _6727_s, jule::Ptr<_2449299b0_FnIns> _6741_owner) {
	jule::Ptr<_245531066_ScopeChecker> _6813_base = _245503841_new_scope_checker_base(_6727_s,_6741_owner);;
	_6813_base.get()._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_24552ecce_ScopeLabel>>>(nullptr);
	_6813_base.get()._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_245530252_ScopeGoto>>>(nullptr);
	return _6813_base;
}



inline jule::Ptr<_24552ecce_ScopeLabel> _24550527c_find_label_parent(jule::Str _7722_ident, jule::Ptr<_245531066_ScopeChecker> _7738_scope) {
	jule::Ptr<_24552ecce_ScopeLabel> _7813_label = _245534a09_find_label_scope(_7738_scope, _7722_ident);;
	while ((_7813_label == nullptr)) {
		{
			if (((_7738_scope.get()._field_parent == nullptr) || (_7738_scope.get()._field_owner != nullptr))) {
				return nullptr;
			};
			_7738_scope=_7738_scope.get()._field_parent;
			_7813_label=_245534a09_find_label_scope(_7738_scope, _7722_ident);
		}
	_iter_next_2295ba935:;
	}
	_iter_end_2295ba935:;;
	return _7813_label;
}



inline jule::Bool _2454e93c5_model_is_goto_scope(jule::Any _9124_model, jule::Ptr<_24552937d_Scope>& _9137_sc) {
	{
		auto &_match_expr{ _9124_model };
		
		if (_match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
			_case_begin_2295bc827:;
			{
				jule::Ptr<_24492070e_FnCallExprModel> _9413_fcem = _9124_model.operator jule::Ptr<_24492070e_FnCallExprModel>();;
				if ((_9413_fcem.get()._field_except == _9137_sc)) {
					return true;
				};
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_2295bc89e:;
			{
				jule::Ptr<_2455b5051_Data> _9913_d = _9124_model.operator jule::Ptr<_2455b5051_Data>();;
				return _2454e93c5_model_is_goto_scope(jule::Any(_9913_d.get()._field_model),_9137_sc);
			}
		}
		_match_end_2295bc717:;
	};
	return false;
}



inline jule::Bool _24550624a_stmt_is_goto_scope(jule::Any& _10524_stmt, jule::Ptr<_24552937d_Scope>& _10537_sc) {
	{
		auto &_match_expr{ _10524_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_24552937d_Scope>>()) {
			_case_begin_2295be9e4:;
			{
				return (_10524_stmt.operator jule::Ptr<_24552937d_Scope>() == _10537_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a24c_InfIter>>()) {
			_case_begin_2295bea5a:;
			{
				return (_10524_stmt.operator jule::Ptr<_24552a24c_InfIter>().get()._field_scope == _10537_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552b0a5_RangeIter>>()) {
			_case_begin_2295beac1:;
			{
				jule::Ptr<_24552b0a5_RangeIter> _11213_it = _10524_stmt.operator jule::Ptr<_24552b0a5_RangeIter>();;
				return ((_11213_it.get()._field_scope == _10537_sc) || _2454e93c5_model_is_goto_scope(jule::Any(_11213_it.get()._field_expr.get()._field_model),_10537_sc));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552a6c0_WhileIter>>()) {
			_case_begin_2295bebae:;
			{
				jule::Ptr<_24552a6c0_WhileIter> _11513_it = _10524_stmt.operator jule::Ptr<_24552a6c0_WhileIter>();;
				return (((_11513_it.get()._field_scope == _10537_sc) || _2454e93c5_model_is_goto_scope(jule::Any(_11513_it.get()._field_expr),_10537_sc)) || _2454e93c5_model_is_goto_scope(jule::Any(_11513_it.get()._field_next),_10537_sc));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24552d151_Match>>()) {
			_case_begin_2295bec36:;
			{
				jule::Ptr<_24552d151_Match> _12013_m = _10524_stmt.operator jule::Ptr<_24552d151_Match>();;
				{
					auto &expr = _12013_m.get()._field_cases;
					auto it = expr.begin();
					_iter_begin_2295c380b:;
					if (it != expr.end()) {
						jule::Ptr<_24552db9b_Case> &_12116_c = *it;
						{
							if ((_12116_c.get()._field_scope == _10537_sc)) {
								return true;
							};
							{
								auto &expr = _12116_c.get()._field_exprs;
								auto it = expr.begin();
								_iter_begin_2295c47c9:;
								if (it != expr.end()) {
									jule::Ptr<_2455b5051_Data> &_12520_expr = *it;
									{
										if (_2454e93c5_model_is_goto_scope(jule::Any(_12520_expr.get()._field_model),_10537_sc)) {
											return true;
										};
									}
									_iter_next_2295c47c9:;
									++it;
									goto _iter_begin_2295c47c9;
								}
								_iter_end_2295c47c9:;
							};
						}
						_iter_next_2295c380b:;
						++it;
						goto _iter_begin_2295c380b;
					}
					_iter_end_2295c380b:;
				};
				return ((_12013_m.get()._field_default != nullptr) && (_12013_m.get()._field_default.get()._field_scope == _10537_sc));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_245529e61_Conditional>>()) {
			_case_begin_2295becad:;
			{
				jule::Ptr<_245529e61_Conditional> _13313_c = _10524_stmt.operator jule::Ptr<_245529e61_Conditional>();;
				{
					auto &expr = _13313_c.get()._field_elifs;
					auto it = expr.begin();
					_iter_begin_2295c5db3:;
					if (it != expr.end()) {
						jule::Ptr<_245529779_If> &_13416_elif = *it;
						{
							if (((_13416_elif.get()._field_scope == _10537_sc) || _2454e93c5_model_is_goto_scope(jule::Any(_13416_elif.get()._field_expr),_10537_sc))) {
								return true;
							};
						}
						_iter_next_2295c5db3:;
						++it;
						goto _iter_begin_2295c5db3;
					}
					_iter_end_2295c5db3:;
				};
				return ((_13313_c.get()._field_default != nullptr) && (_13313_c.get()._field_default.get()._field_scope == _10537_sc));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_2295bed35:;
			{
				jule::Ptr<_2455b5051_Data> _14113_d = _10524_stmt.operator jule::Ptr<_2455b5051_Data>();;
				return _2454e93c5_model_is_goto_scope(jule::Any(_14113_d.get()._field_model),_10537_sc);
			}
		}
		else {
			_case_begin_2295bcccd:;
			{
				return false;
			}
		}
		_match_end_2295bcc78:;
	};
}



inline jule::I32 _245507108_count_match_type(jule::Ptr<_24552d151_Match>& _14822_m, jule::Ptr<_2455e1027_TypeKind>& _14834_t) {
	jule::I32 _14913_n = 0LL;;
	jule::Str _1509_kind = _2455e1423_to_str(_14834_t.ptr());;
	_julec_label_loop:;
	{
		auto &expr = _14822_m.get()._field_cases;
		auto it = expr.begin();
		_iter_begin_2295c8dd8:;
		if (it != expr.end()) {
			jule::Ptr<_24552db9b_Case> &_15212_c = *it;
			{
				if ((_15212_c == nullptr)) {
					goto _iter_next_2295c8dd8;
				};
				{
					auto &expr = _15212_c.get()._field_exprs;
					auto it = expr.begin();
					_iter_begin_2295c9779:;
					if (it != expr.end()) {
						jule::Ptr<_2455b5051_Data> &_15716_expr = *it;
						{
							if ((_15716_expr == nullptr)) {
								goto _iter_end_2295c8dd8;
							};
							if ((_1509_kind == _2455e1423_to_str(_15716_expr.get()._field_model.operator jule::Ptr<_2455e1027_TypeKind>().ptr()))) {
								(_14913_n)++;
							};
						}
						_iter_next_2295c9779:;
						++it;
						goto _iter_begin_2295c9779;
					}
					_iter_end_2295c9779:;
				};
			}
			_iter_next_2295c8dd8:;
			++it;
			goto _iter_begin_2295c8dd8;
		}
		_iter_end_2295c8dd8:;
	};
	return _14913_n;
}



inline jule::Slice<jule::Ptr<_2455b5051_Data>> _245515138_get_datas_from_tuple_data(jule::Ptr<_2455b5051_Data>& _17235_d) {
	if ((_2455e4cc8_tup(_17235_d.get()._field_kind.ptr()) != nullptr)) {
		{
			auto &_match_expr{ _17235_d.get()._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_244922436_TupleExprModel>>()) {
				_case_begin_2295cd9c0:;
				{
					return _17235_d.get()._field_model.operator jule::Ptr<_244922436_TupleExprModel>().get()._field_datas;
				}
			}
			else {
				_case_begin_2295cb3c4:;
				{
					jule::Ptr<_2455ea76d_Tuple> _17821_t = _2455e4cc8_tup(_17235_d.get()._field_kind.ptr());;
					jule::Slice<jule::Ptr<_2455b5051_Data>> _17921_r = jule::Slice<jule::Ptr<_2455b5051_Data>>::alloc(0LL,_17821_t.get()._field_types.len());;
					{
						auto &expr = _17821_t.get()._field_types;
						auto it = expr.begin();
						_iter_begin_2295cc8e2:;
						if (it != expr.end()) {
							jule::Ptr<_2455e1027_TypeKind> _18025_kind = *it;
							{
								_17921_r = jule::alloc_for_append(_17921_r,1);_17921_r.__push(jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=_18025_kind, ._field_mutable=true, }));;
							}
							_iter_next_2295cc8e2:;
							++it;
							goto _iter_begin_2295cc8e2;
						}
						_iter_end_2295cc8e2:;
					};
					return _17921_r;
				}
			}
			_match_end_2295cb24d:;
		};
	} else {
		return jule::Slice<jule::Ptr<_2455b5051_Data>>::make({_17235_d});
	};
}



inline jule::Slice<jule::Any> _245518081_get_expr_models(jule::Any& _19325_m) {
	{
		auto &_match_expr{ _19325_m };
		
		if (_match_expr.type_is<jule::Ptr<_24485d383_TupleExpr>>()) {
			_case_begin_2295cddee:;
			{
				jule::Ptr<_24485d383_TupleExpr> _19617_tup = _19325_m.operator jule::Ptr<_24485d383_TupleExpr>();;
				jule::Slice<jule::Any> _19717_models = jule::Slice<jule::Any>::alloc(0LL,_19617_tup.get()._field_expr.len());;
				{
					auto &expr = _19617_tup.get()._field_expr;
					auto it = expr.begin();
					_iter_begin_2295d0483:;
					if (it != expr.end()) {
						jule::Ptr<_24485c706_Expr> _19821_expr = *it;
						{
							_19717_models = jule::alloc_for_append(_19717_models,1);_19717_models.__push(_19821_expr.get()._field_kind);;
						}
						_iter_next_2295d0483:;
						++it;
						goto _iter_begin_2295d0483;
					}
					_iter_end_2295d0483:;
				};
				return _19717_models;
			}
		}
		else {
			_case_begin_2295cb4c3:;
			{
				return jule::Slice<jule::Any>::make({_19325_m});
			}
		}
		_match_end_2295cdc89:;
	};
}



inline jule::Bool _245518aba_check_mut(jule::Ptr<_24555100e_Sema>& _20719_s, jule::Ptr<_2455b5051_Data>& _20730_left, jule::Ptr<_2455b5051_Data> _20747_right, jule::Ptr<_2431e4523_Token> _20761_op) {
	jule::Bool _20775_ok = jule::Bool();
	{
		
		if ((!(_20730_left.get()._field_mutable))) {
			_case_begin_2295d1c15:;
			{
				_245553bc1_push_err(_20719_s.ptr(), _20761_op,jule::Str("cannot assign to immutable storage", 34),jule::Slice<jule::Any>());
				_20775_ok = false;
				return _20775_ok;
			}
		}
		else if ((((_20747_right != nullptr) && (!(_20747_right.get()._field_mutable))) && _2455e2424_mutable(_20747_right.get()._field_kind.ptr()))) {
			_case_begin_2295d1d25:;
			{
				if (((_20761_op.get()._field_kind != jule::Str("=", 1)) && (_2455e458b_strct(_20747_right.get()._field_kind.ptr()) != nullptr))) {
					_20775_ok = true;
					return _20775_ok;
				};
				_245553bc1_push_err(_20719_s.ptr(), _20761_op,jule::Str("immutable data cannot assign to mutable storage because of @ type which is mutable", 82),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_20747_right.get()._field_kind.ptr()))}));
				_20775_ok = false;
				return _20775_ok;
			}
		}
		else {
			_case_begin_2295d15d8:;
			{
				_20775_ok = true;
				return _20775_ok;
			}
		}
		_match_end_2295d0b9d:;
	};
}



inline jule::Bool _245519648_check_assign(jule::Ptr<_24555100e_Sema>& _22622_s, jule::Ptr<_2455b5051_Data>& _22637_left, jule::Ptr<_2455b5051_Data> _22654_right, jule::Ptr<_2431e4523_Token> _22668_op) {
	jule::Bool _22682_ok = jule::Bool();
	jule::Ptr<_2449299b0_FnIns> _2279_f = _2455e4327_fnc(_22637_left.get()._field_kind.ptr());;
	if ((((_2279_f != nullptr) && (_2279_f.get()._field_decl != nullptr)) && _2279_f.get()._field_decl.get()._field_global)) {
		_245553bc1_push_err(_22622_s.ptr(), _22668_op,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>());
		_22682_ok = false;
		return _22682_ok;
	};
	{
		
		if (_2455b5914_is_const(_22637_left.ptr())) {
			_case_begin_2295d6c2b:;
			{
				_245553bc1_push_err(_22622_s.ptr(), _22668_op,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>());
				_245553ee0_push_suggestion(_22622_s.ptr(), jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>());
				_22682_ok = false;
				return _22682_ok;
			}
		}
		else if ((!(_22637_left.get()._field_lvalue))) {
			_case_begin_2295d6d08:;
			{
				_245553bc1_push_err(_22622_s.ptr(), _22668_op,jule::Str("invalid expression: expected lvalue for assignment", 50),jule::Slice<jule::Any>());
				_22682_ok = false;
				return _22682_ok;
			}
		}
		else if ((!(_245518aba_check_mut(_22622_s,_22637_left,_22654_right,_22668_op)))) {
			_case_begin_2295d6d80:;
			{
				_22682_ok = false;
				return _22682_ok;
			}
		}
		else {
			_case_begin_2295d65cc:;
			{
				_22682_ok = true;
				return _22682_ok;
			}
		}
		_match_end_2295d6478:;
	};
}



inline jule::Bool _245514cb4_is_valid_ast_st_for_next_st(jule::Any& _24837_n) {
	{
		auto &_match_expr{ _24837_n };
		
		if (_match_expr.type_is<jule::Ptr<_244866e5d_AssignSt>>()) {
			_case_begin_2295d6e3a:;
			{
				return (!(_24837_n.operator jule::Ptr<_244866e5d_AssignSt>().get()._field_declarative));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24485c706_Expr>>()) {
			_case_begin_2295d6ea1:;
			{
				return true;
			}
		}
		else {
			_case_begin_2295d8722:;
			{
				return false;
			}
		}
		_match_end_2295d8a0d:;
	};
}



inline jule::Bool _2454b0aa6_is_valid_st_for_next_st(jule::Any& _25929_st) {
	{
		auto &_match_expr{ _25929_st };
		
		if (_match_expr.type_is<jule::Ptr<_24552c2d7_Postfix>>() || _match_expr.type_is<jule::Ptr<_24552c75a_Assign>>() || _match_expr.type_is<jule::Ptr<_24552cb12_MultiAssign>>()) {
			_case_begin_2295d9877:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_2295d98dd:;
			{
				{
					auto &_match_expr{ _25929_st.operator jule::Ptr<_2455b5051_Data>().get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_24492070e_FnCallExprModel>>()) {
						_case_begin_2295dacc9:;
						{
							return true;
						}
					}
					else {
						_case_begin_2295dac63:;
						{
							return false;
						}
					}
					_match_end_2295da9ee:;
				};
			}
		}
		else {
			_case_begin_2295d928e:;
			{
				return false;
			}
		}
		_match_end_2295d91a1:;
	};
}



inline jule::Bool _245503104_stmt_is_def(jule::Any& _27717_st) {
	{
		auto &_match_expr{ _27717_st };
		
		if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_2295db967:;
			{
				return true;
			}
		}
		else {
			_case_begin_2295da900:;
			{
				return false;
			}
		}
		_match_end_2295da89a:;
	};
}



inline jule::Ptr<_24556cc1d_Var> _24554594e_find_var_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _4629_files, jule::Str _4652_ident, jule::Bool _4664_cpp_linked) {
	{
		auto &expr = _4629_files;
		auto it = expr.begin();
		_iter_begin_22974bb0a:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _4717_f = *it;
			{
				jule::Ptr<_24556cc1d_Var> _4817_v = _2455b0ec5_find_var(_4717_f.ptr(), _4652_ident,_4664_cpp_linked);;
				if ((_4817_v != nullptr)) {
					return _4817_v;
				};
			}
			_iter_next_22974bb0a:;
			++it;
			goto _iter_begin_22974bb0a;
		}
		_iter_end_22974bb0a:;
	};
	return nullptr;
}



inline jule::Ptr<_2455e0334_TypeAlias> _245545da0_find_type_alias_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _5836_files, jule::Str _5859_ident, jule::Bool _5871_cpp_linked) {
	{
		auto &expr = _5836_files;
		auto it = expr.begin();
		_iter_begin_22974d1b1:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _5917_f = *it;
			{
				jule::Ptr<_2455e0334_TypeAlias> _6017_ta = _2455b137c_find_type_alias(_5917_f.ptr(), _5859_ident,_5871_cpp_linked);;
				if ((_6017_ta != nullptr)) {
					return _6017_ta;
				};
			}
			_iter_next_22974d1b1:;
			++it;
			goto _iter_begin_22974d1b1;
		}
		_iter_end_22974d1b1:;
	};
	return nullptr;
}



inline jule::Ptr<_244848912_Struct> _24554629b_find_struct_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _7032_files, jule::Str _7055_ident, jule::Bool _7067_cpp_linked) {
	{
		auto &expr = _7032_files;
		auto it = expr.begin();
		_iter_begin_22974e756:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _7117_f = *it;
			{
				jule::Ptr<_244848912_Struct> _7217_s = _2455b1734_find_struct(_7117_f.ptr(), _7055_ident,_7067_cpp_linked);;
				if ((_7217_s != nullptr)) {
					return _7217_s;
				};
			}
			_iter_next_22974e756:;
			++it;
			goto _iter_begin_22974e756;
		}
		_iter_end_22974e756:;
	};
	return nullptr;
}



inline jule::Ptr<_244926d0e_Fn> _24554670d_find_fn_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _8228_files, jule::Str _8251_ident, jule::Bool _8263_cpp_linked) {
	{
		auto &expr = _8228_files;
		auto it = expr.begin();
		_iter_begin_229750ceb:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _8317_file = *it;
			{
				jule::Ptr<_244926d0e_Fn> _8417_f = _2455b1adb_find_fn(_8317_file.ptr(), _8251_ident,_8263_cpp_linked);;
				if ((_8417_f != nullptr)) {
					return _8417_f;
				};
			}
			_iter_next_229750ceb:;
			++it;
			goto _iter_begin_229750ceb;
		}
		_iter_end_229750ceb:;
	};
	return nullptr;
}



inline jule::Ptr<_24547ec51_Trait> _245546a1b_find_trait_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _9431_files, jule::Str _9454_ident) {
	{
		auto &expr = _9431_files;
		auto it = expr.begin();
		_iter_begin_2297513e5:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _9517_f = *it;
			{
				jule::Ptr<_24547ec51_Trait> _9617_t = _2455b1de9_find_trait(_9517_f.ptr(), _9454_ident);;
				if ((_9617_t != nullptr)) {
					return _9617_t;
				};
			}
			_iter_next_2297513e5:;
			++it;
			goto _iter_begin_2297513e5;
		}
		_iter_end_2297513e5:;
	};
	return nullptr;
}



inline jule::Ptr<_245481e0c_Enum> _245546d5c_find_enum_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _10630_files, jule::Str _10653_ident) {
	{
		auto &expr = _10630_files;
		auto it = expr.begin();
		_iter_begin_22975279d:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _10717_f = *it;
			{
				jule::Ptr<_245481e0c_Enum> _10817_e = _2455b2207_find_enum(_10717_f.ptr(), _10653_ident);;
				if ((_10817_e != nullptr)) {
					return _10817_e;
				};
			}
			_iter_next_22975279d:;
			++it;
			goto _iter_begin_22975279d;
		}
		_iter_end_22975279d:;
	};
	return nullptr;
}



inline jule::Ptr<_245483507_TypeEnum> _2455471c0_find_type_enum_in_package(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _11835_files, jule::Str _11858_ident) {
	{
		auto &expr = _11835_files;
		auto it = expr.begin();
		_iter_begin_229753b67:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _11917_f = *it;
			{
				jule::Ptr<_245483507_TypeEnum> _12017_e = _2455b2515_find_type_enum(_11917_f.ptr(), _11858_ident);;
				if ((_12017_e != nullptr)) {
					return _12017_e;
				};
			}
			_iter_next_229753b67:;
			++it;
			goto _iter_begin_229753b67;
		}
		_iter_end_229753b67:;
	};
	return nullptr;
}



inline jule::Bool _24554d3e6_is_std_package(jule::Str _35019_f, jule::Str _35027_p) {
	return _241ec93e7_has_prefix(_35019_f,_241e8b167_join(jule::Slice<jule::Str>::make({_242ddd4e7_PATH_STDLIB,_35027_p})));
}



inline jule::Bool _24554e150_is_valid_model_for_ref(jule::Any& _1232_m) {
	{
		auto &_match_expr{ _1232_m };
		
		if (_match_expr.type_is<jule::Ptr<_24556cc1d_Var>>()) {
			_case_begin_229765d77:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
			_case_begin_229765ddd:;
			{
				jule::Ptr<_244921996_StructSubIdentExprModel> _1717_model = _1232_m.operator jule::Ptr<_244921996_StructSubIdentExprModel>();;
				return _24554e150_is_valid_model_for_ref(_1717_model.get()._field_expr.get()._field_model);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921578_TraitSubIdentExprModel>>()) {
			_case_begin_229765e54:;
			{
				jule::Ptr<_244921578_TraitSubIdentExprModel> _2017_model = _1232_m.operator jule::Ptr<_244921578_TraitSubIdentExprModel>();;
				return _24554e150_is_valid_model_for_ref(_2017_model.get()._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24491ec6e_UnaryExprModel>>()) {
			_case_begin_22976610d:;
			{
				jule::Ptr<_24491ec6e_UnaryExprModel> _2317_unary = _1232_m.operator jule::Ptr<_24491ec6e_UnaryExprModel>();;
				if ((_2317_unary.get()._field_op.get()._field_kind != jule::Str("*", 1))) {
					return false;
				};
				if ((_2455e3612_ptr(_2317_unary.get()._field_expr.get()._field_kind.ptr()) != nullptr)) {
					return true;
				};
				if ((_2455e339d_sptr(_2317_unary.get()._field_expr.get()._field_kind.ptr()) == nullptr)) {
					return false;
				};
				return _24554e150_is_valid_model_for_ref(_2317_unary.get()._field_expr.get()._field_model);
			}
		}
		else {
			_case_begin_2297656b2:;
			{
				return false;
			}
		}
		_match_end_22976564b:;
	};
}



inline _242dbab89_Log _24554e5e5_compiler_err(jule::Ptr<_2431e4523_Token>& _4118_token, jule::Bool _4133_line, jule::Str _4145_fmt, jule::Slice<jule::Any> _4158_args) {
	_242dbab89_Log _4213_log = _242dbab89_Log{._field_kind=static_cast<jule::I32>(1LL), ._field_row=_4118_token.get()._field_row, ._field_column=_4118_token.get()._field_column, ._field_path=_4118_token.get()._field_file.get()._field_path, ._field_text=_242dbb0c9_logf(_4145_fmt,jule::Any(_4158_args)), };;
	if (_4133_line) {
		_4213_log._field_line=_2431eaa8a_get_row(_4118_token.get()._field_file.ptr(), _4118_token.get()._field_row);
	};
	return _4213_log;
}



inline jule::Bool _24554e936_imp_is_lookupable(jule::Ptr<_245547db3_ImportInfo>& _5523_i, jule::Str _5539_ident) {
	if (_5523_i.get()._field_cpp_linked) {
		return false;
	};
	if ((!(_5523_i.get()._field_import_all))) {
		if ((_5523_i.get()._field_selected.len() > 0LL)) {
			return _24554a789_exist_ident(_5523_i.ptr(), _5539_ident);
		};
	};
	return _5523_i.get()._field_import_all;
}



inline void _24554ec33_append_ret_vars(jule::Slice<jule::Ptr<_24556cc1d_Var>>& _6825_dest, jule::Ptr<_2449299b0_FnIns>& _6844_f) {
	if ((_244927271_is_void(_6844_f.get()._field_decl.ptr()) || (_6844_f.get()._field_result == nullptr))) {
		return;;
	};
	jule::Slice<jule::Ptr<_2455e1027_TypeKind>> _7313_types = _24492aad2_types(_6844_f.ptr());;
	{
		auto &expr = _6844_f.get()._field_decl.get()._field_result.get()._field_idents;
		auto it = expr.begin();
		_iter_begin_22976e798:;
		if (it != expr.end()) {
			jule::I32 _7410_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _7417_ident = *it;
			{
				if ((_2431e6cb7_is_ignore_ident(_7417_ident.get()._field_kind) || _2431e705e_is_anon_ident(_7417_ident.get()._field_kind))) {
					goto _iter_next_22976e798;
				};
				_6825_dest = jule::alloc_for_append(_6825_dest,1);_6825_dest.__push(jule::new_ptr<_24556cc1d_Var>(_24556cc1d_Var{._field_scope=_6844_f.get()._field_scope, ._field_token=_7417_ident, ._field_ident=_7417_ident.get()._field_kind, ._field_mutable=true, ._field_used=true, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_7313_types[_7410_i]}), ._field_value=jule::new_ptr<_2455b60c9_Value>(_2455b60c9_Value{._field_data=jule::new_ptr<_2455b5051_Data>()}), }));;
			}
			_iter_next_22976e798:;
			++it;
			_7410_i++;
			goto _iter_begin_22976e798;
		}
		_iter_end_22976e798:;
	};
}



inline void _24554eedb_append_param_vars(jule::Slice<jule::Ptr<_24556cc1d_Var>>& _9427_dest, jule::Ptr<_2449299b0_FnIns>& _9446_f) {
	if ((_9446_f.get()._field_params.len() == 0LL)) {
		return;;
	};
	{
		auto &expr = _9446_f.get()._field_params;
		auto it = expr.begin();
		_iter_begin_229770e2b:;
		if (it != expr.end()) {
			jule::Ptr<_244928ae1_ParamIns> _9917_p = *it;
			{
				if ((_2431e6cb7_is_ignore_ident(_9917_p.get()._field_decl.get()._field_ident) || _2431e705e_is_anon_ident(_9917_p.get()._field_decl.get()._field_ident))) {
					goto _iter_next_229770e2b;
				};
				jule::Ptr<_24556cc1d_Var> _10417_v = jule::new_ptr<_24556cc1d_Var>(_24556cc1d_Var{._field_scope=_9446_f.get()._field_scope, ._field_token=_9917_p.get()._field_decl.get()._field_token, ._field_ident=_9917_p.get()._field_decl.get()._field_ident, ._field_mutable=_9917_p.get()._field_decl.get()._field_mutable, ._field_used=true, ._field_reference=_9917_p.get()._field_decl.get()._field_reference, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(), ._field_value=jule::new_ptr<_2455b60c9_Value>(_2455b60c9_Value{._field_data=jule::new_ptr<_2455b5051_Data>()}), });;
				{
					
					if (_244925aee_is_self(_9917_p.get()._field_decl.ptr())) {
						_case_begin_229774bee:;
						{
							_10417_v.get()._field_kind.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_variadic=false, ._field_kind=jule::Trait<_2455e0ae8_Kind>(_9446_f.get()._field_owner, 0)});
							_10417_v.get()._field_reference=(!(_244925d63_is_ref(_9917_p.get()._field_decl.ptr())));
							if (_244925d63_is_ref(_9917_p.get()._field_decl.ptr())) {
								_10417_v.get()._field_ident=_10417_v.get()._field_ident.slice(1LL);
								_10417_v.get()._field_kind.get()._field_kind.get()._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9283_Sptr>(_2455e9283_Sptr{._field_elem=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_cpp_ident=_10417_v.get()._field_kind.get()._field_kind.get()._field_cpp_ident, ._field_kind=_10417_v.get()._field_kind.get()._field_kind.get()._field_kind})}), 7);
							};
						}
					}
					else if (_9917_p.get()._field_decl.get()._field_variadic) {
						_case_begin_2297748e1:;
						{
							_10417_v.get()._field_kind.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_variadic=false, ._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9be0_Slc>(_2455e9be0_Slc{._field_elem=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_cpp_ident=_9917_p.get()._field_kind.get()._field_cpp_ident, ._field_kind=_9917_p.get()._field_kind.get()._field_kind})}), 8)});
						}
					}
					else {
						_case_begin_22977355a:;
						{
							_10417_v.get()._field_kind.get()._field_kind=_9917_p.get()._field_kind;
						}
					}
					_match_end_22977478c:;
				};
				_9427_dest = jule::alloc_for_append(_9427_dest,1);_9427_dest.__push(_10417_v);;
			}
			_iter_next_229770e2b:;
			++it;
			goto _iter_begin_229770e2b;
		}
		_iter_end_229770e2b:;
	};
}



inline void _2455502b6_append_generic_type_aliases(jule::Slice<jule::Ptr<_2455e0334_TypeAlias>>& _15437_dest, jule::Ptr<_2449299b0_FnIns>& _15462_f) {
	jule::I32 _15513_size = _15462_f.get()._field_generics.len();;
	if ((_15462_f.get()._field_decl.get()._field_owner != nullptr)) {
		_15513_size+=_15462_f.get()._field_decl.get()._field_owner.get()._field_generics.len();
	};
	if ((_15513_size == 0LL)) {
		return;;
	};
	{
		auto &expr = _15462_f.get()._field_generics;
		auto it = expr.begin();
		_iter_begin_229779dbe:;
		if (it != expr.end()) {
			jule::I32 _16410_i = it - expr.begin();
			jule::Ptr<_2455de7ea_InsGeneric> _16417_g = *it;
			{
				jule::Ptr<_2448657b9_GenericDecl> _16517_decl = _15462_f.get()._field_decl.get()._field_generics[_16410_i];;
				_15437_dest = jule::alloc_for_append(_15437_dest,1);_15437_dest.__push(jule::new_ptr<_2455e0334_TypeAlias>(_2455e0334_TypeAlias{._field_scope=_15462_f.get()._field_decl.get()._field_scope, ._field_used=true, ._field_generic=true, ._field_token=_16517_decl.get()._field_token, ._field_ident=_16517_decl.get()._field_ident, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_16417_g.get()._field_kind}), }));;
			}
			_iter_next_229779dbe:;
			++it;
			_16410_i++;
			goto _iter_begin_229779dbe;
		}
		_iter_end_229779dbe:;
	};
	if ((_15462_f.get()._field_decl.get()._field_owner != nullptr)) {
		jule::Ptr<_244874c5c_StructIns> _17717_owner = _15462_f.get()._field_owner;;
		{
			auto &expr = _17717_owner.get()._field_generics;
			auto it = expr.begin();
			_iter_begin_22977b73e:;
			if (it != expr.end()) {
				jule::I32 _17814_i = it - expr.begin();
				jule::Ptr<_2455de7ea_InsGeneric> _17821_g = *it;
				{
					jule::Ptr<_2448657b9_GenericDecl> _17921_decl = _17717_owner.get()._field_decl.get()._field_generics[_17814_i];;
					_15437_dest = jule::alloc_for_append(_15437_dest,1);_15437_dest.__push(jule::new_ptr<_2455e0334_TypeAlias>(_2455e0334_TypeAlias{._field_scope=_15462_f.get()._field_decl.get()._field_scope, ._field_used=true, ._field_generic=true, ._field_token=_17921_decl.get()._field_token, ._field_ident=_17921_decl.get()._field_ident, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=_17821_g.get()._field_kind}), }));;
				}
				_iter_next_22977b73e:;
				++it;
				_17814_i++;
				goto _iter_begin_22977b73e;
			}
			_iter_end_22977b73e:;
		};
	};
}



inline jule::Ptr<_2455b02e3_SymbolTable> _245550618_find_file(jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>& _19219_files, jule::Ptr<_2431e98ad_File>& _19243_handler) {
	{
		auto &expr = _19219_files;
		auto it = expr.begin();
		_iter_begin_22977a72c:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _19317_fl = *it;
			{
				if ((_19317_fl.get()._field_file == _19243_handler)) {
					return _19317_fl;
				};
			}
			_iter_next_22977a72c:;
			++it;
			goto _iter_begin_22977a72c;
		}
		_iter_end_22977a72c:;
	};
	return nullptr;
}



inline void _245550a7a_push_suggestion(_242dbab89_Log* _20131_log, jule::Str _20142_fmt, jule::Slice<jule::Any> _20155_args) {
	_20131_log->_field_suggestion=_242dbb0c9_logf(_20142_fmt,jule::Any(_20155_args));
}



inline jule::Bool _24558e327_trait_has_reference_receiver(jule::Ptr<_24547ec51_Trait>& _2634_t) {
	{
		auto &expr = _2634_t.get()._field_methods;
		auto it = expr.begin();
		_iter_begin_2299714e4:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> &_2712_f = *it;
			{
				if (_2712_f.get()._field_statically) {
					goto _iter_next_2299714e4;
				};
				jule::Ptr<_2449254c2_Param> _3313_p = _2712_f.get()._field_params[0LL];;
				if ((_244925d63_is_ref(_3313_p.ptr()) && _244925aee_is_self(_3313_p.ptr()))) {
					return true;
				};
			}
			_iter_next_2299714e4:;
			++it;
			goto _iter_begin_2299714e4;
		}
		_iter_end_2299714e4:;
	};
	return false;
}



inline jule::Bool _245586352_float_assignable(jule::Str _4121_kind, jule::Ptr<_2455b5051_Data>& _4133_d) {
	jule::Str _429_value = _24546780a_fmt_float(static_cast<jule::F64>(_2449186e6_as_f64(_4133_d.get()._field_constant.ptr())),'g',-1LL,64LL);;
	return _24551d10d_check_bit_float(_429_value,static_cast<jule::I32>(_24551bc00_bitsize_of(_4121_kind)));
}



inline jule::Bool _245586484_sig_assignable(jule::Str _4619_kind, jule::Ptr<_2455b5051_Data>& _4631_d) {
	jule::F64 _479_min = _245522e7b_min(_4619_kind);;
	jule::F64 _489_max = _245523267_max(_4619_kind);;
	{
		
		if (_24491a352_is_f64(_4631_d.get()._field_constant.ptr())) {
			_case_begin_229978210:;
			{
				jule::F64 _5113_x = _244917ea9_read_f64(_4631_d.get()._field_constant.ptr());;
				jule::F64 _5214_i;;
				jule::F64 _5217_frac;;
				std::tie(_5214_i,_5217_frac) = _24543a8dd_modf(_5113_x);
				if ((_5217_frac != 0LL)) {
					return false;
				};
				return ((_5214_i >= _479_min) && (_5214_i <= _489_max));
			}
		}
		else if (_244919b15_is_u64(_4631_d.get()._field_constant.ptr())) {
			_case_begin_229978276:;
			{
				jule::F64 _5813_x = _2449186e6_as_f64(_4631_d.get()._field_constant.ptr());;
				if ((_5813_x <= _489_max)) {
					return true;
				};
			}
		}
		else if (_2449198a1_is_i64(_4631_d.get()._field_constant.ptr())) {
			_case_begin_2299782dc:;
			{
				jule::F64 _6313_x = _2449186e6_as_f64(_4631_d.get()._field_constant.ptr());;
				return ((_479_min <= _6313_x) && (_6313_x <= _489_max));
			}
		}
		_match_end_2299780bc:;
	};
	return false;
}



inline jule::Bool _24559ca72_unsig_assignable(jule::Str _6921_kind, jule::Ptr<_2455b5051_Data>& _6933_d) {
	jule::F64 _709_max = _245523267_max(_6921_kind);;
	if ((_6933_d.get()._field_is_rune && (_6921_kind == jule::Str("u8", 2)))) {
		return _245585e34_is_ascii(static_cast<jule::I32>(static_cast<jule::I32>(_244917508_read_i64(_6933_d.get()._field_constant.ptr()))));
	};
	{
		
		if (_24491a352_is_f64(_6933_d.get()._field_constant.ptr())) {
			_case_begin_22997c8c9:;
			{
				jule::F64 _7713_x = _244917ea9_read_f64(_6933_d.get()._field_constant.ptr());;
				if ((_7713_x < 0LL)) {
					return false;
				};
				jule::F64 _8114_i;;
				jule::F64 _8117_frac;;
				std::tie(_8114_i,_8117_frac) = _24543a8dd_modf(_7713_x);
				if ((_8117_frac != 0LL)) {
					return false;
				};
				return (_8114_i <= _709_max);
			}
		}
		else if (_244919b15_is_u64(_6933_d.get()._field_constant.ptr())) {
			_case_begin_22997d468:;
			{
				jule::F64 _8713_x = _2449186e6_as_f64(_6933_d.get()._field_constant.ptr());;
				if ((_8713_x <= _709_max)) {
					return true;
				};
			}
		}
		else if (_2449198a1_is_i64(_6933_d.get()._field_constant.ptr())) {
			_case_begin_22997d4e0:;
			{
				jule::F64 _9213_x = _2449186e6_as_f64(_6933_d.get()._field_constant.ptr());;
				return ((0LL <= _9213_x) && (_9213_x <= _709_max));
			}
		}
		_match_end_22997c830:;
	};
	return false;
}



inline jule::Bool _24559cba4_int_assignable(jule::Str _9819_kind, jule::Ptr<_2455b5051_Data>& _9831_d) {
	{
		
		if (_2455280b3_is_sig_int(_9819_kind)) {
			_case_begin_229982e95:;
			{
				return _245586484_sig_assignable(_9819_kind,_9831_d);
			}
		}
		else if (_24552839e_is_unsig_int(_9819_kind)) {
			_case_begin_229982813:;
			{
				return _24559ca72_unsig_assignable(_9819_kind,_9831_d);
			}
		}
		else {
			_case_begin_22997db50:;
			{
				return false;
			}
		}
		_match_end_22997da73:;
	};
}



inline jule::Ptr<_2448249dc_Directive> _2455da708_find_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>& _424824_directives, jule::Str _424855_d) {
	{
		auto &expr = _424824_directives;
		auto it = expr.begin();
		_iter_begin_229a9b18a:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _424917_dr = *it;
			{
				if ((_424917_dr.get()._field_tag.get()._field_kind == _424855_d)) {
					return _424917_dr;
				};
			}
			_iter_next_229a9b18a:;
			++it;
			goto _iter_begin_229a9b18a;
		}
		_iter_end_229a9b18a:;
	};
	return nullptr;
}



inline jule::Any _2455daa8d_find_builtins_import(jule::Str _425725_ident, jule::Ptr<_245547db3_ImportInfo> _425737_imp) {
	return jule::Any(_2456705a1_find_package_builtin_def(_425737_imp.get()._field_link_path,_425725_ident));
}



inline void _2455dac9c_fit_bitsize(jule::Ptr<_2455b5051_Data>& _426421_d) {
	jule::Ptr<_2455e59ee_Prim> _426513_prim = _2455e3139_prim(_426421_d.get()._field_kind.ptr());;
	jule::I32 _42669_z = _24551bc00_bitsize_of(_2455e5d62_to_str(_426513_prim.ptr()));;
	if ((_42669_z == 64LL)) {
		return;;
	};
	jule::I32 _427113_k = 0LL;;
	{
		
		if (_2449198a1_is_i64(_426421_d.get()._field_constant.ptr())) {
			_case_begin_229a9e04a:;
			{
				_427113_k=static_cast<jule::I32>(_24551d64c_bitsize_of_int(static_cast<jule::I64>(_244917508_read_i64(_426421_d.get()._field_constant.ptr()))));
				if ((_427113_k > _42669_z)) {
					_426513_prim.get()._field_kind=_24551c01e_int_from_bits(_427113_k);
				};
			}
		}
		else if (_244919b15_is_u64(_426421_d.get()._field_constant.ptr())) {
			_case_begin_229a9e0c2:;
			{
				_427113_k=static_cast<jule::I32>(_24551d8e4_bitsize_of_uint(static_cast<jule::U64>(_24491776c_read_u64(_426421_d.get()._field_constant.ptr()))));
				if ((_427113_k > _42669_z)) {
					_426513_prim.get()._field_kind=_24551c2b6_uint_from_bits(_427113_k);
				};
			}
		}
		else if (_24491a352_is_f64(_426421_d.get()._field_constant.ptr())) {
			_case_begin_229a9e149:;
			{
				_427113_k=static_cast<jule::I32>(_24551d3a5_bitsize_of_float(static_cast<jule::F64>(_244917ea9_read_f64(_426421_d.get()._field_constant.ptr()))));
				if ((_427113_k > _42669_z)) {
					_426513_prim.get()._field_kind=_24551c55d_float_from_bits(_427113_k);
				};
			}
		}
		_match_end_229a9de7e:;
	};
}



inline void _2455db099_make_struct_lit_alloc(jule::Ptr<_2455b5051_Data>& _429131_d, jule::Ptr<_244920148_StructLitExprModel>& _429146_lit) {
	_429131_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9283_Sptr>(_2455e9283_Sptr{._field_elem=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_429146_lit.get()._field_strct, 0)})}), 7)});
	_429131_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244920335_AllocStructLitExprModel>(_244920335_AllocStructLitExprModel{._field_lit=_429146_lit}));
}



inline jule::Ptr<_24556cc1d_Var> _2455db3da_build_error_var(jule::Ptr<_24552937d_Scope>& _430225_s, jule::Ptr<_2448619c4_FnCallExpr>& _430241_fc) {
	return jule::new_ptr<_24556cc1d_Var>(_24556cc1d_Var{._field_scope=_430225_s, ._field_token=_430241_fc.get()._field_token, ._field_ident=jule::Str("error", 5), ._field_mutable=true, ._field_used=true, ._field_reference=false, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("any", 3)), 6)})}), ._field_value=jule::new_ptr<_2455b60c9_Value>(_2455b60c9_Value{._field_data=jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{})}), });
}



inline jule::Any _2455db72b_find_builtins_sema(jule::Str _432123_ident, jule::Ptr<_24555100e_Sema> _432139_s) {
	{
		auto &expr = _432139_s.get()._field_file.get()._field_imports;
		auto it = expr.begin();
		_iter_begin_229aa489c:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _432217_imp = *it;
			{
				if ((_432217_imp.get()._field_import_all || _24554a789_exist_ident(_432217_imp.ptr(), _432123_ident))) {
					jule::Any _432421_def = _2455daa8d_find_builtins_import(_432123_ident,_432217_imp);;
					if ((_432421_def != nullptr)) {
						return jule::Any(_432421_def);
					};
				};
			}
			_iter_next_229aa489c:;
			++it;
			goto _iter_begin_229aa489c;
		}
		_iter_end_229aa489c:;
	};
	jule::Str _433213_ppath = _2431ea2a4_dir(_432139_s.get()._field_file.get()._field_file.ptr());;
	if (_241ec93e7_has_prefix(_433213_ppath,_242ddd4e7_PATH_STDLIB)) {
		(_433213_ppath).mut_slice(_242ddd4e7_PATH_STDLIB.len());;
		_433213_ppath=(jule::Str("std", 3) + _242d62e1c_replace(_433213_ppath,static_cast<jule::Str>(92LL),jule::Str("::", 2),-1LL));
		return jule::Any(_2456705a1_find_package_builtin_def(_433213_ppath,_432123_ident));
	};
	return nullptr;
}



inline jule::Bool _2455db9c3_is_ok_for_shifting(jule::Ptr<_2455b5051_Data>& _434628_d) {
	if (_2455b5914_is_const(_434628_d.ptr())) {
		{
			
			if (_2449198a1_is_i64(_434628_d.get()._field_constant.ptr())) {
				_case_begin_229aa8708:;
				{
					return (_244917508_read_i64(_434628_d.get()._field_constant.ptr()) >= 0LL);
				}
			}
			else if (_244919b15_is_u64(_434628_d.get()._field_constant.ptr())) {
				_case_begin_229aa7ebb:;
				{
					return true;
				}
			}
			else if (_24491a352_is_f64(_434628_d.get()._field_constant.ptr())) {
				_case_begin_229aa8032:;
				{
					return (_244917ea9_read_f64(_434628_d.get()._field_constant.ptr()) >= 0LL);
				}
			}
			else {
				_case_begin_229aa7e55:;
				{
					return false;
				}
			}
			_match_end_229aa7d78:;
		};
	};
	jule::Ptr<_2455e59ee_Prim> _43599_prim = _2455e3139_prim(_434628_d.get()._field_kind.ptr());;
	return ((_43599_prim != nullptr) && _245528646_is_int(_2455e5d62_to_str(_43599_prim.ptr())));
}



inline jule::Bool _2455dbd7a_is_instanced_struct(jule::Ptr<_244874c5c_StructIns> _436324_s) {
	return (_436324_s.get()._field_decl.get()._field_generics.len() == _436324_s.get()._field_generics.len());
}



inline jule::Bool _2455dc155_is_ptr_arithmetic_compatible_int(jule::Ptr<_2455b5051_Data>& _436742_d) {
	if (_2455b5914_is_const(_436742_d.ptr())) {
		return _24559cba4_int_assignable(jule::Str("int", 3),_436742_d);
	};
	_24559ddd6_TypeCompatibilityChecker _437113_tcc = _24559ddd6_TypeCompatibilityChecker{._field_dest=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)}), ._field_src=_436742_d.get()._field_kind, };;
	return _2455a04c0_check(&_437113_tcc);
}



inline void _2455dc386_apply_cast_kind_model(jule::Ptr<_2455b5051_Data>& _438031_d, jule::Ptr<_2455e1027_TypeKind>& _438046_t) {
	_438031_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244920522_CastingExprModel>(_244920522_CastingExprModel{._field_expr=_438031_d.get()._field_model, ._field_kind=_438046_t, ._field_expr_kind=_438031_d.get()._field_kind}));
}



inline void _2455dc63e_apply_cast_kind(jule::Ptr<_2455b5051_Data>& _438825_d, jule::Ptr<_2455e1027_TypeKind>& _438840_t) {
	_2455dc386_apply_cast_kind_model(_438825_d,_438840_t);
	_438825_d.get()._field_kind=_438840_t;
}



inline jule::Ptr<_2455b5051_Data> _2455dc83c_build_void_data(void) {
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("void", 4)), 6)}), ._field_mutable=false, ._field_lvalue=false, ._field_decl=false, });
}



inline jule::Str _2455dcb06_check_data_for_integer_indexing(jule::Ptr<_2455b5051_Data>& _440441_d) {
	jule::Str _440453_err_fmt = jule::Str();
	if ((_440441_d == nullptr)) {
		_440453_err_fmt = jule::Str();
		return _440453_err_fmt;
	};
	{
		
		if ((_2455e3139_prim(_440441_d.get()._field_kind.ptr()) == nullptr)) {
			_case_begin_229aae588:;
			{
				_440453_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _440453_err_fmt;
			}
		}
		else if ((!(_245528646_is_int(_2455e5d62_to_str(_2455e3139_prim(_440441_d.get()._field_kind.ptr()).ptr()))))) {
			_case_begin_229aae5ee:;
			{
				_440453_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _440453_err_fmt;
			}
		}
		else if (_2455b5914_is_const(_440441_d.ptr())) {
			_case_begin_229aae665:;
			{
				if ((_2449186e6_as_f64(_440441_d.get()._field_constant.ptr()) < 0LL)) {
					_440453_err_fmt = jule::Str("overflow the limit of data-type", 31);
					return _440453_err_fmt;
				};
			}
		}
		else if ((_2455e3139_prim(_440441_d.get()._field_kind.ptr()) == nullptr) || _2455b5914_is_const(_440441_d.ptr()) || (_24551b958_real_kind_of(_2455e5d62_to_str(_2455e3139_prim(_440441_d.get()._field_kind.ptr()).ptr())) != _24551b958_real_kind_of(jule::Str("int", 3)))) {
			_case_begin_229aae6cb:;
			{
				jule::Ptr<_2455e1027_TypeKind> _442117_t = jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)});;
				_2455dc63e_apply_cast_kind(_440441_d,_442117_t);
			}
		}
		_match_end_229aae91d:;
	};
	_440453_err_fmt = jule::Str();
	return _440453_err_fmt;
}



inline void _2455dcde2_apply_cast_model_by_enum(jule::Ptr<_2455b5051_Data>& _443034_d, jule::Ptr<_245481e0c_Enum> _443048_e) {
	if ((_443048_e == nullptr)) {
		return;;
	};
	jule::Ptr<_2455e59ee_Prim> _44349_p = _2455e3139_prim(_443048_e.get()._field_kind.get()._field_kind.ptr());;
	if (_2455e8c33_is_str(_44349_p.ptr())) {
		return;;
	};
	_2455dc386_apply_cast_kind_model(_443034_d,_443048_e.get()._field_kind.get()._field_kind);
}



inline void _2455dd1ab_cast_const_by_type(jule::Str& _444124_t, jule::Ptr<_2455b5051_Data>& _444137_d) {
	{
		
		if (_2455280b3_is_sig_int(_444124_t)) {
			_case_begin_229ab544b:;
			{
				{
					auto _match_expr{ _24551bc00_bitsize_of(_24551b958_real_kind_of(_444124_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_229ab6150:;
						{
							_24491896b_set_i64(_444137_d.get()._field_constant.ptr(), static_cast<jule::I64>(_24491821d_as_i64(_444137_d.get()._field_constant.ptr())));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_229ab61b6:;
						{
							_24491896b_set_i64(_444137_d.get()._field_constant.ptr(), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I32>(_24491821d_as_i64(_444137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 16LL) {
						_case_begin_229ab622c:;
						{
							_24491896b_set_i64(_444137_d.get()._field_constant.ptr(), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I16>(_24491821d_as_i64(_444137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 8LL) {
						_case_begin_229ab6293:;
						{
							_24491896b_set_i64(_444137_d.get()._field_constant.ptr(), static_cast<jule::I64>(static_cast<jule::I64>(static_cast<jule::I8>(_24491821d_as_i64(_444137_d.get()._field_constant.ptr())))));
						}
					}
					_match_end_229ab60ea:;
				};
			}
		}
		else if (_24552839e_is_unsig_int(_444124_t)) {
			_case_begin_229ab54c3:;
			{
				{
					auto _match_expr{ _24551bc00_bitsize_of(_24551b958_real_kind_of(_444124_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_229ab976e:;
						{
							_244918be1_set_u64(_444137_d.get()._field_constant.ptr(), static_cast<jule::U64>(_244918482_as_u64(_444137_d.get()._field_constant.ptr())));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_229ab97d5:;
						{
							_244918be1_set_u64(_444137_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U32>(_244918482_as_u64(_444137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 16LL) {
						_case_begin_229ab984b:;
						{
							_244918be1_set_u64(_444137_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U16>(_244918482_as_u64(_444137_d.get()._field_constant.ptr())))));
						}
					}
					else if (_match_expr == 8LL) {
						_case_begin_229ab98b2:;
						{
							_244918be1_set_u64(_444137_d.get()._field_constant.ptr(), static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U8>(_244918482_as_u64(_444137_d.get()._field_constant.ptr())))));
						}
					}
					_match_end_229ab8ce0:;
				};
			}
		}
		else if (_245528965_is_float(_444124_t)) {
			_case_begin_229ab554a:;
			{
				{
					auto _match_expr{ _24551bc00_bitsize_of(_24551b958_real_kind_of(_444124_t)) };
					
					if (_match_expr == 64LL) {
						_case_begin_229abcb7e:;
						{
							_244919461_set_f64(_444137_d.get()._field_constant.ptr(), static_cast<jule::F64>(_2449186e6_as_f64(_444137_d.get()._field_constant.ptr())));
						}
					}
					else if (_match_expr == 32LL) {
						_case_begin_229abcdd2:;
						{
							_244919461_set_f64(_444137_d.get()._field_constant.ptr(), static_cast<jule::F64>(static_cast<jule::F64>(static_cast<jule::F32>(_2449186e6_as_f64(_444137_d.get()._field_constant.ptr())))));
						}
					}
					_match_end_229abc420:;
				};
			}
		}
		_match_end_229ab5319:;
	};
}



inline void _2455dd6b7_update_model_to_generic_ins(jule::Any& _447537_m, jule::Ptr<_2449299b0_FnIns>& _447556_f) {
	{
		auto &_match_expr{ _447537_m };
		
		if (_match_expr.type_is<jule::Ptr<_2449299b0_FnIns>>()) {
			_case_begin_229abde49:;
			{
				_447537_m=static_cast<jule::Any>(_447556_f);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921996_StructSubIdentExprModel>>()) {
			_case_begin_229abd322:;
			{
				_447537_m.operator jule::Ptr<_244921996_StructSubIdentExprModel>().get()._field_method=_447556_f;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244921b83_StructStaticIdentExprModel>>()) {
			_case_begin_229abd388:;
			{
				_447537_m.operator jule::Ptr<_244921b83_StructStaticIdentExprModel>().get()._field_method=_447556_f;
			}
		}
		_match_end_229ab72a5:;
	};
}



inline jule::Bool _2455dd92b_push_sub_ident_from_expr(jule::Any _448633_expr, jule::Ptr<_244858dea_SubIdentTypeDecl>& _448654_t) {
	{
		auto &_match_expr{ _448633_expr };
		
		if (_match_expr.type_is<jule::Ptr<_24485e76e_IdentExpr>>()) {
			_case_begin_229ac10b1:;
			{
				jule::Ptr<_24485e76e_IdentExpr> _448917_e = _448633_expr.operator jule::Ptr<_24485e76e_IdentExpr>();;
				_448654_t.get()._field_idents = jule::alloc_for_append(_448654_t.get()._field_idents,1);_448654_t.get()._field_idents.__push(jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_448917_e.get()._field_token, ._field_ident=_448917_e.get()._field_ident, }));;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_244861012_SubIdentExpr>>()) {
			_case_begin_229ac1127:;
			{
				jule::Ptr<_244861012_SubIdentExpr> _449517_e = _448633_expr.operator jule::Ptr<_244861012_SubIdentExpr>();;
				if ((!(_2455dd92b_push_sub_ident_from_expr(_449517_e.get()._field_expr.get()._field_kind,_448654_t)))) {
					return false;
				};
				_448654_t.get()._field_idents = jule::alloc_for_append(_448654_t.get()._field_idents,1);_448654_t.get()._field_idents.__push(jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_449517_e.get()._field_ident, ._field_ident=_449517_e.get()._field_ident.get()._field_kind, }));;
			}
		}
		else {
			_case_begin_229ac0ee5:;
			{
				return false;
			}
		}
		_match_end_229ac0e90:;
	};
	return true;
}



inline jule::Bool _245607824_kind_uses_generics(jule::Any& _157424_k, jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>& _157442_generics) {
	{
		auto &expr = _157442_generics;
		auto it = expr.begin();
		_iter_begin_229ddc344:;
		if (it != expr.end()) {
			jule::Ptr<_2448657b9_GenericDecl> &_157512_g = *it;
			{
				if (static__245607428_exist(_157512_g.get()._field_ident,_157424_k)) {
					return true;
				};
			}
			_iter_next_229ddc344:;
			++it;
			goto _iter_begin_229ddc344;
		}
		_iter_end_229ddc344:;
	};
	return false;
}



inline jule::Bool _245607ba9_has_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>& _158423_directives, jule::Str _158454_tag) {
	{
		auto &expr = _158423_directives;
		auto it = expr.begin();
		_iter_begin_229ddd488:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _158517_dr = *it;
			{
				if ((_158517_dr.get()._field_tag.get()._field_kind == _158454_tag)) {
					return true;
				};
			}
			_iter_next_229ddd488:;
			++it;
			goto _iter_begin_229ddd488;
		}
		_iter_end_229ddd488:;
	};
	return false;
}



inline jule::Bool _245607e51_can_get_ptr(jule::Ptr<_2455b5051_Data>& _159321_d) {
	if (((!(_159321_d.get()._field_lvalue)) || _2455b5914_is_const(_159321_d.ptr()))) {
		return false;
	};
	{
		
		if (((_2455e4327_fnc(_159321_d.get()._field_kind.ptr()) != nullptr) || (_2455e3876_enm(_159321_d.get()._field_kind.ptr()) != nullptr))) {
			_case_begin_229de00e4:;
			{
				return false;
			}
		}
		else {
			_case_begin_229dde8a7:;
			{
				return true;
			}
		}
		_match_end_229dde797:;
	};
}



inline jule::Bool _245608270_is_valid_for_sptr_type(jule::Ptr<_2455e1027_TypeKind>& _160732_t) {
	jule::Ptr<_244874c5c_StructIns> _160813_s = _2455e458b_strct(_160732_t.ptr());;
	if ((((_160813_s != nullptr) && (_160813_s.get()._field_decl != nullptr)) && _160813_s.get()._field_decl.get()._field_cpp_linked)) {
		return false;
	};
	return true;
}



inline jule::Bool _245608517_is_valid_for_ref(jule::Ptr<_2455e1027_TypeKind>& _161626_t) {
	return (_2455e4327_fnc(_161626_t.ptr()) == nullptr);
}



inline jule::Bool _2456087d1_is_builtin_str_convertable(jule::Ptr<_2455e1027_TypeKind>& _161936_t) {
	return (((!(_2455e21b0_void(_161936_t.ptr()))) && (_2455e4327_fnc(_161936_t.ptr()) == nullptr)) && (_2455e4cc8_tup(_161936_t.ptr()) == nullptr));
}



inline jule::Str _245608a78_build_link_path_by_tokens(jule::Slice<jule::Ptr<_2431e4523_Token>>& _162331_tokens) {
	jule::Str _162413_s = _162331_tokens[0LL].get()._field_kind;;
	{
		auto expr = _162331_tokens.slice(1LL);
		auto it = expr.begin();
		_iter_begin_229de3d51:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> &_162512_token = *it;
			{
				_162413_s+=jule::Str("::", 2);
				_162413_s+=_162512_token.get()._field_kind;
			}
			_iter_next_229de3d51:;
			++it;
			goto _iter_begin_229de3d51;
		}
		_iter_end_229de3d51:;
	};
	return _162413_s;
}



inline jule::Ptr<_2455e59ee_Prim> _245608e41_build_prim_type(jule::Str _163220_kind) {
	return jule::new_ptr<_2455e59ee_Prim>(_2455e59ee_Prim{._field_kind=_163220_kind});
}



inline jule::Ptr<_244848912_Struct> _2456091d8_get_struct_from_kind(jule::Ptr<_2455e1027_TypeKind> _163829_k) {
	{
		
		if ((_163829_k == nullptr)) {
			_case_begin_229de513d:;
			{
				return nullptr;
			}
		}
		else if ((_2455e458b_strct(_163829_k.ptr()) != nullptr)) {
			_case_begin_229de51a4:;
			{
				return _2455e458b_strct(_163829_k.ptr()).get()._field_decl;
			}
		}
		else if ((_2455e339d_sptr(_163829_k.ptr()) != nullptr)) {
			_case_begin_229de521a:;
			{
				return _2456091d8_get_struct_from_kind(_2455e339d_sptr(_163829_k.ptr()).get()._field_elem);
			}
		}
		else if ((_2455e40b3_slc(_163829_k.ptr()) != nullptr)) {
			_case_begin_229de5281:;
			{
				return _2456091d8_get_struct_from_kind(_2455e40b3_slc(_163829_k.ptr()).get()._field_elem);
			}
		}
		else if ((_2455e3d4e_arr(_163829_k.ptr()) != nullptr)) {
			_case_begin_229de5539:;
			{
				return _2456091d8_get_struct_from_kind(_2455e3d4e_arr(_163829_k.ptr()).get()._field_elem);
			}
		}
		else if ((_2455e3612_ptr(_163829_k.ptr()) != nullptr)) {
			_case_begin_229de55a0:;
			{
				return nullptr;
			}
		}
		else {
			_case_begin_229de50c7:;
			{
				return nullptr;
			}
		}
		_match_end_229d7d6ae:;
	};
}



inline jule::Bool _245609480_is_prim(jule::Str _166112_kind) {
	return ((((((((((((((((_166112_kind == jule::Str("i8", 2)) || (_166112_kind == jule::Str("i16", 3))) || (_166112_kind == jule::Str("i32", 3))) || (_166112_kind == jule::Str("i64", 3))) || (_166112_kind == jule::Str("u8", 2))) || (_166112_kind == jule::Str("u16", 3))) || (_166112_kind == jule::Str("u32", 3))) || (_166112_kind == jule::Str("u64", 3))) || (_166112_kind == jule::Str("f32", 3))) || (_166112_kind == jule::Str("f64", 3))) || (_166112_kind == jule::Str("int", 3))) || (_166112_kind == jule::Str("uint", 4))) || (_166112_kind == jule::Str("uintptr", 7))) || (_166112_kind == jule::Str("bool", 4))) || (_166112_kind == jule::Str("str", 3))) || (_166112_kind == jule::Str("any", 3)));
}



inline void _245609738_apply_implicit_cast(jule::Ptr<_2455e1027_TypeKind>& _168029_dest, jule::Ptr<_2455b5051_Data>& _168051_d) {
	if (_2455e1e4b_is_nil(_168051_d.get()._field_kind.ptr())) {
		return;;
	};
	jule::Ptr<_2455e59ee_Prim> _16859_dest_prim = _2455e3139_prim(_168029_dest.ptr());;
	jule::Ptr<_2455e59ee_Prim> _16869_prim = _2455e3139_prim(_168051_d.get()._field_kind.ptr());;
	if ((_16859_dest_prim != nullptr)) {
		if (_2455e8e97_is_any(_16859_dest_prim.ptr())) {
			_2455dc63e_apply_cast_kind(_168051_d,_168029_dest);
			return;;
		};
		if (((((((!(_2455e1bd7_cpp_linked(_168051_d.get()._field_kind.ptr()))) && (!(_168051_d.get()._field_kind.get()._field_variadic))) && (!(_168051_d.get()._field_lvalue))) && (!(_2455b5914_is_const(_168051_d.ptr())))) && (_16869_prim != nullptr)) && _245528c0c_is_num(_16869_prim.get()._field_kind))) {
			_2455dc63e_apply_cast_kind(_168051_d,_168029_dest);
		};
		return;;
	};
	if (((_2455e4800_trt(_168029_dest.ptr()) != nullptr) && (_2455e4800_trt(_168051_d.get()._field_kind.ptr()) == nullptr))) {
		_2455dc386_apply_cast_kind_model(_168051_d,_168029_dest);
		return;;
	};
	if (((_2455e3ada_tenm(_168029_dest.ptr()) != nullptr) && (_2455e3ada_tenm(_168051_d.get()._field_kind.ptr()) == nullptr))) {
		_2455dc386_apply_cast_kind_model(_168051_d,_168029_dest);
		return;;
	};
}



inline std::tuple<jule::Ptr<_2455b02e3_SymbolTable>,jule::Slice<_242dbab89_Log>> _24560c62b_build_symbols(jule::Ptr<_244823942_Ast>& _1523_ast, jule::Trait<_2455455b9_Importer>& _1539_importer, jule::Ptr<_244933227_SymbolBuilder> _1563_owner) {
	jule::Ptr<_244933227_SymbolBuilder> _1613_sb = jule::new_ptr<_244933227_SymbolBuilder>(_244933227_SymbolBuilder{._field_owner=_1563_owner, ._field_importer=_1539_importer, ._field_ast=_1523_ast, });;
	_244938271_build(_1613_sb);
	if ((_1613_sb.get()._field_errors.len() == 0LL)) {
		return std::make_tuple(_1613_sb.get()._field_table,nullptr);
	};
	return std::make_tuple(nullptr,_1613_sb.get()._field_errors);
}



inline std::tuple<jule::Ptr<_24554ad1c_Package>,jule::Slice<_242dbab89_Log>> _24560ca5a___analyze_package(jule::Slice<jule::Ptr<_244823942_Ast>>& _2927_files, jule::Trait<_2455455b9_Importer>& _2947_importer, jule::I32& _2968_flags) {
	jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>> _3113_tables = jule::Slice<jule::Ptr<_2455b02e3_SymbolTable>>::alloc(0LL,_2927_files.len());;
	{
		auto &expr = _2927_files;
		auto it = expr.begin();
		_iter_begin_229ee6519:;
		if (it != expr.end()) {
			jule::Ptr<_244823942_Ast> _3217_f = *it;
			{
				jule::Ptr<_2455b02e3_SymbolTable> _3318_table;;
				jule::Slice<_242dbab89_Log> _3329_errors;;
				std::tie(_3318_table,_3329_errors) = _24560c62b_build_symbols(_3217_f,_2947_importer,nullptr);
				if ((_3329_errors.len() > 0LL)) {
					return std::make_tuple(nullptr,_3329_errors);
				};
				_3113_tables = jule::alloc_for_append(_3113_tables,1);_3113_tables.__push(_3318_table);;
			}
			_iter_next_229ee6519:;
			++it;
			goto _iter_begin_229ee6519;
		}
		_iter_end_229ee6519:;
	};
	jule::Ptr<_24555100e_Sema> _4013_sema = jule::new_ptr<_24555100e_Sema>(_24555100e_Sema{._field_flags=_2968_flags});;
	_245569c3c_check(_4013_sema, _3113_tables);
	if ((_4013_sema.get()._field_errors.len() > 0LL)) {
		return std::make_tuple(nullptr,_4013_sema.get()._field_errors);
	};
	jule::Ptr<_24554ad1c_Package> _4813_pkg = jule::new_ptr<_24554ad1c_Package>(_24554ad1c_Package{._field_files=_4013_sema.get()._field_files});;
	return std::make_tuple(_4813_pkg,nullptr);
}



inline std::tuple<jule::Ptr<_24554ad1c_Package>,jule::Slice<_242dbab89_Log>> _24560ce45_analyze_package(jule::Slice<jule::Ptr<_244823942_Ast>> _7228_files, jule::Trait<_2455455b9_Importer> _7247_importer, jule::I32 _7267_flags) {
	if ((_7228_files.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	};
	jule::Ptr<_24554ad1c_Package> _7714_package;;
	jule::Slice<_242dbab89_Log> _7727_logs;;
	std::tie(_7714_package,_7727_logs) = _24560ca5a___analyze_package(_7228_files,_7247_importer,_7267_flags);
	return std::make_tuple(_7714_package,_7727_logs);
}



inline jule::Ptr<_2449299b0_FnIns> _245616ed7_find_builtin_fn(jule::Str _2220_ident) {
	{
		auto &_match_expr{ _2220_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_229eee137:;
			{
				static jule::Ptr<_2449299b0_FnIns> _2520_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245695890_builtin_caller_out), });;
				return _2520_f;
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_229eee19d:;
			{
				static jule::Ptr<_2449299b0_FnIns> _2820_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245617d0c_builtin_caller_outln), });;
				return _2820_f;
			}
		}
		else if (_match_expr == jule::Str("new", 3)) {
			_case_begin_229eee3ac:;
			{
				static jule::Ptr<_2449299b0_FnIns> _3120_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_24565e392_builtin_caller_new), });;
				return _3120_f;
			}
		}
		else if (_match_expr == jule::Str("panic", 5)) {
			_case_begin_229eee423:;
			{
				static jule::Ptr<_2449299b0_FnIns> _3420_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456783ab_builtin_caller_panic), });;
				return _3420_f;
			}
		}
		else if (_match_expr == jule::Str("make", 4)) {
			_case_begin_229eee489:;
			{
				static jule::Ptr<_2449299b0_FnIns> _3720_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_24567156e_builtin_caller_make), });;
				return _3720_f;
			}
		}
		else if (_match_expr == jule::Str("append", 6)) {
			_case_begin_229eee500:;
			{
				static jule::Ptr<_2449299b0_FnIns> _4020_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_24569264a_builtin_caller_append), });;
				return _4020_f;
			}
		}
		else if (_match_expr == jule::Str("copy", 4)) {
			_case_begin_229eee566:;
			{
				static jule::Ptr<_2449299b0_FnIns> _4320_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_24567000c_builtin_caller_copy), });;
				return _4320_f;
			}
		}
		else if (_match_expr == jule::Str("clone", 5)) {
			_case_begin_229eee5cc:;
			{
				static jule::Ptr<_2449299b0_FnIns> _4620_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245631c49_builtin_caller_clone), });;
				return _4620_f;
			}
		}
		else if (_match_expr == jule::Str("assert", 6)) {
			_case_begin_229eee698:;
			{
				static jule::Ptr<_2449299b0_FnIns> _4920_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_24564ce1e_builtin_caller_assert), });;
				return _4920_f;
			}
		}
		else {
			_case_begin_229eede28:;
			{
				return nullptr;
			}
		}
		_match_end_229eed884:;
	};
}



inline jule::Ptr<_2455e0334_TypeAlias> _245618dda_find_builtin_type_alias(jule::Str _5628_ident) {
	{
		auto &_match_expr{ _5628_ident };
		
		if (_match_expr == jule::Str("byte", 4)) {
			_case_begin_22a004e0c:;
			{
				static jule::Ptr<_2455e0334_TypeAlias> _5920_t = jule::new_ptr<_2455e0334_TypeAlias>(_2455e0334_TypeAlias{._field_public=true, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("u8", 2)), 6)})}), });;
				return _5920_t;
			}
		}
		else if (_match_expr == jule::Str("rune", 4)) {
			_case_begin_22a004e73:;
			{
				static jule::Ptr<_2455e0334_TypeAlias> _6920_t = jule::new_ptr<_2455e0334_TypeAlias>(_2455e0334_TypeAlias{._field_public=true, ._field_kind=jule::new_ptr<_2455e5180_TypeSymbol>(_2455e5180_TypeSymbol{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("i32", 3)), 6)})}), });;
				return _6920_t;
			}
		}
		else {
			_case_begin_22a00459e:;
			{
				return nullptr;
			}
		}
		_match_end_229eeea3e:;
	};
}



inline jule::Ptr<_24547ec51_Trait> _2456199bd_find_builtin_trait(jule::Str _8323_ident) {
	return nullptr;
}



inline jule::Any _24561a4d5_find_builtin_def(jule::Str _8721_ident) {
	jule::Ptr<_2449299b0_FnIns> _8813_f = _245616ed7_find_builtin_fn(_8721_ident);;
	if ((_8813_f != nullptr)) {
		return jule::Any(_8813_f);
	};
	jule::Ptr<_2455e0334_TypeAlias> _9313_ta = _245618dda_find_builtin_type_alias(_8721_ident);;
	if ((_9313_ta != nullptr)) {
		return jule::Any(_9313_ta);
	};
	jule::Ptr<_24547ec51_Trait> _9813_t = _2456199bd_find_builtin_trait(_8721_ident);;
	if ((_9813_t != nullptr)) {
		return jule::Any(_9813_t);
	};
	return nullptr;
}



inline jule::Any _245644333_find_builtin_def_std_debug(jule::Str _10631_ident) {
	{
		auto &_match_expr{ _10631_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_22a0095d7:;
			{
				static jule::Ptr<_2449299b0_FnIns> _10920_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456a662b_builtin_caller_std_debug_out), });;
				return jule::Any(_10920_f);
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_22a00964d:;
			{
				static jule::Ptr<_2449299b0_FnIns> _11220_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456a6a16_builtin_caller_std_debug_outln), });;
				return jule::Any(_11220_f);
			}
		}
		else {
			_case_begin_22a008b7a:;
			{
				return nullptr;
			}
		}
		_match_end_22a009087:;
	};
}



inline jule::Any _245696a06_find_builtin_def_std_mem(jule::Str _11929_ident) {
	{
		auto &_match_expr{ _11929_ident };
		
		if (_match_expr == jule::Str("size_of", 7)) {
			_case_begin_22a009928:;
			{
				static jule::Ptr<_2449299b0_FnIns> _12220_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456a5163_builtin_caller_std_mem_size_of), });;
				return jule::Any(_12220_f);
			}
		}
		else if (_match_expr == jule::Str("align_of", 8)) {
			_case_begin_22a00998e:;
			{
				static jule::Ptr<_2449299b0_FnIns> _12520_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456a5471_builtin_caller_std_mem_align_of), });;
				return jule::Any(_12520_f);
			}
		}
		else if (_match_expr == jule::Str("free", 4)) {
			_case_begin_22a009a05:;
			{
				static jule::Ptr<_2449299b0_FnIns> _12820_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456a588e_builtin_caller_std_mem_free), });;
				return jule::Any(_12820_f);
			}
		}
		else {
			_case_begin_22a00a4c8:;
			{
				return nullptr;
			}
		}
		_match_end_22a00b045:;
	};
}



inline jule::Any _245695a9e_find_builtin_def_std_jule_integrated(jule::Str _13541_ident) {
	{
		auto &_match_expr{ _13541_ident };
		
		if (_match_expr == jule::Str("to_str", 6)) {
			_case_begin_22a00b41e:;
			{
				static jule::Ptr<_2449299b0_FnIns> _13820_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456a5cbd_builtin_caller_std_jule_integrated_to_str), });;
				return jule::Any(_13820_f);
			}
		}
		else if (_match_expr == jule::Str("emit", 4)) {
			_case_begin_22a00b485:;
			{
				static jule::Ptr<_2449299b0_FnIns> _14120_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_decl=jule::new_ptr<_244926d0e_Fn>(_244926d0e_Fn{._field_generics=jule::Slice<jule::Ptr<_2448657b9_GenericDecl>>::alloc(1LL), }), ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_2456a61db_builtin_caller_std_jule_integrated_emit), });;
				return jule::Any(_14120_f);
			}
		}
		else {
			_case_begin_22a00d60d:;
			{
				return nullptr;
			}
		}
		_match_end_22a00d4ba:;
	};
}



inline jule::Any _2456705a1_find_package_builtin_def(jule::Str _15329_link_path, jule::Str _15345_ident) {
	{
		auto &_match_expr{ _15329_link_path };
		
		if (_match_expr == jule::Str("std::debug", 10)) {
			_case_begin_22a010610:;
			{
				return jule::Any(_245644333_find_builtin_def_std_debug(_15345_ident));
			}
		}
		else if (_match_expr == jule::Str("std::mem", 8)) {
			_case_begin_22a010676:;
			{
				return jule::Any(_245696a06_find_builtin_def_std_mem(_15345_ident));
			}
		}
		else if (_match_expr == jule::Str("std::jule::integrated", 21)) {
			_case_begin_22a0106dc:;
			{
				return jule::Any(_245695a9e_find_builtin_def_std_jule_integrated(_15345_ident));
			}
		}
		else {
			_case_begin_22a00d80b:;
			{
				return nullptr;
			}
		}
		_match_end_22a00e411:;
	};
}



inline jule::Ptr<_2455b5051_Data> _245679ed4_builtin_caller_common_plain(jule::Ptr<_2455b6abe_Eval>& _16637_e, jule::Ptr<_2448619c4_FnCallExpr>& _16652_fc, jule::Ptr<_2455b5051_Data>& _16674_d) {
	jule::Ptr<_2449299b0_FnIns> _16713_f = _2455e4327_fnc(_16674_d.get()._field_kind.ptr());;
	_2455a6cbd_FnCallArgChecker _16913_fcac = _2455a6cbd_FnCallArgChecker{._field_e=_16637_e, ._field_args=_16652_fc.get()._field_args, ._field_error_token=_16652_fc.get()._field_token, ._field_f=_16713_f, ._field_dynamic_annotation=false, };;
	if ((!(_2455a9188_check(&_16913_fcac)))) {
		return nullptr;
	};
	jule::Ptr<_24492070e_FnCallExprModel> _18013_model = jule::new_ptr<_24492070e_FnCallExprModel>(_24492070e_FnCallExprModel{._field_token=_16652_fc.get()._field_token, ._field_func=_16713_f, ._field_expr=_16674_d.get()._field_model, ._field_args=_16913_fcac._field_arg_models, });;
	if ((_16713_f.get()._field_result == nullptr)) {
		_16674_d=_2455dc83c_build_void_data();
	} else {
		_16674_d=jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=_16713_f.get()._field_result, });
	};
	_16674_d.get()._field_model=static_cast<jule::Any>(_18013_model);
	return _16674_d;
}



inline jule::Ptr<_2455b5051_Data> _2456964b7_builtin_caller_common(jule::Ptr<_2455b6abe_Eval>& _19931_e, jule::Ptr<_2448619c4_FnCallExpr>& _19946_fc, jule::Ptr<_2455b5051_Data>& _19968_d) {
	return _245679ed4_builtin_caller_common_plain(_19931_e,_19946_fc,_19968_d);
}



inline jule::Ptr<_2455b5051_Data> _245671250_builtin_caller_common_mut(jule::Ptr<_2455b6abe_Eval>& _20335_e, jule::Ptr<_2448619c4_FnCallExpr>& _20350_fc, jule::Ptr<_2455b5051_Data>& _20372_d) {
	if ((!(_20372_d.get()._field_mutable))) {
		_2455b70ca_push_err(_20335_e.ptr(), _20350_fc.get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	};
	return _2456964b7_builtin_caller_common(_20335_e,_20350_fc,_20372_d);
}



inline jule::Ptr<_2455b5051_Data> _245692e97_builtin_caller_error(jule::Ptr<_2455b6abe_Eval>& _21030_e, jule::Ptr<_2448619c4_FnCallExpr>& _21045_fc) {
	if ((_21045_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_21030_e.ptr(), _21045_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("err", 3))}));
		return nullptr;
	};
	if ((_21045_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_21030_e.ptr(), _21045_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _21813_expr = _2455d26de_eval_expr(_21030_e, _21045_fc.get()._field_args[0LL]);;
	if ((_21813_expr == nullptr)) {
		return nullptr;
	};
	if (_2455b543b_is_nil(_21813_expr.ptr())) {
		_2455b70ca_push_err(_21030_e.ptr(), _21045_fc.get()._field_args[0LL].get()._field_token,jule::Str("you cannot call error function with nil", 39),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _22713_d = _2455dc83c_build_void_data();;
	_22713_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244923866_BuiltinErrorCallExprModel>(_244923866_BuiltinErrorCallExprModel{._field_err=_21813_expr.get()._field_model}));
	return _22713_d;
}



inline jule::Ptr<_2455b5051_Data> _245695890_builtin_caller_out(jule::Ptr<_2455b6abe_Eval>& _23528_e, jule::Ptr<_2448619c4_FnCallExpr>& _23543_fc, jule::Ptr<_2455b5051_Data>& ) {
	if ((_23543_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_23528_e.ptr(), _23543_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("v", 1))}));
		return nullptr;
	};
	if ((_23543_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_23528_e.ptr(), _23543_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _24413_expr = _2455d26de_eval_expr(_23528_e, _23543_fc.get()._field_args[0LL]);;
	if ((_24413_expr == nullptr)) {
		return nullptr;
	};
	if ((!(_2456087d1_is_builtin_str_convertable(_24413_expr.get()._field_kind)))) {
		_2455b70ca_push_err(_23528_e.ptr(), _23543_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _25413_d = _2455dc83c_build_void_data();;
	_25413_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244922623_BuiltinOutCallExprModel>(_244922623_BuiltinOutCallExprModel{._field_expr=_24413_expr.get()._field_model, }));
	return _25413_d;
}



inline jule::Ptr<_2455b5051_Data> _245617d0c_builtin_caller_outln(jule::Ptr<_2455b6abe_Eval>& _25930_e, jule::Ptr<_2448619c4_FnCallExpr>& _25945_fc, jule::Ptr<_2455b5051_Data>& _25967_d) {
	_25967_d=_245695890_builtin_caller_out(_25930_e,_25945_fc,_25967_d);
	if ((_25967_d == nullptr)) {
		return nullptr;
	};
	_25967_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244922810_BuiltinOutlnCallExprModel>(_244922810_BuiltinOutlnCallExprModel{._field_expr=_25967_d.get()._field_model.operator jule::Ptr<_244922623_BuiltinOutCallExprModel>().get()._field_expr, }));
	return _25967_d;
}



inline jule::Ptr<_2455b5051_Data> _24565e392_builtin_caller_new(jule::Ptr<_2455b6abe_Eval>& _27128_e, jule::Ptr<_2448619c4_FnCallExpr>& _27143_fc, jule::Ptr<_2455b5051_Data>& _27165_d) {
	if ((_27143_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_27128_e.ptr(), _27143_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("type", 4))}));
		return nullptr;
	};
	if ((_27143_fc.get()._field_args.len() > 2LL)) {
		_2455b70ca_push_err(_27128_e.ptr(), _27143_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _28013_t = _2455d20c3_eval_expr_kind(_27128_e, _27143_fc.get()._field_args[0LL].get()._field_kind);;
	if ((_28013_t == nullptr)) {
		return nullptr;
	};
	if ((!(_28013_t.get()._field_decl))) {
		_2455b70ca_push_err(_27128_e.ptr(), _27143_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	};
	if ((!(_245608270_is_valid_for_sptr_type(_28013_t.get()._field_kind)))) {
		jule::Ptr<_244874c5c_StructIns> _29117_s = _2455e458b_strct(_28013_t.get()._field_kind.ptr());;
		if ((((_29117_s != nullptr) && (_29117_s.get()._field_decl != nullptr)) && _29117_s.get()._field_decl.get()._field_cpp_linked)) {
			_2455b70ca_push_err(_27128_e.ptr(), _27143_fc.get()._field_args[0LL].get()._field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
		};
		return nullptr;
	};
	_27165_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_2455e9283_Sptr>(_2455e9283_Sptr{._field_elem=_28013_t.get()._field_kind}), 7)});
	if ((_27143_fc.get()._field_args.len() == 2LL)) {
		jule::Ptr<_2455e1027_TypeKind> _30517_old = _27128_e.get()._field_prefix;;
		_27128_e.get()._field_prefix=_28013_t.get()._field_kind;
		jule::Ptr<_2455b5051_Data> _30817_init = _2455d26de_eval_expr(_27128_e, _27143_fc.get()._field_args[1LL]);;
		_27128_e.get()._field_prefix=_30517_old;
		if ((_30817_init != nullptr)) {
			jule::Ptr<_2431e4523_Token> _31321_token = _27143_fc.get()._field_args[1LL].get()._field_token;;
			;
			_24555c5e2_check_validity_for_init_expr(_27128_e.get()._field_s, (!(_27128_e.get()._field_immutable)),false,_28013_t.get()._field_kind,_30817_init,_31321_token);
			_2455597cb_check_assign_type(_27128_e.get()._field_s, false,_28013_t.get()._field_kind,_30817_init,_31321_token);
			_27165_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244922bd9_BuiltinNewCallExprModel>(_244922bd9_BuiltinNewCallExprModel{._field_kind=_28013_t.get()._field_kind, ._field_init=_30817_init.get()._field_model}));
		};
	} else {
		_27165_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244922bd9_BuiltinNewCallExprModel>(_244922bd9_BuiltinNewCallExprModel{._field_kind=_28013_t.get()._field_kind, }));
	};
	return _27165_d;
}



inline jule::Ptr<_2455b5051_Data> _2456783ab_builtin_caller_panic(jule::Ptr<_2455b6abe_Eval>& _33330_e, jule::Ptr<_2448619c4_FnCallExpr>& _33345_fc, jule::Ptr<_2455b5051_Data>& ) {
	if ((_33345_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_33330_e.ptr(), _33345_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("message", 7))}));
		return nullptr;
	};
	if ((_33345_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_33330_e.ptr(), _33345_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _34213_expr = _2455d26de_eval_expr(_33330_e, _33345_fc.get()._field_args[0LL]);;
	if ((_34213_expr == nullptr)) {
		return nullptr;
	};
	if (((_2455e3139_prim(_34213_expr.get()._field_kind.ptr()) == nullptr) || (!(_2455e8c33_is_str(_2455e3139_prim(_34213_expr.get()._field_kind.ptr()).ptr()))))) {
		_2455b70ca_push_err(_33330_e.ptr(), _33345_fc.get()._field_token,jule::Str("panic function only accepts strings", 35),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _35113_d = _2455dc83c_build_void_data();;
	_35113_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244922dc6_BuiltinPanicCallExprModel>(_244922dc6_BuiltinPanicCallExprModel{._field_token=_33345_fc.get()._field_token, ._field_expr=_34213_expr.get()._field_model}));
	return _35113_d;
}



inline jule::Ptr<_2455b5051_Data> _24567156e_builtin_caller_make(jule::Ptr<_2455b6abe_Eval>& _35929_e, jule::Ptr<_2448619c4_FnCallExpr>& _35944_fc, jule::Ptr<_2455b5051_Data>& _35966_d) {
	if ((_35944_fc.get()._field_args.len() < 2LL)) {
		if ((_35944_fc.get()._field_args.len() == 1LL)) {
			_2455b70ca_push_err(_35929_e.ptr(), _35944_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("size", 4))}));
			return nullptr;
		};
		_2455b70ca_push_err(_35929_e.ptr(), _35944_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("type, size", 10))}));
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _36913_t = _2455d20c3_eval_expr_kind(_35929_e, _35944_fc.get()._field_args[0LL].get()._field_kind);;
	if ((_36913_t == nullptr)) {
		return nullptr;
	};
	{
		
		if ((!(_36913_t.get()._field_decl))) {
			_case_begin_22a03a074:;
			{
				goto _match_end_22a03a508;
			}
		}
		else if ((_2455e40b3_slc(_36913_t.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a03a0da:;
			{
				if ((_35944_fc.get()._field_args.len() > 3LL)) {
					_2455b70ca_push_err(_35929_e.ptr(), _35944_fc.get()._field_args[3LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				};
				goto _julec_label_cont;
			}
		}
		else if (((_2455e3139_prim(_36913_t.get()._field_kind.ptr()) != nullptr) && _2455e8c33_is_str(_2455e3139_prim(_36913_t.get()._field_kind.ptr()).ptr()))) {
			_case_begin_22a03a151:;
			{
				if ((_35944_fc.get()._field_args.len() > 2LL)) {
					_2455b70ca_push_err(_35929_e.ptr(), _35944_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				};
				goto _julec_label_cont;
			}
		}
		_match_end_22a03a508:;
	};
	_2455b70ca_push_err(_35929_e.ptr(), _35944_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	return nullptr;
	_julec_label_cont:;
	_35966_d.get()._field_kind=_36913_t.get()._field_kind;
	jule::Ptr<_2455b5051_Data> _39313_len = _2455d26de_eval_expr(_245558ec3_evalp(_35929_e.get()._field_s, _35929_e.get()._field_lookup,_36913_t.get()._field_kind), _35944_fc.get()._field_args[1LL]);;
	if ((_39313_len == nullptr)) {
		return nullptr;
	};
	_2455c06ee_check_integer_indexing_by_data(_35929_e.ptr(), _39313_len,_35944_fc.get()._field_args[1LL].get()._field_token);
	jule::Ptr<_2449232a0_BuiltinMakeCallExprModel> _40013_model = jule::new_ptr<_2449232a0_BuiltinMakeCallExprModel>(_2449232a0_BuiltinMakeCallExprModel{._field_kind=_36913_t.get()._field_kind, ._field_len=_39313_len.get()._field_model, });;
	_35966_d.get()._field_model=static_cast<jule::Any>(_40013_model);
	if ((_35944_fc.get()._field_args.len() == 3LL)) {
		jule::Ptr<_2455b5051_Data> _40617_cap = _2455d26de_eval_expr(_245558ec3_evalp(_35929_e.get()._field_s, _35929_e.get()._field_lookup,_36913_t.get()._field_kind), _35944_fc.get()._field_args[2LL]);;
		if ((_40617_cap == nullptr)) {
			return _35966_d;
		};
		_2455c06ee_check_integer_indexing_by_data(_35929_e.ptr(), _40617_cap,_35944_fc.get()._field_args[2LL].get()._field_token);
		_40013_model.get()._field_cap=_40617_cap.get()._field_model;
	};
	return _35966_d;
}



inline jule::Ptr<_2455b5051_Data> _24569264a_builtin_caller_append(jule::Ptr<_2455b6abe_Eval>& _41631_e, jule::Ptr<_2448619c4_FnCallExpr>& _41646_fc, jule::Ptr<_2455b5051_Data>& _41668_d) {
	if ((_41646_fc.get()._field_args.len() < 2LL)) {
		if ((_41646_fc.get()._field_args.len() == 1LL)) {
			_2455b70ca_push_err(_41631_e.ptr(), _41646_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		};
		_2455b70ca_push_err(_41631_e.ptr(), _41646_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _42613_t = _2455d26de_eval_expr(_41631_e, _41646_fc.get()._field_args[0LL]);;
	if ((_42613_t == nullptr)) {
		return nullptr;
	};
	if ((_2455e40b3_slc(_42613_t.get()._field_kind.ptr()) == nullptr)) {
		_2455b70ca_push_err(_41631_e.ptr(), _41646_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2449299b0_FnIns> _43613_f = jule::new_ptr<_2449299b0_FnIns>(_2449299b0_FnIns{._field_params=jule::Slice<jule::Ptr<_244928ae1_ParamIns>>::make({jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_mutable=true, }), ._field_kind=_42613_t.get()._field_kind}),jule::new_ptr<_244928ae1_ParamIns>(_244928ae1_ParamIns{._field_decl=jule::new_ptr<_2449254c2_Param>(_2449254c2_Param{._field_mutable=true, ._field_variadic=true, }), ._field_kind=_2455e40b3_slc(_42613_t.get()._field_kind.ptr()).get()._field_elem})}), ._field_result=_42613_t.get()._field_kind, ._field_caller=jule::Fn<jule::Ptr<_2455b5051_Data>(jule::Ptr<_2455b6abe_Eval>&,jule::Ptr<_2448619c4_FnCallExpr>&,jule::Ptr<_2455b5051_Data>&)>(_245679ed4_builtin_caller_common_plain), });;
	_41668_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_43613_f, 1)});
	_41668_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24492205c_CommonIdentExprModel>(_24492205c_CommonIdentExprModel{._field_ident=jule::Str("append", 6)}));
	_41668_d=_245679ed4_builtin_caller_common_plain(_41631_e,_41646_fc,_41668_d);
	if ((_41668_d != nullptr)) {
		jule::Ptr<_24492070e_FnCallExprModel> _46417_model = _41668_d.get()._field_model.operator jule::Ptr<_24492070e_FnCallExprModel>();;
		_41668_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_24492348c_BuiltinAppendCallExprModel>(_24492348c_BuiltinAppendCallExprModel{._field_dest=_46417_model.get()._field_args[0LL], ._field_elements=_46417_model.get()._field_args[1LL]}));
	};
	return _41668_d;
}



inline jule::Ptr<_2455b5051_Data> _245615623_caller_copy_slice(jule::Ptr<_2455b5051_Data>& _47327_dest, jule::Ptr<_2455b6abe_Eval>& _47345_e, jule::Ptr<_2448619c4_FnCallExpr>& _47360_fc, jule::Ptr<_2455b5051_Data>& _47382_d) {
	if ((!(_47327_dest.get()._field_mutable))) {
		_2455b70ca_push_err(_47345_e.ptr(), _47360_fc.get()._field_args[0LL].get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _47813_src = _2455d26de_eval_expr(_47345_e, _47360_fc.get()._field_args[1LL]);;
	if ((_47813_src == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_2455e9be0_Slc> _48213_slc = _2455e40b3_slc(_47813_src.get()._field_kind.ptr());;
	if ((_48213_slc != nullptr)) {
		if (((!(_47813_src.get()._field_mutable)) && _2455e2424_mutable(_48213_slc.get()._field_elem.ptr()))) {
			_2455b70ca_push_err(_47345_e.ptr(), _47360_fc.get()._field_args[1LL].get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
		};
		if ((!(_2455e1731_equals(_47327_dest.get()._field_kind, _47813_src.get()._field_kind)))) {
			_2455b70ca_push_err(_47345_e.ptr(), _47360_fc.get()._field_args[1LL].get()._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_47327_dest.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_47813_src.get()._field_kind.ptr()))}));
		};
	} else {
		jule::Ptr<_2455e59ee_Prim> _49213_dest_prim = _2455e3139_prim(_2455e40b3_slc(_47327_dest.get()._field_kind.ptr()).get()._field_elem.ptr());;
		jule::Ptr<_2455e59ee_Prim> _49313_prim = _2455e3139_prim(_47813_src.get()._field_kind.ptr());;
		if (((((_49213_dest_prim == nullptr) || (_49313_prim == nullptr)) || (!(_2455e8c33_is_str(_49313_prim.ptr())))) || (!(_2455e7308_is_u8(_49213_dest_prim.ptr()))))) {
			_2455b70ca_push_err(_47345_e.ptr(), _47360_fc.get()._field_args[1LL].get()._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_47327_dest.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_47813_src.get()._field_kind.ptr()))}));
		};
	};
	_47382_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)});
	_47382_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244923679_BuiltinCopyCallExprModel>(_244923679_BuiltinCopyCallExprModel{._field_dest=_47327_dest, ._field_src=_47813_src}));
	return _47382_d;
}



inline jule::Ptr<_2455b5051_Data> _2456855a5_caller_copy_str(jule::Ptr<_2455b5051_Data>& _50725_dest, jule::Ptr<_2455b6abe_Eval>& _50743_e, jule::Ptr<_2448619c4_FnCallExpr>& _50758_fc, jule::Ptr<_2455b5051_Data>& _50780_d) {
	if ((!(_50725_dest.get()._field_mutable))) {
		_2455b70ca_push_err(_50743_e.ptr(), _50758_fc.get()._field_args[0LL].get()._field_token,jule::Str("mutable operation cannot used with immutable data", 49),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _51213_src = _2455d26de_eval_expr(_50743_e, _50758_fc.get()._field_args[1LL]);;
	if ((_51213_src == nullptr)) {
		return nullptr;
	};
	{
		
		if ((_2455e3139_prim(_51213_src.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a05826d:;
			{
				if (_2455e8c33_is_str(_2455e3139_prim(_51213_src.get()._field_kind.ptr()).ptr())) {
					goto _julec_label_end;
				};
			}
		}
		else if ((_2455e40b3_slc(_51213_src.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a0582d4:;
			{
				jule::Ptr<_2455e9be0_Slc> _52217_slc = _2455e40b3_slc(_51213_src.get()._field_kind.ptr());;
				if (((_2455e3139_prim(_52217_slc.get()._field_elem.ptr()) != nullptr) && _2455e7308_is_u8(_2455e3139_prim(_52217_slc.get()._field_elem.ptr()).ptr()))) {
					goto _julec_label_end;
				};
			}
		}
		_match_end_22a058702:;
	};
	_2455b70ca_push_err(_50743_e.ptr(), _50758_fc.get()._field_args[1LL].get()._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_50725_dest.get()._field_kind.ptr())),jule::Any(_2455e1423_to_str(_51213_src.get()._field_kind.ptr()))}));
	_julec_label_end:;
	_50780_d.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("int", 3)), 6)});
	_50780_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244923679_BuiltinCopyCallExprModel>(_244923679_BuiltinCopyCallExprModel{._field_dest=_50725_dest, ._field_src=_51213_src}));
	return _50780_d;
}



inline jule::Ptr<_2455b5051_Data> _24567000c_builtin_caller_copy(jule::Ptr<_2455b6abe_Eval>& _53729_e, jule::Ptr<_2448619c4_FnCallExpr>& _53744_fc, jule::Ptr<_2455b5051_Data>& _53766_d) {
	if ((_53744_fc.get()._field_args.len() < 2LL)) {
		if ((_53744_fc.get()._field_args.len() == 1LL)) {
			_2455b70ca_push_err(_53729_e.ptr(), _53744_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		};
		_2455b70ca_push_err(_53729_e.ptr(), _53744_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	};
	if ((_53744_fc.get()._field_args.len() > 2LL)) {
		_2455b70ca_push_err(_53729_e.ptr(), _53744_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _55013_dest = _2455d26de_eval_expr(_53729_e, _53744_fc.get()._field_args[0LL]);;
	{
		
		if ((_55013_dest == nullptr)) {
			_case_begin_22a06294d:;
			{
				return nullptr;
			}
		}
		else if ((_2455e40b3_slc(_55013_dest.get()._field_kind.ptr()) != nullptr)) {
			_case_begin_22a0629b4:;
			{
				return _245615623_caller_copy_slice(_55013_dest,_53729_e,_53744_fc,_53766_d);
			}
		}
		else if (((_2455e3139_prim(_55013_dest.get()._field_kind.ptr()) != nullptr) && _2455e8c33_is_str(_2455e3139_prim(_55013_dest.get()._field_kind.ptr()).ptr()))) {
			_case_begin_22a062a2a:;
			{
				return _2456855a5_caller_copy_str(_55013_dest,_53729_e,_53744_fc,_53766_d);
			}
		}
		else {
			_case_begin_22a0628d7:;
			{
				_2455b70ca_push_err(_53729_e.ptr(), _53744_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_22a062882:;
	};
}



inline jule::Ptr<_2455b5051_Data> _245631c49_builtin_caller_clone(jule::Ptr<_2455b6abe_Eval>& _56430_e, jule::Ptr<_2448619c4_FnCallExpr>& _56445_fc, jule::Ptr<_2455b5051_Data>& ) {
	if ((_56445_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_56430_e.ptr(), _56445_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	};
	if ((_56445_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_56430_e.ptr(), _56445_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _57313_d = _2455d20c3_eval_expr_kind(_56430_e, _56445_fc.get()._field_args[0LL].get()._field_kind);;
	if ((_57313_d == nullptr)) {
		return nullptr;
	};
	if ((!(_2455e2b61_supports_cloning(_57313_d.get()._field_kind.ptr())))) {
		{
			
			if ((_2455e40b3_slc(_57313_d.get()._field_kind.ptr()) != nullptr) || (_2455e4a64_map(_57313_d.get()._field_kind.ptr()) != nullptr) || (_2455e3d4e_arr(_57313_d.get()._field_kind.ptr()) != nullptr) || (_2455e339d_sptr(_57313_d.get()._field_kind.ptr()) != nullptr)) {
				_case_begin_22a0686ac:;
				{
					{
						_2455b70ca_push_err(_56430_e.ptr(), _56445_fc.get()._field_args[0LL].get()._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_57313_d.get()._field_kind.ptr()))}));
					};
				}
			}
			else if ((_2455e458b_strct(_57313_d.get()._field_kind.ptr()) != nullptr)) {
				_case_begin_22a068723:;
				{
					{
						_2455b70ca_push_err(_56430_e.ptr(), _56445_fc.get()._field_args[0LL].get()._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_57313_d.get()._field_kind.ptr())),jule::Any(jule::Str("Clone", 5))}));
					};
				}
			}
			else {
				_case_begin_22a068646:;
				{
					{
						_2455b70ca_push_err(_56430_e.ptr(), _56445_fc.get()._field_args[0LL].get()._field_token,jule::Str("type @ is not support cloning", 29),jule::Slice<jule::Any>::make({jule::Any(_2455e1423_to_str(_57313_d.get()._field_kind.ptr())),jule::Any(jule::Str("Clone", 5))}));
					};
				}
			}
			_match_end_22a06827d:;
		};
	};
	_57313_d.get()._field_mutable=true;
	_57313_d.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_2449229ec_BuiltinCloneCallExprModel>(_2449229ec_BuiltinCloneCallExprModel{._field_expr=_57313_d.get()._field_model}));
	return _57313_d;
}



inline jule::Ptr<_2455b5051_Data> _24564ce1e_builtin_caller_assert(jule::Ptr<_2455b6abe_Eval>& _60631_e, jule::Ptr<_2448619c4_FnCallExpr>& _60646_fc, jule::Ptr<_2455b5051_Data>& ) {
	if ((_60646_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_60631_e.ptr(), _60646_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	};
	if ((_60646_fc.get()._field_args.len() > 2LL)) {
		_2455b70ca_push_err(_60631_e.ptr(), _60646_fc.get()._field_args[2LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _61513_expr = _2455d26de_eval_expr(_60631_e, _60646_fc.get()._field_args[0LL]);;
	if ((_61513_expr == nullptr)) {
		return nullptr;
	};
	if (((_2455e3139_prim(_61513_expr.get()._field_kind.ptr()) == nullptr) || (!(_2455e89be_is_bool(_2455e3139_prim(_61513_expr.get()._field_kind.ptr()).ptr()))))) {
		_2455b70ca_push_err(_60631_e.ptr(), _60646_fc.get()._field_token,jule::Str("assertion requires boolean expression", 37),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2449230b3_BuiltinAssertCallExprModel> _62413_model = jule::new_ptr<_2449230b3_BuiltinAssertCallExprModel>(_2449230b3_BuiltinAssertCallExprModel{._field_token=_60646_fc.get()._field_token, ._field_expr=_61513_expr.get()._field_model, ._field_log=jule::Str("assertion failed", 16)});;
	if ((_60646_fc.get()._field_args.len() == 2LL)) {
		jule::Ptr<_2455b5051_Data> _63217_log = _2455d26de_eval_expr(_60631_e, _60646_fc.get()._field_args[1LL]);;
		if ((_63217_log == nullptr)) {
			return nullptr;
		};
		if ((((!(_2455b5914_is_const(_63217_log.ptr()))) || (_2455e3139_prim(_63217_log.get()._field_kind.ptr()) == nullptr)) || (!(_2455e8c33_is_str(_2455e3139_prim(_63217_log.get()._field_kind.ptr()).ptr()))))) {
			_2455b70ca_push_err(_60631_e.ptr(), _60646_fc.get()._field_args[1LL].get()._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(jule::Str("const str", 9)),jule::Any(_2455e1423_to_str(_63217_log.get()._field_kind.ptr()))}));
			return nullptr;
		};
		_62413_model.get()._field_log=_244917c45_read_str(_63217_log.get()._field_constant.ptr());
	};
	jule::Ptr<_2455b5051_Data> _64513_d = _2455dc83c_build_void_data();;
	_64513_d.get()._field_model=static_cast<jule::Any>(_62413_model);
	return _64513_d;
}



inline jule::Ptr<_2455b5051_Data> _2456a5163_builtin_caller_std_mem_size_of(jule::Ptr<_2455b6abe_Eval>& _65040_e, jule::Ptr<_2448619c4_FnCallExpr>& _65055_fc, jule::Ptr<_2455b5051_Data>& ) {
	jule::Ptr<_2455b5051_Data> _65113_result = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("uint", 4)), 6)}), });;
	if ((_65055_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_65040_e.ptr(), _65055_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("type|expr", 9))}));
		return _65113_result;
	};
	if ((_65055_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_65040_e.ptr(), _65055_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _66313_d = _2455d20c3_eval_expr_kind(_65040_e, _65055_fc.get()._field_args[0LL].get()._field_kind);;
	if ((_66313_d == nullptr)) {
		return _65113_result;
	};
	_65113_result.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244921765_SizeofExprModel>(_244921765_SizeofExprModel{._field_expr=_66313_d.get()._field_model}));
	return _65113_result;
}



inline jule::Ptr<_2455b5051_Data> _2456a5471_builtin_caller_std_mem_align_of(jule::Ptr<_2455b6abe_Eval>& _67241_e, jule::Ptr<_2448619c4_FnCallExpr>& _67256_fc, jule::Ptr<_2455b5051_Data>& ) {
	jule::Ptr<_2455b5051_Data> _67313_result = jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("uint", 4)), 6)}), });;
	if ((_67256_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_67241_e.ptr(), _67256_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("type|expr", 9))}));
		return _67313_result;
	};
	if ((_67256_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_67241_e.ptr(), _67256_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _68513_d = _2455d20c3_eval_expr_kind(_67241_e, _67256_fc.get()._field_args[0LL].get()._field_kind);;
	if ((_68513_d == nullptr)) {
		return _67313_result;
	};
	_67313_result.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244923ec6_AlignofExprModel>(_244923ec6_AlignofExprModel{._field_expr=_68513_d.get()._field_model}));
	return _67313_result;
}



inline jule::Ptr<_2455b5051_Data> _2456a588e_builtin_caller_std_mem_free(jule::Ptr<_2455b6abe_Eval>& _69437_e, jule::Ptr<_2448619c4_FnCallExpr>& _69452_fc, jule::Ptr<_2455b5051_Data>& ) {
	if ((_69452_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_69437_e.ptr(), _69452_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("h", 1))}));
		return nullptr;
	};
	if ((_69452_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_69437_e.ptr(), _69452_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _70313_d = _2455d20c3_eval_expr_kind(_69437_e, _69452_fc.get()._field_args[0LL].get()._field_kind);;
	if ((_70313_d == nullptr)) {
		return nullptr;
	};
	if ((!(_2455e28ec_performs_rc(_70313_d.get()._field_kind.ptr())))) {
		_2455b70ca_push_err(_69437_e.ptr(), _69452_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _71213_result = _2455dc83c_build_void_data();;
	_71213_result.get()._field_model=static_cast<jule::Any>(jule::new_ptr<_244924779_FreeExprModel>(_244924779_FreeExprModel{._field_expr=_70313_d.get()._field_model}));
	return _71213_result;
}



inline jule::Ptr<_2455b5051_Data> _2456a5cbd_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_2455b6abe_Eval>& _71751_e, jule::Ptr<_2448619c4_FnCallExpr>& _71766_fc, jule::Ptr<_2455b5051_Data>& ) {
	if ((_71766_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_71751_e.ptr(), _71766_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	};
	if ((_71766_fc.get()._field_args.len() > 1LL)) {
		_2455b70ca_push_err(_71751_e.ptr(), _71766_fc.get()._field_args[1LL].get()._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	};
	jule::Ptr<_2455b5051_Data> _72613_d = _2455d20c3_eval_expr_kind(_71751_e, _71766_fc.get()._field_args[0LL].get()._field_kind);;
	if ((_72613_d == nullptr)) {
		return nullptr;
	};
	if ((!(_2456087d1_is_builtin_str_convertable(_72613_d.get()._field_kind)))) {
		_2455b70ca_push_err(_71751_e.ptr(), _71766_fc.get()._field_args[0LL].get()._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	};
	return jule::new_ptr<_2455b5051_Data>(_2455b5051_Data{._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(_245608e41_build_prim_type(jule::Str("str", 3)), 6)}), ._field_model=static_cast<jule::Any>(jule::new_ptr<_2449243a0_IntegratedToStrExprModel>(_2449243a0_IntegratedToStrExprModel{._field_expr=_72613_d.get()._field_model})), });
}



inline jule::Ptr<_2455b5051_Data> _2456a61db_builtin_caller_std_jule_integrated_emit(jule::Ptr<_2455b6abe_Eval>& _74449_e, jule::Ptr<_2448619c4_FnCallExpr>& _74464_fc, jule::Ptr<_2455b5051_Data>& _74486_d) {
	if ((!(_2455b7a15_is_unsafe(_74449_e.ptr())))) {
		_2455b70ca_push_err(_74449_e.ptr(), _74464_fc.get()._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	};
	if ((_74464_fc.get()._field_args.len() < 1LL)) {
		_2455b70ca_push_err(_74449_e.ptr(), _74464_fc.get()._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>::make({jule::Any(jule::Str("code", 4))}));
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _75413_argd = _2455d26de_eval_expr(_74449_e, _74464_fc.get()._field_args[0LL]);;
	if ((_75413_argd == nullptr)) {
		return nullptr;
	};
	if (((_2455e3139_prim(_75413_argd.get()._field_kind.ptr()) == nullptr) || (!(_2455e8c33_is_str(_2455e3139_prim(_75413_argd.get()._field_kind.ptr()).ptr()))))) {
		_2455b70ca_push_err(_74449_e.ptr(), _74464_fc.get()._field_args[0LL].get()._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>::make({jule::Any(jule::Str("str", 3)),jule::Any(_2455e1423_to_str(_75413_argd.get()._field_kind.ptr()))}));
		return nullptr;
	};
	if (((!(_2455b5914_is_const(_75413_argd.ptr()))) || (!(_24491a0dd_is_str(_75413_argd.get()._field_constant.ptr()))))) {
		_2455b70ca_push_err(_74449_e.ptr(), _74464_fc.get()._field_args[0LL].get()._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		return nullptr;
	};
	jule::Ptr<_2455b5051_Data> _76913_r = _2455dc83c_build_void_data();;
	jule::Ptr<_2449299b0_FnIns> _77113_f = _2455e4327_fnc(_74486_d.get()._field_kind.ptr());;
	if ((_77113_f.get()._field_generics.len() > 0LL)) {
		_76913_r.get()._field_kind=_77113_f.get()._field_generics[0LL].get()._field_kind;
	};
	jule::Ptr<_24492458c_BackendEmitExprModel> _77613_model = jule::new_ptr<_24492458c_BackendEmitExprModel>(_24492458c_BackendEmitExprModel{._field_code=_244917c45_read_str(_75413_argd.get()._field_constant.ptr()), });;
	if ((_74464_fc.get()._field_args.len() > 1LL)) {
		_77613_model.get()._field_exprs=jule::Slice<jule::Any>::alloc(0LL,(_74464_fc.get()._field_args.len() - 1LL));
		{
			auto expr = _74464_fc.get()._field_args.slice(1LL);
			auto it = expr.begin();
			_iter_begin_22a092bae:;
			if (it != expr.end()) {
				jule::Ptr<_24485c706_Expr> _78221_arg = *it;
				{
					_75413_argd=_2455d20c3_eval_expr_kind(_74449_e, _78221_arg.get()._field_kind);
					if ((_75413_argd == nullptr)) {
						return nullptr;
					};
					_77613_model.get()._field_exprs = jule::alloc_for_append(_77613_model.get()._field_exprs,1);_77613_model.get()._field_exprs.__push(_75413_argd.get()._field_model);;
				}
				_iter_next_22a092bae:;
				++it;
				goto _iter_begin_22a092bae;
			}
			_iter_end_22a092bae:;
		};
	};
	_76913_r.get()._field_model=static_cast<jule::Any>(_77613_model);
	return _76913_r;
}



inline jule::Ptr<_2455b5051_Data> _2456a662b_builtin_caller_std_debug_out(jule::Ptr<_2455b6abe_Eval>& _79538_e, jule::Ptr<_2448619c4_FnCallExpr>& _79553_fc, jule::Ptr<_2455b5051_Data>& _79575_d) {
	_79575_d=_245695890_builtin_caller_out(_79538_e,_79553_fc,_79575_d);
	if ((_79575_d == nullptr)) {
		return nullptr;
	};
	_79575_d.get()._field_model.operator jule::Ptr<_244922623_BuiltinOutCallExprModel>().get()._field_debug=true;
	return _79575_d;
}



inline jule::Ptr<_2455b5051_Data> _2456a6a16_builtin_caller_std_debug_outln(jule::Ptr<_2455b6abe_Eval>& _80540_e, jule::Ptr<_2448619c4_FnCallExpr>& _80555_fc, jule::Ptr<_2455b5051_Data>& _80577_d) {
	_80577_d=_245617d0c_builtin_caller_outln(_80540_e,_80555_fc,_80577_d);
	if ((_80577_d == nullptr)) {
		return nullptr;
	};
	_80577_d.get()._field_model.operator jule::Ptr<_244922810_BuiltinOutlnCallExprModel>().get()._field_debug=true;
	return _80577_d;
}



inline jule::Bool _24579db74_find_module_file(jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>& _1226_dirents) {
	{
		auto &expr = _1226_dirents;
		auto it = expr.begin();
		_iter_begin_22a0980b0:;
		if (it != expr.end()) {
			jule::Ptr<_2410caa8d_DirEntry> &_1312_d = *it;
			{
				if (((!(_2410b81b8_is_dir(_1312_d.get()._field_stat.ptr()))) && (_1312_d.get()._field_name == jule::Str("jule.mod", 8)))) {
					return true;
				};
			}
			_iter_next_22a0980b0:;
			++it;
			goto _iter_begin_22a0980b0;
		}
		_iter_end_22a0980b0:;
	};
	return false;
}



inline jule::Str _24579dca6_find_module_file_deep(jule::Str _2434_path) {
	for (;;) {
		{
			jule::Slice<jule::Ptr<_2410caa8d_DirEntry>> _2617_dirents = ({
				auto except = static__241d9a83a_read(_2434_path);
				(except.ok()) ? (except.result) : ({{
					goto _iter_end_22a098368;
				} jule::Slice<jule::Ptr<_2410caa8d_DirEntry>>();});
			});;
			jule::Bool _3013_exist = _24579db74_find_module_file(_2617_dirents);;
			if (_3013_exist) {
				return _2434_path;
			};
			jule::I32 _3513_n = _2434_path.len();;
			_2434_path=_241ea74c4_dir(_2434_path);
			if ((_2434_path.len() == _3513_n)) {
				goto _iter_end_22a098368;
			};
		}
	_iter_next_22a098368:;
	}
	_iter_end_22a098368:;;
	return jule::Str();
}



inline jule::Slice<_242dbab89_Log> _24579e03c_check_module_file(jule::Str _4626_path) {
	jule::Slice<jule::U8> _479_bytes = ({
		auto except = static__2410b359d_read(_241e8b167_join(jule::Slice<jule::Str>::make({_4626_path,jule::Str("jule.mod", 8)})));
		(except.ok()) ? (except.result) : ({{
			return jule::Slice<_242dbab89_Log>::make({_242dbab89_Log{._field_kind=static_cast<jule::I32>(0LL), ._field_text=jule::Str("module file could not checked because of a problem", 50), }});
		} jule::Slice<jule::U8>();});
	});;
	jule::Str _549_s = _242d63c0e_trim(static_cast<jule::Str>(_479_bytes),jule::Str(" \n\r\t\v", 5));;
	if ((_549_s.len() != 0LL)) {
		return jule::Slice<_242dbab89_Log>::make({_242dbab89_Log{._field_kind=static_cast<jule::I32>(0LL), ._field_text=jule::Str("module file has syntax error(s)", 31), }});
	};
	return nullptr;
}



inline jule::Ptr<_2279da6c5_FileInfo> _2279e237a_parse_file(jule::Ptr<_2431e98ad_File> _2323_f) {
	if ((_2323_f == nullptr)) {
		return nullptr;
	};
	jule::Ptr<_2279da6c5_FileInfo> _2813_finf = jule::new_ptr<_2279da6c5_FileInfo>(_2279da6c5_FileInfo{});;
	std::tie(_2813_finf.get()._field_ast,_2813_finf.get()._field_errors) = _227a38899_parse_fileset(_2323_f);
	if ((_2813_finf.get()._field_errors.len() > 0LL)) {
		_2813_finf.get()._field_ast=nullptr;
	};
	return _2813_finf;
}



inline std::tuple<jule::Ptr<_244823942_Ast>,jule::Slice<_242dbab89_Log>> _227a38899_parse_fileset(jule::Ptr<_2431e98ad_File> _6022_f) {
	jule::Ptr<_227a569b6_Parser> _6113_p = jule::new_ptr<_227a569b6_Parser>(_227a569b6_Parser{});;
	_227a668a5_parse(_6113_p, _6022_f);
	return std::make_tuple(_6113_p.get()._field_ast,_6113_p.get()._field_errors);
}



inline jule::Ptr<_244868503_ScopeTree> _227a392a1_new_scope(void) {
	return jule::new_ptr<_244868503_ScopeTree>();
}



inline std::tuple<jule::Bool,jule::Bool> _227a395ae_is_st(jule::Ptr<_2431e4523_Token> _5010_current, jule::Ptr<_2431e4523_Token> _5027_prev) {
	jule::Bool _5043_ok = jule::Bool();
	jule::Bool _5053_terminated = jule::Bool();
	_5043_ok=((_5010_current.get()._field_id == static_cast<jule::U32>(5LLU)) || (_5027_prev.get()._field_row < _5010_current.get()._field_row));
	_5053_terminated=(_5010_current.get()._field_id == static_cast<jule::U32>(5LLU));
	return std::make_tuple(_5043_ok,_5053_terminated);
}



inline jule::Bool _227a39922_prev_is_incomplete_expr(jule::Slice<jule::Ptr<_2431e4523_Token>>& _5629_tokens, jule::I32& _5648_i) {
	if (((_5648_i > 1LL) && (_5629_tokens[(_5648_i - 2LL)].get()._field_id == static_cast<jule::U32>(23LLU)))) {
		return false;
	};
	{
		jule::Ptr<_2431e4523_Token> _6213_prev = _5629_tokens[(_5648_i - 1LL)];;
		return ((_6213_prev.get()._field_id == static_cast<jule::U32>(20LLU)) || (((_6213_prev.get()._field_id == static_cast<jule::U32>(7LLU)) && _2431e5018_is_bin_op(_6213_prev.get()._field_kind)) && (_6213_prev.get()._field_row < _5629_tokens[_5648_i].get()._field_row)));
	};
}



inline std::tuple<jule::I32,jule::Bool> _227a39cb8_next_st_pos(jule::Slice<jule::Ptr<_2431e4523_Token>>& _7117_tokens, jule::I32 _7135_start) {
	jule::I32 _7213_brace_n = 0LL;;
	jule::I32 _7313_i = _7135_start;;
	for (; (_7313_i < _7117_tokens.len()); (_7313_i)++) {
		{
			jule::Bool _7517_ok = false;;
			jule::Bool _7617_terminated = false;;
			jule::Ptr<_2431e4523_Token> _7713_tok = _7117_tokens[_7313_i];;
			{
				auto &_match_expr{ _7713_tok.get()._field_id };
				
				if (_match_expr == static_cast<jule::U32>(3LLU)) {
					_case_begin_22a12db18:;
					{
						{
							auto &_match_expr{ _7713_tok.get()._field_kind };
							
							if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
								_case_begin_22a1307b8:;
								{
									if (((_7213_brace_n == 0LL) && (_7313_i > _7135_start))) {
										if ((!(_227a39922_prev_is_incomplete_expr(_7117_tokens,_7313_i)))) {
											std::tie(_7517_ok,_7617_terminated) = _227a395ae_is_st(_7713_tok,_7117_tokens[(_7313_i - 1LL)]);
											if (_7517_ok) {
												goto _julec_label_return;
											};
										};
									};
									(_7213_brace_n)++;
								}
							}
							else {
								_case_begin_22a12e443:;
								{
									(_7213_brace_n)--;
									if (((_7213_brace_n == 0LL) && ((_7313_i + 1LL) < _7117_tokens.len()))) {
										std::tie(_7517_ok,_7617_terminated) = _227a395ae_is_st(_7117_tokens[(_7313_i + 1LL)],_7713_tok);
										if (_7517_ok) {
											(_7313_i)++;
											goto _julec_label_return;
										};
									};
								}
							}
							_match_end_22a12e278:;
						};
						goto _iter_next_22a12c254;
					}
				}
				_match_end_22a12dab3:;
			};
			if ((_7213_brace_n != 0LL)) {
				goto _iter_next_22a12c254;
			};
			if ((_7313_i > _7135_start)) {
				if (_227a39922_prev_is_incomplete_expr(_7117_tokens,_7313_i)) {
					goto _iter_next_22a12c254;
				};
				std::tie(_7517_ok,_7617_terminated) = _227a395ae_is_st(_7713_tok,_7117_tokens[(_7313_i - 1LL)]);
			} else {
				std::tie(_7517_ok,_7617_terminated) = _227a395ae_is_st(_7713_tok,_7713_tok);
			};
			if ((!(_7517_ok))) {
				goto _iter_next_22a12c254;
			};
			_julec_label_return:;
			if (_7617_terminated) {
				(_7313_i)++;
			};
			return std::make_tuple(_7313_i,_7617_terminated);
		}
	_iter_next_22a12c254:;
	}
	_iter_end_22a12c254:;;
	return std::make_tuple(_7313_i,false);
}



inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::Bool> _227a3a109_skip_st(jule::I32& _13317_i, jule::Slice<jule::Ptr<_2431e4523_Token>> _13329_tokens) {
	jule::I32 _1349_start = _13317_i;;
	jule::Bool _13513_terminated = false;;
	std::tie(_13317_i,_13513_terminated) = _227a39cb8_next_st_pos(_13329_tokens,_1349_start);
	jule::Slice<jule::Ptr<_2431e4523_Token>> _13713_st_tokens = _13329_tokens.slice(_1349_start,_13317_i);;
	if (_13513_terminated) {
		if ((_13713_st_tokens.len() == 1LL)) {
			std::tie(_13713_st_tokens,_13513_terminated) = _227a3a109_skip_st(_13317_i,_13329_tokens);
			return std::make_tuple(_13713_st_tokens,_13513_terminated);
		};
		_13713_st_tokens=_13713_st_tokens.slice(0LL,(_13713_st_tokens.len() - 1LL));
	};
	return std::make_tuple(_13713_st_tokens,_13513_terminated);
}



inline jule::Slice<jule::Ptr<_227a3a406_stmt>> _227a3a79c_split_stmts(jule::Slice<jule::Ptr<_2431e4523_Token>>& _15521_tokens) {
	jule::Slice<jule::Ptr<_227a3a406_stmt>> _15613_stmts = jule::Slice<jule::Ptr<_227a3a406_stmt>>::alloc(0LL,20LL);;
	jule::I32 _15713_pos = 0LL;;
	while ((_15713_pos < _15521_tokens.len())) {
		{
			jule::Slice<jule::Ptr<_2431e4523_Token>> _15918_stmt;;
			jule::Bool _15924_terminated;;
			std::tie(_15918_stmt,_15924_terminated) = _227a3a109_skip_st(_15713_pos,_15521_tokens);
			_15613_stmts = jule::alloc_for_append(_15613_stmts,1);_15613_stmts.__push(jule::new_ptr<_227a3a406_stmt>(_227a3a406_stmt{._field_tokens=_15918_stmt, ._field_terminated=_15924_terminated}));;
		}
	_iter_next_22a13835e:;
	}
	_iter_end_22a13835e:;;
	return _15613_stmts;
}



inline jule::Slice<jule::Ptr<_2431e4523_Token>> _227a471d2_get_block_expr(jule::Slice<jule::Ptr<_2431e4523_Token>>& _4024_tokens) {
	jule::I32 _4113_brace_n = 0LL;;
	jule::I32 _4213_skip_to_next_brace_close = 0LL;;
	{
		auto &expr = _4024_tokens;
		auto it = expr.begin();
		_iter_begin_22a1ea157:;
		if (it != expr.end()) {
			jule::I32 _439_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _4312_tok = *it;
			{
				{
					auto &_match_expr{ _4312_tok.get()._field_id };
					
					if (_match_expr == static_cast<jule::U32>(16LLU) || _match_expr == static_cast<jule::U32>(17LLU) || _match_expr == static_cast<jule::U32>(35LLU)) {
						_case_begin_22a1eaee3:;
						{
							(_4213_skip_to_next_brace_close)++;
						}
					}
					else if (_match_expr == static_cast<jule::U32>(3LLU)) {
						_case_begin_22a1eb06a:;
						{
							{
								auto &_match_expr{ _4312_tok.get()._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_22a1ebcc4:;
									{
										if (((_4113_brace_n > 0LL) || (_4213_skip_to_next_brace_close > 0LL))) {
											if ((_4213_skip_to_next_brace_close > 0LL)) {
												(_4213_skip_to_next_brace_close)--;
											};
											(_4113_brace_n)++;
											goto _match_end_22a1ebe06;
										};
										return _4024_tokens.slice(0LL,_439_i);
									}
								}
								else if (_match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_22a1ec478:;
									{
										(_4113_brace_n)++;
									}
								}
								else {
									_case_begin_22a1ec016:;
									{
										(_4113_brace_n)--;
									}
								}
								_match_end_22a1ebe06:;
							};
						}
					}
					_match_end_22a1ead17:;
				};
			}
			_iter_next_22a1ea157:;
			++it;
			_439_i++;
			goto _iter_begin_22a1ea157;
		}
		_iter_end_22a1ea157:;
	};
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a47534_split_delim(jule::Slice<jule::Ptr<_2431e4523_Token>>& _7121_tokens, jule::U32 _7139_delim) {
	jule::I32 _7213_range_n = 0LL;;
	{
		auto &expr = _7121_tokens;
		auto it = expr.begin();
		_iter_begin_22a1edbc7:;
		if (it != expr.end()) {
			jule::I32 _739_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _7312_token = *it;
			{
				{
					auto &_match_expr{ _7312_token.get()._field_id };
					
					if (_match_expr == static_cast<jule::U32>(3LLU)) {
						_case_begin_22a1ee7bb:;
						{
							{
								auto &_match_expr{ _7312_token.get()._field_kind };
								
								if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_22a1eee1a:;
									{
										(_7213_range_n)++;
										goto _iter_next_22a1edbc7;
									}
								}
								else {
									_case_begin_22a2001a1:;
									{
										(_7213_range_n)--;
									}
								}
								_match_end_22a1eeed6:;
							};
						}
					}
					else if (_match_expr == _7139_delim) {
						_case_begin_22a1ee843:;
						{
							if ((_7213_range_n == 0LL)) {
								jule::Slice<jule::Ptr<_2431e4523_Token>> _8725_l = _7121_tokens.slice(0LL,_739_i);;
								jule::Slice<jule::Ptr<_2431e4523_Token>> _8825_r = _7121_tokens.slice((_739_i + 1LL));;
								return std::make_tuple(_8725_l,_8825_r);
							};
						}
					}
					_match_end_22a1ee58a:;
				};
			}
			_iter_next_22a1edbc7:;
			++it;
			_739_i++;
			goto _iter_begin_22a1edbc7;
		}
		_iter_end_22a1edbc7:;
	};
	return std::make_tuple(nullptr,nullptr);
}



inline jule::I32 _227a477cb_find_lowest_prec_op(jule::Slice<jule::Ptr<_2431e4523_Token>>& _9825_tokens) {
	jule::U8 _10313_prec = 255LLU;;
	jule::I32 _10413_prec_pos = -1LL;;
	jule::I32 _10613_brace_n = 0LL;;
	jule::Bool _10713_skip_to_next_brace_open = false;;
	{
		auto &expr = _9825_tokens;
		auto it = expr.begin();
		_iter_begin_22a203094:;
		if (it != expr.end()) {
			jule::I32 _1089_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> &_10812_token = *it;
			{
				{
					
					if ((_10812_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
						_case_begin_22a203dec:;
						{
							{
								auto &_match_expr{ _10812_token.get()._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_22a204a35:;
									{
										_10713_skip_to_next_brace_open=false;
										goto _case_begin_22a205272;
									}
								}
								else if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("[", 1)) {
									_case_begin_22a205272:;
									{
										(_10613_brace_n)++;
									}
								}
								else {
									_case_begin_22a204cbb:;
									{
										(_10613_brace_n)--;
									}
								}
								_match_end_22a204b01:;
							};
							goto _iter_next_22a203094;
						}
					}
					else if (_10713_skip_to_next_brace_open) {
						_case_begin_22a203e74:;
						{
							goto _iter_next_22a203094;
						}
					}
					else if ((_10812_token.get()._field_id == static_cast<jule::U32>(16LLU))) {
						_case_begin_22a203eeb:;
						{
							_10713_skip_to_next_brace_open=true;
							goto _iter_next_22a203094;
						}
					}
					else if ((_1089_i == 0LL)) {
						_case_begin_22a204073:;
						{
							goto _iter_next_22a203094;
						}
					}
					else if ((_10812_token.get()._field_id != static_cast<jule::U32>(7LLU))) {
						_case_begin_22a2040ea:;
						{
							goto _iter_next_22a203094;
						}
					}
					else if ((_10613_brace_n > 0LL)) {
						_case_begin_22a204172:;
						{
							goto _iter_next_22a203094;
						}
					}
					_match_end_22a203c87:;
				};
				jule::Ptr<_2431e4523_Token> _13513_left = _9825_tokens[(_1089_i - 1LL)];;
				if (((_13513_left.get()._field_id == static_cast<jule::U32>(7LLU)) || (_13513_left.get()._field_id == static_cast<jule::U32>(11LLU)))) {
					goto _iter_next_22a203094;
				};
				if ((((_1089_i > 1LL) && (_13513_left.get()._field_id == static_cast<jule::U32>(3LLU))) && (_13513_left.get()._field_kind == jule::Str("]", 1)))) {
					jule::Ptr<_2431e4523_Token> _14317_lleft = _9825_tokens[(_1089_i - 2LL)];;
					if (((_14317_lleft.get()._field_id == static_cast<jule::U32>(3LLU)) && (_14317_lleft.get()._field_kind == jule::Str("[", 1)))) {
						if (((_10812_token.get()._field_kind == jule::Str("&", 1)) || (_10812_token.get()._field_kind == jule::Str("*", 1)))) {
							goto _iter_next_22a203094;
						};
					};
				};
				jule::U8 _15213_p = _2431e48ca_prec(_10812_token.ptr());;
				if (((_15213_p != 0LLU) && (_15213_p <= _10313_prec))) {
					_10313_prec=_15213_p;
					_10413_prec_pos=_1089_i;
				};
			}
			_iter_next_22a203094:;
			++it;
			_1089_i++;
			goto _iter_begin_22a203094;
		}
		_iter_end_22a203094:;
	};
	return _10413_prec_pos;
}



inline jule::Ptr<_24485e76e_IdentExpr> _227a47aea_build_ident_expr(jule::Ptr<_2431e4523_Token>& _16226_token) {
	return jule::new_ptr<_24485e76e_IdentExpr>(_24485e76e_IdentExpr{._field_token=_16226_token, ._field_ident=_16226_token.get()._field_kind, ._field_cpp_linked=false});
}



inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::I32> _227a47d92_get_range_expr_tokens(jule::Slice<jule::Ptr<_2431e4523_Token>>& _17031_tokens) {
	jule::I32 _17113_range_n = 0LL;;
	jule::I32 _17213_i = (_17031_tokens.len() - 1LL);;
	for (; (_17213_i >= 0LL); (_17213_i)--) {
		{
			jule::Ptr<_2431e4523_Token> _17413_tok = _17031_tokens[_17213_i];;
			if ((_17413_tok.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _17413_tok.get()._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_22a20ca3d:;
						{
							(_17113_range_n)++;
						}
					}
					else {
						_case_begin_22a20d401:;
						{
							(_17113_range_n)--;
						}
					}
					_match_end_22a20d1e2:;
				};
			};
			if ((_17113_range_n == 0LL)) {
				return std::make_tuple(_17031_tokens.slice(0LL,_17213_i),_17113_range_n);
			};
		}
	_iter_next_22a20c345:;
	}
	_iter_end_22a20c345:;;
	return std::make_tuple(nullptr,_17113_range_n);
}



inline jule::Bool _227a537d7_check_assign_tokens(jule::Slice<jule::Ptr<_2431e4523_Token>>& _1625_tokens) {
	if (((_1625_tokens.len() == 0LL) || (!(_2431e8abb_is_assign(_1625_tokens[0LL].get()._field_id))))) {
		return false;
	};
	jule::I32 _2013_brace_n = 0LL;;
	{
		auto &expr = _1625_tokens;
		auto it = expr.begin();
		_iter_begin_22a2a194a:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> &_2112_t = *it;
			{
				if ((_2112_t.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _2112_t.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a2a2572:;
							{
								(_2013_brace_n)++;
							}
						}
						else {
							_case_begin_22a2a284c:;
							{
								(_2013_brace_n)--;
							}
						}
						_match_end_22a2a263d:;
					};
				};
				if ((_2013_brace_n < 0LL)) {
					return false;
				} else if ((_2013_brace_n > 0LL)) {
					goto _iter_next_22a2a194a;
				} else if (((_2112_t.get()._field_id == static_cast<jule::U32>(7LLU)) && _2431e910a_is_assign_op(_2112_t.get()._field_kind))) {
					return true;
				};
			}
			_iter_next_22a2a194a:;
			++it;
			goto _iter_begin_22a2a194a;
		}
		_iter_end_22a2a194a:;
	};
	return false;
}



inline _242dbab89_Log _227a546c8_make_err(jule::I32 _5213_row, jule::I32 _5223_col, jule::Ptr<_2431e98ad_File>& _5234_f, jule::Str _5244_fmt, jule::Slice<jule::Any> _5257_args) {
	return _242dbab89_Log{._field_kind=static_cast<jule::I32>(1LL), ._field_row=_5213_row, ._field_column=_5223_col, ._field_path=_5234_f.get()._field_path, ._field_text=_242dbb0c9_logf(_5244_fmt,jule::Any(_5257_args)), };
}



inline jule::Slice<jule::Ptr<_2431e4523_Token>> _227a54b6d_range(jule::I32& _7115_i, jule::Str _7123_open, jule::Str _7140_close, jule::Slice<jule::Ptr<_2431e4523_Token>>& _7163_tokens) {
	if ((_7115_i >= _7163_tokens.len())) {
		return nullptr;
	};
	jule::Ptr<_2431e4523_Token> _769_tok = _7163_tokens[_7115_i];;
	if (((_769_tok.get()._field_id != static_cast<jule::U32>(3LLU)) || (_769_tok.get()._field_kind != _7123_open))) {
		return nullptr;
	};
	(_7115_i)++;
	jule::I32 _8213_range_n = 1LL;;
	jule::I32 _839_start = _7115_i;;
	for (; ((_8213_range_n != 0LL) && (_7115_i < _7163_tokens.len())); (_7115_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _8513_token = _7163_tokens[_7115_i];;
			if ((_8513_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _8513_token.get()._field_kind };
					
					if (_match_expr == _7123_open) {
						_case_begin_22a2a8875:;
						{
							(_8213_range_n)++;
						}
					}
					else if (_match_expr == _7140_close) {
						_case_begin_22a2a88ec:;
						{
							(_8213_range_n)--;
						}
					}
					_match_end_22a2a8644:;
				};
			};
		}
	_iter_next_22a2a7137:;
	}
	_iter_end_22a2a7137:;;
	return _7163_tokens.slice(_839_start,(_7115_i - 1LL));
}



inline std::tuple<jule::Slice<jule::Ptr<_2431e4523_Token>>,jule::Slice<jule::Ptr<_2431e4523_Token>>> _227a54e15_range_last(jule::Slice<jule::Ptr<_2431e4523_Token>>& _10620_tokens) {
	jule::Slice<jule::Ptr<_2431e4523_Token>> _10640_cutted = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	jule::Slice<jule::Ptr<_2431e4523_Token>> _10658_cut = jule::Slice<jule::Ptr<_2431e4523_Token>>();
	if ((_10620_tokens.len() == 0LL)) {
		_10640_cutted = _10620_tokens;
		_10658_cut = nullptr;
		return std::make_tuple(_10640_cutted,_10658_cut);
	} else if ((_10620_tokens[(_10620_tokens.len() - 1LL)].get()._field_id != static_cast<jule::U32>(3LLU))) {
		_10640_cutted = _10620_tokens;
		_10658_cut = nullptr;
		return std::make_tuple(_10640_cutted,_10658_cut);
	};
	jule::I32 _11313_brace_n = 0LL;;
	jule::I32 _11413_i = (_10620_tokens.len() - 1LL);;
	for (; (_11413_i >= 0LL); (_11413_i)--) {
		{
			jule::Ptr<_2431e4523_Token> _11613_token = _10620_tokens[_11413_i];;
			if ((_11613_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _11613_token.get()._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_22a2ac02c:;
						{
							(_11313_brace_n)++;
							goto _iter_next_22a2a98cb;
						}
					}
					else {
						_case_begin_22a2ac934:;
						{
							(_11313_brace_n)--;
						}
					}
					_match_end_22a2ac725:;
				};
			};
			if ((_11313_brace_n == 0LL)) {
				_10640_cutted = _10620_tokens.slice(0LL,_11413_i);
				_10658_cut = _10620_tokens.slice(_11413_i);
				return std::make_tuple(_10640_cutted,_10658_cut);
			};
		}
	_iter_next_22a2a98cb:;
	}
	_iter_end_22a2a98cb:;;
	_10640_cutted = _10620_tokens;
	_10658_cut = nullptr;
	return std::make_tuple(_10640_cutted,_10658_cut);
}



inline std::tuple<jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>,jule::Slice<_242dbab89_Log>> _227a55377_parts_kind(jule::Slice<jule::Ptr<_2431e4523_Token>>& _13820_tokens, jule::Str _13838_kind, jule::Bool _13855_expr_must) {
	if ((_13820_tokens.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	};
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _14313_parts = nullptr;;
	jule::Slice<_242dbab89_Log> _14413_errors = nullptr;;
	jule::I32 _14613_range_n = 0LL;;
	jule::I32 _14713_last = 0LL;;
	{
		auto &expr = _13820_tokens;
		auto it = expr.begin();
		_iter_begin_22a2b111e:;
		if (it != expr.end()) {
			jule::I32 _1489_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _14812_token = *it;
			{
				if ((_14812_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _14812_token.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a2b2164:;
							{
								(_14613_range_n)++;
								goto _iter_next_22a2b111e;
							}
						}
						else {
							_case_begin_22a2b243e:;
							{
								(_14613_range_n)--;
							}
						}
						_match_end_22a2b2230:;
					};
				};
				if ((_14613_range_n > 0LL)) {
					goto _iter_next_22a2b111e;
				};
				if ((_14812_token.get()._field_kind == _13838_kind)) {
					if ((_13855_expr_must && ((_1489_i - _14713_last) <= 0LL))) {
						_242dbab89_Log _16721_err = _227a546c8_make_err(_14812_token.get()._field_row,_14812_token.get()._field_column,_14812_token.get()._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());;
						_14413_errors = jule::alloc_for_append(_14413_errors,1);_14413_errors.__push(_16721_err);;
					};
					_14313_parts = jule::alloc_for_append(_14313_parts,1);_14313_parts.__push(_13820_tokens.slice(_14713_last,_1489_i));;
					_14713_last=static_cast<jule::I32>((_1489_i + 1LL));
				};
			}
			_iter_next_22a2b111e:;
			++it;
			_1489_i++;
			goto _iter_begin_22a2b111e;
		}
		_iter_end_22a2b111e:;
	};
	if ((_14713_last < _13820_tokens.len())) {
		_14313_parts = jule::alloc_for_append(_14313_parts,1);_14313_parts.__push(_13820_tokens.slice(_14713_last));;
	} else if ((!(_13855_expr_must))) {
		_14313_parts = jule::alloc_for_append(_14313_parts,1);_14313_parts.__push(jule::Slice<jule::Ptr<_2431e4523_Token>>());;
	};
	return std::make_tuple(_14313_parts,_14413_errors);
}



inline std::tuple<jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>>,jule::Slice<_242dbab89_Log>> _227a55762_parts(jule::Slice<jule::Ptr<_2431e4523_Token>>& _19015_tokens, jule::U32 _19033_id, jule::Bool _19046_expr_must) {
	if ((_19015_tokens.len() == 0LL)) {
		return std::make_tuple(nullptr,nullptr);
	};
	jule::Slice<jule::Slice<jule::Ptr<_2431e4523_Token>>> _19513_parts = nullptr;;
	jule::Slice<_242dbab89_Log> _19613_errors = nullptr;;
	jule::I32 _19813_range_n = 0LL;;
	jule::I32 _19913_last = 0LL;;
	{
		auto &expr = _19015_tokens;
		auto it = expr.begin();
		_iter_begin_22a2b7b3c:;
		if (it != expr.end()) {
			jule::I32 _2009_i = it - expr.begin();
			jule::Ptr<_2431e4523_Token> _20012_token = *it;
			{
				if ((_20012_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
					{
						auto &_match_expr{ _20012_token.get()._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_22a2b8b82:;
							{
								(_19813_range_n)++;
								goto _iter_next_22a2b7b3c;
							}
						}
						else {
							_case_begin_22a2b8e5c:;
							{
								(_19813_range_n)--;
							}
						}
						_match_end_22a2b8c4d:;
					};
				};
				if ((_19813_range_n > 0LL)) {
					goto _iter_next_22a2b7b3c;
				};
				if ((_20012_token.get()._field_id == _19033_id)) {
					if ((_19046_expr_must && ((_2009_i - _19913_last) <= 0LL))) {
						_242dbab89_Log _21921_err = _227a546c8_make_err(_20012_token.get()._field_row,_20012_token.get()._field_column,_20012_token.get()._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());;
						_19613_errors = jule::alloc_for_append(_19613_errors,1);_19613_errors.__push(_21921_err);;
					};
					_19513_parts = jule::alloc_for_append(_19513_parts,1);_19513_parts.__push(_19015_tokens.slice(_19913_last,_2009_i));;
					_19913_last=static_cast<jule::I32>((_2009_i + 1LL));
				};
			}
			_iter_next_22a2b7b3c:;
			++it;
			_2009_i++;
			goto _iter_begin_22a2b7b3c;
		}
		_iter_end_22a2b7b3c:;
	};
	if ((_19913_last < _19015_tokens.len())) {
		_19513_parts = jule::alloc_for_append(_19513_parts,1);_19513_parts.__push(_19015_tokens.slice(_19913_last));;
	} else if ((!(_19046_expr_must))) {
		_19513_parts = jule::alloc_for_append(_19513_parts,1);_19513_parts.__push(jule::Slice<jule::Ptr<_2431e4523_Token>>());;
	};
	return std::make_tuple(_19513_parts,_19613_errors);
}



inline jule::Str _227a55a2b_get_close_kind_of_brace(jule::Str _23628_left) {
	{
		auto &_match_expr{ _23628_left };
		
		if (_match_expr == jule::Str(")", 1)) {
			_case_begin_22a2bc69c:;
			{
				return jule::Str("(", 1);
			}
		}
		else if (_match_expr == jule::Str("}", 1)) {
			_case_begin_22a2bc713:;
			{
				return jule::Str("{", 1);
			}
		}
		else if (_match_expr == jule::Str("]", 1)) {
			_case_begin_22a2bc779:;
			{
				return jule::Str("[", 1);
			}
		}
		else {
			_case_begin_22a2bc15d:;
			{
				return jule::Str();
			}
		}
		_match_end_22a2bc0a3:;
	};
}



inline _242dbab89_Log _227a55de4_compiler_err(jule::Ptr<_2431e4523_Token>& _24918_token, jule::Str& _24934_fmt, jule::Slice<jule::Any> _24947_args) {
	return _242dbab89_Log{._field_kind=static_cast<jule::I32>(1LL), ._field_row=_24918_token.get()._field_row, ._field_column=_24918_token.get()._field_column, ._field_path=_24918_token.get()._field_file.get()._field_path, ._field_text=_242dbb0c9_logf(_24934_fmt,jule::Any(_24947_args)), ._field_line=_2431eaa8a_get_row(_24918_token.get()._field_file.ptr(), _24918_token.get()._field_row), };
}



inline void _227a56356_push_suggestion(_242dbab89_Log* _26031_log, jule::Str _26042_fmt, jule::Slice<jule::Any> _26055_args) {
	_26031_log->_field_suggestion=_242dbb0c9_logf(_26042_fmt,jule::Any(_26055_args));
}



inline jule::Str _227a565ed_tokstoa(jule::Slice<jule::Ptr<_2431e4523_Token>>& _26413_tokens) {
	jule::I32 _26513_n = 0LL;;
	{
		auto &expr = _26413_tokens;
		auto it = expr.begin();
		_iter_begin_22a2c0925:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> &_26612_token = *it;
			{
				_26513_n+=_26612_token.get()._field_kind.len();
			}
			_iter_next_22a2c0925:;
			++it;
			goto _iter_begin_22a2c0925;
		}
		_iter_end_22a2c0925:;
	};
	jule::Str _26913_s = jule::Str::alloc(_26513_n);;
	{
		auto &expr = _26413_tokens;
		auto it = expr.begin();
		_iter_begin_22a2c15e6:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> &_27012_token = *it;
			{
				_26913_s+=_27012_token.get()._field_kind;
			}
			_iter_next_22a2c15e6:;
			++it;
			goto _iter_begin_22a2c15e6;
		}
		_iter_end_22a2c15e6:;
	};
	return _26913_s;
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a672ce_build_void_type(void) {
	return jule::new_ptr<_2448581d5_TypeDecl>();
}



inline jule::Ptr<_2448581d5_TypeDecl> _227a67543_build_prim_type(jule::Ptr<_2431e4523_Token> _2324_t) {
	return jule::new_ptr<_2448581d5_TypeDecl>(_2448581d5_TypeDecl{._field_token=_2324_t, ._field_kind=static_cast<jule::Any>(jule::new_ptr<_24485879b_IdentTypeDecl>(_24485879b_IdentTypeDecl{._field_token=_2324_t, ._field_ident=_2324_t.get()._field_kind, }))});
}



inline jule::I32 _227a67884_map_colon(jule::Slice<jule::Ptr<_2431e4523_Token>>& _3619_tokens, jule::I32& _3642_i) {
	jule::I32 _3652_delim = jule::I32();
	_3652_delim=-1LL;
	jule::I32 _3813_range_n = 0LL;;
	for (; (_3642_i < _3619_tokens.len()); (_3642_i)++) {
		{
			jule::Ptr<_2431e4523_Token> _4013_token = _3619_tokens[_3642_i];;
			if ((_4013_token.get()._field_id == static_cast<jule::U32>(3LLU))) {
				{
					auto &_match_expr{ _4013_token.get()._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_22a43488b:;
						{
							(_3813_range_n)++;
							goto _iter_next_22a434182;
						}
					}
					else {
						_case_begin_22a43524e:;
						{
							(_3813_range_n)--;
						}
					}
					_match_end_22a435040:;
				};
			};
			if ((_3813_range_n == 0LL)) {
				if (((_3619_tokens.len() - _3642_i) == 1LL)) {
					return _3652_delim;
				};
				if ((_3619_tokens[(_3642_i + 1LL)].get()._field_id == static_cast<jule::U32>(11LLU))) {
					_3652_delim = static_cast<jule::I32>((_3642_i + 1LL));
					return _3652_delim;
				};
				goto _iter_end_22a434182;
			};
		}
	_iter_next_22a434182:;
	}
	_iter_end_22a434182:;;
	return _3652_delim;
}



inline std::tuple<jule::Bool,jule::Bool> _2457894bc_check_os(jule::Str _913_arg) {
	jule::Bool _925_ok = jule::Bool();
	jule::Bool _935_exist = jule::Bool();
	_925_ok=false;
	_935_exist=true;
	{
		auto &_match_expr{ _913_arg };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_22a48d395:;
			{
				_925_ok=_242dbe682_is_windows(_242e10dcc_OS);
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_22a48ce99:;
			{
				_925_ok=_242dbe96d_is_darwin(_242e10dcc_OS);
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_22a48cc79:;
			{
				_925_ok=_242dbec15_is_linux(_242e10dcc_OS);
			}
		}
		else if (_match_expr == jule::Str("unix", 4)) {
			_case_begin_22a48cce0:;
			{
				_925_ok=_242dc081a_is_unix(_242e10dcc_OS);
			}
		}
		else {
			_case_begin_22a48c54d:;
			{
				_925_ok=true;
				_935_exist=false;
			}
		}
		_match_end_22a48c95a:;
	};
	return std::make_tuple(_925_ok,_935_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _245778588_check_arch(jule::Str _3015_arg) {
	jule::Bool _3027_ok = jule::Bool();
	jule::Bool _3037_exist = jule::Bool();
	_3027_ok=false;
	_3037_exist=true;
	{
		auto &_match_expr{ _3015_arg };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_22a49051d:;
			{
				_3027_ok=_242dc0034_is_i386(_242ddc903_ARCH);
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_22a4902ed:;
			{
				_3027_ok=_242dc02cb_is_amd64(_242ddc903_ARCH);
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_22a490364:;
			{
				_3027_ok=_242dc0573_is_arm64(_242ddc903_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x64", 3)) {
			_case_begin_22a4903ca:;
			{
				_3027_ok=_242dc0e36_is_64bit(_242ddc903_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x32", 3)) {
			_case_begin_22a490441:;
			{
				_3027_ok=_242dc0b8e_is_32bit(_242ddc903_ARCH);
			}
		}
		else {
			_case_begin_22a48eac2:;
			{
				_3027_ok=true;
				_3037_exist=false;
			}
		}
		_match_end_22a48eece:;
	};
	return std::make_tuple(_3027_ok,_3037_exist);
}



inline jule::Bool _2457736b5_is_pass_file_annotation(jule::Str _5432_p) {
	_5432_p=_241e9e2ac_base(_5432_p);
	jule::I32 _569_n = _5432_p.len();;
	(_5432_p).mut_slice(0LL,(_569_n - _241e8d1ad_ext(_5432_p).len()));;
	jule::Str _6213_a1 = jule::Str();;
	jule::Str _6513_a2 = jule::Str();;
	jule::I32 _6813_i = _242d61e93_find_last_byte(_5432_p,'_');;
	if ((_6813_i == -1LL)) {
		jule::Bool _7118_ok;;
		jule::Bool _7126_exist;;
		std::tie(_7118_ok,_7126_exist) = _2457894bc_check_os(_5432_p);
		if (_7126_exist) {
			return _7118_ok;
		};
		std::tie(_7118_ok,_7126_exist) = _245778588_check_arch(_5432_p);
		return ((!(_7126_exist)) || _7118_ok);
	};
	if (((_6813_i + 1LL) >= _569_n)) {
		return true;
	};
	_6213_a1=_5432_p.slice((_6813_i + 1LL));
	(_5432_p).mut_slice(0LL,_6813_i);;
	_6813_i=static_cast<jule::I32>(_242d61e93_find_last_byte(_5432_p,'_'));
	if ((_6813_i != -1LL)) {
		_6513_a2=_5432_p.slice((_6813_i + 1LL));
	};
	if (_6513_a2.empty()) {
		jule::Bool _9218_ok;;
		jule::Bool _9226_exist;;
		std::tie(_9218_ok,_9226_exist) = _2457894bc_check_os(_6213_a1);
		if (_9226_exist) {
			return _9218_ok;
		};
		std::tie(_9218_ok,_9226_exist) = _245778588_check_arch(_6213_a1);
		return ((!(_9226_exist)) || _9218_ok);
	};
	jule::Bool _10014_ok;;
	jule::Bool _10022_exist;;
	std::tie(_10014_ok,_10022_exist) = _245778588_check_arch(_6213_a1);
	if (_10022_exist) {
		if ((!(_10014_ok))) {
			return false;
		};
		std::tie(_10014_ok,_10022_exist) = _2457894bc_check_os(_6513_a2);
		return ((!(_10022_exist)) || _10014_ok);
	};
	std::tie(_10014_ok,_10022_exist) = _2457894bc_check_os(_6213_a1);
	return ((!(_10022_exist)) || _10014_ok);
}



inline void _24578cd3e_set_os_vars(jule::Slice<jule::Str>& _3621_vars) {
	_3621_vars = jule::alloc_for_append(_3621_vars,1);_3621_vars.__push(_242e10dcc_OS);;
	if (_242dc081a_is_unix(_242e10dcc_OS)) {
		_3621_vars = jule::alloc_for_append(_3621_vars,1);_3621_vars.__push(jule::Str("unix", 4));;
	};
}



inline void _24578d092_set_arch_vars(jule::Slice<jule::Str>& _4423_vars) {
	_4423_vars = jule::alloc_for_append(_4423_vars,1);_4423_vars.__push(_242ddc903_ARCH);;
	if (_242dc0e36_is_64bit(_242ddc903_ARCH)) {
		_4423_vars = jule::alloc_for_append(_4423_vars,1);_4423_vars.__push(jule::Str("x64", 3));;
	};
	if (_242dc0b8e_is_32bit(_242ddc903_ARCH)) {
		_4423_vars = jule::alloc_for_append(_4423_vars,1);_4423_vars.__push(jule::Str("x32", 3));;
	};
}



inline void _24578d34a_init_vars(jule::Slice<jule::Str>& _5519_vars, _24578ca31_CompileInfo& _5533_info) {
	_24578cd3e_set_os_vars(_5519_vars);
	_24578d092_set_arch_vars(_5519_vars);
	if (_5533_info._field_prod) {
		_5519_vars = jule::alloc_for_append(_5519_vars,1);_5519_vars.__push(jule::Str("production", 10));;
	};
	if (_5533_info._field_test) {
		_5519_vars = jule::alloc_for_append(_5519_vars,1);_5519_vars.__push(jule::Str("test", 4));;
	};
	{
		auto &_match_expr{ _5533_info._field_compiler };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_22a49b46e:;
			{
				_5519_vars = jule::alloc_for_append(_5519_vars,1);_5519_vars.__push(jule::Str("clang", 5));;
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_22a49b66c:;
			{
				_5519_vars = jule::alloc_for_append(_5519_vars,1);_5519_vars.__push(jule::Str("gcc", 3));;
			}
		}
		_match_end_22a49c030:;
	};
	{
		auto &_match_expr{ _5533_info._field_cpp_std };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_22a49ce98:;
			{
				_5519_vars = jule::alloc_for_append(_5519_vars,1);_5519_vars.__push(jule::Str("cpp14", 5));;
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_22a49cbe0:;
			{
				_5519_vars = jule::alloc_for_append(_5519_vars,1);_5519_vars.__push(jule::Str("cpp17", 5));;
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_22a49cc56:;
			{
				_5519_vars = jule::alloc_for_append(_5519_vars,1);_5519_vars.__push(jule::Str("cpp20", 5));;
			}
		}
		_match_end_22a49ce43:;
	};
}



inline jule::Slice<jule::U8> _24646ed83_read_buff(jule::Str _3014_path) {
	return ({
		auto except = static__2410b359d_read(_3014_path);
		(except.ok()) ? (except.result) : ({{
			jule::outln(jule::Str("error: file cannot read", 23));
			;
			_242e212d8_exit(1LL);
			return nullptr;
		} jule::Slice<jule::U8>();});
	});
}



inline _242dbab89_Log _24648b50e_flat_compiler_err(jule::Str _4122_text) {
	return _242dbab89_Log{._field_kind=static_cast<jule::I32>(1LL), ._field_text=_4122_text, };
}



inline void _22767ee91_push_passes(jule::Ptr<_24554ad1c_Package>& _11221_p, jule::Slice<jule::Str>& _11245_passes) {
	{
		auto &expr = _11221_p.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a4d0409:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _11317_f = *it;
			{
				_julec_label_push:;
				{
					auto &expr = _11317_f.get()._field_passes;
					auto it = expr.begin();
					_iter_begin_22a4d0ddd:;
					if (it != expr.end()) {
						_24492dc7d_Pass _11516_pass = *it;
						{
							if (_11516_pass._field_text.empty()) {
								goto _iter_next_22a4d0ddd;
							};
							{
								auto &expr = _11245_passes;
								auto it = expr.begin();
								_iter_begin_22a4d1c35:;
								if (it != expr.end()) {
									jule::Str _11920_cpass = *it;
									{
										if ((_11920_cpass == _11516_pass._field_text)) {
											goto _iter_next_22a4d0ddd;
										};
									}
									_iter_next_22a4d1c35:;
									++it;
									goto _iter_begin_22a4d1c35;
								}
								_iter_end_22a4d1c35:;
							};
							_11245_passes = jule::alloc_for_append(_11245_passes,1);_11245_passes.__push(_11516_pass._field_text);;
						}
						_iter_next_22a4d0ddd:;
						++it;
						goto _iter_begin_22a4d0ddd;
					}
					_iter_end_22a4d0ddd:;
				};
			}
			_iter_next_22a4d0409:;
			++it;
			goto _iter_begin_22a4d0409;
		}
		_iter_end_22a4d0409:;
	};
}



inline jule::Slice<jule::Str> _22769478b_get_all_unique_passes(jule::Ptr<_24554ad1c_Package>& _12931_pkg, jule::Slice<jule::Ptr<_245547db3_ImportInfo>> _12956_uses) {
	jule::Slice<jule::Str> _13013_passes = nullptr;;
	_22767ee91_push_passes(_12931_pkg,_13013_passes);
	{
		auto &expr = _12956_uses;
		auto it = expr.begin();
		_iter_begin_22a4d3187:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> _13317_u = *it;
			{
				if ((!(_13317_u.get()._field_cpp_linked))) {
					_22767ee91_push_passes(_13317_u.get()._field_package,_13013_passes);
				};
			}
			_iter_next_22a4d3187:;
			++it;
			goto _iter_begin_22a4d3187;
		}
		_iter_end_22a4d3187:;
	};
	return _13013_passes;
}



inline _24578ca31_CompileInfo _22780a66b_build_compile_info(void) {
	_24578ca31_CompileInfo _14313_info = _24578ca31_CompileInfo{._field_prod=_240e658e5_PRODUCTION, ._field_test=_240e64dab_TEST, };;
	{
		auto &_match_expr{ _240da8816_COMPILER };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_22a4d4991:;
			{
				_14313_info._field_compiler=jule::Str("clang", 5);
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_22a4d4a18:;
			{
				_14313_info._field_compiler=jule::Str("gcc", 3);
			}
		}
		_match_end_22a4d4919:;
	};
	{
		auto &_match_expr{ _240e6455e_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_22a4d3385:;
			{
				_14313_info._field_compiler=jule::Str("cpp14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_22a4d4de2:;
			{
				_14313_info._field_compiler=jule::Str("cpp17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_22a4d4e58:;
			{
				_14313_info._field_compiler=jule::Str("cpp20", 5);
			}
		}
		_match_end_22a4d4cb0:;
	};
	return _14313_info;
}



inline void _227b61c58_eliminate_defines(jule::Ptr<_2276b0301_IR>& _28531_ir) {
	jule::Ptr<_227b31871_ObjectDeadCode> _28613_ocd = static__227b31cc2_new(_28531_ir);;
	_227b6198e_elimanate(_28613_ocd);
}



inline jule::Ptr<_2448249dc_Directive> _227b620dd_find_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>& _29124_directives, jule::Str _29155_tag) {
	{
		auto &expr = _29124_directives;
		auto it = expr.begin();
		_iter_begin_22a527044:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _29217_dr = *it;
			{
				if ((_29217_dr.get()._field_tag.get()._field_kind == _29155_tag)) {
					return _29217_dr;
				};
			}
			_iter_next_22a527044:;
			++it;
			goto _iter_begin_22a527044;
		}
		_iter_end_22a527044:;
	};
	return nullptr;
}



inline jule::Bool _227b6242e_has_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>& _30119_directives, jule::Str _30150_tag) {
	return (_227b620dd_find_directive(_30119_directives,_30150_tag) != nullptr);
}



inline void _227b6607b_eliminate_dead_code_of_scope(jule::Ptr<_24552937d_Scope> _24137_s) {
	jule::Slice<jule::Ptr<_24552bb44_Label>> _2429_labels = jule::Slice<jule::Ptr<_24552bb44_Label>>::alloc(0LL,16LL);;
	jule::Slice<jule::Ptr<_24552be30_GotoSt>> _2439_gotos = jule::Slice<jule::Ptr<_24552be30_GotoSt>>::alloc(0LL,16LL);;
	jule::Ptr<_227b63177_ScopeDeadCode> _24413_sdc = jule::new_ptr<_227b63177_ScopeDeadCode>(_227b63177_ScopeDeadCode{._field_s=_24137_s, ._field_stmts=(&(_24137_s.get()._field_stmts)), ._field_labels=((jule::Ptr<jule::Slice<jule::Ptr<_24552bb44_Label>>>)((&(_2429_labels)))), ._field_gotos=((jule::Ptr<jule::Slice<jule::Ptr<_24552be30_GotoSt>>>)((&(_2439_gotos)))), });;
	{
		_227b65c90_optimize_stmts(_24413_sdc);
	};
}



inline void _227b66312_eliminate_scope_functions(jule::Slice<jule::Ptr<_244926d0e_Fn>>& _25435_funcs) {
	{
		auto &expr = _25435_funcs;
		auto it = expr.begin();
		_iter_begin_22a56a2eb:;
		if (it != expr.end()) {
			jule::Ptr<_244926d0e_Fn> _25517_func = *it;
			{
				{
					auto &expr = _25517_func.get()._field_instances;
					auto it = expr.begin();
					_iter_begin_22a56a906:;
					if (it != expr.end()) {
						jule::Ptr<_2449299b0_FnIns> _25621_ins = *it;
						{
							_227b6607b_eliminate_dead_code_of_scope(_25621_ins.get()._field_scope);
						}
						_iter_next_22a56a906:;
						++it;
						goto _iter_begin_22a56a906;
					}
					_iter_end_22a56a906:;
				};
			}
			_iter_next_22a56a2eb:;
			++it;
			goto _iter_begin_22a56a2eb;
		}
		_iter_end_22a56a2eb:;
	};
}



inline void _227b66565_eliminate_functions_scope_package(jule::Ptr<_24554ad1c_Package>& _26243_pkg) {
	{
		auto &expr = _26243_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a56adbd:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _26317_f = *it;
			{
				_227b66312_eliminate_scope_functions(_26317_f.get()._field_funcs);
			}
			_iter_next_22a56adbd:;
			++it;
			goto _iter_begin_22a56adbd;
		}
		_iter_end_22a56adbd:;
	};
}



inline void _227b6681d_eliminate_scope_package(jule::Ptr<_24554ad1c_Package>& _26833_pkg) {
	_227b66565_eliminate_functions_scope_package(_26833_pkg);
}



inline void _227b66a0a_eliminate_scopes(jule::Ptr<_2276b0301_IR>& _27330_ir) {
	jule::I32 _27413_i = (_27330_ir.get()._field_used.len() - 1LL);;
	for (; (_27413_i >= 0LL); (_27413_i)--) {
		{
			jule::Ptr<_245547db3_ImportInfo> _27617_u = _27330_ir.get()._field_used[_27413_i];;
			if ((!(_27617_u.get()._field_cpp_linked))) {
				_227b6681d_eliminate_scope_package(_27617_u.get()._field_package);
			};
		}
	_iter_next_22a56c991:;
	}
	_iter_end_22a56c991:;;
	_227b6681d_eliminate_scope_package(_27330_ir.get()._field_main);
}



inline jule::Bool _2456acce7_is_std_package(jule::Str _39919_f, jule::Str _39927_p) {
	return _241ec93e7_has_prefix(_39919_f,_241e8b167_join(jule::Slice<jule::Str>::make({_242ddd4e7_PATH_STDLIB,_39927_p})));
}



inline jule::Bool _2456ad116_is_constant_valid_conditional_case(jule::Ptr<_245529779_If>& _40340_i) {
	{
		auto &_match_expr{ _40340_i.get()._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
			_case_begin_22a5e361b:;
			{
				jule::Ptr<_2448ab524_Const> _40613_c = _40340_i.get()._field_expr.operator jule::Ptr<_2448ab524_Const>();;
				return (_244919d79_is_bool(_40613_c.ptr()) && _2449179d1_read_bool(_40613_c.ptr()));
			}
		}
		_match_end_22a5e3462:;
	};
	return false;
}



inline jule::Bool _2456ad3e1_is_unreachable_expr(jule::Any& _41225_expr) {
	{
		auto &_match_expr{ _41225_expr };
		
		if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
			_case_begin_22a5e4034:;
			{
				jule::Ptr<_2448ab524_Const> _41513_c = _41225_expr.operator jule::Ptr<_2448ab524_Const>();;
				return (_244919d79_is_bool(_41513_c.ptr()) && (!(_2449179d1_read_bool(_41513_c.ptr()))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_24491ea82_BinopExprModel>>()) {
			_case_begin_22a5e409a:;
			{
				jule::Ptr<_24491ea82_BinopExprModel> _41813_m = _41225_expr.operator jule::Ptr<_24491ea82_BinopExprModel>();;
				if ((_41813_m.get()._field_op.get()._field_kind == jule::Str("&&", 2))) {
					return (_2456ad3e1_is_unreachable_expr(_41813_m.get()._field_left.get()._field_model) || _2456ad3e1_is_unreachable_expr(_41813_m.get()._field_right.get()._field_model));
				};
			}
		}
		_match_end_22a5e452e:;
	};
	return false;
}



inline jule::Bool _2456ad6ee_is_constant_valid_match_case(jule::Ptr<_24552db9b_Case>& _42634_case) {
	{
		auto &expr = _42634_case.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_22a5e707b:;
		if (it != expr.end()) {
			jule::Ptr<_2455b5051_Data> &_42712_expr = *it;
			{
				if (((_2455b5914_is_const(_42712_expr.ptr()) && _244919d79_is_bool(_42712_expr.get()._field_constant.ptr())) && _2449179d1_read_bool(_42712_expr.get()._field_constant.ptr()))) {
					return true;
				};
			}
			_iter_next_22a5e707b:;
			++it;
			goto _iter_begin_22a5e707b;
		}
		_iter_end_22a5e707b:;
	};
	return false;
}



inline jule::Bool _2456ad996_is_unreachable_conditional_case(jule::Ptr<_245529779_If>& _43537_i) {
	return _2456ad3e1_is_unreachable_expr(_43537_i.get()._field_expr);
}



inline jule::Bool _2456adc71_is_unreachable_match_case(jule::Ptr<_24552db9b_Case>& _43931_case) {
	{
		auto &expr = _43931_case.get()._field_exprs;
		auto it = expr.begin();
		_iter_begin_22a5e8c81:;
		if (it != expr.end()) {
			jule::Ptr<_2455b5051_Data> &_44012_expr = *it;
			{
				if ((!(_2456ad3e1_is_unreachable_expr(_44012_expr.get()._field_model)))) {
					return false;
				};
			}
			_iter_next_22a5e8c81:;
			++it;
			goto _iter_begin_22a5e8c81;
		}
		_iter_end_22a5e8c81:;
	};
	return true;
}



inline std::tuple<jule::Bool,jule::U64> _2456b5dee_check_for_bit_shift_opt(jule::Ptr<_24491e895_OperandExprModel>& _42729_l, jule::Ptr<_24491e895_OperandExprModel>& _42752_r) {
	jule::Bool _42776_ok = jule::Bool();
	jule::U64 _42786_x = jule::U64();
	if (((!(_245528646_is_int(_2455e1423_to_str(_42729_l.get()._field_kind.ptr())))) || (!(_245528646_is_int(_2455e1423_to_str(_42752_r.get()._field_kind.ptr())))))) {
		_42776_ok = false;
		_42786_x = 0LLU;
		return std::make_tuple(_42776_ok,_42786_x);
	};
	{
		auto &_match_expr{ _42752_r.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_2448ab524_Const>>()) {
			_case_begin_22a6328d0:;
			{
				goto _match_end_22a6333a3;
			}
		}
		else {
			_case_begin_22a6334e6:;
			{
				_42776_ok = false;
				_42786_x = 0LLU;
				return std::make_tuple(_42776_ok,_42786_x);
			}
		}
		_match_end_22a6333a3:;
	};
	_42786_x=static_cast<jule::U64>(_244918482_as_u64(_42752_r.get()._field_model.operator jule::Ptr<_2448ab524_Const>().ptr()));
	if (((_42786_x == 0LLU) || ((_42786_x & 1LL) != 0LLU))) {
		_42776_ok = false;
		_42786_x = 0LLU;
		return std::make_tuple(_42776_ok,_42786_x);
	};
	jule::F64 _4419_j = _24543b1a2_log2(static_cast<jule::F64>(static_cast<jule::F64>(_42786_x)));;
	jule::U64 _4429_z = static_cast<jule::U64>(_4419_j);;
	if ((static_cast<jule::F64>(_4429_z) != _4419_j)) {
		_42776_ok = false;
		_42786_x = 0LLU;
		return std::make_tuple(_42776_ok,_42786_x);
	};
	_42776_ok = true;
	_42786_x = _4429_z;
	return std::make_tuple(_42776_ok,_42786_x);
}



inline void _2456b8187_push_opt_level(jule::I32 _3223_level) {
	_2456b66b3_COPY=(_3223_level >= static_cast<jule::I32>(1LL));
	_2456b6a15_DEADCODE=(_3223_level >= static_cast<jule::I32>(1LL));
	_2456b6d23_APPEND=(_3223_level >= static_cast<jule::I32>(1LL));
	_2456b7175_MATH=(_3223_level >= static_cast<jule::I32>(1LL));
	_2456b7483_ACCESS=(_3223_level >= static_cast<jule::I32>(1LL));
	_2456b7791_INLINE=(_3223_level >= static_cast<jule::I32>(1LL));
	_2456b7a9e_PTR=(_3223_level >= static_cast<jule::I32>(1LL));
	_2456b7ebc_COND=(_3223_level >= static_cast<jule::I32>(1LL));
}



inline void _227b075d3_detect_enabled(void) {
	_227a6d769_expr_enabled=(((_2456b7a9e_PTR || _2456b7175_MATH) || _2456b7483_ACCESS) || _2456b7ebc_COND);
	_227a6e8be_scope_enabled=((_2456b7ebc_COND || _2456b6d23_APPEND) || _2456b66b3_COPY);
}



inline void _227b84286_throw(jule::Str _914_msg) {
	jule::outln(_914_msg);
	_242e212d8_exit(1LL);
}



inline jule::U64 _22825ade0_unix(void) {
	return static_cast<jule::U64>(static_cast<jule::U64>(time(nullptr)));
}



inline jule::U64 _22825b231_unix_year_to_seconds(jule::U64 _26225_y, jule::Bool& _26243_leap) {
	if (((_26225_y - 2LLU) <= 136LLU)) {
		jule::U64 _26417_leaps = ((_26225_y - 68LLU) >> 2LLU);;
		_26243_leap=(((_26225_y - 68LLU) & 3LLU) == 0LLU);
		if (_26243_leap) {
			(_26417_leaps)--;
		};
		return static_cast<jule::U64>(((31536000LLU * (_26225_y - 70LLU)) + (86400LLU * _26417_leaps)));
	};
	jule::U64 _27213_leaps = 0LLU;;
	jule::U64 _27313_centuries = 0LLU;;
	jule::U64 _27413_cycles = ((_26225_y - 100LLU) / 400LLU);;
	jule::U64 _27513_rem = ((_26225_y - 100LLU) % 400LL);;
	if ((_27513_rem < 0LLU)) {
		(_27413_cycles)--;
		_27513_rem+=400LLU;
	};
	if ((_27513_rem == 0LLU)) {
		_26243_leap=true;
		_27313_centuries=0LLU;
		_27213_leaps=0LLU;
	} else {
		if ((_27513_rem >= 200LLU)) {
			if ((_27513_rem >= 300LLU)) {
				_27313_centuries=3LLU;
				_27513_rem-=300LLU;
			} else {
				_27313_centuries=2LLU;
				_27513_rem-=200LLU;
			};
		} else {
			if ((_27513_rem >= 100LLU)) {
				_27313_centuries=1LLU;
				_27513_rem-=100LLU;
			} else {
				_27313_centuries=0LLU;
			};
		};
		if ((_27513_rem == 0LLU)) {
			_26243_leap=false;
			_27213_leaps=0LLU;
		} else {
			_27213_leaps=static_cast<jule::U64>((_27513_rem >> 2LLU));
			_27513_rem%=4LL;
			_26243_leap=(_27513_rem == 0LLU);
		};
	};
	_27213_leaps+=((97LLU * _27413_cycles) + (24LLU * _27313_centuries));
	if (_26243_leap) {
		(_27213_leaps)++;
	};
	return static_cast<jule::U64>((((((_26225_y - 100LLU) * 31536000LLU) + (_27213_leaps * 86400LLU)) + 946684800LLU) + 86400LLU));
}



inline jule::U64 _22825b5b6_unix_month_to_seconds(jule::U64 _31926_m, jule::Bool _31939_leap) {
	jule::U64 _32113_t = 0LLU;;
	{
		auto &_match_expr{ _31926_m };
		
		if (_match_expr == 1LL) {
			_case_begin_22a6b0144:;
			{
				_32113_t=2678400LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_22a6b0298:;
			{
				_32113_t=5097600LLU;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_22a6b030e:;
			{
				_32113_t=7776000LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_22a6b0375:;
			{
				_32113_t=10368000LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_22a6b03db:;
			{
				_32113_t=13046400LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_22a6b0452:;
			{
				_32113_t=15638400LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_22a6b04b8:;
			{
				_32113_t=18316800LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_22a6b052e:;
			{
				_32113_t=20995200LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_22a6b0595:;
			{
				_32113_t=23587200LLU;
			}
		}
		else if (_match_expr == 10LL) {
			_case_begin_22a6b060b:;
			{
				_32113_t=26265600LLU;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_22a6b0683:;
			{
				_32113_t=28857600LLU;
			}
		}
		_match_end_22a6b00de:;
	};
	if ((_31939_leap && (_31926_m >= 2LLU))) {
		_32113_t+=86400LLU;
	};
	return _32113_t;
}



inline jule::Bool _2281d54eb_is_copy_optimizable(jule::Ptr<_2455b5051_Data>& _74125_expr) {
	if ((!(_74125_expr.get()._field_lvalue))) {
		return false;
	};
	{
		auto &_match_expr{ _74125_expr.get()._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_24492138b_SlicingExprModel>>()) {
			_case_begin_22a744a47:;
			{
				return false;
			}
		}
		_match_end_22a745064:;
	};
	return true;
}



inline jule::Bool _2281d58a3_is_iter_copy_optimizable(jule::Ptr<_2455b5051_Data>& _75230_expr, jule::Ptr<_24556cc1d_Var>& _75244_v) {
	if (((!(_75230_expr.get()._field_lvalue)) && (!(_2455e2424_mutable(_75230_expr.get()._field_kind.ptr()))))) {
		return true;
	};
	return ((!(_75244_v.get()._field_mutable)) && (!(_75230_expr.get()._field_mutable)));
}



inline jule::Str _2281e39b0_decompose_common_esq(jule::U8 _114125_b) {
	{
		auto &_match_expr{ _114125_b };
		
		if (_match_expr == '\\') {
			_case_begin_22a7e5a3d:;
			{
				return jule::Str("\\\\", 2);
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_22a7e5aa4:;
			{
				return jule::Str("'", 1);
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_22a7e5d07:;
			{
				return jule::Str("\\\"", 2);
			}
		}
		else if (_match_expr == '\a') {
			_case_begin_22a7e5d6d:;
			{
				return jule::Str("\\a", 2);
			}
		}
		else if (_match_expr == '\b') {
			_case_begin_22a7e5dd4:;
			{
				return jule::Str("\\b", 2);
			}
		}
		else if (_match_expr == '\f') {
			_case_begin_22a7e5e4a:;
			{
				return jule::Str("\\f", 2);
			}
		}
		else if (_match_expr == '\n') {
			_case_begin_22a7e5ec2:;
			{
				return jule::Str("\\n", 2);
			}
		}
		else if (_match_expr == '\r') {
			_case_begin_22a7e6049:;
			{
				return jule::Str("\\r", 2);
			}
		}
		else if (_match_expr == '\t') {
			_case_begin_22a7e60c1:;
			{
				return jule::Str("\\t", 2);
			}
		}
		else if (_match_expr == '\v') {
			_case_begin_22a7e6148:;
			{
				return jule::Str("\\v", 2);
			}
		}
		else {
			_case_begin_22a7e58c8:;
			{
				return jule::Str();
			}
		}
		_match_end_22a7e581d:;
	};
}



inline jule::Str _2281e3c9b_sbtoa(jule::U8 _116810_b) {
	if ((_116810_b == 0LLU)) {
		return jule::Str("\\x00", 4);
	};
	if ((_116810_b < 128LLU)) {
		jule::Str _117313_seq = _2281e39b0_decompose_common_esq(_116810_b);;
		if ((!(_117313_seq.empty()))) {
			return _117313_seq;
		};
		if (((32LL <= _116810_b) && (_116810_b <= 126LLU))) {
			return static_cast<jule::Str>(_116810_b);
		};
	};
	jule::Str _11819_seq = _24547d348_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_116810_b)),8LL);;
	if ((_11819_seq.len() == 2LL)) {
		return (jule::Str("\\0", 2) + _11819_seq);
	};
	return (jule::Str("\\", 1) + _11819_seq);
}



inline jule::Str _2281e4043_cstr_bytes(jule::Slice<jule::U8> _118815_bytes) {
	jule::Str _118913_lit = jule::Str::alloc(_118815_bytes.len());;
	{
		auto &expr = _118815_bytes;
		auto it = expr.begin();
		_iter_begin_22a7eb6d1:;
		if (it != expr.end()) {
			jule::U8 &_119012_b = *it;
			{
				_118913_lit+=_2281e3c9b_sbtoa(_119012_b);
			}
			_iter_next_22a7eb6d1:;
			++it;
			goto _iter_begin_22a7eb6d1;
		}
		_iter_end_22a7eb6d1:;
	};
	return _118913_lit;
}



inline jule::Str _2281e4362_cstr_lit(jule::Slice<jule::U8> _119613_bytes) {
	return ((jule::Str("\"", 1) + _2281e4043_cstr_bytes(_119613_bytes)) + jule::Str("\"", 1));
}



inline jule::Str _2281e4670_ftoa(jule::F64 _12009_f, jule::I32 _120017_bitsize) {
	if ((_120017_bitsize != 32LL)) {
		if ((_12009_f == static_cast<jule::F64>(static_cast<jule::I64>(_12009_f)))) {
			return _2281e4917_itoa(static_cast<jule::I64>(static_cast<jule::I64>(_12009_f)));
		};
		if ((_12009_f == static_cast<jule::F64>(static_cast<jule::U64>(_12009_f)))) {
			return _2281e4bae_utoa(static_cast<jule::U64>(static_cast<jule::U64>(_12009_f)));
		};
	};
	jule::Str _120913_m = _24546780a_fmt_float(_12009_f,'f',-1LL,_120017_bitsize);;
	if ((!(_242d62812_contains(_120913_m,jule::Str(".", 1))))) {
		_120913_m+=jule::Str(".0", 2);
	};
	return _120913_m;
}



inline jule::Str _2281e4917_itoa(jule::I64 _12169_x) {
	{
		
		if ((_12169_x == jule::MAX_I64)) {
			_case_begin_22a80084a:;
			{
				return jule::Str("jule::MAX_I64", 13);
			}
		}
		else if ((_12169_x == jule::MIN_I64)) {
			_case_begin_22a8008d3:;
			{
				return jule::Str("jule::MIN_I64", 13);
			}
		}
		_match_end_22a800729:;
	};
	jule::Str _12249_fmt = _24547d6cd_fmt_int(_12169_x,10LL);;
	if (_242dc0e36_is_64bit(jule::Str("i386", 4))) {
		return (_12249_fmt + jule::Str("LL", 2));
	};
	return (_12249_fmt + jule::Str("L", 1));
}



inline jule::Str _2281e4bae_utoa(jule::U64 _12319_x) {
	{
		
		if ((_12319_x == jule::MAX_U64)) {
			_case_begin_22a802671:;
			{
				return jule::Str("jule::MAX_U64", 13);
			}
		}
		_match_end_22a802561:;
	};
	jule::Str _12379_fmt = _24547d348_fmt_uint(_12319_x,10LL);;
	if (_242dc0e36_is_64bit(jule::Str("i386", 4))) {
		return (_12379_fmt + jule::Str("LLU", 3));
	};
	return (_12379_fmt + jule::Str("LU", 2));
}



inline jule::Bool _2281e5066_is_forwarded(jule::Ptr<_24552937d_Scope>& _124418_s) {
	jule::Any _12459_last = _124418_s.get()._field_stmts[(_124418_s.get()._field_stmts.len() - 1LL)];;
	{
		auto &_match_expr{ _12459_last };
		
		if (_match_expr.type_is<jule::Ptr<_2455b5051_Data>>()) {
			_case_begin_22a80494d:;
			{
				{
					auto &_match_expr{ _12459_last.operator jule::Ptr<_2455b5051_Data>().get()._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_244923866_BuiltinErrorCallExprModel>>()) {
						_case_begin_22a805564:;
						{
							return true;
						}
					}
					else {
						_case_begin_22a8054ed:;
						{
							return false;
						}
					}
					_match_end_22a805234:;
				};
			}
		}
		else {
			_case_begin_22a804893:;
			{
				return true;
			}
		}
		_match_end_22a80483d:;
	};
}



inline jule::Bool _2281e5330_is_builtin_call_has_debuginf(jule::Ptr<_24492070e_FnCallExprModel>& _125934_m) {
	if ((!(_24492ad46_is_builtin(_125934_m.get()._field_func.ptr())))) {
		return false;
	};
	{
		auto &_match_expr{ _125934_m.get()._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_244922249_CommonSubIdentExprModel>>()) {
			_case_begin_22a806301:;
			{
				jule::Ptr<_244922249_CommonSubIdentExprModel> _126513_csie = _125934_m.get()._field_expr.operator jule::Ptr<_244922249_CommonSubIdentExprModel>();;
				return (_126513_csie.get()._field_ident == jule::Str("swap", 4));
			}
		}
		else {
			_case_begin_22a804ed1:;
			{
				return false;
			}
		}
		_match_end_22a804e7b:;
	};
}



inline void _228261467_iter_files(jule::Ptr<_24554ad1c_Package>& _100120_pkg, jule::Fn<void(jule::Ptr<_2455b02e3_SymbolTable>&)> _100135_f) {
	{
		auto &expr = _100120_pkg.get()._field_files;
		auto it = expr.begin();
		_iter_begin_22a94189d:;
		if (it != expr.end()) {
			jule::Ptr<_2455b02e3_SymbolTable> _100217_file = *it;
			{
				_100135_f(_100217_file);
			}
			_iter_next_22a94189d:;
			++it;
			goto _iter_begin_22a94189d;
		}
		_iter_end_22a94189d:;
	};
}



inline void _2282616ba_prepare_structure(jule::Ptr<_244848912_Struct>& _100727_s) {
	{
		auto &expr = _100727_s.get()._field_instances;
		auto it = expr.begin();
		_iter_begin_22a9424b4:;
		if (it != expr.end()) {
			jule::Ptr<_244874c5c_StructIns> _100817_ins = *it;
			{
				{
					auto &expr = _100817_ins.get()._field_methods;
					auto it = expr.begin();
					_iter_begin_22a942bce:;
					if (it != expr.end()) {
						jule::Ptr<_244926d0e_Fn> _100921_m = *it;
						{
							if (_100921_m.get()._field_statically) {
								goto _iter_next_22a942bce;
							};
							{
								auto &expr = _100921_m.get()._field_instances;
								auto it = expr.begin();
								_iter_begin_22a9439b0:;
								if (it != expr.end()) {
									jule::Ptr<_2449299b0_FnIns> _101325_mins = *it;
									{
										jule::Ptr<_244928ae1_ParamIns> _101425_p = _101325_mins.get()._field_params[0LL];;
										if ((!(_244925d63_is_ref(_101425_p.get()._field_decl.ptr())))) {
											_101425_p.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_228262677_CustomType>(_228262677_CustomType{._field_kind=static__22826402a_as_ptr(static__228267528_kind(_101425_p.get()._field_kind))}), 13)});
										} else {
											_101425_p.get()._field_kind=jule::new_ptr<_2455e1027_TypeKind>(_2455e1027_TypeKind{._field_kind=jule::Trait<_2455e0ae8_Kind>(jule::new_ptr<_228262677_CustomType>(_228262677_CustomType{._field_kind=static__228267528_kind(_101425_p.get()._field_kind)}), 13)});
										};
									}
									_iter_next_22a9439b0:;
									++it;
									goto _iter_begin_22a9439b0;
								}
								_iter_end_22a9439b0:;
							};
						}
						_iter_next_22a942bce:;
						++it;
						goto _iter_begin_22a942bce;
					}
					_iter_end_22a942bce:;
				};
			}
			_iter_next_22a9424b4:;
			++it;
			goto _iter_begin_22a9424b4;
		}
		_iter_end_22a9424b4:;
	};
}



inline jule::Str _228261962_concat_all_parts(jule::Slice<jule::Ptr<_2431e4523_Token>> _103421_parts) {
	jule::I32 _103513_n = 0LL;;
	{
		auto &expr = _103421_parts;
		auto it = expr.begin();
		_iter_begin_22a9429d1:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> &_103612_part = *it;
			{
				_103513_n+=_103612_part.get()._field_kind.len();
			}
			_iter_next_22a9429d1:;
			++it;
			goto _iter_begin_22a9429d1;
		}
		_iter_end_22a9429d1:;
	};
	if ((_103513_n == 0LL)) {
		return jule::Str();
	};
	jule::Str _104213_s = jule::Str::alloc(_103513_n);;
	{
		auto &expr = _103421_parts;
		auto it = expr.begin();
		_iter_begin_22a947475:;
		if (it != expr.end()) {
			jule::Ptr<_2431e4523_Token> &_104312_p = *it;
			{
				_104213_s+=_104312_p.get()._field_kind;
			}
			_iter_next_22a947475:;
			++it;
			goto _iter_begin_22a947475;
		}
		_iter_end_22a947475:;
	};
	return _104213_s;
}



inline jule::Ptr<_2448249dc_Directive> _228269d88_find_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>& _32924_directives, jule::Str _32955_tag) {
	{
		auto &expr = _32924_directives;
		auto it = expr.begin();
		_iter_begin_22aa16104:;
		if (it != expr.end()) {
			jule::Ptr<_2448249dc_Directive> _33017_dr = *it;
			{
				if ((_33017_dr.get()._field_tag.get()._field_kind == _32955_tag)) {
					return _33017_dr;
				};
			}
			_iter_next_22aa16104:;
			++it;
			goto _iter_begin_22aa16104;
		}
		_iter_end_22aa16104:;
	};
	return nullptr;
}



inline jule::Bool _22826a21d_has_directive(jule::Slice<jule::Ptr<_2448249dc_Directive>>& _33919_directives, jule::Str _33950_tag) {
	return (_228269d88_find_directive(_33919_directives,_33950_tag) != nullptr);
}



inline void _242d876b1_print_error_message(jule::Str _3024_msg) {
	jule::outln(_3024_msg);
}



inline void _242d9cc15_help(jule::Slice<jule::Str>& _3510_args) {
	if ((_3510_args.len() > 2LL)) {
		_242d876b1_print_error_message((jule::Str("invalid command: ", 17) + _3510_args[2LL]));
		return;;
	};
	jule::I32 _4113_max = _242d8ae01_HELP_MAP[0LL][0LL].len();;
	{
		auto &expr = _242d8ae01_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_22aa8d797:;
		if (it != expr.end()) {
			jule::Array<jule::Str,2> &_4212_k = *it;
			{
				jule::I32 _4313_n = _4212_k[0LL].len();;
				if ((_4313_n > _4113_max)) {
					_4113_max=_4313_n;
				};
			}
			_iter_next_22aa8d797:;
			++it;
			goto _iter_begin_22aa8d797;
		}
		_iter_end_22aa8d797:;
	};
	jule::Str _4913_s = jule::Str();;
	;
	{
		auto &expr = _242d8ae01_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_22aa90414:;
		if (it != expr.end()) {
			jule::I32 _519_i = it - expr.begin();
			jule::Array<jule::Str,2> &_5112_part = *it;
			{
				_4913_s+=_5112_part[0LL];
				_4913_s+=_241ec9e0e_repeat(jule::Str(" ", 1),static_cast<jule::I32>(((_4113_max - _5112_part[0LL].len()) + 5LL)));
				_4913_s+=_5112_part[1LL];
				if (((_519_i + 1LL) < 5LL)) {
					_4913_s+=jule::Str("\n", 1);
				};
			}
			_iter_next_22aa90414:;
			++it;
			_519_i++;
			goto _iter_begin_22aa90414;
		}
		_iter_end_22aa90414:;
	};
	jule::outln(_4913_s);
}



inline void _242d9e5c9_version(jule::Slice<jule::Str>& _6313_args) {
	if ((_6313_args.len() > 2LL)) {
		_242d876b1_print_error_message((jule::Str("invalid command: ", 17) + _6313_args[2LL]));
		return;;
	};
	jule::outln(jule::Str("jule0.0.12 @master", 18));
}



inline void _242d9ed27_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto &expr = _242dbe099_DISTOS;
		auto it = expr.begin();
		_iter_begin_22aa9388a:;
		if (it != expr.end()) {
			jule::Str &_7412_os = *it;
			{
				jule::out(_7412_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_22aa9388a:;
			++it;
			goto _iter_begin_22aa9388a;
		}
		_iter_end_22aa9388a:;
	};
	jule::outln(jule::Str());
}



inline void _242da0575_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto &expr = _242dbe42e_DISTARCH;
		auto it = expr.begin();
		_iter_begin_22aa940c7:;
		if (it != expr.end()) {
			jule::Str &_8412_arch = *it;
			{
				jule::out(_8412_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_22aa940c7:;
			++it;
			goto _iter_begin_22aa940c7;
		}
		_iter_end_22aa940c7:;
	};
	jule::outln(jule::Str());
}



inline void _242da0cc3_tool(jule::Slice<jule::Str>& _9210_args) {
	if ((_9210_args.len() == 2LL)) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;;
	} else if ((_9210_args.len() > 3LL)) {
		_242d876b1_print_error_message((jule::Str("invalid command: ", 17) + _9210_args[3LL]));
		return;;
	};
	jule::Str _1039_cmd = _9210_args[2LL];;
	{
		auto &_match_expr{ _1039_cmd };
		
		if (_match_expr == jule::Str("distos", 6)) {
			_case_begin_22aa972b7:;
			{
				_242d9ed27_tool_distos();
			}
		}
		else if (_match_expr == jule::Str("distarch", 8)) {
			_case_begin_22aa96ea9:;
			{
				_242da0575_tool_distarch();
			}
		}
		else {
			_case_begin_22aa9577c:;
			{
				_242d876b1_print_error_message((jule::Str("undefined command: ", 19) + _1039_cmd));
			}
		}
		_match_end_22aa96cde:;
	};
}



inline void _242da1521_julenv(jule::Slice<jule::Str>& _11512_args) {
	if ((_11512_args.len() > 2LL)) {
		_242d876b1_print_error_message((jule::Str("invalid command: ", 17) + _11512_args[2LL]));
		return;;
	};
	jule::outln(jule::Str("julec version: jule0.0.12 @master", 33));
	jule::outln(jule::Str("architecture: i386", 18));
	jule::outln(jule::Str("operating system: windows", 25));
	jule::outln((jule::Str("default compiler: ", 18) + _240da8816_COMPILER));
	jule::outln((jule::Str("default C++ standard: ", 22) + _240e6455e_CPP_STD));
}



inline void _242d885b3_mod(jule::Slice<jule::Str>& _1289_args) {
	if ((_1289_args.len() == 2LL)) {
		jule::outln(jule::Str("command is not given, try julec mod init", 40));
		return;;
	};
	if ((_1289_args.len() > 3LL)) {
		_242d876b1_print_error_message((jule::Str("invalid command: ", 17) + _1289_args[3LL]));
		return;;
	};
	{
		auto &_match_expr{ _1289_args[2LL] };
		
		if (_match_expr == jule::Str("init", 4)) {
			_case_begin_22aa9b82c:;
			{
				({
					auto except = static__2410b4082_write(jule::Str("jule.mod", 8),jule::Slice<jule::U8>(),432LL);
					if (!except.ok()) {
						_242d876b1_print_error_message(jule::Str("module could not generated because of a problem", 47));
					}
				});
			}
		}
		else {
			_case_begin_22aa9a155:;
			{
				_242d876b1_print_error_message((jule::Str("invalid command: ", 17) + _1289_args[2LL]));
			}
		}
		_match_end_22aa9b3ba:;
	};
}



inline jule::Bool _242dad000_process_command(jule::Slice<jule::Str>& _15121_args) {
	{
		auto &_match_expr{ _15121_args[1LL] };
		
		if (_match_expr == jule::Str("help", 4)) {
			_case_begin_22aa9ca81:;
			{
				_242d9cc15_help(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("version", 7)) {
			_case_begin_22aa9cae7:;
			{
				_242d9e5c9_version(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("tool", 4)) {
			_case_begin_22aa9cb5d:;
			{
				_242da0cc3_tool(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("julenv", 6)) {
			_case_begin_22aa9d345:;
			{
				_242da1521_julenv(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("mod", 3)) {
			_case_begin_22aa9d3ab:;
			{
				_242d885b3_mod(_15121_args);
			}
		}
		else {
			_case_begin_22aa9c9a4:;
			{
				return false;
			}
		}
		_match_end_22aa9c8d8:;
	};
	return true;
}



inline void _240ebbd03_show_info(void) {
	jule::outln(jule::Str("JuleC is a tool for Jule source code and developers.\n\nCommands:\n    help          Show help,\n    version       Show version,\n    tool          Tools for effective Jule,\n    julenv        Show information about native jule environment\n    mod           Module management\n\nCompilation:\n    julec [OPTIONS] INPUT\n", 310));
}



void entry_point(void) {
	jule::Slice<jule::Str> _18713_args = _241e36cd3_args();;
	if ((_18713_args.len() < 2LL)) {
		_240ebbd03_show_info();
		return;;
	};
	if (_242dad000_process_command(_18713_args)) {
		return;;
	};
	_2282a2e59_compile_command(_18713_args);
}



inline void _242d8e6eb_enable_vtp(void) {
	jule::Uintptr _199_h_out = _241ca18a6_get_std_handle(static_cast<jule::Uintptr>(4294967285LLU));;
	if ((_199_h_out == jule::MAX_U64)) {
		return;;
	};
	jule::I32 _2413_dw_mode = 0LL;;
	if ((!(_241ca45ac_get_console_mode(_199_h_out,_2413_dw_mode)))) {
		return;;
	};
	_2413_dw_mode|=4LL;
	_241ca48ed_set_console_mode(_199_h_out,_2413_dw_mode);
}



inline void _242da205a_init(void) {
	_242d8e6eb_enable_vtp();
}



inline void _227c0d82c_init(void) {
	_240da8816_COMPILER=jule::Str("clang", 5);
}



inline jule::Ptr<_241cb4b2d_File> _2280a6eb1_open_output(jule::Str& _4817_path) {
	jule::Str _499_dir = _241ea74c4_dir(_4817_path);;
	({
		auto except = static__241ddc2b6_of(_499_dir);
		if (!except.ok()) {
			({
				auto except = static__241d9d332_create(_499_dir);
				if (!except.ok()) {
					_227b84286_throw(jule::Str("a problem occurs when code generation", 37));
				}
			});
		}
	});
	return ({
		auto except = static__2410b2a20_create(_4817_path);
		(except.ok()) ? (except.result) : ({
			_227b84286_throw(jule::Str("a problem occurs when code generation", 37));
			nullptr;
		});
	});
}



inline void _22826dd59_clear_objects(void) {
	({
		auto except = static__241d1e36e_remove(_2280a6323_get_compile_path());
		if (!except.ok()) {
			jule::outln(jule::Str("a problem occurs when object cleaning", 37));
			return;;
		}
	});
	static__241e035c9_remove(_22826b64d_OUT_DIR);
}



inline void _22827090a_compile_ir(jule::Str _7715_compiler, jule::Str _7730_compiler_cmd) {
	jule::Ptr<_242e092c1_Cmd> _7813_cmd = static__242e09700_new(_7715_compiler);;
	_7813_cmd.get()._field_args=jule::Slice<jule::Str>::make({_7715_compiler});
	_7813_cmd.get()._field_args=jule::append(_7813_cmd.get()._field_args,_242d626d0_split(_7730_compiler_cmd,jule::Str(" ", 1),-1LL));
	jule::I32 _819_status = ({
		auto except = _242e09964_spawn(_7813_cmd.ptr());
		(except.ok()) ? (except.result) : ({
			{
				auto &_match_expr{ except.error };
				
				if (jule::Any(static_cast<jule::I32>(12LL)) == _match_expr) {
					_case_begin_22aaa7717:;
					{
						static__227b81a36_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of fork problem", 56));
					}
				}
				else if (jule::Any(static_cast<jule::I32>(3LL)) == _match_expr) {
					_case_begin_22aaa6edb:;
					{
						static__227b81a36_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of compiler path is not exist", 70));
					}
				}
				else if (jule::Any(static_cast<jule::I32>(9LL)) == _match_expr) {
					_case_begin_22aaa7250:;
					{
						static__227b81a36_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of compiler path is not in the proper format", 85));
					}
				}
				else if (jule::Any(static_cast<jule::I32>(0LL)) == _match_expr) {
					_case_begin_22aaa72b6:;
					{
						static__227b81a36_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of permission denied", 61));
					}
				}
				else {
					_case_begin_22aaa712e:;
					{
						static__227b81a36_print(jule::Str("\033[31m", 5),jule::Str("back-end compiler could not used because of unkown problem", 58));
					}
				}
				_match_end_22aaa7074:;
			};
			_227b84286_throw(jule::Str());
			0LL;
		});
	});;
	if ((_819_status != 0LL)) {
		jule::Str _9813_error_message = ((jule::Str("\n>>> your backend compiler (", 28) + _240da8816_COMPILER) + jule::Str(") reports problems\n>>> please check errors above\n>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose", 149));;
		static__227b81a36_print(jule::Str("\033[31m", 5),_9813_error_message);
		_227b84286_throw(jule::Str());
	};
	_22826dd59_clear_objects();
}



inline jule::Bool _22827bae2_is_cpp_source_file(jule::Str _10923_path) {
	jule::I32 _1109_offset = _242d61e93_find_last_byte(_10923_path,'.');;
	if ((_1109_offset == -1LL)) {
		return false;
	};
	return _242dae4b8_is_valid_cpp_ext(_10923_path.slice(_1109_offset));
}



inline void _22826c1ba_push_comp_cmd_clang(jule::Str& _11729_cmd) {
	_11729_cmd+=jule::Str("-Wno-everything ", 16);
	_11729_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _240e6455e_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_22aaac123:;
			{
				_11729_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_22aaac189:;
			{
				_11729_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_22aaac2dd:;
			{
				_11729_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_22aaabed0:;
	};
	_11729_cmd+=jule::Str(" ", 1);
	if (_240e658e5_PRODUCTION) {
		_11729_cmd+=jule::Str("-O3 ", 4);
		_11729_cmd+=jule::Str("-flto ", 6);
		_11729_cmd+=jule::Str("-DNDEBUG ", 9);
		_11729_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_11729_cmd+=jule::Str("-O0 ", 4);
	};
}



inline void _22826a460_push_comp_cmd_gcc(jule::Str& _14327_cmd) {
	_14327_cmd+=jule::Str("-w ", 3);
	_14327_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _240e6455e_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_22aaae862:;
			{
				_14327_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_22aaae8c8:;
			{
				_14327_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_22aaaea2c:;
			{
				_14327_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_22aaae71e:;
	};
	_14327_cmd+=jule::Str(" ", 1);
	if (_240e658e5_PRODUCTION) {
		_14327_cmd+=jule::Str("-O3 ", 4);
		_14327_cmd+=jule::Str("-DNDEBUG ", 9);
		_14327_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_14327_cmd+=jule::Str("-O0 ", 4);
	};
}



inline std::tuple<jule::Str,jule::Str> _228011b85_gen_compile_cmd(jule::Str _16920_source_path, jule::Ptr<_2276b0301_IR>& _16939_ir) {
	jule::Str &_17010_compiler = _240e642ea_COMPILER_PATH;;
	jule::Str _17113_cmd = jule::Str::alloc(64LL);;
	{
		auto &_match_expr{ _240da8816_COMPILER };
		
		if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_22aab226b:;
			{
				_22826a460_push_comp_cmd_gcc(_17113_cmd);
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_22aab27bb:;
			{
				_22826c1ba_push_comp_cmd_clang(_17113_cmd);
			}
		}
		_match_end_22aab2557:;
	};
	{
		auto &expr = _16939_ir.get()._field_passes;
		auto it = expr.begin();
		_iter_begin_22aab2b0c:;
		if (it != expr.end()) {
			jule::Str &_18112_pass = *it;
			{
				_17113_cmd+=_18112_pass;
				_17113_cmd+=jule::Str(" ", 1);
			}
			_iter_next_22aab2b0c:;
			++it;
			goto _iter_begin_22aab2b0c;
		}
		_iter_end_22aab2b0c:;
	};
	{
		auto &expr = _16939_ir.get()._field_used;
		auto it = expr.begin();
		_iter_begin_22aab3ed7:;
		if (it != expr.end()) {
			jule::Ptr<_245547db3_ImportInfo> &_18712_u = *it;
			{
				if ((_18712_u.get()._field_cpp_linked && _22827bae2_is_cpp_source_file(_18712_u.get()._field_path))) {
					_17113_cmd+=_18712_u.get()._field_path;
					_17113_cmd+=jule::Str(" ", 1);
				};
			}
			_iter_next_22aab3ed7:;
			++it;
			goto _iter_begin_22aab3ed7;
		}
		_iter_end_22aab3ed7:;
	};
	if ((!(_228272ab6_OUT.empty()))) {
		_17113_cmd+=jule::Str("-o ", 3);
		_17113_cmd+=_228272ab6_OUT;
		_17113_cmd+=jule::Str(" ", 1);
	};
	_17113_cmd+=_16920_source_path;
	return std::make_tuple(_17010_compiler,_17113_cmd);
}



inline jule::Str _2280a6323_get_compile_path(void) {
	return _241e8b167_join(jule::Slice<jule::Str>::make({_22826b64d_OUT_DIR,_2282710c0_OUT_NAME}));
}



inline void _227d85b5d_apply_target_independent_optimizations(jule::Ptr<_2276b0301_IR>& _21048_ir) {
	jule::Ptr<_227b3b936_Optimizer> _21213_opt = static__227a9a224_new(_21048_ir);;
	_227b05da6_optimize(_21213_opt.ptr());
}



inline void _2280a925a_check_compiler_flag(void) {
	{
		auto &_match_expr{ _240da8816_COMPILER };
		
		if (_match_expr == jule::Str()) {
			_case_begin_22aab5ea6:;
			{
				_227b84286_throw(jule::Str("missing option value: --compiler", 32));
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_22aab66e3:;
			{
				if (_240e642ea_COMPILER_PATH.empty()) {
					_240e642ea_COMPILER_PATH=jule::Str("clang++", 7);
				};
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_22aab6759:;
			{
				if (_240e642ea_COMPILER_PATH.empty()) {
					_240e642ea_COMPILER_PATH=jule::Str("g++", 3);
				};
			}
		}
		else {
			_case_begin_22aab667c:;
			{
				_227b84286_throw((jule::Str("invalid option value for --compiler: ", 37) + _240da8816_COMPILER));
			}
		}
		_match_end_22aab63b3:;
	};
}



inline void _22827789b_check_target_arch(jule::Str _23322_arch) {
	{
		auto &expr = _242dbe42e_DISTARCH;
		auto it = expr.begin();
		_iter_begin_22aab845e:;
		if (it != expr.end()) {
			jule::Str &_23412_distarch = *it;
			{
				if ((_23322_arch == _23412_distarch)) {
					return;;
				};
			}
			_iter_next_22aab845e:;
			++it;
			goto _iter_begin_22aab845e;
		}
		_iter_end_22aab845e:;
	};
	_227b84286_throw((jule::Str("--target: unsupported/undefined architecture: ", 46) + _23322_arch));
}



inline void _2282a23a9_check_target_os(jule::Str _24220_os) {
	{
		auto &expr = _242dbe099_DISTOS;
		auto it = expr.begin();
		_iter_begin_22aab96b3:;
		if (it != expr.end()) {
			jule::Str &_24312_distos = *it;
			{
				if ((_24220_os == _24312_distos)) {
					return;;
				};
			}
			_iter_next_22aab96b3:;
			++it;
			goto _iter_begin_22aab96b3;
		}
		_iter_end_22aab96b3:;
	};
	_227b84286_throw((jule::Str("--target: unsupported/undefined operating system: ", 50) + _24220_os));
}



inline void _2282a24db_check_target_flag(jule::Str& _25123_target) {
	if (_25123_target.empty()) {
		_227b84286_throw(jule::Str("missing option value: --target", 30));
	};
	jule::Slice<jule::Str> _2569_parts = _242d626d0_split(_25123_target,jule::Str("-", 1),-1LL);;
	if ((_2569_parts.len() != 2LL)) {
		_227b84286_throw((jule::Str("--target: undefined platform target format: ", 44) + _25123_target));
	};
	jule::Str _26110_os = _2569_parts[0LL];;
	jule::Str _26114_arch = _2569_parts[1LL];;
	std::tie(_26110_os,_26114_arch) = std::make_tuple(_2569_parts[0LL],_2569_parts[1LL]);
	if ((_26110_os != jule::Str("native", 6))) {
		_2282a23a9_check_target_os(_26110_os);
		_242e10dcc_OS=_26110_os;
	};
	if ((_26114_arch != jule::Str("native", 6))) {
		_22827789b_check_target_arch(_26114_arch);
		_242ddc903_ARCH=_26114_arch;
	};
	_24551da59_update_target();
}



inline void _2282a261d_check_opt_flag(jule::Str& _27420_opt) {
	if (_27420_opt.empty()) {
		_227b84286_throw(jule::Str("missing option value: --opt", 27));
	};
	{
		auto &_match_expr{ _27420_opt };
		
		if (_match_expr == jule::Str("L0", 2)) {
			_case_begin_22aabddc1:;
		}
		else if (_match_expr == jule::Str("L1", 2)) {
			_case_begin_22aabe421:;
			{
				_2456b8187_push_opt_level(static_cast<jule::I32>(1LL));
			}
		}
		else {
			_case_begin_22aabdba1:;
			{
				_227b84286_throw((jule::Str("--opt: invalid optimization level: ", 35) + _27420_opt));
			}
		}
		_match_end_22aabdb4b:;
	};
}



inline void _2282a2981_check_cpp_std_flag(void) {
	{
		auto &_match_expr{ _240e6455e_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5) || _match_expr == jule::Str("cpp17", 5) || _match_expr == jule::Str("cpp20", 5)) {
			_case_begin_22aabe487:;
			{
				goto _match_end_22aac028a;
			}
		}
		else {
			_case_begin_22aabeda0:;
			{
				_227b84286_throw((jule::Str("--cppstd: invalid optimization level: ", 38) + _240e6455e_CPP_STD));
			}
		}
		_match_end_22aac028a:;
	};
}



inline jule::Slice<jule::Str> _2282a2ab3_check_flags(jule::Slice<jule::Str>& _29917_args) {
	jule::Str _30013_opt = jule::Str("L0", 2);;
	jule::Str _30113_target = jule::Str("native-native", 13);;
	jule::Ptr<_22829d5c5_FlagSet> _30313_fs = static__22829d8b1_new();;
	_22aac2864_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_30013_opt)))),jule::Str("opt", 3),0LL,jule::Str("Optimization level", 18));
	_22aac2864_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_30113_target)))),jule::Str("target", 6),0LL,jule::Str("Target system", 13));
	_22aac2864_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_228272ab6_OUT)))),jule::Str("out", 3),'o',jule::Str("Output identifier", 17));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_240e647c3_SHADOWING)))),jule::Str("shadowing", 9),0LL,jule::Str("Allow shadowing", 15));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_240e64a9d_TRANSPILATION)))),jule::Str("transpile", 9),'t',jule::Str("Transpile code", 14));
	_22aac2864_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_240da8816_COMPILER)))),jule::Str("compiler", 8),0LL,jule::Str("Backend compiler", 16));
	_22aac2864_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_240e642ea_COMPILER_PATH)))),jule::Str("compiler-path", 13),0LL,jule::Str("Path of backend compiler", 24));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_240e658e5_PRODUCTION)))),jule::Str("production", 10),'p',jule::Str("Compile for production", 22));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_240e651b9_RC)))),jule::Str("disable-rc", 10),0LL,jule::Str("Disable reference counting", 26));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_240e655d7_SAFETY)))),jule::Str("disable-safety", 14),0LL,jule::Str("Disable safety", 14));
	_22aac2864_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Str>)((&(_240e6455e_CPP_STD)))),jule::Str("cppstd", 6),0LL,jule::Str("C++ standard", 12));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b66b3_COPY)))),jule::Str("opt-copy", 8),0LL,jule::Str("Copy optimization", 17));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b6a15_DEADCODE)))),jule::Str("opt-deadcode", 12),0LL,jule::Str("Deadcode optimization", 21));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b6d23_APPEND)))),jule::Str("opt-append", 10),0LL,jule::Str("Append optimization", 19));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b7175_MATH)))),jule::Str("opt-math", 8),0LL,jule::Str("Math optimization", 17));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b7483_ACCESS)))),jule::Str("opt-access", 10),0LL,jule::Str("Access optimization", 19));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b7791_INLINE)))),jule::Str("opt-inline", 10),0LL,jule::Str("Inline optimization", 19));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b7a9e_PTR)))),jule::Str("opt-ptr", 7),0LL,jule::Str("Pointer optimizations", 21));
	_22aacb494_add_var(_30313_fs.ptr(), ((jule::Ptr<jule::Bool>)((&(_2456b7ebc_COND)))),jule::Str("opt-cond", 8),0LL,jule::Str("Conditional optimizations", 25));
	jule::Slice<jule::Str> _32513_content = ({
		auto except = _22829e6c5_parse(_30313_fs.ptr(), _29917_args);
		(except.ok()) ? (except.result) : ({
			_227b84286_throw(except.error.operator jule::Str());
			nullptr;
		});
	});;
	_2280a925a_check_compiler_flag();
	_2282a2981_check_cpp_std_flag();
	_2282a24db_check_target_flag(_30113_target);
	_2282a261d_check_opt_flag(_30013_opt);
	return _32513_content;
}



inline void _2282a2be5_setup_sema_flags(jule::I32& _33826_flags) {
	if (_240e647c3_SHADOWING) {
		_33826_flags|=static_cast<jule::I32>(1LL);
	};
}



inline jule::Ptr<_2276b0301_IR> _2282a2d27_build_ir(jule::Slice<jule::Str>& _34414_args) {
	jule::Slice<jule::Str> _3459_content = _2282a2ab3_check_flags(_34414_args);;
	jule::I32 _34713_sema_flags = static_cast<jule::I32>(0LL);;
	_2282a2be5_setup_sema_flags(_34713_sema_flags);
	if ((_3459_content.len() == 0LL)) {
		_227b84286_throw(_242dbb0c9_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>()));
	} else if ((_3459_content.len() > 1LL)) {
		_227b84286_throw((jule::Str("undefined content: ", 19) + _3459_content[1LL]));
	};
	jule::Str _35514_path;;
	jule::Bool _35520_ok;;
	std::tie(_35514_path,_35520_ok) = _241e9c8b5_abs(_3459_content[0LL]);
	if ((!(_35520_ok))) {
		_227b84286_throw(jule::Str("compile path could not processed because of a problem", 53));
	};
	jule::Ptr<_241cb4ee6_Status> _3619_inf = ({
		auto except = static__241ddc2b6_of(_242ddd4e7_PATH_STDLIB);
		(except.ok()) ? (except.result) : ({{
			_227b84286_throw(_242dbb0c9_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
			return nullptr;
		} jule::Ptr<_241cb4ee6_Status>();});
	});;
	if ((!(_2410b81b8_is_dir(_3619_inf.ptr())))) {
		_227b84286_throw(_242dbb0c9_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
	};
	jule::Ptr<_2276b0301_IR> _36914_ir;;
	jule::Slice<_242dbab89_Log> _36918_logs;;
	std::tie(_36914_ir,_36918_logs) = static__24571502a_build(_35514_path,_34713_sema_flags);
	if (((_36914_ir == nullptr) && (_36918_logs == nullptr))) {
		_227b84286_throw(_242dbb0c9_logf(jule::Str("there is no Jule source code in package: @", 42),jule::Slice<jule::Any>::make({jule::Any(_35514_path)})));
	};
	if ((_36918_logs != nullptr)) {
		static__227b83818_print_logs(_36918_logs);
		_227b84286_throw(jule::Str());
	};
	return _36914_ir;
}



inline void _2282a2e59_compile_command(jule::Slice<jule::Str>& _38425_args) {
	_38425_args=_38425_args.slice(1LL);
	if ((_38425_args[0LL] == jule::Str("test", 4))) {
		_240e64dab_TEST=true;
		_38425_args=_38425_args.slice(1LL);
	};
	jule::Ptr<_2276b0301_IR> _39013_ir = _2282a2d27_build_ir(_38425_args);;
	;
	if ((!(_240e64dab_TEST))) {
		jule::Ptr<_244926d0e_Fn> _39517_main = _24554c5c1_find_fn(_39013_ir.get()._field_main.ptr(), jule::Str("main", 4),false);;
		if ((_39517_main == nullptr)) {
			_227b84286_throw(_242dbb0c9_logf(jule::Str("missing entry point: entry point (main) function is not defined", 63),jule::Slice<jule::Any>()));
		};
	};
	_227d85b5d_apply_target_independent_optimizations(_39013_ir);
	_22767cd5c_order(_39013_ir.ptr());
	jule::Str _40610_compiler;;
	jule::Str _40620_compiler_cmd;;
	std::tie(_40610_compiler,_40620_compiler_cmd) = _228011b85_gen_compile_cmd(_2280a6323_get_compile_path(),_39013_ir);
	jule::Ptr<_22825bb05_ObjectCoder> _40813_oc = static__22823eb2c_new(_39013_ir,_22825b72b_SerializationInfo{._field_compiler=_40610_compiler, ._field_compiler_command=_40620_compiler_cmd});;
	if (_240e64dab_TEST) {
		jule::Ptr<_2281e6d48_TestCoder> _41317_tc = static__2281e72bb_new(_40813_oc);;
		_2281e84ed_serialize(_41317_tc);
	} else {
		_228261104_serialize(_40813_oc);
	};
	jule::Str _4199_path = _2280a6323_get_compile_path();;
	jule::Ptr<_241cb4b2d_File> _42013_file = _2280a6eb1_open_output(_4199_path);;
	({
		auto except = _241d48ad5_write(_42013_file.ptr(), static_cast<jule::Slice<jule::U8>>(_40813_oc.get()._field_obj));
		if (!except.ok()) {
			_227b84286_throw(jule::Str("object code could not write", 27));
		}
	});
	({
		auto except = _2410b613e_close(_42013_file.ptr());
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: julec/compile.jule:424:5"));
	});
	if ((!(_240e64a9d_TRANSPILATION))) {
		_22827090a_compile_ir(_40610_compiler,_40620_compiler_cmd);
	};
}



void __jule_call_initializers(void) {
	_242dcd2ea_init();
	_24551dbbe_init();
	_242da205a_init();
	_227c0d82c_init();

}

int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}