// Auto generated by JuleC.
// JuleC version: beta 0.0.7 @master
// Date: 2/12/2023 17.0 (DD/MM/YYYY) (HH.MM) UTC
//
// Recommended Compile Command;
// clang++ -Wno-everything --std=c++17 -O3 -flto -DNDEBUG -fomit-frame-pointer dist/ir.cpp

#define __JULE_ENABLE__PRODUCTION


#include "api/jule.hpp"                                   

#include <dirent.h>
#include <fcntl.h>
#include <unistd.h>
#include <cstdio>
#include <sys/stat.h>
#include <signal.h>
#include <sys/wait.h>
#include <time.h>
#include "std/jule/integrated/integrated.hpp"                                   
#include "std/sys/syscall_unix.hpp"                                   
#include "std/process/cmd.hpp"                                   

struct _1e53308ee_Importer;
struct _229d681e3_Kind;
struct _229d94c47_Lookup;
struct _229cbddd5_CommonFlag;

struct _227532e21_AnsiEscape;


struct _227532e21_Logger;


struct _227711594_LazyBuff;


struct _22762b646_DirEntry;


struct _22762b646_Directory;


struct _2276a6c54_File;


struct _2276a6da8_Status;


struct _2277c77c0_Cmd;


struct _2276bcb9e_Log;


struct _22777cad8_FloatInfo;


struct _22777cad8_DecimalSlice;


struct _2286660ca_LeftCheat;


struct _2286660ca_Decimal;


struct _228e939c3_FoldPair;


struct _228e939c3_CaseRange;


struct _228e939c3_Range16;


struct _228e939c3_Range32;


struct _228e939c3_RangeTable;


struct _228e84d38_accept_range;


struct _228d7aadb_Token;


struct _228d34677_File;


struct _228d36080_KindPair;


struct _228d36080_Lex;


struct _228d3160d_Ast;


struct _228d31971_CommentGroup;


struct _228d31971_NamespaceTypeDecl;


struct _228d31971_SptrTypeDecl;


struct _228d31971_SlcTypeDecl;


struct _228d31971_TupleTypeDecl;


struct _228d31971_PtrTypeDecl;


struct _228d31971_ArrTypeDecl;


struct _228d31971_MapTypeDecl;


struct _228d31971_RetTypeDecl;


struct _228d31971_TupleExpr;


struct _228d31971_CastExpr;


struct _228d31971_StructLit;


struct _228d31971_ScopeTree;


struct _228d31971_Conditional;


struct _228d31971_Impl;


struct _228d79a30_FileInfo;


struct _228d79a30_PackageInfo;


struct _228d45c71_Stmt;


struct _228d45c71_ScopeParser;


struct _229a547e7_CallData;


struct _229a547e7_ExprBuilder;


struct _229a51c34_Parser;


struct _1e5543d98_TypeBuilder;


struct _1e856e8a4_Const;


struct _228e0d025_FieldIns;


struct _228e0d025_StructIns;


struct _229b6ebcb_RetType;


struct _229b6ebcb_ParamIns;


struct _229b6ebcb_FnIns;


struct _228d6ecab_ReferenceStack;


struct _228d6ecab_SymbolBuilder;


struct _1e56ca370_Impl;


struct _1e56c3885_Scope;


struct _1e56c3885_If;


struct _1e56c3885_Else;


struct _1e56c3885_Conditional;


struct _1e56c3885_InfIter;


struct _1e56c3885_WhileIter;


struct _1e56c3885_RangeIter;


struct _1e56c3885_ContSt;


struct _1e56c3885_BreakSt;


struct _1e56c3885_Label;


struct _1e56c3885_GotoSt;


struct _1e56c3885_Postfix;


struct _1e56c3885_MultiAssign;


struct _1e56c3885_Match;


struct _1e56c3885_Case;


struct _1e56c3885_FallSt;


struct _1e56c3885_RetSt;


struct _1e56c3885_ScopeGoto;


struct _1e56c3885_ScopeChecker;


struct _1e5870218_StructArgExprModel;


struct _1e5870218_AllocStructLitExprModel;


struct _1e5870218_SliceExprModel;


struct _1e5870218_AnonFnExprModel;


struct _1e5870218_KeyValPairExprModel;


struct _1e5870218_MapExprModel;


struct _1e5870218_StructSubIdentExprModel;


struct _1e5870218_StructStaticIdentExprModel;


struct _1e5870218_ArrayExprModel;


struct _1e5870218_CommonIdentExprModel;


struct _1e5870218_CommonSubIdentExprModel;


struct _1e5870218_TupleExprModel;


struct _1e5870218_BuiltinOutCallExprModel;


struct _1e5870218_BuiltinOutlnCallExprModel;


struct _1e5870218_BuiltinCloneCallExprModel;


struct _1e5870218_BuiltinNewCallExprModel;


struct _1e5870218_BuiltinMakeCallExprModel;


struct _1e5870218_BuiltinAppendCallExprModel;


struct _1e5870218_BuiltinErrorCallExprModel;


struct _1e5870218_SizeofExprModel;


struct _1e5870218_AlignofExprModel;


struct _1e5870218_RuneExprModel;


struct _1e5870218_IntegratedToStrExprModel;


struct _1e5870218_TernaryExprModel;


struct _1e5870218_BackendEmitExprModel;


struct _1e5870218_FreeExprModel;


struct _1e586d0c3_DirectiveChecker;


struct _1e53308ee_Package;


struct _1e538b460_Sema;


struct _1e58b0654_IterRelation;


struct _1e58b019d_RangeChecker;


struct _229d56533_SymbolTable;


struct _229d70d33_Data;


struct _229d70d33_Value;


struct _229d70d33_Eval;


struct _229d681e3_TypeKind;


struct _229d681e3_TypeSymbol;


struct _229d681e3_Prim;


struct _229d681e3_Sptr;


struct _229d681e3_Slc;


struct _229d681e3_Tuple;


struct _229d681e3_Map;


struct _229d681e3_Arr;


struct _229d681e3_Ptr;


struct _229d681e3_Referencer;


struct _228cc0bc9_DirectiveEval;


struct _228ce6ea8_PlainImporter;


struct _228ca2e64_OrderedDefines;


struct _228ca2e64_DefineOrderer;


struct _228798383_ScopeDeadCode;


struct _1e8a7c6a8_AbsTime;


struct _1e8a7c6a8_Time;


struct _1e8a7c6a8_Duration;


struct _229cbb663_ScopeOptimizer;


struct _229d710b9_Optimizer;


struct _229cbddd5_Flag_0;

struct _229cbddd5_Flag_1;

struct _229cbddd5_Flag_2;

struct _229cbddd5_Flag_3;

struct _229cbddd5_Flag_4;


struct _229cbddd5_FlagSet;


struct _228d31971_WhileKind;


struct _1e56c3885_ScopeLabel;


struct _228d31971_RangeKind;


struct _228d31971_BreakSt;


struct _1e5870218_BinopExprModel;


struct _1e5870218_UnaryExprModel;


struct _228d31971_ContSt;


struct _1e5870218_StructLitExprModel;


struct _228d31971_If;


struct _1e5870218_CastingExprModel;


struct _1e5870218_FnCallExprModel;


struct _228d31971_Else;


struct _1e5870218_IndexingExprModel;


struct _228d31971_Directive;


struct _228d31971_TypeAliasDecl;


struct _228d31971_Case;


struct _1e5870218_SlicingExprModel;


struct _1e5870218_TraitSubIdentExprModel;


struct _228d31971_MatchCase;


struct _228d31971_UseDecl;


struct _228d31971_EnumItemDecl;


struct _228d31971_EnumDecl;


struct _228d31971_FieldDecl;


struct _228d31971_StructDecl;


struct _228d31971_TraitDecl;


struct _228d31971_Expr;


struct _228d31971_UseExpr;


struct _228d31971_TypeDecl;


struct _1e5870218_BuiltinPanicCallExprModel;


struct _1e5870218_BuiltinAssertCallExprModel;


struct _228d31971_LitExpr;


struct _228d31971_UnsafeExpr;


struct _228d31971_CoExpr;


struct _228d31971_IdentExpr;


struct _228e13aa8_AssignInfo;


struct _228d31971_UnaryExpr;


struct _228d31971_VariadicExpr;


struct _228d31971_IdentTypeDecl;


struct _228e0d025_Field;


struct _228e0d025_Struct;


struct _228d31971_NsSelectionExpr;


struct _1e53308ee_ImportInfo;


struct _228d31971_SubIdentExpr;


struct _228d31971_BinopExpr;


struct _229b6ebcb_Param;


struct _1e58b0654_Var;


struct _1e58b019d_TypeCompatibilityChecker;


struct _1e58b019d_AssignTypeChecker;


struct _1e58b019d_DynamicTypeAnnotation;


struct _1e58b019d_FnCallArgChecker;


struct _1e58b019d_StructLitChecker;


struct _229b6ebcb_Fn;


struct _1e58b019d_RetTypeChecker;


struct _228d31971_FnCallExpr;


struct _228d31971_FieldExprPair;


struct _228d31971_Node;


struct _228d6ecab_Pass;


struct _229d70d33_BinopSolver;


struct _229d681e3_TypeAlias;


struct _228d31971_BraceLit;


struct _229b5076c_Trait;


struct _1e56be485_EnumItem;


struct _1e56be485_Enum;


struct _228d31971_KeyValPair;


struct _228d31971_SliceExpr;


struct _228d31971_IndexingExpr;


struct _228d31971_SlicingExpr;


struct _228d31971_TernaryExpr;


struct _228d31971_GenericDecl;


struct _229d681e3_TypeChecker;


struct _228d31971_LabelSt;


struct _228d31971_GotoSt;


struct _228c91a35_IR;


struct _228d31971_FallSt;


struct _228d31971_AssignLeft;


struct _228d31971_AssignSt;


struct _228d31971_Comment;


struct _228d31971_ParamDecl;


struct _1e56c3885_Assign;


struct _228d31971_FnDecl;


struct _228d31971_VarDecl;


struct _228d31971_RetSt;


struct _228d31971_Iter;


struct _229cbddd5_ArgParser;

struct _1e53308ee_Importer {
	virtual ~_1e53308ee_Importer(void) {}

	virtual void _method_set_mod_path(jule::Str _1635_path) {}
	virtual jule::Str _method_get_mod_path(void) { return {}; }
	virtual jule::Str _method_mod_by_id(jule::Int _2228_id) { return {}; }
	virtual jule::Ptr<_1e53308ee_ImportInfo> _method_get_import(jule::Str _2733_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ptr<_228d3160d_Ast>>,jule::Slice<_2276bcb9e_Log>> _method_import_package(jule::Str _3237_path,jule::Bool _3248_update_mod) { return {}; }
	virtual void _method_imported(jule::Ptr<_1e53308ee_ImportInfo>) {}
};

struct _229d681e3_Kind {
	virtual ~_229d681e3_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind> _5722_other) { return {}; }
};

struct _229d94c47_Lookup {
	virtual ~_229d94c47_Lookup(void) {}

	virtual jule::Ptr<_1e53308ee_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ptr<_1e53308ee_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ptr<_1e58b0654_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ptr<_229d681e3_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ptr<_228e0d025_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ptr<_229b6ebcb_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ptr<_229b5076c_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ptr<_1e56be485_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _229cbddd5_CommonFlag {
	virtual ~_229cbddd5_CommonFlag(void) {}

	virtual jule::Str _method_name(void) { return {}; }
	virtual jule::I32 _method_short(void) { return {}; }
	virtual jule::Str _method_what(void) { return {}; }
	virtual void _method_reset(void) {}
};


struct _227532e21_AnsiEscape {
	

	_227532e21_AnsiEscape(void) = default;

	static inline void _static_method_reset(void);


	static inline void _static_method_print(jule::Str,jule::Str);


	inline bool operator==(const _227532e21_AnsiEscape &_Src) const { return true; }

	inline bool operator!=(const _227532e21_AnsiEscape &_Src) const { return !this->operator==(_Src); }
};


struct _227532e21_Logger {
	

	_227532e21_Logger(void) = default;

	static inline void _static_method_log_flat(_2276bcb9e_Log&);


	static inline void _static_method_log_error(_2276bcb9e_Log&);


	static inline void _static_method_log(_2276bcb9e_Log&);


	static inline void _static_method_print_logs(jule::Slice<_2276bcb9e_Log>&);


	inline bool operator==(const _227532e21_Logger &_Src) const { return true; }

	inline bool operator!=(const _227532e21_Logger &_Src) const { return !this->operator==(_Src); }
};


struct _227711594_LazyBuff {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();
	jule::Int _field_w = jule::Int();
	jule::Str _field_vol_and_path = jule::Str();
	jule::Int _field_vol_len = jule::Int();


	_227711594_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::Int __param_w, jule::Str __param_vol_and_path, jule::Int __param_vol_len): _field_path(__param_path), _field_buff(__param_buff), _field_w(__param_w), _field_vol_and_path(__param_vol_and_path), _field_vol_len(__param_vol_len) {}

	

	_227711594_LazyBuff(void) = default;

	inline jule::U8 _method_index(jule::Int);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(const _227711594_LazyBuff &_Src) const {
		return 
			this->_field_path == _Src._field_path &&
			this->_field_buff == _Src._field_buff &&
			this->_field_w == _Src._field_w &&
			this->_field_vol_and_path == _Src._field_vol_and_path &&
			this->_field_vol_len == _Src._field_vol_len;
	}

	inline bool operator!=(const _227711594_LazyBuff &_Src) const { return !this->operator==(_Src); }
};


struct _22762b646_DirEntry {
	jule::Str _field_name = jule::Str();
	jule::Ptr<_2276a6da8_Status> _field_stat = jule::Ptr<_2276a6da8_Status>();


	_22762b646_DirEntry(jule::Str __param_name, jule::Ptr<_2276a6da8_Status> __param_stat): _field_name(__param_name), _field_stat(__param_stat) {}

	

	_22762b646_DirEntry(void) = default;

	inline bool operator==(const _22762b646_DirEntry &_Src) const {
		return 
			this->_field_name == _Src._field_name &&
			this->_field_stat == _Src._field_stat;
	}

	inline bool operator!=(const _22762b646_DirEntry &_Src) const { return !this->operator==(_Src); }
};


struct _22762b646_Directory {
	

	_22762b646_Directory(void) = default;

	static inline jule::Exceptional<jule::Slice<jule::Ptr<_22762b646_DirEntry>>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_create(jule::Str);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline bool operator==(const _22762b646_Directory &_Src) const { return true; }

	inline bool operator!=(const _22762b646_Directory &_Src) const { return !this->operator==(_Src); }
};


struct _2276a6c54_File {
	jule::Uintptr _field_handle = jule::Uintptr();


	_2276a6c54_File(jule::Uintptr __param_handle): _field_handle(__param_handle) {}

	

	_2276a6c54_File(void) = default;

	static inline jule::Exceptional<jule::Ptr<_2276a6c54_File>> _static_method_open(jule::Str,jule::Int,jule::Int);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8>);


	static inline jule::Ptr<_2276a6c54_File> _static_method_new(jule::Uintptr);


	static inline jule::Exceptional<jule::Ptr<_2276a6c54_File>> _static_method_create(jule::Str);


	static inline jule::Exceptional<jule::Slice<jule::U8>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_write(jule::Str,jule::Slice<jule::U8>,jule::Int);


	inline jule::Exceptional<jule::I64> _method_seek(jule::I64,jule::Int);


	inline jule::VoidExceptional _method_close(void);


	inline bool operator==(const _2276a6c54_File &_Src) const {
		return 
			this->_field_handle == _Src._field_handle;
	}

	inline bool operator!=(const _2276a6c54_File &_Src) const { return !this->operator==(_Src); }
};


struct _2276a6da8_Status {
	jule::Uint _field_mode = jule::Uint();
	jule::Uint _field_size = jule::Uint();


	_2276a6da8_Status(jule::Uint __param_mode, jule::Uint __param_size): _field_mode(__param_mode), _field_size(__param_size) {}

	

	_2276a6da8_Status(void) = default;

	static inline jule::Exceptional<jule::Ptr<_2276a6da8_Status>> _static_method_of(jule::Str);


	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	inline bool operator==(const _2276a6da8_Status &_Src) const {
		return 
			this->_field_mode == _Src._field_mode &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _2276a6da8_Status &_Src) const { return !this->operator==(_Src); }
};


struct _2277c77c0_Cmd {
	jule::Str _field__fle = jule::Str();
	jule::Int _field__pid = jule::Int();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_env = jule::Slice<jule::Str>();


	_2277c77c0_Cmd(jule::Str __param__fle, jule::Int __param__pid, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_env): _field__fle(__param__fle), _field__pid(__param__pid), _field_args(__param_args), _field_env(__param_env) {}

	

	_2277c77c0_Cmd(void) = default;

	static inline jule::Ptr<_2277c77c0_Cmd> _static_method_new(jule::Str);


	inline jule::Int _method_pid(void);


	inline jule::Str _method_file(void);


	inline jule::VoidExceptional _method_spawn(void);


	inline jule::VoidExceptional _method_kill(void);


	inline jule::Exceptional<jule::Int> _method_wait(void);


	inline bool operator==(const _2277c77c0_Cmd &_Src) const {
		return 
			this->_field__fle == _Src._field__fle &&
			this->_field__pid == _Src._field__pid &&
			this->_field_args == _Src._field_args &&
			this->_field_env == _Src._field_env;
	}

	inline bool operator!=(const _2277c77c0_Cmd &_Src) const { return !this->operator==(_Src); }
};


struct _2276bcb9e_Log {
	jule::Int _field_kind = 0LLU;
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_path = jule::Str();
	jule::Str _field_text = jule::Str();
	jule::Str _field_line = jule::Str();
	jule::Str _field_suggestion = jule::Str();


	_2276bcb9e_Log(jule::Int __param_kind, jule::Int __param_row, jule::Int __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion): _field_kind(__param_kind), _field_row(__param_row), _field_column(__param_column), _field_path(__param_path), _field_text(__param_text), _field_line(__param_line), _field_suggestion(__param_suggestion) {}

	

	_2276bcb9e_Log(void) = default;

	inline bool operator==(const _2276bcb9e_Log &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_path == _Src._field_path &&
			this->_field_text == _Src._field_text &&
			this->_field_line == _Src._field_line &&
			this->_field_suggestion == _Src._field_suggestion;
	}

	inline bool operator!=(const _2276bcb9e_Log &_Src) const { return !this->operator==(_Src); }
};


struct _22777cad8_FloatInfo {
	jule::Uint _field_mantbits = jule::Uint();
	jule::Uint _field_expbits = jule::Uint();
	jule::Int _field_bias = jule::Int();


	_22777cad8_FloatInfo(jule::Uint __param_mantbits, jule::Uint __param_expbits, jule::Int __param_bias): _field_mantbits(__param_mantbits), _field_expbits(__param_expbits), _field_bias(__param_bias) {}

	

	_22777cad8_FloatInfo(void) = default;

	inline bool operator==(const _22777cad8_FloatInfo &_Src) const {
		return 
			this->_field_mantbits == _Src._field_mantbits &&
			this->_field_expbits == _Src._field_expbits &&
			this->_field_bias == _Src._field_bias;
	}

	inline bool operator!=(const _22777cad8_FloatInfo &_Src) const { return !this->operator==(_Src); }
};


struct _22777cad8_DecimalSlice {
	jule::Slice<jule::U8> _field_d = jule::Slice<jule::U8>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();


	_22777cad8_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg) {}

	

	_22777cad8_DecimalSlice(void) = default;

	inline bool operator==(const _22777cad8_DecimalSlice &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg;
	}

	inline bool operator!=(const _22777cad8_DecimalSlice &_Src) const { return !this->operator==(_Src); }
};


struct _2286660ca_LeftCheat {
	jule::Int _field_delta = jule::Int();
	jule::Str _field_cutoff = jule::Str();


	_2286660ca_LeftCheat(jule::Int __param_delta, jule::Str __param_cutoff): _field_delta(__param_delta), _field_cutoff(__param_cutoff) {}

	

	_2286660ca_LeftCheat(void) = default;

	inline bool operator==(const _2286660ca_LeftCheat &_Src) const {
		return 
			this->_field_delta == _Src._field_delta &&
			this->_field_cutoff == _Src._field_cutoff;
	}

	inline bool operator!=(const _2286660ca_LeftCheat &_Src) const { return !this->operator==(_Src); }
};


struct _2286660ca_Decimal {
	jule::Array<jule::U8,800> _field_d = jule::Array<jule::U8,800>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();
	jule::Bool _field_trunc = jule::Bool();


	_2286660ca_Decimal(jule::Array<jule::U8,800> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg), _field_trunc(__param_trunc) {}

	

	_2286660ca_Decimal(void) = default;

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_22777cad8_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::Int);


	inline void _method_round_down(jule::Int);


	inline void _method_round_up(jule::Int);


	inline void _method_round(jule::Int);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(const _2286660ca_Decimal &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg &&
			this->_field_trunc == _Src._field_trunc;
	}

	inline bool operator!=(const _2286660ca_Decimal &_Src) const { return !this->operator==(_Src); }
};


struct _228e939c3_FoldPair {
	jule::U16 _field_from = jule::U16();
	jule::U16 _field_to = jule::U16();


	_228e939c3_FoldPair(jule::U16 __param_from, jule::U16 __param_to): _field_from(__param_from), _field_to(__param_to) {}

	

	_228e939c3_FoldPair(void) = default;

	inline bool operator==(const _228e939c3_FoldPair &_Src) const {
		return 
			this->_field_from == _Src._field_from &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _228e939c3_FoldPair &_Src) const { return !this->operator==(_Src); }
};


struct _228e939c3_CaseRange {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::Array<jule::I32,3> _field_delta = jule::Array<jule::I32,3>();


	_228e939c3_CaseRange(jule::U32 __param_lo, jule::U32 __param_hi, jule::Array<jule::I32,3> __param_delta): _field_lo(__param_lo), _field_hi(__param_hi), _field_delta(__param_delta) {}

	

	_228e939c3_CaseRange(void) = default;

	inline bool operator==(const _228e939c3_CaseRange &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_delta == _Src._field_delta;
	}

	inline bool operator!=(const _228e939c3_CaseRange &_Src) const { return !this->operator==(_Src); }
};


struct _228e939c3_Range16 {
	jule::U16 _field_lo = jule::U16();
	jule::U16 _field_hi = jule::U16();
	jule::U16 _field_stride = jule::U16();


	_228e939c3_Range16(jule::U16 __param_lo, jule::U16 __param_hi, jule::U16 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_228e939c3_Range16(void) = default;

	inline bool operator==(const _228e939c3_Range16 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _228e939c3_Range16 &_Src) const { return !this->operator==(_Src); }
};


struct _228e939c3_Range32 {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::U32 _field_stride = jule::U32();


	_228e939c3_Range32(jule::U32 __param_lo, jule::U32 __param_hi, jule::U32 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_228e939c3_Range32(void) = default;

	inline bool operator==(const _228e939c3_Range32 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _228e939c3_Range32 &_Src) const { return !this->operator==(_Src); }
};


struct _228e939c3_RangeTable {
	jule::Slice<_228e939c3_Range16> _field_r16 = jule::Slice<_228e939c3_Range16>();
	jule::Slice<_228e939c3_Range32> _field_r32 = jule::Slice<_228e939c3_Range32>();
	jule::Int _field_latin_offset = jule::Int();


	_228e939c3_RangeTable(jule::Slice<_228e939c3_Range16> __param_r16, jule::Slice<_228e939c3_Range32> __param_r32, jule::Int __param_latin_offset): _field_r16(__param_r16), _field_r32(__param_r32), _field_latin_offset(__param_latin_offset) {}

	

	_228e939c3_RangeTable(void) = default;

	inline bool operator==(const _228e939c3_RangeTable &_Src) const {
		return 
			this->_field_r16 == _Src._field_r16 &&
			this->_field_r32 == _Src._field_r32 &&
			this->_field_latin_offset == _Src._field_latin_offset;
	}

	inline bool operator!=(const _228e939c3_RangeTable &_Src) const { return !this->operator==(_Src); }
};


struct _228e84d38_accept_range {
	jule::U8 _field_lo = jule::U8();
	jule::U8 _field_hi = jule::U8();


	_228e84d38_accept_range(jule::U8 __param_lo, jule::U8 __param_hi): _field_lo(__param_lo), _field_hi(__param_hi) {}

	

	_228e84d38_accept_range(void) = default;

	inline bool operator==(const _228e84d38_accept_range &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi;
	}

	inline bool operator!=(const _228e84d38_accept_range &_Src) const { return !this->operator==(_Src); }
};


struct _228d7aadb_Token {
	jule::Ptr<_228d34677_File> _field_file = jule::Ptr<_228d34677_File>();
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_kind = jule::Str();
	jule::Uint _field_id = 0LLU;


	_228d7aadb_Token(jule::Ptr<_228d34677_File> __param_file, jule::Int __param_row, jule::Int __param_column, jule::Str __param_kind, jule::Uint __param_id): _field_file(__param_file), _field_row(__param_row), _field_column(__param_column), _field_kind(__param_kind), _field_id(__param_id) {}

	

	_228d7aadb_Token(void) = default;

	inline jule::U8 _method_prec(void);


	inline bool operator==(const _228d7aadb_Token &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _228d7aadb_Token &_Src) const { return !this->operator==(_Src); }
};


struct _228d34677_File {
	jule::Slice<jule::U8> _field_data = jule::Slice<jule::U8>();
	jule::Str _field__path = jule::Str();
	jule::Slice<_228d7aadb_Token> _field__tokens = jule::Slice<_228d7aadb_Token>();


	_228d34677_File(jule::Slice<jule::U8> __param_data, jule::Str __param__path, jule::Slice<_228d7aadb_Token> __param__tokens): _field_data(__param_data), _field__path(__param__path), _field__tokens(__param__tokens) {}

	

	_228d34677_File(void) = default;

	inline jule::Bool _method_is_ok(void);


	inline void _method_fill(jule::Slice<jule::U8>);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::Uintptr _method_addr(void);


	inline jule::Slice<_228d7aadb_Token> _method_tokens(void);


	inline jule::Str _method_get_row(jule::Int);


	inline bool operator==(const _228d34677_File &_Src) const {
		return 
			this->_field_data == _Src._field_data &&
			this->_field__path == _Src._field__path &&
			this->_field__tokens == _Src._field__tokens;
	}

	inline bool operator!=(const _228d34677_File &_Src) const { return !this->operator==(_Src); }
};


struct _228d36080_KindPair {
	jule::Str _field_kind = jule::Str("::", 2);
	jule::Uint _field_id = 0LLU;


	_228d36080_KindPair(jule::Str __param_kind, jule::Uint __param_id): _field_kind(__param_kind), _field_id(__param_id) {}

	

	_228d36080_KindPair(void) = default;

	inline bool operator==(const _228d36080_KindPair &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _228d36080_KindPair &_Src) const { return !this->operator==(_Src); }
};


struct _228d36080_Lex {
	jule::Slice<_228d7aadb_Token> _field_tokens = jule::Slice<_228d7aadb_Token>();
	jule::Ptr<_228d34677_File> _field_file = jule::Ptr<_228d34677_File>();
	jule::Int _field_pos = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Int _field_row = jule::Int();
	jule::Slice<_2276bcb9e_Log> _field_errors = jule::Slice<_2276bcb9e_Log>();


	_228d36080_Lex(jule::Slice<_228d7aadb_Token> __param_tokens, jule::Ptr<_228d34677_File> __param_file, jule::Int __param_pos, jule::Int __param_column, jule::Int __param_row, jule::Slice<_2276bcb9e_Log> __param_errors): _field_tokens(__param_tokens), _field_file(__param_file), _field_pos(__param_pos), _field_column(__param_column), _field_row(__param_row), _field_errors(__param_errors) {}

	

	_228d36080_Lex(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_228d7aadb_Token&,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>&);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_228d7aadb_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>&);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>&);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>&,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>&);


	inline jule::Str _method_lex_str(void);


	inline jule::Bool _method_is_first_token_of_line(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>&,jule::Str,jule::Uint,_228d7aadb_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_228d7aadb_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>&,_228d7aadb_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>&,_228d7aadb_Token&);


	inline _228d7aadb_Token _method_token(void);


	inline bool operator==(const _228d36080_Lex &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_file == _Src._field_file &&
			this->_field_pos == _Src._field_pos &&
			this->_field_column == _Src._field_column &&
			this->_field_row == _Src._field_row &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _228d36080_Lex &_Src) const { return !this->operator==(_Src); }
};


struct _228d3160d_Ast {
	jule::Ptr<_228d34677_File> _field_file = jule::Ptr<_228d34677_File>();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_top_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Slice<jule::Ptr<_228d31971_UseDecl>> _field_use_decls = jule::Slice<jule::Ptr<_228d31971_UseDecl>>();
	jule::Slice<jule::Ptr<_228d31971_Impl>> _field_impls = jule::Slice<jule::Ptr<_228d31971_Impl>>();
	jule::Slice<_228d31971_Node> _field_decls = jule::Slice<_228d31971_Node>();


	_228d3160d_Ast(jule::Ptr<_228d34677_File> __param_file, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_top_directives, jule::Slice<jule::Ptr<_228d31971_UseDecl>> __param_use_decls, jule::Slice<jule::Ptr<_228d31971_Impl>> __param_impls, jule::Slice<_228d31971_Node> __param_decls): _field_file(__param_file), _field_top_directives(__param_top_directives), _field_use_decls(__param_use_decls), _field_impls(__param_impls), _field_decls(__param_decls) {}

	

	_228d3160d_Ast(void) = default;

	inline bool operator==(const _228d3160d_Ast &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_top_directives == _Src._field_top_directives &&
			this->_field_use_decls == _Src._field_use_decls &&
			this->_field_impls == _Src._field_impls &&
			this->_field_decls == _Src._field_decls;
	}

	inline bool operator!=(const _228d3160d_Ast &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_CommentGroup {
	jule::Slice<jule::Ptr<_228d31971_Comment>> _field_comments = jule::Slice<jule::Ptr<_228d31971_Comment>>();


	_228d31971_CommentGroup(jule::Slice<jule::Ptr<_228d31971_Comment>> __param_comments): _field_comments(__param_comments) {}

	

	_228d31971_CommentGroup(void) = default;

	inline bool operator==(const _228d31971_CommentGroup &_Src) const {
		return 
			this->_field_comments == _Src._field_comments;
	}

	inline bool operator!=(const _228d31971_CommentGroup &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_NamespaceTypeDecl {
	jule::Slice<_228d7aadb_Token> _field_idents = jule::Slice<_228d7aadb_Token>();
	jule::Ptr<_228d31971_IdentTypeDecl> _field_kind = jule::Ptr<_228d31971_IdentTypeDecl>();


	_228d31971_NamespaceTypeDecl(jule::Slice<_228d7aadb_Token> __param_idents, jule::Ptr<_228d31971_IdentTypeDecl> __param_kind): _field_idents(__param_idents), _field_kind(__param_kind) {}

	

	_228d31971_NamespaceTypeDecl(void) = default;

	inline bool operator==(const _228d31971_NamespaceTypeDecl &_Src) const {
		return 
			this->_field_idents == _Src._field_idents &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _228d31971_NamespaceTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_SptrTypeDecl {
	jule::Ptr<_228d31971_TypeDecl> _field_elem = jule::Ptr<_228d31971_TypeDecl>();


	_228d31971_SptrTypeDecl(jule::Ptr<_228d31971_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_228d31971_SptrTypeDecl(void) = default;

	inline bool operator==(const _228d31971_SptrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _228d31971_SptrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_SlcTypeDecl {
	jule::Ptr<_228d31971_TypeDecl> _field_elem = jule::Ptr<_228d31971_TypeDecl>();


	_228d31971_SlcTypeDecl(jule::Ptr<_228d31971_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_228d31971_SlcTypeDecl(void) = default;

	inline bool operator==(const _228d31971_SlcTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _228d31971_SlcTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_TupleTypeDecl {
	jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _field_types = jule::Slice<jule::Ptr<_228d31971_TypeDecl>>();


	_228d31971_TupleTypeDecl(jule::Slice<jule::Ptr<_228d31971_TypeDecl>> __param_types): _field_types(__param_types) {}

	

	_228d31971_TupleTypeDecl(void) = default;

	inline bool operator==(const _228d31971_TupleTypeDecl &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _228d31971_TupleTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_PtrTypeDecl {
	jule::Ptr<_228d31971_TypeDecl> _field_elem = jule::Ptr<_228d31971_TypeDecl>();


	_228d31971_PtrTypeDecl(jule::Ptr<_228d31971_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_228d31971_PtrTypeDecl(void) = default;

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _228d31971_PtrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _228d31971_PtrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_ArrTypeDecl {
	jule::Ptr<_228d31971_TypeDecl> _field_elem = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_228d31971_Expr> _field_size = jule::Ptr<_228d31971_Expr>();


	_228d31971_ArrTypeDecl(jule::Ptr<_228d31971_TypeDecl> __param_elem, jule::Ptr<_228d31971_Expr> __param_size): _field_elem(__param_elem), _field_size(__param_size) {}

	

	_228d31971_ArrTypeDecl(void) = default;

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(const _228d31971_ArrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _228d31971_ArrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_MapTypeDecl {
	jule::Ptr<_228d31971_TypeDecl> _field_key = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_228d31971_TypeDecl> _field_val = jule::Ptr<_228d31971_TypeDecl>();


	_228d31971_MapTypeDecl(jule::Ptr<_228d31971_TypeDecl> __param_key, jule::Ptr<_228d31971_TypeDecl> __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_228d31971_MapTypeDecl(void) = default;

	inline bool operator==(const _228d31971_MapTypeDecl &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _228d31971_MapTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_RetTypeDecl {
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Slice<_228d7aadb_Token> _field_idents = jule::Slice<_228d7aadb_Token>();


	_228d31971_RetTypeDecl(jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Slice<_228d7aadb_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_228d31971_RetTypeDecl(void) = default;

	inline bool operator==(const _228d31971_RetTypeDecl &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _228d31971_RetTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_TupleExpr {
	jule::Slice<jule::Ptr<_228d31971_Expr>> _field_expr = jule::Slice<jule::Ptr<_228d31971_Expr>>();


	_228d31971_TupleExpr(jule::Slice<jule::Ptr<_228d31971_Expr>> __param_expr): _field_expr(__param_expr) {}

	

	_228d31971_TupleExpr(void) = default;

	inline bool operator==(const _228d31971_TupleExpr &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_TupleExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_CastExpr {
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Any _field_expr = jule::Any();


	_228d31971_CastExpr(jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Any __param_expr): _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_228d31971_CastExpr(void) = default;

	inline bool operator==(const _228d31971_CastExpr &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_CastExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_StructLit {
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_228d31971_StructLit(jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs): _field_kind(__param_kind), _field_exprs(__param_exprs) {}

	

	_228d31971_StructLit(void) = default;

	inline bool operator==(const _228d31971_StructLit &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _228d31971_StructLit &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_ScopeTree {
	jule::Ptr<_228d31971_ScopeTree> _field_parent = jule::Ptr<_228d31971_ScopeTree>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_228d31971_ScopeTree(jule::Ptr<_228d31971_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_228d31971_ScopeTree(void) = default;

	inline bool operator==(const _228d31971_ScopeTree &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _228d31971_ScopeTree &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Conditional {
	jule::Ptr<_228d31971_If> _field_head = jule::Ptr<_228d31971_If>();
	jule::Slice<jule::Ptr<_228d31971_If>> _field_tail = jule::Slice<jule::Ptr<_228d31971_If>>();
	jule::Ptr<_228d31971_Else> _field_default = jule::Ptr<_228d31971_Else>();


	_228d31971_Conditional(jule::Ptr<_228d31971_If> __param_head, jule::Slice<jule::Ptr<_228d31971_If>> __param_tail, jule::Ptr<_228d31971_Else> __param_default): _field_head(__param_head), _field_tail(__param_tail), _field_default(__param_default) {}

	

	_228d31971_Conditional(void) = default;

	inline bool operator==(const _228d31971_Conditional &_Src) const {
		return 
			this->_field_head == _Src._field_head &&
			this->_field_tail == _Src._field_tail &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _228d31971_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Impl {
	jule::Ptr<_228d31971_TypeDecl> _field_base = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_228d31971_TypeDecl> _field_dest = jule::Ptr<_228d31971_TypeDecl>();
	jule::Slice<jule::Ptr<_228d31971_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_228d31971_FnDecl>>();
	jule::Slice<jule::Ptr<_228d31971_VarDecl>> _field_statics = jule::Slice<jule::Ptr<_228d31971_VarDecl>>();


	_228d31971_Impl(jule::Ptr<_228d31971_TypeDecl> __param_base, jule::Ptr<_228d31971_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_228d31971_FnDecl>> __param_methods, jule::Slice<jule::Ptr<_228d31971_VarDecl>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_228d31971_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _228d31971_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _228d31971_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _228d79a30_FileInfo {
	jule::Ptr<_228d3160d_Ast> _field_ast = jule::Ptr<_228d3160d_Ast>();
	jule::Slice<_2276bcb9e_Log> _field_errors = jule::Slice<_2276bcb9e_Log>();


	_228d79a30_FileInfo(jule::Ptr<_228d3160d_Ast> __param_ast, jule::Slice<_2276bcb9e_Log> __param_errors): _field_ast(__param_ast), _field_errors(__param_errors) {}

	

	_228d79a30_FileInfo(void) = default;

	inline bool operator==(const _228d79a30_FileInfo &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _228d79a30_FileInfo &_Src) const { return !this->operator==(_Src); }
};


struct _228d79a30_PackageInfo {
	jule::Slice<jule::Ptr<_228d79a30_FileInfo>> _field_files = jule::Slice<jule::Ptr<_228d79a30_FileInfo>>();


	_228d79a30_PackageInfo(jule::Slice<jule::Ptr<_228d79a30_FileInfo>> __param_files): _field_files(__param_files) {}

	

	_228d79a30_PackageInfo(void) = default;

	inline bool operator==(const _228d79a30_PackageInfo &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _228d79a30_PackageInfo &_Src) const { return !this->operator==(_Src); }
};


struct _228d45c71_Stmt {
	jule::Slice<_228d7aadb_Token> _field_tokens = jule::Slice<_228d7aadb_Token>();
	jule::Bool _field_terminated = jule::Bool();


	_228d45c71_Stmt(jule::Slice<_228d7aadb_Token> __param_tokens, jule::Bool __param_terminated): _field_tokens(__param_tokens), _field_terminated(__param_terminated) {}

	

	_228d45c71_Stmt(void) = default;

	inline bool operator==(const _228d45c71_Stmt &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_terminated == _Src._field_terminated;
	}

	inline bool operator!=(const _228d45c71_Stmt &_Src) const { return !this->operator==(_Src); }
};


struct _228d45c71_ScopeParser {
	jule::Ptr<_229a51c34_Parser> _field_p = jule::Ptr<_229a51c34_Parser>();
	jule::Ptr<_228d31971_ScopeTree> _field_s = jule::Ptr<_228d31971_ScopeTree>();
	jule::Slice<jule::Ptr<_228d45c71_Stmt>> _field_stmts = jule::Slice<jule::Ptr<_228d45c71_Stmt>>();
	jule::Int _field_pos = jule::Int();


	_228d45c71_ScopeParser(jule::Ptr<_229a51c34_Parser> __param_p, jule::Ptr<_228d31971_ScopeTree> __param_s, jule::Slice<jule::Ptr<_228d45c71_Stmt>> __param_stmts, jule::Int __param_pos): _field_p(__param_p), _field_s(__param_s), _field_stmts(__param_stmts), _field_pos(__param_pos) {}

	

	_228d45c71_ScopeParser(void) = default;

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_228d7aadb_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_insert_as_next(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d45c71_Stmt> _method_next(void);


	inline jule::Ptr<_228d31971_ScopeTree> _method_build_scope(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_var_st(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_ret_st(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ptr<_228d45c71_Stmt>&);


	inline jule::Ptr<_228d31971_WhileKind> _method_build_while_iter_kind(jule::Slice<_228d7aadb_Token>&);


	inline jule::Slice<jule::Slice<_228d7aadb_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_VarDecl> _method_build_range_kind_key(jule::Slice<_228d7aadb_Token>&);


	inline jule::Slice<jule::Ptr<_228d31971_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_228d7aadb_Token>>&);


	inline void _method_setup_range_kind_keys_plain(jule::Ptr<_228d31971_RangeKind>&,jule::Slice<_228d7aadb_Token>&);


	inline void _method_setup_range_kind_keys_explicit(jule::Ptr<_228d31971_RangeKind>&,jule::Slice<_228d7aadb_Token>&);


	inline void _method_setup_range_kind_keys(jule::Ptr<_228d31971_RangeKind>&,jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_RangeKind> _method_build_range_iter_kind(jule::Slice<_228d7aadb_Token>&,jule::Slice<_228d7aadb_Token>&,_228d7aadb_Token&);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_228d7aadb_Token>&,_228d7aadb_Token&);


	inline jule::Any _method_build_common_iter(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ptr<_228d45c71_Stmt>&);


	inline jule::Any _method_build_break_st(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_cont_st(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_If> _method_build_if(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_Else> _method_build_else(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_comment_st(_228d7aadb_Token&);


	inline jule::Any _method_build_co_call_st(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_fall_st(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_228d7aadb_Token>&);


	inline void _method_push_case_expr(jule::Slice<_228d7aadb_Token>,_228d7aadb_Token,jule::Bool,jule::Slice<jule::Ptr<_228d31971_Expr>>&);


	inline jule::Slice<jule::Ptr<_228d31971_Expr>> _method_build_case_exprs(jule::Slice<_228d7aadb_Token>&,jule::Bool);


	inline jule::Ptr<_228d31971_ScopeTree> _method_build_case_scope(jule::Slice<_228d7aadb_Token>&);


	inline std::tuple<jule::Ptr<_228d31971_Case>,jule::Bool> _method_build_case(jule::Slice<_228d7aadb_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ptr<_228d31971_Case>>,jule::Ptr<_228d31971_Else>> _method_build_cases(jule::Slice<_228d7aadb_Token>,jule::Bool);


	inline jule::Ptr<_228d31971_MatchCase> _method_build_match_case(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_ScopeTree> _method_build_scope_st(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_LabelSt> _method_build_label_st(jule::Slice<_228d7aadb_Token>&);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228e13aa8_AssignInfo> _method_build_assign_info(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_AssignLeft> _method_build_assign_l(jule::Slice<_228d7aadb_Token>&);


	inline jule::Slice<jule::Ptr<_228d31971_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_228d7aadb_Token>>&);


	inline std::tuple<jule::Ptr<_228d31971_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_228d7aadb_Token>&);


	inline std::tuple<jule::Ptr<_228d31971_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_228d7aadb_Token>);


	inline std::tuple<jule::Ptr<_228d31971_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_use_expr(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_st(jule::Ptr<_228d45c71_Stmt>&);


	inline void _method_build(jule::Slice<_228d7aadb_Token>&,jule::Ptr<_228d31971_ScopeTree>&);


	inline bool operator==(const _228d45c71_ScopeParser &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _228d45c71_ScopeParser &_Src) const { return !this->operator==(_Src); }
};


struct _229a547e7_CallData {
	jule::Slice<_228d7aadb_Token> _field_expr_tokens = jule::Slice<_228d7aadb_Token>();
	jule::Slice<_228d7aadb_Token> _field_args_tokens = jule::Slice<_228d7aadb_Token>();
	jule::Slice<_228d7aadb_Token> _field_generics_tokens = jule::Slice<_228d7aadb_Token>();


	_229a547e7_CallData(jule::Slice<_228d7aadb_Token> __param_expr_tokens, jule::Slice<_228d7aadb_Token> __param_args_tokens, jule::Slice<_228d7aadb_Token> __param_generics_tokens): _field_expr_tokens(__param_expr_tokens), _field_args_tokens(__param_args_tokens), _field_generics_tokens(__param_generics_tokens) {}

	

	_229a547e7_CallData(void) = default;

	inline bool operator==(const _229a547e7_CallData &_Src) const {
		return 
			this->_field_expr_tokens == _Src._field_expr_tokens &&
			this->_field_args_tokens == _Src._field_args_tokens &&
			this->_field_generics_tokens == _Src._field_generics_tokens;
	}

	inline bool operator!=(const _229a547e7_CallData &_Src) const { return !this->operator==(_Src); }
};


struct _229a547e7_ExprBuilder {
	jule::Ptr<_229a51c34_Parser> _field_p = jule::Ptr<_229a51c34_Parser>();


	_229a547e7_ExprBuilder(jule::Ptr<_229a51c34_Parser> __param_p): _field_p(__param_p) {}

	

	_229a547e7_ExprBuilder(void) = default;

	inline void _method_push_err(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_228d31971_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_228d7aadb_Token>>&);


	inline jule::Ptr<_228d31971_LitExpr> _method_build_lit(_228d7aadb_Token);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_primitive_type(_228d7aadb_Token&);


	inline jule::Any _method_build_single(_228d7aadb_Token);


	inline jule::Ptr<_228d31971_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_UnaryExpr> _method_build_unary(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_type(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_sub_ident(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_VariadicExpr> _method_build_variadic(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_CastExpr> _method_try_build_cast(jule::Slice<_228d7aadb_Token>&);


	inline void _method_push_arg(jule::Slice<jule::Ptr<_228d31971_Expr>>&,jule::Slice<_228d7aadb_Token>,_228d7aadb_Token);


	inline jule::Slice<jule::Ptr<_228d31971_Expr>> _method_build_args(jule::Slice<_228d7aadb_Token>);


	inline jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _method_build_call_generics(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_FnCallExpr> _method_build_fn_call(_228d7aadb_Token&,jule::Ptr<_229a547e7_CallData>&);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_FnDecl> _method_build_anon_fn(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_unsafe(jule::Slice<_228d7aadb_Token>&);


	inline void _method_push_range_lit_part(jule::Slice<_228d7aadb_Token>,_228d7aadb_Token,jule::Slice<jule::Slice<_228d7aadb_Token>>&);


	inline jule::Slice<jule::Slice<_228d7aadb_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_228d7aadb_Token>&);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_StructLit> _method_build_typed_struct_literal(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_BraceLit> _method_build_brace_lit(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_brace_range(jule::Slice<_228d7aadb_Token>&);


	inline jule::Slice<jule::Slice<_228d7aadb_Token>> _method_get_enumerable_parts(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_SliceExpr> _method_build_slice(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_IndexingExpr> _method_build_indexing(jule::Slice<_228d7aadb_Token>,jule::Slice<_228d7aadb_Token>,_228d7aadb_Token);


	inline jule::Ptr<_228d31971_SlicingExpr> _method_build_slicing(jule::Slice<_228d7aadb_Token>&,jule::Slice<_228d7aadb_Token>&,jule::Int&,_228d7aadb_Token&);


	inline jule::Any _method_build_bracket_range(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_ternary(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_data(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_BinopExpr> _method_build_binop(jule::Slice<_228d7aadb_Token>&,jule::Int);


	inline jule::Any _method_build(jule::Slice<_228d7aadb_Token>&);


	inline jule::Any _method_build_kind(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_Expr> _method_build_from_tokens(jule::Slice<_228d7aadb_Token>);


	inline bool operator==(const _229a547e7_ExprBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p;
	}

	inline bool operator!=(const _229a547e7_ExprBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _229a51c34_Parser {
	jule::Ptr<_229a51c34_Parser> self;

	jule::Ptr<_228d3160d_Ast> _field_ast = jule::Ptr<_228d3160d_Ast>();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Ptr<_228d31971_CommentGroup> _field_comment_group = jule::Ptr<_228d31971_CommentGroup>();
	jule::Slice<_2276bcb9e_Log> _field_errors = jule::Slice<_2276bcb9e_Log>();


	_229a51c34_Parser(jule::Ptr<_228d3160d_Ast> __param_ast, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_directives, jule::Ptr<_228d31971_CommentGroup> __param_comment_group, jule::Slice<_2276bcb9e_Log> __param_errors): _field_ast(__param_ast), _field_directives(__param_directives), _field_comment_group(__param_comment_group), _field_errors(__param_errors) {
		this->self = jule::Ptr<_229a51c34_Parser>::make(this, nullptr);

	}

	~_229a51c34_Parser(void) { this->self.ref = nullptr; }

	_229a51c34_Parser(void) { this->self = jule::Ptr<_229a51c34_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_228d31971_Expr> _method_build_expr(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_Directive> _method_build_directive(jule::Slice<_228d7aadb_Token>);


	inline void _method_push_directive(jule::Ptr<_228d31971_Directive>);


	inline jule::Ptr<_228d31971_ScopeTree> _method_build_scope(jule::Slice<_228d7aadb_Token>&);


	inline std::tuple<jule::Ptr<_228d31971_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_228d7aadb_Token>&,jule::Int*,jule::Bool);


	inline std::tuple<jule::Ptr<_228d31971_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_228d7aadb_Token>&,jule::Int*,jule::Bool);


	inline jule::Ptr<_228d31971_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_228d7aadb_Token>&);


	inline void _method_build_var_type_and_expr(jule::Ptr<_228d31971_VarDecl>&,jule::Slice<_228d7aadb_Token>&);


	inline void _method_build_var_common(jule::Ptr<_228d31971_VarDecl>&,jule::Slice<_228d7aadb_Token>);


	inline void _method_build_var_begin(jule::Ptr<_228d31971_VarDecl>&,jule::Ptr<jule::Int>,jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_VarDecl> _method_build_var(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_GenericDecl> _method_build_generic(jule::Slice<_228d7aadb_Token>&);


	inline jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _method_build_generics(jule::Slice<_228d7aadb_Token>&,_228d7aadb_Token&);


	inline jule::Ptr<_228d31971_ParamDecl> _method_build_self_param(jule::Slice<_228d7aadb_Token>);


	inline void _method_param_type_begin(jule::Ptr<_228d31971_ParamDecl>&,jule::Int&,jule::Slice<_228d7aadb_Token>&);


	inline void _method_build_param_type(jule::Ptr<_228d31971_ParamDecl>&,jule::Slice<_228d7aadb_Token>&);


	inline void _method_param_body_id(jule::Ptr<_228d31971_ParamDecl>,_228d7aadb_Token);


	inline void _method_build_param_body(jule::Ptr<_228d31971_ParamDecl>&,jule::Ptr<jule::Int>,jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_ParamDecl> _method_build_param(jule::Slice<_228d7aadb_Token>);


	inline void _method_check_params(jule::Slice<jule::Ptr<_228d31971_ParamDecl>>&);


	inline jule::Slice<jule::Ptr<_228d31971_ParamDecl>> _method_build_params(jule::Slice<_228d7aadb_Token>&,jule::Bool);


	inline std::tuple<jule::Ptr<_228d31971_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_228d7aadb_Token>&,jule::Int&);


	inline std::tuple<jule::Ptr<_228d31971_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_228d7aadb_Token>&,jule::Int&);


	inline jule::Ptr<_228d31971_FnDecl> _method_build_fn_prototype(jule::Slice<_228d7aadb_Token>&,jule::Int&,jule::Bool);


	inline jule::Ptr<_228d31971_FnDecl> _method_build_fn(jule::Slice<_228d7aadb_Token>&,jule::Bool,jule::Bool);


	inline jule::Slice<_228d7aadb_Token> _method_get_use_decl_selectors(jule::Slice<_228d7aadb_Token>);


	inline void _method_build_cpp_use_decl(jule::Ptr<_228d31971_UseDecl>&,jule::Slice<_228d7aadb_Token>&);


	inline void _method_build_std_use_decl(jule::Ptr<_228d31971_UseDecl>&,jule::Slice<_228d7aadb_Token>);


	inline void _method_build_ident_use_decl(jule::Ptr<_228d31971_UseDecl>&,jule::Slice<_228d7aadb_Token>);


	inline void _method_parse_use_decl(jule::Ptr<_228d31971_UseDecl>&,jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_UseDecl> _method_build_use_decl(jule::Slice<_228d7aadb_Token>,jule::Bool);


	inline jule::Ptr<_228d31971_Expr> _method_build_enum_item_expr(jule::Ptr<jule::Int>,jule::Slice<_228d7aadb_Token>&);


	inline jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>> _method_build_enum_items(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_EnumDecl> _method_build_enum_decl(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_FieldDecl> _method_build_field(jule::Slice<_228d7aadb_Token>);


	inline jule::Slice<jule::Ptr<_228d31971_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_StructDecl> _method_build_struct_decl(jule::Slice<_228d7aadb_Token>&);


	inline void _method_check_method_receiver(jule::Ptr<_228d31971_FnDecl>&);


	inline jule::Slice<jule::Ptr<_228d31971_FnDecl>> _method_build_trait_methods(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_TraitDecl> _method_build_trait_decl(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_FnDecl> _method_build_cpp_link_fn(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_VarDecl> _method_build_cpp_link_var(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_StructDecl> _method_build_cpp_link_struct(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_228d7aadb_Token>);


	inline jule::Ptr<_228d31971_UseDecl> _method_build_cpp_link_use(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_FnDecl> _method_get_method(jule::Slice<_228d7aadb_Token>&);


	inline void _method_parse_impl_body(jule::Ptr<_228d31971_Impl>&,jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_Impl> _method_build_impl(jule::Slice<_228d7aadb_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_228d7aadb_Token>&);


	inline void _method_check_comment_group(_228d31971_Node&);


	inline void _method_check_directive(_228d31971_Node&);


	inline void _method_apply_fn_meta(jule::Ptr<_228d31971_FnDecl>&,jule::Bool);


	inline void _method_apply_meta(_228d31971_Node&,jule::Bool);


	inline void _method_check_use_decl(_228d31971_Node&);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_228d7aadb_Token>);


	inline _228d31971_Node _method_parse_node(jule::Slice<_228d7aadb_Token>&);


	inline void _method_append_node(jule::Slice<_228d7aadb_Token>&);


	inline void _method_remove_range(jule::Int,jule::Str,jule::Slice<_228d7aadb_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_wrong_order_close_err(_228d7aadb_Token&,jule::Slice<_228d7aadb_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_range_close(_228d7aadb_Token,jule::Str,jule::Slice<_228d7aadb_Token>&,jule::Slice<jule::Int>&);


	inline void _method_check_ranges(jule::Slice<_228d7aadb_Token>&);


	inline void _method_parse(jule::Ptr<_228d34677_File>&);


	inline bool operator==(const _229a51c34_Parser &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_directives == _Src._field_directives &&
			this->_field_comment_group == _Src._field_comment_group &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _229a51c34_Parser &_Src) const { return !this->operator==(_Src); }
};


struct _1e5543d98_TypeBuilder {
	jule::Ptr<_229a51c34_Parser> _field_p = jule::Ptr<_229a51c34_Parser>();
	jule::Slice<_228d7aadb_Token> _field_tokens = jule::Slice<_228d7aadb_Token>();
	jule::Int* _field_i = nullptr;
	jule::Bool _field_err = jule::Bool();


	_1e5543d98_TypeBuilder(jule::Ptr<_229a51c34_Parser> __param_p, jule::Slice<_228d7aadb_Token> __param_tokens, jule::Int* __param_i, jule::Bool __param_err): _field_p(__param_p), _field_tokens(__param_tokens), _field_i(__param_i), _field_err(__param_err) {}

	

	_1e5543d98_TypeBuilder(void) = default;

	inline void _method_push_err(_228d7aadb_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_prim(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_228d7aadb_Token>> _method_ident_generics(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_ident(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_fn(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_ptr(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_sptr(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_op(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_slc(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_arr(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_map(jule::Int,jule::Slice<_228d7aadb_Token>&);


	inline jule::Ptr<_228d31971_TypeDecl> _method_build_enumerable(void);


	inline jule::Ptr<_228d31971_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ptr<_228d31971_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(const _1e5543d98_TypeBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_i == _Src._field_i &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _1e5543d98_TypeBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1e856e8a4_Const {
	jule::Any _field_data = jule::Any();


	_1e856e8a4_Const(jule::Any __param_data): _field_data(__param_data) {}

	

	_1e856e8a4_Const(void) = default;

	static inline jule::Ptr<_1e856e8a4_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ptr<_1e856e8a4_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ptr<_1e856e8a4_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ptr<_1e856e8a4_Const> _static_method_new_str(jule::Str);


	static inline jule::Ptr<_1e856e8a4_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ptr<_1e856e8a4_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_1e856e8a4_Const);


	inline jule::Bool _method_and(_1e856e8a4_Const);


	inline jule::Bool _method_or(_1e856e8a4_Const);


	inline jule::Bool _method_eqs(_1e856e8a4_Const);


	inline jule::Bool _method_lt(_1e856e8a4_Const);


	inline jule::Bool _method_gt(_1e856e8a4_Const);


	inline jule::Bool _method_add(_1e856e8a4_Const);


	inline jule::Bool _method_sub(_1e856e8a4_Const);


	inline jule::Bool _method_mul(_1e856e8a4_Const);


	inline jule::Bool _method_div(_1e856e8a4_Const);


	inline jule::Bool _method_mod(_1e856e8a4_Const);


	inline jule::Bool _method_bitwise_and(_1e856e8a4_Const);


	inline jule::Bool _method_bitwise_or(_1e856e8a4_Const);


	inline jule::Bool _method_xor(_1e856e8a4_Const);


	inline jule::Bool _method_lshift(_1e856e8a4_Const);


	inline jule::Bool _method_rshift(_1e856e8a4_Const);


	inline bool operator==(const _1e856e8a4_Const &_Src) const {
		return 
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1e856e8a4_Const &_Src) const { return !this->operator==(_Src); }
};


struct _228e0d025_FieldIns {
	jule::Ptr<_228e0d025_Field> _field_decl = jule::Ptr<_228e0d025_Field>();
	jule::Ptr<_229d681e3_TypeKind> _field_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229d70d33_Data> _field_default = jule::Ptr<_229d70d33_Data>();


	_228e0d025_FieldIns(jule::Ptr<_228e0d025_Field> __param_decl, jule::Ptr<_229d681e3_TypeKind> __param_kind, jule::Ptr<_229d70d33_Data> __param_default): _field_decl(__param_decl), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_228e0d025_FieldIns(void) = default;

	inline bool operator==(const _228e0d025_FieldIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _228e0d025_FieldIns &_Src) const { return !this->operator==(_Src); }
};


struct _228e0d025_StructIns: public _229d681e3_Kind {
	jule::Ptr<_228e0d025_StructIns> self;

	jule::Bool _field_checked = jule::Bool();
	jule::Ptr<_228e0d025_Struct> _field_decl = jule::Ptr<_228e0d025_Struct>();
	jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_229d681e3_TypeKind>>();
	jule::Slice<jule::Ptr<_228e0d025_FieldIns>> _field_fields = jule::Slice<jule::Ptr<_228e0d025_FieldIns>>();
	jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _field_methods = jule::Slice<jule::Ptr<_229b6ebcb_Fn>>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Ptr<_228d6ecab_ReferenceStack> _field_references = jule::Ptr<_228d6ecab_ReferenceStack>();


	_228e0d025_StructIns(jule::Bool __param_checked, jule::Ptr<_228e0d025_Struct> __param_decl, jule::Slice<jule::Ptr<_229d681e3_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_228e0d025_FieldIns>> __param_fields, jule::Slice<jule::Ptr<_229b6ebcb_Fn>> __param_methods, jule::Bool __param_mutable, jule::Ptr<_228d6ecab_ReferenceStack> __param_references): _field_checked(__param_checked), _field_decl(__param_decl), _field_generics(__param_generics), _field_fields(__param_fields), _field_methods(__param_methods), _field_mutable(__param_mutable), _field_references(__param_references) {
		this->self = jule::Ptr<_228e0d025_StructIns>::make(this, nullptr);

	}

	~_228e0d025_StructIns(void) { this->self.ref = nullptr; }

	_228e0d025_StructIns(void) { this->self = jule::Ptr<_228e0d025_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Bool _method_same(jule::Ptr<_228e0d025_StructIns>);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_228e0d025_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(const _228e0d025_StructIns &_Src) const {
		return 
			this->_field_checked == _Src._field_checked &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_references == _Src._field_references;
	}

	inline bool operator!=(const _228e0d025_StructIns &_Src) const { return !this->operator==(_Src); }
};


struct _229b6ebcb_RetType {
	jule::Ptr<_229d681e3_TypeSymbol> _field_kind = jule::Ptr<_229d681e3_TypeSymbol>();
	jule::Slice<_228d7aadb_Token> _field_idents = jule::Slice<_228d7aadb_Token>();


	_229b6ebcb_RetType(jule::Ptr<_229d681e3_TypeSymbol> __param_kind, jule::Slice<_228d7aadb_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_229b6ebcb_RetType(void) = default;

	inline bool operator==(const _229b6ebcb_RetType &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _229b6ebcb_RetType &_Src) const { return !this->operator==(_Src); }
};


struct _229b6ebcb_ParamIns {
	jule::Ptr<_229b6ebcb_Param> _field_decl = jule::Ptr<_229b6ebcb_Param>();
	jule::Ptr<_229d681e3_TypeKind> _field_kind = jule::Ptr<_229d681e3_TypeKind>();


	_229b6ebcb_ParamIns(jule::Ptr<_229b6ebcb_Param> __param_decl, jule::Ptr<_229d681e3_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_229b6ebcb_ParamIns(void) = default;

	inline jule::Str _method_to_str(void);


	inline bool operator==(const _229b6ebcb_ParamIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _229b6ebcb_ParamIns &_Src) const { return !this->operator==(_Src); }
};


struct _229b6ebcb_FnIns: public _229d681e3_Kind {
	jule::Ptr<_229b6ebcb_FnIns> self;

	jule::Ptr<_228e0d025_StructIns> _field_owner = jule::Ptr<_228e0d025_StructIns>();
	jule::Ptr<_229b6ebcb_Fn> _field_decl = jule::Ptr<_229b6ebcb_Fn>();
	jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_229d681e3_TypeKind>>();
	jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>> _field_params = jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>();
	jule::Ptr<_229d681e3_TypeKind> _field_result = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();
	jule::Ptr<_228d6ecab_ReferenceStack> _field_references = jule::Ptr<_228d6ecab_ReferenceStack>();
	jule::Bool _field_anon = jule::Bool();
	jule::Ptr<_228d6ecab_ReferenceStack> _field_refers = jule::Ptr<_228d6ecab_ReferenceStack>();
	jule::U8 _field_caller = jule::U8();
	jule::Bool _field_reloaded = jule::Bool();


	_229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns> __param_owner, jule::Ptr<_229b6ebcb_Fn> __param_decl, jule::Slice<jule::Ptr<_229d681e3_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>> __param_params, jule::Ptr<_229d681e3_TypeKind> __param_result, jule::Ptr<_1e56c3885_Scope> __param_scope, jule::Ptr<_228d6ecab_ReferenceStack> __param_references, jule::Bool __param_anon, jule::Ptr<_228d6ecab_ReferenceStack> __param_refers, jule::U8 __param_caller, jule::Bool __param_reloaded): _field_owner(__param_owner), _field_decl(__param_decl), _field_generics(__param_generics), _field_params(__param_params), _field_result(__param_result), _field_scope(__param_scope), _field_references(__param_references), _field_anon(__param_anon), _field_refers(__param_refers), _field_caller(__param_caller), _field_reloaded(__param_reloaded) {
		this->self = jule::Ptr<_229b6ebcb_FnIns>::make(this, nullptr);

	}

	~_229b6ebcb_FnIns(void) { this->self.ref = nullptr; }

	_229b6ebcb_FnIns(void) { this->self = jule::Ptr<_229b6ebcb_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_same(jule::Ptr<_229b6ebcb_FnIns>);


	inline jule::Str _method_get_kind_str(jule::Bool);


	inline bool operator==(const _229b6ebcb_FnIns &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_params == _Src._field_params &&
			this->_field_result == _Src._field_result &&
			this->_field_scope == _Src._field_scope &&
			this->_field_references == _Src._field_references &&
			this->_field_anon == _Src._field_anon &&
			this->_field_refers == _Src._field_refers &&
			this->_field_caller == _Src._field_caller &&
			this->_field_reloaded == _Src._field_reloaded;
	}

	inline bool operator!=(const _229b6ebcb_FnIns &_Src) const { return !this->operator==(_Src); }
};


struct _228d6ecab_ReferenceStack {
	jule::Slice<jule::Any> _field_buffer = jule::Slice<jule::Any>();


	_228d6ecab_ReferenceStack(jule::Slice<jule::Any> __param_buffer): _field_buffer(__param_buffer) {}

	

	_228d6ecab_ReferenceStack(void) = default;

	static inline jule::Ptr<_228d6ecab_ReferenceStack> _static_method_new(void);


	inline jule::Int _method_len(void);


	inline jule::Any _method_at(jule::Int);


	inline void _method_push(jule::Any);


	inline jule::Bool _method_exist_0(jule::Ptr<_1e58b0654_Var>);
	inline jule::Bool _method_exist_1(jule::Ptr<_229b6ebcb_FnIns>);
	inline jule::Bool _method_exist_2(jule::Ptr<_228e0d025_StructIns>);


	inline bool operator==(const _228d6ecab_ReferenceStack &_Src) const {
		return 
			this->_field_buffer == _Src._field_buffer;
	}

	inline bool operator!=(const _228d6ecab_ReferenceStack &_Src) const { return !this->operator==(_Src); }
};


struct _228d6ecab_SymbolBuilder {
	jule::Ptr<_228d6ecab_SymbolBuilder> self;

	jule::Ptr<_228d6ecab_SymbolBuilder> _field_owner = jule::Ptr<_228d6ecab_SymbolBuilder>();
	jule::Trait<_1e53308ee_Importer> _field_importer = jule::Trait<_1e53308ee_Importer>();
	jule::Slice<_2276bcb9e_Log> _field_errors = jule::Slice<_2276bcb9e_Log>();
	jule::Ptr<_228d3160d_Ast> _field_ast = jule::Ptr<_228d3160d_Ast>();
	jule::Ptr<_229d56533_SymbolTable> _field_table = jule::Ptr<_229d56533_SymbolTable>();


	_228d6ecab_SymbolBuilder(jule::Ptr<_228d6ecab_SymbolBuilder> __param_owner, jule::Trait<_1e53308ee_Importer> __param_importer, jule::Slice<_2276bcb9e_Log> __param_errors, jule::Ptr<_228d3160d_Ast> __param_ast, jule::Ptr<_229d56533_SymbolTable> __param_table): _field_owner(__param_owner), _field_importer(__param_importer), _field_errors(__param_errors), _field_ast(__param_ast), _field_table(__param_table) {
		this->self = jule::Ptr<_228d6ecab_SymbolBuilder>::make(this, nullptr);

	}

	~_228d6ecab_SymbolBuilder(void) { this->self.ref = nullptr; }

	_228d6ecab_SymbolBuilder(void) { this->self = jule::Ptr<_228d6ecab_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ptr<_228d6ecab_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_228d7aadb_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_text(_228d7aadb_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ptr<_228d31971_UseDecl>&);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_build_cpp_header_import(jule::Ptr<_228d31971_UseDecl>&);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_build_std_import(jule::Ptr<_228d31971_UseDecl>&);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_build_ident_import(jule::Ptr<_228d31971_UseDecl>&);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_build_import(jule::Ptr<_228d31971_UseDecl>&);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ptr<_1e53308ee_ImportInfo>&);


	inline void _method_impl_import_selections(jule::Ptr<_1e53308ee_ImportInfo>&,jule::Ptr<_228d31971_UseDecl>&);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ptr<_228d6ecab_SymbolBuilder>&,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ptr<_228d6ecab_SymbolBuilder>&,jule::Ptr<_1e53308ee_ImportInfo>&,_228d7aadb_Token&);


	inline jule::Bool _method_check_import_cycles(jule::Ptr<_1e53308ee_ImportInfo>,jule::Ptr<_228d31971_UseDecl>&);


	inline void _method_check_package_accessibility(jule::Ptr<_228d31971_UseDecl>&,jule::Str&,jule::Str&);


	inline jule::Bool _method_import_package(jule::Ptr<_1e53308ee_ImportInfo>&,jule::Ptr<_228d31971_UseDecl>&);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_import_use_decl(jule::Ptr<_228d31971_UseDecl>&);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_228d31971_Node&);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ptr<_228d31971_Directive>&);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(const _228d6ecab_SymbolBuilder &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_importer == _Src._field_importer &&
			this->_field_errors == _Src._field_errors &&
			this->_field_ast == _Src._field_ast &&
			this->_field_table == _Src._field_table;
	}

	inline bool operator!=(const _228d6ecab_SymbolBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1e56ca370_Impl {
	jule::Ptr<_228d31971_TypeDecl> _field_base = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_228d31971_TypeDecl> _field_dest = jule::Ptr<_228d31971_TypeDecl>();
	jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _field_methods = jule::Slice<jule::Ptr<_229b6ebcb_Fn>>();
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _field_statics = jule::Slice<jule::Ptr<_1e58b0654_Var>>();


	_1e56ca370_Impl(jule::Ptr<_228d31971_TypeDecl> __param_base, jule::Ptr<_228d31971_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_229b6ebcb_Fn>> __param_methods, jule::Slice<jule::Ptr<_1e58b0654_Var>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1e56ca370_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _1e56ca370_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _1e56ca370_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Scope {
	jule::Ptr<_1e56c3885_Scope> _field_parent = jule::Ptr<_1e56c3885_Scope>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_1e56c3885_Scope(jule::Ptr<_1e56c3885_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_1e56c3885_Scope(void) = default;

	inline bool operator==(const _1e56c3885_Scope &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _1e56c3885_Scope &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_If {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();


	_1e56c3885_If(jule::Any __param_expr, jule::Ptr<_1e56c3885_Scope> __param_scope): _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1e56c3885_If(void) = default;

	inline bool operator==(const _1e56c3885_If &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1e56c3885_If &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Else {
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();


	_1e56c3885_Else(jule::Ptr<_1e56c3885_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1e56c3885_Else(void) = default;

	inline bool operator==(const _1e56c3885_Else &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1e56c3885_Else &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Conditional {
	jule::Slice<jule::Ptr<_1e56c3885_If>> _field_elifs = jule::Slice<jule::Ptr<_1e56c3885_If>>();
	jule::Ptr<_1e56c3885_Else> _field_default = jule::Ptr<_1e56c3885_Else>();


	_1e56c3885_Conditional(jule::Slice<jule::Ptr<_1e56c3885_If>> __param_elifs, jule::Ptr<_1e56c3885_Else> __param_default): _field_elifs(__param_elifs), _field_default(__param_default) {}

	

	_1e56c3885_Conditional(void) = default;

	inline bool operator==(const _1e56c3885_Conditional &_Src) const {
		return 
			this->_field_elifs == _Src._field_elifs &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1e56c3885_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_InfIter {
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();


	_1e56c3885_InfIter(jule::Ptr<_1e56c3885_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1e56c3885_InfIter(void) = default;

	inline bool operator==(const _1e56c3885_InfIter &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1e56c3885_InfIter &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_WhileIter {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();


	_1e56c3885_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ptr<_1e56c3885_Scope> __param_scope): _field_expr(__param_expr), _field_next(__param_next), _field_scope(__param_scope) {}

	

	_1e56c3885_WhileIter(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _1e56c3885_WhileIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1e56c3885_WhileIter &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_RangeIter {
	jule::Ptr<_229d70d33_Data> _field_expr = jule::Ptr<_229d70d33_Data>();
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();
	jule::Ptr<_1e58b0654_Var> _field_key_a = jule::Ptr<_1e58b0654_Var>();
	jule::Ptr<_1e58b0654_Var> _field_key_b = jule::Ptr<_1e58b0654_Var>();


	_1e56c3885_RangeIter(jule::Ptr<_229d70d33_Data> __param_expr, jule::Ptr<_1e56c3885_Scope> __param_scope, jule::Ptr<_1e58b0654_Var> __param_key_a, jule::Ptr<_1e58b0654_Var> __param_key_b): _field_expr(__param_expr), _field_scope(__param_scope), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1e56c3885_RangeIter(void) = default;

	inline bool operator==(const _1e56c3885_RangeIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _1e56c3885_RangeIter &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_ContSt {
	jule::Uintptr _field_it = jule::Uintptr();


	_1e56c3885_ContSt(jule::Uintptr __param_it): _field_it(__param_it) {}

	

	_1e56c3885_ContSt(void) = default;

	inline bool operator==(const _1e56c3885_ContSt &_Src) const {
		return 
			this->_field_it == _Src._field_it;
	}

	inline bool operator!=(const _1e56c3885_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_BreakSt {
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_mtch = jule::Uintptr();


	_1e56c3885_BreakSt(jule::Uintptr __param_it, jule::Uintptr __param_mtch): _field_it(__param_it), _field_mtch(__param_mtch) {}

	

	_1e56c3885_BreakSt(void) = default;

	inline bool operator==(const _1e56c3885_BreakSt &_Src) const {
		return 
			this->_field_it == _Src._field_it &&
			this->_field_mtch == _Src._field_mtch;
	}

	inline bool operator!=(const _1e56c3885_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Label {
	jule::Str _field_ident = jule::Str();


	_1e56c3885_Label(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1e56c3885_Label(void) = default;

	inline bool operator==(const _1e56c3885_Label &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1e56c3885_Label &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_GotoSt {
	jule::Str _field_ident = jule::Str();


	_1e56c3885_GotoSt(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1e56c3885_GotoSt(void) = default;

	inline bool operator==(const _1e56c3885_GotoSt &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1e56c3885_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Postfix {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();


	_1e56c3885_Postfix(jule::Any __param_expr, jule::Str __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1e56c3885_Postfix(void) = default;

	inline bool operator==(const _1e56c3885_Postfix &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1e56c3885_Postfix &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_MultiAssign {
	jule::Slice<jule::Any> _field_l = jule::Slice<jule::Any>();
	jule::Any _field_r = jule::Any();


	_1e56c3885_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r): _field_l(__param_l), _field_r(__param_r) {}

	

	_1e56c3885_MultiAssign(void) = default;

	inline bool operator==(const _1e56c3885_MultiAssign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r;
	}

	inline bool operator!=(const _1e56c3885_MultiAssign &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Match {
	jule::Ptr<_229d70d33_Data> _field_expr = jule::Ptr<_229d70d33_Data>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Slice<jule::Ptr<_1e56c3885_Case>> _field_cases = jule::Slice<jule::Ptr<_1e56c3885_Case>>();
	jule::Ptr<_1e56c3885_Case> _field_default = jule::Ptr<_1e56c3885_Case>();


	_1e56c3885_Match(jule::Ptr<_229d70d33_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ptr<_1e56c3885_Case>> __param_cases, jule::Ptr<_1e56c3885_Case> __param_default): _field_expr(__param_expr), _field_type_match(__param_type_match), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1e56c3885_Match(void) = default;

	inline jule::Bool _method_is_generic_type_match(void);


	inline bool operator==(const _1e56c3885_Match &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1e56c3885_Match &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Case {
	jule::Ptr<_1e56c3885_Match> _field_owner = jule::Ptr<_1e56c3885_Match>();
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();
	jule::Slice<jule::Ptr<_229d70d33_Data>> _field_exprs = jule::Slice<jule::Ptr<_229d70d33_Data>>();
	jule::Ptr<_1e56c3885_Case> _field_next = jule::Ptr<_1e56c3885_Case>();


	_1e56c3885_Case(jule::Ptr<_1e56c3885_Match> __param_owner, jule::Ptr<_1e56c3885_Scope> __param_scope, jule::Slice<jule::Ptr<_229d70d33_Data>> __param_exprs, jule::Ptr<_1e56c3885_Case> __param_next): _field_owner(__param_owner), _field_scope(__param_scope), _field_exprs(__param_exprs), _field_next(__param_next) {}

	

	_1e56c3885_Case(void) = default;

	inline jule::Bool _method_is_default(void);


	inline bool operator==(const _1e56c3885_Case &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_next == _Src._field_next;
	}

	inline bool operator!=(const _1e56c3885_Case &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_FallSt {
	jule::Uintptr _field_dest_case = jule::Uintptr();


	_1e56c3885_FallSt(jule::Uintptr __param_dest_case): _field_dest_case(__param_dest_case) {}

	

	_1e56c3885_FallSt(void) = default;

	inline bool operator==(const _1e56c3885_FallSt &_Src) const {
		return 
			this->_field_dest_case == _Src._field_dest_case;
	}

	inline bool operator!=(const _1e56c3885_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_RetSt {
	jule::Ptr<_229b6ebcb_FnIns> _field_func = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _field_vars = jule::Slice<jule::Ptr<_1e58b0654_Var>>();
	jule::Any _field_expr = jule::Any();


	_1e56c3885_RetSt(jule::Ptr<_229b6ebcb_FnIns> __param_func, jule::Slice<jule::Ptr<_1e58b0654_Var>> __param_vars, jule::Any __param_expr): _field_func(__param_func), _field_vars(__param_vars), _field_expr(__param_expr) {}

	

	_1e56c3885_RetSt(void) = default;

	inline bool operator==(const _1e56c3885_RetSt &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_vars == _Src._field_vars &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e56c3885_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_ScopeGoto {
	jule::Ptr<_228d31971_GotoSt> _field_gt = jule::Ptr<_228d31971_GotoSt>();
	jule::Ptr<_1e56c3885_ScopeChecker> _field_scope = jule::Ptr<_1e56c3885_ScopeChecker>();
	jule::Int _field_pos = jule::Int();


	_1e56c3885_ScopeGoto(jule::Ptr<_228d31971_GotoSt> __param_gt, jule::Ptr<_1e56c3885_ScopeChecker> __param_scope, jule::Int __param_pos): _field_gt(__param_gt), _field_scope(__param_scope), _field_pos(__param_pos) {}

	

	_1e56c3885_ScopeGoto(void) = default;

	inline bool operator==(const _1e56c3885_ScopeGoto &_Src) const {
		return 
			this->_field_gt == _Src._field_gt &&
			this->_field_scope == _Src._field_scope &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _1e56c3885_ScopeGoto &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_ScopeChecker: public _229d94c47_Lookup {
	jule::Ptr<_1e56c3885_ScopeChecker> self;

	jule::Ptr<_1e538b460_Sema> _field_s = jule::Ptr<_1e538b460_Sema>();
	jule::Ptr<_229b6ebcb_FnIns> _field_owner = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Ptr<_1e56c3885_ScopeChecker> _field_parent = jule::Ptr<_1e56c3885_ScopeChecker>();
	jule::Int _field_child_index = jule::Int();
	jule::Ptr<_229d56533_SymbolTable> _field_table = jule::Ptr<_229d56533_SymbolTable>();
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();
	jule::Ptr<_228d31971_ScopeTree> _field_tree = jule::Ptr<_228d31971_ScopeTree>();
	jule::Ptr<_229d681e3_TypeKind> _field_result = jule::Ptr<_229d681e3_TypeKind>();
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_cse = jule::Uintptr();
	jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeLabel>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeLabel>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeGoto>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeGoto>>>();
	jule::Int _field_i = jule::Int();


	_1e56c3885_ScopeChecker(jule::Ptr<_1e538b460_Sema> __param_s, jule::Ptr<_229b6ebcb_FnIns> __param_owner, jule::Ptr<_1e56c3885_ScopeChecker> __param_parent, jule::Int __param_child_index, jule::Ptr<_229d56533_SymbolTable> __param_table, jule::Ptr<_1e56c3885_Scope> __param_scope, jule::Ptr<_228d31971_ScopeTree> __param_tree, jule::Ptr<_229d681e3_TypeKind> __param_result, jule::Uintptr __param_it, jule::Uintptr __param_cse, jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeLabel>>> __param_labels, jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeGoto>>> __param_gotos, jule::Int __param_i): _field_s(__param_s), _field_owner(__param_owner), _field_parent(__param_parent), _field_child_index(__param_child_index), _field_table(__param_table), _field_scope(__param_scope), _field_tree(__param_tree), _field_result(__param_result), _field_it(__param_it), _field_cse(__param_cse), _field_labels(__param_labels), _field_gotos(__param_gotos), _field_i(__param_i) {
		this->self = jule::Ptr<_1e56c3885_ScopeChecker>::make(this, nullptr);

	}

	~_1e56c3885_ScopeChecker(void) { this->self.ref = nullptr; }

	_1e56c3885_ScopeChecker(void) { this->self = jule::Ptr<_1e56c3885_ScopeChecker>::make(this, nullptr); }

	inline jule::Ptr<_1e53308ee_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>);


	inline jule::Ptr<_1e58b0654_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_229d681e3_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_228e0d025_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_229b5076c_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e56be485_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline jule::Bool _method_is_deferred(void);


	inline jule::Ptr<_1e56c3885_ScopeChecker> _method_get_root(void);


	inline jule::Ptr<_1e56c3885_Label> _method_find_label(jule::Str);


	inline jule::Ptr<_1e56c3885_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ptr<_1e56c3885_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str);


	inline void _method_check_var_decl(jule::Ptr<_228d31971_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ptr<_228d31971_TypeAliasDecl>);


	inline jule::Ptr<_1e56c3885_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ptr<_228d31971_ScopeTree>&,jule::Ptr<_1e56c3885_Scope>&,jule::Ptr<_1e56c3885_ScopeChecker>&);


	inline jule::Ptr<_1e56c3885_Scope> _method_check_child_sc(jule::Ptr<_228d31971_ScopeTree>&,jule::Ptr<_1e56c3885_ScopeChecker>&);


	inline jule::Ptr<_1e56c3885_Scope> _method_check_child(jule::Ptr<_228d31971_ScopeTree>&);


	inline void _method_check_anon_scope(jule::Ptr<_228d31971_ScopeTree>);


	inline void _method_process_error_call(jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>&,_228d7aadb_Token);


	inline void _method_check_expr(jule::Ptr<_228d31971_Expr>);


	inline void _method_check_co_expr(jule::Ptr<_228d31971_CoExpr>);


	inline jule::Ptr<_1e56c3885_If> _method_check_if(jule::Ptr<_228d31971_If>);


	inline jule::Ptr<_1e56c3885_Else> _method_check_else(jule::Ptr<_228d31971_Else>);


	inline void _method_check_conditional(jule::Ptr<_228d31971_Conditional>);


	inline jule::Ptr<_1e56c3885_Scope> _method_check_iter_scope_sc(jule::Uintptr,jule::Ptr<_228d31971_ScopeTree>,jule::Ptr<_1e56c3885_ScopeChecker>);


	inline jule::Ptr<_1e56c3885_Scope> _method_check_iter_scope(jule::Uintptr,jule::Ptr<_228d31971_ScopeTree>&);


	inline void _method_check_inf_iter(jule::Ptr<_228d31971_Iter>&);


	inline void _method_check_while_iter(jule::Ptr<_228d31971_Iter>&);


	inline void _method_check_range_iter(jule::Ptr<_228d31971_Iter>&);


	inline void _method_check_iter(jule::Ptr<_228d31971_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::Uintptr);


	inline jule::Bool _method_check_valid_break_label(jule::Uintptr);


	inline jule::Ptr<_1e56c3885_ContSt> _method_check_cont_valid_scope(jule::Ptr<_228d31971_ContSt>);


	inline void _method_check_cont(jule::Ptr<_228d31971_ContSt>);


	inline void _method_check_label(jule::Ptr<_228d31971_LabelSt>);


	inline void _method_push_goto(jule::Ptr<_228d31971_GotoSt>);


	inline void _method_check_postfix(jule::Ptr<_228d31971_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline void _method_check_single_assign(jule::Ptr<_228d31971_AssignSt>&);


	inline void _method___process_end_part_of_multi_assign(jule::Ptr<_1e56c3885_MultiAssign>,jule::Ptr<_228d31971_AssignSt>,jule::Ptr<_228d31971_AssignLeft>,jule::Ptr<_229d70d33_Data>,jule::Ptr<_229d70d33_Data>);


	inline void _method_check_ret_multi_assign(jule::Ptr<_228d31971_AssignSt>&);


	inline void _method_check_multi_assign(jule::Ptr<_228d31971_AssignSt>&);


	inline void _method_check_assign_st(jule::Ptr<_228d31971_AssignSt>);


	inline jule::Ptr<_1e56c3885_Scope> _method_check_case_scope(jule::Ptr<_1e56c3885_Case>&,jule::Ptr<_228d31971_ScopeTree>&);


	inline jule::Ptr<_1e56c3885_Case> _method_check_case(jule::Ptr<_1e56c3885_Match>,jule::Int,jule::Ptr<_228d31971_Case>,jule::Ptr<_229d70d33_Data>);


	inline void _method_check_cases(jule::Ptr<_228d31971_MatchCase>&,jule::Ptr<_1e56c3885_Match>,jule::Ptr<_229d70d33_Data>);


	inline jule::Ptr<_1e56c3885_Case> _method_check_default(jule::Ptr<_1e56c3885_Match>,jule::Ptr<_228d31971_Else>);


	inline void _method_check_comptime_panic(jule::Ptr<_1e56c3885_Scope>&,_228d7aadb_Token);


	inline void _method_push_type_match(jule::Ptr<_1e56c3885_Match>,jule::Ptr<_228d31971_MatchCase>&);


	inline void _method_check_type_match(jule::Ptr<_228d31971_MatchCase>&);


	inline void _method_check_common_match(jule::Ptr<_228d31971_MatchCase>&);


	inline void _method_check_match(jule::Ptr<_228d31971_MatchCase>);


	inline void _method_check_fall(jule::Ptr<_228d31971_FallSt>);


	inline jule::Ptr<_1e56c3885_BreakSt> _method_check_break_with_label(jule::Ptr<_228d31971_BreakSt>);


	inline jule::Ptr<_1e56c3885_BreakSt> _method_check_plain_break(jule::Ptr<_228d31971_BreakSt>);


	inline void _method_check_break(jule::Ptr<_228d31971_BreakSt>);


	inline void _method_check_ret(jule::Ptr<_228d31971_RetSt>);


	inline void _method_check_use_expr(jule::Ptr<_228d31971_UseExpr>);


	inline void _method_check_node(jule::Any&);


	inline void _method_check_result(void);


	inline void _method_check_tree(void);


	inline void _method_check_goto(jule::Ptr<_1e56c3885_ScopeGoto>&,jule::Ptr<_1e56c3885_ScopeLabel>&);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ptr<_228d31971_ScopeTree>&,jule::Ptr<_1e56c3885_Scope>&);


	inline jule::Ptr<_1e56c3885_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(const _1e56c3885_ScopeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_owner == _Src._field_owner &&
			this->_field_parent == _Src._field_parent &&
			this->_field_child_index == _Src._field_child_index &&
			this->_field_table == _Src._field_table &&
			this->_field_scope == _Src._field_scope &&
			this->_field_tree == _Src._field_tree &&
			this->_field_result == _Src._field_result &&
			this->_field_it == _Src._field_it &&
			this->_field_cse == _Src._field_cse &&
			this->_field_labels == _Src._field_labels &&
			this->_field_gotos == _Src._field_gotos &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1e56c3885_ScopeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_StructArgExprModel {
	jule::Ptr<_228e0d025_FieldIns> _field_field = jule::Ptr<_228e0d025_FieldIns>();
	jule::Any _field_expr = jule::Any();


	_1e5870218_StructArgExprModel(jule::Ptr<_228e0d025_FieldIns> __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1e5870218_StructArgExprModel(void) = default;

	inline bool operator==(const _1e5870218_StructArgExprModel &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e5870218_StructArgExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_AllocStructLitExprModel {
	jule::Ptr<_1e5870218_StructLitExprModel> _field_lit = jule::Ptr<_1e5870218_StructLitExprModel>();


	_1e5870218_AllocStructLitExprModel(jule::Ptr<_1e5870218_StructLitExprModel> __param_lit): _field_lit(__param_lit) {}

	

	_1e5870218_AllocStructLitExprModel(void) = default;

	inline bool operator==(const _1e5870218_AllocStructLitExprModel &_Src) const {
		return 
			this->_field_lit == _Src._field_lit;
	}

	inline bool operator!=(const _1e5870218_AllocStructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_SliceExprModel {
	jule::Ptr<_229d681e3_TypeKind> _field_elem_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1e5870218_SliceExprModel(jule::Ptr<_229d681e3_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems): _field_elem_kind(__param_elem_kind), _field_elems(__param_elems) {}

	

	_1e5870218_SliceExprModel(void) = default;

	inline bool operator==(const _1e5870218_SliceExprModel &_Src) const {
		return 
			this->_field_elem_kind == _Src._field_elem_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1e5870218_SliceExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_AnonFnExprModel {
	jule::Ptr<_229b6ebcb_FnIns> _field_func = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Bool _field_global = jule::Bool();


	_1e5870218_AnonFnExprModel(jule::Ptr<_229b6ebcb_FnIns> __param_func, jule::Bool __param_global): _field_func(__param_func), _field_global(__param_global) {}

	

	_1e5870218_AnonFnExprModel(void) = default;

	inline bool operator==(const _1e5870218_AnonFnExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_global == _Src._field_global;
	}

	inline bool operator!=(const _1e5870218_AnonFnExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_KeyValPairExprModel {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();


	_1e5870218_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1e5870218_KeyValPairExprModel(void) = default;

	inline bool operator==(const _1e5870218_KeyValPairExprModel &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1e5870218_KeyValPairExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_MapExprModel {
	jule::Ptr<_229d681e3_TypeKind> _field_key_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229d681e3_TypeKind> _field_val_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Slice<jule::Ptr<_1e5870218_KeyValPairExprModel>> _field_entries = jule::Slice<jule::Ptr<_1e5870218_KeyValPairExprModel>>();


	_1e5870218_MapExprModel(jule::Ptr<_229d681e3_TypeKind> __param_key_kind, jule::Ptr<_229d681e3_TypeKind> __param_val_kind, jule::Slice<jule::Ptr<_1e5870218_KeyValPairExprModel>> __param_entries): _field_key_kind(__param_key_kind), _field_val_kind(__param_val_kind), _field_entries(__param_entries) {}

	

	_1e5870218_MapExprModel(void) = default;

	inline bool operator==(const _1e5870218_MapExprModel &_Src) const {
		return 
			this->_field_key_kind == _Src._field_key_kind &&
			this->_field_val_kind == _Src._field_val_kind &&
			this->_field_entries == _Src._field_entries;
	}

	inline bool operator!=(const _1e5870218_MapExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_StructSubIdentExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_229d681e3_TypeKind> _field_expr_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229b6ebcb_FnIns> _field_method = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Ptr<_228e0d025_FieldIns> _field_field = jule::Ptr<_228e0d025_FieldIns>();


	_1e5870218_StructSubIdentExprModel(jule::Any __param_expr, jule::Ptr<_229d681e3_TypeKind> __param_expr_kind, jule::Ptr<_229b6ebcb_FnIns> __param_method, jule::Ptr<_228e0d025_FieldIns> __param_field): _field_expr(__param_expr), _field_expr_kind(__param_expr_kind), _field_method(__param_method), _field_field(__param_field) {}

	

	_1e5870218_StructSubIdentExprModel(void) = default;

	inline bool operator==(const _1e5870218_StructSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_method == _Src._field_method &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _1e5870218_StructSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_StructStaticIdentExprModel {
	jule::Ptr<_228e0d025_StructIns> _field_structure = jule::Ptr<_228e0d025_StructIns>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_229b6ebcb_FnIns> _field_method = jule::Ptr<_229b6ebcb_FnIns>();


	_1e5870218_StructStaticIdentExprModel(jule::Ptr<_228e0d025_StructIns> __param_structure, jule::Any __param_expr, jule::Ptr<_229b6ebcb_FnIns> __param_method): _field_structure(__param_structure), _field_expr(__param_expr), _field_method(__param_method) {}

	

	_1e5870218_StructStaticIdentExprModel(void) = default;

	inline bool operator==(const _1e5870218_StructStaticIdentExprModel &_Src) const {
		return 
			this->_field_structure == _Src._field_structure &&
			this->_field_expr == _Src._field_expr &&
			this->_field_method == _Src._field_method;
	}

	inline bool operator!=(const _1e5870218_StructStaticIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_ArrayExprModel {
	jule::Ptr<_229d681e3_Arr> _field_kind = jule::Ptr<_229d681e3_Arr>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1e5870218_ArrayExprModel(jule::Ptr<_229d681e3_Arr> __param_kind, jule::Slice<jule::Any> __param_elems): _field_kind(__param_kind), _field_elems(__param_elems) {}

	

	_1e5870218_ArrayExprModel(void) = default;

	inline bool operator==(const _1e5870218_ArrayExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1e5870218_ArrayExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_CommonIdentExprModel {
	jule::Str _field_ident = jule::Str();


	_1e5870218_CommonIdentExprModel(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1e5870218_CommonIdentExprModel(void) = default;

	inline bool operator==(const _1e5870218_CommonIdentExprModel &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1e5870218_CommonIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_CommonSubIdentExprModel {
	jule::Ptr<_229d681e3_TypeKind> _field_expr_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1e5870218_CommonSubIdentExprModel(jule::Ptr<_229d681e3_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident): _field_expr_kind(__param_expr_kind), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1e5870218_CommonSubIdentExprModel(void) = default;

	inline bool operator==(const _1e5870218_CommonSubIdentExprModel &_Src) const {
		return 
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1e5870218_CommonSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_TupleExprModel {
	jule::Slice<jule::Ptr<_229d70d33_Data>> _field_datas = jule::Slice<jule::Ptr<_229d70d33_Data>>();


	_1e5870218_TupleExprModel(jule::Slice<jule::Ptr<_229d70d33_Data>> __param_datas): _field_datas(__param_datas) {}

	

	_1e5870218_TupleExprModel(void) = default;

	inline bool operator==(const _1e5870218_TupleExprModel &_Src) const {
		return 
			this->_field_datas == _Src._field_datas;
	}

	inline bool operator!=(const _1e5870218_TupleExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinOutCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1e5870218_BuiltinOutCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1e5870218_BuiltinOutCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinOutCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _1e5870218_BuiltinOutCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinOutlnCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1e5870218_BuiltinOutlnCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1e5870218_BuiltinOutlnCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinOutlnCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _1e5870218_BuiltinOutlnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinCloneCallExprModel {
	jule::Any _field_expr = jule::Any();


	_1e5870218_BuiltinCloneCallExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e5870218_BuiltinCloneCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinCloneCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e5870218_BuiltinCloneCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinNewCallExprModel {
	jule::Ptr<_229d681e3_TypeKind> _field_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Any _field_init = jule::Any();


	_1e5870218_BuiltinNewCallExprModel(jule::Ptr<_229d681e3_TypeKind> __param_kind, jule::Any __param_init): _field_kind(__param_kind), _field_init(__param_init) {}

	

	_1e5870218_BuiltinNewCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinNewCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_init == _Src._field_init;
	}

	inline bool operator!=(const _1e5870218_BuiltinNewCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinMakeCallExprModel {
	jule::Ptr<_229d681e3_TypeKind> _field_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Any _field_len = jule::Any();
	jule::Any _field_cap = jule::Any();


	_1e5870218_BuiltinMakeCallExprModel(jule::Ptr<_229d681e3_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap): _field_kind(__param_kind), _field_len(__param_len), _field_cap(__param_cap) {}

	

	_1e5870218_BuiltinMakeCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinMakeCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_len == _Src._field_len &&
			this->_field_cap == _Src._field_cap;
	}

	inline bool operator!=(const _1e5870218_BuiltinMakeCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinAppendCallExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_elements = jule::Any();


	_1e5870218_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements): _field_dest(__param_dest), _field_elements(__param_elements) {}

	

	_1e5870218_BuiltinAppendCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinAppendCallExprModel &_Src) const {
		return 
			this->_field_dest == _Src._field_dest &&
			this->_field_elements == _Src._field_elements;
	}

	inline bool operator!=(const _1e5870218_BuiltinAppendCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinErrorCallExprModel {
	jule::Ptr<_229b6ebcb_FnIns> _field_func = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Any _field_err = jule::Any();


	_1e5870218_BuiltinErrorCallExprModel(jule::Ptr<_229b6ebcb_FnIns> __param_func, jule::Any __param_err): _field_func(__param_func), _field_err(__param_err) {}

	

	_1e5870218_BuiltinErrorCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinErrorCallExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _1e5870218_BuiltinErrorCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_SizeofExprModel {
	jule::Any _field_expr = jule::Any();


	_1e5870218_SizeofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e5870218_SizeofExprModel(void) = default;

	inline bool operator==(const _1e5870218_SizeofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e5870218_SizeofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_AlignofExprModel {
	jule::Any _field_expr = jule::Any();


	_1e5870218_AlignofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e5870218_AlignofExprModel(void) = default;

	inline bool operator==(const _1e5870218_AlignofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e5870218_AlignofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_RuneExprModel {
	jule::I32 _field_code = jule::I32();


	_1e5870218_RuneExprModel(jule::I32 __param_code): _field_code(__param_code) {}

	

	_1e5870218_RuneExprModel(void) = default;

	inline bool operator==(const _1e5870218_RuneExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _1e5870218_RuneExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_IntegratedToStrExprModel {
	jule::Any _field_expr = jule::Any();


	_1e5870218_IntegratedToStrExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e5870218_IntegratedToStrExprModel(void) = default;

	inline bool operator==(const _1e5870218_IntegratedToStrExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e5870218_IntegratedToStrExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_TernaryExprModel {
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_1e5870218_TernaryExprModel(jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_1e5870218_TernaryExprModel(void) = default;

	inline bool operator==(const _1e5870218_TernaryExprModel &_Src) const {
		return 
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _1e5870218_TernaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BackendEmitExprModel {
	jule::Str _field_code = jule::Str();


	_1e5870218_BackendEmitExprModel(jule::Str __param_code): _field_code(__param_code) {}

	

	_1e5870218_BackendEmitExprModel(void) = default;

	inline bool operator==(const _1e5870218_BackendEmitExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _1e5870218_BackendEmitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_FreeExprModel {
	jule::Any _field_expr = jule::Any();


	_1e5870218_FreeExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1e5870218_FreeExprModel(void) = default;

	inline bool operator==(const _1e5870218_FreeExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e5870218_FreeExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e586d0c3_DirectiveChecker {
	jule::Ptr<_1e538b460_Sema> _field_s = jule::Ptr<_1e538b460_Sema>();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_d = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Any _field_o = jule::Any();


	_1e586d0c3_DirectiveChecker(jule::Ptr<_1e538b460_Sema> __param_s, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_d, jule::Any __param_o): _field_s(__param_s), _field_d(__param_d), _field_o(__param_o) {}

	

	_1e586d0c3_DirectiveChecker(void) = default;

	inline void _method_check_cdef(jule::Ptr<_228d31971_Directive>&);


	inline void _method_check_typedef(jule::Ptr<_228d31971_Directive>&);


	inline void _method_check_derive(jule::Ptr<_228d31971_Directive>&);


	inline void _method_check_namespace(jule::Ptr<_228d31971_Directive>&);


	inline void _method_check_deprecated(jule::Ptr<_228d31971_Directive>&);


	inline void _method_check_test(jule::Ptr<_228d31971_Directive>&);


	inline void _method_check_directive(jule::Ptr<_228d31971_Directive>&);


	inline void _method_check(void);


	inline bool operator==(const _1e586d0c3_DirectiveChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_d == _Src._field_d &&
			this->_field_o == _Src._field_o;
	}

	inline bool operator!=(const _1e586d0c3_DirectiveChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1e53308ee_Package: public _229d94c47_Lookup {
	jule::Slice<jule::Ptr<_229d56533_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_229d56533_SymbolTable>>();


	_1e53308ee_Package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>> __param_files): _field_files(__param_files) {}

	

	_1e53308ee_Package(void) = default;

	inline jule::Ptr<_1e53308ee_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>);


	inline jule::Ptr<_1e58b0654_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_229d681e3_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_228e0d025_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_229b5076c_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e56be485_Enum> _method_find_enum(jule::Str);


	inline bool operator==(const _1e53308ee_Package &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _1e53308ee_Package &_Src) const { return !this->operator==(_Src); }
};


struct _1e538b460_Sema: public _229d94c47_Lookup {
	jule::Ptr<_1e538b460_Sema> self;

	jule::Slice<_2276bcb9e_Log> _field_errors = jule::Slice<_2276bcb9e_Log>();
	jule::Slice<jule::Ptr<_229d56533_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_229d56533_SymbolTable>>();
	jule::Ptr<_229d56533_SymbolTable> _field_file = jule::Ptr<_229d56533_SymbolTable>();
	jule::Int _field_flags = 0LL;


	_1e538b460_Sema(jule::Slice<_2276bcb9e_Log> __param_errors, jule::Slice<jule::Ptr<_229d56533_SymbolTable>> __param_files, jule::Ptr<_229d56533_SymbolTable> __param_file, jule::Int __param_flags): _field_errors(__param_errors), _field_files(__param_files), _field_file(__param_file), _field_flags(__param_flags) {
		this->self = jule::Ptr<_1e538b460_Sema>::make(this, nullptr);

	}

	~_1e538b460_Sema(void) { this->self.ref = nullptr; }

	_1e538b460_Sema(void) { this->self = jule::Ptr<_1e538b460_Sema>::make(this, nullptr); }

	inline jule::Ptr<_1e53308ee_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>);


	inline jule::Ptr<_1e58b0654_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_229d681e3_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_228e0d025_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_229b5076c_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e56be485_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_flag(jule::Int);


	inline void _method_set_current_file(jule::Ptr<_229d56533_SymbolTable>);


	inline void _method_push_err(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_228d7aadb_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline void _method_check_directives(jule::Slice<jule::Ptr<_228d31971_Directive>>&,jule::Any);


	inline jule::Bool _method_check_generic_quantity(jule::Int,jule::Int,_228d7aadb_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::Uintptr,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ptr<_1e53308ee_ImportInfo>&);


	inline void _method_check_import_selections(jule::Ptr<_1e53308ee_ImportInfo>&);


	inline jule::Bool _method_is_use_alias_duplication(jule::Ptr<_1e53308ee_ImportInfo>&);


	inline jule::Bool _method_check_import(jule::Ptr<_1e53308ee_ImportInfo>&);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ptr<_229d681e3_TypeSymbol>&,jule::Trait<_229d94c47_Lookup>,jule::Ptr<_229d681e3_Referencer>);


	inline jule::Bool _method_check_type(jule::Ptr<_229d681e3_TypeSymbol>&,jule::Trait<_229d94c47_Lookup>);


	inline jule::Ptr<_229d681e3_TypeKind> _method_build_type_with_generics(jule::Ptr<_228d31971_TypeDecl>&,jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>);


	inline jule::Ptr<_229d681e3_TypeKind> _method_build_type(jule::Ptr<_228d31971_TypeDecl>&);


	inline jule::Ptr<_229d681e3_TypeKind> _method_select_type(jule::Ptr<_228d31971_TypeDecl>&);


	inline jule::Ptr<_229d70d33_Eval> _method_evalpd(jule::Trait<_229d94c47_Lookup>,jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_1e58b0654_Var>);


	inline jule::Ptr<_229d70d33_Eval> _method_evalp(jule::Trait<_229d94c47_Lookup>,jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Ptr<_229d70d33_Eval> _method_eval(jule::Trait<_229d94c47_Lookup>);


	inline void _method_check_assign_type(jule::Bool,jule::Ptr<_229d681e3_TypeKind>&,jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token);


	inline jule::Bool _method_check_type_compatibility(jule::Ptr<_229d681e3_TypeKind>&,jule::Ptr<_229d681e3_TypeKind>&,_228d7aadb_Token&);


	inline jule::Ptr<_229d681e3_TypeKind> _method_build_non_generic_type_kind(jule::Ptr<_228d31971_TypeDecl>&,jule::Slice<jule::Ptr<_228d31971_GenericDecl>>&);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ptr<_229b6ebcb_FnIns>&);


	inline jule::Ptr<_229b6ebcb_FnIns> _method_get_trait_check_fn_kind(jule::Ptr<_229b6ebcb_Fn>&);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ptr<_229b6ebcb_FnIns>&);


	inline void _method_check_ref_validity_for_init_expr(jule::Bool,jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ptr<_229d681e3_TypeKind>&,jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ptr<_229d681e3_TypeAlias>&,jule::Trait<_229d94c47_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ptr<_229d681e3_TypeAlias>&,jule::Trait<_229d94c47_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ptr<_229d681e3_TypeAlias>&);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ptr<_1e56be485_Enum>);


	inline void _method_check_enum_items_str(jule::Ptr<_1e56be485_Enum>&);


	inline void _method_check_enum_items_int(jule::Ptr<_1e56be485_Enum>&);


	inline void _method_check_enum_decl(jule::Ptr<_1e56be485_Enum>&);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ptr<_228d31971_GenericDecl>>&);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ptr<_229b6ebcb_Fn>&);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ptr<_229b6ebcb_Fn>&);


	inline jule::Bool _method_check_fn_decl_types(jule::Ptr<_229b6ebcb_Fn>&);


	inline jule::Bool _method_check_fn_decl_prototype(jule::Ptr<_229b6ebcb_Fn>&);


	inline void _method_check_trait_decl_method(jule::Ptr<_229b6ebcb_Fn>&);


	inline void _method_check_trait_decl_methods(jule::Ptr<_229b5076c_Trait>&);


	inline void _method_check_trait_decl(jule::Ptr<_229b5076c_Trait>&);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ptr<_229b5076c_Trait>&,jule::Ptr<_1e56ca370_Impl>&);


	inline jule::Bool _method_impl_to_struct(jule::Ptr<_228e0d025_Struct>&,jule::Ptr<_1e56ca370_Impl>&);


	inline void _method_impl_trait(jule::Ptr<_1e56ca370_Impl>&);


	inline void _method_impl_struct(jule::Ptr<_1e56ca370_Impl>&);


	inline void _method_impl_impl(jule::Ptr<_1e56ca370_Impl>&);


	inline void _method_check_var_decl(jule::Ptr<_1e58b0654_Var>&,jule::Trait<_229d94c47_Lookup>);


	inline void _method_check_global_var_decl(jule::Ptr<_1e58b0654_Var>&);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ptr<_228e0d025_Struct>&,jule::Ptr<_229b5076c_Trait>&);


	inline jule::Bool _method_check_struct_impls(jule::Ptr<_228e0d025_Struct>&);


	inline jule::Bool _method_check_struct_fields(jule::Ptr<_228e0d025_Struct>&);


	inline jule::Bool _method_check_struct_decl_methods(jule::Ptr<_228e0d025_Struct>&);


	inline void _method_check_struct_decl(jule::Ptr<_228e0d025_Struct>&);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ptr<_229b6ebcb_Fn>&);


	inline jule::Bool _method_check_fn_decls(void);


	inline void _method_push_cycle_error(jule::Ptr<_228e0d025_Struct>&,jule::Ptr<_228e0d025_Struct>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_228e0d025_Struct>&,jule::Ptr<_228e0d025_Struct>&,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ptr<_228e0d025_Struct>&,jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ptr<_228e0d025_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ptr<_228e0d025_Struct>&);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_check_var(jule::Ptr<_1e58b0654_Var>&);


	inline void _method_check_type_var(jule::Ptr<_1e58b0654_Var>&,jule::Trait<_229d94c47_Lookup>);


	inline void _method_check_global_types(void);


	inline void _method_check_type_method(jule::Ptr<_228e0d025_StructIns>&,jule::Ptr<_229b6ebcb_Fn>&);


	inline void _method_check_field_defaults(jule::Ptr<_228e0d025_StructIns>&);


	inline void _method_check_type_struct(jule::Ptr<_228e0d025_Struct>&);


	inline void _method_check_struct_types(void);


	inline void _method_check_rets(jule::Ptr<_229b6ebcb_FnIns>&);


	inline void _method_check_fn_ins_sc(jule::Ptr<_229b6ebcb_FnIns>&,jule::Ptr<_1e56c3885_ScopeChecker>&);


	inline void _method_check_fn_ins(jule::Ptr<_229b6ebcb_FnIns>&);


	inline void _method_check_type_fn(jule::Ptr<_229b6ebcb_Fn>&);


	inline void _method_check_test_fn(jule::Ptr<_229b6ebcb_FnIns>&);


	inline void _method_precheck_type_fn(jule::Ptr<_229b6ebcb_Fn>&);


	inline void _method_precheck_fn_types(void);


	inline void _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&);


	inline bool operator==(const _1e538b460_Sema &_Src) const {
		return 
			this->_field_errors == _Src._field_errors &&
			this->_field_files == _Src._field_files &&
			this->_field_file == _Src._field_file &&
			this->_field_flags == _Src._field_flags;
	}

	inline bool operator!=(const _1e538b460_Sema &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b0654_IterRelation {
	jule::Ptr<_1e58b0654_Var> _field_range = jule::Ptr<_1e58b0654_Var>();


	_1e58b0654_IterRelation(jule::Ptr<_1e58b0654_Var> __param_range): _field_range(__param_range) {}

	

	_1e58b0654_IterRelation(void) = default;

	inline bool operator==(const _1e58b0654_IterRelation &_Src) const {
		return 
			this->_field_range == _Src._field_range;
	}

	inline bool operator!=(const _1e58b0654_IterRelation &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b019d_RangeChecker {
	jule::Ptr<_1e56c3885_ScopeChecker> _field_sc = jule::Ptr<_1e56c3885_ScopeChecker>();
	jule::Ptr<_228d31971_RangeKind> _field_rang = jule::Ptr<_228d31971_RangeKind>();
	jule::Ptr<_1e56c3885_RangeIter> _field_kind = jule::Ptr<_1e56c3885_RangeIter>();
	jule::Ptr<_229d70d33_Data> _field_d = jule::Ptr<_229d70d33_Data>();


	_1e58b019d_RangeChecker(jule::Ptr<_1e56c3885_ScopeChecker> __param_sc, jule::Ptr<_228d31971_RangeKind> __param_rang, jule::Ptr<_1e56c3885_RangeIter> __param_kind, jule::Ptr<_229d70d33_Data> __param_d): _field_sc(__param_sc), _field_rang(__param_rang), _field_kind(__param_kind), _field_d(__param_d) {}

	

	_1e58b019d_RangeChecker(void) = default;

	inline jule::Ptr<_1e58b0654_Var> _method_build_var(jule::Ptr<_228d31971_VarDecl>&);


	inline void _method_set_size_key(void);


	inline void _method_check_range_expr_validity(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_1e58b0654_Var>&,jule::Ptr<_229d681e3_TypeKind>&);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1e58b019d_RangeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_rang == _Src._field_rang &&
			this->_field_kind == _Src._field_kind &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _1e58b019d_RangeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _229d56533_SymbolTable: public _229d94c47_Lookup {
	jule::Ptr<_228d34677_File> _field_file = jule::Ptr<_228d34677_File>();
	jule::Slice<_228d6ecab_Pass> _field_passes = jule::Slice<_228d6ecab_Pass>();
	jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>> _field_imports = jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>>();
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _field_vars = jule::Slice<jule::Ptr<_1e58b0654_Var>>();
	jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _field_type_aliases = jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>();
	jule::Slice<jule::Ptr<_228e0d025_Struct>> _field_structs = jule::Slice<jule::Ptr<_228e0d025_Struct>>();
	jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _field_funcs = jule::Slice<jule::Ptr<_229b6ebcb_Fn>>();
	jule::Slice<jule::Ptr<_229b5076c_Trait>> _field_traits = jule::Slice<jule::Ptr<_229b5076c_Trait>>();
	jule::Slice<jule::Ptr<_1e56be485_Enum>> _field_enums = jule::Slice<jule::Ptr<_1e56be485_Enum>>();
	jule::Slice<jule::Ptr<_1e56ca370_Impl>> _field_impls = jule::Slice<jule::Ptr<_1e56ca370_Impl>>();


	_229d56533_SymbolTable(jule::Ptr<_228d34677_File> __param_file, jule::Slice<_228d6ecab_Pass> __param_passes, jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>> __param_imports, jule::Slice<jule::Ptr<_1e58b0654_Var>> __param_vars, jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> __param_type_aliases, jule::Slice<jule::Ptr<_228e0d025_Struct>> __param_structs, jule::Slice<jule::Ptr<_229b6ebcb_Fn>> __param_funcs, jule::Slice<jule::Ptr<_229b5076c_Trait>> __param_traits, jule::Slice<jule::Ptr<_1e56be485_Enum>> __param_enums, jule::Slice<jule::Ptr<_1e56ca370_Impl>> __param_impls): _field_file(__param_file), _field_passes(__param_passes), _field_imports(__param_imports), _field_vars(__param_vars), _field_type_aliases(__param_type_aliases), _field_structs(__param_structs), _field_funcs(__param_funcs), _field_traits(__param_traits), _field_enums(__param_enums), _field_impls(__param_impls) {}

	

	_229d56533_SymbolTable(void) = default;

	inline jule::Ptr<_1e53308ee_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>);


	inline jule::Ptr<_1e58b0654_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_229d681e3_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_228e0d025_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_229b5076c_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e56be485_Enum> _method_find_enum(jule::Str);


	inline jule::Ptr<_1e58b0654_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ptr<_229d681e3_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline bool operator==(const _229d56533_SymbolTable &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_passes == _Src._field_passes &&
			this->_field_imports == _Src._field_imports &&
			this->_field_vars == _Src._field_vars &&
			this->_field_type_aliases == _Src._field_type_aliases &&
			this->_field_structs == _Src._field_structs &&
			this->_field_funcs == _Src._field_funcs &&
			this->_field_traits == _Src._field_traits &&
			this->_field_enums == _Src._field_enums &&
			this->_field_impls == _Src._field_impls;
	}

	inline bool operator!=(const _229d56533_SymbolTable &_Src) const { return !this->operator==(_Src); }
};


struct _229d70d33_Data {
	jule::Ptr<_229d681e3_TypeKind> _field_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229d681e3_TypeKind> _field_cast_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Bool _field_lvalue = jule::Bool();
	jule::Bool _field_is_rune = jule::Bool();
	jule::Any _field_model = jule::Any();
	jule::Bool _field_decl = jule::Bool();
	jule::Ptr<_1e856e8a4_Const> _field_constant = jule::Ptr<_1e856e8a4_Const>();


	_229d70d33_Data(jule::Ptr<_229d681e3_TypeKind> __param_kind, jule::Ptr<_229d681e3_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ptr<_1e856e8a4_Const> __param_constant): _field_kind(__param_kind), _field_cast_kind(__param_cast_kind), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_lvalue(__param_lvalue), _field_is_rune(__param_is_rune), _field_model(__param_model), _field_decl(__param_decl), _field_constant(__param_constant) {}

	

	_229d70d33_Data(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline jule::Bool _method_good_operand(jule::Ptr<_229d70d33_Data>&);


	inline bool operator==(const _229d70d33_Data &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_cast_kind == _Src._field_cast_kind &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_lvalue == _Src._field_lvalue &&
			this->_field_is_rune == _Src._field_is_rune &&
			this->_field_model == _Src._field_model &&
			this->_field_decl == _Src._field_decl &&
			this->_field_constant == _Src._field_constant;
	}

	inline bool operator!=(const _229d70d33_Data &_Src) const { return !this->operator==(_Src); }
};


struct _229d70d33_Value {
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();
	jule::Ptr<_229d70d33_Data> _field_data = jule::Ptr<_229d70d33_Data>();


	_229d70d33_Value(jule::Ptr<_228d31971_Expr> __param_expr, jule::Ptr<_229d70d33_Data> __param_data): _field_expr(__param_expr), _field_data(__param_data) {}

	

	_229d70d33_Value(void) = default;

	inline bool operator==(const _229d70d33_Value &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _229d70d33_Value &_Src) const { return !this->operator==(_Src); }
};


struct _229d70d33_Eval {
	jule::Ptr<_229d70d33_Eval> self;

	jule::Ptr<_1e538b460_Sema> _field_s = jule::Ptr<_1e538b460_Sema>();
	jule::Trait<_229d94c47_Lookup> _field_lookup = jule::Trait<_229d94c47_Lookup>();
	jule::Ptr<_229d681e3_TypeKind> _field_prefix = jule::Ptr<_229d681e3_TypeKind>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_immutable = jule::Bool();
	jule::Bool _field_ignored = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Ptr<_1e58b0654_Var> _field_owner = jule::Ptr<_1e58b0654_Var>();
	jule::Ptr<_228e0d025_FieldIns> _field_field = jule::Ptr<_228e0d025_FieldIns>();


	_229d70d33_Eval(jule::Ptr<_1e538b460_Sema> __param_s, jule::Trait<_229d94c47_Lookup> __param_lookup, jule::Ptr<_229d681e3_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Bool __param_immutable, jule::Bool __param_ignored, jule::Bool __param_dis_builtin, jule::Ptr<_1e58b0654_Var> __param_owner, jule::Ptr<_228e0d025_FieldIns> __param_field): _field_s(__param_s), _field_lookup(__param_lookup), _field_prefix(__param_prefix), _field_unsafety(__param_unsafety), _field_immutable(__param_immutable), _field_ignored(__param_ignored), _field_dis_builtin(__param_dis_builtin), _field_owner(__param_owner), _field_field(__param_field) {
		this->self = jule::Ptr<_229d70d33_Eval>::make(this, nullptr);

	}

	~_229d70d33_Eval(void) { this->self.ref = nullptr; }

	_229d70d33_Eval(void) { this->self = jule::Ptr<_229d70d33_Eval>::make(this, nullptr); }

	inline void _method_push_err(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline void _method_apply_numeric_prefix(jule::Ptr<_229d70d33_Data>&);


	inline jule::Ptr<_229d70d33_Data> _method_lit_nil(void);


	inline jule::Ptr<_229d70d33_Data> _method_lit_str(jule::Ptr<_228d31971_LitExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_lit_bool(jule::Ptr<_228d31971_LitExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_lit_rune(jule::Ptr<_228d31971_LitExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_lit_float(jule::Ptr<_228d31971_LitExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_lit_int(jule::Ptr<_228d31971_LitExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_lit_num(jule::Ptr<_228d31971_LitExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_lit(jule::Ptr<_228d31971_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ptr<_228d6ecab_ReferenceStack>&);


	inline void _method_push_reference_to_fn(jule::Ptr<_229b6ebcb_FnIns>&);


	inline void _method_push_reference_to_var(jule::Ptr<_1e58b0654_Var>&);


	inline void _method_push_reference_to_struct(jule::Ptr<_228e0d025_StructIns>&);


	inline jule::Ptr<_229d70d33_Data> _method___eval_enum(jule::Ptr<_1e56be485_Enum>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_enum(jule::Ptr<_1e56be485_Enum>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method___eval_struct(jule::Ptr<_228e0d025_StructIns>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_struct(jule::Ptr<_228e0d025_StructIns>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_fn_ins(jule::Ptr<_229b6ebcb_FnIns>);


	inline void _method_check_deprecated(jule::Slice<jule::Ptr<_228d31971_Directive>>&,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_fn(jule::Ptr<_229b6ebcb_Fn>,_228d7aadb_Token);


	inline void _method_push_illegal_cycle_error(jule::Ptr<_1e58b0654_Var>&,jule::Ptr<_1e58b0654_Var>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_1e58b0654_Var>&,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_1e58b0654_Var>&,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_var(jule::Ptr<_1e58b0654_Var>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_type_alias(jule::Ptr<_229d681e3_TypeAlias>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_def(jule::Any,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_ident(jule::Ptr<_228d31971_IdentExpr>);


	inline void _method_eval_unary_minus(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_eval_unary_plus(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_eval_unary_caret(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_eval_unary_excl(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_eval_unary_star(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_eval_unary_amper(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_eval_unary_type_decl(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_UnaryExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_unary(jule::Ptr<_228d31971_UnaryExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_variadic(jule::Ptr<_228d31971_VariadicExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_unsafe(jule::Ptr<_228d31971_UnsafeExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_arr(jule::Ptr<_228d31971_SliceExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_exp_slc(jule::Ptr<_228d31971_SliceExpr>,jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_slice_expr(jule::Ptr<_228d31971_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token);


	inline void _method_indexing_ptr(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_IndexingExpr>&);


	inline void _method_indexing_arr(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_IndexingExpr>&);


	inline void _method_indexing_slc(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_IndexingExpr>&);


	inline void _method_indexing_map(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_IndexingExpr>&);


	inline void _method_indexing_str(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_IndexingExpr>&);


	inline void _method_to_indexing(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_IndexingExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_ident_decl_from_indexing(jule::Ptr<_228d31971_IndexingExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_indexing(jule::Ptr<_228d31971_IndexingExpr>);


	inline std::tuple<jule::Ptr<_229d70d33_Data>,jule::Ptr<_229d70d33_Data>> _method_eval_slicing_exprs(jule::Ptr<_228d31971_SlicingExpr>&);


	inline void _method_slicing_arr(jule::Ptr<_229d70d33_Data>&);


	inline void _method_slicing_slc(jule::Ptr<_229d70d33_Data>&);


	inline void _method_slicing_str(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&);


	inline void _method_check_slicing(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_228d31971_SlicingExpr>&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_slicing(jule::Ptr<_228d31971_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_struct(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_ref(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_slc(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_str(jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_int(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_num(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_prim(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline void _method_cast_constant(jule::Ptr<_229d681e3_TypeKind>&,jule::Ptr<_229d70d33_Data>&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_cast_by_type_n_data(jule::Ptr<_229d681e3_TypeKind>,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_cast(jule::Ptr<_228d31971_CastExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_ns_selection(jule::Ptr<_228d31971_NsSelectionExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_struct_lit_explicit(jule::Ptr<_228e0d025_StructIns>,jule::Slice<jule::Any>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_struct_lit(jule::Ptr<_228d31971_StructLit>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_type(jule::Ptr<_228d31971_TypeDecl>);


	inline void _method_call_type_fn(jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ptr<_229b6ebcb_FnIns>,jule::Ptr<_228d31971_FnCallExpr>);


	inline void _method_call_builtin_fn(jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);


	inline void _method_check_fn_of_concurrent_call(jule::Ptr<_229b6ebcb_FnIns>&,_228d7aadb_Token);


	inline void _method_process_exceptional_handler(jule::Ptr<_229b6ebcb_FnIns>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);


	inline void _method_call_fn(jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_fn_call(jule::Ptr<_228d31971_FnCallExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_enum_static(jule::Ptr<_1e56be485_Enum>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_struct_static(jule::Ptr<_228e0d025_StructIns>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_trait_sub_ident(jule::Ptr<_229d70d33_Data>,jule::Ptr<_229b5076c_Trait>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_struct_sub_ident(jule::Ptr<_229d70d33_Data>,jule::Ptr<_228e0d025_StructIns>,jule::Ptr<_228d31971_SubIdentExpr>,jule::Bool);


	inline jule::Ptr<_229d70d33_Data> _method_eval_slice_sub_ident(jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_array_sub_ident(jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_map_sub_ident(jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_str_sub_ident(jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_int_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_uint_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_i8_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_i16_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_i32_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_i64_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_u8_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_u16_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_u32_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_u64_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_f32_type_tatic(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_f64_type_static(_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_prim_static(jule::Str,_228d7aadb_Token);


	inline jule::Ptr<_229d70d33_Data> _method_eval_type_static(jule::Ptr<_229d70d33_Data>,jule::Ptr<_228d31971_SubIdentExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_obj_sub_ident(jule::Ptr<_229d70d33_Data>,jule::Ptr<_228d31971_SubIdentExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_sub_ident(jule::Ptr<_228d31971_SubIdentExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_tuple(jule::Ptr<_228d31971_TupleExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_map(jule::Ptr<_229d681e3_Map>,jule::Ptr<_228d31971_BraceLit>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_brace_lit(jule::Ptr<_228d31971_BraceLit>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_anon_fn(jule::Ptr<_228d31971_FnDecl>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_binop(jule::Ptr<_228d31971_BinopExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_ternary(jule::Ptr<_228d31971_TernaryExpr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ptr<_229d70d33_Data> _method_eval(jule::Ptr<_228d31971_Expr>);


	inline jule::Ptr<_229d70d33_Data> _method_eval_expr(jule::Ptr<_228d31971_Expr>);


	inline bool operator==(const _229d70d33_Eval &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_prefix == _Src._field_prefix &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_immutable == _Src._field_immutable &&
			this->_field_ignored == _Src._field_ignored &&
			this->_field_dis_builtin == _Src._field_dis_builtin &&
			this->_field_owner == _Src._field_owner &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _229d70d33_Eval &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_TypeKind: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_TypeKind> self;

	jule::Str _field_cpp_ident = jule::Str();
	jule::Bool _field_generic = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Trait<_229d681e3_Kind> _field_kind = jule::Trait<_229d681e3_Kind>();


	_229d681e3_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_generic, jule::Bool __param_variadic, jule::Trait<_229d681e3_Kind> __param_kind): _field_cpp_ident(__param_cpp_ident), _field_generic(__param_generic), _field_variadic(__param_variadic), _field_kind(__param_kind) {
		this->self = jule::Ptr<_229d681e3_TypeKind>::make(this, nullptr);

	}

	~_229d681e3_TypeKind(void) { this->self.ref = nullptr; }

	_229d681e3_TypeKind(void) { this->self = jule::Ptr<_229d681e3_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Bool _method_cpp_linked(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_void(void);


	inline jule::Bool _method_mutable(void);


	inline jule::Bool _method_nil_compatible(void);


	inline jule::Bool _method_performs_rc(void);


	inline jule::Bool _method_supports_cloning(void);


	inline jule::Bool _method_variadicable(void);


	inline jule::Ptr<_229d681e3_Prim> _method_prim(void);


	inline jule::Ptr<_229d681e3_Sptr> _method_sptr(void);


	inline jule::Ptr<_229d681e3_Ptr> _method_ptr(void);


	inline jule::Ptr<_1e56be485_Enum> _method_enm(void);


	inline jule::Ptr<_229d681e3_Arr> _method_arr(void);


	inline jule::Ptr<_229d681e3_Slc> _method_slc(void);


	inline jule::Ptr<_229b6ebcb_FnIns> _method_fnc(void);


	inline jule::Ptr<_228e0d025_StructIns> _method_strct(void);


	inline jule::Ptr<_229b5076c_Trait> _method_trt(void);


	inline jule::Ptr<_229d681e3_Map> _method_map(void);


	inline jule::Ptr<_229d681e3_Tuple> _method_tup(void);


	inline bool operator==(const _229d681e3_TypeKind &_Src) const {
		return 
			this->_field_cpp_ident == _Src._field_cpp_ident &&
			this->_field_generic == _Src._field_generic &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _229d681e3_TypeKind &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_TypeSymbol {
	jule::Ptr<_228d31971_TypeDecl> _field_decl = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_229d681e3_TypeKind> _field_kind = jule::Ptr<_229d681e3_TypeKind>();


	_229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl> __param_decl, jule::Ptr<_229d681e3_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_229d681e3_TypeSymbol(void) = default;

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(const _229d681e3_TypeSymbol &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _229d681e3_TypeSymbol &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Prim: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_Prim> self;

	jule::Str _field_kind = jule::Str();


	_229d681e3_Prim(jule::Str __param_kind): _field_kind(__param_kind) {
		this->self = jule::Ptr<_229d681e3_Prim>::make(this, nullptr);

	}

	~_229d681e3_Prim(void) { this->self.ref = nullptr; }

	_229d681e3_Prim(void) { this->self = jule::Ptr<_229d681e3_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(const _229d681e3_Prim &_Src) const {
		return 
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _229d681e3_Prim &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Sptr: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_Sptr> self;

	jule::Ptr<_229d681e3_TypeKind> _field_elem = jule::Ptr<_229d681e3_TypeKind>();


	_229d681e3_Sptr(jule::Ptr<_229d681e3_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_229d681e3_Sptr>::make(this, nullptr);

	}

	~_229d681e3_Sptr(void) { this->self.ref = nullptr; }

	_229d681e3_Sptr(void) { this->self = jule::Ptr<_229d681e3_Sptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline bool operator==(const _229d681e3_Sptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _229d681e3_Sptr &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Slc: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_Slc> self;

	jule::Ptr<_229d681e3_TypeKind> _field_elem = jule::Ptr<_229d681e3_TypeKind>();


	_229d681e3_Slc(jule::Ptr<_229d681e3_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_229d681e3_Slc>::make(this, nullptr);

	}

	~_229d681e3_Slc(void) { this->self.ref = nullptr; }

	_229d681e3_Slc(void) { this->self = jule::Ptr<_229d681e3_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline bool operator==(const _229d681e3_Slc &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _229d681e3_Slc &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Tuple: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_Tuple> self;

	jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _field_types = jule::Slice<jule::Ptr<_229d681e3_TypeKind>>();


	_229d681e3_Tuple(jule::Slice<jule::Ptr<_229d681e3_TypeKind>> __param_types): _field_types(__param_types) {
		this->self = jule::Ptr<_229d681e3_Tuple>::make(this, nullptr);

	}

	~_229d681e3_Tuple(void) { this->self.ref = nullptr; }

	_229d681e3_Tuple(void) { this->self = jule::Ptr<_229d681e3_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline bool operator==(const _229d681e3_Tuple &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _229d681e3_Tuple &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Map: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_Map> self;

	jule::Ptr<_229d681e3_TypeKind> _field_key = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229d681e3_TypeKind> _field_val = jule::Ptr<_229d681e3_TypeKind>();


	_229d681e3_Map(jule::Ptr<_229d681e3_TypeKind> __param_key, jule::Ptr<_229d681e3_TypeKind> __param_val): _field_key(__param_key), _field_val(__param_val) {
		this->self = jule::Ptr<_229d681e3_Map>::make(this, nullptr);

	}

	~_229d681e3_Map(void) { this->self.ref = nullptr; }

	_229d681e3_Map(void) { this->self = jule::Ptr<_229d681e3_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline bool operator==(const _229d681e3_Map &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _229d681e3_Map &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Arr: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_Arr> self;

	jule::Bool _field_auto = jule::Bool();
	jule::Int _field_n = jule::Int();
	jule::Ptr<_229d681e3_TypeKind> _field_elem = jule::Ptr<_229d681e3_TypeKind>();


	_229d681e3_Arr(jule::Bool __param_auto, jule::Int __param_n, jule::Ptr<_229d681e3_TypeKind> __param_elem): _field_auto(__param_auto), _field_n(__param_n), _field_elem(__param_elem) {
		this->self = jule::Ptr<_229d681e3_Arr>::make(this, nullptr);

	}

	~_229d681e3_Arr(void) { this->self.ref = nullptr; }

	_229d681e3_Arr(void) { this->self = jule::Ptr<_229d681e3_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline bool operator==(const _229d681e3_Arr &_Src) const {
		return 
			this->_field_auto == _Src._field_auto &&
			this->_field_n == _Src._field_n &&
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _229d681e3_Arr &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Ptr: public _229d681e3_Kind {
	jule::Ptr<_229d681e3_Ptr> self;

	jule::Ptr<_229d681e3_TypeKind> _field_elem = jule::Ptr<_229d681e3_TypeKind>();


	_229d681e3_Ptr(jule::Ptr<_229d681e3_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_229d681e3_Ptr>::make(this, nullptr);

	}

	~_229d681e3_Ptr(void) { this->self.ref = nullptr; }

	_229d681e3_Ptr(void) { this->self = jule::Ptr<_229d681e3_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _229d681e3_Ptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _229d681e3_Ptr &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_Referencer {
	jule::Str _field_ident = jule::Str();
	jule::Any _field_owner = jule::Any();
	jule::Slice<jule::Any>* _field_refs = nullptr;


	_229d681e3_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs): _field_ident(__param_ident), _field_owner(__param_owner), _field_refs(__param_refs) {}

	

	_229d681e3_Referencer(void) = default;

	inline bool operator==(const _229d681e3_Referencer &_Src) const {
		return 
			this->_field_ident == _Src._field_ident &&
			this->_field_owner == _Src._field_owner &&
			this->_field_refs == _Src._field_refs;
	}

	inline bool operator!=(const _229d681e3_Referencer &_Src) const { return !this->operator==(_Src); }
};


struct _228cc0bc9_DirectiveEval {
	jule::Slice<_2276bcb9e_Log> _field_logs = jule::Slice<_2276bcb9e_Log>();
	jule::Ptr<_228d31971_Directive> _field_d = jule::Ptr<_228d31971_Directive>();


	_228cc0bc9_DirectiveEval(jule::Slice<_2276bcb9e_Log> __param_logs, jule::Ptr<_228d31971_Directive> __param_d): _field_logs(__param_logs), _field_d(__param_d) {}

	

	_228cc0bc9_DirectiveEval(void) = default;

	inline void _method_push_err(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Slice<_228d7aadb_Token>> _method_split_operans(jule::Str,jule::Slice<_228d7aadb_Token>&);


	inline jule::Bool _method_eval_directive_ident(jule::Str);


	inline jule::Bool _method_eval_directive_part(jule::Slice<_228d7aadb_Token>);


	inline jule::Bool _method_eval(void);


	inline bool operator==(const _228cc0bc9_DirectiveEval &_Src) const {
		return 
			this->_field_logs == _Src._field_logs &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _228cc0bc9_DirectiveEval &_Src) const { return !this->operator==(_Src); }
};


struct _228ce6ea8_PlainImporter: public _1e53308ee_Importer {
	jule::Slice<jule::Str> _field_mods = jule::Slice<jule::Str>();
	jule::Str _field_mod = jule::Str();
	jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>> _field_all_packages = jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>>();


	_228ce6ea8_PlainImporter(jule::Slice<jule::Str> __param_mods, jule::Str __param_mod, jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>> __param_all_packages): _field_mods(__param_mods), _field_mod(__param_mod), _field_all_packages(__param_all_packages) {}

	

	_228ce6ea8_PlainImporter(void) = default;

	static inline jule::Ptr<_228ce6ea8_PlainImporter> _static_method_new(void);


	inline void _method_set_mod_path(jule::Str);


	inline jule::Str _method_get_mod_path(void);


	inline jule::Str _method_mod_by_id(jule::Int);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ptr<_228d3160d_Ast>>,jule::Slice<_2276bcb9e_Log>> _method_import_package(jule::Str,jule::Bool);


	inline void _method_imported(jule::Ptr<_1e53308ee_ImportInfo>);


	inline bool operator==(const _228ce6ea8_PlainImporter &_Src) const {
		return 
			this->_field_mods == _Src._field_mods &&
			this->_field_mod == _Src._field_mod &&
			this->_field_all_packages == _Src._field_all_packages;
	}

	inline bool operator!=(const _228ce6ea8_PlainImporter &_Src) const { return !this->operator==(_Src); }
};


struct _228ca2e64_OrderedDefines {
	jule::Slice<jule::Ptr<_228e0d025_Struct>> _field_structs = jule::Slice<jule::Ptr<_228e0d025_Struct>>();


	_228ca2e64_OrderedDefines(jule::Slice<jule::Ptr<_228e0d025_Struct>> __param_structs): _field_structs(__param_structs) {}

	

	_228ca2e64_OrderedDefines(void) = default;

	inline bool operator==(const _228ca2e64_OrderedDefines &_Src) const {
		return 
			this->_field_structs == _Src._field_structs;
	}

	inline bool operator!=(const _228ca2e64_OrderedDefines &_Src) const { return !this->operator==(_Src); }
};


struct _228ca2e64_DefineOrderer {
	

	_228ca2e64_DefineOrderer(void) = default;

	static inline jule::Bool _static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_228e0d025_Struct>>&,jule::Ptr<_228e0d025_Struct>);


	static inline void _static_method_order_common_0(jule::Slice<jule::Ptr<_228e0d025_Struct>>&);


	static inline void _static_method_order_structures(jule::Slice<jule::Ptr<_228e0d025_Struct>>&);


	inline bool operator==(const _228ca2e64_DefineOrderer &_Src) const { return true; }

	inline bool operator!=(const _228ca2e64_DefineOrderer &_Src) const { return !this->operator==(_Src); }
};


struct _228798383_ScopeDeadCode {
	jule::Ptr<_228798383_ScopeDeadCode> self;

	jule::Ptr<_228798383_ScopeDeadCode> _field_parent = jule::Ptr<_228798383_ScopeDeadCode>();
	jule::Ptr<_1e56c3885_Scope> _field_s = jule::Ptr<_1e56c3885_Scope>();
	jule::Slice<jule::Any>* _field_stmts = nullptr;
	jule::Int _field_i = jule::Int();


	_228798383_ScopeDeadCode(jule::Ptr<_228798383_ScopeDeadCode> __param_parent, jule::Ptr<_1e56c3885_Scope> __param_s, jule::Slice<jule::Any>* __param_stmts, jule::Int __param_i): _field_parent(__param_parent), _field_s(__param_s), _field_stmts(__param_stmts), _field_i(__param_i) {
		this->self = jule::Ptr<_228798383_ScopeDeadCode>::make(this, nullptr);

	}

	~_228798383_ScopeDeadCode(void) { this->self.ref = nullptr; }

	_228798383_ScopeDeadCode(void) { this->self = jule::Ptr<_228798383_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ptr<_1e56c3885_Scope>&);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(const _228798383_ScopeDeadCode &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _228798383_ScopeDeadCode &_Src) const { return !this->operator==(_Src); }
};


struct _1e8a7c6a8_AbsTime {
	jule::Uint _field_day = jule::Uint();
	jule::Uint _field_week_day = jule::Uint();
	jule::Uint _field_year_day = jule::Uint();
	jule::Uint _field_month = jule::Uint();
	jule::Uint _field_year = jule::Uint();
	jule::Uint _field_second = jule::Uint();
	jule::Uint _field_minute = jule::Uint();
	jule::Uint _field_hour = jule::Uint();


	_1e8a7c6a8_AbsTime(jule::Uint __param_day, jule::Uint __param_week_day, jule::Uint __param_year_day, jule::Uint __param_month, jule::Uint __param_year, jule::Uint __param_second, jule::Uint __param_minute, jule::Uint __param_hour): _field_day(__param_day), _field_week_day(__param_week_day), _field_year_day(__param_year_day), _field_month(__param_month), _field_year(__param_year), _field_second(__param_second), _field_minute(__param_minute), _field_hour(__param_hour) {}

	

	_1e8a7c6a8_AbsTime(void) = default;

	inline jule::U64 _method_unix(void);


	inline bool operator==(const _1e8a7c6a8_AbsTime &_Src) const {
		return 
			this->_field_day == _Src._field_day &&
			this->_field_week_day == _Src._field_week_day &&
			this->_field_year_day == _Src._field_year_day &&
			this->_field_month == _Src._field_month &&
			this->_field_year == _Src._field_year &&
			this->_field_second == _Src._field_second &&
			this->_field_minute == _Src._field_minute &&
			this->_field_hour == _Src._field_hour;
	}

	inline bool operator!=(const _1e8a7c6a8_AbsTime &_Src) const { return !this->operator==(_Src); }
};


struct _1e8a7c6a8_Time {
	jule::U64 _field_sec = jule::U64();


	_1e8a7c6a8_Time(jule::U64 __param_sec): _field_sec(__param_sec) {}

	

	_1e8a7c6a8_Time(void) = default;

	static inline _1e8a7c6a8_Time _static_method_unix(jule::U64);


	static inline _1e8a7c6a8_Time _static_method_now(void);


	inline jule::U64 _method_unix(void);


	inline jule::Uint _method_day(void);


	inline jule::Uint _method_month(void);


	inline jule::Uint _method_year(void);


	inline jule::Uint _method_second(void);


	inline jule::Uint _method_minute(void);


	inline jule::Uint _method_hour(void);


	inline _1e8a7c6a8_AbsTime _method_abs(void);


	inline bool operator==(const _1e8a7c6a8_Time &_Src) const {
		return 
			this->_field_sec == _Src._field_sec;
	}

	inline bool operator!=(const _1e8a7c6a8_Time &_Src) const { return !this->operator==(_Src); }
};


struct _1e8a7c6a8_Duration {
	

	_1e8a7c6a8_Duration(void) = default;

	static inline jule::I64 _static_method_nanoseconds(jule::I64);


	static inline jule::I64 _static_method_microseconds(jule::I64);


	static inline jule::I64 _static_method_milliseconds(jule::I64);


	static inline jule::I64 _static_method_seconds(jule::I64);


	static inline jule::I64 _static_method_minutes(jule::I64);


	static inline jule::I64 _static_method_hours(jule::I64);


	inline bool operator==(const _1e8a7c6a8_Duration &_Src) const { return true; }

	inline bool operator!=(const _1e8a7c6a8_Duration &_Src) const { return !this->operator==(_Src); }
};


struct _229cbb663_ScopeOptimizer {
	jule::Int _field_i = jule::Int();
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();


	_229cbb663_ScopeOptimizer(jule::Int __param_i, jule::Ptr<_1e56c3885_Scope> __param_scope): _field_i(__param_i), _field_scope(__param_scope) {}

	

	_229cbb663_ScopeOptimizer(void) = default;

	static inline jule::Ptr<_229cbb663_ScopeOptimizer> _static_method_new(jule::Ptr<_1e56c3885_Scope>);


	inline void _method_set_current_stmt(jule::Any);


	inline jule::Any _method_current_stmt(void);


	inline void _method_optimize_data(jule::Ptr<_229d70d33_Data>);


	inline void _method_optimize_conditional(jule::Ptr<_1e56c3885_Conditional>);


	inline void _method_optimize_match(jule::Ptr<_1e56c3885_Match>);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_child(jule::Ptr<_1e56c3885_Scope>);


	inline void _method_optimize(void);


	inline bool operator==(const _229cbb663_ScopeOptimizer &_Src) const {
		return 
			this->_field_i == _Src._field_i &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _229cbb663_ScopeOptimizer &_Src) const { return !this->operator==(_Src); }
};


struct _229d710b9_Optimizer {
	jule::Ptr<_228c91a35_IR> _field_ir = jule::Ptr<_228c91a35_IR>();


	_229d710b9_Optimizer(jule::Ptr<_228c91a35_IR> __param_ir): _field_ir(__param_ir) {}

	

	_229d710b9_Optimizer(void) = default;

	static inline jule::Ptr<_229d710b9_Optimizer> _static_method_new(jule::Ptr<_228c91a35_IR>&);


	inline void _method_optimize_function(jule::Ptr<_229b6ebcb_Fn>&);


	inline void _method_optimize_struct(jule::Ptr<_228e0d025_Struct>&);


	inline void _method_optimize_functions(jule::Ptr<_1e53308ee_Package>&);


	inline void _method_optimize_structs(jule::Ptr<_1e53308ee_Package>&);


	inline void _method_optimize_package(jule::Ptr<_1e53308ee_Package>&);


	inline void _method_optimize(void);


	inline bool operator==(const _229d710b9_Optimizer &_Src) const {
		return 
			this->_field_ir == _Src._field_ir;
	}

	inline bool operator!=(const _229d710b9_Optimizer &_Src) const { return !this->operator==(_Src); }
};


struct _229cbddd5_Flag_0: public _229cbddd5_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Int _field__default = jule::Int();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Int> _field__data = jule::Ptr<jule::Int>();


	_229cbddd5_Flag_0(jule::Str __param__name, jule::I32 __param__short, jule::Int __param__default, jule::Str __param__what, jule::Ptr<jule::Int> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_229cbddd5_Flag_0(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _229cbddd5_Flag_0 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _229cbddd5_Flag_0 &_Src) const { return !this->operator==(_Src); }
};

struct _229cbddd5_Flag_1: public _229cbddd5_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Uint _field__default = jule::Uint();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Uint> _field__data = jule::Ptr<jule::Uint>();


	_229cbddd5_Flag_1(jule::Str __param__name, jule::I32 __param__short, jule::Uint __param__default, jule::Str __param__what, jule::Ptr<jule::Uint> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_229cbddd5_Flag_1(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _229cbddd5_Flag_1 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _229cbddd5_Flag_1 &_Src) const { return !this->operator==(_Src); }
};

struct _229cbddd5_Flag_2: public _229cbddd5_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::F64 _field__default = jule::F64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::F64> _field__data = jule::Ptr<jule::F64>();


	_229cbddd5_Flag_2(jule::Str __param__name, jule::I32 __param__short, jule::F64 __param__default, jule::Str __param__what, jule::Ptr<jule::F64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_229cbddd5_Flag_2(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _229cbddd5_Flag_2 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _229cbddd5_Flag_2 &_Src) const { return !this->operator==(_Src); }
};

struct _229cbddd5_Flag_3: public _229cbddd5_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Bool _field__default = jule::Bool();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Bool> _field__data = jule::Ptr<jule::Bool>();


	_229cbddd5_Flag_3(jule::Str __param__name, jule::I32 __param__short, jule::Bool __param__default, jule::Str __param__what, jule::Ptr<jule::Bool> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_229cbddd5_Flag_3(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _229cbddd5_Flag_3 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _229cbddd5_Flag_3 &_Src) const { return !this->operator==(_Src); }
};

struct _229cbddd5_Flag_4: public _229cbddd5_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Str _field__default = jule::Str();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Str> _field__data = jule::Ptr<jule::Str>();


	_229cbddd5_Flag_4(jule::Str __param__name, jule::I32 __param__short, jule::Str __param__default, jule::Str __param__what, jule::Ptr<jule::Str> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_229cbddd5_Flag_4(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _229cbddd5_Flag_4 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _229cbddd5_Flag_4 &_Src) const { return !this->operator==(_Src); }
};


struct _229cbddd5_FlagSet {
	jule::Slice<jule::Trait<_229cbddd5_CommonFlag>> _field__flags = jule::Slice<jule::Trait<_229cbddd5_CommonFlag>>();


	_229cbddd5_FlagSet(jule::Slice<jule::Trait<_229cbddd5_CommonFlag>> __param__flags): _field__flags(__param__flags) {}

	

	_229cbddd5_FlagSet(void) = default;

	static inline jule::Ptr<_229cbddd5_FlagSet> _static_method_new(void);


	inline jule::Trait<_229cbddd5_CommonFlag> _method_find_flag(jule::Str);


	inline jule::Trait<_229cbddd5_CommonFlag> _method_find_flag_short(jule::I32);


	inline jule::Slice<jule::Trait<_229cbddd5_CommonFlag>> _method_flags(void);


	inline jule::Exceptional<jule::Slice<jule::Str>> _method_parse(jule::Slice<jule::Str>);


	inline void _method_reset(void);


	inline jule::Ptr<_229cbddd5_Flag_4> _method_add_flag_common_0(jule::Str,jule::I32,jule::Str);
	inline jule::Ptr<_229cbddd5_Flag_3> _method_add_flag_common_1(jule::Str,jule::I32,jule::Str);




	inline void _method_add_var_0(jule::Ptr<jule::Str>,jule::Str,jule::I32,jule::Str);
	inline void _method_add_var_1(jule::Ptr<jule::Bool>,jule::Str,jule::I32,jule::Str);


	inline bool operator==(const _229cbddd5_FlagSet &_Src) const {
		return 
			this->_field__flags == _Src._field__flags;
	}

	inline bool operator!=(const _229cbddd5_FlagSet &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_WhileKind {
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();
	jule::Any _field_next = jule::Any();
	_228d7aadb_Token _field_next_token = _228d7aadb_Token();


	_228d31971_WhileKind(jule::Ptr<_228d31971_Expr> __param_expr, jule::Any __param_next, _228d7aadb_Token __param_next_token): _field_expr(__param_expr), _field_next(__param_next), _field_next_token(__param_next_token) {}

	

	_228d31971_WhileKind(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _228d31971_WhileKind &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_next_token == _Src._field_next_token;
	}

	inline bool operator!=(const _228d31971_WhileKind &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_ScopeLabel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_1e56c3885_Label> _field_label = jule::Ptr<_1e56c3885_Label>();
	jule::Int _field_pos = jule::Int();
	jule::Ptr<_1e56c3885_ScopeChecker> _field_scope = jule::Ptr<_1e56c3885_ScopeChecker>();
	jule::Bool _field_used = jule::Bool();


	_1e56c3885_ScopeLabel(_228d7aadb_Token __param_token, jule::Ptr<_1e56c3885_Label> __param_label, jule::Int __param_pos, jule::Ptr<_1e56c3885_ScopeChecker> __param_scope, jule::Bool __param_used): _field_token(__param_token), _field_label(__param_label), _field_pos(__param_pos), _field_scope(__param_scope), _field_used(__param_used) {}

	

	_1e56c3885_ScopeLabel(void) = default;

	inline bool operator==(const _1e56c3885_ScopeLabel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label &&
			this->_field_pos == _Src._field_pos &&
			this->_field_scope == _Src._field_scope &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _1e56c3885_ScopeLabel &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_RangeKind {
	_228d7aadb_Token _field_in_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();
	jule::Ptr<_228d31971_VarDecl> _field_key_a = jule::Ptr<_228d31971_VarDecl>();
	jule::Ptr<_228d31971_VarDecl> _field_key_b = jule::Ptr<_228d31971_VarDecl>();


	_228d31971_RangeKind(_228d7aadb_Token __param_in_token, jule::Ptr<_228d31971_Expr> __param_expr, jule::Ptr<_228d31971_VarDecl> __param_key_a, jule::Ptr<_228d31971_VarDecl> __param_key_b): _field_in_token(__param_in_token), _field_expr(__param_expr), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_228d31971_RangeKind(void) = default;

	inline bool operator==(const _228d31971_RangeKind &_Src) const {
		return 
			this->_field_in_token == _Src._field_in_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _228d31971_RangeKind &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_BreakSt {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	_228d7aadb_Token _field_label = _228d7aadb_Token();


	_228d31971_BreakSt(_228d7aadb_Token __param_token, _228d7aadb_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_228d31971_BreakSt(void) = default;

	inline bool operator==(const _228d31971_BreakSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _228d31971_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BinopExprModel {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	_228d7aadb_Token _field_op = _228d7aadb_Token();


	_1e5870218_BinopExprModel(jule::Any __param_left, jule::Any __param_right, _228d7aadb_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1e5870218_BinopExprModel(void) = default;

	inline bool operator==(const _1e5870218_BinopExprModel &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1e5870218_BinopExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_UnaryExprModel {
	jule::Ptr<_229d70d33_Data> _field_expr = jule::Ptr<_229d70d33_Data>();
	_228d7aadb_Token _field_op = _228d7aadb_Token();


	_1e5870218_UnaryExprModel(jule::Ptr<_229d70d33_Data> __param_expr, _228d7aadb_Token __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1e5870218_UnaryExprModel(void) = default;

	inline bool operator==(const _1e5870218_UnaryExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1e5870218_UnaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_ContSt {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	_228d7aadb_Token _field_label = _228d7aadb_Token();


	_228d31971_ContSt(_228d7aadb_Token __param_token, _228d7aadb_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_228d31971_ContSt(void) = default;

	inline bool operator==(const _228d31971_ContSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _228d31971_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_StructLitExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228e0d025_StructIns> _field_strct = jule::Ptr<_228e0d025_StructIns>();
	jule::Slice<jule::Ptr<_1e5870218_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1e5870218_StructArgExprModel>>();


	_1e5870218_StructLitExprModel(_228d7aadb_Token __param_token, jule::Ptr<_228e0d025_StructIns> __param_strct, jule::Slice<jule::Ptr<_1e5870218_StructArgExprModel>> __param_args): _field_token(__param_token), _field_strct(__param_strct), _field_args(__param_args) {}

	

	_1e5870218_StructLitExprModel(void) = default;

	inline bool operator==(const _1e5870218_StructLitExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_strct == _Src._field_strct &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1e5870218_StructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_If {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();


	_228d31971_If(_228d7aadb_Token __param_token, jule::Ptr<_228d31971_Expr> __param_expr, jule::Ptr<_228d31971_ScopeTree> __param_scope): _field_token(__param_token), _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_228d31971_If(void) = default;

	inline bool operator==(const _228d31971_If &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _228d31971_If &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_CastingExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_229d681e3_TypeKind> _field_kind = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229d681e3_TypeKind> _field_expr_kind = jule::Ptr<_229d681e3_TypeKind>();


	_1e5870218_CastingExprModel(_228d7aadb_Token __param_token, jule::Any __param_expr, jule::Ptr<_229d681e3_TypeKind> __param_kind, jule::Ptr<_229d681e3_TypeKind> __param_expr_kind): _field_token(__param_token), _field_expr(__param_expr), _field_kind(__param_kind), _field_expr_kind(__param_expr_kind) {}

	

	_1e5870218_CastingExprModel(void) = default;

	inline bool operator==(const _1e5870218_CastingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr_kind == _Src._field_expr_kind;
	}

	inline bool operator!=(const _1e5870218_CastingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_FnCallExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_229b6ebcb_FnIns> _field_func = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Bool _field_is_co = jule::Bool();
	jule::Any _field_expr = jule::Any();
	jule::Slice<jule::Any> _field_args = jule::Slice<jule::Any>();
	jule::Ptr<_1e56c3885_Scope> _field_except = jule::Ptr<_1e56c3885_Scope>();
	jule::Bool _field_assigned = jule::Bool();


	_1e5870218_FnCallExprModel(_228d7aadb_Token __param_token, jule::Ptr<_229b6ebcb_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args, jule::Ptr<_1e56c3885_Scope> __param_except, jule::Bool __param_assigned): _field_token(__param_token), _field_func(__param_func), _field_is_co(__param_is_co), _field_expr(__param_expr), _field_args(__param_args), _field_except(__param_except), _field_assigned(__param_assigned) {}

	

	_1e5870218_FnCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_FnCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_func == _Src._field_func &&
			this->_field_is_co == _Src._field_is_co &&
			this->_field_expr == _Src._field_expr &&
			this->_field_args == _Src._field_args &&
			this->_field_except == _Src._field_except &&
			this->_field_assigned == _Src._field_assigned;
	}

	inline bool operator!=(const _1e5870218_FnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Else {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();


	_228d31971_Else(_228d7aadb_Token __param_token, jule::Ptr<_228d31971_ScopeTree> __param_scope): _field_token(__param_token), _field_scope(__param_scope) {}

	

	_228d31971_Else(void) = default;

	inline bool operator==(const _228d31971_Else &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _228d31971_Else &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_IndexingExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_229d70d33_Data> _field_expr = jule::Ptr<_229d70d33_Data>();
	jule::Ptr<_229d70d33_Data> _field_index = jule::Ptr<_229d70d33_Data>();


	_1e5870218_IndexingExprModel(_228d7aadb_Token __param_token, jule::Ptr<_229d70d33_Data> __param_expr, jule::Ptr<_229d70d33_Data> __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1e5870218_IndexingExprModel(void) = default;

	inline bool operator==(const _1e5870218_IndexingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _1e5870218_IndexingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Directive {
	_228d7aadb_Token _field_tag = _228d7aadb_Token();
	jule::Slice<_228d7aadb_Token> _field_args = jule::Slice<_228d7aadb_Token>();


	_228d31971_Directive(_228d7aadb_Token __param_tag, jule::Slice<_228d7aadb_Token> __param_args): _field_tag(__param_tag), _field_args(__param_args) {}

	

	_228d31971_Directive(void) = default;

	inline bool operator==(const _228d31971_Directive &_Src) const {
		return 
			this->_field_tag == _Src._field_tag &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _228d31971_Directive &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_TypeAliasDecl {
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_228d31971_CommentGroup> _field_doc_comments = jule::Ptr<_228d31971_CommentGroup>();


	_228d31971_TypeAliasDecl(jule::Ptr<_228d31971_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _228d7aadb_Token __param_token, jule::Str __param_ident, jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Ptr<_228d31971_CommentGroup> __param_doc_comments): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc_comments(__param_doc_comments) {}

	

	_228d31971_TypeAliasDecl(void) = default;

	inline bool operator==(const _228d31971_TypeAliasDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _228d31971_TypeAliasDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Case {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();
	jule::Slice<jule::Ptr<_228d31971_Expr>> _field_exprs = jule::Slice<jule::Ptr<_228d31971_Expr>>();


	_228d31971_Case(_228d7aadb_Token __param_token, jule::Ptr<_228d31971_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_228d31971_Expr>> __param_exprs): _field_token(__param_token), _field_scope(__param_scope), _field_exprs(__param_exprs) {}

	

	_228d31971_Case(void) = default;

	inline bool operator==(const _228d31971_Case &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _228d31971_Case &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_SlicingExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_1e5870218_SlicingExprModel(_228d7aadb_Token __param_token, jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_token(__param_token), _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_1e5870218_SlicingExprModel(void) = default;

	inline bool operator==(const _1e5870218_SlicingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _1e5870218_SlicingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_TraitSubIdentExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1e5870218_TraitSubIdentExprModel(_228d7aadb_Token __param_token, jule::Any __param_expr, jule::Str __param_ident): _field_token(__param_token), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1e5870218_TraitSubIdentExprModel(void) = default;

	inline bool operator==(const _1e5870218_TraitSubIdentExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1e5870218_TraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_MatchCase {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_type_match = jule::Bool();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();
	jule::Slice<jule::Ptr<_228d31971_Case>> _field_cases = jule::Slice<jule::Ptr<_228d31971_Case>>();
	jule::Ptr<_228d31971_Else> _field_default = jule::Ptr<_228d31971_Else>();


	_228d31971_MatchCase(_228d7aadb_Token __param_token, jule::Bool __param_type_match, jule::Ptr<_228d31971_Expr> __param_expr, jule::Slice<jule::Ptr<_228d31971_Case>> __param_cases, jule::Ptr<_228d31971_Else> __param_default): _field_token(__param_token), _field_type_match(__param_type_match), _field_expr(__param_expr), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_228d31971_MatchCase(void) = default;

	inline bool operator==(const _228d31971_MatchCase &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_expr == _Src._field_expr &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _228d31971_MatchCase &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_UseDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_full = jule::Bool();
	jule::Slice<_228d7aadb_Token> _field_selected = jule::Slice<_228d7aadb_Token>();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();


	_228d31971_UseDecl(_228d7aadb_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_228d7aadb_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std): _field_token(__param_token), _field_link_path(__param_link_path), _field_alias(__param_alias), _field_full(__param_full), _field_selected(__param_selected), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std) {}

	

	_228d31971_UseDecl(void) = default;

	inline bool operator==(const _228d31971_UseDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_alias == _Src._field_alias &&
			this->_field_full == _Src._field_full &&
			this->_field_selected == _Src._field_selected &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std;
	}

	inline bool operator!=(const _228d31971_UseDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_EnumItemDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();


	_228d31971_EnumItemDecl(_228d7aadb_Token __param_token, jule::Str __param_ident, jule::Ptr<_228d31971_Expr> __param_expr): _field_token(__param_token), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_228d31971_EnumItemDecl(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _228d31971_EnumItemDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_EnumItemDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_EnumDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>>();
	jule::Ptr<_228d31971_CommentGroup> _field_doc_comments = jule::Ptr<_228d31971_CommentGroup>();


	_228d31971_EnumDecl(_228d7aadb_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>> __param_items, jule::Ptr<_228d31971_CommentGroup> __param_doc_comments): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc_comments(__param_doc_comments) {}

	

	_228d31971_EnumDecl(void) = default;

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(const _228d31971_EnumDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _228d31971_EnumDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_FieldDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_228d31971_Expr> _field_default = jule::Ptr<_228d31971_Expr>();


	_228d31971_FieldDecl(_228d7aadb_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Ptr<_228d31971_Expr> __param_default): _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_228d31971_FieldDecl(void) = default;

	inline bool operator==(const _228d31971_FieldDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _228d31971_FieldDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_StructDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_228d31971_FieldDecl>> _field_fields = jule::Slice<jule::Ptr<_228d31971_FieldDecl>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Ptr<_228d31971_CommentGroup> _field_doc_comments = jule::Ptr<_228d31971_CommentGroup>();
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_228d31971_GenericDecl>>();


	_228d31971_StructDecl(_228d7aadb_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_228d31971_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_directives, jule::Ptr<_228d31971_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_228d31971_GenericDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_generics(__param_generics) {}

	

	_228d31971_StructDecl(void) = default;

	inline bool operator==(const _228d31971_StructDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _228d31971_StructDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_TraitDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Ptr<_228d31971_CommentGroup> _field_doc_comments = jule::Ptr<_228d31971_CommentGroup>();
	jule::Slice<jule::Ptr<_228d31971_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_228d31971_FnDecl>>();


	_228d31971_TraitDecl(_228d7aadb_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ptr<_228d31971_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_228d31971_FnDecl>> __param_methods): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_doc_comments(__param_doc_comments), _field_methods(__param_methods) {}

	

	_228d31971_TraitDecl(void) = default;

	inline bool operator==(const _228d31971_TraitDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _228d31971_TraitDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Expr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_kind = jule::Any();


	_228d31971_Expr(_228d7aadb_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_228d31971_Expr(void) = default;

	inline bool operator==(const _228d31971_Expr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _228d31971_Expr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_UseExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();


	_228d31971_UseExpr(_228d7aadb_Token __param_token, jule::Ptr<_228d31971_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_228d31971_UseExpr(void) = default;

	inline bool operator==(const _228d31971_UseExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_UseExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_TypeDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_kind = jule::Any();


	_228d31971_TypeDecl(_228d7aadb_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_228d31971_TypeDecl(void) = default;

	inline bool operator==(const _228d31971_TypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _228d31971_TypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinPanicCallExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();


	_1e5870218_BuiltinPanicCallExprModel(_228d7aadb_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1e5870218_BuiltinPanicCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinPanicCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1e5870218_BuiltinPanicCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1e5870218_BuiltinAssertCallExprModel {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_log = jule::Str();


	_1e5870218_BuiltinAssertCallExprModel(_228d7aadb_Token __param_token, jule::Any __param_expr, jule::Str __param_log): _field_token(__param_token), _field_expr(__param_expr), _field_log(__param_log) {}

	

	_1e5870218_BuiltinAssertCallExprModel(void) = default;

	inline bool operator==(const _1e5870218_BuiltinAssertCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_log == _Src._field_log;
	}

	inline bool operator!=(const _1e5870218_BuiltinAssertCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_LitExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_value = jule::Str();


	_228d31971_LitExpr(_228d7aadb_Token __param_token, jule::Str __param_value): _field_token(__param_token), _field_value(__param_value) {}

	

	_228d31971_LitExpr(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(const _228d31971_LitExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _228d31971_LitExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_UnsafeExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();


	_228d31971_UnsafeExpr(_228d7aadb_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_228d31971_UnsafeExpr(void) = default;

	inline bool operator==(const _228d31971_UnsafeExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_UnsafeExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_CoExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();


	_228d31971_CoExpr(_228d7aadb_Token __param_token, jule::Ptr<_228d31971_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_228d31971_CoExpr(void) = default;

	inline bool operator==(const _228d31971_CoExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_CoExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_IdentExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();


	_228d31971_IdentExpr(_228d7aadb_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked) {}

	

	_228d31971_IdentExpr(void) = default;

	inline jule::Bool _method_is_self(void);


	inline bool operator==(const _228d31971_IdentExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked;
	}

	inline bool operator!=(const _228d31971_IdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228e13aa8_AssignInfo {
	jule::Slice<_228d7aadb_Token> _field_l = jule::Slice<_228d7aadb_Token>();
	jule::Slice<_228d7aadb_Token> _field_r = jule::Slice<_228d7aadb_Token>();
	_228d7aadb_Token _field_setter = _228d7aadb_Token();
	jule::Bool _field_ok = jule::Bool();


	_228e13aa8_AssignInfo(jule::Slice<_228d7aadb_Token> __param_l, jule::Slice<_228d7aadb_Token> __param_r, _228d7aadb_Token __param_setter, jule::Bool __param_ok): _field_l(__param_l), _field_r(__param_r), _field_setter(__param_setter), _field_ok(__param_ok) {}

	

	_228e13aa8_AssignInfo(void) = default;

	inline bool operator==(const _228e13aa8_AssignInfo &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_setter == _Src._field_setter &&
			this->_field_ok == _Src._field_ok;
	}

	inline bool operator!=(const _228e13aa8_AssignInfo &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_UnaryExpr {
	_228d7aadb_Token _field_op = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();


	_228d31971_UnaryExpr(_228d7aadb_Token __param_op, jule::Any __param_expr): _field_op(__param_op), _field_expr(__param_expr) {}

	

	_228d31971_UnaryExpr(void) = default;

	inline bool operator==(const _228d31971_UnaryExpr &_Src) const {
		return 
			this->_field_op == _Src._field_op &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_UnaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_VariadicExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();


	_228d31971_VariadicExpr(_228d7aadb_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_228d31971_VariadicExpr(void) = default;

	inline bool operator==(const _228d31971_VariadicExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_VariadicExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_IdentTypeDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_228d31971_TypeDecl>>();


	_228d31971_IdentTypeDecl(_228d7aadb_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_228d31971_TypeDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_generics(__param_generics) {}

	

	_228d31971_IdentTypeDecl(void) = default;

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(const _228d31971_IdentTypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _228d31971_IdentTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228e0d025_Field {
	jule::Ptr<_228e0d025_Field> self;

	jule::Ptr<_228e0d025_Struct> _field_owner = jule::Ptr<_228e0d025_Struct>();
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_229d681e3_TypeSymbol> _field_kind = jule::Ptr<_229d681e3_TypeSymbol>();
	jule::Ptr<_228d31971_Expr> _field_default = jule::Ptr<_228d31971_Expr>();


	_228e0d025_Field(jule::Ptr<_228e0d025_Struct> __param_owner, _228d7aadb_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_229d681e3_TypeSymbol> __param_kind, jule::Ptr<_228d31971_Expr> __param_default): _field_owner(__param_owner), _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {
		this->self = jule::Ptr<_228e0d025_Field>::make(this, nullptr);

	}

	~_228e0d025_Field(void) { this->self.ref = nullptr; }

	_228e0d025_Field(void) { this->self = jule::Ptr<_228e0d025_Field>::make(this, nullptr); }

	inline jule::Ptr<_228e0d025_FieldIns> _method_instance(void);


	inline bool operator==(const _228e0d025_Field &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _228e0d025_Field &_Src) const { return !this->operator==(_Src); }
};


struct _228e0d025_Struct {
	jule::Ptr<_228e0d025_Struct> self;

	jule::Ptr<_1e538b460_Sema> _field_sema = jule::Ptr<_1e538b460_Sema>();
	jule::Slice<jule::Ptr<_228e0d025_Struct>> _field_depends = jule::Slice<jule::Ptr<_228e0d025_Struct>>();
	jule::Slice<jule::Ptr<_228e0d025_Struct>> _field_uses = jule::Slice<jule::Ptr<_228e0d025_Struct>>();
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_228e0d025_Field>> _field_fields = jule::Slice<jule::Ptr<_228e0d025_Field>>();
	jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _field_methods = jule::Slice<jule::Ptr<_229b6ebcb_Fn>>();
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _field_statics = jule::Slice<jule::Ptr<_1e58b0654_Var>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_228d31971_GenericDecl>>();
	jule::Slice<jule::Ptr<_229b5076c_Trait>> _field_implements = jule::Slice<jule::Ptr<_229b5076c_Trait>>();
	jule::Slice<jule::Ptr<_228e0d025_StructIns>> _field_instances = jule::Slice<jule::Ptr<_228e0d025_StructIns>>();


	_228e0d025_Struct(jule::Ptr<_1e538b460_Sema> __param_sema, jule::Slice<jule::Ptr<_228e0d025_Struct>> __param_depends, jule::Slice<jule::Ptr<_228e0d025_Struct>> __param_uses, _228d7aadb_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_228e0d025_Field>> __param_fields, jule::Slice<jule::Ptr<_229b6ebcb_Fn>> __param_methods, jule::Slice<jule::Ptr<_1e58b0654_Var>> __param_statics, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ptr<_228d31971_GenericDecl>> __param_generics, jule::Slice<jule::Ptr<_229b5076c_Trait>> __param_implements, jule::Slice<jule::Ptr<_228e0d025_StructIns>> __param_instances): _field_sema(__param_sema), _field_depends(__param_depends), _field_uses(__param_uses), _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_methods(__param_methods), _field_statics(__param_statics), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc(__param_doc), _field_generics(__param_generics), _field_implements(__param_implements), _field_instances(__param_instances) {
		this->self = jule::Ptr<_228e0d025_Struct>::make(this, nullptr);

	}

	~_228e0d025_Struct(void) { this->self.ref = nullptr; }

	_228e0d025_Struct(void) { this->self = jule::Ptr<_228e0d025_Struct>::make(this, nullptr); }

	inline jule::Ptr<_228e0d025_StructIns> _method_instance(void);


	inline jule::Ptr<_228e0d025_StructIns> _method_append_instance(jule::Ptr<_228e0d025_StructIns>&);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_1e58b0654_Var> _method_find_static(jule::Str);


	inline jule::Ptr<_228e0d025_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ptr<_229b5076c_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ptr<_228e0d025_Struct>);


	inline jule::Bool _method_has_ref_accessible(void);


	inline bool operator==(const _228e0d025_Struct &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_depends == _Src._field_depends &&
			this->_field_uses == _Src._field_uses &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_generics == _Src._field_generics &&
			this->_field_implements == _Src._field_implements &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _228e0d025_Struct &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_NsSelectionExpr {
	jule::Slice<_228d7aadb_Token> _field_ns = jule::Slice<_228d7aadb_Token>();
	_228d7aadb_Token _field_ident = _228d7aadb_Token();


	_228d31971_NsSelectionExpr(jule::Slice<_228d7aadb_Token> __param_ns, _228d7aadb_Token __param_ident): _field_ns(__param_ns), _field_ident(__param_ident) {}

	

	_228d31971_NsSelectionExpr(void) = default;

	inline bool operator==(const _228d31971_NsSelectionExpr &_Src) const {
		return 
			this->_field_ns == _Src._field_ns &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _228d31971_NsSelectionExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1e53308ee_ImportInfo: public _229d94c47_Lookup {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_path = jule::Str();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_ident = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_duplicate = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	jule::Bool _field_import_all = jule::Bool();
	jule::Slice<_228d7aadb_Token> _field_selected = jule::Slice<_228d7aadb_Token>();
	jule::Ptr<_1e53308ee_Package> _field_package = jule::Ptr<_1e53308ee_Package>();
	jule::Int _field_mod_id = jule::Int();


	_1e53308ee_ImportInfo(_228d7aadb_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_228d7aadb_Token> __param_selected, jule::Ptr<_1e53308ee_Package> __param_package, jule::Int __param_mod_id): _field_token(__param_token), _field_path(__param_path), _field_link_path(__param_link_path), _field_ident(__param_ident), _field_alias(__param_alias), _field_duplicate(__param_duplicate), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std), _field_import_all(__param_import_all), _field_selected(__param_selected), _field_package(__param_package), _field_mod_id(__param_mod_id) {}

	

	_1e53308ee_ImportInfo(void) = default;

	inline jule::Ptr<_1e53308ee_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1e53308ee_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>);


	inline jule::Ptr<_1e58b0654_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_229d681e3_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_228e0d025_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_229b5076c_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1e56be485_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline jule::Bool _method_is_accessible_via_selection(void);


	inline bool operator==(const _1e53308ee_ImportInfo &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_path == _Src._field_path &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_ident == _Src._field_ident &&
			this->_field_alias == _Src._field_alias &&
			this->_field_duplicate == _Src._field_duplicate &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std &&
			this->_field_import_all == _Src._field_import_all &&
			this->_field_selected == _Src._field_selected &&
			this->_field_package == _Src._field_package &&
			this->_field_mod_id == _Src._field_mod_id;
	}

	inline bool operator!=(const _1e53308ee_ImportInfo &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_SubIdentExpr {
	jule::Bool _field_is_self = jule::Bool();
	jule::Any _field_expr = jule::Any();
	_228d7aadb_Token _field_ident = _228d7aadb_Token();


	_228d31971_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _228d7aadb_Token __param_ident): _field_is_self(__param_is_self), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_228d31971_SubIdentExpr(void) = default;

	inline bool operator==(const _228d31971_SubIdentExpr &_Src) const {
		return 
			this->_field_is_self == _Src._field_is_self &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _228d31971_SubIdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_BinopExpr {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	_228d7aadb_Token _field_op = _228d7aadb_Token();


	_228d31971_BinopExpr(jule::Any __param_left, jule::Any __param_right, _228d7aadb_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_228d31971_BinopExpr(void) = default;

	inline bool operator==(const _228d31971_BinopExpr &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _228d31971_BinopExpr &_Src) const { return !this->operator==(_Src); }
};


struct _229b6ebcb_Param {
	jule::Ptr<_229b6ebcb_Param> self;

	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_229d681e3_TypeSymbol> _field_kind = jule::Ptr<_229d681e3_TypeSymbol>();
	jule::Str _field_ident = jule::Str();


	_229b6ebcb_Param(_228d7aadb_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_229d681e3_TypeSymbol> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {
		this->self = jule::Ptr<_229b6ebcb_Param>::make(this, nullptr);

	}

	~_229b6ebcb_Param(void) { this->self.ref = nullptr; }

	_229b6ebcb_Param(void) { this->self = jule::Ptr<_229b6ebcb_Param>::make(this, nullptr); }

	inline jule::Ptr<_229b6ebcb_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _229b6ebcb_Param &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _229b6ebcb_Param &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b0654_Var {
	jule::Ptr<_1e56c3885_Scope> _field_scope = jule::Ptr<_1e56c3885_Scope>();
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_229d681e3_TypeSymbol> _field_kind = jule::Ptr<_229d681e3_TypeSymbol>();
	jule::Ptr<_229d70d33_Value> _field_value = jule::Ptr<_229d70d33_Value>();
	jule::Ptr<_228d6ecab_ReferenceStack> _field_references = jule::Ptr<_228d6ecab_ReferenceStack>();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Ptr<_1e58b0654_IterRelation> _field_iter_relation = jule::Ptr<_1e58b0654_IterRelation>();
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _field_depends = jule::Slice<jule::Ptr<_1e58b0654_Var>>();


	_1e58b0654_Var(jule::Ptr<_1e56c3885_Scope> __param_scope, _228d7aadb_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ptr<_229d681e3_TypeSymbol> __param_kind, jule::Ptr<_229d70d33_Value> __param_value, jule::Ptr<_228d6ecab_ReferenceStack> __param_references, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_directives, jule::Ptr<_1e58b0654_IterRelation> __param_iter_relation, jule::Slice<jule::Ptr<_1e58b0654_Var>> __param_depends): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_constant(__param_constant), _field_mutable(__param_mutable), _field_public(__param_public), _field_used(__param_used), _field_statically(__param_statically), _field_reference(__param_reference), _field_doc(__param_doc), _field_kind(__param_kind), _field_value(__param_value), _field_references(__param_references), _field_directives(__param_directives), _field_iter_relation(__param_iter_relation), _field_depends(__param_depends) {}

	

	_1e58b0654_Var(void) = default;

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(const _1e58b0654_Var &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_constant == _Src._field_constant &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_public == _Src._field_public &&
			this->_field_used == _Src._field_used &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc == _Src._field_doc &&
			this->_field_kind == _Src._field_kind &&
			this->_field_value == _Src._field_value &&
			this->_field_references == _Src._field_references &&
			this->_field_directives == _Src._field_directives &&
			this->_field_iter_relation == _Src._field_iter_relation &&
			this->_field_depends == _Src._field_depends;
	}

	inline bool operator!=(const _1e58b0654_Var &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b019d_TypeCompatibilityChecker {
	jule::Ptr<_1e538b460_Sema> _field_s = jule::Ptr<_1e538b460_Sema>();
	jule::Ptr<_229d681e3_TypeKind> _field_dest = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229d681e3_TypeKind> _field_src = jule::Ptr<_229d681e3_TypeKind>();
	_228d7aadb_Token _field_error_token = _228d7aadb_Token();


	_1e58b019d_TypeCompatibilityChecker(jule::Ptr<_1e538b460_Sema> __param_s, jule::Ptr<_229d681e3_TypeKind> __param_dest, jule::Ptr<_229d681e3_TypeKind> __param_src, _228d7aadb_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_src(__param_src), _field_error_token(__param_error_token) {}

	

	_1e58b019d_TypeCompatibilityChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1e58b019d_TypeCompatibilityChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_src == _Src._field_src &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _1e58b019d_TypeCompatibilityChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b019d_AssignTypeChecker {
	jule::Ptr<_1e538b460_Sema> _field_s = jule::Ptr<_1e538b460_Sema>();
	jule::Ptr<_229d681e3_TypeKind> _field_dest = jule::Ptr<_229d681e3_TypeKind>();
	jule::Ptr<_229d70d33_Data> _field_d = jule::Ptr<_229d70d33_Data>();
	_228d7aadb_Token _field_error_token = _228d7aadb_Token();


	_1e58b019d_AssignTypeChecker(jule::Ptr<_1e538b460_Sema> __param_s, jule::Ptr<_229d681e3_TypeKind> __param_dest, jule::Ptr<_229d70d33_Data> __param_d, _228d7aadb_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_d(__param_d), _field_error_token(__param_error_token) {}

	

	_1e58b019d_AssignTypeChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_is_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1e58b019d_AssignTypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_d == _Src._field_d &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _1e58b019d_AssignTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b019d_DynamicTypeAnnotation {
	jule::Ptr<_229d70d33_Eval> _field_e = jule::Ptr<_229d70d33_Eval>();
	jule::Ptr<_229b6ebcb_FnIns> _field_f = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Ptr<_229b6ebcb_ParamIns> _field_p = jule::Ptr<_229b6ebcb_ParamIns>();
	jule::Ptr<_229d70d33_Data> _field_a = jule::Ptr<_229d70d33_Data>();
	_228d7aadb_Token _field_error_token = _228d7aadb_Token();
	jule::Ptr<_229d681e3_TypeKind>* _field_k = nullptr;


	_1e58b019d_DynamicTypeAnnotation(jule::Ptr<_229d70d33_Eval> __param_e, jule::Ptr<_229b6ebcb_FnIns> __param_f, jule::Ptr<_229b6ebcb_ParamIns> __param_p, jule::Ptr<_229d70d33_Data> __param_a, _228d7aadb_Token __param_error_token, jule::Ptr<_229d681e3_TypeKind>* __param_k): _field_e(__param_e), _field_f(__param_f), _field_p(__param_p), _field_a(__param_a), _field_error_token(__param_error_token), _field_k(__param_k) {}

	

	_1e58b019d_DynamicTypeAnnotation(void) = default;

	inline void _method_push_generic(jule::Ptr<_229d681e3_TypeKind>&,jule::Int);


	inline jule::Bool _method_annotate_prim(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate_slc(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_check_map_key(jule::Ptr<_229d681e3_TypeKind>*,jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate_map(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate_fn(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate_ptr(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate_sptr(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate_any(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate_kind(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(const _1e58b019d_DynamicTypeAnnotation &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_f == _Src._field_f &&
			this->_field_p == _Src._field_p &&
			this->_field_a == _Src._field_a &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_k == _Src._field_k;
	}

	inline bool operator!=(const _1e58b019d_DynamicTypeAnnotation &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b019d_FnCallArgChecker {
	jule::Ptr<_229d70d33_Eval> _field_e = jule::Ptr<_229d70d33_Eval>();
	jule::Slice<jule::Ptr<_228d31971_Expr>> _field_args = jule::Slice<jule::Ptr<_228d31971_Expr>>();
	_228d7aadb_Token _field_error_token = _228d7aadb_Token();
	jule::Ptr<_229b6ebcb_FnIns> _field_f = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Bool _field_dynamic_annotation = jule::Bool();
	jule::Slice<jule::Any> _field_arg_models = jule::Slice<jule::Any>();


	_1e58b019d_FnCallArgChecker(jule::Ptr<_229d70d33_Eval> __param_e, jule::Slice<jule::Ptr<_228d31971_Expr>> __param_args, _228d7aadb_Token __param_error_token, jule::Ptr<_229b6ebcb_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models): _field_e(__param_e), _field_args(__param_args), _field_error_token(__param_error_token), _field_f(__param_f), _field_dynamic_annotation(__param_dynamic_annotation), _field_arg_models(__param_arg_models) {}

	

	_1e58b019d_FnCallArgChecker(void) = default;

	inline void _method_push_err_token(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>&);


	inline jule::Bool _method_check_arg(jule::Ptr<_229b6ebcb_ParamIns>&,jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline jule::Bool _method_push(jule::Ptr<_229b6ebcb_ParamIns>&,jule::Ptr<_228d31971_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ptr<_229b6ebcb_ParamIns>&,jule::Int);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>&);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1e58b019d_FnCallArgChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_args == _Src._field_args &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_f == _Src._field_f &&
			this->_field_dynamic_annotation == _Src._field_dynamic_annotation &&
			this->_field_arg_models == _Src._field_arg_models;
	}

	inline bool operator!=(const _1e58b019d_FnCallArgChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b019d_StructLitChecker {
	jule::Ptr<_229d70d33_Eval> _field_e = jule::Ptr<_229d70d33_Eval>();
	_228d7aadb_Token _field_error_token = _228d7aadb_Token();
	jule::Ptr<_228e0d025_StructIns> _field_s = jule::Ptr<_228e0d025_StructIns>();
	jule::Slice<jule::Ptr<_1e5870218_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1e5870218_StructArgExprModel>>();


	_1e58b019d_StructLitChecker(jule::Ptr<_229d70d33_Eval> __param_e, _228d7aadb_Token __param_error_token, jule::Ptr<_228e0d025_StructIns> __param_s, jule::Slice<jule::Ptr<_1e5870218_StructArgExprModel>> __param_args): _field_e(__param_e), _field_error_token(__param_error_token), _field_s(__param_s), _field_args(__param_args) {}

	

	_1e58b019d_StructLitChecker(void) = default;

	inline void _method_push_err(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ptr<_228e0d025_FieldIns>&,jule::Ptr<_229d70d33_Data>&,_228d7aadb_Token&);


	inline void _method_check_pair(jule::Ptr<_228d31971_FieldExprPair>&,jule::Slice<jule::Any>&);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>&);


	inline void _method_check(jule::Slice<jule::Any>&);


	inline bool operator==(const _1e58b019d_StructLitChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_s == _Src._field_s &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1e58b019d_StructLitChecker &_Src) const { return !this->operator==(_Src); }
};


struct _229b6ebcb_Fn {
	jule::Ptr<_229b6ebcb_Fn> self;

	jule::Ptr<_1e538b460_Sema> _field_sema = jule::Ptr<_1e538b460_Sema>();
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_228d31971_GenericDecl>>();
	jule::Ptr<_229b6ebcb_RetType> _field_result = jule::Ptr<_229b6ebcb_RetType>();
	jule::Slice<jule::Ptr<_229b6ebcb_Param>> _field_params = jule::Slice<jule::Ptr<_229b6ebcb_Param>>();
	jule::Ptr<_228e0d025_Struct> _field_owner = jule::Ptr<_228e0d025_Struct>();
	jule::Slice<jule::Ptr<_229b6ebcb_FnIns>> _field_instances = jule::Slice<jule::Ptr<_229b6ebcb_FnIns>>();


	_229b6ebcb_Fn(jule::Ptr<_1e538b460_Sema> __param_sema, _228d7aadb_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_directives, jule::Str __param_doc, jule::Ptr<_228d31971_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_228d31971_GenericDecl>> __param_generics, jule::Ptr<_229b6ebcb_RetType> __param_result, jule::Slice<jule::Ptr<_229b6ebcb_Param>> __param_params, jule::Ptr<_228e0d025_Struct> __param_owner, jule::Slice<jule::Ptr<_229b6ebcb_FnIns>> __param_instances): _field_sema(__param_sema), _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc(__param_doc), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params), _field_owner(__param_owner), _field_instances(__param_instances) {
		this->self = jule::Ptr<_229b6ebcb_Fn>::make(this, nullptr);

	}

	~_229b6ebcb_Fn(void) { this->self.ref = nullptr; }

	_229b6ebcb_Fn(void) { this->self = jule::Ptr<_229b6ebcb_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ptr<_229b6ebcb_FnIns> _method_instance_force(void);


	inline jule::Ptr<_229b6ebcb_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::Int> _method_append_instance(jule::Ptr<_229b6ebcb_FnIns>&);


	inline bool operator==(const _229b6ebcb_Fn &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params &&
			this->_field_owner == _Src._field_owner &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _229b6ebcb_Fn &_Src) const { return !this->operator==(_Src); }
};


struct _1e58b019d_RetTypeChecker {
	jule::Ptr<_1e56c3885_ScopeChecker> _field_sc = jule::Ptr<_1e56c3885_ScopeChecker>();
	jule::Ptr<_229b6ebcb_FnIns> _field_f = jule::Ptr<_229b6ebcb_FnIns>();
	jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _field_types = jule::Slice<jule::Ptr<_229d681e3_TypeKind>>();
	jule::Slice<jule::Ptr<_228d31971_Expr>> _field_exprs = jule::Slice<jule::Ptr<_228d31971_Expr>>();
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _field_vars = jule::Slice<jule::Ptr<_1e58b0654_Var>>();
	_228d7aadb_Token _field_error_token = _228d7aadb_Token();
	jule::Any _field_model = jule::Any();


	_1e58b019d_RetTypeChecker(jule::Ptr<_1e56c3885_ScopeChecker> __param_sc, jule::Ptr<_229b6ebcb_FnIns> __param_f, jule::Slice<jule::Ptr<_229d681e3_TypeKind>> __param_types, jule::Slice<jule::Ptr<_228d31971_Expr>> __param_exprs, jule::Slice<jule::Ptr<_1e58b0654_Var>> __param_vars, _228d7aadb_Token __param_error_token, jule::Any __param_model): _field_sc(__param_sc), _field_f(__param_f), _field_types(__param_types), _field_exprs(__param_exprs), _field_vars(__param_vars), _field_error_token(__param_error_token), _field_model(__param_model) {}

	

	_1e58b019d_RetTypeChecker(void) = default;

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ptr<_228d31971_Expr>&);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ptr<_228d31971_Expr>&);


	inline bool operator==(const _1e58b019d_RetTypeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_f == _Src._field_f &&
			this->_field_types == _Src._field_types &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_vars == _Src._field_vars &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _1e58b019d_RetTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_FnCallExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();
	jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_228d31971_TypeDecl>>();
	jule::Slice<jule::Ptr<_228d31971_Expr>> _field_args = jule::Slice<jule::Ptr<_228d31971_Expr>>();
	jule::Ptr<_228d31971_ScopeTree> _field_exception = jule::Ptr<_228d31971_ScopeTree>();


	_228d31971_FnCallExpr(_228d7aadb_Token __param_token, jule::Ptr<_228d31971_Expr> __param_expr, jule::Slice<jule::Ptr<_228d31971_TypeDecl>> __param_generics, jule::Slice<jule::Ptr<_228d31971_Expr>> __param_args, jule::Ptr<_228d31971_ScopeTree> __param_exception): _field_token(__param_token), _field_expr(__param_expr), _field_generics(__param_generics), _field_args(__param_args), _field_exception(__param_exception) {}

	

	_228d31971_FnCallExpr(void) = default;

	inline jule::Bool _method_unhandled(void);


	inline jule::Bool _method_ignored(void);


	inline bool operator==(const _228d31971_FnCallExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_generics == _Src._field_generics &&
			this->_field_args == _Src._field_args &&
			this->_field_exception == _Src._field_exception;
	}

	inline bool operator!=(const _228d31971_FnCallExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_FieldExprPair {
	_228d7aadb_Token _field_field = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();


	_228d31971_FieldExprPair(_228d7aadb_Token __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_228d31971_FieldExprPair(void) = default;

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(const _228d31971_FieldExprPair &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_FieldExprPair &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Node {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_data = jule::Any();


	_228d31971_Node(_228d7aadb_Token __param_token, jule::Any __param_data): _field_token(__param_token), _field_data(__param_data) {}

	

	_228d31971_Node(void) = default;

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_directive(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(const _228d31971_Node &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _228d31971_Node &_Src) const { return !this->operator==(_Src); }
};


struct _228d6ecab_Pass {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_text = jule::Str();


	_228d6ecab_Pass(_228d7aadb_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_228d6ecab_Pass(void) = default;

	inline bool operator==(const _228d6ecab_Pass &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _228d6ecab_Pass &_Src) const { return !this->operator==(_Src); }
};


struct _229d70d33_BinopSolver {
	jule::Ptr<_229d70d33_Eval> _field_e = jule::Ptr<_229d70d33_Eval>();
	jule::Ptr<_229d70d33_Data> _field_l = jule::Ptr<_229d70d33_Data>();
	jule::Ptr<_229d70d33_Data> _field_r = jule::Ptr<_229d70d33_Data>();
	_228d7aadb_Token _field_op = _228d7aadb_Token();


	_229d70d33_BinopSolver(jule::Ptr<_229d70d33_Eval> __param_e, jule::Ptr<_229d70d33_Data> __param_l, jule::Ptr<_229d70d33_Data> __param_r, _228d7aadb_Token __param_op): _field_e(__param_e), _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_229d70d33_BinopSolver(void) = default;

	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_nil(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_enum(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_sptr(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_ptr(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_arr(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_slc(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_fn(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_struct(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_trait(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_any(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_bool(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ptr<_229d70d33_Data>&);


	inline void _method_mod(void);


	inline jule::Bool _method_numbers_are_compatibile(jule::Str&,jule::Str&);


	inline jule::Ptr<_229d70d33_Data> _method_eval_float(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_int(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval_prim(void);


	inline jule::Ptr<_229d70d33_Data> _method_eval(void);


	inline void _method_solve_const(jule::Ptr<_229d70d33_Data>&);


	inline void _method_post_const(jule::Ptr<_229d70d33_Data>&);


	inline void _method_check_data(jule::Ptr<_229d70d33_Data>&);


	inline void _method_check_datas(void);


	inline void _method_set_model(jule::Ptr<_229d70d33_Data>&);


	inline void _method_post_eval(jule::Ptr<_229d70d33_Data>&);


	inline jule::Ptr<_229d70d33_Data> _method_solve_explicit(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>&);


	inline jule::Ptr<_229d70d33_Data> _method_solve(jule::Ptr<_228d31971_BinopExpr>&);


	inline bool operator==(const _229d70d33_BinopSolver &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _229d70d33_BinopSolver &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_TypeAlias {
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_generic = jule::Bool();
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_229d681e3_TypeSymbol> _field_kind = jule::Ptr<_229d681e3_TypeSymbol>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Any> _field_refers = jule::Slice<jule::Any>();


	_229d681e3_TypeAlias(jule::Ptr<_228d31971_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, jule::Bool __param_generic, _228d7aadb_Token __param_token, jule::Str __param_ident, jule::Ptr<_229d681e3_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_used(__param_used), _field_generic(__param_generic), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc(__param_doc), _field_refers(__param_refers) {}

	

	_229d681e3_TypeAlias(void) = default;

	inline bool operator==(const _229d681e3_TypeAlias &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_used == _Src._field_used &&
			this->_field_generic == _Src._field_generic &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc == _Src._field_doc &&
			this->_field_refers == _Src._field_refers;
	}

	inline bool operator!=(const _229d681e3_TypeAlias &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_BraceLit {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_228d31971_BraceLit(_228d7aadb_Token __param_token, jule::Slice<jule::Any> __param_exprs): _field_token(__param_token), _field_exprs(__param_exprs) {}

	

	_228d31971_BraceLit(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _228d31971_BraceLit &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _228d31971_BraceLit &_Src) const { return !this->operator==(_Src); }
};


struct _229b5076c_Trait: public _229d681e3_Kind {
	jule::Ptr<_229b5076c_Trait> self;

	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _field_methods = jule::Slice<jule::Ptr<_229b6ebcb_Fn>>();
	jule::Slice<jule::Ptr<_228e0d025_Struct>> _field_implemented = jule::Slice<jule::Ptr<_228e0d025_Struct>>();


	_229b5076c_Trait(_228d7aadb_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_doc, jule::Slice<jule::Ptr<_229b6ebcb_Fn>> __param_methods, jule::Slice<jule::Ptr<_228e0d025_Struct>> __param_implemented): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_mutable(__param_mutable), _field_doc(__param_doc), _field_methods(__param_methods), _field_implemented(__param_implemented) {
		this->self = jule::Ptr<_229b5076c_Trait>::make(this, nullptr);

	}

	~_229b5076c_Trait(void) { this->self.ref = nullptr; }

	_229b5076c_Trait(void) { this->self = jule::Ptr<_229b5076c_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ptr<_229b6ebcb_Fn> _method_find_method(jule::Str);


	inline bool operator==(const _229b5076c_Trait &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_doc == _Src._field_doc &&
			this->_field_methods == _Src._field_methods &&
			this->_field_implemented == _Src._field_implemented;
	}

	inline bool operator!=(const _229b5076c_Trait &_Src) const { return !this->operator==(_Src); }
};


struct _1e56be485_EnumItem {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_229d70d33_Value> _field_value = jule::Ptr<_229d70d33_Value>();


	_1e56be485_EnumItem(_228d7aadb_Token __param_token, jule::Str __param_ident, jule::Ptr<_229d70d33_Value> __param_value): _field_token(__param_token), _field_ident(__param_ident), _field_value(__param_value) {}

	

	_1e56be485_EnumItem(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _1e56be485_EnumItem &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _1e56be485_EnumItem &_Src) const { return !this->operator==(_Src); }
};


struct _1e56be485_Enum: public _229d681e3_Kind {
	jule::Ptr<_1e56be485_Enum> self;

	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_229d681e3_TypeSymbol> _field_kind = jule::Ptr<_229d681e3_TypeSymbol>();
	jule::Slice<jule::Ptr<_1e56be485_EnumItem>> _field_items = jule::Slice<jule::Ptr<_1e56be485_EnumItem>>();
	jule::Str _field_doc = jule::Str();


	_1e56be485_Enum(_228d7aadb_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_229d681e3_TypeSymbol> __param_kind, jule::Slice<jule::Ptr<_1e56be485_EnumItem>> __param_items, jule::Str __param_doc): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc(__param_doc) {
		this->self = jule::Ptr<_1e56be485_Enum>::make(this, nullptr);

	}

	~_1e56be485_Enum(void) { this->self.ref = nullptr; }

	_1e56be485_Enum(void) { this->self = jule::Ptr<_1e56be485_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_229d681e3_TypeKind>);


	inline jule::Ptr<_1e56be485_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(const _1e56be485_Enum &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc == _Src._field_doc;
	}

	inline bool operator!=(const _1e56be485_Enum &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_KeyValPair {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();
	_228d7aadb_Token _field_colon = _228d7aadb_Token();


	_228d31971_KeyValPair(jule::Any __param_key, jule::Any __param_val, _228d7aadb_Token __param_colon): _field_key(__param_key), _field_val(__param_val), _field_colon(__param_colon) {}

	

	_228d31971_KeyValPair(void) = default;

	inline bool operator==(const _228d31971_KeyValPair &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val &&
			this->_field_colon == _Src._field_colon;
	}

	inline bool operator!=(const _228d31971_KeyValPair &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_SliceExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_228d31971_SliceExpr(_228d7aadb_Token __param_token, jule::Slice<jule::Any> __param_elems): _field_token(__param_token), _field_elems(__param_elems) {}

	

	_228d31971_SliceExpr(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _228d31971_SliceExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _228d31971_SliceExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_IndexingExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_index = jule::Any();


	_228d31971_IndexingExpr(_228d7aadb_Token __param_token, jule::Any __param_expr, jule::Any __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_228d31971_IndexingExpr(void) = default;

	inline bool operator==(const _228d31971_IndexingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _228d31971_IndexingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_SlicingExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_start = jule::Any();
	jule::Any _field_to = jule::Any();


	_228d31971_SlicingExpr(_228d7aadb_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to): _field_token(__param_token), _field_expr(__param_expr), _field_start(__param_start), _field_to(__param_to) {}

	

	_228d31971_SlicingExpr(void) = default;

	inline bool operator==(const _228d31971_SlicingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_start == _Src._field_start &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _228d31971_SlicingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_TernaryExpr {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_228d31971_TernaryExpr(_228d7aadb_Token __param_token, jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_token(__param_token), _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_228d31971_TernaryExpr(void) = default;

	inline bool operator==(const _228d31971_TernaryExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _228d31971_TernaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_GenericDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();


	_228d31971_GenericDecl(_228d7aadb_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_228d31971_GenericDecl(void) = default;

	inline bool operator==(const _228d31971_GenericDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _228d31971_GenericDecl &_Src) const { return !this->operator==(_Src); }
};


struct _229d681e3_TypeChecker {
	jule::Ptr<_1e538b460_Sema> _field_s = jule::Ptr<_1e538b460_Sema>();
	jule::Trait<_229d94c47_Lookup> _field_lookup = jule::Trait<_229d94c47_Lookup>();
	jule::Ptr<_229d681e3_Referencer> _field_referencer = jule::Ptr<_229d681e3_Referencer>();
	_228d7aadb_Token _field_error_token = _228d7aadb_Token();
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _field_ignore_generics = jule::Slice<jule::Ptr<_228d31971_GenericDecl>>();
	jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _field_use_generics = jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>();
	jule::Bool _field_not_plain = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Bool _field_selection = jule::Bool();


	_229d681e3_TypeChecker(jule::Ptr<_1e538b460_Sema> __param_s, jule::Trait<_229d94c47_Lookup> __param_lookup, jule::Ptr<_229d681e3_Referencer> __param_referencer, _228d7aadb_Token __param_error_token, jule::Slice<jule::Ptr<_228d31971_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain, jule::Bool __param_dis_builtin, jule::Bool __param_selection): _field_s(__param_s), _field_lookup(__param_lookup), _field_referencer(__param_referencer), _field_error_token(__param_error_token), _field_ignore_generics(__param_ignore_generics), _field_use_generics(__param_use_generics), _field_not_plain(__param_not_plain), _field_dis_builtin(__param_dis_builtin), _field_selection(__param_selection) {}

	

	_229d681e3_TypeChecker(void) = default;

	inline void _method_push_err(_228d7aadb_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Ptr<_229d681e3_Prim> _method_build_prim(jule::Ptr<_228d31971_IdentTypeDecl>&);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_228d31971_IdentTypeDecl>&,jule::Any);


	inline jule::Trait<_229d681e3_Kind> _method_from_type_alias(jule::Ptr<_228d31971_IdentTypeDecl>&,jule::Ptr<_229d681e3_TypeAlias>&);


	inline jule::Ptr<_1e56be485_Enum> _method_from_enum(jule::Ptr<_228d31971_IdentTypeDecl>&,jule::Ptr<_1e56be485_Enum>&);


	inline jule::Bool _method_check_struct_ins(jule::Ptr<_228e0d025_StructIns>&,_228d7aadb_Token&);


	inline void _method_append_used_struct_reference(jule::Ptr<_228e0d025_Struct>&);


	inline jule::Ptr<_228e0d025_StructIns> _method_from_struct(jule::Ptr<_228d31971_IdentTypeDecl>&,jule::Ptr<_228e0d025_Struct>&);


	inline jule::Trait<_229d681e3_Kind> _method_get_def(jule::Ptr<_228d31971_IdentTypeDecl>&);


	inline jule::Trait<_229d681e3_Kind> _method_build_ident(jule::Ptr<_228d31971_IdentTypeDecl>);


	inline jule::Ptr<_229d681e3_Sptr> _method_build_sptr_from_type(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Ptr<_229d681e3_Sptr> _method_build_sptr(jule::Ptr<_228d31971_SptrTypeDecl>);


	inline jule::Ptr<_229d681e3_Ptr> _method_build_ptr_from_type(jule::Ptr<_229d681e3_TypeKind>&);


	inline jule::Ptr<_229d681e3_Ptr> _method_build_ptr(jule::Ptr<_228d31971_PtrTypeDecl>);


	inline jule::Ptr<_229d681e3_Slc> _method_build_slc(jule::Ptr<_228d31971_SlcTypeDecl>);


	inline jule::Ptr<_229d681e3_Arr> _method_build_arr(jule::Ptr<_228d31971_ArrTypeDecl>);


	inline jule::Ptr<_229d681e3_Map> _method_build_map(jule::Ptr<_228d31971_MapTypeDecl>);


	inline jule::Ptr<_229d681e3_Tuple> _method_build_tuple(jule::Ptr<_228d31971_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ptr<_229b6ebcb_FnIns>&);


	inline jule::Ptr<_229b6ebcb_FnIns> _method_build_fn(jule::Ptr<_228d31971_FnDecl>);


	inline jule::Trait<_229d681e3_Kind> _method_build_by_namespace(jule::Ptr<_228d31971_NamespaceTypeDecl>);


	inline jule::Ptr<_229d681e3_TypeKind> _method_build(jule::Any&);


	inline jule::Ptr<_229d681e3_TypeKind> _method_check_decl(jule::Ptr<_228d31971_TypeDecl>&);


	inline void _method_check(jule::Ptr<_229d681e3_TypeSymbol>&);


	inline bool operator==(const _229d681e3_TypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_referencer == _Src._field_referencer &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_generics == _Src._field_ignore_generics &&
			this->_field_use_generics == _Src._field_use_generics &&
			this->_field_not_plain == _Src._field_not_plain &&
			this->_field_dis_builtin == _Src._field_dis_builtin &&
			this->_field_selection == _Src._field_selection;
	}

	inline bool operator!=(const _229d681e3_TypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_LabelSt {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();


	_228d31971_LabelSt(_228d7aadb_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_228d31971_LabelSt(void) = default;

	inline bool operator==(const _228d31971_LabelSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _228d31971_LabelSt &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_GotoSt {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	_228d7aadb_Token _field_label = _228d7aadb_Token();


	_228d31971_GotoSt(_228d7aadb_Token __param_token, _228d7aadb_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_228d31971_GotoSt(void) = default;

	inline bool operator==(const _228d31971_GotoSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _228d31971_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _228c91a35_IR {
	jule::Slice<jule::Str> _field_passes = jule::Slice<jule::Str>();
	jule::Ptr<_1e53308ee_Package> _field_main = jule::Ptr<_1e53308ee_Package>();
	jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>> _field_used = jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>>();
	_228ca2e64_OrderedDefines _field_ordered = _228ca2e64_OrderedDefines();


	_228c91a35_IR(jule::Slice<jule::Str> __param_passes, jule::Ptr<_1e53308ee_Package> __param_main, jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>> __param_used, _228ca2e64_OrderedDefines __param_ordered): _field_passes(__param_passes), _field_main(__param_main), _field_used(__param_used), _field_ordered(__param_ordered) {}

	

	_228c91a35_IR(void) = default;

	static inline std::tuple<jule::Ptr<_228c91a35_IR>,jule::Slice<_2276bcb9e_Log>> _static_method_build(jule::Str,jule::Int);


	inline void _method_append_structs(jule::Ptr<_1e53308ee_Package>&,jule::Slice<jule::Ptr<_228e0d025_Struct>>&);


	inline jule::Slice<jule::Ptr<_228e0d025_Struct>> _method_get_all_structures(void);


	inline void _method_order(void);


	inline bool operator==(const _228c91a35_IR &_Src) const {
		return 
			this->_field_passes == _Src._field_passes &&
			this->_field_main == _Src._field_main &&
			this->_field_used == _Src._field_used &&
			this->_field_ordered == _Src._field_ordered;
	}

	inline bool operator!=(const _228c91a35_IR &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_FallSt {
	_228d7aadb_Token _field_token = _228d7aadb_Token();


	_228d31971_FallSt(_228d7aadb_Token __param_token): _field_token(__param_token) {}

	

	_228d31971_FallSt(void) = default;

	inline bool operator==(const _228d31971_FallSt &_Src) const {
		return 
			this->_field_token == _Src._field_token;
	}

	inline bool operator!=(const _228d31971_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_AssignLeft {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();


	_228d31971_AssignLeft(_228d7aadb_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ptr<_228d31971_Expr> __param_expr): _field_token(__param_token), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_228d31971_AssignLeft(void) = default;

	inline bool operator==(const _228d31971_AssignLeft &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_AssignLeft &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_AssignSt {
	jule::Bool _field_declarative = jule::Bool();
	_228d7aadb_Token _field_setter = _228d7aadb_Token();
	jule::Slice<jule::Ptr<_228d31971_AssignLeft>> _field_left = jule::Slice<jule::Ptr<_228d31971_AssignLeft>>();
	jule::Ptr<_228d31971_Expr> _field_right = jule::Ptr<_228d31971_Expr>();


	_228d31971_AssignSt(jule::Bool __param_declarative, _228d7aadb_Token __param_setter, jule::Slice<jule::Ptr<_228d31971_AssignLeft>> __param_left, jule::Ptr<_228d31971_Expr> __param_right): _field_declarative(__param_declarative), _field_setter(__param_setter), _field_left(__param_left), _field_right(__param_right) {}

	

	_228d31971_AssignSt(void) = default;

	inline bool operator==(const _228d31971_AssignSt &_Src) const {
		return 
			this->_field_declarative == _Src._field_declarative &&
			this->_field_setter == _Src._field_setter &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _228d31971_AssignSt &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Comment {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_text = jule::Str();


	_228d31971_Comment(_228d7aadb_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_228d31971_Comment(void) = default;

	inline bool operator==(const _228d31971_Comment &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _228d31971_Comment &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_ParamDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Str _field_ident = jule::Str();


	_228d31971_ParamDecl(_228d7aadb_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {}

	

	_228d31971_ParamDecl(void) = default;

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _228d31971_ParamDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _228d31971_ParamDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1e56c3885_Assign {
	jule::Any _field_l = jule::Any();
	jule::Any _field_r = jule::Any();
	_228d7aadb_Token _field_op = _228d7aadb_Token();


	_1e56c3885_Assign(jule::Any __param_l, jule::Any __param_r, _228d7aadb_Token __param_op): _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1e56c3885_Assign(void) = default;

	inline bool operator==(const _1e56c3885_Assign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1e56c3885_Assign &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_FnDecl {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Ptr<_228d31971_CommentGroup> _field_doc_comments = jule::Ptr<_228d31971_CommentGroup>();
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_228d31971_GenericDecl>>();
	jule::Ptr<_228d31971_RetTypeDecl> _field_result = jule::Ptr<_228d31971_RetTypeDecl>();
	jule::Slice<jule::Ptr<_228d31971_ParamDecl>> _field_params = jule::Slice<jule::Ptr<_228d31971_ParamDecl>>();


	_228d31971_FnDecl(_228d7aadb_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_directives, jule::Ptr<_228d31971_CommentGroup> __param_doc_comments, jule::Ptr<_228d31971_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_228d31971_GenericDecl>> __param_generics, jule::Ptr<_228d31971_RetTypeDecl> __param_result, jule::Slice<jule::Ptr<_228d31971_ParamDecl>> __param_params): _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params) {}

	

	_228d31971_FnDecl(void) = default;

	inline jule::Bool _method_is_anon(void);


	inline bool operator==(const _228d31971_FnDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params;
	}

	inline bool operator!=(const _228d31971_FnDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_VarDecl {
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Slice<jule::Ptr<_228d31971_Directive>> _field_directives = jule::Slice<jule::Ptr<_228d31971_Directive>>();
	jule::Ptr<_228d31971_CommentGroup> _field_doc_comments = jule::Ptr<_228d31971_CommentGroup>();
	jule::Ptr<_228d31971_TypeDecl> _field_kind = jule::Ptr<_228d31971_TypeDecl>();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();


	_228d31971_VarDecl(jule::Ptr<_228d31971_ScopeTree> __param_scope, _228d7aadb_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ptr<_228d31971_Directive>> __param_directives, jule::Ptr<_228d31971_CommentGroup> __param_doc_comments, jule::Ptr<_228d31971_TypeDecl> __param_kind, jule::Ptr<_228d31971_Expr> __param_expr): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_public(__param_public), _field_mutable(__param_mutable), _field_constant(__param_constant), _field_statically(__param_statically), _field_reference(__param_reference), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_228d31971_VarDecl(void) = default;

	inline bool operator==(const _228d31971_VarDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_constant == _Src._field_constant &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_VarDecl &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_RetSt {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Ptr<_228d31971_Expr> _field_expr = jule::Ptr<_228d31971_Expr>();


	_228d31971_RetSt(_228d7aadb_Token __param_token, jule::Ptr<_228d31971_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_228d31971_RetSt(void) = default;

	inline bool operator==(const _228d31971_RetSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _228d31971_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _228d31971_Iter {
	_228d7aadb_Token _field_token = _228d7aadb_Token();
	jule::Any _field_kind = jule::Any();
	jule::Ptr<_228d31971_ScopeTree> _field_scope = jule::Ptr<_228d31971_ScopeTree>();


	_228d31971_Iter(_228d7aadb_Token __param_token, jule::Any __param_kind, jule::Ptr<_228d31971_ScopeTree> __param_scope): _field_token(__param_token), _field_kind(__param_kind), _field_scope(__param_scope) {}

	

	_228d31971_Iter(void) = default;

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(const _228d31971_Iter &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _228d31971_Iter &_Src) const { return !this->operator==(_Src); }
};


struct _229cbddd5_ArgParser {
	_229cbddd5_FlagSet _field_set = _229cbddd5_FlagSet();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_content = jule::Slice<jule::Str>();
	jule::Int _field_i = jule::Int();


	_229cbddd5_ArgParser(_229cbddd5_FlagSet __param_set, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_content, jule::Int __param_i): _field_set(__param_set), _field_args(__param_args), _field_content(__param_content), _field_i(__param_i) {}

	

	_229cbddd5_ArgParser(void) = default;

	inline std::tuple<jule::Int,jule::Bool> _method_parse_integer_0(jule::Str&,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>);
	inline std::tuple<jule::Uint,jule::Bool> _method_parse_integer_1(jule::Str&,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>);


	inline jule::Str _method_get_data(void);


	inline jule::VoidExceptional _method_process_flag(jule::Trait<_229cbddd5_CommonFlag>&);


	inline jule::VoidExceptional _method_single_dash(jule::Str&);


	inline jule::VoidExceptional _method_double_dash(jule::Str&);


	inline jule::VoidExceptional _method_try_arg(void);


	inline jule::VoidExceptional _method_parse(void);


	inline bool operator==(const _229cbddd5_ArgParser &_Src) const {
		return 
			this->_field_set == _Src._field_set &&
			this->_field_args == _Src._field_args &&
			this->_field_content == _Src._field_content &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _229cbddd5_ArgParser &_Src) const { return !this->operator==(_Src); }
};


inline void _2275e3a2b_free(void*);
inline jule::Str _22765b797_byte_ptr_to_str(jule::U8*);
inline jule::Int _2275e2d05_get_last_errno(void);
inline jule::Int _2275de50a_stat(jule::U8*,struct stat*);
inline jule::Int _2275de50a_open(jule::U8*,jule::Int,jule::Int);
inline jule::U8* _2275de50a_getcwd(jule::U8*,jule::Uint);
inline DIR* _2275de50a_opendir(jule::U8*);
inline struct dirent* _2275de50a_readdir(DIR*);
inline jule::Int _2275de50a_closedir(DIR*);
inline jule::Int _2275de50a_mkdir(jule::U8*,jule::Int);
inline jule::Int _2275de50a_rmdir(jule::U8*);
inline jule::Int _2275de50a_unlink(jule::U8*);
inline jule::I64 _22760ae1c_seek(jule::Int,jule::I64,jule::Int);
inline jule::Int _22760ae1c_read(jule::Int,void*,jule::Uint);
inline jule::Int _22760ae1c_close(jule::Int);
inline jule::Int _22760ae1c_write(jule::Int,void*,jule::Uint);
inline void _22760ae1c_exit(jule::Int);
inline jule::Int _2275c911b_get_last_os_error(void);
inline jule::Slice<jule::Str> _2275d406b_args(void);
inline jule::Exceptional<jule::Str> _2275d406b_working_dir(void);
inline jule::Exceptional<jule::Str> _2275de95b___getwd(void);
inline void _227532edc_push_opt_level(jule::Int);
inline jule::Str _227711594_clean(jule::Str);
inline jule::Str _227711594_from_slash(jule::Str);
inline jule::Str _227711594_join(jule::Slice<jule::Str>);
inline jule::Str _227711594_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _227711594_abs(jule::Str);
inline jule::Str _227711594_base(jule::Str);
inline jule::Str _227711594_dir(jule::Str);
inline jule::Str _227711594_volume_name(jule::Str);
inline jule::Bool _227719602_is_path_sep(jule::U8);
inline jule::Bool _227719602_is_abs(jule::Str);
inline jule::Int _227719602_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _227719602___abs(jule::Str);
inline jule::Str _227719602_str_join(jule::Slice<jule::Str>,jule::Str);
inline jule::Str _227719602___join(jule::Slice<jule::Str>);
inline jule::Int _22756cb1a_get_last_fs_error(void);
inline jule::Int _2277c1973_get_last_process_error(void);
inline void _2277d2c70_exit(jule::Int);
inline jule::Str _2277d2c70_executable(void);
inline jule::Bool _2275ec68e_is_std_header_path(jule::Str);
inline jule::Bool _2275ec68e_is_valid_header_ext(jule::Str);
inline jule::Bool _2275ec68e_is_valid_cpp_ext(jule::Str);
inline jule::Str _2276bcb9e_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _2276bcb9e_arg_to_str(jule::Any);
inline jule::Int _2276bcb9e_find_next_fmt(jule::Str);
inline jule::Str _2276bcb9e_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _22763bd1b_is_top_directive(jule::Str);
inline jule::Bool _227785d55_is_windows(jule::Str);
inline jule::Bool _227785d55_is_darwin(jule::Str);
inline jule::Bool _227785d55_is_linux(jule::Str);
inline jule::Bool _227785d55_is_i386(jule::Str);
inline jule::Bool _227785d55_is_amd64(jule::Str);
inline jule::Bool _227785d55_is_arm64(jule::Str);
inline jule::Bool _227785d55_is_unix(jule::Str);
inline jule::Bool _227785d55_is_32bit(jule::Str);
inline jule::Bool _227785d55_is_64bit(jule::Str);
inline void _22779d455_exit_err(jule::Str);
inline void _22779d455_init(void);
inline jule::Int _228bb20b5_leading_zeros64(jule::U64);
inline jule::Int _228bb20b5_trailing_zeros(jule::Uint);
inline jule::Int _228bb20b5_trailing_zeros32(jule::U32);
inline jule::Int _228bb20b5_trailing_zeros64(jule::U64);
inline jule::Int _228bb20b5_len32(jule::U32);
inline jule::Int _228bb20b5_len64(jule::U64);
inline std::tuple<jule::U64,jule::U64> _228bb20b5_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::U64,jule::U64> _228bb20b5_mul64(jule::U64,jule::U64);
inline jule::U32 _2286ec3c5_f32_bits(jule::F32);
inline jule::F32 _2286ec3c5_f32_from_bits(jule::U32);
inline jule::U64 _2286ec3c5_f64_bits(jule::F64);
inline jule::F64 _2286ec3c5_f64_from_bits(jule::U64);
inline jule::F64 _22876159e_nan(void);
inline jule::Bool _22876159e_is_nan(jule::F64);
inline jule::F64 _22876159e_inf(jule::Int);
inline jule::Bool _22876159e_is_inf(jule::F64,jule::Int);
inline jule::F64 _22883ed31_abs(jule::F64);
inline std::tuple<jule::F64,jule::F64> _22889069a_modf(jule::F64);
inline jule::Str _22777cad8_fmt_float(jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _22777cad8_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _22777cad8_big_ftoa(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_22777cad8_FloatInfo&);
inline jule::Slice<jule::U8> _22777cad8_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_22777cad8_DecimalSlice,jule::Int,jule::U8);
inline void _22777cad8_round_shortest(_2286660ca_Decimal&,jule::U64,jule::Int,_22777cad8_FloatInfo&);
inline jule::Slice<jule::U8> _22777cad8_fmt_e(jule::Slice<jule::U8>,jule::Bool,_22777cad8_DecimalSlice,jule::Int,jule::U8);
inline jule::Slice<jule::U8> _22777cad8_fmt_f(jule::Slice<jule::U8>,jule::Bool,_22777cad8_DecimalSlice,jule::Int);
inline jule::Slice<jule::U8> _22777cad8_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::Int,_22777cad8_FloatInfo&);
inline jule::Slice<jule::U8> _22777cad8_fmt_x(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_22777cad8_FloatInfo&);
inline jule::Int _22777cad8_min(jule::Int,jule::Int);
inline jule::Int _22777cad8_max(jule::Int,jule::Int);
inline jule::U8 _2277861c9_lower(jule::U8);
inline std::tuple<jule::U64,jule::Int> _2277861c9_parse_uint(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::I64,jule::Int> _2277861c9_parse_int(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::F64,jule::Bool> _22778ec3d_eisel_lemire64(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _22778ec3d_eisel_lemire32(jule::U64,jule::Int,jule::Bool);
inline jule::Int _2284c0eac_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Bool> _2284c0eac_special(jule::Str);
inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _2284c0eac_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _2284c0eac_atof64exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _2284c0eac_atof32exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Int> _2284c0eac_atof_hex(jule::Str,_22777cad8_FloatInfo&,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::Int,jule::Int> _2284c0eac_atof32(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _2284c0eac_atof64(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _2284c0eac_parse_float_prefix(jule::Str,jule::Int);
inline std::tuple<jule::F64,jule::Int> _2284c0eac_parse_float(jule::Str,jule::Int);
inline void _2285d3a92_ryu_ftoa_fixed32(_22777cad8_DecimalSlice&,jule::U32,jule::Int,jule::Int);
inline void _2285d3a92_ryu_ftoa_fixed64(_22777cad8_DecimalSlice&,jule::U64,jule::Int,jule::Int);
inline void _2285d3a92_format_decimal(_22777cad8_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::Int);
inline void _2285d3a92_ryu_ftoa_shortest(_22777cad8_DecimalSlice&,jule::U64,jule::Int,_22777cad8_FloatInfo&);
inline jule::Int _2285d3a92_mul_by_log2_log10(jule::Int);
inline jule::Int _2285d3a92_mul_by_log10_log2(jule::Int);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _2285d3a92_compute_bounds(jule::U64,jule::Int,_22777cad8_FloatInfo&);
inline void _2285d3a92_ryu_digits(_22777cad8_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _2285d3a92_ryu_digits32(_22777cad8_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::Int);
inline std::tuple<jule::U32,jule::Int,jule::Bool> _2285d3a92_mult64bit_pow10(jule::U32,jule::Int,jule::Int);
inline std::tuple<jule::U64,jule::Int,jule::Bool> _2285d3a92_mult128bit_pow10(jule::U64,jule::Int,jule::Int);
inline jule::Bool _2285d3a92_divisible_by_pow5(jule::U64,jule::Int);
inline std::tuple<jule::U32,jule::U32> _2285d3a92_divmod1e9(jule::U64);
inline void _2286660ca_trim(_2286660ca_Decimal&);
inline void _2286660ca_right_shift(_2286660ca_Decimal&,jule::Uint);
inline jule::Bool _2286660ca_prefix_is_less_than(jule::Array<jule::U8,800>,jule::Int,jule::Str);
inline void _2286660ca_left_shift(_2286660ca_Decimal&,jule::Uint);
inline jule::Bool _2286660ca_should_round_up(_2286660ca_Decimal&,jule::Int);
inline jule::Str _22866a079_fmt_uint(jule::U64,jule::Int);
inline jule::Str _22866a079_fmt_int(jule::I64,jule::Int);
inline jule::Str _22866a079_itoa(jule::Int);
inline jule::Str _22866a079_small(jule::Int);
inline jule::Bool _22866a079_is_power_of_two(jule::Int);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _22866a079_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline jule::Bool _228dc4904_is_letter(jule::I32);
inline jule::Bool _228e939c3_is16(jule::Slice<_228e939c3_Range16>,jule::U16);
inline jule::Bool _228e939c3_is32(jule::Slice<_228e939c3_Range32>,jule::U32);
inline jule::Bool _228e939c3_is_excluding_latin(jule::Ptr<_228e939c3_RangeTable>,jule::I32);
inline std::tuple<jule::I32,jule::Int> _228e84d38_decode_rune(jule::Slice<jule::U8>);
inline jule::Slice<jule::U8> _228e84d38_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _228e84d38_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::Bool _228d7aadb_is_unary_op(jule::Str);
inline jule::Bool _228d7aadb_is_bin_op(jule::Str);
inline jule::Bool _228d7aadb_is_str(jule::Str);
inline jule::Bool _228d7aadb_is_raw_str(jule::Str);
inline jule::Bool _228d7aadb_is_rune(jule::Str);
inline jule::Bool _228d7aadb_is_bool(jule::Str);
inline jule::Bool _228d7aadb_contains_any(jule::Str,jule::Str);
inline jule::Bool _228d7aadb_is_float(jule::Str);
inline jule::Bool _228d7aadb_is_num(jule::Str);
inline jule::Bool _228d7aadb_is_ignore_ident(jule::Str);
inline jule::Bool _228d7aadb_is_anon_ident(jule::Str);
inline jule::Bool _228d7aadb_is_space(jule::I32);
inline jule::Bool _228d7aadb_is_letter(jule::I32);
inline jule::Bool _228d7aadb_is_decimal(jule::U8);
inline jule::Bool _228d7aadb_is_binary(jule::U8);
inline jule::Bool _228d7aadb_is_octal(jule::U8);
inline jule::Bool _228d7aadb_is_hex(jule::U8);
inline jule::Bool _228d7aadb_is_assign(jule::Uint);
inline jule::Bool _228d7aadb_is_postfix_op(jule::Str);
inline jule::Bool _228d7aadb_is_assign_op(jule::Str);
inline jule::Ptr<_228d34677_File> _228d34677_new_file_set(jule::Str);
inline _2276bcb9e_Log _228d36080_make_err(jule::Int,jule::Int,jule::Ptr<_228d34677_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _228d36080_bytes_has_prefix(jule::Slice<jule::U8>&,jule::Str);
inline jule::Str _228d36080_float_fmt_e(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_float_fmt_p(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_float_num(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_common_num(jule::Slice<jule::U8>&);
inline jule::Str _228d36080_binary_num(jule::Slice<jule::U8>&);
inline jule::Bool _228d36080_is_float_fmt_e(jule::U8,jule::Int);
inline jule::Bool _228d36080_is_float_fmt_p(jule::U8,jule::Int);
inline jule::Bool _228d36080_is_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _228d36080_is_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _228d36080_is_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_octal_num(jule::Slice<jule::U8>&);
inline jule::Str _228d36080_hex_num(jule::Slice<jule::U8>&);
inline jule::Str _228d36080_hex_escape(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _228d36080_big_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _228d36080_little_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _228d36080_hex_byte_escape(jule::Slice<jule::U8>&);
inline jule::Str _228d36080_byte_escape(jule::Slice<jule::U8>&);
inline jule::Slice<_2276bcb9e_Log> _228d36080_lex(jule::Ptr<_228d34677_File>);
inline jule::Bool _228d5de21_find_module_file(jule::Slice<jule::Ptr<_22762b646_DirEntry>>&);
inline jule::Str _228d5de21_find_module_file_deep(jule::Str);
inline jule::Slice<_2276bcb9e_Log> _228d5de21_check_module_file(jule::Str);
inline jule::Ptr<_228d79a30_FileInfo> _228d79a30_parse_file(jule::Ptr<_228d34677_File>);
inline std::tuple<jule::Ptr<_228d3160d_Ast>,jule::Slice<_2276bcb9e_Log>> _228d79a30_parse_fileset(jule::Ptr<_228d34677_File>);
inline jule::Ptr<_228d31971_ScopeTree> _228d45c71_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _228d45c71_is_st(_228d7aadb_Token,_228d7aadb_Token);
inline jule::Bool _228d45c71_prev_is_incomplete_expr(jule::Slice<_228d7aadb_Token>&,jule::Int&);
inline std::tuple<jule::Int,jule::Bool> _228d45c71_next_st_pos(jule::Slice<_228d7aadb_Token>&,jule::Int);
inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Bool> _228d45c71_skip_st(jule::Int&,jule::Slice<_228d7aadb_Token>);
inline jule::Slice<jule::Ptr<_228d45c71_Stmt>> _228d45c71_split_stmts(jule::Slice<_228d7aadb_Token>&);
inline jule::Ptr<_229a547e7_CallData> _229a547e7_get_call_data(jule::Slice<_228d7aadb_Token>&);
inline jule::Slice<_228d7aadb_Token> _229a547e7_get_block_expr(jule::Slice<_228d7aadb_Token>&);
inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Slice<_228d7aadb_Token>> _229a547e7_split_colon(jule::Slice<_228d7aadb_Token>&);
inline jule::Slice<_228d7aadb_Token> _229a547e7_eliminate_comments(jule::Slice<_228d7aadb_Token>&);
inline jule::Int _229a547e7_find_lowest_prec_op(jule::Slice<_228d7aadb_Token>&);
inline jule::Ptr<_228d31971_IdentExpr> _229a547e7_build_ident_expr(_228d7aadb_Token&);
inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Int> _229a547e7_get_range_expr_tokens(jule::Slice<_228d7aadb_Token>&);
inline jule::Bool _228e13aa8_check_assign_tokens(jule::Slice<_228d7aadb_Token>&);
inline _2276bcb9e_Log _229a51c34_make_err(jule::Int,jule::Int,jule::Ptr<_228d34677_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_228d7aadb_Token> _229a51c34_range(jule::Int&,jule::Str,jule::Str,jule::Slice<_228d7aadb_Token>&);
inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Slice<_228d7aadb_Token>> _229a51c34_range_last(jule::Slice<_228d7aadb_Token>&);
inline std::tuple<jule::Slice<jule::Slice<_228d7aadb_Token>>,jule::Slice<_2276bcb9e_Log>> _229a51c34_parts(jule::Slice<_228d7aadb_Token>&,jule::Uint,jule::Bool);
inline jule::Str _229a51c34_get_close_kind_of_brace(jule::Str);
inline _2276bcb9e_Log _229a51c34_compiler_err(_228d7aadb_Token&,jule::Str&,jule::Slice<jule::Any>);
inline void _229a51c34_push_suggestion(_2276bcb9e_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_228d31971_Comment> _229a51c34_build_comment(_228d7aadb_Token&);
inline jule::Str _229a51c34_tokstoa(jule::Slice<_228d7aadb_Token>&);
inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_build_void_type(void);
inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_build_prim_type(_228d7aadb_Token);
inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Int> _1e5543d98_split_map_range(jule::Slice<_228d7aadb_Token>&,jule::Int&);
inline void _1e856e8a4_lshift_unsig(_1e856e8a4_Const&,_1e856e8a4_Const&);
inline void _1e856e8a4_rshift_unsig(_1e856e8a4_Const&,_1e856e8a4_Const&);
inline jule::Str _1e8570b6e_real_kind_of(jule::Str);
inline jule::Int _1e8570b6e_bitsize_of(jule::Str);
inline jule::Str _1e8570b6e_int_from_bits(jule::U64);
inline jule::Str _1e8570b6e_uint_from_bits(jule::U64);
inline jule::Bool _1e8570b6e_check_bit_float(jule::Str,jule::Int);
inline jule::U64 _1e8570b6e_bitsize_of_int(jule::I64);
inline jule::U64 _1e8570b6e_bitsize_of_uint(jule::U64);
inline jule::F64 _1e8572e29_min(jule::Str);
inline jule::F64 _1e8572e29_max(jule::Str);
inline jule::Bool _1e85717c9_is_i8_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_i16_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_i32_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_i64_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_u8_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_u16_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_u32_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_u64_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_f32_compatible(jule::Str);
inline jule::Bool _1e85717c9_is_f64_compatible(jule::Str);
inline jule::Bool _1e85717c9_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _1e85717c9_is_i16_greater(jule::Str);
inline jule::Bool _1e85717c9_is_i32_greater(jule::Str);
inline jule::Bool _1e85717c9_is_i64_greater(jule::Str);
inline jule::Bool _1e85717c9_is_u16_greater(jule::Str);
inline jule::Bool _1e85717c9_is_u32_greater(jule::Str);
inline jule::Bool _1e85717c9_is_u64_greater(jule::Str);
inline jule::Bool _1e85717c9_is_f32_greater(jule::Str);
inline jule::Bool _1e85717c9_is_f64_greater(jule::Str);
inline jule::Bool _1e85717c9_is_greater(jule::Str,jule::Str);
inline jule::Bool _1e860322e_is_sig_int(jule::Str);
inline jule::Bool _1e860322e_is_unsig_int(jule::Str);
inline jule::Bool _1e860322e_is_int(jule::Str);
inline jule::Bool _1e860322e_is_float(jule::Str);
inline jule::Bool _1e860322e_is_num(jule::Str);
inline jule::Bool _1e86ab2b5_is_ascii(jule::I32);
inline jule::I32 _1e86ab2b5_to_rune(jule::Slice<jule::U8>);
inline jule::Str _1e86ab2b5_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _1e86ab2b5_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _1e86ab2b5_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _1e86ab2b5_rune_from_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Slice<jule::U8> _1e86ab2b5_str_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Bool _229b6ebcb_kind_uses_generics(jule::Ptr<_229d681e3_TypeKind>,jule::Slice<jule::Ptr<_228d31971_GenericDecl>>&);
inline jule::Bool _229b6ebcb_parameter_uses_generics(jule::Ptr<_229b6ebcb_Param>&,jule::Slice<jule::Ptr<_228d31971_GenericDecl>>&);
inline jule::Str _228d6ecab_str_repeat(jule::Str,jule::Int);
inline jule::Str _228d6ecab_build_doc(jule::Ptr<_228d31971_CommentGroup>);
inline jule::Ptr<_229d681e3_TypeSymbol> _228d6ecab_build_type(jule::Ptr<_228d31971_TypeDecl>);
inline jule::Ptr<_229d70d33_Value> _228d6ecab_build_expr(jule::Ptr<_228d31971_Expr>);
inline jule::Ptr<_229d681e3_TypeAlias> _228d6ecab_build_type_alias(jule::Ptr<_228d31971_TypeAliasDecl>);
inline jule::Ptr<_228e0d025_Field> _228d6ecab_build_field(jule::Ptr<_228d31971_FieldDecl>);
inline jule::Slice<jule::Ptr<_228e0d025_Field>> _228d6ecab_build_fields(jule::Slice<jule::Ptr<_228d31971_FieldDecl>>&);
inline jule::Ptr<_228e0d025_Struct> _228d6ecab_build_struct(jule::Ptr<_228d31971_StructDecl>);
inline jule::Ptr<_229b6ebcb_Param> _228d6ecab_build_param(jule::Ptr<_228d31971_ParamDecl>);
inline jule::Slice<jule::Ptr<_229b6ebcb_Param>> _228d6ecab_build_params(jule::Slice<jule::Ptr<_228d31971_ParamDecl>>&);
inline jule::Ptr<_229b6ebcb_RetType> _228d6ecab_build_ret_type(jule::Ptr<_228d31971_RetTypeDecl>);
inline jule::Ptr<_229b6ebcb_Fn> _228d6ecab_build_fn(jule::Ptr<_228d31971_FnDecl>);
inline jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _228d6ecab_build_methods(jule::Slice<jule::Ptr<_228d31971_FnDecl>>&);
inline jule::Ptr<_229b5076c_Trait> _228d6ecab_build_trait(jule::Ptr<_228d31971_TraitDecl>);
inline jule::Ptr<_1e56be485_EnumItem> _228d6ecab_build_enum_item(jule::Ptr<_228d31971_EnumItemDecl>);
inline jule::Slice<jule::Ptr<_1e56be485_EnumItem>> _228d6ecab_build_enum_items(jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>>&);
inline jule::Ptr<_1e56be485_Enum> _228d6ecab_build_enum(jule::Ptr<_228d31971_EnumDecl>);
inline jule::Ptr<_1e58b0654_Var> _228d6ecab_build_var(jule::Ptr<_228d31971_VarDecl>);
inline jule::Slice<jule::Ptr<_1e58b0654_Var>> _228d6ecab_build_vars(jule::Slice<jule::Ptr<_228d31971_VarDecl>>);
inline jule::Ptr<_1e56ca370_Impl> _228d6ecab_build_impl(jule::Ptr<_228d31971_Impl>);
inline jule::Ptr<_1e56c3885_ScopeChecker> _1e56c3885_new_scope_checker_base(jule::Ptr<_1e538b460_Sema>&,jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Ptr<_1e56c3885_ScopeChecker> _1e56c3885_new_scope_checker(jule::Ptr<_1e538b460_Sema>&,jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Ptr<_1e56c3885_ScopeLabel> _1e56c3885_find_label_parent(jule::Str,jule::Ptr<_1e56c3885_ScopeChecker>);
inline jule::Bool _1e56c3885_stmt_is_goto_scope(jule::Any&,jule::Ptr<_1e56c3885_Scope>&);
inline jule::Int _1e56c3885_count_match_type(jule::Ptr<_1e56c3885_Match>&,jule::Ptr<_229d681e3_TypeKind>&);
inline jule::Slice<jule::Ptr<_229d70d33_Data>> _1e56c3885_get_datas_from_tuple_data(jule::Ptr<_229d70d33_Data>&);
inline jule::Slice<jule::Any> _1e56c3885_get_expr_models(jule::Any&);
inline jule::Bool _1e56c3885_check_mut(jule::Ptr<_1e538b460_Sema>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);
inline jule::Bool _1e56c3885_check_assign(jule::Ptr<_1e538b460_Sema>&,jule::Ptr<_229d70d33_Data>&,jule::Ptr<_229d70d33_Data>,_228d7aadb_Token);
inline jule::Bool _1e56c3885_is_valid_ast_st_for_next_st(jule::Any&);
inline jule::Bool _1e56c3885_is_valid_st_for_next_st(jule::Any&);
inline jule::Bool _1e56c3885_st_is_def(jule::Any&);
inline jule::Ptr<_1e58b0654_Var> _1e53308ee_find_var_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_229d681e3_TypeAlias> _1e53308ee_find_type_alias_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_228e0d025_Struct> _1e53308ee_find_struct_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_229b6ebcb_Fn> _1e53308ee_find_fn_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_229b5076c_Trait> _1e53308ee_find_trait_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&,jule::Str);
inline jule::Ptr<_1e56be485_Enum> _1e53308ee_find_enum_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&,jule::Str);
inline jule::Bool _1e53308ee_is_std_package(jule::Str,jule::Str);
inline jule::Bool _1e538b460_is_valid_model_for_ref(jule::Any&);
inline _2276bcb9e_Log _1e538b460_compiler_err(_228d7aadb_Token&,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1e538b460_imp_is_lookupable(jule::Ptr<_1e53308ee_ImportInfo>&,jule::Str);
inline jule::Slice<jule::Ptr<_1e58b0654_Var>> _1e538b460_build_ret_vars(jule::Ptr<_229b6ebcb_FnIns>&);
inline jule::Slice<jule::Ptr<_1e58b0654_Var>> _1e538b460_build_param_vars(jule::Ptr<_229b6ebcb_FnIns>&);
inline jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _1e538b460_build_generic_type_aliases(jule::Ptr<_229b6ebcb_FnIns>&);
inline jule::Ptr<_229d56533_SymbolTable> _1e538b460_find_file(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>&,jule::Ptr<_228d34677_File>&);
inline std::tuple<jule::Bool,jule::Bool> _1e538b460_conditional_has_ret(jule::Ptr<_1e56c3885_Conditional>);
inline jule::Bool _1e538b460_match_has_ret(jule::Ptr<_1e56c3885_Match>);
inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _1e538b460___has_ret(jule::Ptr<_1e56c3885_Scope>);
inline jule::Bool _1e538b460_has_ret(jule::Ptr<_1e56c3885_Scope>);
inline void _1e538b460_push_suggestion(_2276bcb9e_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _1e58b019d_get_result_types(jule::Ptr<_229d681e3_TypeKind>&);
inline jule::Bool _1e58b019d_trait_has_reference_receiver(jule::Ptr<_229b5076c_Trait>&);
inline jule::Bool _1e58b019d_float_assignable(jule::Str,jule::Ptr<_229d70d33_Data>&);
inline jule::Bool _1e58b019d_sig_assignable(jule::Str,jule::Ptr<_229d70d33_Data>&);
inline jule::Bool _1e58b019d_unsig_assignable(jule::Str,jule::Ptr<_229d70d33_Data>&);
inline jule::Bool _1e58b019d_int_assignable(jule::Str,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_228d31971_Directive> _229d70d33_find_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>&,jule::Str);
inline jule::Any _229d70d33_find_builtins_import(jule::Str,jule::Ptr<_1e53308ee_ImportInfo>);
inline void _229d70d33_make_struct_lit_alloc(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_1e5870218_StructLitExprModel>&);
inline jule::Ptr<_1e58b0654_Var> _229d70d33_build_error_var(jule::Ptr<_1e56c3885_Scope>&,jule::Ptr<_228d31971_FnCallExpr>&);
inline jule::Any _229d70d33_find_builtins_sema(jule::Str,jule::Ptr<_1e538b460_Sema>);
inline jule::Bool _229d70d33_is_ok_for_shifting(jule::Ptr<_229d70d33_Data>&);
inline jule::Bool _229d70d33_is_instanced_struct(jule::Ptr<_228e0d025_StructIns>);
inline jule::Bool _229d70d33_is_ptr_arithmetic_compatible_int(jule::Ptr<_229d70d33_Data>&);
inline void _229d70d33_normalize_bitsize(jule::Ptr<_229d70d33_Data>&);
inline void _229d70d33_normalize_type(jule::Ptr<_229d70d33_Data>&);
inline void _229d70d33_fit_type(jule::Ptr<_229d70d33_Data>&);
inline void _229d70d33_apply_cast_kind_model(jule::Ptr<_229d70d33_Data>&);
inline void _229d70d33_apply_cast_kind(jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _229d70d33_build_void_data(void);
inline jule::Str _229d70d33_check_data_for_integer_indexing(jule::Ptr<_229d70d33_Data>&);
inline jule::Bool _229d681e3_has_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>&,jule::Str);
inline jule::Bool _229d681e3_can_get_ptr(jule::Ptr<_229d70d33_Data>&);
inline jule::Bool _229d681e3_is_valid_for_sptr_type(jule::Ptr<_229d681e3_TypeKind>&);
inline jule::Bool _229d681e3_is_valid_for_ref(jule::Ptr<_229d681e3_TypeKind>&);
inline jule::Bool _229d681e3_is_builtin_str_convertable(jule::Ptr<_229d681e3_TypeKind>&);
inline jule::Str _229d681e3_build_link_path_by_tokens(jule::Slice<_228d7aadb_Token>&);
inline jule::Ptr<_229d681e3_Prim> _229d681e3_build_prim_type(jule::Str);
inline jule::Ptr<_228e0d025_Struct> _229d681e3_get_struct_from_kind(jule::Ptr<_229d681e3_TypeKind>);
inline jule::Bool _229d681e3_is_prim(jule::Str);
inline std::tuple<jule::Ptr<_229d56533_SymbolTable>,jule::Slice<_2276bcb9e_Log>> _1e61383d7_build_symbols(jule::Ptr<_228d3160d_Ast>&,jule::Trait<_1e53308ee_Importer>&,jule::Ptr<_228d6ecab_SymbolBuilder>);
inline std::tuple<jule::Ptr<_1e53308ee_Package>,jule::Slice<_2276bcb9e_Log>> _1e61383d7___analyze_package(jule::Slice<jule::Ptr<_228d3160d_Ast>>&,jule::Trait<_1e53308ee_Importer>&,jule::Int&);
inline std::tuple<jule::Ptr<_1e53308ee_Package>,jule::Slice<_2276bcb9e_Log>> _1e61383d7_analyze_package(jule::Slice<jule::Ptr<_228d3160d_Ast>>,jule::Trait<_1e53308ee_Importer>,jule::Int);
inline jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)> _1e614d809_find_builtin_caller(jule::U8);
inline jule::Ptr<_229b6ebcb_FnIns> _1e614d809_find_builtin_fn(jule::Str);
inline jule::Ptr<_229d681e3_TypeAlias> _1e614d809_find_builtin_type_alias(jule::Str);
inline jule::Ptr<_229b5076c_Trait> _1e614d809_find_builtin_trait(jule::Str);
inline jule::Any _1e614d809_find_builtin_def(jule::Str);
inline jule::Any _1e614d809_find_builtin_def_std_debug(jule::Str);
inline jule::Any _1e614d809_find_builtin_def_std_mem(jule::Str);
inline jule::Any _1e614d809_find_builtin_def_std_jule_integrated(jule::Str);
inline jule::Any _1e614d809_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_common_plain(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_common(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_common_mut(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_error(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_out(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_outln(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_new(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_panic(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_make(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_append(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_copy(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_clone(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_assert(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_mem_size_of(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_mem_align_of(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_mem_free(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_jule_integrated_inline(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_debug_out(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_debug_outln(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&);
inline std::tuple<jule::Bool,jule::Bool> _228cbeab8_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _228cbeab8_check_arch(jule::Str);
inline jule::Bool _228cbeab8_is_pass_file_annotation(jule::Str);
inline void _228cd1217_set_os_vars(void);
inline void _228cd1217_set_arch_vars(void);
inline void _228cd1217_init_vars(void);
inline void _228ce6ea8_exit_err(jule::Str);
inline jule::Slice<jule::U8> _228ce6ea8_read_buff(jule::Str);
inline _2276bcb9e_Log _228ce6ea8_flat_compiler_err(jule::Str);
inline std::tuple<jule::Bool,jule::Slice<_2276bcb9e_Log>> _228ce6ea8_is_pass_build_directives(jule::Ptr<_228d3160d_Ast>&);
inline void _228c91a35_push_passes(jule::Ptr<_1e53308ee_Package>&,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _228c91a35_get_all_unique_passes(jule::Ptr<_1e53308ee_Package>&,jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>>);
inline jule::Bool _22777e238_is_exist(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _22777e238_is_dead(jule::Any);
inline void _22777e238_drop_ref(jule::Slice<jule::Any>&,jule::Int);
inline jule::Bool _22777e238_is_all_references_are_dead(jule::Ptr<_228d6ecab_ReferenceStack>);
inline jule::Bool _22777e238_is_fn_dead(jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Bool _22777e238_is_var_dead(jule::Ptr<_1e58b0654_Var>);
inline jule::Bool _22777e238_is_struct_dead(jule::Ptr<_228e0d025_StructIns>);
inline jule::Bool _22777e238_is_trait_dead(jule::Ptr<_229b5076c_Trait>);
inline void _22777e238_eliminate_dead_functions(jule::Slice<jule::Ptr<_229b6ebcb_Fn>>&);
inline void _22777e238_eliminate_dead_globals(jule::Ptr<_1e53308ee_Package>&);
inline void _22777e238_eliminate_dead_functions_package(jule::Ptr<_1e53308ee_Package>&);
inline void _22777e238_catch_alive_init(jule::Ptr<_1e53308ee_Package>&);
inline void _22777e238_eliminate_package(jule::Ptr<_1e53308ee_Package>&);
inline void _22777e238_eliminate_defines(jule::Ptr<_228c91a35_IR>&);
inline void _228798383_eliminate_dead_code_of_scope(jule::Ptr<_1e56c3885_Scope>);
inline void _228798383_eliminate_scope_functions(jule::Slice<jule::Ptr<_229b6ebcb_Fn>>&);
inline void _228798383_eliminate_functions_scope_package(jule::Ptr<_1e53308ee_Package>&);
inline void _228798383_eliminate_scope_package(jule::Ptr<_1e53308ee_Package>&);
inline void _228798383_eliminate_scopes(jule::Ptr<_228c91a35_IR>&);
inline jule::U64 _1e8a7c6a8_unix(void);
inline jule::U64 _1e8a7c6a8_unix_year_to_seconds(jule::Uint,jule::Bool&);
inline jule::U64 _1e8a7c6a8_unix_month_to_seconds(jule::Uint,jule::Bool);
inline jule::Bool _229cbb9e8_iter_expr_is_copy_optimizable(jule::Ptr<_229d70d33_Data>&,jule::Ptr<_1e58b0654_Var>&);
inline jule::Str _229cbb9e8_gen_range_index_iter(jule::Ptr<_1e56c3885_RangeIter>&);
inline jule::Str _229cbb9e8_gen_range_hashmap_iter(jule::Ptr<_1e56c3885_RangeIter>&);
inline jule::Str _229cbb9e8_gen_if(jule::Ptr<_1e56c3885_If>);
inline jule::Str _229cbb9e8_gen_conditional(jule::Ptr<_1e56c3885_Conditional>);
inline jule::Str _229cbb9e8_gen_inf_iter(jule::Ptr<_1e56c3885_InfIter>);
inline jule::Str _229cbb9e8_gen_while_iter(jule::Ptr<_1e56c3885_WhileIter>);
inline jule::Str _229cbb9e8_gen_range_iter(jule::Ptr<_1e56c3885_RangeIter>);
inline jule::Str _229cbb9e8_gen_cont(jule::Ptr<_1e56c3885_ContSt>);
inline jule::Str _229cbb9e8_gen_label(jule::Ptr<_1e56c3885_Label>);
inline jule::Str _229cbb9e8_gen_goto(jule::Ptr<_1e56c3885_GotoSt>);
inline jule::Str _229cbb9e8_gen_postfix(jule::Ptr<_1e56c3885_Postfix>);
inline jule::Str _229cbb9e8_gen_div_by_zero_assign(jule::Ptr<_1e56c3885_Assign>);
inline jule::Str _229cbb9e8_gen_assign(jule::Ptr<_1e56c3885_Assign>);
inline jule::Str _229cbb9e8_gen_multi_assign(jule::Ptr<_1e56c3885_MultiAssign>);
inline jule::Str _229cbb9e8_get_case_match_expr(jule::Ptr<_1e56c3885_Match>&);
inline jule::Str _229cbb9e8_gen_case(jule::Ptr<_1e56c3885_Match>,jule::Ptr<_1e56c3885_Case>);
inline jule::Str _229cbb9e8_gen_match(jule::Ptr<_1e56c3885_Match>);
inline jule::Str _229cbb9e8_gen_fall_st(jule::Ptr<_1e56c3885_FallSt>);
inline jule::Str _229cbb9e8_gen_break_st(jule::Ptr<_1e56c3885_BreakSt>);
inline jule::Str _229cbb9e8_gen_ret_vars(jule::Ptr<_1e56c3885_RetSt>);
inline jule::Str _229cbb9e8_gen_ret_expr_tuple(jule::Ptr<_1e56c3885_RetSt>);
inline jule::Str _229cbb9e8_gen_ret_expr(jule::Ptr<_1e56c3885_RetSt>);
inline jule::Str _229cbb9e8_gen_ret_st(jule::Ptr<_1e56c3885_RetSt>);
inline jule::Str _229cbb9e8_gen_data_expr(jule::Ptr<_229d70d33_Data>);
inline jule::Str _229cbb9e8_gen_scope_var(jule::Ptr<_1e58b0654_Var>);
inline jule::Str _229cbb9e8_gen_st(jule::Any);
inline jule::Str _229cbb9e8_gen_scope(jule::Ptr<_1e56c3885_Scope>);
inline jule::Str _229cbb9e8_gen_fn_scope(jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Str _229cbb9e8_gen_method_scope(jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Str _229da5351_concat_all_parts(jule::Slice<_228d7aadb_Token>);
inline jule::Str _229da5351_decompose_common_esq(jule::U8);
inline jule::Str _229da5351_sbtoa(jule::U8);
inline jule::Str _229da5351_get_cstr_model(jule::Slice<jule::U8>);
inline jule::Str _229da5351_get_str_model(jule::Ptr<_1e856e8a4_Const>&);
inline jule::Str _229da5351_get_bool_model(jule::Ptr<_1e856e8a4_Const>&);
inline jule::Str _229da5351_get_nil_model(void);
inline jule::Str _229da5351_gen_float_special_cases(jule::F64&);
inline jule::Str _229da5351_ftoa(jule::F64,jule::Int);
inline jule::Str _229da5351_get_f32_model(jule::Ptr<_1e856e8a4_Const>&);
inline jule::Str _229da5351_get_f64_model(jule::Ptr<_1e856e8a4_Const>&);
inline jule::Str _229da5351_get_float_model(jule::Ptr<_229d70d33_Data>&);
inline jule::Str _229da5351_i64toa(jule::I64);
inline jule::Str _229da5351_get_i64_model(jule::Ptr<_1e856e8a4_Const>&);
inline jule::Str _229da5351_u64toa(jule::U64);
inline jule::Str _229da5351_get_u64_model(jule::Ptr<_1e856e8a4_Const>);
inline jule::Str _229da5351_gen_const_expr(jule::Ptr<_229d70d33_Data>);
inline jule::Str _229da5351_gen_const_expr_model(jule::Ptr<_1e856e8a4_Const>);
inline jule::Str _229da5351_gen_div_by_zero_binop_expr_model(_228d7aadb_Token&,jule::Any&,jule::Any&);
inline jule::Str _229da5351_gen_binop_expr_model(jule::Ptr<_1e5870218_BinopExprModel>);
inline jule::Str _229da5351_gen_var_expr_model(jule::Ptr<_1e58b0654_Var>);
inline jule::Str _229da5351_gen_struct_expr_model(jule::Ptr<_228e0d025_Struct>);
inline jule::Str _229da5351_gen_struct_ins_expr_model(jule::Ptr<_228e0d025_StructIns>);
inline jule::Str _229da5351_gen_unary_expr_model(jule::Ptr<_1e5870218_UnaryExprModel>);
inline jule::Str _229da5351_gen_cpp_struct_lit_expr_model(jule::Ptr<_1e5870218_StructLitExprModel>);
inline jule::Str _229da5351_gen_struct_lit_expr_model(jule::Ptr<_1e5870218_StructLitExprModel>);
inline jule::Str _229da5351_gen_alloc_struct_lit_expr_model(jule::Ptr<_1e5870218_AllocStructLitExprModel>);
inline jule::Str _229da5351_gen_casting_expr_model(jule::Ptr<_1e5870218_CastingExprModel>);
inline jule::Str _229da5351_gen_arg_expr_models(jule::Slice<jule::Any>);
inline jule::Str _229da5351_gen_expr_model_for_call(jule::Any);
inline jule::Str _229da5351_gen_loc_info(_228d7aadb_Token&);
inline jule::Str _229da5351_gen_pure_fn_call_expr_model(jule::Ptr<_1e5870218_FnCallExprModel>&);
inline jule::Bool _229da5351_is_forwarded(jule::Ptr<_1e56c3885_Scope>&);
inline jule::Str _229da5351_gen_fn_call_expr_model(jule::Ptr<_1e5870218_FnCallExprModel>);
inline jule::Str _229da5351_gen_slice_expr_model(jule::Ptr<_1e5870218_SliceExprModel>);
inline jule::Str _229da5351_gen_indexing_expr_model(jule::Ptr<_1e5870218_IndexingExprModel>);
inline jule::Str _229da5351_gen_anon_fn_expr_model(jule::Ptr<_1e5870218_AnonFnExprModel>);
inline jule::Str _229da5351_gen_map_expr_model(jule::Ptr<_1e5870218_MapExprModel>);
inline jule::Str _229da5351_gen_slicing_expr_model(jule::Ptr<_1e5870218_SlicingExprModel>);
inline jule::Str _229da5351_gen_trait_sub_ident_expr_model(jule::Ptr<_1e5870218_TraitSubIdentExprModel>);
inline jule::Str _229da5351_gen_struct_sub_ident_expr_model(jule::Ptr<_1e5870218_StructSubIdentExprModel>);
inline jule::Str _229da5351_gen_common_ident_expr_model(jule::Ptr<_1e5870218_CommonIdentExprModel>);
inline jule::Str _229da5351_gen_common_sub_ident_expr_model(jule::Ptr<_1e5870218_CommonSubIdentExprModel>);
inline jule::Str _229da5351_gen_array_expr_model(jule::Ptr<_1e5870218_ArrayExprModel>);
inline jule::Str _229da5351_gen_fn_ins_expr_model_common(jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Str _229da5351_gen_fn_ins_expr_model(jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Str _229da5351_gen_tuple_expr_model(jule::Ptr<_1e5870218_TupleExprModel>);
inline jule::Str _229da5351_gen_builtin_new_call_expr_model(jule::Ptr<_1e5870218_BuiltinNewCallExprModel>);
inline jule::Str _229da5351_gen_builtin_out_call_expr_model(jule::Ptr<_1e5870218_BuiltinOutCallExprModel>);
inline jule::Str _229da5351_gen_builtin_outln_call_expr_model(jule::Ptr<_1e5870218_BuiltinOutlnCallExprModel>);
inline jule::Str _229da5351_gen_builtin_panic_call_expr_model(jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>);
inline jule::Str _229da5351_gen_builtin_assert_call_expr_model(jule::Ptr<_1e5870218_BuiltinAssertCallExprModel>);
inline jule::Str _229da5351_gen_builtin_error_call_expr_model(jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>);
inline jule::Str _229da5351_gen_builtin_make_call_expr_model(jule::Ptr<_1e5870218_BuiltinMakeCallExprModel>);
inline jule::Str _229da5351_gen_builtin_append_call_expr_model_assign_opt(jule::Bool,jule::Str&,jule::Ptr<_229d681e3_TypeKind>&,jule::Ptr<_1e5870218_SliceExprModel>&,jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>&);
inline std::tuple<jule::Str,jule::Bool> _229da5351_gen_builtin_append_call_expr_model_assign(jule::Any,jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>);
inline jule::Str _229da5351_gen_builtin_append_call_expr_model(jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>);
inline jule::Str _229da5351_gen_builtin_clone_call_expr_model(jule::Ptr<_1e5870218_BuiltinCloneCallExprModel>);
inline jule::Str _229da5351_gen_sizeof_expr_model(jule::Ptr<_1e5870218_SizeofExprModel>);
inline jule::Str _229da5351_gen_alignof_expr_model(jule::Ptr<_1e5870218_AlignofExprModel>);
inline jule::Str _229da5351_gen_rune_expr_model(jule::Ptr<_1e5870218_RuneExprModel>);
inline jule::Str _229da5351_gen_struct_static_ident_expr_model(jule::Ptr<_1e5870218_StructStaticIdentExprModel>);
inline jule::Str _229da5351_gen_integrated_to_str_expr_model(jule::Ptr<_1e5870218_IntegratedToStrExprModel>);
inline jule::Str _229da5351_gen_ternary_expr_model(jule::Ptr<_1e5870218_TernaryExprModel>);
inline jule::Str _229da5351_gen_backend_emit_expr_model(jule::Ptr<_1e5870218_BackendEmitExprModel>);
inline jule::Str _229da5351_gen_free_expr_model(jule::Ptr<_1e5870218_FreeExprModel>);
inline jule::Str _229da5351_gen_expr_model(jule::Any);
inline jule::Str _229da5351_gen_expr(jule::Any);
inline jule::Str _229da5351_gen_val(jule::Ptr<_229d70d33_Value>);
inline jule::Str _229da5351_get_init_expr(jule::Ptr<_229d681e3_TypeKind>);
inline jule::Str _1e88e4520_get_derive_fn_decl_clone(jule::Ptr<_228e0d025_Struct>&);
inline jule::Str _1e88e4520_get_derive_fn_def_clone(jule::Ptr<_228e0d025_Struct>&);
inline jule::Str _1e88e3e7b_as_ident(jule::Str);
inline jule::Str _1e88e3e7b_as_jt(jule::Str);
inline jule::Str _1e88e3e7b_get_addr_as_ident(jule::Uintptr);
inline jule::Str _1e88e3e7b_as_out_ident(jule::Str,jule::Uintptr);
inline jule::Str _1e88e3e7b_as_local_ident(jule::Int,jule::Int,jule::Str);
inline jule::Str _1e88e3e7b_fn_out_ident(jule::Ptr<_229b6ebcb_Fn>&);
inline jule::Str _1e88e3e7b_fn_ins_out_ident(jule::Ptr<_229b6ebcb_FnIns>&);
inline jule::Str _1e88e3e7b_trait_out_ident(jule::Ptr<_229b5076c_Trait>);
inline jule::Str _1e88e3e7b_param_out_ident(jule::Ptr<_229b6ebcb_Param>&);
inline jule::Str _1e88e3e7b_struct_out_ident(jule::Ptr<_228e0d025_Struct>&);
inline jule::Str _1e88e3e7b_struct_ins_out_ident(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e88e3e7b_field_out_ident(jule::Ptr<_228e0d025_Field>&);
inline jule::Str _1e88e3e7b_var_out_ident(jule::Ptr<_1e58b0654_Var>);
inline jule::Str _1e88e3e7b_iter_begin_label_ident(jule::Uintptr);
inline jule::Str _1e88e3e7b_iter_end_label_ident(jule::Uintptr);
inline jule::Str _1e88e3e7b_iter_next_label_ident(jule::Uintptr);
inline jule::Str _1e88e3e7b_label_ident(jule::Str);
inline jule::Str _1e88e3e7b_match_end_label_ident(jule::Uintptr);
inline jule::Str _1e88e3e7b_case_begin_label_ident(jule::Uintptr);
inline jule::Ptr<_228d31971_Directive> _1e891c504_find_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>&,jule::Str);
inline jule::Bool _1e891c504_has_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>&,jule::Str);
inline jule::Str _1e891c504_gen_prim_kind(jule::Ptr<_229d681e3_Prim>);
inline jule::Str _1e891c504_gen_tuple_kind(jule::Ptr<_229d681e3_Tuple>);
inline jule::Str _1e891c504_as_sptr_kind(jule::Str);
inline jule::Str _1e891c504_gen_sptr_kind(jule::Ptr<_229d681e3_Sptr>);
inline jule::Str _1e891c504_gen_ptr_kind(jule::Ptr<_229d681e3_Ptr>);
inline jule::Str _1e891c504_gen_enum_kind(jule::Ptr<_1e56be485_Enum>);
inline jule::Str _1e891c504_as_slice_kind(jule::Ptr<_229d681e3_TypeKind>);
inline jule::Str _1e891c504_gen_slice_kind(jule::Ptr<_229d681e3_Slc>);
inline jule::Str _1e891c504_gen_map_kind(jule::Ptr<_229d681e3_Map>);
inline jule::Str _1e891c504_gen_trait_kind_from_ident(jule::Str);
inline jule::Str _1e891c504_gen_trait_kind(jule::Ptr<_229b5076c_Trait>);
inline jule::Str _1e891c504_gen_struct_kind(jule::Ptr<_228e0d025_Struct>);
inline jule::Str _1e891c504_gen_struct_kind_ins(jule::Ptr<_228e0d025_StructIns>);
inline jule::Str _1e891c504_gen_array_kind(jule::Ptr<_229d681e3_Arr>);
inline jule::Str _1e891c504_gen_fn_anon_decl(jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Str _1e891c504_gen_fn_kind(jule::Ptr<_229b6ebcb_FnIns>);
inline jule::Str _1e891c504_gen_type_kind(jule::Ptr<_229d681e3_TypeKind>);
inline void _1e8949c3a_add_indent(void);
inline void _1e8949c3a_done_indent(void);
inline jule::Str _1e8949c3a_indent(void);
inline jule::Bool _1e8949c3a_is_cpp_header_file(jule::Str);
inline jule::Str _1e8949c3a_gen_links(jule::Ptr<_228c91a35_IR>&);
inline jule::Str _1e8949c3a_gen_fn_result(jule::Ptr<_229b6ebcb_Fn>&);
inline jule::Str _1e8949c3a_gen_fn_ins_result(jule::Ptr<_229b6ebcb_FnIns>&);
inline jule::Str _1e8949c3a_gen_param_prototype(jule::Ptr<_229b6ebcb_Param>&);
inline jule::Str _1e8949c3a_gen_param_ins(jule::Ptr<_229b6ebcb_ParamIns>&);
inline jule::Str _1e8949c3a_gen_param_ins_prototype(jule::Ptr<_229b6ebcb_ParamIns>&);
inline jule::Str _1e8949c3a_gen_param(jule::Ptr<_229b6ebcb_Param>&);
inline jule::Str _1e8949c3a_gen_params(jule::Slice<jule::Ptr<_229b6ebcb_Param>>&);
inline jule::Str _1e8949c3a_gen_params_ins(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>&);
inline jule::Str _1e8949c3a_gen_params_prototypes(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>&);
inline jule::Str _1e8949c3a_gen_trait(jule::Ptr<_229b5076c_Trait>&);
inline jule::Str _1e8949c3a_gen_traits_tbl(jule::Ptr<_229d56533_SymbolTable>&);
inline jule::Str _1e8949c3a_gen_traits_pkg(jule::Ptr<_1e53308ee_Package>&);
inline jule::Str _1e8949c3a_gen_traits(jule::Ptr<_228c91a35_IR>&);
inline jule::Str _1e8949c3a_gen_trait_prototype(jule::Ptr<_229b5076c_Trait>&);
inline jule::Str _1e8949c3a_gen_trait_prototypes(jule::Ptr<_1e53308ee_Package>&);
inline jule::Str _1e8949c3a_gen_struct_plain_prototype(jule::Ptr<_228e0d025_Struct>&);
inline jule::Str _1e8949c3a_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_228e0d025_Struct>>&);
inline jule::Str _1e8949c3a_gen_struct_traits(jule::Ptr<_228e0d025_Struct>&);
inline jule::Str _1e8949c3a_gen_field_decl(jule::Ptr<_228e0d025_FieldIns>&);
inline jule::Str _1e8949c3a_gen_struct_self_field_type_kind(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_self_field(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_self_field_init_st(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_constructor(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_destructor(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_operators(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_derive_defs_prototypes(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_ins_prototype(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_prototype(jule::Ptr<_228e0d025_Struct>&);
inline jule::Str _1e8949c3a_gen_struct_prototypes(jule::Slice<jule::Ptr<_228e0d025_Struct>>&);
inline jule::Str _1e8949c3a_gen_fn_decl_head(jule::Ptr<_229b6ebcb_FnIns>&,jule::Bool);
inline jule::Str _1e8949c3a_gen_fn_prototype(jule::Ptr<_229b6ebcb_Fn>&,jule::Bool);
inline jule::Str _1e8949c3a_gen_fn_prototypes(jule::Ptr<_1e53308ee_Package>&);
inline jule::Str _1e8949c3a_gen_prototypes(jule::Ptr<_228c91a35_IR>&);
inline jule::Str _1e8949c3a_gen_var_init_expr(jule::Ptr<_1e58b0654_Var>&,jule::Str);
inline jule::Str _1e8949c3a_gen_var(jule::Ptr<_1e58b0654_Var>);
inline jule::Str _1e8949c3a_gen_pkg_globals(jule::Ptr<_1e53308ee_Package>&,jule::Str&);
inline jule::Str _1e8949c3a_gen_globals(jule::Ptr<_228c91a35_IR>,jule::Str&);
inline jule::Str _1e8949c3a_gen_fn(jule::Ptr<_229b6ebcb_Fn>&);
inline jule::Str _1e8949c3a_gen_pkg_fns(jule::Ptr<_1e53308ee_Package>&);
inline jule::Str _1e8949c3a_gen_struct_method_defs(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_ostream(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_derive_defs(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct_ins(jule::Ptr<_228e0d025_StructIns>&);
inline jule::Str _1e8949c3a_gen_struct(jule::Ptr<_228e0d025_Struct>&);
inline jule::Str _1e8949c3a_gen_structs(jule::Slice<jule::Ptr<_228e0d025_Struct>>&);
inline jule::Str _1e8949c3a_gen_fns(jule::Ptr<_228c91a35_IR>&);
inline void _1e8949c3a_push_init(jule::Ptr<_1e53308ee_Package>&,jule::Str&);
inline jule::Str _1e8949c3a_gen_init_caller(jule::Ptr<_228c91a35_IR>&,jule::Str&);
inline jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_find_testing_package(jule::Ptr<_228c91a35_IR>&);
inline void _1e8949c3a_append_test(jule::Str&,jule::Ptr<_229b6ebcb_FnIns>);
inline void _1e8949c3a_append_package_tests(jule::Str&,jule::Ptr<_1e53308ee_Package>&);
inline void _1e8949c3a_append_test_point(jule::Str&,jule::Ptr<_228c91a35_IR>&);
inline void _1e8949c3a_append_standard(jule::Str&,jule::Str,jule::Str);
inline jule::Str _1e8949c3a_gen(jule::Ptr<_228c91a35_IR>&);
inline jule::Bool _229cbb663_is_std_package(jule::Str,jule::Str);
inline jule::Bool _229cbb663_is_constant_valid_conditional_case(jule::Ptr<_1e56c3885_If>&);
inline jule::Bool _229cbb663_is_constant_valid_match_case(jule::Ptr<_1e56c3885_Case>&);
inline jule::Bool _229cbb663_is_unreachable_conditional_case(jule::Ptr<_1e56c3885_If>&);
inline jule::Bool _229cbb663_is_unreachable_match_case(jule::Ptr<_1e56c3885_Case>&);
inline jule::Str _227532d99_str_repeat(jule::Str,jule::Int);
inline void _227532d99_print_error_message(jule::Str);
inline void _227532d99_help(jule::Slice<jule::Str>&);
inline void _227532d99_version(jule::Slice<jule::Str>&);
inline void _227532d99_tool_distos(void);
inline void _227532d99_tool_distarch(void);
inline void _227532d99_tool(jule::Slice<jule::Str>&);
inline void _227532d99_julenv(jule::Slice<jule::Str>&);
inline void _227532d99_mod(jule::Slice<jule::Str>&);
inline jule::Bool _227532d99_process_command(jule::Slice<jule::Str>&);
inline void _227532d99_exit_err(jule::Str);
inline void _227532d99_show_info(void);
void entry_point(void);
inline void _227533eee___init_common(void);
inline void _22757047a_init(void);
inline void _227571404_write_output(jule::Str,jule::Str);
inline void _227571404_clear_objects(void);
inline void _227571404_compile_ir(jule::Str,jule::Str);
inline void _227571404_do_spell(jule::Str,jule::Str,jule::Str);
inline jule::Bool _227571404_is_cpp_source_file(jule::Str);
inline void _227571404_push_comp_cmd_clang(jule::Str&);
inline void _227571404_push_comp_cmd_gcc(jule::Str&);
inline std::tuple<jule::Str,jule::Str> _227571404_gen_compile_cmd(jule::Str,jule::Ptr<_228c91a35_IR>&);
inline jule::Str _227571404_get_compile_path(void);
inline void _227571404_apply_target_independent_optimizations(jule::Ptr<_228c91a35_IR>&);
inline void _227571404_check_compiler_flag(void);
inline void _227571404_check_target_arch(jule::Str);
inline void _227571404_check_target_os(jule::Str);
inline void _227571404_check_target_flag(jule::Str&);
inline void _227571404_check_opt_flag(jule::Str&);
inline void _227571404_check_cpp_std_flag(void);
inline jule::Slice<jule::Str> _227571404_check_flags(jule::Slice<jule::Str>&);
inline void _227571404_setup_sema_flags(jule::Int&);
inline jule::Ptr<_228c91a35_IR> _227571404_build_ir(jule::Slice<jule::Str>&);
inline void _227571404_compile_command(jule::Slice<jule::Str>&);


jule::Str _2275b25dd_OS;
jule::Str _2275b25dd_ARCH;
jule::Bool _227532edc_PRODUCTION;
jule::Bool _227532edc_OPT_COPY;
jule::Bool _227532edc_OPT_DEADCODE;
jule::Bool _227532edc_OPT_APPEND;
jule::Bool _227532edc_OPT_MATH;
jule::Bool _227532edc_OPT_ACCESS;
jule::Bool _227532edc_OPT_INLINE;
jule::Bool _227532edc_OPT_PTR;
jule::Bool _227532edc_OPT_COND;
jule::Str _2275c8280_COMPILER;
jule::Str _2275c8280_COMPILER_PATH;
jule::Str _2275c8280_CPP_STD;
jule::Bool _2275c8280_SHADOWING;
jule::Bool _2275c8280_TRANSPILATION;
jule::Bool _2275c8280_TEST;
jule::Bool _2275c8280_RC;
jule::Array<jule::Str,4> _2275ec68e_CPP_HEADER_EXTS;
jule::Array<jule::Str,3> _2275ec68e_CPP_EXTS;
jule::Array<jule::Str,1> _2275ec68e_OBJECTIVE_CPP_EXTS;
jule::Array<jule::Str,3> _227785d55_DISTOS;
jule::Array<jule::Str,3> _227785d55_DISTARCH;
jule::Str _22779d455_PATH_STDLIB;
jule::Str _22779d455_PATH_EXEC;
jule::Str _22779d455_PATH_WD;
jule::Str _22779d455_PATH_API;
jule::Array<jule::U8,32> _228bb20b5_DE_BRUIJN32_TAB;
jule::Array<jule::U8,64> _228bb20b5_DE_BRUIJN64_TAB;
_22777cad8_FloatInfo _22777cad8_F32_INFO;
_22777cad8_FloatInfo _22777cad8_F64_INFO;
jule::Array<jule::Array<jule::U64,2>,696> _22778ec3d_DETAILED_POWS_OF_TEN;
jule::Slice<jule::Int> _2284c0eac_POWTAB;
jule::Slice<jule::F64> _2284c0eac_F64_POW10;
jule::Slice<jule::F32> _2284c0eac_F32_POW10;
jule::Array<jule::U64,20> _2285d3a92_U64_POW10;
jule::Slice<_2286660ca_LeftCheat> _2286660ca_LEFTCHEATS;
jule::Ptr<_228e939c3_RangeTable> _228e8044e__L;
jule::Ptr<_228e939c3_RangeTable> _228e8044e_LETTER;
jule::Array<jule::U8,256> _228e8044e__PROPERTIES;
jule::Array<jule::U8,256> _228e84d38_FIRST;
jule::Array<_228e84d38_accept_range,16> _228e84d38_ACCEPT_RANGES;
jule::Array<jule::I32,5> _228d7aadb_SPACES;
jule::Array<jule::Str,6> _228d7aadb_UNARY_OPS;
jule::Array<jule::Str,12> _228d7aadb_BIN_OPS;
jule::Array<jule::Str,2> _228d7aadb_POSTFIX_OPS;
jule::Array<jule::Str,11> _228d7aadb_ASSING_OPS;
jule::Array<_228d36080_KindPair,47> _228d36080_KEYWORDS;
jule::Array<_228d36080_KindPair,39> _228d36080_BASIC_OPS;
jule::Ptr<_229d681e3_TypeAlias> _1e614d809_BUILTIN_TYPE_ALIAS_BYTE;
jule::Ptr<_229d681e3_TypeAlias> _1e614d809_BUILTIN_TYPE_ALIAS_RUNE;
jule::Ptr<_229b5076c_Trait> _1e614d809_BUILTIN_TRAIT_DISPOSE;
jule::Slice<jule::Str> _228cd1217_VARS;
jule::Slice<jule::Any> _22777e238_deads;
jule::Slice<jule::Any> _22777e238_checking;
jule::Any _22777e238_current;
jule::Any _22777e238_main_current;
jule::Array<jule::U8,12> _1e8a7c6a8_MDAYS;
jule::Slice<jule::U8> _1e8949c3a_INDENT;
jule::Array<jule::Array<jule::Str,2>,5> _227532d99_HELP_MAP;
jule::Str _227571404_OUT_DIR;
jule::Str _227571404_OUT_NAME;
jule::Str _227571404_OUT;

inline void _227532e21_AnsiEscape::_static_method_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void _227532e21_AnsiEscape::_static_method_print(jule::Str _2021_escape,jule::Str _2034_text) {
	jule::out(_2021_escape);
	jule::out(_2034_text);
	_227532e21_AnsiEscape::_static_method_reset();
}







std::ostream &operator<<(std::ostream &_Stream, const _227532e21_AnsiEscape &_Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void _227532e21_Logger::_static_method_log_flat(_2276bcb9e_Log& _3125_l) {
	jule::outln(_3125_l._field_text);
}



inline void _227532e21_Logger::_static_method_log_error(_2276bcb9e_Log& _3426_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_3426_l._field_text);
	_227532e21_AnsiEscape::_static_method_reset();
	if (_3426_l._field_path.len() != 0LL) {
		jule::out(jule::Str("\n  --> ", 7));
		jule::out(_3426_l._field_path);
	}
	if ((_3426_l._field_row != 0LL) && (_3426_l._field_column != 0LL)) {
		jule::out(jule::Str(":", 1));
		jule::out(_22866a079_itoa(_3426_l._field_row));
		jule::out(jule::Str(":", 1));
		jule::out(_22866a079_itoa(_3426_l._field_column));
	}
	if (_3426_l._field_line.len() != 0LL) {
		jule::Str _5121_line = _3426_l._field_line.ltrim(jule::Str("\r\n\v\b ", 5));
		jule::I64 _5221_offset = (_3426_l._field_line.len() - _5121_line.len()) + 1LL;
		jule::I64 _5321_old_len = _5121_line.len();
		_5121_line=_5121_line.ltrim(jule::Str("\t", 1));
		if (_5321_old_len != _5121_line.len()) {
			_5221_offset+=static_cast<jule::I64>((_5321_old_len - _5121_line.len()) * 8LL);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _5917_row = _22866a079_itoa(_3426_l._field_row);
		jule::out(_5917_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_5121_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_227532d99_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5917_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_227532d99_str_repeat(jule::Str(" ", 1),static_cast<jule::Int>(_3426_l._field_column - _5221_offset)));
		jule::out(jule::Str("^", 1));
		if (_3426_l._field_suggestion.len() != 0LL) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_227532d99_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_5917_row.len())));
			jule::out(jule::Str(" | ", 3));
			_227532e21_AnsiEscape::_static_method_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_3426_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void _227532e21_Logger::_static_method_log(_2276bcb9e_Log& _8020_l) {
	{
		auto &_match_expr{ _8020_l._field_kind };
		
		if (_match_expr == 0LLU) {
			_case_begin_5080688032:;
			{
				_227532e21_Logger::_static_method_log_flat(_8020_l);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_5080688272:;
			{
				_227532e21_Logger::_static_method_log_error(_8020_l);
			}
		}
		_match_end_5080687888:;
	}
}



inline void _227532e21_Logger::_static_method_print_logs(jule::Slice<_2276bcb9e_Log>& _8827_logs) {
	{
		auto &expr = _8827_logs;
		auto it = expr.begin();
		_iter_begin_5080692128:;
		if (it != expr.end()) {
			_2276bcb9e_Log &_227532e21_l = *it;
			{
				_227532e21_Logger::_static_method_log(_227532e21_l);
			}
			_iter_next_5080692128:;
			++it;
			goto _iter_begin_5080692128;
		}
		_iter_end_5080692128:;
	}
	jule::out(jule::Str("=== ", 4));
	jule::out(_22866a079_itoa(static_cast<jule::I64>(_8827_logs.len())));
	jule::outln(jule::Str(" error generated ===", 20));
}







std::ostream &operator<<(std::ostream &_Stream, const _227532e21_Logger &_Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _227711594_LazyBuff::_method_index(jule::Int _5324_i) {
	if ((*this)._field_buff != nullptr) {
		return (*this)._field_buff[_5324_i];
	}
	return (*this)._field_path[_5324_i];
}



inline void _227711594_LazyBuff::_method_append(jule::U8 _6025_c) {
	if ((*this)._field_buff == nullptr) {
		if (((*this)._field_w < (*this)._field_path.len()) && ((*this)._field_path[(*this)._field_w] == _6025_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::I64>((*this)._field_path.len()));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,(*this)._field_w)));
	}
	(*this)._field_buff[(*this)._field_w]=_6025_c;
	((*this)._field_w)++;
}



inline jule::Str _227711594_LazyBuff::_method_string(void) {
	if ((*this)._field_buff == nullptr) {
		return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len + (*this)._field_w);
	}
	return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,(*this)._field_w));
}







std::ostream &operator<<(std::ostream &_Stream, const _227711594_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _22762b646_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Slice<jule::Ptr<_22762b646_DirEntry>>> _22762b646_Directory::_static_method_read(jule::Str _1524_path) {
	jule::Slice<jule::Ptr<_22762b646_DirEntry>> _1538_dirents = jule::Slice<jule::Ptr<_22762b646_DirEntry>>();
	DIR* _1617_dir = _2275de50a_opendir((&(_1524_path[0LL])));
	if (_1617_dir == nullptr) {
		return jule::Exceptional<jule::Slice<jule::Ptr<_22762b646_DirEntry>>>(_22756cb1a_get_last_fs_error());
	}
	for (;;) {
		{
			struct dirent* _2117_dirent = _2275de50a_readdir(_1617_dir);
			if (_2117_dirent == nullptr) {
				goto _iter_end_5055040032;
			}
			jule::Str _2517_name = _22765b797_byte_ptr_to_str(((jule::U8*)((*(_2117_dirent)).d_name)));
			jule::Ptr<_2276a6da8_Status> _2621_stat = ({
				auto except = _2276a6da8_Status::_static_method_of(_227711594_join(jule::Slice<jule::Str>({_1524_path,_2517_name})));
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::Ptr<_22762b646_DirEntry>>>(except.error);
					return jule::Exceptional<jule::Slice<jule::Ptr<_22762b646_DirEntry>>>(except.error);
				} jule::Ptr<_2276a6da8_Status>();});
			});
			_1538_dirents.push(jule::new_struct<_22762b646_DirEntry>(new( std::nothrow ) _22762b646_DirEntry(_2517_name,_2621_stat)));
		}
	_iter_next_5055040032:;
	}
	_iter_end_5055040032:;
	_2275de50a_closedir(_1617_dir);
	return jule::Exceptional<jule::Slice<jule::Ptr<_22762b646_DirEntry>>>(jule::Any(), _1538_dirents);
}



inline jule::VoidExceptional _22762b646_Directory::_static_method_create(jule::Str _3926_path) {
	if (_2275de50a_mkdir((&(_3926_path[0LL])),448LL) != 0LL) {
		return jule::VoidExceptional(_22756cb1a_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _22762b646_Directory::_static_method_remove(jule::Str _5126_path) {
	if (_2275de50a_rmdir((&(_5126_path[0LL]))) != 0LL) {
		return jule::VoidExceptional(_22756cb1a_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _22762b646_Directory &_Src) {
	_Stream << "Directory{";
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Ptr<_2276a6c54_File>> _2276a6c54_File::_static_method_open(jule::Str _1824_path,jule::Int _1835_flag,jule::Int _1848_mode) {
	jule::Int _1913_handle = _2275de50a_open((&(_1824_path[0LL])),static_cast<jule::Int>(_1835_flag),_1848_mode);
	if (_1913_handle == -1LL) {
		return jule::Exceptional<jule::Ptr<_2276a6c54_File>>(_22756cb1a_get_last_fs_error());
	}
	return jule::Exceptional<jule::Ptr<_2276a6c54_File>>(jule::Any(),_2276a6c54_File::_static_method_new(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_1913_handle))));
}



inline jule::VoidExceptional _2276a6c54_File::_static_method_remove(jule::Str _3026_path) {
	if (_2275de50a_unlink((&(_3026_path[0LL]))) != 0LL) {
		return jule::VoidExceptional(_22756cb1a_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _2276a6c54_File::_method_write(jule::Slice<jule::U8> _4428_buff) {
	jule::Int _4445_n = jule::Int();
	if (_4428_buff.len() == 0LL) {
		_4445_n = 0LL;
		return jule::Exceptional<jule::Int>(jule::Any(),_4445_n);
	}
	_4445_n=static_cast<jule::Int>(static_cast<jule::Int>(_22760ae1c_write(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),(&(_4428_buff[0LL])),static_cast<jule::Uint>(static_cast<jule::Uint>(_4428_buff.len())))));
	if (_4445_n == -1LL) {
		return jule::Exceptional<jule::Int>(_22756cb1a_get_last_fs_error());
	}
	return jule::Exceptional<jule::Int>(jule::Any(),_4445_n);
}



inline jule::Exceptional<jule::Int> _2276a6c54_File::_method_read(jule::Slice<jule::U8> _6531_buff) {
	jule::Int _6548_n = jule::Int();
	if (_6531_buff.len() == 0LL) {
		_6548_n = 0LL;
		return jule::Exceptional<jule::Int>(jule::Any(),_6548_n);
	}
	_6548_n=static_cast<jule::Int>(static_cast<jule::Int>(_22760ae1c_read(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),(&(_6531_buff[0LL])),static_cast<jule::Uint>(static_cast<jule::Uint>(_6531_buff.len())))));
	if (_6548_n == -1LL) {
		return jule::Exceptional<jule::Int>(_22756cb1a_get_last_fs_error());
	}
	return jule::Exceptional<jule::Int>(jule::Any(),_6548_n);
}



inline jule::Ptr<_2276a6c54_File> _2276a6c54_File::_static_method_new(jule::Uintptr _4523_handle) {
	return jule::new_struct<_2276a6c54_File>(new( std::nothrow ) _2276a6c54_File(_4523_handle));
}



inline jule::Exceptional<jule::Ptr<_2276a6c54_File>> _2276a6c54_File::_static_method_create(jule::Str _5526_path) {
	return jule::Exceptional<jule::Ptr<_2276a6c54_File>>(jule::Any(),({
		auto except = _2276a6c54_File::_static_method_open(_5526_path,1538LL,438LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Ptr<_2276a6c54_File>>(except.error);
			return jule::Exceptional<jule::Ptr<_2276a6c54_File>>(except.error);
		} jule::Ptr<_2276a6c54_File>();});
	}));
}



inline jule::Exceptional<jule::Slice<jule::U8>> _2276a6c54_File::_static_method_read(jule::Str _6724_path) {
	jule::Ptr<_2276a6da8_Status> _6813_s = ({
		auto except = _2276a6da8_Status::_static_method_of(_6724_path);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_2276a6da8_Status>();});
	});
	if ((!((*(_6813_s))._method_is_reg()))) {
		return jule::Exceptional<jule::Slice<jule::U8>>(14LLU);
	}
	if ((*(_6813_s))._field_size == 0LL) {
		return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),jule::Slice<jule::U8>::alloc(0LL));
	}
	jule::Ptr<_2276a6c54_File> _7817_f = ({
		auto except = _2276a6c54_File::_static_method_open(_6724_path,0LL,0LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_2276a6c54_File>();});
	});
	__JULE_DEFER({
		({
			auto except = (*(_7817_f))._method_close();
			if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/fs/file.jule:79:17"));
		});
	});
	jule::Slice<jule::U8> _8117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::Int>((*(_6813_s))._field_size));
	jule::Int _8213_n = ({
		auto except = (*(_7817_f))._method_read(_8117_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Int();});
	});
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_8117_buff.slice(0LL,_8213_n));
}



inline jule::VoidExceptional _2276a6c54_File::_static_method_write(jule::Str _9125_path,jule::Slice<jule::U8> _9136_data,jule::Int _9150_perm) {
	jule::Ptr<_2276a6c54_File> _9217_f = ({
		auto except = _2276a6c54_File::_static_method_open(_9125_path,1537LL,_9150_perm);
		(except.ok()) ? (except.result) : ({{
			return jule::VoidExceptional(except.error);
			return jule::VoidExceptional(except.error);
		} jule::Ptr<_2276a6c54_File>();});
	});
	({
		auto except = (*(_9217_f))._method_write(_9136_data);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
	({
		auto except = (*(_9217_f))._method_close();
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I64> _2276a6c54_File::_method_seek(jule::I64 _10527_offset,jule::Int _10540_origin) {
	jule::I64 _10613_pos = _22760ae1c_seek(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),_10527_offset,static_cast<jule::Int>(_10540_origin));
	if (_10613_pos == -1LL) {
		return jule::Exceptional<jule::I64>(_22756cb1a_get_last_fs_error());
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_10613_pos);
}



inline jule::VoidExceptional _2276a6c54_File::_method_close(void) {
	if (_22760ae1c_close(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle))) == -1LL) {
		return jule::VoidExceptional(_22756cb1a_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _2276a6c54_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Ptr<_2276a6da8_Status>> _2276a6da8_Status::_static_method_of(jule::Str _1122_path) {
	struct stat _1217_handle = (struct stat){};
	jule::Int _1313_code = _2275de50a_stat((&(_1122_path[0LL])),(&(_1217_handle)));
	if (_1313_code != -1LL) {
		return jule::Exceptional<jule::Ptr<_2276a6da8_Status>>(jule::Any(),jule::new_struct<_2276a6da8_Status>(new( std::nothrow ) _2276a6da8_Status(static_cast<jule::Uint>(static_cast<jule::Uint>(_1217_handle.st_mode)),static_cast<jule::Uint>(static_cast<jule::Uint>(_1217_handle.st_size)))));
	}
	return jule::Exceptional<jule::Ptr<_2276a6da8_Status>>(_22756cb1a_get_last_fs_error());
}



inline jule::Bool _2276a6da8_Status::_method_is_dir(void) {
	return ((*this)._field_mode & 16384LL) == 16384LL;
}



inline jule::Bool _2276a6da8_Status::_method_is_reg(void) {
	return ((*this)._field_mode & 32768LL) == 32768LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _2276a6da8_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_2277c77c0_Cmd> _2277c77c0_Cmd::_static_method_new(jule::Str _2923_file) {
	return jule::new_struct<_2277c77c0_Cmd>(new( std::nothrow ) _2277c77c0_Cmd(_2923_file,-1LL,jule::Slice<jule::Str>(),jule::Slice<jule::Str>()));
}



inline jule::Int _2277c77c0_Cmd::_method_pid(void) {
	return (*this)._field__pid;
}



inline jule::Str _2277c77c0_Cmd::_method_file(void) {
	return (*this)._field__fle;
}



inline jule::VoidExceptional _2277c77c0_Cmd::_method_spawn(void) {
	if ((*this)._field__pid != -1LL) {
		return jule::VoidExceptional(jule::Str("command already spawned", 23));
	}
	(*this)._field__pid=static_cast<jule::Int>(fork());
	{
		auto &_match_expr{ (*this)._field__pid };
		
		if (_match_expr == -1LL) {
			_case_begin_5055175168:;
			{
				return jule::VoidExceptional(jule::Str("fork failed", 11));
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_5055175264:;
			{
				jule::Int _3117_stat = ((((*this)._field_env == nullptr)) ? (__jule_execvp((*this)._field__fle,(*this)._field_args)) : (static_cast<jule::Int>(__jule_execve((*this)._field__fle,(*this)._field_args,(*this)._field_env))));
				if (_3117_stat == -1LL) {
					return jule::VoidExceptional(_2277c1973_get_last_process_error());
				}
				_2277d2c70_exit(255LL);
			}
		}
		_match_end_5055175088:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _2277c77c0_Cmd::_method_kill(void) {
	if (kill((*this)._field__pid,1LL) != 0LL) {
		return jule::VoidExceptional(jule::Str("kill failed", 11));
	}
	(*this)._field__pid=-1LL; return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _2277c77c0_Cmd::_method_wait(void) {
	if ((*this)._field__pid == -1LL) {
		return jule::Exceptional<jule::Int>(jule::Str("command is not spawned", 22));
	}
	jule::Int _6017_status = 0LL;
	if (waitpid((*this)._field__pid,((signed*)((&(_6017_status)))),0LL) == -1LL) {
		return jule::Exceptional<jule::Int>(_2277c1973_get_last_process_error());
	}
	(*this)._field__pid=-1LL;
	return jule::Exceptional<jule::Int>(jule::Any(),static_cast<jule::Int>(WEXITSTATUS(_6017_status)));
}







std::ostream &operator<<(std::ostream &_Stream, const _2277c77c0_Cmd &_Src) {
	_Stream << "Cmd{";
	_Stream << "_fle:" << _Src._field__fle << ", ";
	_Stream << "_pid:" << _Src._field__pid << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "env:" << _Src._field_env;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2276bcb9e_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _22777cad8_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _22777cad8_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _2286660ca_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _2286660ca_Decimal::_method_set(jule::Str _22922_s) {
	jule::Bool _22932_ok = jule::Bool();
	jule::Int _23017_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23017_i >= _22922_s.len()) {
		return _22932_ok;
	}
	{
		
		if (_22922_s[_23017_i] == '+') {
			_case_begin_5059136976:;
			{
				(_23017_i)++;
			}
		}
		else if (_22922_s[_23017_i] == '-') {
			_case_begin_5059137088:;
			{
				(*this)._field_neg=true;
				(_23017_i)++;
			}
		}
		_match_end_5059136064:;
	}
	jule::Bool _24717_sawdot = false;
	jule::Bool _24817_sawdigits = false;
	for (; _23017_i < _22922_s.len(); (_23017_i)++) {
		{
			{
				
				if (_22922_s[_23017_i] == '.') {
					_case_begin_5059143408:;
					{
						if (_24717_sawdot) {
							return _22932_ok;
						}
						_24717_sawdot=true;
						(*this)._field_dp=(*this)._field_nd;
						goto _iter_next_5059136704;
					}
				}
				else if (('0' <= _22922_s[_23017_i]) && (_22922_s[_23017_i] <= '9')) {
					_case_begin_5059143520:;
					{
						_24817_sawdigits=true;
						if ((_22922_s[_23017_i] == '0') && ((*this)._field_nd == 0LL)) {
							((*this)._field_dp)--;
							goto _iter_next_5059136704;
						}
						if ((*this)._field_nd < 800LL) {
							(*this)._field_d[(*this)._field_nd]=_22922_s[_23017_i];
							((*this)._field_nd)++;
						} else if (_22922_s[_23017_i] != '0') {
							(*this)._field_trunc=true;
						}
						goto _iter_next_5059136704;
					}
				}
				_match_end_5059143184:;
			}
			goto _iter_end_5059136704;
		}
	_iter_next_5059136704:;
	}
	_iter_end_5059136704:;
	if ((!(_24817_sawdigits))) {
		return _22932_ok;
	}
	if ((!(_24717_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23017_i < _22922_s.len()) && (_2277861c9_lower(_22922_s[_23017_i]) == 'e')) {
		(_23017_i)++;
		if (_23017_i >= _22922_s.len()) {
			return _22932_ok;
		}
		jule::Int _29121_esign = 1LL;
		if (_22922_s[_23017_i] == '+') {
			(_23017_i)++;
		} else if (_22922_s[_23017_i] == '-') {
			(_23017_i)++;
			_29121_esign=-1LL;
		}
		if (((_23017_i >= _22922_s.len()) || (_22922_s[_23017_i] < '0')) || (_22922_s[_23017_i] > '9')) {
			return _22932_ok;
		}
		jule::Int _30121_e = 0LL;
		for (; (_23017_i < _22922_s.len()) && (('0' <= _22922_s[_23017_i]) && (_22922_s[_23017_i] <= '9')); (_23017_i)++) {
			{
				if (_30121_e < 10000LL) {
					_30121_e=static_cast<jule::Int>(((_30121_e * 10LL) + static_cast<jule::Int>(_22922_s[_23017_i])) - '0');
				}
			}
		_iter_next_5059158672:;
		}
		_iter_end_5059158672:;
		(*this)._field_dp+=static_cast<jule::Int>(_30121_e * _29121_esign);
	}
	if (_23017_i != _22922_s.len()) {
		return _22932_ok;
	}
	_22932_ok=true;
	return _22932_ok;
}



inline std::tuple<jule::U64,jule::Bool> _2286660ca_Decimal::_method_float_bits(_22777cad8_FloatInfo& _31830_flt) {
	jule::U64 _31848_b = jule::U64();
	jule::Bool _31856_overflow = jule::Bool();
	jule::Int _31917_exp = 0LL;
	jule::U64 _32017_mant = 0LLU;
	if ((*this)._field_nd == 0LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	if ((*this)._field_dp > 310LL) {
		goto _julec_label_overflow;
	}
	if ((*this)._field_dp < -330LL) {
		_32017_mant=0LL;
		_31917_exp=_31830_flt._field_bias;
		goto _julec_label_out;
	}
	_31917_exp=0LL;
	while ((*this)._field_dp > 0LL) {
		{
			jule::Int _34521_n = 0LL;
			if ((*this)._field_dp >= _2284c0eac_POWTAB.len()) {
				_34521_n=27LL;
			} else {
				_34521_n=_2284c0eac_POWTAB[(*this)._field_dp];
			}
			(*this)._method_shift(static_cast<jule::Int>((-(_34521_n))));
			_31917_exp+=_34521_n;
		}
	_iter_next_5059177408:;
	}
	_iter_end_5059177408:;
	while (((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d.__at(0LL) < '5'))) {
		{
			jule::Int _35521_n = 0LL;
			if ((-((*this)._field_dp)) >= _2284c0eac_POWTAB.len()) {
				_35521_n=27LL;
			} else {
				_35521_n=_2284c0eac_POWTAB[(-((*this)._field_dp))];
			}
			(*this)._method_shift(_35521_n);
			_31917_exp-=_35521_n;
		}
	_iter_next_5059180720:;
	}
	_iter_end_5059180720:;
	(_31917_exp)--;
	if (_31917_exp < (_31830_flt._field_bias + 1LL)) {
		jule::Int _37217_n = (_31830_flt._field_bias + 1LL) - _31917_exp;
		(*this)._method_shift(static_cast<jule::Int>((-(_37217_n))));
		_31917_exp+=_37217_n;
	}
	if ((_31917_exp - _31830_flt._field_bias) >= static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::Int>(static_cast<jule::Int>(1LL + _31830_flt._field_mantbits)));
	_32017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_32017_mant == (2LL << _31830_flt._field_mantbits)) {
		_32017_mant>>=1LL;
		(_31917_exp)++;
		if ((_31917_exp - _31830_flt._field_bias) >= static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) {
			goto _julec_label_overflow;
		}
	}
	if ((_32017_mant & (1LL << _31830_flt._field_mantbits)) == 0LL) {
		_31917_exp=_31830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_32017_mant=0LL;
	_31917_exp=static_cast<jule::Int>(static_cast<jule::Int>(((1LL << _31830_flt._field_expbits) - 1LL) + static_cast<jule::Uint>(_31830_flt._field_bias)));
	_31856_overflow=true;
	_julec_label_out:;
	jule::U64 _40817_bits = _32017_mant & ((static_cast<jule::U64>(1LLU) << _31830_flt._field_mantbits) - 1LL);
	_40817_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_31917_exp - _31830_flt._field_bias) & static_cast<jule::Int>((1LL << _31830_flt._field_expbits) - 1LL)) << _31830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_40817_bits|=static_cast<jule::Uint>((1LL << _31830_flt._field_mantbits) << _31830_flt._field_expbits);
	}
	_31848_b = _40817_bits;
	return std::make_tuple(_31848_b,_31856_overflow);
}



inline void _2286660ca_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>();
	jule::Int _15617_n = 0LL;
	while (_15229_v > 0LL) {
		{
			jule::U64 _15817_v1 = jule::unsafe_div(_15229_v,10LL);
			_15229_v-=static_cast<jule::U64>(10LL * _15817_v1);
			_15317_buf[_15617_n]=static_cast<jule::U8>(static_cast<jule::U8>(_15229_v + '0'));
			(_15617_n)++;
			_15229_v=_15817_v1;
		}
	_iter_next_5059214160:;
	}
	_iter_end_5059214160:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	for (; _15617_n >= 0LL; (_15617_n)--) {
		{
			(*this)._field_d[(*this)._field_nd]=_15317_buf[_15617_n];
			((*this)._field_nd)++;
		}
	_iter_next_5059214720:;
	}
	_iter_end_5059214720:;
	(*this)._field_dp=(*this)._field_nd;
	_2286660ca_trim((*this));
}



inline void _2286660ca_Decimal::_method_shift(jule::Int _17728_k) {
	{
		
		if ((*this)._field_nd == 0LL) {
			_case_begin_5059222816:;
		}
		else if (_17728_k > 0LL) {
			_case_begin_5059222928:;
			{
				while (_17728_k > 60LLU) {
					{
						_2286660ca_left_shift((*this),60LLU);
						_17728_k-=60LLU;
					}
				_iter_next_5059223616:;
				}
				_iter_end_5059223616:;
				_2286660ca_left_shift((*this),static_cast<jule::Uint>(static_cast<jule::Uint>(_17728_k)));
			}
		}
		else if (_17728_k < 0LL) {
			_case_begin_5059223040:;
			{
				while (_17728_k < -60LL) {
					{
						_2286660ca_right_shift((*this),60LLU);
						_17728_k+=60LLU;
					}
				_iter_next_5059225472:;
				}
				_iter_end_5059225472:;
				_2286660ca_right_shift((*this),static_cast<jule::Uint>(static_cast<jule::Uint>((-(_17728_k)))));
			}
		}
		_match_end_5059222576:;
	}
}



inline void _2286660ca_Decimal::_method_round_down(jule::Int _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_2286660ca_trim((*this));
}



inline void _2286660ca_Decimal::_method_round_up(jule::Int _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::Int _21217_i = _20627_nd - 1LL;
	for (; _21217_i >= 0LL; (_21217_i)--) {
		{
			jule::U8 _21417_c = (*this)._field_d[_21217_i];
			if (_21417_c < '9') {
				((*this)._field_d[_21217_i])++;
				(*this)._field_nd=static_cast<jule::Int>(_21217_i + 1LL);
				return;
			}
		}
	_iter_next_5059234720:;
	}
	_iter_end_5059234720:;
	(*this)._field_d.__at(0LL)='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _2286660ca_Decimal::_method_round(jule::Int _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_2286660ca_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _2286660ca_Decimal::_method_rounded_integer(void) {
	if ((*this)._field_dp > 20LL) {
		return jule::MAX_U64;
	}
	jule::Int _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	for (; (_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd); (_25017_i)++) {
		{
			_25117_n=static_cast<jule::U64>((_25117_n * 10LL) + static_cast<jule::U64>((*this)._field_d[_25017_i] - '0'));
		}
	_iter_next_5059246496:;
	}
	_iter_end_5059246496:;
	for (; _25017_i < (*this)._field_dp; (_25017_i)++) {
		{
			_25117_n*=10LL;
		}
	_iter_next_5059252336:;
	}
	_iter_end_5059252336:;
	if (_2286660ca_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _2286660ca_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e939c3_FoldPair &_Src) {
	_Stream << "FoldPair{";
	_Stream << "from:" << _Src._field_from << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e939c3_CaseRange &_Src) {
	_Stream << "CaseRange{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "delta:" << _Src._field_delta;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e939c3_Range16 &_Src) {
	_Stream << "Range16{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e939c3_Range32 &_Src) {
	_Stream << "Range32{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e939c3_RangeTable &_Src) {
	_Stream << "RangeTable{";
	_Stream << "r16:" << _Src._field_r16 << ", ";
	_Stream << "r32:" << _Src._field_r32 << ", ";
	_Stream << "latin_offset:" << _Src._field_latin_offset;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e84d38_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _228d7aadb_Token::_method_prec(void) {
	if ((*this)._field_id != 7LLU) {
		return 0LL;
	}
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("%", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str(">>", 2) || _match_expr == jule::Str("<<", 2) || _match_expr == jule::Str("&", 1)) {
			_case_begin_5064495408:;
			{
				return 5LL;
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_5064495504:;
			{
				return 4LL;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("=", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_5064495600:;
			{
				return 3LL;
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_5064495696:;
			{
				return 2LL;
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_5064496304:;
			{
				return 1LL;
			}
		}
		else {
			_case_begin_5064495904:;
			{
				return 0LL;
			}
		}
		_match_end_5064494560:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _228d7aadb_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d34677_File::_method_is_ok(void) {
	({
		auto except = _2276a6da8_Status::_static_method_of((*this)._field__path);
		if (!except.ok()) {
			return false;
		}
	});
	return true;
}



inline void _228d34677_File::_method_fill(jule::Slice<jule::U8> _2431_data) {
	(*this)._field_data=_2431_data;
}



inline jule::Str _228d34677_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _228d34677_File::_method_dir(void) {
	return _227711594_dir((*this)._field__path);
}



inline jule::Str _228d34677_File::_method_name(void) {
	return _227711594_base((*this)._field__path);
}



inline jule::Uintptr _228d34677_File::_method_addr(void) {
	return static_cast<jule::Uintptr>(((jule::Uintptr)((&((*this))))));
}



inline jule::Slice<_228d7aadb_Token> _228d34677_File::_method_tokens(void) {
	return (*this)._field__tokens;
}



inline jule::Str _228d34677_File::_method_get_row(jule::Int _4426_row) {
	jule::Int _4517_n = 0LL;
	jule::Int _4617_line_start = 0LL;
	jule::Int _4717_i = 0LL;
	for (; _4717_i < (*this)._field_data.len(); (_4717_i)++) {
		{
			if ((*this)._field_data[_4717_i] != '\n') {
				goto _iter_next_5064520112;
			}
			(_4517_n)++;
			if (_4517_n == _4426_row) {
				return static_cast<jule::Str>((*this)._field_data.slice(_4617_line_start,_4717_i));
			}
			_4617_line_start=static_cast<jule::Int>(_4717_i + 1LL);
		}
	_iter_next_5064520112:;
	}
	_iter_end_5064520112:;
	return jule::Str();
}







std::ostream &operator<<(std::ostream &_Stream, const _228d34677_File &_Src) {
	_Stream << "File{";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d36080_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _228d36080_Lex::_method_push_err(jule::Str _40427_fmt,jule::Slice<jule::Any> _40440_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_228d36080_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_40427_fmt,_40440_args));
}



inline void _228d36080_Lex::_method_push_err_tok(_228d7aadb_Token& _40932_token,jule::Str _40946_fmt) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_228d36080_make_err(_40932_token._field_row,_40932_token._field_column,(*this)._field_file,_40946_fmt,jule::Slice<jule::Any>()));
}



inline void _228d36080_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	while ((*this)._field_pos < (*((*this)._field_file))._field_data.len()) {
		{
			_228d7aadb_Token _41921_token = (*this)._method_token();
			if (_41921_token._field_id != 0LLU) {
				(*this)._field_tokens = jule::alloc_for_append((*this)._field_tokens,1);(*this)._field_tokens.push(_41921_token);
			}
		}
	_iter_next_5064533696:;
	}
	_iter_end_5064533696:;
}



inline jule::Str _228d36080_Lex::_method_id(jule::Slice<jule::U8>& _42822_ln) {
	if (_42822_ln.len() == 0LL) {
		return jule::Str();
	}
	jule::I32 _43214_r;
	jule::Int _43221_i;
	std::tie(_43214_r,_43221_i) = _228e84d38_decode_rune(_42822_ln);
	if ((_43214_r != '_') && (!(_228d7aadb_is_letter(_43214_r)))) {
		return jule::Str();
	}
	while (_43221_i < _42822_ln.len()) {
		{
			jule::I32 _43818_r;
			jule::Int _43821_n;
			std::tie(_43818_r,_43821_n) = _228e84d38_decode_rune(_42822_ln.slice(_43221_i));
			if (((_43818_r != '_') && (!(_228d7aadb_is_decimal(static_cast<jule::U8>(static_cast<jule::U8>(_43818_r)))))) && (!(_228d7aadb_is_letter(_43818_r)))) {
				(*this)._field_pos+=_43221_i;
				return static_cast<jule::Str>(_42822_ln.slice(0LL,_43221_i));
			}
			_43221_i+=_43821_n;
		}
	_iter_next_5064545712:;
	}
	_iter_end_5064545712:;
	(*this)._field_pos+=static_cast<jule::I64>(_42822_ln.len());
	return static_cast<jule::Str>(_42822_ln);
}



inline jule::Slice<jule::U8> _228d36080_Lex::_method_resume(void) {
	jule::Int _45317_i = (*this)._field_pos;
	for (; _45317_i < (*((*this)._field_file))._field_data.len(); (_45317_i)++) {
		{
			jule::I32 _45517_r = static_cast<jule::I32>((*((*this)._field_file))._field_data[_45317_i]);
			if (_228d7aadb_is_space(_45517_r)) {
				((*this)._field_pos)++;
				{
					auto &_match_expr{ _45517_r };
					
					if (_match_expr == '\n') {
						_case_begin_5064559536:;
						{
							(*this)._method_new_line();
						}
					}
					else if (_match_expr == '\t') {
						_case_begin_5064559632:;
						{
							(*this)._field_column+=8LL;
						}
					}
					else {
						_case_begin_5064557632:;
						{
							((*this)._field_column)++;
						}
					}
					_match_end_5064558144:;
				}
				goto _iter_next_5064553856;
			}
			jule::Int _46621_j = _45317_i;
			for (; _46621_j < (*((*this)._field_file))._field_data.len(); (_46621_j)++) {
				{
					if ((*((*this)._field_file))._field_data[_46621_j] == '\n') {
						goto _iter_end_5064556880;
					}
				}
			_iter_next_5064556880:;
			}
			_iter_end_5064556880:;
			return (*((*this)._field_file))._field_data.slice(_45317_i,_46621_j);
		}
	_iter_next_5064553856:;
	}
	_iter_end_5064553856:;
	return nullptr;
}



inline void _228d36080_Lex::_method_lex_line_comment(_228d7aadb_Token& _47840_token) {
	jule::Int _47913_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*((*this)._field_file))._field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _48317_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if ((_48317_r == '\n') || (_48317_r == '\r')) {
				if ((*this)._method_is_first_token_of_line()) {
					_47840_token._field_id=18LLU;
					_47840_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_47913_start,(*this)._field_pos));
				}
				return;
			}
		}
	_iter_next_5064567888:;
	}
	_iter_end_5064567888:;
	if ((*this)._method_is_first_token_of_line()) {
		_47840_token._field_id=18LLU;
		_47840_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_47913_start));
	}
}



inline void _228d36080_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*((*this)._field_file))._field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _50217_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_50217_r == '\r') {
				goto _iter_next_5064578160;
			}
			if (_50217_r == '\n') {
				(*this)._method_new_line();
				goto _iter_next_5064578160;
			}
			(*this)._field_column+=1LL;
			if (((((*this)._field_pos + 1LL) < (*((*this)._field_file))._field_data.len()) && (_50217_r == '*')) && ((*((*this)._field_file))._field_data[(*this)._field_pos + 1LL] == '/')) {
				(*this)._field_column+=2LL;
				(*this)._field_pos+=2LL;
				return;
			}
		}
	_iter_next_5064578160:;
	}
	_iter_end_5064578160:;
	(*this)._method_push_err(jule::Str("missing block comment close", 27),jule::Slice<jule::Any>());
}



inline jule::Str _228d36080_Lex::_method_num(jule::Slice<jule::U8>& _52323_txt) {
	jule::Str _52338_lit = jule::Str();
	_52338_lit=_228d36080_hex_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_228d36080_octal_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_228d36080_binary_num(_52323_txt);
	if (_52338_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_52338_lit=_228d36080_common_num(_52323_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_52338_lit.len());
	return _52338_lit;
}



inline jule::Str _228d36080_Lex::_method_escape_seq(jule::Slice<jule::U8>& _54230_txt) {
	jule::Str _54317_seq = jule::Str();
	if (_54230_txt.len() < 2LL) {
		goto _julec_label_end;
	}
	{
		auto &_match_expr{ _54230_txt[1LL] };
		
		if (_match_expr == '\\' || _match_expr == '\'' || _match_expr == '\"' || _match_expr == 'a' || _match_expr == 'b' || _match_expr == 'f' || _match_expr == 'n' || _match_expr == 'r' || _match_expr == 't' || _match_expr == 'v') {
			_case_begin_5064604992:;
			{
				(*this)._field_pos+=2LL;
				return static_cast<jule::Str>(_54230_txt.slice(0LL,2LL));
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_5064605184:;
			{
				_54317_seq=_228d36080_big_unicode_point_escape(_54230_txt);
			}
		}
		else if (_match_expr == 'u') {
			_case_begin_5064606064:;
			{
				_54317_seq=_228d36080_little_unicode_point_escape(_54230_txt);
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_5064604544:;
			{
				_54317_seq=_228d36080_hex_byte_escape(_54230_txt);
			}
		}
		else {
			_case_begin_5064604240:;
			{
				_54317_seq=_228d36080_byte_escape(_54230_txt);
			}
		}
		_match_end_5064603904:;
	}
	_julec_label_end:;
	if (_54317_seq == jule::Str()) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>());
		return jule::Str();
	}
	(*this)._field_pos+=static_cast<jule::I64>(_54317_seq.len());
	return _54317_seq;
}



inline jule::Str _228d36080_Lex::_method_get_rune(jule::Slice<jule::U8>& _57628_txt,jule::Bool _57641_raw) {
	if ((!(_57641_raw)) && (_57628_txt[0LL] == '\\')) {
		return (*this)._method_escape_seq(_57628_txt);
	}
	jule::I32 _58114_r;
	jule::Int _58117_n;
	std::tie(_58114_r,_58117_n) = _228e84d38_decode_rune(_57628_txt);
	(*this)._field_pos+=_58117_n;
	return static_cast<jule::Str>(_58114_r);
}



inline jule::Str _228d36080_Lex::_method_lex_rune(jule::Slice<jule::U8>& _58628_txt) {
	jule::Str _58717_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::Int _58917_n = 0LL;
	jule::Int _59017_i = 1LL;
	for (; _59017_i < _58628_txt.len(); (_59017_i)++) {
		{
			if (_58628_txt[_59017_i] == '\r') {
				goto _iter_next_5064643600;
			}
			if (_58628_txt[_59017_i] == '\n') {
				(*this)._method_push_err(jule::Str("rune is not finished", 20),jule::Slice<jule::Any>());
				((*this)._field_pos)++;
				(*this)._method_new_line();
				return jule::Str();
			}
			jule::Slice<jule::U8> _60217_part = _58628_txt.slice(_59017_i);
			jule::Str _60317_r = (*this)._method_get_rune(_60217_part,false);
			_58717_run+=_60317_r;
			jule::I64 _60517_length = _60317_r.len();
			(*this)._field_column+=_60517_length;
			if (_60317_r == jule::Str("'", 1)) {
				((*this)._field_pos)++;
				goto _iter_end_5064643600;
			}
			if (_60517_length > 1LL) {
				_59017_i+=static_cast<jule::I64>(_60517_length - 1LL);
			}
			(_58917_n)++;
		}
	_iter_next_5064643600:;
	}
	_iter_end_5064643600:;
	if (_58917_n == 0LL) {
		(*this)._method_push_err(jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>());
	} else if (_58917_n > 1LL) {
		(*this)._method_push_err(jule::Str("rune is should be single", 24),jule::Slice<jule::Any>());
	}
	return _58717_run;
}



inline jule::Str _228d36080_Lex::_method_lex_str(void) {
	jule::Str _62717_s = jule::Str();
	jule::U8 _62813_mark = (*((*this)._field_file))._field_data[(*this)._field_pos];
	((*this)._field_pos)++;
	jule::Bool _63013_raw = _62813_mark == '`';
	_62717_s+=static_cast<jule::Str>(_62813_mark);
	((*this)._field_column)++;
	while ((*this)._field_pos < (*((*this)._field_file))._field_data.len()) {
		{
			jule::U8 _63517_ch = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_63517_ch == '\r') {
				goto _iter_next_5064665088;
			}
			if (_63517_ch == '\n') {
				(*this)._method_new_line();
				if ((!(_63013_raw))) {
					(*this)._method_push_err(jule::Str("string is not finished", 22),jule::Slice<jule::Any>());
					((*this)._field_pos)++;
					return jule::Str();
				}
			}
			jule::Slice<jule::U8> _64721_part = (*((*this)._field_file))._field_data.slice((*this)._field_pos);
			jule::Str _64817_r = (*this)._method_get_rune(_64721_part,_63013_raw);
			_62717_s+=_64817_r;
			(*this)._field_column+=static_cast<jule::I64>(_64817_r.len());
			if (_63517_ch == _62813_mark) {
				goto _iter_end_5064665088;
			}
		}
	_iter_next_5064665088:;
	}
	_iter_end_5064665088:;
	return _62717_s;
}



inline jule::Bool _228d36080_Lex::_method_is_first_token_of_line(void) {
	return (*this)._field_column == 1LL;
}



inline void _228d36080_Lex::_method_new_line(void) {
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _228d36080_Lex::_method_is_op(jule::Slice<jule::U8>& _66825_txt,jule::Str _66838_kind,jule::Uint _66849_id,_228d7aadb_Token& _66867_t) {
	if ((!(_228d36080_bytes_has_prefix(_66825_txt,_66838_kind)))) {
		return false;
	}
	_66867_t._field_kind=_66838_kind;
	_66867_t._field_id=_66849_id;
	(*this)._field_pos+=static_cast<jule::I64>(_66838_kind.len());
	return true;
}



inline jule::Bool _228d36080_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _67932_txt,_228d7aadb_Token& _67950_tok) {
	{
		auto &expr = _228d36080_BASIC_OPS;
		auto it = expr.begin();
		_iter_begin_5064687232:;
		if (it != expr.end()) {
			_228d36080_KindPair &_228d36080_pair = *it;
			{
				if ((*this)._method_is_op(_67932_txt,_228d36080_pair._field_kind,_228d36080_pair._field_id,_67950_tok)) {
					return true;
				}
			}
			_iter_next_5064687232:;
			++it;
			goto _iter_begin_5064687232;
		}
		_iter_end_5064687232:;
	}
	return false;
}



inline jule::Bool _228d36080_Lex::_method_lex_id(jule::Slice<jule::U8>& _68926_txt,_228d7aadb_Token& _68944_t) {
	jule::Str _69013_lex = (*this)._method_id(_68926_txt);
	if (_69013_lex == jule::Str()) {
		return false;
	}
	_68944_t._field_kind=_69013_lex;
	_68944_t._field_id=2LLU;
	return true;
}



inline jule::Bool _228d36080_Lex::_method_lex_num(jule::Slice<jule::U8>& _70027_txt,_228d7aadb_Token& _70045_t) {
	jule::Str _70113_lex = (*this)._method_num(_70027_txt);
	if (_70113_lex == jule::Str()) {
		return false;
	}
	_70045_t._field_kind=_70113_lex;
	_70045_t._field_id=6LLU;
	return true;
}



inline _228d7aadb_Token _228d36080_Lex::_method_token(void) {
	_228d7aadb_Token _71317_t = _228d7aadb_Token((*this)._field_file,jule::Int(),jule::Int(),jule::Str(),0LLU);
	jule::Slice<jule::U8> _71513_txt = (*this)._method_resume();
	if (_71513_txt == nullptr) {
		return _71317_t;
	}
	_71317_t._field_column=(*this)._field_column;
	_71317_t._field_row=(*this)._field_row;
	{
		
		if ((*this)._method_lex_num(_71513_txt,_71317_t)) {
			_case_begin_5064709312:;
		}
		else if (_71513_txt[0LL] == '\'') {
			_case_begin_5064708320:;
			{
				_71317_t._field_kind=(*this)._method_lex_rune(_71513_txt);
				_71317_t._field_id=6LLU;
				return _71317_t;
			}
		}
		else if ((_71513_txt[0LL] == '\"') || (_71513_txt[0LL] == '`')) {
			_case_begin_5064706176:;
			{
				_71317_t._field_kind=(*this)._method_lex_str();
				_71317_t._field_id=6LLU;
				return _71317_t;
			}
		}
		else if (_228d36080_bytes_has_prefix(_71513_txt,jule::Str("//", 2))) {
			_case_begin_5064706272:;
			{
				(*this)._method_lex_line_comment(_71317_t);
				return _71317_t;
			}
		}
		else if (_228d36080_bytes_has_prefix(_71513_txt,jule::Str("/*", 2))) {
			_case_begin_5064706368:;
			{
				(*this)._method_lex_range_comment();
				return _71317_t;
			}
		}
		else if ((*this)._method_is_op(_71513_txt,jule::Str("(", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str(")", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("{", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("}", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("[", 1),3LLU,_71317_t) || (*this)._method_is_op(_71513_txt,jule::Str("]", 1),3LLU,_71317_t) || (*this)._method_lex_basic_ops(_71513_txt,_71317_t)) {
			_case_begin_5064710272:;
		}
		else if ((*this)._method_lex_id(_71513_txt,_71317_t)) {
			_case_begin_5064710368:;
			{
				{
					auto &expr = _228d36080_KEYWORDS;
					auto it = expr.begin();
					_iter_begin_5064725376:;
					if (it != expr.end()) {
						_228d36080_KindPair &_228d36080_pair = *it;
						{
							if (_228d36080_pair._field_kind == _71317_t._field_kind) {
								_71317_t._field_id=_228d36080_pair._field_id;
								goto _iter_end_5064725376;
							}
						}
						_iter_next_5064725376:;
						++it;
						goto _iter_begin_5064725376;
					}
					_iter_end_5064725376:;
				}
			}
		}
		else {
			_case_begin_5064704256:;
			{
				jule::I32 _76518_r;
				jule::Int _76521_sz;
				std::tie(_76518_r,_76521_sz) = _228e84d38_decode_rune(_71513_txt);
				(*this)._method_push_err(jule::Str("undefined token: @", 18),jule::Slice<jule::Any>({jule::Any(_76518_r)}));
				((*this)._field_column)++;
				(*this)._field_pos+=_76521_sz;
				return _71317_t;
			}
		}
		_match_end_5064704176:;
	}
	(*this)._field_column+=static_cast<jule::I64>(_71317_t._field_kind.len());
	return _71317_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d36080_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d3160d_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_SptrTypeDecl &_Src) {
	_Stream << "SptrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_PtrTypeDecl::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_ArrTypeDecl::_method_auto_sized(void) {
	return (*this)._field_size == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base != nullptr;
}



inline jule::Bool _228d31971_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d79a30_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d79a30_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d45c71_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _228d45c71_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _228d45c71_ScopeParser::_method_stopped(void) {
	return (*this)._field_pos == -1LL;
}



inline jule::Bool _228d45c71_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= (*this)._field_stmts.len();
}



inline jule::Bool _228d45c71_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= (*this)._field_stmts.len();
}



inline void _228d45c71_ScopeParser::_method_push_err(_228d7aadb_Token _17827_token,jule::Str _17841_fmt) {
	(*((*this)._field_p))._method_push_err(_17827_token,_17841_fmt,jule::Slice<jule::Any>());
}



inline void _228d45c71_ScopeParser::_method_push_suggestion(jule::Str _18134_fmt,jule::Slice<jule::Any> _18147_args) {
	(*((*this)._field_p))._method_push_suggestion(_18134_fmt,_18147_args);
}



inline void _228d45c71_ScopeParser::_method_insert_as_next(jule::Slice<_228d7aadb_Token>& _18538_tokens) {
	(*this)._field_stmts=jule::append((*this)._field_stmts.slice(0LL,(*this)._field_pos + 1LL),(*this)._field_stmts.slice((*this)._field_pos));
	(*this)._field_stmts[(*this)._field_pos + 1LL]=jule::new_struct<_228d45c71_Stmt>(new( std::nothrow ) _228d45c71_Stmt(_18538_tokens,jule::Bool()));
}



inline jule::Ptr<_228d45c71_Stmt> _228d45c71_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stmts[(*this)._field_pos];
}



inline jule::Ptr<_228d31971_ScopeTree> _228d45c71_ScopeParser::_method_build_scope(jule::Slice<_228d7aadb_Token>& _19535_tokens) {
	jule::Ptr<_228d31971_ScopeTree> _19617_s = _228d45c71_new_scope();
	(*(_19617_s))._field_parent=(*this)._field_s;
	_228d45c71_ScopeParser _19817_ssp = _228d45c71_ScopeParser((*this)._field_p,jule::Ptr<_228d31971_ScopeTree>(),jule::Slice<jule::Ptr<_228d45c71_Stmt>>(),jule::Int());
	_19817_ssp._method_build(_19535_tokens,_19617_s);
	return _19617_s;
}



inline jule::Any _228d45c71_ScopeParser::_method_build_var_st(jule::Slice<_228d7aadb_Token>& _20536_tokens) {
	jule::Ptr<_228d31971_VarDecl> _20617_v = (*((*this)._field_p))._method_build_var(_20536_tokens);
	(*(_20617_v))._field_scope=(*this)._field_s;
	return jule::Any(_20617_v);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_ret_st(jule::Slice<_228d7aadb_Token> _21135_tokens) {
	jule::Ptr<_228d31971_RetSt> _21217_st = jule::new_struct<_228d31971_RetSt>(new( std::nothrow ) _228d31971_RetSt(_21135_tokens[0LL],jule::Ptr<_228d31971_Expr>()));
	if (_21135_tokens.len() > 1LL) {
		_21135_tokens=_21135_tokens.slice(1LL);
		(*(_21217_st))._field_expr=(*((*this)._field_p))._method_build_expr(_21135_tokens);
	}
	return jule::Any(_21217_st);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_while_next_iter(jule::Ptr<_228d45c71_Stmt>& _22245_s) {
	jule::Ptr<_228d31971_Iter> _22317_it = jule::new_struct<_228d31971_Iter>(new( std::nothrow ) _228d31971_Iter((*(_22245_s))._field_tokens[0LL],jule::Any(),jule::Ptr<_228d31971_ScopeTree>()));
	jule::Slice<_228d7aadb_Token> _22617_tokens = (*(_22245_s))._field_tokens.slice(1LL);
	jule::Ptr<_228d31971_WhileKind> _22717_kind = jule::new_struct<_228d31971_WhileKind>(new( std::nothrow ) _228d31971_WhileKind());
	if (_22617_tokens.len() > 0LL) {
		(*(_22717_kind))._field_expr=(*((*this)._field_p))._method_build_expr(_22617_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err((*(_22317_it))._field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_22617_tokens=(*((*this)._method_next()))._field_tokens;
	jule::Slice<_228d7aadb_Token> _23917_st_tokens = _229a547e7_get_block_expr(_22617_tokens);
	if (_23917_st_tokens.len() > 0LL) {
		jule::Ptr<_228d45c71_Stmt> _24121_stmt = jule::new_struct<_228d45c71_Stmt>(new( std::nothrow ) _228d45c71_Stmt(_23917_st_tokens,(*(_22245_s))._field_terminated));
		(*(_22717_kind))._field_next_token=_23917_st_tokens[0LL];
		(*(_22717_kind))._field_next=(*this)._method_build_st(_24121_stmt);
	}
	jule::I64 _24917_i = _23917_st_tokens.len();
	jule::Slice<_228d7aadb_Token> _25017_block_tokens = _229a51c34_range(_24917_i,jule::Str("{", 1),jule::Str("}", 1),_22617_tokens);
	if (_25017_block_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_22317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_24917_i < _22617_tokens.len()) {
		(*this)._method_push_err(_22617_tokens[_24917_i],jule::Str("invalid syntax", 14));
	}
	(*(_22317_it))._field_scope=(*this)._method_build_scope(_25017_block_tokens);
	(*(_22317_it))._field_kind=jule::Any(_22717_kind);
	return jule::Any(_22317_it);
}



inline jule::Ptr<_228d31971_WhileKind> _228d45c71_ScopeParser::_method_build_while_iter_kind(jule::Slice<_228d7aadb_Token>& _26745_tokens) {
	return jule::new_struct<_228d31971_WhileKind>(new( std::nothrow ) _228d31971_WhileKind((*((*this)._field_p))._method_build_expr(_26745_tokens),jule::Any(),_228d7aadb_Token()));
}



inline jule::Slice<jule::Slice<_228d7aadb_Token>> _228d45c71_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_228d7aadb_Token>& _27350_toks) {
	jule::Slice<jule::Slice<_228d7aadb_Token>> _27418_vars;
	jule::Slice<_2276bcb9e_Log> _27424_errs;
	std::tie(_27418_vars,_27424_errs) = _229a51c34_parts(_27350_toks,8LLU,true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_27424_errs);
	return _27418_vars;
}



inline jule::Ptr<_228d31971_VarDecl> _228d45c71_ScopeParser::_method_build_range_kind_key(jule::Slice<_228d7aadb_Token>& _27944_tokens) {
	if (_27944_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_228d31971_VarDecl> _28317_key = jule::new_struct<_228d31971_VarDecl>(new( std::nothrow ) _228d31971_VarDecl(jule::Ptr<_228d31971_ScopeTree>(),_27944_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_228d31971_CommentGroup>(),jule::Ptr<_228d31971_TypeDecl>(),jule::Ptr<_228d31971_Expr>()));
	if ((*(_28317_key))._field_token._field_id == 36LLU) {
		(*(_28317_key))._field_mutable=true;
		if (_27944_tokens.len() == 1LL) {
			(*this)._method_push_err((*(_28317_key))._field_token,jule::Str("invalid syntax", 14));
		}
		(*(_28317_key))._field_token=_27944_tokens[1LL];
	} else if (_27944_tokens.len() > 1LL) {
		(*this)._method_push_err(_27944_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if ((*(_28317_key))._field_token._field_id != 2LLU) {
		(*this)._method_push_err((*(_28317_key))._field_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_28317_key))._field_ident=(*(_28317_key))._field_token._field_kind;
	return _28317_key;
}



inline jule::Slice<jule::Ptr<_228d31971_VarDecl>> _228d45c71_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_228d7aadb_Token>>& _30445_parts) {
	jule::Slice<jule::Ptr<_228d31971_VarDecl>> _30517_keys = nullptr;
	{
		auto &expr = _30445_parts;
		auto it = expr.begin();
		_iter_begin_5065478752:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _228d45c71_tokens = *it;
			{
				_30517_keys.push((*this)._method_build_range_kind_key(_228d45c71_tokens));
			}
			_iter_next_5065478752:;
			++it;
			goto _iter_begin_5065478752;
		}
		_iter_end_5065478752:;
	}
	return _30517_keys;
}



inline void _228d45c71_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ptr<_228d31971_RangeKind>& _31251_rng,jule::Slice<_228d7aadb_Token>& _31273_tokens) {
	jule::Slice<jule::Slice<_228d7aadb_Token>> _31317_key_tokens = (*this)._method_get_range_kind_keys_tokens(_31273_tokens);
	if (_31317_key_tokens.len() == 0LL) {
		return;
	}
	if (_31317_key_tokens.len() > 2LL) {
		(*this)._method_push_err((*(_31251_rng))._field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ptr<_228d31971_VarDecl>> _32017_keys = (*this)._method_build_range_kind_keys(_31317_key_tokens);
	(*(_31251_rng))._field_key_a=_32017_keys[0LL];
	if (_32017_keys.len() > 1LL) {
		(*(_31251_rng))._field_key_b=_32017_keys[1LL];
	}
}



inline void _228d45c71_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ptr<_228d31971_RangeKind>& _32754_rng,jule::Slice<_228d7aadb_Token>& _32776_tokens) {
	jule::Int _32817_i = 0LL;
	jule::Slice<_228d7aadb_Token> _32917_rang = _229a51c34_range(_32817_i,jule::Str("(", 1),jule::Str(")", 1),_32776_tokens);
	if (_32817_i < _32776_tokens.len()) {
		(*this)._method_push_err((*(_32754_rng))._field_in_token,jule::Str("invalid syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_32754_rng,_32917_rang);
}



inline void _228d45c71_ScopeParser::_method_setup_range_kind_keys(jule::Ptr<_228d31971_RangeKind>& _33645_rng,jule::Slice<_228d7aadb_Token>& _33667_tokens) {
	if (_33667_tokens[0LL]._field_id == 3LLU) {
		if (_33667_tokens[0LL]._field_kind != jule::Str("(", 1)) {
			(*this)._method_push_err(_33667_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_33645_rng,_33667_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_33645_rng,_33667_tokens);
}



inline jule::Ptr<_228d31971_RangeKind> _228d45c71_ScopeParser::_method_build_range_iter_kind(jule::Slice<_228d7aadb_Token>& _34845_var_tokens,jule::Slice<_228d7aadb_Token>& _34914_expr_tokens,_228d7aadb_Token& _34941_in_token) {
	jule::Ptr<_228d31971_RangeKind> _35017_rng = jule::new_struct<_228d31971_RangeKind>(new( std::nothrow ) _228d31971_RangeKind(_34941_in_token,jule::Ptr<_228d31971_Expr>(),jule::Ptr<_228d31971_VarDecl>(),jule::Ptr<_228d31971_VarDecl>()));
	if (_34914_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_35017_rng))._field_in_token,jule::Str("expression missing", 18));
		return _35017_rng;
	}
	(*(_35017_rng))._field_expr=(*((*this)._field_p))._method_build_expr(_34914_expr_tokens);
	if (_34845_var_tokens.len() > 0LL) {
		(*this)._method_setup_range_kind_keys(_35017_rng,_34845_var_tokens);
	}
	return _35017_rng;
}



inline jule::Any _228d45c71_ScopeParser::_method_build_common_iter_kind(jule::Slice<_228d7aadb_Token>& _36446_tokens,_228d7aadb_Token& _36464_err_tok) {
	jule::Int _36517_brace_n = 0LL;
	{
		auto &expr = _36446_tokens;
		auto it = expr.begin();
		_iter_begin_5065520176:;
		if (it != expr.end()) {
			jule::Int _228d45c71_i = it - expr.begin();
			_228d7aadb_Token _228d45c71_tok = *it;
			{
				if (_228d45c71_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _228d45c71_tok._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5065524784:;
							{
								(_36517_brace_n)++;
								goto _iter_next_5065520176;
							}
						}
						else {
							_case_begin_5065522992:;
							{
								(_36517_brace_n)--;
							}
						}
						_match_end_5065523104:;
					}
				}
				if (_36517_brace_n != 0LL) {
					goto _iter_next_5065520176;
				}
				{
					auto &_match_expr{ _228d45c71_tok._field_id };
					
					if (_match_expr == 15LLU) {
						_case_begin_5065522272:;
						{
							jule::Slice<_228d7aadb_Token> _38425_decl_tokens = _36446_tokens.slice(0LL,_228d45c71_i);
							jule::Slice<_228d7aadb_Token> _38525_expr_tokens = _36446_tokens.slice(_228d45c71_i + 1LL);
							return jule::Any((*this)._method_build_range_iter_kind(_38425_decl_tokens,_38525_expr_tokens,_228d45c71_tok));
						}
					}
					_match_end_5065525360:;
				}
			}
			_iter_next_5065520176:;
			++it;
			_228d45c71_i++;
			goto _iter_begin_5065520176;
		}
		_iter_end_5065520176:;
	}
	return jule::Any((*this)._method_build_while_iter_kind(_36446_tokens));
}



inline jule::Any _228d45c71_ScopeParser::_method_build_common_iter(jule::Slice<_228d7aadb_Token> _39240_tokens) {
	jule::Ptr<_228d31971_Iter> _39317_it = jule::new_struct<_228d31971_Iter>(new( std::nothrow ) _228d31971_Iter(_39240_tokens[0LL],jule::Any(),jule::Ptr<_228d31971_ScopeTree>()));
	_39240_tokens=_39240_tokens.slice(1LL);
	if (_39240_tokens.len() == 0LL) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_39317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	jule::Slice<_228d7aadb_Token> _40317_expr_tokens = _229a547e7_get_block_expr(_39240_tokens);
	if (_40317_expr_tokens.len() > 0LL) {
		(*(_39317_it))._field_kind=(*this)._method_build_common_iter_kind(_40317_expr_tokens,(*(_39317_it))._field_token);
	}
	jule::I64 _40717_i = _40317_expr_tokens.len();
	jule::Slice<_228d7aadb_Token> _40817_scope_tokens = _229a51c34_range(_40717_i,jule::Str("{", 1),jule::Str("}", 1),_39240_tokens);
	if (_40817_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_39317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_40717_i < _39240_tokens.len()) {
		(*this)._method_push_err(_39240_tokens[_40717_i],jule::Str("invalid syntax", 14));
	}
	(*(_39317_it))._field_scope=(*this)._method_build_scope(_40817_scope_tokens);
	return jule::Any(_39317_it);
}



inline jule::Any _228d45c71_ScopeParser::_method_buid_iter_st(jule::Ptr<_228d45c71_Stmt>& _42236_st) {
	if ((*(_42236_st))._field_terminated) {
		return (*this)._method_build_while_next_iter(_42236_st);
	}
	return (*this)._method_build_common_iter((*(_42236_st))._field_tokens);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_break_st(jule::Slice<_228d7aadb_Token>& _42938_tokens) {
	jule::Ptr<_228d31971_BreakSt> _43017_brk = jule::new_struct<_228d31971_BreakSt>(new( std::nothrow ) _228d31971_BreakSt(_42938_tokens[0LL],_228d7aadb_Token()));
	if (_42938_tokens.len() > 1LL) {
		if (_42938_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_43017_brk))._field_label=_42938_tokens[1LL];
			if (_42938_tokens.len() > 2LL) {
				(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_43017_brk);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_cont_st(jule::Slice<_228d7aadb_Token>& _44737_tokens) {
	jule::Ptr<_228d31971_ContSt> _44817_cont = jule::new_struct<_228d31971_ContSt>(new( std::nothrow ) _228d31971_ContSt(_44737_tokens[0LL],_228d7aadb_Token()));
	if (_44737_tokens.len() > 1LL) {
		if (_44737_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_44817_cont))._field_label=_44737_tokens[1LL];
			if (_44737_tokens.len() > 2LL) {
				(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_44817_cont);
}



inline jule::Ptr<_228d31971_If> _228d45c71_ScopeParser::_method_build_if(jule::Slice<_228d7aadb_Token>& _46532_tokens) {
	jule::Ptr<_228d31971_If> _46617_model = jule::new_struct<_228d31971_If>(new( std::nothrow ) _228d31971_If(_46532_tokens[0LL],jule::Ptr<_228d31971_Expr>(),jule::Ptr<_228d31971_ScopeTree>()));
	_46532_tokens=_46532_tokens.slice(1LL);
	jule::Slice<_228d7aadb_Token> _47017_expr_tokens = _229a547e7_get_block_expr(_46532_tokens);
	jule::Int _47117_i = 0LL;
	if (_47017_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_46617_model))._field_token,jule::Str("expression missing", 18));
	} else {
		_47117_i=static_cast<jule::I64>(_47017_expr_tokens.len());
	}
	jule::Slice<_228d7aadb_Token> _47717_scope_tokens = _229a51c34_range(_47117_i,jule::Str("{", 1),jule::Str("}", 1),_46532_tokens);
	if (_47717_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_46617_model))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_47117_i < _46532_tokens.len()) {
		if (_46532_tokens[_47117_i]._field_id == 17LLU) {
			_46532_tokens=_46532_tokens.slice(_47117_i);
		} else {
			(*this)._method_push_err(_46532_tokens[_47117_i],jule::Str("invalid syntax", 14));
			_46532_tokens=nullptr;
		}
	}
	(*(_46617_model))._field_expr=(*((*this)._field_p))._method_build_expr(_47017_expr_tokens);
	(*(_46617_model))._field_scope=(*this)._method_build_scope(_47717_scope_tokens);
	return _46617_model;
}



inline jule::Ptr<_228d31971_Else> _228d45c71_ScopeParser::_method_build_else(jule::Slice<_228d7aadb_Token>& _49734_tokens) {
	jule::Ptr<_228d31971_Else> _49817_els = jule::new_struct<_228d31971_Else>(new( std::nothrow ) _228d31971_Else(_49734_tokens[0LL],jule::Ptr<_228d31971_ScopeTree>()));
	_49734_tokens=_49734_tokens.slice(1LL);
	jule::Int _50217_i = 0LL;
	jule::Slice<_228d7aadb_Token> _50317_scope_tokens = _229a51c34_range(_50217_i,jule::Str("{", 1),jule::Str("}", 1),_49734_tokens);
	if (_50317_scope_tokens == nullptr) {
		if (_50217_i < _49734_tokens.len()) {
			(*this)._method_push_err((*(_49817_els))._field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err((*(_49817_els))._field_token,jule::Str("body is not exist", 17));
			(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	if (_50217_i < _49734_tokens.len()) {
		(*this)._method_push_err(_49734_tokens[_50217_i],jule::Str("invalid syntax", 14));
	}
	(*(_49817_els))._field_scope=(*this)._method_build_scope(_50317_scope_tokens);
	return _49817_els;
}



inline jule::Any _228d45c71_ScopeParser::_method_build_if_else_chain(jule::Slice<_228d7aadb_Token> _52142_tokens) {
	jule::Ptr<_228d31971_Conditional> _52217_chain = jule::new_struct<_228d31971_Conditional>(new( std::nothrow ) _228d31971_Conditional((*this)._method_build_if(_52142_tokens),jule::Slice<jule::Ptr<_228d31971_If>>(),jule::Ptr<_228d31971_Else>()));
	if ((*(_52217_chain))._field_head == nullptr) {
		return jule::Any(nullptr);
	}
	while (_52142_tokens.len() != 0LL) {
		{
			if (_52142_tokens[0LL]._field_id != 17LLU) {
				goto _iter_end_5065615888;
			}
			if ((_52142_tokens.len() > 1LL) && (_52142_tokens[1LL]._field_id == 16LLU)) {
				_52142_tokens=_52142_tokens.slice(1LL);
				jule::Ptr<_228d31971_If> _53425_elif = (*this)._method_build_if(_52142_tokens);
				(*(_52217_chain))._field_tail = jule::alloc_for_append((*(_52217_chain))._field_tail,1);(*(_52217_chain))._field_tail.push(_53425_elif);
				goto _iter_next_5065615888;
			}
			(*(_52217_chain))._field_default=(*this)._method_build_else(_52142_tokens);
			goto _iter_end_5065615888;
		}
	_iter_next_5065615888:;
	}
	_iter_end_5065615888:;
	return jule::Any(_52217_chain);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_comment_st(_228d7aadb_Token& _54436_token) {
	return jule::Any(_229a51c34_build_comment(_54436_token));
}



inline jule::Any _228d45c71_ScopeParser::_method_build_co_call_st(jule::Slice<_228d7aadb_Token> _54839_tokens) {
	jule::Ptr<_228d31971_CoExpr> _54917_c = jule::new_struct<_228d31971_CoExpr>(new( std::nothrow ) _228d31971_CoExpr(_54839_tokens[0LL],jule::Ptr<_228d31971_Expr>()));
	_54839_tokens=_54839_tokens.slice(1LL);
	(*(_54917_c))._field_expr=(*((*this)._field_p))._method_build_expr(_54839_tokens);
	return jule::Any(_54917_c);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_goto_st(jule::Slice<_228d7aadb_Token>& _55737_tokens) {
	jule::Ptr<_228d31971_GotoSt> _55817_gt = jule::new_struct<_228d31971_GotoSt>(new( std::nothrow ) _228d31971_GotoSt(_55737_tokens[0LL],_228d7aadb_Token()));
	if (_55737_tokens.len() == 1LL) {
		(*this)._method_push_err((*(_55817_gt))._field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if (_55737_tokens.len() > 2LL) {
		(*this)._method_push_err(_55737_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_228d7aadb_Token _56717_ident_token = _55737_tokens[1LL];
	if (_56717_ident_token._field_id != 2LLU) {
		(*this)._method_push_err(_56717_ident_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return jule::Any(_55817_gt);
	}
	(*(_55817_gt))._field_label=_56717_ident_token;
	return jule::Any(_55817_gt);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_fall_st(jule::Slice<_228d7aadb_Token>& _57737_tokens) {
	jule::Ptr<_228d31971_FallSt> _57817_fll = jule::new_struct<_228d31971_FallSt>(new( std::nothrow ) _228d31971_FallSt(_57737_tokens[0LL]));
	if (_57737_tokens.len() > 1LL) {
		(*this)._method_push_err(_57737_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_57817_fll);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_type_alias_st(jule::Slice<_228d7aadb_Token>& _58743_tokens) {
	jule::Ptr<_228d31971_TypeAliasDecl> _58817_tad = (*((*this)._field_p))._method_build_type_alias_decl(_58743_tokens);
	(*(_58817_tad))._field_scope=(*this)._field_s;
	return jule::Any(_58817_tad);
}



inline void _228d45c71_ScopeParser::_method_push_case_expr(jule::Slice<_228d7aadb_Token> _59337_tokens,_228d7aadb_Token _59358_token,jule::Bool _5949_type_match,jule::Slice<jule::Ptr<_228d31971_Expr>>& _59432_exprs) {
	if (_59337_tokens.len() == 0LL) {
		return;
	}
	if (_5949_type_match) {
		jule::Int _60021_i = 0LL;
		jule::Ptr<_228d31971_TypeDecl> _60122_t;
		jule::Bool _60125_ok;
		std::tie(_60122_t,_60125_ok) = (*((*this)._field_p))._method_build_type(_59337_tokens,(&(_60021_i)),true);
		if (_60125_ok) {
			_59432_exprs.push(jule::new_struct<_228d31971_Expr>(new( std::nothrow ) _228d31971_Expr(_59358_token,jule::Any(_60122_t))));
		}
		if (_60021_i < _59337_tokens.len()) {
			(*this)._method_push_err(_59337_tokens[_60021_i],jule::Str("invalid syntax", 14));
		}
		return;
	}
	_59432_exprs.push((*((*this)._field_p))._method_build_expr(_59337_tokens));
}



inline jule::Slice<jule::Ptr<_228d31971_Expr>> _228d45c71_ScopeParser::_method_build_case_exprs(jule::Slice<_228d7aadb_Token>& _61640_tokens,jule::Bool _61657_type_match) {
	jule::Slice<jule::Ptr<_228d31971_Expr>> _61717_exprs = jule::Slice<jule::Ptr<_228d31971_Expr>>::alloc(0LL,1LL);
	jule::Int _61917_brace_n = 0LL;
	jule::Int _62017_j = 0LL;
	{
		auto &expr = _61640_tokens;
		auto it = expr.begin();
		_iter_begin_5065693808:;
		if (it != expr.end()) {
			jule::Int _228d45c71_i = it - expr.begin();
			_228d7aadb_Token _228d45c71_tok = *it;
			{
				if (_228d45c71_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _228d45c71_tok._field_kind };
						
						if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
							_case_begin_5065698272:;
							{
								(_61917_brace_n)++;
							}
						}
						else {
							_case_begin_5065696480:;
							{
								(_61917_brace_n)--;
							}
						}
						_match_end_5065696592:;
					}
					goto _iter_next_5065693808;
				} else if (_61917_brace_n != 0LL) {
					goto _iter_next_5065693808;
				}
				{
					
					if ((_228d45c71_tok._field_id == 7LLU) && (_228d45c71_tok._field_kind == jule::Str("|", 1))) {
						_case_begin_5065695760:;
						{
							jule::Slice<_228d7aadb_Token> _63821_expr_tokens = _61640_tokens.slice(_62017_j,_228d45c71_i);
							if (_63821_expr_tokens.len() == 0LL) {
								(*this)._method_push_err(_228d45c71_tok,jule::Str("expression missing", 18));
							} else {
								(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_228d45c71_i),_228d45c71_tok,_61657_type_match,_61717_exprs);
							}
							_62017_j=static_cast<jule::Int>(_228d45c71_i + 1LL);
						}
					}
					else if (_228d45c71_tok._field_id == 11LLU) {
						_case_begin_5065696096:;
						{
							(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_228d45c71_i),_228d45c71_tok,_61657_type_match,_61717_exprs);
							_61640_tokens=_61640_tokens.slice(_228d45c71_i + 1LL);
							return _61717_exprs;
						}
					}
					_match_end_5065697392:;
				}
			}
			_iter_next_5065693808:;
			++it;
			_228d45c71_i++;
			goto _iter_begin_5065693808;
		}
		_iter_end_5065693808:;
	}
	(*this)._method_push_err(_61640_tokens[0LL],jule::Str("invalid syntax", 14));
	_61640_tokens=nullptr;
	return nullptr;
}



inline jule::Ptr<_228d31971_ScopeTree> _228d45c71_ScopeParser::_method_build_case_scope(jule::Slice<_228d7aadb_Token>& _65740_tokens) {
	jule::Int _65817_n = 0LL;
	for (;;) {
		{
			jule::Int _66021_i = 0LL;
			jule::Slice<_228d7aadb_Token> _66122_next;
			std::tie(_66122_next,std::ignore) = _228d45c71_skip_st(_66021_i,_65740_tokens.slice(_65817_n));
			if (_66122_next.len() == 0LL) {
				goto _iter_end_5065711888;
			}
			_228d7aadb_Token _66517_tok = _66122_next[0LL];
			if ((_66517_tok._field_id != 7LLU) || (_66517_tok._field_kind != jule::Str("|", 1))) {
				_65817_n+=_66021_i;
				goto _iter_next_5065711888;
			}
			jule::Slice<_228d7aadb_Token> _67021_scope_tokens = _65740_tokens.slice(0LL,_65817_n);
			jule::Ptr<_228d31971_ScopeTree> _67121_scope = (*this)._method_build_scope(_67021_scope_tokens);
			_65740_tokens=_65740_tokens.slice(_65817_n);
			return _67121_scope;
		}
	_iter_next_5065711888:;
	}
	_iter_end_5065711888:;
	jule::Ptr<_228d31971_ScopeTree> _67517_scope = (*this)._method_build_scope(_65740_tokens);
	_65740_tokens=nullptr;
	return _67517_scope;
}



inline std::tuple<jule::Ptr<_228d31971_Case>,jule::Bool> _228d45c71_ScopeParser::_method_build_case(jule::Slice<_228d7aadb_Token>& _68034_tokens,jule::Bool _68051_type_match) {
	jule::Ptr<_228d31971_Case> _68117_c = jule::new_struct<_228d31971_Case>(new( std::nothrow ) _228d31971_Case(_68034_tokens[0LL],jule::Ptr<_228d31971_ScopeTree>(),jule::Slice<jule::Ptr<_228d31971_Expr>>()));
	_68034_tokens=_68034_tokens.slice(1LL);
	(*(_68117_c))._field_exprs=(*this)._method_build_case_exprs(_68034_tokens,_68051_type_match);
	(*(_68117_c))._field_scope=(*this)._method_build_case_scope(_68034_tokens);
	jule::Bool _68713_is_default = (*(_68117_c))._field_exprs.len() == 0LL;
	return std::make_tuple(_68117_c,_68713_is_default);
}



inline std::tuple<jule::Slice<jule::Ptr<_228d31971_Case>>,jule::Ptr<_228d31971_Else>> _228d45c71_ScopeParser::_method_build_cases(jule::Slice<_228d7aadb_Token> _69134_tokens,jule::Bool _69151_type_match) {
	jule::Slice<jule::Ptr<_228d31971_Case>> _69217_cases = nullptr;
	jule::Ptr<_228d31971_Else> _69317_def = nullptr;
	jule::Bool _69417_def_not_last = false;
	while (_69134_tokens.len() > 0LL) {
		{
			_228d7aadb_Token _69621_tok = _69134_tokens[0LL];
			if (_69621_tok._field_id == 18LLU) {
				_69134_tokens=_69134_tokens.slice(1LL);
				goto _iter_next_5065735952;
			}
			if ((_69621_tok._field_id != 7LLU) || (_69621_tok._field_kind != jule::Str("|", 1))) {
				(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				goto _iter_end_5065735952;
			}
			jule::Ptr<_228d31971_Case> _70722_c;
			jule::Bool _70725_is_default;
			std::tie(_70722_c,_70725_is_default) = (*this)._method_build_case(_69134_tokens,_69151_type_match);
			if (_70725_is_default) {
				(*(_70722_c))._field_token=_69621_tok;
				if (_69317_def == nullptr) {
					_69317_def=jule::new_struct<_228d31971_Else>(new( std::nothrow ) _228d31971_Else((*(_70722_c))._field_token,(*(_70722_c))._field_scope));
				} else {
					(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				}
			} else {
				_69417_def_not_last=_69417_def_not_last || (_69317_def != nullptr);
				_69217_cases.push(_70722_c);
			}
		}
	_iter_next_5065735952:;
	}
	_iter_end_5065735952:;
	if (_69417_def_not_last) {
		(*this)._method_push_err((*(_69317_def))._field_token,jule::Str("default case should be last case", 32));
	}
	return std::make_tuple(_69217_cases,_69317_def);
}



inline jule::Ptr<_228d31971_MatchCase> _228d45c71_ScopeParser::_method_build_match_case(jule::Slice<_228d7aadb_Token> _73139_tokens) {
	jule::Ptr<_228d31971_MatchCase> _73217_m = jule::new_struct<_228d31971_MatchCase>(new( std::nothrow ) _228d31971_MatchCase(_73139_tokens[0LL],jule::Bool(),jule::Ptr<_228d31971_Expr>(),jule::Slice<jule::Ptr<_228d31971_Case>>(),jule::Ptr<_228d31971_Else>()));
	_73139_tokens=_73139_tokens.slice(1LL);
	if ((_73139_tokens.len() > 0LL) && (_73139_tokens[0LL]._field_id == 10LLU)) {
		(*(_73217_m))._field_type_match=true;
		_73139_tokens=_73139_tokens.slice(1LL);
	}
	jule::Slice<_228d7aadb_Token> _74217_expr_tokens = _229a547e7_get_block_expr(_73139_tokens);
	if (_74217_expr_tokens.len() > 0LL) {
		(*(_73217_m))._field_expr=(*((*this)._field_p))._method_build_expr(_74217_expr_tokens);
	} else if ((*(_73217_m))._field_type_match) {
		(*this)._method_push_err((*(_73217_m))._field_token,jule::Str("expression missing", 18));
	}
	jule::I64 _74917_i = _74217_expr_tokens.len();
	jule::Slice<_228d7aadb_Token> _75017_block_toks = _229a51c34_range(_74917_i,jule::Str("{", 1),jule::Str("}", 1),_73139_tokens);
	if (_75017_block_toks == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_73217_m))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_73217_m))._field_cases,(*(_73217_m))._field_default) = (*this)._method_build_cases(_75017_block_toks,(*(_73217_m))._field_type_match);
	return _73217_m;
}



inline jule::Ptr<_228d31971_ScopeTree> _228d45c71_ScopeParser::_method_build_scope_st(jule::Slice<_228d7aadb_Token> _76237_tokens) {
	jule::Bool _76317_is_unsafe = false;
	jule::Bool _76417_is_deferred = false;
	_228d7aadb_Token _76517_token = _76237_tokens[0LL];
	if (_76517_token._field_id == 35LLU) {
		_76317_is_unsafe=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
		_76517_token=_76237_tokens[0LL];
		if (_76517_token._field_id == 37LLU) {
			_76417_is_deferred=true;
			_76237_tokens=_76237_tokens.slice(1LL);
			if (_76237_tokens.len() == 0LL) {
				(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
	} else if (_76517_token._field_id == 37LLU) {
		_76417_is_deferred=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
	}
	jule::Int _79117_i = 0LL;
	jule::Slice<_228d7aadb_Token> _79217_scope_tokens = _229a51c34_range(_79117_i,jule::Str("{", 1),jule::Str("}", 1),_76237_tokens);
	if (_79217_scope_tokens == nullptr) {
		(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
		return nullptr;
	} else if (_79117_i < _76237_tokens.len()) {
		(*this)._method_push_err(_76237_tokens[_79117_i],jule::Str("invalid syntax", 14));
	}
	jule::Ptr<_228d31971_ScopeTree> _79917_scope = (*this)._method_build_scope(_79217_scope_tokens);
	(*(_79917_scope))._field_unsafety=_76317_is_unsafe;
	(*(_79917_scope))._field_deferred=_76417_is_deferred;
	return _79917_scope;
}



inline jule::Ptr<_228d31971_LabelSt> _228d45c71_ScopeParser::_method_build_label_st(jule::Slice<_228d7aadb_Token>& _80538_tokens) {
	jule::Ptr<_228d31971_LabelSt> _80617_lbl = jule::new_struct<_228d31971_LabelSt>(new( std::nothrow ) _228d31971_LabelSt(_80538_tokens[0LL],_80538_tokens[0LL]._field_kind));
	if (_80538_tokens.len() > 2LL) {
		_80538_tokens=_80538_tokens.slice(2LL);
		(*this)._method_insert_as_next(_80538_tokens);
	}
	return _80617_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _228d45c71_ScopeParser::_method_build_id_st(jule::Slice<_228d7aadb_Token>& _82035_tokens) {
	jule::Bool _82064_ok = jule::Bool();
	if (_82035_tokens.len() == 1LL) {
		return std::make_tuple(jule::Any(),_82064_ok);
	}
	_228d7aadb_Token _82517_token = _82035_tokens[1LL];
	{
		auto &_match_expr{ _82517_token._field_id };
		
		if (_match_expr == 11LLU) {
			_case_begin_5065804464:;
			{
				_82064_ok = true;
				return std::make_tuple(jule::Any((*this)._method_build_label_st(_82035_tokens)),_82064_ok);
			}
		}
		_match_end_5065803376:;
	}
	return std::make_tuple(jule::Any(),_82064_ok);
}



inline jule::Ptr<_228e13aa8_AssignInfo> _228d45c71_ScopeParser::_method_build_assign_info(jule::Slice<_228d7aadb_Token>& _83441_tokens) {
	jule::Ptr<_228e13aa8_AssignInfo> _83517_info = jule::new_struct<_228e13aa8_AssignInfo>(new( std::nothrow ) _228e13aa8_AssignInfo(jule::Slice<_228d7aadb_Token>(),jule::Slice<_228d7aadb_Token>(),_228d7aadb_Token(),true));
	jule::Int _83817_brace_n = 0LL;
	{
		auto &expr = _83441_tokens;
		auto it = expr.begin();
		_iter_begin_5065811648:;
		if (it != expr.end()) {
			jule::Int _228d45c71_i = it - expr.begin();
			_228d7aadb_Token _228d45c71_token = *it;
			{
				if (_228d45c71_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _228d45c71_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5065816320:;
							{
								(_83817_brace_n)++;
							}
						}
						else {
							_case_begin_5065814528:;
							{
								(_83817_brace_n)--;
							}
						}
						_match_end_5065814640:;
					}
				}
				{
					
					if (_83817_brace_n > 0LL) {
						_case_begin_5065817840:;
						{
							goto _iter_next_5065811648;
						}
					}
					else if (_228d45c71_token._field_id != 7LLU) {
						_case_begin_5065816832:;
						{
							goto _iter_next_5065811648;
						}
					}
					else if ((!(_228d7aadb_is_assign_op(_228d45c71_token._field_kind)))) {
						_case_begin_5065816928:;
						{
							goto _iter_next_5065811648;
						}
					}
					_match_end_5065817696:;
				}
				(*(_83517_info))._field_l=_83441_tokens.slice(0LL,_228d45c71_i);
				if ((*(_83517_info))._field_l.len() == 0LL) {
					(*(_83517_info))._field_ok=false;
				}
				(*(_83517_info))._field_setter=_228d45c71_token;
				if ((_228d45c71_i + 1LL) >= _83441_tokens.len()) {
					(*(_83517_info))._field_r=nullptr;
					(*(_83517_info))._field_ok=_228d7aadb_is_postfix_op((*(_83517_info))._field_setter._field_kind);
					goto _iter_end_5065811648;
				}
				(*(_83517_info))._field_r=_83441_tokens.slice(_228d45c71_i + 1LL);
				if (_228d7aadb_is_postfix_op((*(_83517_info))._field_setter._field_kind)) {
					if ((*(_83517_info))._field_r.len() > 0LL) {
						(*this)._method_push_err((*(_83517_info))._field_r[0LL],jule::Str("invalid syntax", 14));
						(*(_83517_info))._field_r=nullptr;
					}
				}
				goto _iter_end_5065811648;
			}
			_iter_next_5065811648:;
			++it;
			_228d45c71_i++;
			goto _iter_begin_5065811648;
		}
		_iter_end_5065811648:;
	}
	return _83517_info;
}



inline jule::Ptr<_228d31971_AssignLeft> _228d45c71_ScopeParser::_method_build_assign_l(jule::Slice<_228d7aadb_Token>& _88138_tokens) {
	jule::Ptr<_228d31971_AssignLeft> _88217_l = jule::new_struct<_228d31971_AssignLeft>(new( std::nothrow ) _228d31971_AssignLeft(_88138_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ptr<_228d31971_Expr>()));
	if (_88138_tokens[0LL]._field_id == 2LLU) {
		(*(_88217_l))._field_ident=(*(_88217_l))._field_token._field_kind;
	}
	(*(_88217_l))._field_expr=(*((*this)._field_p))._method_build_expr(_88138_tokens);
	return _88217_l;
}



inline jule::Slice<jule::Ptr<_228d31971_AssignLeft>> _228d45c71_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_228d7aadb_Token>>& _89439_parts) {
	jule::Slice<jule::Ptr<_228d31971_AssignLeft>> _89517_lefts = nullptr;
	{
		auto &expr = _89439_parts;
		auto it = expr.begin();
		_iter_begin_5065841168:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _228d45c71_part = *it;
			{
				jule::Ptr<_228d31971_AssignLeft> _89721_l = (*this)._method_build_assign_l(_228d45c71_part);
				_89517_lefts.push(_89721_l);
			}
			_iter_next_5065841168:;
			++it;
			goto _iter_begin_5065841168;
		}
		_iter_end_5065841168:;
	}
	return _89517_lefts;
}



inline std::tuple<jule::Ptr<_228d31971_AssignSt>,jule::Bool> _228d45c71_ScopeParser::_method_build_plain_assign(jule::Slice<_228d7aadb_Token>& _90442_tokens) {
	jule::Ptr<_228e13aa8_AssignInfo> _90517_info = (*this)._method_build_assign_info(_90442_tokens);
	if ((!((*(_90517_info))._field_ok))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_228d31971_AssignSt> _91017_assign = jule::new_struct<_228d31971_AssignSt>(new( std::nothrow ) _228d31971_AssignSt(jule::Bool(),(*(_90517_info))._field_setter,jule::Slice<jule::Ptr<_228d31971_AssignLeft>>(),jule::Ptr<_228d31971_Expr>()));
	jule::Slice<jule::Slice<_228d7aadb_Token>> _91418_parts;
	jule::Slice<_2276bcb9e_Log> _91425_errs;
	std::tie(_91418_parts,_91425_errs) = _229a51c34_parts((*(_90517_info))._field_l,8LLU,true);
	if (_91425_errs.len() > 0LL) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_91425_errs);
		return std::make_tuple(nullptr,false);
	}
	(*(_91017_assign))._field_left=(*this)._method_build_assign_ls(_91418_parts);
	if ((*(_90517_info))._field_r != nullptr) {
		(*(_91017_assign))._field_right=(*((*this)._field_p))._method_build_expr((*(_90517_info))._field_r);
	}
	return std::make_tuple(_91017_assign,true);
}



inline std::tuple<jule::Ptr<_228d31971_AssignSt>,jule::Bool> _228d45c71_ScopeParser::_method_build_decl_assign(jule::Slice<_228d7aadb_Token> _92840_tokens) {
	if (_92840_tokens.len() < 1LL) {
		return std::make_tuple(nullptr,false);
	}
	_92840_tokens=_92840_tokens.slice(1LL);
	_228d7aadb_Token _93417_token = _92840_tokens[0LL];
	if ((_93417_token._field_id != 3LLU) || (_93417_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_228d31971_AssignSt> _93917_assign = jule::new_struct<_228d31971_AssignSt>(new( std::nothrow ) _228d31971_AssignSt(true,_228d7aadb_Token(),jule::Slice<jule::Ptr<_228d31971_AssignLeft>>(),jule::Ptr<_228d31971_Expr>()));
	jule::Int _94317_i = 0LL;
	jule::Slice<_228d7aadb_Token> _94417_rang = _229a51c34_range(_94317_i,jule::Str("(", 1),jule::Str(")", 1),_92840_tokens);
	if (_94417_rang == nullptr) {
		(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(nullptr,false);
	} else if ((_94317_i + 1LL) < _92840_tokens.len()) {
		(*(_93917_assign))._field_setter=_92840_tokens[_94317_i];
		(_94317_i)++;
		jule::Slice<_228d7aadb_Token> _95121_expr_tokens = _92840_tokens.slice(_94317_i);
		(*(_93917_assign))._field_right=(*((*this)._field_p))._method_build_expr(_95121_expr_tokens);
	}
	jule::Slice<jule::Slice<_228d7aadb_Token>> _95618_parts;
	jule::Slice<_2276bcb9e_Log> _95625_errs;
	std::tie(_95618_parts,_95625_errs) = _229a51c34_parts(_94417_rang,8LLU,true);
	if (_95625_errs.len() > 0LL) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_95625_errs);
		return std::make_tuple(nullptr,false);
	}
	{
		auto &expr = _95618_parts;
		auto it = expr.begin();
		_iter_begin_5065878496:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _228d45c71_part = *it;
			{
				jule::Bool _96321_is_mut = false;
				jule::Bool _96421_is_ref = false;
				_93417_token=_228d45c71_part[0LL];
				if (_93417_token._field_id == 36LLU) {
					_96321_is_mut=true;
					_228d45c71_part=_228d45c71_part.slice(1LL);
					if (_228d45c71_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_5065878496;
					}
				}
				if ((_228d45c71_part[0LL]._field_id == 7LLU) && (_228d45c71_part[0LL]._field_kind == jule::Str("&", 1))) {
					_96421_is_ref=true;
					_228d45c71_part=_228d45c71_part.slice(1LL);
					if (_228d45c71_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_5065878496;
					}
				}
				if (((_228d45c71_part[0LL]._field_id != 2LLU) && (_228d45c71_part[0LL]._field_id != 3LLU)) && (_228d45c71_part[0LL]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
					goto _iter_next_5065878496;
				}
				jule::Ptr<_228d31971_AssignLeft> _99221_l = (*this)._method_build_assign_l(_228d45c71_part);
				(*(_99221_l))._field_mutable=_96321_is_mut;
				(*(_99221_l))._field_reference=_96421_is_ref;
				(*(_93917_assign))._field_left = jule::alloc_for_append((*(_93917_assign))._field_left,1);(*(_93917_assign))._field_left.push(_99221_l);
			}
			_iter_next_5065878496:;
			++it;
			goto _iter_begin_5065878496;
		}
		_iter_end_5065878496:;
	}
	return std::make_tuple(_93917_assign,true);
}



inline std::tuple<jule::Ptr<_228d31971_AssignSt>,jule::Bool> _228d45c71_ScopeParser::_method_build_assign_st(jule::Slice<_228d7aadb_Token>& _100139_tokens) {
	jule::Ptr<_228d31971_AssignSt> _100158_st = jule::Ptr<_228d31971_AssignSt>();
	jule::Bool _100173_ok = jule::Bool();
	if ((!(_228e13aa8_check_assign_tokens(_100139_tokens)))) {
		_100158_st = nullptr;
		_100173_ok = false;
		return std::make_tuple(_100158_st,_100173_ok);
	}
	{
		auto &_match_expr{ _100139_tokens[0LL]._field_id };
		
		if (_match_expr == 34LLU) {
			_case_begin_5065906608:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_decl_assign(_100139_tokens);
			}
		}
		else {
			_case_begin_5065903904:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_plain_assign(_100139_tokens);
			}
		}
		_match_end_5065905264:;
	}
	return std::make_tuple(_100158_st,_100173_ok);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_use_expr(jule::Slice<_228d7aadb_Token>& _101438_tokens) {
	if (_101438_tokens.len() == 1LL) {
		(*this)._method_push_err(_101438_tokens[0LL],jule::Str("expression missing", 18));
		return jule::Any(nullptr);
	}
	jule::Ptr<_228d31971_UseExpr> _102017_ue = jule::new_struct<_228d31971_UseExpr>(new( std::nothrow ) _228d31971_UseExpr(_101438_tokens[0LL],jule::Ptr<_228d31971_Expr>()));
	_101438_tokens=_101438_tokens.slice(1LL);
	(*(_102017_ue))._field_expr=(*((*this)._field_p))._method_build_expr(_101438_tokens);
	return jule::Any(_102017_ue);
}



inline jule::Any _228d45c71_ScopeParser::_method_build_st(jule::Ptr<_228d45c71_Stmt>& _102932_st) {
	_228d7aadb_Token _103017_token = (*(_102932_st))._field_tokens[0LL];
	if (_103017_token._field_id == 2LLU) {
		jule::Any _103222_s;
		jule::Bool _103225_ok;
		std::tie(_103222_s,_103225_ok) = (*this)._method_build_id_st((*(_102932_st))._field_tokens);
		if (_103225_ok) {
			return _103222_s;
		}
	}
	jule::Ptr<_228d31971_AssignSt> _103818_s;
	jule::Bool _103821_ok;
	std::tie(_103818_s,_103821_ok) = (*this)._method_build_assign_st((*(_102932_st))._field_tokens);
	if (_103821_ok) {
		return jule::Any(_103818_s);
	}
	{
		auto &_match_expr{ _103017_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_5065929008:;
			{
				return (*this)._method_build_use_expr((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 38LLU || _match_expr == 9LLU || _match_expr == 34LLU || _match_expr == 36LLU) {
			_case_begin_5065929568:;
			{
				return (*this)._method_build_var_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_5065924768:;
			{
				return (*this)._method_build_ret_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_5065928640:;
			{
				return (*this)._method_buid_iter_st(_102932_st);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_5065928736:;
			{
				return (*this)._method_build_break_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_5065927920:;
			{
				return (*this)._method_build_cont_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_5065928016:;
			{
				return (*this)._method_build_if_else_chain((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_5065928112:;
			{
				return (*this)._method_build_comment_st(_103017_token);
			}
		}
		else if (_match_expr == 26LLU) {
			_case_begin_5065928208:;
			{
				return (*this)._method_build_co_call_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 22LLU) {
			_case_begin_5065928304:;
			{
				return (*this)._method_build_goto_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 32LLU) {
			_case_begin_5065928400:;
			{
				return (*this)._method_build_fall_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5065929728:;
			{
				return (*this)._method_build_type_alias_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 27LLU) {
			_case_begin_5065929824:;
			{
				return jule::Any((*this)._method_build_match_case((*(_102932_st))._field_tokens));
			}
		}
		else if (_match_expr == 35LLU || _match_expr == 37LLU) {
			_case_begin_5065929920:;
			{
				return jule::Any((*this)._method_build_scope_st((*(_102932_st))._field_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5065930016:;
			{
				if (_103017_token._field_kind == jule::Str("{", 1)) {
					return jule::Any((*this)._method_build_scope_st((*(_102932_st))._field_tokens));
				}
			}
		}
		else {
			_case_begin_5065923504:;
			{
				jule::Ptr<_228d31971_Expr> _109921_expr = (*((*this)._field_p))._method_build_expr((*(_102932_st))._field_tokens);
				if (_109921_expr != nullptr) {
					return jule::Any(_109921_expr);
				}
			}
		}
		_match_end_5065925376:;
	}
	(*this)._method_push_err(_103017_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _228d45c71_ScopeParser::_method_build(jule::Slice<_228d7aadb_Token>& _110929_tokens,jule::Ptr<_228d31971_ScopeTree>& _110951_s) {
	if (_110951_s == nullptr) {
		return;
	}
	(*this)._field_stmts=_228d45c71_split_stmts(_110929_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_110951_s;
	while ((!((*this)._method_is_last_st())) && (!((*this)._method_finished()))) {
		{
			jule::Ptr<_228d45c71_Stmt> _111821_st = (*this)._method_next();
			jule::Any _111921_data = (*this)._method_build_st(_111821_st);
			if (_111921_data != nullptr) {
				(*((*this)._field_s))._field_stmts = jule::alloc_for_append((*((*this)._field_s))._field_stmts,1);(*((*this)._field_s))._field_stmts.push(_111921_data);
			}
			if ((*this)._method_stopped()) {
				goto _iter_end_5065956384;
			}
		}
	_iter_next_5065956384:;
	}
	_iter_end_5065956384:;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d45c71_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _229a547e7_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _229a547e7_ExprBuilder::_method_push_err(_228d7aadb_Token _24227_token,jule::Str _24241_fmt,jule::Slice<jule::Any> _24254_args) {
	(*((*this)._field_p))._method_push_err(_24227_token,_24241_fmt,_24254_args);
}



inline void _229a547e7_ExprBuilder::_method_push_suggestion(jule::Str _24734_fmt,jule::Slice<jule::Any> _24747_args) {
	(*((*this)._field_p))._method_push_suggestion(_24734_fmt,_24747_args);
}



inline jule::Ptr<_228d31971_TupleExpr> _229a547e7_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_228d7aadb_Token>>& _25135_parts) {
	jule::Ptr<_228d31971_TupleExpr> _25217_tuple = jule::new_struct<_228d31971_TupleExpr>(new( std::nothrow ) _228d31971_TupleExpr(jule::Slice<jule::Ptr<_228d31971_Expr>>::alloc(0LL,static_cast<jule::I64>(_25135_parts.len()))));
	{
		auto &expr = _25135_parts;
		auto it = expr.begin();
		_iter_begin_5065992512:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a547e7_part = *it;
			{
				(*(_25217_tuple))._field_expr = jule::alloc_for_append((*(_25217_tuple))._field_expr,1);(*(_25217_tuple))._field_expr.push((*this)._method_build_from_tokens(_229a547e7_part));
			}
			_iter_next_5065992512:;
			++it;
			goto _iter_begin_5065992512;
		}
		_iter_end_5065992512:;
	}
	return _25217_tuple;
}



inline jule::Ptr<_228d31971_LitExpr> _229a547e7_ExprBuilder::_method_build_lit(_228d7aadb_Token _26128_token) {
	return jule::new_struct<_228d31971_LitExpr>(new( std::nothrow ) _228d31971_LitExpr(_26128_token,_26128_token._field_kind));
}



inline jule::Ptr<_228d31971_TypeDecl> _229a547e7_ExprBuilder::_method_build_primitive_type(_228d7aadb_Token& _26840_token) {
	return _1e5543d98_build_prim_type(_26840_token);
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_single(_228d7aadb_Token _27235_token) {
	{
		auto &_match_expr{ _27235_token._field_id };
		
		if (_match_expr == 6LLU) {
			_case_begin_5066004288:;
			{
				return jule::Any((*this)._method_build_lit(_27235_token));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5066004384:;
			{
				if (_27235_token._field_kind == jule::Str("...", 3)) {
					return jule::Any(jule::new_struct<_228d31971_VariadicExpr>(new( std::nothrow ) _228d31971_VariadicExpr(_27235_token,jule::Any())));
				}
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 28LLU || _match_expr == 40LLU) {
			_case_begin_5066004528:;
			{
				return jule::Any(_229a547e7_build_ident_expr(_27235_token));
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_5066004624:;
			{
				return jule::Any((*this)._method_build_primitive_type(_27235_token));
			}
		}
		_match_end_5066004064:;
	}
	(*this)._method_push_err(_27235_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_228d31971_IdentExpr> _229a547e7_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_228d7aadb_Token>& _29646_tokens) {
	if (_29646_tokens[0LL]._field_id != 31LLU) {
		return nullptr;
	} else if (_29646_tokens[1LL]._field_id != 20LLU) {
		(*this)._method_push_err(_29646_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_228d7aadb_Token _30417_token = _29646_tokens[2LL];
	if (_30417_token._field_id != 2LLU) {
		(*this)._method_push_err(_29646_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228d31971_IdentExpr> _31017_expr = _229a547e7_build_ident_expr(_30417_token);
	(*(_31017_expr))._field_cpp_linked=true;
	return _31017_expr;
}



inline jule::Ptr<_228d31971_UnaryExpr> _229a547e7_ExprBuilder::_method_build_unary(jule::Slice<_228d7aadb_Token> _31534_tokens) {
	_228d7aadb_Token _31617_op = _31534_tokens[0LL];
	if (_31534_tokens.len() == 1LL) {
		(*this)._method_push_err(_31617_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((!(_228d7aadb_is_unary_op(_31617_op._field_kind)))) {
		(*this)._method_push_err(_31617_op,jule::Str("operator @ is not unary", 23),jule::Slice<jule::Any>({jule::Any(_31617_op._field_kind)}));
		return nullptr;
	}
	_31534_tokens=_31534_tokens.slice(1LL);
	return jule::new_struct<_228d31971_UnaryExpr>(new( std::nothrow ) _228d31971_UnaryExpr(_31617_op,(*this)._method_build(_31534_tokens)));
}



inline jule::Ptr<_228d31971_SubIdentExpr> _229a547e7_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_228d7aadb_Token> _33642_tokens) {
	jule::I64 _33717_i = _33642_tokens.len() - 1LL;
	_228d7aadb_Token _33817_ident_token = _33642_tokens[_33717_i];
	(_33717_i)--;
	_33642_tokens=_33642_tokens.slice(0LL,_33717_i);
	if (_33642_tokens.len() == 0LL) {
		(*this)._method_push_err(_33817_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_228d31971_SubIdentExpr>(new( std::nothrow ) _228d31971_SubIdentExpr(jule::Bool(),(*this)._method_build(_33642_tokens),_33817_ident_token));
}



inline jule::Ptr<_228d31971_NsSelectionExpr> _229a547e7_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_228d7aadb_Token>& _35142_tokens) {
	jule::Ptr<_228d31971_NsSelectionExpr> _35217_ns = jule::new_struct<_228d31971_NsSelectionExpr>(new( std::nothrow ) _228d31971_NsSelectionExpr());
	{
		auto &expr = _35142_tokens;
		auto it = expr.begin();
		_iter_begin_5066047072:;
		if (it != expr.end()) {
			jule::Int _229a547e7_i = it - expr.begin();
			_228d7aadb_Token _229a547e7_token = *it;
			{
				if (jule::unsafe_mod(_229a547e7_i,2LL) == 0LL) {
					if (_229a547e7_token._field_id != 2LLU) {
						(*this)._method_push_err(_229a547e7_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					}
					(*(_35217_ns))._field_ns = jule::alloc_for_append((*(_35217_ns))._field_ns,1);(*(_35217_ns))._field_ns.push(_229a547e7_token);
				} else if (_229a547e7_token._field_id != 23LLU) {
					(*this)._method_push_err(_229a547e7_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>());
				}
			}
			_iter_next_5066047072:;
			++it;
			_229a547e7_i++;
			goto _iter_begin_5066047072;
		}
		_iter_end_5066047072:;
	}
	(*(_35217_ns))._field_ident=(*(_35217_ns))._field_ns[(*(_35217_ns))._field_ns.len() - 1LL];
	(*(_35217_ns))._field_ns=(*(_35217_ns))._field_ns.slice(0LL,(*(_35217_ns))._field_ns.len() - 1LL);
	return _35217_ns;
}



inline jule::Ptr<_228d31971_TypeDecl> _229a547e7_ExprBuilder::_method_build_type(jule::Slice<_228d7aadb_Token>& _37034_tokens) {
	jule::Int _37117_i = 0LL;
	jule::Ptr<_228d31971_TypeDecl> _37218_t;
	jule::Bool _37221_ok;
	std::tie(_37218_t,_37221_ok) = (*((*this)._field_p))._method_build_type(_37034_tokens,(&(_37117_i)),false);
	if ((!(_37221_ok))) {
		(*this)._method_push_err(_37034_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_37117_i < _37034_tokens.len()) {
		(*this)._method_push_err(_37034_tokens[_37117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _37218_t;
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_sub_ident(jule::Slice<_228d7aadb_Token>& _38439_tokens) {
	jule::I64 _38513_i = _38439_tokens.len() - 2LL;
	_228d7aadb_Token _38613_token = _38439_tokens[_38513_i];
	{
		auto &_match_expr{ _38613_token._field_id };
		
		if (_match_expr == 20LLU) {
			_case_begin_5066073520:;
			{
				return jule::Any((*this)._method_build_obj_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 23LLU) {
			_case_begin_5066073616:;
			{
				return jule::Any((*this)._method_build_ns_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5066073712:;
			{
				if (_38613_token._field_kind == jule::Str("]", 1)) {
					return jule::Any((*this)._method_build_type(_38439_tokens));
				}
			}
		}
		_match_end_5066073312:;
	}
	(*this)._method_push_err(_38613_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_228d31971_VariadicExpr> _229a547e7_ExprBuilder::_method_build_variadic(jule::Slice<_228d7aadb_Token> _40537_tokens) {
	_228d7aadb_Token _40617_token = _40537_tokens[_40537_tokens.len() - 1LL];
	_40537_tokens=_40537_tokens.slice(0LL,_40537_tokens.len() - 1LL);
	return jule::new_struct<_228d31971_VariadicExpr>(new( std::nothrow ) _228d31971_VariadicExpr(_40617_token,(*this)._method_build(_40537_tokens)));
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_op_right(jule::Slice<_228d7aadb_Token>& _41438_tokens) {
	_228d7aadb_Token _41517_token = _41438_tokens[_41438_tokens.len() - 1LL];
	{
		auto &_match_expr{ _41517_token._field_kind };
		
		if (_match_expr == jule::Str("!", 1)) {
			_case_begin_5066088912:;
			{
				_41438_tokens=_41438_tokens.slice(0LL,_41438_tokens.len() - 1LL);
				jule::Any _41921_d = (*this)._method_build(_41438_tokens);
				if (_41921_d == nullptr) {
					return jule::Any(nullptr);
				}
				{
					auto &_match_expr{ _41921_d };
					
					if (_match_expr.type_is<jule::Ptr<_228d31971_FnCallExpr>>()) {
						_case_begin_5066093088:;
						{
							(*(_41921_d.operator jule::Ptr<_228d31971_FnCallExpr>()))._field_exception=jule::new_struct<_228d31971_ScopeTree>(new( std::nothrow ) _228d31971_ScopeTree(jule::Ptr<_228d31971_ScopeTree>(),jule::Bool(),true,jule::Slice<jule::Any>()));
							return _41921_d;
						}
					}
					_match_end_5066092336:;
				}
			}
		}
		else if (_match_expr == jule::Str("...", 3)) {
			_case_begin_5066089088:;
			{
				return jule::Any((*this)._method_build_variadic(_41438_tokens));
			}
		}
		_match_end_5066088512:;
	}
	(*this)._method_push_err(_41517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_between_parentheses(jule::Slice<_228d7aadb_Token> _43948_tokens) {
	_228d7aadb_Token _44013_token = _43948_tokens[0LL];
	_43948_tokens=_43948_tokens.slice(1LL,_43948_tokens.len() - 1LL);
	if (_43948_tokens.len() == 0LL) {
		(*this)._method_push_err(_44013_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_43948_tokens);
}



inline jule::Ptr<_228d31971_CastExpr> _229a547e7_ExprBuilder::_method_try_build_cast(jule::Slice<_228d7aadb_Token>& _45038_tokens) {
	jule::Int _45117_range_n = 0LL;
	{
		auto &expr = _45038_tokens;
		auto it = expr.begin();
		_iter_begin_5066108016:;
		if (it != expr.end()) {
			jule::Int _229a547e7_i = it - expr.begin();
			_228d7aadb_Token &_229a547e7_token = *it;
			{
				if (_229a547e7_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _229a547e7_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5066112624:;
							{
								(_45117_range_n)++;
								goto _iter_next_5066108016;
							}
						}
						else {
							_case_begin_5066110832:;
							{
								(_45117_range_n)--;
							}
						}
						_match_end_5066110944:;
					}
				}
				if (_45117_range_n > 0LL) {
					goto _iter_next_5066108016;
				} else if ((_229a547e7_i + 1LL) == _45038_tokens.len()) {
					return nullptr;
				}
				jule::Slice<_228d7aadb_Token> _47221_type_tokens = _45038_tokens.slice(0LL,_229a547e7_i + 1LL);
				jule::Slice<_228d7aadb_Token> _47321_expr_tokens = _45038_tokens.slice(_229a547e7_i + 1LL);
				if (_47321_expr_tokens.len() == 0LL) {
					return nullptr;
				}
				_228d7aadb_Token _48017_tok = _47321_expr_tokens[0LL];
				if ((_48017_tok._field_id != 3LLU) || (_48017_tok._field_kind != jule::Str("(", 1))) {
					return nullptr;
				}
				jule::Ptr<_228d31971_CastExpr> _48521_cast = jule::new_struct<_228d31971_CastExpr>(new( std::nothrow ) _228d31971_CastExpr());
				if (_47321_expr_tokens.len() == 2LL) {
					(*this)._method_push_err(_47321_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>());
				}
				if (_47221_type_tokens.len() == 2LL) {
					(*this)._method_push_err(_47221_type_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>());
				} else {
					_47221_type_tokens=_47221_type_tokens.slice(1LL,_47221_type_tokens.len() - 1LL);
					jule::Int _49925_type_index = 0LL;
					jule::Ptr<_228d31971_TypeDecl> _50026_t;
					jule::Bool _50029_ok;
					std::tie(_50026_t,_50029_ok) = (*((*this)._field_p))._method_build_type(_47221_type_tokens,(&(_49925_type_index)),true);
					if (_50029_ok && (_49925_type_index < _47221_type_tokens.len())) {
						(*this)._method_push_err(_47221_type_tokens[_49925_type_index],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					} else if ((!(_50029_ok))) {
						return _48521_cast;
					}
					(*(_48521_cast))._field_kind=_50026_t;
					if (_47321_expr_tokens.len() > 2LL) {
						jule::Int _51029_j = 0LL;
						_229a51c34_range(_51029_j,jule::Str("(", 1),jule::Str(")", 1),_47321_expr_tokens);
						if (_51029_j < _47321_expr_tokens.len()) {
							return nullptr;
						}
						_47321_expr_tokens=_47321_expr_tokens.slice(0LL,_51029_j);
						(*(_48521_cast))._field_expr=(*this)._method_build(_47321_expr_tokens);
					}
				}
				return _48521_cast;
			}
			_iter_next_5066108016:;
			++it;
			_229a547e7_i++;
			goto _iter_begin_5066108016;
		}
		_iter_end_5066108016:;
	}
	return nullptr;
}



inline void _229a547e7_ExprBuilder::_method_push_arg(jule::Slice<jule::Ptr<_228d31971_Expr>>& _52532_args,jule::Slice<_228d7aadb_Token> _52551_tokens,_228d7aadb_Token _52568_err_token) {
	if (_52551_tokens.len() == 0LL) {
		(*this)._method_push_err(_52568_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_52532_args.push((*this)._method_build_from_tokens(_52551_tokens));
}



inline jule::Slice<jule::Ptr<_228d31971_Expr>> _229a547e7_ExprBuilder::_method_build_args(jule::Slice<_228d7aadb_Token> _53433_tokens) {
	if (_53433_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_228d31971_Expr>> _54017_args = nullptr;
	jule::Int _54117_last = 0LL;
	jule::Int _54217_range_n = 0LL;
	_53433_tokens=_53433_tokens.slice(1LL,_53433_tokens.len() - 1LL);
	{
		auto &expr = _53433_tokens;
		auto it = expr.begin();
		_iter_begin_5066152064:;
		if (it != expr.end()) {
			jule::Int _229a547e7_i = it - expr.begin();
			_228d7aadb_Token &_229a547e7_token = *it;
			{
				if (_229a547e7_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _229a547e7_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5066156928:;
							{
								(_54217_range_n)++;
							}
						}
						else {
							_case_begin_5066155136:;
							{
								(_54217_range_n)--;
							}
						}
						_match_end_5066155248:;
					}
				}
				if ((_54217_range_n > 0LL) || (_229a547e7_token._field_id != 8LLU)) {
					goto _iter_next_5066152064;
				}
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last,_229a547e7_i),_229a547e7_token);
				_54117_last=static_cast<jule::Int>(_229a547e7_i + 1LL);
			}
			_iter_next_5066152064:;
			++it;
			_229a547e7_i++;
			goto _iter_begin_5066152064;
		}
		_iter_end_5066152064:;
	}
	if (_54117_last < _53433_tokens.len()) {
		if (_54117_last == 0LL) {
			if (_53433_tokens.len() > 0LL) {
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last]);
			}
		} else {
			(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last - 1LL]);
		}
	}
	return _54017_args;
}



inline jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _229a547e7_ExprBuilder::_method_build_call_generics(jule::Slice<_228d7aadb_Token> _57742_tokens) {
	if (_57742_tokens.len() == 0LL) {
		return nullptr;
	}
	_57742_tokens=_57742_tokens.slice(1LL,_57742_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_228d7aadb_Token>> _58318_parts;
	jule::Slice<_2276bcb9e_Log> _58325_errs;
	std::tie(_58318_parts,_58325_errs) = _229a51c34_parts(_57742_tokens,8LLU,true);
	jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _58417_generics = jule::Slice<jule::Ptr<_228d31971_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_58318_parts.len()));
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_58325_errs);
	{
		auto &expr = _58318_parts;
		auto it = expr.begin();
		_iter_begin_5066171232:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a547e7_part = *it;
			{
				if (_229a547e7_part.len() == 0LL) {
					goto _iter_next_5066171232;
				}
				jule::Int _59021_j = 0LL;
				jule::Ptr<_228d31971_TypeDecl> _59122_generic;
				std::tie(_59122_generic,std::ignore) = (*((*this)._field_p))._method_build_type(_229a547e7_part,(&(_59021_j)),true);
				if (_59021_j < _229a547e7_part.len()) {
					(*this)._method_push_err(_229a547e7_part[_59021_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_58417_generics.push(_59122_generic);
			}
			_iter_next_5066171232:;
			++it;
			goto _iter_begin_5066171232;
		}
		_iter_end_5066171232:;
	}
	return _58417_generics;
}



inline jule::Ptr<_228d31971_FnCallExpr> _229a547e7_ExprBuilder::_method_build_fn_call(_228d7aadb_Token& _60137_token,jule::Ptr<_229a547e7_CallData>& _60156_data) {
	return jule::new_struct<_228d31971_FnCallExpr>(new( std::nothrow ) _228d31971_FnCallExpr(_60137_token,(*this)._method_build_from_tokens((*(_60156_data))._field_expr_tokens),(*this)._method_build_call_generics((*(_60156_data))._field_generics_tokens),(*this)._method_build_args((*(_60156_data))._field_args_tokens),jule::Ptr<_228d31971_ScopeTree>()));
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_parentheses_range(jule::Slice<_228d7aadb_Token>& _61047_tokens) {
	_228d7aadb_Token _61117_token = _61047_tokens[0LL];
	{
		auto &_match_expr{ _61117_token._field_id };
		
		if (_match_expr == 3LLU) {
			_case_begin_5066189168:;
			{
				{
					auto &_match_expr{ _61117_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_5066190736:;
						{
							jule::Ptr<_228d31971_CastExpr> _61625_expr = (*this)._method_try_build_cast(_61047_tokens);
							if (_61625_expr != nullptr) {
								return jule::Any(_61625_expr);
							}
						}
					}
					_match_end_5066189520:;
				}
			}
		}
		_match_end_5066188768:;
	}
	jule::Ptr<_229a547e7_CallData> _62317_data = _229a547e7_get_call_data(_61047_tokens);
	if ((*(_62317_data))._field_expr_tokens.len() == 0LL) {
		return (*this)._method_build_between_parentheses((*(_62317_data))._field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_61117_token,_62317_data));
}



inline jule::Ptr<_228d31971_UnsafeExpr> _229a547e7_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_228d7aadb_Token> _63440_tokens) {
	_228d7aadb_Token _63517_token = _63440_tokens[0LL];
	_63440_tokens=_63440_tokens.slice(1LL);
	jule::Int _63717_i = 0LL;
	jule::Slice<_228d7aadb_Token> _63817_range_tokens = _229a51c34_range(_63717_i,jule::Str("{", 1),jule::Str("}", 1),_63440_tokens);
	if (_63817_range_tokens.len() == 0LL) {
		(*this)._method_push_err(_63440_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_228d31971_UnsafeExpr>(new( std::nothrow ) _228d31971_UnsafeExpr(_63517_token,(*((*this)._method_build_from_tokens(_63817_range_tokens)))._field_kind));
}



inline jule::Ptr<_228d31971_FnDecl> _229a547e7_ExprBuilder::_method_build_anon_fn(jule::Slice<_228d7aadb_Token>& _64937_tokens) {
	jule::Ptr<_228d31971_FnDecl> _65017_f = (*((*this)._field_p))._method_build_fn(_64937_tokens,false,false);
	if ((!((*(_65017_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_65017_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>());
	}
	return _65017_f;
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_unsafe(jule::Slice<_228d7aadb_Token>& _65836_tokens) {
	{
		auto &_match_expr{ _65836_tokens[1LL]._field_id };
		
		if (_match_expr == 33LLU) {
			_case_begin_5066220416:;
			{
				return jule::Any((*this)._method_build_anon_fn(_65836_tokens));
			}
		}
		else {
			_case_begin_5066217040:;
			{
				return jule::Any((*this)._method_build_unsafe_expr(_65836_tokens));
			}
		}
		_match_end_5066217904:;
	}
}



inline void _229a547e7_ExprBuilder::_method_push_range_lit_part(jule::Slice<_228d7aadb_Token> _66942_part,_228d7aadb_Token _6709_error_token,jule::Slice<jule::Slice<_228d7aadb_Token>>& _67034_parts) {
	if (_66942_part.len() == 0LL) {
		(*this)._method_push_err(_6709_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_67034_parts.push(_66942_part);
}



inline jule::Slice<jule::Slice<_228d7aadb_Token>> _229a547e7_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_228d7aadb_Token> _68053_tokens) {
	if (_68053_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_228d7aadb_Token>> _68617_parts = nullptr;
	jule::Int _68817_last = 0LL;
	jule::Int _68917_range_n = 0LL;
	_68053_tokens=_68053_tokens.slice(1LL,_68053_tokens.len() - 1LL);
	{
		auto &expr = _68053_tokens;
		auto it = expr.begin();
		_iter_begin_5066234016:;
		if (it != expr.end()) {
			jule::Int _229a547e7_i = it - expr.begin();
			_228d7aadb_Token &_229a547e7_token = *it;
			{
				if (_229a547e7_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _229a547e7_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5066238880:;
							{
								(_68917_range_n)++;
							}
						}
						else {
							_case_begin_5066237088:;
							{
								(_68917_range_n)--;
							}
						}
						_match_end_5066237200:;
					}
				}
				if ((_68917_range_n > 0LL) || (_229a547e7_token._field_id != 8LLU)) {
					goto _iter_next_5066234016;
				}
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last,_229a547e7_i),_229a547e7_token,_68617_parts);
				_68817_last=static_cast<jule::Int>(_229a547e7_i + 1LL);
			}
			_iter_next_5066234016:;
			++it;
			_229a547e7_i++;
			goto _iter_begin_5066234016;
		}
		_iter_end_5066234016:;
	}
	if (_68817_last < _68053_tokens.len()) {
		if (_68817_last == 0LL) {
			if (_68053_tokens.len() > 0LL) {
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last],_68617_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last - 1LL],_68617_parts);
		}
	}
	return _68617_parts;
}



inline jule::Ptr<_228d31971_FieldExprPair> _229a547e7_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_228d7aadb_Token> _72344_tokens) {
	if ((_72344_tokens.len() - 2LL) == 0LL) {
		(*this)._method_push_err(_72344_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228d31971_FieldExprPair> _72817_pair = jule::new_struct<_228d31971_FieldExprPair>(new( std::nothrow ) _228d31971_FieldExprPair(_72344_tokens[0LL],jule::Any()));
	_72344_tokens=_72344_tokens.slice(2LL);
	(*(_72817_pair))._field_expr=(*((*this)._method_build_from_tokens(_72344_tokens)))._field_kind;
	return _72817_pair;
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_228d7aadb_Token>& _73645_tokens) {
	_228d7aadb_Token _73717_token = _73645_tokens[0LL];
	if (_73717_token._field_id == 2LLU) {
		if (_73645_tokens.len() > 1LL) {
			_73717_token=_73645_tokens[1LL];
			if (_73717_token._field_id == 11LLU) {
				return jule::Any((*this)._method_build_field_expr_pair(_73645_tokens));
			}
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_73645_tokens));
}



inline jule::Slice<jule::Any> _229a547e7_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_228d7aadb_Token>& _74946_tokens) {
	jule::Slice<jule::Slice<_228d7aadb_Token>> _75017_parts = (*this)._method_get_brace_range_lit_expr_parts(_74946_tokens);
	if (_75017_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Any> _75517_pairs = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_75017_parts.len()));
	{
		auto &expr = _75017_parts;
		auto it = expr.begin();
		_iter_begin_5066267952:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a547e7_part = *it;
			{
				_75517_pairs.push((*this)._method_build_struct_lit_expr(_229a547e7_part));
			}
			_iter_next_5066267952:;
			++it;
			goto _iter_begin_5066267952;
		}
		_iter_end_5066267952:;
	}
	return _75517_pairs;
}



inline jule::Ptr<_228d31971_StructLit> _229a547e7_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_228d7aadb_Token> _76249_tokens) {
	jule::Int _76317_i = 0LL;
	jule::Ptr<_228d31971_TypeDecl> _76418_t;
	jule::Bool _76421_ok;
	std::tie(_76418_t,_76421_ok) = (*((*this)._field_p))._method_build_type(_76249_tokens,(&(_76317_i)),true);
	if ((!(_76421_ok))) {
		return nullptr;
	} else if (_76317_i >= _76249_tokens.len()) {
		(*this)._method_push_err(_76249_tokens[_76317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_76249_tokens=_76249_tokens.slice(_76317_i);
	_228d7aadb_Token _77313_token = _76249_tokens[0LL];
	if ((_77313_token._field_id != 3LLU) || (_77313_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_77313_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_228d31971_StructLit>(new( std::nothrow ) _228d31971_StructLit(_76418_t,(*this)._method_build_struct_lit_exprs(_76249_tokens)));
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_228d7aadb_Token>& _78544_tokens) {
	jule::Slice<_228d7aadb_Token> _78618_l;
	jule::Slice<_228d7aadb_Token> _78625_r;
	std::tie(_78618_l,_78625_r) = _229a547e7_split_colon(_78544_tokens);
	if (_78618_l != nullptr) {
		return jule::Any(jule::new_struct<_228d31971_KeyValPair>(new( std::nothrow ) _228d31971_KeyValPair((*((*this)._method_build_from_tokens(_78618_l)))._field_kind,(*((*this)._method_build_from_tokens(_78625_r)))._field_kind,_78544_tokens[_78618_l.len()])));
	}
	return jule::Any((*this)._method_build_from_tokens(_78544_tokens));
}



inline jule::Ptr<_228d31971_BraceLit> _229a547e7_ExprBuilder::_method_build_brace_lit(jule::Slice<_228d7aadb_Token>& _79839_tokens) {
	jule::Ptr<_228d31971_BraceLit> _79917_lit = jule::new_struct<_228d31971_BraceLit>(new( std::nothrow ) _228d31971_BraceLit(_79839_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_228d7aadb_Token>> _80317_parts = (*this)._method_get_brace_range_lit_expr_parts(_79839_tokens);
	if (_80317_parts == nullptr) {
		return _79917_lit;
	}
	(*(_79917_lit))._field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_80317_parts.len()));
	{
		auto &expr = _80317_parts;
		auto it = expr.begin();
		_iter_begin_5066298592:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a547e7_part = *it;
			{
				(*(_79917_lit))._field_exprs = jule::alloc_for_append((*(_79917_lit))._field_exprs,1);(*(_79917_lit))._field_exprs.push((*this)._method_build_brace_lit_part(_229a547e7_part));
			}
			_iter_next_5066298592:;
			++it;
			goto _iter_begin_5066298592;
		}
		_iter_end_5066298592:;
	}
	return _79917_lit;
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_brace_range(jule::Slice<_228d7aadb_Token>& _81641_tokens) {
	jule::Slice<_228d7aadb_Token> _81718_expr_tokens;
	jule::Int _81731_range_n;
	std::tie(_81718_expr_tokens,_81731_range_n) = _229a547e7_get_range_expr_tokens(_81641_tokens);
	{
		
		if (_81718_expr_tokens.len() == 0LL) {
			_case_begin_5066304832:;
			{
				return jule::Any((*this)._method_build_brace_lit(_81641_tokens));
			}
		}
		else if (_81731_range_n > 0LL) {
			_case_begin_5066304928:;
			{
				(*this)._method_push_err(_81641_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5066304704:;
	}
	_228d7aadb_Token _82913_else_token = _81718_expr_tokens[_81718_expr_tokens.len() - 1LL];
	if (_81718_expr_tokens[_81718_expr_tokens.len() - 1LL]._field_id == 17LLU) {
		_81718_expr_tokens=_81718_expr_tokens.slice(0LL,_81718_expr_tokens.len() - 1LL);
		jule::Any _83221_d = (*this)._method_build(_81718_expr_tokens);
		if (_83221_d == nullptr) {
			return jule::Any(nullptr);
		}
		{
			auto &_match_expr{ _83221_d };
			
			if (_match_expr.type_is<jule::Ptr<_228d31971_FnCallExpr>>()) {
				_case_begin_5066314816:;
				{
					_81641_tokens=_81641_tokens.slice(_81718_expr_tokens.len() + 1LL);
					jule::Int _83925_i = 0LL;
					jule::Slice<_228d7aadb_Token> _84025_range_tokens = _229a51c34_range(_83925_i,jule::Str("{", 1),jule::Str("}", 1),_81641_tokens);
					jule::Ptr<_228d31971_FnCallExpr> _84125_model = _83221_d.operator jule::Ptr<_228d31971_FnCallExpr>();
					if ((*(_84125_model))._method_ignored()) {
						(*this)._method_push_err(_82913_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("just ignore exceptional or handle it but you cannot do both at same time", 72),jule::Slice<jule::Any>());
					}
					(*(_84125_model))._field_exception=(*((*this)._field_p))._method_build_scope(_84025_range_tokens);
					return _83221_d;
				}
			}
			else {
				_case_begin_5066314448:;
				{
					(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return jule::Any(nullptr);
				}
			}
			_match_end_5066313728:;
		}
	}
	{
		auto &_match_expr{ _81718_expr_tokens[0LL]._field_id };
		
		if (_match_expr == 35LLU) {
			_case_begin_5066328592:;
			{
				return (*this)._method_build_unsafe(_81641_tokens);
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_5066331104:;
			{
				return jule::Any((*this)._method_build_anon_fn(_81641_tokens));
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 31LLU) {
			_case_begin_5066330848:;
			{
				return jule::Any((*this)._method_build_typed_struct_literal(_81641_tokens));
			}
		}
		else {
			_case_begin_5066304512:;
			{
				(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5066328176:;
	}
}



inline jule::Slice<jule::Slice<_228d7aadb_Token>> _229a547e7_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_228d7aadb_Token> _87343_tokens) {
	_87343_tokens=_87343_tokens.slice(1LL,_87343_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_228d7aadb_Token>> _87518_parts;
	jule::Slice<_2276bcb9e_Log> _87525_errors;
	std::tie(_87518_parts,_87525_errors) = _229a51c34_parts(_87343_tokens,8LLU,true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_87525_errors);
	return _87518_parts;
}



inline jule::Ptr<_228d31971_SliceExpr> _229a547e7_ExprBuilder::_method_build_slice(jule::Slice<_228d7aadb_Token> _88034_tokens) {
	jule::Ptr<_228d31971_SliceExpr> _88117_slc = jule::new_struct<_228d31971_SliceExpr>(new( std::nothrow ) _228d31971_SliceExpr(_88034_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_228d7aadb_Token>> _88517_parts = (*this)._method_get_enumerable_parts(_88034_tokens);
	if (_88517_parts.len() == 0LL) {
		return _88117_slc;
	}
	(*(_88117_slc))._field_elems=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_88517_parts.len()));
	{
		auto &expr = _88517_parts;
		auto it = expr.begin();
		_iter_begin_5066348496:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a547e7_p = *it;
			{
				(*(_88117_slc))._field_elems = jule::alloc_for_append((*(_88117_slc))._field_elems,1);(*(_88117_slc))._field_elems.push((*((*this)._method_build_from_tokens(_229a547e7_p)))._field_kind);
			}
			_iter_next_5066348496:;
			++it;
			goto _iter_begin_5066348496;
		}
		_iter_end_5066348496:;
	}
	return _88117_slc;
}



inline jule::Ptr<_228d31971_IndexingExpr> _229a547e7_ExprBuilder::_method_build_indexing(jule::Slice<_228d7aadb_Token> _89837_expr_tokens,jule::Slice<_228d7aadb_Token> _89913_tokens,_228d7aadb_Token _89934_error_token) {
	_89913_tokens=_89913_tokens.slice(1LL,_89913_tokens.len() - 1LL);
	return jule::new_struct<_228d31971_IndexingExpr>(new( std::nothrow ) _228d31971_IndexingExpr(_89934_error_token,(*((*this)._method_build_from_tokens(_89837_expr_tokens)))._field_kind,(*((*this)._method_build_from_tokens(_89913_tokens)))._field_kind));
}



inline jule::Ptr<_228d31971_SlicingExpr> _229a547e7_ExprBuilder::_method_build_slicing(jule::Slice<_228d7aadb_Token>& _90837_expr_tokens,jule::Slice<_228d7aadb_Token>& _90864_slicing_tokens,jule::Int& _90910_colon,_228d7aadb_Token& _90927_error_token) {
	jule::Ptr<_228d31971_SlicingExpr> _91017_slc = jule::new_struct<_228d31971_SlicingExpr>(new( std::nothrow ) _228d31971_SlicingExpr(_90927_error_token,(*((*this)._method_build_from_tokens(_90837_expr_tokens)))._field_kind,jule::Any(),jule::Any()));
	jule::Slice<_228d7aadb_Token> _91517_start_expr_tokens = _90864_slicing_tokens.slice(0LL,_90910_colon);
	if (_91517_start_expr_tokens.len() > 0LL) {
		(*(_91017_slc))._field_start=(*((*this)._method_build_from_tokens(_91517_start_expr_tokens)))._field_kind;
	}
	jule::Slice<_228d7aadb_Token> _92017_to_expr_tokens = _90864_slicing_tokens.slice(_90910_colon + 1LL);
	if (_92017_to_expr_tokens.len() > 0LL) {
		(*(_91017_slc))._field_to=(*((*this)._method_build_from_tokens(_92017_to_expr_tokens)))._field_kind;
	}
	return _91017_slc;
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_bracket_range(jule::Slice<_228d7aadb_Token> _92842_tokens) {
	_228d7aadb_Token _92917_error_token = _92842_tokens[0LL];
	jule::Slice<_228d7aadb_Token> _93018_expr_tokens;
	jule::Int _93031_range_n;
	std::tie(_93018_expr_tokens,_93031_range_n) = _229a547e7_get_range_expr_tokens(_92842_tokens);
	{
		
		if (_93018_expr_tokens.len() == 0LL) {
			_case_begin_5066374704:;
			{
				return jule::Any((*this)._method_build_slice(_92842_tokens));
			}
		}
		else if ((_93018_expr_tokens.len() == 0LL) || (_93031_range_n > 0LL)) {
			_case_begin_5066374816:;
			{
				(*this)._method_push_err(_92917_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5066374544:;
	}
	_92842_tokens=_92842_tokens.slice(_93018_expr_tokens.len());
	jule::Int _94917_i = 0LL;
	jule::Slice<_228d7aadb_Token> _95018_slicing_tokens;
	jule::Int _95034_colon;
	std::tie(_95018_slicing_tokens,_95034_colon) = _1e5543d98_split_map_range(_92842_tokens,_94917_i);
	if (_95034_colon != -1LL) {
		return jule::Any((*this)._method_build_slicing(_93018_expr_tokens,_95018_slicing_tokens,_95034_colon,_92917_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_93018_expr_tokens,_92842_tokens,_92917_error_token));
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_ternary(jule::Slice<_228d7aadb_Token> _95736_tokens) {
	jule::Ptr<_228d31971_TernaryExpr> _95817_ter = jule::new_struct<_228d31971_TernaryExpr>(new( std::nothrow ) _228d31971_TernaryExpr());
	(*(_95817_ter))._field_token=_95736_tokens[0LL];
	_95736_tokens=_95736_tokens.slice(1LL);
	jule::Slice<_228d7aadb_Token> _96217_expr_tokens = _229a547e7_get_block_expr(_95736_tokens);
	if (_96217_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	(*(_95817_ter))._field_condition=(*this)._method_build_kind(_96217_expr_tokens);
	jule::I64 _96917_i = _96217_expr_tokens.len();
	jule::Slice<_228d7aadb_Token> _97017_true_expr = _229a51c34_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_97017_true_expr == nullptr) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_97017_true_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_96217_expr_tokens.len()],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i >= _95736_tokens.len()) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("else block missed for ternary operator", 38),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	_228d7aadb_Token _98413_else_token = _95736_tokens[_96917_i];
	if (_98413_else_token._field_id != 17LLU) {
		(*this)._method_push_err(_98413_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("else keyword expected for else block of ternary operator", 56),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	(_96917_i)++;
	jule::I64 _99213_j = _96917_i;
	jule::Slice<_228d7aadb_Token> _99317_false_expr = _229a51c34_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_99317_false_expr == nullptr) {
		(*this)._method_push_err(_98413_else_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_99317_false_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_99213_j],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i < _95736_tokens.len()) {
		(*this)._method_push_err(_95736_tokens[_96917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_95817_ter))._field_true_expr=(*this)._method_build_kind(_97017_true_expr);
	(*(_95817_ter))._field_false_expr=(*this)._method_build_kind(_99317_false_expr);
	return jule::Any(_95817_ter);
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_data(jule::Slice<_228d7aadb_Token>& _101234_tokens) {
	{
		auto _match_expr{ _101234_tokens.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_5066420304:;
			{
				return jule::Any(nullptr);
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_5066420400:;
			{
				return (*this)._method_build_single(_101234_tokens[0LL]);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_5066420496:;
			{
				if (_101234_tokens[0LL]._field_id == 31LLU) {
					return jule::Any((*this)._method_build_cpp_linked_ident(_101234_tokens));
				}
			}
		}
		_match_end_5066419920:;
	}
	_228d7aadb_Token _102617_token = _101234_tokens[0LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		
		if (_match_expr == 16LLU) {
			_case_begin_5066427312:;
			{
				return (*this)._method_build_ternary(_101234_tokens);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5066427488:;
			{
				if ((_101234_tokens.len() > 1LL) && (_102617_token._field_kind == jule::Str("*", 1))) {
					_102617_token=_101234_tokens[1LL];
					if ((_102617_token._field_id == 1LLU) || (_102617_token._field_id == 35LLU)) {
						return jule::Any((*this)._method_build_type(_101234_tokens));
					}
				}
				return jule::Any((*this)._method_build_unary(_101234_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5066427584:;
			{
				if (_101234_tokens.len() < 3LL) {
					goto _match_end_5066427168;
				}
				if (_101234_tokens.len() > 3LL) {
					_228d7aadb_Token _104921_t = _101234_tokens[_101234_tokens.len() - 1LL];
					if ((_104921_t._field_id == 3LLU) && (_104921_t._field_kind == jule::Str(")", 1))) {
						goto _match_end_5066427168;
					}
				}
				_228d7aadb_Token _105517_next = _101234_tokens[1LL];
				if ((_105517_next._field_id != 3LLU) || (_105517_next._field_kind != jule::Str("]", 1))) {
					goto _match_end_5066427168;
				}
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		_match_end_5066427168:;
	}
	_102617_token=_101234_tokens[_101234_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		
		if (_match_expr == 2LLU) {
			_case_begin_5066442304:;
			{
				return (*this)._method_build_sub_ident(_101234_tokens);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_5066442400:;
			{
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5066442496:;
			{
				return (*this)._method_build_op_right(_101234_tokens);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5066442592:;
			{
				{
					auto &_match_expr{ _102617_token._field_kind };
					
					if (_match_expr == jule::Str(")", 1)) {
						_case_begin_5066445440:;
						{
							return (*this)._method_build_parentheses_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_5066446384:;
						{
							return (*this)._method_build_brace_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_5066446496:;
						{
							return (*this)._method_build_bracket_range(_101234_tokens);
						}
					}
					_match_end_5066447616:;
				}
			}
		}
		_match_end_5066428512:;
	}
	(*this)._method_push_err(_102617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_228d31971_BinopExpr> _229a547e7_ExprBuilder::_method_build_binop(jule::Slice<_228d7aadb_Token>& _109235_tokens,jule::Int _109252_i) {
	jule::Slice<_228d7aadb_Token> _109317_left_tokens = _109235_tokens.slice(0LL,_109252_i);
	jule::Slice<_228d7aadb_Token> _109417_right_tokens = _109235_tokens.slice(_109252_i + 1LL);
	if (_109317_left_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_109417_right_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_228d31971_BinopExpr>(new( std::nothrow ) _228d31971_BinopExpr((*this)._method_build(_109317_left_tokens),(*this)._method_build(_109417_right_tokens),_109235_tokens[_109252_i]));
}



inline jule::Any _229a547e7_ExprBuilder::_method_build(jule::Slice<_228d7aadb_Token>& _111529_tokens) {
	jule::Int _111613_i = _229a547e7_find_lowest_prec_op(_111529_tokens);
	if (_111613_i == -1LL) {
		return (*this)._method_build_data(_111529_tokens);
	}
	return jule::Any((*this)._method_build_binop(_111529_tokens,_111613_i));
}



inline jule::Any _229a547e7_ExprBuilder::_method_build_kind(jule::Slice<_228d7aadb_Token>& _112334_tokens) {
	jule::Slice<jule::Slice<_228d7aadb_Token>> _112418_parts;
	jule::Slice<_2276bcb9e_Log> _112425_errors;
	std::tie(_112418_parts,_112425_errors) = _229a51c34_parts(_112334_tokens,8LLU,true);
	if (_112425_errors != nullptr) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_112425_errors);
		return jule::Any(nullptr);
	} else if (_112418_parts.len() > 1LL) {
		return jule::Any((*this)._method_build_tuple(_112418_parts));
	}
	return (*this)._method_build(_112334_tokens);
}



inline jule::Ptr<_228d31971_Expr> _229a547e7_ExprBuilder::_method_build_from_tokens(jule::Slice<_228d7aadb_Token> _113440_tokens) {
	_113440_tokens=_229a547e7_eliminate_comments(_113440_tokens);
	if (_113440_tokens.len() == 0LL) {
		return nullptr;
	}
	return jule::new_struct<_228d31971_Expr>(new( std::nothrow ) _228d31971_Expr(_113440_tokens[0LL],(*this)._method_build_kind(_113440_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _229a547e7_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _229a51c34_Parser::_method_stop(void) {
	(*this)._field_ast=nullptr;
}



inline jule::Bool _229a51c34_Parser::_method_stopped(void) {
	return (*this)._field_ast == nullptr;
}



inline void _229a51c34_Parser::_method_push_err(_228d7aadb_Token _23927_token,jule::Str _23941_fmt,jule::Slice<jule::Any> _23954_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_229a51c34_compiler_err(_23927_token,_23941_fmt,_23954_args));
}



inline void _229a51c34_Parser::_method_push_suggestion(jule::Str _24434_fmt,jule::Slice<jule::Any> _24447_args) {
	{
		_229a51c34_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_24434_fmt,_24447_args);
	}
}



inline jule::Ptr<_228d31971_Expr> _229a51c34_Parser::_method_build_expr(jule::Slice<_228d7aadb_Token>& _24835_tokens) {
	jule::Ptr<_229a547e7_ExprBuilder> _24917_ep = jule::new_struct<_229a547e7_ExprBuilder>(new( std::nothrow ) _229a547e7_ExprBuilder(this->self));
	jule::Ptr<_228d31971_Expr> _25017_expr = (*(_24917_ep))._method_build_from_tokens(_24835_tokens);
	return _25017_expr;
}



inline jule::Ptr<_228d31971_Directive> _229a51c34_Parser::_method_build_directive(jule::Slice<_228d7aadb_Token> _25438_tokens) {
	if (_25438_tokens.len() == 1LL) {
		(*this)._method_push_err(_25438_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_25438_tokens[1LL]._field_column != (_25438_tokens[0LL]._field_column + 1LL)) {
		(*this)._method_push_err(_25438_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_228d31971_Directive>(new( std::nothrow ) _228d31971_Directive(_25438_tokens[1LL],_25438_tokens.slice(2LL)));
}



inline void _229a51c34_Parser::_method_push_directive(jule::Ptr<_228d31971_Directive> _27137_d) {
	if (_27137_d == nullptr) {
		return;
	}
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_5066506432:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> &_229a51c34_pd = *it;
			{
				if ((*(_27137_d))._field_tag._field_kind == (*(_229a51c34_pd))._field_tag._field_kind) {
					return;
				}
			}
			_iter_next_5066506432:;
			++it;
			goto _iter_begin_5066506432;
		}
		_iter_end_5066506432:;
	}
	(*this)._field_directives = jule::alloc_for_append((*this)._field_directives,1);(*this)._field_directives.push(_27137_d);
}



inline jule::Ptr<_228d31971_ScopeTree> _229a51c34_Parser::_method_build_scope(jule::Slice<_228d7aadb_Token>& _28536_tokens) {
	jule::Ptr<_228d31971_ScopeTree> _28617_s = _228d45c71_new_scope();
	_228d45c71_ScopeParser _28717_sp = _228d45c71_ScopeParser(this->self,jule::Ptr<_228d31971_ScopeTree>(),jule::Slice<jule::Ptr<_228d45c71_Stmt>>(),jule::Int());
	_28717_sp._method_build(_28536_tokens,_28617_s);
	return _28617_s;
}



inline std::tuple<jule::Ptr<_228d31971_TypeDecl>,jule::Bool> _229a51c34_Parser::_method___build_type(jule::Slice<_228d7aadb_Token>& _29444_tokens,jule::Int* _29513_i,jule::Bool _29522_err) {
	_1e5543d98_TypeBuilder _29617_tb = _1e5543d98_TypeBuilder(this->self,_29444_tokens,_29513_i,_29522_err);
	jule::Ptr<_228d31971_TypeDecl> _30218_decl;
	jule::Bool _30224_ok;
	std::tie(_30218_decl,_30224_ok) = _29617_tb._method_build();
	return std::make_tuple(_30218_decl,_30224_ok);
}



inline std::tuple<jule::Ptr<_228d31971_TypeDecl>,jule::Bool> _229a51c34_Parser::_method_build_type(jule::Slice<_228d7aadb_Token>& _30742_tokens,jule::Int* _30813_i,jule::Bool _30822_err) {
	_228d7aadb_Token _30913_token = _30742_tokens[(*(_30813_i))];
	jule::Ptr<_228d31971_TypeDecl> _31018_t;
	jule::Bool _31021_ok;
	std::tie(_31018_t,_31021_ok) = (*(this->self))._method___build_type(_30742_tokens,_30813_i,_30822_err);
	if (_30822_err && (!(_31021_ok))) {
		(*(this->self))._method_push_err(_30913_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	}
	return std::make_tuple(_31018_t,_31021_ok);
}



inline jule::Ptr<_228d31971_TypeAliasDecl> _229a51c34_Parser::_method_build_type_alias_decl(jule::Slice<_228d7aadb_Token>& _31746_tokens) {
	jule::Int _31817_i = 1LL;
	if (_31817_i >= _31746_tokens.len()) {
		(*(this->self))._method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228d31971_TypeAliasDecl> _32317_tad = jule::new_struct<_228d31971_TypeAliasDecl>(new( std::nothrow ) _228d31971_TypeAliasDecl(jule::Ptr<_228d31971_ScopeTree>(),jule::Bool(),jule::Bool(),_31746_tokens[1LL],_31746_tokens[1LL]._field_kind,jule::Ptr<_228d31971_TypeDecl>(),jule::Ptr<_228d31971_CommentGroup>()));
	_228d7aadb_Token _32717_token = _31746_tokens[_31817_i];
	if (_32717_token._field_id != 2LLU) {
		(*(this->self))._method_push_err(_32717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_31817_i)++;
	if (_31817_i >= _31746_tokens.len()) {
		(*(this->self))._method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _32317_tad;
	}
	_32717_token=_31746_tokens[_31817_i];
	if (_32717_token._field_id != 11LLU) {
		(*(this->self))._method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>());
		return _32317_tad;
	}
	(_31817_i)++;
	if (_31817_i >= _31746_tokens.len()) {
		(*(this->self))._method_push_err(_31746_tokens[_31817_i - 1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return _32317_tad;
	}
	jule::Ptr<_228d31971_TypeDecl> _34818_t;
	jule::Bool _34821_ok;
	std::tie(_34818_t,_34821_ok) = (*(this->self))._method_build_type(_31746_tokens,(&(_31817_i)),true);
	(*(_32317_tad))._field_kind=_34818_t;
	if (_34821_ok && (_31817_i < _31746_tokens.len())) {
		(*(this->self))._method_push_err(_31746_tokens[_31817_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _32317_tad;
}



inline void _229a51c34_Parser::_method_build_var_type_and_expr(jule::Ptr<_228d31971_VarDecl>& _35648_v,jule::Slice<_228d7aadb_Token>& _35666_tokens) {
	jule::Int _35717_i = 0LL;
	_228d7aadb_Token _35817_tok = _35666_tokens[_35717_i];
	if (_35817_tok._field_id == 11LLU) {
		(_35717_i)++;
		if ((_35717_i >= _35666_tokens.len()) || ((_35666_tokens[_35717_i]._field_id == 7LLU) && (_35666_tokens[_35717_i]._field_kind == jule::Str("=", 1)))) {
			(*(this->self))._method_push_err(_35817_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
			return;
		}
		jule::Ptr<_228d31971_TypeDecl> _36622_t;
		jule::Bool _36625_ok;
		std::tie(_36622_t,_36625_ok) = (*(this->self))._method_build_type(_35666_tokens,(&(_35717_i)),true);
		if (_36625_ok) {
			(*(_35648_v))._field_kind=_36622_t;
			if (_35717_i >= _35666_tokens.len()) {
				return;
			}
			_35817_tok=_35666_tokens[_35717_i];
		}
	}
	if (_35817_tok._field_id == 7LLU) {
		if (_35817_tok._field_kind != jule::Str("=", 1)) {
			(*(this->self))._method_push_err(_35817_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return;
		}
		jule::Slice<_228d7aadb_Token> _38121_expr_tokens = _35666_tokens.slice(_35717_i + 1LL);
		if (_38121_expr_tokens.len() == 0LL) {
			(*(this->self))._method_push_err(_35817_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return;
		}
		(*(_35648_v))._field_expr=(*(this->self))._method_build_expr(_38121_expr_tokens);
	} else {
		(*(this->self))._method_push_err(_35817_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _229a51c34_Parser::_method_build_var_common(jule::Ptr<_228d31971_VarDecl>& _39241_v,jule::Slice<_228d7aadb_Token> _39258_tokens) {
	(*(_39241_v))._field_token=_39258_tokens[0LL];
	if ((*(_39241_v))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_39241_v))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	(*(_39241_v))._field_ident=(*(_39241_v))._field_token._field_kind;
	(*(_39241_v))._field_kind=nullptr;
	if (_39258_tokens.len() > 1LL) {
		_39258_tokens=_39258_tokens.slice(1LL);
		(*(this->self))._method_build_var_type_and_expr(_39241_v,_39258_tokens);
	}
}



inline void _229a51c34_Parser::_method_build_var_begin(jule::Ptr<_228d31971_VarDecl>& _40739_v,jule::Ptr<jule::Int> _40756_i,jule::Slice<_228d7aadb_Token>& _40766_tokens) {
	_228d7aadb_Token _40813_tok = _40766_tokens[(*(_40756_i))];
	{
		auto &_match_expr{ _40813_tok._field_id };
		
		if (_match_expr == 38LLU) {
			_case_begin_5066606016:;
			{
				(*(_40739_v))._field_statically=true;
				goto _case_begin_5066604400;
			}
		}
		else if (_match_expr == 34LLU) {
			_case_begin_5066604400:;
			{
				((*(_40756_i)))++;
				if ((*(_40756_i)) >= _40766_tokens.len()) {
					(*this)._method_push_err(_40813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				if (_40766_tokens[(*(_40756_i))]._field_id == 36LLU) {
					(*(_40739_v))._field_mutable=true;
					((*(_40756_i)))++;
				}
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_5066604496:;
			{
				((*(_40756_i)))++;
				(*(_40739_v))._field_constant=true;
			}
		}
		else {
			_case_begin_5066602784:;
			{
				(*this)._method_push_err(_40813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5066603616:;
	}
	if ((*(_40756_i)) >= _40766_tokens.len()) {
		(*this)._method_push_err(_40813_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_228d31971_VarDecl> _229a51c34_Parser::_method_build_var(jule::Slice<_228d7aadb_Token> _44133_tokens) {
	jule::Ptr<jule::Int> _44217_i = jule::new_ptr<jule::Int>(0LL);
	jule::Ptr<_228d31971_VarDecl> _44317_v = jule::new_struct<_228d31971_VarDecl>(new( std::nothrow ) _228d31971_VarDecl(jule::Ptr<_228d31971_ScopeTree>(),_44133_tokens[(*(_44217_i))],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_228d31971_CommentGroup>(),jule::Ptr<_228d31971_TypeDecl>(),jule::Ptr<_228d31971_Expr>()));
	(*(this->self))._method_build_var_begin(_44317_v,_44217_i,_44133_tokens);
	if ((*(_44217_i)) >= _44133_tokens.len()) {
		return nullptr;
	}
	_44133_tokens=_44133_tokens.slice((*(_44217_i)));
	if ((_44133_tokens[0LL]._field_id == 7LLU) && (_44133_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		(*(_44317_v))._field_reference=true;
		if (_44133_tokens.len() == 1LL) {
			return nullptr;
		}
		_44133_tokens=_44133_tokens.slice(1LL);
	}
	(*(this->self))._method_build_var_common(_44317_v,_44133_tokens);
	return _44317_v;
}



inline jule::Ptr<_228d31971_GenericDecl> _229a51c34_Parser::_method_build_generic(jule::Slice<_228d7aadb_Token>& _46337_tokens) {
	if (_46337_tokens.len() > 1LL) {
		(*this)._method_push_err(_46337_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	jule::Ptr<_228d31971_GenericDecl> _46717_g = jule::new_struct<_228d31971_GenericDecl>(new( std::nothrow ) _228d31971_GenericDecl(_46337_tokens[0LL],jule::Str()));
	if ((*(_46717_g))._field_token._field_id != 2LLU) {
		(*this)._method_push_err((*(_46717_g))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_46717_g))._field_ident=(*(_46717_g))._field_token._field_kind;
	return _46717_g;
}



inline jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _229a51c34_Parser::_method_build_generics(jule::Slice<_228d7aadb_Token>& _47838_tokens,_228d7aadb_Token& _47856_error_token) {
	if (_47838_tokens.len() == 0LL) {
		(*this)._method_push_err(_47856_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<jule::Slice<_228d7aadb_Token>> _48418_parts;
	jule::Slice<_2276bcb9e_Log> _48425_errors;
	std::tie(_48418_parts,_48425_errors) = _229a51c34_parts(_47838_tokens,8LLU,true);
	if (_48425_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_48425_errors);
		return nullptr;
	}
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _49017_generics = jule::Slice<jule::Ptr<_228d31971_GenericDecl>>::alloc(0LL,static_cast<jule::I64>(_48418_parts.len()));
	{
		auto &expr = _48418_parts;
		auto it = expr.begin();
		_iter_begin_5066643616:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a51c34_part = *it;
			{
				_49017_generics.push((*this)._method_build_generic(_229a51c34_part));
			}
			_iter_next_5066643616:;
			++it;
			goto _iter_begin_5066643616;
		}
		_iter_end_5066643616:;
	}
	return _49017_generics;
}



inline jule::Ptr<_228d31971_ParamDecl> _229a51c34_Parser::_method_build_self_param(jule::Slice<_228d7aadb_Token> _49839_tokens) {
	if (_49839_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_228d31971_ParamDecl> _50317_param = jule::new_struct<_228d31971_ParamDecl>(new( std::nothrow ) _228d31971_ParamDecl());
	jule::Int _50617_i = 0LL;
	if (_49839_tokens[_50617_i]._field_id == 36LLU) {
		(*(_50317_param))._field_mutable=true;
		(_50617_i)++;
		if (_50617_i >= _49839_tokens.len()) {
			(*this)._method_push_err(_49839_tokens[_50617_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49839_tokens[_50617_i]._field_kind == jule::Str("&", 1)) {
		(*(_50317_param))._field_ident=jule::Str("&", 1);
		(_50617_i)++;
		if (_50617_i >= _49839_tokens.len()) {
			(*this)._method_push_err(_49839_tokens[_50617_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49839_tokens[_50617_i]._field_id == 28LLU) {
		(*(_50317_param))._field_ident+=jule::Str("self", 4);
		(*(_50317_param))._field_token=_49839_tokens[_50617_i];
		(_50617_i)++;
		if (_50617_i < _49839_tokens.len()) {
			(*this)._method_push_err(_49839_tokens[_50617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	}
	return _50317_param;
}



inline void _229a51c34_Parser::_method_param_type_begin(jule::Ptr<_228d31971_ParamDecl>& _53740_param,jule::Int& _53764_i,jule::Slice<_228d7aadb_Token>& _53773_tokens) {
	for (; _53764_i < _53773_tokens.len(); (_53764_i)++) {
		{
			_228d7aadb_Token _53917_token = _53773_tokens[_53764_i];
			if (_53917_token._field_id != 7LLU) {
				return;
			} else if (_53917_token._field_kind != jule::Str("...", 3)) {
				return;
			}
			if ((*(_53740_param))._field_variadic) {
				(*this)._method_push_err(_53917_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>());
				goto _iter_next_5066669328;
			}
			(*(_53740_param))._field_variadic=true;
		}
	_iter_next_5066669328:;
	}
	_iter_end_5066669328:;
}



inline void _229a51c34_Parser::_method_build_param_type(jule::Ptr<_228d31971_ParamDecl>& _55441_param,jule::Slice<_228d7aadb_Token>& _55465_tokens) {
	jule::Int _55517_i = 0LL;
	(*(this->self))._method_param_type_begin(_55441_param,_55517_i,_55465_tokens);
	if (_55517_i >= _55465_tokens.len()) {
		return;
	}
	std::tie((*(_55441_param))._field_kind,std::ignore) = (*(this->self))._method_build_type(_55465_tokens,(&(_55517_i)),true);
	if (_55517_i < _55465_tokens.len()) {
		(*(this->self))._method_push_err(_55465_tokens[_55517_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _229a51c34_Parser::_method_param_body_id(jule::Ptr<_228d31971_ParamDecl> _56732_param,_228d7aadb_Token _56751_token) {
	if (_228d7aadb_is_ignore_ident(_56751_token._field_kind)) {
		(*(_56732_param))._field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	(*(_56732_param))._field_ident=_56751_token._field_kind;
}



inline void _229a51c34_Parser::_method_build_param_body(jule::Ptr<_228d31971_ParamDecl>& _57541_param,jule::Ptr<jule::Int> _57564_i,jule::Slice<_228d7aadb_Token> _57577_tokens) {
	(*(this->self))._method_param_body_id(_57541_param,_57577_tokens[(*(_57564_i))]);
	_228d7aadb_Token _57717_tok = _57577_tokens[(*(_57564_i))];
	if (((*(_57564_i)) + 1LL) >= _57577_tokens.len()) {
		return;
	} else if (((_57577_tokens.len() - (*(_57564_i))) - 1LL) < 2LL) {
		(*(this->self))._method_push_err(_57717_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return;
	}
	_57717_tok=_57577_tokens[(*(_57564_i)) + 1LL];
	if (_57717_tok._field_id != 11LLU) {
		(*(this->self))._method_build_param_type(_57541_param,_57577_tokens);
		return;
	}
	_57577_tokens=_57577_tokens.slice((*(_57564_i)) + 2LL);
	(*(this->self))._method_build_param_type(_57541_param,_57577_tokens);
}



inline jule::Ptr<_228d31971_ParamDecl> _229a51c34_Parser::_method_build_param(jule::Slice<_228d7aadb_Token> _59635_tokens) {
	jule::Ptr<_228d31971_ParamDecl> _59717_param = jule::new_struct<_228d31971_ParamDecl>(new( std::nothrow ) _228d31971_ParamDecl(_59635_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_228d31971_TypeDecl>(),jule::Str()));
	if ((*(_59717_param))._field_token._field_id == 36LLU) {
		(*(_59717_param))._field_mutable=true;
		if (_59635_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_59635_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_59635_tokens=_59635_tokens.slice(1LL);
		(*(_59717_param))._field_token=_59635_tokens[0LL];
	}
	if (_59635_tokens.len() >= 3LL) {
		if (((*(_59717_param))._field_token._field_id == 7LLU) && ((*(_59717_param))._field_token._field_kind == jule::Str("&", 1))) {
			if (_59635_tokens.len() == 1LL) {
				(*(this->self))._method_push_err(_59635_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
			if ((_59635_tokens[1LL]._field_id == 2LLU) && (_59635_tokens[2LL]._field_id == 11LLU)) {
				(*(_59717_param))._field_reference=true;
				_59635_tokens=_59635_tokens.slice(1LL);
				(*(_59717_param))._field_token=_59635_tokens[0LL];
			}
		}
	}
	if ((*(_59717_param))._field_token._field_id != 2LLU) {
		(*(_59717_param))._field_ident=jule::Str("<anonymous>", 11);
		(*(this->self))._method_build_param_type(_59717_param,_59635_tokens);
	} else {
		jule::Ptr<jule::Int> _63321_i = jule::new_ptr<jule::Int>(0LL);
		(*(this->self))._method_build_param_body(_59717_param,_63321_i,_59635_tokens);
	}
	return _59717_param;
}



inline void _229a51c34_Parser::_method_check_params(jule::Slice<jule::Ptr<_228d31971_ParamDecl>>& _64036_params) {
	{
		auto &expr = _64036_params;
		auto it = expr.begin();
		_iter_begin_5066745040:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_ParamDecl> _229a51c34_param = *it;
			{
				if ((*(_229a51c34_param))._method_is_self() || ((*(_229a51c34_param))._field_kind != nullptr)) {
					goto _iter_next_5066745040;
				}
				if ((*(_229a51c34_param))._field_token._field_id == 0LLU) {
					(*this)._method_push_err((*(_229a51c34_param))._field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
				} else {
					(*(_229a51c34_param))._field_kind=jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl((*(_229a51c34_param))._field_token,jule::Any(jule::new_struct<_228d31971_IdentTypeDecl>(new( std::nothrow ) _228d31971_IdentTypeDecl((*(_229a51c34_param))._field_token,(*(_229a51c34_param))._field_token._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_228d31971_TypeDecl>>())))));
					(*(_229a51c34_param))._field_ident=jule::Str("<anonymous>", 11);
					(*(_229a51c34_param))._field_token=_228d7aadb_Token();
				}
			}
			_iter_next_5066745040:;
			++it;
			goto _iter_begin_5066745040;
		}
		_iter_end_5066745040:;
	}
}



inline jule::Slice<jule::Ptr<_228d31971_ParamDecl>> _229a51c34_Parser::_method_build_params(jule::Slice<_228d7aadb_Token>& _66137_tokens,jule::Bool _66154_method) {
	jule::Slice<jule::Slice<_228d7aadb_Token>> _66218_parts;
	jule::Slice<_2276bcb9e_Log> _66225_errs;
	std::tie(_66218_parts,_66225_errs) = _229a51c34_parts(_66137_tokens,8LLU,true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_66225_errs);
	if (_66218_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_228d31971_ParamDecl>> _66817_params = nullptr;
	if (_66154_method && (_66218_parts.len() > 0LL)) {
		jule::Ptr<_228d31971_ParamDecl> _67021_param = (*(this->self))._method_build_self_param(_66218_parts[0LL]);
		if ((_67021_param != nullptr) && (*(_67021_param))._method_is_self()) {
			_66817_params.push(_67021_param);
			_66218_parts=_66218_parts.slice(1LL);
		}
	}
	{
		auto &expr = _66218_parts;
		auto it = expr.begin();
		_iter_begin_5066762256:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a51c34_part = *it;
			{
				jule::Ptr<_228d31971_ParamDecl> _67821_param = (*(this->self))._method_build_param(_229a51c34_part);
				if (_67821_param != nullptr) {
					_66817_params.push(_67821_param);
				}
			}
			_iter_next_5066762256:;
			++it;
			goto _iter_begin_5066762256;
		}
		_iter_end_5066762256:;
	}
	(*(this->self))._method_check_params(_66817_params);
	return _66817_params;
}



inline std::tuple<jule::Ptr<_228d31971_RetTypeDecl>,jule::Bool> _229a51c34_Parser::_method_build_multi_ret_type(jule::Slice<_228d7aadb_Token>& _68845_tokens,jule::Int& _68867_i) {
	jule::Ptr<_228d31971_RetTypeDecl> _68877_t = jule::Ptr<_228d31971_RetTypeDecl>();
	jule::Bool _68894_ok = jule::Bool();
	_68877_t=jule::new_struct<_228d31971_RetTypeDecl>(new( std::nothrow ) _228d31971_RetTypeDecl());
	(_68867_i)++;
	if (_68867_i >= _68845_tokens.len()) {
		(_68867_i)--;
		std::tie((*(_68877_t))._field_kind,_68894_ok) = (*(this->self))._method_build_type(_68845_tokens,(&(_68867_i)),false);
		return std::make_tuple(_68877_t,_68894_ok);
	}
	(_68867_i)--;
	jule::Slice<_228d7aadb_Token> _69817_range_tokens = _229a51c34_range(_68867_i,jule::Str("(", 1),jule::Str(")", 1),_68845_tokens);
	jule::Slice<jule::Slice<_228d7aadb_Token>> _70018_parts;
	jule::Slice<_2276bcb9e_Log> _70025_errs;
	std::tie(_70018_parts,_70025_errs) = _229a51c34_parts(_69817_range_tokens,8LLU,true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_70025_errs);
	if (_70018_parts.len() == 0LL) {
		return std::make_tuple(_68877_t,_68894_ok);
	}
	jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _70617_types = jule::Slice<jule::Ptr<_228d31971_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_70018_parts.len()));
	(*(_68877_t))._field_idents=jule::Slice<_228d7aadb_Token>::alloc(0LL,static_cast<jule::I64>(_70018_parts.len()));
	{
		auto &expr = _70018_parts;
		auto it = expr.begin();
		_iter_begin_5066785136:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a51c34_part = *it;
			{
				_228d7aadb_Token _70921_token = _229a51c34_part[0LL];
				jule::Int _71021_offset = 0LL;
				if (_229a51c34_part.len() > 1LL) {
					_70921_token=_229a51c34_part[1LL];
					if (_70921_token._field_id == 11LLU) {
						_71021_offset=2LL;
						if (_229a51c34_part.len() < 3LL) {
							(*(this->self))._method_push_err(_70921_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
							goto _iter_next_5066785136;
						}
					}
				}
				_70921_token=_229a51c34_part[0LL];
				if (_71021_offset == 2LL) {
					if (_70921_token._field_id != 2LLU) {
					}
					(*(_68877_t))._field_idents = jule::alloc_for_append((*(_68877_t))._field_idents,1);(*(_68877_t))._field_idents.push(_70921_token);
				} else {
					_70921_token._field_kind=jule::Str("_", 1);
					(*(_68877_t))._field_idents = jule::alloc_for_append((*(_68877_t))._field_idents,1);(*(_68877_t))._field_idents.push(_70921_token);
				}
				jule::Ptr<_228d31971_TypeDecl> _73522_t;
				std::tie(_73522_t,std::ignore) = (*(this->self))._method_build_type(_229a51c34_part,(&(_71021_offset)),true);
				if (_71021_offset < _229a51c34_part.len()) {
					(*(this->self))._method_push_err(_229a51c34_part[_71021_offset],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_70617_types.push(_73522_t);
			}
			_iter_next_5066785136:;
			++it;
			goto _iter_begin_5066785136;
		}
		_iter_end_5066785136:;
	}
	if (_70617_types.len() > 1LL) {
		(*(_68877_t))._field_kind=jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_68845_tokens[0LL],jule::Any(jule::new_struct<_228d31971_TupleTypeDecl>(new( std::nothrow ) _228d31971_TupleTypeDecl(_70617_types)))));
	} else {
		(*(_68877_t))._field_kind=_70617_types[0LL];
	}
	_68894_ok=true;
	return std::make_tuple(_68877_t,_68894_ok);
}



inline std::tuple<jule::Ptr<_228d31971_RetTypeDecl>,jule::Bool> _229a51c34_Parser::_method_build_ret_type(jule::Slice<_228d7aadb_Token>& _75839_tokens,jule::Int& _75861_i) {
	jule::Ptr<_228d31971_RetTypeDecl> _75871_t = jule::Ptr<_228d31971_RetTypeDecl>();
	jule::Bool _75888_ok = jule::Bool();
	_75871_t=jule::new_struct<_228d31971_RetTypeDecl>(new( std::nothrow ) _228d31971_RetTypeDecl());
	if (_75861_i >= _75839_tokens.len()) {
		return std::make_tuple(_75871_t,_75888_ok);
	}
	_228d7aadb_Token _76417_token = _75839_tokens[_75861_i];
	{
		auto &_match_expr{ _76417_token._field_id };
		
		if (_match_expr == 3LLU) {
			_case_begin_5066813776:;
			{
				if (_76417_token._field_kind == jule::Str("{", 1)) {
					return std::make_tuple(_75871_t,_75888_ok);
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5066813872:;
			{
				if (_76417_token._field_kind == jule::Str("=", 1)) {
					return std::make_tuple(_75871_t,_75888_ok);
				}
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_5066813984:;
			{
				if ((_75861_i + 1LL) >= _75839_tokens.len()) {
					(*(this->self))._method_push_err(_76417_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					return std::make_tuple(_75871_t,_75888_ok);
				}
				(_75861_i)++;
				_76417_token=_75839_tokens[_75861_i];
				if (_76417_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _76417_token._field_kind };
						
						if (_match_expr == jule::Str("(", 1)) {
							_case_begin_5066821824:;
							{
								jule::Ptr<_228d31971_RetTypeDecl> _78730_decl;
								jule::Bool _78736_ok;
								std::tie(_78730_decl,_78736_ok) = (*(this->self))._method_build_multi_ret_type(_75839_tokens,_75861_i);
								_75871_t = _78730_decl;
								_75888_ok = _78736_ok;
								return std::make_tuple(_75871_t,_75888_ok);
							}
						}
						else if (_match_expr == jule::Str("{", 1)) {
							_case_begin_5066821920:;
							{
								(*(this->self))._method_push_err(_76417_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
								return std::make_tuple(_75871_t,_75888_ok);
							}
						}
						_match_end_5066821712:;
					}
				}
				std::tie((*(_75871_t))._field_kind,_75888_ok) = (*(this->self))._method_build_type(_75839_tokens,(&(_75861_i)),true);
				return std::make_tuple(_75871_t,_75888_ok);
			}
		}
		_match_end_5066813696:;
	}
	(_75861_i)++;
	(*(this->self))._method_push_err(_76417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return std::make_tuple(_75871_t,_75888_ok);
}



inline jule::Ptr<_228d31971_FnDecl> _229a51c34_Parser::_method_build_fn_prototype(jule::Slice<_228d7aadb_Token>& _80643_tokens,jule::Int& _80665_i,jule::Bool _80673_method) {
	jule::Ptr<_228d31971_FnDecl> _80717_f = jule::new_struct<_228d31971_FnDecl>(new( std::nothrow ) _228d31971_FnDecl(_80643_tokens[_80665_i],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_228d31971_CommentGroup>(),jule::Ptr<_228d31971_ScopeTree>(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),jule::Ptr<_228d31971_RetTypeDecl>(),jule::Slice<jule::Ptr<_228d31971_ParamDecl>>()));
	if ((*(_80717_f))._field_token._field_id == 38LLU) {
		(*(_80717_f))._field_statically=true;
		(_80665_i)++;
		if (_80665_i >= _80643_tokens.len()) {
			(*(this->self))._method_push_err((*(_80717_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80717_f))._field_token=_80643_tokens[_80665_i];
	}
	if ((*(_80717_f))._field_token._field_id == 35LLU) {
		(*(_80717_f))._field_unsafety=true;
		(_80665_i)++;
		if (_80665_i >= _80643_tokens.len()) {
			(*(this->self))._method_push_err((*(_80717_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80717_f))._field_token=_80643_tokens[_80665_i];
	}
	(_80665_i)++;
	if (_80665_i >= _80643_tokens.len()) {
		(*(this->self))._method_push_err((*(_80717_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_228d7aadb_Token _84013_tok = _80643_tokens[_80665_i];
	if (_84013_tok._field_id == 2LLU) {
		(_80665_i)++;
		if (_80665_i >= _80643_tokens.len()) {
			(*(this->self))._method_push_err((*(_80717_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80717_f))._field_ident=_84013_tok._field_kind;
	} else {
		(*(_80717_f))._field_ident=jule::Str("<anonymous>", 11);
	}
	_228d7aadb_Token _85213_error_token = _80643_tokens[_80665_i];
	jule::Slice<_228d7aadb_Token> _85317_generics_tokens = _229a51c34_range(_80665_i,jule::Str("[", 1),jule::Str("]", 1),_80643_tokens);
	if (_85317_generics_tokens != nullptr) {
		(*(_80717_f))._field_generics=(*(this->self))._method_build_generics(_85317_generics_tokens,_85213_error_token);
	}
	if (_80643_tokens[_80665_i]._field_kind != jule::Str("(", 1)) {
		(*(this->self))._method_push_err(_80643_tokens[_80665_i],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_228d7aadb_Token> _86317_params_toks = _229a51c34_range(_80665_i,jule::Str("(", 1),jule::Str(")", 1),_80643_tokens);
	if (_86317_params_toks.len() > 0LL) {
		(*(_80717_f))._field_params=(*(this->self))._method_build_params(_86317_params_toks,_80673_method);
	}
	if (_80665_i < _80643_tokens.len()) {
		_228d7aadb_Token _86917_token = _80643_tokens[_80665_i];
		if ((_86917_token._field_id == 7LLU) && (_86917_token._field_kind == jule::Str("!", 1))) {
			(*(_80717_f))._field_exceptional=true;
			(_80665_i)++;
		}
	}
	std::tie((*(_80717_f))._field_result,std::ignore) = (*(this->self))._method_build_ret_type(_80643_tokens,_80665_i);
	return _80717_f;
}



inline jule::Ptr<_228d31971_FnDecl> _229a51c34_Parser::_method_build_fn(jule::Slice<_228d7aadb_Token>& _88233_tokens,jule::Bool _88250_method,jule::Bool _88264_prototype) {
	jule::Int _88317_i = 0LL;
	jule::Ptr<_228d31971_FnDecl> _88417_f = (*(this->self))._method_build_fn_prototype(_88233_tokens,_88317_i,_88250_method);
	if (_88264_prototype) {
		if (_88317_i < _88233_tokens.len()) {
			(*(this->self))._method_push_err(_88233_tokens[_88317_i + 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		return _88417_f;
	} else if (_88417_f == nullptr) {
		return _88417_f;
	}
	if (_88317_i >= _88233_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88417_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_228d7aadb_Token> _90017_block_tokens = _229a51c34_range(_88317_i,jule::Str("{", 1),jule::Str("}", 1),_88233_tokens);
	if (_90017_block_tokens != nullptr) {
		(*(_88417_f))._field_scope=(*(this->self))._method_build_scope(_90017_block_tokens);
		(*((*(_88417_f))._field_scope))._field_unsafety=(*(_88417_f))._field_unsafety;
		if (_88317_i < _88233_tokens.len()) {
			(*(this->self))._method_push_err(_88233_tokens[_88317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88417_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _88417_f;
}



inline jule::Slice<_228d7aadb_Token> _229a51c34_Parser::_method_get_use_decl_selectors(jule::Slice<_228d7aadb_Token> _91645_tokens) {
	jule::Int _91717_i = 0LL;
	_91645_tokens=_229a51c34_range(_91717_i,jule::Str("{", 1),jule::Str("}", 1),_91645_tokens);
	jule::Slice<jule::Slice<_228d7aadb_Token>> _91918_parts;
	jule::Slice<_2276bcb9e_Log> _91925_errs;
	std::tie(_91918_parts,_91925_errs) = _229a51c34_parts(_91645_tokens,8LLU,true);
	if (_91925_errs.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_91925_errs);
		return nullptr;
	}
	jule::Slice<_228d7aadb_Token> _92517_selectors = jule::Slice<_228d7aadb_Token>::alloc(0LL,static_cast<jule::I64>(_91918_parts.len()));
	{
		auto &expr = _91918_parts;
		auto it = expr.begin();
		_iter_begin_5066896368:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _229a51c34_part = *it;
			{
				if (_229a51c34_part.len() > 1LL) {
					(*this)._method_push_err(_229a51c34_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_228d7aadb_Token _93021_tok = _229a51c34_part[0LL];
				if ((_93021_tok._field_id != 2LLU) && (_93021_tok._field_id != 28LLU)) {
					(*this)._method_push_err(_93021_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					goto _iter_next_5066896368;
				}
				_92517_selectors.push(_93021_tok);
			}
			_iter_next_5066896368:;
			++it;
			goto _iter_begin_5066896368;
		}
		_iter_end_5066896368:;
	}
	return _92517_selectors;
}



inline void _229a51c34_Parser::_method_build_cpp_use_decl(jule::Ptr<_228d31971_UseDecl>& _94142_decl,jule::Slice<_228d7aadb_Token>& _94159_tokens) {
	if (_94159_tokens.len() > 1LL) {
		(*this)._method_push_err(_94159_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_228d7aadb_Token _94513_token = _94159_tokens[0LL];
	if ((_94513_token._field_id != 6LLU) || ((_94513_token._field_kind[0LL] != '`') && (_94513_token._field_kind[0LL] != '\"'))) {
		(*this)._method_push_err(_94513_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	(*(_94142_decl))._field_cpp_linked=true;
	(*(_94142_decl))._field_link_path=_94513_token._field_kind.slice(1LL,_94513_token._field_kind.len() - 1LL);
	if ((!(_2275ec68e_is_std_header_path((*(_94142_decl))._field_link_path)))) {
		(*(_94142_decl))._field_link_path=_227711594_join(jule::Slice<jule::Str>({(*(_94513_token._field_file))._method_dir(),(*(_94142_decl))._field_link_path}));
	}
}



inline void _229a51c34_Parser::_method_build_std_use_decl(jule::Ptr<_228d31971_UseDecl>& _95742_decl,jule::Slice<_228d7aadb_Token> _95762_tokens) {
	(*(_95742_decl))._field_std=true;
	_228d7aadb_Token _96017_token = _95762_tokens[0LL];
	if (_95762_tokens.len() < 3LL) {
		(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_95762_tokens=_95762_tokens.slice(2LL);
	_96017_token=_95762_tokens[_95762_tokens.len() - 1LL];
	{
		auto &_match_expr{ _96017_token._field_id };
		
		if (_match_expr == 23LLU) {
			_case_begin_5066927744:;
			{
				(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5066927840:;
			{
				if (_96017_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_228d7aadb_Token> _97821_selectors = nullptr;
				std::tie(_95762_tokens,_97821_selectors) = _229a51c34_range_last(_95762_tokens);
				(*(_95742_decl))._field_selected=(*this)._method_get_use_decl_selectors(_97821_selectors);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96017_token=_95762_tokens[_95762_tokens.len() - 1LL];
				if (_96017_token._field_id != 23LLU) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95762_tokens=_95762_tokens.slice(0LL,_95762_tokens.len() - 1LL);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5066927936:;
			{
				if (_96017_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95762_tokens=_95762_tokens.slice(0LL,_95762_tokens.len() - 1LL);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96017_token=_95762_tokens[_95762_tokens.len() - 1LL];
				if (_96017_token._field_id != 23LLU) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95762_tokens=_95762_tokens.slice(0LL,_95762_tokens.len() - 1LL);
				if (_95762_tokens.len() == 0LL) {
					(*this)._method_push_err(_96017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_95742_decl))._field_full=true;
			}
		}
		_match_end_5066927664:;
	}
	(*(_95742_decl))._field_link_path=jule::Str("std::", 5) + _229a51c34_tokstoa(_95762_tokens);
}



inline void _229a51c34_Parser::_method_build_ident_use_decl(jule::Ptr<_228d31971_UseDecl>& _102144_decl,jule::Slice<_228d7aadb_Token> _102164_tokens) {
	(*(_102144_decl))._field_std=false;
	_228d7aadb_Token _102417_token = _102164_tokens[_102164_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102417_token._field_id };
		
		if (_match_expr == 23LLU) {
			_case_begin_5066957632:;
			{
				(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5066957728:;
			{
				if (_102417_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_228d7aadb_Token> _103621_selectors = nullptr;
				std::tie(_102164_tokens,_103621_selectors) = _229a51c34_range_last(_102164_tokens);
				(*(_102144_decl))._field_selected=(*this)._method_get_use_decl_selectors(_103621_selectors);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102417_token=_102164_tokens[_102164_tokens.len() - 1LL];
				if (_102417_token._field_id != 23LLU) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102164_tokens=_102164_tokens.slice(0LL,_102164_tokens.len() - 1LL);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5066957824:;
			{
				if (_102417_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102164_tokens=_102164_tokens.slice(0LL,_102164_tokens.len() - 1LL);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102417_token=_102164_tokens[_102164_tokens.len() - 1LL];
				if (_102417_token._field_id != 23LLU) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102164_tokens=_102164_tokens.slice(0LL,_102164_tokens.len() - 1LL);
				if (_102164_tokens.len() == 0LL) {
					(*this)._method_push_err(_102417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_102144_decl))._field_full=true;
			}
		}
		_match_end_5066957424:;
	}
	(*(_102144_decl))._field_link_path=_229a51c34_tokstoa(_102164_tokens);
}



inline void _229a51c34_Parser::_method_parse_use_decl(jule::Ptr<_228d31971_UseDecl>& _108638_decl,jule::Slice<_228d7aadb_Token> _108658_tokens) {
	if ((*(_108638_decl))._field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_108638_decl,_108658_tokens);
		return;
	}
	_228d7aadb_Token _109217_token = _108658_tokens[0LL];
	if (_109217_token._field_id != 2LLU) {
		(*this)._method_push_err(_109217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	if ((_108658_tokens.len() > 2LL) && (_108658_tokens[1LL]._field_id == 12LLU)) {
		(*(_108638_decl))._field_alias=_109217_token._field_kind;
		if (_108658_tokens[2LL]._field_id != 2LLU) {
			(*this)._method_push_err(_109217_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			return;
		}
		_108658_tokens=_108658_tokens.slice(2LL);
		_109217_token=_108658_tokens[0LL];
	}
	
	{
		
		if (_109217_token._field_kind == jule::Str("std", 3)) {
			_case_begin_5066999568:;
			{
				(*this)._method_build_std_use_decl(_108638_decl,_108658_tokens);
			}
		}
		else {
			_case_begin_5066997648:;
			{
				(*this)._method_build_ident_use_decl(_108638_decl,_108658_tokens);
			}
		}
		_match_end_5066997536:;
	}
}



inline jule::Ptr<_228d31971_UseDecl> _229a51c34_Parser::_method_build_use_decl(jule::Slice<_228d7aadb_Token> _112137_tokens,jule::Bool _112154_cpp_linked) {
	jule::Ptr<_228d31971_UseDecl> _112217_decl = jule::new_struct<_228d31971_UseDecl>(new( std::nothrow ) _228d31971_UseDecl(_112137_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_228d7aadb_Token>(),_112154_cpp_linked,jule::Bool()));
	if (_112137_tokens.len() < 2LL) {
		(*this)._method_push_err((*(_112217_decl))._field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>());
		return nullptr;
	}
	_112137_tokens=_112137_tokens.slice(1LL);
	(*this)._method_parse_use_decl(_112217_decl,_112137_tokens);
	return _112217_decl;
}



inline jule::Ptr<_228d31971_Expr> _229a51c34_Parser::_method_build_enum_item_expr(jule::Ptr<jule::Int> _113544_i,jule::Slice<_228d7aadb_Token>& _113558_tokens) {
	jule::Int _113617_brace_n = 0LL;
	jule::Int _113713_expr_start = (*(_113544_i));
	for (; (*(_113544_i)) < _113558_tokens.len(); ((*(_113544_i)))++) {
		{
			_228d7aadb_Token _113917_t = _113558_tokens[(*(_113544_i))];
			if (_113917_t._field_id == 3LLU) {
				{
					auto &_match_expr{ _113917_t._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_5067018544:;
						{
							(_113617_brace_n)++;
							goto _iter_next_5067013424;
						}
					}
					else {
						_case_begin_5067016752:;
						{
							(_113617_brace_n)--;
						}
					}
					_match_end_5067016864:;
				}
			}
			if (_113617_brace_n > 0LL) {
				goto _iter_next_5067013424;
			}
			if ((_113917_t._field_id == 8LLU) || (((*(_113544_i)) + 1LL) >= _113558_tokens.len())) {
				jule::Slice<_228d7aadb_Token> _115825_expr_tokens = nullptr;
				if (_113917_t._field_id == 8LLU) {
					_115825_expr_tokens=_113558_tokens.slice(_113713_expr_start,(*(_113544_i)));
				} else {
					_115825_expr_tokens=_113558_tokens.slice(_113713_expr_start);
				}
				return (*(this->self))._method_build_expr(_115825_expr_tokens);
			}
		}
	_iter_next_5067013424:;
	}
	_iter_end_5067013424:;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>> _229a51c34_Parser::_method_build_enum_items(jule::Slice<_228d7aadb_Token>& _117041_tokens) {
	jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>> _117117_items = jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>>::alloc(0LL,1LL);
	jule::Ptr<jule::Int> _117217_i = jule::new_ptr<jule::Int>(0LL);
	for (; (*(_117217_i)) < _117041_tokens.len(); ((*(_117217_i)))++) {
		{
			_228d7aadb_Token _117421_t = _117041_tokens[(*(_117217_i))];
			if (_117421_t._field_id == 18LLU) {
				goto _iter_next_5067029440;
			}
			jule::Ptr<_228d31971_EnumItemDecl> _117921_item = jule::new_struct<_228d31971_EnumItemDecl>(new( std::nothrow ) _228d31971_EnumItemDecl());
			(*(_117921_item))._field_token=_117421_t;
			if ((*(_117921_item))._field_token._field_id != 2LLU) {
				(*(this->self))._method_push_err((*(_117921_item))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			}
			(*(_117921_item))._field_ident=(*(_117921_item))._field_token._field_kind;
			if ((((*(_117217_i)) + 1LL) >= _117041_tokens.len()) || (_117041_tokens[(*(_117217_i)) + 1LL]._field_id == 8LLU)) {
				if (((*(_117217_i)) + 1LL) < _117041_tokens.len()) {
					((*(_117217_i)))++;
				}
				_117117_items.push(_117921_item);
				goto _iter_next_5067029440;
			}
			((*(_117217_i)))++;
			_117421_t=_117041_tokens[(*(_117217_i))];
			((*(_117217_i)))++;
			if ((_117421_t._field_id != 7LLU) || (_117421_t._field_kind != jule::Str("=", 1))) {
				(*(this->self))._method_push_err(_117421_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>());
				goto _iter_next_5067029440;
			}
			if (((*(_117217_i)) >= _117041_tokens.len()) || (_117041_tokens[(*(_117217_i))]._field_id == 8LLU)) {
				(*(this->self))._method_push_err(_117421_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
				goto _iter_next_5067029440;
			}
			(*(_117921_item))._field_expr=(*(this->self))._method_build_enum_item_expr(_117217_i,_117041_tokens);
			_117117_items.push(_117921_item);
		}
	_iter_next_5067029440:;
	}
	_iter_end_5067029440:;
	return _117117_items;
}



inline jule::Ptr<_228d31971_EnumDecl> _229a51c34_Parser::_method_build_enum_decl(jule::Slice<_228d7aadb_Token>& _121140_tokens) {
	if ((_121140_tokens.len() < 2LL) || (_121140_tokens.len() < 3LL)) {
		(*(this->self))._method_push_err(_121140_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228d31971_EnumDecl> _121617_e = jule::new_struct<_228d31971_EnumDecl>(new( std::nothrow ) _228d31971_EnumDecl(_121140_tokens[1LL],jule::Bool(),jule::Str(),jule::Ptr<_228d31971_TypeDecl>(),jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>>(),jule::Ptr<_228d31971_CommentGroup>()));
	if ((*(_121617_e))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_121617_e))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_121617_e))._field_ident=(*(_121617_e))._field_token._field_kind;
	jule::Int _122417_i = 2LL;
	if (_121140_tokens[_122417_i]._field_id == 11LLU) {
		(_122417_i)++;
		if (_122417_i >= _121140_tokens.len()) {
			(*(this->self))._method_push_err(_121140_tokens[_122417_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return _121617_e;
		}
		std::tie((*(_121617_e))._field_kind,std::ignore) = (*(this->self))._method_build_type(_121140_tokens,(&(_122417_i)),true);
		if (_122417_i >= _121140_tokens.len()) {
			(*(this->self))._method_stop();
			(*(this->self))._method_push_err((*(_121617_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
			(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
			return _121617_e;
		}
	} else {
		(*(_121617_e))._field_kind=nullptr;
	}
	jule::Slice<_228d7aadb_Token> _124117_item_tokens = _229a51c34_range(_122417_i,jule::Str("{", 1),jule::Str("}", 1),_121140_tokens);
	if (_124117_item_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_121617_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _121617_e;
	} else if (_122417_i < _121140_tokens.len()) {
		(*(this->self))._method_push_err(_121140_tokens[_122417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_121617_e))._field_items=(*(this->self))._method_build_enum_items(_124117_item_tokens);
	return _121617_e;
}



inline jule::Ptr<_228d31971_FieldDecl> _229a51c34_Parser::_method_build_field(jule::Slice<_228d7aadb_Token> _125435_tokens) {
	jule::Ptr<_228d31971_FieldDecl> _125517_f = jule::new_struct<_228d31971_FieldDecl>(new( std::nothrow ) _228d31971_FieldDecl());
	(*(_125517_f))._field_public=_125435_tokens[0LL]._field_id == 21LLU;
	if ((*(_125517_f))._field_public) {
		if (_125435_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_125435_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125435_tokens=_125435_tokens.slice(1LL);
	}
	(*(_125517_f))._field_mutable=_125435_tokens[0LL]._field_id == 36LLU;
	if ((*(_125517_f))._field_mutable) {
		if (_125435_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_125435_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125435_tokens=_125435_tokens.slice(1LL);
	}
	(*(_125517_f))._field_token=_125435_tokens[0LL];
	if ((*(_125517_f))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_125517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_125517_f))._field_ident=(*(_125517_f))._field_token._field_kind;
	if (_125435_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_125435_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	} else if (_125435_tokens[1LL]._field_id != 11LLU) {
		(*(this->self))._method_push_err(_125435_tokens[1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_125435_tokens=_125435_tokens.slice(2LL);
	jule::Int _129217_i = 0LL;
	std::tie((*(_125517_f))._field_kind,std::ignore) = (*(this->self))._method_build_type(_125435_tokens,(&(_129217_i)),true);
	if (_129217_i < _125435_tokens.len()) {
		_228d7aadb_Token _129517_token = _125435_tokens[_129217_i];
		if ((_129517_token._field_id != 7LLU) || (_129517_token._field_kind != jule::Str("=", 1))) {
			(*(this->self))._method_push_err(_125435_tokens[_129217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_129217_i)++;
		if (_129217_i >= _125435_tokens.len()) {
			(*(this->self))._method_push_err(_129517_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125435_tokens=_125435_tokens.slice(_129217_i);
		(*(_125517_f))._field_default=(*(this->self))._method_build_expr(_125435_tokens);
	}
	return _125517_f;
}



inline jule::Slice<jule::Ptr<_228d31971_FieldDecl>> _229a51c34_Parser::_method_build_struct_decl_fields(jule::Slice<_228d7aadb_Token> _131248_tokens) {
	jule::Slice<jule::Ptr<_228d31971_FieldDecl>> _131317_fields = nullptr;
	jule::Slice<jule::Ptr<_228d45c71_Stmt>> _131417_stmts = _228d45c71_split_stmts(_131248_tokens);
	{
		auto &expr = _131417_stmts;
		auto it = expr.begin();
		_iter_begin_5067122896:;
		if (it != expr.end()) {
			jule::Ptr<_228d45c71_Stmt> _229a51c34_stmt = *it;
			{
				_131248_tokens=(*(_229a51c34_stmt))._field_tokens;
				if (_131248_tokens[0LL]._field_id == 18LLU) {
					goto _iter_next_5067122896;
				}
				jule::Ptr<_228d31971_FieldDecl> _132021_f = (*(this->self))._method_build_field(_131248_tokens);
				_131317_fields.push(_132021_f);
			}
			_iter_next_5067122896:;
			++it;
			goto _iter_begin_5067122896;
		}
		_iter_end_5067122896:;
	}
	return _131317_fields;
}



inline jule::Ptr<_228d31971_StructDecl> _229a51c34_Parser::_method_build_struct_decl(jule::Slice<_228d7aadb_Token>& _132642_tokens) {
	if (_132642_tokens.len() < 3LL) {
		(*(this->self))._method_push_err(_132642_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Int _133217_i = 1LL;
	jule::Ptr<_228d31971_StructDecl> _133317_s = jule::new_struct<_228d31971_StructDecl>(new( std::nothrow ) _228d31971_StructDecl(_132642_tokens[_133217_i],jule::Str(),jule::Slice<jule::Ptr<_228d31971_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_228d31971_CommentGroup>(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>()));
	if ((*(_133317_s))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_133317_s))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_133217_i)++;
	if (_133217_i >= _132642_tokens.len()) {
		(*(this->self))._method_push_err(_132642_tokens[_133217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _133317_s;
	}
	(*(_133317_s))._field_ident=(*(_133317_s))._field_token._field_kind;
	_228d7aadb_Token _134713_error_token = _132642_tokens[_133217_i];
	jule::Slice<_228d7aadb_Token> _134817_generics_tokens = _229a51c34_range(_133217_i,jule::Str("[", 1),jule::Str("]", 1),_132642_tokens);
	if (_134817_generics_tokens != nullptr) {
		(*(_133317_s))._field_generics=(*(this->self))._method_build_generics(_134817_generics_tokens,_134713_error_token);
	}
	if (_133217_i >= _132642_tokens.len()) {
		(*(this->self))._method_push_err(_132642_tokens[_133217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _133317_s;
	}
	jule::Slice<_228d7aadb_Token> _135717_body_tokens = _229a51c34_range(_133217_i,jule::Str("{", 1),jule::Str("}", 1),_132642_tokens);
	if (_135717_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_133317_s))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _133317_s;
	}
	if (_133217_i < _132642_tokens.len()) {
		(*(this->self))._method_push_err(_132642_tokens[_133217_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_133317_s))._field_fields=(*(this->self))._method_build_struct_decl_fields(_135717_body_tokens);
	return _133317_s;
}



inline void _229a51c34_Parser::_method_check_method_receiver(jule::Ptr<_228d31971_FnDecl>& _137141_f) {
	if ((*(_137141_f))._field_statically) {
		if (((*(_137141_f))._field_params.len() > 0LL) && (*((*(_137141_f))._field_params[0LL]))._method_is_self()) {
			(*this)._method_push_err((*(_137141_f))._field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((*(_137141_f))._field_params.len() == 0LL) {
		(*this)._method_push_err((*(_137141_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_228d31971_ParamDecl> _138413_param = (*(_137141_f))._field_params[0LL];
	if ((!((*(_138413_param))._method_is_self()))) {
		(*this)._method_push_err((*(_137141_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
}



inline jule::Slice<jule::Ptr<_228d31971_FnDecl>> _229a51c34_Parser::_method_build_trait_methods(jule::Slice<_228d7aadb_Token> _139143_tokens) {
	jule::Slice<jule::Ptr<_228d31971_FnDecl>> _139217_methods = nullptr;
	jule::Slice<jule::Ptr<_228d45c71_Stmt>> _139317_stmts = _228d45c71_split_stmts(_139143_tokens);
	{
		auto &expr = _139317_stmts;
		auto it = expr.begin();
		_iter_begin_5067175568:;
		if (it != expr.end()) {
			jule::Ptr<_228d45c71_Stmt> _229a51c34_stmt = *it;
			{
				_139143_tokens=_229a547e7_eliminate_comments((*(_229a51c34_stmt))._field_tokens);
				if (_139143_tokens.len() == 0LL) {
					goto _iter_next_5067175568;
				}
				jule::Bool _140021_is_pub = false;
				if (_139143_tokens[0LL]._field_id == 21LLU) {
					_140021_is_pub=true;
					if (_139143_tokens.len() == 1LL) {
						(*(this->self))._method_push_err(_139143_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						goto _iter_next_5067175568;
					}
					_139143_tokens=_139143_tokens.slice(1LL);
				}
				jule::Ptr<_228d31971_FnDecl> _141021_f = (*(this->self))._method_build_fn(_139143_tokens,true,true);
				if (_141021_f != nullptr) {
					if ((*(_141021_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_141021_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_method_receiver(_141021_f);
					if ((*(_141021_f))._field_generics.len() > 0LL) {
						(*(this->self))._method_push_err((*(_141021_f))._field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>());
					}
					(*(_141021_f))._field_public=_140021_is_pub;
					_139217_methods.push(_141021_f);
				}
			}
			_iter_next_5067175568:;
			++it;
			goto _iter_begin_5067175568;
		}
		_iter_end_5067175568:;
	}
	return _139217_methods;
}



inline jule::Ptr<_228d31971_TraitDecl> _229a51c34_Parser::_method_build_trait_decl(jule::Slice<_228d7aadb_Token>& _142641_tokens) {
	if (_142641_tokens.len() < 3LL) {
		(*(this->self))._method_push_err(_142641_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228d31971_TraitDecl> _143117_t = jule::new_struct<_228d31971_TraitDecl>(new( std::nothrow ) _228d31971_TraitDecl(_142641_tokens[1LL],jule::Str(),jule::Bool(),jule::Ptr<_228d31971_CommentGroup>(),jule::Slice<jule::Ptr<_228d31971_FnDecl>>()));
	if ((*(_143117_t))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_143117_t))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_143117_t))._field_ident=(*(_143117_t))._field_token._field_kind;
	jule::Int _143917_i = 2LL;
	jule::Slice<_228d7aadb_Token> _144017_body_tokens = _229a51c34_range(_143917_i,jule::Str("{", 1),jule::Str("}", 1),_142641_tokens);
	if (_144017_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_143117_t))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_143917_i < _142641_tokens.len()) {
		(*(this->self))._method_push_err(_142641_tokens[_143917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_143117_t))._field_methods=(*(this->self))._method_build_trait_methods(_144017_body_tokens);
	return _143117_t;
}



inline jule::Ptr<_228d31971_FnDecl> _229a51c34_Parser::_method_build_cpp_link_fn(jule::Slice<_228d7aadb_Token> _145441_tokens) {
	_145441_tokens=_145441_tokens.slice(1LL);
	jule::Ptr<_228d31971_FnDecl> _145617_f = (*(this->self))._method_build_fn(_145441_tokens,false,true);
	if (_145617_f != nullptr) {
		if ((*(_145617_f))._method_is_anon()) {
			(*(this->self))._method_push_err((*(_145617_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		(*(_145617_f))._field_cpp_linked=true;
	}
	return _145617_f;
}



inline jule::Ptr<_228d31971_VarDecl> _229a51c34_Parser::_method_build_cpp_link_var(jule::Slice<_228d7aadb_Token> _146642_tokens) {
	_146642_tokens=_146642_tokens.slice(1LL);
	jule::Ptr<_228d31971_VarDecl> _146817_v = (*(this->self))._method_build_var(_146642_tokens);
	if (_146817_v != nullptr) {
		(*(_146817_v))._field_cpp_linked=true;
		if ((*(_146817_v))._field_expr != nullptr) {
			(*(this->self))._method_push_err((*(_146817_v))._field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>());
		}
	}
	return _146817_v;
}



inline jule::Ptr<_228d31971_StructDecl> _229a51c34_Parser::_method_build_cpp_link_struct(jule::Slice<_228d7aadb_Token> _147845_tokens) {
	_147845_tokens=_147845_tokens.slice(1LL);
	jule::Ptr<_228d31971_StructDecl> _148017_s = (*(this->self))._method_build_struct_decl(_147845_tokens);
	if (_148017_s != nullptr) {
		(*(_148017_s))._field_cpp_linked=true;
	}
	return _148017_s;
}



inline jule::Ptr<_228d31971_TypeAliasDecl> _229a51c34_Parser::_method_build_cpp_link_type_alias(jule::Slice<_228d7aadb_Token> _148749_tokens) {
	_148749_tokens=_148749_tokens.slice(1LL);
	jule::Ptr<_228d31971_TypeAliasDecl> _148917_t = (*(this->self))._method_build_type_alias_decl(_148749_tokens);
	if (_148917_t != nullptr) {
		(*(_148917_t))._field_cpp_linked=true;
	}
	return _148917_t;
}



inline jule::Ptr<_228d31971_UseDecl> _229a51c34_Parser::_method_build_cpp_link_use(jule::Slice<_228d7aadb_Token> _149642_tokens) {
	if (_149642_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_149642_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_149642_tokens=_149642_tokens.slice(1LL);
	
	return (*(this->self))._method_build_use_decl(_149642_tokens,true);
}



inline jule::Any _229a51c34_Parser::_method_build_cpp_link(jule::Slice<_228d7aadb_Token>& _150739_tokens) {
	_228d7aadb_Token _150817_token = _150739_tokens[0LL];
	if (_150739_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_150817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	_150817_token=_150739_tokens[1LL];
	{
		auto &_match_expr{ _150817_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_5067253264:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_use(_150739_tokens));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_5067253360:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_fn(_150739_tokens));
			}
		}
		else if (_match_expr == 9LLU || _match_expr == 34LLU) {
			_case_begin_5067253456:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_var(_150739_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_5067253552:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_struct(_150739_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5067254928:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_type_alias(_150739_tokens));
			}
		}
		else {
			_case_begin_5067249520:;
			{
				(*(this->self))._method_push_err(_150817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5067252800:;
	}
	return jule::Any(nullptr);
}



inline jule::Ptr<_228d31971_FnDecl> _229a51c34_Parser::_method_get_method(jule::Slice<_228d7aadb_Token>& _153835_tokens) {
	jule::Int _153917_i = 0LL;
	_228d7aadb_Token _154017_token = _153835_tokens[_153917_i];
	if (_154017_token._field_id == 38LLU) {
		if ((_153917_i + 1LL) >= _153835_tokens.len()) {
			(*(this->self))._method_push_err(_154017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_153917_i)++;
		_154017_token=_153835_tokens[_153917_i];
	}
	if (_154017_token._field_id == 35LLU) {
		if ((_153917_i + 1LL) >= _153835_tokens.len()) {
			(*(this->self))._method_push_err(_154017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_153917_i)++;
		_154017_token=_153835_tokens[_153917_i];
	}
	if (_154017_token._field_id != 33LLU) {
		(*(this->self))._method_push_err(_154017_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228d31971_FnDecl> _156417_f = (*(this->self))._method_build_fn(_153835_tokens,true,false);
	if ((_156417_f != nullptr) && (*(_156417_f))._method_is_anon()) {
		(*(this->self))._method_push_err((*(_156417_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _156417_f;
}



inline void _229a51c34_Parser::_method_parse_impl_body(jule::Ptr<_228d31971_Impl>& _157140_ipl,jule::Slice<_228d7aadb_Token>& _157157_tokens) {
	jule::Slice<jule::Ptr<_228d45c71_Stmt>> _157217_stmts = _228d45c71_split_stmts(_157157_tokens);
	{
		auto &expr = _157217_stmts;
		auto it = expr.begin();
		_iter_begin_5067284512:;
		if (it != expr.end()) {
			jule::Ptr<_228d45c71_Stmt> _229a51c34_stmt = *it;
			{
				_157157_tokens=(*(_229a51c34_stmt))._field_tokens;
				_228d7aadb_Token _157521_token = _157157_tokens[0LL];
				jule::Bool _157621_is_pub = false;
				{
					auto &_match_expr{ _157521_token._field_id };
					
					if (_match_expr == 18LLU) {
						_case_begin_5067288800:;
						{
							goto _iter_next_5067284512;
						}
					}
					else if (_match_expr == 39LLU) {
						_case_begin_5067288896:;
						{
							(*(this->self))._method_push_directive((*(this->self))._method_build_directive(_157157_tokens));
							goto _iter_next_5067284512;
						}
					}
					else if (_match_expr == 21LLU) {
						_case_begin_5067289008:;
						{
							_157621_is_pub=true;
							if (_157157_tokens.len() == 1LL) {
								(*(this->self))._method_push_err(_157157_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
								goto _iter_next_5067284512;
							}
							_157157_tokens=_157157_tokens.slice(1LL);
							if (_157157_tokens.len() > 0LL) {
								_157521_token=_157157_tokens[0LL];
							}
						}
					}
					_match_end_5067288720:;
				}
				{
					auto &_match_expr{ _157521_token._field_id };
					
					if (_match_expr == 9LLU) {
						_case_begin_5067296928:;
						{
							jule::Ptr<_228d31971_VarDecl> _160025_v = (*(this->self))._method_build_var(_157157_tokens);
							if (_160025_v != nullptr) {
								(*(_160025_v))._field_public=_157621_is_pub;
								(*(_157140_ipl))._field_statics = jule::alloc_for_append((*(_157140_ipl))._field_statics,1);(*(_157140_ipl))._field_statics.push(_160025_v);
							}
						}
					}
					else if (_match_expr == 38LLU || _match_expr == 33LLU || _match_expr == 35LLU) {
						_case_begin_5067292736:;
						{
							jule::Ptr<_228d31971_FnDecl> _160925_f = (*(this->self))._method_get_method(_157157_tokens);
							if (_160925_f != nullptr) {
								(*(this->self))._method_check_method_receiver(_160925_f);
								(*(this->self))._method_apply_fn_meta(_160925_f,_157621_is_pub);
								(*(_157140_ipl))._field_methods = jule::alloc_for_append((*(_157140_ipl))._field_methods,1);(*(_157140_ipl))._field_methods.push(_160925_f);
							}
						}
					}
					else {
						_case_begin_5067294048:;
						{
							(*(this->self))._method_push_err(_157521_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							goto _iter_next_5067284512;
						}
					}
					_match_end_5067296576:;
				}
			}
			_iter_next_5067284512:;
			++it;
			goto _iter_begin_5067284512;
		}
		_iter_end_5067284512:;
	}
}



inline jule::Ptr<_228d31971_Impl> _229a51c34_Parser::_method_build_impl(jule::Slice<_228d7aadb_Token> _162334_tokens) {
	_228d7aadb_Token _162417_token = _162334_tokens[0LL];
	if (_162334_tokens.len() < 2LL) {
		(*(this->self))._method_push_err(_162417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Int _163017_i = 1LL;
	jule::Ptr<_228d31971_TypeDecl> _163218_base;
	jule::Bool _163228_ok;
	std::tie(_163218_base,_163228_ok) = (*(this->self))._method_build_type(_162334_tokens,(&(_163017_i)),true);
	if ((!(_163228_ok))) {
		return nullptr;
	}
	if (_163017_i >= _162334_tokens.len()) {
		(*(this->self))._method_push_err(_162417_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228d31971_Impl> _164117_ipl = jule::new_struct<_228d31971_Impl>(new( std::nothrow ) _228d31971_Impl(_163218_base,jule::Ptr<_228d31971_TypeDecl>(),jule::Slice<jule::Ptr<_228d31971_FnDecl>>(),jule::Slice<jule::Ptr<_228d31971_VarDecl>>()));
	_162417_token=_162334_tokens[_163017_i];
	if (_162417_token._field_id != 12LLU) {
		if ((_162417_token._field_id == 3LLU) && (_162417_token._field_kind == jule::Str("{", 1))) {
			std::tie((*(_164117_ipl))._field_base,(*(_164117_ipl))._field_dest) = std::make_tuple((*(_164117_ipl))._field_dest,(*(_164117_ipl))._field_base);
			goto _julec_label_body;
		}
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162417_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	(_163017_i)++;
	if (_163017_i >= _162334_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162417_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_164117_ipl))._field_dest,_163228_ok) = (*(this->self))._method_build_type(_162334_tokens,(&(_163017_i)),true);
	if ((!(_163228_ok))) {
		return nullptr;
	}
	if (_163017_i >= _162334_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162417_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_body:;
	jule::Slice<_228d7aadb_Token> _168117_body_tokens = _229a51c34_range(_163017_i,jule::Str("{", 1),jule::Str("}", 1),_162334_tokens);
	if (_168117_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162417_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_163017_i < _162334_tokens.len()) {
		(*(this->self))._method_push_err(_162334_tokens[_163017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_parse_impl_body(_164117_ipl,_168117_body_tokens);
	return _164117_ipl;
}



inline jule::Any _229a51c34_Parser::_method_build_node_data(jule::Slice<_228d7aadb_Token>& _169540_tokens) {
	_228d7aadb_Token _169617_token = _169540_tokens[0LL];
	{
		auto &_match_expr{ _169617_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_5067356528:;
			{
				
				return jule::Any((*(this->self))._method_build_use_decl(_169540_tokens,false));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_5067354512:;
			{
				jule::Ptr<_228d31971_FnDecl> _170421_f = (*(this->self))._method_build_fn(_169540_tokens,false,false);
				if (_170421_f != nullptr) {
					(*(_170421_f))._field_global=true;
					if ((*(_170421_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_170421_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
				}
				return jule::Any(_170421_f);
			}
		}
		else if (_match_expr == 34LLU || _match_expr == 9LLU || _match_expr == 36LLU || _match_expr == 38LLU) {
			_case_begin_5067354608:;
			{
				return jule::Any((*(this->self))._method_build_var(_169540_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5067354704:;
			{
				return jule::Any((*(this->self))._method_build_type_alias_decl(_169540_tokens));
			}
		}
		else if (_match_expr == 24LLU) {
			_case_begin_5067354800:;
			{
				return jule::Any((*(this->self))._method_build_enum_decl(_169540_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_5067354896:;
			{
				return jule::Any((*(this->self))._method_build_struct_decl(_169540_tokens));
			}
		}
		else if (_match_expr == 29LLU) {
			_case_begin_5067357120:;
			{
				return jule::Any((*(this->self))._method_build_trait_decl(_169540_tokens));
			}
		}
		else if (_match_expr == 30LLU) {
			_case_begin_5067357216:;
			{
				return jule::Any((*(this->self))._method_build_impl(_169540_tokens));
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_5067357312:;
			{
				return (*(this->self))._method_build_cpp_link(_169540_tokens);
			}
		}
		else if (_match_expr == 39LLU) {
			_case_begin_5067357408:;
			{
				return jule::Any((*(this->self))._method_build_directive(_169540_tokens));
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_5067357504:;
			{
				return jule::Any(_229a51c34_build_comment(_169617_token));
			}
		}
		else {
			_case_begin_5067352816:;
			{
				(*(this->self))._method_push_err(_169617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_5067353728:;
	}
}



inline void _229a51c34_Parser::_method_check_comment_group(_228d31971_Node& _174939_node) {
	if ((*this)._field_comment_group == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _174939_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_Comment>>() || _match_expr.type_is<jule::Ptr<_228d31971_Directive>>()) {
			_case_begin_5067381168:;
		}
		else {
			_case_begin_5067381056:;
			{
				(*this)._field_comment_group=nullptr;
			}
		}
		_match_end_5067381424:;
	}
}



inline void _229a51c34_Parser::_method_check_directive(_228d31971_Node& _176335_node) {
	if ((*this)._field_directives == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _176335_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_Directive>>() || _match_expr.type_is<jule::Ptr<_228d31971_Comment>>()) {
			_case_begin_5067386784:;
		}
		else {
			_case_begin_5067385552:;
			{
				if ((*this)._field_directives.len() != 0LL) {
					(*this)._method_push_err((*((*this)._field_directives[0LL]))._field_tag,jule::Str("this directive is out of scope, cant assign to any define", 57),jule::Slice<jule::Any>());
				}
				(*this)._field_directives=nullptr;
			}
		}
		_match_end_5067385920:;
	}
}



inline void _229a51c34_Parser::_method_apply_fn_meta(jule::Ptr<_228d31971_FnDecl>& _178137_f,jule::Bool _178149_is_pub) {
	(*(_178137_f))._field_public=_178149_is_pub;
	(*(_178137_f))._field_directives=(*this)._field_directives;
	(*this)._field_directives=nullptr;
	(*(_178137_f))._field_doc_comments=(*this)._field_comment_group;
	(*this)._field_comment_group=nullptr;
}



inline void _229a51c34_Parser::_method_apply_meta(_228d31971_Node& _178934_node,jule::Bool _178946_is_pub) {
	{
		auto &_match_expr{ _178934_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_VarDecl>>()) {
			_case_begin_5067397136:;
			{
				jule::Ptr<_228d31971_VarDecl> _179221_v = _178934_node._field_data.operator jule::Ptr<_228d31971_VarDecl>();
				if (_179221_v == nullptr) {
					return;
				}
				(*(_179221_v))._field_public=_178946_is_pub;
				(*(_179221_v))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_179221_v))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_FnDecl>>()) {
			_case_begin_5067397232:;
			{
				jule::Ptr<_228d31971_FnDecl> _180521_f = _178934_node._field_data.operator jule::Ptr<_228d31971_FnDecl>();
				if (_180521_f == nullptr) {
					return;
				}
				(*this)._method_apply_fn_meta(_180521_f,_178946_is_pub);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TypeAliasDecl>>()) {
			_case_begin_5067397328:;
			{
				jule::Ptr<_228d31971_TypeAliasDecl> _181321_tad = _178934_node._field_data.operator jule::Ptr<_228d31971_TypeAliasDecl>();
				if (_181321_tad == nullptr) {
					return;
				}
				(*(_181321_tad))._field_public=_178946_is_pub;
				(*(_181321_tad))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_EnumDecl>>()) {
			_case_begin_5067397424:;
			{
				jule::Ptr<_228d31971_EnumDecl> _182221_ed = _178934_node._field_data.operator jule::Ptr<_228d31971_EnumDecl>();
				if (_182221_ed == nullptr) {
					return;
				}
				(*(_182221_ed))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_182221_ed))._field_public=_178946_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_StructDecl>>()) {
			_case_begin_5067397648:;
			{
				jule::Ptr<_228d31971_StructDecl> _183121_sd = _178934_node._field_data.operator jule::Ptr<_228d31971_StructDecl>();
				if (_183121_sd == nullptr) {
					return;
				}
				(*(_183121_sd))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
				(*(_183121_sd))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_183121_sd))._field_public=_178946_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TraitDecl>>()) {
			_case_begin_5067397744:;
			{
				jule::Ptr<_228d31971_TraitDecl> _184221_td = _178934_node._field_data.operator jule::Ptr<_228d31971_TraitDecl>();
				if (_184221_td == nullptr) {
					return;
				}
				(*(_184221_td))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_184221_td))._field_public=_178946_is_pub;
			}
		}
		else {
			_case_begin_5067396704:;
			{
				if (_178946_is_pub) {
					(*this)._method_push_err(_178934_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_5067396624:;
	}
}



inline void _229a51c34_Parser::_method_check_use_decl(_228d31971_Node& _185734_node) {
	{
		auto &_match_expr{ _185734_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_UseDecl>>()) {
			_case_begin_5067426096:;
		}
		else {
			_case_begin_5067425104:;
			{
				return;
			}
		}
		_match_end_5067424944:;
	}
	if ((*((*this)._field_ast))._field_decls.len() > 0LL) {
		(*this)._method_push_err(_185734_node._field_token,jule::Str("use declarations must declared before other declarations", 56),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>());
	}
}



inline std::tuple<jule::Bool,jule::Any> _229a51c34_Parser::_method_build_general_scope_node_data(jule::Slice<_228d7aadb_Token> _187253_st) {
	jule::Bool _187268_is_pub = jule::Bool();
	jule::Any _187282_data = jule::Any();
	if (_187253_st[0LL]._field_id == 21LLU) {
		_187268_is_pub=true;
		_187253_st=_187253_st.slice(1LL);
		if (_187253_st.len() == 0LL) {
			(*(this->self))._method_push_err(_187253_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return std::make_tuple(_187268_is_pub,_187282_data);
		}
	}
	_187282_data=(*(this->self))._method_build_node_data(_187253_st);
	return std::make_tuple(_187268_is_pub,_187282_data);
}



inline _228d31971_Node _229a51c34_Parser::_method_parse_node(jule::Slice<_228d7aadb_Token>& _188735_st) {
	_228d31971_Node _188817_node = _228d31971_Node(_188735_st[0LL],jule::Any());
	jule::Bool _189214_is_pub;
	jule::Any _189226_data;
	std::tie(_189214_is_pub,_189226_data) = (*(this->self))._method_build_general_scope_node_data(_188735_st);
	if (_189226_data == nullptr) {
		return _188817_node;
	}
	_188817_node._field_data=_189226_data;
	(*(this->self))._method_apply_meta(_188817_node,_189214_is_pub);
	(*(this->self))._method_check_comment_group(_188817_node);
	(*(this->self))._method_check_directive(_188817_node);
	(*(this->self))._method_check_use_decl(_188817_node);
	return _188817_node;
}



inline void _229a51c34_Parser::_method_append_node(jule::Slice<_228d7aadb_Token>& _190636_st) {
	if (_190636_st.len() == 0LL) {
		return;
	}
	_228d31971_Node _191117_node = (*(this->self))._method_parse_node(_190636_st);
	if ((_191117_node._field_data == nullptr) || (*(this->self))._method_stopped()) {
		return;
	}
	{
		
		if (_191117_node._method_is_directive()) {
			_case_begin_5067456544:;
			{
				(*(this->self))._method_push_directive(_191117_node._field_data.operator jule::Ptr<_228d31971_Directive>());
			}
		}
		else if (_191117_node._method_is_use_decl()) {
			_case_begin_5067456640:;
			{
				(*((*(this->self))._field_ast))._field_use_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_use_decls,1);(*((*(this->self))._field_ast))._field_use_decls.push(_191117_node._field_data.operator jule::Ptr<_228d31971_UseDecl>());
			}
		}
		else if (_191117_node._method_is_decl()) {
			_case_begin_5067456736:;
			{
				(*((*(this->self))._field_ast))._field_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_decls,1);(*((*(this->self))._field_ast))._field_decls.push(_191117_node);
			}
		}
		else if (_191117_node._method_is_comment()) {
			_case_begin_5067456832:;
			{
				if ((*(this->self))._field_comment_group == nullptr) {
					(*(this->self))._field_comment_group=jule::new_struct<_228d31971_CommentGroup>(new( std::nothrow ) _228d31971_CommentGroup());
				}
				(*((*(this->self))._field_comment_group))._field_comments = jule::alloc_for_append((*((*(this->self))._field_comment_group))._field_comments,1);(*((*(this->self))._field_comment_group))._field_comments.push(_191117_node._field_data.operator jule::Ptr<_228d31971_Comment>());
			}
		}
		else if (_191117_node._method_is_impl()) {
			_case_begin_5067458576:;
			{
				(*((*(this->self))._field_ast))._field_impls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_impls,1);(*((*(this->self))._field_ast))._field_impls.push(_191117_node._field_data.operator jule::Ptr<_228d31971_Impl>());
			}
		}
		else {
			_case_begin_5067455072:;
			{
				(*(this->self))._method_push_err(_191117_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5067454992:;
	}
}



inline void _229a51c34_Parser::_method_remove_range(jule::Int _194131_i,jule::Str _194139_kind,jule::Slice<_228d7aadb_Token>& _194151_tokens,jule::Slice<jule::Int>& _194173_ranges) {
	jule::Str _194213_close = _229a51c34_get_close_kind_of_brace(_194139_kind);
	for (; _194131_i >= 0LL; (_194131_i)--) {
		{
			_228d7aadb_Token _194417_tok = _194151_tokens[_194173_ranges[_194131_i]];
			if (_194417_tok._field_kind != _194213_close) {
				goto _iter_next_5067477744;
			}
			_194173_ranges=jule::append(_194173_ranges.slice(0LL,_194131_i),_194173_ranges.slice(_194131_i + 1LL));
			goto _iter_end_5067477744;
		}
	_iter_next_5067477744:;
	}
	_iter_end_5067477744:;
}



inline void _229a51c34_Parser::_method_push_wrong_order_close_err(_228d7aadb_Token& _195446_t,jule::Slice<_228d7aadb_Token>& _195457_tokens,jule::Slice<jule::Int>& _195475_ranges) {
	{
		auto &_match_expr{ _195457_tokens[_195475_ranges[_195475_ranges.len() - 1LL]]._field_kind };
		
		if (_match_expr == jule::Str("(", 1)) {
			_case_begin_5067486416:;
			{
				(*this)._method_push_err(_195446_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("{", 1)) {
			_case_begin_5067486512:;
			{
				(*this)._method_push_err(_195446_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("[", 1)) {
			_case_begin_5067486608:;
			{
				(*this)._method_push_err(_195446_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>());
			}
		}
		_match_end_5067486272:;
	}
}



inline void _229a51c34_Parser::_method_push_range_close(_228d7aadb_Token _196235_t,jule::Str _196245_left,jule::Slice<_228d7aadb_Token>& _196257_tokens,jule::Slice<jule::Int>& _196279_ranges) {
	jule::I64 _196313_n = _196279_ranges.len();
	if (_196313_n == 0LL) {
		{
			auto &_match_expr{ _196235_t._field_kind };
			
			if (_match_expr == jule::Str("]", 1)) {
				_case_begin_5067497536:;
				{
					(*this)._method_push_err(_196235_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str("}", 1)) {
				_case_begin_5067497632:;
				{
					(*this)._method_push_err(_196235_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str(")", 1)) {
				_case_begin_5067497728:;
				{
					(*this)._method_push_err(_196235_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>());
				}
			}
			_match_end_5067497424:;
		}
		return;
	} else if (_196257_tokens[_196279_ranges[_196313_n - 1LL]]._field_kind != _196245_left) {
		(*this)._method_push_wrong_order_close_err(_196235_t,_196257_tokens,_196279_ranges);
	}
	(*this)._method_remove_range(static_cast<jule::I64>(_196313_n - 1LL),_196235_t._field_kind,_196257_tokens,_196279_ranges);
}



inline void _229a51c34_Parser::_method_check_ranges(jule::Slice<_228d7aadb_Token>& _197732_tokens) {
	jule::Slice<jule::Int> _197817_ranges = nullptr;
	{
		auto &expr = _197732_tokens;
		auto it = expr.begin();
		_iter_begin_5067508624:;
		if (it != expr.end()) {
			jule::Int _229a51c34_i = it - expr.begin();
			_228d7aadb_Token &_229a51c34_token = *it;
			{
				if (_229a51c34_token._field_id != 3LLU) {
					goto _iter_next_5067508624;
				}
				{
					auto &_match_expr{ _229a51c34_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
						_case_begin_5067510800:;
						{
							_197817_ranges.push(_229a51c34_i);
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_5067511568:;
						{
							(*this)._method_push_range_close(_229a51c34_token,jule::Str("(", 1),_197732_tokens,_197817_ranges);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_5067511664:;
						{
							(*this)._method_push_range_close(_229a51c34_token,jule::Str("{", 1),_197732_tokens,_197817_ranges);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_5067512064:;
						{
							(*this)._method_push_range_close(_229a51c34_token,jule::Str("[", 1),_197732_tokens,_197817_ranges);
						}
					}
					_match_end_5067510592:;
				}
			}
			_iter_next_5067508624:;
			++it;
			_229a51c34_i++;
			goto _iter_begin_5067508624;
		}
		_iter_end_5067508624:;
	}
	{
		auto &expr = _197817_ranges;
		auto it = expr.begin();
		_iter_begin_5067512160:;
		if (it != expr.end()) {
			jule::Int &_229a51c34_i = *it;
			{
				_228d7aadb_Token _200317_token = _197732_tokens[_229a51c34_i];
				{
					auto &_match_expr{ _200317_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_5067520112:;
						{
							(*this)._method_push_err(_200317_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("{", 1)) {
						_case_begin_5067520208:;
						{
							(*this)._method_push_err(_200317_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("[", 1)) {
						_case_begin_5067520320:;
						{
							(*this)._method_push_err(_200317_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					_match_end_5067520032:;
				}
			}
			_iter_next_5067512160:;
			++it;
			goto _iter_begin_5067512160;
		}
		_iter_end_5067512160:;
	}
}



inline void _229a51c34_Parser::_method_parse(jule::Ptr<_228d34677_File>& _201230_f) {
	(*(this->self))._field_ast=jule::new_struct<_228d3160d_Ast>(new( std::nothrow ) _228d3160d_Ast(_201230_f,jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Slice<jule::Ptr<_228d31971_UseDecl>>(),jule::Slice<jule::Ptr<_228d31971_Impl>>(),jule::Slice<_228d31971_Node>()));
	jule::Slice<_228d7aadb_Token> _201717_tokens = (*(_201230_f))._method_tokens();
	(*(this->self))._method_check_ranges(_201717_tokens);
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_228d45c71_Stmt>> _202317_stmts = _228d45c71_split_stmts(_201717_tokens);
	jule::Int _202617_i = 0LL;
	_julec_label_iter:;
	for (; _202617_i < _202317_stmts.len(); (_202617_i)++) {
		{
			jule::Ptr<_228d45c71_Stmt> _202921_stmt = _202317_stmts[_202617_i];
			if ((*(_202921_stmt))._field_tokens.len() == 0LL) {
				return;
			}
			jule::Any _203425_data;
			std::tie(std::ignore,_203425_data) = (*(this->self))._method_build_general_scope_node_data((*(_202921_stmt))._field_tokens);
			if (_203425_data == nullptr) {
				goto _iter_end_5067529552;
			}
			if ((*(this->self))._method_stopped()) {
				return;
			}
			{
				auto &_match_expr{ _203425_data };
				
				if (_match_expr.type_is<jule::Ptr<_228d31971_Directive>>()) {
					_case_begin_5067538848:;
					{
						jule::Ptr<_228d31971_Directive> _204525_d = _203425_data.operator jule::Ptr<_228d31971_Directive>();
						if ((_204525_d != nullptr) && _22763bd1b_is_top_directive((*(_204525_d))._field_tag._field_kind)) {
							(*((*(this->self))._field_ast))._field_top_directives = jule::alloc_for_append((*((*(this->self))._field_ast))._field_top_directives,1);(*((*(this->self))._field_ast))._field_top_directives.push(_204525_d);
						} else {
							goto _iter_end_5067529552;
						}
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_228d31971_Comment>>() || _match_expr.type_is<jule::Ptr<_228d31971_CommentGroup>>()) {
					_case_begin_5067538944:;
				}
				else {
					_case_begin_5067538448:;
					{
						goto _iter_end_5067529552;
					}
				}
				_match_end_5067538080:;
			}
		}
	_iter_next_5067529552:;
	}
	_iter_end_5067529552:;
	(*(this->self))._field_errors=nullptr;
	for (; _202617_i < _202317_stmts.len(); (_202617_i)++) {
		{
			jule::Ptr<_228d45c71_Stmt> _206521_stmt = _202317_stmts[_202617_i];
			(*(this->self))._method_append_node((*(_206521_stmt))._field_tokens);
			if ((*(this->self))._method_stopped()) {
				goto _iter_end_5067532048;
			}
		}
	_iter_next_5067532048:;
	}
	_iter_end_5067532048:;
}







std::ostream &operator<<(std::ostream &_Stream, const _229a51c34_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _1e5543d98_TypeBuilder::_method_push_err(_228d7aadb_Token _7827_token,jule::Str _7841_fmt) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_err(_7827_token,_7841_fmt,jule::Slice<jule::Any>());
	}
}



inline void _1e5543d98_TypeBuilder::_method_push_suggestion(jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_suggestion(_8534_fmt,_8547_args);
	}
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_prim(void) {
	jule::Ptr<_228d31971_TypeDecl> _9217_t = _1e5543d98_build_prim_type((*this)._field_tokens[(*((*this)._field_i))]);
	((*((*this)._field_i)))++;
	return _9217_t;
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_namespace(void) {
	jule::Ptr<_228d31971_TypeDecl> _9817_t = jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl((*this)._field_tokens[(*((*this)._field_i))],jule::Any()));
	jule::Ptr<_228d31971_NamespaceTypeDecl> _10217_nst = jule::new_struct<_228d31971_NamespaceTypeDecl>(new( std::nothrow ) _228d31971_NamespaceTypeDecl());
	jule::Int _10317_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_228d7aadb_Token _10521_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (jule::unsafe_mod(_10317_n,2LL) == 0LL) {
				if (_10521_token._field_id != 2LLU) {
					(*this)._method_push_err(_10521_token,jule::Str("invalid syntax", 14));
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
				}
				(*(_10217_nst))._field_idents = jule::alloc_for_append((*(_10217_nst))._field_idents,1);(*(_10217_nst))._field_idents.push(_10521_token);
			} else if (_10521_token._field_id != 23LLU) {
				goto _iter_end_5067565008;
			}
			(_10317_n)++;
		}
	_iter_next_5067565008:;
	}
	_iter_end_5067565008:;
	(*(_10217_nst))._field_idents=(*(_10217_nst))._field_idents.slice(0LL,(*(_10217_nst))._field_idents.len() - 1LL);
	((*((*this)._field_i)))--;
	(*(_10217_nst))._field_kind=(*((*this)._method_build_ident()))._field_kind.operator jule::Ptr<_228d31971_IdentTypeDecl>();
	(*(_9817_t))._field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _1e5543d98_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		return nullptr;
	}
	_228d7aadb_Token _13113_token = (*this)._field_tokens[(*((*this)._field_i))];
	if ((_13113_token._field_id != 3LLU) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_228d7aadb_Token>> _13617_parts = (*this)._method_ident_generics();
	if (_13617_parts.len() == 0LL) {
		(*this)._method_push_err(_13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ptr<_228d31971_TypeDecl>> _14217_types = jule::Slice<jule::Ptr<_228d31971_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_13617_parts.len()));
	{
		auto &expr = _13617_parts;
		auto it = expr.begin();
		_iter_begin_5067591072:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _1e5543d98_part = *it;
			{
				jule::Int _14421_j = 0LL;
				jule::Ptr<_228d31971_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = (*((*this)._field_p))._method_build_type(_1e5543d98_part,(&(_14421_j)),true);
				if (_14421_j < _1e5543d98_part.len()) {
					(*this)._method_push_err(_1e5543d98_part[_14421_j],jule::Str("invalid syntax", 14));
				}
				_14217_types.push(_14522_t);
			}
			_iter_next_5067591072:;
			++it;
			goto _iter_begin_5067591072;
		}
		_iter_end_5067591072:;
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_228d7aadb_Token>> _1e5543d98_TypeBuilder::_method_ident_generics(void) {
	jule::Int _15513_first = (*((*this)._field_i));
	jule::Int _15617_range_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_228d7aadb_Token _15817_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (_15817_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _15817_token._field_kind };
					
					if (_match_expr == jule::Str("[", 1)) {
						_case_begin_5067603296:;
						{
							(_15617_range_n)++;
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_5067603408:;
						{
							(_15617_range_n)--;
						}
					}
					_match_end_5067602816:;
				}
			}
			if (_15617_range_n == 0LL) {
				((*((*this)._field_i)))++;
				goto _iter_end_5067585920;
			}
		}
	_iter_next_5067585920:;
	}
	_iter_end_5067585920:;
	jule::Slice<_228d7aadb_Token> _17017_tokens = (*this)._field_tokens.slice(_15513_first + 1LL,(*((*this)._field_i)) - 1LL);
	jule::Slice<jule::Slice<_228d7aadb_Token>> _17118_parts;
	jule::Slice<_2276bcb9e_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _229a51c34_parts(_17017_tokens,8LLU,true);
	if ((*this)._field_err) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < (*this)._field_tokens.len()) && ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id == 23LLU)) {
		return (*this)._method_build_namespace();
	}
	_228d7aadb_Token _18217_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_228d31971_IdentTypeDecl> _18317_it = jule::new_struct<_228d31971_IdentTypeDecl>(new( std::nothrow ) _228d31971_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ptr<_228d31971_TypeDecl>>()));
	((*((*this)._field_i)))++;
	(*(_18317_it))._field_generics=(*this)._method_build_generics();
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_18217_token,jule::Any(_18317_it)));
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) || ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id != 20LLU)) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i))],jule::Str("invalid syntax", 14));
		return nullptr;
	}
	(*((*this)._field_i))+=2LL;
	jule::Ptr<_228d31971_TypeDecl> _20217_t = (*this)._method_build_ident();
	(*((*(_20217_t))._field_kind.operator jule::Ptr<_228d31971_IdentTypeDecl>()))._field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_fn(void) {
	_228d7aadb_Token _20817_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_228d31971_FnDecl> _20917_f = (*((*this)._field_p))._method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false);
	if (_20917_f == nullptr) {
		return nullptr;
	}
	if ((!((*(_20917_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_20917_f))._field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_20817_token,jule::Any(_20917_f)));
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_ptr(void) {
	_228d7aadb_Token _22317_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_22317_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[(*((*this)._field_i))]._field_id == 35LLU) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_22317_token,jule::Any(jule::new_struct<_228d31971_PtrTypeDecl>(new( std::nothrow ) _228d31971_PtrTypeDecl(nullptr)))));
	}
	jule::Ptr<_228d31971_TypeDecl> _24017_elem = (*this)._method_step();
	if (_24017_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_22317_token,jule::Any(jule::new_struct<_228d31971_PtrTypeDecl>(new( std::nothrow ) _228d31971_PtrTypeDecl(_24017_elem)))));
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_sptr(void) {
	_228d7aadb_Token _25417_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_25417_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	jule::Ptr<_228d31971_TypeDecl> _26117_elem = (*this)._method_step();
	if (_26117_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_25417_token,jule::Any(jule::new_struct<_228d31971_SptrTypeDecl>(new( std::nothrow ) _228d31971_SptrTypeDecl(_26117_elem)))));
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_op(void) {
	_228d7aadb_Token _27517_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _27517_token._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5067662528:;
			{
				return (*this)._method_build_ptr();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5067663424:;
			{
				return (*this)._method_build_sptr();
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_5067663520:;
			{
				return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_228d7aadb_Token(),jule::Any(jule::new_struct<_228d31971_SptrTypeDecl>(new( std::nothrow ) _228d31971_SptrTypeDecl((*this)._method_build_sptr())))));
			}
		}
		else {
			_case_begin_5067659552:;
			{
				(*this)._method_push_err(_27517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_5067660992:;
	}
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_slc(void) {
	_228d7aadb_Token _29717_token = (*this)._field_tokens[(*((*this)._field_i))];
	((*((*this)._field_i)))++;
	jule::Ptr<_228d31971_TypeDecl> _29917_elem = (*this)._method_step();
	if (_29917_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_29717_token,jule::Any(jule::new_struct<_228d31971_SlcTypeDecl>(new( std::nothrow ) _228d31971_SlcTypeDecl(_29917_elem)))));
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i)) - 1LL],jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Int _32013_expr_delta = (*((*this)._field_i));
	jule::Ptr<_228d31971_TypeDecl> _32217_elem = (*this)._method_step();
	if (_32217_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_228d31971_ArrTypeDecl> _32717_arrt = jule::new_struct<_228d31971_ArrTypeDecl>(new( std::nothrow ) _228d31971_ArrTypeDecl(_32217_elem,jule::Ptr<_228d31971_Expr>()));
	jule::Slice<_228d7aadb_Token> _33117_expr_tokens = (*this)._field_tokens.slice(0LL,_32013_expr_delta);
	std::tie(std::ignore,_33117_expr_tokens) = _229a51c34_range_last(_33117_expr_tokens);
	_33117_expr_tokens=_33117_expr_tokens.slice(1LL,_33117_expr_tokens.len() - 1LL);
	_228d7aadb_Token _33417_token = _33117_expr_tokens[0LL];
	if (((_33117_expr_tokens.len() == 1LL) && (_33417_token._field_id == 7LLU)) && (_33417_token._field_kind == jule::Str("...", 3))) {
	} else {
		(*(_32717_arrt))._field_size=(*((*this)._field_p))._method_build_expr(_33117_expr_tokens);
	}
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_33417_token,jule::Any(_32717_arrt)));
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_map(jule::Int _34728_colon,jule::Slice<_228d7aadb_Token>& _34745_tokens) {
	_228d7aadb_Token _34817_colon_token = (*this)._field_tokens[_34728_colon];
	if ((_34728_colon == 0LL) || ((_34728_colon + 1LL) >= _34745_tokens.len())) {
		(*this)._method_push_err(_34817_colon_token,jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Slice<_228d7aadb_Token> _35317_key_tokens = _34745_tokens.slice(0LL,_34728_colon);
	jule::Slice<_228d7aadb_Token> _35417_val_tokens = _34745_tokens.slice(_34728_colon + 1LL);
	jule::Ptr<_228d31971_MapTypeDecl> _35517_mapt = jule::new_struct<_228d31971_MapTypeDecl>(new( std::nothrow ) _228d31971_MapTypeDecl());
	jule::Int _35717_j = 0LL;
	jule::Ptr<_228d31971_TypeDecl> _35818_keyt;
	jule::Bool _35828_ok;
	std::tie(_35818_keyt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35317_key_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35317_key_tokens.len()) {
		(*this)._method_push_err(_35317_key_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_key=_35818_keyt;
	_35717_j=0LL;
	jule::Ptr<_228d31971_TypeDecl> _36718_valt;
	std::tie(_36718_valt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35417_val_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35417_val_tokens.len()) {
		(*this)._method_push_err(_35417_val_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_val=_36718_valt;
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_34817_colon_token,jule::Any(_35517_mapt)));
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_build_enumerable(void) {
	_228d7aadb_Token _38217_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((((*((*this)._field_i)) + 2LL) >= (*this)._field_tokens.len()) || (_38217_token._field_id != 3LLU)) || (_38217_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_38217_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	_38217_token=(*this)._field_tokens[(*((*this)._field_i))];
	if ((_38217_token._field_id == 3LLU) && (_38217_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_228d7aadb_Token> _39618_map_tokens;
	jule::Int _39630_colon;
	std::tie(_39618_map_tokens,_39630_colon) = _1e5543d98_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if (_39630_colon == -1LL) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_39630_colon,_39618_map_tokens);
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_TypeBuilder::_method_step(void) {
	_228d7aadb_Token _40513_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _40513_token._field_id };
		
		if (_match_expr == 1LLU) {
			_case_begin_5067728784:;
			{
				return (*this)._method_build_prim();
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_5067726352:;
			{
				return (*this)._method_build_ident();
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_5067726448:;
			{
				return (*this)._method_build_cpp_link();
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_5067726544:;
			{
				return (*this)._method_build_fn();
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5067726640:;
			{
				return (*this)._method_build_op();
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5067728224:;
			{
				return (*this)._method_build_enumerable();
			}
		}
		else {
			_case_begin_5067720848:;
			{
				((*((*this)._field_i)))++;
				(*this)._method_push_err(_40513_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_5067725568:;
	}
}



inline std::tuple<jule::Ptr<_228d31971_TypeDecl>,jule::Bool> _1e5543d98_TypeBuilder::_method_build(void) {
	jule::Bool _43444_ok = jule::Bool();
	jule::Ptr<_228d31971_TypeDecl> _43517_root = (*this)._method_step();
	if (_43517_root == nullptr) {
		_43444_ok = false;
		return std::make_tuple(_1e5543d98_build_void_type(),_43444_ok);
	}
	_43444_ok = true;
	return std::make_tuple(_43517_root,_43444_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5543d98_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e856e8a4_Const> _1e856e8a4_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_1e856e8a4_Const>(new( std::nothrow ) _1e856e8a4_Const(jule::Any(_1327_x)));
}



inline jule::Ptr<_1e856e8a4_Const> _1e856e8a4_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_1e856e8a4_Const>(new( std::nothrow ) _1e856e8a4_Const(jule::Any(_1527_x)));
}



inline jule::Ptr<_1e856e8a4_Const> _1e856e8a4_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_1e856e8a4_Const>(new( std::nothrow ) _1e856e8a4_Const(jule::Any(_1728_x)));
}



inline jule::Ptr<_1e856e8a4_Const> _1e856e8a4_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_1e856e8a4_Const>(new( std::nothrow ) _1e856e8a4_Const(jule::Any(_1927_x)));
}



inline jule::Ptr<_1e856e8a4_Const> _1e856e8a4_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_1e856e8a4_Const>(new( std::nothrow ) _1e856e8a4_Const(jule::Any(_2127_x)));
}



inline jule::Ptr<_1e856e8a4_Const> _1e856e8a4_Const::_static_method_new_nil(void) {
	return jule::new_struct<_1e856e8a4_Const>(new( std::nothrow ) _1e856e8a4_Const(jule::Any(nullptr)));
}



inline jule::I64 _1e856e8a4_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
}



inline jule::U64 _1e856e8a4_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LL;
	}
	return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
}



inline jule::Bool _1e856e8a4_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _1e856e8a4_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str();
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _1e856e8a4_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
}



inline jule::I64 _1e856e8a4_Const::_method_as_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5067830864:;
			{
				return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5067829760:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::U64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5067829856:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_5067829328:;
			{
				return 0LL;
			}
		}
		_match_end_5067829072:;
	}
}



inline jule::U64 _1e856e8a4_Const::_method_as_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5067836704:;
			{
				return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5067835680:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5067835776:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_5067802128:;
			{
				return 0LL;
			}
		}
		_match_end_5067829520:;
	}
}



inline jule::F64 _1e856e8a4_Const::_method_as_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5067843248:;
			{
				return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5067843344:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5067842096:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::U64()));
			}
		}
		else {
			_case_begin_5067841744:;
			{
				return 0LL;
			}
		}
		_match_end_5067841664:;
	}
}



inline void _1e856e8a4_Const::_method_set_i64(jule::I64 _13930_x) {
	(*this)._field_data=jule::Any(_13930_x);
}



inline void _1e856e8a4_Const::_method_set_u64(jule::U64 _14130_x) {
	(*this)._field_data=jule::Any(_14130_x);
}



inline void _1e856e8a4_Const::_method_set_bool(jule::Bool _14331_x) {
	(*this)._field_data=jule::Any(_14331_x);
}



inline void _1e856e8a4_Const::_method_set_str(jule::Str _14530_x) {
	(*this)._field_data=jule::Any(_14530_x);
}



inline void _1e856e8a4_Const::_method_set_f64(jule::F64 _14730_x) {
	(*this)._field_data=jule::Any(_14730_x);
}



inline void _1e856e8a4_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline jule::Bool _1e856e8a4_Const::_method_is_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_5067859712:;
			{
				return true;
			}
		}
		else {
			_case_begin_5067860112:;
			{
				return false;
			}
		}
		_match_end_5067859856:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_is_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_5067862352:;
			{
				return true;
			}
		}
		else {
			_case_begin_5067862656:;
			{
				return false;
			}
		}
		_match_end_5067862576:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_is_bool(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_5067864560:;
			{
				return true;
			}
		}
		else {
			_case_begin_5067864864:;
			{
				return false;
			}
		}
		_match_end_5067864784:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_is_str(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_5067866768:;
			{
				return true;
			}
		}
		else {
			_case_begin_5067867072:;
			{
				return false;
			}
		}
		_match_end_5067866992:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_is_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_5067868976:;
			{
				return true;
			}
		}
		else {
			_case_begin_5067869280:;
			{
				return false;
			}
		}
		_match_end_5067869200:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_is_nil(void) {
	return (*this)._field_data == nullptr;
}



inline jule::Bool _1e856e8a4_Const::_method_are_same_types(_1e856e8a4_Const _19933_x) {
	{
		
		if ((*this)._method_is_i64() == _19933_x._method_is_i64()) {
			_case_begin_5067876048:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_u64() == _19933_x._method_is_u64()) {
			_case_begin_5067874624:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_f64() == _19933_x._method_is_f64()) {
			_case_begin_5067874720:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_bool() == _19933_x._method_is_bool()) {
			_case_begin_5067874816:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_str() == _19933_x._method_is_str()) {
			_case_begin_5067874912:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_nil() == _19933_x._method_is_nil()) {
			_case_begin_5067875328:;
			{
				return true;
			}
		}
		else {
			_case_begin_5067874320:;
			{
				return false;
			}
		}
		_match_end_5067874144:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_and(_1e856e8a4_Const _21722_x) {
	{
		
		if ((*this)._method_is_bool() && _21722_x._method_is_bool()) {
			_case_begin_5067887232:;
			{
				return (*this)._method_read_bool() && _21722_x._method_read_bool();
			}
		}
		else {
			_case_begin_5067885584:;
			{
				return false;
			}
		}
		_match_end_5067885408:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_or(_1e856e8a4_Const _22921_x) {
	{
		
		if ((*this)._method_is_bool() && _22921_x._method_is_bool()) {
			_case_begin_5067892400:;
			{
				return (*this)._method_read_bool() || _22921_x._method_read_bool();
			}
		}
		else {
			_case_begin_5067890752:;
			{
				return false;
			}
		}
		_match_end_5067890576:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_eqs(_1e856e8a4_Const _24122_x) {
	{
		
		if ((*this)._method_is_nil()) {
			_case_begin_5067897488:;
			{
				return _24122_x._method_is_nil();
			}
		}
		else if ((*this)._method_is_bool()) {
			_case_begin_5067896064:;
			{
				return _24122_x._method_is_bool() && ((*this)._method_read_bool() == _24122_x._method_read_bool());
			}
		}
		else if ((*this)._method_is_str()) {
			_case_begin_5067896160:;
			{
				return _24122_x._method_is_str() && ((*this)._method_read_str() == _24122_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5067896256:;
			{
				return (*this)._method_read_i64() == _24122_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067896352:;
			{
				return (*this)._method_read_u64() == _24122_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5067896768:;
			{
				return (*this)._method_read_f64() == _24122_x._method_as_f64();
			}
		}
		else {
			_case_begin_5067895760:;
			{
				return false;
			}
		}
		_match_end_5067895584:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_lt(_1e856e8a4_Const _27321_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5067911680:;
			{
				return (*this)._method_read_i64() < _27321_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067911776:;
			{
				return (*this)._method_read_u64() < _27321_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5067910304:;
			{
				return (*this)._method_read_f64() < _27321_x._method_as_f64();
			}
		}
		else {
			_case_begin_5067910000:;
			{
				return false;
			}
		}
		_match_end_5067909824:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_gt(_1e856e8a4_Const _29621_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5067919584:;
			{
				return (*this)._method_read_i64() > _29621_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067919680:;
			{
				return (*this)._method_read_u64() > _29621_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5067918208:;
			{
				return (*this)._method_read_f64() > _29621_x._method_as_f64();
			}
		}
		else {
			_case_begin_5067917904:;
			{
				return false;
			}
		}
		_match_end_5067917728:;
	}
}



inline jule::Bool _1e856e8a4_Const::_method_add(_1e856e8a4_Const _31826_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_5067927824:;
			{
				if ((!(_31826_x._method_is_str()))) {
					return false;
				}
				(*this)._method_set_str((*this)._method_read_str() + _31826_x._method_read_str());
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_5067927920:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() + _31826_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5067926448:;
			{
				if (_31826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _31826_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() + _31826_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067926560:;
			{
				if (_31826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _31826_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() + _31826_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_5067926128:;
			{
				return false;
			}
		}
		_match_end_5067925952:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_sub(_1e856e8a4_Const _35126_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_5067946400:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() - _35126_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5067946496:;
			{
				if (_35126_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35126_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() - _35126_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067945024:;
			{
				if (_35126_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35126_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() - _35126_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_5067944720:;
			{
				return false;
			}
		}
		_match_end_5067944544:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_mul(_1e856e8a4_Const _37826_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_5067961904:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() * _37826_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5067962000:;
			{
				if (_37826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _37826_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() * _37826_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067960528:;
			{
				if (_37826_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _37826_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() * _37826_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_5067960224:;
			{
				return false;
			}
		}
		_match_end_5067960048:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_div(_1e856e8a4_Const _40926_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_5067977024:;
			{
				jule::F64 _41217_l = _40926_x._method_as_f64();
				if (_41217_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_read_f64(),_41217_l)));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_5067977120:;
			{
				jule::F64 _41917_l = _40926_x._method_as_f64();
				if (_41917_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_41917_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067975648:;
			{
				jule::F64 _42617_l = _40926_x._method_as_f64();
				if (_42617_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_42617_l)));
			}
		}
		else {
			_case_begin_5067975344:;
			{
				return false;
			}
		}
		_match_end_5067975168:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_mod(_1e856e8a4_Const _44126_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5067991728:;
			{
				jule::I64 _44417_l = _44126_x._method_as_i64();
				if (_44417_l == 0LL) {
					return false;
				}
				(*this)._method_set_i64(static_cast<jule::I64>(jule::mod((*this)._method_read_i64(),_44417_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5067991824:;
			{
				jule::U64 _45117_l = _44126_x._method_as_u64();
				if (_45117_l == 0LL) {
					return false;
				}
				(*this)._method_set_u64(static_cast<jule::U64>(jule::mod((*this)._method_read_u64(),_45117_l)));
			}
		}
		else {
			_case_begin_5067990064:;
			{
				return false;
			}
		}
		_match_end_5067989888:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_bitwise_and(_1e856e8a4_Const _46534_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5068002848:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() & _46534_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5068002944:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() & _46534_x._method_as_u64()));
			}
		}
		else {
			_case_begin_5068001184:;
			{
				return false;
			}
		}
		_match_end_5068001008:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_bitwise_or(_1e856e8a4_Const _48133_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5068010800:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() | _48133_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5068010896:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() | _48133_x._method_as_u64()));
			}
		}
		else {
			_case_begin_5068009136:;
			{
				return false;
			}
		}
		_match_end_5068008960:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_xor(_1e856e8a4_Const _49726_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5068018624:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() ^ _49726_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5068018720:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() ^ _49726_x._method_as_u64()));
			}
		}
		else {
			_case_begin_5068016960:;
			{
				return false;
			}
		}
		_match_end_5068016784:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_lshift(_1e856e8a4_Const _51329_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5068026576:;
			{
				jule::I64 _51617_l = (*this)._method_as_i64();
				if (_51617_l < 0LL) {
					jule::U64 _51821_r = _51329_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_51617_l << _51821_r));
				} else {
					_1e856e8a4_lshift_unsig((*this),_51329_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5068026672:;
			{
				_1e856e8a4_lshift_unsig((*this),_51329_x);
			}
		}
		else {
			_case_begin_5068024912:;
			{
				return false;
			}
		}
		_match_end_5068024736:;
	}
	return true;
}



inline jule::Bool _1e856e8a4_Const::_method_rshift(_1e856e8a4_Const _53629_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_5068036144:;
			{
				jule::I64 _53917_l = (*this)._method_as_i64();
				if (_53917_l < 0LL) {
					jule::U64 _54121_r = _53629_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_53917_l >> _54121_r));
				} else {
					_1e856e8a4_rshift_unsig((*this),_53629_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_5068036240:;
			{
				_1e856e8a4_rshift_unsig((*this),_53629_x);
			}
		}
		else {
			_case_begin_5068034480:;
			{
				return false;
			}
		}
		_match_end_5068034304:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e856e8a4_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e0d025_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _228e0d025_StructIns::_method_to_str(void) {
	jule::Str _22417_kind = jule::Str();
	_22417_kind+=(*((*this)._field_decl))._field_ident;
	if ((*this)._field_generics.len() > 0LL) {
		_22417_kind+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_5070501856:;
			if (it != expr.end()) {
				jule::Ptr<_229d681e3_TypeKind> &_228e0d025_g = *it;
				{
					_22417_kind+=(*(_228e0d025_g))._method_to_str();
					_22417_kind+=jule::Str(",", 1);
				}
				_iter_next_5070501856:;
				++it;
				goto _iter_begin_5070501856;
			}
			_iter_end_5070501856:;
		}
		_22417_kind=_22417_kind.slice(0LL,_22417_kind.len() - 1LL);
		_22417_kind+=jule::Str("]", 1);
	}
	return _22417_kind;
}



inline jule::Bool _228e0d025_StructIns::_method_equals(jule::Ptr<_229d681e3_TypeKind> _23922_other) {
	jule::Ptr<_228e0d025_StructIns> _24013_s = (*(_23922_other))._method_strct();
	if (_24013_s == nullptr) {
		return false;
	}
	if ((*(this->self))._field_decl != (*(_24013_s))._field_decl) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != (*(_24013_s))._field_generics.len()) {
		return false;
	}
	jule::Int _25317_i = 0LL;
	for (; _25317_i < (*(this->self))._field_generics.len(); (_25317_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_25317_i]))._method_equals((*(_24013_s))._field_generics[_25317_i])))) {
				return false;
			}
		}
	_iter_next_5070511664:;
	}
	_iter_end_5070511664:;
	return true;
}



inline jule::Bool _228e0d025_StructIns::_method_same(jule::Ptr<_228e0d025_StructIns> _26723_s) {
	if (((*this)._field_decl != (*(_26723_s))._field_decl) || ((*(_26723_s))._field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_5070520080:;
		if (it != expr.end()) {
			jule::Int _228e0d025_i = it - expr.begin();
			jule::Ptr<_229d681e3_TypeKind> &_228e0d025_g = *it;
			{
				if ((!((*(_228e0d025_g))._method_equals((*(_26723_s))._field_generics[_228e0d025_i])))) {
					return false;
				}
			}
			_iter_next_5070520080:;
			++it;
			_228e0d025_i++;
			goto _iter_begin_5070520080;
		}
		_iter_end_5070520080:;
	}
	return true;
}



inline jule::Ptr<_229b6ebcb_Fn> _228e0d025_StructIns::_method_find_method(jule::Str _28234_ident,jule::Bool _28246_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5070527648:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _228e0d025_f = *it;
			{
				if (((*(_228e0d025_f))._field_statically == _28246_statically) && ((*(_228e0d025_f))._field_ident == _28234_ident)) {
					return _228e0d025_f;
				}
			}
			_iter_next_5070527648:;
			++it;
			goto _iter_begin_5070527648;
		}
		_iter_end_5070527648:;
	}
	return nullptr;
}



inline jule::Ptr<_228e0d025_FieldIns> _228e0d025_StructIns::_method_find_field(jule::Str _29333_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_5070532304:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_FieldIns> _228e0d025_f = *it;
			{
				if ((*((*(_228e0d025_f))._field_decl))._field_ident == _29333_ident) {
					return _228e0d025_f;
				}
			}
			_iter_next_5070532304:;
			++it;
			goto _iter_begin_5070532304;
		}
		_iter_end_5070532304:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e0d025_StructIns &_Src) {
	_Stream << "StructIns{";
	_Stream << "checked:" << _Src._field_checked << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "references:" << _Src._field_references;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _229b6ebcb_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229b6ebcb_ParamIns::_method_to_str(void) {
	jule::Str _18017_s = jule::Str();
	if ((*((*this)._field_decl))._field_mutable) {
		_18017_s+=jule::Str("mut ", 4);
	}
	if ((*((*this)._field_decl))._field_reference) {
		_18017_s+=jule::Str("&_:", 3);
	}
	if ((*((*this)._field_decl))._method_is_self()) {
		if ((*((*this)._field_decl))._method_is_ref()) {
			_18017_s+=jule::Str("&", 1);
		}
		_18017_s+=jule::Str("self", 4);
		return _18017_s;
	}
	if ((*((*this)._field_decl))._field_variadic) {
		_18017_s+=jule::Str("...", 3);
	}
	if ((*this)._field_kind != nullptr) {
		_18017_s+=(*((*this)._field_kind))._method_to_str();
	}
	return _18017_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _229b6ebcb_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229b6ebcb_FnIns::_method_to_str(void) {
	
	return (*this)._method_get_kind_str(false);
}



inline jule::Bool _229b6ebcb_FnIns::_method_equals(jule::Ptr<_229d681e3_TypeKind> _23522_other) {
	jule::Ptr<_229b6ebcb_FnIns> _23613_f = (*(_23522_other))._method_fnc();
	if (_23613_f == nullptr) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_statically != (*((*(_23613_f))._field_decl))._field_statically) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_exceptional != (*((*(_23613_f))._field_decl))._field_exceptional) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_unsafety != (*((*(_23613_f))._field_decl))._field_unsafety) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != (*(_23613_f))._field_generics.len()) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._method_is_void() != (*((*(_23613_f))._field_decl))._method_is_void()) {
		return false;
	}
	jule::Int _26117_i = 0LL;
	for (; _26117_i < (*(this->self))._field_generics.len(); (_26117_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_26117_i]))._method_equals((*(_23613_f))._field_generics[_26117_i])))) {
				return false;
			}
		}
	_iter_next_5070622736:;
	}
	_iter_end_5070622736:;
	jule::Fn<jule::Bool(jule::Ptr<_229b6ebcb_ParamIns>,jule::Ptr<_229b6ebcb_ParamIns>)> _26813_check_params = jule::Fn<jule::Bool(jule::Ptr<_229b6ebcb_ParamIns>,jule::Ptr<_229b6ebcb_ParamIns>)>([=](jule::Ptr<_229b6ebcb_ParamIns> _26831_p1,jule::Ptr<_229b6ebcb_ParamIns> _26846_p2) mutable -> jule::Bool {
		if ((*((*(_26831_p1))._field_decl))._field_mutable != (*((*(_26846_p2))._field_decl))._field_mutable) {
			return false;
		}
		if ((*((*(_26831_p1))._field_decl))._method_is_self()) {
			if ((!((*((*(_26846_p2))._field_decl))._method_is_self()))) {
				return false;
			}
			if ((*((*(_26831_p1))._field_decl))._method_is_ref() != (*((*(_26846_p2))._field_decl))._method_is_ref()) {
				return false;
			}
			return true;
		}
		if ((*((*(_26831_p1))._field_decl))._field_reference != (*((*(_26846_p2))._field_decl))._field_reference) {
			return false;
		}
		if ((*((*(_26831_p1))._field_decl))._field_variadic != (*((*(_26846_p2))._field_decl))._field_variadic) {
			return false;
		}
		return (*((*(_26831_p1))._field_kind))._method_equals((*(_26846_p2))._field_kind);
	});
	_26117_i=0LL;
	for (; _26117_i < (*(this->self))._field_params.len(); (_26117_i)++) {
		{
			if ((!(_26813_check_params((*(this->self))._field_params[_26117_i],(*(_23613_f))._field_params[_26117_i])))) {
				return false;
			}
		}
	_iter_next_5070630816:;
	}
	_iter_end_5070630816:;
	if ((!((*((*(this->self))._field_decl))._method_is_void()))) {
		if ((!((*((*(this->self))._field_result))._method_equals((*(_23613_f))._field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _229b6ebcb_FnIns::_method_is_builtin(void) {
	return (*this)._field_caller != 0LL;
}



inline jule::Bool _229b6ebcb_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (((*this)._field_decl != nullptr) && (*((*this)._field_decl))._method_is_anon());
}



inline jule::Bool _229b6ebcb_FnIns::_method_same(jule::Ptr<_229b6ebcb_FnIns> _32523_f) {
	if (((*this)._field_decl != (*(_32523_f))._field_decl) || ((*(_32523_f))._field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_5070656144:;
		if (it != expr.end()) {
			jule::Int _229b6ebcb_i = it - expr.begin();
			jule::Ptr<_229d681e3_TypeKind> &_229b6ebcb_g = *it;
			{
				if ((!((*(_229b6ebcb_g))._method_equals((*(_32523_f))._field_generics[_229b6ebcb_i])))) {
					return false;
				}
			}
			_iter_next_5070656144:;
			++it;
			_229b6ebcb_i++;
			goto _iter_begin_5070656144;
		}
		_iter_end_5070656144:;
	}
	return true;
}



inline jule::Str _229b6ebcb_FnIns::_method_get_kind_str(jule::Bool _34131_ident) {
	jule::Str _34217_s = jule::Str();
	if ((*((*this)._field_decl))._field_statically) {
		_34217_s+=jule::Str("static ", 7);
	}
	if ((*((*this)._field_decl))._field_unsafety) {
		_34217_s+=jule::Str("unsafe ", 7);
	}
	_34217_s+=jule::Str("fn", 2);
	if (_34131_ident && ((*this)._field_decl != nullptr)) {
		_34217_s+=jule::Str(" ", 1) + (*((*this)._field_decl))._field_ident;
	}
	if ((*this)._field_generics.len() > 0LL) {
		_34217_s+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_5070668432:;
			if (it != expr.end()) {
				jule::Int _229b6ebcb_i = it - expr.begin();
				jule::Ptr<_229d681e3_TypeKind> &_229b6ebcb_t = *it;
				{
					_34217_s+=(*(_229b6ebcb_t))._method_to_str();
					if ((_229b6ebcb_i + 1LL) < (*this)._field_generics.len()) {
						_34217_s+=jule::Str(",", 1);
					}
				}
				_iter_next_5070668432:;
				++it;
				_229b6ebcb_i++;
				goto _iter_begin_5070668432;
			}
			_iter_end_5070668432:;
		}
		_34217_s+=jule::Str("]", 1);
	} else if ((*((*this)._field_decl))._field_generics.len() > 0LL) {
		_34217_s+=jule::Str("[", 1);
		{
			auto &expr = (*((*this)._field_decl))._field_generics;
			auto it = expr.begin();
			_iter_begin_5070668208:;
			if (it != expr.end()) {
				jule::Int _229b6ebcb_i = it - expr.begin();
				jule::Ptr<_228d31971_GenericDecl> &_229b6ebcb_g = *it;
				{
					_34217_s+=(*(_229b6ebcb_g))._field_ident;
					if ((_229b6ebcb_i + 1LL) < (*((*this)._field_decl))._field_generics.len()) {
						_34217_s+=jule::Str(",", 1);
					}
				}
				_iter_next_5070668208:;
				++it;
				_229b6ebcb_i++;
				goto _iter_begin_5070668208;
			}
			_iter_end_5070668208:;
		}
		_34217_s+=jule::Str("]", 1);
	}
	_34217_s+=jule::Str("(", 1);
	jule::I64 _37913_n = (*this)._field_params.len();
	if (_37913_n > 0LL) {
		{
			auto &expr = (*this)._field_params;
			auto it = expr.begin();
			_iter_begin_5070679456:;
			if (it != expr.end()) {
				jule::Ptr<_229b6ebcb_ParamIns> &_229b6ebcb_p = *it;
				{
					_34217_s+=(*(_229b6ebcb_p))._method_to_str();
					_34217_s+=jule::Str(",", 1);
				}
				_iter_next_5070679456:;
				++it;
				goto _iter_begin_5070679456;
			}
			_iter_end_5070679456:;
		}
		_34217_s=_34217_s.slice(0LL,_34217_s.len() - 1LL);
	}
	_34217_s+=jule::Str(")", 1);
	if ((*((*this)._field_decl))._field_exceptional) {
		_34217_s+=jule::Str("!", 1);
	}
	if ((!((*((*this)._field_decl))._method_is_void()))) {
		_34217_s+=jule::Str(":", 1);
		_34217_s+=(*((*this)._field_result))._method_to_str();
	}
	return _34217_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _229b6ebcb_FnIns &_Src) {
	_Stream << "FnIns{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "anon:" << _Src._field_anon << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "caller:" << _Src._field_caller << ", ";
	_Stream << "reloaded:" << _Src._field_reloaded;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_228d6ecab_ReferenceStack> _228d6ecab_ReferenceStack::_static_method_new(void) {
	return jule::new_struct<_228d6ecab_ReferenceStack>(new( std::nothrow ) _228d6ecab_ReferenceStack());
}



inline jule::Int _228d6ecab_ReferenceStack::_method_len(void) {
	return static_cast<jule::I64>((*this)._field_buffer.len());
}



inline jule::Any _228d6ecab_ReferenceStack::_method_at(jule::Int _5825_i) {
	return (*this)._field_buffer[_5825_i];
}



inline void _228d6ecab_ReferenceStack::_method_push(jule::Any _6331_ref) {
	(*this)._field_buffer = jule::alloc_for_append((*this)._field_buffer,1);(*this)._field_buffer.push(_6331_ref);
}



inline jule::Bool _228d6ecab_ReferenceStack::_method_exist_0(jule::Ptr<_1e58b0654_Var> _6827_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_5074475072:;
		if (it != expr.end()) {
			jule::Any &_228d6ecab_ref = *it;
			{
				if (_228d6ecab_ref == _6827_t) {
					return true;
				}
			}
			_iter_next_5074475072:;
			++it;
			goto _iter_begin_5074475072;
		}
		_iter_end_5074475072:;
	}
	return false;
}

inline jule::Bool _228d6ecab_ReferenceStack::_method_exist_1(jule::Ptr<_229b6ebcb_FnIns> _6827_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_5074484336:;
		if (it != expr.end()) {
			jule::Any &_228d6ecab_ref = *it;
			{
				if (_228d6ecab_ref == _6827_t) {
					return true;
				}
			}
			_iter_next_5074484336:;
			++it;
			goto _iter_begin_5074484336;
		}
		_iter_end_5074484336:;
	}
	return false;
}

inline jule::Bool _228d6ecab_ReferenceStack::_method_exist_2(jule::Ptr<_228e0d025_StructIns> _6827_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_5074522656:;
		if (it != expr.end()) {
			jule::Any &_228d6ecab_ref = *it;
			{
				if (_228d6ecab_ref == _6827_t) {
					return true;
				}
			}
			_iter_next_5074522656:;
			++it;
			goto _iter_begin_5074522656;
		}
		_iter_end_5074522656:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d6ecab_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_228d6ecab_SymbolBuilder> _228d6ecab_SymbolBuilder::_method_get_root(void) {
	jule::Ptr<_228d6ecab_SymbolBuilder> _31317_root = this->self;
	while ((*(_31317_root))._field_owner != nullptr) {
		{
			_31317_root=(*(_31317_root))._field_owner;
		}
	_iter_next_5070694480:;
	}
	_iter_end_5070694480:;
	return _31317_root;
}



inline void _228d6ecab_SymbolBuilder::_method_push_err(_228d7aadb_Token& _32028_token,jule::Str _32042_fmt,jule::Slice<jule::Any> _32055_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1e538b460_compiler_err(_32028_token,true,_32042_fmt,_32055_args));
}



inline void _228d6ecab_SymbolBuilder::_method_push_err_text(_228d7aadb_Token& _32433_token,jule::Str _32447_fmt,jule::Slice<jule::Any> _32460_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1e538b460_compiler_err(_32433_token,false,_32447_fmt,_32460_args));
}



inline void _228d6ecab_SymbolBuilder::_method_push_suggestion(jule::Str _32934_fmt,jule::Slice<jule::Any> _32947_args) {
	{
		_1e538b460_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_32934_fmt,_32947_args);
	}
}



inline jule::Bool _228d6ecab_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ptr<_228d31971_UseDecl>& _33343_decl) {
	jule::Bool _33361_ok = jule::Bool();
	if (_2275ec68e_is_std_header_path((*(_33343_decl))._field_link_path)) {
		_33361_ok = true;
		return _33361_ok;
	}
	jule::Str _33813_ext = _227711594_ext((*(_33343_decl))._field_link_path);
	if ((!(_2275ec68e_is_valid_header_ext(_33813_ext))) && (!(_2275ec68e_is_valid_cpp_ext(_33813_ext)))) {
		(*this)._method_push_err((*(_33343_decl))._field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_33813_ext)}));
		_33361_ok = false;
		return _33361_ok;
	}
	jule::Ptr<_2276a6da8_Status> _34513_info = ({
		auto except = _2276a6da8_Status::_static_method_of((*(_33343_decl))._field_link_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_33343_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_33343_decl))._field_link_path)}));
			_33361_ok = false;
			return _33361_ok;
			_33361_ok = false;
			return _33361_ok;
		} jule::Ptr<_2276a6da8_Status>();});
	});
	if ((*(_34513_info))._method_is_dir()) {
		(*this)._method_push_err((*(_33343_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_33343_decl))._field_link_path)}));
		_33361_ok = false;
		return _33361_ok;
	}
	_33361_ok = true;
	return _33361_ok;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _228d6ecab_SymbolBuilder::_method_build_cpp_header_import(jule::Ptr<_228d31971_UseDecl>& _35747_decl) {
	jule::Str _35817_path = (*(_35747_decl))._field_link_path;
	if ((!(_2275ec68e_is_std_header_path((*(_35747_decl))._field_link_path)))) {
		jule::Bool _36121_ok = (*this)._method_check_cpp_use_decl_path(_35747_decl);
		if ((!(_36121_ok))) {
			return nullptr;
		}
		std::tie(_35817_path,_36121_ok) = _227711594_abs((*(_35747_decl))._field_link_path);
		if ((!(_36121_ok))) {
			(*this)._method_push_err((*(_35747_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_35747_decl))._field_link_path)}));
		}
	}
	return jule::new_struct<_1e53308ee_ImportInfo>(new( std::nothrow ) _1e53308ee_ImportInfo((*(_35747_decl))._field_token,_35817_path,(*(_35747_decl))._field_link_path,jule::Str(),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_228d7aadb_Token>(),nullptr,jule::Int()));
}



inline jule::Ptr<_1e53308ee_ImportInfo> _228d6ecab_SymbolBuilder::_method_build_std_import(jule::Ptr<_228d31971_UseDecl>& _38440_decl) {
	jule::Str _38517_path = (*(_38440_decl))._field_link_path.slice(jule::Str("std::", 5).len());
	_38517_path=_38517_path.replace(jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_38517_path=_227711594_join(jule::Slice<jule::Str>({_22779d455_PATH_STDLIB,_38517_path}));
	jule::Bool _38820_ok;
	std::tie(_38517_path,_38820_ok) = _227711594_abs(_38517_path);
	if ((!(_38820_ok))) {
		(*this)._method_push_err((*(_38440_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_38440_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_2276a6da8_Status> _39513_info = ({
		auto except = _2276a6da8_Status::_static_method_of(_38517_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_38440_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_38440_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_2276a6da8_Status>();});
	});
	if ((!((*(_39513_info))._method_is_dir()))) {
		(*this)._method_push_err((*(_38440_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_38440_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Str _40513_ident = (*(_38440_decl))._field_link_path.slice((*(_38440_decl))._field_link_path.rfind(jule::Str("::", 2)) + 1LL);
	return jule::new_struct<_1e53308ee_ImportInfo>(new( std::nothrow ) _1e53308ee_ImportInfo((*(_38440_decl))._field_token,_38517_path,(*(_38440_decl))._field_link_path,_40513_ident,(*(_38440_decl))._field_alias,jule::Bool(),false,true,(*(_38440_decl))._field_full,jule::Slice<_228d7aadb_Token>(),jule::new_struct<_1e53308ee_Package>(new( std::nothrow ) _1e53308ee_Package(nullptr)),jule::Int()));
}



inline jule::Ptr<_1e53308ee_ImportInfo> _228d6ecab_SymbolBuilder::_method_build_ident_import(jule::Ptr<_228d31971_UseDecl>& _42243_decl) {
	jule::Str _42313_mod_path = (*(this->self))._field_importer.get()._method_get_mod_path();
	if (_42313_mod_path.len() == 0LL) {
		(*(this->self))._method_push_err((*(_42243_decl))._field_token,jule::Str("no module file found in current directory or any parent directory", 65),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"julec mod init\" command to initialize module", 49),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Str _43017_path = (*(_42243_decl))._field_link_path;
	_43017_path=_43017_path.replace(jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_43017_path=_227711594_join(jule::Slice<jule::Str>({_42313_mod_path,_43017_path}));
	jule::Bool _43420_ok;
	std::tie(_43017_path,_43420_ok) = _227711594_abs(_43017_path);
	if ((!(_43420_ok))) {
		(*(this->self))._method_push_err((*(_42243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_42243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_2276a6da8_Status> _44113_info = ({
		auto except = _2276a6da8_Status::_static_method_of(_43017_path);
		(except.ok()) ? (except.result) : ({{
			(*(this->self))._method_push_err((*(_42243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_42243_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_2276a6da8_Status>();});
	});
	if ((!((*(_44113_info))._method_is_dir()))) {
		(*(this->self))._method_push_err((*(_42243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_42243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Str _45113_ident = (*(_42243_decl))._field_link_path.slice((*(_42243_decl))._field_link_path.rfind(jule::Str("::", 2)) + 1LL);
	return jule::new_struct<_1e53308ee_ImportInfo>(new( std::nothrow ) _1e53308ee_ImportInfo((*(_42243_decl))._field_token,_43017_path,(*(_42243_decl))._field_link_path,_45113_ident,(*(_42243_decl))._field_alias,jule::Bool(),false,false,(*(_42243_decl))._field_full,jule::Slice<_228d7aadb_Token>(),jule::new_struct<_1e53308ee_Package>(new( std::nothrow ) _1e53308ee_Package(nullptr)),jule::Int()));
}



inline jule::Ptr<_1e53308ee_ImportInfo> _228d6ecab_SymbolBuilder::_method_build_import(jule::Ptr<_228d31971_UseDecl>& _46837_decl) {
	{
		
		if ((*(_46837_decl))._field_cpp_linked) {
			_case_begin_5070793792:;
			{
				return (*(this->self))._method_build_cpp_header_import(_46837_decl);
			}
		}
		else if ((*(_46837_decl))._field_std) {
			_case_begin_5070794928:;
			{
				return (*(this->self))._method_build_std_import(_46837_decl);
			}
		}
		else {
			_case_begin_5070792416:;
			{
				return (*(this->self))._method_build_ident_import(_46837_decl);
			}
		}
		_match_end_5070792240:;
	}
}



inline jule::Bool _228d6ecab_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ptr<_1e53308ee_ImportInfo>& _47644_pkg) {
	jule::Bool _47664_ok = jule::Bool();
	jule::Ptr<_1e53308ee_ImportInfo> _47813_lpkg = (*((*this)._field_table))._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>([=](jule::Ptr<_1e53308ee_ImportInfo> _47849_spkg) mutable -> jule::Bool {
		return (*(_47644_pkg))._field_path == (*(_47849_spkg))._field_path;
	}));
	if (_47813_lpkg == nullptr) {
		_47664_ok = true;
		return _47664_ok;
	}
	(*this)._method_push_err((*(_47644_pkg))._field_token,jule::Str("use declaration duplication: @ is already used above", 52),jule::Slice<jule::Any>({jule::Any((*(_47644_pkg))._field_link_path)}));
	(*this)._method_push_suggestion(jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>());
	_47664_ok = false;
	return _47664_ok;
}



inline void _228d6ecab_SymbolBuilder::_method_impl_import_selections(jule::Ptr<_1e53308ee_ImportInfo>& _49046_imp,jule::Ptr<_228d31971_UseDecl>& _49069_decl) {
	{
		auto &expr = (*(_49069_decl))._field_selected;
		auto it = expr.begin();
		_iter_begin_5070813712:;
		if (it != expr.end()) {
			_228d7aadb_Token _228d6ecab_ident = *it;
			{
				if ((*(_49046_imp))._method_exist_ident(_228d6ecab_ident._field_kind)) {
					(*this)._method_push_err(_228d6ecab_ident,jule::Str("duplicated selection: @ is already selected", 43),jule::Slice<jule::Any>({jule::Any(_228d6ecab_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>());
					goto _iter_next_5070813712;
				}
				(*(_49046_imp))._field_selected = jule::alloc_for_append((*(_49046_imp))._field_selected,1);(*(_49046_imp))._field_selected.push(_228d6ecab_ident);
			}
			_iter_next_5070813712:;
			++it;
			goto _iter_begin_5070813712;
		}
		_iter_end_5070813712:;
	}
}



inline jule::Str _228d6ecab_SymbolBuilder::_method_get_as_link_path(jule::Str _50240_path) {
	if (_50240_path.has_prefix(_22779d455_PATH_STDLIB)) {
		_50240_path=_50240_path.slice(_22779d455_PATH_STDLIB.len());
		return jule::Str("std", 3) + _50240_path.replace(static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _50814_root;
	std::tie(_50814_root,std::ignore) = _227711594_abs((*(this->self))._field_importer.get()._method_get_mod_path());
	_50240_path=_50240_path.slice(_50814_root.len());
	if (_50240_path[0LL] == 47LL) {
		_50240_path=_50240_path.slice(1LL);
	}
	return _50240_path.replace(static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
}



inline void _228d6ecab_SymbolBuilder::_method_push_cycle_error(jule::Ptr<_228d6ecab_SymbolBuilder>& _51637_sb,jule::Str _51657_path,jule::Str& _51673_message) {
	
	jule::Str _51913_refers_to = _2276bcb9e_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*((*((*(_51637_sb))._field_table))._field_file))._method_dir())),jule::Any((*(this->self))._method_get_as_link_path(_51657_path))}));
	_51673_message=((_228d6ecab_str_repeat(jule::Str(" ", 1),4LL) + _51913_refers_to) + jule::Str("\n", 1)) + _51673_message;
}



inline void _228d6ecab_SymbolBuilder::_method_push_cross_cycle_error(jule::Ptr<_228d6ecab_SymbolBuilder>& _52643_target,jule::Ptr<_1e53308ee_ImportInfo>& _52668_imp,_228d7aadb_Token& _52687_error_token) {
	jule::Str _52717_message = jule::Str();
	(*(this->self))._method_push_cycle_error(this->self,(*(_52668_imp))._field_path,_52717_message);
	jule::Ptr<_228d6ecab_SymbolBuilder> _53117_owner = (*(this->self))._field_owner;
	jule::Ptr<_228d6ecab_SymbolBuilder> _53217_old = this->self;
	while ((*(_53117_owner))._field_owner != nullptr) {
		{
			(*(this->self))._method_push_cycle_error((*(_53217_old))._field_owner,(*((*((*(_53217_old))._field_table))._field_file))._method_dir(),_52717_message);
			if ((*(_53117_owner))._field_owner == _52643_target) {
				(*(this->self))._method_push_cycle_error(_52643_target,(*((*((*(_53117_owner))._field_table))._field_file))._method_dir(),_52717_message);
				goto _iter_end_5070848864;
			}
			_53217_old=_53117_owner;
			_53117_owner=(*(_53117_owner))._field_owner;
		}
	_iter_next_5070848864:;
	}
	_iter_end_5070848864:;
	(*(this->self))._method_push_err(_52687_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_52717_message)}));
}



inline jule::Bool _228d6ecab_SymbolBuilder::_method_check_import_cycles(jule::Ptr<_1e53308ee_ImportInfo> _54939_imp,jule::Ptr<_228d31971_UseDecl>& _54958_decl) {
	if ((*(_54939_imp))._field_path == (*((*((*(this->self))._field_table))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*(_54958_decl))._field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*(_54939_imp))._field_path))}));
		return false;
	}
	if ((*(this->self))._field_owner == nullptr) {
		return true;
	}
	if ((*((*((*((*(this->self))._field_owner))._field_table))._field_file))._method_dir() == (*(_54939_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error((*(this->self))._field_owner,_54939_imp,(*(_54958_decl))._field_token);
		return false;
	}
	jule::Ptr<_228d6ecab_SymbolBuilder> _56417_owner = (*(this->self))._field_owner;
	_julec_label_iter:;
	if ((*((*((*(_56417_owner))._field_table))._field_file))._method_dir() == (*(_54939_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error(_56417_owner,_54939_imp,(*(_54958_decl))._field_token);
		return false;
	}
	if ((*(_56417_owner))._field_owner != nullptr) {
		_56417_owner=(*(_56417_owner))._field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline void _228d6ecab_SymbolBuilder::_method_check_package_accessibility(jule::Ptr<_228d31971_UseDecl>& _58547_decl,jule::Str& _58564_mod,jule::Str& _58575_path) {
	if (((*this)._field_importer.get()._method_get_mod_path() != _58564_mod) && (_58575_path.rfind(jule::Str("internal", 8)) != -1LL)) {
		(*this)._method_push_err((*(_58547_decl))._field_token,jule::Str("you cannot access to internal packages", 38),jule::Slice<jule::Any>());
	}
}



inline jule::Bool _228d6ecab_SymbolBuilder::_method_import_package(jule::Ptr<_1e53308ee_ImportInfo>& _59139_imp,jule::Ptr<_228d31971_UseDecl>& _59162_decl) {
	jule::Bool _59180_ok = jule::Bool();
	if ((*(_59139_imp))._field_cpp_linked) {
		_59180_ok = true;
		return _59180_ok;
	}
	jule::Ptr<_1e53308ee_ImportInfo> _59617_port = (*(this->self))._field_importer.get()._method_get_import((*(_59139_imp))._field_path);
	if (_59617_port != nullptr) {
		(*(_59139_imp))._field_package=(*(_59617_port))._field_package;
		(*(_59139_imp))._field_duplicate=true;
		jule::Str _60117_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		(*(this->self))._field_importer.get()._method_set_mod_path((*(this->self))._field_importer.get()._method_mod_by_id((*(_59139_imp))._field_mod_id));
		(*(this->self))._method_check_package_accessibility(_59162_decl,_60117_old_mod,(*(_59617_port))._field_path);
		(*(this->self))._field_importer.get()._method_set_mod_path(_60117_old_mod);
	} else {
		if ((!((*(this->self))._method_check_import_cycles(_59139_imp,_59162_decl)))) {
			_59180_ok = false;
			return _59180_ok;
		}
		jule::Str _61017_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		__JULE_DEFER({
			(*(this->self))._field_importer.get()._method_set_mod_path(_61017_old_mod);
		});
		if ((*(_59139_imp))._field_std) {
			(*(this->self))._field_importer.get()._method_set_mod_path(_22779d455_PATH_STDLIB);
		}
		jule::Slice<jule::Ptr<_228d3160d_Ast>> _61522_asts;
		jule::Slice<_2276bcb9e_Log> _61528_errors;
		std::tie(_61522_asts,_61528_errors) = (*(this->self))._field_importer.get()._method_import_package((*(_59139_imp))._field_path,(!((*(_59139_imp))._field_std)));
		if (_61528_errors.len() > 0LL) {
			(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_61528_errors);
			_59180_ok = false;
			return _59180_ok;
		}
		(*(this->self))._method_check_package_accessibility(_59162_decl,_61017_old_mod,(*(_59139_imp))._field_path);
		{
			auto &expr = _61522_asts;
			auto it = expr.begin();
			_iter_begin_5070932688:;
			if (it != expr.end()) {
				jule::Ptr<_228d3160d_Ast> _228d6ecab_ast = *it;
				{
					jule::Ptr<_229d56533_SymbolTable> _62426_table;
					jule::Slice<_2276bcb9e_Log> _62433_errors;
					std::tie(_62426_table,_62433_errors) = _1e61383d7_build_symbols(_228d6ecab_ast,(*(this->self))._field_importer,this->self);
					if (_62433_errors.len() > 0LL) {
						(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_62433_errors);
						(*(this->self))._method_push_err_text((*(_59139_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_59139_imp))._field_link_path)}));
						_59180_ok = false;
						return _59180_ok;
					}
					(*((*(_59139_imp))._field_package))._field_files = jule::alloc_for_append((*((*(_59139_imp))._field_package))._field_files,1);(*((*(_59139_imp))._field_package))._field_files.push(_62426_table);
				}
				_iter_next_5070932688:;
				++it;
				goto _iter_begin_5070932688;
			}
			_iter_end_5070932688:;
		}
	}
	(*(this->self))._method_impl_import_selections(_59139_imp,_59162_decl);
	_59180_ok = true;
	return _59180_ok;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _228d6ecab_SymbolBuilder::_method_import_use_decl(jule::Ptr<_228d31971_UseDecl>& _64240_decl) {
	jule::Ptr<_1e53308ee_ImportInfo> _64317_imp = (*(this->self))._method_build_import(_64240_decl);
	if (_64317_imp == nullptr) {
		return nullptr;
	}
	jule::Bool _64917_ok = (*(this->self))._method_check_duplicate_use_decl(_64317_imp);
	if ((!(_64917_ok))) {
		return nullptr;
	}
	_64917_ok=(*(this->self))._method_import_package(_64317_imp,_64240_decl);
	(*((*(this->self))._field_table))._field_imports = jule::alloc_for_append((*((*(this->self))._field_table))._field_imports,1);(*((*(this->self))._field_table))._field_imports.push(_64317_imp);
	if (_64917_ok) {
		(*(this->self))._field_importer.get()._method_imported(_64317_imp);
		return _64317_imp;
	}
	return nullptr;
}



inline void _228d6ecab_SymbolBuilder::_method_import_use_decls(void) {
	{
		auto &expr = (*((*(this->self))._field_ast))._field_use_decls;
		auto it = expr.begin();
		_iter_begin_5070956224:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_UseDecl> _228d6ecab_decl = *it;
			{
				(*(this->self))._method_import_use_decl(_228d6ecab_decl);
				if ((*(this->self))._field_errors.len() > 0LL) {
					goto _iter_end_5070956224;
				}
			}
			_iter_next_5070956224:;
			++it;
			goto _iter_begin_5070956224;
		}
		_iter_end_5070956224:;
	}
}



inline void _228d6ecab_SymbolBuilder::_method_append_decl(_228d31971_Node& _67435_decl) {
	{
		auto &_match_expr{ _67435_decl._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_TypeAliasDecl>>()) {
			_case_begin_5070961984:;
			{
				jule::Ptr<_229d681e3_TypeAlias> _67721_ta = _228d6ecab_build_type_alias(_67435_decl._field_data.operator jule::Ptr<_228d31971_TypeAliasDecl>());
				(*((*this)._field_table))._field_type_aliases = jule::alloc_for_append((*((*this)._field_table))._field_type_aliases,1);(*((*this)._field_table))._field_type_aliases.push(_67721_ta);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_StructDecl>>()) {
			_case_begin_5070961264:;
			{
				jule::Ptr<_228e0d025_Struct> _68121_srct = _228d6ecab_build_struct(_67435_decl._field_data.operator jule::Ptr<_228d31971_StructDecl>());
				(*((*this)._field_table))._field_structs = jule::alloc_for_append((*((*this)._field_table))._field_structs,1);(*((*this)._field_table))._field_structs.push(_68121_srct);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_FnDecl>>()) {
			_case_begin_5070961360:;
			{
				jule::Ptr<_229b6ebcb_Fn> _68521_f = _228d6ecab_build_fn(_67435_decl._field_data.operator jule::Ptr<_228d31971_FnDecl>());
				(*((*this)._field_table))._field_funcs = jule::alloc_for_append((*((*this)._field_table))._field_funcs,1);(*((*this)._field_table))._field_funcs.push(_68521_f);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TraitDecl>>()) {
			_case_begin_5070961456:;
			{
				jule::Ptr<_229b5076c_Trait> _68921_t = _228d6ecab_build_trait(_67435_decl._field_data.operator jule::Ptr<_228d31971_TraitDecl>());
				(*((*this)._field_table))._field_traits = jule::alloc_for_append((*((*this)._field_table))._field_traits,1);(*((*this)._field_table))._field_traits.push(_68921_t);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_VarDecl>>()) {
			_case_begin_5070961568:;
			{
				jule::Ptr<_1e58b0654_Var> _69321_v = _228d6ecab_build_var(_67435_decl._field_data.operator jule::Ptr<_228d31971_VarDecl>());
				(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.push(_69321_v);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_EnumDecl>>()) {
			_case_begin_5070962992:;
			{
				jule::Ptr<_1e56be485_Enum> _69721_e = _228d6ecab_build_enum(_67435_decl._field_data.operator jule::Ptr<_228d31971_EnumDecl>());
				(*((*this)._field_table))._field_enums = jule::alloc_for_append((*((*this)._field_table))._field_enums,1);(*((*this)._field_table))._field_enums.push(_69721_e);
			}
		}
		else {
			_case_begin_5070960960:;
			{
				(*this)._method_push_err(_67435_decl._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5070960800:;
	}
}



inline void _228d6ecab_SymbolBuilder::_method_append_decls(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_decls;
		auto it = expr.begin();
		_iter_begin_5070983440:;
		if (it != expr.end()) {
			_228d31971_Node _228d6ecab_decl = *it;
			{
				(*this)._method_append_decl(_228d6ecab_decl);
			}
			_iter_next_5070983440:;
			++it;
			goto _iter_begin_5070983440;
		}
		_iter_end_5070983440:;
	}
}



inline void _228d6ecab_SymbolBuilder::_method_append_impls(void) {
	(*((*this)._field_table))._field_impls=jule::Slice<jule::Ptr<_1e56ca370_Impl>>::alloc(0LL,static_cast<jule::I64>((*((*this)._field_ast))._field_impls.len()));
	{
		auto &expr = (*((*this)._field_ast))._field_impls;
		auto it = expr.begin();
		_iter_begin_5070987776:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Impl> _228d6ecab_decl = *it;
			{
				(*((*this)._field_table))._field_impls = jule::alloc_for_append((*((*this)._field_table))._field_impls,1);(*((*this)._field_table))._field_impls.push(_228d6ecab_build_impl(_228d6ecab_decl));
			}
			_iter_next_5070987776:;
			++it;
			goto _iter_begin_5070987776;
		}
		_iter_end_5070987776:;
	}
}



inline void _228d6ecab_SymbolBuilder::_method_push_directive_pass(jule::Ptr<_228d31971_Directive>& _71843_d) {
	if ((*(_71843_d))._field_args.len() == 0LL) {
		(*this)._method_push_err((*(_71843_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((*(_71843_d))._field_args.len() > 1LL) {
		_228d7aadb_Token _72317_arg = (*(_71843_d))._field_args[1LL];
		(*this)._method_push_err(_72317_arg,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_228d7aadb_Token _72713_arg = (*(_71843_d))._field_args[0LL];
	if (_72713_arg._field_id != 6LLU) {
		(*this)._method_push_err(_72713_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_72713_arg._field_kind[0LL] != '\"') {
		(*this)._method_push_err(_72713_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*((*this)._field_table))._field_passes = jule::alloc_for_append((*((*this)._field_table))._field_passes,1);(*((*this)._field_table))._field_passes.push(_228d6ecab_Pass((*(_71843_d))._field_tag,_72713_arg._field_kind.slice(1LL,_72713_arg._field_kind.len() - 1LL)));
}



inline void _228d6ecab_SymbolBuilder::_method_append_top_directives(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_5071006720:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> _228d6ecab_d = *it;
			{
				{
					auto &_match_expr{ (*(_228d6ecab_d))._field_tag._field_kind };
					
					if (_match_expr == jule::Str("pass", 4)) {
						_case_begin_5071011520:;
						{
							(*this)._method_push_directive_pass(_228d6ecab_d);
						}
					}
					_match_end_5071011392:;
				}
			}
			_iter_next_5071006720:;
			++it;
			goto _iter_begin_5071006720;
		}
		_iter_end_5071006720:;
	}
}



inline void _228d6ecab_SymbolBuilder::_method_build(void) {
	(*(this->self))._field_table=jule::new_struct<_229d56533_SymbolTable>(new( std::nothrow ) _229d56533_SymbolTable((*((*(this->self))._field_ast))._field_file,jule::Slice<_228d6ecab_Pass>(),jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>(),jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>(),jule::Slice<jule::Ptr<_228e0d025_Struct>>(),jule::Slice<jule::Ptr<_229b6ebcb_Fn>>(),jule::Slice<jule::Ptr<_229b5076c_Trait>>(),jule::Slice<jule::Ptr<_1e56be485_Enum>>(),jule::Slice<jule::Ptr<_1e56ca370_Impl>>()));
	(*(this->self))._method_append_top_directives();
	(*(this->self))._method_import_use_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_append_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _228d6ecab_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e56ca370_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base != nullptr;
}



inline jule::Bool _1e56ca370_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56ca370_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e56c3885_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e56c3885_Match::_method_is_generic_type_match(void) {
	return ((*this)._field_type_match && ((*this)._field_expr != nullptr)) && (*((*((*this)._field_expr))._field_kind))._field_generic;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e56c3885_Case::_method_is_default(void) {
	return (*this)._field_exprs == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e56c3885_ScopeChecker::_method_find_package(jule::Str _41835_ident) {
	return (*((*this)._field_s))._method_find_package(_41835_ident);
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e56c3885_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)> _42837_selector) {
	return (*((*this)._field_s))._method_select_package(_42837_selector);
}



inline jule::Ptr<_1e58b0654_Var> _1e56c3885_ScopeChecker::_method_find_var(jule::Str _43931_ident,jule::Bool _43943_cpp_linked) {
	
	jule::Ptr<_1e58b0654_Var> _44217_v = (*((*this)._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
	if (_44217_v != nullptr) {
		return _44217_v;
	}
	jule::Ptr<_1e56c3885_ScopeChecker> _44717_parent = (*this)._field_parent;
	while (_44717_parent != nullptr) {
		{
			_44217_v=(*((*(_44717_parent))._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
			if (_44217_v != nullptr) {
				return _44217_v;
			}
			_44717_parent=(*(_44717_parent))._field_parent;
		}
	_iter_next_5071075408:;
	}
	_iter_end_5071075408:;
	return (*((*this)._field_s))._method_find_var(_43931_ident,_43943_cpp_linked);
}



inline jule::Ptr<_229d681e3_TypeAlias> _1e56c3885_ScopeChecker::_method_find_type_alias(jule::Str _46638_ident,jule::Bool _46650_cpp_linked) {
	
	jule::Ptr<_229d681e3_TypeAlias> _46917_ta = (*((*this)._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
	if (_46917_ta != nullptr) {
		return _46917_ta;
	}
	jule::Ptr<_1e56c3885_ScopeChecker> _47417_parent = (*this)._field_parent;
	while (_47417_parent != nullptr) {
		{
			_46917_ta=(*((*(_47417_parent))._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
			if (_46917_ta != nullptr) {
				return _46917_ta;
			}
			_47417_parent=(*(_47417_parent))._field_parent;
		}
	_iter_next_5071088752:;
	}
	_iter_end_5071088752:;
	return (*((*this)._field_s))._method_find_type_alias(_46638_ident,_46650_cpp_linked);
}



inline jule::Ptr<_228e0d025_Struct> _1e56c3885_ScopeChecker::_method_find_struct(jule::Str _49134_ident,jule::Bool _49146_cpp_linked) {
	return (*((*this)._field_s))._method_find_struct(_49134_ident,_49146_cpp_linked);
}



inline jule::Ptr<_229b6ebcb_Fn> _1e56c3885_ScopeChecker::_method_find_fn(jule::Str _50030_ident,jule::Bool _50042_cpp_linked) {
	return (*((*this)._field_s))._method_find_fn(_50030_ident,_50042_cpp_linked);
}



inline jule::Ptr<_229b5076c_Trait> _1e56c3885_ScopeChecker::_method_find_trait(jule::Str _50933_ident) {
	return (*((*this)._field_s))._method_find_trait(_50933_ident);
}



inline jule::Ptr<_1e56be485_Enum> _1e56c3885_ScopeChecker::_method_find_enum(jule::Str _51832_ident) {
	return (*((*this)._field_s))._method_find_enum(_51832_ident);
}



inline jule::Bool _1e56c3885_ScopeChecker::_method_is_unsafe(void) {
	jule::Ptr<_1e56c3885_ScopeChecker> _52617_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_52617_scope))._field_scope))._field_unsafety) {
		return true;
	}
	if ((*(_52617_scope))._field_parent != nullptr) {
		_52617_scope=(*(_52617_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1e56c3885_ScopeChecker::_method_is_root(void) {
	return ((*this)._field_parent == nullptr) || ((*this)._field_owner != nullptr);
}



inline jule::Bool _1e56c3885_ScopeChecker::_method_is_deferred(void) {
	jule::Ptr<_1e56c3885_ScopeChecker> _54717_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_54717_scope))._field_scope))._field_deferred) {
		return true;
	}
	if ((*(_54717_scope))._field_parent != nullptr) {
		_54717_scope=(*(_54717_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1e56c3885_ScopeChecker> _1e56c3885_ScopeChecker::_method_get_root(void) {
	jule::Ptr<_1e56c3885_ScopeChecker> _56517_root = this->self;
	while (((*(_56517_root))._field_parent != nullptr) && ((*(_56517_root))._field_owner == nullptr)) {
		{
			_56517_root=(*(_56517_root))._field_parent;
		}
	_iter_next_5071129744:;
	}
	_iter_end_5071129744:;
	return _56517_root;
}



inline jule::Ptr<_1e56c3885_Label> _1e56c3885_ScopeChecker::_method_find_label(jule::Str _57529_ident) {
	{
		auto &expr = (*((*this)._field_scope))._field_stmts;
		auto it = expr.begin();
		_iter_begin_5071134880:;
		if (it != expr.end()) {
			jule::Any _1e56c3885_st = *it;
			{
				{
					auto &_match_expr{ _1e56c3885_st };
					
					if (_match_expr.type_is<jule::Ptr<_1e56c3885_Label>>()) {
						_case_begin_5071136528:;
						{
							jule::Ptr<_1e56c3885_Label> _57925_label = _1e56c3885_st.operator jule::Ptr<_1e56c3885_Label>();
							if ((*(_57925_label))._field_ident == _57529_ident) {
								return _57925_label;
							}
						}
					}
					_match_end_5071136192:;
				}
			}
			_iter_next_5071134880:;
			++it;
			goto _iter_begin_5071134880;
		}
		_iter_end_5071134880:;
	}
	return nullptr;
}



inline jule::Ptr<_1e56c3885_ScopeLabel> _1e56c3885_ScopeChecker::_method_find_label_scope(jule::Str _59136_ident) {
	jule::Ptr<_1e56c3885_ScopeLabel> _59217_label = (*(this->self))._method_find_label_all(_59136_ident);
	if ((_59217_label != nullptr) && ((*(_59217_label))._field_scope == this->self)) {
		return _59217_label;
	}
	return nullptr;
}



inline jule::Ptr<_1e56c3885_ScopeLabel> _1e56c3885_ScopeChecker::_method_find_label_all(jule::Str _60333_ident) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_5071145152:;
		if (it != expr.end()) {
			jule::Ptr<_1e56c3885_ScopeLabel> _1e56c3885_lbl = *it;
			{
				if ((*((*(_1e56c3885_lbl))._field_label))._field_ident == _60333_ident) {
					return _1e56c3885_lbl;
				}
			}
			_iter_next_5071145152:;
			++it;
			goto _iter_begin_5071145152;
		}
		_iter_end_5071145152:;
	}
	return nullptr;
}



inline jule::Bool _1e56c3885_ScopeChecker::_method_is_duplicated_ident(jule::Uintptr _61538_itself,jule::Str _61555_ident) {
	jule::Ptr<_1e58b0654_Var> _61613_v = (*this)._method_find_var(_61555_ident,false);
	if ((_61613_v != nullptr) && (static_cast<jule::Uintptr>(_61613_v) != _61538_itself)) {
		if ((*(_61613_v))._field_scope == nullptr) {
			return false;
		}
		return ((*(_61613_v))._field_scope == (*this)._field_scope) || (!((*((*this)._field_s))._method_is_flag(1LL)));
	}
	jule::Ptr<_229d681e3_TypeAlias> _62413_ta = (*this)._method_find_type_alias(_61555_ident,false);
	if ((_62413_ta != nullptr) && (static_cast<jule::Uintptr>(_62413_ta) != _61538_itself)) {
		if ((*(_62413_ta))._field_scope == nullptr) {
			return false;
		}
		return ((*(_62413_ta))._field_scope == (*this)._field_tree) || (!((*((*this)._field_s))._method_is_flag(1LL)));
	}
	return false;
}



inline void _1e56c3885_ScopeChecker::_method_check_var_decl(jule::Ptr<_228d31971_VarDecl> _63538_decl) {
	jule::Ptr<_1e58b0654_Var> _63617_v = _228d6ecab_build_var(_63538_decl);
	(*(_63617_v))._field_scope=(*(this->self))._field_scope;
	__JULE_DEFER({
		(*((*(this->self))._field_table))._field_vars = jule::alloc_for_append((*((*(this->self))._field_table))._field_vars,1);(*((*(this->self))._field_table))._field_vars.push(_63617_v);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_63617_v));
	});
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_63617_v)),(*(_63617_v))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_63617_v))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_63617_v))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*((*(this->self))._field_s))._method_check_var_decl(_63617_v,this->self);
	if ((!((*(_63617_v))._method_is_type_inferred())) && (((*(_63617_v))._field_kind == nullptr) || ((*((*(_63617_v))._field_kind))._field_kind == nullptr))) {
		return;
	}
	(*((*(this->self))._field_s))._method_check_type_var(_63617_v,this->self);
}



inline void _1e56c3885_ScopeChecker::_method_check_type_alias_decl(jule::Ptr<_228d31971_TypeAliasDecl> _65745_decl) {
	jule::Ptr<_229d681e3_TypeAlias> _65817_ta = _228d6ecab_build_type_alias(_65745_decl);
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_65817_ta)),(*(_65817_ta))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_65817_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_65817_ta))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*((*(this->self))._field_s))._method_check_type_alias_decl(_65817_ta,this->self);
	(*((*(this->self))._field_table))._field_type_aliases = jule::alloc_for_append((*((*(this->self))._field_table))._field_type_aliases,1);(*((*(this->self))._field_table))._field_type_aliases.push(_65817_ta);
}



inline jule::Ptr<_1e56c3885_Scope> _1e56c3885_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_1e56c3885_Scope>(new( std::nothrow ) _1e56c3885_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),jule::Slice<jule::Any>()));
}



inline void _1e56c3885_ScopeChecker::_method_check_child_ssc(jule::Ptr<_228d31971_ScopeTree>& _67440_tree,jule::Ptr<_1e56c3885_Scope>& _67463_s,jule::Ptr<_1e56c3885_ScopeChecker>& _67479_ssc) {
	(*(_67479_ssc))._field_parent=this->self;
	(*(_67479_ssc))._method_check(_67440_tree,_67463_s);
}



inline jule::Ptr<_1e56c3885_Scope> _1e56c3885_ScopeChecker::_method_check_child_sc(jule::Ptr<_228d31971_ScopeTree>& _67939_tree,jule::Ptr<_1e56c3885_ScopeChecker>& _67962_ssc) {
	jule::Ptr<_1e56c3885_Scope> _68017_s = (*(this->self))._method_get_child();
	(*(this->self))._method_check_child_ssc(_67939_tree,_68017_s,_67962_ssc);
	return _68017_s;
}



inline jule::Ptr<_1e56c3885_Scope> _1e56c3885_ScopeChecker::_method_check_child(jule::Ptr<_228d31971_ScopeTree>& _68536_tree) {
	jule::Ptr<_1e56c3885_ScopeChecker> _68617_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_child_sc(_68536_tree,_68617_ssc);
}



inline void _1e56c3885_ScopeChecker::_method_check_anon_scope(jule::Ptr<_228d31971_ScopeTree> _69040_tree) {
	jule::Ptr<_1e56c3885_Scope> _69117_s = (*(this->self))._method_check_child(_69040_tree);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_69117_s));
}



inline void _1e56c3885_ScopeChecker::_method_process_error_call(jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>& _69543_m,_228d7aadb_Token _69574_err) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err(_69574_err,jule::Str("deferred scopes are not supports error calls", 44),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1e56c3885_ScopeChecker> _70017_root = (*(this->self))._method_get_root();
	if ((!((*((*((*(_70017_root))._field_owner))._field_decl))._field_exceptional))) {
		(*((*(this->self))._field_s))._method_push_err(_69574_err,jule::Str("error call can only useable for exceptional functions", 53),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("you can declare an exceptional function with \"!\" operator", 57),jule::Slice<jule::Any>());
	}
	(*(_69543_m))._field_func=(*(_70017_root))._field_owner;
}



inline void _1e56c3885_ScopeChecker::_method_check_expr(jule::Ptr<_228d31971_Expr> _70834_expr) {
	jule::Ptr<_229d70d33_Eval> _70917_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_70917_eval))._field_ignored=true;
	jule::Ptr<_229d70d33_Data> _71117_d = (*(_70917_eval))._method_eval_expr(_70834_expr);
	if (_71117_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_71117_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>>()) {
			_case_begin_5071240496:;
			{
				jule::Ptr<_1e5870218_BuiltinErrorCallExprModel> _71821_m = (*(_71117_d))._field_model.operator jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>();
				(*(this->self))._method_process_error_call(_71821_m,(*(_70834_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_71117_d));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BackendEmitExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinCloneCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinOutCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinOutlnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinAssertCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_FreeExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_FnCallExprModel>>()) {
			_case_begin_5071241152:;
			{
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_71117_d));
			}
		}
		else {
			_case_begin_5071240048:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_70834_expr))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_5071239968:;
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_co_expr(jule::Ptr<_228d31971_CoExpr> _73837_expr) {
	jule::Ptr<_229d70d33_Eval> _73917_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_73917_eval))._field_ignored=true;
	jule::Ptr<_229d70d33_Data> _74117_d = (*(_73917_eval))._method_eval_expr((*(_73837_expr))._field_expr);
	if (_74117_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_74117_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_FnCallExprModel>>()) {
			_case_begin_5071263568:;
			{
				jule::Ptr<_1e5870218_FnCallExprModel> _74821_model = (*(_74117_d))._field_model.operator jule::Ptr<_1e5870218_FnCallExprModel>();
				if ((*((*((*(_74821_model))._field_func))._field_decl))._field_exceptional) {
					(*((*(this->self))._field_s))._method_push_err((*(_73837_expr))._field_token,jule::Str("concurrent calls not supports exceptionals", 42),jule::Slice<jule::Any>());
					(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("handle exceptional in a separate function or anonymous function", 63),jule::Slice<jule::Any>());
				}
				(*(_74821_model))._field_is_co=true;
				(*(_73917_eval))._method_check_fn_of_concurrent_call((*(_74821_model))._field_func,(*((*(_73837_expr))._field_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_74117_d));
			}
		}
		else {
			_case_begin_5071260720:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_73837_expr))._field_token,jule::Str("statement must have function call expression", 44),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5071260032:;
	}
}



inline jule::Ptr<_1e56c3885_If> _1e56c3885_ScopeChecker::_method_check_if(jule::Ptr<_228d31971_If> _76432_i) {
	jule::Ptr<_1e56c3885_Scope> _76517_s = (*(this->self))._method_check_child((*(_76432_i))._field_scope);
	jule::Ptr<_229d70d33_Data> _76717_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_76432_i))._field_expr);
	if (_76717_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_229d681e3_Prim> _77217_prim = (*((*(_76717_d))._field_kind))._method_prim();
	if ((_77217_prim == nullptr) || (!((*(_77217_prim))._method_is_bool()))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_76432_i))._field_expr))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1e56c3885_If>(new( std::nothrow ) _1e56c3885_If((*(_76717_d))._field_model,_76517_s));
}



inline jule::Ptr<_1e56c3885_Else> _1e56c3885_ScopeChecker::_method_check_else(jule::Ptr<_228d31971_Else> _78434_e) {
	return jule::new_struct<_1e56c3885_Else>(new( std::nothrow ) _1e56c3885_Else((*(this->self))._method_check_child((*(_78434_e))._field_scope)));
}



inline void _1e56c3885_ScopeChecker::_method_check_conditional(jule::Ptr<_228d31971_Conditional> _79041_conditional) {
	jule::Ptr<_1e56c3885_Conditional> _79117_c = jule::new_struct<_1e56c3885_Conditional>(new( std::nothrow ) _1e56c3885_Conditional());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_79117_c));
	(*(_79117_c))._field_elifs=jule::Slice<jule::Ptr<_1e56c3885_If>>::alloc(0LL,static_cast<jule::I64>((*(_79041_conditional))._field_tail.len() + 1LL));
	(*(_79117_c))._field_elifs = jule::alloc_for_append((*(_79117_c))._field_elifs,1);(*(_79117_c))._field_elifs.push((*(this->self))._method_check_if((*(_79041_conditional))._field_head));
	{
		auto &expr = (*(_79041_conditional))._field_tail;
		auto it = expr.begin();
		_iter_begin_5071296400:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_If> _1e56c3885_elif = *it;
			{
				(*(_79117_c))._field_elifs = jule::alloc_for_append((*(_79117_c))._field_elifs,1);(*(_79117_c))._field_elifs.push((*(this->self))._method_check_if(_1e56c3885_elif));
			}
			_iter_next_5071296400:;
			++it;
			goto _iter_begin_5071296400;
		}
		_iter_end_5071296400:;
	}
	if ((*(_79041_conditional))._field_default != nullptr) {
		(*(_79117_c))._field_default=(*(this->self))._method_check_else((*(_79041_conditional))._field_default);
	}
}



inline jule::Ptr<_1e56c3885_Scope> _1e56c3885_ScopeChecker::_method_check_iter_scope_sc(jule::Uintptr _80639_it,jule::Ptr<_228d31971_ScopeTree> _80656_tree,jule::Ptr<_1e56c3885_ScopeChecker> _80678_ssc) {
	(*(_80678_ssc))._field_it=_80639_it;
	return (*(this->self))._method_check_child_sc(_80656_tree,_80678_ssc);
}



inline jule::Ptr<_1e56c3885_Scope> _1e56c3885_ScopeChecker::_method_check_iter_scope(jule::Uintptr _81136_it,jule::Ptr<_228d31971_ScopeTree>& _81154_tree) {
	jule::Ptr<_1e56c3885_ScopeChecker> _81217_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_iter_scope_sc(_81136_it,_81154_tree,_81217_ssc);
}



inline void _1e56c3885_ScopeChecker::_method_check_inf_iter(jule::Ptr<_228d31971_Iter>& _81639_it) {
	jule::Ptr<_1e56c3885_InfIter> _81717_kind = jule::new_struct<_1e56c3885_InfIter>(new( std::nothrow ) _1e56c3885_InfIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_81717_kind));
	(*(_81717_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_81717_kind)),(*(_81639_it))._field_scope);
}



inline void _1e56c3885_ScopeChecker::_method_check_while_iter(jule::Ptr<_228d31971_Iter>& _82441_it) {
	jule::Ptr<_228d31971_WhileKind> _82517_wh = (*(_82441_it))._field_kind.operator jule::Ptr<_228d31971_WhileKind>();
	if (((*(_82517_wh))._field_expr == nullptr) && ((*(_82517_wh))._field_next == nullptr)) {
		(*(this->self))._method_check_inf_iter(_82441_it);
		return;
	}
	jule::Ptr<_1e56c3885_WhileIter> _83117_kind = jule::new_struct<_1e56c3885_WhileIter>(new( std::nothrow ) _1e56c3885_WhileIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_83117_kind));
	(*(_83117_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_83117_kind)),(*(_82441_it))._field_scope);
	if ((*(_82517_wh))._field_expr != nullptr) {
		jule::Ptr<_229d70d33_Data> _83821_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_82517_wh))._field_expr);
		if (_83821_d == nullptr) {
			return;
		}
		jule::Ptr<_229d681e3_Prim> _84317_prim = (*((*(_83821_d))._field_kind))._method_prim();
		if (_84317_prim == nullptr) {
			(*((*(this->self))._field_s))._method_push_err((*(_82441_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		if ((!((*(_84317_prim))._method_is_bool()))) {
			(*((*(this->self))._field_s))._method_push_err((*(_82441_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		(*(_83117_kind))._field_expr=(*(_83821_d))._field_model;
	}
	if ((*(_82517_wh))._method_is_while_next()) {
		if ((!(_1e56c3885_is_valid_ast_st_for_next_st((*(_82517_wh))._field_next)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_82517_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			return;
		}
		jule::I64 _86317_n = (*((*(this->self))._field_scope))._field_stmts.len();
		(*(this->self))._method_check_node((*(_82517_wh))._field_next);
		if (_86317_n < (*((*(this->self))._field_scope))._field_stmts.len()) {
			jule::Any _86625_st = (*((*(this->self))._field_scope))._field_stmts[_86317_n];
			(*((*(this->self))._field_scope))._field_stmts=(*((*(this->self))._field_scope))._field_stmts.slice(0LL,_86317_n);
			if ((!(_1e56c3885_is_valid_st_for_next_st(_86625_st)))) {
				(*((*(this->self))._field_s))._method_push_err((*(_82517_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			}
			(*(_83117_kind))._field_next=_86625_st;
		}
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_range_iter(jule::Ptr<_228d31971_Iter>& _87741_it) {
	jule::Ptr<_228d31971_RangeKind> _87817_rang = (*(_87741_it))._field_kind.operator jule::Ptr<_228d31971_RangeKind>();
	jule::Ptr<_229d70d33_Data> _88017_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_87817_rang))._field_expr);
	if (_88017_d == nullptr) {
		return;
	}
	jule::Ptr<_1e56c3885_RangeIter> _88517_kind = jule::new_struct<_1e56c3885_RangeIter>(new( std::nothrow ) _1e56c3885_RangeIter(_88017_d,jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_1e58b0654_Var>(),jule::Ptr<_1e58b0654_Var>()));
	_1e58b019d_RangeChecker _88917_rc = _1e58b019d_RangeChecker(this->self,_87817_rang,_88517_kind,_88017_d);
	jule::Bool _89513_ok = _88917_rc._method_check();
	if ((!(_89513_ok))) {
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_88517_kind));
	jule::Ptr<_1e56c3885_ScopeChecker> _90217_ssc = (*(this->self))._method_new_child_checker();
	if ((*(_88517_kind))._field_key_a != nullptr) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(1LL))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_88517_kind))._field_key_a))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_88517_kind))._field_key_a))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_88517_kind))._field_key_a))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_90217_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_90217_ssc))._field_table))._field_vars,1);(*((*(_90217_ssc))._field_table))._field_vars.push((*(_88517_kind))._field_key_a);
	}
	if ((*(_88517_kind))._field_key_b != nullptr) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(1LL))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_88517_kind))._field_key_b))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_88517_kind))._field_key_b))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_88517_kind))._field_key_b))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_90217_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_90217_ssc))._field_table))._field_vars,1);(*((*(_90217_ssc))._field_table))._field_vars.push((*(_88517_kind))._field_key_b);
	}
	(*(_88517_kind))._field_scope=(*(this->self))._method_check_iter_scope_sc(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_88517_kind)),(*(_87741_it))._field_scope,_90217_ssc);
}



inline void _1e56c3885_ScopeChecker::_method_check_iter(jule::Ptr<_228d31971_Iter> _92334_it) {
	if ((*(_92334_it))._method_is_inf()) {
		(*(this->self))._method_check_inf_iter(_92334_it);
		return;
	}
	{
		auto &_match_expr{ (*(_92334_it))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_WhileKind>>()) {
			_case_begin_5071408144:;
			{
				(*(this->self))._method_check_while_iter(_92334_it);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_RangeKind>>()) {
			_case_begin_5071410800:;
			{
				(*(this->self))._method_check_range_iter(_92334_it);
			}
		}
		else {
			_case_begin_5071410016:;
			{
				jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
			}
		}
		_match_end_5071409856:;
	}
}



inline jule::Bool _1e56c3885_ScopeChecker::_method_check_valid_cont_label(jule::Uintptr _93642_it) {
	jule::Ptr<_1e56c3885_ScopeChecker> _93717_scope = this->self;
	_julec_label_iter:;
	if ((*(_93717_scope))._field_it == _93642_it) {
		return true;
	}
	if ((*(_93717_scope))._field_parent != nullptr) {
		_93717_scope=(*(_93717_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1e56c3885_ScopeChecker::_method_check_valid_break_label(jule::Uintptr _95243_ptr) {
	jule::Ptr<_1e56c3885_ScopeChecker> _95317_scope = this->self;
	_julec_label_iter:;
	if ((*(_95317_scope))._field_it == _95243_ptr) {
		return true;
	}
	if ((*(_95317_scope))._field_cse != 0LL) {
		jule::Uintptr _96117_mtch = static_cast<jule::Uintptr>((*(((_1e56c3885_Case*)((*(_95317_scope))._field_cse))))._field_owner);
		if (_96117_mtch == _95243_ptr) {
			return true;
		}
	}
	if ((*(_95317_scope))._field_parent != nullptr) {
		_95317_scope=(*(_95317_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1e56c3885_ContSt> _1e56c3885_ScopeChecker::_method_check_cont_valid_scope(jule::Ptr<_228d31971_ContSt> _97542_c) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_97542_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((*(_97542_c))._field_label._field_id != 0LLU) {
		return jule::new_struct<_1e56c3885_ContSt>(new( std::nothrow ) _1e56c3885_ContSt());
	}
	jule::Ptr<_1e56c3885_ScopeChecker> _98517_scope = this->self;
	_julec_label_iter:;
	{
		
		if ((((*(_98517_scope))._field_it == 0LL) && ((*(_98517_scope))._field_parent != nullptr)) && ((*(_98517_scope))._field_owner == nullptr)) {
			_case_begin_5071440128:;
			{
				_98517_scope=(*(_98517_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((*(_98517_scope))._field_it != 0LL) {
			_case_begin_5071440240:;
			{
				return jule::new_struct<_1e56c3885_ContSt>(new( std::nothrow ) _1e56c3885_ContSt((*(_98517_scope))._field_it));
			}
		}
		_match_end_5071439968:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_97542_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1e56c3885_ScopeChecker::_method_check_cont(jule::Ptr<_228d31971_ContSt> _100030_c) {
	jule::Ptr<_1e56c3885_ContSt> _100117_cont = (*(this->self))._method_check_cont_valid_scope(_100030_c);
	if (_100117_cont == nullptr) {
		return;
	}
	if ((*(_100030_c))._field_label._field_id != 0LLU) {
		jule::Ptr<_1e56c3885_ScopeLabel> _100721_label = _1e56c3885_find_label_parent((*(_100030_c))._field_label._field_kind,(*(this->self))._field_parent);
		if (_100721_label == nullptr) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
			return;
		}
		(*(_100721_label))._field_used=true;
		if (((*(_100721_label))._field_pos + 1LL) >= (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts.len()) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
			return;
		}
		jule::Int _102017_i = (*(_100721_label))._field_pos + 1LL;
		if (_102017_i >= (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts.len()) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>());
		} else {
			jule::Any _102425_st = (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts[_102017_i];
			{
				auto &_match_expr{ _102425_st };
				
				if (_match_expr.type_is<jule::Ptr<_1e56c3885_InfIter>>()) {
					_case_begin_5071468512:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_1e56c3885_InfIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1e56c3885_RangeIter>>()) {
					_case_begin_5071471680:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_1e56c3885_RangeIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1e56c3885_WhileIter>>()) {
					_case_begin_5071471776:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_1e56c3885_WhileIter>()));
					}
				}
				else {
					_case_begin_5071471280:;
					{
						(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
					}
				}
				_match_end_5071471200:;
			}
		}
	}
	if ((*(_100117_cont))._field_it != 0LL) {
		if ((!((*(this->self))._method_check_valid_cont_label((*(_100117_cont))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_100117_cont));
}



inline void _1e56c3885_ScopeChecker::_method_check_label(jule::Ptr<_228d31971_LabelSt> _104335_l) {
	if ((*(this->self))._method_find_label((*(_104335_l))._field_ident) != nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_104335_l))._field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any((*(_104335_l))._field_ident)}));
		return;
	}
	jule::Ptr<_1e56c3885_Label> _104917_label = jule::new_struct<_1e56c3885_Label>(new( std::nothrow ) _1e56c3885_Label((*(_104335_l))._field_ident));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_104917_label));
	(*((*(this->self))._field_labels))=jule::append((*((*(this->self))._field_labels)),jule::Slice<jule::Ptr<_1e56c3885_ScopeLabel>>({jule::new_struct<_1e56c3885_ScopeLabel>(new( std::nothrow ) _1e56c3885_ScopeLabel((*(_104335_l))._field_token,_104917_label,static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len() - 1LL),this->self,jule::Bool()))}));
}



inline void _1e56c3885_ScopeChecker::_method_push_goto(jule::Ptr<_228d31971_GotoSt> _106233_gt) {
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_1e56c3885_GotoSt>(new( std::nothrow ) _1e56c3885_GotoSt((*(_106233_gt))._field_label._field_kind))));
	(*((*(this->self))._field_gotos))=jule::append((*((*(this->self))._field_gotos)),jule::Slice<jule::Ptr<_1e56c3885_ScopeGoto>>({jule::new_struct<_1e56c3885_ScopeGoto>(new( std::nothrow ) _1e56c3885_ScopeGoto(_106233_gt,this->self,static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len() - 1LL)))}));
}



inline void _1e56c3885_ScopeChecker::_method_check_postfix(jule::Ptr<_228d31971_AssignSt> _107437_a) {
	if ((*(_107437_a))._field_left.len() > 1LL) {
		(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_228d31971_Expr> _108017_expr = (*((*(_107437_a))._field_left[0LL]))._field_expr;
	jule::Ptr<_229d70d33_Data> _108117_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_108017_expr);
	if (_108117_d == nullptr) {
		return;
	}
	_1e56c3885_check_assign((*(this->self))._field_s,_108117_d,nullptr,(*(_107437_a))._field_setter);
	if ((*((*(_108117_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_229d681e3_Ptr> _108921_ptr = (*((*(_108117_d))._field_kind))._method_ptr();
		if ((*(_108921_ptr))._method_is_unsafe()) {
			(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_107437_a))._field_setter._field_kind),jule::Any((*((*(_108117_d))._field_kind))._method_to_str())}));
			return;
		}
	} else {
		if (((*((*(_108117_d))._field_kind))._method_prim() == nullptr) || (!(_1e860322e_is_num((*((*((*(_108117_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_107437_a))._field_setter._field_kind),jule::Any((*((*(_108117_d))._field_kind))._method_to_str())}));
			return;
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_1e56c3885_Postfix>(new( std::nothrow ) _1e56c3885_Postfix((*(_108117_d))._field_model,(*(_107437_a))._field_setter._field_kind))));
}



inline jule::Bool _1e56c3885_ScopeChecker::_method_is_new_assign_ident(jule::Str _110738_ident) {
	if (_228d7aadb_is_ignore_ident(_110738_ident) || (_110738_ident == jule::Str())) {
		return false;
	}
	return (*((*this)._field_table))._method_def_by_ident(_110738_ident,false) == nullptr;
}



inline void _1e56c3885_ScopeChecker::_method_check_single_assign(jule::Ptr<_228d31971_AssignSt>& _111544_a) {
	jule::Ptr<_229d70d33_Data> _111617_l = nullptr;
	if ((!(_228d7aadb_is_ignore_ident((*((*(_111544_a))._field_left[0LL]))._field_ident)))) {
		jule::Ptr<_228d31971_Expr> _111921_expr = (*((*(_111544_a))._field_left[0LL]))._field_expr;
		_111617_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_111921_expr);
		if (_111617_l == nullptr) {
			return;
		}
	}
	jule::Ptr<_229d70d33_Eval> _112617_eval = (((_111617_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_111617_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
	jule::Ptr<_229d70d33_Data> _113117_r = (*(_112617_eval))._method_eval_expr((*(_111544_a))._field_right);
	if (_113117_r == nullptr) {
		return;
	}
	if (_111617_l == nullptr) {
		if ((*((*(_113117_r))._field_kind))._method_void()) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_111544_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_113117_r));
		return;
	}
	if ((!(_1e56c3885_check_assign((*(this->self))._field_s,_111617_l,_113117_r,(*(_111544_a))._field_setter)))) {
		return;
	}
	if ((*((*(_113117_r))._field_kind))._method_tup() != nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_111544_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_1e56c3885_Assign>(new( std::nothrow ) _1e56c3885_Assign((*(_111617_l))._field_model,(*(_113117_r))._field_model,(*(_111544_a))._field_setter))));
	if ((*(_111544_a))._field_setter._field_kind != jule::Str("=", 1)) {
		(*(_111544_a))._field_setter._field_kind=(*(_111544_a))._field_setter._field_kind.slice(0LL,(*(_111544_a))._field_setter._field_kind.len() - 1LL);
		_229d70d33_BinopSolver _116321_solver = _229d70d33_BinopSolver(jule::new_struct_ptr<_229d70d33_Eval>(new( std::nothrow ) _229d70d33_Eval((*(this->self))._field_s,this->self,jule::Ptr<_229d681e3_TypeKind>(),(*(this->self))._method_is_unsafe(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1e58b0654_Var>(),jule::Ptr<_228e0d025_FieldIns>())),jule::Ptr<_229d70d33_Data>(),jule::Ptr<_229d70d33_Data>(),(*(_111544_a))._field_setter);
		_113117_r=_116321_solver._method_solve_explicit(_111617_l,_113117_r);
		if (_113117_r == nullptr) {
			return;
		}
		(*(_111544_a))._field_setter._field_kind+=jule::Str("=", 1);
		return;
	}
	_1e58b019d_AssignTypeChecker _118017_checker = _1e58b019d_AssignTypeChecker((*(this->self))._field_s,(*(_111617_l))._field_kind,_113117_r,(*(_111544_a))._field_setter);
	_118017_checker._method_check();
}



inline void _1e56c3885_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ptr<_1e56c3885_MultiAssign> _118957_st,jule::Ptr<_228d31971_AssignSt> _119013_a,jule::Ptr<_228d31971_AssignLeft> _119031_lexpr,jule::Ptr<_229d70d33_Data> _119055_l,jule::Ptr<_229d70d33_Data> _119069_r) {
	if (_228d7aadb_is_ignore_ident((*(_119031_lexpr))._field_ident)) {
		if ((*((*(_119069_r))._field_kind))._method_void()) {
			(*((*this)._field_s))._method_push_err((*((*(_119013_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*(_118957_st))._field_l = jule::alloc_for_append((*(_118957_st))._field_l,1);(*(_118957_st))._field_l.push(jule::Any(nullptr));
		return;
	}
	if ((*(_119013_a))._field_declarative && (*this)._method_is_new_assign_ident((*(_119031_lexpr))._field_ident)) {
		jule::Ptr<_1e58b0654_Var> _120221_v = jule::new_struct<_1e58b0654_Var>(new( std::nothrow ) _1e58b0654_Var((*this)._field_scope,(*(_119031_lexpr))._field_token,(*(_119031_lexpr))._field_ident,jule::Bool(),jule::Bool(),(*(_119031_lexpr))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),(*(_119031_lexpr))._field_reference,jule::Str(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::new_struct<_229d70d33_Value>(new( std::nothrow ) _229d70d33_Value((*(_119013_a))._field_right,_119069_r)),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_1e58b0654_IterRelation>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>()));
		(*((*this)._field_s))._method_check_var(_120221_v);
		(*(_118957_st))._field_l = jule::alloc_for_append((*(_118957_st))._field_l,1);(*(_118957_st))._field_l.push(jule::Any(_120221_v));
		(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.push(_120221_v);
		(*((*this)._field_scope))._field_stmts = jule::alloc_for_append((*((*this)._field_scope))._field_stmts,1);(*((*this)._field_scope))._field_stmts.push(jule::Any(_120221_v));
		return;
	}
	if ((*(_119031_lexpr))._field_mutable || (*(_119031_lexpr))._field_reference) {
		(*((*this)._field_s))._method_push_err((*(_119031_lexpr))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_119031_lexpr))._field_ident)}));
		(*((*this)._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((!(_1e56c3885_check_assign((*this)._field_s,_119055_l,_119069_r,(*(_119013_a))._field_setter)))) {
		return;
	}
	
	(*((*this)._field_s))._method_check_validity_for_init_expr((*(_119055_l))._field_mutable,false,(*(_119055_l))._field_kind,_119069_r,(*(_119013_a))._field_setter);
	_1e58b019d_AssignTypeChecker _123717_checker = _1e58b019d_AssignTypeChecker((*this)._field_s,(*(_119055_l))._field_kind,_119069_r,(*(_119013_a))._field_setter);
	_123717_checker._method_check();
	(*(_118957_st))._field_l = jule::alloc_for_append((*(_118957_st))._field_l,1);(*(_118957_st))._field_l.push((*(_119055_l))._field_model);
}



inline void _1e56c3885_ScopeChecker::_method_check_ret_multi_assign(jule::Ptr<_228d31971_AssignSt>& _124847_a) {
	jule::Ptr<_229d70d33_Data> _124917_rd = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_124847_a))._field_right);
	if (_124917_rd == nullptr) {
		return;
	}
	jule::Slice<jule::Ptr<_229d70d33_Data>> _125417_r = _1e56c3885_get_datas_from_tuple_data(_124917_rd);
	{
		
		if ((*(_124847_a))._field_left.len() > _125417_r.len()) {
			_case_begin_5071643104:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_124847_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_124847_a))._field_left.len() < _125417_r.len()) {
			_case_begin_5071643216:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_124847_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5071642944:;
	}
	jule::Ptr<_1e56c3885_MultiAssign> _126617_st = jule::new_struct<_1e56c3885_MultiAssign>(new( std::nothrow ) _1e56c3885_MultiAssign(jule::Slice<jule::Any>(),(*(_124917_rd))._field_model));
	if ((*((*(_124917_rd))._field_kind))._method_tup() == nullptr) {
		(*(_126617_st))._field_r=jule::Any(jule::new_struct<_1e5870218_TupleExprModel>(new( std::nothrow ) _1e5870218_TupleExprModel(_125417_r)));
	}
	{
		auto &expr = (*(_124847_a))._field_left;
		auto it = expr.begin();
		_iter_begin_5071654032:;
		if (it != expr.end()) {
			jule::Int _1e56c3885_i = it - expr.begin();
			{
				jule::Ptr<_228d31971_AssignLeft> _127521_lexpr = (*(_124847_a))._field_left[_1e56c3885_i];
				jule::Ptr<_229d70d33_Data> _127621_l = nullptr;
				if ((!(_228d7aadb_is_ignore_ident((*(_127521_lexpr))._field_ident))) && ((!((*(_124847_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_127521_lexpr))._field_ident))))) {
					_127621_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_127521_lexpr))._field_expr);
					if (_127621_l == nullptr) {
						goto _iter_next_5071654032;
					}
				}
				(*(this->self))._method___process_end_part_of_multi_assign(_126617_st,_124847_a,_127521_lexpr,_127621_l,_125417_r[_1e56c3885_i]);
			}
			_iter_next_5071654032:;
			++it;
			_1e56c3885_i++;
			goto _iter_begin_5071654032;
		}
		_iter_end_5071654032:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_126617_st));
}



inline void _1e56c3885_ScopeChecker::_method_check_multi_assign(jule::Ptr<_228d31971_AssignSt>& _129243_a) {
	{
		auto &_match_expr{ (*((*(_129243_a))._field_right))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_FnCallExpr>>()) {
			_case_begin_5071669456:;
			{
				(*(this->self))._method_check_ret_multi_assign(_129243_a);
				return;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_UnsafeExpr>>()) {
			_case_begin_5071669552:;
			{
				{
					auto &_match_expr{ (*((*((*(_129243_a))._field_right))._field_kind.operator jule::Ptr<_228d31971_UnsafeExpr>()))._field_expr };
					
					if (_match_expr.type_is<jule::Ptr<_228d31971_FnCallExpr>>()) {
						_case_begin_5071674032:;
						{
							(*(this->self))._method_check_ret_multi_assign(_129243_a);
							return;
						}
					}
					_match_end_5071673936:;
				}
			}
		}
		_match_end_5071669328:;
	}
	jule::Slice<jule::Any> _130617_right = _1e56c3885_get_expr_models((*((*(_129243_a))._field_right))._field_kind);
	{
		
		if ((*(_129243_a))._field_left.len() > _130617_right.len()) {
			_case_begin_5071677280:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_129243_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_129243_a))._field_left.len() < _130617_right.len()) {
			_case_begin_5071677376:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_129243_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_5071677088:;
	}
	jule::Ptr<_1e5870218_TupleExprModel> _131817_right_tuple = jule::new_struct<_1e5870218_TupleExprModel>(new( std::nothrow ) _1e5870218_TupleExprModel());
	jule::Ptr<_1e56c3885_MultiAssign> _132017_st = jule::new_struct<_1e56c3885_MultiAssign>(new( std::nothrow ) _1e56c3885_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_131817_right_tuple)));
	{
		auto &expr = (*(_129243_a))._field_left;
		auto it = expr.begin();
		_iter_begin_5071686672:;
		if (it != expr.end()) {
			jule::Int _1e56c3885_i = it - expr.begin();
			{
				jule::Ptr<_228d31971_AssignLeft> _132521_lexpr = (*(_129243_a))._field_left[_1e56c3885_i];
				jule::Ptr<_229d70d33_Data> _132621_l = nullptr;
				if ((!(_228d7aadb_is_ignore_ident((*(_132521_lexpr))._field_ident))) && ((!((*(_129243_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_132521_lexpr))._field_ident))))) {
					_132621_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_132521_lexpr))._field_expr);
					if (_132621_l == nullptr) {
						goto _iter_next_5071686672;
					}
				}
				jule::Ptr<_228d31971_Expr> _133621_expr = jule::new_struct<_228d31971_Expr>(new( std::nothrow ) _228d31971_Expr((*((*(_129243_a))._field_right))._field_token,_130617_right[_1e56c3885_i]));
				jule::Ptr<_229d70d33_Eval> _133721_eval = (((_132621_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_132621_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
				jule::Ptr<_229d70d33_Data> _134221_r = (*(_133721_eval))._method_eval_expr(_133621_expr);
				if (_134221_r == nullptr) {
					goto _iter_next_5071686672;
				}
				(*(_131817_right_tuple))._field_datas = jule::alloc_for_append((*(_131817_right_tuple))._field_datas,1);(*(_131817_right_tuple))._field_datas.push(_134221_r);
				(*(this->self))._method___process_end_part_of_multi_assign(_132017_st,_129243_a,_132521_lexpr,_132621_l,_134221_r);
			}
			_iter_next_5071686672:;
			++it;
			_1e56c3885_i++;
			goto _iter_begin_5071686672;
		}
		_iter_end_5071686672:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_132017_st));
}



inline void _1e56c3885_ScopeChecker::_method_check_assign_st(jule::Ptr<_228d31971_AssignSt> _135539_a) {
	if (_228d7aadb_is_postfix_op((*(_135539_a))._field_setter._field_kind)) {
		(*(this->self))._method_check_postfix(_135539_a);
		return;
	}
	if (((*(_135539_a))._field_left.len() == 1LL) && (!((*(_135539_a))._field_declarative))) {
		(*(this->self))._method_check_single_assign(_135539_a);
		return;
	}
	(*(this->self))._method_check_multi_assign(_135539_a);
}



inline jule::Ptr<_1e56c3885_Scope> _1e56c3885_ScopeChecker::_method_check_case_scope(jule::Ptr<_1e56c3885_Case>& _136937_c,jule::Ptr<_228d31971_ScopeTree>& _136952_tree) {
	jule::Ptr<_1e56c3885_ScopeChecker> _137017_ssc = (*(this->self))._method_new_child_checker();
	(*(_137017_ssc))._field_cse=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_136937_c));
	return (*(this->self))._method_check_child_sc(_136952_tree,_137017_ssc);
}



inline jule::Ptr<_1e56c3885_Case> _1e56c3885_ScopeChecker::_method_check_case(jule::Ptr<_1e56c3885_Match> _137534_m,jule::Int _137545_i,jule::Ptr<_228d31971_Case> _137557_c,jule::Ptr<_229d70d33_Data> _137587_expr) {
	jule::Ptr<_1e56c3885_Case> _137617__case = (*(_137534_m))._field_cases[_137545_i];
	(*(_137617__case))._field_exprs=jule::Slice<jule::Ptr<_229d70d33_Data>>::alloc(0LL,static_cast<jule::I64>((*(_137557_c))._field_exprs.len()));
	jule::Bool _137817_generic_matched = false;
	{
		auto &expr = (*(_137557_c))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5071730800:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Expr> _1e56c3885_e = *it;
			{
				if ((*(_137534_m))._field_type_match) {
					jule::Ptr<_229d70d33_Eval> _138225_eval = jule::new_struct_ptr<_229d70d33_Eval>(new( std::nothrow ) _229d70d33_Eval((*(this->self))._field_s,this->self,jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1e58b0654_Var>(),jule::Ptr<_228e0d025_FieldIns>()));
					jule::Ptr<_229d70d33_Data> _138725_d = (*(_138225_eval))._method_eval(_1e56c3885_e);
					if (_138725_d != nullptr) {
						(*(_137617__case))._field_exprs = jule::alloc_for_append((*(_137617__case))._field_exprs,1);(*(_137617__case))._field_exprs.push(_138725_d);
						if (_1e56c3885_count_match_type(_137534_m,(*(_138725_d))._field_kind) > 1LL) {
							(*((*(this->self))._field_s))._method_push_err((*(_1e56c3885_e))._field_token,jule::Str("duplicated case: type @ is already checked", 42),jule::Slice<jule::Any>({jule::Any((*((*(_138725_d))._field_kind))._method_to_str())}));
						}
					}
					if ((*((*(_137587_expr))._field_kind))._field_generic) {
						_137817_generic_matched=_137817_generic_matched || (*((*(_137587_expr))._field_kind))._method_equals((*(_138725_d))._field_kind);
					} else {
						jule::Ptr<_229b5076c_Trait> _139825_trt = (*((*(_137587_expr))._field_kind))._method_trt();
						if (_139825_trt != nullptr) {
							(*((*(this->self))._field_s))._method_check_type_compatibility((*(_137587_expr))._field_kind,(*(_138725_d))._field_kind,(*(_1e56c3885_e))._field_token);
						}
					}
					goto _iter_next_5071730800;
				}
				jule::Ptr<_229d70d33_Data> _140721_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_1e56c3885_e);
				if (_140721_d == nullptr) {
					goto _iter_next_5071730800;
				}
				(*(_137617__case))._field_exprs = jule::alloc_for_append((*(_137617__case))._field_exprs,1);(*(_137617__case))._field_exprs.push(_140721_d);
				_1e58b019d_AssignTypeChecker _141421_checker = _1e58b019d_AssignTypeChecker((*(this->self))._field_s,(*(_137587_expr))._field_kind,_140721_d,(*(_1e56c3885_e))._field_token);
				_141421_checker._method_check();
			}
			_iter_next_5071730800:;
			++it;
			goto _iter_begin_5071730800;
		}
		_iter_end_5071730800:;
	}
	if (((!((*(_137534_m))._field_type_match)) || (!((*((*(_137587_expr))._field_kind))._field_generic))) || _137817_generic_matched) {
		(*(_137617__case))._field_scope=(*(this->self))._method_check_case_scope(_137617__case,(*(_137557_c))._field_scope);
	}
	return _137617__case;
}



inline void _1e56c3885_ScopeChecker::_method_check_cases(jule::Ptr<_228d31971_MatchCase>& _142936_m,jule::Ptr<_1e56c3885_Match> _142955_rm,jule::Ptr<_229d70d33_Data> _142971_expr) {
	(*(_142955_rm))._field_cases=jule::Slice<jule::Ptr<_1e56c3885_Case>>::alloc(static_cast<jule::I64>((*(_142936_m))._field_cases.len()));
	{
		auto &expr = (*(_142936_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5071764944:;
		if (it != expr.end()) {
			jule::Int _1e56c3885_i = it - expr.begin();
			{
				jule::Ptr<_1e56c3885_Case> _143221__case = jule::new_struct<_1e56c3885_Case>(new( std::nothrow ) _1e56c3885_Case(_142955_rm,jule::Ptr<_1e56c3885_Scope>(),jule::Slice<jule::Ptr<_229d70d33_Data>>(),jule::Ptr<_1e56c3885_Case>()));
				if (_1e56c3885_i > 0LL) {
					(*((*(_142955_rm))._field_cases[_1e56c3885_i - 1LL]))._field_next=_143221__case;
				}
				(*(_142955_rm))._field_cases[_1e56c3885_i]=_143221__case;
			}
			_iter_next_5071764944:;
			++it;
			_1e56c3885_i++;
			goto _iter_begin_5071764944;
		}
		_iter_end_5071764944:;
	}
	if (((*(_142955_rm))._field_default != nullptr) && ((*(_142936_m))._field_cases.len() > 0LL)) {
		(*((*(_142955_rm))._field_cases[(*(_142955_rm))._field_cases.len() - 1LL]))._field_next=(*(_142955_rm))._field_default;
	}
	{
		auto &expr = (*(_142936_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5071775184:;
		if (it != expr.end()) {
			jule::Int _1e56c3885_i = it - expr.begin();
			jule::Ptr<_228d31971_Case> _1e56c3885_c = *it;
			{
				(*(this->self))._method_check_case(_142955_rm,_1e56c3885_i,_1e56c3885_c,_142971_expr);
			}
			_iter_next_5071775184:;
			++it;
			_1e56c3885_i++;
			goto _iter_begin_5071775184;
		}
		_iter_end_5071775184:;
	}
}



inline jule::Ptr<_1e56c3885_Case> _1e56c3885_ScopeChecker::_method_check_default(jule::Ptr<_1e56c3885_Match> _145237_m,jule::Ptr<_228d31971_Else> _145252_d) {
	jule::Ptr<_1e56c3885_Case> _145317_def = jule::new_struct<_1e56c3885_Case>(new( std::nothrow ) _1e56c3885_Case(_145237_m,jule::Ptr<_1e56c3885_Scope>(),jule::Slice<jule::Ptr<_229d70d33_Data>>(),jule::Ptr<_1e56c3885_Case>()));
	(*(_145317_def))._field_scope=(*(this->self))._method_check_case_scope(_145317_def,(*(_145252_d))._field_scope);
	return _145317_def;
}



inline void _1e56c3885_ScopeChecker::_method_check_comptime_panic(jule::Ptr<_1e56c3885_Scope>& _146040_s,_228d7aadb_Token _146051_error_token) {
	if ((*(_146040_s))._field_stmts.len() != 1LL) {
		return;
	}
	jule::Any _146513_stmt = (*(_146040_s))._field_stmts[0LL];
	{
		auto &_match_expr{ _146513_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_229d70d33_Data>>()) {
			_case_begin_5071789520:;
			{
				jule::Ptr<_229d70d33_Data> _146817_d = _146513_stmt.operator jule::Ptr<_229d70d33_Data>();
				{
					auto &_match_expr{ (*(_146817_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>>()) {
						_case_begin_5071792544:;
						{
							jule::Ptr<_1e5870218_BuiltinPanicCallExprModel> _147121_m = (*(_146817_d))._field_model.operator jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>();
							{
								auto &_match_expr{ (*(_147121_m))._field_expr };
								
								if (_match_expr.type_is<jule::Ptr<_1e856e8a4_Const>>()) {
									_case_begin_5071795856:;
									{
										jule::Ptr<_1e856e8a4_Const> _147425_c = (*(_147121_m))._field_expr.operator jule::Ptr<_1e856e8a4_Const>();
										if ((*(_147425_c))._method_is_str()) {
											(*((*this)._field_s))._method_push_err(_146051_error_token,jule::Str("compile-time panic: @", 21),jule::Slice<jule::Any>({jule::Any((*(_147425_c))._method_read_str())}));
										}
									}
								}
								_match_end_5071795776:;
							}
						}
					}
					_match_end_5071792416:;
				}
			}
		}
		_match_end_5071789440:;
	}
}



inline void _1e56c3885_ScopeChecker::_method_push_type_match(jule::Ptr<_1e56c3885_Match> _148339_tm,jule::Ptr<_228d31971_MatchCase>& _148352_m) {
	if ((*((*((*(_148339_tm))._field_expr))._field_kind))._field_generic) {
		{
			auto &expr = (*(_148339_tm))._field_cases;
			auto it = expr.begin();
			_iter_begin_5071803760:;
			if (it != expr.end()) {
				jule::Int _1e56c3885_i = it - expr.begin();
				jule::Ptr<_1e56c3885_Case> _1e56c3885_c = *it;
				{
					if ((*(_1e56c3885_c))._field_scope != nullptr) {
						(*(_148339_tm))._field_cases=nullptr;
						(*(_148339_tm))._field_default=_1e56c3885_c;
						(*(this->self))._method_check_comptime_panic((*(_1e56c3885_c))._field_scope,(*((*(_148352_m))._field_cases[_1e56c3885_i]))._field_token);
						goto _julec_label_push;
					}
				}
				_iter_next_5071803760:;
				++it;
				_1e56c3885_i++;
				goto _iter_begin_5071803760;
			}
			_iter_end_5071803760:;
		}
		if ((*(_148339_tm))._field_default != nullptr) {
			(*(this->self))._method_check_comptime_panic((*((*(_148339_tm))._field_default))._field_scope,(*((*(_148352_m))._field_default))._field_token);
		}
		(*(_148339_tm))._field_cases=nullptr;
	}
	_julec_label_push:;
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_148339_tm));
}



inline void _1e56c3885_ScopeChecker::_method_check_type_match(jule::Ptr<_228d31971_MatchCase>& _150541_m) {
	jule::Ptr<_229d70d33_Data> _150617_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval((*(_150541_m))._field_expr);
	if (_150617_d == nullptr) {
		return;
	}
	if ((!((*((*(_150617_d))._field_kind))._field_generic)) && (!((((*((*(_150617_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_150617_d))._field_kind))._method_prim()))._method_is_any()) || ((*((*(_150617_d))._field_kind))._method_trt() != nullptr)))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_150541_m))._field_expr))._field_token,jule::Str("type-match must be have <any>, <trait> or <generic> typed expression", 68),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1e56c3885_Match> _151717_tm = jule::new_struct<_1e56c3885_Match>(new( std::nothrow ) _1e56c3885_Match(_150617_d,true,jule::Slice<jule::Ptr<_1e56c3885_Case>>(),jule::Ptr<_1e56c3885_Case>()));
	if ((*(_150541_m))._field_default != nullptr) {
		(*(_151717_tm))._field_default=(*(this->self))._method_check_default(_151717_tm,(*(_150541_m))._field_default);
	}
	(*(this->self))._method_check_cases(_150541_m,_151717_tm,_150617_d);
	(*(this->self))._method_push_type_match(_151717_tm,_150541_m);
}



inline void _1e56c3885_ScopeChecker::_method_check_common_match(jule::Ptr<_228d31971_MatchCase>& _153043_m) {
	jule::Ptr<_229d70d33_Data> _153117_d = nullptr;
	if ((*(_153043_m))._field_expr == nullptr) {
		_153117_d=jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1e856e8a4_Const::_static_method_new_bool(true)));
		(*(_153117_d))._field_model=jule::Any((*(_153117_d))._field_constant);
	} else {
		_153117_d=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_153043_m))._field_expr);
		if (_153117_d == nullptr) {
			return;
		}
	}
	jule::Ptr<_1e56c3885_Match> _154517_mc = jule::new_struct<_1e56c3885_Match>(new( std::nothrow ) _1e56c3885_Match(_153117_d,jule::Bool(),jule::Slice<jule::Ptr<_1e56c3885_Case>>(),jule::Ptr<_1e56c3885_Case>()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_154517_mc));
	if ((*(_153043_m))._field_default != nullptr) {
		(*(_154517_mc))._field_default=(*(this->self))._method_check_default(_154517_mc,(*(_153043_m))._field_default);
	}
	(*(this->self))._method_check_cases(_153043_m,_154517_mc,_153117_d);
}



inline void _1e56c3885_ScopeChecker::_method_check_match(jule::Ptr<_228d31971_MatchCase> _155735_m) {
	if ((*(_155735_m))._field_type_match) {
		(*(this->self))._method_check_type_match(_155735_m);
		return;
	}
	(*(this->self))._method_check_common_match(_155735_m);
}



inline void _1e56c3885_ScopeChecker::_method_check_fall(jule::Ptr<_228d31971_FallSt> _156530_f) {
	if ((((*(this->self))._field_cse == 0LL) || (((*((*(this->self))._field_scope))._field_stmts.len() + 1LL) < (*((*(this->self))._field_scope))._field_stmts.len())) || (*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_156530_f))._field_token,jule::Str("fall keyword can only useable at end of the case scopes", 55),jule::Slice<jule::Any>());
		return;
	}
	_1e56c3885_Case* _157317__case = ((_1e56c3885_Case*)((*(this->self))._field_cse));
	if ((*(_157317__case))._field_next == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_156530_f))._field_token,jule::Str("fall cannot useable at final case", 33),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(jule::new_struct<_1e56c3885_FallSt>(new( std::nothrow ) _1e56c3885_FallSt(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>((*(_157317__case))._field_next)))))));
}



inline jule::Ptr<_1e56c3885_BreakSt> _1e56c3885_ScopeChecker::_method_check_break_with_label(jule::Ptr<_228d31971_BreakSt> _158542_b) {
	jule::Ptr<_1e56c3885_BreakSt> _158617_brk = (*(this->self))._method_check_plain_break(_158542_b);
	if (_158617_brk == nullptr) {
		return nullptr;
	}
	(*(_158617_brk))._field_it=0LL;
	(*(_158617_brk))._field_mtch=0LL;
	jule::Ptr<_1e56c3885_ScopeLabel> _159617_label = _1e56c3885_find_label_parent((*(_158542_b))._field_label._field_kind,(*(this->self))._field_parent);
	if (_159617_label == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_158542_b))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_158542_b))._field_label._field_kind)}));
		return nullptr;
	}
	(*(_159617_label))._field_used=true;
	if (((*(_159617_label))._field_pos + 1LL) >= (*((*((*(_159617_label))._field_scope))._field_scope))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_158542_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158542_b))._field_label._field_kind)}));
		return nullptr;
	}
	jule::Int _160913_i = (*(_159617_label))._field_pos + 1LL;
	if (_160913_i >= (*((*((*(_159617_label))._field_scope))._field_scope))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_158542_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158542_b))._field_label._field_kind)}));
	} else {
		jule::Any _161321_st = (*((*((*(_159617_label))._field_scope))._field_scope))._field_stmts[_160913_i];
		{
			auto &_match_expr{ _161321_st };
			
			if (_match_expr.type_is<jule::Ptr<_1e56c3885_InfIter>>()) {
				_case_begin_5071897536:;
				{
					(*(_158617_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161321_st.operator jule::Ptr<_1e56c3885_InfIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1e56c3885_RangeIter>>()) {
				_case_begin_5071900656:;
				{
					(*(_158617_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161321_st.operator jule::Ptr<_1e56c3885_RangeIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1e56c3885_WhileIter>>()) {
				_case_begin_5071900752:;
				{
					(*(_158617_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161321_st.operator jule::Ptr<_1e56c3885_WhileIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Match>>()) {
				_case_begin_5071900848:;
				{
					(*(_158617_brk))._field_mtch=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161321_st.operator jule::Ptr<_1e56c3885_Match>()));
				}
			}
			else {
				_case_begin_5071900256:;
				{
					(*((*(this->self))._field_s))._method_push_err((*(_158542_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158542_b))._field_label._field_kind)}));
				}
			}
			_match_end_5071900176:;
		}
	}
	if ((*(_158617_brk))._field_it != 0LL) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_158617_brk))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_158542_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158542_b))._field_label._field_kind)}));
		}
	}
	if ((*(_158617_brk))._field_mtch != 0LL) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_158617_brk))._field_mtch)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_158542_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158542_b))._field_label._field_kind)}));
		}
	}
	return _158617_brk;
}



inline jule::Ptr<_1e56c3885_BreakSt> _1e56c3885_ScopeChecker::_method_check_plain_break(jule::Ptr<_228d31971_BreakSt> _163837_b) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_163837_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1e56c3885_ScopeChecker> _164417_scope = this->self;
	_julec_label_iter:;
	{
		
		if (((((*(_164417_scope))._field_it == 0LL) && ((*(_164417_scope))._field_cse == 0LL)) && ((*(_164417_scope))._field_parent != nullptr)) && ((*(_164417_scope))._field_owner == nullptr)) {
			_case_begin_5071925072:;
			{
				_164417_scope=(*(_164417_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((*(_164417_scope))._field_it != 0LL) {
			_case_begin_5071925184:;
			{
				return jule::new_struct<_1e56c3885_BreakSt>(new( std::nothrow ) _1e56c3885_BreakSt((*(_164417_scope))._field_it,jule::Uintptr()));
			}
		}
		else if ((*(_164417_scope))._field_cse != 0LL) {
			_case_begin_5071925296:;
			{
				return jule::new_struct<_1e56c3885_BreakSt>(new( std::nothrow ) _1e56c3885_BreakSt(jule::Uintptr(),static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>((*(((_1e56c3885_Case*)((*(_164417_scope))._field_cse))))._field_owner)))));
			}
		}
		_match_end_5071924896:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_163837_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1e56c3885_ScopeChecker::_method_check_break(jule::Ptr<_228d31971_BreakSt> _166231_b) {
	if ((*(_166231_b))._field_label._field_id != 0LLU) {
		jule::Ptr<_1e56c3885_BreakSt> _166421_brk = (*(this->self))._method_check_break_with_label(_166231_b);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_166421_brk));
		return;
	}
	jule::Ptr<_1e56c3885_BreakSt> _166917_brk = (*(this->self))._method_check_plain_break(_166231_b);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_166917_brk));
}



inline void _1e56c3885_ScopeChecker::_method_check_ret(jule::Ptr<_228d31971_RetSt> _167333_r) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_167333_r))._field_token,jule::Str("deferred scopes are not supports return statements", 50),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1e56c3885_RetSt> _167817_rt = jule::new_struct<_1e56c3885_RetSt>(new( std::nothrow ) _1e56c3885_RetSt((*((*(this->self))._method_get_root()))._field_owner,jule::Slice<jule::Ptr<_1e58b0654_Var>>(),jule::Any()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_167817_rt));
	jule::Ptr<_1e58b019d_RetTypeChecker> _168317_rtc = jule::new_struct<_1e58b019d_RetTypeChecker>(new( std::nothrow ) _1e58b019d_RetTypeChecker(this->self,(*(_167817_rt))._field_func,jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_228d31971_Expr>>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>(),(*(_167333_r))._field_token,jule::Any()));
	jule::Bool _168813_ok = (*(_168317_rtc))._method_check((*(_167333_r))._field_expr);
	if ((!(_168813_ok))) {
		return;
	}
	if (((*(_167333_r))._field_expr == nullptr) && ((*(_168317_rtc))._field_vars.len() == 0LL)) {
		return;
	}
	(*(_167817_rt))._field_vars=(*(_168317_rtc))._field_vars;
	if ((*(_167333_r))._field_expr != nullptr) {
		(*(_167817_rt))._field_expr=(*(_168317_rtc))._field_model;
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_use_expr(jule::Ptr<_228d31971_UseExpr> _170434_ue) {
	if ((*(this->self))._field_result == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_170434_ue))._field_token,jule::Str("use expressions cannot useable out of exceptional handler scopes", 64),jule::Slice<jule::Any>());
		return;
	}
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_170434_ue))._field_token,jule::Str("use expressions cannot useable in deferred scopes", 49),jule::Slice<jule::Any>());
	}
	if (((*(this->self))._field_i + 1LL) < (*((*(this->self))._field_tree))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_170434_ue))._field_token,jule::Str("use expressions must be last statement of scope", 47),jule::Slice<jule::Any>());
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_node(jule::Any& _172135_node) {
	{
		auto &_match_expr{ _172135_node };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_Comment>>()) {
			_case_begin_5072000112:;
			{
				goto _match_end_5071999312;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_ScopeTree>>()) {
			_case_begin_5072001040:;
			{
				(*(this->self))._method_check_anon_scope(_172135_node.operator jule::Ptr<_228d31971_ScopeTree>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_VarDecl>>()) {
			_case_begin_5071999200:;
			{
				(*(this->self))._method_check_var_decl(_172135_node.operator jule::Ptr<_228d31971_VarDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TypeAliasDecl>>()) {
			_case_begin_5072000304:;
			{
				(*(this->self))._method_check_type_alias_decl(_172135_node.operator jule::Ptr<_228d31971_TypeAliasDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_Expr>>()) {
			_case_begin_5072000400:;
			{
				(*(this->self))._method_check_expr(_172135_node.operator jule::Ptr<_228d31971_Expr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_CoExpr>>()) {
			_case_begin_5072000560:;
			{
				(*(this->self))._method_check_co_expr(_172135_node.operator jule::Ptr<_228d31971_CoExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_Conditional>>()) {
			_case_begin_5072000656:;
			{
				(*(this->self))._method_check_conditional(_172135_node.operator jule::Ptr<_228d31971_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_Iter>>()) {
			_case_begin_5072001472:;
			{
				(*(this->self))._method_check_iter(_172135_node.operator jule::Ptr<_228d31971_Iter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_ContSt>>()) {
			_case_begin_5072001568:;
			{
				(*(this->self))._method_check_cont(_172135_node.operator jule::Ptr<_228d31971_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_LabelSt>>()) {
			_case_begin_5072001664:;
			{
				(*(this->self))._method_check_label(_172135_node.operator jule::Ptr<_228d31971_LabelSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_GotoSt>>()) {
			_case_begin_5072001760:;
			{
				(*(this->self))._method_push_goto(_172135_node.operator jule::Ptr<_228d31971_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_AssignSt>>()) {
			_case_begin_5072001856:;
			{
				(*(this->self))._method_check_assign_st(_172135_node.operator jule::Ptr<_228d31971_AssignSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_MatchCase>>()) {
			_case_begin_5072001952:;
			{
				(*(this->self))._method_check_match(_172135_node.operator jule::Ptr<_228d31971_MatchCase>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_FallSt>>()) {
			_case_begin_5072002048:;
			{
				(*(this->self))._method_check_fall(_172135_node.operator jule::Ptr<_228d31971_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_BreakSt>>()) {
			_case_begin_5072002144:;
			{
				(*(this->self))._method_check_break(_172135_node.operator jule::Ptr<_228d31971_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_RetSt>>()) {
			_case_begin_5072002240:;
			{
				(*(this->self))._method_check_ret(_172135_node.operator jule::Ptr<_228d31971_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_UseExpr>>()) {
			_case_begin_5072002336:;
			{
				(*(this->self))._method_check_use_expr(_172135_node.operator jule::Ptr<_228d31971_UseExpr>());
			}
		}
		else {
			_case_begin_5071999520:;
			{
				jule::outln(jule::Str("error <unimplemented scope node>", 32));
			}
		}
		_match_end_5071999312:;
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_result(void) {
	jule::Any _174517_stmt = (*((*(this->self))._field_tree))._field_stmts[(*((*(this->self))._field_tree))._field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _174517_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_UseExpr>>()) {
			_case_begin_5072040416:;
			{
				jule::Ptr<_228d31971_UseExpr> _174821_ue = _174517_stmt.operator jule::Ptr<_228d31971_UseExpr>();
				jule::Ptr<_229d70d33_Data> _174921_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_174821_ue))._field_expr);
				if (_174921_d == nullptr) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_174921_d));
				jule::Ptr<_1e58b019d_RetTypeChecker> _175621_rtc = jule::new_struct<_1e58b019d_RetTypeChecker>(new( std::nothrow ) _1e58b019d_RetTypeChecker(this->self,jule::Ptr<_229b6ebcb_FnIns>(),_1e58b019d_get_result_types((*(this->self))._field_result),jule::Slice<jule::Ptr<_228d31971_Expr>>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>(),(*((*(_174821_ue))._field_expr))._field_token,jule::Any()));
				(*(_175621_rtc))._method_check((*(_174821_ue))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_Expr>>()) {
			_case_begin_5072040512:;
			{
				jule::Ptr<_228d31971_Expr> _176421_expr = _174517_stmt.operator jule::Ptr<_228d31971_Expr>();
				jule::Ptr<_229d70d33_Data> _176521_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_176421_expr);
				if (_176521_d == nullptr) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.push(jule::Any(_176521_d));
				{
					auto &_match_expr{ (*(_176521_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>>()) {
						_case_begin_5072056992:;
						{
							jule::Ptr<_1e5870218_BuiltinErrorCallExprModel> _177425_m = (*(_176521_d))._field_model.operator jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>();
							(*(this->self))._method_process_error_call(_177425_m,(*(_176421_expr))._field_token);
						}
					}
					else {
						_case_begin_5072056688:;
						{
							return;
						}
					}
					_match_end_5072056608:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_GotoSt>>() || _match_expr.type_is<jule::Ptr<_228d31971_BreakSt>>() || _match_expr.type_is<jule::Ptr<_228d31971_ContSt>>() || _match_expr.type_is<jule::Ptr<_228d31971_RetSt>>()) {
			_case_begin_5072038976:;
			{
				(*(this->self))._method_check_node(_174517_stmt);
			}
		}
		else {
			_case_begin_5072038528:;
			{
				(*(this->self))._method_check_node(_174517_stmt);
				return;
			}
		}
		_match_end_5072038448:;
	}
	(*(this->self))._field_result=nullptr;
}



inline void _1e56c3885_ScopeChecker::_method_check_tree(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < (*((*(this->self))._field_tree))._field_stmts.len(); ((*(this->self))._field_i)++) {
		{
			jule::Any _179921_stmt = (*((*(this->self))._field_tree))._field_stmts[(*(this->self))._field_i];
			(*(this->self))._method_check_node(_179921_stmt);
		}
	_iter_next_5072065584:;
	}
	_iter_end_5072065584:;
	if (((*(this->self))._field_result != nullptr) && ((*((*(this->self))._field_tree))._field_stmts.len() != 0LL)) {
		(*(this->self))._method_check_result();
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_goto(jule::Ptr<_1e56c3885_ScopeGoto>& _180834_gt,jule::Ptr<_1e56c3885_ScopeLabel>& _180855_label) {
	jule::Ptr<_1e56c3885_ScopeChecker> _180917_gtsc = (*(_180834_gt))._field_scope;
	while (((*(_180917_gtsc))._field_child_index - 1LL) > (*((*(_180855_label))._field_scope))._field_child_index) {
		{
			_180917_gtsc=(*(_180917_gtsc))._field_parent;
		}
	_iter_next_5072076656:;
	}
	_iter_end_5072076656:;
	jule::Int _181417_n = 0LL;
	if ((*(_180917_gtsc))._field_scope == (*((*(_180855_label))._field_scope))._field_scope) {
		if ((*(_180834_gt))._field_pos > (*(_180855_label))._field_pos) {
			return;
		}
		_181417_n=(*(_180834_gt))._field_pos;
	}
	jule::Int _182717_i = (*(_180855_label))._field_pos - 1LL;
	if (_181417_n == 0LL) {
		{
			auto &expr = (*((*((*(_180855_label))._field_scope))._field_scope))._field_stmts;
			auto it = expr.begin();
			_iter_begin_5072086336:;
			if (it != expr.end()) {
				jule::Int _1e56c3885_j = it - expr.begin();
				jule::Any &_1e56c3885_stmt = *it;
				{
					if (_1e56c3885_stmt_is_goto_scope(_1e56c3885_stmt,(*(_180917_gtsc))._field_scope)) {
						_181417_n=_1e56c3885_j;
						goto _iter_end_5072086336;
					}
				}
				_iter_next_5072086336:;
				++it;
				_1e56c3885_j++;
				goto _iter_begin_5072086336;
			}
			_iter_end_5072086336:;
		}
	}
	for (; _182717_i >= _181417_n; (_182717_i)--) {
		{
			jule::Any _184021_stmt = (*((*((*(_180855_label))._field_scope))._field_scope))._field_stmts[_182717_i];
			if (_1e56c3885_st_is_def(_184021_stmt)) {
				(*((*this)._field_s))._method_push_err((*((*(_180834_gt))._field_gt))._field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any((*((*(_180834_gt))._field_gt))._field_label._field_kind)}));
				return;
			}
		}
	_iter_next_5072089824:;
	}
	_iter_end_5072089824:;
}



inline void _1e56c3885_ScopeChecker::_method_check_gotos(void) {
	{
		auto &expr = (*((*this)._field_gotos));
		auto it = expr.begin();
		_iter_begin_5072096496:;
		if (it != expr.end()) {
			jule::Ptr<_1e56c3885_ScopeGoto> _1e56c3885_gt = *it;
			{
				jule::Ptr<_1e56c3885_ScopeLabel> _185021_label = (*this)._method_find_label_all((*((*(_1e56c3885_gt))._field_gt))._field_label._field_kind);
				if (_185021_label == nullptr) {
					(*((*this)._field_s))._method_push_err((*((*(_1e56c3885_gt))._field_gt))._field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*((*(_1e56c3885_gt))._field_gt))._field_label._field_kind)}));
					goto _iter_next_5072096496;
				}
				(*(_185021_label))._field_used=true;
				(*this)._method_check_goto(_1e56c3885_gt,_185021_label);
			}
			_iter_next_5072096496:;
			++it;
			goto _iter_begin_5072096496;
		}
		_iter_end_5072096496:;
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_labels(void) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_5072105392:;
		if (it != expr.end()) {
			jule::Ptr<_1e56c3885_ScopeLabel> &_1e56c3885_l = *it;
			{
				if ((!((*(_1e56c3885_l))._field_used))) {
					(*((*this)._field_s))._method_push_err((*(_1e56c3885_l))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*((*(_1e56c3885_l))._field_label))._field_ident)}));
				}
			}
			_iter_next_5072105392:;
			++it;
			goto _iter_begin_5072105392;
		}
		_iter_end_5072105392:;
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_vars(void) {
	{
		auto &expr = (*((*this)._field_table))._field_vars;
		auto it = expr.begin();
		_iter_begin_5072111104:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> &_1e56c3885_v = *it;
			{
				if ((((!((*(_1e56c3885_v))._field_used)) && (!(_228d7aadb_is_ignore_ident((*(_1e56c3885_v))._field_ident)))) && (!(_228d7aadb_is_anon_ident((*(_1e56c3885_v))._field_ident)))) && ((*(_1e56c3885_v))._field_ident != jule::Str("self", 4))) {
					(*((*this)._field_s))._method_push_err((*(_1e56c3885_v))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_1e56c3885_v))._field_ident)}));
				}
			}
			_iter_next_5072111104:;
			++it;
			goto _iter_begin_5072111104;
		}
		_iter_end_5072111104:;
	}
}



inline void _1e56c3885_ScopeChecker::_method_check_aliases(void) {
	{
		auto &expr = (*((*this)._field_table))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5072119104:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeAlias> &_1e56c3885_a = *it;
			{
				if (((!((*(_1e56c3885_a))._field_used)) && (!(_228d7aadb_is_ignore_ident((*(_1e56c3885_a))._field_ident)))) && (!(_228d7aadb_is_anon_ident((*(_1e56c3885_a))._field_ident)))) {
					(*((*this)._field_s))._method_push_err((*(_1e56c3885_a))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_1e56c3885_a))._field_ident)}));
				}
			}
			_iter_next_5072119104:;
			++it;
			goto _iter_begin_5072119104;
		}
		_iter_end_5072119104:;
	}
}



inline void _1e56c3885_ScopeChecker::_method_check(jule::Ptr<_228d31971_ScopeTree>& _188630_tree,jule::Ptr<_1e56c3885_Scope>& _188653_s) {
	(*(_188653_s))._field_deferred=(*(_188630_tree))._field_deferred;
	(*(_188653_s))._field_unsafety=(*(_188630_tree))._field_unsafety;
	jule::I64 _189013_errors = (*((*(this->self))._field_s))._field_errors.len();
	(*(this->self))._field_tree=_188630_tree;
	(*(this->self))._field_scope=_188653_s;
	(*(this->self))._method_check_tree();
	if (_189013_errors == (*((*(this->self))._field_s))._field_errors.len()) {
		(*(this->self))._method_check_vars();
		(*(this->self))._method_check_aliases();
		if ((*(this->self))._method_is_root()) {
			(*(this->self))._method_check_gotos();
			(*(this->self))._method_check_labels();
		}
	}
}



inline jule::Ptr<_1e56c3885_ScopeChecker> _1e56c3885_ScopeChecker::_method_new_child_checker(void) {
	jule::Ptr<_1e56c3885_ScopeChecker> _191017_base = _1e56c3885_new_scope_checker_base((*(this->self))._field_s,nullptr);
	(*(_191017_base))._field_parent=this->self;
	(*(_191017_base))._field_labels=(*(this->self))._field_labels;
	(*(_191017_base))._field_gotos=(*(this->self))._field_gotos;
	(*(_191017_base))._field_child_index=static_cast<jule::Int>((*(this->self))._field_child_index + 1LL);
	return _191017_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinAppendCallExprModel &_Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinErrorCallExprModel &_Src) {
	_Stream << "BuiltinErrorCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_IntegratedToStrExprModel &_Src) {
	_Stream << "IntegratedToStrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_TernaryExprModel &_Src) {
	_Stream << "TernaryExprModel{";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BackendEmitExprModel &_Src) {
	_Stream << "BackendEmitExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_FreeExprModel &_Src) {
	_Stream << "FreeExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline void _1e586d0c3_DirectiveChecker::_method_check_cdef(jule::Ptr<_228d31971_Directive>& _1630_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_229b6ebcb_Fn>>()) {
			_case_begin_5072156048:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_229b6ebcb_Fn>()))._field_cpp_linked) {
					goto _match_end_5072156160;
				}
				goto _case_begin_5072156240;
			}
		}
		else {
			_case_begin_5072156240:;
			{
				(*((*this)._field_s))._method_push_err((*(_1630_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_1630_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5072156160:;
	}
	if ((*(_1630_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_1630_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1e586d0c3_DirectiveChecker::_method_check_typedef(jule::Ptr<_228d31971_Directive>& _3233_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5072165824:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_228e0d025_Struct>()))._field_cpp_linked) {
					goto _match_end_5072165936;
				}
				goto _case_begin_5072166016;
			}
		}
		else {
			_case_begin_5072166016:;
			{
				(*((*this)._field_s))._method_push_err((*(_3233_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_3233_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5072165936:;
	}
	if ((*(_3233_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_3233_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1e586d0c3_DirectiveChecker::_method_check_derive(jule::Ptr<_228d31971_Directive>& _4832_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5072175600:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_228e0d025_Struct>()))._field_cpp_linked))) {
					goto _match_end_5072175712;
				}
				goto _case_begin_5072175792;
			}
		}
		else {
			_case_begin_5072175792:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>());
			}
		}
		_match_end_5072175712:;
	}
	if ((*(_4832_d))._field_args.len() == 0LL) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*((*this)._field_s))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	} else if ((*(_4832_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	{
		auto &_match_expr{ (*(_4832_d))._field_args[0LL]._field_kind };
		
		if (_match_expr == jule::Str("Clone", 5)) {
			_case_begin_5072188800:;
		}
		else {
			_case_begin_5072188048:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[0LL],jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_4832_d))._field_args[0LL]._field_kind)}));
			}
		}
		_match_end_5072187952:;
	}
}



inline void _1e586d0c3_DirectiveChecker::_method_check_namespace(jule::Ptr<_228d31971_Directive>& _7439_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5072194064:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_228e0d025_Struct>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229b6ebcb_Fn>>()) {
			_case_begin_5072194864:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_229b6ebcb_Fn>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5072194960:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1e58b0654_Var>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_5072194256:;
			{
				(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5072194176:;
	}
	if ((*(_7439_d))._field_args.len() == 0LL) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((*(_7439_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_228d7aadb_Token _10213_arg = (*(_7439_d))._field_args[0LL];
	if (_10213_arg._field_id != 6LLU) {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_10213_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_7439_d))._field_args[0LL]._field_kind=_10213_arg._field_kind.slice(1LL,_10213_arg._field_kind.len() - 1LL);
}



inline void _1e586d0c3_DirectiveChecker::_method_check_deprecated(jule::Ptr<_228d31971_Directive>& _11640_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5072224992:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_228e0d025_Struct>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229b6ebcb_Fn>>()) {
			_case_begin_5072225792:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_229b6ebcb_Fn>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5072225888:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1e58b0654_Var>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_5072225184:;
			{
				(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5072225104:;
	}
	if ((*(_11640_d))._field_args.len() == 0LL) {
		return;
	}
	if ((*(_11640_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_11640_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_228d7aadb_Token _14413_arg = (*(_11640_d))._field_args[0LL];
	if (_14413_arg._field_id != 6LLU) {
		(*((*this)._field_s))._method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_14413_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_11640_d))._field_args[0LL]._field_kind=_14413_arg._field_kind.slice(1LL,_14413_arg._field_kind.len() - 1LL);
}



inline void _1e586d0c3_DirectiveChecker::_method_check_test(jule::Ptr<_228d31971_Directive>& _15831_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_229b6ebcb_Fn>>()) {
			_case_begin_5072254032:;
			{
				jule::Ptr<_229b6ebcb_Fn> _16117_f = (*this)._field_o.operator jule::Ptr<_229b6ebcb_Fn>();
				if (((!((*(_16117_f))._field_cpp_linked)) && (!((*(_16117_f))._method_is_init()))) && (!((*(_16117_f))._method_is_entry_point()))) {
					goto _match_end_5072254144;
				}
				if ((*(_16117_f))._method_is_method()) {
					(*((*this)._field_s))._method_push_err((*(_16117_f))._field_token,jule::Str("you cannot declarate test methods", 33),jule::Slice<jule::Any>());
					goto _match_end_5072254144;
				}
				goto _case_begin_5072254224;
			}
		}
		else {
			_case_begin_5072254224:;
			{
				(*((*this)._field_s))._method_push_err((*(_15831_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_15831_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5072254144:;
	}
	if ((*(_15831_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_15831_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1e586d0c3_DirectiveChecker::_method_check_directive(jule::Ptr<_228d31971_Directive>& _17939_d) {
	{
		auto &_match_expr{ (*(_17939_d))._field_tag._field_kind };
		
		if (_match_expr == jule::Str("cdef", 4)) {
			_case_begin_5072270176:;
			{
				(*this)._method_check_cdef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("typedef", 7)) {
			_case_begin_5072270272:;
			{
				(*this)._method_check_typedef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("derive", 6)) {
			_case_begin_5072270368:;
			{
				(*this)._method_check_derive(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("namespace", 9)) {
			_case_begin_5072270464:;
			{
				(*this)._method_check_namespace(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("deprecated", 10)) {
			_case_begin_5072273136:;
			{
				(*this)._method_check_deprecated(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("test", 4)) {
			_case_begin_5072273232:;
			{
				(*this)._method_check_test(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("build", 5) || _match_expr == jule::Str("pass", 4)) {
			_case_begin_5072273328:;
			{
				(*((*this)._field_s))._method_push_err((*(_17939_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_17939_d))._field_tag._field_kind)}));
			}
		}
		else {
			_case_begin_5072269200:;
			{
				(*((*this)._field_s))._method_push_err((*(_17939_d))._field_tag,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_17939_d))._field_tag._field_kind)}));
			}
		}
		_match_end_5072269824:;
	}
}



inline void _1e586d0c3_DirectiveChecker::_method_check(void) {
	{
		auto &expr = (*this)._field_d;
		auto it = expr.begin();
		_iter_begin_5072284960:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> _1e586d0c3_d = *it;
			{
				(*this)._method_check_directive(_1e586d0c3_d);
			}
			_iter_next_5072284960:;
			++it;
			goto _iter_begin_5072284960;
		}
		_iter_end_5072284960:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1e586d0c3_DirectiveChecker &_Src) {
	_Stream << "DirectiveChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "o:" << _Src._field_o;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e53308ee_Package::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e53308ee_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1e58b0654_Var> _1e53308ee_Package::_method_find_var(jule::Str _28631_ident,jule::Bool _28643_cpp_linked) {
	return _1e53308ee_find_var_in_package((*this)._field_files,_28631_ident,_28643_cpp_linked);
}



inline jule::Ptr<_229d681e3_TypeAlias> _1e53308ee_Package::_method_find_type_alias(jule::Str _29238_ident,jule::Bool _29250_cpp_linked) {
	return _1e53308ee_find_type_alias_in_package((*this)._field_files,_29238_ident,_29250_cpp_linked);
}



inline jule::Ptr<_228e0d025_Struct> _1e53308ee_Package::_method_find_struct(jule::Str _29834_ident,jule::Bool _29846_cpp_linked) {
	return _1e53308ee_find_struct_in_package((*this)._field_files,_29834_ident,_29846_cpp_linked);
}



inline jule::Ptr<_229b6ebcb_Fn> _1e53308ee_Package::_method_find_fn(jule::Str _30430_ident,jule::Bool _30442_cpp_linked) {
	return _1e53308ee_find_fn_in_package((*this)._field_files,_30430_ident,_30442_cpp_linked);
}



inline jule::Ptr<_229b5076c_Trait> _1e53308ee_Package::_method_find_trait(jule::Str _31033_ident) {
	return _1e53308ee_find_trait_in_package((*this)._field_files,_31033_ident);
}



inline jule::Ptr<_1e56be485_Enum> _1e53308ee_Package::_method_find_enum(jule::Str _31632_ident) {
	return _1e53308ee_find_enum_in_package((*this)._field_files,_31632_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e53308ee_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_Sema::_method_find_package(jule::Str _35035_ident) {
	return (*((*this)._field_file))._method_find_package(_35035_ident);
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)> _36037_selector) {
	return (*((*this)._field_file))._method_select_package(_36037_selector);
}



inline jule::Ptr<_1e58b0654_Var> _1e538b460_Sema::_method_find_var(jule::Str _37031_ident,jule::Bool _37043_cpp_linked) {
	jule::Ptr<_1e58b0654_Var> _37217_v = _1e53308ee_find_var_in_package((*this)._field_files,_37031_ident,_37043_cpp_linked);
	if (_37217_v != nullptr) {
		return _37217_v;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072363232:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp = *it;
			{
				if ((!(_1e538b460_imp_is_lookupable(_1e538b460_imp,_37031_ident)))) {
					goto _iter_next_5072363232;
				}
				_37217_v=(*(_1e538b460_imp))._method_find_var(_37031_ident,_37043_cpp_linked);
				if ((_37217_v != nullptr) && (*this)._method_is_accessible_define((*(_37217_v))._field_public,(*(_37217_v))._field_token)) {
					return _37217_v;
				}
			}
			_iter_next_5072363232:;
			++it;
			goto _iter_begin_5072363232;
		}
		_iter_end_5072363232:;
	}
	return nullptr;
}



inline jule::Ptr<_229d681e3_TypeAlias> _1e538b460_Sema::_method_find_type_alias(jule::Str _39738_ident,jule::Bool _39750_cpp_linked) {
	jule::Ptr<_229d681e3_TypeAlias> _39917_ta = _1e53308ee_find_type_alias_in_package((*this)._field_files,_39738_ident,_39750_cpp_linked);
	if (_39917_ta != nullptr) {
		return _39917_ta;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072373248:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp = *it;
			{
				if ((!(_1e538b460_imp_is_lookupable(_1e538b460_imp,_39738_ident)))) {
					goto _iter_next_5072373248;
				}
				_39917_ta=(*(_1e538b460_imp))._method_find_type_alias(_39738_ident,_39750_cpp_linked);
				if ((_39917_ta != nullptr) && (*this)._method_is_accessible_define((*(_39917_ta))._field_public,(*(_39917_ta))._field_token)) {
					return _39917_ta;
				}
			}
			_iter_next_5072373248:;
			++it;
			goto _iter_begin_5072373248;
		}
		_iter_end_5072373248:;
	}
	return nullptr;
}



inline jule::Ptr<_228e0d025_Struct> _1e538b460_Sema::_method_find_struct(jule::Str _42434_ident,jule::Bool _42446_cpp_linked) {
	jule::Ptr<_228e0d025_Struct> _42617_s = _1e53308ee_find_struct_in_package((*this)._field_files,_42434_ident,_42446_cpp_linked);
	if (_42617_s != nullptr) {
		return _42617_s;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072381952:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp = *it;
			{
				if ((!(_1e538b460_imp_is_lookupable(_1e538b460_imp,_42434_ident)))) {
					goto _iter_next_5072381952;
				}
				_42617_s=(*(_1e538b460_imp))._method_find_struct(_42434_ident,_42446_cpp_linked);
				if ((_42617_s != nullptr) && (*this)._method_is_accessible_define((*(_42617_s))._field_public,(*(_42617_s))._field_token)) {
					return _42617_s;
				}
			}
			_iter_next_5072381952:;
			++it;
			goto _iter_begin_5072381952;
		}
		_iter_end_5072381952:;
	}
	return nullptr;
}



inline jule::Ptr<_229b6ebcb_Fn> _1e538b460_Sema::_method_find_fn(jule::Str _45130_ident,jule::Bool _45142_cpp_linked) {
	jule::Ptr<_229b6ebcb_Fn> _45317_f = _1e53308ee_find_fn_in_package((*this)._field_files,_45130_ident,_45142_cpp_linked);
	if (_45317_f != nullptr) {
		return _45317_f;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072390784:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp = *it;
			{
				if ((!(_1e538b460_imp_is_lookupable(_1e538b460_imp,_45130_ident)))) {
					goto _iter_next_5072390784;
				}
				_45317_f=(*(_1e538b460_imp))._method_find_fn(_45130_ident,_45142_cpp_linked);
				if ((_45317_f != nullptr) && (*this)._method_is_accessible_define((*(_45317_f))._field_public,(*(_45317_f))._field_token)) {
					return _45317_f;
				}
			}
			_iter_next_5072390784:;
			++it;
			goto _iter_begin_5072390784;
		}
		_iter_end_5072390784:;
	}
	return nullptr;
}



inline jule::Ptr<_229b5076c_Trait> _1e538b460_Sema::_method_find_trait(jule::Str _47833_ident) {
	jule::Ptr<_229b5076c_Trait> _48017_t = _1e53308ee_find_trait_in_package((*this)._field_files,_47833_ident);
	if (_48017_t != nullptr) {
		return _48017_t;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072399408:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp = *it;
			{
				if ((!(_1e538b460_imp_is_lookupable(_1e538b460_imp,_47833_ident)))) {
					goto _iter_next_5072399408;
				}
				_48017_t=(*(_1e538b460_imp))._method_find_trait(_47833_ident);
				if ((_48017_t != nullptr) && (*this)._method_is_accessible_define((*(_48017_t))._field_public,(*(_48017_t))._field_token)) {
					return _48017_t;
				}
			}
			_iter_next_5072399408:;
			++it;
			goto _iter_begin_5072399408;
		}
		_iter_end_5072399408:;
	}
	return nullptr;
}



inline jule::Ptr<_1e56be485_Enum> _1e538b460_Sema::_method_find_enum(jule::Str _50532_ident) {
	jule::Ptr<_1e56be485_Enum> _50717_e = _1e53308ee_find_enum_in_package((*this)._field_files,_50532_ident);
	if (_50717_e != nullptr) {
		return _50717_e;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072407520:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp = *it;
			{
				if ((!(_1e538b460_imp_is_lookupable(_1e538b460_imp,_50532_ident)))) {
					goto _iter_next_5072407520;
				}
				_50717_e=(*(_1e538b460_imp))._method_find_enum(_50532_ident);
				if ((_50717_e != nullptr) && (*this)._method_is_accessible_define((*(_50717_e))._field_public,(*(_50717_e))._field_token)) {
					return _50717_e;
				}
			}
			_iter_next_5072407520:;
			++it;
			goto _iter_begin_5072407520;
		}
		_iter_end_5072407520:;
	}
	return nullptr;
}



inline jule::Bool _1e538b460_Sema::_method_is_flag(jule::Int _52922_flags) {
	return ((*this)._field_flags & _52922_flags) == _52922_flags;
}



inline void _1e538b460_Sema::_method_set_current_file(jule::Ptr<_229d56533_SymbolTable> _53139_f) {
	(*this)._field_file=_53139_f;
}



inline void _1e538b460_Sema::_method_push_err(_228d7aadb_Token _53327_token,jule::Str _53341_fmt,jule::Slice<jule::Any> _53354_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.push(_1e538b460_compiler_err(_53327_token,true,_53341_fmt,_53354_args));
}



inline void _1e538b460_Sema::_method_push_suggestion(jule::Str _53834_fmt,jule::Slice<jule::Any> _53847_args) {
	{
		_1e538b460_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_53834_fmt,_53847_args);
	}
}



inline jule::Bool _1e538b460_Sema::_method_is_accessible_define(jule::Bool _54335_public,_228d7aadb_Token _54349_token) {
	return (_54335_public || (_54349_token._field_file == nullptr)) || ((*((*((*this)._field_file))._field_file))._method_dir() == (*(_54349_token._field_file))._method_dir());
}



inline jule::Bool _1e538b460_Sema::_method_is_duplicated_ident(jule::Uintptr _55034_itself,jule::Str _55051_ident,jule::Bool _55063_cpp_linked) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_5072431008:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> &_1e538b460_f = *it;
			{
				if ((*(_1e538b460_f))._method_is_duplicated_ident(_55034_itself,_55051_ident,_55063_cpp_linked)) {
					return true;
				}
				{
					auto &expr = (*(_1e538b460_f))._field_imports;
					auto it = expr.begin();
					_iter_begin_5072435680:;
					if (it != expr.end()) {
						jule::Ptr<_1e53308ee_ImportInfo> &_1e538b460_imp = *it;
						{
							{
								auto &expr = (*(_1e538b460_imp))._field_selected;
								auto it = expr.begin();
								_iter_begin_5072437520:;
								if (it != expr.end()) {
									_228d7aadb_Token &_1e538b460_selected = *it;
									{
										if (_1e538b460_selected._field_kind == _55051_ident) {
											return true;
										}
									}
									_iter_next_5072437520:;
									++it;
									goto _iter_begin_5072437520;
								}
								_iter_end_5072437520:;
							}
						}
						_iter_next_5072435680:;
						++it;
						goto _iter_begin_5072435680;
					}
					_iter_end_5072435680:;
				}
			}
			_iter_next_5072431008:;
			++it;
			goto _iter_begin_5072431008;
		}
		_iter_end_5072431008:;
	}
	return false;
}



inline void _1e538b460_Sema::_method_check_directives(jule::Slice<jule::Ptr<_228d31971_Directive>>& _56741_d,jule::Any _56767_o) {
	_1e586d0c3_DirectiveChecker _56817_dc = _1e586d0c3_DirectiveChecker(this->self,_56741_d,_56767_o);
	_56817_dc._method_check();
}



inline jule::Bool _1e538b460_Sema::_method_check_generic_quantity(jule::Int _57641_required,jule::Int _57656_given,_228d7aadb_Token _57668_error_token) {
	jule::Bool _57690_ok = jule::Bool();
	{
		
		if ((_57641_required == 0LL) && (_57656_given > 0LL)) {
			_case_begin_5072447424:;
			{
				(*this)._method_push_err(_57668_error_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
				_57690_ok = false;
				return _57690_ok;
			}
		}
		else if ((_57641_required > 0LL) && (_57656_given == 0LL)) {
			_case_begin_5072447600:;
			{
				(*this)._method_push_err(_57668_error_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				_57690_ok = false;
				return _57690_ok;
			}
		}
		else if (_57641_required < _57656_given) {
			_case_begin_5072447696:;
			{
				(*this)._method_push_err(_57668_error_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>());
				_57690_ok = false;
				return _57690_ok;
			}
		}
		else if (_57641_required > _57656_given) {
			_case_begin_5072446944:;
			{
				(*this)._method_push_err(_57668_error_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>());
				_57690_ok = false;
				return _57690_ok;
			}
		}
		else {
			_case_begin_5072445936:;
			{
				_57690_ok = true;
				return _57690_ok;
			}
		}
		_match_end_5072445760:;
	}
}



inline jule::Bool _1e538b460_Sema::_method_is_duplicated_import_selection(jule::Uintptr _59945_itself,jule::Str _59962_ident) {
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072458048:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> &_1e538b460_imp = *it;
			{
				if (static_cast<jule::Uintptr>(_1e538b460_imp) == _59945_itself) {
					goto _iter_end_5072458048;
				}
				if ((*(_1e538b460_imp))._method_exist_ident(_59962_ident)) {
					return true;
				}
			}
			_iter_next_5072458048:;
			++it;
			goto _iter_begin_5072458048;
		}
		_iter_end_5072458048:;
	}
	return false;
}



inline jule::Any _1e538b460_Sema::_method_get_import_def(jule::Str _61429_ident,jule::Ptr<_1e53308ee_ImportInfo>& _61446_imp) {
	if (_1e614d809_find_package_builtin_def((*(_61446_imp))._field_link_path,_61429_ident) != nullptr) {
		return jule::Any(true);
	}
	{
		auto &expr = (*((*(_61446_imp))._field_package))._field_files;
		auto it = expr.begin();
		_iter_begin_5072466288:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				
				jule::Any _62121_def = (*(_1e538b460_f))._method_def_by_ident(_61429_ident,false);
				if (_62121_def != nullptr) {
					return _62121_def;
				}
			}
			_iter_next_5072466288:;
			++it;
			goto _iter_begin_5072466288;
		}
		_iter_end_5072466288:;
	}
	return jule::Any(nullptr);
}



inline void _1e538b460_Sema::_method_check_import_selections(jule::Ptr<_1e53308ee_ImportInfo>& _63047_imp) {
	{
		auto &expr = (*(_63047_imp))._field_selected;
		auto it = expr.begin();
		_iter_begin_5072472176:;
		if (it != expr.end()) {
			_228d7aadb_Token &_1e538b460_ident = *it;
			{
				if (_1e538b460_ident._field_kind == jule::Str("self", 4)) {
					goto _iter_next_5072472176;
				}
				if ((*this)._method_is_duplicated_import_selection(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_63047_imp)),_1e538b460_ident._field_kind)) {
					(*this)._method_push_err(_1e538b460_ident,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1e538b460_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
					goto _iter_next_5072472176;
				}
				jule::Any _64221_def = (*this)._method_get_import_def(_1e538b460_ident._field_kind,_63047_imp);
				{
					auto &_match_expr{ _64221_def };
					
					if (_match_expr.type_is<jule::Bool>()) {
						_case_begin_5072479440:;
						{
							goto _iter_next_5072472176;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
						_case_begin_5072480320:;
						{
							jule::Ptr<_1e58b0654_Var> _64925_v = _64221_def.operator jule::Ptr<_1e58b0654_Var>();
							if ((*this)._method_is_accessible_define((*(_64925_v))._field_public,(*(_64925_v))._field_token)) {
								goto _iter_next_5072472176;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeAlias>>()) {
						_case_begin_5072480416:;
						{
							jule::Ptr<_229d681e3_TypeAlias> _65525_ta = _64221_def.operator jule::Ptr<_229d681e3_TypeAlias>();
							if ((*this)._method_is_accessible_define((*(_65525_ta))._field_public,(*(_65525_ta))._field_token)) {
								goto _iter_next_5072472176;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
						_case_begin_5072481936:;
						{
							jule::Ptr<_228e0d025_Struct> _66125_strct = _64221_def.operator jule::Ptr<_228e0d025_Struct>();
							if ((*this)._method_is_accessible_define((*(_66125_strct))._field_public,(*(_66125_strct))._field_token)) {
								goto _iter_next_5072472176;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_229b5076c_Trait>>()) {
						_case_begin_5072482032:;
						{
							jule::Ptr<_229b5076c_Trait> _66725_t = _64221_def.operator jule::Ptr<_229b5076c_Trait>();
							if ((*this)._method_is_accessible_define((*(_66725_t))._field_public,(*(_66725_t))._field_token)) {
								goto _iter_next_5072472176;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56be485_Enum>>()) {
						_case_begin_5072482128:;
						{
							jule::Ptr<_1e56be485_Enum> _67325_e = _64221_def.operator jule::Ptr<_1e56be485_Enum>();
							if ((*this)._method_is_accessible_define((*(_67325_e))._field_public,(*(_67325_e))._field_token)) {
								goto _iter_next_5072472176;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_229b6ebcb_Fn>>()) {
						_case_begin_5072482224:;
						{
							jule::Ptr<_229b6ebcb_Fn> _67925_f = _64221_def.operator jule::Ptr<_229b6ebcb_Fn>();
							if ((*this)._method_is_accessible_define((*(_67925_f))._field_public,(*(_67925_f))._field_token)) {
								goto _iter_next_5072472176;
							}
						}
					}
					else {
						_case_begin_5072479728:;
						{
							(*this)._method_push_err(_1e538b460_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_1e538b460_ident._field_kind)}));
							goto _iter_next_5072472176;
						}
					}
					_match_end_5072479648:;
				}
				(*this)._method_push_err(_1e538b460_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_1e538b460_ident._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
			}
			_iter_next_5072472176:;
			++it;
			goto _iter_begin_5072472176;
		}
		_iter_end_5072472176:;
	}
}



inline jule::Bool _1e538b460_Sema::_method_is_use_alias_duplication(jule::Ptr<_1e53308ee_ImportInfo>& _69444_imp) {
	if ((*(_69444_imp))._field_alias.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5072505904:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp2 = *it;
			{
				if (_1e538b460_imp2 == _69444_imp) {
					goto _iter_end_5072505904;
				}
				if ((*(_1e538b460_imp2))._field_alias == (*(_69444_imp))._field_alias) {
					return true;
				}
				if (((*(_1e538b460_imp2))._field_ident == (*(_1e538b460_imp2))._field_link_path) && ((*(_1e538b460_imp2))._field_ident == (*(_69444_imp))._field_alias)) {
					return true;
				}
			}
			_iter_next_5072505904:;
			++it;
			goto _iter_begin_5072505904;
		}
		_iter_end_5072505904:;
	}
	return false;
}



inline jule::Bool _1e538b460_Sema::_method_check_import(jule::Ptr<_1e53308ee_ImportInfo>& _71536_imp) {
	if ((*(_71536_imp))._field_cpp_linked || ((*((*(_71536_imp))._field_package))._field_files.len() == 0LL)) {
		return true;
	}
	if ((*this)._method_is_use_alias_duplication(_71536_imp)) {
		(*this)._method_push_err((*(_71536_imp))._field_token,jule::Str("identifier duplication: @ is already used for another use declaration above", 75),jule::Slice<jule::Any>({jule::Any((*(_71536_imp))._field_alias)}));
		(*this)._method_push_suggestion(jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>());
	}
	if ((*(_71536_imp))._field_duplicate) {
		return true;
	}
	jule::Ptr<_1e538b460_Sema> _72917_sema = jule::new_struct_ptr<_1e538b460_Sema>(new( std::nothrow ) _1e538b460_Sema(jule::Slice<_2276bcb9e_Log>(),jule::Slice<jule::Ptr<_229d56533_SymbolTable>>(),jule::Ptr<_229d56533_SymbolTable>(),(*this)._field_flags));
	(*(_72917_sema))._method_check((*((*(_71536_imp))._field_package))._field_files);
	if ((*(_72917_sema))._field_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,(*(_72917_sema))._field_errors);
		(*(_72917_sema))._field_errors=nullptr;
		return false;
	}
	(*this)._method_check_import_selections(_71536_imp);
	return true;
}



inline void _1e538b460_Sema::_method_check_imports(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_5072527488:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_file = *it;
			{
				(*this)._method_set_current_file(_1e538b460_file);
				{
					auto &expr = (*(_1e538b460_file))._field_imports;
					auto it = expr.begin();
					_iter_begin_5072530336:;
					if (it != expr.end()) {
						jule::Ptr<_1e53308ee_ImportInfo> _1e538b460_imp = *it;
						{
							jule::Bool _74821_ok = (*this)._method_check_import(_1e538b460_imp);
							if ((!(_74821_ok))) {
								(*this)._method_push_err((*(_1e538b460_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_1e538b460_imp))._field_link_path)}));
								return;
							}
						}
						_iter_next_5072530336:;
						++it;
						goto _iter_begin_5072530336;
					}
					_iter_end_5072530336:;
				}
			}
			_iter_next_5072527488:;
			++it;
			goto _iter_begin_5072527488;
		}
		_iter_end_5072527488:;
	}
}



inline void _1e538b460_Sema::_method_impl_file_impls(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_impls;
		auto it = expr.begin();
		_iter_begin_5072536016:;
		if (it != expr.end()) {
			jule::Ptr<_1e56ca370_Impl> _1e538b460_imp = *it;
			{
				(*(this->self))._method_impl_impl(_1e538b460_imp);
			}
			_iter_next_5072536016:;
			++it;
			goto _iter_begin_5072536016;
		}
		_iter_end_5072536016:;
	}
}



inline void _1e538b460_Sema::_method_impl_impls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5072540320:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_file = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_file);
				(*(this->self))._method_impl_file_impls();
			}
			_iter_next_5072540320:;
			++it;
			goto _iter_begin_5072540320;
		}
		_iter_end_5072540320:;
	}
}



inline void _1e538b460_Sema::_method_check_enums(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5072544640:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_file = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_file);
				(*(this->self))._method_check_enum_decls();
			}
			_iter_next_5072544640:;
			++it;
			goto _iter_begin_5072544640;
		}
		_iter_end_5072544640:;
	}
}



inline jule::Bool _1e538b460_Sema::_method_check_type_with_refers(jule::Ptr<_229d681e3_TypeSymbol>& _78147_t,jule::Trait<_229d94c47_Lookup> _78213_l,jule::Ptr<_229d681e3_Referencer> _78228_referencer) {
	jule::Bool _78255_ok = jule::Bool();
	if ((*(_78147_t))._method_checked()) {
		_78255_ok = true;
		return _78255_ok;
	}
	_229d681e3_TypeChecker _78617_tc = _229d681e3_TypeChecker(this->self,_78213_l,_78228_referencer,_228d7aadb_Token(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	_78617_tc._method_check(_78147_t);
	_78255_ok = (*(_78147_t))._method_checked();
	return _78255_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_type(jule::Ptr<_229d681e3_TypeSymbol>& _79735_t,jule::Trait<_229d94c47_Lookup> _79755_l) {
	return (*(this->self))._method_check_type_with_refers(_79735_t,_79755_l,nullptr);
}



inline jule::Ptr<_229d681e3_TypeKind> _1e538b460_Sema::_method_build_type_with_generics(jule::Ptr<_228d31971_TypeDecl>& _80349_t,jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _80413_generics) {
	jule::Ptr<_229d681e3_TypeChecker> _80517_tc = jule::new_struct<_229d681e3_TypeChecker>(new( std::nothrow ) _229d681e3_TypeChecker(this->self,this->self,jule::Ptr<_229d681e3_Referencer>(),_228d7aadb_Token(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),_80413_generics,jule::Bool(),jule::Bool(),jule::Bool()));
	return (*(_80517_tc))._method_check_decl(_80349_t);
}



inline jule::Ptr<_229d681e3_TypeKind> _1e538b460_Sema::_method_build_type(jule::Ptr<_228d31971_TypeDecl>& _81435_t) {
	return (*(this->self))._method_build_type_with_generics(_81435_t,nullptr);
}



inline jule::Ptr<_229d681e3_TypeKind> _1e538b460_Sema::_method_select_type(jule::Ptr<_228d31971_TypeDecl>& _81936_t) {
	jule::Ptr<_229d681e3_TypeChecker> _82017_tc = jule::new_struct<_229d681e3_TypeChecker>(new( std::nothrow ) _229d681e3_TypeChecker(this->self,this->self,jule::Ptr<_229d681e3_Referencer>(),_228d7aadb_Token(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>(),jule::Bool(),jule::Bool(),true));
	return (*(_82017_tc))._method_check_decl(_81936_t);
}



inline jule::Ptr<_229d70d33_Eval> _1e538b460_Sema::_method_evalpd(jule::Trait<_229d94c47_Lookup> _83030_l,jule::Ptr<_229d681e3_TypeKind> _83045_p,jule::Ptr<_1e58b0654_Var> _83063_owner) {
	jule::Ptr<_229d70d33_Eval> _83117_e = jule::new_struct_ptr<_229d70d33_Eval>(new( std::nothrow ) _229d70d33_Eval(this->self,_83030_l,jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_83063_owner,jule::Ptr<_228e0d025_FieldIns>()));
	{
		auto &_match_expr{ _83030_l };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5072595488:;
			{
				(*(_83117_e))._field_unsafety=(*(_83030_l.operator jule::Ptr<_1e56c3885_ScopeChecker>()))._method_is_unsafe();
			}
		}
		_match_end_5072595408:;
	}
	(*(_83117_e))._field_prefix=_83045_p;
	return _83117_e;
}



inline jule::Ptr<_229d70d33_Eval> _1e538b460_Sema::_method_evalp(jule::Trait<_229d94c47_Lookup> _84829_l,jule::Ptr<_229d681e3_TypeKind> _84844_p) {
	return (*(this->self))._method_evalpd(_84829_l,_84844_p,nullptr);
}



inline jule::Ptr<_229d70d33_Eval> _1e538b460_Sema::_method_eval(jule::Trait<_229d94c47_Lookup> _85328_l) {
	return (*(this->self))._method_evalp(_85328_l,nullptr);
}



inline void _1e538b460_Sema::_method_check_assign_type(jule::Bool _85737_dest_is_ref,jule::Ptr<_229d681e3_TypeKind>& _85761_dest,jule::Ptr<_229d70d33_Data>& _85814_d,_228d7aadb_Token _85828_error_token) {
	if ((*((*(_85814_d))._field_kind))._field_variadic) {
		(*(this->self))._method_push_err(_85828_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	if (_85737_dest_is_ref) {
		if ((!((*(_85761_dest))._method_equals((*(_85814_d))._field_kind)))) {
			(*(this->self))._method_push_err(_85828_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_85761_dest))._method_to_str()),jule::Any((*((*(_85814_d))._field_kind))._method_to_str())}));
		}
	} else {
		jule::Ptr<_1e58b019d_AssignTypeChecker> _86821_atc = jule::new_struct<_1e58b019d_AssignTypeChecker>(new( std::nothrow ) _1e58b019d_AssignTypeChecker(this->self,_85761_dest,_85814_d,_85828_error_token));
		jule::Bool _87417_ok = (*(_86821_atc))._method_check();
		if ((!(_87417_ok))) {
			return;
		}
	}
	if ((!((*(_85814_d))._method_is_const())) || ((*(_85761_dest))._method_prim() == nullptr)) {
		return;
	}
	jule::Str _88417_kind = (*((*(_85761_dest))._method_prim()))._field_kind;
	{
		
		if (_1e860322e_is_sig_int(_88417_kind)) {
			_case_begin_5072620608:;
			{
				(*((*(_85814_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_85814_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1e860322e_is_unsig_int(_88417_kind)) {
			_case_begin_5072620704:;
			{
				(*((*(_85814_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_85814_d))._field_constant))._method_as_u64()));
			}
		}
		else if (_1e860322e_is_float(_88417_kind)) {
			_case_begin_5072620816:;
			{
				(*((*(_85814_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_85814_d))._field_constant))._method_as_f64()));
			}
		}
		_match_end_5072620416:;
	}
}



inline jule::Bool _1e538b460_Sema::_method_check_type_compatibility(jule::Ptr<_229d681e3_TypeKind>& _89349_dest,jule::Ptr<_229d681e3_TypeKind>& _89414_src,_228d7aadb_Token& _89435_error_token) {
	if (_89414_src == nullptr) {
		(*(this->self))._method_push_err(_89435_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_89349_dest))._method_to_str()),jule::Any((*(_89414_src))._method_to_str())}));
		return false;
	}
	if ((*(_89414_src))._method_tup() != nullptr) {
		(*(this->self))._method_push_err(_89435_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_89349_dest))._method_to_str()),jule::Any((*(_89414_src))._method_to_str())}));
		return false;
	}
	_1e58b019d_TypeCompatibilityChecker _90817_tcc = _1e58b019d_TypeCompatibilityChecker(this->self,_89349_dest,_89414_src,_89435_error_token);
	if (_90817_tcc._method_check()) {
		return true;
	}
	(*(this->self))._method_push_err(_89435_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_89349_dest))._method_to_str()),jule::Any((*(_89414_src))._method_to_str())}));
	return false;
}



inline jule::Ptr<_229d681e3_TypeKind> _1e538b460_Sema::_method_build_non_generic_type_kind(jule::Ptr<_228d31971_TypeDecl>& _92952_ast,jule::Slice<jule::Ptr<_228d31971_GenericDecl>>& _93014_generics) {
	jule::Ptr<_229d681e3_TypeChecker> _93117_tc = jule::new_struct<_229d681e3_TypeChecker>(new( std::nothrow ) _229d681e3_TypeChecker(this->self,this->self,jule::Ptr<_229d681e3_Referencer>(),_228d7aadb_Token(),_93014_generics,jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool()));
	return (*(_93117_tc))._method_check_decl(_92952_ast);
}



inline void _1e538b460_Sema::_method_build_fn_non_generic_type_kinds(jule::Ptr<_229b6ebcb_FnIns>& _93956_f) {
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _94017_generics = nullptr;
	if ((*((*(_93956_f))._field_decl))._method_is_method()) {
		_94017_generics=jule::append((*((*(_93956_f))._field_decl))._field_generics,(*((*((*(_93956_f))._field_decl))._field_owner))._field_generics);
	} else {
		_94017_generics=(*((*(_93956_f))._field_decl))._field_generics;
	}
	{
		auto &expr = (*(_93956_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5072653184:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_ParamIns> _1e538b460_p = *it;
			{
				if ((!((*((*(_1e538b460_p))._field_decl))._method_is_self()))) {
					(*(_1e538b460_p))._field_kind=(*(this->self))._method_build_non_generic_type_kind((*((*((*(_1e538b460_p))._field_decl))._field_kind))._field_decl,_94017_generics);
				}
			}
			_iter_next_5072653184:;
			++it;
			goto _iter_begin_5072653184;
		}
		_iter_end_5072653184:;
	}
	if ((!((*((*(_93956_f))._field_decl))._method_is_void()))) {
		(*(_93956_f))._field_result=(*(this->self))._method_build_non_generic_type_kind((*((*((*((*(_93956_f))._field_decl))._field_result))._field_kind))._field_decl,_94017_generics);
	}
}



inline jule::Ptr<_229b6ebcb_FnIns> _1e538b460_Sema::_method_get_trait_check_fn_kind(jule::Ptr<_229b6ebcb_Fn>& _95748_f) {
	jule::Ptr<_229b6ebcb_FnIns> _95817_ins = (*(_95748_f))._method_instance_force();
	(*(this->self))._method_build_fn_non_generic_type_kinds(_95817_ins);
	return _95817_ins;
}



inline jule::Bool _1e538b460_Sema::_method_reload_fn_ins_types(jule::Ptr<_229b6ebcb_FnIns>& _96344_f) {
	jule::Bool _96357_ok = jule::Bool();
	if ((*(_96344_f))._method_is_builtin() || (*(_96344_f))._method_is_anon()) {
		_96357_ok = true;
		return _96357_ok;
	}
	jule::Ptr<_1e538b460_Sema> _96817_sema = (*((*(_96344_f))._field_decl))._field_sema;
	jule::Ptr<_229d56533_SymbolTable> _97017_old = (*((*((*(_96344_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_96344_f))._field_decl))._field_sema))._method_set_current_file(_97017_old);
	});
	jule::Ptr<_229d56533_SymbolTable> _97217_file = _1e538b460_find_file((*((*((*(_96344_f))._field_decl))._field_sema))._field_files,(*((*(_96344_f))._field_decl))._field_token._field_file);
	if (_97217_file != nullptr) {
		(*((*((*(_96344_f))._field_decl))._field_sema))._method_set_current_file(_97217_file);
	}
	jule::I64 _97717_size = (*(_96344_f))._field_generics.len();
	if (((*(_96344_f))._field_decl != nullptr) && ((*((*(_96344_f))._field_decl))._field_owner != nullptr)) {
		_97717_size+=static_cast<jule::I64>((*((*((*(_96344_f))._field_decl))._field_owner))._field_generics.len());
	}
	jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _98217_generics = jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>::alloc(0LL,_97717_size);
	{
		auto &expr = (*(_96344_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_5072689200:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			jule::Ptr<_229d681e3_TypeKind> _1e538b460_g = *it;
			{
				_98217_generics.push(jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias(jule::Ptr<_228d31971_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_228d7aadb_Token(),(*((*((*(_96344_f))._field_decl))._field_generics[_1e538b460_i]))._field_ident,jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),_1e538b460_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_5072689200:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5072689200;
		}
		_iter_end_5072689200:;
	}
	if (((*(_96344_f))._field_decl != nullptr) && ((*((*(_96344_f))._field_decl))._field_owner != nullptr)) {
		jule::Ptr<_228e0d025_StructIns> _99421_owner = (*(_96344_f))._field_owner;
		{
			auto &expr = (*(_99421_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_5072693600:;
			if (it != expr.end()) {
				jule::Int _1e538b460_i = it - expr.begin();
				jule::Ptr<_229d681e3_TypeKind> _1e538b460_g = *it;
				{
					_98217_generics.push(jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias(jule::Ptr<_228d31971_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_228d7aadb_Token(),(*((*((*(_99421_owner))._field_decl))._field_generics[_1e538b460_i]))._field_ident,jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),_1e538b460_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_5072693600:;
				++it;
				_1e538b460_i++;
				goto _iter_begin_5072693600;
			}
			_iter_end_5072693600:;
		}
	}
	_96357_ok=true;
	{
		auto &expr = (*(_96344_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5072698976:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_ParamIns> _1e538b460_p = *it;
			{
				if ((!((*((*(_1e538b460_p))._field_decl))._method_is_self()))) {
					(*(_1e538b460_p))._field_kind=(*(_96817_sema))._method_build_type_with_generics((*((*((*(_1e538b460_p))._field_decl))._field_kind))._field_decl,_98217_generics);
					if ((*(_1e538b460_p))._field_kind != nullptr) {
						(*((*(_1e538b460_p))._field_kind))._field_variadic=(*((*(_1e538b460_p))._field_decl))._field_variadic;
						if ((*((*(_1e538b460_p))._field_decl))._field_reference && (!(_229d681e3_is_valid_for_ref((*(_1e538b460_p))._field_kind)))) {
							(*(this->self))._method_push_err((*((*(_1e538b460_p))._field_decl))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*(_1e538b460_p))._field_kind))._method_to_str())}));
						}
					} else {
						_96357_ok=false;
					}
				}
			}
			_iter_next_5072698976:;
			++it;
			goto _iter_begin_5072698976;
		}
		_iter_end_5072698976:;
	}
	if ((!((*((*(_96344_f))._field_decl))._method_is_void()))) {
		(*(_96344_f))._field_result=(*(_96817_sema))._method_build_type_with_generics((*((*((*((*(_96344_f))._field_decl))._field_result))._field_kind))._field_decl,_98217_generics);
		_96357_ok=((*(_96344_f))._field_result != nullptr) && _96357_ok;
	}
	if (_96817_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*(_96817_sema))._field_errors);
		(*(_96817_sema))._field_errors=nullptr;
	}
	return _96357_ok;
}



inline void _1e538b460_Sema::_method_check_ref_validity_for_init_expr(jule::Bool _103352_left_mut,jule::Ptr<_229d70d33_Data>& _103373_d,_228d7aadb_Token& _103388_error_token) {
	{
		auto &_match_expr{ (*(_103373_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5072724544:;
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_TraitSubIdentExprModel>>()) {
			_case_begin_5072724640:;
			{
				jule::Ptr<_1e5870218_TraitSubIdentExprModel> _103921_model = (*(_103373_d))._field_model.operator jule::Ptr<_1e5870218_TraitSubIdentExprModel>();
				if ((!(_1e538b460_is_valid_model_for_ref((*(_103921_model))._field_expr)))) {
					(*(this->self))._method_push_err(_103388_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*(_103921_model))._field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_StructSubIdentExprModel>>()) {
			_case_begin_5072724736:;
			{
				jule::Ptr<_1e5870218_StructSubIdentExprModel> _104521_model = (*(_103373_d))._field_model.operator jule::Ptr<_1e5870218_StructSubIdentExprModel>();
				if ((!(_1e538b460_is_valid_model_for_ref((*(_104521_model))._field_expr)))) {
					(*(this->self))._method_push_err(_103388_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*((*((*(_104521_model))._field_field))._field_decl))._field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_CommonSubIdentExprModel>>()) {
			_case_begin_5072724832:;
			{
				(*(this->self))._method_push_err(_103388_error_token,jule::Str("built-in defines cannot pass to references", 42),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_UnaryExprModel>>()) {
			_case_begin_5072726352:;
			{
				jule::Ptr<_1e5870218_UnaryExprModel> _105521_unary = (*(_103373_d))._field_model.operator jule::Ptr<_1e5870218_UnaryExprModel>();
				if ((*(_105521_unary))._field_op._field_kind == jule::Str("*", 1)) {
					if ((!(_1e538b460_is_valid_model_for_ref((*(_103373_d))._field_model)))) {
						(*(this->self))._method_push_err(_103388_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(jule::Str("address from * &T", 17))}));
					}
					goto _match_end_5072724096;
				}
				goto _case_begin_5072724240;
			}
		}
		else {
			_case_begin_5072724240:;
			{
				(*(this->self))._method_push_err(_103388_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>());
			}
		}
		_match_end_5072724096:;
	}
	if (_103352_left_mut && (!((*(_103373_d))._field_mutable))) {
		(*(this->self))._method_push_err(_103388_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>());
	}
}



inline void _1e538b460_Sema::_method_check_validity_for_init_expr(jule::Bool _107348_left_mut,jule::Bool _107364_left_ref,jule::Ptr<_229d681e3_TypeKind>& _107410_left_kind,jule::Ptr<_229d70d33_Data>& _107437_d,_228d7aadb_Token& _107452_error_token) {
	if ((_107348_left_mut && (!((*(_107437_d))._field_mutable))) && (*((*(_107437_d))._field_kind))._method_mutable()) {
		(*(this->self))._method_push_err(_107452_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
	}
	if (_107364_left_ref) {
		(*(this->self))._method_check_ref_validity_for_init_expr(_107348_left_mut,_107437_d,_107452_error_token);
	}
	jule::Ptr<_1e58b019d_AssignTypeChecker> _108217_atc = jule::new_struct<_1e58b019d_AssignTypeChecker>(new( std::nothrow ) _1e58b019d_AssignTypeChecker(this->self,jule::Ptr<_229d681e3_TypeKind>(),_107437_d,_107452_error_token));
	(*(_108217_atc))._method_check_validity();
}



inline jule::Bool _1e538b460_Sema::_method_check_type_alias_decl_kind(jule::Ptr<_229d681e3_TypeAlias>& _109051_ta,jule::Trait<_229d94c47_Lookup> _109071_l) {
	jule::Bool _109084_ok = jule::Bool();
	jule::Ptr<_229d56533_SymbolTable> _109117_old = (*(this->self))._field_file;
	__JULE_DEFER({
		(*(this->self))._method_set_current_file(_109117_old);
	});
	jule::Ptr<_229d56533_SymbolTable> _109317_file = _1e538b460_find_file((*(this->self))._field_files,(*(_109051_ta))._field_token._field_file);
	if (_109317_file != nullptr) {
		(*(this->self))._method_set_current_file(_109317_file);
	}
	_109084_ok=(*(this->self))._method_check_type_with_refers((*(_109051_ta))._field_kind,_109071_l,jule::new_struct<_229d681e3_Referencer>(new( std::nothrow ) _229d681e3_Referencer((*(_109051_ta))._field_ident,jule::Any(_109051_ta),(&((*(_109051_ta))._field_refers)))));
	if ((_109084_ok && ((*((*((*(_109051_ta))._field_kind))._field_kind))._method_arr() != nullptr)) && (*((*((*((*(_109051_ta))._field_kind))._field_kind))._method_arr()))._field_auto) {
		(*(this->self))._method_push_err((*((*((*(_109051_ta))._field_kind))._field_decl))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
		_109084_ok=false;
	}
	return _109084_ok;
}



inline void _1e538b460_Sema::_method_check_type_alias_decl(jule::Ptr<_229d681e3_TypeAlias>& _111046_ta,jule::Trait<_229d94c47_Lookup> _111066_l) {
	if (_228d7aadb_is_ignore_ident((*(_111046_ta))._field_ident)) {
		(*(this->self))._method_push_err((*(_111046_ta))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_111046_ta,_111066_l);
}



inline void _1e538b460_Sema::_method_check_type_alias_decl_dup(jule::Ptr<_229d681e3_TypeAlias>& _111850_ta) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_111850_ta)),(*(_111850_ta))._field_ident,(*(_111850_ta))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_111850_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_111850_ta))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_111850_ta,this->self);
}



inline jule::Bool _1e538b460_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _112744_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5072791344:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeAlias> _1e538b460_ta = *it;
			{
				(*(this->self))._method_check_type_alias_decl_dup(_1e538b460_ta);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_112744_ok = false;
					return _112744_ok;
				}
			}
			_iter_next_5072791344:;
			++it;
			goto _iter_begin_5072791344;
		}
		_iter_end_5072791344:;
	}
	_112744_ok = true;
	return _112744_ok;
}



inline void _1e538b460_Sema::_method_check_enum_items_dup(jule::Ptr<_1e56be485_Enum> _113939_e) {
	{
		auto &expr = (*(_113939_e))._field_items;
		auto it = expr.begin();
		_iter_begin_5072796896:;
		if (it != expr.end()) {
			jule::Ptr<_1e56be485_EnumItem> &_1e538b460_item = *it;
			{
				if (_228d7aadb_is_ignore_ident((*(_1e538b460_item))._field_ident)) {
					(*this)._method_push_err((*(_1e538b460_item))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = (*(_113939_e))._field_items;
						auto it = expr.begin();
						_iter_begin_5072801808:;
						if (it != expr.end()) {
							jule::Ptr<_1e56be485_EnumItem> &_1e538b460_citem = *it;
							{
								if (_1e538b460_item == _1e538b460_citem) {
									goto _iter_end_5072801808;
								} else if ((*(_1e538b460_item))._field_ident == (*(_1e538b460_citem))._field_ident) {
									(*this)._method_push_err((*(_1e538b460_item))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1e538b460_item))._field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_5072801808;
								}
							}
							_iter_next_5072801808:;
							++it;
							goto _iter_begin_5072801808;
						}
						_iter_end_5072801808:;
					}
				}
			}
			_iter_next_5072796896:;
			++it;
			goto _iter_begin_5072796896;
		}
		_iter_end_5072796896:;
	}
}



inline void _1e538b460_Sema::_method_check_enum_items_str(jule::Ptr<_1e56be485_Enum>& _115745_e) {
	{
		auto &expr = (*(_115745_e))._field_items;
		auto it = expr.begin();
		_iter_begin_5072808160:;
		if (it != expr.end()) {
			jule::Ptr<_1e56be485_EnumItem> _1e538b460_item = *it;
			{
				if ((*(_1e538b460_item))._method_auto_expr()) {
					(*(_1e538b460_item))._field_value=jule::new_struct<_229d70d33_Value>(new( std::nothrow ) _229d70d33_Value(jule::Ptr<_228d31971_Expr>(),jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1e856e8a4_Const::_static_method_new_str((*(_1e538b460_item))._field_ident)))));
					(*((*((*(_1e538b460_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_1e538b460_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_229d70d33_Data> _116725_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_1e538b460_item))._field_value))._field_expr);
					if (_116725_d == nullptr) {
						goto _iter_next_5072808160;
					}
					if ((!((*(_116725_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_1e538b460_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_115745_e))._field_kind))._field_kind,_116725_d,(*(_1e538b460_item))._field_token);
					(*((*(_1e538b460_item))._field_value))._field_data=_116725_d;
				}
			}
			_iter_next_5072808160:;
			++it;
			goto _iter_begin_5072808160;
		}
		_iter_end_5072808160:;
	}
}



inline void _1e538b460_Sema::_method_check_enum_items_int(jule::Ptr<_1e56be485_Enum>& _118245_e) {
	jule::U64 _118317_max = static_cast<jule::U64>(_1e8572e29_max((*((*((*((*(_118245_e))._field_kind))._field_kind))._method_prim()))._method_to_str()));
	{
		auto &expr = (*(_118245_e))._field_items;
		auto it = expr.begin();
		_iter_begin_5072828752:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			jule::Ptr<_1e56be485_EnumItem> _1e538b460_item = *it;
			{
				if (_118317_max == 0LL) {
					(*(this->self))._method_push_err((*(_1e538b460_item))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(_118317_max)--;
				}
				if ((*(_1e538b460_item))._method_auto_expr()) {
					(*(_1e538b460_item))._field_value=jule::new_struct<_229d70d33_Value>(new( std::nothrow ) _229d70d33_Value(jule::Ptr<_228d31971_Expr>(),jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1e856e8a4_Const::_static_method_new_u64(static_cast<jule::U64>(_118317_max - (_118317_max - static_cast<jule::U64>(_1e538b460_i))))))));
					(*((*((*(_1e538b460_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_1e538b460_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_229d70d33_Data> _119925_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_1e538b460_item))._field_value))._field_expr);
					if (_119925_d == nullptr) {
						goto _iter_next_5072828752;
					}
					if ((!((*(_119925_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_1e538b460_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_118245_e))._field_kind))._field_kind,_119925_d,(*(_1e538b460_item))._field_token);
					(*((*(_1e538b460_item))._field_value))._field_data=_119925_d;
				}
			}
			_iter_next_5072828752:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5072828752;
		}
		_iter_end_5072828752:;
	}
}



inline void _1e538b460_Sema::_method_check_enum_decl(jule::Ptr<_1e56be485_Enum>& _121440_e) {
	if (_228d7aadb_is_ignore_ident((*(_121440_e))._field_ident)) {
		(*(this->self))._method_push_err((*(_121440_e))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_121440_e)),(*(_121440_e))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_121440_e))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_121440_e))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((*(_121440_e))._field_items.len() == 0LL) {
		(*(this->self))._method_push_err((*(_121440_e))._field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>({jule::Any((*(_121440_e))._field_ident)}));
	}
	(*(this->self))._method_check_enum_items_dup(_121440_e);
	if ((*(_121440_e))._field_kind != nullptr) {
		if ((!((*(this->self))._method_check_type((*(_121440_e))._field_kind,this->self)))) {
			return;
		}
	} else {
		(*(_121440_e))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ptr<_229d681e3_Prim> _124117_t = (*((*((*(_121440_e))._field_kind))._field_kind))._method_prim();
	if (_124117_t == nullptr) {
		(*(this->self))._method_push_err((*(_121440_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((*(_124117_t))._method_is_str()) {
			_case_begin_5072867328:;
			{
				(*(this->self))._method_check_enum_items_str(_121440_e);
			}
		}
		else if (_1e860322e_is_int((*(_124117_t))._method_to_str())) {
			_case_begin_5072869920:;
			{
				(*(this->self))._method_check_enum_items_int(_121440_e);
			}
		}
		else {
			_case_begin_5072861072:;
			{
				(*(this->self))._method_push_err((*(_121440_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
			}
		}
		_match_end_5072867040:;
	}
}



inline jule::Bool _1e538b460_Sema::_method_check_enum_decls(void) {
	jule::Bool _126138_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_enums;
		auto it = expr.begin();
		_iter_begin_5072877392:;
		if (it != expr.end()) {
			jule::Ptr<_1e56be485_Enum> _1e538b460_e = *it;
			{
				(*(this->self))._method_check_enum_decl(_1e538b460_e);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_126138_ok = false;
					return _126138_ok;
				}
			}
			_iter_next_5072877392:;
			++it;
			goto _iter_begin_5072877392;
		}
		_iter_end_5072877392:;
	}
	_126138_ok = true;
	return _126138_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_decl_generics(jule::Slice<jule::Ptr<_228d31971_GenericDecl>>& _127339_generics) {
	jule::Bool _127372_ok = jule::Bool();
	_127372_ok=true;
	{
		auto &expr = _127339_generics;
		auto it = expr.begin();
		_iter_begin_5072884192:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			jule::Ptr<_228d31971_GenericDecl> &_1e538b460_g = *it;
			{
				if (_228d7aadb_is_ignore_ident((*(_1e538b460_g))._field_ident)) {
					(*this)._method_push_err((*(_1e538b460_g))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
					_127372_ok=false;
					goto _iter_next_5072884192;
				}
				_julec_label_duplication_lookup:;
				{
					auto &expr = _127339_generics;
					auto it = expr.begin();
					_iter_begin_5072888768:;
					if (it != expr.end()) {
						jule::Int _1e538b460_j = it - expr.begin();
						jule::Ptr<_228d31971_GenericDecl> &_1e538b460_ct = *it;
						{
							{
								
								if (_1e538b460_j >= _1e538b460_i) {
									_case_begin_5072891184:;
									{
										goto _iter_end_5072888768;
									}
								}
								else if ((*(_1e538b460_g))._field_ident == (*(_1e538b460_ct))._field_ident) {
									_case_begin_5072891296:;
									{
										(*this)._method_push_err((*(_1e538b460_g))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1e538b460_g))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										_127372_ok=false;
										goto _iter_end_5072888768;
									}
								}
								_match_end_5072890960:;
							}
						}
						_iter_next_5072888768:;
						++it;
						_1e538b460_j++;
						goto _iter_begin_5072888768;
					}
					_iter_end_5072888768:;
				}
			}
			_iter_next_5072884192:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5072884192;
		}
		_iter_end_5072884192:;
	}
	return _127372_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_fn_decl_params_dup(jule::Ptr<_229b6ebcb_Fn>& _130144_f) {
	jule::Bool _130154_ok = jule::Bool();
	_130154_ok=true;
	_julec_label_check:;
	{
		auto &expr = (*(_130144_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5072900896:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			jule::Ptr<_229b6ebcb_Param> &_1e538b460_p = *it;
			{
				{
					auto &expr = (*(_130144_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_5072903248:;
					if (it != expr.end()) {
						jule::Ptr<_228d31971_GenericDecl> &_1e538b460_g = *it;
						{
							if ((*(_1e538b460_p))._field_ident == (*(_1e538b460_g))._field_ident) {
								_130154_ok=false;
								(*this)._method_push_err((*(_1e538b460_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1e538b460_p))._field_ident)}));
								(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								goto _iter_next_5072900896;
							}
						}
						_iter_next_5072903248:;
						++it;
						goto _iter_begin_5072903248;
					}
					_iter_end_5072903248:;
				}
				_julec_label_params_lookup:;
				{
					auto &expr = (*(_130144_f))._field_params;
					auto it = expr.begin();
					_iter_begin_5072903824:;
					if (it != expr.end()) {
						jule::Int _1e538b460_j = it - expr.begin();
						jule::Ptr<_229b6ebcb_Param> &_1e538b460_jp = *it;
						{
							{
								
								if (_1e538b460_j >= _1e538b460_i) {
									_case_begin_5072911248:;
									{
										goto _iter_end_5072903824;
									}
								}
								else if (_228d7aadb_is_anon_ident((*(_1e538b460_p))._field_ident) || _228d7aadb_is_anon_ident((*(_1e538b460_jp))._field_ident)) {
									_case_begin_5072911360:;
									{
										goto _iter_end_5072903824;
									}
								}
								else if ((*(_1e538b460_p))._field_ident == (*(_1e538b460_jp))._field_ident) {
									_case_begin_5072911472:;
									{
										_130154_ok=false;
										(*this)._method_push_err((*(_1e538b460_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1e538b460_p))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_next_5072900896;
									}
								}
								_match_end_5072911008:;
							}
						}
						_iter_next_5072903824:;
						++it;
						_1e538b460_j++;
						goto _iter_begin_5072903824;
					}
					_iter_end_5072903824:;
				}
			}
			_iter_next_5072900896:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5072900896;
		}
		_iter_end_5072900896:;
	}
	return _130154_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_fn_decl_result_dup(jule::Ptr<_229b6ebcb_Fn>& _133744_f) {
	jule::Bool _133754_ok = jule::Bool();
	_133754_ok=true;
	if ((*(_133744_f))._method_is_void()) {
		return _133754_ok;
	}
	{
		auto &expr = (*((*(_133744_f))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_5072923664:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			_228d7aadb_Token &_1e538b460_v = *it;
			{
				if (_228d7aadb_is_ignore_ident(_1e538b460_v._field_kind)) {
					goto _iter_next_5072923664;
				}
				{
					auto &expr = (*(_133744_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_5072926960:;
					if (it != expr.end()) {
						jule::Ptr<_228d31971_GenericDecl> &_1e538b460_g = *it;
						{
							if (_1e538b460_v._field_kind == (*(_1e538b460_g))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_5072926960:;
						++it;
						goto _iter_begin_5072926960;
					}
					_iter_end_5072926960:;
				}
				{
					auto &expr = (*(_133744_f))._field_params;
					auto it = expr.begin();
					_iter_begin_5072930144:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_Param> &_1e538b460_p = *it;
						{
							if (_1e538b460_v._field_kind == (*(_1e538b460_p))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_5072930144:;
						++it;
						goto _iter_begin_5072930144;
					}
					_iter_end_5072930144:;
				}
				_julec_label_itself_lookup:;
				{
					auto &expr = (*((*(_133744_f))._field_result))._field_idents;
					auto it = expr.begin();
					_iter_begin_5072934624:;
					if (it != expr.end()) {
						jule::Int _1e538b460_j = it - expr.begin();
						_228d7aadb_Token &_1e538b460_jv = *it;
						{
							{
								
								if (_1e538b460_j >= _1e538b460_i) {
									_case_begin_5072936896:;
									{
										goto _iter_end_5072934624;
									}
								}
								else if (_1e538b460_jv._field_kind == _1e538b460_v._field_kind) {
									_case_begin_5072937008:;
									{
										goto _julec_label_exist;
									}
								}
								_match_end_5072936672:;
							}
						}
						_iter_next_5072934624:;
						++it;
						_1e538b460_j++;
						goto _iter_begin_5072934624;
					}
					_iter_end_5072934624:;
				}
				goto _iter_next_5072923664;
				_julec_label_exist:;
				(*this)._method_push_err(_1e538b460_v,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1e538b460_v._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
				_133754_ok=false;
			}
			_iter_next_5072923664:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5072923664;
		}
		_iter_end_5072923664:;
	}
	return _133754_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_fn_decl_types(jule::Ptr<_229b6ebcb_Fn>& _138644_f) {
	jule::Bool _138654_ok = jule::Bool();
	_138654_ok=true;
	jule::Slice<jule::Ptr<_228d31971_GenericDecl>> _138917_generics = (*(_138644_f))._field_generics;
	if ((*(_138644_f))._field_owner != nullptr) {
		_138917_generics=jule::append(_138917_generics,(*((*(_138644_f))._field_owner))._field_generics);
	}
	{
		auto &expr = (*(_138644_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5072948304:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Param> _1e538b460_p = *it;
			{
				if ((!((*(_1e538b460_p))._method_is_self()))) {
					jule::Ptr<_229d681e3_TypeKind> _139625_kind = (*(this->self))._method_build_non_generic_type_kind((*((*(_1e538b460_p))._field_kind))._field_decl,_138917_generics);
					_138654_ok=(_139625_kind != nullptr) && _138654_ok;
					(*((*(_1e538b460_p))._field_kind))._field_kind=_139625_kind;
				}
			}
			_iter_next_5072948304:;
			++it;
			goto _iter_begin_5072948304;
		}
		_iter_end_5072948304:;
	}
	if ((!((*(_138644_f))._method_is_void()))) {
		jule::Ptr<_229d681e3_TypeKind> _140321_kind = (*(this->self))._method_build_non_generic_type_kind((*((*((*(_138644_f))._field_result))._field_kind))._field_decl,_138917_generics);
		_138654_ok=(_140321_kind != nullptr) && _138654_ok;
		(*((*((*(_138644_f))._field_result))._field_kind))._field_kind=_140321_kind;
	}
	return _138654_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_fn_decl_prototype(jule::Ptr<_229b6ebcb_Fn>& _141348_f) {
	jule::Bool _141358_ok = jule::Bool();
	if ((*(_141348_f))._field_exceptional && (*(_141348_f))._field_cpp_linked) {
		(*(this->self))._method_push_err((*(_141348_f))._field_token,jule::Str("cpp-linked defines cannot be exceptional", 40),jule::Slice<jule::Any>());
		_141358_ok = false;
		return _141358_ok;
	}
	if ((*(_141348_f))._field_exceptional) {
		if ((*(_141348_f))._method_is_entry_point()) {
			(*(this->self))._method_push_err((*(_141348_f))._field_token,jule::Str("entry point cannot be exceptional", 33),jule::Slice<jule::Any>());
		} else if ((*(_141348_f))._method_is_init()) {
			(*(this->self))._method_push_err((*(_141348_f))._field_token,jule::Str("initializer function cannot be exceptional", 42),jule::Slice<jule::Any>());
		}
	}
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_141348_f))._field_generics)))) {
			_case_begin_5072972704:;
			{
				_141358_ok = false;
				return _141358_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_params_dup(_141348_f)))) {
			_case_begin_5072972880:;
			{
				_141358_ok = false;
				return _141358_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_result_dup(_141348_f)))) {
			_case_begin_5072972976:;
			{
				_141358_ok = false;
				return _141358_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_types(_141348_f)))) {
			_case_begin_5072972224:;
			{
				_141358_ok = false;
				return _141358_ok;
			}
		}
		else {
			_case_begin_5072966352:;
			{
				_141358_ok = true;
				return _141358_ok;
			}
		}
		_match_end_5072966112:;
	}
}



inline void _1e538b460_Sema::_method_check_trait_decl_method(jule::Ptr<_229b6ebcb_Fn>& _143648_f) {
	if (_228d7aadb_is_ignore_ident((*(_143648_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_143648_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_fn_decl_prototype(_143648_f);
	(*(_143648_f))._field_sema=this->self;
}



inline void _1e538b460_Sema::_method_check_trait_decl_methods(jule::Ptr<_229b5076c_Trait>& _144549_t) {
	{
		auto &expr = (*(_144549_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_5072987120:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_f = *it;
			{
				(*(this->self))._method_check_trait_decl_method(_1e538b460_f);
				(*(_144549_t))._field_mutable=(*(_144549_t))._field_mutable || (*((*(_1e538b460_f))._field_params[0LL]))._field_mutable;
				if ((*(this->self))._field_errors.len() > 0LL) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto &expr = (*(_144549_t))._field_methods;
					auto it = expr.begin();
					_iter_begin_5072993776:;
					if (it != expr.end()) {
						jule::Int _1e538b460_j = it - expr.begin();
						jule::Ptr<_229b6ebcb_Fn> &_1e538b460_jf = *it;
						{
							{
								
								if (_1e538b460_j >= _1e538b460_i) {
									_case_begin_5072996320:;
									{
										goto _iter_end_5072993776;
									}
								}
								else if ((*(_1e538b460_f))._field_ident == (*(_1e538b460_jf))._field_ident) {
									_case_begin_5072996432:;
									{
										(*(this->self))._method_push_err((*(_1e538b460_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1e538b460_f))._field_ident)}));
										(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_end_5072993776;
									}
								}
								_match_end_5072996096:;
							}
						}
						_iter_next_5072993776:;
						++it;
						_1e538b460_j++;
						goto _iter_begin_5072993776;
					}
					_iter_end_5072993776:;
				}
			}
			_iter_next_5072987120:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5072987120;
		}
		_iter_end_5072987120:;
	}
}



inline void _1e538b460_Sema::_method_check_trait_decl(jule::Ptr<_229b5076c_Trait>& _147741_t) {
	if (_228d7aadb_is_ignore_ident((*(_147741_t))._field_ident)) {
		(*(this->self))._method_push_err((*(_147741_t))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_147741_t)),(*(_147741_t))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_147741_t))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_147741_t))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_trait_decl_methods(_147741_t);
}



inline jule::Bool _1e538b460_Sema::_method_check_trait_decls(void) {
	jule::Bool _148939_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_traits;
		auto it = expr.begin();
		_iter_begin_5073031984:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> _1e538b460_t = *it;
			{
				(*(this->self))._method_check_trait_decl(_1e538b460_t);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_148939_ok = false;
					return _148939_ok;
				}
			}
			_iter_next_5073031984:;
			++it;
			goto _iter_begin_5073031984;
		}
		_iter_end_5073031984:;
	}
	_148939_ok = true;
	return _148939_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_trait_impl_methods(jule::Ptr<_229b5076c_Trait>& _150148_base,jule::Ptr<_1e56ca370_Impl>& _150163_ipl) {
	jule::Bool _150177_ok = jule::Bool();
	_150177_ok=true;
	{
		auto &expr = (*(_150163_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_5073038976:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> &_1e538b460_f = *it;
			{
				if ((*(_150148_base))._method_find_method((*(_1e538b460_f))._field_ident) == nullptr) {
					(*this)._method_push_err((*(_1e538b460_f))._field_token,jule::Str("undefined identifier: trait @ has no define @", 45),jule::Slice<jule::Any>({jule::Any((*(_150148_base))._field_ident),jule::Any((*(_1e538b460_f))._field_ident)}));
					_150177_ok=false;
				}
			}
			_iter_next_5073038976:;
			++it;
			goto _iter_begin_5073038976;
		}
		_iter_end_5073038976:;
	}
	return _150177_ok;
}



inline jule::Bool _1e538b460_Sema::_method_impl_to_struct(jule::Ptr<_228e0d025_Struct>& _151239_dest,jule::Ptr<_1e56ca370_Impl>& _151259_ipl) {
	jule::Bool _151273_ok = jule::Bool();
	_151273_ok=true;
	{
		auto &expr = (*(_151259_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_5073048208:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_f = *it;
			{
				if (((*(_151239_dest))._method_find_method((*(_1e538b460_f))._field_ident,(*(_1e538b460_f))._field_statically) != nullptr) || ((*(_151239_dest))._method_find_field((*(_1e538b460_f))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_1e538b460_f))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_151239_dest))._field_ident),jule::Any((*(_1e538b460_f))._field_ident)}));
					_151273_ok=false;
					goto _iter_next_5073048208;
				}
				if (((*(_151239_dest))._field_generics.len() > 0LL) && ((*(_1e538b460_f))._field_generics.len() > 0LL)) {
					{
						auto &expr = (*(_1e538b460_f))._field_generics;
						auto it = expr.begin();
						_iter_begin_5073056352:;
						if (it != expr.end()) {
							jule::Ptr<_228d31971_GenericDecl> &_1e538b460_fg = *it;
							{
								{
									auto &expr = (*(_151239_dest))._field_generics;
									auto it = expr.begin();
									_iter_begin_5073058128:;
									if (it != expr.end()) {
										jule::Ptr<_228d31971_GenericDecl> &_1e538b460_dg = *it;
										{
											if ((*(_1e538b460_fg))._field_ident == (*(_1e538b460_dg))._field_ident) {
												(*(this->self))._method_push_err((*(_1e538b460_fg))._field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>());
												_151273_ok=false;
											}
										}
										_iter_next_5073058128:;
										++it;
										goto _iter_begin_5073058128;
									}
									_iter_end_5073058128:;
								}
							}
							_iter_next_5073056352:;
							++it;
							goto _iter_begin_5073056352;
						}
						_iter_end_5073056352:;
					}
				}
				(*(this->self))._method_check_directives((*(_1e538b460_f))._field_directives,jule::Any(_1e538b460_f));
				(*(_1e538b460_f))._field_sema=this->self;
				(*(_1e538b460_f))._field_owner=_151239_dest;
				(*(_151239_dest))._field_methods = jule::alloc_for_append((*(_151239_dest))._field_methods,1);(*(_151239_dest))._field_methods.push(_1e538b460_f);
			}
			_iter_next_5073048208:;
			++it;
			goto _iter_begin_5073048208;
		}
		_iter_end_5073048208:;
	}
	{
		auto &expr = (*(_151259_ipl))._field_statics;
		auto it = expr.begin();
		_iter_begin_5073067136:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> _1e538b460_v = *it;
			{
				
				if (((*(_151239_dest))._method_find_method((*(_1e538b460_v))._field_ident,true) != nullptr) || ((*(_151239_dest))._method_find_static((*(_1e538b460_v))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_1e538b460_v))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_151239_dest))._field_ident),jule::Any((*(_1e538b460_v))._field_ident)}));
					_151273_ok=false;
					goto _iter_next_5073067136;
				}
				(*(this->self))._method_check_var_decl(_1e538b460_v,this->self);
				(*(this->self))._method_check_type_var(_1e538b460_v,this->self);
				(*(_151239_dest))._field_statics = jule::alloc_for_append((*(_151239_dest))._field_statics,1);(*(_151239_dest))._field_statics.push(_1e538b460_v);
			}
			_iter_next_5073067136:;
			++it;
			goto _iter_begin_5073067136;
		}
		_iter_end_5073067136:;
	}
	return _151273_ok;
}



inline void _1e538b460_Sema::_method_impl_trait(jule::Ptr<_1e56ca370_Impl>& _155735_decl) {
	jule::Ptr<_229d681e3_TypeKind> _155817_base_t = (*(this->self))._method_select_type((*(_155735_decl))._field_base);
	if (_155817_base_t == nullptr) {
		return;
	}
	jule::Ptr<_229b5076c_Trait> _156217_base = (*(_155817_base_t))._method_trt();
	if (_156217_base == nullptr) {
		(*(this->self))._method_push_err((*((*(_155735_decl))._field_base))._field_token,jule::Str("invalid base type for impl", 26),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected trait, use a trait", 27),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_229d681e3_TypeKind> _156917_dest_t = (*(this->self))._method_select_type((*(_155735_decl))._field_dest);
	if (_156917_dest_t == nullptr) {
		return;
	}
	jule::Ptr<_228e0d025_StructIns> _157317_dest_s = (*(_156917_dest_t))._method_strct();
	if (_157317_dest_s == nullptr) {
		(*(this->self))._method_push_err((*((*(_155735_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl", 33),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_228e0d025_Struct> _158017_dest = (*(_157317_dest_s))._field_decl;
	if ((*((*(_158017_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_155735_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	(*(_156217_base))._field_implemented = jule::alloc_for_append((*(_156217_base))._field_implemented,1);(*(_156217_base))._field_implemented.push(_158017_dest);
	(*(_158017_dest))._field_implements = jule::alloc_for_append((*(_158017_dest))._field_implements,1);(*(_158017_dest))._field_implements.push(_156217_base);
	if ((*(_155735_decl))._field_statics.len() > 0LL) {
		(*(this->self))._method_push_err((*((*(_155735_decl))._field_statics[0LL]))._field_token,jule::Str("trait implementations cannot implement static field", 51),jule::Slice<jule::Any>());
	}
	{
		
		if ((!((*(this->self))._method_check_trait_impl_methods(_156217_base,_155735_decl)))) {
			_case_begin_5073102720:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_impl_to_struct(_158017_dest,_155735_decl)))) {
			_case_begin_5073102816:;
			{
				return;
			}
		}
		_match_end_5073098400:;
	}
}



inline void _1e538b460_Sema::_method_impl_struct(jule::Ptr<_1e56ca370_Impl>& _160036_decl) {
	jule::Ptr<_229d681e3_TypeKind> _160117_dest_t = (*(this->self))._method_select_type((*(_160036_decl))._field_dest);
	if (_160117_dest_t == nullptr) {
		return;
	}
	jule::Ptr<_228e0d025_StructIns> _160517_dest_s = (*(_160117_dest_t))._method_strct();
	if (_160517_dest_s == nullptr) {
		(*(this->self))._method_push_err((*((*(_160036_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl", 33),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_228e0d025_Struct> _161217_dest = (*(_160517_dest_s))._field_decl;
	if ((*((*(_161217_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_160036_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((!((*(this->self))._method_impl_to_struct(_161217_dest,_160036_decl)))) {
			_case_begin_5073110432:;
			{
				return;
			}
		}
		_match_end_5073119056:;
	}
}



inline void _1e538b460_Sema::_method_impl_impl(jule::Ptr<_1e56ca370_Impl>& _162534_decl) {
	{
		
		if ((*(_162534_decl))._method_is_trait_impl()) {
			_case_begin_5073124416:;
			{
				(*(this->self))._method_impl_trait(_162534_decl);
			}
		}
		else if ((*(_162534_decl))._method_is_struct_impl()) {
			_case_begin_5073124528:;
			{
				(*(this->self))._method_impl_struct(_162534_decl);
			}
		}
		_match_end_5073124192:;
	}
}



inline void _1e538b460_Sema::_method_check_var_decl(jule::Ptr<_1e58b0654_Var>& _163439_decl,jule::Trait<_229d94c47_Lookup> _163455_l) {
	if (_228d7aadb_is_ignore_ident((*(_163439_decl))._field_ident)) {
		(*(this->self))._method_push_err((*(_163439_decl))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	if ((*(_163439_decl))._method_is_type_inferred()) {
		if ((!((*(_163439_decl))._method_is_initialized()))) {
			(*(this->self))._method_push_err((*(_163439_decl))._field_token,jule::Str("type inferred declarations should have a initializer expression", 63),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_check_type((*(_163439_decl))._field_kind,_163455_l);
	}
	if ((*(_163439_decl))._field_constant && (*(_163439_decl))._field_reference) {
		(*(this->self))._method_push_err((*(_163439_decl))._field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>());
	}
	if ((!((*(_163439_decl))._method_is_initialized()))) {
		if ((*(_163439_decl))._field_constant) {
			(*(this->self))._method_push_err((*(_163439_decl))._field_token,jule::Str("constant variable must have initialize expression", 49),jule::Slice<jule::Any>());
		}
		if ((*(_163439_decl))._field_statically) {
			(*(this->self))._method_push_err((*(_163439_decl))._field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>());
		}
		if ((*(_163439_decl))._field_reference) {
			(*(this->self))._method_push_err((*(_163439_decl))._field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>());
		}
	}
}



inline void _1e538b460_Sema::_method_check_global_var_decl(jule::Ptr<_1e58b0654_Var>& _166846_decl) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_166846_decl)),(*(_166846_decl))._field_ident,(*(_166846_decl))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_166846_decl))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_166846_decl))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((*(_166846_decl))._field_cpp_linked && (*(_166846_decl))._field_constant) {
		(*(this->self))._method_push_err((*(_166846_decl))._field_token,jule::Str("cpp linked variables cannot constant", 36),jule::Slice<jule::Any>());
	}
	if (((!((*(_166846_decl))._field_cpp_linked)) && (!((*(_166846_decl))._field_constant))) && (!((*(_166846_decl))._field_statically))) {
		(*(this->self))._method_push_err((*(_166846_decl))._field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_166846_decl))._field_directives,jule::Any(_166846_decl));
	(*(this->self))._method_check_var_decl(_166846_decl,this->self);
}



inline jule::Bool _1e538b460_Sema::_method_check_global_decls(void) {
	jule::Bool _168740_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_5073168528:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> _1e538b460_decl = *it;
			{
				(*(this->self))._method_check_global_var_decl(_1e538b460_decl);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_168740_ok = false;
					return _168740_ok;
				}
			}
			_iter_next_5073168528:;
			++it;
			goto _iter_begin_5073168528;
		}
		_iter_end_5073168528:;
	}
	_168740_ok = true;
	return _168740_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_trait_impl(jule::Ptr<_228e0d025_Struct>& _169948_strct,jule::Ptr<_229b5076c_Trait>& _169969_trt) {
	jule::Bool _169984_ok = jule::Bool();
	{
		auto &expr = (*(_169969_trt))._field_methods;
		auto it = expr.begin();
		_iter_begin_5073175840:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_tf = *it;
			{
				jule::Bool _170121_exist = false;
				jule::Ptr<_229b6ebcb_Fn> _170221_sf = (*(_169948_strct))._method_find_method((*(_1e538b460_tf))._field_ident,(*(_1e538b460_tf))._field_statically);
				jule::Ptr<_229b6ebcb_FnIns> _170317_tf_k = (*(this->self))._method_get_trait_check_fn_kind(_1e538b460_tf);
				if (_170221_sf != nullptr) {
					jule::Ptr<_229b6ebcb_FnIns> _170525_sf_k = (*(this->self))._method_get_trait_check_fn_kind(_170221_sf);
					_170121_exist=(((*((*(_170317_tf_k))._field_decl))._field_public == (*((*(_170525_sf_k))._field_decl))._field_public) && ((*((*(_170317_tf_k))._field_decl))._field_ident == (*((*(_170525_sf_k))._field_decl))._field_ident)) && (*(_170317_tf_k))._method_equals(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_170525_sf_k)));
				}
				if (_170121_exist) {
					jule::Ptr<_228d31971_Directive> _171321_d = _229d70d33_find_directive((*(_170221_sf))._field_directives,jule::Str("deprecated", 10));
					if (_171321_d != nullptr) {
						(*(this->self))._method_push_err((*(_171321_d))._field_tag,jule::Str("trait implementations cannot have deprecated code", 49),jule::Slice<jule::Any>());
					}
					_169984_ok=false;
				} else {
					
					jule::Str _172025_s = (*(_170317_tf_k))._method_get_kind_str(true);
					if ((*(_1e538b460_tf))._field_public) {
						_172025_s=jule::Str("pub ", 4) + _172025_s;
					}
					(*(this->self))._method_push_err((*(_169948_strct))._field_token,jule::Str("trait @ derived but not implemented define @", 44),jule::Slice<jule::Any>({jule::Any((*(_169969_trt))._field_ident),jule::Any(_172025_s)}));
					_169984_ok=false;
				}
			}
			_iter_next_5073175840:;
			++it;
			goto _iter_begin_5073175840;
		}
		_iter_end_5073175840:;
	}
	return _169984_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_impls(jule::Ptr<_228e0d025_Struct>& _173143_s) {
	jule::Bool _173157_ok = jule::Bool();
	_173157_ok=true;
	{
		auto &expr = (*(_173143_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_5073199984:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> _1e538b460_trt = *it;
			{
				_173157_ok=(*(this->self))._method_check_struct_trait_impl(_173143_s,_1e538b460_trt) && _173157_ok;
			}
			_iter_next_5073199984:;
			++it;
			goto _iter_begin_5073199984;
		}
		_iter_end_5073199984:;
	}
	return _173157_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_fields(jule::Ptr<_228e0d025_Struct>& _173944_st) {
	jule::Bool _173959_ok = jule::Bool();
	_173959_ok=true;
	jule::Ptr<_229d681e3_TypeChecker> _174217_tc = jule::new_struct<_229d681e3_TypeChecker>(new( std::nothrow ) _229d681e3_TypeChecker(this->self,this->self,jule::new_struct<_229d681e3_Referencer>(new( std::nothrow ) _229d681e3_Referencer((*(_173944_st))._field_ident,jule::Any(_173944_st),nullptr)),_228d7aadb_Token(),(*(_173944_st))._field_generics,jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool()));
	jule::I64 _175213_n = (*(_173944_st))._field_instances.len();
	{
		auto &expr = (*(_173944_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_5073209632:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Field> _1e538b460_f = *it;
			{
				(*(_1e538b460_f))._field_owner=_173944_st;
				(*((*(_1e538b460_f))._field_kind))._field_kind=(*(_174217_tc))._method_check_decl((*((*(_1e538b460_f))._field_kind))._field_decl);
				_173959_ok=((*((*(_1e538b460_f))._field_kind))._field_kind != nullptr) && _173959_ok;
				{
					auto &expr = (*(_173944_st))._field_fields;
					auto it = expr.begin();
					_iter_begin_5073212480:;
					if (it != expr.end()) {
						jule::Ptr<_228e0d025_Field> &_1e538b460_cf = *it;
						{
							if (_1e538b460_f == _1e538b460_cf) {
								goto _iter_end_5073212480;
							} else if ((*(_1e538b460_f))._field_ident == (*(_1e538b460_cf))._field_ident) {
								(*(this->self))._method_push_err((*(_1e538b460_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1e538b460_f))._field_ident)}));
								(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								_173959_ok=false;
							}
						}
						_iter_next_5073212480:;
						++it;
						goto _iter_begin_5073212480;
					}
					_iter_end_5073212480:;
				}
			}
			_iter_next_5073209632:;
			++it;
			goto _iter_begin_5073209632;
		}
		_iter_end_5073209632:;
	}
	if (_173959_ok && (_175213_n != (*(_173944_st))._field_instances.len())) {
		(*(_174217_tc))._field_referencer=nullptr;
		(*(_173944_st))._field_instances=(*(_173944_st))._field_instances.slice(0LL,_175213_n);
		{
			auto &expr = (*(_173944_st))._field_fields;
			auto it = expr.begin();
			_iter_begin_5073222416:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_Field> _1e538b460_f = *it;
				{
					(*((*(_1e538b460_f))._field_kind))._field_kind=(*(_174217_tc))._method_check_decl((*((*(_1e538b460_f))._field_kind))._field_decl);
				}
				_iter_next_5073222416:;
				++it;
				goto _iter_begin_5073222416;
			}
			_iter_end_5073222416:;
		}
	}
	return _173959_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_decl_methods(jule::Ptr<_228e0d025_Struct>& _178150_s) {
	jule::Bool _178164_ok = jule::Bool();
	{
		auto &expr = (*(_178150_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_5073229344:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_m = *it;
			{
				if ((!((*(this->self))._method_check_fn_decl_types(_1e538b460_m)))) {
					_178164_ok = false;
					return _178164_ok;
				}
			}
			_iter_next_5073229344:;
			++it;
			goto _iter_begin_5073229344;
		}
		_iter_end_5073229344:;
	}
	_178164_ok = true;
	return _178164_ok;
}



inline void _1e538b460_Sema::_method_check_struct_decl(jule::Ptr<_228e0d025_Struct>& _179042_s) {
	if (_228d7aadb_is_ignore_ident((*(_179042_s))._field_ident)) {
		(*(this->self))._method_push_err((*(_179042_s))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_179042_s)),(*(_179042_s))._field_ident,(*(_179042_s))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_179042_s))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_179042_s))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_179042_s))._field_directives,jule::Any(_179042_s));
	(*(_179042_s))._field_sema=this->self;
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_179042_s))._field_generics)))) {
			_case_begin_5073243760:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_fields(_179042_s)))) {
			_case_begin_5073243872:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_decl_methods(_179042_s)))) {
			_case_begin_5073243984:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_impls(_179042_s)))) {
			_case_begin_5073244096:;
			{
				return;
			}
		}
		_match_end_5073234560:;
	}
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_decls(void) {
	jule::Bool _181040_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5073252592:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _1e538b460_s = *it;
			{
				(*(this->self))._method_check_struct_decl(_1e538b460_s);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_181040_ok = false;
					return _181040_ok;
				}
			}
			_iter_next_5073252592:;
			++it;
			goto _iter_begin_5073252592;
		}
		_iter_end_5073252592:;
	}
	_181040_ok = true;
	return _181040_ok;
}



inline void _1e538b460_Sema::_method_check_fn_decl(jule::Ptr<_229b6ebcb_Fn>& _182338_f) {
	if (_228d7aadb_is_ignore_ident((*(_182338_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_182338_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_182338_f)),(*(_182338_f))._field_ident,(*(_182338_f))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_182338_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_182338_f))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_182338_f))._field_directives,jule::Any(_182338_f));
	(*(_182338_f))._field_sema=this->self;
	(*(this->self))._method_check_fn_decl_prototype(_182338_f);
}



inline jule::Bool _1e538b460_Sema::_method_check_fn_decls(void) {
	jule::Bool _183836_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5073270864:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_f = *it;
			{
				(*(this->self))._method_check_fn_decl(_1e538b460_f);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_183836_ok = false;
					return _183836_ok;
				}
			}
			_iter_next_5073270864:;
			++it;
			goto _iter_begin_5073270864;
		}
		_iter_end_5073270864:;
	}
	_183836_ok = true;
	return _183836_ok;
}



inline void _1e538b460_Sema::_method_push_cycle_error(jule::Ptr<_228e0d025_Struct>& _185032_st1,jule::Ptr<_228e0d025_Struct>& _185047_st2,jule::Str& _185066_message) {
	
	jule::Str _185313_refers_to = _2276bcb9e_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_185032_st1))._field_ident),jule::Any((*(_185047_st2))._field_ident)}));
	_185066_message=((_228d6ecab_str_repeat(jule::Str(" ", 1),4LL) + _185313_refers_to) + jule::Str("\n", 1)) + _185066_message;
}



inline jule::Bool _1e538b460_Sema::_method_check_cross_cycle(jule::Ptr<_228e0d025_Struct>& _185733_st1,jule::Ptr<_228e0d025_Struct>& _185748_st2,jule::Str& _185767_message) {
	{
		auto &expr = (*(_185748_st2))._field_uses;
		auto it = expr.begin();
		_iter_begin_5073285296:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> &_1e538b460_u = *it;
			{
				if (_1e538b460_u == _185733_st1) {
					(*this)._method_push_cycle_error(_185748_st2,_1e538b460_u,_185767_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_185733_st1,_1e538b460_u,_185767_message)))) {
					(*this)._method_push_cycle_error(_185748_st2,_1e538b460_u,_185767_message);
					return false;
				}
			}
			_iter_next_5073285296:;
			++it;
			goto _iter_begin_5073285296;
		}
		_iter_end_5073285296:;
	}
	return true;
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _187353_derive,jule::Ptr<_228e0d025_Struct>& _187367_st1,jule::Ptr<_229d681e3_TypeKind>& _187386_k) {
	jule::Bool _1873102_ok = jule::Bool();
	jule::Ptr<_228e0d025_Struct> _187417_st2 = _229d681e3_get_struct_from_kind(_187386_k);
	if (_187417_st2 == nullptr) {
		_1873102_ok = true;
		return _1873102_ok;
	}
	if (_187367_st1 == _187417_st2) {
		(*this)._method_push_err((*(_187367_st1))._field_token,jule::Str("illegal cycle for derive @, struct @ refers to itself", 53),jule::Slice<jule::Any>({jule::Any(_187353_derive),jule::Any((*(_187367_st1))._field_ident)}));
		_1873102_ok = false;
		return _1873102_ok;
	}
	jule::Str _188617_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_187367_st1,_187417_st2,_188617_message)))) {
		jule::Str _188921_err_msg = _188617_message;
		_188617_message=jule::Str();
		(*this)._method_push_cycle_error(_187367_st1,_187417_st2,_188617_message);
		_188921_err_msg=_188921_err_msg + _188617_message;
		(*this)._method_push_err((*(_187367_st1))._field_token,jule::Str("illegal cross cycle for derive @;\n@", 35),jule::Slice<jule::Any>({jule::Any(_187353_derive),jule::Any(_188921_err_msg)}));
		_1873102_ok = false;
		return _1873102_ok;
	}
	_1873102_ok = true;
	return _1873102_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_ins_derive_clone(jule::Ptr<_228e0d025_StructIns> _190052_st) {
	jule::Bool _190070_ok = jule::Bool();
	if ((!((*((*(_190052_st))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
		_190070_ok = true;
		return _190070_ok;
	}
	{
		auto &expr = (*(_190052_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_5073309648:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_FieldIns> _1e538b460_f = *it;
			{
				if (((*(_1e538b460_f))._field_kind == nullptr) || (!((*((*(_1e538b460_f))._field_kind))._method_mutable()))) {
					goto _iter_next_5073309648;
				}
				if ((!((*((*(_1e538b460_f))._field_kind))._method_supports_cloning()))) {
					(*this)._method_push_err((*((*(_190052_st))._field_decl))._field_token,jule::Str("type @ is not compatible to derive @", 36),jule::Slice<jule::Any>({jule::Any((*((*(_1e538b460_f))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_190070_ok = false;
					return _190070_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),(*(_190052_st))._field_decl,(*(_1e538b460_f))._field_kind)))) {
					_190070_ok = false;
					return _190070_ok;
				}
			}
			_iter_next_5073309648:;
			++it;
			goto _iter_begin_5073309648;
		}
		_iter_end_5073309648:;
	}
	_190070_ok = true;
	return _190070_ok;
}



inline jule::Bool _1e538b460_Sema::_method_check_struct_derive_clone(jule::Ptr<_228e0d025_Struct>& _192349_st) {
	return (*this)._method_check_struct_ins_derive_clone((*(_192349_st))._method_instance());
}



inline jule::Bool _1e538b460_Sema::_method_check_file_derives(void) {
	jule::Bool _192739_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5073325120:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _1e538b460_st = *it;
			{
				_192739_ok=(*this)._method_check_struct_derive_clone(_1e538b460_st);
				if ((!(_192739_ok))) {
					goto _iter_end_5073325120;
				}
			}
			_iter_next_5073325120:;
			++it;
			goto _iter_begin_5073325120;
		}
		_iter_end_5073325120:;
	}
	return _192739_ok;
}



inline void _1e538b460_Sema::_method_check_package_derives(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_5073328544:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*this)._method_set_current_file(_1e538b460_f);
				jule::Bool _194217_ok = (*this)._method_check_file_derives();
				if ((!(_194217_ok))) {
					return;
				}
			}
			_iter_next_5073328544:;
			++it;
			goto _iter_begin_5073328544;
		}
		_iter_end_5073328544:;
	}
}



inline void _1e538b460_Sema::_method_check_package_decls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073333632:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				if ((!((*(this->self))._method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_5073333632:;
			++it;
			goto _iter_begin_5073333632;
		}
		_iter_end_5073333632:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073337616:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				if ((!((*(this->self))._method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_5073337616:;
			++it;
			goto _iter_begin_5073337616;
		}
		_iter_end_5073337616:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073340944:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				if ((!((*(this->self))._method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_5073340944:;
			++it;
			goto _iter_begin_5073340944;
		}
		_iter_end_5073340944:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073344336:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				if ((!((*(this->self))._method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_5073344336:;
			++it;
			goto _iter_begin_5073344336;
		}
		_iter_end_5073344336:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073347664:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				if ((!((*(this->self))._method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_5073347664:;
			++it;
			goto _iter_begin_5073347664;
		}
		_iter_end_5073347664:;
	}
	(*(this->self))._method_check_package_derives();
}



inline void _1e538b460_Sema::_method_check_data_for_type_inference(jule::Ptr<_229d70d33_Data>& _199049_d,_228d7aadb_Token& _199060_err_token) {
	{
		
		if ((*(_199049_d))._method_is_nil()) {
			_case_begin_5073354192:;
			{
				(*this)._method_push_err(_199060_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>());
			}
		}
		else if ((*(_199049_d))._method_is_void()) {
			_case_begin_5073354304:;
			{
				(*this)._method_push_err(_199060_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>());
			}
		}
		else if ((*((*(_199049_d))._field_kind))._field_variadic) {
			_case_begin_5073354416:;
			{
				(*this)._method_push_err(_199060_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>());
			}
		}
		_match_end_5073353984:;
	}
}



inline void _1e538b460_Sema::_method_check_var(jule::Ptr<_1e58b0654_Var>& _200334_v) {
	if ((*(_200334_v))._field_cpp_linked) {
		return;
	}
	if ((*(_200334_v))._method_is_type_inferred()) {
		(*(_200334_v))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),(*((*((*(_200334_v))._field_value))._field_data))._field_kind));
		(*(this->self))._method_check_data_for_type_inference((*((*(_200334_v))._field_value))._field_data,(*((*((*(_200334_v))._field_value))._field_expr))._field_token);
	} else {
		jule::Ptr<_229d681e3_Arr> _201521_arr = (*((*((*(_200334_v))._field_kind))._field_kind))._method_arr();
		if (_201521_arr != nullptr) {
			if ((*(_201521_arr))._field_auto) {
				jule::Ptr<_229d681e3_Arr> _201825_data_arr = (*((*((*((*(_200334_v))._field_value))._field_data))._field_kind))._method_arr();
				if (_201825_data_arr != nullptr) {
					(*(_201521_arr))._field_n=(*(_201825_data_arr))._field_n;
				}
			}
		}
		(*(this->self))._method_check_assign_type((*(_200334_v))._field_reference,(*((*(_200334_v))._field_kind))._field_kind,(*((*(_200334_v))._field_value))._field_data,(*((*((*(_200334_v))._field_value))._field_expr))._field_token);
	}
	if ((*(_200334_v))._field_reference && (!(_229d681e3_is_valid_for_ref((*((*(_200334_v))._field_kind))._field_kind)))) {
		(*(this->self))._method_push_err((*(_200334_v))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*((*(_200334_v))._field_kind))._field_kind))._method_to_str())}));
	}
	(*(this->self))._method_check_validity_for_init_expr((*(_200334_v))._field_mutable,(*(_200334_v))._field_reference,(*((*(_200334_v))._field_kind))._field_kind,(*((*(_200334_v))._field_value))._field_data,(*((*((*(_200334_v))._field_value))._field_expr))._field_token);
	if ((*(_200334_v))._field_constant) {
		if ((!((*((*((*(_200334_v))._field_value))._field_data))._method_is_const()))) {
			(*(this->self))._method_push_err((*((*((*(_200334_v))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		}
	} else {
		(*((*((*(_200334_v))._field_value))._field_data))._field_constant=nullptr;
	}
	if ((*((*((*(_200334_v))._field_kind))._field_kind))._method_tup() != nullptr) {
		(*((*(_200334_v))._field_kind))._field_kind=nullptr;
	}
}



inline void _1e538b460_Sema::_method_check_type_var(jule::Ptr<_1e58b0654_Var>& _205339_decl,jule::Trait<_229d94c47_Lookup> _205355_l) {
	if ((*(_205339_decl))._field_cpp_linked || (!((*(_205339_decl))._method_is_initialized()))) {
		return;
	}
	jule::Ptr<_229d70d33_Eval> _205817_eval = ((((*(_205339_decl))._field_kind != nullptr)) ? ((*(this->self))._method_evalpd(_205355_l,(*((*(_205339_decl))._field_kind))._field_kind,_205339_decl)) : ((*(this->self))._method_evalpd(_205355_l,nullptr,_205339_decl)));
	(*(_205817_eval))._field_immutable=(!((*(_205339_decl))._field_mutable));
	(*((*(_205339_decl))._field_value))._field_data=(*(_205817_eval))._method_eval_expr((*((*(_205339_decl))._field_value))._field_expr);
	if ((*((*(_205339_decl))._field_value))._field_data == nullptr) {
		return;
	}
	(*(this->self))._method_check_var(_205339_decl);
}



inline void _1e538b460_Sema::_method_check_global_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_5073409392:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> _1e538b460_decl = *it;
			{
				if (((*(_1e538b460_decl))._method_is_initialized() && ((*((*(_1e538b460_decl))._field_value))._field_data == nullptr)) || ((*(_1e538b460_decl))._method_is_type_inferred() && ((*((*(_1e538b460_decl))._field_kind))._field_kind == nullptr))) {
					(*(this->self))._method_check_type_var(_1e538b460_decl,this->self);
				}
			}
			_iter_next_5073409392:;
			++it;
			goto _iter_begin_5073409392;
		}
		_iter_end_5073409392:;
	}
}



inline void _1e538b460_Sema::_method_check_type_method(jule::Ptr<_228e0d025_StructIns>& _208242_strct,jule::Ptr<_229b6ebcb_Fn>& _208266_f) {
	if ((*(_208266_f))._field_cpp_linked) {
		return;
	}
	if ((*(_208266_f))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_208266_f))._field_instances.len() == 0LL) {
		jule::Ptr<_229b6ebcb_FnIns> _209321_ins = (*(_208266_f))._method_instance();
		(*(_209321_ins))._field_owner=_208242_strct;
		(*(_208266_f))._method_append_instance(_209321_ins);
		(*(this->self))._method_reload_fn_ins_types(_209321_ins);
		(*(_209321_ins))._field_reloaded=true;
	}
	{
		auto &expr = (*(_208266_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5073419824:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_FnIns> _1e538b460_ins = *it;
			{
				if ((*((*(_1e538b460_ins))._field_scope))._field_stmts.len() > 0LL) {
					goto _iter_next_5073419824;
				}
				(*(this->self))._method_check_fn_ins(_1e538b460_ins);
			}
			_iter_next_5073419824:;
			++it;
			goto _iter_begin_5073419824;
		}
		_iter_end_5073419824:;
	}
}



inline void _1e538b460_Sema::_method_check_field_defaults(jule::Ptr<_228e0d025_StructIns>& _210945_ins) {
	jule::Ptr<_229d70d33_Eval> _211017_eval = (*(this->self))._method_eval(this->self);
	{
		auto &expr = (*(_210945_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_5073432592:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_FieldIns> _1e538b460_f = *it;
			{
				if ((*((*(_1e538b460_f))._field_decl))._field_default == nullptr) {
					goto _iter_next_5073432592;
				}
				(*(_211017_eval))._field_prefix=(*(_1e538b460_f))._field_kind;
				(*(_211017_eval))._field_field=_1e538b460_f;
				(*(_1e538b460_f))._field_default=(*(_211017_eval))._method_eval_expr((*((*(_1e538b460_f))._field_decl))._field_default);
				if ((*(_1e538b460_f))._field_default == nullptr) {
					goto _iter_next_5073432592;
				}
				
				(*(this->self))._method_check_assign_type(false,(*(_1e538b460_f))._field_kind,(*(_1e538b460_f))._field_default,(*((*((*(_1e538b460_f))._field_decl))._field_default))._field_token);
			}
			_iter_next_5073432592:;
			++it;
			goto _iter_begin_5073432592;
		}
		_iter_end_5073432592:;
	}
}



inline void _1e538b460_Sema::_method_check_type_struct(jule::Ptr<_228e0d025_Struct>& _213142_strct) {
	if ((*(_213142_strct))._field_cpp_linked) {
		return;
	}
	if ((*(_213142_strct))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_213142_strct))._field_instances.len() == 0LL) {
		jule::Ptr<_228e0d025_StructIns> _214221_ins = (*(_213142_strct))._method_instance();
		(*(_214221_ins))._field_checked=true;
		(*(_213142_strct))._method_append_instance(_214221_ins);
	}
	{
		auto &expr = (*(_213142_strct))._field_instances;
		auto it = expr.begin();
		_iter_begin_5073446528:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_StructIns> _1e538b460_ins = *it;
			{
				(*(this->self))._method_check_field_defaults(_1e538b460_ins);
				{
					auto &expr = (*(_1e538b460_ins))._field_methods;
					auto it = expr.begin();
					_iter_begin_5073452928:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_Fn> _1e538b460_f = *it;
						{
							(*(this->self))._method_check_type_method(_1e538b460_ins,_1e538b460_f);
						}
						_iter_next_5073452928:;
						++it;
						goto _iter_begin_5073452928;
					}
					_iter_end_5073452928:;
				}
			}
			_iter_next_5073446528:;
			++it;
			goto _iter_begin_5073446528;
		}
		_iter_end_5073446528:;
	}
}



inline void _1e538b460_Sema::_method_check_struct_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5073455936:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _1e538b460_s = *it;
			{
				(*(this->self))._method_check_type_struct(_1e538b460_s);
			}
			_iter_next_5073455936:;
			++it;
			goto _iter_begin_5073455936;
		}
		_iter_end_5073455936:;
	}
}



inline void _1e538b460_Sema::_method_check_rets(jule::Ptr<_229b6ebcb_FnIns>& _216134_f) {
	if ((*((*(_216134_f))._field_decl))._method_is_void()) {
		return;
	}
	jule::Bool _216613_ok = _1e538b460_has_ret((*(_216134_f))._field_scope);
	if ((!(_216613_ok))) {
		(*this)._method_push_err((*((*(_216134_f))._field_decl))._field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>());
	}
}



inline void _1e538b460_Sema::_method_check_fn_ins_sc(jule::Ptr<_229b6ebcb_FnIns>& _217239_f,jule::Ptr<_1e56c3885_ScopeChecker>& _217255_sc) {
	if ((*((*(_217239_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _217717_vars = _1e538b460_build_ret_vars(_217239_f);
	(*((*(_217255_sc))._field_table))._field_vars=jule::append((*((*(_217255_sc))._field_table))._field_vars,_217717_vars);
	(*((*(_217255_sc))._field_table))._field_vars=jule::append((*((*(_217255_sc))._field_table))._field_vars,_1e538b460_build_param_vars(_217239_f));
	(*((*(_217255_sc))._field_table))._field_type_aliases=jule::append((*((*(_217255_sc))._field_table))._field_type_aliases,_1e538b460_build_generic_type_aliases(_217239_f));
	(*(_217255_sc))._method_check((*((*(_217239_f))._field_decl))._field_scope,(*(_217239_f))._field_scope);
	if (_217717_vars.len() > 0LL) {
		jule::Slice<jule::Any> _218721_stmts = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*((*(_217239_f))._field_scope))._field_stmts.len() + _217717_vars.len()));
		{
			auto &expr = _217717_vars;
			auto it = expr.begin();
			_iter_begin_5073480064:;
			if (it != expr.end()) {
				jule::Ptr<_1e58b0654_Var> _1e538b460_v = *it;
				{
					_218721_stmts.push(jule::Any(_1e538b460_v));
				}
				_iter_next_5073480064:;
				++it;
				goto _iter_begin_5073480064;
			}
			_iter_end_5073480064:;
		}
		_218721_stmts=jule::append(_218721_stmts,(*((*(_217239_f))._field_scope))._field_stmts);
		(*((*(_217239_f))._field_scope))._field_stmts=_218721_stmts;
	}
	(*this)._method_check_rets(_217239_f);
}



inline void _1e538b460_Sema::_method_check_fn_ins(jule::Ptr<_229b6ebcb_FnIns>& _219937_f) {
	if ((*((*(_219937_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Ptr<_229d56533_SymbolTable> _220417_old = (*((*((*(_219937_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_219937_f))._field_decl))._field_sema))._method_set_current_file(_220417_old);
	});
	jule::Ptr<_229d56533_SymbolTable> _220617_file = _1e538b460_find_file((*((*((*(_219937_f))._field_decl))._field_sema))._field_files,(*((*(_219937_f))._field_decl))._field_token._field_file);
	if (_220617_file != nullptr) {
		(*((*((*(_219937_f))._field_decl))._field_sema))._method_set_current_file(_220617_file);
	}
	jule::Ptr<_1e56c3885_ScopeChecker> _221117_sc = _1e56c3885_new_scope_checker((*((*(_219937_f))._field_decl))._field_sema,_219937_f);
	(*(this->self))._method_check_fn_ins_sc(_219937_f,_221117_sc);
	if ((*((*(_219937_f))._field_decl))._field_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*((*((*(_219937_f))._field_decl))._field_sema))._field_errors);
		(*((*((*(_219937_f))._field_decl))._field_sema))._field_errors=nullptr;
	}
}



inline void _1e538b460_Sema::_method_check_type_fn(jule::Ptr<_229b6ebcb_Fn>& _222038_f) {
	if ((*(_222038_f))._field_cpp_linked) {
		return;
	}
	if ((*(_222038_f))._field_generics.len() > 0LL) {
		return;
	}
	{
		auto &expr = (*(_222038_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5073505056:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_FnIns> _1e538b460_ins = *it;
			{
				(*(this->self))._method_check_fn_ins(_1e538b460_ins);
			}
			_iter_next_5073505056:;
			++it;
			goto _iter_begin_5073505056;
		}
		_iter_end_5073505056:;
	}
}



inline void _1e538b460_Sema::_method_check_test_fn(jule::Ptr<_229b6ebcb_FnIns>& _223537_f) {
	if ((*((*(_223537_f))._field_decl))._field_public) {
		(*this)._method_push_err((*((*(_223537_f))._field_decl))._field_token,jule::Str("test function cannot be public", 30),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("remove \"pub\" modifier", 21),jule::Slice<jule::Any>());
		return;
	}
	if (((*(_223537_f))._field_params.len() != 1LL) || ((*(_223537_f))._field_result != nullptr)) {
		(*this)._method_push_err((*((*(_223537_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_229d681e3_Sptr> _224817_sptr = (*((*((*(_223537_f))._field_params[0LL]))._field_kind))._method_sptr();
	if (_224817_sptr == nullptr) {
		(*this)._method_push_err((*((*(_223537_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_228e0d025_StructIns> _225513_s = (*((*(_224817_sptr))._field_elem))._method_strct();
	if ((_225513_s == nullptr) || (!(_1e53308ee_is_std_package((*((*((*(_225513_s))._field_decl))._field_token._field_file))._method_path(),jule::Str("testing", 7))))) {
		(*this)._method_push_err((*((*(_223537_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
}



inline void _1e538b460_Sema::_method_precheck_type_fn(jule::Ptr<_229b6ebcb_Fn>& _226341_f) {
	if ((*(_226341_f))._field_cpp_linked) {
		return;
	}
	if ((*(_226341_f))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_226341_f))._field_instances.len() == 0LL) {
		jule::Ptr<_229b6ebcb_FnIns> _227421_ins = (*(_226341_f))._method_instance();
		(*(_226341_f))._field_instances = jule::alloc_for_append((*(_226341_f))._field_instances,1);(*(_226341_f))._field_instances.push(_227421_ins);
		(*(this->self))._method_reload_fn_ins_types(_227421_ins);
		(*(_227421_ins))._field_reloaded=true;
		if (_229d681e3_has_directive((*(_226341_f))._field_directives,jule::Str("test", 4))) {
			(*(this->self))._method_check_test_fn(_227421_ins);
		}
	}
}



inline void _1e538b460_Sema::_method_precheck_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5073541680:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_decl = *it;
			{
				(*(this->self))._method_precheck_type_fn(_1e538b460_decl);
			}
			_iter_next_5073541680:;
			++it;
			goto _iter_begin_5073541680;
		}
		_iter_end_5073541680:;
	}
}



inline void _1e538b460_Sema::_method_check_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5073545488:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_decl = *it;
			{
				(*(this->self))._method_check_type_fn(_1e538b460_decl);
			}
			_iter_next_5073545488:;
			++it;
			goto _iter_begin_5073545488;
		}
		_iter_end_5073545488:;
	}
}



inline void _1e538b460_Sema::_method_check_package_types(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073548928:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				(*(this->self))._method_check_global_types();
			}
			_iter_next_5073548928:;
			++it;
			goto _iter_begin_5073548928;
		}
		_iter_end_5073548928:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073549744:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				(*(this->self))._method_precheck_fn_types();
			}
			_iter_next_5073549744:;
			++it;
			goto _iter_begin_5073549744;
		}
		_iter_end_5073549744:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073552704:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				(*(this->self))._method_check_fn_types();
			}
			_iter_next_5073552704:;
			++it;
			goto _iter_begin_5073552704;
		}
		_iter_end_5073552704:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073555680:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_f = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_f);
				(*(this->self))._method_check_struct_types();
			}
			_iter_next_5073555680:;
			++it;
			goto _iter_begin_5073555680;
		}
		_iter_end_5073555680:;
	}
}



inline void _1e538b460_Sema::_method_set_file_sema_fields(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_5073562512:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e538b460_f = *it;
			{
				(*(_1e538b460_f))._field_sema=this->self;
			}
			_iter_next_5073562512:;
			++it;
			goto _iter_begin_5073562512;
		}
		_iter_end_5073562512:;
	}
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_5073563216:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _1e538b460_st = *it;
			{
				(*(_1e538b460_st))._field_sema=this->self;
			}
			_iter_next_5073563216:;
			++it;
			goto _iter_begin_5073563216;
		}
		_iter_end_5073563216:;
	}
}



inline void _1e538b460_Sema::_method_set_sema_fields(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_5073567440:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_file = *it;
			{
				(*(this->self))._method_set_current_file(_1e538b460_file);
				(*(this->self))._method_set_file_sema_fields();
			}
			_iter_next_5073567440:;
			++it;
			goto _iter_begin_5073567440;
		}
		_iter_end_5073567440:;
	}
}



inline void _1e538b460_Sema::_method_check(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _234030_files) {
	(*(this->self))._field_files=_234030_files;
	(*(this->self))._method_check_imports();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_enums();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_set_sema_fields();
	(*(this->self))._method_impl_impls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_package_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _1e538b460_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "flags:" << _Src._field_flags;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b0654_IterRelation &_Src) {
	_Stream << "IterRelation{";
	_Stream << "range:" << _Src._field_range;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e58b0654_Var> _1e58b019d_RangeChecker::_method_build_var(jule::Ptr<_228d31971_VarDecl>& _90129_decl) {
	jule::Ptr<_1e58b0654_Var> _90217_v = _228d6ecab_build_var(_90129_decl);
	return _90217_v;
}



inline void _1e58b019d_RangeChecker::_method_set_size_key(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _228d7aadb_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3))))));
	{
		auto &_match_expr{ (*((*this)._field_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5074052736:;
			{
				(*((*((*this)._field_kind))._field_key_a))._field_iter_relation=jule::new_struct<_1e58b0654_IterRelation>(new( std::nothrow ) _1e58b0654_IterRelation((*((*this)._field_d))._field_model.operator jule::Ptr<_1e58b0654_Var>()));
			}
		}
		_match_end_5074052656:;
	}
}



inline void _1e58b019d_RangeChecker::_method_check_range_expr_validity(jule::Ptr<_229d70d33_Data>& _93249_d,jule::Ptr<_1e58b0654_Var>& _93260_key,jule::Ptr<_229d681e3_TypeKind>& _93276_k) {
	jule::Bool _93317__mut = (*(_93260_key))._field_mutable;
	if (_93317__mut && (!((*(_93276_k))._method_mutable()))) {
		_93317__mut=false;
	}
	(*((*((*this)._field_sc))._field_s))._method_check_validity_for_init_expr(_93317__mut,(*(_93260_key))._field_reference,(*((*(_93260_key))._field_kind))._field_kind,_93249_d,(*((*this)._field_rang))._field_in_token);
}



inline void _1e58b019d_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _228d7aadb_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_229d681e3_Slc> _95117_slc = (*((*((*this)._field_d))._field_kind))._method_slc();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),(*(_95117_slc))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_95117_slc))._field_elem);
}



inline void _1e58b019d_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _228d7aadb_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_229d681e3_Arr> _96417_arr = (*((*((*this)._field_d))._field_kind))._method_arr();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),(*(_96417_arr))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_96417_arr))._field_elem);
}



inline void _1e58b019d_RangeChecker::_method_check_map_key_a(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _228d7aadb_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	jule::Ptr<_229d681e3_Map> _97617_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),(*(_97617_m))._field_key));
	jule::Ptr<_229d70d33_Data> _98017_d = jule::new_ptr<_229d70d33_Data>((*((*this)._field_d)));
	(*(_98017_d))._field_kind=(*(_97617_m))._field_key;
	(*this)._method_check_range_expr_validity(_98017_d,(*((*this)._field_kind))._field_key_a,(*(_97617_m))._field_key);
}



inline void _1e58b019d_RangeChecker::_method_check_map_key_b(void) {
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _228d7aadb_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_229d681e3_Map> _99117_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),(*(_99117_m))._field_val));
	jule::Ptr<_229d70d33_Data> _99517_d = jule::new_ptr<_229d70d33_Data>((*((*this)._field_d)));
	(*(_99517_d))._field_kind=(*(_99117_m))._field_val;
	(*this)._method_check_range_expr_validity(_99517_d,(*((*this)._field_kind))._field_key_b,(*(_99117_m))._field_val);
}



inline void _1e58b019d_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _1e58b019d_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _228d7aadb_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _1e58b019d_RangeChecker::_method_check(void) {
	{
		
		if ((*((*((*this)._field_d))._field_kind))._field_variadic) {
			_case_begin_5074139008:;
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_5074140176:;
			{
				(*this)._method_check_slice();
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_5074140272:;
			{
				(*this)._method_check_array();
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_map() != nullptr) {
			_case_begin_5074135968:;
			{
				(*this)._method_check_map();
				return true;
			}
		}
		else {
			_case_begin_5074135664:;
			{
				jule::Ptr<_229d681e3_Prim> _103817_prim = (*((*((*this)._field_d))._field_kind))._method_prim();
				if ((_103817_prim != nullptr) && (*(_103817_prim))._method_is_str()) {
					(*this)._method_check_str();
					return true;
				}
			}
		}
		_match_end_5074135568:;
	}
	(*((*((*this)._field_sc))._field_s))._method_push_err((*((*this)._field_rang))._field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>());
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b019d_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _229d56533_SymbolTable::_method_find_package(jule::Str _2535_ident) {
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_5074215024:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _229d56533_pkg = *it;
			{
				if ((*(_229d56533_pkg))._field_ident == _2535_ident) {
					return _229d56533_pkg;
				}
			}
			_iter_next_5074215024:;
			++it;
			goto _iter_begin_5074215024;
		}
		_iter_end_5074215024:;
	}
	return nullptr;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _229d56533_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)> _3737_selector) {
	if (_3737_selector == nullptr) {
		return nullptr;
	}
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_5074215904:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _229d56533_pkg = *it;
			{
				if (_3737_selector(_229d56533_pkg)) {
					return _229d56533_pkg;
				}
			}
			_iter_next_5074215904:;
			++it;
			goto _iter_begin_5074215904;
		}
		_iter_end_5074215904:;
	}
	return nullptr;
}



inline jule::Ptr<_1e58b0654_Var> _229d56533_SymbolTable::_method_find_var(jule::Str _5231_ident,jule::Bool _5243_cpp_linked) {
	return (*this)._method___find_var(_5231_ident,_5243_cpp_linked,false);
}



inline jule::Ptr<_229d681e3_TypeAlias> _229d56533_SymbolTable::_method_find_type_alias(jule::Str _5838_ident,jule::Bool _5850_cpp_linked) {
	return (*this)._method___find_type_alias(_5838_ident,_5850_cpp_linked,false);
}



inline jule::Ptr<_228e0d025_Struct> _229d56533_SymbolTable::_method_find_struct(jule::Str _6434_ident,jule::Bool _6446_cpp_linked) {
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_5074227360:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _229d56533_s = *it;
			{
				if (((*(_229d56533_s))._field_ident == _6434_ident) && ((*(_229d56533_s))._field_cpp_linked == _6446_cpp_linked)) {
					return _229d56533_s;
				}
			}
			_iter_next_5074227360:;
			++it;
			goto _iter_begin_5074227360;
		}
		_iter_end_5074227360:;
	}
	return nullptr;
}



inline jule::Ptr<_229b6ebcb_Fn> _229d56533_SymbolTable::_method_find_fn(jule::Str _7530_ident,jule::Bool _7542_cpp_linked) {
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_5074231632:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _229d56533_f = *it;
			{
				if (((*(_229d56533_f))._field_ident == _7530_ident) && ((*(_229d56533_f))._field_cpp_linked == _7542_cpp_linked)) {
					return _229d56533_f;
				}
			}
			_iter_next_5074231632:;
			++it;
			goto _iter_begin_5074231632;
		}
		_iter_end_5074231632:;
	}
	return nullptr;
}



inline jule::Ptr<_229b5076c_Trait> _229d56533_SymbolTable::_method_find_trait(jule::Str _8633_ident) {
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_5074235392:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> _229d56533_t = *it;
			{
				if ((*(_229d56533_t))._field_ident == _8633_ident) {
					return _229d56533_t;
				}
			}
			_iter_next_5074235392:;
			++it;
			goto _iter_begin_5074235392;
		}
		_iter_end_5074235392:;
	}
	return nullptr;
}



inline jule::Ptr<_1e56be485_Enum> _229d56533_SymbolTable::_method_find_enum(jule::Str _9732_ident) {
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_5074236080:;
		if (it != expr.end()) {
			jule::Ptr<_1e56be485_Enum> _229d56533_e = *it;
			{
				if ((*(_229d56533_e))._field_ident == _9732_ident) {
					return _229d56533_e;
				}
			}
			_iter_next_5074236080:;
			++it;
			goto _iter_begin_5074236080;
		}
		_iter_end_5074236080:;
	}
	return nullptr;
}



inline jule::Ptr<_1e58b0654_Var> _229d56533_SymbolTable::_method___find_var(jule::Str _10829_ident,jule::Bool _10841_cpp_linked,jule::Bool _10859_reverse) {
	if (_10859_reverse) {
		jule::I64 _11021_i = (*this)._field_vars.len() - 1LL;
		for (; _11021_i >= 0LL; (_11021_i)--) {
			{
				jule::Ptr<_1e58b0654_Var> _11225_v = (*this)._field_vars[_11021_i];
				if (((*(_11225_v))._field_ident == _10829_ident) && ((*(_11225_v))._field_cpp_linked == _10841_cpp_linked)) {
					return _11225_v;
				}
			}
		_iter_next_5074243744:;
		}
		_iter_end_5074243744:;
	} else {
		{
			auto &expr = (*this)._field_vars;
			auto it = expr.begin();
			_iter_begin_5074242656:;
			if (it != expr.end()) {
				jule::Ptr<_1e58b0654_Var> _229d56533_v = *it;
				{
					if (((*(_229d56533_v))._field_ident == _10829_ident) && ((*(_229d56533_v))._field_cpp_linked == _10841_cpp_linked)) {
						return _229d56533_v;
					}
				}
				_iter_next_5074242656:;
				++it;
				goto _iter_begin_5074242656;
			}
			_iter_end_5074242656:;
		}
	}
	return nullptr;
}



inline jule::Ptr<_229d681e3_TypeAlias> _229d56533_SymbolTable::_method___find_type_alias(jule::Str _12736_ident,jule::Bool _12748_cpp_linked,jule::Bool _12766_reverse) {
	if (_12766_reverse) {
		jule::I64 _12921_i = (*this)._field_type_aliases.len() - 1LL;
		for (; _12921_i >= 0LL; (_12921_i)--) {
			{
				jule::Ptr<_229d681e3_TypeAlias> _13125_ta = (*this)._field_type_aliases[_12921_i];
				if (((*(_13125_ta))._field_ident == _12736_ident) && ((*(_13125_ta))._field_cpp_linked == _12748_cpp_linked)) {
					return _13125_ta;
				}
			}
		_iter_next_5074253488:;
		}
		_iter_end_5074253488:;
	} else {
		{
			auto &expr = (*this)._field_type_aliases;
			auto it = expr.begin();
			_iter_begin_5074252400:;
			if (it != expr.end()) {
				jule::Ptr<_229d681e3_TypeAlias> _229d56533_ta = *it;
				{
					if (((*(_229d56533_ta))._field_ident == _12736_ident) && ((*(_229d56533_ta))._field_cpp_linked == _12748_cpp_linked)) {
						return _229d56533_ta;
					}
				}
				_iter_next_5074252400:;
				++it;
				goto _iter_begin_5074252400;
			}
			_iter_end_5074252400:;
		}
	}
	return nullptr;
}



inline jule::Any _229d56533_SymbolTable::_method_def_by_ident(jule::Str _14831_ident,jule::Bool _14843_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_5074258528:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> _229d56533_v = *it;
			{
				if (((*(_229d56533_v))._field_ident == _14831_ident) && ((*(_229d56533_v))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_229d56533_v);
				}
			}
			_iter_next_5074258528:;
			++it;
			goto _iter_begin_5074258528;
		}
		_iter_end_5074258528:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5074261520:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeAlias> _229d56533_ta = *it;
			{
				if (((*(_229d56533_ta))._field_ident == _14831_ident) && ((*(_229d56533_ta))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_229d56533_ta);
				}
			}
			_iter_next_5074261520:;
			++it;
			goto _iter_begin_5074261520;
		}
		_iter_end_5074261520:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_5074267392:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _229d56533_s = *it;
			{
				if (((*(_229d56533_s))._field_ident == _14831_ident) && ((*(_229d56533_s))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_229d56533_s);
				}
			}
			_iter_next_5074267392:;
			++it;
			goto _iter_begin_5074267392;
		}
		_iter_end_5074267392:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_5074270064:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _229d56533_f = *it;
			{
				if (((*(_229d56533_f))._field_ident == _14831_ident) && ((*(_229d56533_f))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_229d56533_f);
				}
			}
			_iter_next_5074270064:;
			++it;
			goto _iter_begin_5074270064;
		}
		_iter_end_5074270064:;
	}
	if (_14843_cpp_linked) {
		return jule::Any(nullptr);
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_5074273312:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> _229d56533_t = *it;
			{
				if ((*(_229d56533_t))._field_ident == _14831_ident) {
					return jule::Any(_229d56533_t);
				}
			}
			_iter_next_5074273312:;
			++it;
			goto _iter_begin_5074273312;
		}
		_iter_end_5074273312:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_5074273408:;
		if (it != expr.end()) {
			jule::Ptr<_1e56be485_Enum> _229d56533_e = *it;
			{
				if ((*(_229d56533_e))._field_ident == _14831_ident) {
					return jule::Any(_229d56533_e);
				}
			}
			_iter_next_5074273408:;
			++it;
			goto _iter_begin_5074273408;
		}
		_iter_end_5074273408:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _229d56533_SymbolTable::_method_is_duplicated_ident(jule::Uintptr _19534_itself,jule::Str _19551_ident,jule::Bool _19563_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_5074279728:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> &_229d56533_v = *it;
			{
				if (((static_cast<jule::Uintptr>(_229d56533_v) != _19534_itself) && ((*(_229d56533_v))._field_ident == _19551_ident)) && ((*(_229d56533_v))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5074279728:;
			++it;
			goto _iter_begin_5074279728;
		}
		_iter_end_5074279728:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_5074279968:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeAlias> &_229d56533_ta = *it;
			{
				if (((static_cast<jule::Uintptr>(_229d56533_ta) != _19534_itself) && ((*(_229d56533_ta))._field_ident == _19551_ident)) && ((*(_229d56533_ta))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5074279968:;
			++it;
			goto _iter_begin_5074279968;
		}
		_iter_end_5074279968:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_5074282112:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> &_229d56533_s = *it;
			{
				if (((static_cast<jule::Uintptr>(_229d56533_s) != _19534_itself) && ((*(_229d56533_s))._field_ident == _19551_ident)) && ((*(_229d56533_s))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5074282112:;
			++it;
			goto _iter_begin_5074282112;
		}
		_iter_end_5074282112:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_5074287744:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> &_229d56533_f = *it;
			{
				if (((static_cast<jule::Uintptr>(_229d56533_f) != _19534_itself) && ((*(_229d56533_f))._field_ident == _19551_ident)) && ((*(_229d56533_f))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_5074287744:;
			++it;
			goto _iter_begin_5074287744;
		}
		_iter_end_5074287744:;
	}
	if (_19563_cpp_linked) {
		return false;
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_5074290224:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> &_229d56533_t = *it;
			{
				if ((static_cast<jule::Uintptr>(_229d56533_t) != _19534_itself) && ((*(_229d56533_t))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_5074290224:;
			++it;
			goto _iter_begin_5074290224;
		}
		_iter_end_5074290224:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_5074294496:;
		if (it != expr.end()) {
			jule::Ptr<_1e56be485_Enum> &_229d56533_e = *it;
			{
				if ((static_cast<jule::Uintptr>(_229d56533_e) != _19534_itself) && ((*(_229d56533_e))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_5074294496:;
			++it;
			goto _iter_begin_5074294496;
		}
		_iter_end_5074294496:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d56533_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _229d70d33_Data::_method_is_nil(void) {
	return (*((*this)._field_kind))._method_is_nil();
}



inline jule::Bool _229d70d33_Data::_method_is_void(void) {
	return (*((*this)._field_kind))._method_void();
}



inline jule::Bool _229d70d33_Data::_method_is_const(void) {
	return (*this)._field_constant != nullptr;
}



inline jule::Bool _229d70d33_Data::_method_good_operand(jule::Ptr<_229d70d33_Data>& _30336_other) {
	return ((((*((*(_30336_other))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_30336_other))._field_kind))._method_prim()))._method_is_any()))) && ((*((*(_30336_other))._field_kind))._method_trt() == nullptr)) && (!((*((*this)._field_kind))._method_is_nil()));
}







std::ostream &operator<<(std::ostream &_Stream, const _229d70d33_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d70d33_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _229d70d33_Eval::_method_push_err(_228d7aadb_Token _33027_token,jule::Str _33041_fmt,jule::Slice<jule::Any> _33054_args) {
	(*((*this)._field_s))._method_push_err(_33027_token,_33041_fmt,_33054_args);
}



inline void _229d70d33_Eval::_method_push_suggestion(jule::Str _33534_fmt,jule::Slice<jule::Any> _33547_args) {
	(*((*this)._field_s))._method_push_suggestion(_33534_fmt,_33547_args);
}



inline void _229d70d33_Eval::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _229d70d33_Eval::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Bool _229d70d33_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _229d70d33_Eval::_method_is_global(void) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e538b460_Sema>>()) {
			_case_begin_5074320400:;
			{
				return true;
			}
		}
		else {
			_case_begin_5074320864:;
			{
				return false;
			}
		}
		_match_end_5074320608:;
	}
}



inline void _229d70d33_Eval::_method_apply_numeric_prefix(jule::Ptr<_229d70d33_Data>& _35344_d) {
	if ((((_35344_d == nullptr) || ((*(_35344_d))._field_cast_kind != nullptr)) || (!((*(_35344_d))._method_is_const()))) || ((*((*(_35344_d))._field_kind))._method_prim() == nullptr)) {
		return;
	}
	if (((*this)._field_prefix == nullptr) || ((*((*this)._field_prefix))._method_prim() == nullptr)) {
		return;
	}
	jule::Str _36113_pk = (*((*((*this)._field_prefix))._method_prim()))._field_kind;
	{
		
		if (_1e860322e_is_float(_36113_pk)) {
			_case_begin_5074331440:;
			{
				(*(_35344_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_35344_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_35344_d))._field_constant))._method_as_f64()));
			}
		}
		else if (_1e860322e_is_sig_int(_36113_pk)) {
			_case_begin_5074331536:;
			{
				if ((!(_1e58b019d_int_assignable(_36113_pk,_35344_d)))) {
					goto _match_end_5074331248;
				}
				(*(_35344_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_35344_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_35344_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1e860322e_is_unsig_int(_36113_pk)) {
			_case_begin_5074331648:;
			{
				if ((!(_1e58b019d_int_assignable(_36113_pk,_35344_d)))) {
					goto _match_end_5074331248;
				}
				(*(_35344_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_35344_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_35344_d))._field_constant))._method_as_u64()));
			}
		}
		_match_end_5074331248:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_lit_nil(void) {
	jule::Ptr<_1e856e8a4_Const> _38717_constant = _1e856e8a4_Const::_static_method_new_nil();
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),nullptr)),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_38717_constant),false,_38717_constant));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_lit_str(jule::Ptr<_228d31971_LitExpr>& _39823_l) {
	jule::Str _39917_s = (*(_39823_l))._field_value.slice(1LL,(*(_39823_l))._field_value.len() - 1LL);
	if (_228d7aadb_is_raw_str((*(_39823_l))._field_value)) {
		_39917_s=_1e86ab2b5_to_raw_str(static_cast<jule::Slice<jule::U8>>(_39917_s));
	} else {
		_39917_s=_1e86ab2b5_to_str(static_cast<jule::Slice<jule::U8>>(_39917_s));
	}
	jule::Ptr<_1e856e8a4_Const> _40517_constant = _1e856e8a4_Const::_static_method_new_str(_39917_s);
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_40517_constant),false,_40517_constant));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_lit_bool(jule::Ptr<_228d31971_LitExpr>& _41924_l) {
	jule::Ptr<_1e856e8a4_Const> _42017_constant = _1e856e8a4_Const::_static_method_new_bool((*(_41924_l))._field_value == jule::Str("true", 4));
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_42017_constant),false,_42017_constant));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_lit_rune(jule::Ptr<_228d31971_LitExpr>& _43324_l) {
	
	
	jule::Str _43713_lt = (*(_43324_l))._field_value.slice(1LL,(*(_43324_l))._field_value.len() - 1LL);
	jule::I32 _43813_r = _1e86ab2b5_to_rune(static_cast<jule::Slice<jule::U8>>(_43713_lt));
	jule::Ptr<_229d70d33_Data> _43917_data = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,_1e856e8a4_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_43813_r)))));
	jule::Bool _44613_is_ascii = _1e86ab2b5_is_ascii(_43813_r);
	if (_44613_is_ascii) {
		(*(_43917_data))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u8", 2))));
	} else {
		(*(_43917_data))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i32", 3))));
	}
	(*(_43917_data))._field_model=jule::Any(jule::new_struct<_1e5870218_RuneExprModel>(new( std::nothrow ) _1e5870218_RuneExprModel(_43813_r)));
	(*(_43917_data))._field_is_rune=true;
	return _43917_data;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_lit_float(jule::Ptr<_228d31971_LitExpr>& _46225_l) {
	
	jule::F64 _46514_f;
	std::tie(_46514_f,std::ignore) = _2284c0eac_parse_float((*(_46225_l))._field_value,64LL);
	jule::Ptr<_1e856e8a4_Const> _46617_constant = _1e856e8a4_Const::_static_method_new_f64(_46514_f);
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_46617_constant),false,_46617_constant));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_lit_int(jule::Ptr<_228d31971_LitExpr>& _48027_l) {
	
	jule::Str _48317_lit = (*(_48027_l))._field_value;
	jule::Int _48417_base = 0LL;
	{
		
		if (_48317_lit.has_prefix(jule::Str("0x", 2))) {
			_case_begin_5074393152:;
			{
				_48317_lit=_48317_lit.slice(2LL);
				_48417_base=16LL;
			}
		}
		else if (_48317_lit.has_prefix(jule::Str("0b", 2))) {
			_case_begin_5074393248:;
			{
				_48317_lit=_48317_lit.slice(2LL);
				_48417_base=2LL;
			}
		}
		else if (_48317_lit.has_prefix(jule::Str("0o", 2))) {
			_case_begin_5074393344:;
			{
				_48317_lit=_48317_lit.slice(2LL);
				_48417_base=8LL;
			}
		}
		else if ((_48317_lit[0LL] == '0') && (_48317_lit.len() > 1LL)) {
			_case_begin_5074392304:;
			{
				_48317_lit=_48317_lit.slice(1LL);
				_48417_base=8LL;
			}
		}
		else {
			_case_begin_5074392000:;
			{
				_48417_base=10LL;
			}
		}
		_match_end_5074391888:;
	}
	jule::Ptr<_229d70d33_Data> _50717_d = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1e856e8a4_Const>()));
	jule::I64 _51314_sig;
	jule::Int _51319_err;
	std::tie(_51314_sig,_51319_err) = _2277861c9_parse_int(_48317_lit,_48417_base,64LL);
	if (_51319_err == 0LLU) {
		(*(_50717_d))._field_constant=_1e856e8a4_Const::_static_method_new_i64(_51314_sig);
		(*(_50717_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3))));
	} else {
		jule::U64 _52018_unsig;
		jule::Int _52025_err;
		std::tie(_52018_unsig,_52025_err) = _2277861c9_parse_uint(_48317_lit,_48417_base,64LL);
		if (_52025_err != 0LLU) {
			(*this)._method_push_err((*(_48027_l))._field_token,jule::Str("arithmetic value overflow: this value too big", 45),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>());
		}
		(*(_50717_d))._field_constant=_1e856e8a4_Const::_static_method_new_u64(_52018_unsig);
		(*(_50717_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("uint", 4))));
	}
	(*(_50717_d))._field_model=jule::Any((*(_50717_d))._field_constant);
	return _50717_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_lit_num(jule::Ptr<_228d31971_LitExpr>& _53627_l) {
	{
		
		if (_228d7aadb_is_float((*(_53627_l))._field_value)) {
			_case_begin_5074419984:;
			{
				return (*this)._method_lit_float(_53627_l);
			}
		}
		else {
			_case_begin_5074417984:;
			{
				return (*this)._method_lit_int(_53627_l);
			}
		}
		_match_end_5074417808:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_lit(jule::Ptr<_228d31971_LitExpr> _54327_lit) {
	{
		
		if ((*(_54327_lit))._method_is_nil()) {
			_case_begin_5074424944:;
			{
				return (*this)._method_lit_nil();
			}
		}
		else if (_228d7aadb_is_str((*(_54327_lit))._field_value)) {
			_case_begin_5074425040:;
			{
				return (*this)._method_lit_str(_54327_lit);
			}
		}
		else if (_228d7aadb_is_bool((*(_54327_lit))._field_value)) {
			_case_begin_5074424368:;
			{
				return (*this)._method_lit_bool(_54327_lit);
			}
		}
		else if (_228d7aadb_is_rune((*(_54327_lit))._field_value)) {
			_case_begin_5074424464:;
			{
				return (*this)._method_lit_rune(_54327_lit);
			}
		}
		else if (_228d7aadb_is_num((*(_54327_lit))._field_value)) {
			_case_begin_5074424560:;
			{
				return (*this)._method_lit_num(_54327_lit);
			}
		}
		else {
			_case_begin_5074423360:;
			{
				return nullptr;
			}
		}
		_match_end_5074423184:;
	}
}



inline jule::Any _229d70d33_Eval::_method_find_builtins(jule::Str _55432_ident) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e53308ee_ImportInfo>>()) {
			_case_begin_5074434640:;
			{
				jule::Any _55721_def = _229d70d33_find_builtins_import(_55432_ident,(*this)._field_lookup.operator jule::Ptr<_1e53308ee_ImportInfo>());
				if (_55721_def != nullptr) {
					return _55721_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e538b460_Sema>>()) {
			_case_begin_5074434736:;
			{
				jule::Any _56321_def = _229d70d33_find_builtins_sema(_55432_ident,(*this)._field_lookup.operator jule::Ptr<_1e538b460_Sema>());
				if (_56321_def != nullptr) {
					return _56321_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5074434832:;
			{
				jule::Any _56921_def = _229d70d33_find_builtins_sema(_55432_ident,(*((*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>()))._field_s);
				if (_56921_def != nullptr) {
					return _56921_def;
				}
			}
		}
		_match_end_5074434240:;
	}
	return ((jule::Any((*this)._field_dis_builtin)) ? (jule::Any(nullptr)) : (_1e614d809_find_builtin_def(_55432_ident)));
}



inline jule::Any _229d70d33_Eval::_method_get_def(jule::Str _57826_ident,jule::Bool _57838_cpp_linked) {
	if ((!(_57838_cpp_linked))) {
		jule::Ptr<_1e56be485_Enum> _58021_enm = (*this)._field_lookup.get()._method_find_enum(_57826_ident);
		if (_58021_enm != nullptr) {
			return jule::Any(_58021_enm);
		}
	}
	jule::Ptr<_1e58b0654_Var> _58617_v = (*this)._field_lookup.get()._method_find_var(_57826_ident,_57838_cpp_linked);
	if (_58617_v != nullptr) {
		return jule::Any(_58617_v);
	}
	jule::Ptr<_229b6ebcb_Fn> _59117_f = (*this)._field_lookup.get()._method_find_fn(_57826_ident,_57838_cpp_linked);
	if (_59117_f != nullptr) {
		return jule::Any(_59117_f);
	}
	jule::Ptr<_228e0d025_Struct> _59617_s = (*this)._field_lookup.get()._method_find_struct(_57826_ident,_57838_cpp_linked);
	if (_59617_s != nullptr) {
		return jule::Any(_59617_s);
	}
	jule::Ptr<_229d681e3_TypeAlias> _60117_ta = (*this)._field_lookup.get()._method_find_type_alias(_57826_ident,_57838_cpp_linked);
	if (_60117_ta != nullptr) {
		return jule::Any(_60117_ta);
	}
	return (*this)._method_find_builtins(_57826_ident);
}



inline void _229d70d33_Eval::_method_push_reference(jule::Ptr<_228d6ecab_ReferenceStack>& _60938_references) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5074469136:;
			{
				jule::Ptr<_1e56c3885_ScopeChecker> _61221_sc = (*((*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>()))._method_get_root();
				if ((!((*(_60938_references))._method_exist_1((*(_61221_sc))._field_owner)))) {
					(*(_60938_references))._method_push(jule::Any((*(_61221_sc))._field_owner));
				}
			}
		}
		else {
			_case_begin_5074467296:;
			{
				if (((*this)._field_owner != nullptr) && (!((*(_60938_references))._method_exist_0((*this)._field_owner)))) {
					(*(_60938_references))._method_push(jule::Any((*this)._field_owner));
				}
			}
		}
		_match_end_5074467216:;
	}
}



inline void _229d70d33_Eval::_method_push_reference_to_fn(jule::Ptr<_229b6ebcb_FnIns>& _62444_f) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5074485280:;
			{
				jule::Ptr<_1e56c3885_ScopeChecker> _62721_sc = (*((*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_62721_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_62721_sc))._field_owner))._field_references))._method_exist_1(_62444_f)))) {
					(*((*((*(_62721_sc))._field_owner))._field_refers))._method_push(jule::Any(_62444_f));
				}
			}
		}
		_match_end_5074486352:;
	}
	(*this)._method_push_reference((*(_62444_f))._field_references);
}



inline void _229d70d33_Eval::_method_push_reference_to_var(jule::Ptr<_1e58b0654_Var>& _63545_v) {
	if ((*(_63545_v))._field_references == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5074499168:;
			{
				jule::Ptr<_1e56c3885_ScopeChecker> _64221_sc = (*((*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_64221_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_64221_sc))._field_owner))._field_references))._method_exist_0(_63545_v)))) {
					(*((*((*(_64221_sc))._field_owner))._field_refers))._method_push(jule::Any(_63545_v));
				}
			}
		}
		_match_end_5074499584:;
	}
	(*this)._method_push_reference((*(_63545_v))._field_references);
}



inline void _229d70d33_Eval::_method_push_reference_to_struct(jule::Ptr<_228e0d025_StructIns>& _65148_s) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5074510768:;
			{
				jule::Ptr<_1e56c3885_ScopeChecker> _65421_sc = (*((*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_65421_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_65421_sc))._field_owner))._field_references))._method_exist_2(_65148_s)))) {
					(*((*((*(_65421_sc))._field_owner))._field_refers))._method_push(jule::Any(_65148_s));
				}
			}
		}
		_match_end_5074510672:;
	}
	(*this)._method_push_reference((*(_65148_s))._field_references);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method___eval_enum(jule::Ptr<_1e56be485_Enum> _66230_enm) {
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_66230_enm)),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),true,nullptr));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_enum(jule::Ptr<_1e56be485_Enum> _67432_enm,_228d7aadb_Token _67444_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_67432_enm))._field_public,(*(_67432_enm))._field_token)))) {
		(*this)._method_push_err(_67444_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_67432_enm))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	return (*this)._method___eval_enum(_67432_enm);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method___eval_struct(jule::Ptr<_228e0d025_StructIns> _68432_s) {
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_68432_s)),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_68432_s),true,nullptr));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_struct(jule::Ptr<_228e0d025_StructIns> _69734_s,_228d7aadb_Token _69749_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_69734_s))._field_decl))._field_public,(*((*(_69734_s))._field_decl))._field_token)))) {
		(*this)._method_push_err(_69749_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_69734_s))._field_decl))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*((*(_69734_s))._field_decl))._field_directives,_69749_error_token);
	return (*this)._method___eval_struct(_69734_s);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_fn_ins(jule::Ptr<_229b6ebcb_FnIns> _70930_f) {
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_70930_f)),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_70930_f),false,nullptr));
}



inline void _229d70d33_Eval::_method_check_deprecated(jule::Slice<jule::Ptr<_228d31971_Directive>>& _72240_directives,_228d7aadb_Token _72282_tok) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	jule::Ptr<_228d31971_Directive> _72713_d = _229d70d33_find_directive(_72240_directives,jule::Str("deprecated", 10));
	if (_72713_d != nullptr) {
		if ((*(_72713_d))._field_args.len() == 0LL) {
			(*this)._method_push_err(_72282_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("this code is deprecated", 23))}));
		} else {
			(*this)._method_push_err(_72282_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any((*(_72713_d))._field_args[0LL]._field_kind)}));
		}
		(*this)._method_push_suggestion(jule::Str("use Unsafe Jule for deprecated codes or replace to successor", 60),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_fn(jule::Ptr<_229b6ebcb_Fn> _73830_f,_228d7aadb_Token _73838_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_73830_f))._field_public,(*(_73830_f))._field_token)))) {
		(*this)._method_push_err(_73838_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_73830_f))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_73830_f))._field_directives,_73838_error_token);
	jule::Ptr<_229b6ebcb_FnIns> _74717_ins = (*(_73830_f))._method_instance();
	(*this)._method_push_reference_to_fn(_74717_ins);
	return (*this)._method_eval_fn_ins(_74717_ins);
}



inline void _229d70d33_Eval::_method_push_illegal_cycle_error(jule::Ptr<_1e58b0654_Var>& _75244_v1,jule::Ptr<_1e58b0654_Var>& _75255_v2,jule::Str& _75270_message) {
	
	jule::Str _75513_refers_to = _2276bcb9e_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_75244_v1))._field_ident),jule::Any((*(_75255_v2))._field_ident)}));
	_75270_message=((_228d6ecab_str_repeat(jule::Str(" ", 1),4LL) + _75513_refers_to) + jule::Str("\n", 1)) + _75270_message;
}



inline jule::Bool _229d70d33_Eval::_method_check_cross_cycle(jule::Ptr<_1e58b0654_Var>& _75937_v,jule::Str& _75951_message) {
	{
		auto &expr = (*(_75937_v))._field_depends;
		auto it = expr.begin();
		_iter_begin_5074583952:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> &_229d70d33_d = *it;
			{
				if (_229d70d33_d == (*this)._field_owner) {
					(*this)._method_push_illegal_cycle_error(_75937_v,_229d70d33_d,_75951_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_229d70d33_d,_75951_message)))) {
					(*this)._method_push_illegal_cycle_error(_75937_v,_229d70d33_d,_75951_message);
					return false;
				}
			}
			_iter_next_5074583952:;
			++it;
			goto _iter_begin_5074583952;
		}
		_iter_end_5074583952:;
	}
	return true;
}



inline jule::Bool _229d70d33_Eval::_method_check_illegal_cycles(jule::Ptr<_1e58b0654_Var>& _77844_v,_228d7aadb_Token _77853_decl_token) {
	jule::Bool _77874_ok = jule::Bool();
	if ((*this)._field_owner == nullptr) {
		_77874_ok = true;
		return _77874_ok;
	}
	if ((*this)._field_owner == _77844_v) {
		(*this)._method_push_err((*((*this)._field_owner))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_owner))._field_ident)}));
		_77874_ok = false;
		return _77874_ok;
	}
	jule::Str _79017_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_77844_v,_79017_message)))) {
		jule::Str _79321_err_msg = _79017_message;
		_79017_message=jule::Str();
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_77844_v,_79017_message);
		_79321_err_msg=_79321_err_msg + _79017_message;
		(*this)._method_push_err(_77853_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_79321_err_msg)}));
		_77874_ok = false;
		return _77874_ok;
	}
	(*((*this)._field_owner))._field_depends = jule::alloc_for_append((*((*this)._field_owner))._field_depends,1);(*((*this)._field_owner))._field_depends.push(_77844_v);
	_77874_ok = true;
	return _77874_ok;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_var(jule::Ptr<_1e58b0654_Var> _80531_v,_228d7aadb_Token _80540_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_80531_v))._field_public,(*(_80531_v))._field_token)))) {
		(*this)._method_push_err(_80540_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_80531_v))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_80531_v))._field_directives,_80540_error_token);
	(*(_80531_v))._field_used=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e538b460_Sema>>()) {
			_case_begin_5074612208:;
			{
				jule::Bool _81917_ok = (*this)._method_check_illegal_cycles(_80531_v,_80540_error_token);
				if ((!(_81917_ok))) {
					return nullptr;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5074612304:;
			{
				if ((!((*(_80531_v))._field_reference)) || (*this)._method_is_unsafe()) {
					goto _match_end_5074611776;
				}
				jule::Ptr<_1e56c3885_ScopeChecker> _82921_s = (*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>();
				while (((*(_82921_s))._field_owner == nullptr) && ((*(_82921_s))._field_parent != nullptr)) {
					{
						_82921_s=(*(_82921_s))._field_parent;
					}
				_iter_next_5074616416:;
				}
				_iter_end_5074616416:;
				if ((((*(_82921_s))._field_owner != nullptr) && (*((*(_82921_s))._field_owner))._field_anon) && ((*(_80531_v))._field_scope != (*((*(_82921_s))._field_owner))._field_scope)) {
					(*this)._method_push_err(_80540_error_token,jule::Str("anonymous functions cannot access to reference definition @ of parent scope", 75),jule::Slice<jule::Any>({jule::Any((*(_80531_v))._field_ident)}));
				}
			}
		}
		_match_end_5074611776:;
	}
	(*this)._method_push_reference_to_var(_80531_v);
	if ((!((*(_80531_v))._field_cpp_linked)) && (((*(_80531_v))._field_value == nullptr) || ((*((*(_80531_v))._field_value))._field_data == nullptr))) {
		if ((*(_80531_v))._field_constant) {
			(*((*this)._field_s))._method_check_type_var(_80531_v,(*this)._field_s);
			if ((*((*(_80531_v))._field_value))._field_data == nullptr) {
				return nullptr;
			}
		}
	}
	if (((*(_80531_v))._field_kind == nullptr) || ((*((*(_80531_v))._field_kind))._field_kind == nullptr)) {
		if ((*(_80531_v))._field_scope != nullptr) {
			return nullptr;
		}
		(*((*this)._field_s))._method_check_type_var(_80531_v,(*this)._field_lookup);
		if (((*(_80531_v))._field_kind == nullptr) || ((*((*(_80531_v))._field_kind))._field_kind == nullptr)) {
			return nullptr;
		}
	}
	jule::Ptr<_229d70d33_Data> _86917_d = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data((*((*(_80531_v))._field_kind))._field_kind,jule::Ptr<_229d681e3_TypeKind>(),(*(_80531_v))._field_mutable,(*(_80531_v))._field_reference,(!((*(_80531_v))._field_constant)),jule::Bool(),jule::Any(_80531_v),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
	if (((!((*(_80531_v))._field_cpp_linked)) && (*(_80531_v))._method_is_initialized()) && ((*((*(_80531_v))._field_value))._field_data != nullptr)) {
		(*(_86917_d))._field_is_rune=(*((*((*(_80531_v))._field_value))._field_data))._field_is_rune;
	}
	if ((*(_80531_v))._field_constant && ((*((*((*(_80531_v))._field_value))._field_data))._field_constant != nullptr)) {
		(*(_86917_d))._field_constant=jule::new_ptr<_1e856e8a4_Const>((*((*((*((*(_80531_v))._field_value))._field_data))._field_constant)));
		(*(_86917_d))._field_model=jule::Any((*(_86917_d))._field_constant);
	}
	if ((*((*(_86917_d))._field_kind))._method_fnc() != nullptr) {
		jule::Ptr<_229b6ebcb_FnIns> _88721_f = (*((*(_86917_d))._field_kind))._method_fnc();
		if ((*(_88721_f))._field_decl != nullptr) {
			(*((*(_88721_f))._field_decl))._field_ident=(*(_80531_v))._field_ident;
		}
	}
	return _86917_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_type_alias(jule::Ptr<_229d681e3_TypeAlias> _89838_ta,_228d7aadb_Token _89854_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_89838_ta))._field_public,(*(_89838_ta))._field_token)))) {
		(*this)._method_push_err(_89854_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_89838_ta))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_89838_ta))._field_used=true;
	jule::Trait<_229d681e3_Kind> _90717_kind = (*((*((*(_89838_ta))._field_kind))._field_kind))._field_kind;
	{
		auto &_match_expr{ _90717_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_StructIns>>()) {
			_case_begin_5074663408:;
			{
				return (*this)._method___eval_struct(_90717_kind.operator jule::Ptr<_228e0d025_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56be485_Enum>>()) {
			_case_begin_5074663504:;
			{
				return (*this)._method___eval_enum(_90717_kind.operator jule::Ptr<_1e56be485_Enum>());
			}
		}
		else {
			_case_begin_5074662928:;
			{
				jule::Ptr<_229d70d33_Data> _91621_d = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind((((*(_89838_ta))._field_cpp_linked) ? ((*(_89838_ta))._field_ident) : ((*((*((*(_89838_ta))._field_kind))._field_kind))._field_cpp_ident)),(*(_89838_ta))._field_generic,jule::Bool(),(*((*((*(_89838_ta))._field_kind))._field_kind))._field_kind)),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ptr<_1e856e8a4_Const>()));
				(*(_91621_d))._field_model=jule::Any((*(_91621_d))._field_kind);
				return _91621_d;
			}
		}
		_match_end_5074662848:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_def(jule::Any _93031_def,_228d7aadb_Token _93041_ident) {
	{
		auto &_match_expr{ _93031_def };
		
		if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5074678320:;
			{
				return (*this)._method_eval_var(_93031_def.operator jule::Ptr<_1e58b0654_Var>(),_93041_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56be485_Enum>>()) {
			_case_begin_5074678528:;
			{
				return (*this)._method_eval_enum(_93031_def.operator jule::Ptr<_1e56be485_Enum>(),_93041_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5074678624:;
			{
				return (*this)._method_eval_struct((*(_93031_def.operator jule::Ptr<_228e0d025_Struct>()))._method_instance(),_93041_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229b6ebcb_Fn>>()) {
			_case_begin_5074678064:;
			{
				return (*this)._method_eval_fn(_93031_def.operator jule::Ptr<_229b6ebcb_Fn>(),_93041_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229b6ebcb_FnIns>>()) {
			_case_begin_5074678160:;
			{
				return (*this)._method_eval_fn_ins(_93031_def.operator jule::Ptr<_229b6ebcb_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeAlias>>()) {
			_case_begin_5074676112:;
			{
				return (*this)._method_eval_type_alias(_93031_def.operator jule::Ptr<_229d681e3_TypeAlias>(),_93041_ident);
			}
		}
		else {
			_case_begin_5074675808:;
			{
				(*this)._method_push_err(_93041_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_93041_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5074675600:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_ident(jule::Ptr<_228d31971_IdentExpr> _95629_ident) {
	jule::Any _95717_def = (*this)._method_get_def((*(_95629_ident))._field_ident,(*(_95629_ident))._field_cpp_linked);
	return (*this)._method_eval_def(_95717_def,(*(_95629_ident))._field_token);
}



inline void _229d70d33_Eval::_method_eval_unary_minus(jule::Ptr<_229d70d33_Data>& _96136_d,_228d7aadb_Token& _96151_op) {
	jule::Ptr<_229d681e3_Prim> _96213_t = (*((*(_96136_d))._field_kind))._method_prim();
	if ((_96213_t == nullptr) || (!(_1e860322e_is_num((*(_96213_t))._method_to_str())))) {
		_96136_d=nullptr;
		return;
	}
	if ((*(_96136_d))._method_is_const()) {
		{
			
			if ((*((*(_96136_d))._field_constant))._method_is_f64()) {
				_case_begin_5074701072:;
				{
					(*((*(_96136_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*(_96136_d))._field_constant))._method_read_f64()))));
				}
			}
			else if ((*((*(_96136_d))._field_constant))._method_is_i64()) {
				_case_begin_5074701184:;
				{
					(*((*(_96136_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*(_96136_d))._field_constant))._method_as_f64()))));
				}
			}
			else if ((*((*(_96136_d))._field_constant))._method_is_u64()) {
				_case_begin_5074701296:;
				{
					(*((*(_96136_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*(_96136_d))._field_constant))._method_as_f64()))));
				}
			}
			_match_end_5074700832:;
		}
		_229d70d33_normalize_type(_96136_d);
	}
	(*(_96136_d))._field_lvalue=false;
	(*(_96136_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(jule::new_ptr<_229d70d33_Data>((*(_96136_d))),_96151_op)));
}



inline void _229d70d33_Eval::_method_eval_unary_plus(jule::Ptr<_229d70d33_Data>& _98435_d,_228d7aadb_Token& _98450_op) {
	jule::Ptr<_229d681e3_Prim> _98513_t = (*((*(_98435_d))._field_kind))._method_prim();
	if ((_98513_t == nullptr) || (!(_1e860322e_is_num((*(_98513_t))._method_to_str())))) {
		_98435_d=nullptr;
		return;
	}
	if ((*(_98435_d))._method_is_const()) {
		{
			
			if ((*((*(_98435_d))._field_constant))._method_is_f64()) {
				_case_begin_5074721856:;
				{
					(*((*(_98435_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*(_98435_d))._field_constant))._method_read_f64()))));
				}
			}
			else if ((*((*(_98435_d))._field_constant))._method_is_i64()) {
				_case_begin_5074721968:;
				{
					(*((*(_98435_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*(_98435_d))._field_constant))._method_as_f64()))));
				}
			}
			else if ((*((*(_98435_d))._field_constant))._method_is_u64()) {
				_case_begin_5074722080:;
				{
					(*((*(_98435_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*(_98435_d))._field_constant))._method_as_f64()))));
				}
			}
			_match_end_5074721616:;
		}
		_229d70d33_normalize_type(_98435_d);
	}
	(*(_98435_d))._field_lvalue=false;
	(*(_98435_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(jule::new_ptr<_229d70d33_Data>((*(_98435_d))),_98450_op)));
}



inline void _229d70d33_Eval::_method_eval_unary_caret(jule::Ptr<_229d70d33_Data>& _100736_d,_228d7aadb_Token& _100751_op) {
	jule::Ptr<_229d681e3_Prim> _100813_t = (*((*(_100736_d))._field_kind))._method_prim();
	if ((_100813_t == nullptr) || (!(_1e860322e_is_int((*(_100813_t))._method_to_str())))) {
		_100736_d=nullptr;
		return;
	}
	if ((*(_100736_d))._method_is_const()) {
		{
			
			if ((*((*(_100736_d))._field_constant))._method_is_i64()) {
				_case_begin_5074742848:;
				{
					(*((*(_100736_d))._field_constant))._method_set_i64(static_cast<jule::I64>((~((*((*(_100736_d))._field_constant))._method_read_i64()))));
				}
			}
			else if ((*((*(_100736_d))._field_constant))._method_is_u64()) {
				_case_begin_5074742960:;
				{
					(*((*(_100736_d))._field_constant))._method_set_u64(static_cast<jule::U64>((~((*((*(_100736_d))._field_constant))._method_read_u64()))));
				}
			}
			_match_end_5074742624:;
		}
	}
	(*(_100736_d))._field_lvalue=false;
	(*(_100736_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(jule::new_ptr<_229d70d33_Data>((*(_100736_d))),_100751_op)));
}



inline void _229d70d33_Eval::_method_eval_unary_excl(jule::Ptr<_229d70d33_Data>& _103135_d,_228d7aadb_Token& _103150_op) {
	jule::Ptr<_229d681e3_Prim> _103213_t = (*((*(_103135_d))._field_kind))._method_prim();
	if ((_103213_t == nullptr) || (!((*(_103213_t))._method_is_bool()))) {
		_103135_d=nullptr;
		return;
	}
	if ((*(_103135_d))._method_is_const()) {
		{
			
			if ((*((*(_103135_d))._field_constant))._method_is_bool()) {
				_case_begin_5074759280:;
				{
					(*((*(_103135_d))._field_constant))._method_set_bool((!((*((*(_103135_d))._field_constant))._method_read_bool())));
				}
			}
			_match_end_5074759072:;
		}
	}
	(*(_103135_d))._field_lvalue=false;
	(*(_103135_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(jule::new_ptr<_229d70d33_Data>((*(_103135_d))),_103150_op)));
}



inline void _229d70d33_Eval::_method_eval_unary_star(jule::Ptr<_229d70d33_Data>& _105239_d,_228d7aadb_Token& _105254_op) {
	(*(_105239_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(jule::new_ptr<_229d70d33_Data>((*(_105239_d))),_105254_op)));
	{
		
		if ((*((*(_105239_d))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5074770128:;
			{
				if ((!((*this)._method_is_unsafe()))) {
					(*this)._method_push_err(_105254_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				}
				jule::Ptr<_229d681e3_Ptr> _106421_t = (*((*(_105239_d))._field_kind))._method_ptr();
				if ((*(_106421_t))._method_is_unsafe()) {
					_105239_d=nullptr;
					return;
				}
				(*(_105239_d))._field_kind=(*(_106421_t))._field_elem;
			}
		}
		else if ((*((*(_105239_d))._field_kind))._method_sptr() != nullptr) {
			_case_begin_5074770224:;
			{
				(*(_105239_d))._field_kind=(*((*((*(_105239_d))._field_kind))._method_sptr()))._field_elem;
			}
		}
		else {
			_case_begin_5074769120:;
			{
				_105239_d=nullptr;
				return;
			}
		}
		_match_end_5074769040:;
	}
	(*(_105239_d))._field_constant=nullptr;
	(*(_105239_d))._field_lvalue=true;
}



inline void _229d70d33_Eval::_method_eval_unary_amper(jule::Ptr<_229d70d33_Data>& _108336_d,_228d7aadb_Token& _108351_op) {
	{
		auto &_match_expr{ (*(_108336_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_StructLitExprModel>>()) {
			_case_begin_5074786448:;
			{
				jule::Ptr<_1e5870218_StructLitExprModel> _108621_lit = (*(_108336_d))._field_model.operator jule::Ptr<_1e5870218_StructLitExprModel>();
				_229d70d33_make_struct_lit_alloc(_108336_d,_108621_lit);
			}
		}
		else {
			_case_begin_5074784272:;
			{
				{
					
					if (_229d681e3_can_get_ptr(_108336_d)) {
						_case_begin_5074786256:;
						{
							(*(_108336_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Ptr>(new( std::nothrow ) _229d681e3_Ptr((*(_108336_d))._field_kind))));
							(*(_108336_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(jule::new_ptr<_229d70d33_Data>((*(_108336_d))),_108351_op)));
						}
					}
					else {
						_case_begin_5074785424:;
						{
							_108336_d=nullptr;
						}
					}
					_match_end_5074783664:;
				}
			}
		}
		_match_end_5074784144:;
	}
	if (_108336_d != nullptr) {
		(*(_108336_d))._field_constant=nullptr;
		(*(_108336_d))._field_lvalue=false;
		(*(_108336_d))._field_mutable=true;
	}
}



inline void _229d70d33_Eval::_method_eval_unary_type_decl(jule::Ptr<_229d70d33_Data>& _111244_d,jule::Ptr<_228d31971_UnaryExpr>& _111259_u) {
	_229d681e3_TypeChecker _111317_tc = _229d681e3_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ptr<_229d681e3_Referencer>(),(*(_111259_u))._field_op,jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	{
		auto &_match_expr{ (*(_111259_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5074802896:;
			{
				(*(_111244_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_111317_tc._method_build_ptr_from_type((*(_111244_d))._field_kind)));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5074803168:;
			{
				(*(_111244_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_111317_tc._method_build_sptr_from_type((*(_111244_d))._field_kind)));
			}
		}
		else {
			_case_begin_5074796816:;
			{
				(*this)._method_push_err((*(_111259_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*(_111259_u))._field_op._field_kind),jule::Any((*((*(_111244_d))._field_kind))._method_to_str())}));
				_111244_d=nullptr;
				return;
			}
		}
		_match_end_5074798784:;
	}
	(*(_111244_d))._field_decl=true;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_unary(jule::Ptr<_228d31971_UnaryExpr> _113534_u) {
	jule::Ptr<_229d681e3_TypeKind> _113617_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_113617_prefix;
	});
	jule::Ptr<_229d70d33_Data> _114017_d = (*(this->self))._method_eval_expr_kind((*(_113534_u))._field_expr);
	if (_114017_d == nullptr) {
		return nullptr;
	}
	if ((*(_114017_d))._field_decl) {
		(*(this->self))._method_eval_unary_type_decl(_114017_d,_113534_u);
		return _114017_d;
	}
	jule::Ptr<_229d681e3_TypeKind> _115017_cast_kind = (*(_114017_d))._field_cast_kind;
	jule::Ptr<_229d681e3_TypeKind> _115113_kind = (*(_114017_d))._field_kind;
	{
		auto &_match_expr{ (*(_113534_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("-", 1)) {
			_case_begin_5074821744:;
			{
				(*(this->self))._method_eval_unary_minus(_114017_d,(*(_113534_u))._field_op);
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_5074821840:;
			{
				(*(this->self))._method_eval_unary_plus(_114017_d,(*(_113534_u))._field_op);
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_5074821936:;
			{
				(*(this->self))._method_eval_unary_caret(_114017_d,(*(_113534_u))._field_op);
			}
		}
		else if (_match_expr == jule::Str("!", 1)) {
			_case_begin_5074821088:;
			{
				(*(this->self))._method_eval_unary_excl(_114017_d,(*(_113534_u))._field_op);
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5074821184:;
			{
				(*(this->self))._method_eval_unary_star(_114017_d,(*(_113534_u))._field_op);
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5074821280:;
			{
				(*(this->self))._method_eval_unary_amper(_114017_d,(*(_113534_u))._field_op);
			}
		}
		else {
			_case_begin_5074812224:;
			{
				_114017_d=nullptr;
			}
		}
		_match_end_5074820784:;
	}
	if (_114017_d == nullptr) {
		(*(this->self))._method_push_err((*(_113534_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*(_113534_u))._field_op._field_kind),jule::Any((*(_115113_kind))._method_to_str())}));
	} else if ((*(_114017_d))._method_is_const()) {
		(*(_114017_d))._field_model=jule::Any((*(_114017_d))._field_constant);
	} else if (_115017_cast_kind != nullptr) {
		(*(_114017_d))._field_cast_kind=_115017_cast_kind;
		_229d70d33_apply_cast_kind(_114017_d);
	}
	return _114017_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_variadic(jule::Ptr<_228d31971_VariadicExpr> _117437_v) {
	if ((*(_117437_v))._field_expr == nullptr) {
		(*(this->self))._method_push_err((*(_117437_v))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229d681e3_TypeKind> _118017_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_118017_prefix;
	});
	jule::Ptr<_229d70d33_Data> _118417_d = (*(this->self))._method_eval_expr_kind((*(_117437_v))._field_expr);
	if (_118417_d == nullptr) {
		return nullptr;
	}
	if ((!((*((*(_118417_d))._field_kind))._method_variadicable()))) {
		(*(this->self))._method_push_err((*(_117437_v))._field_token,jule::Str("type @ is not variadicable", 26),jule::Slice<jule::Any>({jule::Any((*((*(_118417_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	jule::Ptr<_229d681e3_Slc> _119413_slc = (*((*(_118417_d))._field_kind))._method_slc();
	(*(_118417_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind((*((*(_119413_slc))._field_elem))._field_cpp_ident,(*((*(_119413_slc))._field_elem))._field_generic,true,(*((*(_119413_slc))._field_elem))._field_kind));
	return _118417_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_unsafe(jule::Ptr<_228d31971_UnsafeExpr> _120435_u) {
	jule::Bool _120513_unsafety = (*(this->self))._field_unsafety;
	(*(this->self))._field_unsafety=true;
	jule::Ptr<_229d70d33_Data> _120817_d = (*(this->self))._method_eval_expr_kind((*(_120435_u))._field_expr);
	(*(this->self))._field_unsafety=_120513_unsafety;
	return _120817_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_arr(jule::Ptr<_228d31971_SliceExpr> _121532_s) {
	jule::Ptr<_229d681e3_Arr> _121717_pt = (*((*(this->self))._field_prefix))._method_arr();
	jule::Ptr<_229d681e3_Arr> _121917_arr = jule::new_struct_ptr<_229d681e3_Arr>(new( std::nothrow ) _229d681e3_Arr(false,0LL,(*(_121717_pt))._field_elem));
	jule::Bool _122517_filled = false;
	if ((*(_121532_s))._field_elems.len() == 2LL) {
		{
			auto &_match_expr{ (*(_121532_s))._field_elems[1LL] };
			
			if (_match_expr.type_is<jule::Ptr<_228d31971_VariadicExpr>>()) {
				_case_begin_5074873728:;
				{
					if ((*((*(_121532_s))._field_elems[1LL].operator jule::Ptr<_228d31971_VariadicExpr>()))._field_expr != nullptr) {
						goto _match_end_5074873648;
					}
					if ((*(_121717_pt))._field_auto) {
						(*(this->self))._method_push_err((*(_121532_s))._field_token,jule::Str("auto-sized arrays cannot filled", 31),jule::Slice<jule::Any>());
						return nullptr;
					}
					_122517_filled=true;
					(*(_121532_s))._field_elems=(*(_121532_s))._field_elems.slice(0LL,1LL);
				}
			}
			_match_end_5074873648:;
		}
	}
	(*(_121917_arr))._field_n=static_cast<jule::I64>((*(_121532_s))._field_elems.len());
	if ((!((*(_121717_pt))._field_auto))) {
		if ((*(_121917_arr))._field_n > (*(_121717_pt))._field_n) {
			(*(this->self))._method_push_err((*(_121532_s))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else if ((*(_121917_arr))._field_n < (*(_121717_pt))._field_n) {
			(*(_121917_arr))._field_n=(*(_121717_pt))._field_n;
		}
	}
	jule::Ptr<_1e5870218_ArrayExprModel> _125417_model = jule::new_struct<_1e5870218_ArrayExprModel>(new( std::nothrow ) _1e5870218_ArrayExprModel(_121917_arr,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(((_122517_filled) ? (2LL) : (static_cast<jule::I64>((*(_121532_s))._field_elems.len())))))));
	jule::Ptr<_229d681e3_TypeKind> _125917_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_121917_arr))._field_elem;
	{
		auto &expr = (*(_121532_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_5074891744:;
		if (it != expr.end()) {
			jule::Any _229d70d33_elem = *it;
			{
				jule::Ptr<_229d70d33_Data> _126221_d = (*(this->self))._method_eval_expr_kind(_229d70d33_elem);
				if (_126221_d == nullptr) {
					goto _iter_next_5074891744;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_121917_arr))._field_elem,_126221_d,(*(_121532_s))._field_token);
				(*(_125417_model))._field_elems = jule::alloc_for_append((*(_125417_model))._field_elems,1);(*(_125417_model))._field_elems.push((*(_126221_d))._field_model);
			}
			_iter_next_5074891744:;
			++it;
			goto _iter_begin_5074891744;
		}
		_iter_end_5074891744:;
	}
	(*(this->self))._field_prefix=_125917_prefix;
	if (_122517_filled) {
		(*(_125417_model))._field_elems = jule::alloc_for_append((*(_125417_model))._field_elems,1);(*(_125417_model))._field_elems.push(jule::Any(nullptr));
	}
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_121917_arr)),jule::Ptr<_229d681e3_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_125417_model),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_exp_slc(jule::Ptr<_228d31971_SliceExpr> _128436_s,jule::Ptr<_229d681e3_TypeKind> _128455_elem_type) {
	jule::Ptr<_229d681e3_Slc> _128517_slc = jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc(_128455_elem_type));
	jule::Ptr<_1e5870218_SliceExprModel> _128917_model = jule::new_struct<_1e5870218_SliceExprModel>(new( std::nothrow ) _1e5870218_SliceExprModel(_128455_elem_type,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_128436_s))._field_elems.len()))));
	jule::Ptr<_229d681e3_TypeKind> _129417_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_128517_slc))._field_elem;
	{
		auto &expr = (*(_128436_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_5074910064:;
		if (it != expr.end()) {
			jule::Any _229d70d33_elem = *it;
			{
				jule::Ptr<_229d70d33_Data> _129721_d = (*(this->self))._method_eval_expr_kind(_229d70d33_elem);
				if (_129721_d == nullptr) {
					goto _iter_next_5074910064;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_128517_slc))._field_elem,_129721_d,(*(_128436_s))._field_token);
				(*(_128917_model))._field_elems = jule::alloc_for_append((*(_128917_model))._field_elems,1);(*(_128917_model))._field_elems.push((*(_129721_d))._field_model);
			}
			_iter_next_5074910064:;
			++it;
			goto _iter_begin_5074910064;
		}
		_iter_end_5074910064:;
	}
	(*(this->self))._field_prefix=_129417_prefix;
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_128517_slc)),jule::Ptr<_229d681e3_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_128917_model),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_slice_expr(jule::Ptr<_228d31971_SliceExpr> _131439_s) {
	if ((*(this->self))._field_prefix != nullptr) {
		{
			
			if ((*((*(this->self))._field_prefix))._method_arr() != nullptr) {
				_case_begin_5074921824:;
				{
					return (*(this->self))._method_eval_arr(_131439_s);
				}
			}
			else if ((*((*(this->self))._field_prefix))._method_slc() != nullptr) {
				_case_begin_5074921936:;
				{
					jule::Ptr<_229d681e3_Slc> _132125_pt = (*((*(this->self))._field_prefix))._method_slc();
					return (*(this->self))._method_eval_exp_slc(_131439_s,(*(_132125_pt))._field_elem);
				}
			}
			_match_end_5074921600:;
		}
	}
	jule::Ptr<_229d681e3_TypeKind> _132617_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	if ((*(_131439_s))._field_elems.len() == 0LL) {
		(*(this->self))._method_push_err((*(_131439_s))._field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _133417_first_elem = (*(this->self))._method_eval_expr_kind((*(_131439_s))._field_elems[0LL]);
	if (_133417_first_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _133917_d = (*(this->self))._method_eval_exp_slc(_131439_s,(*(_133417_first_elem))._field_kind);
	(*(this->self))._field_prefix=_132617_prefix;
	return _133917_d;
}



inline void _229d70d33_Eval::_method_check_integer_indexing_by_data(jule::Ptr<_229d70d33_Data>& _134554_d,_228d7aadb_Token _134564_token) {
	jule::Str _134613_err_key = _229d70d33_check_data_for_integer_indexing(_134554_d);
	{
		auto &_match_expr{ _134613_err_key };
		
		if (_match_expr == jule::Str()) {
			_case_begin_5074941504:;
			{
				return;
			}
		}
		else if (_match_expr == jule::Str("type @ is invalid for indexing", 30)) {
			_case_begin_5074941056:;
			{
				(*this)._method_push_err(_134564_token,_134613_err_key,jule::Slice<jule::Any>({jule::Any((*((*(_134554_d))._field_kind))._method_to_str())}));
			}
		}
		else {
			_case_begin_5074939712:;
			{
				(*this)._method_push_err(_134564_token,_134613_err_key,jule::Slice<jule::Any>());
			}
		}
		_match_end_5074940736:;
	}
}



inline void _229d70d33_Eval::_method_indexing_ptr(jule::Ptr<_229d70d33_Data>& _135936_d,jule::Ptr<_229d70d33_Data>& _135951_index,jule::Ptr<_228d31971_IndexingExpr>& _135966_i) {
	(*this)._method_check_integer_indexing_by_data(_135951_index,(*(_135966_i))._field_token);
	jule::Ptr<_229d681e3_Ptr> _136217_ptr = (*((*(_135936_d))._field_kind))._method_ptr();
	{
		
		if ((*(_136217_ptr))._method_is_unsafe()) {
			_case_begin_5074951712:;
			{
				(*this)._method_push_err((*(_135966_i))._field_token,jule::Str("unsafe pointers not supports indexing", 37),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((!((*this)._method_is_unsafe()))) {
			_case_begin_5074951808:;
			{
				(*this)._method_push_err((*(_135966_i))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
		}
		_match_end_5074951472:;
	}
	(*(_135936_d))._field_kind=(*(_136217_ptr))._field_elem;
}



inline void _229d70d33_Eval::_method_indexing_arr(jule::Ptr<_229d70d33_Data>& _137536_d,jule::Ptr<_229d70d33_Data>& _137551_index,jule::Ptr<_228d31971_IndexingExpr>& _137566_i) {
	jule::Ptr<_229d681e3_Arr> _137617_arr = (*((*(_137536_d))._field_kind))._method_arr();
	(*(_137536_d))._field_kind=(*(_137617_arr))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_137551_index,(*(_137566_i))._field_token);
	if ((*(_137551_index))._method_is_const() && ((*((*(_137551_index))._field_constant))._method_as_f64() >= static_cast<jule::F64>((*(_137617_arr))._field_n))) {
		(*this)._method_push_err((*(_137566_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
	}
}



inline void _229d70d33_Eval::_method_indexing_slc(jule::Ptr<_229d70d33_Data>& _138436_d,jule::Ptr<_229d70d33_Data>& _138451_index,jule::Ptr<_228d31971_IndexingExpr>& _138466_i) {
	jule::Ptr<_229d681e3_Slc> _138517_slc = (*((*(_138436_d))._field_kind))._method_slc();
	(*(_138436_d))._field_kind=(*(_138517_slc))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_138451_index,(*(_138466_i))._field_token);
	if ((!((*(_138451_index))._method_is_const()))) {
		return;
	}
	{
		auto &_match_expr{ (*(_138436_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_SliceExprModel>>()) {
			_case_begin_5074976992:;
			{
				jule::Ptr<_1e5870218_SliceExprModel> _139521_m = (*(_138436_d))._field_model.operator jule::Ptr<_1e5870218_SliceExprModel>();
				jule::F64 _139617_indx = (*((*(_138451_index))._field_constant))._method_as_f64();
				if (_139617_indx >= static_cast<jule::F64>((*(_139521_m))._field_elems.len())) {
					(*this)._method_push_err((*(_138466_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(*(_138436_d))._field_model=(*(_139521_m))._field_elems[static_cast<jule::Int>(static_cast<jule::U64>(_139617_indx))];
					(*(_138436_d))._field_decl=true;
				}
			}
		}
		_match_end_5074976832:;
	}
}



inline void _229d70d33_Eval::_method_indexing_map(jule::Ptr<_229d70d33_Data>& _140636_d,jule::Ptr<_229d70d33_Data>& _140651_index,jule::Ptr<_228d31971_IndexingExpr>& _140670_i) {
	if (_140651_index == nullptr) {
		return;
	}
	jule::Ptr<_229d681e3_Map> _141117_m = (*((*(_140636_d))._field_kind))._method_map();
	_1e58b019d_AssignTypeChecker _141217_atc = _1e58b019d_AssignTypeChecker((*this)._field_s,(*(_141117_m))._field_key,_140651_index,(*(_140670_i))._field_token);
	_141217_atc._method_check();
	(*(_140636_d))._field_kind=(*(_141117_m))._field_val;
}



inline void _229d70d33_Eval::_method_indexing_str(jule::Ptr<_229d70d33_Data>& _142336_d,jule::Ptr<_229d70d33_Data>& _142351_index,jule::Ptr<_228d31971_IndexingExpr>& _142366_i) {
	
	(*(_142336_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u8", 2))));
	if (_142351_index == nullptr) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_142351_index,(*(_142366_i))._field_token);
	if ((!((*(_142351_index))._method_is_const()))) {
		(*(_142336_d))._field_constant=nullptr;
		return;
	}
	if ((*(_142336_d))._method_is_const()) {
		_228d7aadb_Token _143917_error_token = (*(_142366_i))._field_token;
		jule::I64 _144017_j = (*((*(_142351_index))._field_constant))._method_as_i64();
		jule::Str _144117_s = (*((*(_142336_d))._field_constant))._method_read_str();
		if (static_cast<jule::Int>(_144017_j) >= _144117_s.len()) {
			(*this)._method_push_err(_143917_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else {
			(*((*(_142336_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>(_144117_s[_144017_j])));
		}
	}
}



inline void _229d70d33_Eval::_method_to_indexing(jule::Ptr<_229d70d33_Data>& _145035_d,jule::Ptr<_229d70d33_Data>& _145050_index,jule::Ptr<_228d31971_IndexingExpr>& _145069_i) {
	{
		
		if ((*((*(_145035_d))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5075017568:;
			{
				(*this)._method_indexing_ptr(_145035_d,_145050_index,_145069_i);
				return;
			}
		}
		else if ((*((*(_145035_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_5075017680:;
			{
				(*this)._method_indexing_arr(_145035_d,_145050_index,_145069_i);
				return;
			}
		}
		else if ((*((*(_145035_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_5075017792:;
			{
				(*this)._method_indexing_slc(_145035_d,_145050_index,_145069_i);
				return;
			}
		}
		else if ((*((*(_145035_d))._field_kind))._method_map() != nullptr) {
			_case_begin_5075017904:;
			{
				(*this)._method_indexing_map(_145035_d,_145050_index,_145069_i);
				return;
			}
		}
		else if ((*((*(_145035_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_5075018016:;
			{
				jule::Ptr<_229d681e3_Prim> _146917_prim = (*((*(_145035_d))._field_kind))._method_prim();
				{
					
					if ((*(_146917_prim))._method_is_str()) {
						_case_begin_5075032048:;
						{
							(*this)._method_indexing_str(_145035_d,_145050_index,_145069_i);
							return;
						}
					}
					_match_end_5075031904:;
				}
			}
		}
		_match_end_5075017296:;
	}
	(*this)._method_push_err((*(_145069_i))._field_token,jule::Str("type @ is not support indexing", 30),jule::Slice<jule::Any>({jule::Any((*((*(_145035_d))._field_kind))._method_to_str())}));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_ident_decl_from_indexing(jule::Ptr<_228d31971_IndexingExpr>& _148054_i) {
	{
		auto &_match_expr{ (*(_148054_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_IdentExpr>>()) {
			_case_begin_5075041344:;
		}
		else {
			_case_begin_5075038656:;
			{
				(*(this->self))._method_push_err((*(_148054_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5075038576:;
	}
	jule::Ptr<_228d31971_IdentTypeDecl> _148817_decl = jule::new_struct<_228d31971_IdentTypeDecl>(new( std::nothrow ) _228d31971_IdentTypeDecl(_228d7aadb_Token(),(*((*(_148054_i))._field_expr.operator jule::Ptr<_228d31971_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_228d31971_TypeDecl>>()));
	{
		auto &_match_expr{ (*(_148054_i))._field_index };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_UnaryExpr>>()) {
			_case_begin_5075046608:;
			{
				jule::Ptr<_229d70d33_Data> _149621_d = (*(this->self))._method_eval_unary((*(_148054_i))._field_index.operator jule::Ptr<_228d31971_UnaryExpr>());
				if ((!((*(_149621_d))._field_decl))) {
					(*(this->self))._method_push_err((*(_148054_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return nullptr;
				}
				(*(_148817_decl))._field_generics = jule::alloc_for_append((*(_148817_decl))._field_generics,1);(*(_148817_decl))._field_generics.push(jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_228d7aadb_Token(),jule::Any((*(_149621_d))._field_kind))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TypeDecl>>()) {
			_case_begin_5075046816:;
			{
				(*(_148817_decl))._field_generics = jule::alloc_for_append((*(_148817_decl))._field_generics,1);(*(_148817_decl))._field_generics.push((*(_148054_i))._field_index.operator jule::Ptr<_228d31971_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_IdentExpr>>()) {
			_case_begin_5075046912:;
			{
				(*(_148817_decl))._field_generics = jule::alloc_for_append((*(_148817_decl))._field_generics,1);(*(_148817_decl))._field_generics.push(jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_228d7aadb_Token(),jule::Any(jule::new_struct<_228d31971_IdentTypeDecl>(new( std::nothrow ) _228d31971_IdentTypeDecl(_228d7aadb_Token(),(*((*(_148054_i))._field_index.operator jule::Ptr<_228d31971_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_228d31971_TypeDecl>>()))))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TupleExpr>>()) {
			_case_begin_5075046352:;
			{
				{
					auto &expr = (*((*(_148054_i))._field_index.operator jule::Ptr<_228d31971_TupleExpr>()))._field_expr;
					auto it = expr.begin();
					_iter_begin_5075058288:;
					if (it != expr.end()) {
						jule::Ptr<_228d31971_Expr> _229d70d33_expr = *it;
						{
							{
								auto &_match_expr{ (*(_229d70d33_expr))._field_kind };
								
								if (_match_expr.type_is<jule::Ptr<_228d31971_TypeDecl>>()) {
									_case_begin_5075063440:;
									{
										(*(_148817_decl))._field_generics = jule::alloc_for_append((*(_148817_decl))._field_generics,1);(*(_148817_decl))._field_generics.push((*(_229d70d33_expr))._field_kind.operator jule::Ptr<_228d31971_TypeDecl>());
									}
								}
								else if (_match_expr.type_is<jule::Ptr<_228d31971_IdentExpr>>()) {
									_case_begin_5075063536:;
									{
										(*(_148817_decl))._field_generics = jule::alloc_for_append((*(_148817_decl))._field_generics,1);(*(_148817_decl))._field_generics.push(jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_228d7aadb_Token(),jule::Any(jule::new_struct<_228d31971_IdentTypeDecl>(new( std::nothrow ) _228d31971_IdentTypeDecl(_228d7aadb_Token(),(*((*(_229d70d33_expr))._field_kind.operator jule::Ptr<_228d31971_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_228d31971_TypeDecl>>()))))));
									}
								}
								_match_end_5075063360:;
							}
						}
						_iter_next_5075058288:;
						++it;
						goto _iter_begin_5075058288;
					}
					_iter_end_5075058288:;
				}
			}
		}
		else {
			_case_begin_5075043936:;
			{
				(*(this->self))._method_push_err((*(_148054_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5075043856:;
	}
	return (*(this->self))._method_eval_type(jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_228d7aadb_Token(),jule::Any(_148817_decl))));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_indexing(jule::Ptr<_228d31971_IndexingExpr> _153237_i) {
	jule::Ptr<_229d681e3_TypeKind> _153317_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_153317_prefix;
	});
	jule::Ptr<_229d70d33_Data> _153717_d = (*(this->self))._method_eval_expr_kind((*(_153237_i))._field_expr);
	if (_153717_d == nullptr) {
		return nullptr;
	}
	if ((*(_153717_d))._field_decl) {
		return (*(this->self))._method_eval_ident_decl_from_indexing(_153237_i);
	}
	_229d70d33_Data _154717_old_d = (*(_153717_d));
	jule::Ptr<_229d70d33_Data> _154917_index = (*(this->self))._method_eval_expr_kind((*(_153237_i))._field_index);
	if (_154917_index == nullptr) {
		return nullptr;
	}
	(*(_153717_d))._field_decl=false;
	(*(this->self))._method_to_indexing(_153717_d,_154917_index,_153237_i);
	if ((*(_153717_d))._method_is_const()) {
		(*(_153717_d))._field_decl=false;
		(*(_153717_d))._field_model=jule::Any((*(_153717_d))._field_constant);
	} else if ((*(_153717_d))._field_decl) {
		(*(_153717_d))._field_decl=false;
	} else {
		(*(_153717_d))._field_model=jule::Any(jule::new_struct<_1e5870218_IndexingExprModel>(new( std::nothrow ) _1e5870218_IndexingExprModel((*(_153237_i))._field_token,jule::new_ptr<_229d70d33_Data>(_154717_old_d),_154917_index)));
	}
	return _153717_d;
}



inline std::tuple<jule::Ptr<_229d70d33_Data>,jule::Ptr<_229d70d33_Data>> _229d70d33_Eval::_method_eval_slicing_exprs(jule::Ptr<_228d31971_SlicingExpr>& _158043_s) {
	jule::Ptr<_229d681e3_TypeKind> _158117_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_158117_prefix;
	});
	jule::Ptr<_229d70d33_Data> _158517_l = nullptr;
	jule::Ptr<_229d70d33_Data> _158617_r = nullptr;
	if ((*(_158043_s))._field_start != nullptr) {
		_158517_l=(*(this->self))._method_eval_expr_kind((*(_158043_s))._field_start);
		if (_158517_l != nullptr) {
			(*(this->self))._method_check_integer_indexing_by_data(_158517_l,(*(_158043_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	} else {
		_158517_l=jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1e856e8a4_Const::_static_method_new_i64(0LL)));
		(*(_158517_l))._field_model=jule::Any((*(_158517_l))._field_constant);
	}
	if ((*(_158043_s))._field_to != nullptr) {
		_158617_r=(*(this->self))._method_eval_expr_kind((*(_158043_s))._field_to);
		if (_158617_r != nullptr) {
			(*(this->self))._method_check_integer_indexing_by_data(_158617_r,(*(_158043_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	}
	return std::make_tuple(_158517_l,_158617_r);
}



inline void _229d70d33_Eval::_method_slicing_arr(jule::Ptr<_229d70d33_Data>& _161531_d) {
	jule::Ptr<_229d681e3_TypeKind> _161617_elem_type = (*((*((*(_161531_d))._field_kind))._method_arr()))._field_elem;
	(*(_161531_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc(_161617_elem_type))));
	(*(_161531_d))._field_lvalue=false;
	(*(_161531_d))._field_mutable=(*(_161531_d))._field_mutable || (!((*(_161617_elem_type))._method_mutable()));
}



inline void _229d70d33_Eval::_method_slicing_slc(jule::Ptr<_229d70d33_Data>& _162631_d) {
	(*(_162631_d))._field_lvalue=false;
}



inline void _229d70d33_Eval::_method_slicing_str(jule::Ptr<_229d70d33_Data>& _163031_d,jule::Ptr<_229d70d33_Data>& _163042_l,jule::Ptr<_229d70d33_Data>& _163053_r) {
	(*(_163031_d))._field_lvalue=false;
	(*(_163031_d))._field_mutable=true;
	if ((!((*(_163031_d))._method_is_const()))) {
		return;
	}
	if ((_163042_l == nullptr) || (_163053_r == nullptr)) {
		(*(_163031_d))._field_constant=nullptr;
		return;
	}
	if ((*(_163042_l))._method_is_const() && (*(_163053_r))._method_is_const()) {
		jule::I64 _164317_left = (*((*(_163042_l))._field_constant))._method_as_i64();
		if (_164317_left < 0LL) {
			return;
		}
		jule::Str _164817_s = (*((*(_163031_d))._field_constant))._method_read_str();
		jule::I64 _164921_right = 0LL;
		if (_163053_r == nullptr) {
			_164921_right=static_cast<jule::I64>(static_cast<jule::I64>(_164817_s.len()));
		} else {
			_164921_right=static_cast<jule::I64>((*((*(_163053_r))._field_constant))._method_as_i64());
		}
		if (_164317_left > _164921_right) {
			return;
		}
		(*((*(_163031_d))._field_constant))._method_set_str(_164817_s.slice(_164317_left,_164921_right));
		(*(_163031_d))._field_decl=true;
	} else {
		(*(_163031_d))._field_constant=nullptr;
	}
}



inline void _229d70d33_Eval::_method_check_slicing(jule::Ptr<_229d70d33_Data>& _166637_d,jule::Ptr<_229d70d33_Data>& _166648_l,jule::Ptr<_229d70d33_Data>& _166659_r,jule::Ptr<_228d31971_SlicingExpr>& _166670_s) {
	{
		
		if ((*((*(_166637_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_5075158528:;
			{
				(*this)._method_slicing_arr(_166637_d);
				return;
			}
		}
		else if ((*((*(_166637_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_5075158640:;
			{
				(*this)._method_slicing_slc(_166637_d);
				return;
			}
		}
		else if ((*((*(_166637_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_5075158752:;
			{
				jule::Ptr<_229d681e3_Prim> _167717_prim = (*((*(_166637_d))._field_kind))._method_prim();
				{
					
					if ((*(_167717_prim))._method_is_str()) {
						_case_begin_5075167664:;
						{
							(*this)._method_slicing_str(_166637_d,_166648_l,_166659_r);
							return;
						}
					}
					_match_end_5075167520:;
				}
			}
		}
		_match_end_5075158352:;
	}
	(*this)._method_push_err((*(_166670_s))._field_token,jule::Str("type @ is not support slicing", 29),jule::Slice<jule::Any>({jule::Any((*((*(_166637_d))._field_kind))._method_to_str())}));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_slicing(jule::Ptr<_228d31971_SlicingExpr> _168836_s) {
	jule::Ptr<_229d70d33_Data> _168917_d = (*(this->self))._method_eval_expr_kind((*(_168836_s))._field_expr);
	if (_168917_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _169418_l;
	jule::Ptr<_229d70d33_Data> _169425_r;
	std::tie(_169418_l,_169425_r) = (*(this->self))._method_eval_slicing_exprs(_168836_s);
	if (_169418_l == nullptr) {
		return _168917_d;
	}
	(*(_168917_d))._field_decl=false;
	(*(this->self))._method_check_slicing(_168917_d,_169418_l,_169425_r,_168836_s);
	(*(_168917_d))._field_cast_kind=nullptr;
	if ((*(_168917_d))._method_is_const()) {
		(*(_168917_d))._field_decl=false;
		(*(_168917_d))._field_model=jule::Any((*(_168917_d))._field_constant);
	} else if ((*(_168917_d))._field_decl) {
		(*(_168917_d))._field_decl=false;
	} else {
		jule::Ptr<_1e5870218_SlicingExprModel> _171321_model = jule::new_struct<_1e5870218_SlicingExprModel>(new( std::nothrow ) _1e5870218_SlicingExprModel((*(_168836_s))._field_token,(*(_168917_d))._field_model,(*(_169418_l))._field_model,jule::Any()));
		if (_169425_r != nullptr) {
			(*(_171321_model))._field_right=(*(_169425_r))._field_model;
		}
		(*(_168917_d))._field_model=jule::Any(_171321_model);
	}
	return _168917_d;
}



inline void _229d70d33_Eval::_method_cast_ptr(jule::Ptr<_229d681e3_TypeKind> _172931_t,jule::Ptr<_229d70d33_Data> _172949_d,_228d7aadb_Token _172959_error_token) {
	jule::Ptr<_229d681e3_Sptr> _173013_sptr = (*((*(_172949_d))._field_kind))._method_sptr();
	if (_173013_sptr != nullptr) {
		if ((!((*((*((*(_172931_t))._method_ptr()))._field_elem))._method_equals((*(_173013_sptr))._field_elem)))) {
			(*this)._method_push_err(_172959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_172949_d))._field_kind))._method_to_str()),jule::Any((*(_172931_t))._method_to_str())}));
		}
		return;
	}
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_172959_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_229d681e3_Prim> _174313_prim = (*((*(_172949_d))._field_kind))._method_prim();
	if (((*((*(_172949_d))._field_kind))._method_ptr() == nullptr) && ((_174313_prim == nullptr) || (!(_1e860322e_is_int((*(_174313_prim))._method_to_str()))))) {
		(*this)._method_push_err(_172959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_172949_d))._field_kind))._method_to_str()),jule::Any((*(_172931_t))._method_to_str())}));
	}
	(*(_172949_d))._field_constant=nullptr;
}



inline void _229d70d33_Eval::_method_cast_struct(jule::Ptr<_229d681e3_TypeKind> _175134_t,jule::Ptr<_229d70d33_Data> _175152_d,_228d7aadb_Token _175162_error_token) {
	jule::Ptr<_229b5076c_Trait> _175217_tr = (*((*(_175152_d))._field_kind))._method_trt();
	if (_175217_tr == nullptr) {
		(*this)._method_push_err(_175162_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_175152_d))._field_kind))._method_to_str()),jule::Any((*(_175134_t))._method_to_str())}));
		return;
	}
	jule::Ptr<_228e0d025_StructIns> _175817_s = (*(_175134_t))._method_strct();
	(*this)._method_push_reference_to_struct(_175817_s);
	if ((!((*((*(_175817_s))._field_decl))._method_is_implements(_175217_tr)))) {
		(*this)._method_push_err(_175162_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_175152_d))._field_kind))._method_to_str()),jule::Any((*(_175134_t))._method_to_str())}));
	}
}



inline void _229d70d33_Eval::_method_cast_ref(jule::Ptr<_229d681e3_TypeKind> _176631_t,jule::Ptr<_229d70d33_Data> _176649_d,_228d7aadb_Token _176659_error_token) {
	jule::Ptr<_229d681e3_Sptr> _176717_sptr = (*(_176631_t))._method_sptr();
	jule::Ptr<_229d681e3_Ptr> _176917_ptr = (*((*(_176649_d))._field_kind))._method_ptr();
	if ((_176917_ptr != nullptr) && (*((*(_176717_sptr))._field_elem))._method_equals((*(_176917_ptr))._field_elem)) {
		if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_176659_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((*((*(_176717_sptr))._field_elem))._method_strct() != nullptr) {
		(*this)._method_cast_struct((*(_176717_sptr))._field_elem,_176649_d,_176659_error_token);
		return;
	}
	(*this)._method_push_err(_176659_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_176649_d))._field_kind))._method_to_str()),jule::Any((*(_176631_t))._method_to_str())}));
}



inline void _229d70d33_Eval::_method_cast_slc(jule::Ptr<_229d681e3_TypeKind> _178831_t,jule::Ptr<_229d70d33_Data> _178849_d,_228d7aadb_Token _178859_error_token) {
	if ((*((*(_178849_d))._field_kind))._method_enm() != nullptr) {
		if (((*((*((*((*((*(_178849_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim() == nullptr) || (!((*((*((*((*((*((*(_178849_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._method_is_str()))) {
			(*this)._method_push_err(_178859_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_178849_d))._field_kind))._method_to_str()),jule::Any((*(_178831_t))._method_to_str())}));
			return;
		}
	} else if (((*((*(_178849_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_178849_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*this)._method_push_err(_178859_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_178849_d))._field_kind))._method_to_str()),jule::Any((*(_178831_t))._method_to_str())}));
		return;
	}
	_178831_t=(*((*(_178831_t))._method_slc()))._field_elem;
	jule::Ptr<_229d681e3_Prim> _180013_prim = (*(_178831_t))._method_prim();
	if ((_180013_prim == nullptr) || ((!((*(_180013_prim))._method_is_u8())) && (!((*(_180013_prim))._method_is_i32())))) {
		(*this)._method_push_err(_178859_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_178849_d))._field_kind))._method_to_str()),jule::Any((*(_178831_t))._method_to_str())}));
	}
}



inline void _229d70d33_Eval::_method_cast_str(jule::Ptr<_229d70d33_Data> _180631_d,_228d7aadb_Token _180641_error_token) {
	if ((*((*(_180631_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_1e56be485_Enum> _180821_e = (*((*(_180631_d))._field_kind))._method_enm();
		if (((*((*((*(_180821_e))._field_kind))._field_kind))._method_prim() != nullptr) && (*((*((*((*(_180821_e))._field_kind))._field_kind))._method_prim()))._method_is_str()) {
			return;
		}
	}
	if ((*((*(_180631_d))._field_kind))._method_prim() != nullptr) {
		jule::Ptr<_229d681e3_Prim> _181517_prim = (*((*(_180631_d))._field_kind))._method_prim();
		if ((!((*(_181517_prim))._method_is_u8())) && (!((*(_181517_prim))._method_is_i32()))) {
			(*this)._method_push_err(_180641_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_180631_d))._field_kind))._method_to_str())}));
		}
		return;
	}
	if ((*((*(_180631_d))._field_kind))._method_slc() == nullptr) {
		(*this)._method_push_err(_180641_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_180631_d))._field_kind))._method_to_str())}));
		return;
	}
	jule::Ptr<_229d681e3_TypeKind> _182717_t = (*((*((*(_180631_d))._field_kind))._method_slc()))._field_elem;
	jule::Ptr<_229d681e3_Prim> _182813_prim = (*(_182717_t))._method_prim();
	if ((_182813_prim == nullptr) || ((!((*(_182813_prim))._method_is_u8())) && (!((*(_182813_prim))._method_is_i32())))) {
		(*this)._method_push_err(_180641_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_180631_d))._field_kind))._method_to_str())}));
	}
}



inline void _229d70d33_Eval::_method_cast_int(jule::Ptr<_229d681e3_TypeKind> _183431_t,jule::Ptr<_229d70d33_Data> _183449_d,_228d7aadb_Token _183459_error_token) {
	if ((*(_183449_d))._method_is_const()) {
		jule::Ptr<_229d681e3_Prim> _183617_prim = (*(_183431_t))._method_prim();
		{
			
			if (_1e860322e_is_sig_int((*(_183617_prim))._field_kind)) {
				_case_begin_5075301648:;
				{
					(*((*(_183449_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_183449_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_1e860322e_is_unsig_int((*(_183617_prim))._field_kind)) {
				_case_begin_5075301760:;
				{
					(*((*(_183449_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_183449_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_5075301488:;
		}
	}
	if ((*((*(_183449_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_1e56be485_Enum> _184717_e = (*((*(_183449_d))._field_kind))._method_enm();
		if (_1e860322e_is_num((*((*((*(_184717_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	if ((*((*(_183449_d))._field_kind))._method_sptr() != nullptr) {
		jule::Ptr<_229d681e3_Prim> _185417_prim = (*(_183431_t))._method_prim();
		if ((!((*(_185417_prim))._method_is_uintptr()))) {
			(*this)._method_push_err(_183459_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_183449_d))._field_kind))._method_to_str()),jule::Any((*(_183431_t))._method_to_str())}));
		}
		return;
	}
	if ((*((*(_183449_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_229d681e3_Prim> _186117_prim = (*(_183431_t))._method_prim();
		if ((*(_186117_prim))._method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_183459_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		} else if (((((!((*(_186117_prim))._method_is_i32())) && (!((*(_186117_prim))._method_is_i64()))) && (!((*(_186117_prim))._method_is_u16()))) && (!((*(_186117_prim))._method_is_u32()))) && (!((*(_186117_prim))._method_is_u64()))) {
			(*this)._method_push_err(_183459_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_183449_d))._field_kind))._method_to_str()),jule::Any((*(_183431_t))._method_to_str())}));
		}
		return;
	}
	jule::Ptr<_229d681e3_Prim> _187213_prim = (*((*(_183449_d))._field_kind))._method_prim();
	if ((_187213_prim != nullptr) && _1e860322e_is_num((*(_187213_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_183459_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_183449_d))._field_kind))._method_to_str()),jule::Any((*(_183431_t))._method_to_str())}));
}



inline void _229d70d33_Eval::_method_cast_num(jule::Ptr<_229d681e3_TypeKind> _188031_t,jule::Ptr<_229d70d33_Data> _188049_d,_228d7aadb_Token _188059_error_token) {
	if ((*(_188049_d))._method_is_const()) {
		jule::Ptr<_229d681e3_Prim> _188217_prim = (*(_188031_t))._method_prim();
		{
			
			if (_1e860322e_is_float((*(_188217_prim))._field_kind)) {
				_case_begin_5075348304:;
				{
					(*((*(_188049_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_188049_d))._field_constant))._method_as_f64()));
				}
			}
			else if (_1e860322e_is_sig_int((*(_188217_prim))._field_kind)) {
				_case_begin_5075348416:;
				{
					(*((*(_188049_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_188049_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_1e860322e_is_unsig_int((*(_188217_prim))._field_kind)) {
				_case_begin_5075348528:;
				{
					(*((*(_188049_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_188049_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_5075348128:;
		}
	}
	if ((*((*(_188049_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_1e56be485_Enum> _189617_e = (*((*(_188049_d))._field_kind))._method_enm();
		if (_1e860322e_is_num((*((*((*(_189617_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	jule::Ptr<_229d681e3_Prim> _190213_prim = (*((*(_188049_d))._field_kind))._method_prim();
	if ((_190213_prim != nullptr) && _1e860322e_is_num((*(_190213_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_188059_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_188049_d))._field_kind))._method_to_str()),jule::Any((*(_188031_t))._method_to_str())}));
}



inline void _229d70d33_Eval::_method_cast_prim(jule::Ptr<_229d681e3_TypeKind> _191032_t,jule::Ptr<_229d70d33_Data> _191050_d,_228d7aadb_Token _191060_error_token) {
	jule::Ptr<_229d681e3_Prim> _191113_prim = (*(_191032_t))._method_prim();
	{
		
		if ((*(_191113_prim))._method_is_any()) {
			_case_begin_5075374928:;
		}
		else if ((*(_191113_prim))._method_is_str()) {
			_case_begin_5075374080:;
			{
				(*this)._method_cast_str(_191050_d,_191060_error_token);
			}
		}
		else if (_1e860322e_is_int((*(_191113_prim))._method_to_str())) {
			_case_begin_5075374176:;
			{
				(*this)._method_cast_int(_191032_t,_191050_d,_191060_error_token);
			}
		}
		else if (_1e860322e_is_num((*(_191113_prim))._method_to_str())) {
			_case_begin_5075374272:;
			{
				(*this)._method_cast_num(_191032_t,_191050_d,_191060_error_token);
			}
		}
		else {
			_case_begin_5075373776:;
			{
				(*this)._method_push_err(_191060_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_191032_t))._method_to_str())}));
			}
		}
		_match_end_5075373664:;
	}
}



inline void _229d70d33_Eval::_method_cast_constant(jule::Ptr<_229d681e3_TypeKind>& _193037_t,jule::Ptr<_229d70d33_Data>& _193056_d) {
	jule::Ptr<_229d681e3_Prim> _193113_prim = (*(_193037_t))._method_prim();
	if ((_193113_prim == nullptr) || (!((*(_193056_d))._method_is_const()))) {
		return;
	}
	{
		
		if (_1e860322e_is_sig_int((*(_193113_prim))._field_kind)) {
			_case_begin_5075389632:;
			{
				(*((*(_193056_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_193056_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1e860322e_is_unsig_int((*(_193113_prim))._field_kind)) {
			_case_begin_5075389728:;
			{
				(*((*(_193056_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_193056_d))._field_constant))._method_as_u64()));
			}
		}
		else if (_1e860322e_is_float((*(_193113_prim))._field_kind)) {
			_case_begin_5075389824:;
			{
				(*((*(_193056_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_193056_d))._field_constant))._method_as_f64()));
			}
		}
		_match_end_5075387984:;
	}
	(*(_193056_d))._field_model=jule::Any((*(_193056_d))._field_constant);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_cast_by_type_n_data(jule::Ptr<_229d681e3_TypeKind> _195047_t,jule::Ptr<_229d70d33_Data> _195065_d,_228d7aadb_Token _195079_error_token) {
	if ((_195065_d != nullptr) && (*(_195065_d))._field_decl) {
		(*this)._method_push_err(_195079_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	{
		
		if (((*((*(_195065_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_195065_d))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5075408736:;
			{
				if ((*(_195047_t))._method_enm() != nullptr) {
					(*this)._method_push_err(_195079_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>());
				}
			}
		}
		else if ((*(_195047_t))._method_ptr() != nullptr) {
			_case_begin_5075406208:;
			{
				(*this)._method_cast_ptr(_195047_t,_195065_d,_195079_error_token);
			}
		}
		else if ((*(_195047_t))._method_sptr() != nullptr) {
			_case_begin_5075406304:;
			{
				(*this)._method_cast_ref(_195047_t,_195065_d,_195079_error_token);
			}
		}
		else if ((*(_195047_t))._method_slc() != nullptr) {
			_case_begin_5075406400:;
			{
				(*this)._method_cast_slc(_195047_t,_195065_d,_195079_error_token);
			}
		}
		else if ((*(_195047_t))._method_strct() != nullptr) {
			_case_begin_5075406496:;
			{
				(*this)._method_cast_struct(_195047_t,_195065_d,_195079_error_token);
			}
		}
		else if ((*(_195047_t))._method_prim() != nullptr) {
			_case_begin_5075406592:;
			{
				(*this)._method_cast_prim(_195047_t,_195065_d,_195079_error_token);
			}
		}
		else {
			_case_begin_5075403776:;
			{
				(*this)._method_push_err(_195079_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_195047_t))._method_to_str())}));
				_195065_d=nullptr;
			}
		}
		_match_end_5075405376:;
	}
	if (_195065_d == nullptr) {
		return nullptr;
	}
	(*(_195065_d))._field_mutable=(*(_195065_d))._field_mutable || ((!((*((*(_195065_d))._field_kind))._method_mutable())) && (*(_195047_t))._method_mutable());
	(*(_195065_d))._field_lvalue=false;
	(*(_195065_d))._field_decl=false;
	(*this)._method_cast_constant(_195047_t,_195065_d);
	if (((*((*(_195065_d))._field_kind))._method_enm() == nullptr) || (!((*((*((*((*((*(_195065_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_equals(_195047_t)))) {
		(*(_195065_d))._field_cast_kind=_195047_t;
		_229d70d33_apply_cast_kind(_195065_d);
		(*((*(_195065_d))._field_model.operator jule::Ptr<_1e5870218_CastingExprModel>()))._field_token=_195079_error_token;
	} else {
		(*(_195065_d))._field_kind=_195047_t;
	}
	return _195065_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_cast(jule::Ptr<_228d31971_CastExpr> _200633_c) {
	jule::Ptr<_229d681e3_TypeSymbol> _200717_t = _228d6ecab_build_type((*(_200633_c))._field_kind);
	jule::Bool _200813_ok = (*((*(this->self))._field_s))._method_check_type(_200717_t,(*(this->self))._field_lookup);
	if ((!(_200813_ok))) {
		return nullptr;
	}
	jule::Ptr<_229d681e3_TypeKind> _201317_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_201317_prefix;
	});
	jule::Ptr<_229d70d33_Data> _201717_d = (*(this->self))._method_eval_expr_kind((*(_200633_c))._field_expr);
	if (_201717_d == nullptr) {
		return nullptr;
	}
	return (*(this->self))._method_eval_cast_by_type_n_data((*(_200717_t))._field_kind,_201717_d,(*((*(_200633_c))._field_kind))._field_token);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_ns_selection(jule::Ptr<_228d31971_NsSelectionExpr> _202536_s) {
	jule::Str _202613_path = _229d681e3_build_link_path_by_tokens((*(_202536_s))._field_ns);
	jule::Ptr<_1e53308ee_ImportInfo> _202717_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>([=](jule::Ptr<_1e53308ee_ImportInfo> _202753_imp) mutable -> jule::Bool {
		if (((*(_202536_s))._field_ns.len() == 1LL) && ((*(_202753_imp))._field_alias == _202613_path)) {
			return true;
		}
		return ((*(_202753_imp))._field_link_path == _202613_path) && (*(_202753_imp))._method_is_accessible_via_selection();
	}));
	if (_202717_imp == nullptr) {
		(*this)._method_push_err((*(_202536_s))._field_ident,jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_202613_path)}));
		return nullptr;
	}
	jule::Trait<_229d94c47_Lookup> _203917_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_202717_imp;
	
	(*this)._method_disallow_builtin();
	jule::Any _204417_def = (*this)._method_get_def((*(_202536_s))._field_ident._field_kind,false);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_203917_lookup;
	jule::Ptr<_229d70d33_Data> _204817_d = (*this)._method_eval_def(_204417_def,(*(_202536_s))._field_ident);
	return _204817_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_struct_lit_explicit(jule::Ptr<_228e0d025_StructIns> _205348_s,jule::Slice<jule::Any> _205413_exprs,_228d7aadb_Token _205436_error_token) {
	jule::Bool _205513_ok = (*((*(this->self))._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_205348_s))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_205348_s))._field_generics.len()),_205436_error_token);
	if ((!(_205513_ok))) {
		return nullptr;
	}
	if (((*(this->self))._field_field != nullptr) && ((*((*((*(this->self))._field_field))._field_decl))._field_owner == (*(_205348_s))._field_decl)) {
		(*(this->self))._method_push_err(_205436_error_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*(_205348_s))._field_decl))._field_ident)}));
	}
	(*(this->self))._method_push_reference_to_struct(_205348_s);
	(*(this->self))._method_check_deprecated((*((*(_205348_s))._field_decl))._field_directives,_205436_error_token);
	_1e58b019d_StructLitChecker _206817_slc = _1e58b019d_StructLitChecker(this->self,_205436_error_token,_205348_s,jule::Slice<jule::Ptr<_1e5870218_StructArgExprModel>>());
	_206817_slc._method_check(_205413_exprs);
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_205348_s)),jule::Ptr<_229d681e3_TypeKind>(),(!((*(this->self))._field_immutable)),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_StructLitExprModel>(new( std::nothrow ) _1e5870218_StructLitExprModel(_205436_error_token,_205348_s,_206817_slc._field_args))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_struct_lit(jule::Ptr<_228d31971_StructLit> _208639_lit) {
	jule::Ptr<_229d681e3_TypeSymbol> _208717_t = _228d6ecab_build_type((*(_208639_lit))._field_kind);
	jule::Bool _208813_ok = (*((*(this->self))._field_s))._method_check_type(_208717_t,(*(this->self))._field_lookup);
	if ((!(_208813_ok))) {
		return nullptr;
	}
	jule::Ptr<_228e0d025_StructIns> _209317_s = (*((*(_208717_t))._field_kind))._method_strct();
	if (_209317_s == nullptr) {
		if ((*((*(_208717_t))._field_kind))._method_sptr() != nullptr) {
			_209317_s=(*((*((*((*(_208717_t))._field_kind))._method_sptr()))._field_elem))._method_strct();
			if (_209317_s != nullptr) {
				goto _julec_label_eval;
			}
		}
		(*(this->self))._method_push_err((*((*(_208639_lit))._field_kind))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_eval:;
	jule::Ptr<_229d70d33_Data> _210617_d = (*(this->self))._method_eval_struct_lit_explicit(_209317_s,(*(_208639_lit))._field_exprs,(*((*(_208639_lit))._field_kind))._field_token);
	if ((*((*(_208717_t))._field_kind))._method_sptr() != nullptr) {
		jule::Ptr<_1e5870218_StructLitExprModel> _210821_model = (*(_210617_d))._field_model.operator jule::Ptr<_1e5870218_StructLitExprModel>();
		_229d70d33_make_struct_lit_alloc(_210617_d,_210821_model);
	}
	return _210617_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_type(jule::Ptr<_228d31971_TypeDecl> _211432_t) {
	jule::Ptr<_229d681e3_TypeSymbol> _211517_tk = _228d6ecab_build_type(_211432_t);
	jule::Bool _211613_ok = (*((*this)._field_s))._method_check_type(_211517_tk,(*this)._field_lookup);
	if ((!(_211613_ok))) {
		return nullptr;
	}
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data((*(_211517_tk))._field_kind,jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any((*(_211517_tk))._field_kind),true,jule::Ptr<_1e856e8a4_Const>()));
}



inline void _229d70d33_Eval::_method_call_type_fn(jule::Ptr<_228d31971_FnCallExpr>& _212837_fc,jule::Ptr<_229d70d33_Data>& _212859_d) {
	if ((*(_212837_fc))._field_generics.len() > 0LL) {
		(*(this->self))._method_push_err((*(_212837_fc))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*((*(_212859_d))._field_kind))._method_to_str())}));
	} else if ((*(_212837_fc))._field_args.len() < 1LL) {
		(*(this->self))._method_push_err((*(_212837_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if ((*(_212837_fc))._field_args.len() > 1LL) {
		(*(this->self))._method_push_err((*((*(_212837_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	if ((*(_212837_fc))._field_args.len() > 0LL) {
		jule::Ptr<_229d70d33_Data> _213821_arg = (*(this->self))._method_eval_expr_kind((*((*(_212837_fc))._field_args[0LL]))._field_kind);
		if (_213821_arg != nullptr) {
			_212859_d=(*(this->self))._method_eval_cast_by_type_n_data((*(_212859_d))._field_kind,_213821_arg,(*((*(_212837_fc))._field_args[0LL]))._field_token);
		}
	}
	if (_212859_d != nullptr) {
		(*(_212859_d))._field_decl=false;
	}
}



inline std::tuple<jule::Bool,jule::Bool> _229d70d33_Eval::_method_check_fn_call_generics(jule::Ptr<_229b6ebcb_FnIns> _215045_f,jule::Ptr<_228d31971_FnCallExpr> _215113_fc) {
	jule::Bool _215132_ok = jule::Bool();
	jule::Bool _215142_dynamic_annotation = jule::Bool();
	{
		
		if ((((*((*(_215045_f))._field_decl))._field_generics.len() > 0LL) && ((*(_215113_fc))._field_generics.len() == 0LL)) && ((*(_215045_f))._field_params.len() > 0LL)) {
			_case_begin_5075549024:;
			{
				_215142_dynamic_annotation=true;
				(*(_215045_f))._field_generics=jule::Slice<jule::Ptr<_229d681e3_TypeKind>>::alloc(static_cast<jule::I64>((*((*(_215045_f))._field_decl))._field_generics.len()));
				_215132_ok = true;
				_215142_dynamic_annotation = true;
				return std::make_tuple(_215132_ok,_215142_dynamic_annotation);
			}
		}
		else if ((!((*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_215045_f))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_215113_fc))._field_generics.len()),(*(_215113_fc))._field_token)))) {
			_case_begin_5075549120:;
			{
				_215132_ok = false;
				_215142_dynamic_annotation = false;
				return std::make_tuple(_215132_ok,_215142_dynamic_annotation);
			}
		}
		else {
			_case_begin_5075545072:;
			{
				(*(_215045_f))._field_generics=jule::Slice<jule::Ptr<_229d681e3_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*((*(_215045_f))._field_decl))._field_generics.len()));
				{
					auto &expr = (*(_215113_fc))._field_generics;
					auto it = expr.begin();
					_iter_begin_5075546496:;
					if (it != expr.end()) {
						jule::Ptr<_228d31971_TypeDecl> _229d70d33_g = *it;
						{
							jule::Ptr<_229d681e3_TypeSymbol> _216625_k = _228d6ecab_build_type(_229d70d33_g);
							_215132_ok=(*((*this)._field_s))._method_check_type(_216625_k,(*this)._field_lookup);
							if ((!(_215132_ok))) {
								_215132_ok = false;
								_215142_dynamic_annotation = false;
								return std::make_tuple(_215132_ok,_215142_dynamic_annotation);
							}
							(*(_215045_f))._field_generics = jule::alloc_for_append((*(_215045_f))._field_generics,1);(*(_215045_f))._field_generics.push((*(_216625_k))._field_kind);
						}
						_iter_next_5075546496:;
						++it;
						goto _iter_begin_5075546496;
					}
					_iter_end_5075546496:;
				}
				_215132_ok = true;
				_215142_dynamic_annotation = false;
				return std::make_tuple(_215132_ok,_215142_dynamic_annotation);
			}
		}
		_match_end_5075544928:;
	}
}



inline void _229d70d33_Eval::_method_call_builtin_fn(jule::Ptr<_228d31971_FnCallExpr>& _217840_fc,jule::Ptr<_229d70d33_Data>& _217862_d) {
	_217862_d=_1e614d809_find_builtin_caller((*((*((*(_217862_d))._field_kind))._method_fnc()))._field_caller)(this->self,_217840_fc,_217862_d);
	if (_217862_d == nullptr) {
		return;
	}
	(*(_217862_d))._field_mutable=true;
}



inline void _229d70d33_Eval::_method_check_fn_of_concurrent_call(jule::Ptr<_229b6ebcb_FnIns>& _218747_f,_228d7aadb_Token _218758_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto &expr = (*(_218747_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5075574480:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_ParamIns> &_229d70d33_p = *it;
			{
				if ((*((*(_229d70d33_p))._field_decl))._field_reference) {
					(*this)._method_push_err(_218758_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>());
					return;
				}
			}
			_iter_next_5075574480:;
			++it;
			goto _iter_begin_5075574480;
		}
		_iter_end_5075574480:;
	}
}



inline void _229d70d33_Eval::_method_process_exceptional_handler(jule::Ptr<_229b6ebcb_FnIns>& _220051_f,jule::Ptr<_228d31971_FnCallExpr>& _220067_fc,jule::Ptr<_229d70d33_Data>& _220089_d) {
	jule::Bool _220113_result_needed = (!((*((*(_220051_f))._field_decl))._method_is_void())) && (!((*this)._field_ignored));
	jule::Ptr<_1e56c3885_ScopeChecker> _220217_csc = nullptr;
	jule::Ptr<_1e56c3885_Scope> _220317_ch = nullptr;
	jule::Ptr<_1e5870218_FnCallExprModel> _220517_model = (*(_220089_d))._field_model.operator jule::Ptr<_1e5870218_FnCallExprModel>();
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e538b460_Sema>>()) {
			_case_begin_5075586736:;
			{
				jule::Ptr<_1e538b460_Sema> _220921_s = (*this)._field_lookup.operator jule::Ptr<_1e538b460_Sema>();
				_220217_csc=_1e56c3885_new_scope_checker(_220921_s,nullptr);
				if (_220113_result_needed) {
					(*(_220217_csc))._field_result=(*(_220051_f))._field_result;
				}
				_220317_ch=jule::new_struct<_1e56c3885_Scope>(new( std::nothrow ) _1e56c3885_Scope());
				(*((*(_220217_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_220217_csc))._field_table))._field_vars,1);(*((*(_220217_csc))._field_table))._field_vars.push(_229d70d33_build_error_var(_220317_ch,_220067_fc));
				(*(_220217_csc))._method_check((*(_220067_fc))._field_exception,_220317_ch);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5075586832:;
			{
				jule::Ptr<_1e56c3885_ScopeChecker> _221921_sc = (*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>();
				_220217_csc=(*(_221921_sc))._method_new_child_checker();
				if (_220113_result_needed) {
					(*(_220217_csc))._field_result=(*(_220051_f))._field_result;
				}
				_220317_ch=(*(_221921_sc))._method_get_child();
				(*((*(_220217_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_220217_csc))._field_table))._field_vars,1);(*((*(_220217_csc))._field_table))._field_vars.push(_229d70d33_build_error_var(_220317_ch,_220067_fc));
				(*(_221921_sc))._method_check_child_ssc((*(_220067_fc))._field_exception,_220317_ch,_220217_csc);
			}
		}
		_match_end_5075586656:;
	}
	(*(_220517_model))._field_assigned=_220113_result_needed;
	(*(_220517_model))._field_except=_220317_ch;
	if (_220113_result_needed && ((*(_220217_csc))._field_result != nullptr)) {
		(*this)._method_push_err((*(_220067_fc))._field_token,jule::Str("assignments requires expression", 31),jule::Slice<jule::Any>());
	}
}



inline void _229d70d33_Eval::_method_call_fn(jule::Ptr<_228d31971_FnCallExpr>& _223732_fc,jule::Ptr<_229d70d33_Data>& _223754_d) {
	jule::Ptr<_229b6ebcb_FnIns> _223817_f = (*((*(_223754_d))._field_kind))._method_fnc();
	if ((*(_223817_f))._method_is_builtin()) {
		(*(this->self))._method_call_builtin_fn(_223732_fc,_223754_d);
		return;
	}
	if ((!((*((*(_223817_f))._field_decl))._method_is_method())) && _229d681e3_has_directive((*((*(_223817_f))._field_decl))._field_directives,jule::Str("test", 4))) {
		(*(this->self))._method_push_err((*(_223732_fc))._field_token,jule::Str("you cannot call test functions", 30),jule::Slice<jule::Any>());
		_223754_d=nullptr;
		return;
	}
	if ((((!((*(_223754_d))._field_mutable)) && (*((*(_223817_f))._field_decl))._method_is_method()) && (!((*((*(_223817_f))._field_decl))._field_statically))) && (*((*((*(_223817_f))._field_decl))._field_params[0LL]))._field_mutable) {
		(*(this->self))._method_push_err((*(_223732_fc))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	} else if ((!((*(this->self))._method_is_unsafe())) && (*((*(_223817_f))._field_decl))._field_unsafety) {
		(*(this->self))._method_push_err((*(_223732_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	jule::Bool _225618_ok;
	jule::Bool _225622_dynamic_annotation;
	std::tie(_225618_ok,_225622_dynamic_annotation) = (*(this->self))._method_check_fn_call_generics(_223817_f,_223732_fc);
	if ((!(_225618_ok))) {
		_223754_d=nullptr;
		return;
	}
	jule::Ptr<_1e538b460_Sema> _226217_old = (*(this->self))._field_s;
	if ((*((*(_223817_f))._field_decl))._field_owner != nullptr) {
		(*(this->self))._field_s=(*((*((*(_223817_f))._field_decl))._field_owner))._field_sema;
	}
	__JULE_DEFER({
		if (_226217_old != (*(this->self))._field_s) {
			(*(_226217_old))._field_errors=jule::append((*(_226217_old))._field_errors,(*((*(this->self))._field_s))._field_errors);
			(*((*(this->self))._field_s))._field_errors=nullptr;
		}
		(*(this->self))._field_s=_226217_old;
	});
	if ((!(_225622_dynamic_annotation))) {
		if ((!((*(_223817_f))._field_reloaded))) {
			_225618_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_223817_f);
			if ((!(_225618_ok))) {
				_223754_d=nullptr;
				return;
			}
			(*(_223817_f))._field_reloaded=true;
		}
	} else {
		(*((*(this->self))._field_s))._method_build_fn_non_generic_type_kinds(_223817_f);
	}
	_1e58b019d_FnCallArgChecker _228817_fcac = _1e58b019d_FnCallArgChecker(this->self,(*(_223732_fc))._field_args,(*(_223732_fc))._field_token,_223817_f,_225622_dynamic_annotation,jule::Slice<jule::Any>());
	if ((*((*(_223817_f))._field_decl))._field_owner != nullptr) {
		std::tie(_226217_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_226217_old);
		_225618_ok=_228817_fcac._method_check();
		std::tie(_226217_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_226217_old);
	} else {
		_225618_ok=_228817_fcac._method_check();
	}
	if ((!(_225618_ok)) && _225622_dynamic_annotation) {
		_223754_d=nullptr;
		return;
	}
	jule::Bool _230814_is_unique_ins;
	jule::Int _230829_pos;
	std::tie(_230814_is_unique_ins,_230829_pos) = (*((*(_223817_f))._field_decl))._method_append_instance(_223817_f);
	if ((!(_230814_is_unique_ins))) {
		_223817_f=(*((*(_223817_f))._field_decl))._field_instances[_230829_pos];
	}
	jule::Any _231317_call_model = (*(_223754_d))._field_model;
	if ((*((*(_223817_f))._field_decl))._method_is_void()) {
		_223754_d=_229d70d33_build_void_data();
	} else {
		if (_225622_dynamic_annotation) {
			_225618_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_223817_f);
			if ((!(_225618_ok))) {
				_223754_d=nullptr;
				return;
			}
			(*(_223817_f))._field_reloaded=true;
		}
		(*(_223754_d))._field_kind=(*(_223817_f))._field_result;
		(*(_223754_d))._field_lvalue=false;
	}
	(*(_223754_d))._field_mutable=true;
	(*(_223754_d))._field_model=jule::Any(jule::new_struct<_1e5870218_FnCallExprModel>(new( std::nothrow ) _1e5870218_FnCallExprModel((*(_223732_fc))._field_token,_223817_f,jule::Bool(),_231317_call_model,_228817_fcac._field_arg_models,jule::Ptr<_1e56c3885_Scope>(),jule::Bool())));
	if ((*((*(_223817_f))._field_decl))._field_exceptional) {
		{
			
			if ((*(_223732_fc))._method_unhandled()) {
				_case_begin_5075665376:;
				{
					(*(this->self))._method_push_err((*(_223732_fc))._field_token,jule::Str("exceptionals must be handled", 28),jule::Slice<jule::Any>());
					(*(this->self))._method_push_suggestion(jule::Str("use \"!\" operator after exceptional to handle it", 47),jule::Slice<jule::Any>());
				}
			}
			else if ((*(_223732_fc))._method_ignored()) {
				_case_begin_5075663968:;
			}
			else {
				_case_begin_5075663168:;
				{
					(*(this->self))._method_process_exceptional_handler(_223817_f,_223732_fc,_223754_d);
				}
			}
			_match_end_5075662992:;
		}
	} else if ((!((*(_223732_fc))._method_unhandled()))) {
		(*(this->self))._method_push_err((*(_223732_fc))._field_token,jule::Str("non-exceptionals cannot handled like exceptionals", 49),jule::Slice<jule::Any>());
	}
	if (((*(_223817_f))._field_generics.len() > 0LL) && _230814_is_unique_ins) {
		(*((*(this->self))._field_s))._method_check_fn_ins(_223817_f);
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_fn_call(jule::Ptr<_228d31971_FnCallExpr> _236136_fc) {
	jule::Ptr<_229d681e3_TypeKind> _236217_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_236217_prefix;
	});
	{
		auto &_match_expr{ (*((*(_236136_fc))._field_expr))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_IdentExpr>>()) {
			_case_begin_5075678288:;
			{
				if ((*((*(_236136_fc))._field_expr))._field_token._field_kind == jule::Str("error", 5)) {
					return _1e614d809_builtin_caller_error(this->self,_236136_fc);
				}
			}
		}
		_match_end_5075678176:;
	}
	jule::Ptr<_229d70d33_Data> _237517_d = (*(this->self))._method_eval_expr_kind((*((*(_236136_fc))._field_expr))._field_kind);
	if (_237517_d == nullptr) {
		return nullptr;
	}
	if ((*(_237517_d))._field_decl) {
		(*(this->self))._method_call_type_fn(_236136_fc,_237517_d);
		return _237517_d;
	}
	if ((*((*(_237517_d))._field_kind))._method_fnc() == nullptr) {
		(*(this->self))._method_push_err((*(_236136_fc))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(this->self))._method_call_fn(_236136_fc,_237517_d);
	return _237517_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_enum_static(jule::Ptr<_1e56be485_Enum> _239439_enm,_228d7aadb_Token _239451_ident) {
	jule::Ptr<_229d70d33_Data> _239517_d = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_239439_enm)),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1e856e8a4_Const>()));
	jule::Ptr<_1e56be485_EnumItem> _240217_item = (*(_239439_enm))._method_find_item(_239451_ident._field_kind);
	if (_240217_item == nullptr) {
		(*this)._method_push_err(_239451_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_239439_enm))._field_ident),jule::Any(_239451_ident._field_kind)}));
	} else {
		(*(_239517_d))._field_constant=jule::new_ptr<_1e856e8a4_Const>((*((*((*((*(_240217_item))._field_value))._field_data))._field_constant)));
		(*(_239517_d))._field_model=jule::Any((*(_239517_d))._field_constant);
	}
	return _239517_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_struct_static(jule::Ptr<_228e0d025_StructIns> _241341_s,_228d7aadb_Token _241356_ident) {
	jule::Ptr<_229d70d33_Data> _241417_d = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1e856e8a4_Const>()));
	
	jule::Ptr<_229b6ebcb_Fn> _242217_method = (*(_241341_s))._method_find_method(_241356_ident._field_kind,true);
	if (_242217_method != nullptr) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*(_242217_method))._field_public,(*(_242217_method))._field_token)))) {
			(*this)._method_push_err(_241356_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_241356_ident._field_kind)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_229b6ebcb_FnIns> _242921_ins = (*(_242217_method))._method_instance();
		(*(_242921_ins))._field_owner=_241341_s;
		(*this)._method_push_reference_to_fn(_242921_ins);
		(*(_241417_d))._field_model=jule::Any(jule::new_struct<_1e5870218_StructStaticIdentExprModel>(new( std::nothrow ) _1e5870218_StructStaticIdentExprModel(_241341_s,(*(_241417_d))._field_model,_242921_ins)));
		(*(_241417_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_242921_ins));
		return _241417_d;
	}
	jule::Ptr<_1e58b0654_Var> _244117_sttc = (*((*(_241341_s))._field_decl))._method_find_static(_241356_ident._field_kind);
	if (_244117_sttc != nullptr) {
		return (*this)._method_eval_var(_244117_sttc,_241356_ident);
	}
	(*this)._method_push_err(_241356_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_241341_s))._field_decl))._field_ident),jule::Any(_241356_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_trait_sub_ident(jule::Ptr<_229d70d33_Data> _245043_d,jule::Ptr<_229b5076c_Trait> _245057_trt,_228d7aadb_Token _245074_ident) {
	jule::Ptr<_229b6ebcb_Fn> _245117_f = (*(_245057_trt))._method_find_method(_245074_ident._field_kind);
	if (_245117_f == nullptr) {
		(*this)._method_push_err(_245074_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_245057_trt))._field_ident),jule::Any(_245074_ident._field_kind)}));
		return nullptr;
	}
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_245117_f))._method_instance())),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::new_struct<_1e5870218_TraitSubIdentExprModel>(new( std::nothrow ) _1e5870218_TraitSubIdentExprModel(_245074_ident,(*(_245043_d))._field_model,_245074_ident._field_kind))),false,jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_struct_sub_ident(jule::Ptr<_229d70d33_Data> _247044_d,jule::Ptr<_228e0d025_StructIns> _247058_s,jule::Ptr<_228d31971_SubIdentExpr> _247073_si,jule::Bool _247092_ref) {
	jule::Ptr<_228e0d025_FieldIns> _247117_f = (*(_247058_s))._method_find_field((*(_247073_si))._field_ident._field_kind);
	if (_247117_f != nullptr) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_247117_f))._field_decl))._field_public,(*((*(_247117_f))._field_decl))._field_token)))) {
			(*this)._method_push_err((*(_247073_si))._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_247117_f))._field_decl))._field_ident)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1e5870218_StructSubIdentExprModel> _247821_model = jule::new_struct<_1e5870218_StructSubIdentExprModel>(new( std::nothrow ) _1e5870218_StructSubIdentExprModel((*(_247044_d))._field_model,(*(_247044_d))._field_kind,jule::Ptr<_229b6ebcb_FnIns>(),_247117_f));
		(*(_247044_d))._field_model=jule::Any(_247821_model);
		(*(_247044_d))._field_kind=(*(_247117_f))._field_kind;
		(*(_247044_d))._field_lvalue=true;
		if ((*((*(_247117_f))._field_decl))._field_mutable && (!((*(_247044_d))._field_mutable))) {
			{
				auto &_match_expr{ (*this)._field_lookup };
				
				if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
					_case_begin_5075753776:;
					{
						jule::Ptr<_1e56c3885_ScopeChecker> _249125_scope = (*((*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>()))._method_get_root();
						(*(_247044_d))._field_mutable=((*(_249125_scope))._field_owner != nullptr) && ((*((*(_249125_scope))._field_owner))._field_owner == _247058_s);
						if ((*(_247044_d))._field_mutable) {
							jule::Ptr<_1e58b0654_Var> _249433_field = (*(_247821_model))._field_expr.operator jule::Ptr<_1e58b0654_Var>();
							jule::Ptr<_1e58b0654_Var> _249533_v = jule::new_struct<_1e58b0654_Var>(new( std::nothrow ) _1e58b0654_Var((*(_249433_field))._field_scope,(*(_249433_field))._field_token,(*(_249433_field))._field_ident,(*(_249433_field))._field_cpp_linked,(*(_249433_field))._field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),(*(_249433_field))._field_kind,(*(_249433_field))._field_value,jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_1e58b0654_IterRelation>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>()));
							(*(_249533_v))._field_mutable=true;
							(*(_247821_model))._field_expr=jule::Any(_249533_v);
						}
					}
				}
				_match_end_5075753552:;
			}
		}
		return _247044_d;
	}
	
	jule::Ptr<_229b6ebcb_Fn> _251417_m = (*(_247058_s))._method_find_method((*(_247073_si))._field_ident._field_kind,false);
	if (_251417_m == nullptr) {
		(*this)._method_push_err((*(_247073_si))._field_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_247058_s))._field_decl))._field_ident),jule::Any((*(_247073_si))._field_ident._field_kind)}));
		return nullptr;
	}
	if ((*((*(_251417_m))._field_params[0LL]))._method_is_ref() && (!(_247092_ref))) {
		(*this)._method_push_err((*(_247073_si))._field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>());
	}
	(*this)._method_check_deprecated((*(_251417_m))._field_directives,(*(_247073_si))._field_ident);
	jule::Ptr<_229b6ebcb_FnIns> _252617_ins = (*(_251417_m))._method_instance();
	(*(_252617_ins))._field_owner=_247058_s;
	(*this)._method_push_reference_to_fn(_252617_ins);
	(*(_247044_d))._field_model=jule::Any(jule::new_struct<_1e5870218_StructSubIdentExprModel>(new( std::nothrow ) _1e5870218_StructSubIdentExprModel((*(_247044_d))._field_model,(*(_247044_d))._field_kind,_252617_ins,jule::Ptr<_228e0d025_FieldIns>())));
	(*(_247044_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_252617_ins));
	return _247044_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_slice_sub_ident(jule::Ptr<_229d70d33_Data> _253843_d,_228d7aadb_Token _253853_ident) {
	{
		auto &_match_expr{ _253853_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5075785696:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_253843_d))._field_kind,(*(_253843_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_5075785792:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_253843_d))._field_kind,(*(_253843_d))._field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_5075785888:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))))),jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3))))))}),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),(*(_253843_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_253843_d))._field_kind,(*(_253843_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5075784848:;
			{
				(*this)._method_push_err(_253853_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_253843_d))._field_kind))._method_to_str()),jule::Any(_253853_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075785184:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_array_sub_ident(jule::Ptr<_229d70d33_Data> _259743_d,_228d7aadb_Token _259753_ident) {
	{
		auto &_match_expr{ _259753_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5075808368:;
			{
				jule::Ptr<_1e856e8a4_Const> _260021_c = _1e856e8a4_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*((*(_259743_d))._field_kind))._method_arr()))._field_n)));
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_260021_c),jule::Bool(),_260021_c));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_5075808464:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))))),jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3))))))}),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),(*(_259743_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_259743_d))._field_kind,(*(_259743_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5075804144:;
			{
				(*this)._method_push_err(_259753_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_259743_d))._field_kind))._method_to_str()),jule::Any(_259753_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075804480:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_map_sub_ident(jule::Ptr<_229d70d33_Data> _264341_d,_228d7aadb_Token _264351_ident) {
	jule::Ptr<_229d681e3_Map> _264417_map_kind = (*((*(_264341_d))._field_kind))._method_map();
	{
		auto &_match_expr{ _264351_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5075824608:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_264341_d))._field_kind,(*(_264341_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("clear", 5)) {
			_case_begin_5075828368:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),(*(_264341_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_264341_d))._field_kind,(*(_264341_d))._field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("keys", 4)) {
			_case_begin_5075824144:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc((*(_264417_map_kind))._field_key)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),(*(_264341_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_264341_d))._field_kind,(*(_264341_d))._field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("values", 6)) {
			_case_begin_5075824240:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc((*(_264417_map_kind))._field_val)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),(*(_264341_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_264341_d))._field_kind,(*(_264341_d))._field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has", 3)) {
			_case_begin_5075824336:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("key", 3))),(*(_264417_map_kind))._field_key))}),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),(*(_264341_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_264341_d))._field_kind,(*(_264341_d))._field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("del", 3)) {
			_case_begin_5075824432:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("key", 3))),(*(_264417_map_kind))._field_key))}),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),(*(_264341_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_264341_d))._field_kind,(*(_264341_d))._field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5075822448:;
			{
				(*this)._method_push_err(_264351_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_264417_map_kind))._method_to_str()),jule::Any(_264351_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075823856:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_str_sub_ident(jule::Ptr<_229d70d33_Data> _276641_d,_228d7aadb_Token _276651_ident) {
	jule::Ptr<_229d681e3_TypeKind> _276717_str_kind = jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("str", 3))));
	{
		auto &_match_expr{ _276651_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_5075863584:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has_prefix", 10)) {
			_case_begin_5075863680:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("sub", 3))),_276717_str_kind))}),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("has_prefix", 10)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has_suffix", 10)) {
			_case_begin_5075863776:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("sub", 3))),_276717_str_kind))}),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("has_suffix", 10)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("find", 4)) {
			_case_begin_5075863872:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("sub", 3))),_276717_str_kind))}),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("find", 4)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("rfind", 5)) {
			_case_begin_5075860768:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("sub", 3))),_276717_str_kind))}),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("rfind", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("trim", 4)) {
			_case_begin_5075860864:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("bytes", 5))),_276717_str_kind))}),_276717_str_kind,jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("trim", 4)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("ltrim", 5)) {
			_case_begin_5075860960:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("bytes", 5))),_276717_str_kind))}),_276717_str_kind,jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("ltrim", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("rtrim", 5)) {
			_case_begin_5075861056:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("bytes", 5))),_276717_str_kind))}),_276717_str_kind,jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("rtrim", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("split", 5)) {
			_case_begin_5075861152:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("sub", 3))),_276717_str_kind)),jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3))))))}),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc(_276717_str_kind)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("split", 5)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("replace", 7)) {
			_case_begin_5075864240:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("sub", 3))),_276717_str_kind)),jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("new", 3))),_276717_str_kind)),jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("n", 1))),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3))))))}),_276717_str_kind,jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_CommonSubIdentExprModel>(new( std::nothrow ) _1e5870218_CommonSubIdentExprModel((*(_276641_d))._field_kind,(*(_276641_d))._field_model,jule::Str("replace", 7)))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5075858896:;
			{
				(*this)._method_push_err(_276651_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_276717_str_kind))._method_to_str()),jule::Any(_276651_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075860400:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_int_type_static(_228d7aadb_Token _301539_ident) {
	
	{
		auto &_match_expr{ _301539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5075920192:;
			{
				jule::Ptr<_1e856e8a4_Const> _302021_c = _1e856e8a4_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1e8572e29_max(jule::Str("int", 3)))));
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_302021_c),jule::Bool(),_302021_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5075920400:;
			{
				jule::Ptr<_1e856e8a4_Const> _302821_c = _1e856e8a4_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1e8572e29_min(jule::Str("int", 3)))));
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_302821_c),jule::Bool(),_302821_c));
			}
		}
		else {
			_case_begin_5075916512:;
			{
				(*this)._method_push_err(_301539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_301539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075917264:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_uint_type_static(_228d7aadb_Token _304140_ident) {
	
	{
		auto &_match_expr{ _304140_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5075931360:;
			{
				jule::Ptr<_1e856e8a4_Const> _304621_c = _1e856e8a4_Const::_static_method_new_u64(static_cast<jule::U64>(static_cast<jule::U64>(_1e8572e29_max(jule::Str("uint", 4)))));
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_304621_c),jule::Bool(),_304621_c));
			}
		}
		else {
			_case_begin_5075929824:;
			{
				(*this)._method_push_err(_304140_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_304140_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075930576:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_i8_type_static(_228d7aadb_Token _305938_ident) {
	
	
	
	{
		auto &_match_expr{ _305938_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5075944560:;
			{
				jule::Ptr<_1e856e8a4_Const> _306621_c = _1e856e8a4_Const::_static_method_new_i64(127LL);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_306621_c),jule::Bool(),_306621_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5075944768:;
			{
				jule::Ptr<_1e856e8a4_Const> _307421_c = _1e856e8a4_Const::_static_method_new_i64(-128LL);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_307421_c),jule::Bool(),_307421_c));
			}
		}
		else {
			_case_begin_5075941296:;
			{
				(*this)._method_push_err(_305938_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_305938_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075941632:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_i16_type_static(_228d7aadb_Token _308739_ident) {
	
	
	
	{
		auto &_match_expr{ _308739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5075958000:;
			{
				jule::Ptr<_1e856e8a4_Const> _309421_c = _1e856e8a4_Const::_static_method_new_i64(32767LL);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_309421_c),jule::Bool(),_309421_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5075958208:;
			{
				jule::Ptr<_1e856e8a4_Const> _310221_c = _1e856e8a4_Const::_static_method_new_i64(-32768LL);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_310221_c),jule::Bool(),_310221_c));
			}
		}
		else {
			_case_begin_5075954672:;
			{
				(*this)._method_push_err(_308739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_308739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075955056:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_i32_type_static(_228d7aadb_Token _311539_ident) {
	
	
	
	{
		auto &_match_expr{ _311539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5075972080:;
			{
				jule::Ptr<_1e856e8a4_Const> _312221_c = _1e856e8a4_Const::_static_method_new_i64(2147483647LL);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_312221_c),jule::Bool(),_312221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5075972288:;
			{
				jule::Ptr<_1e856e8a4_Const> _313021_c = _1e856e8a4_Const::_static_method_new_i64(-2147483648LL);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_313021_c),jule::Bool(),_313021_c));
			}
		}
		else {
			_case_begin_5075968816:;
			{
				(*this)._method_push_err(_311539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_311539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075969152:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_i64_type_static(_228d7aadb_Token _314339_ident) {
	
	
	
	{
		auto &_match_expr{ _314339_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5075985392:;
			{
				jule::Ptr<_1e856e8a4_Const> _315021_c = _1e856e8a4_Const::_static_method_new_i64(jule::MAX_I64);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_315021_c),jule::Bool(),_315021_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5075985600:;
			{
				jule::Ptr<_1e856e8a4_Const> _315821_c = _1e856e8a4_Const::_static_method_new_i64(jule::MIN_I64);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_315821_c),jule::Bool(),_315821_c));
			}
		}
		else {
			_case_begin_5075982320:;
			{
				(*this)._method_push_err(_314339_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_314339_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075982480:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_u8_type_static(_228d7aadb_Token _317138_ident) {
	
	
	{
		auto &_match_expr{ _317138_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5075998016:;
			{
				jule::Ptr<_1e856e8a4_Const> _317721_c = _1e856e8a4_Const::_static_method_new_u64(255LLU);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u8", 2)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_317721_c),jule::Bool(),_317721_c));
			}
		}
		else {
			_case_begin_5075995088:;
			{
				(*this)._method_push_err(_317138_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_317138_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5075995008:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_u16_type_static(_228d7aadb_Token _319039_ident) {
	
	
	{
		auto &_match_expr{ _319039_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5076007504:;
			{
				jule::Ptr<_1e856e8a4_Const> _319621_c = _1e856e8a4_Const::_static_method_new_u64(65535LLU);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u16", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_319621_c),jule::Bool(),_319621_c));
			}
		}
		else {
			_case_begin_5076004576:;
			{
				(*this)._method_push_err(_319039_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_319039_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076004496:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_u32_type_static(_228d7aadb_Token _320939_ident) {
	
	
	{
		auto &_match_expr{ _320939_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5076017024:;
			{
				jule::Ptr<_1e856e8a4_Const> _321521_c = _1e856e8a4_Const::_static_method_new_u64(4294967295LLU);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u32", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_321521_c),jule::Bool(),_321521_c));
			}
		}
		else {
			_case_begin_5076014064:;
			{
				(*this)._method_push_err(_320939_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_320939_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076013984:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_u64_type_static(_228d7aadb_Token _322839_ident) {
	
	
	{
		auto &_match_expr{ _322839_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5076026416:;
			{
				jule::Ptr<_1e856e8a4_Const> _323421_c = _1e856e8a4_Const::_static_method_new_u64(jule::MAX_U64);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_323421_c),jule::Bool(),_323421_c));
			}
		}
		else {
			_case_begin_5076023552:;
			{
				(*this)._method_push_err(_322839_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_322839_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076023472:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_f32_type_tatic(_228d7aadb_Token _324738_ident) {
	
	
	
	{
		auto &_match_expr{ _324738_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5076036848:;
			{
				jule::Ptr<_1e856e8a4_Const> _325421_c = _1e856e8a4_Const::_static_method_new_f64(340282346638528860000000000000000000000.0);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_325421_c),jule::Bool(),_325421_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5076037056:;
			{
				jule::Ptr<_1e856e8a4_Const> _326221_c = _1e856e8a4_Const::_static_method_new_f64(-340282346638528860000000000000000000000.0);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_326221_c),jule::Bool(),_326221_c));
			}
		}
		else {
			_case_begin_5076033520:;
			{
				(*this)._method_push_err(_324738_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_324738_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076033904:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_f64_type_static(_228d7aadb_Token _327539_ident) {
	
	
	
	{
		auto &_match_expr{ _327539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_5076050160:;
			{
				jule::Ptr<_1e856e8a4_Const> _328221_c = _1e856e8a4_Const::_static_method_new_f64(jule::MAX_F64);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_328221_c),jule::Bool(),_328221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_5076050368:;
			{
				jule::Ptr<_1e856e8a4_Const> _329021_c = _1e856e8a4_Const::_static_method_new_f64(jule::MIN_F64);
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_329021_c),jule::Bool(),_329021_c));
			}
		}
		else {
			_case_begin_5076047088:;
			{
				(*this)._method_push_err(_327539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_327539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076047248:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_prim_static(jule::Str _330335_kind,_228d7aadb_Token _330346_ident) {
	{
		auto &_match_expr{ _330335_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_5076059648:;
			{
				return (*this)._method_eval_int_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_5076061872:;
			{
				return (*this)._method_eval_uint_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5076061968:;
			{
				return (*this)._method_eval_i8_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5076059200:;
			{
				return (*this)._method_eval_i16_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5076059296:;
			{
				return (*this)._method_eval_i32_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5076059392:;
			{
				return (*this)._method_eval_i64_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_5076059488:;
			{
				return (*this)._method_eval_u8_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5076061440:;
			{
				return (*this)._method_eval_u16_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5076061552:;
			{
				return (*this)._method_eval_u32_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5076061664:;
			{
				return (*this)._method_eval_u64_type_static(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5076062096:;
			{
				return (*this)._method_eval_f32_type_tatic(_330346_ident);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5076062192:;
			{
				return (*this)._method_eval_f64_type_static(_330346_ident);
			}
		}
		else {
			_case_begin_5076058576:;
			{
				(*this)._method_push_err(_330346_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_330335_kind),jule::Any(_330346_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076058688:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_type_static(jule::Ptr<_229d70d33_Data> _332339_d,jule::Ptr<_228d31971_SubIdentExpr> _332353_si) {
	{
		
		if ((*((*(_332339_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_5076082560:;
			{
				return (*this)._method_eval_prim_static((*((*((*(_332339_d))._field_kind))._method_prim()))._method_to_str(),(*(_332353_si))._field_ident);
			}
		}
		else if ((*((*(_332339_d))._field_kind))._method_enm() != nullptr) {
			_case_begin_5076082768:;
			{
				return (*this)._method_eval_enum_static((*((*(_332339_d))._field_kind))._method_enm(),(*(_332353_si))._field_ident);
			}
		}
		else if ((*((*(_332339_d))._field_kind))._method_strct() != nullptr) {
			_case_begin_5076082864:;
			{
				return (*this)._method_eval_struct_static((*((*(_332339_d))._field_kind))._method_strct(),(*(_332353_si))._field_ident);
			}
		}
		else {
			_case_begin_5076078848:;
			{
				(*this)._method_push_err((*(_332353_si))._field_ident,jule::Str("type @ is not supports sub-defines", 34),jule::Slice<jule::Any>({jule::Any((*((*(_332339_d))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076078704:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_obj_sub_ident(jule::Ptr<_229d70d33_Data> _334041_d,jule::Ptr<_228d31971_SubIdentExpr> _334055_si) {
	jule::Ptr<_229d681e3_TypeKind> _334117_kind = (*(_334041_d))._field_kind;
	if ((*((*(_334041_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_229d681e3_Ptr> _334317_ptr = (*((*(_334041_d))._field_kind))._method_ptr();
		if ((!((*(_334317_ptr))._method_is_unsafe()))) {
			if ((!((*(_334055_si))._field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err((*(_334055_si))._field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
			_334117_kind=(*((*((*(_334041_d))._field_kind))._method_ptr()))._field_elem;
			jule::Ptr<_229d70d33_Data> _334925_model = jule::new_ptr<_229d70d33_Data>((*(_334041_d)));
			_228d7aadb_Token _335225_token = (*(_334055_si))._field_ident;
			_335225_token._field_id=7LLU;
			_335225_token._field_kind=jule::Str("*", 1);
			(*(_334041_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(_334925_model,_335225_token)));
		}
	} else if ((*((*(_334041_d))._field_kind))._method_sptr() != nullptr) {
		_334117_kind=(*((*((*(_334041_d))._field_kind))._method_sptr()))._field_elem;
		jule::Ptr<_229d70d33_Data> _336421_model = jule::new_ptr<_229d70d33_Data>((*(_334041_d)));
		_228d7aadb_Token _336521_token = (*(_334055_si))._field_ident;
		_336521_token._field_id=7LLU;
		_336521_token._field_kind=jule::Str("*", 1);
		(*(_334041_d))._field_model=jule::Any(jule::new_struct<_1e5870218_UnaryExprModel>(new( std::nothrow ) _1e5870218_UnaryExprModel(_336421_model,_336521_token)));
	}
	{
		
		if ((*((*(_334041_d))._field_kind))._method_trt() != nullptr) {
			_case_begin_5076116288:;
			{
				return (*this)._method_eval_trait_sub_ident(_334041_d,(*((*(_334041_d))._field_kind))._method_trt(),(*(_334055_si))._field_ident);
			}
		}
		else if ((*(_334117_kind))._method_strct() != nullptr) {
			_case_begin_5076116384:;
			{
				jule::Ptr<_228e0d025_StructIns> _337917_s = (*(_334117_kind))._method_strct();
				if (_229d70d33_is_instanced_struct(_337917_s)) {
					jule::Bool _338125_used_reference_elem = (*((*(_334041_d))._field_kind))._method_sptr() != nullptr;
					return (*this)._method_eval_struct_sub_ident(_334041_d,(*(_334117_kind))._method_strct(),_334055_si,_338125_used_reference_elem);
				}
			}
		}
		else if ((*(_334117_kind))._method_slc() != nullptr) {
			_case_begin_5076116480:;
			{
				return (*this)._method_eval_slice_sub_ident(_334041_d,(*(_334055_si))._field_ident);
			}
		}
		else if ((*(_334117_kind))._method_arr() != nullptr) {
			_case_begin_5076116576:;
			{
				return (*this)._method_eval_array_sub_ident(_334041_d,(*(_334055_si))._field_ident);
			}
		}
		else if ((*(_334117_kind))._method_map() != nullptr) {
			_case_begin_5076116672:;
			{
				return (*this)._method_eval_map_sub_ident(_334041_d,(*(_334055_si))._field_ident);
			}
		}
		else if ((*(_334117_kind))._method_prim() != nullptr) {
			_case_begin_5076116768:;
			{
				jule::Ptr<_229d681e3_Prim> _339517_p = (*(_334117_kind))._method_prim();
				{
					auto &_match_expr{ (*(_339517_p))._field_kind };
					
					if (_match_expr == jule::Str("str", 3)) {
						_case_begin_5076127280:;
						{
							return (*this)._method_eval_str_sub_ident(_334041_d,(*(_334055_si))._field_ident);
						}
					}
					_match_end_5076136608:;
				}
			}
		}
		_match_end_5076113280:;
	}
	(*this)._method_push_err((*(_334055_si))._field_ident,jule::Str("object @ is not supports sub-defines", 36),jule::Slice<jule::Any>({jule::Any((*((*(_334041_d))._field_kind))._method_to_str())}));
	return nullptr;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_sub_ident(jule::Ptr<_228d31971_SubIdentExpr> _340638_si) {
	jule::Ptr<_229d681e3_TypeKind> _340717_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_340717_prefix;
	});
	jule::Ptr<_229d70d33_Data> _341117_d = (*(this->self))._method_eval_expr_kind((*(_340638_si))._field_expr);
	if (_341117_d == nullptr) {
		return nullptr;
	}
	if ((*(_341117_d))._field_decl) {
		return (*(this->self))._method_eval_type_static(_341117_d,_340638_si);
	}
	return (*(this->self))._method_eval_obj_sub_ident(_341117_d,_340638_si);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_tuple(jule::Ptr<_228d31971_TupleExpr> _342334_tup) {
	jule::Ptr<_229d681e3_Tuple> _342417_tup_t = jule::new_struct_ptr<_229d681e3_Tuple>(new( std::nothrow ) _229d681e3_Tuple());
	(*(_342417_tup_t))._field_types=jule::Slice<jule::Ptr<_229d681e3_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_342334_tup))._field_expr.len()));
	jule::Ptr<_1e5870218_TupleExprModel> _342717_model = jule::new_struct<_1e5870218_TupleExprModel>(new( std::nothrow ) _1e5870218_TupleExprModel(jule::Slice<jule::Ptr<_229d70d33_Data>>::alloc(0LL,static_cast<jule::I64>((*(_342334_tup))._field_expr.len()))));
	jule::Bool _343117_ok = true;
	{
		auto &expr = (*(_342334_tup))._field_expr;
		auto it = expr.begin();
		_iter_begin_5076175008:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Expr> _229d70d33_expr = *it;
			{
				jule::Ptr<_229d70d33_Data> _343321_d = (*(this->self))._method_eval_expr_kind((*(_229d70d33_expr))._field_kind);
				if (_343321_d == nullptr) {
					_343117_ok=false;
					goto _iter_next_5076175008;
				}
				(*(_342417_tup_t))._field_types = jule::alloc_for_append((*(_342417_tup_t))._field_types,1);(*(_342417_tup_t))._field_types.push((*(_343321_d))._field_kind);
				(*(_342717_model))._field_datas = jule::alloc_for_append((*(_342717_model))._field_datas,1);(*(_342717_model))._field_datas.push(_343321_d);
			}
			_iter_next_5076175008:;
			++it;
			goto _iter_begin_5076175008;
		}
		_iter_end_5076175008:;
	}
	if ((!(_343117_ok))) {
		return nullptr;
	}
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_342417_tup_t)),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_342717_model),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_map(jule::Ptr<_229d681e3_Map> _345232_m,jule::Ptr<_228d31971_BraceLit> _345245_lit) {
	jule::Ptr<_1e5870218_MapExprModel> _345317_model = jule::new_struct<_1e5870218_MapExprModel>(new( std::nothrow ) _1e5870218_MapExprModel((*(_345232_m))._field_key,(*(_345232_m))._field_val,jule::Slice<jule::Ptr<_1e5870218_KeyValPairExprModel>>()));
	{
		auto &expr = (*(_345245_lit))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5076188016:;
		if (it != expr.end()) {
			jule::Any _229d70d33_expr = *it;
			{
				{
					auto &_match_expr{ _229d70d33_expr };
					
					if (_match_expr.type_is<jule::Ptr<_228d31971_KeyValPair>>()) {
						_case_begin_5076189152:;
					}
					else {
						_case_begin_5076189568:;
						{
							(*(this->self))._method_push_err((*(_345245_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_5076189264:;
				}
				jule::Ptr<_228d31971_KeyValPair> _346821_pair = _229d70d33_expr.operator jule::Ptr<_228d31971_KeyValPair>();
				jule::Ptr<_229d70d33_Data> _347021_key = (*(this->self))._method_eval_expr_kind((*(_346821_pair))._field_key);
				if (_347021_key == nullptr) {
					return nullptr;
				}
				jule::Ptr<_229d70d33_Data> _347521_val = (*(this->self))._method_eval_expr_kind((*(_346821_pair))._field_val);
				if (_347521_val == nullptr) {
					return nullptr;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_345232_m))._field_key,_347021_key,(*(_346821_pair))._field_colon);
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_345232_m))._field_val,_347521_val,(*(_346821_pair))._field_colon);
				(*(_345317_model))._field_entries = jule::alloc_for_append((*(_345317_model))._field_entries,1);(*(_345317_model))._field_entries.push(jule::new_struct<_1e5870218_KeyValPairExprModel>(new( std::nothrow ) _1e5870218_KeyValPairExprModel((*(_347021_key))._field_model,(*(_347521_val))._field_model)));
			}
			_iter_next_5076188016:;
			++it;
			goto _iter_begin_5076188016;
		}
		_iter_end_5076188016:;
	}
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_345232_m)),jule::Ptr<_229d681e3_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_345317_model),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_brace_lit(jule::Ptr<_228d31971_BraceLit> _349638_lit) {
	{
		
		if ((*(this->self))._field_prefix == nullptr) {
			_case_begin_5076210064:;
			{
				(*(this->self))._method_push_err((*(_349638_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else if ((*((*(this->self))._field_prefix))._method_map() != nullptr) {
			_case_begin_5076210272:;
			{
				return (*(this->self))._method_eval_map((*((*(this->self))._field_prefix))._method_map(),_349638_lit);
			}
		}
		else if ((*((*(this->self))._field_prefix))._method_strct() != nullptr) {
			_case_begin_5076210368:;
			{
				return (*(this->self))._method_eval_struct_lit_explicit((*((*(this->self))._field_prefix))._method_strct(),(*(_349638_lit))._field_exprs,(*(_349638_lit))._field_token);
			}
		}
		else {
			_case_begin_5076207248:;
			{
				(*(this->self))._method_push_err((*(_349638_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5076207072:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_anon_fn(jule::Ptr<_228d31971_FnDecl> _351435_decl) {
	_229d681e3_TypeChecker _351517_tc = _229d681e3_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ptr<_229d681e3_Referencer>(),_228d7aadb_Token(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	jule::Ptr<_229b6ebcb_FnIns> _351917_ins = _351517_tc._method_build_fn(_351435_decl);
	(*(_351917_ins))._field_anon=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_ScopeChecker>>()) {
			_case_begin_5076222720:;
			{
				jule::Ptr<_1e56c3885_ScopeChecker> _352421_sc = (*this)._field_lookup.operator jule::Ptr<_1e56c3885_ScopeChecker>();
				jule::Ptr<_1e56c3885_ScopeChecker> _352521_scc = (*(_352421_sc))._method_new_child_checker();
				(*(_352521_scc))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeLabel>>>(nullptr);
				(*(_352521_scc))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeGoto>>>(nullptr);
				(*(_352521_scc))._field_owner=nullptr;
				(*(_352521_scc))._field_child_index=0LL;
				(*(_352521_scc))._field_it=0LL;
				(*(_352521_scc))._field_cse=0LL;
				(*(_352521_scc))._field_owner=_351917_ins;
				(*((*this)._field_s))._method_check_fn_ins_sc(_351917_ins,_352521_scc);
			}
		}
		else {
			_case_begin_5076226080:;
			{
				(*((*this)._field_s))._method_check_fn_ins(_351917_ins);
			}
		}
		_match_end_5076225648:;
	}
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_351917_ins)),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_AnonFnExprModel>(new( std::nothrow ) _1e5870218_AnonFnExprModel(_351917_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_binop(jule::Ptr<_228d31971_BinopExpr> _354834_op) {
	jule::Ptr<_229d681e3_TypeKind> _354917_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_354917_prefix;
	});
	_229d70d33_BinopSolver _355317_bs = _229d70d33_BinopSolver(this->self,jule::Ptr<_229d70d33_Data>(),jule::Ptr<_229d70d33_Data>(),_228d7aadb_Token());
	return _355317_bs._method_solve(_354834_op);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_ternary(jule::Ptr<_228d31971_TernaryExpr> _355936_ter) {
	jule::Ptr<_229d70d33_Data> _356017_d = (*(this->self))._method_eval_expr_kind((*(_355936_ter))._field_condition);
	if (_356017_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_229d681e3_Prim> _356513_prim = (*((*(_356017_d))._field_kind))._method_prim();
	if ((_356513_prim == nullptr) || (!((*(_356513_prim))._method_is_bool()))) {
		(*(this->self))._method_push_err((*(_355936_ter))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _357117_td = (*(this->self))._method_eval_expr_kind((*(_355936_ter))._field_true_expr);
	if (_357117_td == nullptr) {
		return nullptr;
	}
	(*(this->self))._method_apply_numeric_prefix(_357117_td);
	if ((*((*(_357117_td))._field_kind))._method_void()) {
		(*(this->self))._method_push_err((*(_355936_ter))._field_token,jule::Str("void type cannot used for ternary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229d681e3_TypeKind> _358217_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_357117_td))._field_kind;
	jule::Ptr<_229d70d33_Data> _358517_fd = (*(this->self))._method_eval_expr_kind((*(_355936_ter))._field_false_expr);
	(*(this->self))._method_apply_numeric_prefix(_358517_fd);
	(*(this->self))._field_prefix=_358217_prefix;
	if (_358517_fd == nullptr) {
		return nullptr;
	}
	_1e58b019d_AssignTypeChecker _359317_ac = _1e58b019d_AssignTypeChecker((*(this->self))._field_s,jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_229d70d33_Data>(),(*(_355936_ter))._field_token);
	if ((*(_357117_td))._method_is_const() && (!((*(_358517_fd))._method_is_const()))) {
		_359317_ac._field_dest=(*(_358517_fd))._field_kind;
		_359317_ac._field_d=_357117_td;
	} else {
		_359317_ac._field_dest=(*(_357117_td))._field_kind;
		_359317_ac._field_d=_358517_fd;
	}
	if ((!(_359317_ac._method_check()))) {
		(*(this->self))._method_push_suggestion(jule::Str("use same or compatible values for ternary expressions", 53),jule::Slice<jule::Any>());
	}
	if ((*(_356017_d))._method_is_const()) {
		if ((*((*(_356017_d))._field_constant))._method_read_bool()) {
			return _357117_td;
		}
		return _358517_fd;
	}
	jule::Ptr<_229d70d33_Data> _361517_r = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data());
	(*(_361517_r))._field_kind=_359317_ac._field_dest;
	(*(_361517_r))._field_lvalue=false;
	(*(_361517_r))._field_mutable=(*((*(_361517_r))._field_kind))._method_mutable();
	(*(_361517_r))._field_model=jule::Any(jule::new_struct<_1e5870218_TernaryExprModel>(new( std::nothrow ) _1e5870218_TernaryExprModel((*(_356017_d))._field_model,(*(_357117_td))._field_model,(*(_358517_fd))._field_model)));
	return _361517_r;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_expr_kind(jule::Any _362738_kind) {
	jule::Ptr<_229d70d33_Data> _362817_d = nullptr;
	{
		auto &_match_expr{ _362738_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_LitExpr>>()) {
			_case_begin_5076284128:;
			{
				_362817_d=(*(this->self))._method_eval_lit(_362738_kind.operator jule::Ptr<_228d31971_LitExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_IdentExpr>>()) {
			_case_begin_5076284224:;
			{
				_362817_d=(*(this->self))._method_eval_ident(_362738_kind.operator jule::Ptr<_228d31971_IdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_UnaryExpr>>()) {
			_case_begin_5076284320:;
			{
				_362817_d=(*(this->self))._method_eval_unary(_362738_kind.operator jule::Ptr<_228d31971_UnaryExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_VariadicExpr>>()) {
			_case_begin_5076284416:;
			{
				_362817_d=(*(this->self))._method_eval_variadic(_362738_kind.operator jule::Ptr<_228d31971_VariadicExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_UnsafeExpr>>()) {
			_case_begin_5076284528:;
			{
				_362817_d=(*(this->self))._method_eval_unsafe(_362738_kind.operator jule::Ptr<_228d31971_UnsafeExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_SliceExpr>>()) {
			_case_begin_5076284640:;
			{
				_362817_d=(*(this->self))._method_eval_slice_expr(_362738_kind.operator jule::Ptr<_228d31971_SliceExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_IndexingExpr>>()) {
			_case_begin_5076284752:;
			{
				_362817_d=(*(this->self))._method_eval_indexing(_362738_kind.operator jule::Ptr<_228d31971_IndexingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_SlicingExpr>>()) {
			_case_begin_5076284864:;
			{
				_362817_d=(*(this->self))._method_eval_slicing(_362738_kind.operator jule::Ptr<_228d31971_SlicingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_CastExpr>>()) {
			_case_begin_5076284976:;
			{
				_362817_d=(*(this->self))._method_eval_cast(_362738_kind.operator jule::Ptr<_228d31971_CastExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_NsSelectionExpr>>()) {
			_case_begin_5076285088:;
			{
				_362817_d=(*(this->self))._method_eval_ns_selection(_362738_kind.operator jule::Ptr<_228d31971_NsSelectionExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_StructLit>>()) {
			_case_begin_5076285200:;
			{
				_362817_d=(*(this->self))._method_eval_struct_lit(_362738_kind.operator jule::Ptr<_228d31971_StructLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TypeDecl>>()) {
			_case_begin_5076285312:;
			{
				_362817_d=(*(this->self))._method_eval_type(_362738_kind.operator jule::Ptr<_228d31971_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_FnCallExpr>>()) {
			_case_begin_5076285424:;
			{
				_362817_d=(*(this->self))._method_eval_fn_call(_362738_kind.operator jule::Ptr<_228d31971_FnCallExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_SubIdentExpr>>()) {
			_case_begin_5076285536:;
			{
				_362817_d=(*(this->self))._method_eval_sub_ident(_362738_kind.operator jule::Ptr<_228d31971_SubIdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TupleExpr>>()) {
			_case_begin_5076285648:;
			{
				_362817_d=(*(this->self))._method_eval_tuple(_362738_kind.operator jule::Ptr<_228d31971_TupleExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_BraceLit>>()) {
			_case_begin_5076285760:;
			{
				_362817_d=(*(this->self))._method_eval_brace_lit(_362738_kind.operator jule::Ptr<_228d31971_BraceLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_FnDecl>>()) {
			_case_begin_5076285872:;
			{
				_362817_d=(*(this->self))._method_eval_anon_fn(_362738_kind.operator jule::Ptr<_228d31971_FnDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_BinopExpr>>()) {
			_case_begin_5076285984:;
			{
				_362817_d=(*(this->self))._method_eval_binop(_362738_kind.operator jule::Ptr<_228d31971_BinopExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TernaryExpr>>()) {
			_case_begin_5076286096:;
			{
				_362817_d=(*(this->self))._method_eval_ternary(_362738_kind.operator jule::Ptr<_228d31971_TernaryExpr>());
			}
		}
		_match_end_5076283680:;
	}
	if (_362817_d == nullptr) {
		return nullptr;
	}
	if ((*(_362817_d))._field_kind == nullptr) {
		return _362817_d;
	}
	if ((!((*(_362817_d))._field_decl))) {
		if ((((((((!((*((*(_362817_d))._field_kind))._method_cpp_linked())) && ((*(this->self))._field_prefix != nullptr)) && ((*(_362817_d))._field_cast_kind == nullptr)) && (!((*((*(_362817_d))._field_kind))._field_variadic))) && (!((*(_362817_d))._field_lvalue))) && (!((*(_362817_d))._method_is_const()))) && ((*((*(_362817_d))._field_kind))._method_prim() != nullptr)) && _1e860322e_is_num((*((*((*(_362817_d))._field_kind))._method_prim()))._field_kind)) {
			(*(_362817_d))._field_cast_kind=(*(_362817_d))._field_kind;
		}
		_229d70d33_apply_cast_kind(_362817_d);
		if (((*((*(_362817_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_362817_d))._field_kind))._method_prim()))._method_is_any()))) {
			if ((((*(this->self))._field_prefix != nullptr) && ((*((*(this->self))._field_prefix))._method_prim() != nullptr)) && (*((*((*(this->self))._field_prefix))._method_prim()))._method_is_any()) {
				(*(_362817_d))._field_cast_kind=(*(this->self))._field_prefix;
				_229d70d33_apply_cast_kind_model(_362817_d);
				(*(_362817_d))._field_cast_kind=nullptr;
			}
		}
	}
	return _362817_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval(jule::Ptr<_228d31971_Expr> _368828_expr) {
	jule::Ptr<_229d70d33_Data> _368917_d = (*(this->self))._method_eval_expr_kind((*(_368828_expr))._field_kind);
	if ((_368917_d == nullptr) || ((*(_368917_d))._field_kind == nullptr)) {
		return nullptr;
	}
	{
		
		if ((*((*(_368917_d))._field_kind))._method_fnc() != nullptr) {
			_case_begin_5076346336:;
			{
				jule::Ptr<_229b6ebcb_FnIns> _369621_f = (*((*(_368917_d))._field_kind))._method_fnc();
				if ((*(_369621_f))._method_is_builtin()) {
					goto _match_end_5076345328;
				}
				if ((*(_369621_f))._field_generics.len() != (*((*(_369621_f))._field_decl))._field_generics.len()) {
					(*((*(this->self))._field_s))._method_push_err((*(_368828_expr))._field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				}
				if ((*((*(_369621_f))._field_decl))._method_is_method()) {
					(*((*(this->self))._field_s))._method_push_err((*(_368828_expr))._field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_5076345328:;
	}
	return _368917_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_Eval::_method_eval_expr(jule::Ptr<_228d31971_Expr> _371633_expr) {
	jule::Ptr<_229d70d33_Data> _371717_d = (*(this->self))._method_eval(_371633_expr);
	{
		
		if (_371717_d == nullptr) {
			_case_begin_5076361264:;
			{
				return nullptr;
			}
		}
		else if ((*(_371717_d))._field_decl) {
			_case_begin_5076361360:;
			{
				(*(this->self))._method_push_err((*(_371633_expr))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else {
			_case_begin_5076359904:;
			{
				return _371717_d;
			}
		}
		_match_end_5076359824:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _229d70d33_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "immutable:" << _Src._field_immutable << ", ";
	_Stream << "ignored:" << _Src._field_ignored << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	jule::Str _7517_kind = jule::Str();
	if ((*this)._field_variadic) {
		_7517_kind+=jule::Str("...", 3);
	}
	if ((*this)._method_cpp_linked()) {
		_7517_kind+=jule::Str("cpp.", 4);
		_7517_kind+=(*this)._field_cpp_ident;
	} else {
		_7517_kind+=(*this)._field_kind.get()._method_to_str();
	}
	return _7517_kind;
}



inline jule::Bool _229d681e3_TypeKind::_method_equals(jule::Ptr<_229d681e3_TypeKind> _9122_other) {
	if ((*(this->self))._method_is_nil()) {
		return (*(_9122_other))._method_is_nil();
	}
	if ((*(this->self))._method_cpp_linked()) {
		return (*(_9122_other))._method_cpp_linked() && ((*(this->self))._field_cpp_ident == (*(_9122_other))._field_cpp_ident);
	}
	return (*(this->self))._field_kind.get()._method_equals(_9122_other);
}



inline jule::Bool _229d681e3_TypeKind::_method_cpp_linked(void) {
	return (*this)._field_cpp_ident.len() != 0LL;
}



inline jule::Bool _229d681e3_TypeKind::_method_is_nil(void) {
	return (*this)._field_kind == nullptr;
}



inline jule::Bool _229d681e3_TypeKind::_method_void(void) {
	jule::Ptr<_229d681e3_Prim> _11413_prim = (*this)._method_prim();
	return (_11413_prim != nullptr) && ((*(_11413_prim))._field_kind == jule::Str("void", 4));
}



inline jule::Bool _229d681e3_TypeKind::_method_mutable(void) {
	{
		_229d681e3_TypeKind* _12121__self = (&((*this)));
		if ((*(_12121__self))._method_strct() != nullptr) {
			return (*((*(_12121__self))._method_strct()))._field_mutable;
		}
		if ((*(_12121__self))._method_trt() != nullptr) {
			return (*((*(_12121__self))._method_trt()))._field_mutable;
		}
		if ((*(_12121__self))._method_prim() != nullptr) {
			jule::Ptr<_229d681e3_Prim> _13021_p = (*(_12121__self))._method_prim();
			return (*(_13021_p))._method_is_any();
		}
		if ((*(_12121__self))._method_arr() != nullptr) {
			return (*((*((*(_12121__self))._method_arr()))._field_elem))._method_mutable();
		}
		return (((*(_12121__self))._method_slc() != nullptr) || ((*(_12121__self))._method_ptr() != nullptr)) || ((*(_12121__self))._method_sptr() != nullptr);
	}
}



inline jule::Bool _229d681e3_TypeKind::_method_nil_compatible(void) {
	{
		_229d681e3_TypeKind* _14521__self = (&((*this)));
		jule::Ptr<_229d681e3_Prim> _14717_prim = (*(_14521__self))._method_prim();
		if ((_14717_prim != nullptr) && (*(_14717_prim))._method_is_any()) {
			return true;
		}
		return ((((((*(_14521__self))._method_is_nil() || ((*(_14521__self))._method_fnc() != nullptr)) || ((*(_14521__self))._method_sptr() != nullptr)) || ((*(_14521__self))._method_ptr() != nullptr)) || ((*(_14521__self))._method_trt() != nullptr)) || ((*(_14521__self))._method_slc() != nullptr)) || ((*(_14521__self))._method_map() != nullptr);
	}
}



inline jule::Bool _229d681e3_TypeKind::_method_performs_rc(void) {
	{
		_229d681e3_TypeKind* _16521__self = (&((*this)));
		return (((*(_16521__self))._method_sptr() != nullptr) || ((*(_16521__self))._method_slc() != nullptr)) || ((*(_16521__self))._method_trt() != nullptr);
	}
}



inline jule::Bool _229d681e3_TypeKind::_method_supports_cloning(void) {
	{
		_229d681e3_TypeKind* _17321__self = (&((*this)));
		{
			
			if ((*(_17321__self))._method_prim() != nullptr) {
				_case_begin_5076849872:;
				{
					return (!((*((*(_17321__self))._method_prim()))._method_is_any()));
				}
			}
			else if ((*(_17321__self))._method_enm() != nullptr) {
				_case_begin_5076848400:;
				{
					return true;
				}
			}
			else if ((*(_17321__self))._method_fnc() != nullptr) {
				_case_begin_5076848496:;
				{
					return true;
				}
			}
			else if ((*(_17321__self))._method_ptr() != nullptr) {
				_case_begin_5076848608:;
				{
					return true;
				}
			}
			else if ((*(_17321__self))._method_slc() != nullptr) {
				_case_begin_5076848720:;
				{
					return (*((*((*(_17321__self))._method_slc()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17321__self))._method_map() != nullptr) {
				_case_begin_5076849120:;
				{
					jule::Ptr<_229d681e3_Map> _18721_m = (*(_17321__self))._method_map();
					return (*((*(_18721_m))._field_key))._method_supports_cloning() && (*((*(_18721_m))._field_val))._method_supports_cloning();
				}
			}
			else if ((*(_17321__self))._method_arr() != nullptr) {
				_case_begin_5076849232:;
				{
					return (*((*((*(_17321__self))._method_arr()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17321__self))._method_sptr() != nullptr) {
				_case_begin_5076849344:;
				{
					return (*((*((*(_17321__self))._method_sptr()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17321__self))._method_strct() != nullptr) {
				_case_begin_5076849456:;
				{
					jule::Ptr<_228e0d025_StructIns> _19725_s = (*(_17321__self))._method_strct();
					if ((!((*(_19725_s))._field_mutable))) {
						return true;
					}
					if ((((*(_19725_s))._field_decl == nullptr) || (*((*(_19725_s))._field_decl))._field_cpp_linked) || (!((*((*(_19725_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						return false;
					}
					return true;
				}
			}
			else {
				_case_begin_5076848096:;
				{
					return false;
				}
			}
			_match_end_5076847984:;
		}
	}
}



inline jule::Bool _229d681e3_TypeKind::_method_variadicable(void) {
	{
		_229d681e3_TypeKind* _21721__self = (&((*this)));
		return (*(_21721__self))._method_slc() != nullptr;
	}
}



inline jule::Ptr<_229d681e3_Prim> _229d681e3_TypeKind::_method_prim(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_Prim>>()) {
			_case_begin_5076877552:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229d681e3_Prim>();
			}
		}
		else {
			_case_begin_5076878656:;
			{
				return nullptr;
			}
		}
		_match_end_5076878576:;
	}
}



inline jule::Ptr<_229d681e3_Sptr> _229d681e3_TypeKind::_method_sptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_Sptr>>()) {
			_case_begin_5076880512:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229d681e3_Sptr>();
			}
		}
		else {
			_case_begin_5076879472:;
			{
				return nullptr;
			}
		}
		_match_end_5076880336:;
	}
}



inline jule::Ptr<_229d681e3_Ptr> _229d681e3_TypeKind::_method_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_Ptr>>()) {
			_case_begin_5076885136:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229d681e3_Ptr>();
			}
		}
		else {
			_case_begin_5076882128:;
			{
				return nullptr;
			}
		}
		_match_end_5076883408:;
	}
}



inline jule::Ptr<_1e56be485_Enum> _229d681e3_TypeKind::_method_enm(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1e56be485_Enum>>()) {
			_case_begin_5076887888:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1e56be485_Enum>();
			}
		}
		else {
			_case_begin_5076886096:;
			{
				return nullptr;
			}
		}
		_match_end_5076884960:;
	}
}



inline jule::Ptr<_229d681e3_Arr> _229d681e3_TypeKind::_method_arr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_Arr>>()) {
			_case_begin_5076888096:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229d681e3_Arr>();
			}
		}
		else {
			_case_begin_5076888512:;
			{
				return nullptr;
			}
		}
		_match_end_5076888848:;
	}
}



inline jule::Ptr<_229d681e3_Slc> _229d681e3_TypeKind::_method_slc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_Slc>>()) {
			_case_begin_5076891584:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229d681e3_Slc>();
			}
		}
		else {
			_case_begin_5076891472:;
			{
				return nullptr;
			}
		}
		_match_end_5076891392:;
	}
}



inline jule::Ptr<_229b6ebcb_FnIns> _229d681e3_TypeKind::_method_fnc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229b6ebcb_FnIns>>()) {
			_case_begin_5076893200:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229b6ebcb_FnIns>();
			}
		}
		else {
			_case_begin_5076894080:;
			{
				return nullptr;
			}
		}
		_match_end_5076894480:;
	}
}



inline jule::Ptr<_228e0d025_StructIns> _229d681e3_TypeKind::_method_strct(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_StructIns>>()) {
			_case_begin_5076897216:;
			{
				return (*this)._field_kind.operator jule::Ptr<_228e0d025_StructIns>();
			}
		}
		else {
			_case_begin_5076897104:;
			{
				return nullptr;
			}
		}
		_match_end_5076897024:;
	}
}



inline jule::Ptr<_229b5076c_Trait> _229d681e3_TypeKind::_method_trt(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229b5076c_Trait>>()) {
			_case_begin_5076898832:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229b5076c_Trait>();
			}
		}
		else {
			_case_begin_5076899968:;
			{
				return nullptr;
			}
		}
		_match_end_5076899168:;
	}
}



inline jule::Ptr<_229d681e3_Map> _229d681e3_TypeKind::_method_map(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_Map>>()) {
			_case_begin_5076901648:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229d681e3_Map>();
			}
		}
		else {
			_case_begin_5076902784:;
			{
				return nullptr;
			}
		}
		_match_end_5076901984:;
	}
}



inline jule::Ptr<_229d681e3_Tuple> _229d681e3_TypeKind::_method_tup(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_Tuple>>()) {
			_case_begin_5076904464:;
			{
				return (*this)._field_kind.operator jule::Ptr<_229d681e3_Tuple>();
			}
		}
		else {
			_case_begin_5076905680:;
			{
				return nullptr;
			}
		}
		_match_end_5076905600:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_TypeKind &_Src) {
	_Stream << "TypeKind{";
	_Stream << "cpp_ident:" << _Src._field_cpp_ident << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _229d681e3_TypeSymbol::_method_checked(void) {
	return (*this)._field_kind != nullptr;
}



inline void _229d681e3_TypeSymbol::_method_remove_kind(void) {
	(*this)._field_kind=nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _229d681e3_Prim::_method_equals(jule::Ptr<_229d681e3_TypeKind> _33622_other) {
	jule::Ptr<_229d681e3_Prim> _33713_prim = (*(_33622_other))._method_prim();
	if (_33713_prim == nullptr) {
		return false;
	}
	return _1e8570b6e_real_kind_of((*(this->self))._field_kind) == _1e8570b6e_real_kind_of((*(_33713_prim))._field_kind);
}



inline jule::Bool _229d681e3_Prim::_method_is_i8(void) {
	return (*this)._field_kind == jule::Str("i8", 2);
}



inline jule::Bool _229d681e3_Prim::_method_is_i16(void) {
	return (*this)._field_kind == jule::Str("i16", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_i32(void) {
	return (*this)._field_kind == jule::Str("i32", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_i64(void) {
	return (*this)._field_kind == jule::Str("i64", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_u8(void) {
	return (*this)._field_kind == jule::Str("u8", 2);
}



inline jule::Bool _229d681e3_Prim::_method_is_u16(void) {
	return (*this)._field_kind == jule::Str("u16", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_u32(void) {
	return (*this)._field_kind == jule::Str("u32", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_u64(void) {
	return (*this)._field_kind == jule::Str("u64", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_f32(void) {
	return (*this)._field_kind == jule::Str("f32", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_f64(void) {
	return (*this)._field_kind == jule::Str("f64", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_int(void) {
	return (*this)._field_kind == jule::Str("int", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_uint(void) {
	return (*this)._field_kind == jule::Str("uint", 4);
}



inline jule::Bool _229d681e3_Prim::_method_is_uintptr(void) {
	return (*this)._field_kind == jule::Str("uintptr", 7);
}



inline jule::Bool _229d681e3_Prim::_method_is_bool(void) {
	return (*this)._field_kind == jule::Str("bool", 4);
}



inline jule::Bool _229d681e3_Prim::_method_is_str(void) {
	return (*this)._field_kind == jule::Str("str", 3);
}



inline jule::Bool _229d681e3_Prim::_method_is_any(void) {
	return (*this)._field_kind == jule::Str("any", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Prim &_Src) {
	_Stream << "Prim{";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_Sptr::_method_to_str(void) {
	return jule::Str("&", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _229d681e3_Sptr::_method_equals(jule::Ptr<_229d681e3_TypeKind> _40522_other) {
	jule::Ptr<_229d681e3_Sptr> _40613_sptr = (*(_40522_other))._method_sptr();
	if (_40613_sptr == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_40613_sptr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Sptr &_Src) {
	_Stream << "Sptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _229d681e3_Slc::_method_equals(jule::Ptr<_229d681e3_TypeKind> _42422_other) {
	jule::Ptr<_229d681e3_Slc> _42513_slc = (*(_42422_other))._method_slc();
	if (_42513_slc == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_42513_slc))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Slc &_Src) {
	_Stream << "Slc{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_Tuple::_method_to_str(void) {
	jule::Str _44117_s = jule::Str("(", 1);
	_44117_s+=(*((*this)._field_types[0LL]))._method_to_str();
	{
		auto expr = (*this)._field_types.slice(1LL);
		auto it = expr.begin();
		_iter_begin_5076960512:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeKind> &_229d681e3_t = *it;
			{
				_44117_s+=jule::Str(",", 1);
				_44117_s+=(*(_229d681e3_t))._method_to_str();
			}
			_iter_next_5076960512:;
			++it;
			goto _iter_begin_5076960512;
		}
		_iter_end_5076960512:;
	}
	_44117_s+=jule::Str(")", 1);
	return _44117_s;
}



inline jule::Bool _229d681e3_Tuple::_method_equals(jule::Ptr<_229d681e3_TypeKind> _45222_other) {
	jule::Ptr<_229d681e3_Tuple> _45313_tup = (*(_45222_other))._method_tup();
	if (_45313_tup == nullptr) {
		return false;
	}
	if ((*(this->self))._field_types.len() != (*(_45313_tup))._field_types.len()) {
		return false;
	}
	jule::Int _46217_i = 0LL;
	for (; _46217_i < (*(this->self))._field_types.len(); (_46217_i)++) {
		{
			if ((!((*((*(this->self))._field_types[_46217_i]))._method_equals((*(_45313_tup))._field_types[_46217_i])))) {
				return false;
			}
		}
	_iter_next_5076968944:;
	}
	_iter_end_5076968944:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Tuple &_Src) {
	_Stream << "Tuple{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_Map::_method_to_str(void) {
	jule::Str _48217_s = jule::Str("[", 1);
	_48217_s+=(*((*this)._field_key))._method_to_str();
	_48217_s+=jule::Str(":", 1);
	_48217_s+=(*((*this)._field_val))._method_to_str();
	_48217_s+=jule::Str("]", 1);
	return _48217_s;
}



inline jule::Bool _229d681e3_Map::_method_equals(jule::Ptr<_229d681e3_TypeKind> _49122_other) {
	jule::Ptr<_229d681e3_Map> _49213_map = (*(_49122_other))._method_map();
	if (_49213_map == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_key))._method_equals((*(_49213_map))._field_key) && (*((*(this->self))._field_val))._method_equals((*(_49213_map))._field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Map &_Src) {
	_Stream << "Map{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_Arr::_method_to_str(void) {
	jule::Str _51017_s = jule::Str("[", 1);
	_51017_s+=_22866a079_itoa((*this)._field_n);
	_51017_s+=jule::Str("]", 1);
	_51017_s+=(*((*this)._field_elem))._method_to_str();
	return _51017_s;
}



inline jule::Bool _229d681e3_Arr::_method_equals(jule::Ptr<_229d681e3_TypeKind> _51822_other) {
	jule::Ptr<_229d681e3_Arr> _51913_arr = (*(_51822_other))._method_arr();
	if (_51913_arr == nullptr) {
		return false;
	}
	return ((*(this->self))._field_n == (*(_51913_arr))._field_n) && (*((*(this->self))._field_elem))._method_equals((*(_51913_arr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Arr &_Src) {
	_Stream << "Arr{";
	_Stream << "auto:" << _Src._field_auto << ", ";
	_Stream << "n:" << _Src._field_n << ", ";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229d681e3_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _229d681e3_Ptr::_method_equals(jule::Ptr<_229d681e3_TypeKind> _54222_other) {
	jule::Ptr<_229d681e3_Ptr> _54313_ptr = (*(_54222_other))._method_ptr();
	if (_54313_ptr == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_54313_ptr))._field_elem);
}



inline jule::Bool _229d681e3_Ptr::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Ptr &_Src) {
	_Stream << "Ptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline void _228cc0bc9_DirectiveEval::_method_push_err(_228d7aadb_Token _2027_t,jule::Str _2037_fmt,jule::Slice<jule::Any> _2050_args) {
	(*this)._field_logs = jule::alloc_for_append((*this)._field_logs,1);(*this)._field_logs.push(_2276bcb9e_Log(1LLU,_2027_t._field_row,_2027_t._field_column,(*(_2027_t._field_file))._method_path(),_2276bcb9e_logf(_2037_fmt,_2050_args),jule::Str(),jule::Str()));
}



inline jule::Slice<jule::Slice<_228d7aadb_Token>> _228cc0bc9_DirectiveEval::_method_split_operans(jule::Str _3232_op,jule::Slice<_228d7aadb_Token>& _3252_tokens) {
	jule::Slice<jule::Slice<_228d7aadb_Token>> _3317_parts = jule::Slice<jule::Slice<_228d7aadb_Token>>::alloc(0LL,10LL);
	jule::Int _3517_i = 0LL;
	jule::Int _3617_range_n = 0LL;
	jule::Int _3717_last = 0LL;
	for (; _3517_i < (_3252_tokens.len() - 1LL); (_3517_i)++) {
		{
			_228d7aadb_Token _3917_b = _3252_tokens[_3517_i];
			if (_3917_b._field_id == 3LLU) {
				{
					auto &_match_expr{ _3917_b._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_5077548704:;
						{
							(_3617_range_n)++;
							goto _iter_next_5077544960;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_5077548976:;
						{
							(_3617_range_n)--;
						}
					}
					_match_end_5077548560:;
				}
			}
			if ((_3617_range_n > 0LL) || (_3917_b._field_id != 7LLU)) {
				goto _iter_next_5077544960;
			}
			if (_3917_b._field_kind == _3232_op) {
				_3317_parts.push(_3252_tokens.slice(_3717_last,_3517_i));
				_3717_last=static_cast<jule::Int>(_3517_i + 1LL);
			}
		}
	_iter_next_5077544960:;
	}
	_iter_end_5077544960:;
	if (_3717_last < _3252_tokens.len()) {
		_3317_parts.push(_3252_tokens.slice(_3717_last));
	} else {
		(*this)._method_push_err(_3252_tokens[_3717_last - 1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _3317_parts;
}



inline jule::Bool _228cc0bc9_DirectiveEval::_method_eval_directive_ident(jule::Str _7335_ident) {
	if (_7335_ident == jule::Str()) {
		return false;
	}
	{
		auto &expr = _228cd1217_VARS;
		auto it = expr.begin();
		_iter_begin_5077559328:;
		if (it != expr.end()) {
			jule::Str &_228cc0bc9_var = *it;
			{
				if (_228cc0bc9_var == _7335_ident) {
					return true;
				}
			}
			_iter_next_5077559328:;
			++it;
			goto _iter_begin_5077559328;
		}
		_iter_end_5077559328:;
	}
	return false;
}



inline jule::Bool _228cc0bc9_DirectiveEval::_method_eval_directive_part(jule::Slice<_228d7aadb_Token> _8942_part) {
	jule::Bool _9013_logical_not = (_8942_part[0LL]._field_id == 7LLU) && (_8942_part[0LL]._field_kind == jule::Str("!", 1));
	if (_9013_logical_not) {
		_8942_part=_8942_part.slice(1LL);
	}
	if (_8942_part.len() > 1LL) {
		(*this)._method_push_err(_8942_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _10017_result = (*this)._method_eval_directive_ident(_8942_part[0LL]._field_kind);
	if (_9013_logical_not) {
		_10017_result=(!(_10017_result));
	}
	return _10017_result;
}



inline jule::Bool _228cc0bc9_DirectiveEval::_method_eval(void) {
	if ((*((*this)._field_d))._field_args.len() == 0LL) {
		(*this)._method_push_err((*((*this)._field_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _11317_result = false;
	jule::Slice<jule::Slice<_228d7aadb_Token>> _11517_logical_or_parts = (*this)._method_split_operans(jule::Str("||", 2),(*((*this)._field_d))._field_args);
	if (_11517_logical_or_parts == nullptr) {
		return false;
	}
	{
		auto &expr = _11517_logical_or_parts;
		auto it = expr.begin();
		_iter_begin_5077576592:;
		if (it != expr.end()) {
			jule::Slice<_228d7aadb_Token> _228cc0bc9_part = *it;
			{
				jule::Bool _12121_and = true;
				jule::Slice<jule::Slice<_228d7aadb_Token>> _12221_logical_and_parts = (*this)._method_split_operans(jule::Str("&&", 2),_228cc0bc9_part);
				if (_12221_logical_and_parts == nullptr) {
					return false;
				}
				{
					auto &expr = _12221_logical_and_parts;
					auto it = expr.begin();
					_iter_begin_5077580992:;
					if (it != expr.end()) {
						jule::Slice<_228d7aadb_Token> _228cc0bc9_and_part = *it;
						{
							_228d7aadb_Token _12821_first = _228cc0bc9_and_part[0LL];
							if ((_12821_first._field_id == 3LLU) && (_12821_first._field_kind == jule::Str("(", 1))) {
								_228d7aadb_Token _13025_end = _228cc0bc9_and_part[_228cc0bc9_and_part.len() - 1LL];
								if ((_13025_end._field_id != 3LLU) || (_13025_end._field_kind != jule::Str(")", 1))) {
									(*this)._method_push_err(_12821_first,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
									return false;
								}
								_228cc0bc9_and_part=_228cc0bc9_and_part.slice(1LL,_228cc0bc9_and_part.len() - 1LL);
							}
							_12121_and=_12121_and && (*this)._method_eval_directive_part(_228cc0bc9_and_part);
						}
						_iter_next_5077580992:;
						++it;
						goto _iter_begin_5077580992;
					}
					_iter_end_5077580992:;
				}
				_11317_result=_11317_result || _12121_and;
			}
			_iter_next_5077576592:;
			++it;
			goto _iter_begin_5077576592;
		}
		_iter_end_5077576592:;
	}
	return _11317_result;
}







std::ostream &operator<<(std::ostream &_Stream, const _228cc0bc9_DirectiveEval &_Src) {
	_Stream << "DirectiveEval{";
	_Stream << "logs:" << _Src._field_logs << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_228ce6ea8_PlainImporter> _228ce6ea8_PlainImporter::_static_method_new(void) {
	return jule::new_struct<_228ce6ea8_PlainImporter>(new( std::nothrow ) _228ce6ea8_PlainImporter(jule::Slice<jule::Str>({_22779d455_PATH_STDLIB}),jule::Str(),jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>>()));
}



inline void _228ce6ea8_PlainImporter::_method_set_mod_path(jule::Str _8735_path) {
	(*this)._field_mod=_8735_path;
}



inline jule::Str _228ce6ea8_PlainImporter::_method_get_mod_path(void) {
	return (*this)._field_mod;
}



inline jule::Str _228ce6ea8_PlainImporter::_method_mod_by_id(jule::Int _9528_id) {
	return (*this)._field_mods[_9528_id];
}



inline jule::Ptr<_1e53308ee_ImportInfo> _228ce6ea8_PlainImporter::_method_get_import(jule::Str _9933_path) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_5077599696:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _228ce6ea8_p = *it;
			{
				if ((*(_228ce6ea8_p))._field_path == _9933_path) {
					return _228ce6ea8_p;
				}
			}
			_iter_next_5077599696:;
			++it;
			goto _iter_begin_5077599696;
		}
		_iter_end_5077599696:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_228d3160d_Ast>>,jule::Slice<_2276bcb9e_Log>> _228ce6ea8_PlainImporter::_method_import_package(jule::Str _10937_path,jule::Bool _10948_update_mod) {
	jule::Slice<jule::Ptr<_22762b646_DirEntry>> _11017_dirents = ({
		auto except = _22762b646_Directory::_static_method_read(_10937_path);
		(except.ok()) ? (except.result) : ({{
			return std::make_tuple(nullptr,jule::Slice<_2276bcb9e_Log>({_228ce6ea8_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _10937_path)}));
			return std::make_tuple(nullptr,jule::Slice<_2276bcb9e_Log>({_228ce6ea8_flat_compiler_err(jule::Str("connot read package directory: ", 31) + _10937_path)}));
		} jule::Slice<jule::Ptr<_22762b646_DirEntry>>();});
	});
	if (_10948_update_mod) {
		jule::Str _11517_new_mod = _228d5de21_find_module_file_deep(_10937_path);
		if (_11517_new_mod != (*this)._field_mod) {
			(*this)._field_mod=_11517_new_mod;
			jule::Slice<_2276bcb9e_Log> _11825_errs = _228d5de21_check_module_file((*this)._field_mod);
			if (_11825_errs.len() != 0LL) {
				return std::make_tuple(nullptr,_11825_errs);
			}
		}
	}
	jule::Slice<jule::Ptr<_228d3160d_Ast>> _12517_asts = jule::Slice<jule::Ptr<_228d3160d_Ast>>::alloc(0LL,static_cast<jule::I64>(_11017_dirents.len()));
	{
		auto &expr = _11017_dirents;
		auto it = expr.begin();
		_iter_begin_5077605792:;
		if (it != expr.end()) {
			jule::Ptr<_22762b646_DirEntry> &_228ce6ea8_dirent = *it;
			{
				if ((*((*(_228ce6ea8_dirent))._field_stat))._method_is_dir() || (!((*(_228ce6ea8_dirent))._field_name.has_suffix(jule::Str(".jule", 5))))) {
					goto _iter_next_5077605792;
				}
				jule::Str _13217__path = _227711594_join(jule::Slice<jule::Str>({_10937_path,(*(_228ce6ea8_dirent))._field_name}));
				jule::Ptr<_228d34677_File> _13321_file = _228d34677_new_file_set(_13217__path);
				(*(_13321_file))._method_fill(_228ce6ea8_read_buff((*(_13321_file))._method_path()));
				jule::Slice<_2276bcb9e_Log> _13521_errors = _228d36080_lex(_13321_file);
				if (_13521_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_13521_errors);
				}
				jule::Ptr<_228d79a30_FileInfo> _14021_finfo = _228d79a30_parse_file(_13321_file);
				if ((*(_14021_finfo))._field_errors.len() > 0LL) {
					return std::make_tuple(nullptr,(*(_14021_finfo))._field_errors);
				}
				if ((!(_228cbeab8_is_pass_file_annotation((*(_228ce6ea8_dirent))._field_name)))) {
					goto _iter_next_5077605792;
				}
				jule::Bool _15018_r;
				jule::Slice<_2276bcb9e_Log> _15025_logs;
				std::tie(_15018_r,_15025_logs) = _228ce6ea8_is_pass_build_directives((*(_14021_finfo))._field_ast);
				if (_15025_logs.len() > 0LL) {
					return std::make_tuple(nullptr,_15025_logs);
				}
				if ((!(_15018_r))) {
					goto _iter_next_5077605792;
				}
				_12517_asts.push((*(_14021_finfo))._field_ast);
			}
			_iter_next_5077605792:;
			++it;
			goto _iter_begin_5077605792;
		}
		_iter_end_5077605792:;
	}
	return std::make_tuple(_12517_asts,nullptr);
}



inline void _228ce6ea8_PlainImporter::_method_imported(jule::Ptr<_1e53308ee_ImportInfo> _16635_imp) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_5077638608:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> &_228ce6ea8_p = *it;
			{
				if (((*(_228ce6ea8_p))._field_cpp_linked == (*(_16635_imp))._field_cpp_linked) && ((*(_228ce6ea8_p))._field_link_path == (*(_16635_imp))._field_link_path)) {
					return;
				}
			}
			_iter_next_5077638608:;
			++it;
			goto _iter_begin_5077638608;
		}
		_iter_end_5077638608:;
	}
	if ((*this)._field_mod.len() != 0LL) {
		{
			auto &expr = (*this)._field_mods;
			auto it = expr.begin();
			_iter_begin_5077639632:;
			if (it != expr.end()) {
				jule::Int _228ce6ea8_i = it - expr.begin();
				jule::Str &_228ce6ea8_mod = *it;
				{
					if ((*this)._field_mod == _228ce6ea8_mod) {
						(*(_16635_imp))._field_mod_id=_228ce6ea8_i;
						goto _julec_label_setted;
					}
				}
				_iter_next_5077639632:;
				++it;
				_228ce6ea8_i++;
				goto _iter_begin_5077639632;
			}
			_iter_end_5077639632:;
		}
		(*(_16635_imp))._field_mod_id=static_cast<jule::I64>((*this)._field_mods.len());
		(*this)._field_mods = jule::alloc_for_append((*this)._field_mods,1);(*this)._field_mods.push((*this)._field_mod);
		_julec_label_setted:;
	}
	(*this)._field_all_packages = jule::alloc_for_append((*this)._field_all_packages,1);(*this)._field_all_packages.push(_16635_imp);
}







std::ostream &operator<<(std::ostream &_Stream, const _228ce6ea8_PlainImporter &_Src) {
	_Stream << "PlainImporter{";
	_Stream << "mods:" << _Src._field_mods << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "all_packages:" << _Src._field_all_packages;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228ca2e64_OrderedDefines &_Src) {
	_Stream << "OrderedDefines{";
	_Stream << "structs:" << _Src._field_structs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228ca2e64_DefineOrderer::_static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_228e0d025_Struct>>& _1737_s,jule::Ptr<_228e0d025_Struct> _1746_t) {
	jule::Ptr<_228e0d025_Struct>* _1817_p = (&((*(_1746_t))._field_depends[0LL]));
	jule::Ptr<_228e0d025_Struct>* _1913_end = _1817_p + (*(_1746_t))._field_depends.len();
	{
		auto &expr = _1737_s;
		auto it = expr.begin();
		_iter_begin_5077737232:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> &_228ca2e64_tt = *it;
			{
				{
					if (_228ca2e64_tt == _1746_t) {
						goto _iter_end_5077737232;
					}
					if (((*((*(_1817_p))))._field_cpp_linked || ((*((*(_1817_p))))._field_depends.len() == 0LL)) || (_228ca2e64_tt == (*(_1817_p)))) {
						(_1817_p)++;
						if (_1817_p == _1913_end) {
							return true;
						}
					}
				}
			}
			_iter_next_5077737232:;
			++it;
			goto _iter_begin_5077737232;
		}
		_iter_end_5077737232:;
	}
	return false;
}



inline void _228ca2e64_DefineOrderer::_static_method_order_common_0(jule::Slice<jule::Ptr<_228e0d025_Struct>>& _3840_s) {
	jule::Int _3917_i = 0LL;
	{
		auto &expr = _3840_s;
		auto it = expr.begin();
		_iter_begin_5077719136:;
		if (it != expr.end()) {
			jule::Int _228ca2e64_j = it - expr.begin();
			jule::Ptr<_228e0d025_Struct> _228ca2e64_t = *it;
			{
				if ((*(_228ca2e64_t))._field_cpp_linked || ((*(_228ca2e64_t))._field_depends.len() == 0LL)) {
					_3840_s.swap(_3917_i,_228ca2e64_j);
					(_3917_i)++;
				}
			}
			_iter_next_5077719136:;
			++it;
			_228ca2e64_j++;
			goto _iter_begin_5077719136;
		}
		_iter_end_5077719136:;
	}
	jule::Int _4717_j = _3917_i;
	for (; _4717_j < _3840_s.len(); (_4717_j)++) {
		{
			jule::Int _4921_k = _3917_i;
			for (; _4921_k < (_3840_s.len() - 1LL); (_4921_k)++) {
				{
					if ((!(_228ca2e64_DefineOrderer::_static_method_is_common_ordered_0(_3840_s,_3840_s[_4921_k])))) {
						_3840_s.swap(_4921_k,static_cast<jule::Int>(_4921_k + 1LL));
					}
				}
			_iter_next_5077725824:;
			}
			_iter_end_5077725824:;
		}
	_iter_next_5077717792:;
	}
	_iter_end_5077717792:;
}



inline void _228ca2e64_DefineOrderer::_static_method_order_structures(jule::Slice<jule::Ptr<_228e0d025_Struct>>& _6041_structs) {
	_228ca2e64_DefineOrderer::_static_method_order_common_0(_6041_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _228ca2e64_DefineOrderer &_Src) {
	_Stream << "DefineOrderer{";
	_Stream << "}";
	return _Stream;
}



inline void _228798383_ScopeDeadCode::_method_optimize_child(jule::Ptr<_1e56c3885_Scope>& _2739_s) {
	jule::Ptr<_228798383_ScopeDeadCode> _2817_sdc = jule::new_struct_ptr<_228798383_ScopeDeadCode>(new( std::nothrow ) _228798383_ScopeDeadCode(this->self,_2739_s,(&((*(_2739_s))._field_stmts)),jule::Int()));
	{
		(*(_2817_sdc))._method_optimize_stmts();
	}
}



inline void _228798383_ScopeDeadCode::_method_eliminate_followed(void) {
	(*((*this)._field_stmts))=(*((*this)._field_stmts)).slice(0LL,(*this)._field_i + 1LL);
	jule::Ptr<_228798383_ScopeDeadCode> _3817_parent = (*this)._field_parent;
	while (_3817_parent != nullptr) {
		{
			(*((*(_3817_parent))._field_stmts))=(*((*(_3817_parent))._field_stmts)).slice(0LL,(*(_3817_parent))._field_i + 1LL);
			_3817_parent=(*(_3817_parent))._field_parent;
		}
	_iter_next_5077941120:;
	}
	_iter_end_5077941120:;
}



inline void _228798383_ScopeDeadCode::_method_optimize_stmt(jule::Any _4544_st) {
	{
		auto &_match_expr{ _4544_st };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_Scope>>()) {
			_case_begin_5077947904:;
			{
				jule::Ptr<_1e56c3885_Scope> _4821_scope = _4544_st.operator jule::Ptr<_1e56c3885_Scope>();
				if ((*(_4821_scope))._field_deferred) {
					_228798383_eliminate_dead_code_of_scope(_4821_scope);
				} else {
					(*(this->self))._method_optimize_child(_4821_scope);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229d70d33_Data>>()) {
			_case_begin_5077948000:;
			{
				{
					auto &_match_expr{ (*(_4544_st.operator jule::Ptr<_229d70d33_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>>()) {
						_case_begin_5077954512:;
						{
							(*(this->self))._method_eliminate_followed();
						}
					}
					_match_end_5077954288:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_RetSt>>()) {
			_case_begin_5077948096:;
			{
				(*(this->self))._method_eliminate_followed();
			}
		}
		_match_end_5077947760:;
	}
}



inline void _228798383_ScopeDeadCode::_method_optimize_stmts(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < (*((*(this->self))._field_stmts)).len(); ((*(this->self))._field_i)++) {
		{
			(*(this->self))._method_optimize_stmt((*((*(this->self))._field_stmts))[(*(this->self))._field_i]);
		}
	_iter_next_5077958880:;
	}
	_iter_end_5077958880:;
}







std::ostream &operator<<(std::ostream &_Stream, const _228798383_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::U64 _1e8a7c6a8_AbsTime::_method_unix(void) {
	jule::Bool _5417_leap = false;
	jule::Uint _5517_y = (*this)._field_year - 1900LL;
	jule::Uint _5617_m = (*this)._field_month - 1LL;
	if ((_5617_m >= 12LL) || (_5617_m < 0LL)) {
		jule::Uint _5821_adj = jule::unsafe_div(_5617_m,12LL);
		_5617_m = jule::unsafe_mod(_5617_m,12LL);
		if (_5617_m < 0LL) {
			(_5821_adj)--;
			_5617_m+=12LL;
		}
		_5517_y+=_5821_adj;
	}
	jule::U64 _6617_t = _1e8a7c6a8_unix_year_to_seconds(_5517_y,_5417_leap);
	_6617_t+=static_cast<jule::U64>(_1e8a7c6a8_unix_month_to_seconds(_5617_m,_5417_leap));
	_6617_t+=static_cast<jule::Uint>(86400LL * ((*this)._field_day - 1LL));
	_6617_t+=static_cast<jule::Uint>(3600LL * (*this)._field_hour);
	_6617_t+=static_cast<jule::Uint>(60LL * (*this)._field_minute);
	_6617_t+=(*this)._field_second;
	return _6617_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8a7c6a8_AbsTime &_Src) {
	_Stream << "AbsTime{";
	_Stream << "day:" << _Src._field_day << ", ";
	_Stream << "week_day:" << _Src._field_week_day << ", ";
	_Stream << "year_day:" << _Src._field_year_day << ", ";
	_Stream << "month:" << _Src._field_month << ", ";
	_Stream << "year:" << _Src._field_year << ", ";
	_Stream << "second:" << _Src._field_second << ", ";
	_Stream << "minute:" << _Src._field_minute << ", ";
	_Stream << "hour:" << _Src._field_hour;
	_Stream << "}";
	return _Stream;
}



inline _1e8a7c6a8_Time _1e8a7c6a8_Time::_static_method_unix(jule::U64 _8924_sec) {
	return _1e8a7c6a8_Time(_8924_sec);
}



inline _1e8a7c6a8_Time _1e8a7c6a8_Time::_static_method_now(void) {
	return _1e8a7c6a8_Time::_static_method_unix(static_cast<jule::U64>(_1e8a7c6a8_unix()));
}



inline jule::U64 _1e8a7c6a8_Time::_method_unix(void) {
	return (*this)._field_sec;
}



inline jule::Uint _1e8a7c6a8_Time::_method_day(void) {
	return (*this)._method_abs()._field_day;
}



inline jule::Uint _1e8a7c6a8_Time::_method_month(void) {
	return (*this)._method_abs()._field_month;
}



inline jule::Uint _1e8a7c6a8_Time::_method_year(void) {
	return (*this)._method_abs()._field_year;
}



inline jule::Uint _1e8a7c6a8_Time::_method_second(void) {
	return (*this)._method_abs()._field_second;
}



inline jule::Uint _1e8a7c6a8_Time::_method_minute(void) {
	return (*this)._method_abs()._field_minute;
}



inline jule::Uint _1e8a7c6a8_Time::_method_hour(void) {
	return (*this)._method_abs()._field_hour;
}



inline _1e8a7c6a8_AbsTime _1e8a7c6a8_Time::_method_abs(void) {
	jule::U64 _12513_secs = (*this)._field_sec - 951868800LL;
	jule::U64 _12617_days = jule::unsafe_div(_12513_secs,86400LL);
	jule::U64 _12717_rem_secs = jule::unsafe_mod(_12513_secs,86400LL);
	if (_12717_rem_secs < 0LL) {
		_12717_rem_secs+=86400LL;
		(_12617_days)--;
	}
	jule::U64 _13317_qc_cycles = jule::unsafe_div(_12617_days,146097LL);
	jule::U64 _13417_rem_days = jule::unsafe_mod(_12617_days,146097LL);
	if (_13417_rem_days < 0LL) {
		_13417_rem_days+=146097LL;
		(_13317_qc_cycles)--;
	}
	jule::U64 _14017_c_cycles = jule::unsafe_div(_13417_rem_days,36524LL);
	if (_14017_c_cycles == 4LL) {
		(_14017_c_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14017_c_cycles * 36524LL);
	jule::U64 _14617_q_cycles = jule::unsafe_div(_13417_rem_days,1461LL);
	if (_14617_q_cycles == 25LL) {
		(_14617_q_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14617_q_cycles * 1461LL);
	jule::U64 _15217_rem_years = jule::unsafe_div(_13417_rem_days,365LL);
	if (_15217_rem_years == 4LL) {
		(_15217_rem_years)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_15217_rem_years * 365LL);
	jule::U8 _15813_leap = static_cast<jule::U8>(((((_15217_rem_years == 0LL) && ((_14617_q_cycles > 0LL) || (_14017_c_cycles == 0LL)))) ? (1LLU) : (0LLU)));
	jule::U64 _15917_y_day = ((_13417_rem_days + 31LL) + 28LL) + _15813_leap;
	if (_15917_y_day >= (365LL + _15813_leap)) {
		_15917_y_day-=static_cast<jule::U8>(365LL + _15813_leap);
	}
	jule::Int _16417_months = 0LL;
	for (; _1e8a7c6a8_MDAYS[_16417_months] <= _13417_rem_days; (_16417_months)++) {
		{
			_13417_rem_days-=_1e8a7c6a8_MDAYS[_16417_months];
		}
	_iter_next_5078070240:;
	}
	_iter_end_5078070240:;
	_1e8a7c6a8_AbsTime _16917_t = _1e8a7c6a8_AbsTime();
	_16917_t._field_year=static_cast<jule::U64>((((_15217_rem_years + (4LL * _14617_q_cycles)) + (100LL * _14017_c_cycles)) + (400LL * _13317_qc_cycles)) + 100LL);
	_16917_t._field_month=static_cast<jule::Uint>(static_cast<jule::Uint>(_16417_months + 2LL));
	if (_16917_t._field_month >= 12LL) {
		_16917_t._field_month-=12LL;
		(_16917_t._field_year)++;
	}
	_16917_t._field_month+=1LL;
	_16917_t._field_year+=1900LL;
	_16917_t._field_day=static_cast<jule::U64>(_13417_rem_days + 1LL);
	_16917_t._field_week_day=static_cast<jule::U64>(jule::unsafe_mod(3LL + _12617_days,7LL));
	if (_16917_t._field_week_day < 0LL) {
		_16917_t._field_week_day+=7LL;
	}
	_16917_t._field_year_day=_15917_y_day;
	_16917_t._field_hour=static_cast<jule::U64>(jule::unsafe_div(_12717_rem_secs,3600LL));
	_16917_t._field_minute=static_cast<jule::U64>(jule::unsafe_mod(jule::unsafe_div(_12717_rem_secs,60LL),60LL));
	_16917_t._field_second=static_cast<jule::U64>(jule::unsafe_mod(_12717_rem_secs,60LL));
	return _16917_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8a7c6a8_Time &_Src) {
	_Stream << "Time{";
	_Stream << "sec:" << _Src._field_sec;
	_Stream << "}";
	return _Stream;
}



inline jule::I64 _1e8a7c6a8_Duration::_static_method_nanoseconds(jule::I64 _22231_d) {
	return static_cast<jule::I64>(_22231_d * 1LL);
}



inline jule::I64 _1e8a7c6a8_Duration::_static_method_microseconds(jule::I64 _22732_d) {
	return static_cast<jule::I64>(_22732_d * 1000LL);
}



inline jule::I64 _1e8a7c6a8_Duration::_static_method_milliseconds(jule::I64 _23232_d) {
	return static_cast<jule::I64>(_23232_d * 1000000LL);
}



inline jule::I64 _1e8a7c6a8_Duration::_static_method_seconds(jule::I64 _23727_d) {
	return static_cast<jule::I64>(_23727_d * 1000000000LL);
}



inline jule::I64 _1e8a7c6a8_Duration::_static_method_minutes(jule::I64 _24227_d) {
	return static_cast<jule::I64>(_24227_d * 60000000000LL);
}



inline jule::I64 _1e8a7c6a8_Duration::_static_method_hours(jule::I64 _24725_d) {
	return static_cast<jule::I64>(_24725_d * 3600000000000LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e8a7c6a8_Duration &_Src) {
	_Stream << "Duration{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_229cbb663_ScopeOptimizer> _229cbb663_ScopeOptimizer::_static_method_new(jule::Ptr<_1e56c3885_Scope> _2827_scope) {
	return jule::new_struct<_229cbb663_ScopeOptimizer>(new( std::nothrow ) _229cbb663_ScopeOptimizer(jule::Int(),_2827_scope));
}



inline void _229cbb663_ScopeOptimizer::_method_set_current_stmt(jule::Any _3439_stmt) {
	(*((*this)._field_scope))._field_stmts[(*this)._field_i]=_3439_stmt;
}



inline jule::Any _229cbb663_ScopeOptimizer::_method_current_stmt(void) {
	return (*((*this)._field_scope))._field_stmts[(*this)._field_i];
}



inline void _229cbb663_ScopeOptimizer::_method_optimize_data(jule::Ptr<_229d70d33_Data> _4236_d) {
	{
		auto &_match_expr{ (*(_4236_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_FnCallExprModel>>()) {
			_case_begin_5079966928:;
			{
				jule::Ptr<_1e5870218_FnCallExprModel> _4521_m = (*(_4236_d))._field_model.operator jule::Ptr<_1e5870218_FnCallExprModel>();
				if (_227532edc_PRODUCTION) {
					if ((!((*((*(_4521_m))._field_func))._method_is_builtin())) && _229cbb663_is_std_package((*((*((*((*(_4521_m))._field_func))._field_decl))._field_token._field_file))._method_path(),jule::Str("debug", 5))) {
						(*((*this)._field_scope))._field_stmts[(*this)._field_i]=jule::Any(nullptr);
					}
				}
			}
		}
		_match_end_5079966832:;
	}
}



inline void _229cbb663_ScopeOptimizer::_method_optimize_conditional(jule::Ptr<_1e56c3885_Conditional> _5543_c) {
	if ((!(_227532edc_OPT_COND))) {
		return;
	}
	jule::Bool _6017_const_case = false;
	{
		auto &expr = (*(_5543_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5079978208:;
		if (it != expr.end()) {
			jule::Int _229cbb663_i = it - expr.begin();
			jule::Ptr<_1e56c3885_If> _229cbb663_elif = *it;
			{
				if ((!(_229cbb663_is_constant_valid_conditional_case(_229cbb663_elif)))) {
					goto _iter_next_5079978208;
				}
				_6017_const_case=true;
				(*(_5543_c))._field_elifs=(*(_5543_c))._field_elifs.slice(0LL,_229cbb663_i + 1LL);
				(*(_229cbb663_elif))._field_expr=jule::Any(nullptr);
				(*(_5543_c))._field_default=nullptr;
				goto _iter_end_5079978208;
			}
			_iter_next_5079978208:;
			++it;
			_229cbb663_i++;
			goto _iter_begin_5079978208;
		}
		_iter_end_5079978208:;
	}
	jule::Ptr<_1e56c3885_If>* _7517_i = (&((*(_5543_c))._field_elifs[0LL]));
	jule::Ptr<_1e56c3885_If>* _7613_end = (&((*(_5543_c))._field_elifs[(*(_5543_c))._field_elifs.len() - 1LL]));
	for (; _7517_i <= _7613_end; (_7517_i)++) {
		{
			{
				if ((!(_229cbb663_is_unreachable_conditional_case((*(_7517_i)))))) {
					(_7517_i)++;
					goto _iter_next_5079976224;
				}
				(*(_7517_i))=nullptr;
			}
		}
	_iter_next_5079976224:;
	}
	_iter_end_5079976224:;
	if ((*(_5543_c))._field_elifs.len() == 0LL) {
		return;
	}
	if ((!(_6017_const_case))) {
		return;
	}
	jule::Int _9617_only = -1LL;
	{
		auto &expr = (*(_5543_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5079993408:;
		if (it != expr.end()) {
			jule::Int _229cbb663_j = it - expr.begin();
			jule::Ptr<_1e56c3885_If> &_229cbb663_elif = *it;
			{
				if (_229cbb663_elif != nullptr) {
					if (_9617_only != -1LL) {
						return;
					}
					_9617_only=_229cbb663_j;
				}
			}
			_iter_next_5079993408:;
			++it;
			_229cbb663_j++;
			goto _iter_begin_5079993408;
		}
		_iter_end_5079993408:;
	}
	if (_9617_only != -1LL) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_5543_c))._field_elifs[_9617_only]))._field_scope));
	}
}



inline void _229cbb663_ScopeOptimizer::_method_optimize_match(jule::Ptr<_1e56c3885_Match> _11337_m) {
	if ((!(_227532edc_OPT_COND))) {
		return;
	}
	jule::Bool _11817_const_case = false;
	{
		auto &expr = (*(_11337_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5080002528:;
		if (it != expr.end()) {
			jule::Int _229cbb663_i = it - expr.begin();
			jule::Ptr<_1e56c3885_Case> _229cbb663_case = *it;
			{
				if ((!(_229cbb663_is_constant_valid_match_case(_229cbb663_case)))) {
					goto _iter_next_5080002528;
				}
				_11817_const_case=true;
				(*(_11337_m))._field_cases=(*(_11337_m))._field_cases.slice(0LL,_229cbb663_i + 1LL);
				(*(_229cbb663_case))._field_exprs=nullptr;
				(*(_11337_m))._field_default=nullptr;
				goto _iter_end_5080002528;
			}
			_iter_next_5080002528:;
			++it;
			_229cbb663_i++;
			goto _iter_begin_5080002528;
		}
		_iter_end_5080002528:;
	}
	if ((*(_11337_m))._field_cases.len() == 0LL) {
		return;
	}
	jule::Ptr<_1e56c3885_Case>* _13717_i = (&((*(_11337_m))._field_cases[0LL]));
	jule::Ptr<_1e56c3885_Case>* _13813_end = (&((*(_11337_m))._field_cases[(*(_11337_m))._field_cases.len() - 1LL]));
	for (; _13717_i <= _13813_end; (_13717_i)++) {
		{
			{
				if ((!(_229cbb663_is_unreachable_match_case((*(_13717_i)))))) {
					(_13717_i)++;
					goto _iter_next_5080000416;
				}
				(*(_13717_i))=nullptr;
			}
		}
	_iter_next_5080000416:;
	}
	_iter_end_5080000416:;
	if ((!(_11817_const_case))) {
		return;
	}
	jule::Int _15417_only = -1LL;
	{
		auto &expr = (*(_11337_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5080017472:;
		if (it != expr.end()) {
			jule::Int _229cbb663_j = it - expr.begin();
			jule::Ptr<_1e56c3885_Case> &_229cbb663_case = *it;
			{
				if (_229cbb663_case != nullptr) {
					if (_15417_only != -1LL) {
						return;
					}
					_15417_only=_229cbb663_j;
				}
			}
			_iter_next_5080017472:;
			++it;
			_229cbb663_j++;
			goto _iter_begin_5080017472;
		}
		_iter_end_5080017472:;
	}
	if (_15417_only != -1LL) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_11337_m))._field_cases[_15417_only]))._field_scope));
	}
}



inline void _229cbb663_ScopeOptimizer::_method_optimize_stmt(jule::Any _17136_stmt) {
	{
		auto &_match_expr{ _17136_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_Scope>>()) {
			_case_begin_5080024592:;
			{
				(*this)._method_optimize_child(_17136_stmt.operator jule::Ptr<_1e56c3885_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229d70d33_Data>>()) {
			_case_begin_5080024688:;
			{
				(*this)._method_optimize_data(_17136_stmt.operator jule::Ptr<_229d70d33_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Conditional>>()) {
			_case_begin_5080024784:;
			{
				(*this)._method_optimize_conditional(_17136_stmt.operator jule::Ptr<_1e56c3885_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Match>>()) {
			_case_begin_5080025056:;
			{
				(*this)._method_optimize_match(_17136_stmt.operator jule::Ptr<_1e56c3885_Match>());
			}
		}
		_match_end_5080024432:;
	}
}



inline void _229cbb663_ScopeOptimizer::_method_optimize_child(jule::Ptr<_1e56c3885_Scope> _18037_child) {
	jule::Ptr<_229cbb663_ScopeOptimizer> _18117_so = _229cbb663_ScopeOptimizer::_static_method_new(_18037_child);
	(*(_18117_so))._method_optimize();
}



inline void _229cbb663_ScopeOptimizer::_method_optimize(void) {
	(*this)._field_i=0LL;
	for (; (*this)._field_i < (*((*this)._field_scope))._field_stmts.len(); ((*this)._field_i)++) {
		{
			(*this)._method_optimize_stmt((*this)._method_current_stmt());
		}
	_iter_next_5080037408:;
	}
	_iter_end_5080037408:;
}







std::ostream &operator<<(std::ostream &_Stream, const _229cbb663_ScopeOptimizer &_Src) {
	_Stream << "ScopeOptimizer{";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_229d710b9_Optimizer> _229d710b9_Optimizer::_static_method_new(jule::Ptr<_228c91a35_IR>& _2128_ir) {
	return jule::new_struct<_229d710b9_Optimizer>(new( std::nothrow ) _229d710b9_Optimizer(_2128_ir));
}



inline void _229d710b9_Optimizer::_method_optimize_function(jule::Ptr<_229b6ebcb_Fn>& _2741_func) {
	if ((*(_2741_func))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_2741_func))._field_instances;
		auto it = expr.begin();
		_iter_begin_5080044208:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_FnIns> _229d710b9_ins = *it;
			{
				jule::Ptr<_229cbb663_ScopeOptimizer> _3321_so = _229cbb663_ScopeOptimizer::_static_method_new((*(_229d710b9_ins))._field_scope);
				(*(_3321_so))._method_optimize();
			}
			_iter_next_5080044208:;
			++it;
			goto _iter_begin_5080044208;
		}
		_iter_end_5080044208:;
	}
}



inline void _229d710b9_Optimizer::_method_optimize_struct(jule::Ptr<_228e0d025_Struct>& _3839_s) {
	if ((*(_3839_s))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_3839_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5080049712:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_StructIns> _229d710b9_ins = *it;
			{
				{
					auto &expr = (*(_229d710b9_ins))._field_methods;
					auto it = expr.begin();
					_iter_begin_5080052176:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_Fn> _229d710b9_m = *it;
						{
							{
								auto &expr = (*(_229d710b9_m))._field_instances;
								auto it = expr.begin();
								_iter_begin_5080054032:;
								if (it != expr.end()) {
									jule::Ptr<_229b6ebcb_FnIns> _229d710b9_mins = *it;
									{
										jule::Ptr<_229cbb663_ScopeOptimizer> _4629_so = _229cbb663_ScopeOptimizer::_static_method_new((*(_229d710b9_mins))._field_scope);
										(*(_4629_so))._method_optimize();
									}
									_iter_next_5080054032:;
									++it;
									goto _iter_begin_5080054032;
								}
								_iter_end_5080054032:;
							}
						}
						_iter_next_5080052176:;
						++it;
						goto _iter_begin_5080052176;
					}
					_iter_end_5080052176:;
				}
			}
			_iter_next_5080049712:;
			++it;
			goto _iter_begin_5080049712;
		}
		_iter_end_5080049712:;
	}
}



inline void _229d710b9_Optimizer::_method_optimize_functions(jule::Ptr<_1e53308ee_Package>& _5342_p) {
	{
		auto &expr = (*(_5342_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5080054800:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _229d710b9_f = *it;
			{
				{
					auto &expr = (*(_229d710b9_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5080059344:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_Fn> _229d710b9_func = *it;
						{
							(*this)._method_optimize_function(_229d710b9_func);
						}
						_iter_next_5080059344:;
						++it;
						goto _iter_begin_5080059344;
					}
					_iter_end_5080059344:;
				}
			}
			_iter_next_5080054800:;
			++it;
			goto _iter_begin_5080054800;
		}
		_iter_end_5080054800:;
	}
}



inline void _229d710b9_Optimizer::_method_optimize_structs(jule::Ptr<_1e53308ee_Package>& _6140_p) {
	{
		auto &expr = (*(_6140_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5080062576:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _229d710b9_f = *it;
			{
				{
					auto &expr = (*(_229d710b9_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_5080064448:;
					if (it != expr.end()) {
						jule::Ptr<_228e0d025_Struct> _229d710b9_s = *it;
						{
							(*this)._method_optimize_struct(_229d710b9_s);
						}
						_iter_next_5080064448:;
						++it;
						goto _iter_begin_5080064448;
					}
					_iter_end_5080064448:;
				}
			}
			_iter_next_5080062576:;
			++it;
			goto _iter_begin_5080062576;
		}
		_iter_end_5080062576:;
	}
}



inline void _229d710b9_Optimizer::_method_optimize_package(jule::Ptr<_1e53308ee_Package>& _6940_p) {
	(*this)._method_optimize_functions(_6940_p);
	(*this)._method_optimize_structs(_6940_p);
}



inline void _229d710b9_Optimizer::_method_optimize(void) {
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5080070384:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _229d710b9_u = *it;
			{
				if ((!((*(_229d710b9_u))._field_cpp_linked))) {
					(*this)._method_optimize_package((*(_229d710b9_u))._field_package);
				}
			}
			_iter_next_5080070384:;
			++it;
			goto _iter_begin_5080070384;
		}
		_iter_end_5080070384:;
	}
	(*this)._method_optimize_package((*((*this)._field_ir))._field_main);
}







std::ostream &operator<<(std::ostream &_Stream, const _229d710b9_Optimizer &_Src) {
	_Stream << "Optimizer{";
	_Stream << "ir:" << _Src._field_ir;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229cbddd5_Flag_0::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _229cbddd5_Flag_0::_method_what(void) {
	return (*this)._field__what;
}



inline void _229cbddd5_Flag_0::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _229cbddd5_Flag_0::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _229cbddd5_Flag_0 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _229cbddd5_Flag_1::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _229cbddd5_Flag_1::_method_what(void) {
	return (*this)._field__what;
}



inline void _229cbddd5_Flag_1::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _229cbddd5_Flag_1::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _229cbddd5_Flag_1 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _229cbddd5_Flag_2::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _229cbddd5_Flag_2::_method_what(void) {
	return (*this)._field__what;
}



inline void _229cbddd5_Flag_2::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _229cbddd5_Flag_2::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _229cbddd5_Flag_2 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _229cbddd5_Flag_3::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _229cbddd5_Flag_3::_method_what(void) {
	return (*this)._field__what;
}



inline void _229cbddd5_Flag_3::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _229cbddd5_Flag_3::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _229cbddd5_Flag_3 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _229cbddd5_Flag_4::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _229cbddd5_Flag_4::_method_what(void) {
	return (*this)._field__what;
}



inline void _229cbddd5_Flag_4::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _229cbddd5_Flag_4::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _229cbddd5_Flag_4 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_229cbddd5_FlagSet> _229cbddd5_FlagSet::_static_method_new(void) {
	return jule::new_struct<_229cbddd5_FlagSet>(new( std::nothrow ) _229cbddd5_FlagSet(jule::Slice<jule::Trait<_229cbddd5_CommonFlag>>::alloc(0LL,20LL)));
}



inline jule::Trait<_229cbddd5_CommonFlag> _229cbddd5_FlagSet::_method_find_flag(jule::Str _6632_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_5080142864:;
		if (it != expr.end()) {
			jule::Trait<_229cbddd5_CommonFlag> _229cbddd5_flag = *it;
			{
				if (_229cbddd5_flag.get()._method_name() == _6632_name) {
					return _229cbddd5_flag;
				}
			}
			_iter_next_5080142864:;
			++it;
			goto _iter_begin_5080142864;
		}
		_iter_end_5080142864:;
	}
	return nullptr;
}



inline jule::Trait<_229cbddd5_CommonFlag> _229cbddd5_FlagSet::_method_find_flag_short(jule::I32 _7638_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_5080147632:;
		if (it != expr.end()) {
			jule::Trait<_229cbddd5_CommonFlag> _229cbddd5_flag = *it;
			{
				if (_229cbddd5_flag.get()._method_short() == _7638_name) {
					return _229cbddd5_flag;
				}
			}
			_iter_next_5080147632:;
			++it;
			goto _iter_begin_5080147632;
		}
		_iter_end_5080147632:;
	}
	return nullptr;
}



inline jule::Slice<jule::Trait<_229cbddd5_CommonFlag>> _229cbddd5_FlagSet::_method_flags(void) {
	return (*this)._field__flags;
}



inline jule::Exceptional<jule::Slice<jule::Str>> _229cbddd5_FlagSet::_method_parse(jule::Slice<jule::Str> _11028_args) {
	_229cbddd5_ArgParser _11117_ap = _229cbddd5_ArgParser((*this),_11028_args,jule::Slice<jule::Str>(),jule::Int());
	({
		auto except = _11117_ap._method_parse();
		if (!except.ok()) {
			return jule::Exceptional<jule::Slice<jule::Str>>(except.error);
		}
	});
	return jule::Exceptional<jule::Slice<jule::Str>>(jule::Any(),_11117_ap._field_content);
}



inline void _229cbddd5_FlagSet::_method_reset(void) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_5080164512:;
		if (it != expr.end()) {
			jule::Trait<_229cbddd5_CommonFlag> &_229cbddd5_f = *it;
			{
				_229cbddd5_f.get()._method_reset();
			}
			_iter_next_5080164512:;
			++it;
			goto _iter_begin_5080164512;
		}
		_iter_end_5080164512:;
	}
}



inline jule::Ptr<_229cbddd5_Flag_4> _229cbddd5_FlagSet::_method_add_flag_common_0(jule::Str _12641_name,jule::I32 _12652_short,jule::Str _12665_what) {
	
	if ((*this)._method_find_flag(_12641_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12641_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:136:13"));;
	}
	if ((_12652_short != 0LL) && ((*this)._method_find_flag_short(_12652_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12652_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:140:13"));;
	}
	jule::Ptr<_229cbddd5_Flag_4> _14317_flag = jule::new_struct<_229cbddd5_Flag_4>(new( std::nothrow ) _229cbddd5_Flag_4(_12641_name,_12652_short,jule::Str(),_12665_what,jule::Ptr<jule::Str>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.push(_14317_flag);
	return _14317_flag;
}

inline jule::Ptr<_229cbddd5_Flag_3> _229cbddd5_FlagSet::_method_add_flag_common_1(jule::Str _12641_name,jule::I32 _12652_short,jule::Str _12665_what) {
	
	if ((*this)._method_find_flag(_12641_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12641_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:136:13"));;
	}
	if ((_12652_short != 0LL) && ((*this)._method_find_flag_short(_12652_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12652_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:140:13"));;
	}
	jule::Ptr<_229cbddd5_Flag_3> _14317_flag = jule::new_struct<_229cbddd5_Flag_3>(new( std::nothrow ) _229cbddd5_Flag_3(_12641_name,_12652_short,jule::Bool(),_12665_what,jule::Ptr<jule::Bool>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.push(_14317_flag);
	return _14317_flag;
}





inline void _229cbddd5_FlagSet::_method_add_var_0(jule::Ptr<jule::Str> _17037_var,jule::Str _17046_name,jule::I32 _17057_short,jule::Str _17070_what) {
	jule::Ptr<_229cbddd5_Flag_4> _17117_flag = (*this)._method_add_flag_common_0(_17046_name,_17057_short,_17070_what);
	(*(_17117_flag))._field__default=(*(_17037_var));
	(*(_17117_flag))._field__data=_17037_var;
}

inline void _229cbddd5_FlagSet::_method_add_var_1(jule::Ptr<jule::Bool> _17037_var,jule::Str _17046_name,jule::I32 _17057_short,jule::Str _17070_what) {
	jule::Ptr<_229cbddd5_Flag_3> _17117_flag = (*this)._method_add_flag_common_1(_17046_name,_17057_short,_17070_what);
	(*(_17117_flag))._field__default=(*(_17037_var));
	(*(_17117_flag))._field__data=_17037_var;
}







std::ostream &operator<<(std::ostream &_Stream, const _229cbddd5_FlagSet &_Src) {
	_Stream << "FlagSet{";
	_Stream << "_flags:" << _Src._field__flags;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "except:" << _Src._field_except << ", ";
	_Stream << "assigned:" << _Src._field_assigned;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_IndexingExprModel &_Src) {
	_Stream << "IndexingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_EnumItemDecl::_method_auto_expr(void) {
	return (*this)._field_expr == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_EnumDecl::_method_default_typed(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_UseExpr &_Src) {
	_Stream << "UseExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e5870218_BuiltinAssertCallExprModel &_Src) {
	_Stream << "BuiltinAssertCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "log:" << _Src._field_log;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_LitExpr::_method_is_nil(void) {
	return (*this)._field_value == jule::Str("nil", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_CoExpr &_Src) {
	_Stream << "CoExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_IdentExpr::_method_is_self(void) {
	return (*this)._field_ident == jule::Str("self", 4);
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e13aa8_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == 1LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_228e0d025_FieldIns> _228e0d025_Field::_method_instance(void) {
	return jule::new_struct<_228e0d025_FieldIns>(new( std::nothrow ) _228e0d025_FieldIns(this->self,(*((*(this->self))._field_kind))._field_kind,jule::Ptr<_229d70d33_Data>()));
}







std::ostream &operator<<(std::ostream &_Stream, const _228e0d025_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_228e0d025_StructIns> _228e0d025_Struct::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	jule::Ptr<_228e0d025_StructIns> _6817_ins = jule::new_struct_ptr<_228e0d025_StructIns>(new( std::nothrow ) _228e0d025_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_228e0d025_FieldIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_fields.len())),jule::Slice<jule::Ptr<_229b6ebcb_Fn>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_methods.len())),jule::Bool(),_228d6ecab_ReferenceStack::_static_method_new()));
	{
		auto &expr = (*(this->self))._field_fields;
		auto it = expr.begin();
		_iter_begin_5070441152:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Field> _228e0d025_f = *it;
			{
				(*(_6817_ins))._field_fields = jule::alloc_for_append((*(_6817_ins))._field_fields,1);(*(_6817_ins))._field_fields.push((*(_228e0d025_f))._method_instance());
				if (((*((*(_228e0d025_f))._field_kind))._field_kind != nullptr) && (*((*((*(_228e0d025_f))._field_kind))._field_kind))._method_mutable()) {
					(*(_6817_ins))._field_mutable=true;
				}
			}
			_iter_next_5070441152:;
			++it;
			goto _iter_begin_5070441152;
		}
		_iter_end_5070441152:;
	}
	{
		auto &expr = (*(this->self))._field_methods;
		auto it = expr.begin();
		_iter_begin_5070447328:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _228e0d025_f = *it;
			{
				jule::Ptr<_229b6ebcb_Fn> _8321_fins = jule::new_struct_ptr<_229b6ebcb_Fn>(new( std::nothrow ) _229b6ebcb_Fn((*(_228e0d025_f))._field_sema,(*(_228e0d025_f))._field_token,(*(_228e0d025_f))._field_global,(*(_228e0d025_f))._field_unsafety,(*(_228e0d025_f))._field_public,(*(_228e0d025_f))._field_cpp_linked,(*(_228e0d025_f))._field_statically,(*(_228e0d025_f))._field_exceptional,(*(_228e0d025_f))._field_ident,(*(_228e0d025_f))._field_directives,(*(_228e0d025_f))._field_doc,(*(_228e0d025_f))._field_scope,(*(_228e0d025_f))._field_generics,(*(_228e0d025_f))._field_result,(*(_228e0d025_f))._field_params,(*(_228e0d025_f))._field_owner,nullptr));
				(*(_6817_ins))._field_methods = jule::alloc_for_append((*(_6817_ins))._field_methods,1);(*(_6817_ins))._field_methods.push(_8321_fins);
			}
			_iter_next_5070447328:;
			++it;
			goto _iter_begin_5070447328;
		}
		_iter_end_5070447328:;
	}
	return _6817_ins;
}



inline jule::Ptr<_228e0d025_StructIns> _228e0d025_Struct::_method_append_instance(jule::Ptr<_228e0d025_StructIns>& _11039_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[0LL];
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_5070460496:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_StructIns> _228e0d025_ains = *it;
			{
				if ((*(_228e0d025_ains))._method_same(_11039_ins)) {
					return _228e0d025_ains;
				}
			}
			_iter_next_5070460496:;
			++it;
			goto _iter_begin_5070460496;
		}
		_iter_end_5070460496:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_11039_ins);
	return nullptr;
}



inline jule::Ptr<_229b6ebcb_Fn> _228e0d025_Struct::_method_find_method(jule::Str _12834_ident,jule::Bool _12846_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5070467968:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _228e0d025_f = *it;
			{
				if (((*(_228e0d025_f))._field_statically == _12846_statically) && ((*(_228e0d025_f))._field_ident == _12834_ident)) {
					return _228e0d025_f;
				}
			}
			_iter_next_5070467968:;
			++it;
			goto _iter_begin_5070467968;
		}
		_iter_end_5070467968:;
	}
	return nullptr;
}



inline jule::Ptr<_1e58b0654_Var> _228e0d025_Struct::_method_find_static(jule::Str _13934_ident) {
	{
		auto &expr = (*this)._field_statics;
		auto it = expr.begin();
		_iter_begin_5070472624:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> _228e0d025_v = *it;
			{
				if ((*(_228e0d025_v))._field_ident == _13934_ident) {
					return _228e0d025_v;
				}
			}
			_iter_next_5070472624:;
			++it;
			goto _iter_begin_5070472624;
		}
		_iter_end_5070472624:;
	}
	return nullptr;
}



inline jule::Ptr<_228e0d025_Field> _228e0d025_Struct::_method_find_field(jule::Str _15033_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_5070476832:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Field> _228e0d025_f = *it;
			{
				if ((*(_228e0d025_f))._field_ident == _15033_ident) {
					return _228e0d025_f;
				}
			}
			_iter_next_5070476832:;
			++it;
			goto _iter_begin_5070476832;
		}
		_iter_end_5070476832:;
	}
	return nullptr;
}



inline jule::Bool _228e0d025_Struct::_method_is_implements(jule::Ptr<_229b5076c_Trait> _16032_t) {
	{
		auto &expr = (*this)._field_implements;
		auto it = expr.begin();
		_iter_begin_5070481040:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> &_228e0d025_it = *it;
			{
				if (_16032_t == _228e0d025_it) {
					return true;
				}
			}
			_iter_next_5070481040:;
			++it;
			goto _iter_begin_5070481040;
		}
		_iter_end_5070481040:;
	}
	return false;
}



inline jule::Bool _228e0d025_Struct::_method_is_derives(jule::Str _17029_ident) {
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_5070484384:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> &_228e0d025_d = *it;
			{
				if ((*(_228e0d025_d))._field_tag._field_kind == jule::Str("derive", 6)) {
					if (((*(_228e0d025_d))._field_args.len() == 1LL) && ((*(_228e0d025_d))._field_args[0LL]._field_kind == _17029_ident)) {
						return true;
					}
				}
			}
			_iter_next_5070484384:;
			++it;
			goto _iter_begin_5070484384;
		}
		_iter_end_5070484384:;
	}
	return false;
}



inline jule::Bool _228e0d025_Struct::_method_is_uses(jule::Ptr<_228e0d025_Struct> _18226_s) {
	{
		auto &expr = (*this)._field_uses;
		auto it = expr.begin();
		_iter_begin_5070490592:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> &_228e0d025_u = *it;
			{
				while (_18226_s == _228e0d025_u) {
					{
						return true;
					}
				_iter_next_5070491872:;
				}
				_iter_end_5070491872:;
			}
			_iter_next_5070490592:;
			++it;
			goto _iter_begin_5070490592;
		}
		_iter_end_5070490592:;
	}
	return false;
}



inline jule::Bool _228e0d025_Struct::_method_has_ref_accessible(void) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5070492400:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> &_228e0d025_m = *it;
			{
				if (((*(_228e0d025_m))._field_params.len() > 0LL) && (*((*(_228e0d025_m))._field_params[0LL]))._method_is_ref()) {
					return true;
				}
			}
			_iter_next_5070492400:;
			++it;
			goto _iter_begin_5070492400;
		}
		_iter_end_5070492400:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _228e0d025_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e53308ee_ImportInfo::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e53308ee_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1e58b0654_Var> _1e53308ee_ImportInfo::_method_find_var(jule::Str _16331_ident,jule::Bool _16343_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_16331_ident)))) {
		return nullptr;
	}
	return _1e53308ee_find_var_in_package((*((*this)._field_package))._field_files,_16331_ident,false);
}



inline jule::Ptr<_229d681e3_TypeAlias> _1e53308ee_ImportInfo::_method_find_type_alias(jule::Str _17638_ident,jule::Bool _17650_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17638_ident)))) {
		return nullptr;
	}
	return _1e53308ee_find_type_alias_in_package((*((*this)._field_package))._field_files,_17638_ident,false);
}



inline jule::Ptr<_228e0d025_Struct> _1e53308ee_ImportInfo::_method_find_struct(jule::Str _18934_ident,jule::Bool _18946_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_18934_ident)))) {
		return nullptr;
	}
	return _1e53308ee_find_struct_in_package((*((*this)._field_package))._field_files,_18934_ident,false);
}



inline jule::Ptr<_229b6ebcb_Fn> _1e53308ee_ImportInfo::_method_find_fn(jule::Str _20230_ident,jule::Bool _20242_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_20230_ident)))) {
		return nullptr;
	}
	return _1e53308ee_find_fn_in_package((*((*this)._field_package))._field_files,_20230_ident,false);
}



inline jule::Ptr<_229b5076c_Trait> _1e53308ee_ImportInfo::_method_find_trait(jule::Str _21433_ident) {
	if ((!((*this)._method_is_lookupable(_21433_ident)))) {
		return nullptr;
	}
	return _1e53308ee_find_trait_in_package((*((*this)._field_package))._field_files,_21433_ident);
}



inline jule::Ptr<_1e56be485_Enum> _1e53308ee_ImportInfo::_method_find_enum(jule::Str _22632_ident) {
	if ((!((*this)._method_is_lookupable(_22632_ident)))) {
		return nullptr;
	}
	return _1e53308ee_find_enum_in_package((*((*this)._field_package))._field_files,_22632_ident);
}



inline jule::Bool _1e53308ee_ImportInfo::_method_is_lookupable(jule::Str _23628_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if (((*this)._field_alias.len() != 0LL) || (*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if ((*this)._field_selected.len() > 0LL) {
			if ((!((*this)._method_exist_ident(_23628_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _1e53308ee_ImportInfo::_method_exist_ident(jule::Str _25626_ident) {
	{
		auto &expr = (*this)._field_selected;
		auto it = expr.begin();
		_iter_begin_5072326032:;
		if (it != expr.end()) {
			_228d7aadb_Token &_1e53308ee_sident = *it;
			{
				if (_1e53308ee_sident._field_kind == _25626_ident) {
					return true;
				}
			}
			_iter_next_5072326032:;
			++it;
			goto _iter_begin_5072326032;
		}
		_iter_end_5072326032:;
	}
	return false;
}



inline jule::Bool _1e53308ee_ImportInfo::_method_is_accessible_via_selection(void) {
	return ((*this)._field_import_all || ((*this)._field_selected.len() == 0LL)) || (*this)._method_exist_ident(jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, const _1e53308ee_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package << ", ";
	_Stream << "mod_id:" << _Src._field_mod_id;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_229b6ebcb_ParamIns> _229b6ebcb_Param::_method_instance(void) {
	return jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(this->self,jule::Ptr<_229d681e3_TypeKind>()));
}



inline jule::Bool _229b6ebcb_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _229b6ebcb_Param::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _229b6ebcb_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e58b0654_Var::_method_is_initialized(void) {
	return (*this)._field_value != nullptr;
}



inline jule::Bool _1e58b0654_Var::_method_is_type_inferred(void) {
	return ((*this)._field_kind == nullptr) || ((*((*this)._field_kind))._field_decl == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b0654_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "iter_relation:" << _Src._field_iter_relation << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline void _1e58b019d_TypeCompatibilityChecker::_method_push_err(jule::Str _13527_fmt,jule::Slice<jule::Any> _13540_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_13527_fmt,_13540_args);
}



inline jule::Bool _1e58b019d_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _13932_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_13932_ok = true;
		return _13932_ok;
	}
	jule::Ptr<_229b5076c_Trait> _14413_trt = (*((*this)._field_dest))._method_trt();
	jule::Bool _14517_ref = false;
	{
		
		if ((*((*this)._field_src))._method_sptr() != nullptr) {
			_case_begin_5073596352:;
			{
				_14517_ref=true;
				(*this)._field_src=(*((*((*this)._field_src))._method_sptr()))._field_elem;
				if ((*((*this)._field_src))._method_strct() == nullptr) {
					_13932_ok = false;
					return _13932_ok;
				}
				goto _case_begin_5073596544;
			}
		}
		else if ((*((*this)._field_src))._method_strct() != nullptr) {
			_case_begin_5073596544:;
			{
				jule::Ptr<_228e0d025_StructIns> _15617_s = (*((*this)._field_src))._method_strct();
				if ((!((*((*(_15617_s))._field_decl))._method_is_implements(_14413_trt)))) {
					_13932_ok = false;
					return _13932_ok;
				}
				if ((!(_14517_ref)) && _1e58b019d_trait_has_reference_receiver(_14413_trt)) {
					(*this)._method_push_err(jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>());
					_13932_ok = false;
					return _13932_ok;
				}
				_13932_ok = true;
				return _13932_ok;
			}
		}
		else if ((*((*this)._field_src))._method_trt() != nullptr) {
			_case_begin_5073596640:;
			{
				_13932_ok = _14413_trt == (*((*this)._field_src))._method_trt();
				return _13932_ok;
			}
		}
		else {
			_case_begin_5073594880:;
			{
				_13932_ok = false;
				return _13932_ok;
			}
		}
		_match_end_5073594768:;
	}
}



inline jule::Bool _1e58b019d_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _17630_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_17630_ok = true;
		return _17630_ok;
	}
	jule::Ptr<_229d681e3_Ptr> _18117_dest = (*((*this)._field_dest))._method_ptr();
	if ((*(_18117_dest))._method_is_unsafe()) {
		_17630_ok = true;
		return _17630_ok;
	}
	_17630_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _17630_ok;
}



inline jule::Bool _1e58b019d_TypeCompatibilityChecker::_method_check_prim(void) {
	jule::Bool _19031_ok = jule::Bool();
	jule::Ptr<_229d681e3_Prim> _19113_prim = (*((*this)._field_dest))._method_prim();
	if ((_19113_prim != nullptr) && (*(_19113_prim))._method_is_any()) {
		_19031_ok = true;
		return _19031_ok;
	}
	_19031_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _19031_ok;
}



inline jule::Bool _1e58b019d_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _19826_ok = jule::Bool();
	if ((*((*this)._field_dest))._method_ptr() != nullptr) {
		_19826_ok = (*this)._method_check_ptr();
		return _19826_ok;
	}
	if ((*((*this)._field_dest))._method_nil_compatible()) {
		if ((*((*this)._field_src))._method_is_nil()) {
			_19826_ok = true;
			return _19826_ok;
		}
	}
	{
		
		if ((*((*this)._field_dest))._method_prim() != nullptr) {
			_case_begin_5073629120:;
			{
				_19826_ok = (*this)._method_check_prim();
				return _19826_ok;
			}
		}
		else if ((*((*this)._field_dest))._method_trt() != nullptr) {
			_case_begin_5073629216:;
			{
				_19826_ok = (*this)._method_check_trait();
				return _19826_ok;
			}
		}
		else {
			_case_begin_5073627776:;
			{
				_19826_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
				return _19826_ok;
			}
		}
		_match_end_5073627536:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b019d_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1e58b019d_AssignTypeChecker::_method_push_err(jule::Str _22527_fmt,jule::Slice<jule::Any> _22540_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_22527_fmt,_22540_args);
}



inline jule::Bool _1e58b019d_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _23017_valid = true;
	{
		
		if ((*((*((*this)._field_d))._field_kind))._method_fnc() != nullptr) {
			_case_begin_5073639072:;
			{
				jule::Ptr<_229b6ebcb_FnIns> _23417_f = (*((*((*this)._field_d))._field_kind))._method_fnc();
				{
					
					if ((*(_23417_f))._method_is_builtin()) {
						_case_begin_5073643728:;
						{
							(*this)._method_push_err(jule::Str("builtin define cannot use as anonymous function", 47),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23417_f))._field_decl))._field_cpp_linked) {
						_case_begin_5073643840:;
						{
							(*this)._method_push_err(jule::Str("cpp-linked functions cannot use as anonymous function", 53),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23417_f))._field_decl))._method_is_method()) {
						_case_begin_5073643952:;
						{
							(*this)._method_push_err(jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					else if ((*((*(_23417_f))._field_decl))._field_generics.len() > 0LL) {
						_case_begin_5073644064:;
						{
							(*this)._method_push_err(jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
							_23017_valid=false;
						}
					}
					_match_end_5073643536:;
				}
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_tup() != nullptr) {
			_case_begin_5073639184:;
			{
				(*this)._method_push_err(jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>());
				_23017_valid=false;
			}
		}
		_match_end_5073638912:;
	}
	return _23017_valid;
}



inline jule::Bool _1e58b019d_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*((*this)._field_d))._method_is_const())) || ((*((*this)._field_dest))._method_prim() == nullptr)) || ((*((*((*this)._field_d))._field_kind))._method_prim() == nullptr)) || (!(_1e860322e_is_num((*((*((*((*this)._field_d))._field_kind))._method_prim()))._field_kind)))) {
		return false;
	}
	jule::Str _26913_kind = (*((*((*this)._field_dest))._method_prim()))._field_kind;
	{
		
		if (_1e860322e_is_float(_26913_kind)) {
			_case_begin_5073665744:;
			{
				if ((!(_1e58b019d_float_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else if (_1e860322e_is_int(_26913_kind)) {
			_case_begin_5073665840:;
			{
				if ((!(_1e58b019d_int_assignable(_26913_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else {
			_case_begin_5073664144:;
			{
				return false;
			}
		}
		_match_end_5073663904:;
	}
	return true;
}



inline jule::Bool _1e58b019d_AssignTypeChecker::_method_is_prim(void) {
	if ((*((*this)._field_dest))._field_variadic || (*((*((*this)._field_d))._field_kind))._field_variadic) {
		return false;
	}
	if ((*((*this)._field_dest))._method_cpp_linked() || (*((*((*this)._field_d))._field_kind))._method_cpp_linked()) {
		return false;
	}
	return ((*((*this)._field_dest))._method_prim() != nullptr) && ((*((*((*this)._field_d))._field_kind))._method_prim() != nullptr);
}



inline jule::Bool _1e58b019d_AssignTypeChecker::_method_check(void) {
	{
		
		if ((*this)._field_d == nullptr) {
			_case_begin_5073679856:;
			{
				return false;
			}
		}
		else if ((!((*this)._method_check_validity()))) {
			_case_begin_5073680192:;
			{
				return false;
			}
		}
		else if ((*this)._method_check_const()) {
			_case_begin_5073680288:;
			{
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_enm() != nullptr) {
			_case_begin_5073680400:;
			{
				jule::Ptr<_229d681e3_TypeKind> _31821_dkind = (*this)._field_dest;
				if ((*((*this)._field_dest))._method_enm() != nullptr) {
					_31821_dkind=(*((*((*((*this)._field_dest))._method_enm()))._field_kind))._field_kind;
				} else if ((*((*this)._field_dest))._method_prim() == nullptr) {
					goto _match_end_5073678464;
				}
				if (_1e85717c9_types_are_compatible((*((*((*((*((*((*((*this)._field_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._field_kind,(*((*(_31821_dkind))._method_prim()))._field_kind)) {
					return true;
				}
			}
		}
		else if ((*this)._method_is_prim()) {
			_case_begin_5073680512:;
			{
				jule::Ptr<_229d681e3_Prim> _33017_dest = (*((*this)._field_dest))._method_prim();
				if ((*(_33017_dest))._method_is_any()) {
					return true;
				}
				jule::Ptr<_229d681e3_Prim> _33421_src = (*((*((*this)._field_d))._field_kind))._method_prim();
				if (_1e85717c9_types_are_compatible((*(_33017_dest))._field_kind,(*(_33421_src))._field_kind)) {
					return true;
				}
			}
		}
		_match_end_5073678464:;
	}
	return (*((*this)._field_s))._method_check_type_compatibility((*this)._field_dest,(*((*this)._field_d))._field_kind,(*this)._field_error_token);
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b019d_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1e58b019d_DynamicTypeAnnotation::_method_push_generic(jule::Ptr<_229d681e3_TypeKind>& _35336_k,jule::Int _35350_i) {
	(*((*this)._field_f))._field_generics[_35350_i]=_35336_k;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_prim(jule::Ptr<_229d681e3_TypeKind>& _35744_k) {
	jule::Bool _35760_ok = jule::Bool();
	jule::Str _35813_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_5073715360:;
		if (it != expr.end()) {
			jule::Int _1e58b019d_i = it - expr.begin();
			jule::Ptr<_228d31971_GenericDecl> &_1e58b019d_g = *it;
			{
				if (_35813_kind != (*(_1e58b019d_g))._field_ident) {
					goto _iter_next_5073715360;
				}
				jule::Ptr<_229d681e3_TypeKind> _36417_t = (*((*this)._field_f))._field_generics[_1e58b019d_i];
				{
					
					if (_36417_t == nullptr) {
						_case_begin_5073720192:;
						{
							(*this)._method_push_generic(_35744_k,_1e58b019d_i);
						}
					}
					else if ((!((*(_36417_t))._method_equals(_35744_k)))) {
						_case_begin_5073720288:;
						{
							_35760_ok = false;
							return _35760_ok;
						}
					}
					_match_end_5073719952:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_35744_k))._field_kind;
				_35760_ok = true;
				return _35760_ok;
			}
			_iter_next_5073715360:;
			++it;
			_1e58b019d_i++;
			goto _iter_begin_5073715360;
		}
		_iter_end_5073715360:;
	}
	_35760_ok = false;
	return _35760_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_slc(jule::Ptr<_229d681e3_TypeKind>& _38143_k) {
	jule::Bool _38159_ok = jule::Bool();
	jule::Ptr<_229d681e3_Slc> _38217_pslc = (*((*((*this)._field_k))))._method_slc();
	if (_38217_pslc == nullptr) {
		_38159_ok = false;
		return _38159_ok;
	}
	jule::Ptr<_229d681e3_Slc> _38717_slc = (*(_38143_k))._method_slc();
	(*this)._field_k=(&((*(_38217_pslc))._field_elem));
	_38159_ok = (*this)._method_annotate_kind((*(_38717_slc))._field_elem);
	return _38159_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_check_map_key(jule::Ptr<_229d681e3_TypeKind>* _39243_k,jule::Ptr<_229d681e3_TypeKind>& _39263_ck) {
	jule::Bool _39280_ok = jule::Bool();
	jule::Ptr<_229d681e3_TypeKind>* _39317_old = (*this)._field_k;
	(*this)._field_k=_39243_k;
	_39280_ok=(*this)._method_annotate_kind(_39263_ck);
	(*this)._field_k=_39317_old;
	return _39280_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_map(jule::Ptr<_229d681e3_TypeKind>& _40043_k) {
	jule::Bool _40059_ok = jule::Bool();
	jule::Ptr<_229d681e3_Map> _40117_pmap = (*((*((*this)._field_k))))._method_map();
	if (_40117_pmap == nullptr) {
		_40059_ok = false;
		return _40059_ok;
	}
	jule::Ptr<_229d681e3_Map> _40617_m = (*(_40043_k))._method_map();
	_40059_ok = (*this)._method_check_map_key((&((*(_40117_pmap))._field_key)),(*(_40617_m))._field_key) && (*this)._method_check_map_key((&((*(_40117_pmap))._field_val)),(*(_40617_m))._field_val);
	return _40059_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_fn(jule::Ptr<_229d681e3_TypeKind>& _41242_k) {
	jule::Bool _41258_ok = jule::Bool();
	jule::Ptr<_229b6ebcb_FnIns> _41317_pf = (*((*((*this)._field_k))))._method_fnc();
	if (_41317_pf == nullptr) {
		_41258_ok = false;
		return _41258_ok;
	}
	jule::Ptr<_229b6ebcb_FnIns> _41717_f = (*(_41242_k))._method_fnc();
	{
		
		if ((*(_41317_pf))._field_params.len() != (*(_41717_f))._field_params.len()) {
			_case_begin_5073754880:;
			{
				_41258_ok = false;
				return _41258_ok;
			}
		}
		else if ((*((*(_41317_pf))._field_decl))._method_is_void() != (*((*(_41717_f))._field_decl))._method_is_void()) {
			_case_begin_5073754992:;
			{
				_41258_ok = false;
				return _41258_ok;
			}
		}
		_match_end_5073754720:;
	}
	_41258_ok=true;
	jule::Ptr<_229d681e3_TypeKind>* _42717_old = (*this)._field_k;
	{
		auto &expr = (*(_41717_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5073759520:;
		if (it != expr.end()) {
			jule::Int _1e58b019d_i = it - expr.begin();
			jule::Ptr<_229b6ebcb_ParamIns> _1e58b019d_fp = *it;
			{
				(*this)._field_k=(&((*((*(_41317_pf))._field_params[_1e58b019d_i]))._field_kind));
				_41258_ok=(*this)._method_annotate_kind((*(_1e58b019d_fp))._field_kind) && _41258_ok;
			}
			_iter_next_5073759520:;
			++it;
			_1e58b019d_i++;
			goto _iter_begin_5073759520;
		}
		_iter_end_5073759520:;
	}
	if ((!((*((*(_41317_pf))._field_decl))._method_is_void()))) {
		(*this)._field_k=(&((*(_41317_pf))._field_result));
		_41258_ok=(*this)._method_annotate_kind((*(_41717_f))._field_result) && _41258_ok;
	}
	(*this)._field_k=_42717_old;
	return _41258_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ptr<_229d681e3_TypeKind>& _44243_k) {
	jule::Bool _44259_ok = jule::Bool();
	jule::Ptr<_229d681e3_Ptr> _44317_pptr = (*((*((*this)._field_k))))._method_ptr();
	if (_44317_pptr == nullptr) {
		_44259_ok = false;
		return _44259_ok;
	}
	jule::Ptr<_229d681e3_Ptr> _44817_ptr = (*(_44243_k))._method_ptr();
	(*this)._field_k=(&((*(_44317_pptr))._field_elem));
	_44259_ok = (*this)._method_annotate_kind((*(_44817_ptr))._field_elem);
	return _44259_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_sptr(jule::Ptr<_229d681e3_TypeKind>& _45344_k) {
	jule::Bool _45360_ok = jule::Bool();
	jule::Ptr<_229d681e3_Sptr> _45417_ssptr = (*((*((*this)._field_k))))._method_sptr();
	if (_45417_ssptr == nullptr) {
		_45360_ok = false;
		return _45360_ok;
	}
	jule::Ptr<_229d681e3_Sptr> _45917_sptr = (*(_45344_k))._method_sptr();
	(*this)._field_k=(&((*(_45417_ssptr))._field_elem));
	_45360_ok = (*this)._method_annotate_kind((*(_45917_sptr))._field_elem);
	return _45360_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_any(jule::Ptr<_229d681e3_TypeKind>& _46443_k) {
	jule::Bool _46459_ok = jule::Bool();
	jule::Str _46513_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_5073789456:;
		if (it != expr.end()) {
			jule::Int _1e58b019d_i = it - expr.begin();
			jule::Ptr<_228d31971_GenericDecl> &_1e58b019d_g = *it;
			{
				if (_46513_kind != (*(_1e58b019d_g))._field_ident) {
					goto _iter_next_5073789456;
				}
				jule::Ptr<_229d681e3_TypeKind> _47117_t = (*((*this)._field_f))._field_generics[_1e58b019d_i];
				{
					
					if (_47117_t == nullptr) {
						_case_begin_5073794288:;
						{
							(*this)._method_push_generic(_46443_k,_1e58b019d_i);
						}
					}
					else if ((!((*(_47117_t))._method_equals(_46443_k)))) {
						_case_begin_5073794384:;
						{
							_46459_ok = false;
							return _46459_ok;
						}
					}
					_match_end_5073794048:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_46443_k))._field_kind;
				_46459_ok = true;
				return _46459_ok;
			}
			_iter_next_5073789456:;
			++it;
			_1e58b019d_i++;
			goto _iter_begin_5073789456;
		}
		_iter_end_5073789456:;
	}
	_46459_ok = false;
	return _46459_ok;
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate_kind(jule::Ptr<_229d681e3_TypeKind>& _48844_k) {
	jule::Bool _48860_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _48860_ok;
	}
	{
		
		if ((*this)._method_annotate_any(_48844_k)) {
			_case_begin_5073803232:;
			{
				_48860_ok = true;
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_prim() != nullptr) {
			_case_begin_5073803328:;
			{
				_48860_ok = (*this)._method_annotate_prim(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_slc() != nullptr) {
			_case_begin_5073802576:;
			{
				_48860_ok = (*this)._method_annotate_slc(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_map() != nullptr) {
			_case_begin_5073802672:;
			{
				_48860_ok = (*this)._method_annotate_map(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_fnc() != nullptr) {
			_case_begin_5073802768:;
			{
				_48860_ok = (*this)._method_annotate_fn(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_ptr() != nullptr) {
			_case_begin_5073801984:;
			{
				_48860_ok = (*this)._method_annotate_ptr(_48844_k);
				return _48860_ok;
			}
		}
		else if ((*(_48844_k))._method_sptr() != nullptr) {
			_case_begin_5073802080:;
			{
				_48860_ok = (*this)._method_annotate_sptr(_48844_k);
				return _48860_ok;
			}
		}
		else {
			_case_begin_5073800304:;
			{
				_48860_ok = false;
				return _48860_ok;
			}
		}
		_match_end_5073800192:;
	}
}



inline jule::Bool _1e58b019d_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _50536_ok = jule::Bool();
	(*this)._field_k=(&((*((*this)._field_p))._field_kind));
	_50536_ok = (*this)._method_annotate_kind((*((*this)._field_a))._field_kind);
	return _50536_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b019d_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _1e58b019d_FnCallArgChecker::_method_push_err_token(_228d7aadb_Token _52133_token,jule::Str _52147_fmt,jule::Slice<jule::Any> _52160_args) {
	(*((*((*this)._field_e))._field_s))._method_push_err(_52133_token,_52147_fmt,_52160_args);
}



inline void _1e58b019d_FnCallArgChecker::_method_push_err(jule::Str _52527_fmt,jule::Slice<jule::Any> _52540_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_52527_fmt,_52540_args);
}



inline jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>> _1e58b019d_FnCallArgChecker::_method_get_params(void) {
	if ((((*((*this)._field_f))._field_params.len() > 0LL) && ((*((*((*this)._field_f))._field_params[0LL]))._field_decl != nullptr)) && (*((*((*((*this)._field_f))._field_params[0LL]))._field_decl))._method_is_self()) {
		return (*((*this)._field_f))._field_params.slice(1LL);
	}
	return (*((*this)._field_f))._field_params;
}



inline jule::Bool _1e58b019d_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>& _53832_params) {
	jule::Bool _53855_ok = jule::Bool();
	jule::I64 _53917_n = _53832_params.len();
	if ((_53917_n > 0LL) && (*((*(_53832_params[0LL]))._field_decl))._method_is_self()) {
		(_53917_n)--;
	}
	jule::I64 _54417_diff = _53917_n - (*this)._field_args.len();
	{
		
		if (_54417_diff == 0LL) {
			_case_begin_5073842912:;
			{
				_53855_ok = true;
				return _53855_ok;
			}
		}
		else if ((_53917_n > 0LL) && (*((*(_53832_params[_53917_n - 1LL]))._field_decl))._field_variadic) {
			_case_begin_5073843024:;
			{
				_53855_ok = true;
				return _53855_ok;
			}
		}
		else if ((_54417_diff < 0LL) || (_54417_diff > _53832_params.len())) {
			_case_begin_5073843136:;
			{
				(*this)._method_push_err(jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				_53855_ok = false;
				return _53855_ok;
			}
		}
		_match_end_5073842480:;
	}
	jule::Str _55717_idents = jule::Str();
	for (; _54417_diff > 0LL; (_54417_diff)--) {
		{
			_55717_idents+=jule::Str(", ", 2) + (*((*(_53832_params[_53917_n - _54417_diff]))._field_decl))._field_ident;
		}
	_iter_next_5073849584:;
	}
	_iter_end_5073849584:;
	_55717_idents=_55717_idents.slice(2LL);
	(*this)._method_push_err(jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_55717_idents)}));
	_53855_ok = false;
	return _53855_ok;
}



inline jule::Bool _1e58b019d_FnCallArgChecker::_method_check_arg(jule::Ptr<_229b6ebcb_ParamIns>& _56733_p,jule::Ptr<_229d70d33_Data>& _56752_arg,_228d7aadb_Token& _56769_error_token) {
	jule::Bool _56791_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation && _229b6ebcb_parameter_uses_generics((*(_56733_p))._field_decl,(*((*((*this)._field_f))._field_decl))._field_generics)) {
		_1e58b019d_DynamicTypeAnnotation _56921_dta = _1e58b019d_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_56733_p,_56752_arg,_56769_error_token,nullptr);
		_56791_ok=_56921_dta._method_annotate();
		if ((!(_56791_ok))) {
			(*this)._method_push_err_token(_56769_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
			_56791_ok = false;
			return _56791_ok;
		}
	}
	(*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((*((*(_56733_p))._field_decl))._field_mutable,(*((*(_56733_p))._field_decl))._field_reference,(*(_56733_p))._field_kind,_56752_arg,_56769_error_token);
	(*((*((*this)._field_e))._field_s))._method_check_assign_type((*((*(_56733_p))._field_decl))._field_reference,(*(_56733_p))._field_kind,_56752_arg,_56769_error_token);
	_56791_ok = true;
	return _56791_ok;
}



inline jule::Bool _1e58b019d_FnCallArgChecker::_method_push(jule::Ptr<_229b6ebcb_ParamIns>& _58928_p,jule::Ptr<_228d31971_Expr> _58946_arg) {
	jule::Bool _58960_ok = jule::Bool();
	jule::Ptr<_229d681e3_TypeKind> _59017_old = (*((*this)._field_e))._field_prefix;
	jule::Bool _59113_old_immut = (*((*this)._field_e))._field_immutable;
	jule::Ptr<_229d70d33_Data> _59217_d = nullptr;
	(*((*this)._field_e))._field_immutable=(!((*((*(_58928_p))._field_decl))._field_mutable));
	if ((!((*this)._field_dynamic_annotation)) && (!((*((*(_58928_p))._field_decl))._field_variadic))) {
		(*((*this)._field_e))._field_prefix=(*(_58928_p))._field_kind;
	} else {
		(*((*this)._field_e))._field_prefix=nullptr;
	}
	_59217_d=(*((*this)._field_e))._method_eval_expr_kind((*(_58946_arg))._field_kind);
	(*((*this)._field_e))._field_prefix=_59017_old;
	(*((*this)._field_e))._field_immutable=_59113_old_immut;
	if (_59217_d == nullptr) {
		_58960_ok = false;
		return _58960_ok;
	}
	(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push((*(_59217_d))._field_model);
	_58960_ok = (*this)._method_check_arg(_58928_p,_59217_d,(*(_58946_arg))._field_token);
	return _58960_ok;
}



inline jule::Bool _1e58b019d_FnCallArgChecker::_method_push_variadic(jule::Ptr<_229b6ebcb_ParamIns>& _61337_p,jule::Int _61355_i) {
	jule::Bool _61365_ok = jule::Bool();
	_61365_ok=true;
	jule::Bool _61517_variadiced = false;
	jule::Bool _61613_more = (_61355_i + 1LL) < (*this)._field_args.len();
	jule::Ptr<_1e5870218_SliceExprModel> _61717_model = jule::new_struct<_1e5870218_SliceExprModel>(new( std::nothrow ) _1e5870218_SliceExprModel((*(_61337_p))._field_kind,jule::Slice<jule::Any>()));
	jule::Ptr<_229d681e3_TypeKind> _62117_old = (*((*this)._field_e))._field_prefix;
	for (; _61355_i < (*this)._field_args.len(); (_61355_i)++) {
		{
			jule::Ptr<_228d31971_Expr> _62321_arg = (*this)._field_args[_61355_i];
			{
				auto &_match_expr{ (*(_62321_arg))._field_kind };
				
				if (_match_expr.type_is<jule::Ptr<_228d31971_VariadicExpr>>()) {
					_case_begin_5073895056:;
					{
						(*((*this)._field_e))._field_prefix=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc((*(_61337_p))._field_kind))));
					}
				}
				else {
					_case_begin_5073896544:;
					{
						(*((*this)._field_e))._field_prefix=(*(_61337_p))._field_kind;
					}
				}
				_match_end_5073896448:;
			}
			jule::Ptr<_229d70d33_Data> _63321_d = (*((*this)._field_e))._method_eval(_62321_arg);
			if (_63321_d == nullptr) {
				_61365_ok=false;
				goto _iter_next_5073893072;
			}
			if ((*((*(_63321_d))._field_kind))._field_variadic) {
				_61517_variadiced=true;
				jule::Bool _64221_pold = (*((*(_61337_p))._field_kind))._field_variadic;
				jule::Bool _64321_dold = (*((*(_63321_d))._field_kind))._field_variadic;
				(*((*(_61337_p))._field_kind))._field_variadic=false;
				(*((*(_63321_d))._field_kind))._field_variadic=false;
				__JULE_DEFER({
					(*((*(_61337_p))._field_kind))._field_variadic=_64221_pold;
					(*((*(_63321_d))._field_kind))._field_variadic=_64321_dold;
				});
				{
					auto &_match_expr{ (*(_63321_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e5870218_SliceExprModel>>()) {
						_case_begin_5073905872:;
						{
							_61717_model=(*(_63321_d))._field_model.operator jule::Ptr<_1e5870218_SliceExprModel>();
							(*(_61717_model))._field_elem_kind=(*(_61337_p))._field_kind;
						}
					}
					else {
						_case_begin_5073907600:;
						{
							_61717_model=nullptr;
							(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push((*(_63321_d))._field_model);
						}
					}
					_match_end_5073907520:;
				}
				_61365_ok=_61365_ok && (*this)._method_check_arg(_61337_p,_63321_d,(*(_62321_arg))._field_token);
				goto _iter_next_5073893072;
			}
			(*(_61717_model))._field_elems = jule::alloc_for_append((*(_61717_model))._field_elems,1);(*(_61717_model))._field_elems.push((*(_63321_d))._field_model);
			_61365_ok=_61365_ok && (*this)._method_check_arg(_61337_p,_63321_d,(*(_62321_arg))._field_token);
		}
	_iter_next_5073893072:;
	}
	_iter_end_5073893072:;
	(*((*this)._field_e))._field_prefix=_62117_old;
	if (_61517_variadiced && _61613_more) {
		(*this)._method_push_err(jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>());
	}
	if (_61717_model != nullptr) {
		(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.push(jule::Any(_61717_model));
	}
	return _61365_ok;
}



inline jule::Bool _1e58b019d_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>& _68034_params) {
	jule::Bool _68057_ok = jule::Bool();
	_68057_ok=true;
	jule::Int _68217_i = 0LL;
	_julec_label_iter:;
	while (_68217_i < _68034_params.len()) {
		{
			jule::Ptr<_229b6ebcb_ParamIns> _68521_p = _68034_params[_68217_i];
			{
				
				if ((*((*(_68521_p))._field_decl))._method_is_self()) {
					_case_begin_5073928336:;
				}
				else if ((*((*(_68521_p))._field_decl))._field_variadic) {
					_case_begin_5073928048:;
					{
						_68057_ok=(*this)._method_push_variadic(_68521_p,_68217_i) && _68057_ok;
						goto _iter_end_5073924912;
					}
				}
				else if ((*this)._field_args.len() <= _68217_i) {
					_case_begin_5073929920:;
					{
						_68057_ok=false;
						goto _iter_end_5073924912;
					}
				}
				else {
					_case_begin_5073927248:;
					{
						_68057_ok=(*this)._method_push(_68521_p,(*this)._field_args[_68217_i]) && _68057_ok;
					}
				}
				_match_end_5073927136:;
			}
			(_68217_i)++;
		}
	_iter_next_5073924912:;
	}
	_iter_end_5073924912:;
	return _68057_ok;
}



inline jule::Bool _1e58b019d_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _70750_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_5073936320:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeKind> &_1e58b019d_g = *it;
			{
				if (_1e58b019d_g == nullptr) {
					(*this)._method_push_err(jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
					_70750_ok = false;
					return _70750_ok;
				}
			}
			_iter_next_5073936320:;
			++it;
			goto _iter_begin_5073936320;
		}
		_iter_end_5073936320:;
	}
	_70750_ok = true;
	return _70750_ok;
}



inline jule::Bool _1e58b019d_FnCallArgChecker::_method_check(void) {
	jule::Bool _71726_ok = jule::Bool();
	jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>> _71817_params = (*this)._method_get_params();
	_71726_ok=(*this)._method_check_counts(_71817_params);
	if ((!(_71726_ok))) {
		_71726_ok = false;
		return _71726_ok;
	}
	_71726_ok=(*this)._method_check_args(_71817_params);
	if (_71726_ok && (*this)._field_dynamic_annotation) {
		_71726_ok=(*this)._method_check_dynamic_type_annotation();
	}
	return _71726_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b019d_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _1e58b019d_StructLitChecker::_method_push_err(_228d7aadb_Token _74127_token,jule::Str _74141_fmt,jule::Slice<jule::Any> _74154_args) {
	(*((*this)._field_e))._method_push_err(_74127_token,_74141_fmt,_74154_args);
}



inline void _1e58b019d_StructLitChecker::_method_push_suggestion(jule::Str _74634_fmt,jule::Slice<jule::Any> _74647_args) {
	(*((*this)._field_e))._method_push_suggestion(_74634_fmt,_74647_args);
}



inline void _1e58b019d_StructLitChecker::_method_push_match(jule::Ptr<_228e0d025_FieldIns>& _75034_f,jule::Ptr<_229d70d33_Data>& _75053_d,_228d7aadb_Token& _75068_error_token) {
	(*this)._field_args = jule::alloc_for_append((*this)._field_args,1);(*this)._field_args.push(jule::new_struct<_1e5870218_StructArgExprModel>(new( std::nothrow ) _1e5870218_StructArgExprModel(_75034_f,(*(_75053_d))._field_model)));
	
	(*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((!((*((*this)._field_e))._field_immutable)),false,(*(_75034_f))._field_kind,_75053_d,_75068_error_token);
	(*((*((*this)._field_e))._field_s))._method_check_assign_type(false,(*(_75034_f))._field_kind,_75053_d,_75068_error_token);
}



inline void _1e58b019d_StructLitChecker::_method_check_pair(jule::Ptr<_228d31971_FieldExprPair>& _76134_pair,jule::Slice<jule::Any>& _76161_exprs) {
	jule::Ptr<_228e0d025_FieldIns> _76317_f = (*((*this)._field_s))._method_find_field((*(_76134_pair))._field_field._field_kind);
	if (_76317_f == nullptr) {
		(*this)._method_push_err((*(_76134_pair))._field_field,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_76134_pair))._field_field._field_kind)}));
		return;
	}
	if ((!((*((*((*this)._field_e))._field_s))._method_is_accessible_define((*((*(_76317_f))._field_decl))._field_public,(*((*(_76317_f))._field_decl))._field_token)))) {
		(*this)._method_push_err((*(_76134_pair))._field_field,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_76134_pair))._field_field._field_kind)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	_julec_label_dup_lookup:;
	{
		auto &expr = _76161_exprs;
		auto it = expr.begin();
		_iter_begin_5073980880:;
		if (it != expr.end()) {
			jule::Any _1e58b019d_expr = *it;
			{
				{
					auto &_match_expr{ _1e58b019d_expr };
					
					if (_match_expr.type_is<jule::Ptr<_228d31971_FieldExprPair>>()) {
						_case_begin_5073982512:;
						{
							jule::Ptr<_228d31971_FieldExprPair> _77925_dpair = _1e58b019d_expr.operator jule::Ptr<_228d31971_FieldExprPair>();
							{
								
								if (_76134_pair == _77925_dpair) {
									_case_begin_5073985264:;
									{
										goto _iter_end_5073980880;
									}
								}
								else if ((*(_76134_pair))._field_field._field_kind == (*(_77925_dpair))._field_field._field_kind) {
									_case_begin_5073985376:;
									{
										(*this)._method_push_err((*(_76134_pair))._field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any((*(_76134_pair))._field_field._field_kind)}));
										goto _iter_end_5073980880;
									}
								}
								_match_end_5073985104:;
							}
						}
					}
					_match_end_5073982176:;
				}
			}
			_iter_next_5073980880:;
			++it;
			goto _iter_begin_5073980880;
		}
		_iter_end_5073980880:;
	}
	jule::Ptr<_229d681e3_TypeKind> _79117_prefix = (*((*this)._field_e))._field_prefix;
	__JULE_DEFER({
		(*((*this)._field_e))._field_prefix=_79117_prefix;
	});
	(*((*this)._field_e))._field_prefix=(*(_76317_f))._field_kind;
	jule::Ptr<_229d70d33_Data> _79517_d = (*((*this)._field_e))._method_eval_expr_kind((*(_76134_pair))._field_expr);
	if (_79517_d == nullptr) {
		return;
	}
	(*this)._method_push_match(_76317_f,_79517_d,(*(_76134_pair))._field_field);
}



inline jule::Bool _1e58b019d_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any>& _80235_exprs) {
	jule::Bool _80317_ok = true;
	{
		auto &expr = _80235_exprs;
		auto it = expr.begin();
		_iter_begin_5073998480:;
		if (it != expr.end()) {
			jule::Int _1e58b019d_i = it - expr.begin();
			jule::Any _1e58b019d_expr = *it;
			{
				{
					auto &_match_expr{ _1e58b019d_expr };
					
					if (_match_expr.type_is<jule::Ptr<_228d31971_KeyValPair>>()) {
						_case_begin_5074000816:;
						{
							jule::Ptr<_228d31971_KeyValPair> _80725_pair = _1e58b019d_expr.operator jule::Ptr<_228d31971_KeyValPair>();
							{
								auto &_match_expr{ (*(_80725_pair))._field_key };
								
								if (_match_expr.type_is<jule::Ptr<_228d31971_IdentExpr>>()) {
									_case_begin_5074006128:;
								}
								else {
									_case_begin_5074003824:;
									{
										(*this)._method_push_err((*(_80725_pair))._field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
										_80317_ok=false;
										goto _iter_next_5073998480;
									}
								}
								_match_end_5074003728:;
							}
							_80235_exprs.__at(_1e58b019d_i)=jule::Any(jule::new_struct<_228d31971_FieldExprPair>(new( std::nothrow ) _228d31971_FieldExprPair((*((*(_80725_pair))._field_key.operator jule::Ptr<_228d31971_IdentExpr>()))._field_token,(*(_80725_pair))._field_val)));
						}
					}
					_match_end_5074000480:;
				}
			}
			_iter_next_5073998480:;
			++it;
			_1e58b019d_i++;
			goto _iter_begin_5073998480;
		}
		_iter_end_5073998480:;
	}
	return _80317_ok;
}



inline void _1e58b019d_StructLitChecker::_method_check(jule::Slice<jule::Any>& _82829_exprs) {
	if (_82829_exprs.len() == 0LL) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_82829_exprs)))) {
		return;
	}
	jule::Bool _83717_paired = false;
	{
		auto &expr = _82829_exprs;
		auto it = expr.begin();
		_iter_begin_5074012912:;
		if (it != expr.end()) {
			jule::Int _1e58b019d_i = it - expr.begin();
			jule::Any _1e58b019d_expr = *it;
			{
				{
					auto &_match_expr{ _1e58b019d_expr };
					
					if (_match_expr.type_is<jule::Ptr<_228d31971_FieldExprPair>>()) {
						_case_begin_5074015104:;
						{
							jule::Ptr<_228d31971_FieldExprPair> _84125_pair = _1e58b019d_expr.operator jule::Ptr<_228d31971_FieldExprPair>();
							if ((_1e58b019d_i > 0LL) && (!(_83717_paired))) {
								(*this)._method_push_err((*(_84125_pair))._field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							}
							_83717_paired=true;
							(*this)._method_check_pair(_84125_pair,_82829_exprs);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_228d31971_Expr>>()) {
						_case_begin_5074015216:;
						{
							jule::Ptr<_228d31971_Expr> _84925_e = _1e58b019d_expr.operator jule::Ptr<_228d31971_Expr>();
							if (_83717_paired) {
								(*this)._method_push_err((*(_84925_e))._field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>());
							}
							if (_1e58b019d_i >= (*((*this)._field_s))._field_fields.len()) {
								(*this)._method_push_err((*(_84925_e))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
								goto _iter_next_5074012912;
							}
							jule::Ptr<_228e0d025_FieldIns> _85825_field = (*((*this)._field_s))._field_fields[_1e58b019d_i];
							jule::Ptr<_229d681e3_TypeKind> _86025_prefix = (*((*this)._field_e))._field_prefix;
							__JULE_DEFER({
								(*((*this)._field_e))._field_prefix=_86025_prefix;
							});
							(*((*this)._field_e))._field_prefix=(*(_85825_field))._field_kind;
							jule::Ptr<_229d70d33_Data> _86425_d = (*((*this)._field_e))._method_eval_expr_kind((*(_84925_e))._field_kind);
							if (_86425_d == nullptr) {
								goto _iter_next_5074012912;
							}
							(*this)._method_push_match(_85825_field,_86425_d,(*(_84925_e))._field_token);
						}
					}
					_match_end_5074014752:;
				}
			}
			_iter_next_5074012912:;
			++it;
			_1e58b019d_i++;
			goto _iter_begin_5074012912;
		}
		_iter_end_5074012912:;
	}
	if ((!(_83717_paired))) {
		jule::I64 _87517_n = (*((*this)._field_s))._field_fields.len();
		jule::I64 _87621_diff = _87517_n - _82829_exprs.len();
		{
			
			if (_87621_diff <= 0LL) {
				_case_begin_5074036544:;
				{
					return;
				}
			}
			_match_end_5074036112:;
		}
		jule::Str _88221_idents = jule::Str();
		for (; _87621_diff > 0LL; (_87621_diff)--) {
			{
				_88221_idents+=jule::Str(", ", 2) + (*((*((*((*this)._field_s))._field_fields[_87517_n - _87621_diff]))._field_decl))._field_ident;
			}
		_iter_next_5074016304:;
		}
		_iter_end_5074016304:;
		_88221_idents=_88221_idents.slice(2LL);
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_88221_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b019d_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _229b6ebcb_Fn::_method_is_void(void) {
	return (*this)._field_result == nullptr;
}



inline jule::Bool _229b6ebcb_Fn::_method_is_method(void) {
	return (*this)._field_owner != nullptr;
}



inline jule::Bool _229b6ebcb_Fn::_method_is_entry_point(void) {
	return (*this)._field_ident == jule::Str("main", 4);
}



inline jule::Bool _229b6ebcb_Fn::_method_is_init(void) {
	return (*this)._field_ident == jule::Str("init", 4);
}



inline jule::Bool _229b6ebcb_Fn::_method_is_anon(void) {
	return _228d7aadb_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _229b6ebcb_Fn::_method_any_var(void) {
	return ((*this)._field_result != nullptr) && ((*((*this)._field_result))._field_idents.len() > 0LL);
}



inline jule::Bool _229b6ebcb_Fn::_method_parameters_uses_generics(void) {
	if ((*this)._field_generics.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*this)._field_params;
		auto it = expr.begin();
		_iter_begin_5070554096:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Param> &_229b6ebcb_p = *it;
			{
				if (_229b6ebcb_parameter_uses_generics(_229b6ebcb_p,(*this)._field_generics)) {
					return true;
				}
			}
			_iter_next_5070554096:;
			++it;
			goto _iter_begin_5070554096;
		}
		_iter_end_5070554096:;
	}
	return false;
}



inline jule::Bool _229b6ebcb_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if (((*((*this)._field_result))._field_kind == nullptr) || ((*((*((*this)._field_result))._field_kind))._field_kind == nullptr)) {
		return false;
	}
	return _229b6ebcb_kind_uses_generics((*((*((*this)._field_result))._field_kind))._field_kind,(*this)._field_generics);
}



inline jule::Ptr<_229b6ebcb_FnIns> _229b6ebcb_Fn::_method_instance_force(void) {
	jule::Ptr<_229b6ebcb_FnIns> _11117_ins = jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),this->self,jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::new_struct<_1e56c3885_Scope>(new( std::nothrow ) _1e56c3885_Scope()),_228d6ecab_ReferenceStack::_static_method_new(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::U8(),jule::Bool()));
	if ((*(this->self))._method_is_init()) {
		(*(_11117_ins))._field_refers=_228d6ecab_ReferenceStack::_static_method_new();
	}
	(*(_11117_ins))._field_params=jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_params.len()));
	{
		auto &expr = (*(this->self))._field_params;
		auto it = expr.begin();
		_iter_begin_5070565600:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Param> _229b6ebcb_p = *it;
			{
				(*(_11117_ins))._field_params = jule::alloc_for_append((*(_11117_ins))._field_params,1);(*(_11117_ins))._field_params.push((*(_229b6ebcb_p))._method_instance());
			}
			_iter_next_5070565600:;
			++it;
			goto _iter_begin_5070565600;
		}
		_iter_end_5070565600:;
	}
	if ((*((*(_11117_ins))._field_decl))._field_result != nullptr) {
		(*(_11117_ins))._field_result=(*((*((*((*(_11117_ins))._field_decl))._field_result))._field_kind))._field_kind;
	}
	return _11117_ins;
}



inline jule::Ptr<_229b6ebcb_FnIns> _229b6ebcb_Fn::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	return (*(this->self))._method_instance_force();
}



inline std::tuple<jule::Bool,jule::Int> _229b6ebcb_Fn::_method_append_instance(jule::Ptr<_229b6ebcb_FnIns>& _14239_ins) {
	if ((*this)._field_generics.len() == 0LL) {
		if ((*this)._field_instances.len() == 1LL) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14239_ins);
		return std::make_tuple(true,-1LL);
	}
	if ((*this)._field_instances.len() == 0LL) {
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14239_ins);
		return std::make_tuple(true,-1LL);
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_5070587792:;
		if (it != expr.end()) {
			jule::Int _229b6ebcb_j = it - expr.begin();
			jule::Ptr<_229b6ebcb_FnIns> &_229b6ebcb_ains = *it;
			{
				if ((*(_229b6ebcb_ains))._method_same(_14239_ins)) {
					return std::make_tuple(false,_229b6ebcb_j);
				}
			}
			_iter_next_5070587792:;
			++it;
			_229b6ebcb_j++;
			goto _iter_begin_5070587792;
		}
		_iter_end_5070587792:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.push(_14239_ins);
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _229b6ebcb_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline void _1e58b019d_RetTypeChecker::_method_prepare_types(void) {
	if ((*this)._field_f != nullptr) {
		(*this)._field_types=_1e58b019d_get_result_types((*((*this)._field_f))._field_result);
	}
}



inline void _1e58b019d_RetTypeChecker::_method_prepare_exprs(jule::Ptr<_228d31971_Expr>& _106837_e) {
	if (_106837_e == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_106837_e))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_TupleExpr>>()) {
			_case_begin_5074156608:;
			{
				(*this)._field_exprs=(*((*(_106837_e))._field_kind.operator jule::Ptr<_228d31971_TupleExpr>()))._field_expr;
			}
		}
		else {
			_case_begin_5074156976:;
			{
				(*this)._field_exprs = jule::alloc_for_append((*this)._field_exprs,1);(*this)._field_exprs.push(_106837_e);
			}
		}
		_match_end_5074156016:;
	}
}



inline void _1e58b019d_RetTypeChecker::_method_ret_vars(void) {
	if (((*this)._field_f == nullptr) || (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ptr<_1e58b0654_Var>>::alloc(0LL,static_cast<jule::I64>((*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents.len()));
	jule::Ptr<_1e56c3885_ScopeChecker> _108817_root_scope = (*((*this)._field_sc))._method_get_root();
	jule::Int _109017_j = 0LL;
	{
		auto &expr = (*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_5074168240:;
		if (it != expr.end()) {
			jule::Int _1e58b019d_i = it - expr.begin();
			_228d7aadb_Token &_1e58b019d_ident = *it;
			{
				if ((!(_228d7aadb_is_ignore_ident(_1e58b019d_ident._field_kind)))) {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.push((*((*(_108817_root_scope))._field_table))._field_vars[_109017_j]);
					(_109017_j)++;
				} else {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.push(jule::new_struct<_1e58b0654_Var>(new( std::nothrow ) _1e58b0654_Var(jule::Ptr<_1e56c3885_Scope>(),_228d7aadb_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),(*this)._field_types[_1e58b019d_i])),jule::Ptr<_229d70d33_Value>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_1e58b0654_IterRelation>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>())));
				}
			}
			_iter_next_5074168240:;
			++it;
			_1e58b019d_i++;
			goto _iter_begin_5074168240;
		}
		_iter_end_5074168240:;
	}
	if (_109017_j == 0LL) {
		(*this)._field_vars=nullptr;
	}
}



inline void _1e58b019d_RetTypeChecker::_method_check_exprs(void) {
	if ((*this)._field_exprs.len() == 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_229d70d33_Data>> _111417_datas = jule::Slice<jule::Ptr<_229d70d33_Data>>::alloc(0LL,static_cast<jule::I64>((*this)._field_exprs.len()));
	{
		auto &expr = (*this)._field_exprs;
		auto it = expr.begin();
		_iter_begin_5074179488:;
		if (it != expr.end()) {
			jule::Int _1e58b019d_i = it - expr.begin();
			jule::Ptr<_228d31971_Expr> _1e58b019d_expr = *it;
			{
				if (_1e58b019d_i >= (*this)._field_types.len()) {
					goto _iter_end_5074179488;
				}
				jule::Ptr<_229d681e3_TypeKind> _112121_t = (*this)._field_types[_1e58b019d_i];
				jule::Ptr<_229d70d33_Data> _112321_d = (*((*((*((*this)._field_sc))._field_s))._method_evalp((*this)._field_sc,_112121_t)))._method_eval_expr(_1e58b019d_expr);
				if (_112321_d == nullptr) {
					goto _iter_next_5074179488;
				}
				_111417_datas.push(_112321_d);
				if ((!((*(_112321_d))._field_mutable)) && (*((*(_112321_d))._field_kind))._method_mutable()) {
					(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>());
					return;
				}
				_1e58b019d_AssignTypeChecker _113521_ac = _1e58b019d_AssignTypeChecker((*((*this)._field_sc))._field_s,_112121_t,_112321_d,(*this)._field_error_token);
				_113521_ac._method_check();
			}
			_iter_next_5074179488:;
			++it;
			_1e58b019d_i++;
			goto _iter_begin_5074179488;
		}
		_iter_end_5074179488:;
	}
	if (_111417_datas.len() > 1LL) {
		(*this)._field_model=jule::Any(jule::new_struct<_1e5870218_TupleExprModel>(new( std::nothrow ) _1e5870218_TupleExprModel(_111417_datas)));
	} else if (_111417_datas.len() == 1LL) {
		(*this)._field_model=(*(_111417_datas[0LL]))._field_model;
	}
}



inline jule::Bool _1e58b019d_RetTypeChecker::_method_check(jule::Ptr<_228d31971_Expr>& _115429_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_115429_e);
	(*this)._method_ret_vars();
	jule::I64 _115913_n = (*this)._field_exprs.len();
	if ((_115913_n == 0LL) && ((*this)._field_types.len() > 0LL)) {
		if ((!((*((*((*this)._field_f))._field_decl))._method_any_var()))) {
			(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>());
			return false;
		}
		return true;
	}
	if (((_115913_n > 0LL) && ((*this)._field_f != nullptr)) && (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>());
		return false;
	}
	if (_115913_n > (*this)._field_types.len()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>());
	} else if (_115913_n < (*this)._field_types.len()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("missing return expressions for multi-return", 43),jule::Slice<jule::Any>());
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e58b019d_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_FnCallExpr::_method_unhandled(void) {
	return (*this)._field_exception == nullptr;
}



inline jule::Bool _228d31971_FnCallExpr::_method_ignored(void) {
	return ((*this)._field_exception != nullptr) && (*((*this)._field_exception))._field_deferred;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "exception:" << _Src._field_exception;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_Node::_method_is_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_EnumDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_FnDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_StructDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_TraitDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_TypeAliasDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_FieldDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_UseDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_VarDecl>>() || _match_expr.type_is<jule::Ptr<_228d31971_TypeDecl>>()) {
			_case_begin_5064827264:;
			{
				return true;
			}
		}
		else {
			_case_begin_5064825792:;
			{
				return false;
			}
		}
		_match_end_5064825712:;
	}
}



inline jule::Bool _228d31971_Node::_method_is_comment(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_Comment>>() || _match_expr.type_is<jule::Ptr<_228d31971_CommentGroup>>()) {
			_case_begin_5064843408:;
			{
				return true;
			}
		}
		else {
			_case_begin_5064841936:;
			{
				return false;
			}
		}
		_match_end_5064841856:;
	}
}



inline jule::Bool _228d31971_Node::_method_is_directive(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_Directive>>()) {
			_case_begin_5064846800:;
			{
				return true;
			}
		}
		else {
			_case_begin_5064845328:;
			{
				return false;
			}
		}
		_match_end_5064845248:;
	}
}



inline jule::Bool _228d31971_Node::_method_is_impl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_Impl>>()) {
			_case_begin_5064849808:;
			{
				return true;
			}
		}
		else {
			_case_begin_5064848336:;
			{
				return false;
			}
		}
		_match_end_5064848256:;
	}
}



inline jule::Bool _228d31971_Node::_method_is_use_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_UseDecl>>()) {
			_case_begin_5064852816:;
			{
				return true;
			}
		}
		else {
			_case_begin_5064851344:;
			{
				return false;
			}
		}
		_match_end_5064851264:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d6ecab_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _229d70d33_BinopSolver::_method_check_type_compatibility(void) {
	return (*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*this)._field_l))._field_kind,(*((*this)._field_r))._field_kind,(*this)._field_op);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_nil(void) {
	if ((!((*((*((*this)._field_r))._field_kind))._method_nil_compatible()))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076377008:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076369488:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
				return nullptr;
			}
		}
		_match_end_5076373616:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_enum(void) {
	jule::Ptr<_1e56be485_Enum> _376817_enm = (*((*((*this)._field_l))._field_kind))._method_enm();
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076381600:;
			{
				jule::Ptr<_229d681e3_TypeKind> _377221_rkind = (*((*this)._field_r))._field_kind;
				if ((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr) {
					_377221_rkind=(*((*((*((*((*this)._field_r))._field_kind))._method_enm()))._field_kind))._field_kind;
				}
				if ((!((*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*(_376817_enm))._field_kind))._field_kind,_377221_rkind,(*this)._field_op)))) {
					return nullptr;
				}
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		_match_end_5076381520:;
	}
	if (((*((*((*this)._field_r))._field_kind))._method_enm() == nullptr) || (_376817_enm != (*((*((*this)._field_r))._field_kind))._method_enm())) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_376817_enm))._field_ident),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_5076400336:;
			{
				if ((!(_1e860322e_is_num((*((*((*(_376817_enm))._field_kind))._field_kind))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_376817_enm))._field_ident)}));
					return nullptr;
				}
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1)) {
			_case_begin_5076400496:;
			{
				if (((*((*((*(_376817_enm))._field_kind))._field_kind))._method_prim() == nullptr) || (!(_1e860322e_is_int((*((*((*((*(_376817_enm))._field_kind))._field_kind))._method_prim()))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_376817_enm))._field_ident)}));
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5076392016:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_376817_enm))._field_ident)}));
				return nullptr;
			}
		}
		_match_end_5076382880:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_sptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076420864:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076416464:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076416928:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_5076428080:;
			{
				if ((!((*this)._method_check_type_compatibility()))) {
					return nullptr;
				}
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1)) {
			_case_begin_5076428288:;
			{
				if ((*((*((*this)._field_l))._field_kind))._method_ptr() == nullptr) {
					std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				}
				if ((*((*((*((*this)._field_l))._field_kind))._method_ptr()))._method_is_unsafe()) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				}
				if ((!(_229d70d33_is_ptr_arithmetic_compatible_int((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("type @ is incompatible to use for pointer arithmetic", 52),jule::Slice<jule::Any>({jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5076422016:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076423824:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076450576:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076446208:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076446640:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076458832:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076454528:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076453536:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076467088:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076462784:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076461792:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_struct(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076475344:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076471040:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076470048:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076483760:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076479296:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076479776:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_any(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076490176:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076484880:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
				return nullptr;
			}
		}
		_match_end_5076486688:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("&&", 2) || _match_expr == jule::Str("||", 2)) {
			_case_begin_5076498432:;
			{
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5076494128:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_5076493136:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_str(void) {
	jule::Str _401117_rk = (*((*((*this)._field_r))._field_kind))._method_to_str();
	if (_401117_rk != jule::Str("str", 3)) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_401117_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1)) {
			_case_begin_5076508032:;
			{
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_5076509040:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		else {
			_case_begin_5076502560:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("str", 3))}));
				return nullptr;
			}
		}
		_match_end_5076505840:;
	}
}



inline void _229d70d33_BinopSolver::_method_set_type_to_greater(void) {
	if ((*((*this)._field_l))._method_is_const()) {
		if ((!((*((*this)._field_r))._method_is_const()))) {
			(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
			return;
		}
		if (_1e85717c9_is_greater((*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind,(*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind)) {
			(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
		}
		return;
	}
	if ((*((*this)._field_r))._method_is_const()) {
		return;
	}
	if (_1e85717c9_is_greater((*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind,(*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind)) {
		(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
	}
}



inline void _229d70d33_BinopSolver::_method_check_mod_data(jule::Ptr<_229d70d33_Data>& _405538_d) {
	if ((!((*(_405538_d))._method_is_const()))) {
		if (((*((*(_405538_d))._field_kind))._method_prim() == nullptr) || (!(_1e860322e_is_int((*((*((*(_405538_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
		}
		return;
	}
	{
		
		if (_1e58b019d_sig_assignable(jule::Str("i64", 3),_405538_d)) {
			_case_begin_5076533680:;
			{
				(*((*(_405538_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_405538_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1e58b019d_unsig_assignable(jule::Str("u64", 3),_405538_d)) {
			_case_begin_5076533216:;
			{
				(*((*(_405538_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_405538_d))._field_constant))._method_as_u64()));
			}
		}
		else {
			_case_begin_5076532912:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
			}
		}
		_match_end_5076527344:;
	}
}



inline void _229d70d33_BinopSolver::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Bool _229d70d33_BinopSolver::_method_numbers_are_compatibile(jule::Str& _408039_lk,jule::Str& _408049_rk) {
	if ((!(_1e860322e_is_num(_408049_rk)))) {
		return false;
	}
	if ((*((*this)._field_l))._method_is_const()) {
		return true;
	}
	if (_408039_lk == jule::Str("f32", 3)) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return _408049_rk == jule::Str("f32", 3);
	}
	if (_408039_lk == jule::Str("f64", 3)) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return _408049_rk == jule::Str("f64", 3);
	}
	if ((*((*this)._field_r))._method_is_const()) {
		{
			auto &_match_expr{ (*((*this)._field_r))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1e5870218_RuneExprModel>>() || _match_expr.type_is<jule::Ptr<_1e856e8a4_Const>>()) {
				_case_begin_5076554240:;
				{
					if (_1e860322e_is_sig_int(_408039_lk)) {
						return _1e58b019d_int_assignable(jule::Str("int", 3),(*this)._field_r);
					}
					return _1e58b019d_int_assignable(jule::Str("uint", 4),(*this)._field_r);
				}
			}
			_match_end_5076554048:;
		}
	}
	return _1e860322e_is_sig_int(_408039_lk) == _1e860322e_is_sig_int(_408049_rk);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_float(void) {
	jule::Str _411913_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _412013_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	if ((!((*this)._method_numbers_are_compatibile(_411913_lk,_412013_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_411913_lk),jule::Any(_412013_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_5076563552:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		_match_end_5076566912:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1)) {
			_case_begin_5076572608:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_5076572704:;
			{
				if ((!(_1e860322e_is_int(_412013_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_411913_lk),jule::Any(_412013_rk)}));
					return nullptr;
				}
				(*this)._method_mod();
				return (*this)._field_r;
			}
		}
		else {
			_case_begin_5076567008:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076570080:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_int(void) {
	jule::Str _416513_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _416613_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_5076583840:;
			{
				if ((!(_1e860322e_is_int(_416513_lk))) || (!(_1e860322e_is_int(_416613_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_416513_lk),jule::Any(_416613_rk)}));
					return nullptr;
				}
				if ((!(_229d70d33_is_ok_for_shifting((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				if ((*((*this)._field_l))._method_is_const() && (!((*((*this)._field_r))._method_is_const()))) {
					(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
				}
				return (*this)._field_l;
			}
		}
		_match_end_5076583760:;
	}
	if ((!((*this)._method_numbers_are_compatibile(_416513_lk,_416613_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_416513_lk),jule::Any(_416613_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_5076594784:;
			{
				return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
			}
		}
		_match_end_5076597408:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_5076604144:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_5076604304:;
			{
				(*this)._method_mod();
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_5076602080:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_5076600992:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval_prim(void) {
	jule::Ptr<_229d681e3_Prim> _423113_prim = (*((*((*this)._field_l))._field_kind))._method_prim();
	{
		
		if ((*(_423113_prim))._method_is_bool()) {
			_case_begin_5076611792:;
			{
				return (*this)._method_eval_bool();
			}
		}
		else if ((*(_423113_prim))._method_is_str()) {
			_case_begin_5076611904:;
			{
				return (*this)._method_eval_str();
			}
		}
		_match_end_5076611632:;
	}
	if ((*((*((*this)._field_r))._field_kind))._method_prim() == nullptr) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_423113_prim))._method_to_str()),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		
		if (_1e860322e_is_float((*(_423113_prim))._field_kind)) {
			_case_begin_5076621600:;
			{
				return (*this)._method_eval_float();
			}
		}
		else if (_1e860322e_is_int((*(_423113_prim))._field_kind)) {
			_case_begin_5076621760:;
			{
				return (*this)._method_eval_int();
			}
		}
		else {
			_case_begin_5076619984:;
			{
				return nullptr;
			}
		}
		_match_end_5076616080:;
	}
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_eval(void) {
	{
		
		if ((*((*((*this)._field_l))._field_kind))._method_void()) {
			_case_begin_5076627056:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
				return nullptr;
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_r))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5076627264:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5076627360;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_l))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5076627360:;
			{
				return (*this)._method_eval_any();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_is_nil()) {
			_case_begin_5076625984:;
			{
				return (*this)._method_eval_nil();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr) {
			_case_begin_5076626080:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5076626176;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_enm() != nullptr) {
			_case_begin_5076626176:;
			{
				return (*this)._method_eval_enum();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_sptr() != nullptr) {
			_case_begin_5076626272:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5076627488;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_sptr() != nullptr) {
			_case_begin_5076627488:;
			{
				return (*this)._method_eval_sptr();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5076627584:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5076627680;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5076627680:;
			{
				return (*this)._method_eval_ptr();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_arr() != nullptr) {
			_case_begin_5076627776:;
			{
				return (*this)._method_eval_arr();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_slc() != nullptr) {
			_case_begin_5076627872:;
			{
				return (*this)._method_eval_slc();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_fnc() != nullptr) {
			_case_begin_5076627968:;
			{
				return (*this)._method_eval_fn();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_trt() != nullptr) {
			_case_begin_5076628064:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_5076628160;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_trt() != nullptr) {
			_case_begin_5076628160:;
			{
				return (*this)._method_eval_trait();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_strct() != nullptr) {
			_case_begin_5076628272:;
			{
				return (*this)._method_eval_struct();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr) {
			_case_begin_5076628384:;
			{
				return (*this)._method_eval_prim();
			}
		}
		else {
			_case_begin_5076625680:;
			{
				return nullptr;
			}
		}
		_match_end_5076625504:;
	}
}



inline void _229d70d33_BinopSolver::_method_solve_const(jule::Ptr<_229d70d33_Data>& _430935_d) {
	{
		
		if (_430935_d == nullptr) {
			_case_begin_5076673920:;
			{
				return;
			}
		}
		else if ((!((*((*this)._field_l))._method_is_const())) || (!((*((*this)._field_r))._method_is_const()))) {
			_case_begin_5076674032:;
			{
				(*(_430935_d))._field_constant=nullptr;
				return;
			}
		}
		_match_end_5076673696:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_5076678752:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_5076675664:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((!((*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))))));
			}
		}
		else if (_match_expr == jule::Str("::", 2)) {
			_case_begin_5076677344:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_or((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_5076677440:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_and((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">", 1)) {
			_case_begin_5076678848:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_gt((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_5076678944:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_lt((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_5076679040:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_gt((*((*((*this)._field_r))._field_constant))) || (*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_5076679136:;
			{
				(*(_430935_d))._field_constant=_1e856e8a4_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_lt((*((*((*this)._field_r))._field_constant))) || (*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_5076679232:;
			{
				(*((*((*this)._field_l))._field_constant))._method_add((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_5076679328:;
			{
				(*((*((*this)._field_l))._field_constant))._method_sub((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5076679440:;
			{
				(*((*((*this)._field_l))._field_constant))._method_mul((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_5076679552:;
			{
				jule::Bool _436217_ok = (*((*((*this)._field_l))._field_constant))._method_div((*((*((*this)._field_r))._field_constant)));
				if ((!(_436217_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_5076679664:;
			{
				jule::Bool _436917_ok = (*((*((*this)._field_l))._field_constant))._method_mod((*((*((*this)._field_r))._field_constant)));
				if ((!(_436917_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_5076679776:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_or((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_5076679888:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_and((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_5076680000:;
			{
				(*((*((*this)._field_l))._field_constant))._method_xor((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_5076680112:;
			{
				(*((*((*this)._field_l))._field_constant))._method_lshift((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_5076680224:;
			{
				(*((*((*this)._field_l))._field_constant))._method_rshift((*((*((*this)._field_r))._field_constant)));
				(*(_430935_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		_match_end_5076678672:;
	}
	(*(_430935_d))._field_model=jule::Any((*(_430935_d))._field_constant);
}



inline void _229d70d33_BinopSolver::_method_post_const(jule::Ptr<_229d70d33_Data>& _439930_d) {
	if ((!((*(_439930_d))._method_is_const()))) {
		return;
	}
	_229d70d33_normalize_bitsize(_439930_d);
	_229d70d33_fit_type(_439930_d);
}



inline void _229d70d33_BinopSolver::_method_check_data(jule::Ptr<_229d70d33_Data>& _440734_d) {
	jule::Ptr<_229b6ebcb_FnIns> _440813_f = (*((*(_440734_d))._field_kind))._method_fnc();
	if (((_440813_f != nullptr) && ((*(_440813_f))._field_decl != nullptr)) && (*((*(_440813_f))._field_decl))._method_is_method()) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>());
	}
}



inline void _229d70d33_BinopSolver::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline void _229d70d33_BinopSolver::_method_set_model(jule::Ptr<_229d70d33_Data>& _441933_d) {
	if ((*(_441933_d))._method_is_const()) {
		return;
	}
	jule::Ptr<_229d70d33_Data> _442418_l = (*this)._field_l;
	jule::Ptr<_229d70d33_Data> _442425_r = (*this)._field_r;
	std::tie(_442418_l,_442425_r) = std::make_tuple((*this)._field_l,(*this)._field_r);
	if ((!((*(_442418_l))._method_good_operand(_442425_r)))) {
		std::tie(_442418_l,_442425_r) = std::make_tuple(_442425_r,_442418_l);
	}
	(*(_441933_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BinopExprModel>(new( std::nothrow ) _1e5870218_BinopExprModel((*(_442418_l))._field_model,(*(_442425_r))._field_model,(*this)._field_op)));
}



inline void _229d70d33_BinopSolver::_method_post_eval(jule::Ptr<_229d70d33_Data>& _443633_d) {
	(*this)._method_post_const(_443633_d);
	(*(_443633_d))._field_lvalue=false;
	(*this)._method_set_model(_443633_d);
	(*((*this)._field_e))._method_apply_numeric_prefix(_443633_d);
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_solve_explicit(jule::Ptr<_229d70d33_Data>& _444538_l,jule::Ptr<_229d70d33_Data>& _444553_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_444538_l,_444553_r);
	(*this)._method_check_datas();
	jule::Ptr<_229d70d33_Data> _445017_d = (*this)._method_eval();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_444538_l,_444553_r);
	(*this)._method_solve_const(_445017_d);
	if (_445017_d != nullptr) {
		(*this)._method_post_eval(_445017_d);
	}
	return _445017_d;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_BinopSolver::_method_solve(jule::Ptr<_228d31971_BinopExpr>& _446329_op) {
	if ((*(_446329_op))._field_op._field_kind == jule::Str("=", 1)) {
		(*((*this)._field_e))._method_push_err((*(_446329_op))._field_op,jule::Str("assignments not available for expressions", 41),jule::Slice<jule::Any>());
		(*((*this)._field_e))._method_push_suggestion(jule::Str("use clear imperative approach, comes relevant assignment statement before the expression", 88),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _447017_l = (*((*this)._field_e))._method_eval_expr_kind((*(_446329_op))._field_left);
	if ((_447017_l == nullptr) || ((*(_447017_l))._field_kind == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _447517_r = (*((*this)._field_e))._method_eval_expr_kind((*(_446329_op))._field_right);
	if ((_447517_r == nullptr) || ((*(_447517_r))._field_kind == nullptr)) {
		return nullptr;
	}
	(*this)._field_op=(*(_446329_op))._field_op;
	jule::Ptr<_229d70d33_Data> _448217_d = (*this)._method_solve_explicit(_447017_l,_447517_r);
	if (((_448217_d != nullptr) && (*(_447017_l))._field_is_rune) && (*(_447517_r))._field_is_rune) {
		(*(_448217_d))._field_is_rune=true;
	}
	return _448217_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d70d33_BinopSolver &_Src) {
	_Stream << "BinopSolver{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_BraceLit::_method_is_empty(void) {
	return (*this)._field_exprs.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _229b5076c_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _229b5076c_Trait::_method_equals(jule::Ptr<_229d681e3_TypeKind> _2522_other) {
	jule::Ptr<_229b5076c_Trait> _2613_trt = (*(_2522_other))._method_trt();
	return this->self == _2613_trt;
}



inline jule::Bool _229b5076c_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == 0LLU;
}



inline jule::Ptr<_229b6ebcb_Fn> _229b5076c_Trait::_method_find_method(jule::Str _3734_ident) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_5071031408:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _229b5076c_f = *it;
			{
				if ((*(_229b5076c_f))._field_ident == _3734_ident) {
					return _229b5076c_f;
				}
			}
			_iter_next_5071031408:;
			++it;
			goto _iter_begin_5071031408;
		}
		_iter_end_5071031408:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _229b5076c_Trait &_Src) {
	_Stream << "Trait{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "implemented:" << _Src._field_implemented;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1e56be485_EnumItem::_method_auto_expr(void) {
	return (*this)._field_value == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56be485_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1e56be485_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1e56be485_Enum::_method_equals(jule::Ptr<_229d681e3_TypeKind> _3522_other) {
	jule::Ptr<_1e56be485_Enum> _3613_enm = (*(_3522_other))._method_enm();
	return this->self == _3613_enm;
}



inline jule::Ptr<_1e56be485_EnumItem> _1e56be485_Enum::_method_find_item(jule::Str _4432_ident) {
	{
		auto &expr = (*this)._field_items;
		auto it = expr.begin();
		_iter_begin_5071043408:;
		if (it != expr.end()) {
			jule::Ptr<_1e56be485_EnumItem> _1e56be485_item = *it;
			{
				if ((*(_1e56be485_item))._field_ident == _4432_ident) {
					return _1e56be485_item;
				}
			}
			_iter_next_5071043408:;
			++it;
			goto _iter_begin_5071043408;
		}
		_iter_end_5071043408:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56be485_Enum &_Src) {
	_Stream << "Enum{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc:" << _Src._field_doc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_SliceExpr::_method_is_empty(void) {
	return (*this)._field_elems.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_TernaryExpr &_Src) {
	_Stream << "TernaryExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline void _229d681e3_TypeChecker::_method_push_err(_228d7aadb_Token _69827_token,jule::Str _69841_fmt,jule::Slice<jule::Any> _69854_args) {
	(*((*this)._field_s))._method_push_err(_69827_token,_69841_fmt,_69854_args);
}



inline void _229d681e3_TypeChecker::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _229d681e3_TypeChecker::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Ptr<_229d681e3_Prim> _229d681e3_TypeChecker::_method_build_prim(jule::Ptr<_228d31971_IdentTypeDecl>& _70530_decl) {
	if ((!(_229d681e3_is_prim((*(_70530_decl))._field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((*(_70530_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_70530_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_70530_decl))._field_ident)}));
		return nullptr;
	}
	return _229d681e3_build_prim_type((*(_70530_decl))._field_ident);
}



inline void _229d681e3_TypeChecker::_method_push_cycle_error(jule::Any _71931_def1,jule::Any _71942_def2,jule::Str& _71958_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _72213_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _72229_def) mutable -> jule::Str {
		{
			auto &_match_expr{ _72229_def };
			
			if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeAlias>>()) {
				_case_begin_5077031984:;
				{
					return (*(_72229_def.operator jule::Ptr<_229d681e3_TypeAlias>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
				_case_begin_5077031728:;
				{
					return (*(_72229_def.operator jule::Ptr<_228e0d025_Struct>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1e56be485_Enum>>()) {
				_case_begin_5077031824:;
				{
					return (*(_72229_def.operator jule::Ptr<_1e56be485_Enum>()))._field_ident;
				}
			}
			else {
				_case_begin_5077030800:;
				{
					return jule::Str();
				}
			}
			_match_end_5077030608:;
		}
	});
	jule::Str _73113_def1_ident = _72213_get_ident(_71931_def1);
	jule::Str _73213_def2_ident = _72213_get_ident(_71942_def2);
	jule::Str _73313_refers_to = _2276bcb9e_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_73113_def1_ident),jule::Any(_73213_def2_ident)}));
	_71958_message=((_228d6ecab_str_repeat(jule::Str(" ", 1),4LL) + _73313_refers_to) + jule::Str("\n", 1)) + _71958_message;
}



inline jule::Bool _229d681e3_TypeChecker::_method_check_cross_cycle(jule::Any _73732_decl,jule::Str& _73748_message) {
	{
		auto &_match_expr{ _73732_decl };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeAlias>>()) {
			_case_begin_5077042400:;
			{
				jule::Ptr<_229d681e3_TypeAlias> _74017_ta = _73732_decl.operator jule::Ptr<_229d681e3_TypeAlias>();
				{
					auto &expr = (*(_74017_ta))._field_refers;
					auto it = expr.begin();
					_iter_begin_5077045424:;
					if (it != expr.end()) {
						jule::Any &_229d681e3_d = *it;
						{
							if (_229d681e3_d == (*((*this)._field_referencer))._field_owner) {
								(*this)._method_push_cycle_error(jule::Any(_74017_ta),_229d681e3_d,_73748_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(_229d681e3_d,_73748_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_74017_ta),_229d681e3_d,_73748_message);
								return false;
							}
						}
						_iter_next_5077045424:;
						++it;
						goto _iter_begin_5077045424;
					}
					_iter_end_5077045424:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5077042512:;
			{
				jule::Ptr<_228e0d025_Struct> _75417_s = _73732_decl.operator jule::Ptr<_228e0d025_Struct>();
				{
					auto &expr = (*(_75417_s))._field_depends;
					auto it = expr.begin();
					_iter_begin_5077052464:;
					if (it != expr.end()) {
						jule::Ptr<_228e0d025_Struct> &_229d681e3_d = *it;
						{
							if ((*((*this)._field_referencer))._field_owner == _229d681e3_d) {
								(*this)._method_push_cycle_error(jule::Any(_75417_s),jule::Any(_229d681e3_d),_73748_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(jule::Any(_229d681e3_d),_73748_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_75417_s),jule::Any(_229d681e3_d),_73748_message);
								return false;
							}
						}
						_iter_next_5077052464:;
						++it;
						goto _iter_begin_5077052464;
					}
					_iter_end_5077052464:;
				}
			}
		}
		_match_end_5077042192:;
	}
	return true;
}



inline jule::Bool _229d681e3_TypeChecker::_method_check_illegal_cycles(jule::Ptr<_228d31971_IdentTypeDecl>& _77540_ident,jule::Any _77567_decl) {
	jule::Bool _77580_ok = jule::Bool();
	if ((*this)._field_referencer == nullptr) {
		_77580_ok = true;
		return _77580_ok;
	}
	{
		auto &_match_expr{ _77567_decl };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5077061680:;
			{
				if ((*this)._field_not_plain) {
					_77580_ok = true;
					return _77580_ok;
				}
			}
		}
		_match_end_5077062016:;
	}
	if (_77567_decl == (*((*this)._field_referencer))._field_owner) {
		(*this)._method_push_err((*(_77540_ident))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_referencer))._field_ident)}));
		_77580_ok = false;
		return _77580_ok;
	}
	jule::Str _79417_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_77567_decl,_79417_message)))) {
		jule::Str _79721_err_msg = _79417_message;
		_79417_message=jule::Str();
		(*this)._method_push_cycle_error((*((*this)._field_referencer))._field_owner,_77567_decl,_79417_message);
		_79721_err_msg=_79721_err_msg + _79417_message;
		(*this)._method_push_err((*(_77540_ident))._field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_79721_err_msg)}));
		_77580_ok = false;
		return _77580_ok;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeAlias>>()) {
			_case_begin_5077067632:;
			{
				{
					(*((*((*this)._field_referencer))._field_refs))=jule::append((*((*((*this)._field_referencer))._field_refs)),jule::Slice<jule::Any>({_77567_decl}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5077067728:;
			{
				{
					auto &_match_expr{ _77567_decl };
					
					if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
						_case_begin_5077074320:;
						{
							jule::Ptr<_228e0d025_Struct> _81225_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_228e0d025_Struct>();
							(*(_81225_s))._field_depends = jule::alloc_for_append((*(_81225_s))._field_depends,1);(*(_81225_s))._field_depends.push(_77567_decl.operator jule::Ptr<_228e0d025_Struct>());
						}
					}
					_match_end_5077074096:;
				}
			}
		}
		_match_end_5077073120:;
	}
	_77580_ok = true;
	return _77580_ok;
}



inline jule::Trait<_229d681e3_Kind> _229d681e3_TypeChecker::_method_from_type_alias(jule::Ptr<_228d31971_IdentTypeDecl>& _82035_decl,jule::Ptr<_229d681e3_TypeAlias>& _82062_ta) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_82062_ta))._field_public,(*(_82062_ta))._field_token)))) {
		(*this)._method_push_err((*(_82035_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_82035_decl))._field_ident)}));
		return nullptr;
	}
	(*(_82062_ta))._field_used=true;
	if ((*(_82035_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_82035_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_82035_decl))._field_ident)}));
		return nullptr;
	}
	jule::Bool _83317_ok = (*this)._method_check_illegal_cycles(_82035_decl,jule::Any(_82062_ta));
	if ((!(_83317_ok))) {
		return nullptr;
	}
	_83317_ok=(*((*this)._field_s))._method_check_type_alias_decl_kind(_82062_ta,(*this)._field_lookup);
	if ((!(_83317_ok))) {
		return nullptr;
	}
	return jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind((((*(_82062_ta))._field_cpp_linked) ? ((*(_82062_ta))._field_ident) : ((*((*((*(_82062_ta))._field_kind))._field_kind))._field_cpp_ident)),(*(_82062_ta))._field_generic,jule::Bool(),(*((*((*(_82062_ta))._field_kind))._field_kind))._field_kind));
}



inline jule::Ptr<_1e56be485_Enum> _229d681e3_TypeChecker::_method_from_enum(jule::Ptr<_228d31971_IdentTypeDecl>& _85129_decl,jule::Ptr<_1e56be485_Enum>& _85156_e) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_85156_e))._field_public,(*(_85156_e))._field_token)))) {
		(*this)._method_push_err((*(_85129_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_85129_decl))._field_ident)}));
		return nullptr;
	}
	if ((*(_85129_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_85129_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_85129_decl))._field_ident)}));
		return nullptr;
	}
	return _85156_e;
}



inline jule::Bool _229d681e3_TypeChecker::_method_check_struct_ins(jule::Ptr<_228e0d025_StructIns>& _86540_ins,_228d7aadb_Token& _86558_error_token) {
	jule::Bool _86580_ok = jule::Bool();
	if ((*(_86540_ins))._field_checked) {
		_86580_ok = true;
		return _86580_ok;
	}
	(*(_86540_ins))._field_checked=true;
	if (((*this)._field_referencer != nullptr) && ((*((*this)._field_referencer))._field_owner == (*(_86540_ins))._field_decl)) {
		_86580_ok = true;
		return _86580_ok;
	}
	jule::Ptr<_229d56533_SymbolTable> _87617_old_file = (*((*this)._field_s))._field_file;
	__JULE_DEFER({
		(*((*this)._field_s))._method_set_current_file(_87617_old_file);
	});
	jule::Ptr<_229d56533_SymbolTable> _87917_file = _1e538b460_find_file((*((*this)._field_s))._field_files,(*((*(_86540_ins))._field_decl))._field_token._field_file);
	if (_87917_file != nullptr) {
		(*((*this)._field_s))._method_set_current_file(_87917_file);
	}
	jule::Ptr<_229d681e3_Referencer> _88417_referencer = jule::new_struct<_229d681e3_Referencer>(new( std::nothrow ) _229d681e3_Referencer((*((*(_86540_ins))._field_decl))._field_ident,jule::Any((*(_86540_ins))._field_decl),nullptr));
	jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _88917_generics = jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>::alloc(0LL,static_cast<jule::I64>((*(_86540_ins))._field_generics.len()));
	{
		auto &expr = (*(_86540_ins))._field_generics;
		auto it = expr.begin();
		_iter_begin_5077124496:;
		if (it != expr.end()) {
			jule::Int _229d681e3_i = it - expr.begin();
			jule::Ptr<_229d681e3_TypeKind> _229d681e3_g = *it;
			{
				_88917_generics.push(jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias(jule::Ptr<_228d31971_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_228d7aadb_Token(),(*((*((*(_86540_ins))._field_decl))._field_generics[_229d681e3_i]))._field_ident,jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),_229d681e3_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_5077124496:;
			++it;
			_229d681e3_i++;
			goto _iter_begin_5077124496;
		}
		_iter_end_5077124496:;
	}
	jule::Ptr<_229d56533_SymbolTable> _89917_old_sema_file = (*((*((*(_86540_ins))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_86540_ins))._field_decl))._field_sema))._method_set_current_file(_89917_old_sema_file);
	});
	_229d681e3_TypeChecker _90217_tc = _229d681e3_TypeChecker((*((*(_86540_ins))._field_decl))._field_sema,(*((*(_86540_ins))._field_decl))._field_sema,_88417_referencer,_228d7aadb_Token(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),_88917_generics,jule::Bool(),jule::Bool(),jule::Bool());
	{
		auto &expr = (*(_86540_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_5077135360:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_FieldIns> _229d681e3_field = *it;
			{
				jule::Ptr<_229d681e3_TypeKind> _91121_kind = _90217_tc._method_check_decl((*((*((*(_229d681e3_field))._field_decl))._field_kind))._field_decl);
				_86580_ok=_91121_kind != nullptr;
				if ((((*((*(_86540_ins))._field_decl))._field_sema != nullptr) && ((*this)._field_s != (*((*(_86540_ins))._field_decl))._field_sema)) && ((*((*((*(_86540_ins))._field_decl))._field_sema))._field_errors.len() > 0LL)) {
					(*((*this)._field_s))._field_errors=jule::append((*((*this)._field_s))._field_errors,(*((*((*(_86540_ins))._field_decl))._field_sema))._field_errors);
					(*((*((*(_86540_ins))._field_decl))._field_sema))._field_errors=nullptr;
				}
				if ((!(_86580_ok))) {
					_86580_ok = false;
					return _86580_ok;
				}
				(*(_229d681e3_field))._field_kind=_91121_kind;
				if ((*((*(_229d681e3_field))._field_kind))._method_mutable()) {
					(*(_86540_ins))._field_mutable=true;
					(*((*this)._field_s))._method_check_struct_ins_derive_clone(_86540_ins);
				}
			}
			_iter_next_5077135360:;
			++it;
			goto _iter_begin_5077135360;
		}
		_iter_end_5077135360:;
	}
	if ((*(_86540_ins))._field_generics.len() > 0LL) {
		(*((*this)._field_s))._method_check_field_defaults(_86540_ins);
		{
			auto &expr = (*(_86540_ins))._field_methods;
			auto it = expr.begin();
			_iter_begin_5077151440:;
			if (it != expr.end()) {
				jule::Ptr<_229b6ebcb_Fn> _229d681e3_m = *it;
				{
					(*((*this)._field_s))._method_check_type_method(_86540_ins,_229d681e3_m);
				}
				_iter_next_5077151440:;
				++it;
				goto _iter_begin_5077151440;
			}
			_iter_end_5077151440:;
		}
	}
	_86580_ok = true;
	return _86580_ok;
}



inline void _229d681e3_TypeChecker::_method_append_used_struct_reference(jule::Ptr<_228e0d025_Struct>& _94052_s) {
	if ((*this)._field_referencer == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5077155504:;
			{
				jule::Ptr<_228e0d025_Struct> _94721_ref_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_228e0d025_Struct>();
				if ((!((*(_94721_ref_s))._method_is_uses(_94052_s)))) {
					(*(_94721_ref_s))._field_uses = jule::alloc_for_append((*(_94721_ref_s))._field_uses,1);(*(_94721_ref_s))._field_uses.push(_94052_s);
				}
			}
		}
		_match_end_5077155424:;
	}
}



inline jule::Ptr<_228e0d025_StructIns> _229d681e3_TypeChecker::_method_from_struct(jule::Ptr<_228d31971_IdentTypeDecl>& _95435_decl,jule::Ptr<_228e0d025_Struct>& _95462_s) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_95462_s))._field_public,(*(_95462_s))._field_token)))) {
		(*this)._method_push_err((*(_95435_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_95435_decl))._field_ident)}));
		return nullptr;
	}
	if ((*this)._field_selection) {
		if ((*(_95435_decl))._field_generics.len() > 0LL) {
			(*this)._method_push_err((*(_95435_decl))._field_token,jule::Str("generics are not allowed in this scope", 38),jule::Slice<jule::Any>());
			return nullptr;
		}
		return jule::new_struct_ptr<_228e0d025_StructIns>(new( std::nothrow ) _228e0d025_StructIns(jule::Bool(),_95462_s,jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_228e0d025_FieldIns>>(),jule::Slice<jule::Ptr<_229b6ebcb_Fn>>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>()));
	}
	if ((*this)._field_ignore_generics.len() > 0LL) {
		return nullptr;
	}
	jule::Bool _97817_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_95435_decl,jule::Any(_95462_s));
	if ((!(_97817_ok))) {
		return nullptr;
	}
	(*this)._method_append_used_struct_reference(_95462_s);
	jule::Ptr<_228e0d025_StructIns> _98417_ins = (*(_95462_s))._method_instance();
	(*(_98417_ins))._field_generics=jule::Slice<jule::Ptr<_229d681e3_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_95435_decl))._field_generics.len()));
	jule::Ptr<_229d681e3_Referencer> _98617_referencer = (*this)._field_referencer;
	(*this)._field_referencer=nullptr;
	{
		auto &expr = (*(_95435_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_5077178912:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_TypeDecl> _229d681e3_g = *it;
			{
				jule::Ptr<_229d681e3_TypeKind> _98921_kind = (*this)._method_build((*(_229d681e3_g))._field_kind);
				if (_98921_kind == nullptr) {
					_97817_ok=false;
					goto _iter_next_5077178912;
				}
				(*(_98417_ins))._field_generics = jule::alloc_for_append((*(_98417_ins))._field_generics,1);(*(_98417_ins))._field_generics.push(_98921_kind);
			}
			_iter_next_5077178912:;
			++it;
			goto _iter_begin_5077178912;
		}
		_iter_end_5077178912:;
	}
	(*this)._field_referencer=_98617_referencer;
	if ((!(_97817_ok))) {
		return nullptr;
	}
	_97817_ok=(*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_98417_ins))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_98417_ins))._field_generics.len()),(*(_95435_decl))._field_token);
	if ((!(_97817_ok))) {
		return nullptr;
	}
	jule::Ptr<_228e0d025_StructIns> _100817_exist_instance = (*(_95462_s))._method_append_instance(_98417_ins);
	if (_100817_exist_instance != nullptr) {
		return _100817_exist_instance;
	}
	_97817_ok=(*this)._method_check_struct_ins(_98417_ins,(*(_95435_decl))._field_token);
	if ((!(_97817_ok))) {
		return nullptr;
	}
	return _98417_ins;
}



inline jule::Trait<_229d681e3_Kind> _229d681e3_TypeChecker::_method_get_def(jule::Ptr<_228d31971_IdentTypeDecl>& _102331_decl) {
	{
		auto &expr = (*this)._field_ignore_generics;
		auto it = expr.begin();
		_iter_begin_5077194720:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_GenericDecl> &_229d681e3_g = *it;
			{
				if ((*(_229d681e3_g))._field_ident == (*(_102331_decl))._field_ident) {
					return _229d681e3_build_prim_type((*(_229d681e3_g))._field_ident);
				}
			}
			_iter_next_5077194720:;
			++it;
			goto _iter_begin_5077194720;
		}
		_iter_end_5077194720:;
	}
	{
		auto &expr = (*this)._field_use_generics;
		auto it = expr.begin();
		_iter_begin_5077194608:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeAlias> _229d681e3_g = *it;
			{
				if ((*(_229d681e3_g))._field_ident == (*(_102331_decl))._field_ident) {
					jule::Ptr<_228e0d025_StructIns> _103225_st = (*((*((*(_229d681e3_g))._field_kind))._field_kind))._method_strct();
					if (_103225_st != nullptr) {
						jule::Bool _103425_ok = (*this)._method_check_illegal_cycles(_102331_decl,jule::Any((*(_103225_st))._field_decl));
						if ((!(_103425_ok))) {
							return nullptr;
						}
					}
					return (*((*((*(_229d681e3_g))._field_kind))._field_kind))._field_kind;
				}
			}
			_iter_next_5077194608:;
			++it;
			goto _iter_begin_5077194608;
		}
		_iter_end_5077194608:;
	}
	if ((!((*(_102331_decl))._field_cpp_linked))) {
		jule::Ptr<_1e56be485_Enum> _104421_e = (*this)._field_lookup.get()._method_find_enum((*(_102331_decl))._field_ident);
		if (_104421_e != nullptr) {
			return (*this)._method_from_enum(_102331_decl,_104421_e);
		}
		jule::Ptr<_229b5076c_Trait> _104921_t = (*this)._field_lookup.get()._method_find_trait((*(_102331_decl))._field_ident);
		if ((_104921_t == nullptr) && (!((*this)._field_dis_builtin))) {
			_104921_t=_1e614d809_find_builtin_trait((*(_102331_decl))._field_ident);
		}
		if (_104921_t != nullptr) {
			if ((!((*((*this)._field_s))._method_is_accessible_define((*(_104921_t))._field_public,(*(_104921_t))._field_token)))) {
				(*this)._method_push_err((*(_102331_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_102331_decl))._field_ident)}));
				return nullptr;
			}
			if ((*(_102331_decl))._field_generics.len() > 0LL) {
				(*this)._method_push_err((*(_102331_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_102331_decl))._field_ident)}));
				return nullptr;
			}
			return _104921_t;
		}
	} else if ((*this)._field_selection) {
		(*this)._method_push_err((*(_102331_decl))._field_token,jule::Str("cpp-linked definitions are not allowed in this scope", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_228e0d025_Struct> _107017_s = (*this)._field_lookup.get()._method_find_struct((*(_102331_decl))._field_ident,(*(_102331_decl))._field_cpp_linked);
	if (_107017_s != nullptr) {
		return (*this)._method_from_struct(_102331_decl,_107017_s);
	}
	jule::Ptr<_229d681e3_TypeAlias> _107517_ta = (*this)._field_lookup.get()._method_find_type_alias((*(_102331_decl))._field_ident,(*(_102331_decl))._field_cpp_linked);
	if ((_107517_ta == nullptr) && (!((*this)._field_dis_builtin))) {
		_107517_ta=_1e614d809_find_builtin_type_alias((*(_102331_decl))._field_ident);
	}
	if (_107517_ta != nullptr) {
		return (*this)._method_from_type_alias(_102331_decl,_107517_ta);
	}
	(*this)._method_push_err((*(_102331_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_102331_decl))._field_ident)}));
	return nullptr;
}



inline jule::Trait<_229d681e3_Kind> _229d681e3_TypeChecker::_method_build_ident(jule::Ptr<_228d31971_IdentTypeDecl> _108734_decl) {
	{
		
		if (_229d681e3_is_prim((*(_108734_decl))._field_ident)) {
			_case_begin_5077253328:;
			{
				return (*this)._method_build_prim(_108734_decl);
			}
		}
		else {
			_case_begin_5077251328:;
			{
				return (*this)._method_get_def(_108734_decl);
			}
		}
		_match_end_5077251152:;
	}
}



inline jule::Ptr<_229d681e3_Sptr> _229d681e3_TypeChecker::_method_build_sptr_from_type(jule::Ptr<_229d681e3_TypeKind>& _109444_elem) {
	{
		
		if (_109444_elem == nullptr) {
			_case_begin_5077255600:;
			{
				return nullptr;
			}
		}
		else if ((*(_109444_elem))._method_strct() != nullptr) {
			_case_begin_5077255696:;
			{
				jule::Ptr<_228e0d025_StructIns> _110117_s = (*(_109444_elem))._method_strct();
				if (((*(_110117_s))._field_decl != nullptr) && (*((*(_110117_s))._field_decl))._field_cpp_linked) {
					(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
					return nullptr;
				}
			}
		}
		else if (((*(_109444_elem))._method_arr() != nullptr) && (*((*(_109444_elem))._method_arr()))._field_auto) {
			_case_begin_5077255792:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5077251728:;
	}
	return jule::new_struct_ptr<_229d681e3_Sptr>(new( std::nothrow ) _229d681e3_Sptr(_109444_elem));
}



inline jule::Ptr<_229d681e3_Sptr> _229d681e3_TypeChecker::_method_build_sptr(jule::Ptr<_228d31971_SptrTypeDecl> _111733_decl) {
	jule::Bool _111813_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_111813_not_plain;
	});
	jule::Ptr<_229d681e3_TypeKind> _112217_elem = (*this)._method_check_decl((*(_111733_decl))._field_elem);
	return (*this)._method_build_sptr_from_type(_112217_elem);
}



inline jule::Ptr<_229d681e3_Ptr> _229d681e3_TypeChecker::_method_build_ptr_from_type(jule::Ptr<_229d681e3_TypeKind>& _112643_elem) {
	{
		
		if (_112643_elem == nullptr) {
			_case_begin_5077273168:;
			{
				return nullptr;
			}
		}
		else if (((*(_112643_elem))._method_arr() != nullptr) && (*((*(_112643_elem))._method_arr()))._field_auto) {
			_case_begin_5077273280:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return jule::new_ptr<_229d681e3_Ptr>();
			}
		}
		_match_end_5077272944:;
	}
	return jule::new_struct_ptr<_229d681e3_Ptr>(new( std::nothrow ) _229d681e3_Ptr(_112643_elem));
}



inline jule::Ptr<_229d681e3_Ptr> _229d681e3_TypeChecker::_method_build_ptr(jule::Ptr<_228d31971_PtrTypeDecl> _114232_decl) {
	jule::Bool _114313_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_114313_not_plain;
	});
	jule::Ptr<_229d681e3_TypeKind> _114717_elem = nullptr;
	if ((!((*(_114232_decl))._method_is_unsafe()))) {
		_114717_elem=(*this)._method_check_decl((*(_114232_decl))._field_elem);
		return (*this)._method_build_ptr_from_type(_114717_elem);
	}
	return jule::new_struct_ptr<_229d681e3_Ptr>(new( std::nothrow ) _229d681e3_Ptr(_114717_elem));
}



inline jule::Ptr<_229d681e3_Slc> _229d681e3_TypeChecker::_method_build_slc(jule::Ptr<_228d31971_SlcTypeDecl> _115932_decl) {
	jule::Bool _116013_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_116013_not_plain;
	});
	jule::Ptr<_229d681e3_TypeKind> _116417_elem = (*this)._method_check_decl((*(_115932_decl))._field_elem);
	{
		
		if (_116417_elem == nullptr) {
			_case_begin_5077291856:;
			{
				return nullptr;
			}
		}
		else if (((*(_116417_elem))._method_arr() != nullptr) && (*((*(_116417_elem))._method_arr()))._field_auto) {
			_case_begin_5077291952:;
			{
				(*this)._method_push_err((*((*(_115932_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5077291728:;
	}
	return jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc(_116417_elem));
}



inline jule::Ptr<_229d681e3_Arr> _229d681e3_TypeChecker::_method_build_arr(jule::Ptr<_228d31971_ArrTypeDecl> _118132_decl) {
	jule::Bool _118213_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_118213_not_plain;
	});
	jule::Int _118617_n = 0LL;
	if ((!((*(_118132_decl))._method_auto_sized()))) {
		jule::Ptr<_229d70d33_Data> _118921_size = (*((*((*this)._field_s))._method_eval((*this)._field_lookup)))._method_eval_expr((*(_118132_decl))._field_size);
		if (_118921_size == nullptr) {
			return nullptr;
		}
		if ((!((*(_118921_size))._method_is_const()))) {
			(*this)._method_push_err((*((*(_118132_decl))._field_size))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
			return nullptr;
		} else if (((*((*(_118921_size))._field_kind))._method_prim() == nullptr) || (!(_1e860322e_is_int((*((*((*(_118921_size))._field_kind))._method_prim()))._field_kind)))) {
			(*this)._method_push_err((*((*(_118132_decl))._field_size))._field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>());
			return nullptr;
		}
		_118617_n=static_cast<jule::Int>(static_cast<jule::Int>((*((*(_118921_size))._field_constant))._method_as_i64()));
		if (_118617_n < 0LL) {
			(*this)._method_push_err((*((*(_118132_decl))._field_elem))._field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	jule::Ptr<_229d681e3_TypeKind> _120917_elem = (*this)._method_check_decl((*(_118132_decl))._field_elem);
	{
		
		if (_120917_elem == nullptr) {
			_case_begin_5077319712:;
			{
				return nullptr;
			}
		}
		else if (((*(_120917_elem))._method_arr() != nullptr) && (*((*(_120917_elem))._method_arr()))._field_auto) {
			_case_begin_5077319808:;
			{
				(*this)._method_push_err((*((*(_118132_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5077319120:;
	}
	return jule::new_struct_ptr<_229d681e3_Arr>(new( std::nothrow ) _229d681e3_Arr((*(_118132_decl))._method_auto_sized(),_118617_n,_120917_elem));
}



inline jule::Ptr<_229d681e3_Map> _229d681e3_TypeChecker::_method_build_map(jule::Ptr<_228d31971_MapTypeDecl> _122832_decl) {
	jule::Bool _122913_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_122913_not_plain;
	});
	jule::Ptr<_229d681e3_TypeKind> _123317_key = (*this)._method_check_decl((*(_122832_decl))._field_key);
	if (_123317_key == nullptr) {
		return nullptr;
	}
	jule::Ptr<_229d681e3_TypeKind> _123817_val = (*this)._method_check_decl((*(_122832_decl))._field_val);
	if (_123817_val == nullptr) {
		return nullptr;
	}
	if ((*(_123817_val))._method_enm() != nullptr) {
		(*this)._method_push_err((*((*(_122832_decl))._field_val))._field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>());
	}
	return jule::new_struct_ptr<_229d681e3_Map>(new( std::nothrow ) _229d681e3_Map(_123317_key,_123817_val));
}



inline jule::Ptr<_229d681e3_Tuple> _229d681e3_TypeChecker::_method_build_tuple(jule::Ptr<_228d31971_TupleTypeDecl> _125234_decl) {
	jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _125317_types = jule::Slice<jule::Ptr<_229d681e3_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_125234_decl))._field_types.len()));
	{
		auto &expr = (*(_125234_decl))._field_types;
		auto it = expr.begin();
		_iter_begin_5077340720:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_TypeDecl> _229d681e3_t = *it;
			{
				jule::Ptr<_229d681e3_TypeKind> _125521_kind = (*this)._method_check_decl(_229d681e3_t);
				if (_125521_kind == nullptr) {
					return nullptr;
				}
				_125317_types.push(_125521_kind);
			}
			_iter_next_5077340720:;
			++it;
			goto _iter_begin_5077340720;
		}
		_iter_end_5077340720:;
	}
	return jule::new_struct_ptr<_229d681e3_Tuple>(new( std::nothrow ) _229d681e3_Tuple(_125317_types));
}



inline jule::Bool _229d681e3_TypeChecker::_method_check_fn_types(jule::Ptr<_229b6ebcb_FnIns>& _126538_f) {
	jule::Bool _126551_ok = jule::Bool();
	{
		auto &expr = (*(_126538_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5077348320:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_ParamIns> _229d681e3_p = *it;
			{
				(*(_229d681e3_p))._field_kind=(*this)._method_build((*((*((*((*(_229d681e3_p))._field_decl))._field_kind))._field_decl))._field_kind);
				_126551_ok=(*(_229d681e3_p))._field_kind != nullptr;
				if ((!(_126551_ok))) {
					_126551_ok = false;
					return _126551_ok;
				}
			}
			_iter_next_5077348320:;
			++it;
			goto _iter_begin_5077348320;
		}
		_iter_end_5077348320:;
	}
	if ((!((*((*(_126538_f))._field_decl))._method_is_void()))) {
		(*(_126538_f))._field_result=(*this)._method_build((*((*((*((*((*(_126538_f))._field_decl))._field_result))._field_kind))._field_decl))._field_kind);
		_126551_ok = (*(_126538_f))._field_result != nullptr;
		return _126551_ok;
	}
	_126551_ok = true;
	return _126551_ok;
}



inline jule::Ptr<_229b6ebcb_FnIns> _229d681e3_TypeChecker::_method_build_fn(jule::Ptr<_228d31971_FnDecl> _128231_decl) {
	if ((*(_128231_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_128231_decl))._field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229b6ebcb_Fn> _128817_f = _228d6ecab_build_fn(_128231_decl);
	jule::Ptr<_229b6ebcb_FnIns> _128917_ins = (*(_128817_f))._method_instance_force();
	(*(_128917_ins))._field_anon=true;
	jule::Bool _129213_ok = (*this)._method_check_fn_types(_128917_ins);
	if ((!(_129213_ok))) {
		return nullptr;
	}
	return _128917_ins;
}



inline jule::Trait<_229d681e3_Kind> _229d681e3_TypeChecker::_method_build_by_namespace(jule::Ptr<_228d31971_NamespaceTypeDecl> _130041_decl) {
	jule::Str _130113_path = _229d681e3_build_link_path_by_tokens((*(_130041_decl))._field_idents);
	jule::Ptr<_1e53308ee_ImportInfo> _130217_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1e53308ee_ImportInfo>)>([=](jule::Ptr<_1e53308ee_ImportInfo> _130253_imp) mutable -> jule::Bool {
		if (((*(_130041_decl))._field_idents.len() == 1LL) && ((*(_130253_imp))._field_alias == _130113_path)) {
			return true;
		}
		return ((*(_130253_imp))._field_link_path == _130113_path) && (*(_130253_imp))._method_is_accessible_via_selection();
	}));
	if ((_130217_imp == nullptr) || (!((*(_130217_imp))._method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err((*(_130041_decl))._field_idents[0LL],jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_130113_path)}));
		return nullptr;
	}
	jule::Trait<_229d94c47_Lookup> _131417_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_130217_imp;
	(*this)._method_disallow_builtin();
	jule::Trait<_229d681e3_Kind> _131817_kind = (*this)._method_build_ident((*(_130041_decl))._field_kind);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_131417_lookup;
	return _131817_kind;
}



inline jule::Ptr<_229d681e3_TypeKind> _229d681e3_TypeChecker::_method_build(jule::Any& _132629_decl_kind) {
	jule::Trait<_229d681e3_Kind> _132717_kind = nullptr;
	{
		auto &_match_expr{ _132629_decl_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeKind>>()) {
			_case_begin_5077385872:;
			{
				_132717_kind=_132629_decl_kind.operator jule::Ptr<_229d681e3_TypeKind>();
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_IdentTypeDecl>>()) {
			_case_begin_5077386768:;
			{
				jule::Trait<_229d681e3_Kind> _133421_t = (*this)._method_build_ident(_132629_decl_kind.operator jule::Ptr<_228d31971_IdentTypeDecl>());
				if (_133421_t != nullptr) {
					_132717_kind=_133421_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_SptrTypeDecl>>()) {
			_case_begin_5077386864:;
			{
				jule::Ptr<_229d681e3_Sptr> _134021_t = (*this)._method_build_sptr(_132629_decl_kind.operator jule::Ptr<_228d31971_SptrTypeDecl>());
				if (_134021_t != nullptr) {
					_132717_kind=_134021_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_PtrTypeDecl>>()) {
			_case_begin_5077386960:;
			{
				jule::Ptr<_229d681e3_Ptr> _134621_t = (*this)._method_build_ptr(_132629_decl_kind.operator jule::Ptr<_228d31971_PtrTypeDecl>());
				if (_134621_t != nullptr) {
					_132717_kind=_134621_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_SlcTypeDecl>>()) {
			_case_begin_5077387056:;
			{
				jule::Ptr<_229d681e3_Slc> _135221_t = (*this)._method_build_slc(_132629_decl_kind.operator jule::Ptr<_228d31971_SlcTypeDecl>());
				if (_135221_t != nullptr) {
					_132717_kind=_135221_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_ArrTypeDecl>>()) {
			_case_begin_5077388464:;
			{
				jule::Ptr<_229d681e3_Arr> _135821_t = (*this)._method_build_arr(_132629_decl_kind.operator jule::Ptr<_228d31971_ArrTypeDecl>());
				if (_135821_t != nullptr) {
					_132717_kind=_135821_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_MapTypeDecl>>()) {
			_case_begin_5077388560:;
			{
				jule::Ptr<_229d681e3_Map> _136421_t = (*this)._method_build_map(_132629_decl_kind.operator jule::Ptr<_228d31971_MapTypeDecl>());
				if (_136421_t != nullptr) {
					_132717_kind=_136421_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_TupleTypeDecl>>()) {
			_case_begin_5077388656:;
			{
				jule::Ptr<_229d681e3_Tuple> _137021_t = (*this)._method_build_tuple(_132629_decl_kind.operator jule::Ptr<_228d31971_TupleTypeDecl>());
				if (_137021_t != nullptr) {
					_132717_kind=_137021_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_FnDecl>>()) {
			_case_begin_5077388768:;
			{
				jule::Ptr<_229b6ebcb_FnIns> _137621_t = (*this)._method_build_fn(_132629_decl_kind.operator jule::Ptr<_228d31971_FnDecl>());
				if (_137621_t != nullptr) {
					_132717_kind=_137621_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_NamespaceTypeDecl>>()) {
			_case_begin_5077389136:;
			{
				jule::Trait<_229d681e3_Kind> _138221_t = (*this)._method_build_by_namespace(_132629_decl_kind.operator jule::Ptr<_228d31971_NamespaceTypeDecl>());
				if (_138221_t != nullptr) {
					_132717_kind=_138221_t;
				}
			}
		}
		else {
			_case_begin_5077386464:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_5077386384:;
	}
	if (_132717_kind == nullptr) {
		return nullptr;
	}
	{
		auto &_match_expr{ _132717_kind };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeKind>>()) {
			_case_begin_5077418592:;
			{
				return _132717_kind.operator jule::Ptr<_229d681e3_TypeKind>();
			}
		}
		else {
			_case_begin_5077417152:;
			{
				return jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_132717_kind));
			}
		}
		_match_end_5077416080:;
	}
}



inline jule::Ptr<_229d681e3_TypeKind> _229d681e3_TypeChecker::_method_check_decl(jule::Ptr<_228d31971_TypeDecl>& _140734_decl) {
	_228d7aadb_Token _140917_error_token = (*this)._field_error_token;
	(*this)._field_error_token=(*(_140734_decl))._field_token;
	jule::Ptr<_229d681e3_TypeKind> _141217_kind = (*this)._method_build((*(_140734_decl))._field_kind);
	(*this)._field_error_token=_140917_error_token;
	return _141217_kind;
}



inline void _229d681e3_TypeChecker::_method_check(jule::Ptr<_229d681e3_TypeSymbol>& _141829_t) {
	if ((*(_141829_t))._field_decl == nullptr) {
		return;
	}
	jule::Ptr<_229d681e3_TypeKind> _142317_kind = (*this)._method_check_decl((*(_141829_t))._field_decl);
	if (_142317_kind == nullptr) {
		(*(_141829_t))._method_remove_kind();
		return;
	}
	(*(_141829_t))._field_kind=_142317_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _229d681e3_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "selection:" << _Src._field_selection;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ptr<_228c91a35_IR>,jule::Slice<_2276bcb9e_Log>> _228c91a35_IR::_static_method_build(jule::Str _2625_path,jule::Int _2636_flags) {
	jule::Ptr<_228ce6ea8_PlainImporter> _2717_importer = _228ce6ea8_PlainImporter::_static_method_new();
	jule::Slice<jule::Ptr<_228d3160d_Ast>> _2818_files;
	jule::Slice<_2276bcb9e_Log> _2829_logs;
	std::tie(_2818_files,_2829_logs) = (*(_2717_importer))._method_import_package(_2625_path,true);
	if (_2829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_2829_logs);
	}
	if (_2818_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1e53308ee_Package> _3718_pkg;
	std::tie(_3718_pkg,_2829_logs) = _1e61383d7_analyze_package(_2818_files,_2717_importer,_2636_flags);
	if (_2829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_2829_logs);
	}
	jule::Ptr<_228c91a35_IR> _4217_ir = jule::new_struct<_228c91a35_IR>(new( std::nothrow ) _228c91a35_IR(jule::Slice<jule::Str>(),_3718_pkg,(*(_2717_importer))._field_all_packages,_228ca2e64_OrderedDefines()));
	(*(_4217_ir))._field_passes=_228c91a35_get_all_unique_passes((*(_4217_ir))._field_main,(*(_4217_ir))._field_used);
	return std::make_tuple(_4217_ir,nullptr);
}



inline void _228c91a35_IR::_method_append_structs(jule::Ptr<_1e53308ee_Package>& _5334_p,jule::Slice<jule::Ptr<_228e0d025_Struct>>& _5358_buffer) {
	{
		auto &expr = (*(_5334_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5077696944:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _228c91a35_f = *it;
			{
				{
					auto &expr = (*(_228c91a35_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_5077698848:;
					if (it != expr.end()) {
						jule::Ptr<_228e0d025_Struct> _228c91a35_s = *it;
						{
							if ((!((*(_228c91a35_s))._field_cpp_linked))) {
								_5358_buffer.push(_228c91a35_s);
							}
						}
						_iter_next_5077698848:;
						++it;
						goto _iter_begin_5077698848;
					}
					_iter_end_5077698848:;
				}
			}
			_iter_next_5077696944:;
			++it;
			goto _iter_begin_5077696944;
		}
		_iter_end_5077696944:;
	}
}



inline jule::Slice<jule::Ptr<_228e0d025_Struct>> _228c91a35_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ptr<_228e0d025_Struct>> _6617_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_6617_buffer);
	{
		auto &expr = (*this)._field_used;
		auto it = expr.begin();
		_iter_begin_5077703472:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _228c91a35_u = *it;
			{
				if ((!((*(_228c91a35_u))._field_cpp_linked))) {
					(*this)._method_append_structs((*(_228c91a35_u))._field_package,_6617_buffer);
				}
			}
			_iter_next_5077703472:;
			++it;
			goto _iter_begin_5077703472;
		}
		_iter_end_5077703472:;
	}
	return _6617_buffer;
}



inline void _228c91a35_IR::_method_order(void) {
	(*this)._field_ordered._field_structs=(*this)._method_get_all_structures();
	_228ca2e64_DefineOrderer::_static_method_order_structures((*this)._field_ordered._field_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _228c91a35_IR &_Src) {
	_Stream << "IR{";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "ordered:" << _Src._field_ordered;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_ParamDecl::_method_is_self(void) {
	return (*this)._field_ident.has_suffix(jule::Str("self", 4));
}



inline jule::Bool _228d31971_ParamDecl::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1e56c3885_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_FnDecl::_method_is_anon(void) {
	return (*this)._field_ident == jule::Str("<anonymous>", 11);
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _228d31971_Iter::_method_is_inf(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _228d31971_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Int,jule::Bool> _229cbddd5_ArgParser::_method_parse_integer_0(jule::Str& _18532_s,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)> _18540_parser) {
	jule::Int _18584_x = jule::Int();
	jule::Bool _18590_ok = jule::Bool();
	{
		
		if (_18532_s == jule::Str()) {
			_case_begin_5080197632:;
			{
				_18584_x = 0LL;
				_18590_ok = false;
				return std::make_tuple(_18584_x,_18590_ok);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0x", 2))) {
			_case_begin_5080197968:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),16LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0b", 2))) {
			_case_begin_5080198064:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),2LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0o", 2))) {
			_case_begin_5080198160:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),8LL);
			}
		}
		else if (_18532_s[0LL] == '0') {
			_case_begin_5080196304:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_5080196000:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s,10LL);
			}
		}
		_match_end_5080195824:;
	}
	return std::make_tuple(_18584_x,_18590_ok);
}

inline std::tuple<jule::Uint,jule::Bool> _229cbddd5_ArgParser::_method_parse_integer_1(jule::Str& _18532_s,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)> _18540_parser) {
	jule::Uint _18584_x = jule::Uint();
	jule::Bool _18590_ok = jule::Bool();
	{
		
		if (_18532_s == jule::Str()) {
			_case_begin_5080227344:;
			{
				_18584_x = 0LL;
				_18590_ok = false;
				return std::make_tuple(_18584_x,_18590_ok);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0x", 2))) {
			_case_begin_5080227680:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),16LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0b", 2))) {
			_case_begin_5080227776:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),2LL);
			}
		}
		else if (_18532_s.has_prefix(jule::Str("0o", 2))) {
			_case_begin_5080227872:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(2LL),8LL);
			}
		}
		else if (_18532_s[0LL] == '0') {
			_case_begin_5080226016:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_5080225712:;
			{
				std::tie(_18584_x,_18590_ok) = _18540_parser(_18532_s,10LL);
			}
		}
		_match_end_5080225536:;
	}
	return std::make_tuple(_18584_x,_18590_ok);
}



inline jule::Str _229cbddd5_ArgParser::_method_get_data(void) {
	if (((*this)._field_i + 1LL) >= (*this)._field_args.len()) {
		return jule::Str();
	}
	((*this)._field_i)++;
	return (*this)._field_args[(*this)._field_i];
}



inline jule::VoidExceptional _229cbddd5_ArgParser::_method_process_flag(jule::Trait<_229cbddd5_CommonFlag>& _21636_flag) {
	{
		auto &_match_expr{ _21636_flag };
		
		if (_match_expr.type_is<jule::Ptr<_229cbddd5_Flag_3>>()) {
			_case_begin_5080172288:;
			{
				jule::Ptr<_229cbddd5_Flag_3> _21921_bf = _21636_flag.operator jule::Ptr<_229cbddd5_Flag_3>();
				(*((*(_21921_bf))._field__data))=(!((*(_21921_bf))._field__default));
				return jule::VoidExceptional();
			}
		}
		_match_end_5080172208:;
	}
	jule::Str _22413_data = (*this)._method_get_data();
	if (_22413_data == jule::Str()) {
		return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression missing", 20));
	}
	{
		auto &_match_expr{ _21636_flag };
		
		if (_match_expr.type_is<jule::Ptr<_229cbddd5_Flag_0>>()) {
			_case_begin_5080176816:;
			{
				jule::Ptr<_229cbddd5_Flag_0> _23121_intf = _21636_flag.operator jule::Ptr<_229cbddd5_Flag_0>();
				jule::Bool _23233_ok;
				std::tie((*((*(_23121_intf))._field__data)),_23233_ok) = (*this)._method_parse_integer_0(_22413_data,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _23272_s,jule::Int _23280_base) mutable -> std::tuple<jule::Int,jule::Bool> {
					jule::I64 _23322_x;
					jule::Int _23325_err;
					std::tie(_23322_x,_23325_err) = _2277861c9_parse_int(_23272_s,_23280_base,64LL);
					return std::make_tuple(_23322_x,_23325_err == 0LLU);
				}));
				if ((!(_23233_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression must be valid signed integer", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229cbddd5_Flag_1>>()) {
			_case_begin_5080176912:;
			{
				jule::Ptr<_229cbddd5_Flag_1> _24121_uintf = _21636_flag.operator jule::Ptr<_229cbddd5_Flag_1>();
				jule::Bool _24234_ok;
				std::tie((*((*(_24121_uintf))._field__data)),_24234_ok) = (*this)._method_parse_integer_1(_22413_data,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _24274_s,jule::Int _24282_base) mutable -> std::tuple<jule::Uint,jule::Bool> {
					jule::U64 _24322_x;
					jule::Int _24325_err;
					std::tie(_24322_x,_24325_err) = _2277861c9_parse_uint(_24274_s,_24282_base,64LL);
					return std::make_tuple(_24322_x,_24325_err == 0LLU);
				}));
				if ((!(_24234_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression must be valid unsigned integer", 43));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229cbddd5_Flag_2>>()) {
			_case_begin_5080178672:;
			{
				jule::Ptr<_229cbddd5_Flag_2> _25121_ff = _21636_flag.operator jule::Ptr<_229cbddd5_Flag_2>();
				jule::Int _25231_err;
				std::tie((*((*(_25121_ff))._field__data)),_25231_err) = _2284c0eac_parse_float(_22413_data,64LL);
				if (_25231_err != 0LLU) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21636_flag.get()._method_name()) + jule::Str(": expression must be valid floating-point", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229cbddd5_Flag_4>>()) {
			_case_begin_5080178768:;
			{
				(*((*(_21636_flag.operator jule::Ptr<_229cbddd5_Flag_4>()))._field__data))=_22413_data;
			}
		}
		_match_end_5080176656:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _229cbddd5_ArgParser::_method_single_dash(jule::Str& _26231_arg) {
	jule::Slice<jule::I32> _26313_rarg = static_cast<jule::Slice<jule::I32>>(_26231_arg).slice(1LL);
	{
		auto &expr = _26313_rarg;
		auto it = expr.begin();
		_iter_begin_5080248080:;
		if (it != expr.end()) {
			jule::I32 &_229cbddd5_r = *it;
			{
				jule::Trait<_229cbddd5_CommonFlag> _26521_flag = (*this)._field_set._method_find_flag_short(_229cbddd5_r);
				if (_26521_flag == nullptr) {
					return jule::VoidExceptional((_26231_arg + jule::Str(": flag is not exist: ", 21)) + static_cast<jule::Str>(_229cbddd5_r));
				}
				({
					auto except = (*this)._method_process_flag(_26521_flag);
					if (!except.ok()) {
						return jule::VoidExceptional(except.error);
					}
				});
			}
			_iter_next_5080248080:;
			++it;
			goto _iter_begin_5080248080;
		}
		_iter_end_5080248080:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _229cbddd5_ArgParser::_method_double_dash(jule::Str& _27431_arg) {
	jule::Trait<_229cbddd5_CommonFlag> _27517_flag = (*this)._field_set._method_find_flag(_27431_arg.slice(2LL));
	if (_27517_flag == nullptr) {
		return jule::VoidExceptional(_27431_arg + jule::Str(": flag is not exist", 19));
	}
	({
		auto except = (*this)._method_process_flag(_27517_flag);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::VoidExceptional _229cbddd5_ArgParser::_method_try_arg(void) {
	jule::Str _28413_arg = (*this)._field_args[(*this)._field_i];
	if ((*this)._field_args.len() == 0LL) {
		return jule::VoidExceptional();
	}
	if (_28413_arg[0LL] == '-') {
		if (((*this)._field_args.len() > 1LL) && (_28413_arg[1LL] == '-')) {
			({
				auto except = (*this)._method_double_dash(_28413_arg);
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
			return jule::VoidExceptional();
		}
		({
			auto except = (*this)._method_single_dash(_28413_arg);
			if (!except.ok()) {
				return jule::VoidExceptional(except.error);
			}
		});
		return jule::VoidExceptional();
	}
	(*this)._field_content = jule::alloc_for_append((*this)._field_content,1);(*this)._field_content.push(_28413_arg); return jule::VoidExceptional(); }



inline jule::VoidExceptional _229cbddd5_ArgParser::_method_parse(void) {
	for (; (*this)._field_i < (*this)._field_args.len(); ((*this)._field_i)++) {
		{
			({
				auto except = (*this)._method_try_arg();
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
		}
	_iter_next_5080264080:;
	}
	_iter_end_5080264080:; return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _229cbddd5_ArgParser &_Src) {
	_Stream << "ArgParser{";
	_Stream << "set:" << _Src._field_set << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "content:" << _Src._field_content << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _2275e3a2b_free(void* _5124_ptr) {
	free(_5124_ptr);
}



inline jule::Str _22765b797_byte_ptr_to_str(jule::U8* _7431_s) {
	if (_7431_s == nullptr) {
		return jule::Str();
	}
	return __jule_str_from_byte_ptr(_7431_s);
}



inline jule::Int _2275e2d05_get_last_errno(void) {
	return errno;
}



inline jule::Int _2275de50a_stat(jule::U8* _4620_path,struct stat* _4637_stat) {
	return static_cast<jule::Int>(__jule_stat(((char*)(_4620_path)),_4637_stat));
}



inline jule::Int _2275de50a_open(jule::U8* _5120_path,jule::Int _5133_flag,jule::Int _5144_mode) {
	return static_cast<jule::Int>(open(((char*)(_5120_path)),_5133_flag,_5144_mode));
}



inline jule::U8* _2275de50a_getcwd(jule::U8* _5722_buff,jule::Uint _5735_bufflen) {
	return ((jule::U8*)(getcwd(((char*)(_5722_buff)),_5735_bufflen)));
}



inline DIR* _2275de50a_opendir(jule::U8* _6223_path) {
	return opendir(((char*)(_6223_path)));
}



inline struct dirent* _2275de50a_readdir(DIR* _6527_dir) {
	return readdir(_6527_dir);
}



inline jule::Int _2275de50a_closedir(DIR* _6828_dir) {
	return static_cast<jule::Int>(closedir(_6828_dir));
}



inline jule::Int _2275de50a_mkdir(jule::U8* _7721_path,jule::Int _7734_mode) {
	return static_cast<jule::Int>(mkdir(((char*)(_7721_path)),_7734_mode));
}



inline jule::Int _2275de50a_rmdir(jule::U8* _8221_path) {
	return static_cast<jule::Int>(rmdir(((char*)(_8221_path))));
}



inline jule::Int _2275de50a_unlink(jule::U8* _8522_path) {
	return static_cast<jule::Int>(unlink(((char*)(_8522_path))));
}



inline jule::I64 _22760ae1c_seek(jule::Int _2613_handle,jule::I64 _2626_offset,jule::Int _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::Int _22760ae1c_read(jule::Int _3120_handle,void* _3137_buff,jule::Uint _3152_n) {
	return static_cast<jule::Int>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::Int _22760ae1c_close(jule::Int _3614_handle) {
	return static_cast<jule::Int>(close(_3614_handle));
}



inline jule::Int _22760ae1c_write(jule::Int _3921_handle,void* _3934_buff,jule::Uint _3949_n) {
	return static_cast<jule::Int>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _22760ae1c_exit(jule::Int _4413_code) {
	exit(_4413_code);
}



inline jule::Int _2275c911b_get_last_os_error(void) {
	jule::Int _309_err = _2275e2d05_get_last_errno();
	{
		auto &_match_expr{ _309_err };
		
		if (_match_expr == 13LL) {
			_case_begin_5054813632:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_5054813728:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 62LL) {
			_case_begin_5054813824:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 63LL) {
			_case_begin_5054814224:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_5054814320:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_5054814416:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_5054813136:;
			{
				return 6LLU;
			}
		}
		else {
			_case_begin_5054811680:;
			{
				return 1LLU;
			}
		}
		_match_end_5054812560:;
	}
}



inline jule::Slice<jule::Str> _2275d406b_args(void) {
	return jule::args();
}



inline jule::Exceptional<jule::Str> _2275d406b_working_dir(void) {
	return jule::Exceptional<jule::Str>(jule::Any(),({
		auto except = _2275de95b___getwd();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Str>(except.error);
			return jule::Exceptional<jule::Str>(except.error);
		} jule::Str();});
	}));
}



inline jule::Exceptional<jule::Str> _2275de95b___getwd(void) {
	jule::U8* _1113_buff = _2275de50a_getcwd(nullptr,0LLU);
	if (_1113_buff == nullptr) {
		return jule::Exceptional<jule::Str>(_2275c911b_get_last_os_error());
	}
	jule::Str _159_pwd = _22765b797_byte_ptr_to_str(_1113_buff);
	{
		_2275e3a2b_free(_1113_buff);
	}
	return jule::Exceptional<jule::Str>(jule::Any(),_159_pwd);
}



inline void _227532edc_push_opt_level(jule::Int _3323_level) {
	_227532edc_OPT_COPY=_3323_level >= 1LLU;
	_227532edc_OPT_DEADCODE=_3323_level >= 1LLU;
	_227532edc_OPT_APPEND=_3323_level >= 1LLU;
	_227532edc_OPT_MATH=_3323_level >= 1LLU;
	_227532edc_OPT_ACCESS=_3323_level >= 1LLU;
	_227532edc_OPT_INLINE=_3323_level >= 1LLU;
	_227532edc_OPT_PTR=_3323_level >= 1LLU;
	_227532edc_OPT_COND=_3323_level >= 1LLU;
}



inline jule::Str _227711594_clean(jule::Str _10718_path) {
	jule::Str _1089_original_path = _10718_path;
	jule::Int _1099_vol_len = _227719602_volume_name_len(_10718_path);
	_10718_path=_10718_path.slice(_1099_vol_len);
	if (_10718_path == jule::Str()) {
		if (((_1099_vol_len > 1LL) && _227719602_is_path_sep(_1089_original_path[0LL])) && _227719602_is_path_sep(_1089_original_path[1LL])) {
			return _227711594_from_slash(_1089_original_path);
		}
		return _1089_original_path + jule::Str(".", 1);
	}
	jule::Bool _1189_rooted = _227719602_is_path_sep(_10718_path[0LL]);
	jule::I64 _1259_n = _10718_path.len();
	_227711594_LazyBuff _12613_out = _227711594_LazyBuff(_10718_path,jule::Slice<jule::U8>(),jule::Int(),_1089_original_path,_1099_vol_len);
	jule::Int _13114_r = 0LL;
	jule::Int _13121_dotdot = 0LL;
	std::tie(_13114_r,_13121_dotdot) = std::make_tuple(0LL,0LL);
	if (_1189_rooted) {
		_12613_out._method_append(47LLU);
		std::tie(_13114_r,_13121_dotdot) = std::make_tuple(1LL,1LL);
	}
	while (_13114_r < _1259_n) {
		{
			{
				
				if (_227719602_is_path_sep(_10718_path[_13114_r])) {
					_case_begin_5054899248:;
					{
						(_13114_r)++;
					}
				}
				else if ((_10718_path[_13114_r] == '.') && (((_13114_r + 1LL) == _1259_n) || _227719602_is_path_sep(_10718_path[_13114_r + 1LL]))) {
					_case_begin_5054900320:;
					{
						(_13114_r)++;
					}
				}
				else if (((_10718_path[_13114_r] == '.') && (_10718_path[_13114_r + 1LL] == '.')) && (((_13114_r + 2LL) == _1259_n) || _227719602_is_path_sep(_10718_path[_13114_r + 2LL]))) {
					_case_begin_5054898384:;
					{
						_13114_r+=2LL;
						{
							
							if (_12613_out._field_w > _13121_dotdot) {
								_case_begin_5054907760:;
								{
									(_12613_out._field_w)--;
									while ((_12613_out._field_w > _13121_dotdot) && (!(_227719602_is_path_sep(static_cast<jule::U8>(_12613_out._method_index(_12613_out._field_w)))))) {
										{
											(_12613_out._field_w)--;
										}
									_iter_next_5054908320:;
									}
									_iter_end_5054908320:;
								}
							}
							else if ((!(_1189_rooted))) {
								_case_begin_5054907856:;
								{
									if (_12613_out._field_w > 0LL) {
										_12613_out._method_append(47LLU);
									}
									_12613_out._method_append('.');
									_12613_out._method_append('.');
									_13121_dotdot=_12613_out._field_w;
								}
							}
							_match_end_5054888368:;
						}
					}
				}
				else {
					_case_begin_5054887760:;
					{
						if ((_1189_rooted && (_12613_out._field_w != 1LL)) || ((!(_1189_rooted)) && (_12613_out._field_w != 0LL))) {
							_12613_out._method_append(47LLU);
						}
						if (((false && (_12613_out._field_w == 0LL)) && (_12613_out._field_vol_len == 0LL)) && (_13114_r != 0LL)) {
							jule::Int _17425_i = _13114_r;
							for (; (_17425_i < _1259_n) && (!(_227719602_is_path_sep(_10718_path[_17425_i]))); (_17425_i)++) {
								{
									if (_10718_path[_17425_i] == ':') {
										_12613_out._method_append('.');
										_12613_out._method_append(47LLU);
										goto _iter_end_5054891120;
									}
								}
							_iter_next_5054891120:;
							}
							_iter_end_5054891120:;
						}
						for (; (_13114_r < _1259_n) && (!(_227719602_is_path_sep(_10718_path[_13114_r]))); (_13114_r)++) {
							{
								_12613_out._method_append(_10718_path[_13114_r]);
							}
						_iter_next_5054891952:;
						}
						_iter_end_5054891952:;
					}
				}
				_match_end_5054887584:;
			}
		}
	_iter_next_5054887152:;
	}
	_iter_end_5054887152:;
	if (_12613_out._field_w == 0LL) {
		_12613_out._method_append('.');
	}
	return _227711594_from_slash(_12613_out._method_string());
}



inline jule::Str _227711594_from_slash(jule::Str _21019_path) {
	{
		return _21019_path;
	}
}



inline jule::Str _227711594_join(jule::Slice<jule::Str> _22413_elem) {
	return _227719602___join(_22413_elem);
}



inline jule::Str _227711594_ext(jule::Str _22912_path) {
	jule::I64 _23013_i = _22912_path.len() - 1LL;
	for (; (_23013_i >= 0LL) && (!(_227719602_is_path_sep(_22912_path[_23013_i]))); (_23013_i)--) {
		{
			if (_22912_path[_23013_i] == '.') {
				return _22912_path.slice(_23013_i);
			}
		}
	_iter_next_5054926576:;
	}
	_iter_end_5054926576:;
	return jule::Str();
}



inline std::tuple<jule::Str,jule::Bool> _227711594_abs(jule::Str _24412_path) {
	jule::Str _24510_abs_path;
	jule::Bool _24520_ok;
	std::tie(_24510_abs_path,_24520_ok) = _227719602___abs(_24412_path);
	return std::make_tuple(_24510_abs_path,_24520_ok);
}



inline jule::Str _227711594_base(jule::Str _25317_path) {
	if (_25317_path == jule::Str()) {
		return jule::Str(".", 1);
	}
	while ((_25317_path.len() > 0LL) && _227719602_is_path_sep(_25317_path[_25317_path.len() - 1LL])) {
		{
			_25317_path=_25317_path.slice(0LL,_25317_path.len() - 1LL);
		}
	_iter_next_5054934048:;
	}
	_iter_end_5054934048:;
	_25317_path=_25317_path.slice(_227711594_volume_name(_25317_path).len());
	jule::I64 _26413_i = _25317_path.len() - 1LL;
	while ((_26413_i >= 0LL) && (!(_227719602_is_path_sep(_25317_path[_26413_i])))) {
		{
			(_26413_i)--;
		}
	_iter_next_5054935536:;
	}
	_iter_end_5054935536:;
	if (_26413_i >= 0LL) {
		_25317_path=_25317_path.slice(_26413_i + 1LL);
	}
	if (_25317_path == jule::Str()) {
		return static_cast<jule::Str>(47LL);
	}
	return _25317_path;
}



inline jule::Str _227711594_dir(jule::Str _28412_path) {
	jule::Str _2859_vol = _227711594_volume_name(_28412_path);
	jule::I64 _28613_i = _28412_path.len() - 1LL;
	while ((_28613_i >= _2859_vol.len()) && (!(_227719602_is_path_sep(_28412_path[_28613_i])))) {
		{
			(_28613_i)--;
		}
	_iter_next_5054942912:;
	}
	_iter_end_5054942912:;
	jule::Str _2909_dir = _227711594_clean(_28412_path.slice(_2859_vol.len(),_28613_i + 1LL));
	if ((_2909_dir == jule::Str(".", 1)) && (_2859_vol.len() > 2LL)) {
		return _2859_vol;
	}
	return _2859_vol + _2909_dir;
}



inline jule::Str _227711594_volume_name(jule::Str _30220_path) {
	return _227711594_from_slash(_30220_path.slice(0LL,_227719602_volume_name_len(_30220_path)));
}



inline jule::Bool _227719602_is_path_sep(jule::U8 _4720_c) {
	return 47LL == _4720_c;
}



inline jule::Bool _227719602_is_abs(jule::Str _5215_path) {
	return _5215_path.has_prefix(jule::Str("/", 1));
}



inline jule::Int _227719602_volume_name_len(jule::Str _5620_path) {
	return 0LL;
}



inline std::tuple<jule::Str,jule::Bool> _227719602___abs(jule::Str _5810_path) {
	jule::Bool _5828_ok = jule::Bool();
	if (_227719602_is_abs(_5810_path)) {
		_5828_ok = true;
		return std::make_tuple(_227711594_clean(_5810_path),_5828_ok);
	}
	jule::Str _629_wd = ({
		auto except = _2275d406b_working_dir();
		(except.ok()) ? (except.result) : ({{
			_5828_ok = false;
			return std::make_tuple(jule::Str(),_5828_ok);
			_5828_ok = false;
			return std::make_tuple(jule::Str(),_5828_ok);
		} jule::Str();});
	});
	_5828_ok = true;
	return std::make_tuple(_227719602___join(jule::Slice<jule::Str>({_629_wd,_5810_path})),_5828_ok);
}



inline jule::Str _227719602_str_join(jule::Slice<jule::Str> _6813_elems,jule::Str _6827_sep) {
	{
		auto _match_expr{ _6813_elems.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_5054964288:;
			{
				return jule::Str();
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_5054964384:;
			{
				return _6813_elems[0LL];
			}
		}
		_match_end_5054963808:;
	}
	jule::Str _7413_s = _6813_elems[0LL];
	{
		auto expr = _6813_elems.slice(1LL);
		auto it = expr.begin();
		_iter_begin_5054965264:;
		if (it != expr.end()) {
			jule::Str &_227719602_elem = *it;
			{
				_7413_s+=_6827_sep + _227719602_elem;
			}
			_iter_next_5054965264:;
			++it;
			goto _iter_begin_5054965264;
		}
		_iter_end_5054965264:;
	}
	return _7413_s;
}



inline jule::Str _227719602___join(jule::Slice<jule::Str> _8111_elem) {
	{
		auto &expr = _8111_elem;
		auto it = expr.begin();
		_iter_begin_5054970240:;
		if (it != expr.end()) {
			jule::Int _227719602_i = it - expr.begin();
			jule::Str &_227719602_e = *it;
			{
				if (_227719602_e != jule::Str()) {
					return _227711594_clean(_227719602_str_join(_8111_elem.slice(_227719602_i),static_cast<jule::Str>(47LL)));
				}
			}
			_iter_next_5054970240:;
			++it;
			_227719602_i++;
			goto _iter_begin_5054970240;
		}
		_iter_end_5054970240:;
	}
	return jule::Str();
}



inline jule::Int _22756cb1a_get_last_fs_error(void) {
	jule::Int _729_err = _2275e2d05_get_last_errno();
	{
		auto &_match_expr{ _729_err };
		
		if (_match_expr == 13LL) {
			_case_begin_5055014608:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_5055014704:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 62LL) {
			_case_begin_5055014240:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 63LL) {
			_case_begin_5055014336:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_5055014432:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_5055014832:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 84LL) {
			_case_begin_5055014928:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_5055015024:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 24LL) {
			_case_begin_5055013744:;
			{
				return 8LLU;
			}
		}
		else if (_match_expr == 23LL) {
			_case_begin_5055013840:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_5055013936:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 17LL) {
			_case_begin_5055014032:;
			{
				return 11LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_5055015712:;
			{
				return 12LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_5055015808:;
			{
				return 13LLU;
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_5055015904:;
			{
				return 14LLU;
			}
		}
		else if (_match_expr == 98LL) {
			_case_begin_5055016016:;
			{
				return 15LLU;
			}
		}
		else if (_match_expr == 28LL) {
			_case_begin_5055016128:;
			{
				return 16LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_5055016240:;
			{
				return 17LLU;
			}
		}
		else if (_match_expr == 30LL) {
			_case_begin_5055016352:;
			{
				return 18LLU;
			}
		}
		else if (_match_expr == 35LL) {
			_case_begin_5055016464:;
			{
				return 19LLU;
			}
		}
		else if (_match_expr == 26LL || _match_expr == 16LL) {
			_case_begin_5055016576:;
			{
				return 20LLU;
			}
		}
		else if (_match_expr == 27LL) {
			_case_begin_5055016688:;
			{
				return 21LLU;
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_5055016800:;
			{
				return 22LLU;
			}
		}
		else if (_match_expr == 34LL) {
			_case_begin_5055016912:;
			{
				return 23LLU;
			}
		}
		else if (_match_expr == 29LL) {
			_case_begin_5055017024:;
			{
				return 24LLU;
			}
		}
		else if (_match_expr == 55LL) {
			_case_begin_5055017136:;
			{
				return 25LLU;
			}
		}
		else if (_match_expr == 94LL) {
			_case_begin_5055017248:;
			{
				return 26LLU;
			}
		}
		else if (_match_expr == 66LL) {
			_case_begin_5055017360:;
			{
				return 27LLU;
			}
		}
		else {
			_case_begin_5055012384:;
			{
				return 1LLU;
			}
		}
		_match_end_5055013168:;
	}
}



inline jule::Int _2277c1973_get_last_process_error(void) {
	jule::Int _419_err = _2275e2d05_get_last_errno();
	{
		auto &_match_expr{ _419_err };
		
		if (_match_expr == 13LL) {
			_case_begin_5055156624:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 62LL) {
			_case_begin_5055156336:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 63LL) {
			_case_begin_5055156432:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_5055155744:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_5055155840:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_5055155936:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_5055155248:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 26LL || _match_expr == 16LL) {
			_case_begin_5055155344:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_5055155440:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 97LL) {
			_case_begin_5055155536:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_5055156768:;
			{
				return 11LLU;
			}
		}
		else {
			_case_begin_5055153824:;
			{
				return 0LLU;
			}
		}
		_match_end_5055154672:;
	}
}



inline void _2277d2c70_exit(jule::Int _1213_code) {
	_22760ae1c_exit(_1213_code);
}



inline jule::Str _2277d2c70_executable(void) {
	return jule::executable();
}



inline jule::Bool _2275ec68e_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[_2627_p.len() - 1LL] == '>');
}



inline jule::Bool _2275ec68e_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto &expr = _2275ec68e_CPP_HEADER_EXTS;
		auto it = expr.begin();
		_iter_begin_5055357296:;
		if (it != expr.end()) {
			jule::Str &_2275ec68e_valid_ext = *it;
			{
				if (_3128_ext == _2275ec68e_valid_ext) {
					return true;
				}
			}
			_iter_next_5055357296:;
			++it;
			goto _iter_begin_5055357296;
		}
		_iter_end_5055357296:;
	}
	return false;
}



inline jule::Bool _2275ec68e_is_valid_cpp_ext(jule::Str _4225_ext) {
	if (_4225_ext == jule::Str(".c", 2)) {
		return true;
	}
	{
		auto &expr = _2275ec68e_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_5055361584:;
		if (it != expr.end()) {
			jule::Str &_2275ec68e_e = *it;
			{
				if (_4225_ext == _2275ec68e_e) {
					return true;
				}
			}
			_iter_next_5055361584:;
			++it;
			goto _iter_begin_5055361584;
		}
		_iter_end_5055361584:;
	}
	{
		auto &expr = _2275ec68e_OBJECTIVE_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_5055366768:;
		if (it != expr.end()) {
			jule::Str &_2275ec68e_e = *it;
			{
				if (_4225_ext == _2275ec68e_e) {
					return true;
				}
			}
			_iter_next_5055366768:;
			++it;
			goto _iter_begin_5055366768;
		}
		_iter_end_5055366768:;
	}
	return false;
}



inline jule::Str _2276bcb9e_logf(jule::Str _28913_fmt,jule::Slice<jule::Any> _28926_args) {
	return _2276bcb9e_apply_fmt(_28913_fmt,_28926_args);
}



inline jule::Str _2276bcb9e_arg_to_str(jule::Any _29315_arg) {
	{
		auto &_match_expr{ _29315_arg };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_5055370928:;
			{
				return _29315_arg.operator jule::Str();
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_5055370672:;
			{
				return static_cast<jule::Str>(_29315_arg.operator jule::U8());
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_5055370768:;
			{
				return static_cast<jule::Str>(_29315_arg.operator jule::I32());
			}
		}
		else {
			_case_begin_5055368816:;
			{
				return jule::Str("<fmt?>", 6);
			}
		}
		_match_end_5055367376:;
	}
}



inline jule::Int _2276bcb9e_find_next_fmt(jule::Str _30218_fmt) {
	{
		auto &expr = _30218_fmt;
		auto it = expr.begin();
		_iter_begin_5055372048:;
		if (it != expr.end()) {
			jule::Int _2276bcb9e_i = it - expr.begin();
			jule::U8 &_2276bcb9e_b = *it;
			{
				if (_2276bcb9e_b == '@') {
					return _2276bcb9e_i;
				}
			}
			_iter_next_5055372048:;
			++it;
			_2276bcb9e_i++;
			goto _iter_begin_5055372048;
		}
		_iter_end_5055372048:;
	}
	return -1LL;
}



inline jule::Str _2276bcb9e_apply_fmt(jule::Str _31118_fmt,jule::Slice<jule::Any> _31128_args) {
	jule::Str _31213_s = jule::Str();
	{
		auto &expr = _31128_args;
		auto it = expr.begin();
		_iter_begin_5055378896:;
		if (it != expr.end()) {
			jule::Any &_2276bcb9e_arg = *it;
			{
				jule::Int _31513_i = _2276bcb9e_find_next_fmt(_31118_fmt);
				if (_31513_i == -1LL) {
					goto _iter_end_5055378896;
				}
				_31213_s+=_31118_fmt.slice(0LL,_31513_i);
				_31213_s+=_2276bcb9e_arg_to_str(_2276bcb9e_arg);
				_31118_fmt=_31118_fmt.slice(_31513_i + 1LL);
			}
			_iter_next_5055378896:;
			++it;
			goto _iter_begin_5055378896;
		}
		_iter_end_5055378896:;
	}
	_31213_s+=_31118_fmt;
	return _31213_s;
}



inline jule::Bool _22763bd1b_is_top_directive(jule::Str _2825_directive) {
	return (_2825_directive == jule::Str("pass", 4)) || (_2825_directive == jule::Str("build", 5));
}



inline jule::Bool _227785d55_is_windows(jule::Str _5119_os) {
	return _5119_os == jule::Str("windows", 7);
}



inline jule::Bool _227785d55_is_darwin(jule::Str _5318_os) {
	return _5318_os == jule::Str("darwin", 6);
}



inline jule::Bool _227785d55_is_linux(jule::Str _5517_os) {
	return _5517_os == jule::Str("linux", 5);
}



inline jule::Bool _227785d55_is_i386(jule::Str _5716_arch) {
	return _5716_arch == jule::Str("i386", 4);
}



inline jule::Bool _227785d55_is_amd64(jule::Str _5917_arch) {
	return _5917_arch == jule::Str("amd64", 5);
}



inline jule::Bool _227785d55_is_arm64(jule::Str _6117_arch) {
	return _6117_arch == jule::Str("arm64", 5);
}



inline jule::Bool _227785d55_is_unix(jule::Str _6316_os) {
	return _227785d55_is_darwin(_6316_os) || _227785d55_is_linux(_6316_os);
}



inline jule::Bool _227785d55_is_32bit(jule::Str _6517_arch) {
	return _227785d55_is_i386(_6517_arch);
}



inline jule::Bool _227785d55_is_64bit(jule::Str _6717_arch) {
	return _227785d55_is_amd64(_6717_arch) || _227785d55_is_arm64(_6717_arch);
}



inline void _22779d455_exit_err(jule::Str _1613_msg) {
	
	jule::outln(_1613_msg);
	_2277d2c70_exit(1LL);
}



inline void _22779d455_init(void) {
	jule::Str _2413_path = _2277d2c70_executable();
	if (_2413_path == jule::Str()) {
		_22779d455_exit_err(jule::Str("std::jule::build: executable file cannot found", 46));
	}
	jule::Str _299_pwd = ({
		auto except = _2275d406b_working_dir();
		(except.ok()) ? (except.result) : ({{
			_22779d455_exit_err(jule::Str("std::jule::build: working directory path cannot found", 53));
			return;
			return;
		} jule::Str();});
	});
	jule::Str _349_path_exec = _227711594_dir(_2413_path);
	_2413_path=_227711594_join(jule::Slice<jule::Str>({_349_path_exec,jule::Str("..", 2)}));
	{
		_22779d455_PATH_WD=_299_pwd;
		_22779d455_PATH_EXEC=_349_path_exec;
		_22779d455_PATH_STDLIB=_227711594_join(jule::Slice<jule::Str>({_2413_path,jule::Str("std", 3)}));
		_22779d455_PATH_API=_227711594_join(jule::Slice<jule::Str>({_22779d455_PATH_EXEC,jule::Str("..", 2)}));
		_22779d455_PATH_API=_227711594_join(jule::Slice<jule::Str>({_22779d455_PATH_API,jule::Str("api", 3)}));
		_22779d455_PATH_API=_227711594_join(jule::Slice<jule::Str>({_22779d455_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Int _228bb20b5_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::Int>(64LL - _228bb20b5_len64(_6124_x));
}



inline jule::Int _228bb20b5_trailing_zeros(jule::Uint _8323_x) {
	
	return static_cast<jule::Int>(_228bb20b5_trailing_zeros64(static_cast<jule::U64>(static_cast<jule::U64>(_8323_x))));
}



inline jule::Int _228bb20b5_trailing_zeros32(jule::U32 _10525_x) {
	if (_10525_x == 0LL) {
		return 32LL;
	}
	return static_cast<jule::Int>(static_cast<jule::Int>(_228bb20b5_DE_BRUIJN32_TAB[static_cast<jule::Int>(((_10525_x & (-(_10525_x))) * 125613361LL) >> 27LL)]));
}



inline jule::Int _228bb20b5_trailing_zeros64(jule::U64 _11425_x) {
	if (_11425_x == 0LL) {
		return 64LL;
	}
	return static_cast<jule::Int>(static_cast<jule::Int>(_228bb20b5_DE_BRUIJN64_TAB[static_cast<jule::Int>(((_11425_x & (-(_11425_x))) * 285870213051353865LL) >> 58LL)]));
}



inline jule::Int _228bb20b5_len32(jule::U32 _35218_x) {
	jule::Int _35228_n = jule::Int();
	if (_35218_x >= 65536LLU) {
		_35218_x>>=16LL;
		_35228_n=16LL;
	}
	if (_35218_x >= 256LLU) {
		_35218_x>>=8LL;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::Int>(_35228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_35218_x)]));
	return _35228_n;
}



inline jule::Int _228bb20b5_len64(jule::U64 _36618_x) {
	jule::Int _36628_n = jule::Int();
	if (_36618_x >= 4294967296LLU) {
		_36618_x>>=32LL;
		_36628_n=32LL;
	}
	if (_36618_x >= 65536LLU) {
		_36618_x>>=16LL;
		_36628_n+=16LL;
	}
	if (_36618_x >= 256LLU) {
		_36618_x>>=8LL;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::Int>(_36628_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_36618_x)]));
	return _36628_n;
}



inline std::tuple<jule::U64,jule::U64> _228bb20b5_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41544_sum = jule::U64();
	jule::U64 _41554_carryout = jule::U64();
	_41544_sum=static_cast<jule::U64>((_41514_x + _41522_y) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>(((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LL);
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::U64,jule::U64> _228bb20b5_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49932_hi = jule::U64();
	jule::U64 _49941_lo = jule::U64();
	
	jule::U64 _5019_x0 = _49914_x & 4294967295LLU;
	jule::U64 _5029_x1 = _49914_x >> 32LL;
	jule::U64 _5039_y0 = _49922_y & 4294967295LLU;
	jule::U64 _5049_y1 = _49922_y >> 32LL;
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + (_5059_w0 >> 32LL);
	jule::U64 _50713_w1 = _5069_t & 4294967295LLU;
	jule::U64 _5089_w2 = _5069_t >> 32LL;
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LL));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline jule::U32 _2286ec3c5_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _2286ec3c5_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _2286ec3c5_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _2286ec3c5_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline jule::F64 _22876159e_nan(void) {
	return static_cast<jule::F64>(_2286ec3c5_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _22876159e_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _22876159e_inf(jule::Int _6112_sign) {
	if (_6112_sign >= 0LL) {
		return static_cast<jule::F64>(_2286ec3c5_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_2286ec3c5_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _22876159e_is_inf(jule::F64 _7215_f,jule::Int _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline jule::F64 _22883ed31_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_2286ec3c5_f64_from_bits(static_cast<jule::U64>(_2286ec3c5_f64_bits(_4312_x) & 9223372036854775807LLU)));
}



inline std::tuple<jule::F64,jule::F64> _22889069a_modf(jule::F64 _4413_f) {
	jule::F64 _4423_integer = jule::F64();
	jule::F64 _4437_frac = jule::F64();
	
	jule::F64 _469_abs_f = _22883ed31_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if (_469_abs_f > 4503599627370496LL) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>(_469_abs_f + 4503599627370496LL);
		_4713_i-=4503599627370496LL;
		while (_4713_i > _469_abs_f) {
			{
				(_4713_i)--;
			}
		_iter_next_5056656752:;
		}
		_iter_end_5056656752:;
		if (_4413_f < 0LL) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::Str _22777cad8_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::Int _7837_prec,jule::Int _7848_bit_size) {
	return static_cast<jule::Str>(_22777cad8_generic_ftoa(nullptr,_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _22777cad8_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::Int _8259_prec,jule::Int _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	_22777cad8_FloatInfo* _8413_flt = nullptr;
	{
		auto &_match_expr{ _8270_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_5058112128:;
			{
				_8313_bits=static_cast<jule::U64>(static_cast<jule::U64>(_2286ec3c5_f32_bits(static_cast<jule::F32>(static_cast<jule::F32>(_8234_val)))));
				_8413_flt=(&(_22777cad8_F32_INFO));
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5058110912:;
			{
				_8313_bits=static_cast<jule::U64>(_2286ec3c5_f64_bits(_8234_val));
				_8413_flt=(&(_22777cad8_F64_INFO));
			}
		}
		else {
			_case_begin_5058110368:;
			{
				jule::panic(jule::Str("std::conv: illegal bit_size", 27) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoa.jule:93:9"));;
			}
		}
		_match_end_5058110288:;
	}
	jule::Bool _969_neg = (_8313_bits >> ((*(_8413_flt))._field_expbits + (*(_8413_flt))._field_mantbits)) != 0LL;
	jule::Int _9713_exp = static_cast<jule::Int>(_8313_bits >> (*(_8413_flt))._field_mantbits) & static_cast<jule::Int>((1LL << (*(_8413_flt))._field_expbits) - 1LL);
	jule::U64 _9813_mant = _8313_bits & ((static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits) - 1LL);
	{
		auto &_match_expr{ _9713_exp };
		
		if (_match_expr == static_cast<jule::Int>((1LL << (*(_8413_flt))._field_expbits) - 1LL)) {
			_case_begin_5058123536:;
			{
				jule::Str _10317_s = jule::Str();
				{
					
					if (_9813_mant != 0LL) {
						_case_begin_5058129168:;
						{
							_10317_s=jule::Str("nan", 3);
						}
					}
					else if (_969_neg) {
						_case_begin_5058128544:;
						{
							_10317_s=jule::Str("-inf", 4);
						}
					}
					else {
						_case_begin_5058127744:;
						{
							_10317_s=jule::Str("+inf", 4);
						}
					}
					_match_end_5058127632:;
				}
				return jule::append(_8221_dst,static_cast<jule::Slice<jule::U8>>(_10317_s));
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_5058122512:;
			{
				(_9713_exp)++;
			}
		}
		else {
			_case_begin_5058111008:;
			{
				_9813_mant|=static_cast<jule::Uint>(static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits);
			}
		}
		_match_end_5058122400:;
	}
	_9713_exp+=(*(_8413_flt))._field_bias;
	if (_8244_fmt == 'b') {
		return _22777cad8_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _22777cad8_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	
	_22777cad8_DecimalSlice _13413_digs = _22777cad8_DecimalSlice();
	jule::Bool _13513_ok = false;
	jule::Bool _1379_shortest = _8259_prec < 0LL;
	if (_1379_shortest) {
		_13413_digs._field_d=jule::Slice<jule::U8>::alloc(32LL);
		_2285d3a92_ryu_ftoa_shortest(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits))),(*(_8413_flt)));
		_13513_ok=true;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5058143088:;
				{
					_8259_prec=static_cast<jule::Int>(_22777cad8_max(static_cast<jule::Int>(_13413_digs._field_nd - 1LL),0LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_5058143184:;
				{
					_8259_prec=static_cast<jule::Int>(_22777cad8_max(static_cast<jule::Int>(_13413_digs._field_nd - _13413_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5058143744:;
				{
					_8259_prec=_13413_digs._field_nd;
				}
			}
			_match_end_5058143648:;
		}
	} else if (_8244_fmt != 'f') {
		jule::Int _15417_digits = _8259_prec;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5058150656:;
				{
					(_15417_digits)++;
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5058150992:;
				{
					if (_8259_prec == 0LL) {
						_8259_prec=1LL;
					}
					_15417_digits=_8259_prec;
				}
			}
			else {
				_case_begin_5058122720:;
				{
					_15417_digits=1LL;
				}
			}
			_match_end_5058149904:;
		}
		if ((_8270_bit_size == 32LL) && (_15417_digits <= 9LL)) {
			_13413_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_2285d3a92_ryu_ftoa_fixed32(_13413_digs,static_cast<jule::U32>(static_cast<jule::U32>(_9813_mant)),static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits))),_15417_digits);
			_13513_ok=true;
		} else if (_15417_digits <= 18LL) {
			_13413_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_2285d3a92_ryu_ftoa_fixed64(_13413_digs,_9813_mant,static_cast<jule::Int>(static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits))),_15417_digits);
			_13513_ok=true;
		}
	}
	if ((!(_13513_ok))) {
		return _22777cad8_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _22777cad8_fmt_digits(_8221_dst,_1379_shortest,_969_neg,_13413_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _22777cad8_big_ftoa(jule::Slice<jule::U8> _18417_dst,jule::Int _18434_prec,jule::U8 _18445_fmt,jule::Bool _18456_neg,jule::U64 _18513_mant,jule::Int _18524_exp,_22777cad8_FloatInfo& _18535_flt) {
	_2286660ca_Decimal _18613_d = _2286660ca_Decimal();
	_18613_d._method_assign(_18513_mant);
	_18613_d._method_shift(static_cast<jule::Int>(_18524_exp - static_cast<jule::Int>(_18535_flt._field_mantbits)));
	_22777cad8_DecimalSlice _18913_digs = _22777cad8_DecimalSlice();
	jule::Bool _1909_shortest = _18434_prec < 0LL;
	if (_1909_shortest) {
		_22777cad8_round_shortest(_18613_d,_18513_mant,_18524_exp,_18535_flt);
		_18913_digs=_22777cad8_DecimalSlice(_18613_d._field_d.slice(0LL),_18613_d._field_nd,_18613_d._field_dp,jule::Bool());
		{
			auto &_match_expr{ _18445_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5058174784:;
				{
					_18434_prec=static_cast<jule::Int>(_18913_digs._field_nd - 1LL);
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_5058176192:;
				{
					_18434_prec=static_cast<jule::Int>(_22777cad8_max(static_cast<jule::Int>(_18913_digs._field_nd - _18913_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5058176288:;
				{
					_18434_prec=_18913_digs._field_nd;
				}
			}
			_match_end_5058175744:;
		}
	} else {
		{
			auto &_match_expr{ _18445_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_5058180640:;
				{
					_18613_d._method_round(static_cast<jule::Int>(_18434_prec + 1LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_5058180736:;
				{
					_18613_d._method_round(static_cast<jule::Int>(_18613_d._field_dp + _18434_prec));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_5058180832:;
				{
					if (_18434_prec == 0LL) {
						_18434_prec=1LL;
					}
					_18613_d._method_round(_18434_prec);
				}
			}
			_match_end_5058180528:;
		}
		_18913_digs=_22777cad8_DecimalSlice(_18613_d._field_d.slice(0LL),_18613_d._field_nd,_18613_d._field_dp,jule::Bool());
	}
	return _22777cad8_fmt_digits(_18417_dst,_1909_shortest,_18456_neg,_18913_digs,_18434_prec,_18445_fmt);
}



inline jule::Slice<jule::U8> _22777cad8_fmt_digits(jule::Slice<jule::U8> _22119_dst,jule::Bool _22132_shortest,jule::Bool _22148_neg,_22777cad8_DecimalSlice _22213_digs,jule::Int _22237_prec,jule::U8 _22248_fmt) {
	{
		auto &_match_expr{ _22248_fmt };
		
		if (_match_expr == 'e' || _match_expr == 'E') {
			_case_begin_5058192656:;
			{
				return _22777cad8_fmt_e(_22119_dst,_22148_neg,_22213_digs,_22237_prec,_22248_fmt);
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_5058192752:;
			{
				return _22777cad8_fmt_f(_22119_dst,_22148_neg,_22213_digs,_22237_prec);
			}
		}
		else if (_match_expr == 'g' || _match_expr == 'G') {
			_case_begin_5058192944:;
			{
				jule::Int _23017_eprec = _22237_prec;
				if ((_23017_eprec > _22213_digs._field_nd) && (_22213_digs._field_nd >= _22213_digs._field_dp)) {
					_23017_eprec=_22213_digs._field_nd;
				}
				if (_22132_shortest) {
					_23017_eprec=6LL;
				}
				jule::Int _24013_exp = _22213_digs._field_dp - 1LL;
				if ((_24013_exp < -4LL) || (_24013_exp >= _23017_eprec)) {
					if (_22237_prec > _22213_digs._field_nd) {
						_22237_prec=_22213_digs._field_nd;
					}
					return _22777cad8_fmt_e(_22119_dst,_22148_neg,_22213_digs,static_cast<jule::Int>(_22237_prec - 1LL),static_cast<jule::U8>((_22248_fmt + 'e') - 'g'));
				}
				if (_22237_prec > _22213_digs._field_dp) {
					_22237_prec=_22213_digs._field_nd;
				}
				return _22777cad8_fmt_f(_22119_dst,_22148_neg,_22213_digs,static_cast<jule::Int>(_22777cad8_max(static_cast<jule::Int>(_22237_prec - _22213_digs._field_dp),0LL)));
			}
		}
		_match_end_5058192544:;
	}
	return jule::append(_22119_dst,jule::Slice<jule::U8>({'%',_22248_fmt}));
}



inline void _22777cad8_round_shortest(_2286660ca_Decimal& _25924_d,jule::U64 _25936_mant,jule::Int _25947_exp,_22777cad8_FloatInfo& _25958_flt) {
	if (_25936_mant == 0LL) {
		_25924_d._field_nd=0LL;
		return;
	}
	jule::Int _2809_minexp = _25958_flt._field_bias + 1LL;
	if ((_25947_exp > _2809_minexp) && ((332LL * (_25924_d._field_dp - _25924_d._field_nd)) >= (100LL * (_25947_exp - static_cast<jule::Int>(_25958_flt._field_mantbits))))) {
		return;
	}
	_2286660ca_Decimal _28913_upper = _2286660ca_Decimal();
	_28913_upper._method_assign(static_cast<jule::U64>((_25936_mant * 2LL) + 1LL));
	_28913_upper._method_shift(static_cast<jule::Int>((_25947_exp - static_cast<jule::Int>(_25958_flt._field_mantbits)) - 1LL));
	jule::U64 _29913_mantlo = 0LLU;
	jule::Int _30013_explo = 0LL;
	if ((_25936_mant > (1LL << _25958_flt._field_mantbits)) || (_25947_exp == _2809_minexp)) {
		_29913_mantlo=static_cast<jule::U64>(_25936_mant - 1LL);
		_30013_explo=_25947_exp;
	} else {
		_29913_mantlo=static_cast<jule::U64>((_25936_mant * 2LL) - 1LL);
		_30013_explo=static_cast<jule::Int>(_25947_exp - 1LL);
	}
	_2286660ca_Decimal _30813_lower = _2286660ca_Decimal();
	_30813_lower._method_assign(static_cast<jule::U64>((_29913_mantlo * 2LL) + 1LL));
	_30813_lower._method_shift(static_cast<jule::Int>((_30013_explo - static_cast<jule::Int>(_25958_flt._field_mantbits)) - 1LL));
	jule::Bool _3159_inclusive = jule::unsafe_mod(_25936_mant,2LL) == 0LL;
	jule::U8 _32813_upperdelta = 0LLU;
	jule::Int _33213_ui = 0LL;
	for (; ; (_33213_ui)++) {
		{
			jule::Int _33713_mi = (_33213_ui - _28913_upper._field_dp) + _25924_d._field_dp;
			if (_33713_mi >= _25924_d._field_nd) {
				goto _iter_end_5058217168;
			}
			jule::Int _34113_li = (_33213_ui - _28913_upper._field_dp) + _30813_lower._field_dp;
			jule::U8 _34217_l = static_cast<jule::U8>(48LLU);
			if ((_34113_li >= 0LL) && (_34113_li < _30813_lower._field_nd)) {
				_34217_l=_30813_lower._field_d[_34113_li];
			}
			jule::U8 _34617_m = static_cast<jule::U8>(48LLU);
			if (_33713_mi >= 0LL) {
				_34617_m=_25924_d._field_d[_33713_mi];
			}
			jule::U8 _35017_u = static_cast<jule::U8>(48LLU);
			if (_33213_ui < _28913_upper._field_nd) {
				_35017_u=_28913_upper._field_d[_33213_ui];
			}
			jule::Bool _35813_okdown = (_34217_l != _34617_m) || (_3159_inclusive && ((_34113_li + 1LL) == _30813_lower._field_nd));
			{
				
				if ((_32813_upperdelta == 0LL) && ((_34617_m + 1LL) < _35017_u)) {
					_case_begin_5058242016:;
					{
						_32813_upperdelta=2LL;
					}
				}
				else if ((_32813_upperdelta == 0LL) && (_34617_m != _35017_u)) {
					_case_begin_5058242112:;
					{
						_32813_upperdelta=1LL;
					}
				}
				else if ((_32813_upperdelta == 1LL) && ((_34617_m != '9') || (_35017_u != '0'))) {
					_case_begin_5058242208:;
					{
						_32813_upperdelta=2LL;
					}
				}
				_match_end_5058239184:;
			}
			jule::Bool _37913_okup = (_32813_upperdelta > 0LL) && ((_3159_inclusive || (_32813_upperdelta > 1LL)) || ((_33213_ui + 1LL) < _28913_upper._field_nd));
			{
				
				if (_35813_okdown && _37913_okup) {
					_case_begin_5058248672:;
					{
						_25924_d._method_round(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				else if (_35813_okdown) {
					_case_begin_5058249184:;
					{
						_25924_d._method_round_down(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				else if (_37913_okup) {
					_case_begin_5058249280:;
					{
						_25924_d._method_round_up(static_cast<jule::Int>(_33713_mi + 1LL));
						return;
					}
				}
				_match_end_5058242336:;
			}
		}
	_iter_next_5058217168:;
	}
	_iter_end_5058217168:;
}



inline jule::Slice<jule::U8> _22777cad8_fmt_e(jule::Slice<jule::U8> _39814_dst,jule::Bool _39827_neg,_22777cad8_DecimalSlice _39838_d,jule::Int _39855_prec,jule::U8 _39866_fmt) {
	if (_39827_neg) {
		_39814_dst.push('-');
	}
	jule::U8 _40513_ch = '0';
	if (_39838_d._field_nd != 0LL) {
		_40513_ch=_39838_d._field_d[0LL];
	}
	_39814_dst.push(_40513_ch);
	if (_39855_prec > 0LL) {
		_39814_dst.push('.');
		jule::Int _41417_i = 1LL;
		jule::Int _41513_m = _22777cad8_min(_39838_d._field_nd,static_cast<jule::Int>(_39855_prec + 1LL));
		if (_41417_i < _41513_m) {
			_39814_dst=jule::append(_39814_dst,_39838_d._field_d.slice(_41417_i,_41513_m));
			_41417_i=_41513_m;
		}
		for (; _41417_i <= _39855_prec; (_41417_i)++) {
			{
				_39814_dst.push('0');
			}
		_iter_next_5058263376:;
		}
		_iter_end_5058263376:;
	}
	_39814_dst.push(_39866_fmt);
	jule::Int _42713_exp = _39838_d._field_dp - 1LL;
	if (_39838_d._field_nd == 0LL) {
		_42713_exp=0LL;
	}
	if (_42713_exp < 0LL) {
		_40513_ch='-';
		_42713_exp=static_cast<jule::Int>((-(_42713_exp)));
	} else {
		_40513_ch='+';
	}
	_39814_dst.push(_40513_ch);
	{
		
		if (_42713_exp < 10LL) {
			_case_begin_5058269328:;
			{
				_39814_dst.push('0');_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(_42713_exp) + '0'));
			}
		}
		else if (_42713_exp < 100LL) {
			_case_begin_5058272064:;
			{
				_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,10LL)) + '0'));_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_42713_exp,10LL)) + '0'));
			}
		}
		else {
			_case_begin_5058272416:;
			{
				_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,100LL)) + '0'));_39814_dst.push(static_cast<jule::U8>(jule::unsafe_mod(static_cast<jule::U8>(jule::unsafe_div(_42713_exp,10LL)),10LL) + '0'));_39814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_42713_exp,10LL)) + '0'));
			}
		}
		_match_end_5058269776:;
	}
	return _39814_dst;
}



inline jule::Slice<jule::U8> _22777cad8_fmt_f(jule::Slice<jule::U8> _45314_dst,jule::Bool _45327_neg,_22777cad8_DecimalSlice _45338_d,jule::Int _45355_prec) {
	if (_45327_neg) {
		_45314_dst.push('-');
	}
	if (_45338_d._field_dp > 0LL) {
		jule::Int _46117_m = _22777cad8_min(_45338_d._field_nd,_45338_d._field_dp);
		_45314_dst=jule::append(_45314_dst,_45338_d._field_d.slice(0LL,_46117_m));
		for (; _46117_m < _45338_d._field_dp; (_46117_m)++) {
			{
				_45314_dst.push('0');
			}
		_iter_next_5058285984:;
		}
		_iter_end_5058285984:;
	} else {
		_45314_dst.push('0');
	}
	if (_45355_prec > 0LL) {
		_45314_dst.push('.');
		jule::Int _47217_i = 0LL;
		for (; _47217_i < _45355_prec; (_47217_i)++) {
			{
				jule::U8 _47421_ch = static_cast<jule::U8>(48LLU);
				jule::Int _47517_j = _45338_d._field_dp + _47217_i;
				if ((0LL <= _47517_j) && (_47517_j < _45338_d._field_nd)) {
					_47421_ch=_45338_d._field_d[_47517_j];
				}
				_45314_dst.push(_47421_ch);
			}
		_iter_next_5058273584:;
		}
		_iter_end_5058273584:;
	}
	return _45314_dst;
}



inline jule::Slice<jule::U8> _22777cad8_fmt_b(jule::Slice<jule::U8> _48614_dst,jule::Bool _48627_neg,jule::U64 _48638_mant,jule::Int _48653_exp,_22777cad8_FloatInfo& _48664_flt) {
	if (_48627_neg) {
		_48614_dst.push('-');
	}
	std::tie(_48614_dst,std::ignore) = _22866a079_fmt_bits(_48614_dst,_48638_mant,10LL,false,true);
	_48614_dst.push('p');
	_48653_exp-=static_cast<jule::Int>(static_cast<jule::Int>(_48664_flt._field_mantbits));
	if (_48653_exp >= 0LL) {
		_48614_dst.push('+');
	}
	std::tie(_48614_dst,std::ignore) = _22866a079_fmt_bits(_48614_dst,static_cast<jule::U64>(static_cast<jule::U64>(_48653_exp)),10LL,_48653_exp < 0LL,true);
	return _48614_dst;
}



inline jule::Slice<jule::U8> _22777cad8_fmt_x(jule::Slice<jule::U8> _50814_dst,jule::Int _50827_prec,jule::U8 _50838_fmt,jule::Bool _50849_neg,jule::U64 _50913_mant,jule::Int _50928_exp,_22777cad8_FloatInfo& _50939_flt) {
	if (_50913_mant == 0LL) {
		_50928_exp=0LL;
	}
	_50913_mant<<=static_cast<jule::Uint>(60LL - _50939_flt._field_mantbits);
	while ((_50913_mant != 0LL) && ((_50913_mant & 1152921504606846976LLU) == 0LL)) {
		{
			_50913_mant<<=1LL;
			(_50928_exp)--;
		}
	_iter_next_5058305024:;
	}
	_iter_end_5058305024:;
	if ((_50827_prec >= 0LL) && (_50827_prec < 15LL)) {
		jule::Uint _52313_shift = static_cast<jule::Uint>(_50827_prec * 4LL);
		jule::U64 _52413_extra = (_50913_mant << _52313_shift) & 1152921504606846975LLU;
		_50913_mant>>=static_cast<jule::Uint>(60LL - _52313_shift);
		if ((_52413_extra | (_50913_mant & 1LL)) > 576460752303423488LLU) {
			(_50913_mant)++;
		}
		_50913_mant<<=static_cast<jule::Uint>(60LL - _52313_shift);
		if ((_50913_mant & 2305843009213693952LLU) != 0LL) {
			_50913_mant>>=1LL;
			(_50928_exp)++;
		}
	}
	jule::Str _53713_hex = jule::Str("0123456789abcdef", 16);
	if (_50838_fmt == 'X') {
		_53713_hex=jule::Str("0123456789ABCDEF", 16);
	}
	if (_50849_neg) {
		_50814_dst.push('-');
	}
	_50814_dst.push('0');_50814_dst.push(_50838_fmt);_50814_dst.push(static_cast<jule::U8>('0' + static_cast<jule::U8>((_50913_mant >> 60LL) & 1LL)));
	_50913_mant<<=4LL;
	if ((_50827_prec < 0LL) && (_50913_mant != 0LL)) {
		_50814_dst.push('.');
		while (_50913_mant != 0LL) {
			{
				_50814_dst.push(_53713_hex[static_cast<jule::Int>((_50913_mant >> 60LL) & 15LL)]);
				_50913_mant<<=4LL;
			}
		_iter_next_5058317120:;
		}
		_iter_end_5058317120:;
	} else if (_50827_prec > 0LL) {
		_50814_dst.push('.');
		jule::Int _55817_i = 0LL;
		for (; _55817_i < _50827_prec; (_55817_i)++) {
			{
				_50814_dst.push(_53713_hex[static_cast<jule::Int>((_50913_mant >> 60LL) & 15LL)]);
				_50913_mant<<=4LL;
			}
		_iter_next_5058313408:;
		}
		_iter_end_5058313408:;
	}
	jule::U8 _56613_ch = static_cast<jule::U8>(80LLU);
	if (_50838_fmt == _2277861c9_lower(_50838_fmt)) {
		_56613_ch='p';
	}
	_50814_dst.push(_56613_ch);
	if (_50928_exp < 0LL) {
		_56613_ch='-';
		_50928_exp=static_cast<jule::Int>((-(_50928_exp)));
	} else {
		_56613_ch='+';
	}
	_50814_dst.push(_56613_ch);
	{
		
		if (_50928_exp < 100LL) {
			_case_begin_5058347328:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		else if (_50928_exp < 1000LL) {
			_case_begin_5058347584:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,100LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(jule::unsafe_div(_50928_exp,10LL),10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		else {
			_case_begin_5058347232:;
			{
				_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,1000LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(jule::unsafe_mod(static_cast<jule::U8>(jule::unsafe_div(_50928_exp,100LL)),10LL) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(jule::unsafe_div(_50928_exp,10LL),10LL)) + '0'));_50814_dst.push(static_cast<jule::U8>(static_cast<jule::U8>(jule::unsafe_mod(_50928_exp,10LL)) + '0'));
			}
		}
		_match_end_5058329728:;
	}
	return _50814_dst;
}



inline jule::Int _22777cad8_min(jule::Int _5918_a,jule::Int _59116_b) {
	if (_5918_a < _59116_b) {
		return _5918_a;
	}
	return _59116_b;
}



inline jule::Int _22777cad8_max(jule::Int _5988_a,jule::Int _59816_b) {
	if (_5988_a > _59816_b) {
		return _5988_a;
	}
	return _59816_b;
}



inline jule::U8 _2277861c9_lower(jule::U8 _4910_c) {
	return static_cast<jule::U8>(_4910_c | 32LL);
}



inline std::tuple<jule::U64,jule::Int> _2277861c9_parse_uint(jule::Str _5423_s,jule::Int _5435_base,jule::Int _5450_bit_size) {
	if (_5423_s == jule::Str()) {
		return std::make_tuple(0LL,2LLU);
	}
	{
		
		if ((2LL <= _5435_base) && (_5435_base <= 36LL)) {
			_case_begin_5058366944:;
		}
		else if (_5435_base == 0LL) {
			_case_begin_5058366080:;
			{
				_5435_base=10LL;
				if (_5423_s[0LL] == '0') {
					{
						
						if ((_5423_s.len() >= 3LL) && (_2277861c9_lower(_5423_s[1LL]) == 'b')) {
							_case_begin_5058371984:;
							{
								_5435_base=2LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_2277861c9_lower(_5423_s[1LL]) == 'o')) {
							_case_begin_5058371520:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_2277861c9_lower(_5423_s[1LL]) == 'x')) {
							_case_begin_5058371040:;
							{
								_5435_base=16LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else {
							_case_begin_5058370240:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(1LL);
							}
						}
						_match_end_5058370064:;
					}
				}
			}
		}
		else {
			_case_begin_5058363488:;
			{
				return std::make_tuple(0LL,3LLU);
			}
		}
		_match_end_5058363888:;
	}
	if (_5450_bit_size == 0LL) {
		_5450_bit_size=64LLU;
	} else if ((_5450_bit_size < 0LL) || (_5450_bit_size > 64LL)) {
		return std::make_tuple(0LL,4LLU);
	}
	jule::U64 _9313_cutoff = 0LLU;
	{
		auto &_match_expr{ _5435_base };
		
		if (_match_expr == 10LL) {
			_case_begin_5058383536:;
			{
				_9313_cutoff=1844674407370955265LLU;
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_5058382944:;
			{
				_9313_cutoff=1152921504606846977LLU;
			}
		}
		else {
			_case_begin_5058380320:;
			{
				_9313_cutoff=static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(_5435_base)) + 1LL);
			}
		}
		_match_end_5058382128:;
	}
	jule::U64 _10013_max_val = 0LLU;
	{
		auto &_match_expr{ _5450_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_5058385232:;
			{
				_10013_max_val=4294967295LLU;
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5058386528:;
			{
				_10013_max_val=jule::MAX_U64;
			}
		}
		_match_end_5058386432:;
	}
	jule::U64 _11213_n = 0LLU;
	{
		auto &expr = _5423_s;
		auto it = expr.begin();
		_iter_begin_5058389888:;
		if (it != expr.end()) {
			jule::U8 &_2277861c9_c = *it;
			{
				jule::U8 _11417_d = 0LLU;
				{
					
					if (('0' <= _2277861c9_c) && (_2277861c9_c <= '9')) {
						_case_begin_5058394160:;
						{
							_11417_d=static_cast<jule::U8>(_2277861c9_c - '0');
						}
					}
					else if (('a' <= _2277861c9_lower(_2277861c9_c)) && (_2277861c9_lower(_2277861c9_c) <= 'z')) {
						_case_begin_5058393296:;
						{
							_11417_d=static_cast<jule::U8>((_2277861c9_lower(_2277861c9_c) - 'a') + 10LL);
						}
					}
					else {
						_case_begin_5058392288:;
						{
							return std::make_tuple(0LL,2LLU);
						}
					}
					_match_end_5058392176:;
				}
				if (_11417_d >= static_cast<jule::U8>(_5435_base)) {
					return std::make_tuple(0LL,2LLU);
				}
				if (_11213_n >= _9313_cutoff) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n*=static_cast<jule::U64>(static_cast<jule::U64>(_5435_base));
				jule::U64 _13413_n1 = _11213_n + static_cast<jule::U64>(_11417_d);
				if ((_13413_n1 < _11213_n) || (_13413_n1 > _10013_max_val)) {
					return std::make_tuple(_10013_max_val,1LLU);
				}
				_11213_n=_13413_n1;
			}
			_iter_next_5058389888:;
			++it;
			goto _iter_begin_5058389888;
		}
		_iter_end_5058389888:;
	}
	return std::make_tuple(_11213_n,0LLU);
}



inline std::tuple<jule::I64,jule::Int> _2277861c9_parse_int(jule::Str _16522_s,jule::Int _16530_base,jule::Int _16545_bit_size) {
	jule::I64 _16562_i = jule::I64();
	jule::Int _16570_err = 0LLU;
	if (_16522_s == jule::Str()) {
		_16562_i = 0LL;
		_16570_err = 2LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::Bool _17113_neg = false;
	if (_16522_s[0LL] == '+') {
		_16522_s=_16522_s.slice(1LL);
	} else if (_16522_s[0LL] == '-') {
		_17113_neg=true;
		_16522_s=_16522_s.slice(1LL);
	}
	jule::Uint _18013_un = 0LLU;
	std::tie(_18013_un,_16570_err) = _2277861c9_parse_uint(_16522_s,_16530_base,_16545_bit_size);
	if ((_16570_err != 0LLU) && (_16570_err != 1LLU)) {
		_16562_i = 0LL;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_16545_bit_size == 0LL) {
		_16545_bit_size=64LLU;
	}
	jule::U64 _1909_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::Uint>(_16545_bit_size - 1LL));
	if ((!(_17113_neg)) && (_18013_un >= _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>(static_cast<jule::I64>(_1909_cutoff - 1LL));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	if (_17113_neg && (_18013_un > _1909_cutoff)) {
		_16562_i = static_cast<jule::I64>((-(static_cast<jule::I64>(_1909_cutoff))));
		_16570_err = 1LLU;
		return std::make_tuple(_16562_i,_16570_err);
	}
	jule::I64 _19713_n = static_cast<jule::I64>(_18013_un);
	if (_17113_neg) {
		_19713_n=static_cast<jule::I64>((-(_19713_n)));
	}
	_16562_i = _19713_n;
	_16570_err = 0LLU;
	return std::make_tuple(_16562_i,_16570_err);
}



inline std::tuple<jule::F64,jule::Bool> _22778ec3d_eisel_lemire64(jule::U64 _4123_man,jule::Int _4133_exp10,jule::Bool _4145_neg) {
	jule::F64 _4158_f = jule::F64();
	jule::Bool _4166_ok = jule::Bool();
	if (_4123_man == 0LL) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_2286ec3c5_f64_from_bits(9223372036854775808LLU));
		}
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::Int _579_clz = _228bb20b5_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::Uint>(static_cast<jule::Uint>(_579_clz));
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL) - static_cast<jule::U64>(_579_clz);
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _228bb20b5_mul64(_4123_man,_22778ec3d_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(1LL));
	if (((_6314_x_hi & 511LL) == 511LL) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _228bb20b5_mul64(_4123_man,_22778ec3d_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(0LL));
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LL) == 511LL) && ((_6829_merged_lo + 1LL) == 0LL)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = _6314_x_hi >> 63LL;
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> (_799_msb + 9LL);
	_6013_ret_exp2-=static_cast<jule::U64>(1LL ^ _799_msb);
	if (((_6324_x_lo == 0LL) && ((_6314_x_hi & 511LL) == 0LL)) && ((_8013_ret_mantissa & 3LL) == 1LL)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>(_8013_ret_mantissa & 1LL);
	_8013_ret_mantissa>>=1LL;
	if ((_8013_ret_mantissa >> 53LL) > 0LL) {
		_8013_ret_mantissa>>=1LL;
		_6013_ret_exp2+=1LL;
	}
	if ((_6013_ret_exp2 - 1LL) >= 2046LL) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LL) | (_8013_ret_mantissa & 4503599627370495LL);
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_2286ec3c5_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _22778ec3d_eisel_lemire32(jule::U64 _11023_man,jule::Int _11033_exp10,jule::Bool _11045_neg) {
	jule::F32 _11058_f = jule::F32();
	jule::Bool _11066_ok = jule::Bool();
	if (_11023_man == 0LL) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_2286ec3c5_f32_from_bits(2147483648LLU));
		}
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::Int _1329_clz = _228bb20b5_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::Uint>(static_cast<jule::Uint>(_1329_clz));
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL) - static_cast<jule::U64>(_1329_clz);
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _228bb20b5_mul64(_11023_man,_22778ec3d_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(1LL));
	if (((_13814_x_hi & 274877906943LL) == 274877906943LL) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _228bb20b5_mul64(_11023_man,_22778ec3d_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(0LL));
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LL) == 274877906943LL) && ((_14329_merged_lo + 1LL) == 0LL)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = _13814_x_hi >> 63LL;
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> (_1549_msb + 38LL);
	_13513_ret_exp2-=static_cast<jule::U64>(1LL ^ _1549_msb);
	if (((_13824_x_lo == 0LL) && ((_13814_x_hi & 274877906943LL) == 0LL)) && ((_15513_ret_mantissa & 3LL) == 1LL)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>(_15513_ret_mantissa & 1LL);
	_15513_ret_mantissa>>=1LL;
	if ((_15513_ret_mantissa >> 24LL) > 0LL) {
		_15513_ret_mantissa>>=1LL;
		_13513_ret_exp2+=1LL;
	}
	if ((_13513_ret_exp2 - 1LL) >= 254LL) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LL) | (_15513_ret_mantissa & 8388607LL);
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LL;
	}
	_11058_f = static_cast<jule::F32>(_2286ec3c5_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_17813_ret_bits))));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::Int _2284c0eac_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > _4534_s.len()) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::Int _5013_i = 0LL;
	for (; _5013_i < _4613_n; (_5013_i)++) {
		{
			jule::U8 _5217_c = _4534_s[_5013_i];
			if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
				_5217_c+=32LL;
			}
			if (_5217_c != _4542_prefix[_5013_i]) {
				return _5013_i;
			}
		}
	_iter_next_5058497312:;
	}
	_iter_end_5058497312:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::Int,jule::Bool> _2284c0eac_special(jule::Str _6816_s) {
	jule::F64 _6826_f = jule::F64();
	jule::Int _6834_n = jule::Int();
	jule::Bool _6842_ok = jule::Bool();
	if (_6816_s == jule::Str()) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::Int _7213_sign = 1LL;
	jule::Int _7313_nsign = 0LL;
	{
		auto &_match_expr{ _6816_s[0LL] };
		
		if (_match_expr == '+' || _match_expr == '-') {
			_case_begin_5058510096:;
			{
				if (_6816_s[0LL] == '-') {
					_7213_sign=-1LL;
				}
				_7313_nsign=1LL;
				_6816_s=_6816_s.slice(1LL);
				goto _case_begin_5058510192;
			}
		}
		else if (_match_expr == 'i' || _match_expr == 'I') {
			_case_begin_5058510192:;
			{
				jule::Int _8317_case_n = _2284c0eac_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
				if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
					_8317_case_n=3LL;
				}
				if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
					_6826_f = static_cast<jule::F64>(_22876159e_inf(_7213_sign));
					_6834_n = static_cast<jule::Int>(_7313_nsign + _6834_n);
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		else if (_match_expr == 'n' || _match_expr == 'N') {
			_case_begin_5058510288:;
			{
				if (_2284c0eac_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL) {
					_6826_f = static_cast<jule::F64>(_22876159e_nan());
					_6834_n = 3LL;
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		_match_end_5058510016:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _2284c0eac_read_float(jule::Str _10315_s) {
	jule::U64 _10325_mantissa = jule::U64();
	jule::Int _10340_exp = jule::Int();
	jule::Bool _10350_neg = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10438_hex = jule::Bool();
	jule::Int _10449_i = jule::Int();
	jule::Bool _10457_ok = jule::Bool();
	if (_10449_i >= _10315_s.len()) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		
		if (_10315_s[_10449_i] == '+') {
			_case_begin_5058529232:;
			{
				(_10449_i)++;
			}
		}
		else if (_10315_s[_10449_i] == '-') {
			_case_begin_5058529328:;
			{
				_10350_neg=true;
				(_10449_i)++;
			}
		}
		_match_end_5058528624:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::Int _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < _10315_s.len()) && (_10315_s[_10449_i] == '0')) && (_2277861c9_lower(_10315_s[_10449_i + 1LL]) == 'x')) {
		_11813_base=16LL;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::Int _13013_nd = 0LL;
	jule::Int _13113_nd_mant = 0LL;
	jule::Int _13213_dp = 0LL;
	for (; _10449_i < _10315_s.len(); (_10449_i)++) {
		{
			jule::U8 _13413_c = _10315_s[_10449_i];
			{
				
				if (_13413_c == '.') {
					_case_begin_5058545648:;
					{
						if (_12813_sawdot) {
							goto _julec_label_loop_end;
						}
						_12813_sawdot=true;
						_13213_dp=_13013_nd;
						goto _iter_next_5058542144;
					}
				}
				else if (('0' <= _13413_c) && (_13413_c <= '9')) {
					_case_begin_5058545744:;
					{
						_12913_sawdigits=true;
						if ((_13413_c == '0') && (_13013_nd == 0LL)) {
							(_13213_dp)--;
							goto _iter_next_5058542144;
						}
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=_11813_base;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>(_13413_c - '0'));
							(_13113_nd_mant)++;
						} else if (_13413_c != '0') {
							_10425_trunc=true;
						}
						goto _iter_next_5058542144;
					}
				}
				else if (((_11813_base == 16LL) && ('a' <= _2277861c9_lower(_13413_c))) && (_2277861c9_lower(_13413_c) <= 'f')) {
					_case_begin_5058545840:;
					{
						_12913_sawdigits=true;
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=16LL;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>((_2277861c9_lower(_13413_c) - 'a') + 10LL));
							(_13113_nd_mant)++;
						} else {
							_10425_trunc=true;
						}
						goto _iter_next_5058542144;
					}
				}
				_match_end_5058545568:;
			}
			goto _iter_end_5058542144;
		}
	_iter_next_5058542144:;
	}
	_iter_end_5058542144:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if (_11813_base == 16LL) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < _10315_s.len()) && (_2277861c9_lower(_10315_s[_10449_i]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= _10315_s.len()) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _19517_esign = 1LL;
		if (_10315_s[_10449_i] == '+') {
			(_10449_i)++;
		} else if (_10315_s[_10449_i] == '-') {
			(_10449_i)++;
			_19517_esign=-1LL;
		}
		if (((_10449_i >= _10315_s.len()) || (_10315_s[_10449_i] < '0')) || (_10315_s[_10449_i] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _20517_e = 0LL;
		for (; (_10449_i < _10315_s.len()) && (('0' <= _10315_s[_10449_i]) && (_10315_s[_10449_i] <= '9')); (_10449_i)++) {
			{
				if (_20517_e < 10000LL) {
					_20517_e=static_cast<jule::Int>(((_20517_e * 10LL) + static_cast<jule::Int>(_10315_s[_10449_i])) - '0');
				}
			}
		_iter_next_5058568224:;
		}
		_iter_end_5058568224:;
		_13213_dp+=static_cast<jule::Int>(_20517_e * _19517_esign);
	} else if (_11813_base == 16LL) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if (_10325_mantissa != 0LL) {
		_10340_exp=static_cast<jule::Int>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _2284c0eac_atof64exact(jule::U64 _47216_mantissa,jule::Int _47235_exp,jule::Bool _47245_neg) {
	jule::F64 _47258_f = jule::F64();
	jule::Bool _47266_ok = jule::Bool();
	if ((_47216_mantissa >> _22777cad8_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_47258_f,_47266_ok);
	}
	_47258_f=static_cast<jule::F64>(static_cast<jule::F64>(_47216_mantissa));
	if (_47245_neg) {
		_47258_f=static_cast<jule::F64>((-(_47258_f)));
	}
	{
		
		if (_47235_exp == 0LL) {
			_case_begin_5058598016:;
			{
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		else if ((_47235_exp > 0LL) && (_47235_exp <= 37LL)) {
			_case_begin_5058598112:;
			{
				if (_47235_exp > 22LL) {
					_47258_f*=_2284c0eac_F64_POW10[_47235_exp - 22LL];
					_47235_exp=22LL;
				}
				if ((_47258_f > 1000000000000000LL) || (_47258_f < -1000000000000000LL)) {
					return std::make_tuple(_47258_f,_47266_ok);
				}
				_47258_f = static_cast<jule::F64>(_47258_f * _2284c0eac_F64_POW10[_47235_exp]);
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		else if ((_47235_exp < 0LL) && (_47235_exp >= -22LL)) {
			_case_begin_5058598208:;
			{
				_47258_f = static_cast<jule::F64>(jule::div(_47258_f,_2284c0eac_F64_POW10[(-(_47235_exp))]));
				_47266_ok = true;
				return std::make_tuple(_47258_f,_47266_ok);
			}
		}
		_match_end_5058597200:;
	}
	return std::make_tuple(_47258_f,_47266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _2284c0eac_atof32exact(jule::U64 _50616_mantissa,jule::Int _50635_exp,jule::Bool _50649_neg) {
	jule::F32 _50662_f = jule::F32();
	jule::Bool _50670_ok = jule::Bool();
	if ((_50616_mantissa >> _22777cad8_F32_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_50662_f,_50670_ok);
	}
	_50662_f=static_cast<jule::F32>(static_cast<jule::F32>(_50616_mantissa));
	if (_50649_neg) {
		_50662_f=static_cast<jule::F32>((-(_50662_f)));
	}
	{
		
		if (_50635_exp == 0LL) {
			_case_begin_5058613296:;
			{
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		else if ((_50635_exp > 0LL) && (_50635_exp <= 17LL)) {
			_case_begin_5058613408:;
			{
				if (_50635_exp > 10LL) {
					_50662_f*=_2284c0eac_F32_POW10[_50635_exp - 10LL];
					_50635_exp=10LL;
				}
				if ((_50662_f > 10000000LL) || (_50662_f < -10000000LL)) {
					return std::make_tuple(_50662_f,_50670_ok);
				}
				_50662_f = static_cast<jule::F32>(_50662_f * _2284c0eac_F32_POW10[_50635_exp]);
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		else if ((_50635_exp < 0LL) && (_50635_exp >= -10LL)) {
			_case_begin_5058613520:;
			{
				_50662_f = static_cast<jule::F32>(jule::div(_50662_f,_2284c0eac_F32_POW10[(-(_50635_exp))]));
				_50670_ok = true;
				return std::make_tuple(_50662_f,_50670_ok);
			}
		}
		_match_end_5058613120:;
	}
	return std::make_tuple(_50662_f,_50670_ok);
}



inline std::tuple<jule::F64,jule::Int> _2284c0eac_atof_hex(jule::Str _54213_s,_22777cad8_FloatInfo& _54222_flt,jule::U64 _54242_mantissa,jule::Int _54261_exp,jule::Bool _54271_neg,jule::Bool _54282_trunc) {
	jule::Int _5439_max_exp = (static_cast<jule::Int>(1LL << _54222_flt._field_expbits) + _54222_flt._field_bias) - 2LL;
	jule::Int _5449_min_exp = _54222_flt._field_bias + 1LL;
	_54261_exp+=static_cast<jule::Int>(static_cast<jule::Int>(_54222_flt._field_mantbits));
	while ((_54242_mantissa != 0LL) && ((_54242_mantissa >> (_54222_flt._field_mantbits + 2LL)) == 0LL)) {
		{
			_54242_mantissa<<=1LL;
			(_54261_exp)--;
		}
	_iter_next_5058627296:;
	}
	_iter_end_5058627296:;
	if (_54282_trunc) {
		_54242_mantissa|=1LL;
	}
	while ((_54242_mantissa >> ((1LL + _54222_flt._field_mantbits) + 2LL)) != 0LL) {
		{
			_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
			(_54261_exp)++;
		}
	_iter_next_5058629984:;
	}
	_iter_end_5058629984:;
	while ((_54242_mantissa > 1LL) && (_54261_exp < (_5449_min_exp - 2LL))) {
		{
			_54242_mantissa=static_cast<jule::U64>((_54242_mantissa >> 1LL) | (_54242_mantissa & 1LL));
			(_54261_exp)++;
		}
	_iter_next_5058634080:;
	}
	_iter_end_5058634080:;
	jule::U64 _57413_round = _54242_mantissa & 3LL;
	_54242_mantissa>>=2LL;
	_57413_round|=static_cast<jule::U64>(_54242_mantissa & 1LL);
	_54261_exp+=2LL;
	if (_57413_round == 3LL) {
		(_54242_mantissa)++;
		if (_54242_mantissa == (1LL << (1LL + _54222_flt._field_mantbits))) {
			_54242_mantissa>>=1LL;
			(_54261_exp)++;
		}
	}
	if ((_54242_mantissa >> _54222_flt._field_mantbits) == 0LL) {
		_54261_exp=_54222_flt._field_bias;
	}
	jule::Int _58913_err = 0LLU;
	if (_54261_exp > _5439_max_exp) {
		_54242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>(1LL << _54222_flt._field_mantbits));
		_54261_exp=static_cast<jule::Int>(_5439_max_exp + 1LL);
		_58913_err=1LLU;
	}
	jule::U64 _59613_bits = _54242_mantissa & ((1LL << _54222_flt._field_mantbits) - 1LL);
	_59613_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_54261_exp - _54222_flt._field_bias) & static_cast<jule::Int>((1LL << _54222_flt._field_expbits) - 1LL)) << _54222_flt._field_mantbits);
	if (_54271_neg) {
		_59613_bits|=static_cast<jule::Uint>((1LL << _54222_flt._field_mantbits) << _54222_flt._field_expbits);
	}
	if (_54222_flt == _22777cad8_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_2286ec3c5_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_59613_bits))))),_58913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_2286ec3c5_f64_from_bits(_59613_bits)),_58913_err);
}



inline std::tuple<jule::F32,jule::Int,jule::Int> _2284c0eac_atof32(jule::Str _60711_s) {
	jule::F32 _60721_f = jule::F32();
	jule::Int _60729_n = jule::Int();
	jule::Int _60737_err = 0LLU;
	{
		jule::F64 _60914_val;
		jule::Int _60919__n;
		jule::Bool _60923_ok;
		std::tie(_60914_val,_60919__n,_60923_ok) = _2284c0eac_special(_60711_s);
		if (_60923_ok) {
			_60721_f = static_cast<jule::F32>(static_cast<jule::F32>(_60914_val));
			_60729_n = _60919__n;
			_60737_err = 0LLU;
			return std::make_tuple(_60721_f,_60729_n,_60737_err);
		}
	}
	jule::U64 _61510_mantissa;
	jule::Int _61520_exp;
	jule::Bool _61525_neg;
	jule::Bool _61530_trunc;
	jule::Bool _61537_hex;
	jule::Int _61542__n;
	jule::Bool _61550_ok;
	std::tie(_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc,_61537_hex,_61542__n,_61550_ok) = _2284c0eac_read_float(_60711_s);
	_60729_n=_61542__n;
	if ((!(_61550_ok))) {
		_60721_f = 0LL;
		_60737_err = 2LLU;
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	if (_61537_hex) {
		jule::F64 _62217_ff = 0LL;
		std::tie(_62217_ff,_60737_err) = _2284c0eac_atof_hex(_60711_s.slice(0LL,_60729_n),_22777cad8_F32_INFO,_61510_mantissa,_61520_exp,_61525_neg,_61530_trunc);
		_60721_f = static_cast<jule::F32>(static_cast<jule::F32>(_62217_ff));
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	{
		if ((!(_61530_trunc))) {
			std::tie(_60721_f,_61550_ok) = _2284c0eac_atof32exact(_61510_mantissa,_61520_exp,_61525_neg);
			if (_61550_ok) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
		}
		std::tie(_60721_f,_61550_ok) = _22778ec3d_eisel_lemire32(_61510_mantissa,_61520_exp,_61525_neg);
		if (_61550_ok) {
			if ((!(_61530_trunc))) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
			jule::F32 _64421_f_up = 0LL;
			std::tie(_64421_f_up,_61550_ok) = _22778ec3d_eisel_lemire32(static_cast<jule::U64>(_61510_mantissa + 1LL),_61520_exp,_61525_neg);
			if (_61550_ok && (_60721_f == _64421_f_up)) {
				_60737_err = 0LLU;
				return std::make_tuple(_60721_f,_60729_n,_60737_err);
			}
		}
	}
	_2286660ca_Decimal _65313_d = _2286660ca_Decimal();
	if ((!(_65313_d._method_set(_60711_s.slice(0LL,_60729_n))))) {
		_60721_f = 0LL;
		_60737_err = 2LLU;
		return std::make_tuple(_60721_f,_60729_n,_60737_err);
	}
	jule::U64 _65710_b;
	jule::Bool _65713_ovf;
	std::tie(_65710_b,_65713_ovf) = _65313_d._method_float_bits(_22777cad8_F32_INFO);
	_60721_f=static_cast<jule::F32>(_2286ec3c5_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_65710_b))));
	if (_65713_ovf) {
		_60737_err=1LLU;
	}
	return std::make_tuple(_60721_f,_60729_n,_60737_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _2284c0eac_atof64(jule::Str _66511_s) {
	jule::F64 _66521_f = jule::F64();
	jule::Int _66529_n = jule::Int();
	jule::Int _66537_err = 0LLU;
	{
		jule::F64 _66714_val;
		jule::Int _66719__n;
		jule::Bool _66723_ok;
		std::tie(_66714_val,_66719__n,_66723_ok) = _2284c0eac_special(_66511_s);
		if (_66723_ok) {
			_66521_f = _66714_val;
			_66529_n = _66719__n;
			_66537_err = 0LLU;
			return std::make_tuple(_66521_f,_66529_n,_66537_err);
		}
	}
	jule::U64 _67310_mantissa;
	jule::Int _67320_exp;
	jule::Bool _67325_neg;
	jule::Bool _67330_trunc;
	jule::Bool _67337_hex;
	jule::Int _67342__n;
	jule::Bool _67350_ok;
	std::tie(_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc,_67337_hex,_67342__n,_67350_ok) = _2284c0eac_read_float(_66511_s);
	_66529_n=_67342__n;
	if ((!(_67350_ok))) {
		_66521_f = 0LL;
		_66537_err = 2LLU;
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	if (_67337_hex) {
		std::tie(_66521_f,_66537_err) = _2284c0eac_atof_hex(_66511_s.slice(0LL,_66529_n),_22777cad8_F64_INFO,_67310_mantissa,_67320_exp,_67325_neg,_67330_trunc);
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	{
		if ((!(_67330_trunc))) {
			std::tie(_66521_f,_67350_ok) = _2284c0eac_atof64exact(_67310_mantissa,_67320_exp,_67325_neg);
			if (_67350_ok) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
		}
		std::tie(_66521_f,_67350_ok) = _22778ec3d_eisel_lemire64(_67310_mantissa,_67320_exp,_67325_neg);
		if (_67350_ok) {
			if ((!(_67330_trunc))) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
			jule::F64 _70121_f_up = 0LL;
			std::tie(_70121_f_up,_67350_ok) = _22778ec3d_eisel_lemire64(static_cast<jule::U64>(_67310_mantissa + 1LL),_67320_exp,_67325_neg);
			if (_67350_ok && (_66521_f == _70121_f_up)) {
				_66537_err = 0LLU;
				return std::make_tuple(_66521_f,_66529_n,_66537_err);
			}
		}
	}
	_2286660ca_Decimal _71013_d = _2286660ca_Decimal();
	if ((!(_71013_d._method_set(_66511_s.slice(0LL,_66529_n))))) {
		_66521_f = 0LL;
		_66537_err = 2LLU;
		return std::make_tuple(_66521_f,_66529_n,_66537_err);
	}
	jule::U64 _71410_b;
	jule::Bool _71413_ovf;
	std::tie(_71410_b,_71413_ovf) = _71013_d._method_float_bits(_22777cad8_F64_INFO);
	_66521_f=static_cast<jule::F64>(_2286ec3c5_f64_from_bits(_71410_b));
	if (_71413_ovf) {
		_66537_err=1LLU;
	}
	return std::make_tuple(_66521_f,_66529_n,_66537_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _2284c0eac_parse_float_prefix(jule::Str _72223_s,jule::Int _72231_bit_size) {
	if (_72231_bit_size == 32LL) {
		jule::F32 _72414_f;
		jule::Int _72417_n;
		jule::Int _72420_err;
		std::tie(_72414_f,_72417_n,_72420_err) = _2284c0eac_atof32(_72223_s);
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_72414_f)),_72417_n,_72420_err);
	}
	jule::F64 _72810_f;
	jule::Int _72813_n;
	jule::Int _72816_err;
	std::tie(_72810_f,_72813_n,_72816_err) = _2284c0eac_atof64(_72223_s);
	return std::make_tuple(_72810_f,_72813_n,_72816_err);
}



inline std::tuple<jule::F64,jule::Int> _2284c0eac_parse_float(jule::Str _75620_s,jule::Int _75628_bit_size) {
	jule::F64 _75710_f;
	jule::Int _75713_n;
	jule::Int _75716_err;
	std::tie(_75710_f,_75713_n,_75716_err) = _2284c0eac_parse_float_prefix(_75620_s,_75628_bit_size);
	if ((_75713_n != _75620_s.len()) && ((_75716_err == 0LLU) || (_75716_err != 2LLU))) {
		return std::make_tuple(0LL,2LLU);
	}
	return std::make_tuple(_75710_f,_75716_err);
}



inline void _2285d3a92_ryu_ftoa_fixed32(_22777cad8_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::Int _4958_exp,jule::Int _4968_prec) {
	if (_4968_prec < 0LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:51:9"));;
	}
	if (_4968_prec > 9LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:54:9"));;
	}
	if (_4947_mant == 0LL) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _6213_e2 = _4958_exp;
	jule::Int _639_b = _228bb20b5_len32(_4947_mant);
	if (_639_b < 25LL) {
		_4947_mant<<=static_cast<jule::Uint>(static_cast<jule::Uint>(25LL - _639_b));
		_6213_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_639_b) - 25LL);
	}
	jule::Int _749_q = ((-(_2285d3a92_mul_by_log2_log10(static_cast<jule::Int>(_6213_e2 + 24LL)))) + _4968_prec) - 1LL;
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::Int _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _2285d3a92_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if (_8118_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:83:9"));;
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _2285d3a92_divisible_by_pow5(static_cast<jule::U64>(static_cast<jule::U64>(_4947_mant)),static_cast<jule::Int>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::Uint _949_extra = static_cast<jule::Uint>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>((1LL << _949_extra) - 1LL);
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > (1LL << (_949_extra - 1LL))) || ((_9713_dfrac == (1LL << (_949_extra - 1LL))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LL << (_949_extra - 1LL))) && _8129_d0) && ((_8114_di & 1LL) == 1LL));
	} else {
		_9913_round_up=(_9713_dfrac >> (_949_extra - 1LL)) == 1LL;
	}
	if (_9713_dfrac != 0LL) {
		_8129_d0=false;
	}
	_2285d3a92_format_decimal(_4926_d,static_cast<jule::U64>(static_cast<jule::U64>(_8114_di)),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _2285d3a92_ryu_ftoa_fixed64(_22777cad8_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::Int _12358_exp,jule::Int _12368_prec) {
	if (_12368_prec > 18LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:125:9"));;
	}
	if (_12347_mant == 0LL) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _13313_e2 = _12358_exp;
	jule::Int _1349_b = _228bb20b5_len64(_12347_mant);
	if (_1349_b < 55LL) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::Uint>(55LL - _1349_b));
		_13313_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_1349_b) - 55LL);
	}
	jule::Int _1489_q = ((-(_2285d3a92_mul_by_log2_log10(static_cast<jule::Int>(_13313_e2 + 54LL)))) + _12368_prec) - 1LL;
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::Int _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _2285d3a92_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if (_15518_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:157:9"));;
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _2285d3a92_divisible_by_pow5(_12347_mant,static_cast<jule::Int>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::Uint _1689_extra = static_cast<jule::Uint>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>((1LL << _1689_extra) - 1LL);
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > (1LL << (_1689_extra - 1LL))) || ((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && (!(_15529_d0)))) || (((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && _15529_d0) && ((_15514_di & 1LL) == 1LL));
	} else {
		_17313_round_up=(_17113_dfrac >> (_1689_extra - 1LL)) == 1LL;
	}
	if (_17113_dfrac != 0LL) {
		_15529_d0=false;
	}
	_2285d3a92_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _2285d3a92_format_decimal(_22777cad8_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::Int _20490_prec) {
	jule::U64 _2059_max = _2285d3a92_U64_POW10[_20490_prec];
	jule::Int _20613_trimmed = 0LL;
	while (_20445_m >= _2059_max) {
		{
			jule::U64 _20814_a = jule::unsafe_div(_20445_m,10LL);
			jule::U64 _20817_b = jule::unsafe_mod(_20445_m,10LL);
			std::tie(_20814_a,_20817_b) = std::make_tuple(jule::unsafe_div(_20445_m,10LL),jule::unsafe_mod(_20445_m,10LL));
			_20445_m=_20814_a;
			(_20613_trimmed)++;
			if (_20817_b > 5LL) {
				_20474_round_up=true;
			} else if (_20817_b < 5LL) {
				_20474_round_up=false;
			} else {
				_20474_round_up=_20457_trunc || ((_20445_m & 1LL) == 1LL);
			}
			if (_20817_b != 0LL) {
				_20457_trunc=true;
			}
		}
	_iter_next_5058795040:;
	}
	_iter_end_5058795040:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m = jule::unsafe_div(_20445_m,10LL);
		(_20613_trimmed)++;
	}
	jule::Uint _23313_n = static_cast<jule::Uint>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::Int>(static_cast<jule::Int>(_20490_prec));
	jule::U64 _23513_v = _20445_m;
	while (_23513_v >= 100LL) {
		{
			jule::U64 _23717_v1 = 0LLU;
			jule::U64 _23817_v2 = 0LLU;
			if ((_23513_v >> 32LL) == 0LL) {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(jule::unsafe_div(static_cast<jule::U32>(_23513_v),100LL))),static_cast<jule::U64>(static_cast<jule::U64>(jule::unsafe_mod(static_cast<jule::U32>(_23513_v),100LL))));
			} else {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(jule::unsafe_div(_23513_v,100LL)),static_cast<jule::U64>(jule::unsafe_mod(_23513_v,100LL)));
			}
			_23313_n-=2LL;
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 1LL)]);
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 0LL)]);
			_23513_v=_23717_v1;
		}
	_iter_next_5058795808:;
	}
	_iter_end_5058795808:;
	if (_23513_v > 0LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23513_v) + 1LL)]);
	}
	if (_23513_v >= 10LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(2LL * _23513_v)]);
	}
	while (_20424_d._field_d[_20424_d._field_nd - 1LL] == '0') {
		{
			(_20424_d._field_nd)--;
			(_20613_trimmed)++;
		}
	_iter_next_5058822768:;
	}
	_iter_end_5058822768:;
	_20424_d._field_dp=static_cast<jule::Int>(_20424_d._field_nd + _20613_trimmed);
}



inline void _2285d3a92_ryu_ftoa_shortest(_22777cad8_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::Int _26559_exp,_22777cad8_FloatInfo& _26570_flt) {
	if (_26548_mant == 0LL) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_228bb20b5_trailing_zeros64(_26548_mant) >= (-(_26559_exp)))) {
		_26548_mant>>=static_cast<jule::Uint>(static_cast<jule::Uint>((-(_26559_exp))));
		_2285d3a92_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::Int _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _2285d3a92_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if (_27726_e2 == 0LL) {
		_2285d3a92_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::Int _2839_q = _2285d3a92_mul_by_log2_log10(static_cast<jule::Int>((-(_27726_e2)))) + 1LL;
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _22777cad8_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _2285d3a92_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27710_ml)),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _2285d3a92_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27714_mc)),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _2285d3a92_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27718_mu)),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(_29417_dl32)),static_cast<jule::U64>(static_cast<jule::U64>(_29517_dc32)),static_cast<jule::U64>(static_cast<jule::U64>(_29617_du32)));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _2285d3a92_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _2285d3a92_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _2285d3a92_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if (_27726_e2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:307:9"));;
	}
	if (_2839_q > 55LL) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_2285d3a92_divisible_by_pow5(_27710_ml,static_cast<jule::Int>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_2285d3a92_divisible_by_pow5(_27714_mc,static_cast<jule::Int>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_2285d3a92_divisible_by_pow5(_27718_mu,static_cast<jule::Int>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::Uint _3299_extra = static_cast<jule::Uint>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>((1LL << _3299_extra) - 1LL);
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LL);
	if (_29213_du0 && (_33613_fracu == 0LL)) {
		_34213_uok=(_26548_mant & 1LL) == 0LL;
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > (1LL << (_3299_extra - 1LL))) || ((_33413_fracc == (1LL << (_3299_extra - 1LL))) && ((_28813_dc & 1LL) == 1LL));
	} else {
		_35113_cup=(_33413_fracc >> (_3299_extra - 1LL)) == 1LL;
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LL)) && ((_26548_mant & 1LL) == 0LL);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LL);
	_2285d3a92_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::Int _2285d3a92_mul_by_log2_log10(jule::Int _38322_x) {
	return static_cast<jule::Int>((_38322_x * 78913LL) >> 18LL);
}



inline jule::Int _2285d3a92_mul_by_log10_log2(jule::Int _39322_x) {
	return static_cast<jule::Int>((_39322_x * 108853LL) >> 15LL);
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _2285d3a92_compute_bounds(jule::U64 _40119_mant,jule::Int _40130_exp,_22777cad8_FloatInfo& _40218_flt) {
	jule::U64 _40236_lower = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40262_upper = jule::U64();
	jule::Int _40274_e2 = jule::Int();
	if ((_40119_mant != (1LL << _40218_flt._field_mantbits)) || (_40130_exp == ((_40218_flt._field_bias + 1LL) - static_cast<jule::Int>(_40218_flt._field_mantbits)))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((2LL * _40119_mant) - 1LL),static_cast<jule::U64>(2LL * _40119_mant),static_cast<jule::U64>((2LL * _40119_mant) + 1LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 1LL);
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((4LL * _40119_mant) - 1LL),static_cast<jule::U64>(4LL * _40119_mant),static_cast<jule::U64>((4LL * _40119_mant) + 2LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 2LL);
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _2285d3a92_ryu_digits(_22777cad8_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _2285d3a92_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _2285d3a92_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _2285d3a92_divmod1e9(_41563_upper);
	if (_41810_uhi == 0LL) {
		_2285d3a92_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if (_41619_llo != 0LL) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LL);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_2285d3a92_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::Uint _43417_n = static_cast<jule::Uint>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		while (_43517_v > 0LL) {
			{
				jule::U32 _43718_v1 = jule::unsafe_div(_43517_v,10LL);
				jule::U32 _43722_v2 = jule::unsafe_mod(_43517_v,10LL);
				std::tie(_43718_v1,_43722_v2) = std::make_tuple(jule::unsafe_div(_43517_v,10LL),jule::unsafe_mod(_43517_v,10LL));
				_43517_v=_43718_v1;
				(_43417_n)--;
				_41520_d._field_d[static_cast<jule::Int>(_43417_n)]=static_cast<jule::U8>(static_cast<jule::U8>(_43722_v2 + '0'));
			}
		_iter_next_5058914256:;
		}
		_iter_end_5058914256:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(_43417_n));
		_41520_d._field_nd=static_cast<jule::Int>(static_cast<jule::Int>(9LL - _43417_n));
		_2285d3a92_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::Int>(_41520_d._field_nd + 8LL));
	}
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[_41520_d._field_nd - 1LL] == '0')) {
		{
			(_41520_d._field_nd)--;
		}
	_iter_next_5058914752:;
	}
	_iter_end_5058914752:;
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0')) {
		{
			(_41520_d._field_nd)--;
			(_41520_d._field_dp)--;
			_41520_d._field_d=_41520_d._field_d.slice(1LL);
		}
	_iter_next_5058910192:;
	}
	_iter_end_5058910192:;
}



inline void _2285d3a92_ryu_digits32(_22777cad8_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::Int _46166_endindex) {
	if (_46121_upper == 0LL) {
		_46022_d._field_dp=static_cast<jule::Int>(_46166_endindex + 1LL);
		return;
	}
	jule::Int _46613_trimmed = 0LL;
	jule::Int _46913_c_next_digit = 0LL;
	while (_46121_upper > 0LL) {
		{
			jule::U32 _47613_l = jule::unsafe_div(_46043_lower + 9LL,10LL);
			jule::U32 _47718_c = jule::unsafe_div(_46059_central,10LL);
			jule::U32 _47725_cdigit = jule::unsafe_mod(_46059_central,10LL);
			std::tie(_47718_c,_47725_cdigit) = std::make_tuple(jule::unsafe_div(_46059_central,10LL),jule::unsafe_mod(_46059_central,10LL));
			jule::U32 _47813_u = jule::unsafe_div(_46121_upper,10LL);
			if (_47613_l > _47813_u) {
				goto _iter_end_5058930288;
			}
			if ((_47613_l == (_47718_c + 1LL)) && (_47718_c < _47813_u)) {
				(_47718_c)++;
				_47725_cdigit=0LL;
				_46151_cup=false;
			}
			(_46613_trimmed)++;
			_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
			_46913_c_next_digit=static_cast<jule::Int>(static_cast<jule::Int>(_47725_cdigit));
			std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
		}
	_iter_next_5058930288:;
	}
	_iter_end_5058930288:;
	if (_46613_trimmed > 0LL) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LL) == 1LL));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::Int _51813_n = _46166_endindex;
	while (_51813_n > _46022_d._field_nd) {
		{
			jule::U32 _52014_v1 = jule::unsafe_div(_51713_v,100LL);
			jule::U32 _52018_v2 = jule::unsafe_mod(_51713_v,100LL);
			std::tie(_52014_v1,_52018_v2) = std::make_tuple(jule::unsafe_div(_51713_v,100LL),jule::unsafe_mod(_51713_v,100LL));
			_46022_d._field_d[_51813_n]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 1LL)]);
			_46022_d._field_d[_51813_n - 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 0LL)]);
			_51813_n-=2LL;
			_51713_v=_52014_v1;
		}
	_iter_next_5058942176:;
	}
	_iter_end_5058942176:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[_51813_n]=static_cast<jule::U8>(static_cast<jule::U8>(_51713_v + '0'));
	}
	_46022_d._field_nd=static_cast<jule::Int>(_46166_endindex + 1LL);
	_46022_d._field_dp=static_cast<jule::Int>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::Int,jule::Bool> _2285d3a92_mult64bit_pow10(jule::U32 _54220_m,jule::Int _54232_e2,jule::Int _54241_q) {
	jule::U32 _54251_resM = jule::U32();
	jule::Int _54262_resE = jule::Int();
	jule::Bool _54273_exact = jule::Bool();
	if (_54241_q == 0LL) {
		_54251_resM = static_cast<jule::U32>(_54220_m << 6LL);
		_54262_resE = static_cast<jule::Int>(_54232_e2 - 6LL);
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:549:9"));;
	}
	jule::U64 _55113_pow = _22778ec3d_DETAILED_POWS_OF_TEN[_54241_q - -348LL].__at(1LL);
	if (_54241_q < 0LL) {
		_55113_pow+=1LL;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _228bb20b5_mul64(static_cast<jule::U64>(static_cast<jule::U64>(_54220_m)),_55113_pow);
	_54232_e2+=static_cast<jule::Int>((_2285d3a92_mul_by_log10_log2(_54241_q) - 63LL) + 57LL);
	_54251_resM = static_cast<jule::U32>(static_cast<jule::U32>((_55610_hi << 7LL) | (_55614_lo >> 57LL)));
	_54262_resE = _54232_e2;
	_54273_exact = (_55614_lo << 7LL) == 0LL;
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool> _2285d3a92_mult128bit_pow10(jule::U64 _57021_m,jule::Int _57033_e2,jule::Int _57042_q) {
	jule::U64 _57052_resM = jule::U64();
	jule::Int _57063_resE = jule::Int();
	jule::Bool _57074_exact = jule::Bool();
	if (_57042_q == 0LL) {
		_57052_resM = static_cast<jule::U64>(_57021_m << 8LL);
		_57063_resE = static_cast<jule::Int>(_57033_e2 - 8LL);
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:577:9"));;
	}
	jule::Array<jule::U64,2> _57913_pow = _22778ec3d_DETAILED_POWS_OF_TEN[_57042_q - -348LL];
	if (_57042_q < 0LL) {
		_57913_pow.__at(0LL)+=1LL;
	}
	_57033_e2+=static_cast<jule::Int>((_2285d3a92_mul_by_log10_log2(_57042_q) - 127LL) + 119LL);
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _228bb20b5_mul64(_57021_m,_57913_pow.__at(0LL));
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _228bb20b5_mul64(_57021_m,_57913_pow.__at(1LL));
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _228bb20b5_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>((_58814_h1 << 9LL) | (_58910_mid >> 55LL));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LL) == 0LL) && (_58714_l0 == 0LL);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _2285d3a92_divisible_by_pow5(jule::U64 _59426_m,jule::Int _59434_k) {
	if (_59426_m == 0LL) {
		return true;
	}
	jule::Int _59813_i = 0LL;
	for (; _59813_i < _59434_k; (_59813_i)++) {
		{
			if (jule::unsafe_mod(_59426_m,5LL) != 0LL) {
				return false;
			}
			_59426_m = jule::unsafe_div(_59426_m,5LL);
		}
	_iter_next_5058984592:;
	}
	_iter_end_5058984592:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _2285d3a92_divmod1e9(jule::U64 _61014_x) {
	{
		return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>(jule::unsafe_div(_61014_x,1000000000LL))),static_cast<jule::U32>(static_cast<jule::U32>(jule::unsafe_mod(_61014_x,1000000000LL))));
	}
}



inline void _2286660ca_trim(_2286660ca_Decimal& _27514_a) {
	while ((_27514_a._field_nd > 0LL) && (_27514_a._field_d[_27514_a._field_nd - 1LL] == '0')) {
		{
			(_27514_a._field_nd)--;
		}
	_iter_next_5058999952:;
	}
	_iter_end_5058999952:;
	if (_27514_a._field_nd == 0LL) {
		_27514_a._field_dp=0LL;
	}
}



inline void _2286660ca_right_shift(_2286660ca_Decimal& _28521_a,jule::Uint _28533_k) {
	jule::Int _28613_r = 0LL;
	jule::Int _28713_w = 0LL;
	jule::Uint _29013_n = 0LLU;
	for (; (_29013_n >> _28533_k) == 0LL; (_28613_r)++) {
		{
			if (_28613_r >= _28521_a._field_nd) {
				if (_29013_n == 0LL) {
					_28521_a._field_nd=0LL;
					return;
				}
				while ((_29013_n >> _28533_k) == 0LL) {
					{
						_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
						(_28613_r)++;
					}
				_iter_next_5059014576:;
				}
				_iter_end_5059014576:;
				goto _iter_end_5059009584;
			}
			jule::Uint _30413_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _30413_c) - '0');
		}
	_iter_next_5059009584:;
	}
	_iter_end_5059009584:;
	_28521_a._field_dp-=static_cast<jule::Int>(_28613_r - 1LL);
	jule::Uint _3099_mask = static_cast<jule::Uint>(static_cast<jule::Uint>(1LL << _28533_k) - 1LL);
	for (; _28613_r < _28521_a._field_nd; (_28613_r)++) {
		{
			jule::Uint _31313_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			jule::Uint _31413_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_31413_dig + '0'));
			(_28713_w)++;
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _31313_c) - '0');
		}
	_iter_next_5059018992:;
	}
	_iter_end_5059018992:;
	while (_29013_n > 0LL) {
		{
			jule::Uint _32313_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			if (_28713_w < 800LL) {
				_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_32313_dig + '0'));
				(_28713_w)++;
			} else if (_32313_dig > 0LL) {
				_28521_a._field_trunc=true;
			}
			_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
		}
	_iter_next_5059023856:;
	}
	_iter_end_5059023856:;
	_28521_a._field_nd=_28713_w;
	_2286660ca_trim(_28521_a);
}



inline jule::Bool _2286660ca_prefix_is_less_than(jule::Array<jule::U8,800> _33924_b,jule::Int _33938_end,jule::Str _33948_s) {
	jule::Int _34013_i = 0LL;
	for (; _34013_i < _33948_s.len(); (_34013_i)++) {
		{
			if (_34013_i >= _33938_end) {
				return true;
			}
			if (_33924_b[_34013_i] != _33948_s[_34013_i]) {
				return _33924_b[_34013_i] < _33948_s[_34013_i];
			}
		}
	_iter_next_5059032784:;
	}
	_iter_end_5059032784:;
	return false;
}



inline void _2286660ca_left_shift(_2286660ca_Decimal& _35320_a,jule::Uint _35332_k) {
	jule::Int _35413_delta = _2286660ca_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_delta;
	if (_2286660ca_prefix_is_less_than(_35320_a._field_d,_35320_a._field_nd,_2286660ca_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::Int _35913_r = _35320_a._field_nd;
	jule::Int _36013_w = _35320_a._field_nd + _35413_delta;
	jule::Uint _36313_n = 0LLU;
	(_35913_r)--;
	for (; _35913_r >= 0LL; (_35913_r)--) {
		{
			_36313_n+=static_cast<jule::Uint>((static_cast<jule::Uint>(_35320_a._field_d[_35913_r]) - '0') << _35332_k);
			jule::Uint _36713_quo = jule::unsafe_div(_36313_n,10LL);
			jule::Uint _36813_rem = _36313_n - (10LL * _36713_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_36813_rem + '0'));
			} else if (_36813_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_36713_quo;
		}
	_iter_next_5059043936:;
	}
	_iter_end_5059043936:;
	while (_36313_n > 0LL) {
		{
			jule::Uint _38013_quo = jule::unsafe_div(_36313_n,10LL);
			jule::Uint _38113_rem = _36313_n - (10LL * _38013_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_38113_rem + '0'));
			} else if (_38113_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_38013_quo;
		}
	_iter_next_5059051024:;
	}
	_iter_end_5059051024:;
	_35320_a._field_nd+=_35413_delta;
	if (_35320_a._field_nd >= 800LL) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_2286660ca_trim(_35320_a);
}



inline jule::Bool _2286660ca_should_round_up(_2286660ca_Decimal& _40021_a,jule::Int _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[_40033_nd] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && (jule::unsafe_mod(_40021_a._field_d[_40033_nd - 1LL] - '0',2LL) != 0LL);
	}
	return _40021_a._field_d[_40033_nd] >= '5';
}



inline jule::Str _22866a079_fmt_uint(jule::U64 _6217_i,jule::Int _6225_base) {
	if ((true && (_6217_i < 100LL)) && (_6225_base == 10LL)) {
		return _22866a079_small(static_cast<jule::Int>(static_cast<jule::Int>(_6217_i)));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _22866a079_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _22866a079_fmt_int(jule::I64 _7316_i,jule::Int _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _22866a079_small(static_cast<jule::Int>(static_cast<jule::Int>(_7316_i)));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _22866a079_fmt_bits(nullptr,static_cast<jule::U64>(static_cast<jule::U64>(_7316_i)),_7324_base,_7316_i < 0LL,false);
	return _7713_s;
}



inline jule::Str _22866a079_itoa(jule::Int _8213_i) {
	return _22866a079_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_8213_i)),10LL);
}



inline jule::Str _22866a079_small(jule::Int _8510_i) {
	if (_8510_i < 10LL) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(_8510_i,_8510_i + 1LL);
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(_8510_i * 2LL,(_8510_i * 2LL) + 2LL);
}



inline jule::Bool _22866a079_is_power_of_two(jule::Int _9220_x) {
	return (_9220_x & (_9220_x - 1LL)) == 0LL;
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _22866a079_fmt_bits(jule::Slice<jule::U8> _9917_dst,jule::U64 _9934_u,jule::Int _9942_base,jule::Bool _9953_neg,jule::Bool _9964_append_) {
	jule::Slice<jule::U8> _9981_d = jule::Slice<jule::U8>();
	jule::Str _9992_s = jule::Str();
	if ((_9942_base < 2LL) || (_9942_base > jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).len())) {
		jule::panic(jule::Str("std::conv: illegal base", 23) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/itoa.jule:101:9"));;
	}
	jule::Slice<jule::U8> _10513_a = jule::Slice<jule::U8>::alloc(65LL);
	jule::I64 _10613_i = _10513_a.len();
	if (_9953_neg) {
		_9934_u=static_cast<jule::U64>((-(_9934_u)));
	}
	if (_9942_base == 10LL) {
		if (false) {
			while (_9934_u >= 1000000000LL) {
				{
					jule::U64 _12521_q = jule::unsafe_div(_9934_u,1000000000LL);
					jule::Uint _12625_us = static_cast<jule::Uint>(_9934_u - (_12521_q * 1000000000LL));
					jule::Int _12725_j = 4LL;
					for (; _12725_j > 0LL; (_12725_j)--) {
						{
							jule::Uint _12925_is = jule::unsafe_mod(_12625_us,100LL) * 2LL;
							_12625_us = jule::unsafe_div(_12625_us,100LL);
							_10613_i-=2LL;
							_10513_a[_10613_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 1LL)]);
							_10513_a[_10613_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_12925_is + 0LL)]);
						}
					_iter_next_5059091616:;
					}
					_iter_end_5059091616:;
					(_10613_i)--;
					_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((_12625_us * 2LL) + 1LL)]);
					_9934_u=_12521_q;
				}
			_iter_next_5059090096:;
			}
			_iter_end_5059090096:;
		}
		jule::Uint _14717_us = static_cast<jule::Uint>(_9934_u);
		while (_14717_us >= 100LL) {
			{
				jule::Uint _14917_is = jule::unsafe_mod(_14717_us,100LL) * 2LL;
				_14717_us = jule::unsafe_div(_14717_us,100LL);
				_10613_i-=2LL;
				_10513_a[_10613_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 1LL)]);
				_10513_a[_10613_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_14917_is + 0LL)]);
			}
		_iter_next_5059090304:;
		}
		_iter_end_5059090304:;
		jule::Uint _15713_is = _14717_us * 2LL;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is + 1LL)]);
		if (_14717_us >= 10LL) {
			(_10613_i)--;
			_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15713_is)]);
		}
	} else if (_22866a079_is_power_of_two(_9942_base)) {
		jule::Uint _17213_shift = static_cast<jule::Uint>(_228bb20b5_trailing_zeros(static_cast<jule::Uint>(static_cast<jule::Uint>(_9942_base)))) & 7LL;
		jule::U64 _17313_b = static_cast<jule::U64>(_9942_base);
		jule::Uint _17413_m = static_cast<jule::Uint>(_9942_base) - 1LL;
		while (_9934_u >= _17313_b) {
			{
				(_10613_i)--;
				_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u) & _17413_m)]);
				_9934_u>>=_17213_shift;
			}
		_iter_next_5059113040:;
		}
		_iter_end_5059113040:;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	} else {
		jule::U64 _18513_b = static_cast<jule::U64>(_9942_base);
		while (_9934_u >= _18513_b) {
			{
				(_10613_i)--;
				jule::U64 _19117_q = jule::div(_9934_u,_18513_b);
				_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u - (_19117_q * _18513_b)))]);
				_9934_u=_19117_q;
			}
		_iter_next_5059118000:;
		}
		_iter_end_5059118000:;
		(_10613_i)--;
		_10513_a[_10613_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_9934_u))]);
	}
	if (_9953_neg) {
		(_10613_i)--;
		_10513_a[_10613_i]='-';
	}
	if (_9964_append_) {
		_9981_d=jule::append(_9917_dst,_10513_a.slice(_10613_i));
		return std::make_tuple(_9981_d,_9992_s);
	}
	_9992_s=static_cast<jule::Str>(_10513_a.slice(_10613_i));
	return std::make_tuple(_9981_d,_9992_s);
}



inline jule::Bool _228dc4904_is_letter(jule::I32 _7618_r) {
	if (static_cast<jule::U32>(_7618_r) <= 255LL) {
		return (_228e8044e__PROPERTIES[static_cast<jule::Int>(static_cast<jule::U8>(_7618_r))] & 96LL) != 0LL;
	}
	return _228e939c3_is_excluding_latin(_228e8044e_LETTER,_7618_r);
}



inline jule::Bool _228e939c3_is16(jule::Slice<_228e939c3_Range16> _1919_ranges,jule::U16 _19128_r) {
	if ((_1919_ranges.len() <= 18LL) || (_19128_r <= 255LL)) {
		{
			auto &expr = _1919_ranges;
			auto it = expr.begin();
			_iter_begin_5063714480:;
			if (it != expr.end()) {
				jule::Int _228e939c3_i = it - expr.begin();
				{
					_228e939c3_Range16* _19417_range = (&(_1919_ranges.__at(_228e939c3_i)));
					{
						if (_19128_r < (*(_19417_range))._field_lo) {
							return false;
						}
						if (_19128_r <= (*(_19417_range))._field_hi) {
							return ((*(_19417_range))._field_stride == 1LL) || (jule::mod(_19128_r - (*(_19417_range))._field_lo,(*(_19417_range))._field_stride) == 0LL);
						}
					}
				}
				_iter_next_5063714480:;
				++it;
				_228e939c3_i++;
				goto _iter_begin_5063714480;
			}
			_iter_end_5063714480:;
		}
		return false;
	}
	jule::Int _20813_lo = 0LL;
	jule::I64 _20913_hi = _1919_ranges.len();
	while (_20813_lo < _20913_hi) {
		{
			jule::Int _21113_m = _20813_lo + jule::unsafe_div(_20913_hi - _20813_lo,2LL);
			_228e939c3_Range16* _21213_range = (&(_1919_ranges[_21113_m]));
			{
				if (((*(_21213_range))._field_lo <= _19128_r) && (_19128_r <= (*(_21213_range))._field_hi)) {
					return ((*(_21213_range))._field_stride == 1LL) || (jule::mod(_19128_r - (*(_21213_range))._field_lo,(*(_21213_range))._field_stride) == 0LL);
				}
				if (_19128_r < (*(_21213_range))._field_lo) {
					_20913_hi=_21113_m;
				} else {
					_20813_lo=static_cast<jule::Int>(_21113_m + 1LL);
				}
			}
		}
	_iter_next_5063684160:;
	}
	_iter_end_5063684160:;
	return false;
}



inline jule::Bool _228e939c3_is32(jule::Slice<_228e939c3_Range32> _2289_ranges,jule::U32 _22828_r) {
	if (_2289_ranges.len() <= 18LL) {
		{
			auto &expr = _2289_ranges;
			auto it = expr.begin();
			_iter_begin_5063733280:;
			if (it != expr.end()) {
				jule::Int _228e939c3_i = it - expr.begin();
				{
					_228e939c3_Range32* _23117_range = (&(_2289_ranges.__at(_228e939c3_i)));
					{
						if (_22828_r < (*(_23117_range))._field_lo) {
							return false;
						}
						if (_22828_r <= (*(_23117_range))._field_hi) {
							return ((*(_23117_range))._field_stride == 1LL) || (jule::mod(_22828_r - (*(_23117_range))._field_lo,(*(_23117_range))._field_stride) == 0LL);
						}
					}
				}
				_iter_next_5063733280:;
				++it;
				_228e939c3_i++;
				goto _iter_begin_5063733280;
			}
			_iter_end_5063733280:;
		}
		return false;
	}
	jule::Int _24513_lo = 0LL;
	jule::I64 _24613_hi = _2289_ranges.len();
	while (_24513_lo < _24613_hi) {
		{
			jule::Int _24813_m = _24513_lo + jule::unsafe_div(_24613_hi - _24513_lo,2LL);
			_228e939c3_Range32* _24913_range = (&(_2289_ranges[_24813_m]));
			{
				if (((*(_24913_range))._field_lo <= _22828_r) && (_22828_r <= (*(_24913_range))._field_hi)) {
					return ((*(_24913_range))._field_stride == 1LL) || (jule::mod(_22828_r - (*(_24913_range))._field_lo,(*(_24913_range))._field_stride) == 0LL);
				}
				if (_22828_r < (*(_24913_range))._field_lo) {
					_24613_hi=_24813_m;
				} else {
					_24513_lo=static_cast<jule::Int>(_24813_m + 1LL);
				}
			}
		}
	_iter_next_5063724832:;
	}
	_iter_end_5063724832:;
	return false;
}



inline jule::Bool _228e939c3_is_excluding_latin(jule::Ptr<_228e939c3_RangeTable> _27823_range_tab,jule::I32 _27847_r) {
	{
		jule::Slice<_228e939c3_Range16> &_28014_r16 = (*(_27823_range_tab))._field_r16;
		jule::Int _28213_off = (*(_27823_range_tab))._field_latin_offset;
		if ((_28014_r16.len() > _28213_off) && (static_cast<jule::U32>(_27847_r) <= static_cast<jule::U32>(_28014_r16[_28014_r16.len() - 1LL]._field_hi))) {
			return _228e939c3_is16(_28014_r16.slice(_28213_off),static_cast<jule::U16>(static_cast<jule::U16>(_27847_r)));
		}
	}
	jule::Slice<_228e939c3_Range32> &_28710_r32 = (*(_27823_range_tab))._field_r32;
	if ((_28710_r32.len() > 0LL) && (_27847_r >= static_cast<jule::I32>(_28710_r32[0LL]._field_lo))) {
		return _228e939c3_is32(_28710_r32,static_cast<jule::U32>(static_cast<jule::U32>(_27847_r)));
	}
	return false;
}



inline std::tuple<jule::I32,jule::Int> _228e84d38_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::I32 _18233_r = jule::I32();
	jule::Int _18242_size = jule::Int();
	if (_18220_p.len() < 1LL) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _228e84d38_FIRST[static_cast<jule::Int>(_1869_p0)];
	if (_1879_x >= 240LL) {
		jule::I32 _19213_mask = static_cast<jule::U8>((_1879_x << 31LL) >> 31LL);
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_18220_p[0LL]) & (~(_19213_mask))) | (65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::Int _1959_sz = static_cast<jule::Int>(_1879_x & 7LL);
	_228e84d38_accept_range _1969_accept = _228e84d38_ACCEPT_RANGES[static_cast<jule::Int>(_1879_x >> 4LL)];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 2LL) {
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_1869_p0 & 31LL) << 6LL) | static_cast<jule::I32>(_2009_b1 & 63LL));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LL) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 3LL) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_1869_p0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2079_b2 & 63LL));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LL) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>(_1869_p0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2079_b2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2149_b3 & 63LL));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline jule::Slice<jule::U8> _228e84d38_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if (_39835_r <= 127LLU) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_39835_r))}));
	}
	return _228e84d38_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _228e84d38_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		
		if (_4079_i <= 2047LLU) {
			_case_begin_5063995360:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LL | static_cast<jule::U8>(_40545_r >> 6LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else if (_4079_i > 1114111LL || (55296LL <= _4079_i) && (_4079_i <= 57343LL)) {
			_case_begin_5063995952:;
			{
				_40545_r=65533LL;
				goto _case_begin_5063996048;
			}
		}
		else if (_4079_i <= 65535LLU) {
			_case_begin_5063996048:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LL | static_cast<jule::U8>(_40545_r >> 12LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else {
			_case_begin_5063988912:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LL | static_cast<jule::U8>(_40545_r >> 18LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 12LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		_match_end_5063988752:;
	}
}



inline jule::Bool _228d7aadb_is_unary_op(jule::Str _31720_kind) {
	{
		auto &expr = _228d7aadb_UNARY_OPS;
		auto it = expr.begin();
		_iter_begin_5064284272:;
		if (it != expr.end()) {
			jule::Str &_228d7aadb_op = *it;
			{
				if (_31720_kind == _228d7aadb_op) {
					return true;
				}
			}
			_iter_next_5064284272:;
			++it;
			goto _iter_begin_5064284272;
		}
		_iter_end_5064284272:;
	}
	return false;
}



inline jule::Bool _228d7aadb_is_bin_op(jule::Str _32818_kind) {
	{
		auto &expr = _228d7aadb_BIN_OPS;
		auto it = expr.begin();
		_iter_begin_5064287456:;
		if (it != expr.end()) {
			jule::Str &_228d7aadb_op = *it;
			{
				if (_32818_kind == _228d7aadb_op) {
					return true;
				}
			}
			_iter_next_5064287456:;
			++it;
			goto _iter_begin_5064287456;
		}
		_iter_end_5064287456:;
	}
	return false;
}



inline jule::Bool _228d7aadb_is_str(jule::Str _35015_k) {
	return (_35015_k != jule::Str()) && ((_35015_k[0LL] == '\"') || _228d7aadb_is_raw_str(_35015_k));
}



inline jule::Bool _228d7aadb_is_raw_str(jule::Str _35219_k) {
	return (_35219_k != jule::Str()) && (_35219_k[0LL] == '`');
}



inline jule::Bool _228d7aadb_is_rune(jule::Str _35516_k) {
	return (_35516_k != jule::Str()) && (_35516_k[0LL] == '\'');
}



inline jule::Bool _228d7aadb_is_bool(jule::Str _35916_k) {
	return (_35916_k == jule::Str("true", 4)) || (_35916_k == jule::Str("false", 5));
}



inline jule::Bool _228d7aadb_contains_any(jule::Str _36117_s,jule::Str _36125_bytes) {
	{
		auto &expr = _36125_bytes;
		auto it = expr.begin();
		_iter_begin_5064297792:;
		if (it != expr.end()) {
			jule::U8 &_228d7aadb_b = *it;
			{
				jule::Int _36313_i = _36117_s.find(static_cast<jule::Str>(_228d7aadb_b));
				if (_36313_i >= 0LL) {
					return true;
				}
			}
			_iter_next_5064297792:;
			++it;
			goto _iter_begin_5064297792;
		}
		_iter_end_5064297792:;
	}
	return false;
}



inline jule::Bool _228d7aadb_is_float(jule::Str _37317_k) {
	if (_37317_k.has_prefix(jule::Str("0x", 2))) {
		return _228d7aadb_contains_any(_37317_k,jule::Str(".pP", 3));
	}
	return _228d7aadb_contains_any(_37317_k,jule::Str(".eE", 3));
}



inline jule::Bool _228d7aadb_is_num(jule::Str _38215_k) {
	if (_38215_k == jule::Str()) {
		return false;
	}
	jule::U8 _3879_b = _38215_k[0LL];
	return (_3879_b == '.') || (('0' <= _3879_b) && (_3879_b <= '9'));
}



inline jule::Bool _228d7aadb_is_ignore_ident(jule::Str _39724_ident) {
	return _39724_ident == jule::Str("_", 1);
}



inline jule::Bool _228d7aadb_is_anon_ident(jule::Str _39922_ident) {
	return _39922_ident == jule::Str("<anonymous>", 11);
}



inline jule::Bool _228d7aadb_is_space(jule::I32 _41317_r) {
	{
		auto &expr = _228d7aadb_SPACES;
		auto it = expr.begin();
		_iter_begin_5064319552:;
		if (it != expr.end()) {
			jule::I32 &_228d7aadb_cr = *it;
			{
				if (_41317_r == _228d7aadb_cr) {
					return true;
				}
			}
			_iter_next_5064319552:;
			++it;
			goto _iter_begin_5064319552;
		}
		_iter_end_5064319552:;
	}
	return false;
}



inline jule::Bool _228d7aadb_is_letter(jule::I32 _42418_r) {
	return _228dc4904_is_letter(_42418_r);
}



inline jule::Bool _228d7aadb_is_decimal(jule::U8 _44619_b) {
	return ('0' <= _44619_b) && (_44619_b <= '9');
}



inline jule::Bool _228d7aadb_is_binary(jule::U8 _44818_b) {
	return (_44818_b == '0') || (_44818_b == '1');
}



inline jule::Bool _228d7aadb_is_octal(jule::U8 _45017_b) {
	return ('0' <= _45017_b) && (_45017_b <= '7');
}



inline jule::Bool _228d7aadb_is_hex(jule::U8 _45315_b) {
	{
		
		if (('0' <= _45315_b) && (_45315_b <= '9')) {
			_case_begin_5064332480:;
			{
				return true;
			}
		}
		else if (('a' <= _45315_b) && (_45315_b <= 'f')) {
			_case_begin_5064332576:;
			{
				return true;
			}
		}
		else if (('A' <= _45315_b) && (_45315_b <= 'F')) {
			_case_begin_5064331584:;
			{
				return true;
			}
		}
		else {
			_case_begin_5064329232:;
			{
				return false;
			}
		}
		_match_end_5064330496:;
	}
}



inline jule::Bool _228d7aadb_is_assign(jule::Uint _46518_id) {
	return ((((((_46518_id == 2LLU) || (_46518_id == 31LLU)) || (_46518_id == 34LLU)) || (_46518_id == 20LLU)) || (_46518_id == 28LLU)) || (_46518_id == 3LLU)) || (_46518_id == 7LLU);
}



inline jule::Bool _228d7aadb_is_postfix_op(jule::Str _47822_kind) {
	{
		auto &expr = _228d7aadb_POSTFIX_OPS;
		auto it = expr.begin();
		_iter_begin_5064336416:;
		if (it != expr.end()) {
			jule::Str &_228d7aadb_op = *it;
			{
				if (_47822_kind == _228d7aadb_op) {
					return true;
				}
			}
			_iter_next_5064336416:;
			++it;
			goto _iter_begin_5064336416;
		}
		_iter_end_5064336416:;
	}
	return false;
}



inline jule::Bool _228d7aadb_is_assign_op(jule::Str _48921_kind) {
	if (_228d7aadb_is_postfix_op(_48921_kind)) {
		return true;
	}
	{
		auto &expr = _228d7aadb_ASSING_OPS;
		auto it = expr.begin();
		_iter_begin_5064340512:;
		if (it != expr.end()) {
			jule::Str &_228d7aadb_op = *it;
			{
				if (_48921_kind == _228d7aadb_op) {
					return true;
				}
			}
			_iter_next_5064340512:;
			++it;
			goto _iter_begin_5064340512;
		}
		_iter_end_5064340512:;
	}
	return false;
}



inline jule::Ptr<_228d34677_File> _228d34677_new_file_set(jule::Str _6421_path) {
	return jule::new_struct<_228d34677_File>(new( std::nothrow ) _228d34677_File(jule::Slice<jule::U8>(),_6421_path,jule::Slice<_228d7aadb_Token>()));
}



inline _2276bcb9e_Log _228d36080_make_err(jule::Int _10513_row,jule::Int _10523_col,jule::Ptr<_228d34677_File>& _10534_f,jule::Str _10544_fmt,jule::Slice<jule::Any> _10557_args) {
	return _2276bcb9e_Log(1LLU,_10513_row,_10523_col,(*(_10534_f))._method_path(),_2276bcb9e_logf(_10544_fmt,_10557_args),jule::Str(),jule::Str());
}



inline jule::Bool _228d36080_bytes_has_prefix(jule::Slice<jule::U8>& _11522_bytes,jule::Str _11537_prefix) {
	if (_11522_bytes.len() < _11537_prefix.len()) {
		return false;
	}
	{
		auto &expr = _11537_prefix;
		auto it = expr.begin();
		_iter_begin_5064348160:;
		if (it != expr.end()) {
			jule::Int _228d36080_i = it - expr.begin();
			{
				if (_11522_bytes[_228d36080_i] != _11537_prefix.__at(_228d36080_i)) {
					return false;
				}
			}
			_iter_next_5064348160:;
			++it;
			_228d36080_i++;
			goto _iter_begin_5064348160;
		}
		_iter_end_5064348160:;
	}
	return true;
}



inline jule::Str _228d36080_float_fmt_e(jule::Slice<jule::U8>& _12717_txt,jule::Int _12734_i) {
	jule::Str _12744_lit = jule::Str();
	(_12734_i)++;
	if (_12734_i >= _12717_txt.len()) {
		return _12744_lit;
	}
	jule::U8 _13313_b = _12717_txt[_12734_i];
	if ((_13313_b == '+') || (_13313_b == '-')) {
		(_12734_i)++;
		if (_12734_i >= _12717_txt.len()) {
			return _12744_lit;
		}
	}
	jule::Int _1419_first = _12734_i;
	for (; _12734_i < _12717_txt.len(); (_12734_i)++) {
		{
			_13313_b=_12717_txt[_12734_i];
			if ((!(_228d7aadb_is_decimal(_13313_b)))) {
				goto _iter_end_5064360448;
			}
		}
	_iter_next_5064360448:;
	}
	_iter_end_5064360448:;
	if (_12734_i == _1419_first) {
		_12744_lit = jule::Str();
		return _12744_lit;
	}
	_12744_lit = static_cast<jule::Str>(_12717_txt.slice(0LL,_12734_i));
	return _12744_lit;
}



inline jule::Str _228d36080_float_fmt_p(jule::Slice<jule::U8>& _15517_txt,jule::Int _15530_i) {
	return _228d36080_float_fmt_e(_15517_txt,_15530_i);
}



inline jule::Str _228d36080_float_fmt_dotnp(jule::Slice<jule::U8>& _15721_txt,jule::Int _15738_i) {
	if (_15721_txt[_15738_i] != '.') {
		return jule::Str();
	}
	(_15738_i)++;
	_julec_label_loop:;
	for (; _15738_i < _15721_txt.len(); (_15738_i)++) {
		{
			jule::U8 _16513_b = _15721_txt[_15738_i];
			{
				
				if (_228d7aadb_is_decimal(_16513_b)) {
					_case_begin_5064370912:;
					{
						goto _iter_next_5064367184;
					}
				}
				else if (_228d36080_is_float_fmt_p(_16513_b,_15738_i)) {
					_case_begin_5064371008:;
					{
						return _228d36080_float_fmt_p(_15721_txt,_15738_i);
					}
				}
				else {
					_case_begin_5064370560:;
					{
						goto _iter_end_5064367184;
					}
				}
				_match_end_5064370448:;
			}
		}
	_iter_next_5064367184:;
	}
	_iter_end_5064367184:;
	return jule::Str();
}



inline jule::Str _228d36080_float_fmt_dotfp(jule::Slice<jule::U8>& _17521_txt,jule::Int _17538_i) {
	_17538_i+=2LL;
	return _228d36080_float_fmt_e(_17521_txt,_17538_i);
}



inline jule::Str _228d36080_float_fmt_dotp(jule::Slice<jule::U8>& _18220_txt,jule::Int _18237_i) {
	(_18237_i)++;
	return _228d36080_float_fmt_e(_18220_txt,_18237_i);
}



inline jule::Str _228d36080_float_num(jule::Slice<jule::U8>& _18915_txt,jule::Int _18932_i) {
	jule::Str _18942_lit = jule::Str();
	(_18932_i)++;
	for (; _18932_i < _18915_txt.len(); (_18932_i)++) {
		{
			jule::U8 _19213_b = _18915_txt[_18932_i];
			if ((_18932_i > 1LL) && ((_19213_b == 'e') || (_19213_b == 'E'))) {
				_18942_lit = _228d36080_float_fmt_e(_18915_txt,_18932_i);
				return _18942_lit;
			}
			if ((!(_228d7aadb_is_decimal(_19213_b)))) {
				goto _iter_end_5064378896;
			}
		}
	_iter_next_5064378896:;
	}
	_iter_end_5064378896:;
	if (_18932_i == 1LL) {
		return _18942_lit;
	}
	_18942_lit = static_cast<jule::Str>(_18915_txt.slice(0LL,_18932_i));
	return _18942_lit;
}



inline jule::Str _228d36080_common_num(jule::Slice<jule::U8>& _20716_txt) {
	jule::Str _20731_lit = jule::Str();
	jule::Int _20813_i = 0LL;
	_julec_label_loop:;
	for (; _20813_i < _20716_txt.len(); (_20813_i)++) {
		{
			jule::U8 _21113_b = _20716_txt[_20813_i];
			{
				
				if (_21113_b == '.') {
					_case_begin_5064389344:;
					{
						_20731_lit = _228d36080_float_num(_20716_txt,_20813_i);
						return _20731_lit;
					}
				}
				else if (_228d36080_is_float_fmt_e(_21113_b,_20813_i)) {
					_case_begin_5064389456:;
					{
						_20731_lit = _228d36080_float_fmt_e(_20716_txt,_20813_i);
						return _20731_lit;
					}
				}
				else if ((!(_228d7aadb_is_decimal(_21113_b)))) {
					_case_begin_5064389568:;
					{
						goto _iter_end_5064386880;
					}
				}
				_match_end_5064389168:;
			}
		}
	_iter_next_5064386880:;
	}
	_iter_end_5064386880:;
	if (_20813_i == 0LL) {
		return _20731_lit;
	}
	_20731_lit = static_cast<jule::Str>(_20716_txt.slice(0LL,_20813_i));
	return _20731_lit;
}



inline jule::Str _228d36080_binary_num(jule::Slice<jule::U8>& _22516_txt) {
	jule::Str _22531_lit = jule::Str();
	if ((!(_228d36080_bytes_has_prefix(_22516_txt,jule::Str("0b", 2))))) {
		_22531_lit = jule::Str();
		return _22531_lit;
	}
	if (_22516_txt.len() < 2LL) {
		return _22531_lit;
	}
	
	jule::Int _23413_i = 2LL;
	for (; _23413_i < _22516_txt.len(); (_23413_i)++) {
		{
			if ((!(_228d7aadb_is_binary(_22516_txt[_23413_i])))) {
				goto _iter_end_5064398528;
			}
		}
	_iter_next_5064398528:;
	}
	_iter_end_5064398528:;
	if (_23413_i == 2LL) {
		return _22531_lit;
	}
	_22531_lit = static_cast<jule::Str>(_22516_txt.slice(0LL,_23413_i));
	return _22531_lit;
}



inline jule::Bool _228d36080_is_float_fmt_e(jule::U8 _24719_b,jule::Int _24728_i) {
	return (_24728_i > 0LL) && ((_24719_b == 'e') || (_24719_b == 'E'));
}



inline jule::Bool _228d36080_is_float_fmt_p(jule::U8 _24819_b,jule::Int _24828_i) {
	return (_24828_i > 0LL) && ((_24819_b == 'p') || (_24819_b == 'P'));
}



inline jule::Bool _228d36080_is_float_fmt_dotnp(jule::Slice<jule::U8>& _25024_txt,jule::Int _25041_i) {
	if (_25024_txt[_25041_i] != '.') {
		return false;
	}
	(_25041_i)++;
	_julec_label_loop:;
	for (; _25041_i < _25024_txt.len(); (_25041_i)++) {
		{
			jule::U8 _25813_b = _25024_txt[_25041_i];
			{
				
				if (_228d7aadb_is_decimal(_25813_b)) {
					_case_begin_5064412304:;
					{
						goto _iter_next_5064406752;
					}
				}
				else if (_228d36080_is_float_fmt_p(_25813_b,_25041_i)) {
					_case_begin_5064412400:;
					{
						return true;
					}
				}
				else {
					_case_begin_5064411952:;
					{
						goto _iter_end_5064406752;
					}
				}
				_match_end_5064411840:;
			}
		}
	_iter_next_5064406752:;
	}
	_iter_end_5064406752:;
	return false;
}



inline jule::Bool _228d36080_is_float_fmt_dotp(jule::Slice<jule::U8>& _26923_txt,jule::Int _26936_i) {
	{
		
		if (_26923_txt.len() < 3LL) {
			_case_begin_5064417920:;
			{
				goto _case_begin_5064418016;
			}
		}
		else if (_26923_txt[_26936_i] != '.') {
			_case_begin_5064418016:;
			{
				goto _case_begin_5064416544;
			}
		}
		else if ((_26923_txt[_26936_i + 1LL] != 'p') && (_26923_txt[_26936_i + 1LL] != 'P')) {
			_case_begin_5064416544:;
			{
				return false;
			}
		}
		else {
			_case_begin_5064416240:;
			{
				return true;
			}
		}
		_match_end_5064416064:;
	}
}



inline jule::Bool _228d36080_is_float_fmt_dotfp(jule::Slice<jule::U8>& _27824_txt,jule::Int _27837_i) {
	{
		
		if (_27824_txt.len() < 4LL) {
			_case_begin_5064424288:;
			{
				goto _case_begin_5064424384;
			}
		}
		else if (_27824_txt[_27837_i] != '.') {
			_case_begin_5064424384:;
			{
				goto _case_begin_5064422912;
			}
		}
		else if ((_27824_txt[_27837_i + 1LL] != 'f') && (_27824_txt[_27837_i + 1LL] != 'F')) {
			_case_begin_5064422912:;
			{
				goto _case_begin_5064423024;
			}
		}
		else if ((_27824_txt[_27837_i + 2LL] != 'p') && (_27824_txt[_27837_i + 1LL] != 'P')) {
			_case_begin_5064423024:;
			{
				return false;
			}
		}
		else {
			_case_begin_5064422592:;
			{
				return true;
			}
		}
		_match_end_5064422416:;
	}
}



inline jule::Str _228d36080_octal_num(jule::Slice<jule::U8>& _28815_txt) {
	jule::Str _28830_lit = jule::Str();
	if (_28815_txt[0LL] != '0') {
		_28830_lit = jule::Str();
		return _28830_lit;
	}
	if (_28815_txt.len() < 2LL) {
		return _28830_lit;
	}
	jule::Int _29613_octal_start = 1LL;
	if (_28815_txt[1LL] == 'o') {
		if (_28815_txt.len() < 3LL) {
			return _28830_lit;
		}
		(_29613_octal_start)++;
	}
	jule::Int _30513_i = _29613_octal_start;
	for (; _30513_i < _28815_txt.len(); (_30513_i)++) {
		{
			jule::U8 _30713_b = _28815_txt[_30513_i];
			if (_228d36080_is_float_fmt_e(_30713_b,_30513_i)) {
				_28830_lit = _228d36080_float_fmt_e(_28815_txt,_30513_i);
				return _28830_lit;
			}
			if ((!(_228d7aadb_is_octal(_30713_b)))) {
				goto _iter_end_5064435792;
			}
		}
	_iter_next_5064435792:;
	}
	_iter_end_5064435792:;
	if (_30513_i == _29613_octal_start) {
		return _28830_lit;
	}
	_28830_lit = static_cast<jule::Str>(_28815_txt.slice(0LL,_30513_i));
	return _28830_lit;
}



inline jule::Str _228d36080_hex_num(jule::Slice<jule::U8>& _32213_txt) {
	jule::Str _32228_lit = jule::Str();
	if (_32213_txt.len() < 3LL) {
		return _32228_lit;
	}
	if ((_32213_txt[0LL] != '0') || ((_32213_txt[1LL] != 'x') && (_32213_txt[1LL] != 'X'))) {
		return _32228_lit;
	}
	
	jule::Int _33113_i = 2LL;
	_julec_label_loop:;
	for (; _33113_i < _32213_txt.len(); (_33113_i)++) {
		{
			jule::U8 _33413_b = _32213_txt[_33113_i];
			{
				
				if (_228d36080_is_float_fmt_dotp(_32213_txt,_33113_i)) {
					_case_begin_5064450864:;
					{
						_32228_lit = _228d36080_float_fmt_dotp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_228d36080_is_float_fmt_dotfp(_32213_txt,_33113_i)) {
					_case_begin_5064450976:;
					{
						_32228_lit = _228d36080_float_fmt_dotfp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_228d36080_is_float_fmt_p(_33413_b,_33113_i)) {
					_case_begin_5064451088:;
					{
						_32228_lit = _228d36080_float_fmt_p(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if (_228d36080_is_float_fmt_dotnp(_32213_txt,_33113_i)) {
					_case_begin_5064451200:;
					{
						_32228_lit = _228d36080_float_fmt_dotnp(_32213_txt,_33113_i);
						return _32228_lit;
					}
				}
				else if ((!(_228d7aadb_is_hex(_33413_b)))) {
					_case_begin_5064451312:;
					{
						goto _iter_end_5064446320;
					}
				}
				_match_end_5064450656:;
			}
		}
	_iter_next_5064446320:;
	}
	_iter_end_5064446320:;
	if (_33113_i == 2LL) {
		return _32228_lit;
	}
	_32228_lit = static_cast<jule::Str>(_32213_txt.slice(0LL,_33113_i));
	return _32228_lit;
}



inline jule::Str _228d36080_hex_escape(jule::Slice<jule::U8>& _35916_txt,jule::Int _35929_n) {
	jule::Str _35939_seq = jule::Str();
	if (_35916_txt.len() < _35929_n) {
		return _35939_seq;
	}
	
	jule::Int _36513_i = 2LL;
	for (; _36513_i < _35929_n; (_36513_i)++) {
		{
			if ((!(_228d7aadb_is_hex(_35916_txt[_36513_i])))) {
				return _35939_seq;
			}
		}
	_iter_next_5064457280:;
	}
	_iter_end_5064457280:;
	_35939_seq=static_cast<jule::Str>(_35916_txt.slice(0LL,_35929_n));
	return _35939_seq;
}



inline jule::Str _228d36080_big_unicode_point_escape(jule::Slice<jule::U8>& _37730_txt) {
	return _228d36080_hex_escape(_37730_txt,10LL);
}



inline jule::Str _228d36080_little_unicode_point_escape(jule::Slice<jule::U8>& _37933_txt) {
	return _228d36080_hex_escape(_37933_txt,6LL);
}



inline jule::Str _228d36080_hex_byte_escape(jule::Slice<jule::U8>& _38121_txt) {
	return _228d36080_hex_escape(_38121_txt,4LL);
}



inline jule::Str _228d36080_byte_escape(jule::Slice<jule::U8>& _38417_txt) {
	jule::Str _38432_seq = jule::Str();
	if (_38417_txt.len() < 4LL) {
		return _38432_seq;
	}
	if (((!(_228d7aadb_is_octal(_38417_txt[1LL]))) || (!(_228d7aadb_is_octal(_38417_txt[2LL])))) || (!(_228d7aadb_is_octal(_38417_txt[3LL])))) {
		return _38432_seq;
	}
	_38432_seq = static_cast<jule::Str>(_38417_txt.slice(0LL,4LL));
	return _38432_seq;
}



inline jule::Slice<_2276bcb9e_Log> _228d36080_lex(jule::Ptr<_228d34677_File> _78016_f) {
	if (_78016_f == nullptr) {
		return nullptr;
	}
	_228d36080_Lex _78513_lex = _228d36080_Lex(jule::Slice<_228d7aadb_Token>(),_78016_f,0LL,jule::Int(),-1LL,jule::Slice<_2276bcb9e_Log>());
	_78513_lex._method_new_line();
	_78513_lex._method_lex();
	if (_78513_lex._field_errors.len() > 0LL) {
		return _78513_lex._field_errors;
	}
	(*(_78016_f))._field__tokens=_78513_lex._field_tokens;
	return nullptr;
}



inline jule::Bool _228d5de21_find_module_file(jule::Slice<jule::Ptr<_22762b646_DirEntry>>& _1126_dirents) {
	{
		auto &expr = _1126_dirents;
		auto it = expr.begin();
		_iter_begin_5064922304:;
		if (it != expr.end()) {
			jule::Ptr<_22762b646_DirEntry> &_228d5de21_d = *it;
			{
				if ((!((*((*(_228d5de21_d))._field_stat))._method_is_dir())) && ((*(_228d5de21_d))._field_name == jule::Str("jule.mod", 8))) {
					return true;
				}
			}
			_iter_next_5064922304:;
			++it;
			goto _iter_begin_5064922304;
		}
		_iter_end_5064922304:;
	}
	return false;
}



inline jule::Str _228d5de21_find_module_file_deep(jule::Str _2334_path) {
	for (;;) {
		{
			jule::Slice<jule::Ptr<_22762b646_DirEntry>> _2517_dirents = ({
				auto except = _22762b646_Directory::_static_method_read(_2334_path);
				(except.ok()) ? (except.result) : ({{
					goto _iter_end_5064921568;
					goto _iter_end_5064921568;
				} jule::Slice<jule::Ptr<_22762b646_DirEntry>>();});
			});
			jule::Bool _2913_exist = _228d5de21_find_module_file(_2517_dirents);
			if (_2913_exist) {
				return _2334_path;
			}
			jule::I64 _3413_n = _2334_path.len();
			_2334_path=_227711594_dir(_2334_path);
			if (_2334_path.len() == _3413_n) {
				goto _iter_end_5064921568;
			}
		}
	_iter_next_5064921568:;
	}
	_iter_end_5064921568:;
	return jule::Str();
}



inline jule::Slice<_2276bcb9e_Log> _228d5de21_check_module_file(jule::Str _4526_path) {
	jule::Slice<jule::U8> _469_bytes = ({
		auto except = _2276a6c54_File::_static_method_read(_227711594_join(jule::Slice<jule::Str>({_4526_path,jule::Str("jule.mod", 8)})));
		(except.ok()) ? (except.result) : ({{
			return jule::Slice<_2276bcb9e_Log>({_2276bcb9e_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
			return jule::Slice<_2276bcb9e_Log>({_2276bcb9e_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
		} jule::Slice<jule::U8>();});
	});
	jule::Str _539_s = static_cast<jule::Str>(_469_bytes).trim(jule::Str(" \t\v\n", 4));
	if (_539_s.len() != 0LL) {
		return jule::Slice<_2276bcb9e_Log>({_2276bcb9e_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file has syntax error(s)", 31),jule::Str(),jule::Str())});
	}
	return nullptr;
}



inline jule::Ptr<_228d79a30_FileInfo> _228d79a30_parse_file(jule::Ptr<_228d34677_File> _2223_f) {
	if (_2223_f == nullptr) {
		return nullptr;
	}
	jule::Ptr<_228d79a30_FileInfo> _2713_finf = jule::new_struct<_228d79a30_FileInfo>(new( std::nothrow ) _228d79a30_FileInfo());
	std::tie((*(_2713_finf))._field_ast,(*(_2713_finf))._field_errors) = _228d79a30_parse_fileset(_2223_f);
	if ((*(_2713_finf))._field_errors.len() > 0LL) {
		(*(_2713_finf))._field_ast=nullptr;
	}
	return _2713_finf;
}



inline std::tuple<jule::Ptr<_228d3160d_Ast>,jule::Slice<_2276bcb9e_Log>> _228d79a30_parse_fileset(jule::Ptr<_228d34677_File> _5822_f) {
	jule::Ptr<_229a51c34_Parser> _5913_p = jule::new_struct_ptr<_229a51c34_Parser>(new( std::nothrow ) _229a51c34_Parser());
	(*(_5913_p))._method_parse(_5822_f);
	return std::make_tuple((*(_5913_p))._field_ast,(*(_5913_p))._field_errors);
}



inline jule::Ptr<_228d31971_ScopeTree> _228d45c71_new_scope(void) {
	return jule::new_struct<_228d31971_ScopeTree>(new( std::nothrow ) _228d31971_ScopeTree());
}



inline std::tuple<jule::Bool,jule::Bool> _228d45c71_is_st(_228d7aadb_Token _4610_current,_228d7aadb_Token _4626_prev) {
	jule::Bool _4641_ok = jule::Bool();
	jule::Bool _4651_terminated = jule::Bool();
	_4641_ok=(_4610_current._field_id == 5LLU) || (_4626_prev._field_row < _4610_current._field_row);
	_4651_terminated=_4610_current._field_id == 5LLU;
	return std::make_tuple(_4641_ok,_4651_terminated);
}



inline jule::Bool _228d45c71_prev_is_incomplete_expr(jule::Slice<_228d7aadb_Token>& _5229_tokens,jule::Int& _5247_i) {
	if ((_5247_i > 1LL) && (_5229_tokens[_5247_i - 2LL]._field_id == 23LLU)) {
		return false;
	}
	{
		_228d7aadb_Token* _5913_prev = (&(_5229_tokens[_5247_i - 1LL]));
		return ((*(_5913_prev))._field_id == 20LLU) || ((((*(_5913_prev))._field_id == 7LLU) && _228d7aadb_is_bin_op((*(_5913_prev))._field_kind)) && ((*(_5913_prev))._field_row < _5229_tokens[_5247_i]._field_row));
	}
}



inline std::tuple<jule::Int,jule::Bool> _228d45c71_next_st_pos(jule::Slice<_228d7aadb_Token>& _6817_tokens,jule::Int _6834_start) {
	jule::Int _6913_brace_n = 0LL;
	jule::Int _7013_i = _6834_start;
	for (; _7013_i < _6817_tokens.len(); (_7013_i)++) {
		{
			jule::Bool _7217_ok = false;
			jule::Bool _7317_terminated = false;
			_228d7aadb_Token _7413_tok = _6817_tokens[_7013_i];
			{
				auto &_match_expr{ _7413_tok._field_id };
				
				if (_match_expr == 3LLU) {
					_case_begin_5065165184:;
					{
						{
							auto &_match_expr{ _7413_tok._field_kind };
							
							if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
								_case_begin_5065171264:;
								{
									if ((_6913_brace_n == 0LL) && (_7013_i > _6834_start)) {
										if ((!(_228d45c71_prev_is_incomplete_expr(_6817_tokens,_7013_i)))) {
											std::tie(_7217_ok,_7317_terminated) = _228d45c71_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
											if (_7217_ok) {
												goto _julec_label_return;
											}
										}
									}
									(_6913_brace_n)++;
								}
							}
							else {
								_case_begin_5065165360:;
								{
									(_6913_brace_n)--;
									if ((_6913_brace_n == 0LL) && ((_7013_i + 1LL) < _6817_tokens.len())) {
										std::tie(_7217_ok,_7317_terminated) = _228d45c71_is_st(_6817_tokens[_7013_i + 1LL],_7413_tok);
										if (_7217_ok) {
											(_7013_i)++;
											goto _julec_label_return;
										}
									}
								}
							}
							_match_end_5065165536:;
						}
						goto _iter_next_5065160656;
					}
				}
				_match_end_5065164784:;
			}
			if (_6913_brace_n != 0LL) {
				goto _iter_next_5065160656;
			}
			if (_7013_i > _6834_start) {
				if (_228d45c71_prev_is_incomplete_expr(_6817_tokens,_7013_i)) {
					goto _iter_next_5065160656;
				}
				std::tie(_7217_ok,_7317_terminated) = _228d45c71_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
			} else {
				std::tie(_7217_ok,_7317_terminated) = _228d45c71_is_st(_7413_tok,_7413_tok);
			}
			if ((!(_7217_ok))) {
				goto _iter_next_5065160656;
			}
			_julec_label_return:;
			if (_7317_terminated) {
				(_7013_i)++;
			}
			return std::make_tuple(_7013_i,_7317_terminated);
		}
	_iter_next_5065160656:;
	}
	_iter_end_5065160656:;
	return std::make_tuple(_7013_i,false);
}



inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Bool> _228d45c71_skip_st(jule::Int& _13117_i,jule::Slice<_228d7aadb_Token> _13129_tokens) {
	jule::Int _1329_start = _13117_i;
	jule::Bool _13313_terminated = false;
	std::tie(_13117_i,_13313_terminated) = _228d45c71_next_st_pos(_13129_tokens,_1329_start);
	jule::Slice<_228d7aadb_Token> _13513_st_tokens = _13129_tokens.slice(_1329_start,_13117_i);
	if (_13313_terminated) {
		if (_13513_st_tokens.len() == 1LL) {
			std::tie(_13513_st_tokens,_13313_terminated) = _228d45c71_skip_st(_13117_i,_13129_tokens);
			return std::make_tuple(_13513_st_tokens,_13313_terminated);
		}
		_13513_st_tokens=_13513_st_tokens.slice(0LL,_13513_st_tokens.len() - 1LL);
	}
	return std::make_tuple(_13513_st_tokens,_13313_terminated);
}



inline jule::Slice<jule::Ptr<_228d45c71_Stmt>> _228d45c71_split_stmts(jule::Slice<_228d7aadb_Token>& _15321_tokens) {
	jule::Slice<jule::Ptr<_228d45c71_Stmt>> _15413_stms = nullptr;
	jule::Int _15513_pos = 0LL;
	while (_15513_pos < _15321_tokens.len()) {
		{
			jule::Slice<_228d7aadb_Token> _15718_tokens;
			jule::Bool _15726_terminated;
			std::tie(_15718_tokens,_15726_terminated) = _228d45c71_skip_st(_15513_pos,_15321_tokens);
			_15413_stms.push(jule::new_struct<_228d45c71_Stmt>(new( std::nothrow ) _228d45c71_Stmt(_15718_tokens,_15726_terminated)));
		}
	_iter_next_5065190688:;
	}
	_iter_end_5065190688:;
	return _15413_stms;
}



inline jule::Ptr<_229a547e7_CallData> _229a547e7_get_call_data(jule::Slice<_228d7aadb_Token>& _4523_tokens) {
	jule::Ptr<_229a547e7_CallData> _4613_data = jule::new_struct<_229a547e7_CallData>(new( std::nothrow ) _229a547e7_CallData());
	std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_args_tokens) = _229a51c34_range_last(_4523_tokens);
	if ((*(_4613_data))._field_expr_tokens.len() == 0LL) {
		return _4613_data;
	}
	_228d7aadb_Token _539_token = (*(_4613_data))._field_expr_tokens[(*(_4613_data))._field_expr_tokens.len() - 1LL];
	if ((_539_token._field_id == 3LLU) && (_539_token._field_kind == jule::Str("]", 1))) {
		std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_generics_tokens) = _229a51c34_range_last((*(_4613_data))._field_expr_tokens);
	}
	return _4613_data;
}



inline jule::Slice<_228d7aadb_Token> _229a547e7_get_block_expr(jule::Slice<_228d7aadb_Token>& _6124_tokens) {
	jule::Int _6213_brace_n = 0LL;
	jule::Int _6313_skip_to_next_brace_close = 0LL;
	{
		auto &expr = _6124_tokens;
		auto it = expr.begin();
		_iter_begin_5065210976:;
		if (it != expr.end()) {
			jule::Int _229a547e7_i = it - expr.begin();
			_228d7aadb_Token &_229a547e7_tok = *it;
			{
				{
					auto &_match_expr{ _229a547e7_tok._field_id };
					
					if (_match_expr == 16LLU || _match_expr == 17LLU || _match_expr == 35LLU) {
						_case_begin_5065213424:;
						{
							(_6313_skip_to_next_brace_close)++;
						}
					}
					else if (_match_expr == 3LLU) {
						_case_begin_5065213536:;
						{
							{
								auto &_match_expr{ _229a547e7_tok._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_5065217008:;
									{
										if ((_6213_brace_n > 0LL) || (_6313_skip_to_next_brace_close > 0LL)) {
											if (_6313_skip_to_next_brace_close > 0LL) {
												(_6313_skip_to_next_brace_close)--;
											}
											(_6213_brace_n)++;
											goto _match_end_5065215712;
										}
										return _6124_tokens.slice(0LL,_229a547e7_i);
									}
								}
								else if (_match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_5065217488:;
									{
										(_6213_brace_n)++;
									}
								}
								else {
									_case_begin_5065213696:;
									{
										(_6213_brace_n)--;
									}
								}
								_match_end_5065215712:;
							}
						}
					}
					_match_end_5065212944:;
				}
			}
			_iter_next_5065210976:;
			++it;
			_229a547e7_i++;
			goto _iter_begin_5065210976;
		}
		_iter_end_5065210976:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Slice<_228d7aadb_Token>> _229a547e7_split_colon(jule::Slice<_228d7aadb_Token>& _9521_tokens) {
	jule::Int _9613_range_n = 0LL;
	{
		auto &expr = _9521_tokens;
		auto it = expr.begin();
		_iter_begin_5065218480:;
		if (it != expr.end()) {
			jule::Int _229a547e7_i = it - expr.begin();
			_228d7aadb_Token &_229a547e7_token = *it;
			{
				{
					auto &_match_expr{ _229a547e7_token._field_id };
					
					if (_match_expr == 3LLU) {
						_case_begin_5065223072:;
						{
							{
								auto &_match_expr{ _229a547e7_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_5065225456:;
									{
										(_9613_range_n)++;
										goto _iter_next_5065218480;
									}
								}
								else {
									_case_begin_5065223280:;
									{
										(_9613_range_n)--;
									}
								}
								_match_end_5065223552:;
							}
						}
					}
					else if (_match_expr == 11LLU) {
						_case_begin_5065223184:;
						{
							if (_9613_range_n < 1LL) {
								jule::Slice<_228d7aadb_Token> _11325_l = _9521_tokens.slice(0LL,_229a547e7_i);
								jule::Slice<_228d7aadb_Token> _11425_r = _9521_tokens.slice(_229a547e7_i + 1LL);
								return std::make_tuple(_11325_l,_11425_r);
							}
						}
					}
					_match_end_5065222592:;
				}
			}
			_iter_next_5065218480:;
			++it;
			_229a547e7_i++;
			goto _iter_begin_5065218480;
		}
		_iter_end_5065218480:;
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_228d7aadb_Token> _229a547e7_eliminate_comments(jule::Slice<_228d7aadb_Token>& _12228_tokens) {
	jule::Slice<_228d7aadb_Token> _12313_cutted = nullptr;
	{
		auto &expr = _12228_tokens;
		auto it = expr.begin();
		_iter_begin_5065222400:;
		if (it != expr.end()) {
			_228d7aadb_Token _229a547e7_token = *it;
			{
				if (_229a547e7_token._field_id != 18LLU) {
					_12313_cutted.push(_229a547e7_token);
				}
			}
			_iter_next_5065222400:;
			++it;
			goto _iter_begin_5065222400;
		}
		_iter_end_5065222400:;
	}
	return _12313_cutted;
}



inline jule::Int _229a547e7_find_lowest_prec_op(jule::Slice<_228d7aadb_Token>& _13425_tokens) {
	jule::U8 _13913_prec = 255LLU;
	jule::Int _14013_prec_pos = -1LL;
	jule::Int _14213_brace_n = 0LL;
	jule::Bool _14313_skip_to_next_brace_open = false;
	{
		auto &expr = _13425_tokens;
		auto it = expr.begin();
		_iter_begin_5065237392:;
		if (it != expr.end()) {
			jule::Int _229a547e7_i = it - expr.begin();
			_228d7aadb_Token &_229a547e7_token = *it;
			{
				{
					
					if (_229a547e7_token._field_id == 3LLU) {
						_case_begin_5065239792:;
						{
							{
								auto &_match_expr{ _229a547e7_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_5065243584:;
									{
										_14313_skip_to_next_brace_open=false;
										goto _case_begin_5065243680;
									}
								}
								else if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("[", 1)) {
									_case_begin_5065243680:;
									{
										(_14213_brace_n)++;
									}
								}
								else {
									_case_begin_5065240512:;
									{
										(_14213_brace_n)--;
									}
								}
								_match_end_5065241296:;
							}
							goto _iter_next_5065237392;
						}
					}
					else if (_14313_skip_to_next_brace_open) {
						_case_begin_5065239904:;
						{
							goto _iter_next_5065237392;
						}
					}
					else if (_229a547e7_token._field_id == 16LLU) {
						_case_begin_5065240016:;
						{
							_14313_skip_to_next_brace_open=true;
							goto _iter_next_5065237392;
						}
					}
					else if (_229a547e7_i == 0LL) {
						_case_begin_5065240128:;
						{
							goto _iter_next_5065237392;
						}
					}
					else if (_229a547e7_token._field_id != 7LLU) {
						_case_begin_5065240240:;
						{
							goto _iter_next_5065237392;
						}
					}
					else if (_14213_brace_n > 0LL) {
						_case_begin_5065240352:;
						{
							goto _iter_next_5065237392;
						}
					}
					_match_end_5065239504:;
				}
				_228d7aadb_Token _17813_left = _13425_tokens[_229a547e7_i - 1LL];
				if ((_17813_left._field_id == 7LLU) || (_17813_left._field_id == 11LLU)) {
					goto _iter_next_5065237392;
				}
				if (((_229a547e7_i > 1LL) && (_17813_left._field_id == 3LLU)) && (_17813_left._field_kind == jule::Str("]", 1))) {
					_228d7aadb_Token _18617_lleft = _13425_tokens[_229a547e7_i - 2LL];
					if ((_18617_lleft._field_id == 3LLU) && (_18617_lleft._field_kind == jule::Str("[", 1))) {
						if ((_229a547e7_token._field_kind == jule::Str("&", 1)) || (_229a547e7_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_5065237392;
						}
					}
				}
				jule::U8 _19513_p = _229a547e7_token._method_prec();
				if ((_19513_p != 0LL) && (_19513_p <= _13913_prec)) {
					_13913_prec=_19513_p;
					_14013_prec_pos=_229a547e7_i;
				}
			}
			_iter_next_5065237392:;
			++it;
			_229a547e7_i++;
			goto _iter_begin_5065237392;
		}
		_iter_end_5065237392:;
	}
	return _14013_prec_pos;
}



inline jule::Ptr<_228d31971_IdentExpr> _229a547e7_build_ident_expr(_228d7aadb_Token& _20526_token) {
	return jule::new_struct<_228d31971_IdentExpr>(new( std::nothrow ) _228d31971_IdentExpr(_20526_token,_20526_token._field_kind,false));
}



inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Int> _229a547e7_get_range_expr_tokens(jule::Slice<_228d7aadb_Token>& _21331_tokens) {
	jule::Int _21413_range_n = 0LL;
	jule::I64 _21513_i = _21331_tokens.len() - 1LL;
	for (; _21513_i >= 0LL; (_21513_i)--) {
		{
			_228d7aadb_Token _21713_tok = _21331_tokens[_21513_i];
			if (_21713_tok._field_id == 3LLU) {
				{
					auto &_match_expr{ _21713_tok._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_5065265216:;
						{
							(_21413_range_n)++;
						}
					}
					else {
						_case_begin_5065263424:;
						{
							(_21413_range_n)--;
						}
					}
					_match_end_5065263536:;
				}
			}
			if (_21413_range_n == 0LL) {
				return std::make_tuple(_21331_tokens.slice(0LL,_21513_i),_21413_range_n);
			}
		}
	_iter_next_5065258864:;
	}
	_iter_end_5065258864:;
	return std::make_tuple(nullptr,_21413_range_n);
}



inline jule::Bool _228e13aa8_check_assign_tokens(jule::Slice<_228d7aadb_Token>& _1625_tokens) {
	if ((_1625_tokens.len() == 0LL) || (!(_228d7aadb_is_assign(_1625_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::Int _2113_brace_n = 0LL;
	{
		auto &expr = _1625_tokens;
		auto it = expr.begin();
		_iter_begin_5065270480:;
		if (it != expr.end()) {
			_228d7aadb_Token &_228e13aa8_t = *it;
			{
				if (_228e13aa8_t._field_id == 3LLU) {
					{
						auto &_match_expr{ _228e13aa8_t._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5065274544:;
							{
								(_2113_brace_n)++;
							}
						}
						else {
							_case_begin_5065272752:;
							{
								(_2113_brace_n)--;
							}
						}
						_match_end_5065272864:;
					}
				}
				if (_2113_brace_n < 0LL) {
					return false;
				} else if (_2113_brace_n > 0LL) {
					goto _iter_next_5065270480;
				} else if ((_228e13aa8_t._field_id == 7LLU) && _228d7aadb_is_assign_op(_228e13aa8_t._field_kind)) {
					return true;
				}
			}
			_iter_next_5065270480:;
			++it;
			goto _iter_begin_5065270480;
		}
		_iter_end_5065270480:;
	}
	return false;
}



inline _2276bcb9e_Log _229a51c34_make_err(jule::Int _5013_row,jule::Int _5023_col,jule::Ptr<_228d34677_File>& _5034_f,jule::Str _5044_fmt,jule::Slice<jule::Any> _5057_args) {
	return _2276bcb9e_Log(1LLU,_5013_row,_5023_col,(*(_5034_f))._method_path(),_2276bcb9e_logf(_5044_fmt,_5057_args),jule::Str(),jule::Str());
}



inline jule::Slice<_228d7aadb_Token> _229a51c34_range(jule::Int& _6915_i,jule::Str _6923_open,jule::Str _6940_close,jule::Slice<_228d7aadb_Token>& _6963_tokens) {
	if (_6915_i >= _6963_tokens.len()) {
		return nullptr;
	}
	_228d7aadb_Token _749_tok = _6963_tokens[_6915_i];
	if ((_749_tok._field_id != 3LLU) || (_749_tok._field_kind != _6923_open)) {
		return nullptr;
	}
	(_6915_i)++;
	jule::Int _8013_range_n = 1LL;
	jule::Int _819_start = _6915_i;
	for (; (_8013_range_n != 0LL) && (_6915_i < _6963_tokens.len()); (_6915_i)++) {
		{
			_228d7aadb_Token _8313_token = _6963_tokens[_6915_i];
			if (_8313_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _8313_token._field_kind };
					
					if (_match_expr == _6923_open) {
						_case_begin_5065291216:;
						{
							(_8013_range_n)++;
						}
					}
					else if (_match_expr == _6940_close) {
						_case_begin_5065291328:;
						{
							(_8013_range_n)--;
						}
					}
					_match_end_5065290736:;
				}
			}
		}
	_iter_next_5065287824:;
	}
	_iter_end_5065287824:;
	return _6963_tokens.slice(_819_start,_6915_i - 1LL);
}



inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Slice<_228d7aadb_Token>> _229a51c34_range_last(jule::Slice<_228d7aadb_Token>& _10220_tokens) {
	jule::Slice<_228d7aadb_Token> _10239_cutted = jule::Slice<_228d7aadb_Token>();
	jule::Slice<_228d7aadb_Token> _10256_cut = jule::Slice<_228d7aadb_Token>();
	if (_10220_tokens.len() == 0LL) {
		_10239_cutted = _10220_tokens;
		_10256_cut = nullptr;
		return std::make_tuple(_10239_cutted,_10256_cut);
	} else if (_10220_tokens[_10220_tokens.len() - 1LL]._field_id != 3LLU) {
		_10239_cutted = _10220_tokens;
		_10256_cut = nullptr;
		return std::make_tuple(_10239_cutted,_10256_cut);
	}
	jule::Int _10913_brace_n = 0LL;
	jule::I64 _11013_i = _10220_tokens.len() - 1LL;
	for (; _11013_i >= 0LL; (_11013_i)--) {
		{
			_228d7aadb_Token _11213_token = _10220_tokens[_11013_i];
			if (_11213_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _11213_token._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_5065303952:;
						{
							(_10913_brace_n)++;
							goto _iter_next_5065292336;
						}
					}
					else {
						_case_begin_5065302160:;
						{
							(_10913_brace_n)--;
						}
					}
					_match_end_5065302272:;
				}
			}
			if (_10913_brace_n == 0LL) {
				_10239_cutted = _10220_tokens.slice(0LL,_11013_i);
				_10256_cut = _10220_tokens.slice(_11013_i);
				return std::make_tuple(_10239_cutted,_10256_cut);
			}
		}
	_iter_next_5065292336:;
	}
	_iter_end_5065292336:;
	_10239_cutted = _10220_tokens;
	_10256_cut = nullptr;
	return std::make_tuple(_10239_cutted,_10256_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_228d7aadb_Token>>,jule::Slice<_2276bcb9e_Log>> _229a51c34_parts(jule::Slice<_228d7aadb_Token>& _14015_tokens,jule::Uint _14032_id,jule::Bool _14045_expr_must) {
	if (_14015_tokens.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_228d7aadb_Token>> _14513_parts = nullptr;
	jule::Slice<_2276bcb9e_Log> _14613_errors = nullptr;
	jule::Int _14813_range_n = 0LL;
	jule::Int _14913_last = 0LL;
	{
		auto &expr = _14015_tokens;
		auto it = expr.begin();
		_iter_begin_5065312672:;
		if (it != expr.end()) {
			jule::Int _229a51c34_i = it - expr.begin();
			_228d7aadb_Token &_229a51c34_token = *it;
			{
				if (_229a51c34_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _229a51c34_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_5065317408:;
							{
								(_14813_range_n)++;
								goto _iter_next_5065312672;
							}
						}
						else {
							_case_begin_5065315616:;
							{
								(_14813_range_n)--;
							}
						}
						_match_end_5065315728:;
					}
				}
				if (_14813_range_n > 0LL) {
					goto _iter_next_5065312672;
				}
				if (_229a51c34_token._field_id == _14032_id) {
					if (_14045_expr_must && ((_229a51c34_i - _14913_last) <= 0LL)) {
						_2276bcb9e_Log _16921_err = _229a51c34_make_err(_229a51c34_token._field_row,_229a51c34_token._field_column,_229a51c34_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
						_14613_errors.push(_16921_err);
					}
					_14513_parts.push(_14015_tokens.slice(_14913_last,_229a51c34_i));
					_14913_last=static_cast<jule::Int>(_229a51c34_i + 1LL);
				}
			}
			_iter_next_5065312672:;
			++it;
			_229a51c34_i++;
			goto _iter_begin_5065312672;
		}
		_iter_end_5065312672:;
	}
	if (_14913_last < _14015_tokens.len()) {
		_14513_parts.push(_14015_tokens.slice(_14913_last));
	} else if ((!(_14045_expr_must))) {
		_14513_parts.push(jule::Slice<_228d7aadb_Token>());
	}
	return std::make_tuple(_14513_parts,_14613_errors);
}



inline jule::Str _229a51c34_get_close_kind_of_brace(jule::Str _18628_left) {
	{
		auto &_match_expr{ _18628_left };
		
		if (_match_expr == jule::Str(")", 1)) {
			_case_begin_5065323104:;
			{
				return jule::Str("(", 1);
			}
		}
		else if (_match_expr == jule::Str("}", 1)) {
			_case_begin_5065327392:;
			{
				return jule::Str("{", 1);
			}
		}
		else if (_match_expr == jule::Str("]", 1)) {
			_case_begin_5065327488:;
			{
				return jule::Str("[", 1);
			}
		}
		else {
			_case_begin_5065312784:;
			{
				return jule::Str();
			}
		}
		_match_end_5065325664:;
	}
}



inline _2276bcb9e_Log _229a51c34_compiler_err(_228d7aadb_Token& _19518_token,jule::Str& _19533_fmt,jule::Slice<jule::Any> _19546_args) {
	return _2276bcb9e_Log(1LLU,_19518_token._field_row,_19518_token._field_column,(*(_19518_token._field_file))._method_path(),_2276bcb9e_logf(_19533_fmt,_19546_args),(*(_19518_token._field_file))._method_get_row(_19518_token._field_row),jule::Str());
}



inline void _229a51c34_push_suggestion(_2276bcb9e_Log* _20631_log,jule::Str _20642_fmt,jule::Slice<jule::Any> _20655_args) {
	(*(_20631_log))._field_suggestion=_2276bcb9e_logf(_20642_fmt,_20655_args);
}



inline jule::Ptr<_228d31971_Comment> _229a51c34_build_comment(_228d7aadb_Token& _21023_token) {
	_21023_token._field_kind=_21023_token._field_kind.slice(2LL).trim(jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_228d31971_Comment>(new( std::nothrow ) _228d31971_Comment(_21023_token,_21023_token._field_kind));
}



inline jule::Str _229a51c34_tokstoa(jule::Slice<_228d7aadb_Token>& _21913_tokens) {
	jule::Str _22013_s = jule::Str();
	{
		auto &expr = _21913_tokens;
		auto it = expr.begin();
		_iter_begin_5065338944:;
		if (it != expr.end()) {
			_228d7aadb_Token &_229a51c34_token = *it;
			{
				_22013_s+=_229a51c34_token._field_kind;
			}
			_iter_next_5065338944:;
			++it;
			goto _iter_begin_5065338944;
		}
		_iter_end_5065338944:;
	}
	return _22013_s;
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_build_void_type(void) {
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl());
}



inline jule::Ptr<_228d31971_TypeDecl> _1e5543d98_build_prim_type(_228d7aadb_Token _2024_token) {
	return jule::new_struct<_228d31971_TypeDecl>(new( std::nothrow ) _228d31971_TypeDecl(_2024_token,jule::Any(jule::new_struct<_228d31971_IdentTypeDecl>(new( std::nothrow ) _228d31971_IdentTypeDecl(_2024_token,_2024_token._field_kind,false,nullptr)))));
}



inline std::tuple<jule::Slice<_228d7aadb_Token>,jule::Int> _1e5543d98_split_map_range(jule::Slice<_228d7aadb_Token>& _3525_tokens,jule::Int& _3547_i) {
	jule::Slice<_228d7aadb_Token> _3557_range_tokens = jule::Slice<_228d7aadb_Token>();
	jule::Int _3580_colon = jule::Int();
	_3580_colon=-1LL;
	jule::Int _3713_range_n = 0LL;
	jule::Int _389_start = _3547_i;
	for (; _3547_i < _3525_tokens.len(); (_3547_i)++) {
		{
			_228d7aadb_Token _4013_token = _3525_tokens[_3547_i];
			if (_4013_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _4013_token._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_5065352752:;
						{
							(_3713_range_n)++;
							goto _iter_next_5065346928;
						}
					}
					else {
						_case_begin_5065350960:;
						{
							(_3713_range_n)--;
						}
					}
					_match_end_5065351072:;
				}
			}
			if (_3713_range_n == 0LL) {
				if ((_389_start + 1LL) > _3547_i) {
					return std::make_tuple(_3557_range_tokens,_3580_colon);
				}
				_3557_range_tokens=_3525_tokens.slice(_389_start + 1LL,_3547_i);
				goto _iter_end_5065346928;
			} else if (_3713_range_n != 1LL) {
				goto _iter_next_5065346928;
			}
			if ((_3580_colon == -1LL) && (_4013_token._field_id == 11LLU)) {
				_3580_colon=static_cast<jule::Int>((_3547_i - _389_start) - 1LL);
			}
		}
	_iter_next_5065346928:;
	}
	_iter_end_5065346928:;
	return std::make_tuple(_3557_range_tokens,_3580_colon);
}



inline void _1e856e8a4_lshift_unsig(_1e856e8a4_Const& _55822_c,_1e856e8a4_Const& _55833_x) {
	jule::U64 _5599_l = _55822_c._method_as_u64();
	jule::U64 _5609_r = _55833_x._method_as_u64();
	_55822_c._method_set_u64(static_cast<jule::U64>(_5599_l << _5609_r));
}



inline void _1e856e8a4_rshift_unsig(_1e856e8a4_Const& _56422_c,_1e856e8a4_Const& _56433_x) {
	jule::U64 _5659_l = _56422_c._method_as_u64();
	jule::U64 _5669_r = _56433_x._method_as_u64();
	_56422_c._method_set_u64(static_cast<jule::U64>(_5659_l >> _5669_r));
}



inline jule::Str _1e8570b6e_real_kind_of(jule::Str _2421_kind) {
	{
		auto &_match_expr{ _2421_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_5068123440:;
			{
				return jule::Str("i64", 3);
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("uintptr", 7)) {
			_case_begin_5068123536:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_5068108688:;
			{
				return _2421_kind;
			}
		}
		_match_end_5068119600:;
	}
}



inline jule::Int _1e8570b6e_bitsize_of(jule::Str _4019_k) {
	{
		auto &_match_expr{ _4019_k };
		
		if (_match_expr == jule::Str("i8", 2) || _match_expr == jule::Str("u8", 2)) {
			_case_begin_5068127072:;
			{
				return 8LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3) || _match_expr == jule::Str("u16", 3)) {
			_case_begin_5068127168:;
			{
				return 16LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3) || _match_expr == jule::Str("u32", 3) || _match_expr == jule::Str("f32", 3)) {
			_case_begin_5068126608:;
			{
				return 32LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3) || _match_expr == jule::Str("u64", 3) || _match_expr == jule::Str("f64", 3)) {
			_case_begin_5068126704:;
			{
				return 64LL;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("int", 3)) {
			_case_begin_5068126800:;
			{
				return 64LL;
			}
		}
		else {
			_case_begin_5068125968:;
			{
				return -1LL;
			}
		}
		_match_end_5068124080:;
	}
}



inline jule::Str _1e8570b6e_int_from_bits(jule::U64 _7222_bits) {
	{
		auto &_match_expr{ _7222_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_5068134240:;
			{
				return jule::Str("i8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_5068134432:;
			{
				return jule::Str("i16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_5068134528:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5068134624:;
			{
				return jule::Str("i64", 3);
			}
		}
		else {
			_case_begin_5068131696:;
			{
				return jule::Str();
			}
		}
		_match_end_5068132000:;
	}
}



inline jule::Str _1e8570b6e_uint_from_bits(jule::U64 _8523_bits) {
	{
		auto &_match_expr{ _8523_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_5068138832:;
			{
				return jule::Str("u8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_5068139024:;
			{
				return jule::Str("u16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_5068139120:;
			{
				return jule::Str("u32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_5068139216:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_5068136816:;
			{
				return jule::Str();
			}
		}
		_match_end_5068137184:;
	}
}



inline jule::Bool _1e8570b6e_check_bit_float(jule::Str _12324_val,jule::Int _12334_bit) {
	jule::Int _12413_err;
	std::tie(std::ignore,_12413_err) = _2284c0eac_parse_float(_12324_val,_12334_bit);
	return _12413_err == 0LLU;
}



inline jule::U64 _1e8570b6e_bitsize_of_int(jule::I64 _14723_x) {
	{
		
		if ((-128LL <= _14723_x) && (_14723_x <= 127LL)) {
			_case_begin_5068166720:;
			{
				return 8LL;
			}
		}
		else if ((-32768LL <= _14723_x) && (_14723_x <= 32767LL)) {
			_case_begin_5068165408:;
			{
				return 16LL;
			}
		}
		else if ((-2147483648LL <= _14723_x) && (_14723_x <= 2147483647LL)) {
			_case_begin_5068165504:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_5068164704:;
			{
				return 64LL;
			}
		}
		_match_end_5068163440:;
	}
}



inline jule::U64 _1e8570b6e_bitsize_of_uint(jule::U64 _16324_x) {
	{
		
		if (_16324_x <= 255LL) {
			_case_begin_5068172544:;
			{
				return 8LL;
			}
		}
		else if (_16324_x <= 65535LL) {
			_case_begin_5068171232:;
			{
				return 16LL;
			}
		}
		else if (_16324_x <= 4294967295LL) {
			_case_begin_5068171328:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_5068170528:;
			{
				return 64LL;
			}
		}
		_match_end_5068169392:;
	}
}



inline jule::F64 _1e8572e29_min(jule::Str _4316_k) {
	_4316_k=_1e8570b6e_real_kind_of(_4316_k);
	{
		auto &_match_expr{ _4316_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5068177520:;
			{
				return -128LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5068176320:;
			{
				return -32768LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5068176416:;
			{
				return -2147483648LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5068176512:;
			{
				return jule::MIN_I64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5068176624:;
			{
				return -340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5068176736:;
			{
				return jule::MIN_F64;
			}
		}
		else {
			_case_begin_5068175472:;
			{
				return 0LL;
			}
		}
		_match_end_5068174496:;
	}
}



inline jule::F64 _1e8572e29_max(jule::Str _5816_k) {
	_5816_k=_1e8570b6e_real_kind_of(_5816_k);
	{
		auto &_match_expr{ _5816_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5068182784:;
			{
				return 127LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5068182880:;
			{
				return 32767LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5068182976:;
			{
				return 2147483647LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5068183072:;
			{
				return jule::MAX_I64;
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_5068183248:;
			{
				return 255LL;
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5068183344:;
			{
				return 65535LL;
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5068183456:;
			{
				return 4294967295LL;
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5068183568:;
			{
				return jule::MAX_U64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5068183680:;
			{
				return 340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5068183792:;
			{
				return jule::MAX_F64;
			}
		}
		else {
			_case_begin_5068181152:;
			{
				return 0LL;
			}
		}
		_match_end_5068182160:;
	}
}



inline jule::Bool _1e85717c9_is_i8_compatible(jule::Str _629_k) {
	_629_k=_1e8570b6e_real_kind_of(_629_k);
	return _629_k == jule::Str("i8", 2);
}



inline jule::Bool _1e85717c9_is_i16_compatible(jule::Str _1230_k) {
	_1230_k=_1e8570b6e_real_kind_of(_1230_k);
	return (_1230_k == jule::Str("i8", 2)) || (_1230_k == jule::Str("i16", 3));
}



inline jule::Bool _1e85717c9_is_i32_compatible(jule::Str _1930_k) {
	_1930_k=_1e8570b6e_real_kind_of(_1930_k);
	return (((_1930_k == jule::Str("i8", 2)) || (_1930_k == jule::Str("i16", 3))) || (_1930_k == jule::Str("i32", 3))) || (_1930_k == jule::Str("u8", 2));
}



inline jule::Bool _1e85717c9_is_i64_compatible(jule::Str _2830_k) {
	_2830_k=_1e8570b6e_real_kind_of(_2830_k);
	return (((_2830_k == jule::Str("i8", 2)) || (_2830_k == jule::Str("i16", 3))) || (_2830_k == jule::Str("i32", 3))) || (_2830_k == jule::Str("i64", 3));
}



inline jule::Bool _1e85717c9_is_u8_compatible(jule::Str _3729_k) {
	_3729_k=_1e8570b6e_real_kind_of(_3729_k);
	return _3729_k == jule::Str("u8", 2);
}



inline jule::Bool _1e85717c9_is_u16_compatible(jule::Str _4330_k) {
	_4330_k=_1e8570b6e_real_kind_of(_4330_k);
	return (_4330_k == jule::Str("u8", 2)) || (_4330_k == jule::Str("u16", 3));
}



inline jule::Bool _1e85717c9_is_u32_compatible(jule::Str _4930_k) {
	_4930_k=_1e8570b6e_real_kind_of(_4930_k);
	return ((_4930_k == jule::Str("u8", 2)) || (_4930_k == jule::Str("u16", 3))) || (_4930_k == jule::Str("u32", 3));
}



inline jule::Bool _1e85717c9_is_u64_compatible(jule::Str _5730_k) {
	_5730_k=_1e8570b6e_real_kind_of(_5730_k);
	return (((_5730_k == jule::Str("u8", 2)) || (_5730_k == jule::Str("u16", 3))) || (_5730_k == jule::Str("u32", 3))) || (_5730_k == jule::Str("u64", 3));
}



inline jule::Bool _1e85717c9_is_f32_compatible(jule::Str _6630_k) {
	_6630_k=_1e8570b6e_real_kind_of(_6630_k);
	return _6630_k == jule::Str("f32", 3);
}



inline jule::Bool _1e85717c9_is_f64_compatible(jule::Str _7230_k) {
	_7230_k=_1e8570b6e_real_kind_of(_7230_k);
	return _7230_k == jule::Str("f64", 3);
}



inline jule::Bool _1e85717c9_types_are_compatible(jule::Str _8033_k1,jule::Str _8042_k2) {
	_8033_k1=_1e8570b6e_real_kind_of(_8033_k1);
	{
		auto &_match_expr{ _8033_k1 };
		
		if (_match_expr == jule::Str("any", 3)) {
			_case_begin_5068211424:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_5068211520:;
			{
				return _1e85717c9_is_i8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5068211616:;
			{
				return _1e85717c9_is_i16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5068211712:;
			{
				return _1e85717c9_is_i32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5068211888:;
			{
				return _1e85717c9_is_i64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_5068211984:;
			{
				return _1e85717c9_is_u8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5068212080:;
			{
				return _1e85717c9_is_u16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5068212192:;
			{
				return _1e85717c9_is_u32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5068212304:;
			{
				return _1e85717c9_is_u64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5068212768:;
			{
				return _1e85717c9_is_f32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5068212864:;
			{
				return _1e85717c9_is_f64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("bool", 4)) {
			_case_begin_5068212976:;
			{
				return _8042_k2 == jule::Str("bool", 4);
			}
		}
		else if (_match_expr == jule::Str("str", 3)) {
			_case_begin_5068213088:;
			{
				return _8042_k2 == jule::Str("str", 3);
			}
		}
		else {
			_case_begin_5068210000:;
			{
				return false;
			}
		}
		_match_end_5068210368:;
	}
}



inline jule::Bool _1e85717c9_is_i16_greater(jule::Str _10127_k) {
	_10127_k=_1e8570b6e_real_kind_of(_10127_k);
	return _10127_k == jule::Str("i8", 2);
}



inline jule::Bool _1e85717c9_is_i32_greater(jule::Str _10727_k) {
	_10727_k=_1e8570b6e_real_kind_of(_10727_k);
	return (_10727_k == jule::Str("i8", 2)) || (_10727_k == jule::Str("i16", 3));
}



inline jule::Bool _1e85717c9_is_i64_greater(jule::Str _11327_k) {
	_11327_k=_1e8570b6e_real_kind_of(_11327_k);
	return ((_11327_k == jule::Str("i8", 2)) || (_11327_k == jule::Str("i16", 3))) || (_11327_k == jule::Str("i32", 3));
}



inline jule::Bool _1e85717c9_is_u16_greater(jule::Str _12127_k) {
	_12127_k=_1e8570b6e_real_kind_of(_12127_k);
	return _12127_k == jule::Str("u8", 2);
}



inline jule::Bool _1e85717c9_is_u32_greater(jule::Str _12727_k) {
	_12727_k=_1e8570b6e_real_kind_of(_12727_k);
	return (_12727_k == jule::Str("u8", 2)) || (_12727_k == jule::Str("u16", 3));
}



inline jule::Bool _1e85717c9_is_u64_greater(jule::Str _13427_k) {
	_13427_k=_1e8570b6e_real_kind_of(_13427_k);
	return ((_13427_k == jule::Str("u8", 2)) || (_13427_k == jule::Str("u16", 3))) || (_13427_k == jule::Str("u32", 3));
}



inline jule::Bool _1e85717c9_is_f32_greater(jule::Str _14223_k) {
	return _14223_k != jule::Str("f64", 3);
}



inline jule::Bool _1e85717c9_is_f64_greater(jule::Str _14423_k) {
	return true;
}



inline jule::Bool _1e85717c9_is_greater(jule::Str _14723_k1,jule::Str _14732_k2) {
	_14723_k1=_1e8570b6e_real_kind_of(_14723_k1);
	{
		auto &_match_expr{ _14723_k1 };
		
		if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_5068240352:;
			{
				return _1e85717c9_is_i16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_5068239120:;
			{
				return _1e85717c9_is_i32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_5068239216:;
			{
				return _1e85717c9_is_i64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_5068239312:;
			{
				return _1e85717c9_is_u16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_5068239424:;
			{
				return _1e85717c9_is_u32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_5068239600:;
			{
				return _1e85717c9_is_u64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_5068239712:;
			{
				return _1e85717c9_is_f32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_5068239824:;
			{
				return _1e85717c9_is_f64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("any", 3)) {
			_case_begin_5068239936:;
			{
				return true;
			}
		}
		else {
			_case_begin_5068237424:;
			{
				return false;
			}
		}
		_match_end_5068237344:;
	}
}



inline jule::Bool _1e860322e_is_sig_int(jule::Str _2723_k) {
	_2723_k=_1e8570b6e_real_kind_of(_2723_k);
	return (((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3));
}



inline jule::Bool _1e860322e_is_unsig_int(jule::Str _3625_k) {
	_3625_k=_1e8570b6e_real_kind_of(_3625_k);
	return (((_3625_k == jule::Str("u8", 2)) || (_3625_k == jule::Str("u16", 3))) || (_3625_k == jule::Str("u32", 3))) || (_3625_k == jule::Str("u64", 3));
}



inline jule::Bool _1e860322e_is_int(jule::Str _4515_k) {
	return _1e860322e_is_sig_int(_4515_k) || _1e860322e_is_unsig_int(_4515_k);
}



inline jule::Bool _1e860322e_is_float(jule::Str _5017_k) {
	return (_5017_k == jule::Str("f32", 3)) || (_5017_k == jule::Str("f64", 3));
}



inline jule::Bool _1e860322e_is_num(jule::Str _5515_k) {
	return _1e860322e_is_int(_5515_k) || _1e860322e_is_float(_5515_k);
}



inline jule::Bool _1e86ab2b5_is_ascii(jule::I32 _1017_r) {
	
	return _1017_r <= 127LLU;
}



inline jule::I32 _1e86ab2b5_to_rune(jule::Slice<jule::U8> _1816_bytes) {
	if (_1816_bytes.len() == 0LL) {
		return 0LL;
	}
	jule::I32 _2313_r = 0LL;
	if ((_1816_bytes[0LL] == '\\') && (_1816_bytes.len() > 1LL)) {
		jule::Int _2517_i = 0LL;
		_2313_r=static_cast<jule::I32>(_1e86ab2b5_rune_from_esq_seq(_1816_bytes,_2517_i));
	} else {
		std::tie(_2313_r,std::ignore) = _228e84d38_decode_rune(_1816_bytes);
	}
	return _2313_r;
}



inline jule::Str _1e86ab2b5_to_raw_str(jule::Slice<jule::U8> _3719_bytes) {
	return static_cast<jule::Str>(_3719_bytes);
}



inline jule::Str _1e86ab2b5_to_str(jule::Slice<jule::U8> _4215_bytes) {
	if (_4215_bytes.len() == 0LL) {
		return jule::Str();
	}
	jule::Slice<jule::U8> _4713_s = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_4215_bytes.len()));
	jule::Int _4813_i = 0LL;
	while (_4813_i < _4215_bytes.len()) {
		{
			jule::U8 _5013_b = _4215_bytes[_4813_i];
			if (_5013_b == '\\') {
				_4713_s=jule::append(_4713_s,_1e86ab2b5_str_esq_seq(_4215_bytes,_4813_i));
			} else {
				jule::I32 _5418_r;
				jule::Int _5421_size;
				std::tie(_5418_r,_5421_size) = _228e84d38_decode_rune(_4215_bytes.slice(_4813_i));
				_4813_i+=_5421_size;
				_4713_s=_228e84d38_append_rune(_4713_s,_5418_r);
			}
		}
	_iter_next_5068278256:;
	}
	_iter_end_5068278256:;
	return static_cast<jule::Str>(_4713_s);
}



inline std::tuple<jule::U8,jule::Bool> _1e86ab2b5_try_btoa_common_esq(jule::Slice<jule::U8> _6224_bytes) {
	jule::U8 _6241_seq = jule::U8();
	jule::Bool _6252_ok = jule::Bool();
	if ((_6224_bytes.len() < 2LL) || (_6224_bytes[0LL] != '\\')) {
		return std::make_tuple(_6241_seq,_6252_ok);
	}
	{
		auto &_match_expr{ _6224_bytes[1LL] };
		
		if (_match_expr == '\\') {
			_case_begin_5068292640:;
			{
				_6241_seq='\\';
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_5068293472:;
			{
				_6241_seq='\'';
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_5068293568:;
			{
				_6241_seq='\"';
			}
		}
		else if (_match_expr == 'a') {
			_case_begin_5068293664:;
			{
				_6241_seq='\a';
			}
		}
		else if (_match_expr == 'b') {
			_case_begin_5068293760:;
			{
				_6241_seq='\b';
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_5068293856:;
			{
				_6241_seq='\f';
			}
		}
		else if (_match_expr == 'n') {
			_case_begin_5068293952:;
			{
				_6241_seq='\n';
			}
		}
		else if (_match_expr == 'r') {
			_case_begin_5068294064:;
			{
				_6241_seq='\r';
			}
		}
		else if (_match_expr == 't') {
			_case_begin_5068294176:;
			{
				_6241_seq='\t';
			}
		}
		else if (_match_expr == 'v') {
			_case_begin_5068294288:;
			{
				_6241_seq='\v';
			}
		}
		_match_end_5068292944:;
	}
	_6252_ok=_6241_seq != 0LL;
	return std::make_tuple(_6241_seq,_6252_ok);
}



inline jule::I32 _1e86ab2b5_rune_from_esq_seq(jule::Slice<jule::U8> _8422_bytes,jule::Int& _8442_i) {
	jule::U8 _8510_b;
	jule::Bool _8513_ok;
	std::tie(_8510_b,_8513_ok) = _1e86ab2b5_try_btoa_common_esq(_8422_bytes.slice(_8442_i));
	(_8442_i)++;
	if (_8513_ok) {
		(_8442_i)++;
		return static_cast<jule::I32>(static_cast<jule::I32>(_8510_b));
	}
	{
		auto &_match_expr{ _8422_bytes[_8442_i] };
		
		if (_match_expr == 'u') {
			_case_begin_5068309776:;
			{
				
				jule::U64 _9514_rc;
				std::tie(_9514_rc,std::ignore) = _2277861c9_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 5LL)),16LL,64LL);
				_8442_i+=5LL;
				jule::I32 _9713_r = static_cast<jule::I32>(_9514_rc);
				return _9713_r;
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_5068313008:;
			{
				
				jule::U64 _10214_rc;
				std::tie(_10214_rc,std::ignore) = _2277861c9_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 9LL)),16LL,64LL);
				_8442_i+=9LL;
				jule::I32 _10413_r = static_cast<jule::I32>(_10214_rc);
				return _10413_r;
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_5068313104:;
			{
				
				jule::Slice<jule::U8> _10913_seq = _8422_bytes.slice(_8442_i + 1LL,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11114_b;
				std::tie(_11114_b,std::ignore) = _2277861c9_parse_uint(static_cast<jule::Str>(_10913_seq),16LL,64LL);
				return static_cast<jule::I32>(static_cast<jule::I32>(_11114_b));
			}
		}
		else {
			_case_begin_5068306960:;
			{
				
				jule::Slice<jule::U8> _11613_seq = _8422_bytes.slice(_8442_i,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11814_b;
				std::tie(_11814_b,std::ignore) = _2277861c9_parse_uint(static_cast<jule::Str>(_11613_seq.slice(1LL)),8LL,64LL);
				return static_cast<jule::I32>(static_cast<jule::I32>(_11814_b));
			}
		}
		_match_end_5068306656:;
	}
}



inline jule::Slice<jule::U8> _1e86ab2b5_str_esq_seq(jule::Slice<jule::U8> _12316_bytes,jule::Int& _12336_i) {
	jule::I32 _1249_r = _1e86ab2b5_rune_from_esq_seq(_12316_bytes,_12336_i);
	if (_1249_r <= 255LL) {
		return jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_1249_r))});
	}
	return static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1249_r));
}



inline jule::Bool _229b6ebcb_kind_uses_generics(jule::Ptr<_229d681e3_TypeKind> _39923_k,jule::Slice<jule::Ptr<_228d31971_GenericDecl>>& _39938_generics) {
	jule::Str _4009_pk = (*(_39923_k))._method_to_str();
	{
		auto &expr = _39938_generics;
		auto it = expr.begin();
		_iter_begin_5069218304:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_GenericDecl> &_229b6ebcb_g = *it;
			{
				if (_4009_pk.find((*(_229b6ebcb_g))._field_ident) != -1LL) {
					return true;
				}
			}
			_iter_next_5069218304:;
			++it;
			goto _iter_begin_5069218304;
		}
		_iter_end_5069218304:;
	}
	return false;
}



inline jule::Bool _229b6ebcb_parameter_uses_generics(jule::Ptr<_229b6ebcb_Param>& _40929_p,jule::Slice<jule::Ptr<_228d31971_GenericDecl>>& _40941_generics) {
	if ((*(_40929_p))._method_is_self()) {
		return false;
	}
	return _229b6ebcb_kind_uses_generics((*((*(_40929_p))._field_kind))._field_kind,_40941_generics);
}



inline jule::Str _228d6ecab_str_repeat(jule::Str _8415_sub,jule::Int _8429_n) {
	if (_8429_n == 0LL) {
		return jule::Str();
	}
	jule::Str _8913_s = jule::Str();
	for (; _8429_n > 0LL; (_8429_n)--) {
		{
			_8913_s+=_8415_sub;
		}
	_iter_next_5069224880:;
	}
	_iter_end_5069224880:;
	return _8913_s;
}



inline jule::Str _228d6ecab_build_doc(jule::Ptr<_228d31971_CommentGroup> _9618_cg) {
	if (_9618_cg == nullptr) {
		return jule::Str();
	}
	jule::Str _10113_doc = jule::Str();
	{
		auto &expr = (*(_9618_cg))._field_comments;
		auto it = expr.begin();
		_iter_begin_5069231648:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Comment> &_228d6ecab_c = *it;
			{
				_10113_doc+=(*(_228d6ecab_c))._field_text;
				_10113_doc+=jule::Str(" ", 1);
			}
			_iter_next_5069231648:;
			++it;
			goto _iter_begin_5069231648;
		}
		_iter_end_5069231648:;
	}
	return _10113_doc;
}



inline jule::Ptr<_229d681e3_TypeSymbol> _228d6ecab_build_type(jule::Ptr<_228d31971_TypeDecl> _10919_t) {
	if (_10919_t == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(_10919_t,jule::Ptr<_229d681e3_TypeKind>()));
}



inline jule::Ptr<_229d70d33_Value> _228d6ecab_build_expr(jule::Ptr<_228d31971_Expr> _11819_expr) {
	if (_11819_expr == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_229d70d33_Value>(new( std::nothrow ) _229d70d33_Value(_11819_expr,jule::Ptr<_229d70d33_Data>()));
}



inline jule::Ptr<_229d681e3_TypeAlias> _228d6ecab_build_type_alias(jule::Ptr<_228d31971_TypeAliasDecl> _12825_decl) {
	return jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias((*(_12825_decl))._field_scope,(*(_12825_decl))._field_public,(*(_12825_decl))._field_cpp_linked,jule::Bool(),jule::Bool(),(*(_12825_decl))._field_token,(*(_12825_decl))._field_ident,_228d6ecab_build_type((*(_12825_decl))._field_kind),_228d6ecab_build_doc((*(_12825_decl))._field_doc_comments),jule::Slice<jule::Any>()));
}



inline jule::Ptr<_228e0d025_Field> _228d6ecab_build_field(jule::Ptr<_228d31971_FieldDecl> _14020_decl) {
	return jule::new_struct_ptr<_228e0d025_Field>(new( std::nothrow ) _228e0d025_Field(jule::Ptr<_228e0d025_Struct>(),(*(_14020_decl))._field_token,(*(_14020_decl))._field_public,(*(_14020_decl))._field_mutable,(*(_14020_decl))._field_ident,_228d6ecab_build_type((*(_14020_decl))._field_kind),(*(_14020_decl))._field_default));
}



inline jule::Slice<jule::Ptr<_228e0d025_Field>> _228d6ecab_build_fields(jule::Slice<jule::Ptr<_228d31971_FieldDecl>>& _15122_decls) {
	jule::Slice<jule::Ptr<_228e0d025_Field>> _15213_fields = jule::Slice<jule::Ptr<_228e0d025_Field>>::alloc(0LL,static_cast<jule::I64>(_15122_decls.len()));
	{
		auto &expr = _15122_decls;
		auto it = expr.begin();
		_iter_begin_5069247360:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_FieldDecl> _228d6ecab_decl = *it;
			{
				_15213_fields.push(_228d6ecab_build_field(_228d6ecab_decl));
			}
			_iter_next_5069247360:;
			++it;
			goto _iter_begin_5069247360;
		}
		_iter_end_5069247360:;
	}
	return _15213_fields;
}



inline jule::Ptr<_228e0d025_Struct> _228d6ecab_build_struct(jule::Ptr<_228d31971_StructDecl> _15921_decl) {
	return jule::new_struct_ptr<_228e0d025_Struct>(new( std::nothrow ) _228e0d025_Struct(jule::Ptr<_1e538b460_Sema>(),jule::Slice<jule::Ptr<_228e0d025_Struct>>(),jule::Slice<jule::Ptr<_228e0d025_Struct>>(),(*(_15921_decl))._field_token,(*(_15921_decl))._field_ident,_228d6ecab_build_fields((*(_15921_decl))._field_fields),jule::Slice<jule::Ptr<_229b6ebcb_Fn>>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>(),(*(_15921_decl))._field_public,(*(_15921_decl))._field_cpp_linked,(*(_15921_decl))._field_directives,_228d6ecab_build_doc((*(_15921_decl))._field_doc_comments),(*(_15921_decl))._field_generics,jule::Slice<jule::Ptr<_229b5076c_Trait>>(),jule::Slice<jule::Ptr<_228e0d025_StructIns>>()));
}



inline jule::Ptr<_229b6ebcb_Param> _228d6ecab_build_param(jule::Ptr<_228d31971_ParamDecl> _17220_decl) {
	return jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param((*(_17220_decl))._field_token,(*(_17220_decl))._field_mutable,(*(_17220_decl))._field_variadic,(*(_17220_decl))._field_reference,_228d6ecab_build_type((*(_17220_decl))._field_kind),(*(_17220_decl))._field_ident));
}



inline jule::Slice<jule::Ptr<_229b6ebcb_Param>> _228d6ecab_build_params(jule::Slice<jule::Ptr<_228d31971_ParamDecl>>& _18322_decls) {
	jule::Slice<jule::Ptr<_229b6ebcb_Param>> _18413_params = jule::Slice<jule::Ptr<_229b6ebcb_Param>>::alloc(0LL,static_cast<jule::I64>(_18322_decls.len()));
	{
		auto &expr = _18322_decls;
		auto it = expr.begin();
		_iter_begin_5069259408:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_ParamDecl> _228d6ecab_decl = *it;
			{
				_18413_params.push(_228d6ecab_build_param(_228d6ecab_decl));
			}
			_iter_next_5069259408:;
			++it;
			goto _iter_begin_5069259408;
		}
		_iter_end_5069259408:;
	}
	return _18413_params;
}



inline jule::Ptr<_229b6ebcb_RetType> _228d6ecab_build_ret_type(jule::Ptr<_228d31971_RetTypeDecl> _19123_decl) {
	if (((*(_19123_decl))._field_idents == nullptr) && ((*(_19123_decl))._field_kind == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_229b6ebcb_RetType>(new( std::nothrow ) _229b6ebcb_RetType(_228d6ecab_build_type((*(_19123_decl))._field_kind),(*(_19123_decl))._field_idents));
}



inline jule::Ptr<_229b6ebcb_Fn> _228d6ecab_build_fn(jule::Ptr<_228d31971_FnDecl> _20117_decl) {
	return jule::new_struct_ptr<_229b6ebcb_Fn>(new( std::nothrow ) _229b6ebcb_Fn(jule::Ptr<_1e538b460_Sema>(),(*(_20117_decl))._field_token,(*(_20117_decl))._field_global,(*(_20117_decl))._field_unsafety,(*(_20117_decl))._field_public,(*(_20117_decl))._field_cpp_linked,(*(_20117_decl))._field_statically,(*(_20117_decl))._field_exceptional,(*(_20117_decl))._field_ident,(*(_20117_decl))._field_directives,_228d6ecab_build_doc((*(_20117_decl))._field_doc_comments),(*(_20117_decl))._field_scope,(*(_20117_decl))._field_generics,_228d6ecab_build_ret_type((*(_20117_decl))._field_result),_228d6ecab_build_params((*(_20117_decl))._field_params),jule::Ptr<_228e0d025_Struct>(),jule::Slice<jule::Ptr<_229b6ebcb_FnIns>>()));
}



inline jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _228d6ecab_build_methods(jule::Slice<jule::Ptr<_228d31971_FnDecl>>& _22023_decls) {
	jule::Slice<jule::Ptr<_229b6ebcb_Fn>> _22113_methods = jule::Slice<jule::Ptr<_229b6ebcb_Fn>>::alloc(0LL,static_cast<jule::I64>(_22023_decls.len()));
	{
		auto &expr = _22023_decls;
		auto it = expr.begin();
		_iter_begin_5069274976:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_FnDecl> _228d6ecab_decl = *it;
			{
				_22113_methods.push(_228d6ecab_build_fn(_228d6ecab_decl));
			}
			_iter_next_5069274976:;
			++it;
			goto _iter_begin_5069274976;
		}
		_iter_end_5069274976:;
	}
	return _22113_methods;
}



inline jule::Ptr<_229b5076c_Trait> _228d6ecab_build_trait(jule::Ptr<_228d31971_TraitDecl> _22820_decl) {
	return jule::new_struct_ptr<_229b5076c_Trait>(new( std::nothrow ) _229b5076c_Trait((*(_22820_decl))._field_token,(*(_22820_decl))._field_ident,(*(_22820_decl))._field_public,jule::Bool(),_228d6ecab_build_doc((*(_22820_decl))._field_doc_comments),_228d6ecab_build_methods((*(_22820_decl))._field_methods),jule::Slice<jule::Ptr<_228e0d025_Struct>>()));
}



inline jule::Ptr<_1e56be485_EnumItem> _228d6ecab_build_enum_item(jule::Ptr<_228d31971_EnumItemDecl> _23824_decl) {
	return jule::new_struct<_1e56be485_EnumItem>(new( std::nothrow ) _1e56be485_EnumItem((*(_23824_decl))._field_token,(*(_23824_decl))._field_ident,_228d6ecab_build_expr((*(_23824_decl))._field_expr)));
}



inline jule::Slice<jule::Ptr<_1e56be485_EnumItem>> _228d6ecab_build_enum_items(jule::Slice<jule::Ptr<_228d31971_EnumItemDecl>>& _24626_decls) {
	jule::Slice<jule::Ptr<_1e56be485_EnumItem>> _24713_items = jule::Slice<jule::Ptr<_1e56be485_EnumItem>>::alloc(0LL,static_cast<jule::I64>(_24626_decls.len()));
	{
		auto &expr = _24626_decls;
		auto it = expr.begin();
		_iter_begin_5069285136:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_EnumItemDecl> _228d6ecab_decl = *it;
			{
				_24713_items.push(_228d6ecab_build_enum_item(_228d6ecab_decl));
			}
			_iter_next_5069285136:;
			++it;
			goto _iter_begin_5069285136;
		}
		_iter_end_5069285136:;
	}
	return _24713_items;
}



inline jule::Ptr<_1e56be485_Enum> _228d6ecab_build_enum(jule::Ptr<_228d31971_EnumDecl> _25419_decl) {
	return jule::new_struct_ptr<_1e56be485_Enum>(new( std::nothrow ) _1e56be485_Enum((*(_25419_decl))._field_token,(*(_25419_decl))._field_public,(*(_25419_decl))._field_ident,_228d6ecab_build_type((*(_25419_decl))._field_kind),_228d6ecab_build_enum_items((*(_25419_decl))._field_items),_228d6ecab_build_doc((*(_25419_decl))._field_doc_comments)));
}



inline jule::Ptr<_1e58b0654_Var> _228d6ecab_build_var(jule::Ptr<_228d31971_VarDecl> _26518_decl) {
	return jule::new_struct<_1e58b0654_Var>(new( std::nothrow ) _1e58b0654_Var(jule::Ptr<_1e56c3885_Scope>(),(*(_26518_decl))._field_token,(*(_26518_decl))._field_ident,(*(_26518_decl))._field_cpp_linked,(*(_26518_decl))._field_constant,(*(_26518_decl))._field_mutable,(*(_26518_decl))._field_public,jule::Bool(),(*(_26518_decl))._field_statically,(*(_26518_decl))._field_reference,_228d6ecab_build_doc((*(_26518_decl))._field_doc_comments),_228d6ecab_build_type((*(_26518_decl))._field_kind),_228d6ecab_build_expr((*(_26518_decl))._field_expr),_228d6ecab_ReferenceStack::_static_method_new(),(*(_26518_decl))._field_directives,jule::Ptr<_1e58b0654_IterRelation>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>()));
}



inline jule::Slice<jule::Ptr<_1e58b0654_Var>> _228d6ecab_build_vars(jule::Slice<jule::Ptr<_228d31971_VarDecl>> _28319_decls) {
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _28413_vars = jule::Slice<jule::Ptr<_1e58b0654_Var>>::alloc(0LL,static_cast<jule::I64>(_28319_decls.len()));
	{
		auto &expr = _28319_decls;
		auto it = expr.begin();
		_iter_begin_5069300752:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_VarDecl> _228d6ecab_decl = *it;
			{
				_28413_vars.push(_228d6ecab_build_var(_228d6ecab_decl));
			}
			_iter_next_5069300752:;
			++it;
			goto _iter_begin_5069300752;
		}
		_iter_end_5069300752:;
	}
	return _28413_vars;
}



inline jule::Ptr<_1e56ca370_Impl> _228d6ecab_build_impl(jule::Ptr<_228d31971_Impl> _29119_decl) {
	return jule::new_struct<_1e56ca370_Impl>(new( std::nothrow ) _1e56ca370_Impl((*(_29119_decl))._field_base,(*(_29119_decl))._field_dest,_228d6ecab_build_methods((*(_29119_decl))._field_methods),_228d6ecab_build_vars((*(_29119_decl))._field_statics)));
}



inline jule::Ptr<_1e56c3885_ScopeChecker> _1e56c3885_new_scope_checker_base(jule::Ptr<_1e538b460_Sema>& _4132_s,jule::Ptr<_229b6ebcb_FnIns> _4146_owner) {
	return jule::new_struct_ptr<_1e56c3885_ScopeChecker>(new( std::nothrow ) _1e56c3885_ScopeChecker(_4132_s,_4146_owner,jule::Ptr<_1e56c3885_ScopeChecker>(),jule::Int(),jule::new_struct<_229d56533_SymbolTable>(new( std::nothrow ) _229d56533_SymbolTable()),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d31971_ScopeTree>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Uintptr(),jule::Uintptr(),jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeLabel>>>(),jule::Ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeGoto>>>(),jule::Int()));
}



inline jule::Ptr<_1e56c3885_ScopeChecker> _1e56c3885_new_scope_checker(jule::Ptr<_1e538b460_Sema>& _4927_s,jule::Ptr<_229b6ebcb_FnIns> _4941_owner) {
	jule::Ptr<_1e56c3885_ScopeChecker> _5013_base = _1e56c3885_new_scope_checker_base(_4927_s,_4941_owner);
	(*(_5013_base))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeLabel>>>(nullptr);
	(*(_5013_base))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1e56c3885_ScopeGoto>>>(nullptr);
	return _5013_base;
}



inline jule::Ptr<_1e56c3885_ScopeLabel> _1e56c3885_find_label_parent(jule::Str _5922_ident,jule::Ptr<_1e56c3885_ScopeChecker> _5938_scope) {
	jule::Ptr<_1e56c3885_ScopeLabel> _6013_label = (*(_5938_scope))._method_find_label_scope(_5922_ident);
	while (_6013_label == nullptr) {
		{
			if (((*(_5938_scope))._field_parent == nullptr) || ((*(_5938_scope))._field_owner != nullptr)) {
				return nullptr;
			}
			_5938_scope=(*(_5938_scope))._field_parent;
			_6013_label=(*(_5938_scope))._method_find_label_scope(_5922_ident);
		}
	_iter_next_5069312816:;
	}
	_iter_end_5069312816:;
	return _6013_label;
}



inline jule::Bool _1e56c3885_stmt_is_goto_scope(jule::Any& _7324_stmt,jule::Ptr<_1e56c3885_Scope>& _7336_sc) {
	{
		auto &_match_expr{ _7324_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_Scope>>()) {
			_case_begin_5069322080:;
			{
				return _7324_stmt.operator jule::Ptr<_1e56c3885_Scope>() == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_InfIter>>()) {
			_case_begin_5069322176:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1e56c3885_InfIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_RangeIter>>()) {
			_case_begin_5069321008:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1e56c3885_RangeIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_WhileIter>>()) {
			_case_begin_5069321104:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1e56c3885_WhileIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Match>>()) {
			_case_begin_5069321200:;
			{
				jule::Ptr<_1e56c3885_Match> _8813_m = _7324_stmt.operator jule::Ptr<_1e56c3885_Match>();
				{
					auto &expr = (*(_8813_m))._field_cases;
					auto it = expr.begin();
					_iter_begin_5069332720:;
					if (it != expr.end()) {
						jule::Ptr<_1e56c3885_Case> &_1e56c3885_c = *it;
						{
							if ((*(_1e56c3885_c))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_5069332720:;
						++it;
						goto _iter_begin_5069332720;
					}
					_iter_end_5069332720:;
				}
				return ((*(_8813_m))._field_default != nullptr) && ((*((*(_8813_m))._field_default))._field_scope == _7336_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Conditional>>()) {
			_case_begin_5069321296:;
			{
				jule::Ptr<_1e56c3885_Conditional> _9713_c = _7324_stmt.operator jule::Ptr<_1e56c3885_Conditional>();
				{
					auto &expr = (*(_9713_c))._field_elifs;
					auto it = expr.begin();
					_iter_begin_5069338048:;
					if (it != expr.end()) {
						jule::Ptr<_1e56c3885_If> &_1e56c3885_elif = *it;
						{
							if ((*(_1e56c3885_elif))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_5069338048:;
						++it;
						goto _iter_begin_5069338048;
					}
					_iter_end_5069338048:;
				}
				return ((*(_9713_c))._field_default != nullptr) && ((*((*(_9713_c))._field_default))._field_scope == _7336_sc);
			}
		}
		else {
			_case_begin_5069320704:;
			{
				return false;
			}
		}
		_match_end_5069316352:;
	}
}



inline jule::Int _1e56c3885_count_match_type(jule::Ptr<_1e56c3885_Match>& _11022_m,jule::Ptr<_229d681e3_TypeKind>& _11034_t) {
	jule::Int _11113_n = 0LL;
	jule::Str _1129_kind = (*(_11034_t))._method_to_str();
	_julec_label_loop:;
	{
		auto &expr = (*(_11022_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5069344416:;
		if (it != expr.end()) {
			jule::Ptr<_1e56c3885_Case> &_1e56c3885_c = *it;
			{
				if (_1e56c3885_c == nullptr) {
					goto _iter_next_5069344416;
				}
				{
					auto &expr = (*(_1e56c3885_c))._field_exprs;
					auto it = expr.begin();
					_iter_begin_5069345952:;
					if (it != expr.end()) {
						jule::Ptr<_229d70d33_Data> &_1e56c3885_expr = *it;
						{
							if (_1e56c3885_expr == nullptr) {
								goto _iter_end_5069344416;
							}
							if (_1129_kind == (*((*(_1e56c3885_expr))._field_model.operator jule::Ptr<_229d681e3_TypeKind>()))._method_to_str()) {
								(_11113_n)++;
							}
						}
						_iter_next_5069345952:;
						++it;
						goto _iter_begin_5069345952;
					}
					_iter_end_5069345952:;
				}
			}
			_iter_next_5069344416:;
			++it;
			goto _iter_begin_5069344416;
		}
		_iter_end_5069344416:;
	}
	return _11113_n;
}



inline jule::Slice<jule::Ptr<_229d70d33_Data>> _1e56c3885_get_datas_from_tuple_data(jule::Ptr<_229d70d33_Data>& _13435_d) {
	if ((*((*(_13435_d))._field_kind))._method_tup() != nullptr) {
		{
			auto &_match_expr{ (*(_13435_d))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1e5870218_TupleExprModel>>()) {
				_case_begin_5069359120:;
				{
					return (*((*(_13435_d))._field_model.operator jule::Ptr<_1e5870218_TupleExprModel>()))._field_datas;
				}
			}
			else {
				_case_begin_5069352336:;
				{
					jule::Ptr<_229d681e3_Tuple> _14121_t = (*((*(_13435_d))._field_kind))._method_tup();
					jule::Slice<jule::Ptr<_229d70d33_Data>> _14221_r = jule::Slice<jule::Ptr<_229d70d33_Data>>::alloc(0LL,static_cast<jule::I64>((*(_14121_t))._field_types.len()));
					{
						auto &expr = (*(_14121_t))._field_types;
						auto it = expr.begin();
						_iter_begin_5069355904:;
						if (it != expr.end()) {
							jule::Ptr<_229d681e3_TypeKind> _1e56c3885_kind = *it;
							{
								_14221_r.push(jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(_1e56c3885_kind,jule::Ptr<_229d681e3_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>())));
							}
							_iter_next_5069355904:;
							++it;
							goto _iter_begin_5069355904;
						}
						_iter_end_5069355904:;
					}
					return _14221_r;
				}
			}
			_match_end_5069352208:;
		}
	} else {
		return jule::Slice<jule::Ptr<_229d70d33_Data>>({_13435_d});
	}
}



inline jule::Slice<jule::Any> _1e56c3885_get_expr_models(jule::Any& _15625_m) {
	{
		auto &_match_expr{ _15625_m };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_TupleExpr>>()) {
			_case_begin_5069363376:;
			{
				jule::Ptr<_228d31971_TupleExpr> _15917_tup = _15625_m.operator jule::Ptr<_228d31971_TupleExpr>();
				jule::Slice<jule::Any> _16017_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_15917_tup))._field_expr.len()));
				{
					auto &expr = (*(_15917_tup))._field_expr;
					auto it = expr.begin();
					_iter_begin_5069367936:;
					if (it != expr.end()) {
						jule::Ptr<_228d31971_Expr> _1e56c3885_expr = *it;
						{
							_16017_models.push((*(_1e56c3885_expr))._field_kind);
						}
						_iter_next_5069367936:;
						++it;
						goto _iter_begin_5069367936;
					}
					_iter_end_5069367936:;
				}
				return _16017_models;
			}
		}
		else {
			_case_begin_5069363072:;
			{
				return jule::Slice<jule::Any>({_15625_m});
			}
		}
		_match_end_5069364240:;
	}
}



inline jule::Bool _1e56c3885_check_mut(jule::Ptr<_1e538b460_Sema>& _17119_s,jule::Ptr<_229d70d33_Data>& _17130_left,jule::Ptr<_229d70d33_Data> _17147_right,_228d7aadb_Token _17161_error_token) {
	jule::Bool _17183_ok = jule::Bool();
	{
		
		if ((!((*(_17130_left))._field_mutable))) {
			_case_begin_5069374272:;
			{
				(*(_17119_s))._method_push_err(_17161_error_token,jule::Str("cannot assign to immutable define", 33),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else if (((_17147_right != nullptr) && (!((*(_17147_right))._field_mutable))) && (*((*(_17147_right))._field_kind))._method_mutable()) {
			_case_begin_5069374480:;
			{
				(*(_17119_s))._method_push_err(_17161_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else {
			_case_begin_5069372816:;
			{
				_17183_ok = true;
				return _17183_ok;
			}
		}
		_match_end_5069372640:;
	}
}



inline jule::Bool _1e56c3885_check_assign(jule::Ptr<_1e538b460_Sema>& _18622_s,jule::Ptr<_229d70d33_Data>& _18637_left,jule::Ptr<_229d70d33_Data> _18654_right,_228d7aadb_Token _18668_error_token) {
	jule::Bool _18690_ok = jule::Bool();
	jule::Ptr<_229b6ebcb_FnIns> _1879_f = (*((*(_18637_left))._field_kind))._method_fnc();
	if (((_1879_f != nullptr) && ((*(_1879_f))._field_decl != nullptr)) && (*((*(_1879_f))._field_decl))._field_global) {
		(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>());
		_18690_ok = false;
		return _18690_ok;
	}
	{
		
		if ((*(_18637_left))._method_is_const()) {
			_case_begin_5069391728:;
			{
				(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>());
				(*(_18622_s))._method_push_suggestion(jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!((*(_18637_left))._field_lvalue))) {
			_case_begin_5069391920:;
			{
				(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("invalid expression: expected lvalue for assignment", 50),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!(_1e56c3885_check_mut(_18622_s,_18637_left,_18654_right,_18668_error_token)))) {
			_case_begin_5069392016:;
			{
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else {
			_case_begin_5069390368:;
			{
				_18690_ok = true;
				return _18690_ok;
			}
		}
		_match_end_5069386608:;
	}
}



inline jule::Bool _1e56c3885_is_valid_ast_st_for_next_st(jule::Any& _21137_n) {
	{
		auto &_match_expr{ _21137_n };
		
		if (_match_expr.type_is<jule::Ptr<_228d31971_AssignSt>>()) {
			_case_begin_5069401072:;
			{
				return (!((*(_21137_n.operator jule::Ptr<_228d31971_AssignSt>()))._field_declarative));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228d31971_FnCallExpr>>() || _match_expr.type_is<jule::Ptr<_228d31971_Expr>>()) {
			_case_begin_5069401168:;
			{
				return true;
			}
		}
		else {
			_case_begin_5069393088:;
			{
				return false;
			}
		}
		_match_end_5069384032:;
	}
}



inline jule::Bool _1e56c3885_is_valid_st_for_next_st(jule::Any& _22529_st) {
	{
		auto &_match_expr{ _22529_st };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_FnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e56c3885_Postfix>>() || _match_expr.type_is<jule::Ptr<_1e56c3885_Assign>>() || _match_expr.type_is<jule::Ptr<_1e56c3885_MultiAssign>>()) {
			_case_begin_5069406176:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229d70d33_Data>>()) {
			_case_begin_5069406272:;
			{
				{
					auto &_match_expr{ (*(_22529_st.operator jule::Ptr<_229d70d33_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e5870218_FnCallExprModel>>()) {
						_case_begin_5069414912:;
						{
							return true;
						}
					}
					else {
						_case_begin_5069413472:;
						{
							return false;
						}
					}
					_match_end_5069413392:;
				}
			}
		}
		else {
			_case_begin_5069404464:;
			{
				return false;
			}
		}
		_match_end_5069404960:;
	}
}



inline jule::Bool _1e56c3885_st_is_def(jule::Any& _24415_st) {
	{
		auto &_match_expr{ _24415_st };
		
		if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5069412192:;
			{
				return true;
			}
		}
		else {
			_case_begin_5069415888:;
			{
				return false;
			}
		}
		_match_end_5069415808:;
	}
}



inline jule::Ptr<_1e58b0654_Var> _1e53308ee_find_var_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _4029_files,jule::Str _4052_ident,jule::Bool _4064_cpp_linked) {
	{
		auto &expr = _4029_files;
		auto it = expr.begin();
		_iter_begin_5069417568:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e53308ee_f = *it;
			{
				jule::Ptr<_1e58b0654_Var> _4217_v = (*(_1e53308ee_f))._method_find_var(_4052_ident,_4064_cpp_linked);
				if (_4217_v != nullptr) {
					return _4217_v;
				}
			}
			_iter_next_5069417568:;
			++it;
			goto _iter_begin_5069417568;
		}
		_iter_end_5069417568:;
	}
	return nullptr;
}



inline jule::Ptr<_229d681e3_TypeAlias> _1e53308ee_find_type_alias_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _5236_files,jule::Str _5259_ident,jule::Bool _5271_cpp_linked) {
	{
		auto &expr = _5236_files;
		auto it = expr.begin();
		_iter_begin_5069422544:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e53308ee_f = *it;
			{
				jule::Ptr<_229d681e3_TypeAlias> _5417_ta = (*(_1e53308ee_f))._method_find_type_alias(_5259_ident,_5271_cpp_linked);
				if (_5417_ta != nullptr) {
					return _5417_ta;
				}
			}
			_iter_next_5069422544:;
			++it;
			goto _iter_begin_5069422544;
		}
		_iter_end_5069422544:;
	}
	return nullptr;
}



inline jule::Ptr<_228e0d025_Struct> _1e53308ee_find_struct_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _6432_files,jule::Str _6455_ident,jule::Bool _6467_cpp_linked) {
	{
		auto &expr = _6432_files;
		auto it = expr.begin();
		_iter_begin_5069428400:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e53308ee_f = *it;
			{
				jule::Ptr<_228e0d025_Struct> _6617_s = (*(_1e53308ee_f))._method_find_struct(_6455_ident,_6467_cpp_linked);
				if (_6617_s != nullptr) {
					return _6617_s;
				}
			}
			_iter_next_5069428400:;
			++it;
			goto _iter_begin_5069428400;
		}
		_iter_end_5069428400:;
	}
	return nullptr;
}



inline jule::Ptr<_229b6ebcb_Fn> _1e53308ee_find_fn_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _7628_files,jule::Str _7651_ident,jule::Bool _7663_cpp_linked) {
	{
		auto &expr = _7628_files;
		auto it = expr.begin();
		_iter_begin_5069434256:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e53308ee_file = *it;
			{
				jule::Ptr<_229b6ebcb_Fn> _7817_f = (*(_1e53308ee_file))._method_find_fn(_7651_ident,_7663_cpp_linked);
				if (_7817_f != nullptr) {
					return _7817_f;
				}
			}
			_iter_next_5069434256:;
			++it;
			goto _iter_begin_5069434256;
		}
		_iter_end_5069434256:;
	}
	return nullptr;
}



inline jule::Ptr<_229b5076c_Trait> _1e53308ee_find_trait_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _8831_files,jule::Str _8854_ident) {
	{
		auto &expr = _8831_files;
		auto it = expr.begin();
		_iter_begin_5069440784:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e53308ee_f = *it;
			{
				jule::Ptr<_229b5076c_Trait> _9017_t = (*(_1e53308ee_f))._method_find_trait(_8854_ident);
				if (_9017_t != nullptr) {
					return _9017_t;
				}
			}
			_iter_next_5069440784:;
			++it;
			goto _iter_begin_5069440784;
		}
		_iter_end_5069440784:;
	}
	return nullptr;
}



inline jule::Ptr<_1e56be485_Enum> _1e53308ee_find_enum_in_package(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _10030_files,jule::Str _10053_ident) {
	{
		auto &expr = _10030_files;
		auto it = expr.begin();
		_iter_begin_5069446208:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e53308ee_f = *it;
			{
				jule::Ptr<_1e56be485_Enum> _10217_e = (*(_1e53308ee_f))._method_find_enum(_10053_ident);
				if (_10217_e != nullptr) {
					return _10217_e;
				}
			}
			_iter_next_5069446208:;
			++it;
			goto _iter_begin_5069446208;
		}
		_iter_end_5069446208:;
	}
	return nullptr;
}



inline jule::Bool _1e53308ee_is_std_package(jule::Str _32119_f,jule::Str _32127_p) {
	return _32119_f.has_prefix(_227711594_join(jule::Slice<jule::Str>({_22779d455_PATH_STDLIB,_32127_p})));
}



inline jule::Bool _1e538b460_is_valid_model_for_ref(jule::Any& _1132_m) {
	{
		auto &_match_expr{ _1132_m };
		
		if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5069455104:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_StructSubIdentExprModel>>()) {
			_case_begin_5069455200:;
			{
				jule::Ptr<_1e5870218_StructSubIdentExprModel> _1717_model = _1132_m.operator jule::Ptr<_1e5870218_StructSubIdentExprModel>();
				return _1e538b460_is_valid_model_for_ref((*(_1717_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_TraitSubIdentExprModel>>()) {
			_case_begin_5069454064:;
			{
				jule::Ptr<_1e5870218_TraitSubIdentExprModel> _2117_model = _1132_m.operator jule::Ptr<_1e5870218_TraitSubIdentExprModel>();
				return _1e538b460_is_valid_model_for_ref((*(_2117_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_UnaryExprModel>>()) {
			_case_begin_5069454160:;
			{
				jule::Ptr<_1e5870218_UnaryExprModel> _2517_unary = _1132_m.operator jule::Ptr<_1e5870218_UnaryExprModel>();
				if ((*(_2517_unary))._field_op._field_kind != jule::Str("*", 1)) {
					return false;
				}
				if ((*((*((*(_2517_unary))._field_expr))._field_kind))._method_ptr() != nullptr) {
					return true;
				}
				if ((*((*((*(_2517_unary))._field_expr))._field_kind))._method_sptr() == nullptr) {
					return false;
				}
				return _1e538b460_is_valid_model_for_ref((*((*(_2517_unary))._field_expr))._field_model);
			}
		}
		else {
			_case_begin_5069450896:;
			{
				return false;
			}
		}
		_match_end_5069452064:;
	}
}



inline _2276bcb9e_Log _1e538b460_compiler_err(_228d7aadb_Token& _4718_token,jule::Bool _4732_line,jule::Str _4744_fmt,jule::Slice<jule::Any> _4757_args) {
	_2276bcb9e_Log _4813_log = _2276bcb9e_Log(1LLU,_4718_token._field_row,_4718_token._field_column,(*(_4718_token._field_file))._method_path(),_2276bcb9e_logf(_4744_fmt,_4757_args),jule::Str(),jule::Str());
	if (_4732_line) {
		_4813_log._field_line=(*(_4718_token._field_file))._method_get_row(_4718_token._field_row);
	}
	return _4813_log;
}



inline jule::Bool _1e538b460_imp_is_lookupable(jule::Ptr<_1e53308ee_ImportInfo>& _6123_i,jule::Str _6139_ident) {
	if ((*(_6123_i))._field_cpp_linked) {
		return false;
	}
	if ((!((*(_6123_i))._field_import_all))) {
		if ((*(_6123_i))._field_selected.len() > 0LL) {
			return (*(_6123_i))._method_exist_ident(_6139_ident);
		}
	}
	return (*(_6123_i))._field_import_all;
}



inline jule::Slice<jule::Ptr<_1e58b0654_Var>> _1e538b460_build_ret_vars(jule::Ptr<_229b6ebcb_FnIns>& _7424_f) {
	if ((*((*(_7424_f))._field_decl))._method_is_void() || ((*(_7424_f))._field_result == nullptr)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _7913_vars = nullptr;
	jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _8013_types = _1e58b019d_get_result_types((*(_7424_f))._field_result);
	{
		auto &expr = (*((*((*(_7424_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_5069492480:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			_228d7aadb_Token _1e538b460_ident = *it;
			{
				if (_228d7aadb_is_ignore_ident(_1e538b460_ident._field_kind)) {
					goto _iter_next_5069492480;
				}
				jule::Ptr<_1e58b0654_Var> _8617_v = jule::new_struct<_1e58b0654_Var>(new( std::nothrow ) _1e58b0654_Var((*(_7424_f))._field_scope,_1e538b460_ident,_1e538b460_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),_8013_types[_1e538b460_i])),jule::new_struct<_229d70d33_Value>(new( std::nothrow ) _229d70d33_Value(jule::Ptr<_228d31971_Expr>(),jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data()))),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_1e58b0654_IterRelation>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>()));
				_7913_vars.push(_8617_v);
			}
			_iter_next_5069492480:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5069492480;
		}
		_iter_end_5069492480:;
	}
	return _7913_vars;
}



inline jule::Slice<jule::Ptr<_1e58b0654_Var>> _1e538b460_build_param_vars(jule::Ptr<_229b6ebcb_FnIns>& _10326_f) {
	if ((*(_10326_f))._field_params.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1e58b0654_Var>> _10813_vars = jule::Slice<jule::Ptr<_1e58b0654_Var>>::alloc(0LL,static_cast<jule::I64>((*(_10326_f))._field_params.len()));
	{
		auto &expr = (*(_10326_f))._field_params;
		auto it = expr.begin();
		_iter_begin_5069502096:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_ParamIns> _1e538b460_p = *it;
			{
				jule::Ptr<_1e58b0654_Var> _11017_v = jule::new_struct<_1e58b0654_Var>(new( std::nothrow ) _1e58b0654_Var((*(_10326_f))._field_scope,(*((*(_1e538b460_p))._field_decl))._field_token,(*((*(_1e538b460_p))._field_decl))._field_ident,jule::Bool(),jule::Bool(),(*((*(_1e538b460_p))._field_decl))._field_mutable,jule::Bool(),true,jule::Bool(),(*((*(_1e538b460_p))._field_decl))._field_reference,jule::Str(),jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol()),jule::new_struct<_229d70d33_Value>(new( std::nothrow ) _229d70d33_Value(jule::Ptr<_228d31971_Expr>(),jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data()))),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_1e58b0654_IterRelation>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>()));
				{
					
					if ((*((*(_1e538b460_p))._field_decl))._method_is_self()) {
						_case_begin_5069510864:;
						{
							(*((*(_11017_v))._field_kind))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_10326_f))._field_owner));
							(*(_11017_v))._field_reference=true;
							if ((*((*(_1e538b460_p))._field_decl))._method_is_ref()) {
								(*(_11017_v))._field_ident=(*(_11017_v))._field_ident.slice(1LL);
								(*((*((*(_11017_v))._field_kind))._field_kind))._field_kind=jule::new_struct_ptr<_229d681e3_Sptr>(new( std::nothrow ) _229d681e3_Sptr(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind((*((*((*(_11017_v))._field_kind))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*((*(_11017_v))._field_kind))._field_kind))._field_kind))));
							}
						}
					}
					else if ((*((*(_1e538b460_p))._field_decl))._field_variadic) {
						_case_begin_5069510368:;
						{
							(*((*(_11017_v))._field_kind))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Slc>(new( std::nothrow ) _229d681e3_Slc(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind((*((*(_1e538b460_p))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*(_1e538b460_p))._field_kind))._field_kind))))));
						}
					}
					else {
						_case_begin_5069510064:;
						{
							(*((*(_11017_v))._field_kind))._field_kind=(*(_1e538b460_p))._field_kind;
						}
					}
					_match_end_5069509952:;
				}
				_10813_vars.push(_11017_v);
			}
			_iter_next_5069502096:;
			++it;
			goto _iter_begin_5069502096;
		}
		_iter_end_5069502096:;
	}
	return _10813_vars;
}



inline jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _1e538b460_build_generic_type_aliases(jule::Ptr<_229b6ebcb_FnIns>& _15836_f) {
	jule::I64 _15913_size = (*(_15836_f))._field_generics.len();
	if ((*((*(_15836_f))._field_decl))._field_owner != nullptr) {
		_15913_size+=static_cast<jule::I64>((*((*((*(_15836_f))._field_decl))._field_owner))._field_generics.len());
	}
	if (_15913_size == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_229d681e3_TypeAlias>> _16813_aliases = jule::Slice<jule::Ptr<_229d681e3_TypeAlias>>::alloc(0LL,_15913_size);
	{
		auto &expr = (*(_15836_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_5069531760:;
		if (it != expr.end()) {
			jule::Int _1e538b460_i = it - expr.begin();
			jule::Ptr<_229d681e3_TypeKind> _1e538b460_g = *it;
			{
				jule::Ptr<_228d31971_GenericDecl> _17117_decl = (*((*(_15836_f))._field_decl))._field_generics[_1e538b460_i];
				_16813_aliases.push(jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias((*((*(_15836_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_17117_decl))._field_token,(*(_17117_decl))._field_ident,jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),_1e538b460_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_5069531760:;
			++it;
			_1e538b460_i++;
			goto _iter_begin_5069531760;
		}
		_iter_end_5069531760:;
	}
	if ((*((*(_15836_f))._field_decl))._field_owner != nullptr) {
		jule::Ptr<_228e0d025_StructIns> _18317_owner = (*(_15836_f))._field_owner;
		{
			auto &expr = (*(_18317_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_5069537200:;
			if (it != expr.end()) {
				jule::Int _1e538b460_i = it - expr.begin();
				jule::Ptr<_229d681e3_TypeKind> _1e538b460_g = *it;
				{
					jule::Ptr<_228d31971_GenericDecl> _18521_decl = (*((*(_18317_owner))._field_decl))._field_generics[_1e538b460_i];
					_16813_aliases.push(jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias((*((*(_15836_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_18521_decl))._field_token,(*(_18521_decl))._field_ident,jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),_1e538b460_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_5069537200:;
				++it;
				_1e538b460_i++;
				goto _iter_begin_5069537200;
			}
			_iter_end_5069537200:;
		}
	}
	return _16813_aliases;
}



inline jule::Ptr<_229d56533_SymbolTable> _1e538b460_find_file(jule::Slice<jule::Ptr<_229d56533_SymbolTable>>& _20019_files,jule::Ptr<_228d34677_File>& _20043_handler) {
	{
		auto &expr = _20019_files;
		auto it = expr.begin();
		_iter_begin_5069531648:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e538b460_fl = *it;
			{
				if ((*(_1e538b460_fl))._field_file == _20043_handler) {
					return _1e538b460_fl;
				}
			}
			_iter_next_5069531648:;
			++it;
			goto _iter_begin_5069531648;
		}
		_iter_end_5069531648:;
	}
	return nullptr;
}



inline std::tuple<jule::Bool,jule::Bool> _1e538b460_conditional_has_ret(jule::Ptr<_1e56c3885_Conditional> _20928_c) {
	jule::Bool _20947_ok = jule::Bool();
	jule::Bool _20957_breaking = jule::Bool();
	jule::Bool _21013_breaked = false;
	{
		auto &expr = (*(_20928_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5069552512:;
		if (it != expr.end()) {
			jule::Ptr<_1e56c3885_If> _1e538b460_elif = *it;
			{
				if (_1e538b460_elif == nullptr) {
					_20947_ok = false;
					_20957_breaking = false;
					return std::make_tuple(_20947_ok,_20957_breaking);
				}
				std::tie(_20947_ok,std::ignore,_20957_breaking) = _1e538b460___has_ret((*(_1e538b460_elif))._field_scope);
				_21013_breaked=_21013_breaked || _20957_breaking;
				if ((!(_20947_ok))) {
					_20947_ok = false;
					_20957_breaking = _21013_breaked;
					return std::make_tuple(_20947_ok,_20957_breaking);
				}
			}
			_iter_next_5069552512:;
			++it;
			goto _iter_begin_5069552512;
		}
		_iter_end_5069552512:;
	}
	if ((*(_20928_c))._field_default == nullptr) {
		_20947_ok = false;
		_20957_breaking = _21013_breaked;
		return std::make_tuple(_20947_ok,_20957_breaking);
	}
	std::tie(_20947_ok,std::ignore,_20957_breaking) = _1e538b460___has_ret((*((*(_20928_c))._field_default))._field_scope);
	_21013_breaked=_21013_breaked || _20957_breaking;
	_20957_breaking = _21013_breaked;
	return std::make_tuple(_20947_ok,_20957_breaking);
}



inline jule::Bool _1e538b460_match_has_ret(jule::Ptr<_1e56c3885_Match> _23122_m) {
	if ((*(_23122_m))._field_default == nullptr) {
		return false;
	}
	jule::Bool _23613_ok = true;
	jule::Bool _23713_falled = false;
	jule::Bool _23813_breaked = false;
	{
		auto &expr = (*(_23122_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_5069565632:;
		if (it != expr.end()) {
			jule::Ptr<_1e56c3885_Case> _1e538b460_c = *it;
			{
				if (_1e538b460_c == nullptr) {
					return false;
				}
				std::tie(_23613_ok,_23713_falled,_23813_breaked) = _1e538b460___has_ret((*(_1e538b460_c))._field_scope);
				if (((!(_23613_ok)) && (!(_23713_falled))) || _23813_breaked) {
					return false;
				}
				{
					
					if ((!(_23613_ok))) {
						_case_begin_5069570208:;
						{
							if ((!(_23713_falled))) {
								return false;
							}
							goto _case_begin_5069570304;
						}
					}
					else if (_23713_falled) {
						_case_begin_5069570304:;
						{
							if ((*(_1e538b460_c))._field_next == nullptr) {
								return false;
							}
							goto _iter_next_5069565632;
						}
					}
					_match_end_5069570080:;
				}
				_23713_falled=false;
			}
			_iter_next_5069565632:;
			++it;
			goto _iter_begin_5069565632;
		}
		_iter_end_5069565632:;
	}
	return _1e538b460_has_ret((*((*(_23122_m))._field_default))._field_scope);
}



inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _1e538b460___has_ret(jule::Ptr<_1e56c3885_Scope> _26718_s) {
	jule::Bool _26731_ok = jule::Bool();
	jule::Bool _26741_falled = jule::Bool();
	jule::Bool _26755_breaked = jule::Bool();
	if (_26718_s == nullptr) {
		_26731_ok = false;
		_26741_falled = false;
		_26755_breaked = false;
		return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
	}
	{
		auto &expr = (*(_26718_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_5069576512:;
		if (it != expr.end()) {
			jule::Any _1e538b460_st = *it;
			{
				{
					auto &_match_expr{ _1e538b460_st };
					
					if (_match_expr.type_is<jule::Ptr<_1e56c3885_FallSt>>()) {
						_case_begin_5069580464:;
						{
							_26741_falled=true;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56c3885_BreakSt>>()) {
						_case_begin_5069580560:;
						{
							_26731_ok = false;
							_26741_falled = false;
							_26755_breaked = true;
							return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56c3885_ContSt>>()) {
						_case_begin_5069580656:;
						{
							_26731_ok = false;
							_26741_falled = false;
							_26755_breaked = true;
							return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56c3885_InfIter>>()) {
						_case_begin_5069580752:;
						{
							_26731_ok=_1e538b460_has_ret((*(_1e538b460_st.operator jule::Ptr<_1e56c3885_InfIter>()))._field_scope);
							if (_26731_ok) {
								_26731_ok = true;
								_26741_falled = false;
								_26755_breaked = false;
								return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56c3885_RetSt>>()) {
						_case_begin_5069580848:;
						{
							_26731_ok = true;
							return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Scope>>()) {
						_case_begin_5069580944:;
						{
							_26731_ok=_1e538b460_has_ret(_1e538b460_st.operator jule::Ptr<_1e56c3885_Scope>());
							if (_26731_ok) {
								_26731_ok = true;
								_26741_falled = false;
								_26755_breaked = false;
								return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_229d70d33_Data>>()) {
						_case_begin_5069581040:;
						{
							{
								auto &_match_expr{ (*(_1e538b460_st.operator jule::Ptr<_229d70d33_Data>()))._field_model };
								
								if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>>()) {
									_case_begin_5069598032:;
									{
										_26731_ok = true;
										return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
									}
								}
								_match_end_5069597952:;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Conditional>>()) {
						_case_begin_5069581136:;
						{
							std::tie(_26731_ok,_26755_breaked) = _1e538b460_conditional_has_ret(_1e538b460_st.operator jule::Ptr<_1e56c3885_Conditional>());
							if (_26731_ok) {
								_26731_ok = true;
								_26741_falled = false;
								_26755_breaked = false;
								return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
							}
							if (_26755_breaked) {
								_26731_ok = false;
								_26741_falled = false;
								return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Match>>()) {
						_case_begin_5069581248:;
						{
							_26731_ok=_1e538b460_match_has_ret(_1e538b460_st.operator jule::Ptr<_1e56c3885_Match>());
							if (_26731_ok) {
								_26731_ok = true;
								_26741_falled = false;
								_26755_breaked = false;
								return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
							}
						}
					}
					_match_end_5069580192:;
				}
			}
			_iter_next_5069576512:;
			++it;
			goto _iter_begin_5069576512;
		}
		_iter_end_5069576512:;
	}
	_26731_ok = false;
	return std::make_tuple(_26731_ok,_26741_falled,_26755_breaked);
}



inline jule::Bool _1e538b460_has_ret(jule::Ptr<_1e56c3885_Scope> _32616_s) {
	jule::Bool _32710_ok;
	std::tie(_32710_ok,std::ignore,std::ignore) = _1e538b460___has_ret(_32616_s);
	return _32710_ok;
}



inline void _1e538b460_push_suggestion(_2276bcb9e_Log* _33131_log,jule::Str _33142_fmt,jule::Slice<jule::Any> _33155_args) {
	(*(_33131_log))._field_suggestion=_2276bcb9e_logf(_33142_fmt,_33155_args);
}



inline jule::Slice<jule::Ptr<_229d681e3_TypeKind>> _1e58b019d_get_result_types(jule::Ptr<_229d681e3_TypeKind>& _2626_result) {
	{
		
		if (_2626_result == nullptr) {
			_case_begin_5069615056:;
			{
				return nullptr;
			}
		}
		else if ((*(_2626_result))._method_tup() == nullptr) {
			_case_begin_5069614688:;
			{
				return jule::Slice<jule::Ptr<_229d681e3_TypeKind>>({_2626_result});
			}
		}
		else {
			_case_begin_5069613680:;
			{
				return (*((*(_2626_result))._method_tup()))._field_types;
			}
		}
		_match_end_5069611984:;
	}
}



inline jule::Bool _1e58b019d_trait_has_reference_receiver(jule::Ptr<_229b5076c_Trait>& _3934_t) {
	{
		auto &expr = (*(_3934_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_5069617760:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> &_1e58b019d_f = *it;
			{
				if ((*(_1e58b019d_f))._field_statically) {
					goto _iter_next_5069617760;
				}
				jule::Ptr<_229b6ebcb_Param> _4613_p = (*(_1e58b019d_f))._field_params[0LL];
				if ((*(_4613_p))._method_is_ref() && (*(_4613_p))._method_is_self()) {
					return true;
				}
			}
			_iter_next_5069617760:;
			++it;
			goto _iter_begin_5069617760;
		}
		_iter_end_5069617760:;
	}
	return false;
}



inline jule::Bool _1e58b019d_float_assignable(jule::Str _5421_kind,jule::Ptr<_229d70d33_Data>& _5433_d) {
	jule::Str _559_value = _22777cad8_fmt_float(static_cast<jule::F64>((*((*(_5433_d))._field_constant))._method_as_f64()),'g',-1LL,64LL);
	return _1e8570b6e_check_bit_float(_559_value,static_cast<jule::Int>(_1e8570b6e_bitsize_of(_5421_kind)));
}



inline jule::Bool _1e58b019d_sig_assignable(jule::Str _5919_kind,jule::Ptr<_229d70d33_Data>& _5931_d) {
	jule::F64 _609_min = _1e8572e29_min(_5919_kind);
	jule::F64 _619_max = _1e8572e29_max(_5919_kind);
	{
		
		if ((*((*(_5931_d))._field_constant))._method_is_f64()) {
			_case_begin_5069631504:;
			{
				jule::F64 _6513_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_f64());
				jule::F64 _6614_i;
				jule::F64 _6617_frac;
				std::tie(_6614_i,_6617_frac) = _22889069a_modf(_6513_x);
				if (_6617_frac != 0LL) {
					return false;
				}
				return (_6614_i >= _609_min) && (_6614_i <= _619_max);
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_u64()) {
			_case_begin_5069631600:;
			{
				jule::F64 _7313_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_u64());
				if (_7313_x <= _619_max) {
					return true;
				}
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_i64()) {
			_case_begin_5069631696:;
			{
				jule::F64 _7913_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_i64());
				return (_609_min <= _7913_x) && (_7913_x <= _619_max);
			}
		}
		_match_end_5069631200:;
	}
	return false;
}



inline jule::Bool _1e58b019d_unsig_assignable(jule::Str _8621_kind,jule::Ptr<_229d70d33_Data>& _8633_d) {
	jule::F64 _879_max = _1e8572e29_max(_8621_kind);
	if ((*(_8633_d))._field_is_rune && (_8621_kind == jule::Str("u8", 2))) {
		return _1e86ab2b5_is_ascii(static_cast<jule::I32>(static_cast<jule::I32>((*((*(_8633_d))._field_constant))._method_read_i64())));
	}
	{
		
		if ((*((*(_8633_d))._field_constant))._method_is_f64()) {
			_case_begin_5069647504:;
			{
				jule::F64 _9413_x = (*((*(_8633_d))._field_constant))._method_read_f64();
				if (_9413_x < 0LL) {
					return false;
				}
				jule::F64 _9914_i;
				jule::F64 _9917_frac;
				std::tie(_9914_i,_9917_frac) = _22889069a_modf(_9413_x);
				if (_9917_frac != 0LL) {
					return false;
				}
				return _9914_i <= _879_max;
			}
		}
		else if ((*((*(_8633_d))._field_constant))._method_is_u64()) {
			_case_begin_5069647600:;
			{
				jule::F64 _10613_x = static_cast<jule::F64>((*((*(_8633_d))._field_constant))._method_read_u64());
				if (_10613_x <= _879_max) {
					return true;
				}
			}
		}
		else if ((*((*(_8633_d))._field_constant))._method_is_i64()) {
			_case_begin_5069647696:;
			{
				jule::F64 _11213_x = static_cast<jule::F64>((*((*(_8633_d))._field_constant))._method_read_i64());
				return (0LL <= _11213_x) && (_11213_x <= _879_max);
			}
		}
		_match_end_5069647152:;
	}
	return false;
}



inline jule::Bool _1e58b019d_int_assignable(jule::Str _11919_kind,jule::Ptr<_229d70d33_Data>& _11931_d) {
	{
		
		if (_1e860322e_is_sig_int(_11919_kind)) {
			_case_begin_5069667456:;
			{
				return _1e58b019d_sig_assignable(_11919_kind,_11931_d);
			}
		}
		else if (_1e860322e_is_unsig_int(_11919_kind)) {
			_case_begin_5069667552:;
			{
				return _1e58b019d_unsig_assignable(_11919_kind,_11931_d);
			}
		}
		else {
			_case_begin_5069660992:;
			{
				return false;
			}
		}
		_match_end_5069660816:;
	}
}



inline jule::Ptr<_228d31971_Directive> _229d70d33_find_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>& _4924_directives,jule::Str _4966_d) {
	{
		auto &expr = _4924_directives;
		auto it = expr.begin();
		_iter_begin_5069669408:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> _229d70d33_dr = *it;
			{
				if ((*(_229d70d33_dr))._field_tag._field_kind == _4966_d) {
					return _229d70d33_dr;
				}
			}
			_iter_next_5069669408:;
			++it;
			goto _iter_begin_5069669408;
		}
		_iter_end_5069669408:;
	}
	return nullptr;
}



inline jule::Any _229d70d33_find_builtins_import(jule::Str _5825_ident,jule::Ptr<_1e53308ee_ImportInfo> _5837_imp) {
	return _1e614d809_find_package_builtin_def((*(_5837_imp))._field_link_path,_5825_ident);
}



inline void _229d70d33_make_struct_lit_alloc(jule::Ptr<_229d70d33_Data>& _6231_d,jule::Ptr<_1e5870218_StructLitExprModel>& _6246_lit) {
	(*(_6231_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Sptr>(new( std::nothrow ) _229d681e3_Sptr(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_6246_lit))._field_strct))))));
	(*(_6231_d))._field_model=jule::Any(jule::new_struct<_1e5870218_AllocStructLitExprModel>(new( std::nothrow ) _1e5870218_AllocStructLitExprModel(_6246_lit)));
}



inline jule::Ptr<_1e58b0654_Var> _229d70d33_build_error_var(jule::Ptr<_1e56c3885_Scope>& _7425_s,jule::Ptr<_228d31971_FnCallExpr>& _7441_fc) {
	return jule::new_struct<_1e58b0654_Var>(new( std::nothrow ) _1e58b0654_Var(_7425_s,(*(_7441_fc))._field_token,jule::Str("error", 5),jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),false,jule::Str(),jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("any", 3)))))),jule::new_struct<_229d70d33_Value>(new( std::nothrow ) _229d70d33_Value(jule::Ptr<_228d31971_Expr>(),jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data()))),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Ptr<_1e58b0654_IterRelation>(),jule::Slice<jule::Ptr<_1e58b0654_Var>>()));
}



inline jule::Any _229d70d33_find_builtins_sema(jule::Str _9323_ident,jule::Ptr<_1e538b460_Sema> _9339_s) {
	{
		auto &expr = (*((*(_9339_s))._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_5069684960:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _229d70d33_imp = *it;
			{
				if ((*(_229d70d33_imp))._field_import_all || (*(_229d70d33_imp))._method_exist_ident(_9323_ident)) {
					jule::Any _9621_def = _229d70d33_find_builtins_import(_9323_ident,_229d70d33_imp);
					if (_9621_def != nullptr) {
						return _9621_def;
					}
				}
			}
			_iter_next_5069684960:;
			++it;
			goto _iter_begin_5069684960;
		}
		_iter_end_5069684960:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _229d70d33_is_ok_for_shifting(jule::Ptr<_229d70d33_Data>& _10528_d) {
	jule::Ptr<_229d681e3_Prim> _1069_prim = (*((*(_10528_d))._field_kind))._method_prim();
	if ((_1069_prim == nullptr) || (!(_1e860322e_is_int((*(_1069_prim))._method_to_str())))) {
		return false;
	}
	if ((!((*(_10528_d))._method_is_const()))) {
		return true;
	}
	{
		
		if ((*((*(_10528_d))._field_constant))._method_is_i64()) {
			_case_begin_5069698192:;
			{
				return (*((*(_10528_d))._field_constant))._method_read_i64() >= 0LL;
			}
		}
		else if ((*((*(_10528_d))._field_constant))._method_is_u64()) {
			_case_begin_5069698288:;
			{
				return true;
			}
		}
		else {
			_case_begin_5069695632:;
			{
				return false;
			}
		}
		_match_end_5069695520:;
	}
}



inline jule::Bool _229d70d33_is_instanced_struct(jule::Ptr<_228e0d025_StructIns> _12224_s) {
	return (*((*(_12224_s))._field_decl))._field_generics.len() == (*(_12224_s))._field_generics.len();
}



inline jule::Bool _229d70d33_is_ptr_arithmetic_compatible_int(jule::Ptr<_229d70d33_Data>& _12642_d) {
	if ((*(_12642_d))._method_is_const()) {
		return _1e58b019d_int_assignable(jule::Str("int", 3),_12642_d);
	}
	_1e58b019d_TypeCompatibilityChecker _13013_tcc = _1e58b019d_TypeCompatibilityChecker(jule::Ptr<_1e538b460_Sema>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3)))),(*(_12642_d))._field_kind,_228d7aadb_Token());
	return _13013_tcc._method_check();
}



inline void _229d70d33_normalize_bitsize(jule::Ptr<_229d70d33_Data>& _13727_d) {
	if ((!((*(_13727_d))._method_is_const()))) {
		return;
	}
	jule::Str _14213_kind = jule::Str();
	{
		
		if ((*((*(_13727_d))._field_constant))._method_is_i64()) {
			_case_begin_5069716160:;
			{
				jule::I64 _14513_x = (*((*(_13727_d))._field_constant))._method_read_i64();
				_14213_kind=_1e8570b6e_int_from_bits(static_cast<jule::U64>(_1e8570b6e_bitsize_of_int(_14513_x)));
			}
		}
		else if ((*((*(_13727_d))._field_constant))._method_is_u64()) {
			_case_begin_5069716256:;
			{
				jule::U64 _14913_x = (*((*(_13727_d))._field_constant))._method_read_u64();
				_14213_kind=_1e8570b6e_uint_from_bits(static_cast<jule::U64>(_1e8570b6e_bitsize_of_uint(_14913_x)));
			}
		}
		else {
			_case_begin_5069715168:;
			{
				return;
			}
		}
		_match_end_5069714928:;
	}
	if ((*((*(_13727_d))._field_kind))._method_enm() != nullptr) {
		return;
	}
	(*((*(_13727_d))._field_kind))._field_kind=_229d681e3_build_prim_type(_14213_kind);
}



inline void _229d70d33_normalize_type(jule::Ptr<_229d70d33_Data>& _16424_d) {
	{
		
		if (_1e58b019d_int_assignable(jule::Str("int", 3),_16424_d)) {
			_case_begin_5069727808:;
			{
				(*((*(_16424_d))._field_kind))._field_kind=_229d681e3_build_prim_type(jule::Str("int", 3));
				(*((*(_16424_d))._field_constant))._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*(_16424_d))._field_constant))._method_as_f64())));
			}
		}
		else if (_1e58b019d_int_assignable(jule::Str("uint", 4),_16424_d)) {
			_case_begin_5069727920:;
			{
				(*((*(_16424_d))._field_kind))._field_kind=_229d681e3_build_prim_type(jule::Str("uint", 4));
				(*((*(_16424_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*((*(_16424_d))._field_constant))._method_as_f64())));
			}
		}
		_match_end_5069727648:;
	}
}



inline void _229d70d33_fit_type(jule::Ptr<_229d70d33_Data>& _17718_d) {
	if ((!((*(_17718_d))._method_is_const()))) {
		return;
	}
	jule::Ptr<_229d681e3_Prim> _1829_p = (*((*(_17718_d))._field_kind))._method_prim();
	if (_1829_p == nullptr) {
		return;
	}
	jule::Str _1879_k = (*(_1829_p))._field_kind;
	{
		
		if (_1e860322e_is_float(_1879_k)) {
			_case_begin_5069742048:;
			{
				(*((*(_17718_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_17718_d))._field_constant))._method_as_f64()));
			}
		}
		else if (_1e860322e_is_sig_int(_1879_k)) {
			_case_begin_5069742144:;
			{
				(*((*(_17718_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_17718_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1e860322e_is_unsig_int(_1879_k)) {
			_case_begin_5069742256:;
			{
				(*((*(_17718_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_17718_d))._field_constant))._method_as_u64()));
			}
		}
		_match_end_5069741856:;
	}
}



inline void _229d70d33_apply_cast_kind_model(jule::Ptr<_229d70d33_Data>& _19531_d) {
	(*(_19531_d))._field_model=jule::Any(jule::new_struct<_1e5870218_CastingExprModel>(new( std::nothrow ) _1e5870218_CastingExprModel(_228d7aadb_Token(),(*(_19531_d))._field_model,(*(_19531_d))._field_cast_kind,(*(_19531_d))._field_kind)));
}



inline void _229d70d33_apply_cast_kind(jule::Ptr<_229d70d33_Data>& _20325_d) {
	if ((*(_20325_d))._field_cast_kind == nullptr) {
		return;
	}
	_229d70d33_apply_cast_kind_model(_20325_d);
	(*(_20325_d))._field_kind=(*(_20325_d))._field_cast_kind;
	(*(_20325_d))._field_cast_kind=nullptr;
}



inline jule::Ptr<_229d70d33_Data> _229d70d33_build_void_data(void) {
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("void", 4)))),jule::Ptr<_229d681e3_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Str _229d70d33_check_data_for_integer_indexing(jule::Ptr<_229d70d33_Data>& _24341_d) {
	jule::Str _24353_err_fmt = jule::Str();
	if (_24341_d == nullptr) {
		_24353_err_fmt = jule::Str();
		return _24353_err_fmt;
	}
	{
		
		if ((*((*(_24341_d))._field_kind))._method_prim() == nullptr) {
			_case_begin_5069771920:;
			{
				_24353_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _24353_err_fmt;
			}
		}
		else if ((!(_1e860322e_is_int((*((*((*(_24341_d))._field_kind))._method_prim()))._method_to_str())))) {
			_case_begin_5069772544:;
			{
				_24353_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _24353_err_fmt;
			}
		}
		else if ((*(_24341_d))._method_is_const()) {
			_case_begin_5069772640:;
			{
				if ((*((*(_24341_d))._field_constant))._method_as_f64() < 0LL) {
					_24353_err_fmt = jule::Str("overflow the limit of data-type", 31);
					return _24353_err_fmt;
				}
			}
		}
		else if ((*((*(_24341_d))._field_kind))._method_prim() == nullptr || (*(_24341_d))._method_is_const() || _1e8570b6e_real_kind_of((*((*((*(_24341_d))._field_kind))._method_prim()))._method_to_str()) != _1e8570b6e_real_kind_of(jule::Str("int", 3))) {
			_case_begin_5069772736:;
			{
				(*(_24341_d))._field_cast_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3))));
				_229d70d33_apply_cast_kind(_24341_d);
			}
		}
		_match_end_5069759600:;
	}
	_24353_err_fmt = jule::Str();
	return _24353_err_fmt;
}



inline jule::Bool _229d681e3_has_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>& _3223_directives,jule::Str _3254_tag) {
	{
		auto &expr = _3223_directives;
		auto it = expr.begin();
		_iter_begin_5069787264:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> _229d681e3_dr = *it;
			{
				if ((*(_229d681e3_dr))._field_tag._field_kind == _3254_tag) {
					return true;
				}
			}
			_iter_next_5069787264:;
			++it;
			goto _iter_begin_5069787264;
		}
		_iter_end_5069787264:;
	}
	return false;
}



inline jule::Bool _229d681e3_can_get_ptr(jule::Ptr<_229d70d33_Data>& _55621_d) {
	if ((!((*(_55621_d))._field_lvalue)) || (*(_55621_d))._method_is_const()) {
		return false;
	}
	{
		
		if (((*((*(_55621_d))._field_kind))._method_fnc() != nullptr) || ((*((*(_55621_d))._field_kind))._method_enm() != nullptr)) {
			_case_begin_5069793584:;
			{
				return false;
			}
		}
		else {
			_case_begin_5069791952:;
			{
				return true;
			}
		}
		_match_end_5069788256:;
	}
}



inline jule::Bool _229d681e3_is_valid_for_sptr_type(jule::Ptr<_229d681e3_TypeKind>& _57132_t) {
	jule::Ptr<_228e0d025_StructIns> _57213_s = (*(_57132_t))._method_strct();
	if (((_57213_s != nullptr) && ((*(_57213_s))._field_decl != nullptr)) && (*((*(_57213_s))._field_decl))._field_cpp_linked) {
		return false;
	}
	return true;
}



inline jule::Bool _229d681e3_is_valid_for_ref(jule::Ptr<_229d681e3_TypeKind>& _58026_t) {
	return (*(_58026_t))._method_fnc() == nullptr;
}



inline jule::Bool _229d681e3_is_builtin_str_convertable(jule::Ptr<_229d681e3_TypeKind>& _58336_t) {
	return ((!((*(_58336_t))._method_void())) && ((*(_58336_t))._method_fnc() == nullptr)) && ((*(_58336_t))._method_tup() == nullptr);
}



inline jule::Str _229d681e3_build_link_path_by_tokens(jule::Slice<_228d7aadb_Token>& _58731_tokens) {
	jule::Str _58813_s = _58731_tokens[0LL]._field_kind;
	{
		auto expr = _58731_tokens.slice(1LL);
		auto it = expr.begin();
		_iter_begin_5069807760:;
		if (it != expr.end()) {
			_228d7aadb_Token &_229d681e3_token = *it;
			{
				_58813_s+=jule::Str("::", 2);
				_58813_s+=_229d681e3_token._field_kind;
			}
			_iter_next_5069807760:;
			++it;
			goto _iter_begin_5069807760;
		}
		_iter_end_5069807760:;
	}
	return _58813_s;
}



inline jule::Ptr<_229d681e3_Prim> _229d681e3_build_prim_type(jule::Str _59620_kind) {
	return jule::new_struct_ptr<_229d681e3_Prim>(new( std::nothrow ) _229d681e3_Prim(_59620_kind));
}



inline jule::Ptr<_228e0d025_Struct> _229d681e3_get_struct_from_kind(jule::Ptr<_229d681e3_TypeKind> _60229_k) {
	{
		
		if (_60229_k == nullptr) {
			_case_begin_5069812992:;
			{
				return nullptr;
			}
		}
		else if ((*(_60229_k))._method_strct() != nullptr) {
			_case_begin_5069813088:;
			{
				return (*((*(_60229_k))._method_strct()))._field_decl;
			}
		}
		else if ((*(_60229_k))._method_sptr() != nullptr) {
			_case_begin_5069812416:;
			{
				return _229d681e3_get_struct_from_kind((*((*(_60229_k))._method_sptr()))._field_elem);
			}
		}
		else if ((*(_60229_k))._method_slc() != nullptr) {
			_case_begin_5069812512:;
			{
				return _229d681e3_get_struct_from_kind((*((*(_60229_k))._method_slc()))._field_elem);
			}
		}
		else if ((*(_60229_k))._method_arr() != nullptr) {
			_case_begin_5069812608:;
			{
				return _229d681e3_get_struct_from_kind((*((*(_60229_k))._method_arr()))._field_elem);
			}
		}
		else if ((*(_60229_k))._method_ptr() != nullptr) {
			_case_begin_5069811728:;
			{
				return nullptr;
			}
		}
		else {
			_case_begin_5069811424:;
			{
				return nullptr;
			}
		}
		_match_end_5069810992:;
	}
}



inline jule::Bool _229d681e3_is_prim(jule::Str _63112_kind) {
	return (((((((((((((((_63112_kind == jule::Str("i8", 2)) || (_63112_kind == jule::Str("i16", 3))) || (_63112_kind == jule::Str("i32", 3))) || (_63112_kind == jule::Str("i64", 3))) || (_63112_kind == jule::Str("u8", 2))) || (_63112_kind == jule::Str("u16", 3))) || (_63112_kind == jule::Str("u32", 3))) || (_63112_kind == jule::Str("u64", 3))) || (_63112_kind == jule::Str("f32", 3))) || (_63112_kind == jule::Str("f64", 3))) || (_63112_kind == jule::Str("int", 3))) || (_63112_kind == jule::Str("uint", 4))) || (_63112_kind == jule::Str("uintptr", 7))) || (_63112_kind == jule::Str("bool", 4))) || (_63112_kind == jule::Str("str", 3))) || (_63112_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ptr<_229d56533_SymbolTable>,jule::Slice<_2276bcb9e_Log>> _1e61383d7_build_symbols(jule::Ptr<_228d3160d_Ast>& _1523_ast,jule::Trait<_1e53308ee_Importer>& _1539_importer,jule::Ptr<_228d6ecab_SymbolBuilder> _1563_owner) {
	jule::Ptr<_228d6ecab_SymbolBuilder> _1613_sb = jule::new_struct_ptr<_228d6ecab_SymbolBuilder>(new( std::nothrow ) _228d6ecab_SymbolBuilder(_1563_owner,_1539_importer,jule::Slice<_2276bcb9e_Log>(),_1523_ast,jule::Ptr<_229d56533_SymbolTable>()));
	(*(_1613_sb))._method_build();
	if ((*(_1613_sb))._field_errors.len() == 0LL) {
		return std::make_tuple((*(_1613_sb))._field_table,nullptr);
	}
	return std::make_tuple(nullptr,(*(_1613_sb))._field_errors);
}



inline std::tuple<jule::Ptr<_1e53308ee_Package>,jule::Slice<_2276bcb9e_Log>> _1e61383d7___analyze_package(jule::Slice<jule::Ptr<_228d3160d_Ast>>& _2927_files,jule::Trait<_1e53308ee_Importer>& _2947_importer,jule::Int& _2968_flags) {
	jule::Slice<jule::Ptr<_229d56533_SymbolTable>> _3113_tables = jule::Slice<jule::Ptr<_229d56533_SymbolTable>>::alloc(0LL,static_cast<jule::I64>(_2927_files.len()));
	{
		auto &expr = _2927_files;
		auto it = expr.begin();
		_iter_begin_5069842608:;
		if (it != expr.end()) {
			jule::Ptr<_228d3160d_Ast> _1e61383d7_f = *it;
			{
				jule::Ptr<_229d56533_SymbolTable> _3318_table;
				jule::Slice<_2276bcb9e_Log> _3329_errors;
				std::tie(_3318_table,_3329_errors) = _1e61383d7_build_symbols(_1e61383d7_f,_2947_importer,nullptr);
				if (_3329_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_3329_errors);
				}
				_3113_tables.push(_3318_table);
			}
			_iter_next_5069842608:;
			++it;
			goto _iter_begin_5069842608;
		}
		_iter_end_5069842608:;
	}
	jule::Ptr<_1e538b460_Sema> _4013_sema = jule::new_struct_ptr<_1e538b460_Sema>(new( std::nothrow ) _1e538b460_Sema(jule::Slice<_2276bcb9e_Log>(),jule::Slice<jule::Ptr<_229d56533_SymbolTable>>(),jule::Ptr<_229d56533_SymbolTable>(),_2968_flags));
	(*(_4013_sema))._method_check(_3113_tables);
	if ((*(_4013_sema))._field_errors.len() > 0LL) {
		return std::make_tuple(nullptr,(*(_4013_sema))._field_errors);
	}
	jule::Ptr<_1e53308ee_Package> _4813_pkg = jule::new_struct<_1e53308ee_Package>(new( std::nothrow ) _1e53308ee_Package((*(_4013_sema))._field_files));
	return std::make_tuple(_4813_pkg,nullptr);
}



inline std::tuple<jule::Ptr<_1e53308ee_Package>,jule::Slice<_2276bcb9e_Log>> _1e61383d7_analyze_package(jule::Slice<jule::Ptr<_228d3160d_Ast>> _7228_files,jule::Trait<_1e53308ee_Importer> _7247_importer,jule::Int _7267_flags) {
	if (_7228_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1e53308ee_Package> _7714_package;
	jule::Slice<_2276bcb9e_Log> _7727_logs;
	std::tie(_7714_package,_7727_logs) = _1e61383d7___analyze_package(_7228_files,_7247_importer,_7267_flags);
	return std::make_tuple(_7714_package,_7727_logs);
}



inline jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)> _1e614d809_find_builtin_caller(jule::U8 _7924_c) {
	{
		auto &_match_expr{ _7924_c };
		
		if (_match_expr == 1LLU) {
			_case_begin_5069887024:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_common);
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_5069886128:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_common_mut);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_5069886576:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_common_plain);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_5069886672:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_out);
			}
		}
		else if (_match_expr == 5LLU) {
			_case_begin_5069886320:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_outln);
			}
		}
		else if (_match_expr == 6LLU) {
			_case_begin_5069886416:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_new);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_5069887536:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_panic);
			}
		}
		else if (_match_expr == 8LLU) {
			_case_begin_5069887632:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_copy);
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_5069887728:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_make);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_5069887824:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_append);
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_5069887920:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_clone);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_5069888016:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_assert);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_5069888112:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_std_mem_size_of);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_5069888208:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_std_mem_align_of);
			}
		}
		else if (_match_expr == 19LLU) {
			_case_begin_5069888304:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_std_mem_free);
			}
		}
		else if (_match_expr == 15LLU) {
			_case_begin_5069888400:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_std_jule_integrated_to_str);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_5069888496:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_std_jule_integrated_inline);
			}
		}
		else if (_match_expr == 17LLU) {
			_case_begin_5069888592:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_std_debug_out);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_5069888688:;
			{
				return jule::Fn<jule::Ptr<_229d70d33_Data>(jule::Ptr<_229d70d33_Eval>&,jule::Ptr<_228d31971_FnCallExpr>&,jule::Ptr<_229d70d33_Data>&)>(_1e614d809_builtin_caller_std_debug_outln);
			}
		}
		else {
			_case_begin_5069884032:;
			{
				jule::panic(jule::Str("builtin caller not exist", 24) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/jule/sema/builtin.jule:139:9"));;
			}
		}
		_match_end_5069885248:;
	}
}



inline jule::Ptr<_229b6ebcb_FnIns> _1e614d809_find_builtin_fn(jule::Str _14320_ident) {
	{
		auto &_match_expr{ _14320_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_5069901568:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),4LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_5069901664:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),5LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("new", 3)) {
			_case_begin_5069901760:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),6LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("panic", 5)) {
			_case_begin_5069902384:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),7LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("make", 4)) {
			_case_begin_5069902480:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),9LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("append", 6)) {
			_case_begin_5069902576:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),10LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("copy", 4)) {
			_case_begin_5069902672:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),8LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("clone", 5)) {
			_case_begin_5069902768:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),11LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("assert", 6)) {
			_case_begin_5069902864:;
			{
				return jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),12LLU,jule::Bool()));
			}
		}
		else {
			_case_begin_5069898256:;
			{
				return nullptr;
			}
		}
		_match_end_5069902112:;
	}
}



inline jule::Ptr<_229d681e3_TypeAlias> _1e614d809_find_builtin_type_alias(jule::Str _15828_ident) {
	{
		auto &_match_expr{ _15828_ident };
		
		if (_match_expr == jule::Str("byte", 4)) {
			_case_begin_5069914480:;
			{
				return _1e614d809_BUILTIN_TYPE_ALIAS_BYTE;
			}
		}
		else if (_match_expr == jule::Str("rune", 4)) {
			_case_begin_5069914640:;
			{
				return _1e614d809_BUILTIN_TYPE_ALIAS_RUNE;
			}
		}
		else {
			_case_begin_5069905136:;
			{
				return nullptr;
			}
		}
		_match_end_5069903888:;
	}
}



inline jule::Ptr<_229b5076c_Trait> _1e614d809_find_builtin_trait(jule::Str _16623_ident) {
	{
		auto &_match_expr{ _16623_ident };
		
		if (_match_expr == jule::Str("Dispose", 7)) {
			_case_begin_5069917424:;
			{
				return _1e614d809_BUILTIN_TRAIT_DISPOSE;
			}
		}
		else {
			_case_begin_5069914816:;
			{
				return nullptr;
			}
		}
		_match_end_5069915056:;
	}
}



inline jule::Any _1e614d809_find_builtin_def(jule::Str _17321_ident) {
	jule::Ptr<_229b6ebcb_FnIns> _17413_f = _1e614d809_find_builtin_fn(_17321_ident);
	if (_17413_f != nullptr) {
		return jule::Any(_17413_f);
	}
	jule::Ptr<_229d681e3_TypeAlias> _17913_ta = _1e614d809_find_builtin_type_alias(_17321_ident);
	if (_17913_ta != nullptr) {
		return jule::Any(_17913_ta);
	}
	jule::Ptr<_229b5076c_Trait> _18413_t = _1e614d809_find_builtin_trait(_17321_ident);
	if (_18413_t != nullptr) {
		return jule::Any(_18413_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _1e614d809_find_builtin_def_std_debug(jule::Str _19231_ident) {
	{
		auto &_match_expr{ _19231_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_5069926288:;
			{
				return jule::Any(jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),17LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_5069925920:;
			{
				return jule::Any(jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),18LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_5069921024:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5069923040:;
	}
}



inline jule::Any _1e614d809_find_builtin_def_std_mem(jule::Str _20029_ident) {
	{
		auto &_match_expr{ _20029_ident };
		
		if (_match_expr == jule::Str("size_of", 7)) {
			_case_begin_5069930944:;
			{
				return jule::Any(jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),13LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("align_of", 8)) {
			_case_begin_5069930576:;
			{
				return jule::Any(jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),14LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("free", 4)) {
			_case_begin_5069930672:;
			{
				return jule::Any(jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),19LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_5069929056:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5069927024:;
	}
}



inline jule::Any _1e614d809_find_builtin_def_std_jule_integrated(jule::Str _20941_ident) {
	{
		auto &_match_expr{ _20941_ident };
		
		if (_match_expr == jule::Str("to_str", 6)) {
			_case_begin_5069937088:;
			{
				return jule::Any(jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),15LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("inline", 6)) {
			_case_begin_5069936720:;
			{
				return jule::Any(jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),16LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_5069930768:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5069932032:;
	}
}



inline jule::Any _1e614d809_find_package_builtin_def(jule::Str _21729_link_path,jule::Str _21745_ident) {
	{
		auto &_match_expr{ _21729_link_path };
		
		if (_match_expr == jule::Str("std::debug", 10)) {
			_case_begin_5069942208:;
			{
				return _1e614d809_find_builtin_def_std_debug(_21745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::mem", 8)) {
			_case_begin_5069941840:;
			{
				return _1e614d809_find_builtin_def_std_mem(_21745_ident);
			}
		}
		else if (_match_expr == jule::Str("std::jule::integrated", 21)) {
			_case_begin_5069941936:;
			{
				return _1e614d809_find_builtin_def_std_jule_integrated(_21745_ident);
			}
		}
		else {
			_case_begin_5069938032:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_5069940912:;
	}
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_common_plain(jule::Ptr<_229d70d33_Eval>& _22637_e,jule::Ptr<_228d31971_FnCallExpr>& _22652_fc,jule::Ptr<_229d70d33_Data>& _22674_d) {
	jule::Ptr<_229b6ebcb_FnIns> _22713_f = (*((*(_22674_d))._field_kind))._method_fnc();
	_1e58b019d_FnCallArgChecker _22913_fcac = _1e58b019d_FnCallArgChecker(_22637_e,(*(_22652_fc))._field_args,(*(_22652_fc))._field_token,_22713_f,false,jule::Slice<jule::Any>());
	_22913_fcac._method_check();
	jule::Ptr<_1e5870218_FnCallExprModel> _23813_model = jule::new_struct<_1e5870218_FnCallExprModel>(new( std::nothrow ) _1e5870218_FnCallExprModel(_228d7aadb_Token(),_22713_f,jule::Bool(),(*(_22674_d))._field_model,_22913_fcac._field_arg_models,jule::Ptr<_1e56c3885_Scope>(),jule::Bool()));
	if ((*(_22713_f))._field_result == nullptr) {
		_22674_d=_229d70d33_build_void_data();
	} else {
		_22674_d=jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data((*(_22713_f))._field_result,jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
	}
	(*(_22674_d))._field_model=jule::Any(_23813_model);
	return _22674_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_common(jule::Ptr<_229d70d33_Eval>& _25631_e,jule::Ptr<_228d31971_FnCallExpr>& _25646_fc,jule::Ptr<_229d70d33_Data>& _25668_d) {
	if ((*(_25646_fc))._field_generics.len() > 0LL) {
		(*(_25631_e))._method_push_err((*(_25646_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	return _1e614d809_builtin_caller_common_plain(_25631_e,_25646_fc,_25668_d);
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_common_mut(jule::Ptr<_229d70d33_Eval>& _26435_e,jule::Ptr<_228d31971_FnCallExpr>& _26450_fc,jule::Ptr<_229d70d33_Data>& _26472_d) {
	if ((!((*(_26472_d))._field_mutable))) {
		(*(_26435_e))._method_push_err((*(_26450_fc))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	return _1e614d809_builtin_caller_common(_26435_e,_26450_fc,_26472_d);
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_error(jule::Ptr<_229d70d33_Eval>& _27130_e,jule::Ptr<_228d31971_FnCallExpr>& _27145_fc) {
	if ((*(_27145_fc))._field_generics.len() > 0LL) {
		(*(_27130_e))._method_push_err((*(_27145_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_27145_fc))._field_args.len() < 1LL) {
		(*(_27130_e))._method_push_err((*(_27145_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("err", 3))}));
		return nullptr;
	}
	if ((*(_27145_fc))._field_args.len() > 1LL) {
		(*(_27130_e))._method_push_err((*((*(_27145_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _28213_expr = (*(_27130_e))._method_eval_expr((*(_27145_fc))._field_args[0LL]);
	if (_28213_expr == nullptr) {
		return nullptr;
	}
	if ((*(_28213_expr))._method_is_nil()) {
		(*(_27130_e))._method_push_err((*((*(_27145_fc))._field_args[0LL]))._field_token,jule::Str("you cannot call error function with nil", 39),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _29113_d = _229d70d33_build_void_data();
	(*(_29113_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinErrorCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinErrorCallExprModel(jule::Ptr<_229b6ebcb_FnIns>(),(*(_28213_expr))._field_model)));
	return _29113_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_out(jule::Ptr<_229d70d33_Eval>& _29928_e,jule::Ptr<_228d31971_FnCallExpr>& _29943_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_29943_fc))._field_generics.len() > 0LL) {
		(*(_29928_e))._method_push_err((*(_29943_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_29943_fc))._field_args.len() < 1LL) {
		(*(_29928_e))._method_push_err((*(_29943_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return nullptr;
	}
	if ((*(_29943_fc))._field_args.len() > 1LL) {
		(*(_29928_e))._method_push_err((*((*(_29943_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _31113_expr = (*(_29928_e))._method_eval_expr((*(_29943_fc))._field_args[0LL]);
	if (_31113_expr == nullptr) {
		return nullptr;
	}
	if ((!(_229d681e3_is_builtin_str_convertable((*(_31113_expr))._field_kind)))) {
		(*(_29928_e))._method_push_err((*((*(_29943_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _32113_d = _229d70d33_build_void_data();
	(*(_32113_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinOutCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinOutCallExprModel((*(_31113_expr))._field_model,jule::Bool())));
	return _32113_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_outln(jule::Ptr<_229d70d33_Eval>& _32630_e,jule::Ptr<_228d31971_FnCallExpr>& _32645_fc,jule::Ptr<_229d70d33_Data>& _32667_d) {
	_32667_d=_1e614d809_builtin_caller_out(_32630_e,_32645_fc,_32667_d);
	if (_32667_d == nullptr) {
		return nullptr;
	}
	(*(_32667_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinOutlnCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinOutlnCallExprModel((*((*(_32667_d))._field_model.operator jule::Ptr<_1e5870218_BuiltinOutCallExprModel>()))._field_expr,jule::Bool())));
	return _32667_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_new(jule::Ptr<_229d70d33_Eval>& _33828_e,jule::Ptr<_228d31971_FnCallExpr>& _33843_fc,jule::Ptr<_229d70d33_Data>& _33865_d) {
	if ((*(_33843_fc))._field_generics.len() > 0LL) {
		(*(_33828_e))._method_push_err((*(_33843_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_33843_fc))._field_args.len() < 1LL) {
		(*(_33828_e))._method_push_err((*(_33843_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return nullptr;
	}
	if ((*(_33843_fc))._field_args.len() > 2LL) {
		(*(_33828_e))._method_push_err((*((*(_33843_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _35013_t = (*(_33828_e))._method_eval_expr_kind((*((*(_33843_fc))._field_args[0LL]))._field_kind);
	if (_35013_t == nullptr) {
		return nullptr;
	}
	if ((!((*(_35013_t))._field_decl))) {
		(*(_33828_e))._method_push_err((*((*(_33843_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_229d681e3_is_valid_for_sptr_type((*(_35013_t))._field_kind)))) {
		jule::Ptr<_228e0d025_StructIns> _36117_s = (*((*(_35013_t))._field_kind))._method_strct();
		if (((_36117_s != nullptr) && ((*(_36117_s))._field_decl != nullptr)) && (*((*(_36117_s))._field_decl))._field_cpp_linked) {
			(*(_33828_e))._method_push_err((*((*(_33843_fc))._field_args[0LL]))._field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	(*(_33865_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_229d681e3_Sptr>(new( std::nothrow ) _229d681e3_Sptr((*(_35013_t))._field_kind))));
	if ((*(_33843_fc))._field_args.len() == 2LL) {
		jule::Ptr<_229d681e3_TypeKind> _37117_old = (*(_33828_e))._field_prefix;
		(*(_33828_e))._field_prefix=(*(_35013_t))._field_kind;
		jule::Ptr<_229d70d33_Data> _37417_init = (*(_33828_e))._method_eval_expr((*(_33843_fc))._field_args[1LL]);
		(*(_33828_e))._field_prefix=_37117_old;
		if (_37417_init != nullptr) {
			_228d7aadb_Token _37921_token = (*((*(_33843_fc))._field_args[1LL]))._field_token;
			
			(*((*(_33828_e))._field_s))._method_check_validity_for_init_expr((!((*(_33828_e))._field_immutable)),false,(*(_35013_t))._field_kind,_37417_init,_37921_token);
			(*((*(_33828_e))._field_s))._method_check_assign_type(false,(*(_35013_t))._field_kind,_37417_init,_37921_token);
			(*(_33865_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinNewCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinNewCallExprModel((*(_35013_t))._field_kind,(*(_37417_init))._field_model)));
		}
	} else {
		(*(_33865_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinNewCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinNewCallExprModel((*(_35013_t))._field_kind,jule::Any())));
	}
	return _33865_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_panic(jule::Ptr<_229d70d33_Eval>& _39730_e,jule::Ptr<_228d31971_FnCallExpr>& _39745_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_39745_fc))._field_generics.len() > 0LL) {
		(*(_39730_e))._method_push_err((*(_39745_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_39745_fc))._field_args.len() < 1LL) {
		(*(_39730_e))._method_push_err((*(_39745_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("message", 7))}));
		return nullptr;
	}
	if ((*(_39745_fc))._field_args.len() > 1LL) {
		(*(_39730_e))._method_push_err((*((*(_39745_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _40913_expr = (*(_39730_e))._method_eval_expr((*(_39745_fc))._field_args[0LL]);
	if (_40913_expr == nullptr) {
		return nullptr;
	}
	if (((*((*(_40913_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_40913_expr))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_39730_e))._method_push_err((*(_39745_fc))._field_token,jule::Str("panic function only accepts strings", 35),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _41813_d = _229d70d33_build_void_data();
	(*(_41813_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinPanicCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinPanicCallExprModel((*(_39745_fc))._field_token,(*(_40913_expr))._field_model)));
	return _41813_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_make(jule::Ptr<_229d70d33_Eval>& _42629_e,jule::Ptr<_228d31971_FnCallExpr>& _42644_fc,jule::Ptr<_229d70d33_Data>& _42666_d) {
	if ((*(_42644_fc))._field_generics.len() > 0LL) {
		(*(_42629_e))._method_push_err((*(_42644_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_42644_fc))._field_args.len() < 2LL) {
		if ((*(_42644_fc))._field_args.len() == 1LL) {
			(*(_42629_e))._method_push_err((*(_42644_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return nullptr;
		}
		(*(_42629_e))._method_push_err((*(_42644_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return nullptr;
	}
	if ((*(_42644_fc))._field_args.len() > 3LL) {
		(*(_42629_e))._method_push_err((*((*(_42644_fc))._field_args[3LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _44213_t = (*(_42629_e))._method_eval_expr_kind((*((*(_42644_fc))._field_args[0LL]))._field_kind);
	if (_44213_t == nullptr) {
		return nullptr;
	}
	if ((!((*(_44213_t))._field_decl)) || ((*((*(_44213_t))._field_kind))._method_slc() == nullptr)) {
		(*(_42629_e))._method_push_err((*((*(_42644_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_42666_d))._field_kind=(*(_44213_t))._field_kind;
	jule::Ptr<_229d70d33_Data> _45413_len = (*((*((*(_42629_e))._field_s))._method_evalp((*(_42629_e))._field_lookup,(*(_44213_t))._field_kind)))._method_eval_expr((*(_42644_fc))._field_args[1LL]);
	if (_45413_len == nullptr) {
		return _42666_d;
	}
	(*(_42629_e))._method_check_integer_indexing_by_data(_45413_len,(*((*(_42644_fc))._field_args[1LL]))._field_token);
	if ((*(_42644_fc))._field_args.len() == 3LL) {
		jule::Ptr<_229d70d33_Data> _46217_cap = (*((*((*(_42629_e))._field_s))._method_evalp((*(_42629_e))._field_lookup,(*(_44213_t))._field_kind)))._method_eval_expr((*(_42644_fc))._field_args[2LL]);
		if (_46217_cap == nullptr) {
			return _42666_d;
		}
		(*(_42629_e))._method_check_integer_indexing_by_data(_46217_cap,(*((*(_42644_fc))._field_args[2LL]))._field_token);
		(*(_42666_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinMakeCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinMakeCallExprModel((*(_44213_t))._field_kind,(*(_45413_len))._field_model,(*(_46217_cap))._field_model)));
	} else {
		(*(_42666_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinMakeCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinMakeCallExprModel((*(_44213_t))._field_kind,(*(_45413_len))._field_model,jule::Any())));
	}
	return _42666_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_append(jule::Ptr<_229d70d33_Eval>& _48331_e,jule::Ptr<_228d31971_FnCallExpr>& _48346_fc,jule::Ptr<_229d70d33_Data>& _48368_d) {
	if ((*(_48346_fc))._field_generics.len() > 0LL) {
		(*(_48331_e))._method_push_err((*(_48346_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_48346_fc))._field_args.len() < 2LL) {
		if ((*(_48346_fc))._field_args.len() == 1LL) {
			(*(_48331_e))._method_push_err((*(_48346_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_48331_e))._method_push_err((*(_48346_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _49613_t = (*(_48331_e))._method_eval_expr((*(_48346_fc))._field_args[0LL]);
	if (_49613_t == nullptr) {
		return nullptr;
	}
	if ((*((*(_49613_t))._field_kind))._method_slc() == nullptr) {
		(*(_48331_e))._method_push_err((*((*(_48346_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229b6ebcb_FnIns> _50613_f = jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str())),(*(_49613_t))._field_kind)),jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),true,true,jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str())),(*((*((*(_49613_t))._field_kind))._method_slc()))._field_elem))}),(*(_49613_t))._field_kind,jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),3LLU,jule::Bool()));
	(*(_48368_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_50613_f));
	(*(_48368_d))._field_model=jule::Any(jule::new_struct<_1e5870218_CommonIdentExprModel>(new( std::nothrow ) _1e5870218_CommonIdentExprModel(jule::Str("append", 6))));
	_48368_d=_1e614d809_builtin_caller_common_plain(_48331_e,_48346_fc,_48368_d);
	if (_48368_d != nullptr) {
		jule::Ptr<_1e5870218_FnCallExprModel> _53017_model = (*(_48368_d))._field_model.operator jule::Ptr<_1e5870218_FnCallExprModel>();
		(*(_48368_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinAppendCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinAppendCallExprModel((*(_53017_model))._field_args[0LL],(*(_53017_model))._field_args[1LL])));
	}
	return _48368_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_copy(jule::Ptr<_229d70d33_Eval>& _53929_e,jule::Ptr<_228d31971_FnCallExpr>& _53944_fc,jule::Ptr<_229d70d33_Data>& _53966_d) {
	if ((*(_53944_fc))._field_generics.len() > 0LL) {
		(*(_53929_e))._method_push_err((*(_53944_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_53944_fc))._field_args.len() < 2LL) {
		if ((*(_53944_fc))._field_args.len() == 1LL) {
			(*(_53929_e))._method_push_err((*(_53944_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_53929_e))._method_push_err((*(_53944_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	if ((*(_53944_fc))._field_args.len() > 2LL) {
		(*(_53929_e))._method_push_err((*((*(_53944_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _55513_t = (*(_53929_e))._method_eval_expr((*(_53944_fc))._field_args[0LL]);
	if (_55513_t == nullptr) {
		return nullptr;
	}
	if ((*((*(_55513_t))._field_kind))._method_slc() == nullptr) {
		(*(_53929_e))._method_push_err((*((*(_53944_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!((*(_55513_t))._field_mutable))) {
		(*(_53929_e))._method_push_err((*((*(_53944_fc))._field_args[0LL]))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229b6ebcb_FnIns> _56913_f = jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>({jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param()),(*(_55513_t))._field_kind)),jule::new_struct<_229b6ebcb_ParamIns>(new( std::nothrow ) _229b6ebcb_ParamIns(jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str())),(*(_55513_t))._field_kind))}),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),3LLU,jule::Bool()));
	(*(_53966_d))._field_kind=jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_56913_f));
	(*(_53966_d))._field_model=jule::Any(jule::new_struct<_1e5870218_CommonIdentExprModel>(new( std::nothrow ) _1e5870218_CommonIdentExprModel(jule::Str("copy", 4))));
	_53966_d=_1e614d809_builtin_caller_common_plain(_53929_e,_53944_fc,_53966_d);
	return _53966_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_clone(jule::Ptr<_229d70d33_Eval>& _59330_e,jule::Ptr<_228d31971_FnCallExpr>& _59345_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_59345_fc))._field_generics.len() > 0LL) {
		(*(_59330_e))._method_push_err((*(_59345_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_59345_fc))._field_args.len() < 1LL) {
		(*(_59330_e))._method_push_err((*(_59345_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_59345_fc))._field_args.len() > 1LL) {
		(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _60613_d = (*(_59330_e))._method_eval_expr_kind((*((*(_59345_fc))._field_args[0LL]))._field_kind);
	if (_60613_d == nullptr) {
		return nullptr;
	}
	jule::Fn<void(jule::Ptr<_229d681e3_TypeKind>)> _6119_check_kind = jule::Fn<void(jule::Ptr<_229d681e3_TypeKind>)>([=](jule::Ptr<_229d681e3_TypeKind> _61129_k) mutable -> void {
		{
			
			if ((*(_61129_k))._method_slc() != nullptr) {
				_case_begin_5070212464:;
				{
					if ((!((*((*((*(_61129_k))._method_slc()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_map() != nullptr) {
				_case_begin_5070212560:;
				{
					jule::Ptr<_229d681e3_Map> _62217_m = (*(_61129_k))._method_map();
					if ((!((*((*(_62217_m))._field_key))._method_supports_cloning())) || (!((*((*(_62217_m))._field_val))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_arr() != nullptr) {
				_case_begin_5070212656:;
				{
					if ((!((*((*((*(_61129_k))._method_arr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_sptr() != nullptr) {
				_case_begin_5070212752:;
				{
					if ((!((*((*((*(_61129_k))._method_sptr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_61129_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_61129_k))._method_strct() != nullptr) {
				_case_begin_5070212960:;
				{
					jule::Ptr<_228e0d025_StructIns> _64717_s = (*((*(_60613_d))._field_kind))._method_strct();
					if ((!((*(_64717_s))._field_mutable))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59),jule::Slice<jule::Any>({jule::Any((*((*(_60613_d))._field_kind))._method_to_str())}));
						}
					}
					if ((((*(_64717_s))._field_decl == nullptr) || (*((*(_64717_s))._field_decl))._field_cpp_linked) || (!((*((*(_64717_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						{
							(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_60613_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
						}
					}
				}
			}
			else {
				_case_begin_5070212160:;
				{
					{
						(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_60613_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					}
				}
			}
			_match_end_5070211984:;
		}
	});
	{
		
		if ((!((*(_60613_d))._field_lvalue))) {
			_case_begin_5070247568:;
			{
				(*(_59330_e))._method_push_err((*((*(_59345_fc))._field_args[0LL]))._field_token,jule::Str("non-lvalue expressions cannot be clone", 38),jule::Slice<jule::Any>());
			}
		}
		else if ((!((*((*(_60613_d))._field_kind))._method_supports_cloning()))) {
			_case_begin_5070247664:;
			{
				_6119_check_kind((*(_60613_d))._field_kind);
			}
		}
		_match_end_5070254608:;
	}
	(*(_60613_d))._field_mutable=true;
	(*(_60613_d))._field_model=jule::Any(jule::new_struct<_1e5870218_BuiltinCloneCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinCloneCallExprModel((*(_60613_d))._field_model)));
	return _60613_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_assert(jule::Ptr<_229d70d33_Eval>& _68431_e,jule::Ptr<_228d31971_FnCallExpr>& _68446_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_68446_fc))._field_generics.len() > 0LL) {
		(*(_68431_e))._method_push_err((*(_68446_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_68446_fc))._field_args.len() < 1LL) {
		(*(_68431_e))._method_push_err((*(_68446_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_68446_fc))._field_args.len() > 2LL) {
		(*(_68431_e))._method_push_err((*((*(_68446_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _69613_expr = (*(_68431_e))._method_eval_expr((*(_68446_fc))._field_args[0LL]);
	if (_69613_expr == nullptr) {
		return nullptr;
	}
	if (((*((*(_69613_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_69613_expr))._field_kind))._method_prim()))._method_is_bool()))) {
		(*(_68431_e))._method_push_err((*(_68446_fc))._field_token,jule::Str("assertion requires boolean expression", 37),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1e5870218_BuiltinAssertCallExprModel> _70513_model = jule::new_struct<_1e5870218_BuiltinAssertCallExprModel>(new( std::nothrow ) _1e5870218_BuiltinAssertCallExprModel((*(_68446_fc))._field_token,(*(_69613_expr))._field_model,jule::Str("assertion failed", 16)));
	if ((*(_68446_fc))._field_args.len() == 2LL) {
		jule::Ptr<_229d70d33_Data> _71317_log = (*(_68431_e))._method_eval_expr((*(_68446_fc))._field_args[1LL]);
		if (_71317_log == nullptr) {
			return nullptr;
		}
		if (((!((*(_71317_log))._method_is_const())) || ((*((*(_71317_log))._field_kind))._method_prim() == nullptr)) || (!((*((*((*(_71317_log))._field_kind))._method_prim()))._method_is_str()))) {
			(*(_68431_e))._method_push_err((*((*(_68446_fc))._field_args[1LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("const str", 9)),jule::Any((*((*(_71317_log))._field_kind))._method_to_str())}));
			return nullptr;
		}
		(*(_70513_model))._field_log=(*((*(_71317_log))._field_constant))._method_read_str();
	}
	jule::Ptr<_229d70d33_Data> _72613_d = _229d70d33_build_void_data();
	(*(_72613_d))._field_model=jule::Any(_70513_model);
	return _72613_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_mem_size_of(jule::Ptr<_229d70d33_Eval>& _73140_e,jule::Ptr<_228d31971_FnCallExpr>& _73155_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_73155_fc))._field_generics.len() > 0LL) {
		(*(_73140_e))._method_push_err((*(_73155_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _73513_result = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
	if ((*(_73155_fc))._field_args.len() < 1LL) {
		(*(_73140_e))._method_push_err((*(_73155_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _73513_result;
	}
	if ((*(_73155_fc))._field_args.len() > 1LL) {
		(*(_73140_e))._method_push_err((*((*(_73155_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _74713_d = (*(_73140_e))._method_eval_expr_kind((*((*(_73155_fc))._field_args[0LL]))._field_kind);
	if (_74713_d == nullptr) {
		return _73513_result;
	}
	(*(_73513_result))._field_model=jule::Any(jule::new_struct<_1e5870218_SizeofExprModel>(new( std::nothrow ) _1e5870218_SizeofExprModel((*(_74713_d))._field_model)));
	return _73513_result;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_mem_align_of(jule::Ptr<_229d70d33_Eval>& _75641_e,jule::Ptr<_228d31971_FnCallExpr>& _75656_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_75656_fc))._field_generics.len() > 0LL) {
		(*(_75641_e))._method_push_err((*(_75656_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _76013_result = jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
	if ((*(_75656_fc))._field_args.len() < 1LL) {
		(*(_75641_e))._method_push_err((*(_75656_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _76013_result;
	}
	if ((*(_75656_fc))._field_args.len() > 1LL) {
		(*(_75641_e))._method_push_err((*((*(_75656_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _77213_d = (*(_75641_e))._method_eval_expr_kind((*((*(_75656_fc))._field_args[0LL]))._field_kind);
	if (_77213_d == nullptr) {
		return _76013_result;
	}
	(*(_76013_result))._field_model=jule::Any(jule::new_struct<_1e5870218_AlignofExprModel>(new( std::nothrow ) _1e5870218_AlignofExprModel((*(_77213_d))._field_model)));
	return _76013_result;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_mem_free(jule::Ptr<_229d70d33_Eval>& _78137_e,jule::Ptr<_228d31971_FnCallExpr>& _78152_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_78152_fc))._field_generics.len() > 0LL) {
		(*(_78137_e))._method_push_err((*(_78152_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_78152_fc))._field_args.len() < 1LL) {
		(*(_78137_e))._method_push_err((*(_78152_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("h", 1))}));
		return nullptr;
	}
	if ((*(_78152_fc))._field_args.len() > 1LL) {
		(*(_78137_e))._method_push_err((*((*(_78152_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _79413_d = (*(_78137_e))._method_eval_expr_kind((*((*(_78152_fc))._field_args[0LL]))._field_kind);
	if (_79413_d == nullptr) {
		return nullptr;
	}
	if ((!((*((*(_79413_d))._field_kind))._method_performs_rc()))) {
		(*(_78137_e))._method_push_err((*((*(_78152_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _80313_result = _229d70d33_build_void_data();
	(*(_80313_result))._field_model=jule::Any(jule::new_struct<_1e5870218_FreeExprModel>(new( std::nothrow ) _1e5870218_FreeExprModel((*(_79413_d))._field_model)));
	return _80313_result;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_229d70d33_Eval>& _80851_e,jule::Ptr<_228d31971_FnCallExpr>& _80866_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((*(_80866_fc))._field_generics.len() > 0LL) {
		(*(_80851_e))._method_push_err((*(_80866_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_80866_fc))._field_args.len() < 1LL) {
		(*(_80851_e))._method_push_err((*(_80866_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_80866_fc))._field_args.len() > 1LL) {
		(*(_80851_e))._method_push_err((*((*(_80866_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _82113_d = (*(_80851_e))._method_eval_expr_kind((*((*(_80866_fc))._field_args[0LL]))._field_kind);
	if (_82113_d == nullptr) {
		return nullptr;
	}
	if ((!(_229d681e3_is_builtin_str_convertable((*(_82113_d))._field_kind)))) {
		(*(_80851_e))._method_push_err((*((*(_80866_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_229d70d33_Data>(new( std::nothrow ) _229d70d33_Data(jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_229d681e3_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1e5870218_IntegratedToStrExprModel>(new( std::nothrow ) _1e5870218_IntegratedToStrExprModel((*(_82113_d))._field_model))),jule::Bool(),jule::Ptr<_1e856e8a4_Const>()));
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_jule_integrated_inline(jule::Ptr<_229d70d33_Eval>& _83951_e,jule::Ptr<_228d31971_FnCallExpr>& _83966_fc,jule::Ptr<_229d70d33_Data>& ) {
	if ((!((*(_83951_e))._method_is_unsafe()))) {
		(*(_83951_e))._method_push_err((*(_83966_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	if ((*(_83966_fc))._field_args.len() < 1LL) {
		(*(_83951_e))._method_push_err((*(_83966_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("code", 4))}));
		return nullptr;
	}
	if ((*(_83966_fc))._field_args.len() > 1LL) {
		(*(_83951_e))._method_push_err((*((*(_83966_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_229d70d33_Data> _85213_d = (*(_83951_e))._method_eval_expr((*(_83966_fc))._field_args[0LL]);
	if (_85213_d == nullptr) {
		return nullptr;
	}
	if (((*((*(_85213_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_85213_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_83951_e))._method_push_err((*((*(_83966_fc))._field_args[0LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_85213_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	if ((!((*(_85213_d))._method_is_const())) || (!((*((*(_85213_d))._field_constant))._method_is_str()))) {
		(*(_83951_e))._method_push_err((*((*(_83966_fc))._field_args[0LL]))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_229d70d33_Data> _86713_r = _229d70d33_build_void_data();
	if ((*(_83966_fc))._field_generics.len() != 0LL) {
		if ((!((*((*(_83951_e))._field_s))._method_check_generic_quantity(1LL,static_cast<jule::I64>((*(_83966_fc))._field_generics.len()),(*(_83966_fc))._field_token)))) {
			return nullptr;
		}
		jule::Ptr<_229d681e3_TypeSymbol> _87317_k = _228d6ecab_build_type((*(_83966_fc))._field_generics[0LL]);
		if ((!((*((*(_83951_e))._field_s))._method_check_type(_87317_k,(*(_83951_e))._field_lookup)))) {
			return nullptr;
		}
		(*(_86713_r))._field_kind=(*(_87317_k))._field_kind;
	}
	(*(_86713_r))._field_model=jule::Any(jule::new_struct<_1e5870218_BackendEmitExprModel>(new( std::nothrow ) _1e5870218_BackendEmitExprModel((*((*(_85213_d))._field_constant))._method_read_str())));
	return _86713_r;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_debug_out(jule::Ptr<_229d70d33_Eval>& _88638_e,jule::Ptr<_228d31971_FnCallExpr>& _88653_fc,jule::Ptr<_229d70d33_Data>& _88675_d) {
	_88675_d=_1e614d809_builtin_caller_out(_88638_e,_88653_fc,_88675_d);
	if (_88675_d == nullptr) {
		return nullptr;
	}
	(*((*(_88675_d))._field_model.operator jule::Ptr<_1e5870218_BuiltinOutCallExprModel>()))._field_debug=true;
	return _88675_d;
}



inline jule::Ptr<_229d70d33_Data> _1e614d809_builtin_caller_std_debug_outln(jule::Ptr<_229d70d33_Eval>& _89640_e,jule::Ptr<_228d31971_FnCallExpr>& _89655_fc,jule::Ptr<_229d70d33_Data>& _89677_d) {
	_89677_d=_1e614d809_builtin_caller_outln(_89640_e,_89655_fc,_89677_d);
	if (_89677_d == nullptr) {
		return nullptr;
	}
	(*((*(_89677_d))._field_model.operator jule::Ptr<_1e5870218_BuiltinOutlnCallExprModel>()))._field_debug=true;
	return _89677_d;
}



inline std::tuple<jule::Bool,jule::Bool> _228cbeab8_check_os(jule::Str _1013_arg) {
	jule::Bool _1025_ok = jule::Bool();
	jule::Bool _1035_exist = jule::Bool();
	_1025_ok=false;
	_1035_exist=true;
	{
		auto &_match_expr{ _1013_arg };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_5077456848:;
			{
				_1025_ok=_227785d55_is_windows(_2275b25dd_OS);
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_5077456032:;
			{
				_1025_ok=_227785d55_is_darwin(_2275b25dd_OS);
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_5077456128:;
			{
				_1025_ok=_227785d55_is_linux(_2275b25dd_OS);
			}
		}
		else if (_match_expr == jule::Str("unix", 4)) {
			_case_begin_5077456224:;
			{
				_1025_ok=_227785d55_is_unix(_2275b25dd_OS);
			}
		}
		else {
			_case_begin_5077455552:;
			{
				_1025_ok=true;
				_1035_exist=false;
			}
		}
		_match_end_5077454624:;
	}
	return std::make_tuple(_1025_ok,_1035_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _228cbeab8_check_arch(jule::Str _2715_arg) {
	jule::Bool _2727_ok = jule::Bool();
	jule::Bool _2737_exist = jule::Bool();
	_2727_ok=false;
	_2737_exist=true;
	{
		auto &_match_expr{ _2715_arg };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_5077464512:;
			{
				_2727_ok=_227785d55_is_i386(_2275b25dd_ARCH);
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_5077463696:;
			{
				_2727_ok=_227785d55_is_amd64(_2275b25dd_ARCH);
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_5077463792:;
			{
				_2727_ok=_227785d55_is_arm64(_2275b25dd_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x64", 3)) {
			_case_begin_5077463888:;
			{
				_2727_ok=_227785d55_is_64bit(_2275b25dd_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x32", 3)) {
			_case_begin_5077463984:;
			{
				_2727_ok=_227785d55_is_32bit(_2275b25dd_ARCH);
			}
		}
		else {
			_case_begin_5077463216:;
			{
				_2727_ok=true;
				_2737_exist=false;
			}
		}
		_match_end_5077462288:;
	}
	return std::make_tuple(_2727_ok,_2737_exist);
}



inline jule::Bool _228cbeab8_is_pass_file_annotation(jule::Str _4632_p) {
	_4632_p=_227711594_base(_4632_p);
	jule::I64 _489_n = _4632_p.len();
	_4632_p=_4632_p.slice(0LL,_489_n - _227711594_ext(_4632_p).len());
	jule::Str _5413_a1 = jule::Str();
	jule::Str _5713_a2 = jule::Str();
	jule::Int _6013_i = _4632_p.rfind(jule::Str("_", 1));
	if (_6013_i == -1LL) {
		jule::Bool _6318_ok;
		jule::Bool _6326_exist;
		std::tie(_6318_ok,_6326_exist) = _228cbeab8_check_os(_4632_p);
		if (_6326_exist) {
			return _6318_ok;
		}
		std::tie(_6318_ok,_6326_exist) = _228cbeab8_check_arch(_4632_p);
		return (!(_6326_exist)) || _6318_ok;
	}
	if ((_6013_i + 1LL) >= _489_n) {
		return true;
	}
	_5413_a1=_4632_p.slice(_6013_i + 1LL);
	_4632_p=_4632_p.slice(0LL,_6013_i);
	_6013_i=static_cast<jule::Int>(_4632_p.rfind(jule::Str("_", 1)));
	if (_6013_i != -1LL) {
		_5713_a2=_4632_p.slice(_6013_i + 1LL);
	}
	if (_5713_a2 == jule::Str()) {
		jule::Bool _8418_ok;
		jule::Bool _8426_exist;
		std::tie(_8418_ok,_8426_exist) = _228cbeab8_check_os(_5413_a1);
		if (_8426_exist) {
			return _8418_ok;
		}
		std::tie(_8418_ok,_8426_exist) = _228cbeab8_check_arch(_5413_a1);
		return (!(_8426_exist)) || _8418_ok;
	}
	jule::Bool _9214_ok;
	jule::Bool _9222_exist;
	std::tie(_9214_ok,_9222_exist) = _228cbeab8_check_arch(_5413_a1);
	if (_9222_exist) {
		if ((!(_9214_ok))) {
			return false;
		}
		jule::Bool _9714_ok;
		jule::Bool _9718_exist;
		std::tie(_9714_ok,_9718_exist) = _228cbeab8_check_os(_5713_a2);
		return (!(_9718_exist)) || _9714_ok;
	}
	std::tie(_9214_ok,_9222_exist) = _228cbeab8_check_os(_5413_a1);
	return (!(_9222_exist)) || _9214_ok;
}



inline void _228cd1217_set_os_vars(void) {
	{
		auto &_match_expr{ _2275b25dd_OS };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_5077476576:;
			{
				_228cd1217_VARS.push(jule::Str("windows", 7));
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_5077494576:;
			{
				_228cd1217_VARS.push(jule::Str("linux", 5));
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_5077489936:;
			{
				_228cd1217_VARS.push(jule::Str("darwin", 6));
			}
		}
		_match_end_5077495024:;
	}
	if (_227785d55_is_unix(_2275b25dd_OS)) {
		_228cd1217_VARS.push(jule::Str("unix", 4));
	}
}



inline void _228cd1217_set_arch_vars(void) {
	{
		auto &_match_expr{ _2275b25dd_ARCH };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_5077495520:;
			{
				_228cd1217_VARS.push(jule::Str("i386", 4));
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_5077495616:;
			{
				_228cd1217_VARS.push(jule::Str("amd64", 5));
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_5077495712:;
			{
				_228cd1217_VARS.push(jule::Str("arm64", 5));
			}
		}
		_match_end_5077500576:;
	}
	if (_227785d55_is_64bit(_2275b25dd_ARCH)) {
		_228cd1217_VARS.push(jule::Str("x64", 3));
	}
	if (_227785d55_is_32bit(_2275b25dd_ARCH)) {
		_228cd1217_VARS.push(jule::Str("x32", 3));
	}
}



inline void _228cd1217_init_vars(void) {
	_228cd1217_set_os_vars();
	_228cd1217_set_arch_vars();
	if (_227532edc_PRODUCTION) {
		_228cd1217_VARS.push(jule::Str("production", 10));
	}
	if (_2275c8280_TEST) {
		_228cd1217_VARS.push(jule::Str("test", 4));
	}
	{
		auto &_match_expr{ _2275c8280_COMPILER };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_5077507184:;
			{
				_228cd1217_VARS.push(jule::Str("clang", 5));
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_5077509008:;
			{
				_228cd1217_VARS.push(jule::Str("gcc", 3));
			}
		}
		_match_end_5077507104:;
	}
	{
		auto &_match_expr{ _2275c8280_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_5077512560:;
			{
				_228cd1217_VARS.push(jule::Str("cpp14", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_5077507376:;
			{
				_228cd1217_VARS.push(jule::Str("cpp17", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5077507472:;
			{
				_228cd1217_VARS.push(jule::Str("cpp20", 5));
			}
		}
		_match_end_5077506880:;
	}
}



inline void _228ce6ea8_exit_err(jule::Str _2413_msg) {
	
	jule::outln(_2413_msg);
	_2277d2c70_exit(1LL);
}



inline jule::Slice<jule::U8> _228ce6ea8_read_buff(jule::Str _3214_path) {
	return ({
		auto except = _2276a6c54_File::_static_method_read(_3214_path);
		(except.ok()) ? (except.result) : ({{
			_228ce6ea8_exit_err(jule::Str("error: file cannot read", 23));
			return nullptr;
			return nullptr;
		} jule::Slice<jule::U8>();});
	});
}



inline _2276bcb9e_Log _228ce6ea8_flat_compiler_err(jule::Str _4122_text) {
	return _2276bcb9e_Log(1LLU,jule::Int(),jule::Int(),jule::Str(),_4122_text,jule::Str(),jule::Str());
}



inline std::tuple<jule::Bool,jule::Slice<_2276bcb9e_Log>> _228ce6ea8_is_pass_build_directives(jule::Ptr<_228d3160d_Ast>& _4934_file) {
	{
		auto &expr = (*(_4934_file))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_5077521568:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> _228ce6ea8_td = *it;
			{
				if ((*(_228ce6ea8_td))._field_tag._field_kind != jule::Str("build", 5)) {
					goto _iter_next_5077521568;
				}
				_228cc0bc9_DirectiveEval _5517_de = _228cc0bc9_DirectiveEval(jule::Slice<_2276bcb9e_Log>(),_228ce6ea8_td);
				jule::Bool _5813_result = _5517_de._method_eval();
				if (_5517_de._field_logs.len() > 0LL) {
					return std::make_tuple(false,_5517_de._field_logs);
				}
				if ((!(_5813_result))) {
					return std::make_tuple(false,nullptr);
				}
			}
			_iter_next_5077521568:;
			++it;
			goto _iter_begin_5077521568;
		}
		_iter_end_5077521568:;
	}
	return std::make_tuple(true,nullptr);
}



inline void _228c91a35_push_passes(jule::Ptr<_1e53308ee_Package>& _8621_p,jule::Slice<jule::Str>& _8645_passes) {
	{
		auto &expr = (*(_8621_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5077666704:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _228c91a35_f = *it;
			{
				_julec_label_push:;
				{
					auto &expr = (*(_228c91a35_f))._field_passes;
					auto it = expr.begin();
					_iter_begin_5077668928:;
					if (it != expr.end()) {
						_228d6ecab_Pass &_228c91a35_pass = *it;
						{
							if (_228c91a35_pass._field_text == jule::Str()) {
								goto _iter_next_5077668928;
							}
							{
								auto &expr = _8645_passes;
								auto it = expr.begin();
								_iter_begin_5077671280:;
								if (it != expr.end()) {
									jule::Str &_228c91a35_cpass = *it;
									{
										if (_228c91a35_cpass == _228c91a35_pass._field_text) {
											goto _iter_next_5077668928;
										}
									}
									_iter_next_5077671280:;
									++it;
									goto _iter_begin_5077671280;
								}
								_iter_end_5077671280:;
							}
							_8645_passes.push(_228c91a35_pass._field_text);
						}
						_iter_next_5077668928:;
						++it;
						goto _iter_begin_5077668928;
					}
					_iter_end_5077668928:;
				}
			}
			_iter_next_5077666704:;
			++it;
			goto _iter_begin_5077666704;
		}
		_iter_end_5077666704:;
	}
}



inline jule::Slice<jule::Str> _228c91a35_get_all_unique_passes(jule::Ptr<_1e53308ee_Package>& _10331_pkg,jule::Slice<jule::Ptr<_1e53308ee_ImportInfo>> _10356_uses) {
	jule::Slice<jule::Str> _10413_passes = nullptr;
	_228c91a35_push_passes(_10331_pkg,_10413_passes);
	{
		auto &expr = _10356_uses;
		auto it = expr.begin();
		_iter_begin_5077676224:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _228c91a35_u = *it;
			{
				if ((!((*(_228c91a35_u))._field_cpp_linked))) {
					_228c91a35_push_passes((*(_228c91a35_u))._field_package,_10413_passes);
				}
			}
			_iter_next_5077676224:;
			++it;
			goto _iter_begin_5077676224;
		}
		_iter_end_5077676224:;
	}
	return _10413_passes;
}



inline jule::Bool _22777e238_is_exist(jule::Slice<jule::Any> _3013_arr,jule::Any _3025_t) {
	{
		auto &expr = _3013_arr;
		auto it = expr.begin();
		_iter_begin_5077776832:;
		if (it != expr.end()) {
			jule::Any &_22777e238_ref = *it;
			{
				if (_3025_t == _22777e238_ref) {
					return true;
				}
			}
			_iter_next_5077776832:;
			++it;
			goto _iter_begin_5077776832;
		}
		_iter_end_5077776832:;
	}
	return false;
}



inline jule::Bool _22777e238_is_dead(jule::Any _4016_ref) {
	jule::Bool _4028_dead = jule::Bool();
	if (_22777e238_is_exist(_22777e238_deads,_4016_ref)) {
		_4028_dead = true;
		return _4028_dead;
	}
	{
		auto &_match_expr{ _4016_ref };
		
		if (_match_expr.type_is<jule::Ptr<_229b6ebcb_FnIns>>()) {
			_case_begin_5077784752:;
			{
				if ((*((*(_4016_ref.operator jule::Ptr<_229b6ebcb_FnIns>()))._field_decl))._method_is_init()) {
					goto _match_end_5077780832;
				}
				goto _case_begin_5077781376;
			}
		}
		else {
			_case_begin_5077781376:;
			{
				if ((_22777e238_current == _4016_ref) || (_22777e238_main_current == _4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
				if (_22777e238_is_exist(_22777e238_checking,_4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
			}
		}
		_match_end_5077780832:;
	}
	jule::Any _6113_old = _22777e238_current;
	_22777e238_current=_4016_ref;
	jule::I64 _639_len = _22777e238_checking.len();
	_22777e238_checking.push(_4016_ref);
	__JULE_DEFER({
		_22777e238_current=_6113_old;
		_22777e238_drop_ref(_22777e238_checking,_639_len);
	});
	{
		auto &_match_expr{ _4016_ref };
		
		if (_match_expr.type_is<jule::Ptr<_229b6ebcb_FnIns>>()) {
			_case_begin_5077790800:;
			{
				_4028_dead = _22777e238_is_fn_dead(_4016_ref.operator jule::Ptr<_229b6ebcb_FnIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5077790896:;
			{
				_4028_dead = _22777e238_is_var_dead(_4016_ref.operator jule::Ptr<_1e58b0654_Var>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228e0d025_StructIns>>()) {
			_case_begin_5077790512:;
			{
				_4028_dead = _22777e238_is_struct_dead(_4016_ref.operator jule::Ptr<_228e0d025_StructIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229b5076c_Trait>>()) {
			_case_begin_5077790608:;
			{
				_4028_dead = _22777e238_is_trait_dead(_4016_ref.operator jule::Ptr<_229b5076c_Trait>());
				return _4028_dead;
			}
		}
		else {
			_case_begin_5077786656:;
			{
				_4028_dead = false;
				return _4028_dead;
			}
		}
		_match_end_5077788592:;
	}
}



inline void _22777e238_drop_ref(jule::Slice<jule::Any>& _9218_refs,jule::Int _9231_pos) {
	_9218_refs=_9218_refs.slice(0LL,_9231_pos);
}



inline jule::Bool _22777e238_is_all_references_are_dead(jule::Ptr<_228d6ecab_ReferenceStack> _10035_references) {
	jule::Int _10113_i = 0LL;
	for (; _10113_i < (*(_10035_references))._method_len(); (_10113_i)++) {
		{
			jule::Any _10317_ref = (*(_10035_references))._method_at(_10113_i);
			if (_10317_ref == _22777e238_current) {
				goto _iter_next_5077799312;
			}
			if (_10317_ref == _22777e238_main_current) {
				goto _iter_next_5077799312;
			}
			if ((!(_22777e238_is_dead(_10317_ref)))) {
				return false;
			}
		}
	_iter_next_5077799312:;
	}
	_iter_end_5077799312:;
	return true;
}



inline jule::Bool _22777e238_is_fn_dead(jule::Ptr<_229b6ebcb_FnIns> _11719_f) {
	if ((*((*(_11719_f))._field_decl))._field_cpp_linked || (*(_11719_f))._field_anon) {
		return false;
	}
	if ((*((*(_11719_f))._field_decl))._method_is_entry_point() || (*((*(_11719_f))._field_decl))._method_is_init()) {
		return (!((*((*(_11719_f))._field_decl))._field_statically));
	}
	if ((*(_11719_f))._field_owner != nullptr) {
		if (_22777e238_is_exist(_22777e238_checking,jule::Any((*(_11719_f))._field_owner))) {
			return true;
		}
		return _22777e238_is_dead(jule::Any((*(_11719_f))._field_owner));
	}
	return _22777e238_is_all_references_are_dead((*(_11719_f))._field_references);
}



inline jule::Bool _22777e238_is_var_dead(jule::Ptr<_1e58b0654_Var> _14320_v) {
	if ((*(_14320_v))._field_constant) {
		return true;
	}
	if ((*(_14320_v))._field_cpp_linked) {
		return false;
	}
	return _22777e238_is_all_references_are_dead((*(_14320_v))._field_references);
}



inline jule::Bool _22777e238_is_struct_dead(jule::Ptr<_228e0d025_StructIns> _19323_s) {
	return false;
}



inline jule::Bool _22777e238_is_trait_dead(jule::Ptr<_229b5076c_Trait> _21022_t) {
	return false;
}



inline void _22777e238_eliminate_dead_functions(jule::Slice<jule::Ptr<_229b6ebcb_Fn>>& _22734_funcs) {
	jule::Int _22813_i = 0LL;
	while (_22813_i < _22734_funcs.len()) {
		{
			jule::Ptr<_229b6ebcb_Fn> _23017_f = _22734_funcs[_22813_i];
			jule::Int _23117_j = 0LL;
			while (_23117_j < (*(_23017_f))._field_instances.len()) {
				{
					jule::Ptr<_229b6ebcb_FnIns> _23321_ins = (*(_23017_f))._field_instances[_23117_j];
					_22777e238_main_current=jule::Any(_23321_ins);
					if (_22777e238_is_fn_dead(_23321_ins)) {
						_22777e238_deads.push(jule::Any(_23321_ins));
						(*(_23017_f))._field_instances=jule::append((*(_23017_f))._field_instances.slice(0LL,_23117_j),(*(_23017_f))._field_instances.slice(_23117_j + 1LL));
					} else {
						(_23117_j)++;
					}
				}
			_iter_next_5077850240:;
			}
			_iter_end_5077850240:;
			if ((*(_23017_f))._field_instances.len() == 0LL) {
				_22734_funcs=jule::append(_22734_funcs.slice(0LL,_22813_i),_22734_funcs.slice(_22813_i + 1LL));
				goto _iter_next_5077847984;
			}
			(_22813_i)++;
		}
	_iter_next_5077847984:;
	}
	_iter_end_5077847984:;
}



inline void _22777e238_eliminate_dead_globals(jule::Ptr<_1e53308ee_Package>& _25232_pkg) {
	{
		auto &expr = (*(_25232_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5077851248:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _22777e238_f = *it;
			{
				jule::Int _25417_i = 0LL;
				while (_25417_i < (*(_22777e238_f))._field_vars.len()) {
					{
						jule::Ptr<_1e58b0654_Var> _25621_v = (*(_22777e238_f))._field_vars[_25417_i];
						_22777e238_main_current=jule::Any(_25621_v);
						if (_22777e238_is_var_dead(_25621_v)) {
							_22777e238_deads.push(jule::Any(_25621_v));
							(*(_22777e238_f))._field_vars=jule::append((*(_22777e238_f))._field_vars.slice(0LL,_25417_i),(*(_22777e238_f))._field_vars.slice(_25417_i + 1LL));
						} else {
							(_25417_i)++;
						}
					}
				_iter_next_5077861296:;
				}
				_iter_end_5077861296:;
			}
			_iter_next_5077851248:;
			++it;
			goto _iter_begin_5077851248;
		}
		_iter_end_5077851248:;
	}
}



inline void _22777e238_eliminate_dead_functions_package(jule::Ptr<_1e53308ee_Package>& _26842_pkg) {
	{
		auto &expr = (*(_26842_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5077869968:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _22777e238_f = *it;
			{
				_22777e238_eliminate_dead_functions((*(_22777e238_f))._field_funcs);
			}
			_iter_next_5077869968:;
			++it;
			goto _iter_begin_5077869968;
		}
		_iter_end_5077869968:;
	}
}



inline void _22777e238_catch_alive_init(jule::Ptr<_1e53308ee_Package>& _31626_pkg) {
	
	
	jule::Ptr<_229b6ebcb_Fn> _31913_f = (*(_31626_pkg))._method_find_fn(jule::Str("init", 4),false);
	if (_31913_f == nullptr) {
		return;
	}
	jule::I64 _3249_n = _22777e238_deads.len();
	__JULE_DEFER({
		_22777e238_deads=_22777e238_deads.slice(0LL,_3249_n);
		_22777e238_checking=nullptr;
		_22777e238_current=jule::Any(nullptr);
	});
	jule::Ptr<_229b6ebcb_FnIns> _33213_ins = (*(_31913_f))._field_instances[0LL];
	jule::Int _33313_i = 0LL;
	for (; _33313_i < (*((*(_33213_ins))._field_refers))._method_len(); (_33313_i)++) {
		{
			if ((!(_22777e238_is_dead((*((*(_33213_ins))._field_refers))._method_at(_33313_i))))) {
				(*(_31913_f))._field_statically=true;
				return;
			}
		}
	_iter_next_5077893584:;
	}
	_iter_end_5077893584:;
}



inline void _22777e238_eliminate_package(jule::Ptr<_1e53308ee_Package>& _34227_pkg) {
	_22777e238_deads=jule::Slice<jule::Any>::alloc(0LL,2000LL);
	_22777e238_catch_alive_init(_34227_pkg);
	_22777e238_eliminate_dead_globals(_34227_pkg);
	_22777e238_eliminate_dead_functions_package(_34227_pkg);
}



inline void _22777e238_eliminate_defines(jule::Ptr<_228c91a35_IR>& _35431_ir) {
	jule::I64 _35513_i = (*(_35431_ir))._field_used.len() - 1LL;
	for (; _35513_i >= 0LL; (_35513_i)--) {
		{
			jule::Ptr<_1e53308ee_ImportInfo> _35717_u = (*(_35431_ir))._field_used[_35513_i];
			if ((!((*(_35717_u))._field_cpp_linked))) {
				_22777e238_eliminate_package((*(_35717_u))._field_package);
			}
		}
	_iter_next_5077909248:;
	}
	_iter_end_5077909248:;
	_22777e238_eliminate_package((*(_35431_ir))._field_main);
	_22777e238_deads=nullptr;
	_22777e238_checking=nullptr;
	_22777e238_current=jule::Any(nullptr);
}



inline void _228798383_eliminate_dead_code_of_scope(jule::Ptr<_1e56c3885_Scope> _7937_s) {
	jule::Ptr<_228798383_ScopeDeadCode> _8013_sdc = jule::new_struct_ptr<_228798383_ScopeDeadCode>(new( std::nothrow ) _228798383_ScopeDeadCode(jule::Ptr<_228798383_ScopeDeadCode>(),_7937_s,(&((*(_7937_s))._field_stmts)),jule::Int()));
	{
		(*(_8013_sdc))._method_optimize_stmts();
	}
}



inline void _228798383_eliminate_scope_functions(jule::Slice<jule::Ptr<_229b6ebcb_Fn>>& _8835_funcs) {
	{
		auto &expr = _8835_funcs;
		auto it = expr.begin();
		_iter_begin_5077918880:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _228798383_func = *it;
			{
				{
					auto &expr = (*(_228798383_func))._field_instances;
					auto it = expr.begin();
					_iter_begin_5077922464:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_FnIns> _228798383_ins = *it;
						{
							_228798383_eliminate_dead_code_of_scope((*(_228798383_ins))._field_scope);
						}
						_iter_next_5077922464:;
						++it;
						goto _iter_begin_5077922464;
					}
					_iter_end_5077922464:;
				}
			}
			_iter_next_5077918880:;
			++it;
			goto _iter_begin_5077918880;
		}
		_iter_end_5077918880:;
	}
}



inline void _228798383_eliminate_functions_scope_package(jule::Ptr<_1e53308ee_Package>& _9643_pkg) {
	{
		auto &expr = (*(_9643_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5077923120:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _228798383_f = *it;
			{
				_228798383_eliminate_scope_functions((*(_228798383_f))._field_funcs);
			}
			_iter_next_5077923120:;
			++it;
			goto _iter_begin_5077923120;
		}
		_iter_end_5077923120:;
	}
}



inline void _228798383_eliminate_scope_package(jule::Ptr<_1e53308ee_Package>& _10233_pkg) {
	_228798383_eliminate_functions_scope_package(_10233_pkg);
}



inline void _228798383_eliminate_scopes(jule::Ptr<_228c91a35_IR>& _10730_ir) {
	jule::I64 _10813_i = (*(_10730_ir))._field_used.len() - 1LL;
	for (; _10813_i >= 0LL; (_10813_i)--) {
		{
			jule::Ptr<_1e53308ee_ImportInfo> _11017_u = (*(_10730_ir))._field_used[_10813_i];
			if ((!((*(_11017_u))._field_cpp_linked))) {
				_228798383_eliminate_scope_package((*(_11017_u))._field_package);
			}
		}
	_iter_next_5077928544:;
	}
	_iter_end_5077928544:;
	_228798383_eliminate_scope_package((*(_10730_ir))._field_main);
}



inline jule::U64 _1e8a7c6a8_unix(void) {
	return static_cast<jule::U64>(static_cast<jule::U64>(time(nullptr)));
}



inline jule::U64 _1e8a7c6a8_unix_year_to_seconds(jule::Uint _25725_y,jule::Bool& _25743_leap) {
	if ((_25725_y - 2LL) <= 136LL) {
		jule::Uint _25917_leaps = (_25725_y - 68LL) >> 2LL;
		_25743_leap=((_25725_y - 68LL) & 3LL) == 0LL;
		if (_25743_leap) {
			(_25917_leaps)--;
		}
		return static_cast<jule::Uint>((31536000LL * (_25725_y - 70LL)) + (86400LL * _25917_leaps));
	}
	jule::Uint _26713_leaps = 0LLU;
	jule::Uint _26813_centuries = 0LLU;
	jule::Uint _26913_cycles = jule::unsafe_div(_25725_y - 100LL,400LL);
	jule::Uint _27013_rem = jule::unsafe_mod(_25725_y - 100LL,400LL);
	if (_27013_rem < 0LL) {
		(_26913_cycles)--;
		_27013_rem+=400LL;
	}
	if (_27013_rem == 0LL) {
		_25743_leap=true;
		_26813_centuries=0LL;
		_26713_leaps=0LL;
	} else {
		if (_27013_rem >= 200LL) {
			if (_27013_rem >= 300LL) {
				_26813_centuries=3LL;
				_27013_rem-=300LL;
			} else {
				_26813_centuries=2LL;
				_27013_rem-=200LL;
			}
		} else {
			if (_27013_rem >= 100LL) {
				_26813_centuries=1LL;
				_27013_rem-=100LL;
			} else {
				_26813_centuries=0LL;
			}
		}
		if (_27013_rem == 0LL) {
			_25743_leap=false;
			_26713_leaps=0LL;
		} else {
			_26713_leaps=static_cast<jule::Uint>(jule::unsafe_div(_27013_rem,4LL));
			_27013_rem = jule::unsafe_mod(_27013_rem,4LL);
			_25743_leap=_27013_rem == 0LL;
		}
	}
	_26713_leaps+=static_cast<jule::Uint>((97LL * _26913_cycles) + (24LL * _26813_centuries));
	if (_25743_leap) {
		(_26713_leaps)++;
	}
	return static_cast<jule::Uint>(((((_25725_y - 100LL) * 31536000LL) + (_26713_leaps * 86400LL)) + 946684800LL) + 86400LL);
}



inline jule::U64 _1e8a7c6a8_unix_month_to_seconds(jule::Uint _31426_m,jule::Bool _31439_leap) {
	jule::U64 _31613_t = 0LLU;
	{
		auto &_match_expr{ _31426_m };
		
		if (_match_expr == 1LL) {
			_case_begin_5078011392:;
			{
				_31613_t=2678400LL;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_5078012400:;
			{
				_31613_t=5097600LL;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_5078012496:;
			{
				_31613_t=7776000LL;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_5078012592:;
			{
				_31613_t=10368000LL;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_5078012688:;
			{
				_31613_t=13046400LL;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_5078012784:;
			{
				_31613_t=15638400LL;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_5078012880:;
			{
				_31613_t=18316800LL;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_5078012992:;
			{
				_31613_t=20995200LL;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_5078013104:;
			{
				_31613_t=23587200LL;
			}
		}
		else if (_match_expr == 10LL) {
			_case_begin_5078013216:;
			{
				_31613_t=26265600LL;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_5078013328:;
			{
				_31613_t=28857600LL;
			}
		}
		_match_end_5078011984:;
	}
	if (_31439_leap && (_31426_m >= 2LL)) {
		_31613_t+=86400LL;
	}
	return _31613_t;
}



inline jule::Bool _229cbb9e8_iter_expr_is_copy_optimizable(jule::Ptr<_229d70d33_Data>& _3835_expr,jule::Ptr<_1e58b0654_Var>& _3849_v) {
	return ((!((*(_3835_expr))._field_lvalue)) && (!((*((*(_3835_expr))._field_kind))._method_mutable()))) || (!((*(_3849_v))._field_mutable));
}



inline jule::Str _229cbb9e8_gen_range_index_iter(jule::Ptr<_1e56c3885_RangeIter>& _4230_it) {
	jule::Str _439_begin = _1e88e3e7b_iter_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	jule::Str _449_next = _1e88e3e7b_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	jule::Str _4613_obj = jule::Str("{\n", 2);
	_1e8949c3a_add_indent();
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=jule::Str("auto ", 5);
	if (_227532edc_OPT_COPY && (*((*(_4230_it))._field_expr))._field_lvalue) {
		_4613_obj+=jule::Str("&", 1);
	}
	_4613_obj+=jule::Str("expr = ", 7);
	_4613_obj+=_229da5351_gen_expr_model((*((*(_4230_it))._field_expr))._field_model);
	_4613_obj+=jule::Str(";\n", 2);
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_1e8949c3a_add_indent();
	_4613_obj+=_1e8949c3a_indent();
	if ((*(_4230_it))._field_key_a != nullptr) {
		_4613_obj+=_1e8949c3a_gen_var_init_expr((*(_4230_it))._field_key_a,jule::Str("it - expr.begin()", 17));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_1e8949c3a_indent();
	}
	if ((*(_4230_it))._field_key_b != nullptr) {
		if (_227532edc_OPT_COPY) {
			(*((*(_4230_it))._field_key_b))._field_reference=_229cbb9e8_iter_expr_is_copy_optimizable((*(_4230_it))._field_expr,(*(_4230_it))._field_key_b);
		}
		_4613_obj+=_1e8949c3a_gen_var_init_expr((*(_4230_it))._field_key_b,jule::Str("*it", 3));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_1e8949c3a_indent();
	}
	_4613_obj+=_229cbb9e8_gen_scope((*(_4230_it))._field_scope);
	_4613_obj+=jule::Str("\n", 1);
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=_449_next;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=jule::Str("++it;\n", 6);
	_4613_obj+=_1e8949c3a_indent();
	if ((*(_4230_it))._field_key_a != nullptr) {
		_4613_obj+=_1e88e3e7b_var_out_ident((*(_4230_it))._field_key_a);
		_4613_obj+=jule::Str("++;\n", 4);
		_4613_obj+=_1e8949c3a_indent();
	}
	_4613_obj+=jule::Str("goto ", 5);
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(";\n", 2);
	_1e8949c3a_done_indent();
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=jule::Str("}\n", 2);
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=_1e88e3e7b_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	_4613_obj+=jule::Str(":;\n", 3);
	_1e8949c3a_done_indent();
	_4613_obj+=_1e8949c3a_indent();
	_4613_obj+=jule::Str("}", 1);
	return _4613_obj;
}



inline jule::Str _229cbb9e8_gen_range_hashmap_iter(jule::Ptr<_1e56c3885_RangeIter>& _11232_it) {
	jule::Str _1139_begin = _1e88e3e7b_iter_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	jule::Str _1149_next = _1e88e3e7b_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	jule::Str _11613_obj = jule::Str("{\n", 2);
	_1e8949c3a_add_indent();
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=jule::Str("auto ", 5);
	if (_227532edc_OPT_COPY && (*((*(_11232_it))._field_expr))._field_lvalue) {
		_11613_obj+=jule::Str("&", 1);
	}
	_11613_obj+=jule::Str("expr = ", 7);
	_11613_obj+=_229da5351_gen_expr_model((*((*(_11232_it))._field_expr))._field_model);
	_11613_obj+=jule::Str(";\n", 2);
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_1e8949c3a_add_indent();
	_11613_obj+=_1e8949c3a_indent();
	if ((*(_11232_it))._field_key_a != nullptr) {
		if (_227532edc_OPT_COPY) {
			(*((*(_11232_it))._field_key_a))._field_reference=_229cbb9e8_iter_expr_is_copy_optimizable((*(_11232_it))._field_expr,(*(_11232_it))._field_key_a);
		}
		_11613_obj+=_1e8949c3a_gen_var_init_expr((*(_11232_it))._field_key_a,jule::Str("it->first", 9));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_1e8949c3a_indent();
	}
	if ((*(_11232_it))._field_key_b != nullptr) {
		if (_227532edc_OPT_COPY) {
			(*((*(_11232_it))._field_key_b))._field_reference=_229cbb9e8_iter_expr_is_copy_optimizable((*(_11232_it))._field_expr,(*(_11232_it))._field_key_b);
		}
		_11613_obj+=_1e8949c3a_gen_var_init_expr((*(_11232_it))._field_key_b,jule::Str("it->second", 10));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_1e8949c3a_indent();
	}
	_11613_obj+=_229cbb9e8_gen_scope((*(_11232_it))._field_scope);
	_11613_obj+=jule::Str("\n", 1);
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=_1149_next;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=jule::Str("++it;\n", 6);
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=jule::Str("goto ", 5);
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(";\n", 2);
	_1e8949c3a_done_indent();
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=jule::Str("}\n", 2);
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=_1e88e3e7b_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	_11613_obj+=jule::Str(":;\n", 3);
	_1e8949c3a_done_indent();
	_11613_obj+=_1e8949c3a_indent();
	_11613_obj+=jule::Str("}", 1);
	return _11613_obj;
}



inline jule::Str _229cbb9e8_gen_if(jule::Ptr<_1e56c3885_If> _18015_i) {
	jule::Str _18113_obj = jule::Str();
	if ((*(_18015_i))._field_expr != nullptr) {
		_18113_obj+=jule::Str("if (", 4);
		_18113_obj+=_229da5351_gen_expr((*(_18015_i))._field_expr);
		_18113_obj+=jule::Str(") ", 2);
	}
	_18113_obj+=_229cbb9e8_gen_scope((*(_18015_i))._field_scope);
	return _18113_obj;
}



inline jule::Str _229cbb9e8_gen_conditional(jule::Ptr<_1e56c3885_Conditional> _19124_c) {
	jule::Str _19213_obj = jule::Str();
	{
		auto &expr = (*(_19124_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_5078461456:;
		if (it != expr.end()) {
			jule::Ptr<_1e56c3885_If> _229cbb9e8_elif = *it;
			{
				if (_229cbb9e8_elif == nullptr) {
					goto _iter_next_5078461456;
				}
				if (_19213_obj.len() != 0LL) {
					_19213_obj+=jule::Str(" else ", 6);
				}
				_19213_obj+=_229cbb9e8_gen_if(_229cbb9e8_elif);
			}
			_iter_next_5078461456:;
			++it;
			goto _iter_begin_5078461456;
		}
		_iter_end_5078461456:;
	}
	if ((*(_19124_c))._field_default != nullptr) {
		if (_19213_obj.len() != 0LL) {
			_19213_obj+=jule::Str(" else ", 6);
		}
		_19213_obj+=_229cbb9e8_gen_scope((*((*(_19124_c))._field_default))._field_scope);
	}
	return _19213_obj;
}



inline jule::Str _229cbb9e8_gen_inf_iter(jule::Ptr<_1e56c3885_InfIter> _21421_it) {
	jule::Str _21513_obj = jule::Str("for (;;) {\n", 11);
	_1e8949c3a_add_indent();
	_21513_obj+=_1e8949c3a_indent();
	_21513_obj+=_229cbb9e8_gen_scope((*(_21421_it))._field_scope);
	_1e8949c3a_done_indent();
	jule::Str _2229_indent = _1e8949c3a_indent();
	_21513_obj+=jule::Str("\n", 1);
	_21513_obj+=_2229_indent;
	_21513_obj+=_1e88e3e7b_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_21421_it)));
	_21513_obj+=jule::Str(":;\n", 3);
	_21513_obj+=_2229_indent;
	_21513_obj+=jule::Str("}\n", 2);
	_21513_obj+=_2229_indent;
	_21513_obj+=_1e88e3e7b_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_21421_it)));
	_21513_obj+=jule::Str(":;", 2);
	return _21513_obj;
}



inline jule::Str _229cbb9e8_gen_while_iter(jule::Ptr<_1e56c3885_WhileIter> _23723_it) {
	jule::Str _23813_obj = jule::Str();
	if (((*(_23723_it))._field_expr != nullptr) && ((*(_23723_it))._field_next == nullptr)) {
		_23813_obj+=jule::Str("while (", 7);
		_23813_obj+=_229da5351_gen_expr((*(_23723_it))._field_expr);
		_23813_obj+=jule::Str(") {\n", 4);
	} else {
		_23813_obj+=jule::Str("for (; ", 7);
		if ((*(_23723_it))._field_expr != nullptr) {
			_23813_obj+=_229da5351_gen_expr((*(_23723_it))._field_expr);
		}
		_23813_obj+=jule::Str("; ", 2);
		if ((*(_23723_it))._field_next != nullptr) {
			jule::Str _25017_st = _229cbb9e8_gen_st((*(_23723_it))._field_next);
			_23813_obj+=_25017_st.slice(0LL,_25017_st.len() - 1LL);
		}
		_23813_obj+=jule::Str(") {\n", 4);
	}
	_1e8949c3a_add_indent();
	_23813_obj+=_1e8949c3a_indent();
	_23813_obj+=_229cbb9e8_gen_scope((*(_23723_it))._field_scope);
	_23813_obj+=jule::Str("\n", 1);
	_1e8949c3a_done_indent();
	_23813_obj+=_1e8949c3a_indent();
	_23813_obj+=_1e88e3e7b_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_23723_it)));
	_23813_obj+=jule::Str(":;\n", 3);
	_23813_obj+=_1e8949c3a_indent();
	_23813_obj+=jule::Str("}\n", 2);
	_23813_obj+=_1e8949c3a_indent();
	_23813_obj+=_1e88e3e7b_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_23723_it)));
	_23813_obj+=jule::Str(":;", 2);
	return _23813_obj;
}



inline jule::Str _229cbb9e8_gen_range_iter(jule::Ptr<_1e56c3885_RangeIter> _27323_it) {
	{
		
		if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_slc() != nullptr) {
			_case_begin_5078494720:;
			{
				return _229cbb9e8_gen_range_index_iter(_27323_it);
			}
		}
		else if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_arr() != nullptr) {
			_case_begin_5078494272:;
			{
				return _229cbb9e8_gen_range_index_iter(_27323_it);
			}
		}
		else if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_map() != nullptr) {
			_case_begin_5078495088:;
			{
				return _229cbb9e8_gen_range_hashmap_iter(_27323_it);
			}
		}
		else {
			_case_begin_5078488208:;
			{
				return _229cbb9e8_gen_range_index_iter(_27323_it);
			}
		}
		_match_end_5078488080:;
	}
}



inline jule::Str _229cbb9e8_gen_cont(jule::Ptr<_1e56c3885_ContSt> _28213_c) {
	jule::Str _28313_obj = jule::Str("goto ", 5);
	_28313_obj+=_1e88e3e7b_iter_next_label_ident((*(_28213_c))._field_it);
	_28313_obj+=jule::Str(";", 1);
	return _28313_obj;
}



inline jule::Str _229cbb9e8_gen_label(jule::Ptr<_1e56c3885_Label> _28914_l) {
	return _1e88e3e7b_label_ident((*(_28914_l))._field_ident) + jule::Str(":;", 2);
}



inline jule::Str _229cbb9e8_gen_goto(jule::Ptr<_1e56c3885_GotoSt> _29313_gt) {
	jule::Str _29413_obj = jule::Str("goto ", 5);
	_29413_obj+=_1e88e3e7b_label_ident((*(_29313_gt))._field_ident);
	_29413_obj+=jule::Str(";", 1);
	return _29413_obj;
}



inline jule::Str _229cbb9e8_gen_postfix(jule::Ptr<_1e56c3885_Postfix> _30020_p) {
	jule::Str _30113_obj = jule::Str("(", 1);
	_30113_obj+=_229da5351_gen_expr((*(_30020_p))._field_expr);
	_30113_obj+=jule::Str(")", 1);
	_30113_obj+=(*(_30020_p))._field_op;
	_30113_obj+=jule::Str(";", 1);
	return _30113_obj;
}



inline jule::Str _229cbb9e8_gen_div_by_zero_assign(jule::Ptr<_1e56c3885_Assign> _30931_a) {
	jule::Str _31013_obj = _229da5351_gen_expr((*(_30931_a))._field_l);
	_31013_obj+=jule::Str(" = ", 3);
	_31013_obj+=_229da5351_gen_div_by_zero_binop_expr_model((*(_30931_a))._field_op,(*(_30931_a))._field_l,(*(_30931_a))._field_r);
	_31013_obj+=jule::Str(";", 1);
	return _31013_obj;
}



inline jule::Str _229cbb9e8_gen_assign(jule::Ptr<_1e56c3885_Assign> _31719_a) {
	{
		auto &_match_expr{ (*(_31719_a))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/=", 2) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_5078516896:;
			{
				return _229cbb9e8_gen_div_by_zero_assign(_31719_a);
			}
		}
		_match_end_5078516752:;
	}
	jule::Str _32313_obj = _229da5351_gen_expr((*(_31719_a))._field_l);
	_32313_obj+=(*(_31719_a))._field_op._field_kind;
	if (_227532edc_OPT_APPEND) {
		{
			auto &_match_expr{ (*(_31719_a))._field_r };
			
			if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>>()) {
				_case_begin_5078519200:;
				{
					jule::Ptr<_1e5870218_BuiltinAppendCallExprModel> _32821_model = (*(_31719_a))._field_r.operator jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>();
					jule::Str _32918_expr;
					jule::Bool _32924_optimized;
					std::tie(_32918_expr,_32924_optimized) = _229da5351_gen_builtin_append_call_expr_model_assign((*(_31719_a))._field_l,_32821_model);
					if (_32924_optimized) {
						return _32918_expr;
					}
					_32313_obj+=_32918_expr;
				}
			}
			else {
				_case_begin_5078521680:;
				{
					_32313_obj+=_229da5351_gen_expr((*(_31719_a))._field_r);
				}
			}
			_match_end_5078521552:;
		}
	} else {
		_32313_obj+=_229da5351_gen_expr((*(_31719_a))._field_r);
	}
	_32313_obj+=jule::Str(";", 1);
	return _32313_obj;
}



inline jule::Str _229cbb9e8_gen_multi_assign(jule::Ptr<_1e56c3885_MultiAssign> _34525_a) {
	jule::Str _34613_obj = jule::Str("std::tie(", 9);
	{
		auto &expr = (*(_34525_a))._field_l;
		auto it = expr.begin();
		_iter_begin_5078530064:;
		if (it != expr.end()) {
			jule::Any _229cbb9e8_l = *it;
			{
				if (_229cbb9e8_l == nullptr) {
					_34613_obj+=jule::Str("std::ignore", 11);
					_34613_obj+=jule::Str(",", 1);
				} else {
					_34613_obj+=_229da5351_gen_expr(_229cbb9e8_l);
					_34613_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_5078530064:;
			++it;
			goto _iter_begin_5078530064;
		}
		_iter_end_5078530064:;
	}
	_34613_obj=_34613_obj.slice(0LL,_34613_obj.len() - 1LL);
	_34613_obj+=jule::Str(") = ", 4);
	_34613_obj+=_229da5351_gen_expr((*(_34525_a))._field_r);
	_34613_obj+=jule::Str(";", 1);
	return _34613_obj;
}



inline jule::Str _229cbb9e8_get_case_match_expr(jule::Ptr<_1e56c3885_Match>& _36729_m) {
	if ((!((*((*(_36729_m))._field_expr))._method_is_const()))) {
		return jule::Str("_match_expr", 11);
	}
	if ((!((*((*((*(_36729_m))._field_expr))._field_constant))._method_is_bool())) || (!((*((*((*(_36729_m))._field_expr))._field_constant))._method_read_bool()))) {
		return _229da5351_gen_expr_model((*((*(_36729_m))._field_expr))._field_model);
	}
	return jule::Str();
}



inline jule::Str _229cbb9e8_gen_case(jule::Ptr<_1e56c3885_Match> _37717_m,jule::Ptr<_1e56c3885_Case> _37732_c) {
	jule::Str _37813_obj = jule::Str();
	if (((*(_37732_c))._field_exprs.len() != 0LL) && (!((*(_37717_m))._method_is_generic_type_match()))) {
		if (((*(_37717_m))._field_cases.len() > 0LL) && ((*(_37717_m))._field_cases[0LL] == _37732_c)) {
			_37813_obj+=jule::Str("if (", 4);
		} else {
			_37813_obj+=jule::Str("else if (", 9);
		}
		{
			auto &expr = (*(_37732_c))._field_exprs;
			auto it = expr.begin();
			_iter_begin_5078547312:;
			if (it != expr.end()) {
				jule::Int _229cbb9e8_i = it - expr.begin();
				jule::Ptr<_229d70d33_Data> _229cbb9e8_expr = *it;
				{
					{
						
						if ((!((*(_37717_m))._field_type_match))) {
							_case_begin_5078550976:;
							{
								jule::Str _38921_case_expr = _229cbb9e8_get_case_match_expr(_37717_m);
								if ((*((*(_37717_m))._field_expr))._method_good_operand(_229cbb9e8_expr)) {
									if (_38921_case_expr.len() != 0LL) {
										_37813_obj+=_38921_case_expr;
										_37813_obj+=jule::Str(" == ", 4);
									}
									_37813_obj+=_229da5351_gen_expr((*(_229cbb9e8_expr))._field_model);
								} else {
									_37813_obj+=_229da5351_gen_expr((*(_229cbb9e8_expr))._field_model);
									if (_38921_case_expr.len() != 0LL) {
										_37813_obj+=jule::Str(" == ", 4);
										_37813_obj+=_38921_case_expr;
									}
								}
							}
						}
						else {
							_case_begin_5078550176:;
							{
								_37813_obj+=jule::Str("_match_expr", 11);
								_37813_obj+=jule::Str(".type_is<", 9);
								_37813_obj+=_229da5351_gen_expr((*(_229cbb9e8_expr))._field_model);
								_37813_obj+=jule::Str(">()", 3);
							}
						}
						_match_end_5078550000:;
					}
					if ((_229cbb9e8_i + 1LL) < (*(_37732_c))._field_exprs.len()) {
						_37813_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_5078547312:;
				++it;
				_229cbb9e8_i++;
				goto _iter_begin_5078547312;
			}
			_iter_end_5078547312:;
		}
		_37813_obj+=jule::Str(") ", 2);
	} else if (((*(_37717_m))._field_default == _37732_c) && ((*(_37717_m))._field_cases.len() != 0LL)) {
		_37813_obj+=_1e8949c3a_indent();
		_37813_obj+=jule::Str("else ", 5);
	}
	_1e8949c3a_add_indent();
	_37813_obj+=jule::Str("{\n", 2);
	_37813_obj+=_1e8949c3a_indent();
	_37813_obj+=_1e88e3e7b_case_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_37732_c)));
	_37813_obj+=jule::Str(":;\n", 3);
	if ((*((*(_37732_c))._field_scope))._field_stmts.len() > 0LL) {
		_37813_obj+=_1e8949c3a_indent();
		_37813_obj+=_229cbb9e8_gen_scope((*(_37732_c))._field_scope);
		_37813_obj+=jule::Str("\n", 1);
	}
	_1e8949c3a_done_indent();
	_37813_obj+=_1e8949c3a_indent();
	_37813_obj+=jule::Str("}", 1);
	return _37813_obj;
}



inline jule::Str _229cbb9e8_gen_match(jule::Ptr<_1e56c3885_Match> _44218_m) {
	if (((*(_44218_m))._field_cases.len() == 0LL) && ((*(_44218_m))._field_default == nullptr)) {
		return jule::Str();
	}
	jule::Bool _4479_generic_type_match = (*(_44218_m))._method_is_generic_type_match();
	if (_4479_generic_type_match && (((*(_44218_m))._field_default == nullptr) || ((*((*((*(_44218_m))._field_default))._field_scope))._field_stmts.len() == 0LL))) {
		return jule::Str();
	}
	jule::Str _45213_obj = jule::Str("{\n", 2);
	_1e8949c3a_add_indent();
	_45213_obj+=_1e8949c3a_indent();
	if ((!(_4479_generic_type_match)) && (!((*((*(_44218_m))._field_expr))._method_is_const()))) {
		if ((*((*(_44218_m))._field_expr))._field_lvalue && _227532edc_OPT_COPY) {
			_45213_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_45213_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_45213_obj+=_229da5351_gen_expr((*((*(_44218_m))._field_expr))._field_model);
		_45213_obj+=jule::Str(" };\n", 4);
		_45213_obj+=_1e8949c3a_indent();
	}
	if ((*(_44218_m))._field_cases.len() > 0LL) {
		{
			auto &expr = (*(_44218_m))._field_cases;
			auto it = expr.begin();
			_iter_begin_5078584416:;
			if (it != expr.end()) {
				jule::Ptr<_1e56c3885_Case> _229cbb9e8_c = *it;
				{
					if (_229cbb9e8_c == nullptr) {
						goto _iter_next_5078584416;
					}
					_45213_obj+=jule::Str("\n", 1);
					_45213_obj+=_1e8949c3a_indent();
					_45213_obj+=_229cbb9e8_gen_case(_44218_m,_229cbb9e8_c);
				}
				_iter_next_5078584416:;
				++it;
				goto _iter_begin_5078584416;
			}
			_iter_end_5078584416:;
		}
	}
	if ((*(_44218_m))._field_default != nullptr) {
		_45213_obj+=jule::Str("\n", 1);
		_45213_obj+=_229cbb9e8_gen_case(_44218_m,(*(_44218_m))._field_default);
	}
	_45213_obj+=jule::Str("\n", 1);
	_45213_obj+=_1e8949c3a_indent();
	_45213_obj+=_1e88e3e7b_match_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_44218_m)));
	_45213_obj+=jule::Str(":;", 2);
	_45213_obj+=jule::Str("\n", 1);
	_1e8949c3a_done_indent();
	_45213_obj+=_1e8949c3a_indent();
	_45213_obj+=jule::Str("}", 1);
	return _45213_obj;
}



inline jule::Str _229cbb9e8_gen_fall_st(jule::Ptr<_1e56c3885_FallSt> _50016_f) {
	jule::Str _50113_obj = jule::Str("goto ", 5);
	_50113_obj+=_1e88e3e7b_case_begin_label_ident((*(_50016_f))._field_dest_case);
	_50113_obj+=jule::Str(";", 1);
	return _50113_obj;
}



inline jule::Str _229cbb9e8_gen_break_st(jule::Ptr<_1e56c3885_BreakSt> _50717_b) {
	jule::Str _50813_obj = jule::Str("goto ", 5);
	if ((*(_50717_b))._field_it != 0LL) {
		_50813_obj+=_1e88e3e7b_iter_end_label_ident((*(_50717_b))._field_it);
	} else {
		_50813_obj+=_1e88e3e7b_match_end_label_ident((*(_50717_b))._field_mtch);
	}
	_50813_obj+=jule::Str(";", 1);
	return _50813_obj;
}



inline jule::Str _229cbb9e8_gen_ret_vars(jule::Ptr<_1e56c3885_RetSt> _51921_r) {
	jule::Str _52013_obj = jule::Str();
	{
		auto &expr = (*(_51921_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_5078601360:;
		if (it != expr.end()) {
			jule::Ptr<_1e58b0654_Var> _229cbb9e8_v = *it;
			{
				if (_228d7aadb_is_ignore_ident((*(_229cbb9e8_v))._field_ident)) {
					_52013_obj+=_229da5351_get_init_expr((*((*(_229cbb9e8_v))._field_kind))._field_kind);
				} else {
					_52013_obj+=_1e88e3e7b_var_out_ident(_229cbb9e8_v);
				}
				_52013_obj+=jule::Str(",", 1);
			}
			_iter_next_5078601360:;
			++it;
			goto _iter_begin_5078601360;
		}
		_iter_end_5078601360:;
	}
	_52013_obj=_52013_obj.slice(0LL,_52013_obj.len() - 1LL);
	jule::Str _53213_oobj = jule::Str("return ", 7);
	if ((*((*((*(_51921_r))._field_func))._field_decl))._field_exceptional) {
		_53213_oobj+=jule::Str("jule::Exceptional<", 18);
		_53213_oobj+=_1e891c504_gen_type_kind((*((*(_51921_r))._field_func))._field_result);
		_53213_oobj+=jule::Str(">(jule::Any(), ", 15);
	}
	if ((*(_51921_r))._field_vars.len() > 1LL) {
		_53213_oobj+=jule::Str("std::make_tuple(", 16);
		_53213_oobj+=_52013_obj;
		_53213_oobj+=jule::Str(")", 1);
	} else {
		_53213_oobj+=_52013_obj;
	}
	if ((*((*((*(_51921_r))._field_func))._field_decl))._field_exceptional) {
		_53213_oobj+=jule::Str(")", 1);
	}
	_53213_oobj+=jule::Str(";", 1);
	return _53213_oobj;
}



inline jule::Str _229cbb9e8_gen_ret_expr_tuple(jule::Ptr<_1e56c3885_RetSt> _55627_r) {
	jule::Slice<jule::Ptr<_229d70d33_Data>> _55713_datas = (*((*(_55627_r))._field_expr.operator jule::Ptr<_1e5870218_TupleExprModel>()))._field_datas;
	jule::Str _55813_obj = jule::Str();
	{
		auto &expr = (*(_55627_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_5078617136:;
		if (it != expr.end()) {
			jule::Int _229cbb9e8_i = it - expr.begin();
			jule::Ptr<_1e58b0654_Var> _229cbb9e8_v = *it;
			{
				if (_228d7aadb_is_ignore_ident((*(_229cbb9e8_v))._field_ident)) {
					goto _iter_next_5078617136;
				}
				jule::Any _56417_model = (*(_55713_datas[_229cbb9e8_i]))._field_model;
				if (_56417_model == _229cbb9e8_v) {
					goto _iter_next_5078617136;
				}
				jule::Str _56913_ident = _1e88e3e7b_var_out_ident(_229cbb9e8_v);
				_55813_obj+=_56913_ident;
				_55813_obj+=jule::Str(" = ", 3);
				_55813_obj+=_229da5351_gen_expr(_56417_model);
				_55813_obj+=jule::Str(";\n", 2);
				_55813_obj+=_1e8949c3a_indent();
			}
			_iter_next_5078617136:;
			++it;
			_229cbb9e8_i++;
			goto _iter_begin_5078617136;
		}
		_iter_end_5078617136:;
	}
	jule::Str _57713_oobj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _55713_datas;
		auto it = expr.begin();
		_iter_begin_5078620304:;
		if (it != expr.end()) {
			jule::Int _229cbb9e8_i = it - expr.begin();
			jule::Ptr<_229d70d33_Data> _229cbb9e8_d = *it;
			{
				jule::Ptr<_1e58b0654_Var> _57917_v = (*(_55627_r))._field_vars[_229cbb9e8_i];
				if (_228d7aadb_is_ignore_ident((*(_57917_v))._field_ident)) {
					_57713_oobj+=_229da5351_gen_expr((*(_229cbb9e8_d))._field_model);
				} else {
					_57713_oobj+=_1e88e3e7b_var_out_ident(_57917_v);
				}
				_57713_oobj+=jule::Str(",", 1);
			}
			_iter_next_5078620304:;
			++it;
			_229cbb9e8_i++;
			goto _iter_begin_5078620304;
		}
		_iter_end_5078620304:;
	}
	_57713_oobj=_57713_oobj.slice(0LL,_57713_oobj.len() - 1LL);
	_57713_oobj+=jule::Str(")", 1);
	if ((*((*((*(_55627_r))._field_func))._field_decl))._field_exceptional) {
		_55813_obj+=jule::Str("return jule::Exceptional<", 25);
		_55813_obj+=_1e891c504_gen_type_kind((*((*(_55627_r))._field_func))._field_result);
		_55813_obj+=jule::Str(">(jule::Any(),", 14);
		_55813_obj+=_57713_oobj;
		_55813_obj+=jule::Str(")", 1);
	} else {
		_55813_obj+=jule::Str("return ", 7);
		_55813_obj+=_57713_oobj;
	}
	_55813_obj+=jule::Str(";", 1);
	return _55813_obj;
}



inline jule::Str _229cbb9e8_gen_ret_expr(jule::Ptr<_1e56c3885_RetSt> _60621_r) {
	if ((*(_60621_r))._field_vars.len() > 1LL) {
		return _229cbb9e8_gen_ret_expr_tuple(_60621_r);
	}
	if ((*(_60621_r))._field_vars.len() > 0LL) {
		jule::Ptr<_1e58b0654_Var> _61317_v = (*(_60621_r))._field_vars[0LL];
		if ((!(_228d7aadb_is_ignore_ident((*(_61317_v))._field_ident))) && ((*(_60621_r))._field_expr != _61317_v)) {
			jule::Str _61517_ident = _1e88e3e7b_var_out_ident(_61317_v);
			jule::Str _61621_obj = _61517_ident;
			_61621_obj+=jule::Str(" = ", 3);
			_61621_obj+=_229da5351_gen_expr((*(_60621_r))._field_expr);
			_61621_obj+=jule::Str(";\n", 2);
			_61621_obj+=_1e8949c3a_indent();
			if ((*((*((*(_60621_r))._field_func))._field_decl))._field_exceptional) {
				_61621_obj+=jule::Str("return jule::Exceptional<", 25);
				_61621_obj+=_1e891c504_gen_type_kind((*((*(_60621_r))._field_func))._field_result);
				_61621_obj+=jule::Str(">(jule::Any(),", 14);
				_61621_obj+=_61517_ident;
				_61621_obj+=jule::Str(")", 1);
			} else {
				_61621_obj+=jule::Str("return ", 7);
				_61621_obj+=_61517_ident;
			}
			_61621_obj+=jule::Str(";", 1);
			return _61621_obj;
		}
	}
	if ((*((*((*(_60621_r))._field_func))._field_decl))._field_exceptional) {
		jule::Str _63717_obj = jule::Str("return jule::Exceptional<", 25);
		_63717_obj+=_1e891c504_gen_type_kind((*((*(_60621_r))._field_func))._field_result);
		_63717_obj+=jule::Str(">(jule::Any(),", 14);
		_63717_obj+=_229da5351_gen_expr((*(_60621_r))._field_expr);
		_63717_obj+=jule::Str(")", 1);
		_63717_obj+=jule::Str(";", 1);
		return _63717_obj;
	}
	jule::Str _64613_obj = jule::Str("return ", 7);
	_64613_obj+=_229da5351_gen_expr((*(_60621_r))._field_expr);
	_64613_obj+=jule::Str(";", 1);
	return _64613_obj;
}



inline jule::Str _229cbb9e8_gen_ret_st(jule::Ptr<_1e56c3885_RetSt> _65219_r) {
	if (((*(_65219_r))._field_expr == nullptr) && ((*(_65219_r))._field_vars.len() == 0LL)) {
		if ((*((*((*(_65219_r))._field_func))._field_decl))._field_exceptional) {
			return jule::Str("return jule::VoidExceptional();", 31);
		}
		return jule::Str("return;", 7);
	}
	if ((*(_65219_r))._field_expr == nullptr) {
		return _229cbb9e8_gen_ret_vars(_65219_r);
	}
	return _229cbb9e8_gen_ret_expr(_65219_r);
}



inline jule::Str _229cbb9e8_gen_data_expr(jule::Ptr<_229d70d33_Data> _68522_d) {
	return _229da5351_gen_expr((*(_68522_d))._field_model) + jule::Str(";", 1);
}



inline jule::Str _229cbb9e8_gen_scope_var(jule::Ptr<_1e58b0654_Var> _68922_v) {
	if ((*(_68922_v))._field_constant) {
		return jule::Str();
	}
	return _1e8949c3a_gen_var(_68922_v);
}



inline jule::Str _229cbb9e8_gen_st(jule::Any _69715_st) {
	if (_69715_st == nullptr) {
		return jule::Str();
	}
	{
		auto &_match_expr{ _69715_st };
		
		if (_match_expr.type_is<jule::Ptr<_1e56c3885_Scope>>()) {
			_case_begin_5078674240:;
			{
				return _229cbb9e8_gen_scope(_69715_st.operator jule::Ptr<_1e56c3885_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5078676176:;
			{
				return _229cbb9e8_gen_scope_var(_69715_st.operator jule::Ptr<_1e58b0654_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229d70d33_Data>>()) {
			_case_begin_5078676272:;
			{
				return _229cbb9e8_gen_data_expr(_69715_st.operator jule::Ptr<_229d70d33_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Conditional>>()) {
			_case_begin_5078675920:;
			{
				return _229cbb9e8_gen_conditional(_69715_st.operator jule::Ptr<_1e56c3885_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_InfIter>>()) {
			_case_begin_5078676016:;
			{
				return _229cbb9e8_gen_inf_iter(_69715_st.operator jule::Ptr<_1e56c3885_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_WhileIter>>()) {
			_case_begin_5078674704:;
			{
				return _229cbb9e8_gen_while_iter(_69715_st.operator jule::Ptr<_1e56c3885_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_RangeIter>>()) {
			_case_begin_5078674800:;
			{
				return _229cbb9e8_gen_range_iter(_69715_st.operator jule::Ptr<_1e56c3885_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_ContSt>>()) {
			_case_begin_5078674896:;
			{
				return _229cbb9e8_gen_cont(_69715_st.operator jule::Ptr<_1e56c3885_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Label>>()) {
			_case_begin_5078674992:;
			{
				return _229cbb9e8_gen_label(_69715_st.operator jule::Ptr<_1e56c3885_Label>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_GotoSt>>()) {
			_case_begin_5078676752:;
			{
				return _229cbb9e8_gen_goto(_69715_st.operator jule::Ptr<_1e56c3885_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Postfix>>()) {
			_case_begin_5078676864:;
			{
				return _229cbb9e8_gen_postfix(_69715_st.operator jule::Ptr<_1e56c3885_Postfix>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Assign>>()) {
			_case_begin_5078676976:;
			{
				return _229cbb9e8_gen_assign(_69715_st.operator jule::Ptr<_1e56c3885_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_MultiAssign>>()) {
			_case_begin_5078677088:;
			{
				return _229cbb9e8_gen_multi_assign(_69715_st.operator jule::Ptr<_1e56c3885_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_Match>>()) {
			_case_begin_5078677200:;
			{
				return _229cbb9e8_gen_match(_69715_st.operator jule::Ptr<_1e56c3885_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_FallSt>>()) {
			_case_begin_5078677312:;
			{
				return _229cbb9e8_gen_fall_st(_69715_st.operator jule::Ptr<_1e56c3885_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_BreakSt>>()) {
			_case_begin_5078677424:;
			{
				return _229cbb9e8_gen_break_st(_69715_st.operator jule::Ptr<_1e56c3885_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e56c3885_RetSt>>()) {
			_case_begin_5078677536:;
			{
				return _229cbb9e8_gen_ret_st(_69715_st.operator jule::Ptr<_1e56c3885_RetSt>());
			}
		}
		else {
			_case_begin_5078675600:;
			{
				return jule::Str("<unimplemented_stmt>", 20);
			}
		}
		_match_end_5078675360:;
	}
}



inline jule::Str _229cbb9e8_gen_scope(jule::Ptr<_1e56c3885_Scope> _72518_s) {
	jule::Str _72613_obj = jule::Str("{\n", 2);
	_1e8949c3a_add_indent();
	{
		auto &expr = (*(_72518_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_5078705248:;
		if (it != expr.end()) {
			jule::Any _229cbb9e8_st = *it;
			{
				_72613_obj+=_1e8949c3a_indent();
				_72613_obj+=_229cbb9e8_gen_st(_229cbb9e8_st);
				_72613_obj+=jule::Str("\n", 1);
			}
			_iter_next_5078705248:;
			++it;
			goto _iter_begin_5078705248;
		}
		_iter_end_5078705248:;
	}
	_1e8949c3a_done_indent();
	_72613_obj+=_1e8949c3a_indent();
	_72613_obj+=jule::Str("}", 1);
	if ((*(_72518_s))._field_deferred) {
		_72613_obj=(jule::Str("__JULE_DEFER(", 13) + _72613_obj) + jule::Str(");", 2);
	}
	return _72613_obj;
}



inline jule::Str _229cbb9e8_gen_fn_scope(jule::Ptr<_229b6ebcb_FnIns> _74721_f) {
	jule::Str _74813_obj = ((((*(_74721_f))._field_owner != nullptr)) ? (_229cbb9e8_gen_method_scope(_74721_f)) : (_229cbb9e8_gen_scope((*(_74721_f))._field_scope)));
	if ((*((*(_74721_f))._field_decl))._field_exceptional && (*((*(_74721_f))._field_decl))._method_is_void()) {
		_74813_obj=_74813_obj.slice(0LL,_74813_obj.len() - 2LL) + jule::Str(" return jule::VoidExceptional(); }", 34);
	}
	return _74813_obj;
}



inline jule::Str _229cbb9e8_gen_method_scope(jule::Ptr<_229b6ebcb_FnIns> _76025_f) {
	return _229cbb9e8_gen_scope((*(_76025_f))._field_scope);
}



inline jule::Str _229da5351_concat_all_parts(jule::Slice<_228d7aadb_Token> _8121_parts) {
	jule::Str _8213_s = jule::Str();
	{
		auto &expr = _8121_parts;
		auto it = expr.begin();
		_iter_begin_5078718768:;
		if (it != expr.end()) {
			_228d7aadb_Token &_229da5351_part = *it;
			{
				_8213_s+=_229da5351_part._field_kind;
			}
			_iter_next_5078718768:;
			++it;
			goto _iter_begin_5078718768;
		}
		_iter_end_5078718768:;
	}
	return _8213_s;
}



inline jule::Str _229da5351_decompose_common_esq(jule::U8 _8925_b) {
	{
		auto &_match_expr{ _8925_b };
		
		if (_match_expr == '\\') {
			_case_begin_5078722464:;
			{
				return jule::Str("\\\\", 2);
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_5078722560:;
			{
				return jule::Str("'", 1);
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_5078722656:;
			{
				return jule::Str("\\\"", 2);
			}
		}
		else if (_match_expr == '\a') {
			_case_begin_5078721824:;
			{
				return jule::Str("\\a", 2);
			}
		}
		else if (_match_expr == '\b') {
			_case_begin_5078721920:;
			{
				return jule::Str("\\b", 2);
			}
		}
		else if (_match_expr == '\f') {
			_case_begin_5078722016:;
			{
				return jule::Str("\\f", 2);
			}
		}
		else if (_match_expr == '\n') {
			_case_begin_5078721264:;
			{
				return jule::Str("\\n", 2);
			}
		}
		else if (_match_expr == '\r') {
			_case_begin_5078721360:;
			{
				return jule::Str("\\r", 2);
			}
		}
		else if (_match_expr == '\t') {
			_case_begin_5078721456:;
			{
				return jule::Str("\\t", 2);
			}
		}
		else if (_match_expr == '\v') {
			_case_begin_5078721552:;
			{
				return jule::Str("\\v", 2);
			}
		}
		else {
			_case_begin_5078719872:;
			{
				return jule::Str();
			}
		}
		_match_end_5078719680:;
	}
}



inline jule::Str _229da5351_sbtoa(jule::U8 _10510_b) {
	if (_10510_b == 0LL) {
		return jule::Str("\\x00", 4);
	}
	if (_10510_b <= 127LL) {
		jule::Str _11113_seq = _229da5351_decompose_common_esq(_10510_b);
		if (_11113_seq != jule::Str()) {
			return _11113_seq;
		}
		if ((32LL <= _10510_b) && (_10510_b <= 126LL)) {
			return static_cast<jule::Str>(_10510_b);
		}
	}
	jule::Str _1219_seq = _22866a079_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_10510_b)),8LL);
	if (_1219_seq.len() == 2LL) {
		return jule::Str("\\0", 2) + _1219_seq;
	}
	return jule::Str("\\", 1) + _1219_seq;
}



inline jule::Str _229da5351_get_cstr_model(jule::Slice<jule::U8> _12819_bytes) {
	jule::Str _12913_lit = jule::Str();
	{
		auto &expr = _12819_bytes;
		auto it = expr.begin();
		_iter_begin_5078737296:;
		if (it != expr.end()) {
			jule::U8 &_229da5351_b = *it;
			{
				_12913_lit+=_229da5351_sbtoa(_229da5351_b);
			}
			_iter_next_5078737296:;
			++it;
			goto _iter_begin_5078737296;
		}
		_iter_end_5078737296:;
	}
	return (jule::Str("\"", 1) + _12913_lit) + jule::Str("\"", 1);
}



inline jule::Str _229da5351_get_str_model(jule::Ptr<_1e856e8a4_Const>& _13719_c) {
	jule::Str _1389_content = (*(_13719_c))._method_read_str();
	if (_1389_content.len() == 0LL) {
		return _1e88e3e7b_as_jt(jule::Str("str", 3)) + jule::Str("()", 2);
	}
	jule::Slice<jule::U8> _1439_bytes = static_cast<jule::Slice<jule::U8>>(_1389_content);
	jule::Str _1449_len = _22866a079_fmt_int(static_cast<jule::I64>(_1439_bytes.len()),10LL);
	jule::Str _1459_lit = _229da5351_get_cstr_model(_1439_bytes);
	return ((((_1e88e3e7b_as_jt(jule::Str("str", 3)) + jule::Str("(", 1)) + _1459_lit) + jule::Str(", ", 2)) + _1449_len) + jule::Str(")", 1);
}



inline jule::Str _229da5351_get_bool_model(jule::Ptr<_1e856e8a4_Const>& _14920_c) {
	if ((*(_14920_c))._method_read_bool()) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _229da5351_get_nil_model(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _229da5351_gen_float_special_cases(jule::F64& _15829_x) {
	{
		
		if (_22876159e_is_nan(_15829_x)) {
			_case_begin_5078754224:;
			{
				return jule::Str("NAN", 3);
			}
		}
		else if (_22876159e_is_inf(_15829_x,1LL)) {
			_case_begin_5078754432:;
			{
				return jule::Str("INFINITY", 8);
			}
		}
		else if (_22876159e_is_inf(_15829_x,-1LL)) {
			_case_begin_5078754528:;
			{
				return jule::Str("-INFINITY", 9);
			}
		}
		else {
			_case_begin_5078752784:;
			{
				return jule::Str();
			}
		}
		_match_end_5078752608:;
	}
}



inline jule::Str _229da5351_ftoa(jule::F64 _1679_f,jule::Int _16717_bitsize) {
	if (_16717_bitsize != 32LL) {
		if (_1679_f == static_cast<jule::F64>(static_cast<jule::I64>(_1679_f))) {
			return _229da5351_i64toa(static_cast<jule::I64>(static_cast<jule::I64>(_1679_f)));
		}
		if (_1679_f == static_cast<jule::F64>(static_cast<jule::U64>(_1679_f))) {
			return _229da5351_u64toa(static_cast<jule::U64>(static_cast<jule::U64>(_1679_f)));
		}
	}
	jule::Str _17713_m = _22777cad8_fmt_float(_1679_f,'f',-1LL,_16717_bitsize);
	if (_17713_m.find(jule::Str(".", 1)) == -1LL) {
		_17713_m+=jule::Str(".0", 2);
	}
	return _17713_m;
}



inline jule::Str _229da5351_get_f32_model(jule::Ptr<_1e856e8a4_Const>& _18419_c) {
	jule::F64 _1859_x = (*(_18419_c))._method_as_f64();
	jule::Str _1889_f = _229da5351_gen_float_special_cases(_1859_x);
	if (_1889_f != jule::Str()) {
		return _1889_f;
	}
	{
		
		if (_1859_x == 340282346638528860000000000000000000000.0) {
			_case_begin_5078769280:;
			{
				return jule::Str("jule::MAX_F32", 13);
			}
		}
		else if (_1859_x == -340282346638528860000000000000000000000.0) {
			_case_begin_5078769376:;
			{
				return jule::Str("jule::MIN_F32", 13);
			}
		}
		_match_end_5078770016:;
	}
	return _229da5351_ftoa(_1859_x,32LL) + jule::Str("f", 1);
}



inline jule::Str _229da5351_get_f64_model(jule::Ptr<_1e856e8a4_Const>& _20119_c) {
	jule::F64 _2029_x = (*(_20119_c))._method_as_f64();
	jule::Str _2059_f = _229da5351_gen_float_special_cases(_2029_x);
	if (_2059_f != jule::Str()) {
		return _2059_f;
	}
	{
		
		if (_2029_x == jule::MAX_F64) {
			_case_begin_5078776048:;
			{
				return jule::Str("jule::MAX_F64", 13);
			}
		}
		else if (_2029_x == jule::MIN_F64) {
			_case_begin_5078776144:;
			{
				return jule::Str("jule::MIN_F64", 13);
			}
		}
		_match_end_5078776400:;
	}
	return _229da5351_ftoa(_2029_x,64LL);
}



inline jule::Str _229da5351_get_float_model(jule::Ptr<_229d70d33_Data>& _21825_d) {
	{
		
		if ((*((*((*(_21825_d))._field_kind))._method_prim()))._method_is_f32()) {
			_case_begin_5078782112:;
			{
				return _229da5351_get_f32_model((*(_21825_d))._field_constant);
			}
		}
		else {
			_case_begin_5078777776:;
			{
				return _229da5351_get_f64_model((*(_21825_d))._field_constant);
			}
		}
		_match_end_5078777552:;
	}
}



inline jule::Str _229da5351_i64toa(jule::I64 _22511_x) {
	{
		
		if (_22511_x == jule::MAX_I64) {
			_case_begin_5078783664:;
			{
				return jule::Str("jule::MAX_I64", 13);
			}
		}
		else if (_22511_x == jule::MIN_I64) {
			_case_begin_5078783760:;
			{
				return jule::Str("jule::MIN_I64", 13);
			}
		}
		_match_end_5078783872:;
	}
	jule::Str _2319_fmt = _22866a079_fmt_int(_22511_x,10LL);
	if (_227785d55_is_64bit(jule::Str("amd64", 5))) {
		return _2319_fmt + jule::Str("LL", 2);
	}
	return _2319_fmt + jule::Str("L", 1);
}



inline jule::Str _229da5351_get_i64_model(jule::Ptr<_1e856e8a4_Const>& _23819_c) {
	return _229da5351_i64toa(static_cast<jule::I64>((*(_23819_c))._method_read_i64()));
}



inline jule::Str _229da5351_u64toa(jule::U64 _24211_x) {
	{
		
		if (_24211_x == jule::MAX_U64) {
			_case_begin_5078790400:;
			{
				return jule::Str("jule::MAX_U64", 13);
			}
		}
		_match_end_5078790656:;
	}
	jule::Str _2489_fmt = _22866a079_fmt_uint(_24211_x,10LL);
	if (_227785d55_is_64bit(jule::Str("amd64", 5))) {
		return _2489_fmt + jule::Str("LLU", 3);
	}
	return _2489_fmt + jule::Str("LU", 2);
}



inline jule::Str _229da5351_get_u64_model(jule::Ptr<_1e856e8a4_Const> _25518_c) {
	return _229da5351_u64toa(static_cast<jule::U64>((*(_25518_c))._method_read_u64()));
}



inline jule::Str _229da5351_gen_const_expr(jule::Ptr<_229d70d33_Data> _25923_d) {
	{
		
		if ((*((*(_25923_d))._field_constant))._method_is_str()) {
			_case_begin_5078800240:;
			{
				return _229da5351_get_str_model((*(_25923_d))._field_constant);
			}
		}
		else if ((*((*(_25923_d))._field_constant))._method_is_bool()) {
			_case_begin_5078800336:;
			{
				return _229da5351_get_bool_model((*(_25923_d))._field_constant);
			}
		}
		else if ((*((*(_25923_d))._field_constant))._method_is_f64()) {
			_case_begin_5078800432:;
			{
				return _229da5351_get_float_model(_25923_d);
			}
		}
		else if ((*((*(_25923_d))._field_constant))._method_is_i64()) {
			_case_begin_5078799600:;
			{
				return _229da5351_get_i64_model((*(_25923_d))._field_constant);
			}
		}
		else if ((*((*(_25923_d))._field_constant))._method_is_u64()) {
			_case_begin_5078799696:;
			{
				return _229da5351_get_u64_model((*(_25923_d))._field_constant);
			}
		}
		else if ((*((*(_25923_d))._field_constant))._method_is_nil()) {
			_case_begin_5078799792:;
			{
				return _229da5351_get_nil_model();
			}
		}
		else {
			_case_begin_5078797008:;
			{
				return jule::Str();
			}
		}
		_match_end_5078796160:;
	}
}



inline jule::Str _229da5351_gen_const_expr_model(jule::Ptr<_1e856e8a4_Const> _27125_m) {
	{
		
		if ((*(_27125_m))._method_is_str()) {
			_case_begin_5078813792:;
			{
				return _229da5351_get_str_model(_27125_m);
			}
		}
		else if ((*(_27125_m))._method_is_bool()) {
			_case_begin_5078813888:;
			{
				return _229da5351_get_bool_model(_27125_m);
			}
		}
		else if ((*(_27125_m))._method_is_f64()) {
			_case_begin_5078813984:;
			{
				return _229da5351_get_f64_model(_27125_m);
			}
		}
		else if ((*(_27125_m))._method_is_i64()) {
			_case_begin_5078813152:;
			{
				return _229da5351_get_i64_model(_27125_m);
			}
		}
		else if ((*(_27125_m))._method_is_u64()) {
			_case_begin_5078813248:;
			{
				return _229da5351_get_u64_model(_27125_m);
			}
		}
		else if ((*(_27125_m))._method_is_nil()) {
			_case_begin_5078813344:;
			{
				return _229da5351_get_nil_model();
			}
		}
		else {
			_case_begin_5078809344:;
			{
				return jule::Str();
			}
		}
		_match_end_5078811872:;
	}
}



inline jule::Str _229da5351_gen_div_by_zero_binop_expr_model(_228d7aadb_Token& _28338_op,jule::Any& _28354_l,jule::Any& _28373_r) {
	jule::Str _28413_op_func = jule::Str();
	{
		auto &_match_expr{ _28338_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("/=", 2)) {
			_case_begin_5078824048:;
			{
				_28413_op_func=jule::Str("div", 3);
			}
		}
		else if (_match_expr == jule::Str("%", 1) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_5078824144:;
			{
				_28413_op_func=jule::Str("mod", 3);
			}
		}
		_match_end_5078823968:;
	}
	if (_227532edc_OPT_MATH) {
		{
			auto &_match_expr{ _28373_r };
			
			if (_match_expr.type_is<jule::Ptr<_1e856e8a4_Const>>()) {
				_case_begin_5078827584:;
				{
					_28413_op_func=jule::Str("unsafe_", 7) + _28413_op_func;
				}
			}
			_match_end_5078827504:;
		}
	}
	jule::Str _29713_obj = jule::Str("jule::", 6);
	_29713_obj+=_28413_op_func;
	_29713_obj+=jule::Str("(", 1);
	if ((!(_227532edc_PRODUCTION))) {
		_29713_obj+=_229da5351_gen_loc_info(_28338_op);
		_29713_obj+=jule::Str(",", 1);
	}
	_29713_obj+=_229da5351_gen_expr(_28354_l);
	_29713_obj+=jule::Str(",", 1);
	_29713_obj+=_229da5351_gen_expr(_28373_r);
	_29713_obj+=jule::Str(")", 1);
	return _29713_obj;
}



inline jule::Str _229da5351_gen_binop_expr_model(jule::Ptr<_1e5870218_BinopExprModel> _31129_m) {
	{
		auto &_match_expr{ (*(_31129_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("%", 1)) {
			_case_begin_5078833456:;
			{
				return _229da5351_gen_div_by_zero_binop_expr_model((*(_31129_m))._field_op,(*(_31129_m))._field_left,(*(_31129_m))._field_right);
			}
		}
		_match_end_5078833344:;
	}
	jule::Str _31813_obj = jule::Str("(", 1);
	_31813_obj+=_229da5351_gen_expr_model((*(_31129_m))._field_left);
	_31813_obj+=jule::Str(" ", 1);
	_31813_obj+=(*(_31129_m))._field_op._field_kind;
	_31813_obj+=jule::Str(" ", 1);
	_31813_obj+=_229da5351_gen_expr_model((*(_31129_m))._field_right);
	_31813_obj+=jule::Str(")", 1);
	return _31813_obj;
}



inline jule::Str _229da5351_gen_var_expr_model(jule::Ptr<_1e58b0654_Var> _32827_m) {
	if ((*(_32827_m))._field_cpp_linked) {
		jule::Ptr<_228d31971_Directive> _33013_d = _1e891c504_find_directive((*(_32827_m))._field_directives,jule::Str("namespace", 9));
		if (_33013_d != nullptr) {
			jule::Str _33221_obj = _229da5351_concat_all_parts((*(_33013_d))._field_args);
			_33221_obj+=jule::Str("::", 2);
			_33221_obj+=_1e88e3e7b_var_out_ident(_32827_m);
			return _33221_obj;
		}
	}
	return _1e88e3e7b_var_out_ident(_32827_m);
}



inline jule::Str _229da5351_gen_struct_expr_model(jule::Ptr<_228e0d025_Struct> _34126_m) {
	return _1e891c504_gen_struct_kind(_34126_m);
}



inline jule::Str _229da5351_gen_struct_ins_expr_model(jule::Ptr<_228e0d025_StructIns> _34534_m) {
	return _1e891c504_gen_struct_kind_ins(_34534_m);
}



inline jule::Str _229da5351_gen_unary_expr_model(jule::Ptr<_1e5870218_UnaryExprModel> _34929_m) {
	if (_227532edc_OPT_PTR && ((*(_34929_m))._field_op._field_kind == jule::Str("*", 1))) {
		{
			auto &_match_expr{ (*((*(_34929_m))._field_expr))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1e5870218_UnaryExprModel>>()) {
				_case_begin_5078850144:;
				{
					jule::Ptr<_1e5870218_UnaryExprModel> _35321_um = (*((*(_34929_m))._field_expr))._field_model.operator jule::Ptr<_1e5870218_UnaryExprModel>();
					if ((*(_35321_um))._field_op._field_kind == jule::Str("&", 1)) {
						return _229da5351_gen_expr_model((*((*(_35321_um))._field_expr))._field_model);
					}
				}
			}
			_match_end_5078850048:;
		}
	}
	{
		auto &_match_expr{ (*(_34929_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("^", 1)) {
			_case_begin_5078850768:;
			{
				jule::Str _36217_obj = jule::Str("(~(", 3);
				_36217_obj+=_229da5351_gen_expr((*((*(_34929_m))._field_expr))._field_model);
				_36217_obj+=jule::Str("))", 2);
				return _36217_obj;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_5078850864:;
			{
				if (_227532edc_PRODUCTION || ((*((*((*(_34929_m))._field_expr))._field_kind))._method_sptr() == nullptr)) {
					goto _match_end_5078843120;
				}
				jule::Str _37217_obj = _229da5351_gen_expr((*((*(_34929_m))._field_expr))._field_model);
				_37217_obj+=jule::Str(".get(", 5);
				_37217_obj+=_229da5351_gen_loc_info((*(_34929_m))._field_op);
				_37217_obj+=jule::Str(")", 1);
				return _37217_obj;
			}
		}
		_match_end_5078843120:;
	}
	jule::Str _37913_obj = jule::Str("(", 1);
	_37913_obj+=(*(_34929_m))._field_op._field_kind;
	_37913_obj+=jule::Str("(", 1);
	_37913_obj+=_229da5351_gen_expr((*((*(_34929_m))._field_expr))._field_model);
	_37913_obj+=jule::Str("))", 2);
	return _37913_obj;
}



inline jule::Str _229da5351_gen_cpp_struct_lit_expr_model(jule::Ptr<_1e5870218_StructLitExprModel> _38738_m) {
	jule::Str _38813_obj = jule::Str("(", 1) + _1e891c504_gen_struct_kind_ins((*(_38738_m))._field_strct);
	_38813_obj+=jule::Str("){", 2);
	if ((*(_38738_m))._field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_38738_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_5078871632:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_FieldIns> _229da5351_f = *it;
				{
					if ((*((*((*(_38738_m))._field_strct))._field_decl))._field_cpp_linked) {
						{
							auto &expr = (*(_38738_m))._field_args;
							auto it = expr.begin();
							_iter_begin_5078874272:;
							if (it != expr.end()) {
								jule::Ptr<_1e5870218_StructArgExprModel> _229da5351_arg = *it;
								{
									if ((*(_229da5351_arg))._field_field == _229da5351_f) {
										_38813_obj+=jule::Str(".", 1);
										_38813_obj+=_1e88e3e7b_field_out_ident((*(_229da5351_f))._field_decl);
										_38813_obj+=jule::Str("=", 1);
										_38813_obj+=_229da5351_gen_expr((*(_229da5351_arg))._field_expr);
										_38813_obj+=jule::Str(",", 1);
										goto _iter_next_5078871632;
									}
								}
								_iter_next_5078874272:;
								++it;
								goto _iter_begin_5078874272;
							}
							_iter_end_5078874272:;
						}
						goto _iter_next_5078871632;
					}
					_38813_obj+=_1e88e3e7b_field_out_ident((*(_229da5351_f))._field_decl);
					_38813_obj+=jule::Str(": ", 2);
					{
						auto &expr = (*(_38738_m))._field_args;
						auto it = expr.begin();
						_iter_begin_5078880304:;
						if (it != expr.end()) {
							jule::Ptr<_1e5870218_StructArgExprModel> _229da5351_arg = *it;
							{
								if ((*(_229da5351_arg))._field_field == _229da5351_f) {
									_38813_obj+=_229da5351_gen_expr((*(_229da5351_arg))._field_expr);
									_38813_obj+=jule::Str(",", 1);
									goto _iter_next_5078871632;
								}
							}
							_iter_next_5078880304:;
							++it;
							goto _iter_begin_5078880304;
						}
						_iter_end_5078880304:;
					}
					_38813_obj+=_229da5351_get_init_expr((*(_229da5351_f))._field_kind);
					_38813_obj+=jule::Str(",", 1);
				}
				_iter_next_5078871632:;
				++it;
				goto _iter_begin_5078871632;
			}
			_iter_end_5078871632:;
		}
		_38813_obj=_38813_obj.slice(0LL,_38813_obj.len() - 1LL);
	}
	_38813_obj+=jule::Str("}", 1);
	return _38813_obj;
}



inline jule::Str _229da5351_gen_struct_lit_expr_model(jule::Ptr<_1e5870218_StructLitExprModel> _42534_m) {
	if ((*((*((*(_42534_m))._field_strct))._field_decl))._field_cpp_linked) {
		return _229da5351_gen_cpp_struct_lit_expr_model(_42534_m);
	}
	jule::Str _43013_obj = _1e88e3e7b_struct_ins_out_ident((*(_42534_m))._field_strct);
	_43013_obj+=jule::Str("(", 1);
	if ((*(_42534_m))._field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_42534_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_5078891680:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_FieldIns> _229da5351_f = *it;
				{
					{
						auto &expr = (*(_42534_m))._field_args;
						auto it = expr.begin();
						_iter_begin_5078893392:;
						if (it != expr.end()) {
							jule::Ptr<_1e5870218_StructArgExprModel> _229da5351_arg = *it;
							{
								if ((*(_229da5351_arg))._field_field == _229da5351_f) {
									_43013_obj+=_229da5351_gen_expr((*(_229da5351_arg))._field_expr);
									_43013_obj+=jule::Str(",", 1);
									goto _iter_next_5078891680;
								}
							}
							_iter_next_5078893392:;
							++it;
							goto _iter_begin_5078893392;
						}
						_iter_end_5078893392:;
					}
					_43013_obj+=_229da5351_get_init_expr((*(_229da5351_f))._field_kind);
					_43013_obj+=jule::Str(",", 1);
				}
				_iter_next_5078891680:;
				++it;
				goto _iter_begin_5078891680;
			}
			_iter_end_5078891680:;
		}
		_43013_obj=_43013_obj.slice(0LL,_43013_obj.len() - 1LL);
	}
	_43013_obj+=jule::Str(")", 1);
	return _43013_obj;
}



inline jule::Str _229da5351_gen_alloc_struct_lit_expr_model(jule::Ptr<_1e5870218_AllocStructLitExprModel> _45140_m) {
	jule::Str _45213_obj = jule::Str("jule::new_struct", 16);
	if ((*((*((*((*(_45140_m))._field_lit))._field_strct))._field_decl))._method_has_ref_accessible()) {
		_45213_obj+=jule::Str("_ptr", 4);
	}
	_45213_obj+=jule::Str("<", 1);
	_45213_obj+=_1e88e3e7b_struct_ins_out_ident((*((*(_45140_m))._field_lit))._field_strct);
	_45213_obj+=jule::Str(">(", 2);
	if ((!(_227532edc_PRODUCTION))) {
		_45213_obj+=_229da5351_gen_loc_info((*((*(_45140_m))._field_lit))._field_token);
		_45213_obj+=jule::Str(",", 1);
	}
	_45213_obj+=jule::Str("new( std::nothrow ) ", 20);
	_45213_obj+=_229da5351_gen_struct_lit_expr_model((*(_45140_m))._field_lit);
	_45213_obj+=jule::Str(")", 1);
	return _45213_obj;
}



inline jule::Str _229da5351_gen_casting_expr_model(jule::Ptr<_1e5870218_CastingExprModel> _46931_m) {
	jule::Str _47013_obj = jule::Str();
	{
		
		if (((*((*(_46931_m))._field_kind))._method_prim() != nullptr) && (*((*((*(_46931_m))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_5078910480:;
			{
				_47013_obj+=_1e891c504_gen_type_kind((*(_46931_m))._field_kind);
				_47013_obj+=jule::Str("(", 1);
				_47013_obj+=_229da5351_gen_expr_model((*(_46931_m))._field_expr);
				_47013_obj+=jule::Str(")", 1);
			}
		}
		else if ((*((*(_46931_m))._field_expr_kind))._method_ptr() != nullptr || (*((*(_46931_m))._field_kind))._method_ptr() != nullptr) {
			_case_begin_5078913200:;
			{
				_47013_obj+=jule::Str("((", 2);
				_47013_obj+=_1e891c504_gen_type_kind((*(_46931_m))._field_kind);
				_47013_obj+=jule::Str(")(", 2);
				_47013_obj+=_229da5351_gen_expr((*(_46931_m))._field_expr);
				_47013_obj+=jule::Str("))", 2);
			}
		}
		else if ((*((*(_46931_m))._field_expr_kind))._method_trt() != nullptr || ((*((*(_46931_m))._field_expr_kind))._method_prim() != nullptr) && (*((*((*(_46931_m))._field_expr_kind))._method_prim()))._method_is_any()) {
			_case_begin_5078913472:;
			{
				_47013_obj+=_229da5351_gen_expr_model((*(_46931_m))._field_expr);
				_47013_obj+=jule::Str(".", 1);
				if (_227532edc_PRODUCTION) {
					_47013_obj+=jule::Str("operator ", 9);
					_47013_obj+=_1e891c504_gen_type_kind((*(_46931_m))._field_kind);
					_47013_obj+=jule::Str("()", 2);
				} else {
					if (((*((*(_46931_m))._field_expr_kind))._method_trt() != nullptr) && ((*((*(_46931_m))._field_kind))._method_sptr() != nullptr)) {
						_47013_obj+=jule::Str("cast_ptr<", 9);
						_47013_obj+=_1e891c504_gen_type_kind((*((*((*(_46931_m))._field_kind))._method_sptr()))._field_elem);
					} else {
						_47013_obj+=jule::Str("cast<", 5);
						_47013_obj+=_1e891c504_gen_type_kind((*(_46931_m))._field_kind);
					}
					_47013_obj+=jule::Str(">(", 2);
					_47013_obj+=_229da5351_gen_loc_info((*(_46931_m))._field_token);
					_47013_obj+=jule::Str(")", 1);
				}
			}
		}
		else {
			_case_begin_5078909680:;
			{
				_47013_obj+=jule::Str("static_cast<", 12);
				_47013_obj+=_1e891c504_gen_type_kind((*(_46931_m))._field_kind);
				_47013_obj+=jule::Str(">(", 2);
				_47013_obj+=_229da5351_gen_expr((*(_46931_m))._field_expr);
				_47013_obj+=jule::Str(")", 1);
			}
		}
		_match_end_5078909568:;
	}
	return _47013_obj;
}



inline jule::Str _229da5351_gen_arg_expr_models(jule::Slice<jule::Any> _51728_models) {
	if (_51728_models.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _52213_obj = jule::Str();
	{
		auto &expr = _51728_models;
		auto it = expr.begin();
		_iter_begin_5078927680:;
		if (it != expr.end()) {
			jule::Any _229da5351_m = *it;
			{
				_52213_obj+=_229da5351_gen_expr(_229da5351_m);
				_52213_obj+=jule::Str(",", 1);
			}
			_iter_next_5078927680:;
			++it;
			goto _iter_begin_5078927680;
		}
		_iter_end_5078927680:;
	}
	_52213_obj=_52213_obj.slice(0LL,_52213_obj.len() - 1LL);
	return _52213_obj;
}



inline jule::Str _229da5351_gen_expr_model_for_call(jule::Any _53132_expr) {
	{
		auto &_match_expr{ _53132_expr };
		
		if (_match_expr.type_is<jule::Ptr<_229b6ebcb_FnIns>>()) {
			_case_begin_5078940576:;
			{
				return _229da5351_gen_fn_ins_expr_model(_53132_expr.operator jule::Ptr<_229b6ebcb_FnIns>());
			}
		}
		else {
			_case_begin_5078942064:;
			{
				return _229da5351_gen_expr_model(_53132_expr);
			}
		}
		_match_end_5078940096:;
	}
}



inline jule::Str _229da5351_gen_loc_info(_228d7aadb_Token& _53818_t) {
	jule::Str _53913_loc = (*(_53818_t._field_file))._method_path();
	_53913_loc+=jule::Str(":", 1);
	_53913_loc+=_22866a079_itoa(_53818_t._field_row);
	_53913_loc+=jule::Str(":", 1);
	_53913_loc+=_22866a079_itoa(_53818_t._field_column);
	return _229da5351_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_53913_loc));
}



inline jule::Str _229da5351_gen_pure_fn_call_expr_model(jule::Ptr<_1e5870218_FnCallExprModel>& _54737_m) {
	jule::Str _54813_obj = _229da5351_gen_expr_model_for_call((*(_54737_m))._field_expr);
	if ((!((*((*(_54737_m))._field_func))._method_is_builtin()))) {
		if ((*((*((*(_54737_m))._field_func))._field_decl))._field_cpp_linked && ((*((*(_54737_m))._field_func))._field_generics.len() > 0LL)) {
			if ((!(_1e891c504_has_directive((*((*((*(_54737_m))._field_func))._field_decl))._field_directives,jule::Str("cdef", 4))))) {
				_54813_obj+=jule::Str("<", 1);
				{
					auto &expr = (*((*(_54737_m))._field_func))._field_generics;
					auto it = expr.begin();
					_iter_begin_5078955024:;
					if (it != expr.end()) {
						jule::Ptr<_229d681e3_TypeKind> _229da5351_g = *it;
						{
							_54813_obj+=_1e891c504_gen_type_kind(_229da5351_g);
							_54813_obj+=jule::Str(",", 1);
						}
						_iter_next_5078955024:;
						++it;
						goto _iter_begin_5078955024;
					}
					_iter_end_5078955024:;
				}
				_54813_obj=_54813_obj.slice(0LL,_54813_obj.len() - 1LL);
				_54813_obj+=jule::Str(">", 1);
			}
		}
	}
	if ((!(_227532edc_PRODUCTION)) && (*((*(_54737_m))._field_func))._field_anon) {
		{
			auto &_match_expr{ (*(_54737_m))._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_1e5870218_StructSubIdentExprModel>>()) {
				_case_begin_5078965200:;
				{
					if ((*((*((*((*((*(_54737_m))._field_expr.operator jule::Ptr<_1e5870218_StructSubIdentExprModel>()))._field_field))._field_decl))._field_owner))._field_cpp_linked) {
						_54813_obj+=jule::Str("(", 1);
						goto _match_end_5078961600;
					}
					goto _case_begin_5078961728;
				}
			}
			else {
				_case_begin_5078961728:;
				{
					_54813_obj+=jule::Str(".call(", 6);
					_54813_obj+=_229da5351_gen_loc_info((*(_54737_m))._field_token);
					if ((*(_54737_m))._field_args.len() != 0LL) {
						_54813_obj+=jule::Str(",", 1);
					}
				}
			}
			_match_end_5078961600:;
		}
	} else {
		_54813_obj+=jule::Str("(", 1);
	}
	_54813_obj+=_229da5351_gen_arg_expr_models((*(_54737_m))._field_args);
	_54813_obj+=jule::Str(")", 1);
	if ((*(_54737_m))._field_is_co) {
		_54813_obj=jule::Str("__JULE_CO(", 10) + _54813_obj;
		_54813_obj+=jule::Str(")", 1);
	}
	return _54813_obj;
}



inline jule::Bool _229da5351_is_forwarded(jule::Ptr<_1e56c3885_Scope>& _59218_s) {
	jule::Any _5939_last = (*(_59218_s))._field_stmts[(*(_59218_s))._field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _5939_last };
		
		if (_match_expr.type_is<jule::Ptr<_229d70d33_Data>>()) {
			_case_begin_5078969840:;
			{
				{
					auto &_match_expr{ (*(_5939_last.operator jule::Ptr<_229d70d33_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>>()) {
						_case_begin_5078977904:;
						{
							return true;
						}
					}
					else {
						_case_begin_5078976464:;
						{
							return false;
						}
					}
					_match_end_5078976384:;
				}
			}
		}
		else {
			_case_begin_5078973808:;
			{
				return true;
			}
		}
		_match_end_5078973728:;
	}
}



inline jule::Str _229da5351_gen_fn_call_expr_model(jule::Ptr<_1e5870218_FnCallExprModel> _60931_m) {
	if (((*((*(_60931_m))._field_func))._method_is_builtin() || (!((*((*((*(_60931_m))._field_func))._field_decl))._field_exceptional))) || (((*(_60931_m))._field_except != nullptr) && ((*((*(_60931_m))._field_except))._field_stmts.len() == 0LL))) {
		return _229da5351_gen_pure_fn_call_expr_model(_60931_m);
	}
	jule::Str _61713_obj = jule::Str("({\n", 3);
	_1e8949c3a_add_indent();
	_61713_obj+=_1e8949c3a_indent();
	_61713_obj+=jule::Str("auto except = ", 14);
	_61713_obj+=_229da5351_gen_pure_fn_call_expr_model(_60931_m);
	_61713_obj+=jule::Str(";\n", 2);
	_61713_obj+=_1e8949c3a_indent();
	if ((*(_60931_m))._field_except != nullptr) {
		if (((*((*(_60931_m))._field_func))._field_result == nullptr) || (!((*(_60931_m))._field_assigned))) {
			_61713_obj+=jule::Str("if (!except.ok()) ", 18);
			_61713_obj+=_229cbb9e8_gen_scope((*(_60931_m))._field_except);
			_61713_obj+=jule::Str("\n", 1);
		} else {
			jule::Bool _63017_forwarded = _229da5351_is_forwarded((*(_60931_m))._field_except);
			_61713_obj+=jule::Str("(except.ok()) ? (except.result) : (", 35);
			if (_63017_forwarded) {
				_61713_obj+=jule::Str("{", 1);
			}
			_61713_obj+=_229cbb9e8_gen_scope((*(_60931_m))._field_except);
			if (_63017_forwarded) {
				_61713_obj+=jule::Str(" ", 1);
				_61713_obj+=_229da5351_get_init_expr((*((*(_60931_m))._field_func))._field_result);
				_61713_obj+=jule::Str(";}", 2);
			}
			_61713_obj+=jule::Str(");\n", 3);
		}
		_1e8949c3a_done_indent();
	} else {
		jule::Str _64517_path = _229da5351_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_60931_m))._field_token._field_file))._method_path()));
		_64517_path=_64517_path.slice(1LL,_64517_path.len() - 1LL);
		_61713_obj+=jule::Str("if (!except.ok()) jule::panic(jule::Str(\"", 41);
		_61713_obj+=jule::Str("unhandled exceptional: \") + except.error.type->to_str(except.error.data) + jule::Str(\"\\nlocation: ", 98);
		_61713_obj+=_64517_path;
		_61713_obj+=jule::Str(":", 1);
		_61713_obj+=_22866a079_itoa((*(_60931_m))._field_token._field_row);
		_61713_obj+=jule::Str(":", 1);
		_61713_obj+=_22866a079_itoa((*(_60931_m))._field_token._field_column);
		_61713_obj+=jule::Str("\"));\n", 5);
		if ((!((*((*((*(_60931_m))._field_func))._field_decl))._method_is_void()))) {
			_61713_obj+=_1e8949c3a_indent();
			_61713_obj+=jule::Str("(except.result);\n", 17);
		}
		_1e8949c3a_done_indent();
	}
	_61713_obj+=_1e8949c3a_indent();
	_61713_obj+=jule::Str("})", 2);
	return _61713_obj;
}



inline jule::Str _229da5351_gen_slice_expr_model(jule::Ptr<_1e5870218_SliceExprModel> _66829_m) {
	if ((*(_66829_m))._field_elems.len() == 0LL) {
		return _1e891c504_as_slice_kind((*(_66829_m))._field_elem_kind) + jule::Str("()", 2);
	}
	jule::Str _67313_obj = _1e891c504_as_slice_kind((*(_66829_m))._field_elem_kind);
	_67313_obj+=jule::Str("({", 2);
	_67313_obj+=_229da5351_gen_arg_expr_models((*(_66829_m))._field_elems);
	_67313_obj+=jule::Str("})", 2);
	return _67313_obj;
}



inline jule::Str _229da5351_gen_indexing_expr_model(jule::Ptr<_1e5870218_IndexingExprModel> _68032_m) {
	jule::Str _68113_obj = _229da5351_gen_expr_model((*((*(_68032_m))._field_expr))._field_model);
	if (_227532edc_OPT_ACCESS) {
		jule::Bool _68513_array = (*((*((*(_68032_m))._field_expr))._field_kind))._method_arr() != nullptr;
		if (_68513_array && (*((*(_68032_m))._field_index))._method_is_const()) {
			_68113_obj+=jule::Str(".__at(", 6);
			_68113_obj+=_229da5351_gen_expr((*((*(_68032_m))._field_index))._field_model);
			_68113_obj+=jule::Str(")", 1);
			return _68113_obj;
		}
		{
			auto &_match_expr{ (*((*(_68032_m))._field_index))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
				_case_begin_5079020032:;
				{
					jule::Ptr<_1e58b0654_Var> _69717_i = (*((*(_68032_m))._field_index))._field_model.operator jule::Ptr<_1e58b0654_Var>();
					if ((*(_69717_i))._field_mutable || ((*(_69717_i))._field_iter_relation == nullptr)) {
						goto _match_end_5079019920;
					}
					{
						auto &_match_expr{ (*((*(_68032_m))._field_expr))._field_model };
						
						if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
							_case_begin_5079025280:;
							{
								jule::Ptr<_1e58b0654_Var> _70321_r = (*((*(_68032_m))._field_expr))._field_model.operator jule::Ptr<_1e58b0654_Var>();
								if ((*((*(_69717_i))._field_iter_relation))._field_range == _70321_r) {
									_68113_obj+=jule::Str(".__at(", 6);
									_68113_obj+=_229da5351_gen_expr((*((*(_68032_m))._field_index))._field_model);
									_68113_obj+=jule::Str(")", 1);
									return _68113_obj;
								}
							}
						}
						_match_end_5079025168:;
					}
				}
			}
			_match_end_5079019920:;
		}
	}
	{
		
		if (_227532edc_PRODUCTION || (*((*((*(_68032_m))._field_expr))._field_kind))._method_ptr() != nullptr || (*((*((*(_68032_m))._field_expr))._field_kind))._method_map() != nullptr) {
			_case_begin_5079020640:;
			{
				_68113_obj+=jule::Str("[", 1);
				_68113_obj+=_229da5351_gen_expr((*((*(_68032_m))._field_index))._field_model);
				_68113_obj+=jule::Str("]", 1);
			}
		}
		else {
			_case_begin_5079031712:;
			{
				_68113_obj+=jule::Str(".at(", 4);
				_68113_obj+=_229da5351_gen_loc_info((*(_68032_m))._field_token);
				_68113_obj+=jule::Str(",", 1);
				_68113_obj+=_229da5351_gen_expr((*((*(_68032_m))._field_index))._field_model);
				_68113_obj+=jule::Str(")", 1);
			}
		}
		_match_end_5079031312:;
	}
	return _68113_obj;
}



inline jule::Str _229da5351_gen_anon_fn_expr_model(jule::Ptr<_1e5870218_AnonFnExprModel> _73631_m) {
	jule::Str _73713_obj = _1e891c504_gen_fn_kind((*(_73631_m))._field_func);
	_73713_obj+=jule::Str("([=]", 4);
	_73713_obj+=_1e8949c3a_gen_params_ins((*((*(_73631_m))._field_func))._field_params);
	_73713_obj+=jule::Str(" mutable -> ", 12);
	_73713_obj+=_1e8949c3a_gen_fn_ins_result((*(_73631_m))._field_func);
	_73713_obj+=jule::Str(" ", 1);
	_73713_obj+=_229cbb9e8_gen_fn_scope((*(_73631_m))._field_func);
	_73713_obj+=jule::Str(")", 1);
	return _73713_obj;
}



inline jule::Str _229da5351_gen_map_expr_model(jule::Ptr<_1e5870218_MapExprModel> _74827_m) {
	jule::Str _74913_obj = _1e88e3e7b_as_jt(jule::Str("map", 3));
	_74913_obj+=jule::Str("<", 1);
	_74913_obj+=_1e891c504_gen_type_kind((*(_74827_m))._field_key_kind);
	_74913_obj+=jule::Str(",", 1);
	_74913_obj+=_1e891c504_gen_type_kind((*(_74827_m))._field_val_kind);
	_74913_obj+=jule::Str(">({", 3);
	if ((*(_74827_m))._field_entries.len() > 0LL) {
		{
			auto &expr = (*(_74827_m))._field_entries;
			auto it = expr.begin();
			_iter_begin_5079049424:;
			if (it != expr.end()) {
				jule::Ptr<_1e5870218_KeyValPairExprModel> _229da5351_pair = *it;
				{
					jule::Str _75721_pair_obj = jule::Str("{", 1);
					_75721_pair_obj+=_229da5351_gen_expr((*(_229da5351_pair))._field_key);
					_75721_pair_obj+=jule::Str(",", 1);
					_75721_pair_obj+=_229da5351_gen_expr((*(_229da5351_pair))._field_val);
					_75721_pair_obj+=jule::Str("}", 1);
					_74913_obj+=_75721_pair_obj;
					_74913_obj+=jule::Str(",", 1);
				}
				_iter_next_5079049424:;
				++it;
				goto _iter_begin_5079049424;
			}
			_iter_end_5079049424:;
		}
		_74913_obj=_74913_obj.slice(0LL,_74913_obj.len() - 1LL);
	}
	_74913_obj+=jule::Str("})", 2);
	return _74913_obj;
}



inline jule::Str _229da5351_gen_slicing_expr_model(jule::Ptr<_1e5870218_SlicingExprModel> _77131_m) {
	jule::Str _77213_obj = _229da5351_gen_expr_model((*(_77131_m))._field_expr);
	_77213_obj+=jule::Str(".slice(", 7);
	if ((!(_227532edc_PRODUCTION))) {
		_77213_obj+=_229da5351_gen_loc_info((*(_77131_m))._field_token);
		_77213_obj+=jule::Str(",", 1);
	}
	_77213_obj+=_229da5351_gen_expr((*(_77131_m))._field_left);
	if ((*(_77131_m))._field_right != nullptr) {
		_77213_obj+=jule::Str(",", 1);
		_77213_obj+=_229da5351_gen_expr((*(_77131_m))._field_right);
	}
	_77213_obj+=jule::Str(")", 1);
	return _77213_obj;
}



inline jule::Str _229da5351_gen_trait_sub_ident_expr_model(jule::Ptr<_1e5870218_TraitSubIdentExprModel> _78739_m) {
	jule::Str _78813_obj = _229da5351_gen_expr_model((*(_78739_m))._field_expr);
	_78813_obj+=jule::Str(".get(", 5);
	if ((!(_227532edc_PRODUCTION))) {
		_78813_obj+=_229da5351_gen_loc_info((*(_78739_m))._field_token);
	}
	_78813_obj+=jule::Str(")._method_", 10);
	_78813_obj+=(*(_78739_m))._field_ident;
	return _78813_obj;
}



inline jule::Str _229da5351_gen_struct_sub_ident_expr_model(jule::Ptr<_1e5870218_StructSubIdentExprModel> _79840_m) {
	jule::Str _79913_obj = _229da5351_gen_expr_model((*(_79840_m))._field_expr);
	_79913_obj+=jule::Str(".", 1);
	if ((*(_79840_m))._field_field != nullptr) {
		_79913_obj+=_1e88e3e7b_field_out_ident((*((*(_79840_m))._field_field))._field_decl);
	} else {
		_79913_obj+=_1e88e3e7b_fn_ins_out_ident((*(_79840_m))._field_method);
	}
	return _79913_obj;
}



inline jule::Str _229da5351_gen_common_ident_expr_model(jule::Ptr<_1e5870218_CommonIdentExprModel> _80932_m) {
	return (*(_80932_m))._field_ident;
}



inline jule::Str _229da5351_gen_common_sub_ident_expr_model(jule::Ptr<_1e5870218_CommonSubIdentExprModel> _81340_m) {
	jule::Str _81413_obj = _229da5351_gen_expr_model((*(_81340_m))._field_expr);
	_81413_obj+=jule::Str(".", 1);
	_81413_obj+=(*(_81340_m))._field_ident;
	return _81413_obj;
}



inline jule::Str _229da5351_gen_array_expr_model(jule::Ptr<_1e5870218_ArrayExprModel> _82029_m) {
	if ((*(_82029_m))._field_elems.len() == 0LL) {
		return _1e891c504_gen_array_kind((*(_82029_m))._field_kind) + jule::Str("()", 2);
	}
	jule::Str _82513_obj = _1e891c504_gen_array_kind((*(_82029_m))._field_kind);
	if (((*(_82029_m))._field_elems.len() == 2LL) && ((*(_82029_m))._field_elems[1LL] == nullptr)) {
		_82513_obj+=jule::Str("(", 1);
		_82513_obj+=_229da5351_gen_expr((*(_82029_m))._field_elems[0LL]);
		_82513_obj+=jule::Str(")", 1);
		return _82513_obj;
	}
	_82513_obj+=jule::Str("({", 2);
	_82513_obj+=_229da5351_gen_arg_expr_models((*(_82029_m))._field_elems);
	_82513_obj+=jule::Str("})", 2);
	return _82513_obj;
}



inline jule::Str _229da5351_gen_fn_ins_expr_model_common(jule::Ptr<_229b6ebcb_FnIns> _84337_m) {
	jule::Str _84413_obj = _1e891c504_gen_fn_kind(_84337_m);
	_84413_obj+=jule::Str("(", 1);
	_84413_obj+=_229da5351_gen_fn_ins_expr_model(_84337_m);
	_84413_obj+=jule::Str(")", 1);
	return _84413_obj;
}



inline jule::Str _229da5351_gen_fn_ins_expr_model(jule::Ptr<_229b6ebcb_FnIns> _85230_m) {
	if (((*(_85230_m))._field_decl != nullptr) && (*((*(_85230_m))._field_decl))._field_cpp_linked) {
		jule::Ptr<_228d31971_Directive> _85413_d = _1e891c504_find_directive((*((*(_85230_m))._field_decl))._field_directives,jule::Str("namespace", 9));
		if (_85413_d != nullptr) {
			jule::Str _85621_obj = _229da5351_concat_all_parts((*(_85413_d))._field_args);
			_85621_obj+=jule::Str("::", 2);
			_85621_obj+=_1e88e3e7b_fn_ins_out_ident(_85230_m);
			return _85621_obj;
		}
	}
	return _1e88e3e7b_fn_ins_out_ident(_85230_m);
}



inline jule::Str _229da5351_gen_tuple_expr_model(jule::Ptr<_1e5870218_TupleExprModel> _86529_m) {
	jule::Str _86613_obj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = (*(_86529_m))._field_datas;
		auto it = expr.begin();
		_iter_begin_5079095600:;
		if (it != expr.end()) {
			jule::Ptr<_229d70d33_Data> _229da5351_d = *it;
			{
				_86613_obj+=_229da5351_gen_expr((*(_229da5351_d))._field_model);
				_86613_obj+=jule::Str(",", 1);
			}
			_iter_next_5079095600:;
			++it;
			goto _iter_begin_5079095600;
		}
		_iter_end_5079095600:;
	}
	_86613_obj=_86613_obj.slice(0LL,_86613_obj.len() - 1LL);
	_86613_obj+=jule::Str(")", 1);
	return _86613_obj;
}



inline jule::Str _229da5351_gen_builtin_new_call_expr_model(jule::Ptr<_1e5870218_BuiltinNewCallExprModel> _87640_m) {
	jule::Str _87713_obj = jule::Str("jule::new_ptr<", 14);
	_87713_obj+=_1e891c504_gen_type_kind((*(_87640_m))._field_kind);
	_87713_obj+=jule::Str(">(", 2);
	if ((*(_87640_m))._field_init != nullptr) {
		_87713_obj+=_229da5351_gen_expr((*(_87640_m))._field_init);
	}
	_87713_obj+=jule::Str(")", 1);
	return _87713_obj;
}



inline jule::Str _229da5351_gen_builtin_out_call_expr_model(jule::Ptr<_1e5870218_BuiltinOutCallExprModel> _88740_m) {
	if ((*(_88740_m))._field_debug && _227532edc_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _89113_obj = jule::Str("jule::out(", 10);
	_89113_obj+=_229da5351_gen_expr((*(_88740_m))._field_expr);
	_89113_obj+=jule::Str(")", 1);
	return _89113_obj;
}



inline jule::Str _229da5351_gen_builtin_outln_call_expr_model(jule::Ptr<_1e5870218_BuiltinOutlnCallExprModel> _89742_m) {
	if ((*(_89742_m))._field_debug && _227532edc_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _90113_obj = jule::Str("jule::outln(", 12);
	_90113_obj+=_229da5351_gen_expr((*(_89742_m))._field_expr);
	_90113_obj+=jule::Str(")", 1);
	return _90113_obj;
}



inline jule::Str _229da5351_gen_builtin_panic_call_expr_model(jule::Ptr<_1e5870218_BuiltinPanicCallExprModel> _90742_m) {
	jule::Str _90813_path = _229da5351_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_90742_m))._field_token._field_file))._method_path()));
	_90813_path=_90813_path.slice(1LL,_90813_path.len() - 1LL);
	jule::Str _91113_obj = jule::Str("jule::panic(", 12);
	_91113_obj+=_229da5351_gen_expr((*(_90742_m))._field_expr);
	_91113_obj+=jule::Str(" + jule::Str(\"\\nlocation: ", 26);
	_91113_obj+=_90813_path;
	_91113_obj+=jule::Str(":", 1);
	_91113_obj+=_22866a079_itoa((*(_90742_m))._field_token._field_row);
	_91113_obj+=jule::Str(":", 1);
	_91113_obj+=_22866a079_itoa((*(_90742_m))._field_token._field_column);
	_91113_obj+=jule::Str("\"));", 4);
	return _91113_obj;
}



inline jule::Str _229da5351_gen_builtin_assert_call_expr_model(jule::Ptr<_1e5870218_BuiltinAssertCallExprModel> _92343_m) {
	if (_227532edc_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _92713_path = _229da5351_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_92343_m))._field_token._field_file))._method_path()));
	_92713_path=_92713_path.slice(1LL,_92713_path.len() - 1LL);
	jule::Str _93013_obj = jule::Str("if (!(", 6);
	_93013_obj+=_229da5351_gen_expr((*(_92343_m))._field_expr);
	_93013_obj+=jule::Str(")) jule::panic(jule::Str(", 25);
	_93013_obj+=_229da5351_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*(_92343_m))._field_log));
	_93013_obj+=jule::Str(") + jule::Str(\"\\nlocation: ", 27);
	_93013_obj+=_92713_path;
	_93013_obj+=jule::Str(":", 1);
	_93013_obj+=_22866a079_itoa((*(_92343_m))._field_token._field_row);
	_93013_obj+=jule::Str(":", 1);
	_93013_obj+=_22866a079_itoa((*(_92343_m))._field_token._field_column);
	_93013_obj+=jule::Str("\"));", 4);
	return _93013_obj;
}



inline jule::Str _229da5351_gen_builtin_error_call_expr_model(jule::Ptr<_1e5870218_BuiltinErrorCallExprModel> _94442_m) {
	jule::Str _94513_obj = jule::Str("return ", 7);
	if ((*((*((*(_94442_m))._field_func))._field_decl))._method_is_void()) {
		_94513_obj+=jule::Str("jule::VoidExceptional(", 22);
	} else {
		_94513_obj+=jule::Str("jule::Exceptional<", 18);
		_94513_obj+=_1e891c504_gen_type_kind((*((*(_94442_m))._field_func))._field_result);
		_94513_obj+=jule::Str(">(", 2);
	}
	_94513_obj+=_229da5351_gen_expr((*(_94442_m))._field_err);
	_94513_obj+=jule::Str(")", 1);
	return _94513_obj;
}



inline jule::Str _229da5351_gen_builtin_make_call_expr_model(jule::Ptr<_1e5870218_BuiltinMakeCallExprModel> _95841_m) {
	jule::Str _95913_obj = jule::Str();
	if ((*(_95841_m))._field_len != nullptr) {
		_95913_obj+=_229da5351_gen_expr((*(_95841_m))._field_len);
	} else {
		_95913_obj+=jule::Str("0", 1);
	}
	if ((*(_95841_m))._field_cap != nullptr) {
		_95913_obj+=jule::Str(",", 1) + _229da5351_gen_expr((*(_95841_m))._field_cap);
	}
	if ((*((*((*((*(_95841_m))._field_kind))._method_slc()))._field_elem))._method_enm() != nullptr) {
		_95913_obj+=jule::Str(",", 1);
		_95913_obj+=_229da5351_get_init_expr((*((*((*(_95841_m))._field_kind))._method_slc()))._field_elem);
		if ((*(_95841_m))._field_cap != nullptr) {
			_95913_obj=(_1e891c504_gen_type_kind((*(_95841_m))._field_kind) + jule::Str("::alloc(", 8)) + _95913_obj;
		} else {
			_95913_obj=(_1e891c504_gen_type_kind((*(_95841_m))._field_kind) + jule::Str("::alloc_def(", 12)) + _95913_obj;
		}
	} else {
		_95913_obj=(_1e891c504_gen_type_kind((*(_95841_m))._field_kind) + jule::Str("::alloc(", 8)) + _95913_obj;
	}
	_95913_obj+=jule::Str(")", 1);
	return _95913_obj;
}



inline jule::Str _229da5351_gen_builtin_append_call_expr_model_assign_opt(jule::Bool _9865_same_dest,jule::Str& _9876_dest_expr,jule::Ptr<_229d681e3_TypeKind>& _98810_dest_kind,jule::Ptr<_1e5870218_SliceExprModel>& _98910_s,jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>& _99010_m) {
	jule::Str _99113_obj = jule::Str();
	if ((!(_9865_same_dest))) {
		_99113_obj+=_9876_dest_expr;
		_99113_obj+=jule::Str(" = jule::alloc_for_append(", 26);
		_99113_obj+=_229da5351_gen_expr_model((*(_99010_m))._field_dest);
		_99113_obj+=jule::Str(",", 1);
		_99113_obj+=_22866a079_itoa(static_cast<jule::I64>((*(_98910_s))._field_elems.len()));
		_99113_obj+=jule::Str(");", 2);
	}
	{
		auto &expr = (*(_98910_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_5078594064:;
		if (it != expr.end()) {
			jule::Any _229da5351_e = *it;
			{
				_99113_obj+=_9876_dest_expr;
				_99113_obj+=jule::Str(".push(", 6);
				_99113_obj+=_229da5351_gen_expr_model(_229da5351_e);
				_99113_obj+=jule::Str(");", 2);
			}
			_iter_next_5078594064:;
			++it;
			goto _iter_begin_5078594064;
		}
		_iter_end_5078594064:;
	}
	return _99113_obj;
}



inline std::tuple<jule::Str,jule::Bool> _229da5351_gen_builtin_append_call_expr_model_assign(jule::Any _100950_dest,jule::Ptr<_1e5870218_BuiltinAppendCallExprModel> _100971_m) {
	jule::Bool _1009110_optimized = jule::Bool();
	{
		auto &_match_expr{ (*(_100971_m))._field_elements };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_SliceExprModel>>()) {
			_case_begin_5079161168:;
			{
				{
					auto &_match_expr{ _100950_dest };
					
					if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
						_case_begin_5079162672:;
						{
							jule::Ptr<_1e5870218_SliceExprModel> _101421_s = (*(_100971_m))._field_elements.operator jule::Ptr<_1e5870218_SliceExprModel>();
							jule::Str _101517_dest_expr = _229da5351_gen_expr_model(_100950_dest);
							jule::Ptr<_1e58b0654_Var> _101621_dest_var = _100950_dest.operator jule::Ptr<_1e58b0654_Var>();
							jule::Bool _101717_same_dest = (*(_100971_m))._field_dest == _101621_dest_var;
							_1009110_optimized = true;
							return std::make_tuple(_229da5351_gen_builtin_append_call_expr_model_assign_opt(_101717_same_dest,_101517_dest_expr,(*((*(_101621_dest_var))._field_kind))._field_kind,_101421_s,_100971_m),_1009110_optimized);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1e5870218_StructSubIdentExprModel>>()) {
						_case_begin_5079162784:;
						{
							jule::Ptr<_1e5870218_SliceExprModel> _102221_s = (*(_100971_m))._field_elements.operator jule::Ptr<_1e5870218_SliceExprModel>();
							jule::Str _102317_dest_expr = _229da5351_gen_expr_model(_100950_dest);
							jule::Ptr<_228e0d025_FieldIns> _102421_dest_field = (*(_100950_dest.operator jule::Ptr<_1e5870218_StructSubIdentExprModel>()))._field_field;
							jule::Bool _102517_same_dest = (*(_100971_m))._field_dest == _102421_dest_field;
							_1009110_optimized = true;
							return std::make_tuple(_229da5351_gen_builtin_append_call_expr_model_assign_opt(_102517_same_dest,_102317_dest_expr,(*(_102421_dest_field))._field_kind,_102221_s,_100971_m),_1009110_optimized);
						}
					}
					_match_end_5079162400:;
				}
			}
		}
		_match_end_5079161056:;
	}
	_1009110_optimized = false;
	return std::make_tuple(_229da5351_gen_builtin_append_call_expr_model(_100971_m),_1009110_optimized);
}



inline jule::Str _229da5351_gen_builtin_append_call_expr_model(jule::Ptr<_1e5870218_BuiltinAppendCallExprModel> _103443_m) {
	jule::Str _103513_obj = jule::Str("jule::append(", 13);
	_103513_obj+=_229da5351_gen_expr_model((*(_103443_m))._field_dest);
	_103513_obj+=jule::Str(",", 1);
	_103513_obj+=_229da5351_gen_expr_model((*(_103443_m))._field_elements);
	_103513_obj+=jule::Str(")", 1);
	return _103513_obj;
}



inline jule::Str _229da5351_gen_builtin_clone_call_expr_model(jule::Ptr<_1e5870218_BuiltinCloneCallExprModel> _104342_m) {
	jule::Str _104413_obj = jule::Str("jule::clone(", 12);
	_104413_obj+=_229da5351_gen_expr_model((*(_104342_m))._field_expr);
	_104413_obj+=jule::Str(")", 1);
	return _104413_obj;
}



inline jule::Str _229da5351_gen_sizeof_expr_model(jule::Ptr<_1e5870218_SizeofExprModel> _105030_m) {
	jule::Str _105113_obj = jule::Str("sizeof(", 7);
	_105113_obj+=_229da5351_gen_expr((*(_105030_m))._field_expr);
	_105113_obj+=jule::Str(")", 1);
	return _105113_obj;
}



inline jule::Str _229da5351_gen_alignof_expr_model(jule::Ptr<_1e5870218_AlignofExprModel> _105731_m) {
	jule::Str _105813_obj = jule::Str("alignof(", 8);
	_105813_obj+=_229da5351_gen_expr((*(_105731_m))._field_expr);
	_105813_obj+=jule::Str(")", 1);
	return _105813_obj;
}



inline jule::Str _229da5351_gen_rune_expr_model(jule::Ptr<_1e5870218_RuneExprModel> _106424_m) {
	if ((*(_106424_m))._field_code <= 127LL) {
		jule::Str _106617_b = _229da5351_sbtoa(static_cast<jule::U8>(static_cast<jule::U8>((*(_106424_m))._field_code)));
		if (_106617_b == jule::Str("'", 1)) {
			_106617_b=jule::Str("\\'", 2);
		}
		return (jule::Str("'", 1) + _106617_b) + jule::Str("'", 1);
	}
	return _229da5351_i64toa(static_cast<jule::I64>(static_cast<jule::I64>((*(_106424_m))._field_code)));
}



inline jule::Str _229da5351_gen_struct_static_ident_expr_model(jule::Ptr<_1e5870218_StructStaticIdentExprModel> _107543_m) {
	jule::Str _107613_obj = _1e88e3e7b_struct_ins_out_ident((*(_107543_m))._field_structure);
	_107613_obj+=jule::Str("::", 2);
	_107613_obj+=_1e88e3e7b_fn_ins_out_ident((*(_107543_m))._field_method);
	return _107613_obj;
}



inline jule::Str _229da5351_gen_integrated_to_str_expr_model(jule::Ptr<_1e5870218_IntegratedToStrExprModel> _108241_m) {
	jule::Str _108313_obj = jule::Str("jule::to_str(", 13);
	_108313_obj+=_229da5351_gen_expr_model((*(_108241_m))._field_expr);
	_108313_obj+=jule::Str(")", 1);
	return _108313_obj;
}



inline jule::Str _229da5351_gen_ternary_expr_model(jule::Ptr<_1e5870218_TernaryExprModel> _108931_m) {
	jule::Str _109013_obj = jule::Str("((", 2);
	_109013_obj+=_229da5351_gen_expr_model((*(_108931_m))._field_condition);
	_109013_obj+=jule::Str(") ? (", 5);
	_109013_obj+=_229da5351_gen_expr_model((*(_108931_m))._field_true_expr);
	_109013_obj+=jule::Str(") : (", 5);
	_109013_obj+=_229da5351_gen_expr_model((*(_108931_m))._field_false_expr);
	_109013_obj+=jule::Str("))", 2);
	return _109013_obj;
}



inline jule::Str _229da5351_gen_backend_emit_expr_model(jule::Ptr<_1e5870218_BackendEmitExprModel> _110036_m) {
	return (*(_110036_m))._field_code;
}



inline jule::Str _229da5351_gen_free_expr_model(jule::Ptr<_1e5870218_FreeExprModel> _110428_m) {
	if (_2275c8280_RC) {
		return _229da5351_gen_expr((*(_110428_m))._field_expr) + jule::Str(".dealloc()", 10);
	}
	return _229da5351_gen_expr((*(_110428_m))._field_expr) + jule::Str(".__free()", 9);
}



inline jule::Str _229da5351_gen_expr_model(jule::Any _111123_m) {
	{
		auto &_match_expr{ _111123_m };
		
		if (_match_expr.type_is<jule::Ptr<_229d681e3_TypeKind>>()) {
			_case_begin_5079210368:;
			{
				return _1e891c504_gen_type_kind(_111123_m.operator jule::Ptr<_229d681e3_TypeKind>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e856e8a4_Const>>()) {
			_case_begin_5079213808:;
			{
				return _229da5351_gen_const_expr_model(_111123_m.operator jule::Ptr<_1e856e8a4_Const>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e58b0654_Var>>()) {
			_case_begin_5079213088:;
			{
				return _229da5351_gen_var_expr_model(_111123_m.operator jule::Ptr<_1e58b0654_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229b5076c_Trait>>()) {
			_case_begin_5079213184:;
			{
				return _1e88e3e7b_trait_out_ident(_111123_m.operator jule::Ptr<_229b5076c_Trait>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228e0d025_Struct>>()) {
			_case_begin_5079213344:;
			{
				return _229da5351_gen_struct_expr_model(_111123_m.operator jule::Ptr<_228e0d025_Struct>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_228e0d025_StructIns>>()) {
			_case_begin_5079213440:;
			{
				return _229da5351_gen_struct_ins_expr_model(_111123_m.operator jule::Ptr<_228e0d025_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_229b6ebcb_FnIns>>()) {
			_case_begin_5079213536:;
			{
				return _229da5351_gen_fn_ins_expr_model_common(_111123_m.operator jule::Ptr<_229b6ebcb_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BinopExprModel>>()) {
			_case_begin_5079212576:;
			{
				return _229da5351_gen_binop_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_UnaryExprModel>>()) {
			_case_begin_5079212672:;
			{
				return _229da5351_gen_unary_expr_model(_111123_m.operator jule::Ptr<_1e5870218_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_StructLitExprModel>>()) {
			_case_begin_5079212768:;
			{
				return _229da5351_gen_struct_lit_expr_model(_111123_m.operator jule::Ptr<_1e5870218_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_AllocStructLitExprModel>>()) {
			_case_begin_5079212864:;
			{
				return _229da5351_gen_alloc_struct_lit_expr_model(_111123_m.operator jule::Ptr<_1e5870218_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_CastingExprModel>>()) {
			_case_begin_5079214640:;
			{
				return _229da5351_gen_casting_expr_model(_111123_m.operator jule::Ptr<_1e5870218_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_FnCallExprModel>>()) {
			_case_begin_5079214736:;
			{
				return _229da5351_gen_fn_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_SliceExprModel>>()) {
			_case_begin_5079214832:;
			{
				return _229da5351_gen_slice_expr_model(_111123_m.operator jule::Ptr<_1e5870218_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_ArrayExprModel>>()) {
			_case_begin_5079214928:;
			{
				return _229da5351_gen_array_expr_model(_111123_m.operator jule::Ptr<_1e5870218_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_IndexingExprModel>>()) {
			_case_begin_5079215024:;
			{
				return _229da5351_gen_indexing_expr_model(_111123_m.operator jule::Ptr<_1e5870218_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_AnonFnExprModel>>()) {
			_case_begin_5079215136:;
			{
				return _229da5351_gen_anon_fn_expr_model(_111123_m.operator jule::Ptr<_1e5870218_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_MapExprModel>>()) {
			_case_begin_5079215248:;
			{
				return _229da5351_gen_map_expr_model(_111123_m.operator jule::Ptr<_1e5870218_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_SlicingExprModel>>()) {
			_case_begin_5079215360:;
			{
				return _229da5351_gen_slicing_expr_model(_111123_m.operator jule::Ptr<_1e5870218_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_TraitSubIdentExprModel>>()) {
			_case_begin_5079215472:;
			{
				return _229da5351_gen_trait_sub_ident_expr_model(_111123_m.operator jule::Ptr<_1e5870218_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_StructSubIdentExprModel>>()) {
			_case_begin_5079215584:;
			{
				return _229da5351_gen_struct_sub_ident_expr_model(_111123_m.operator jule::Ptr<_1e5870218_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_CommonIdentExprModel>>()) {
			_case_begin_5079215696:;
			{
				return _229da5351_gen_common_ident_expr_model(_111123_m.operator jule::Ptr<_1e5870218_CommonIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_CommonSubIdentExprModel>>()) {
			_case_begin_5079215808:;
			{
				return _229da5351_gen_common_sub_ident_expr_model(_111123_m.operator jule::Ptr<_1e5870218_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_TupleExprModel>>()) {
			_case_begin_5079215920:;
			{
				return _229da5351_gen_tuple_expr_model(_111123_m.operator jule::Ptr<_1e5870218_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinOutCallExprModel>>()) {
			_case_begin_5079216032:;
			{
				return _229da5351_gen_builtin_out_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinOutlnCallExprModel>>()) {
			_case_begin_5079216144:;
			{
				return _229da5351_gen_builtin_outln_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinNewCallExprModel>>()) {
			_case_begin_5079216256:;
			{
				return _229da5351_gen_builtin_new_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>>()) {
			_case_begin_5079216368:;
			{
				return _229da5351_gen_builtin_panic_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinAssertCallExprModel>>()) {
			_case_begin_5079216480:;
			{
				return _229da5351_gen_builtin_assert_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>>()) {
			_case_begin_5079216592:;
			{
				return _229da5351_gen_builtin_error_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinMakeCallExprModel>>()) {
			_case_begin_5079216704:;
			{
				return _229da5351_gen_builtin_make_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>>()) {
			_case_begin_5079216816:;
			{
				return _229da5351_gen_builtin_append_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BuiltinCloneCallExprModel>>()) {
			_case_begin_5079216928:;
			{
				return _229da5351_gen_builtin_clone_call_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_SizeofExprModel>>()) {
			_case_begin_5079217040:;
			{
				return _229da5351_gen_sizeof_expr_model(_111123_m.operator jule::Ptr<_1e5870218_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_AlignofExprModel>>()) {
			_case_begin_5079217152:;
			{
				return _229da5351_gen_alignof_expr_model(_111123_m.operator jule::Ptr<_1e5870218_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_RuneExprModel>>()) {
			_case_begin_5079217264:;
			{
				return _229da5351_gen_rune_expr_model(_111123_m.operator jule::Ptr<_1e5870218_RuneExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_StructStaticIdentExprModel>>()) {
			_case_begin_5079217376:;
			{
				return _229da5351_gen_struct_static_ident_expr_model(_111123_m.operator jule::Ptr<_1e5870218_StructStaticIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_IntegratedToStrExprModel>>()) {
			_case_begin_5079217488:;
			{
				return _229da5351_gen_integrated_to_str_expr_model(_111123_m.operator jule::Ptr<_1e5870218_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_TernaryExprModel>>()) {
			_case_begin_5079217600:;
			{
				return _229da5351_gen_ternary_expr_model(_111123_m.operator jule::Ptr<_1e5870218_TernaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_BackendEmitExprModel>>()) {
			_case_begin_5079217712:;
			{
				return _229da5351_gen_backend_emit_expr_model(_111123_m.operator jule::Ptr<_1e5870218_BackendEmitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1e5870218_FreeExprModel>>()) {
			_case_begin_5079217824:;
			{
				return _229da5351_gen_free_expr_model(_111123_m.operator jule::Ptr<_1e5870218_FreeExprModel>());
			}
		}
		else {
			_case_begin_5079211792:;
			{
				return jule::Str("<unimplemented_expression_model>", 32);
			}
		}
		_match_end_5079209696:;
	}
}



inline jule::Str _229da5351_gen_expr(jule::Any _124117_e) {
	jule::Str _124213_obj = _229da5351_gen_expr_model(_124117_e);
	if ((_124213_obj.len() == 0LL) || (_124213_obj[0LL] != '(')) {
		return _124213_obj;
	}
	{
		auto &_match_expr{ _124117_e };
		
		if (_match_expr.type_is<jule::Ptr<_1e5870218_BinopExprModel>>()) {
			_case_begin_5079283216:;
			{
				_124213_obj=_124213_obj.slice(1LL,_124213_obj.len() - 1LL);
			}
		}
		_match_end_5079282336:;
	}
	return _124213_obj;
}



inline jule::Str _229da5351_gen_val(jule::Ptr<_229d70d33_Value> _125416_v) {
	if ((*((*(_125416_v))._field_data))._method_is_const()) {
		return _229da5351_gen_const_expr((*(_125416_v))._field_data);
	}
	return _229da5351_gen_expr((*((*(_125416_v))._field_data))._field_model);
}



inline jule::Str _229da5351_get_init_expr(jule::Ptr<_229d681e3_TypeKind> _126122_t) {
	if ((*(_126122_t))._method_ptr() != nullptr) {
		return jule::Str("nullptr", 7);
	}
	jule::Ptr<_1e56be485_Enum> _126613_enm = (*(_126122_t))._method_enm();
	if (_126613_enm != nullptr) {
		return _229da5351_gen_val((*((*(_126613_enm))._field_items[0LL]))._field_value);
	}
	return _1e891c504_gen_type_kind(_126122_t) + jule::Str("()", 2);
}



inline jule::Str _1e88e4520_get_derive_fn_decl_clone(jule::Ptr<_228e0d025_Struct>& _730_s) {
	jule::Str _813_obj = _1e891c504_gen_struct_kind(_730_s);
	_813_obj+=jule::Str(" clone(void) const ", 19);
	return _813_obj;
}



inline jule::Str _1e88e4520_get_derive_fn_def_clone(jule::Ptr<_228e0d025_Struct>& _1329_s) {
	jule::Str _1413_obj = _1e891c504_gen_struct_kind(_1329_s);
	_1413_obj+=jule::Str(" ", 1) + _1413_obj;
	_1413_obj+=jule::Str("::clone(void) const ", 20);
	return _1413_obj;
}



inline jule::Str _1e88e3e7b_as_ident(jule::Str _2513_ident) {
	return jule::Str("_", 1) + _2513_ident;
}



inline jule::Str _1e88e3e7b_as_jt(jule::Str _2814_id) {
	if ((97LL <= _2814_id[0LL]) && (_2814_id[0LL] <= 122LL)) {
		_2814_id[0LL]-=32LL;
	}
	return jule::Str("jule::", 6) + _2814_id;
}



inline jule::Str _1e88e3e7b_get_addr_as_ident(jule::Uintptr _3622_addr) {
	return jule::Str("_", 1) + _22866a079_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_3622_addr)),15LL);
}



inline jule::Str _1e88e3e7b_as_out_ident(jule::Str _4517_ident,jule::Uintptr _4529_addr) {
	if (_4529_addr != 0LL) {
		jule::Str _4717_obj = _1e88e3e7b_get_addr_as_ident(_4529_addr);
		_4717_obj+=jule::Str("_", 1);
		_4717_obj+=_4517_ident;
		return _4717_obj;
	}
	return _1e88e3e7b_as_ident(_4517_ident);
}



inline jule::Str _1e88e3e7b_as_local_ident(jule::Int _6119_row,jule::Int _6129_col,jule::Str _6139_ident) {
	jule::Str _6213_obj = _22866a079_itoa(_6119_row);
	_6213_obj+=_22866a079_itoa(_6129_col);
	_6213_obj+=jule::Str("_", 1);
	_6213_obj+=_6139_ident;
	return _1e88e3e7b_as_ident(_6213_obj);
}



inline jule::Str _1e88e3e7b_fn_out_ident(jule::Ptr<_229b6ebcb_Fn>& _7018_f) {
	{
		
		if ((*(_7018_f))._field_cpp_linked) {
			_case_begin_5079332976:;
			{
				return (*(_7018_f))._field_ident;
			}
		}
		else if ((*(_7018_f))._field_ident == jule::Str("main", 4)) {
			_case_begin_5079333408:;
			{
				return jule::Str("entry_point", 11);
			}
		}
		else if ((*(_7018_f))._method_is_method()) {
			_case_begin_5079331520:;
			{
				if ((*(_7018_f))._field_statically) {
					return jule::Str("_static_method_", 15) + (*(_7018_f))._field_ident;
				}
				return jule::Str("_method_", 8) + (*(_7018_f))._field_ident;
			}
		}
		else {
			_case_begin_5079329248:;
			{
				return _1e88e3e7b_as_out_ident((*(_7018_f))._field_ident,static_cast<jule::Uintptr>((*((*(_7018_f))._field_token._field_file))._method_addr()));
			}
		}
		_match_end_5079329072:;
	}
}



inline jule::Str _1e88e3e7b_fn_ins_out_ident(jule::Ptr<_229b6ebcb_FnIns>& _9026_f) {
	if ((*(_9026_f))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*((*(_9026_f))._field_decl))._field_ident;
	}
	if ((*((*(_9026_f))._field_decl))._field_cpp_linked || ((*(_9026_f))._field_generics.len() == 0LL)) {
		return _1e88e3e7b_fn_out_ident((*(_9026_f))._field_decl);
	}
	{
		auto &expr = (*((*(_9026_f))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_5079343520:;
		if (it != expr.end()) {
			jule::Int _1e88e3e7b_i = it - expr.begin();
			jule::Ptr<_229b6ebcb_FnIns> _1e88e3e7b_ins = *it;
			{
				if ((*(_1e88e3e7b_ins))._method_same(_9026_f)) {
					jule::Str _10121_obj = _1e88e3e7b_fn_out_ident((*(_9026_f))._field_decl);
					_10121_obj+=jule::Str("_", 1);
					_10121_obj+=_22866a079_itoa(_1e88e3e7b_i);
					return _10121_obj;
				}
			}
			_iter_next_5079343520:;
			++it;
			_1e88e3e7b_i++;
			goto _iter_begin_5079343520;
		}
		_iter_end_5079343520:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1e88e3e7b_trait_out_ident(jule::Ptr<_229b5076c_Trait> _11220_t) {
	if ((*(_11220_t))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*(_11220_t))._field_ident;
	}
	return _1e88e3e7b_as_out_ident((*(_11220_t))._field_ident,static_cast<jule::Uintptr>((*((*(_11220_t))._field_token._field_file))._method_addr()));
}



inline jule::Str _1e88e3e7b_param_out_ident(jule::Ptr<_229b6ebcb_Param>& _12021_p) {
	if (_228d7aadb_is_anon_ident((*(_12021_p))._field_ident) || _228d7aadb_is_ignore_ident((*(_12021_p))._field_ident)) {
		return jule::Str();
	}
	return _1e88e3e7b_as_local_ident((*(_12021_p))._field_token._field_row,(*(_12021_p))._field_token._field_column,(*(_12021_p))._field_ident);
}



inline jule::Str _1e88e3e7b_struct_out_ident(jule::Ptr<_228e0d025_Struct>& _12822_s) {
	if ((*(_12822_s))._field_cpp_linked) {
		if (_1e891c504_has_directive((*(_12822_s))._field_directives,jule::Str("typedef", 7))) {
			return (*(_12822_s))._field_ident;
		}
		return jule::Str("struct ", 7) + (*(_12822_s))._field_ident;
	}
	return _1e88e3e7b_as_out_ident((*(_12822_s))._field_ident,static_cast<jule::Uintptr>((*((*(_12822_s))._field_token._field_file))._method_addr()));
}



inline jule::Str _1e88e3e7b_struct_ins_out_ident(jule::Ptr<_228e0d025_StructIns>& _13930_s) {
	if ((*((*(_13930_s))._field_decl))._field_cpp_linked || ((*(_13930_s))._field_generics.len() == 0LL)) {
		return _1e88e3e7b_struct_out_ident((*(_13930_s))._field_decl);
	}
	{
		auto &expr = (*((*(_13930_s))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_5079365552:;
		if (it != expr.end()) {
			jule::Int _1e88e3e7b_i = it - expr.begin();
			jule::Ptr<_228e0d025_StructIns> _1e88e3e7b_ins = *it;
			{
				if ((*(_1e88e3e7b_ins))._method_same(_13930_s)) {
					jule::Str _14621_obj = _1e88e3e7b_struct_out_ident((*(_13930_s))._field_decl);
					_14621_obj+=jule::Str("_", 1);
					_14621_obj+=_22866a079_itoa(_1e88e3e7b_i);
					return _14621_obj;
				}
			}
			_iter_next_5079365552:;
			++it;
			_1e88e3e7b_i++;
			goto _iter_begin_5079365552;
		}
		_iter_end_5079365552:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1e88e3e7b_field_out_ident(jule::Ptr<_228e0d025_Field>& _15721_f) {
	if ((*((*(_15721_f))._field_owner))._field_cpp_linked) {
		return (*(_15721_f))._field_ident;
	}
	return jule::Str("_field_", 7) + (*(_15721_f))._field_ident;
}



inline jule::Str _1e88e3e7b_var_out_ident(jule::Ptr<_1e58b0654_Var> _16522_v) {
	{
		
		if ((*(_16522_v))._field_cpp_linked) {
			_case_begin_5079377152:;
			{
				return (*(_16522_v))._field_ident;
			}
		}
		else if ((*(_16522_v))._field_ident == jule::Str("error", 5)) {
			_case_begin_5079375328:;
			{
				return jule::Str("except.error", 12);
			}
		}
		else if ((*(_16522_v))._field_ident == jule::Str("self", 4)) {
			_case_begin_5079375072:;
			{
				if ((*((*((*(_16522_v))._field_kind))._field_kind))._method_sptr() != nullptr) {
					return jule::Str("this->self", 10);
				}
				return jule::Str("(*this)", 7);
			}
		}
		else if ((*(_16522_v))._field_scope != nullptr) {
			_case_begin_5079374704:;
			{
				return _1e88e3e7b_as_local_ident((*(_16522_v))._field_token._field_row,(*(_16522_v))._field_token._field_column,(*(_16522_v))._field_ident);
			}
		}
		else {
			_case_begin_5079372832:;
			{
				return _1e88e3e7b_as_out_ident((*(_16522_v))._field_ident,static_cast<jule::Uintptr>((*((*(_16522_v))._field_token._field_file))._method_addr()));
			}
		}
		_match_end_5079371088:;
	}
}



inline jule::Str _1e88e3e7b_iter_begin_label_ident(jule::Uintptr _18827_it) {
	return jule::Str("_iter_begin_", 12) + _22866a079_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_18827_it)));
}



inline jule::Str _1e88e3e7b_iter_end_label_ident(jule::Uintptr _19325_it) {
	return jule::Str("_iter_end_", 10) + _22866a079_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_19325_it)));
}



inline jule::Str _1e88e3e7b_iter_next_label_ident(jule::Uintptr _19826_it) {
	return jule::Str("_iter_next_", 11) + _22866a079_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_19826_it)));
}



inline jule::Str _1e88e3e7b_label_ident(jule::Str _20316_ident) {
	return jule::Str("_julec_label_", 13) + _20316_ident;
}



inline jule::Str _1e88e3e7b_match_end_label_ident(jule::Uintptr _20826_m) {
	return jule::Str("_match_end_", 11) + _22866a079_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_20826_m)));
}



inline jule::Str _1e88e3e7b_case_begin_label_ident(jule::Uintptr _21327_c) {
	return jule::Str("_case_begin_", 12) + _22866a079_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_21327_c)));
}



inline jule::Ptr<_228d31971_Directive> _1e891c504_find_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>& _2524_directives,jule::Str _2555_tag) {
	{
		auto &expr = _2524_directives;
		auto it = expr.begin();
		_iter_begin_5079393024:;
		if (it != expr.end()) {
			jule::Ptr<_228d31971_Directive> _1e891c504_dr = *it;
			{
				if ((*(_1e891c504_dr))._field_tag._field_kind == _2555_tag) {
					return _1e891c504_dr;
				}
			}
			_iter_next_5079393024:;
			++it;
			goto _iter_begin_5079393024;
		}
		_iter_end_5079393024:;
	}
	return nullptr;
}



inline jule::Bool _1e891c504_has_directive(jule::Slice<jule::Ptr<_228d31971_Directive>>& _3519_directives,jule::Str _3550_tag) {
	return _1e891c504_find_directive(_3519_directives,_3550_tag) != nullptr;
}



inline jule::Str _1e891c504_gen_prim_kind(jule::Ptr<_229d681e3_Prim> _4018_p) {
	return _1e88e3e7b_as_jt((*(_4018_p))._method_to_str());
}



inline jule::Str _1e891c504_gen_tuple_kind(jule::Ptr<_229d681e3_Tuple> _4523_t) {
	jule::Str _4613_obj = jule::Str("std::tuple<", 11);
	{
		auto &expr = (*(_4523_t))._field_types;
		auto it = expr.begin();
		_iter_begin_5079402448:;
		if (it != expr.end()) {
			jule::Ptr<_229d681e3_TypeKind> _1e891c504_tk = *it;
			{
				_4613_obj+=_1e891c504_gen_type_kind(_1e891c504_tk);
				_4613_obj+=jule::Str(",", 1);
			}
			_iter_next_5079402448:;
			++it;
			goto _iter_begin_5079402448;
		}
		_iter_end_5079402448:;
	}
	_4613_obj=_4613_obj.slice(0LL,_4613_obj.len() - 1LL);
	_4613_obj+=jule::Str(">", 1);
	return _4613_obj;
}



inline jule::Str _1e891c504_as_sptr_kind(jule::Str _5717_elem) {
	jule::Str _5813_obj = _1e88e3e7b_as_jt(jule::Str("ptr", 3));
	_5813_obj+=jule::Str("<", 1);
	_5813_obj+=_5717_elem;
	_5813_obj+=jule::Str(">", 1);
	return _5813_obj;
}



inline jule::Str _1e891c504_gen_sptr_kind(jule::Ptr<_229d681e3_Sptr> _6622_sptr) {
	return _1e891c504_as_sptr_kind(_1e891c504_gen_type_kind((*(_6622_sptr))._field_elem));
}



inline jule::Str _1e891c504_gen_ptr_kind(jule::Ptr<_229d681e3_Ptr> _7121_p) {
	
	if ((*(_7121_p))._method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _7713_elem = _1e891c504_gen_type_kind((*(_7121_p))._field_elem);
	_7713_elem+=jule::Str("*", 1);
	return _7713_elem;
}



inline jule::Str _1e891c504_gen_enum_kind(jule::Ptr<_1e56be485_Enum> _8322_e) {
	return _1e891c504_gen_type_kind((*((*(_8322_e))._field_kind))._field_kind);
}



inline jule::Str _1e891c504_as_slice_kind(jule::Ptr<_229d681e3_TypeKind> _8722_elem) {
	jule::Str _8813_obj = _1e88e3e7b_as_jt(jule::Str("slice", 5));
	_8813_obj+=jule::Str("<", 1);
	_8813_obj+=_1e891c504_gen_type_kind(_8722_elem);
	_8813_obj+=jule::Str(">", 1);
	return _8813_obj;
}



inline jule::Str _1e891c504_gen_slice_kind(jule::Ptr<_229d681e3_Slc> _9623_s) {
	return _1e891c504_as_slice_kind((*(_9623_s))._field_elem);
}



inline jule::Str _1e891c504_gen_map_kind(jule::Ptr<_229d681e3_Map> _10121_m) {
	jule::Str _10213_obj = _1e88e3e7b_as_jt(jule::Str("map", 3));
	_10213_obj+=jule::Str("<", 1);
	_10213_obj+=_1e891c504_gen_type_kind((*(_10121_m))._field_key);
	_10213_obj+=jule::Str(",", 1);
	_10213_obj+=_1e891c504_gen_type_kind((*(_10121_m))._field_val);
	_10213_obj+=jule::Str(">", 1);
	return _10213_obj;
}



inline jule::Str _1e891c504_gen_trait_kind_from_ident(jule::Str _11130_ident) {
	jule::Str _11213_obj = _1e88e3e7b_as_jt(jule::Str("trait", 5));
	_11213_obj+=jule::Str("<", 1);
	_11213_obj+=_11130_ident;
	_11213_obj+=jule::Str(">", 1);
	return _11213_obj;
}



inline jule::Str _1e891c504_gen_trait_kind(jule::Ptr<_229b5076c_Trait> _12019_t) {
	jule::Str _1219_ident = _1e88e3e7b_trait_out_ident(_12019_t);
	return _1e891c504_gen_trait_kind_from_ident(_1219_ident);
}



inline jule::Str _1e891c504_gen_struct_kind(jule::Ptr<_228e0d025_Struct> _12620_s) {
	jule::Str _12713_rep = jule::Str();
	if ((*(_12620_s))._field_cpp_linked && (!(_1e891c504_has_directive((*(_12620_s))._field_directives,jule::Str("typedef", 7))))) {
		_12713_rep+=jule::Str("struct ", 7);
	}
	_12713_rep+=_1e88e3e7b_struct_out_ident(_12620_s);
	return _12713_rep;
}



inline jule::Str _1e891c504_gen_struct_kind_ins(jule::Ptr<_228e0d025_StructIns> _13728_s) {
	if ((*((*(_13728_s))._field_decl))._field_cpp_linked) {
		jule::Str _13917_ident = _1e88e3e7b_struct_ins_out_ident(_13728_s);
		if ((*(_13728_s))._field_generics.len() > 0LL) {
			_13917_ident+=jule::Str("<", 1);
			{
				auto &expr = (*(_13728_s))._field_generics;
				auto it = expr.begin();
				_iter_begin_5079435664:;
				if (it != expr.end()) {
					jule::Ptr<_229d681e3_TypeKind> _1e891c504_g = *it;
					{
						_13917_ident+=_1e891c504_gen_type_kind(_1e891c504_g);
						_13917_ident+=jule::Str(",", 1);
					}
					_iter_next_5079435664:;
					++it;
					goto _iter_begin_5079435664;
				}
				_iter_end_5079435664:;
			}
			_13917_ident=_13917_ident.slice(0LL,_13917_ident.len() - 1LL);
			_13917_ident+=jule::Str(">", 1);
		}
		jule::Ptr<_228d31971_Directive> _14913_d = _1e891c504_find_directive((*((*(_13728_s))._field_decl))._field_directives,jule::Str("namespace", 9));
		if (_14913_d != nullptr) {
			_13917_ident=(_229da5351_concat_all_parts((*(_14913_d))._field_args) + jule::Str("::", 2)) + _13917_ident;
		}
		return _13917_ident;
	}
	return _1e88e3e7b_struct_ins_out_ident(_13728_s);
}



inline jule::Str _1e891c504_gen_array_kind(jule::Ptr<_229d681e3_Arr> _15923_a) {
	jule::Str _16013_obj = _1e88e3e7b_as_jt(jule::Str("array", 5));
	_16013_obj+=jule::Str("<", 1);
	_16013_obj+=_1e891c504_gen_type_kind((*(_15923_a))._field_elem);
	_16013_obj+=jule::Str(",", 1);
	_16013_obj+=_22866a079_itoa((*(_15923_a))._field_n);
	_16013_obj+=jule::Str(">", 1);
	return _16013_obj;
}



inline jule::Str _1e891c504_gen_fn_anon_decl(jule::Ptr<_229b6ebcb_FnIns> _16925_f) {
	jule::Str _17013_decl = _1e8949c3a_gen_fn_ins_result(_16925_f);
	_17013_decl+=jule::Str("(", 1);
	if ((*(_16925_f))._field_params.len() > 0LL) {
		{
			auto &expr = (*(_16925_f))._field_params;
			auto it = expr.begin();
			_iter_begin_5079449984:;
			if (it != expr.end()) {
				jule::Ptr<_229b6ebcb_ParamIns> _1e891c504_param = *it;
				{
					if ((*((*(_1e891c504_param))._field_decl))._method_is_self()) {
						goto _iter_next_5079449984;
					}
					_17013_decl+=_1e8949c3a_gen_param_ins_prototype(_1e891c504_param);
					_17013_decl+=jule::Str(",", 1);
				}
				_iter_next_5079449984:;
				++it;
				goto _iter_begin_5079449984;
			}
			_iter_end_5079449984:;
		}
		_17013_decl=_17013_decl.slice(0LL,_17013_decl.len() - 1LL);
	} else {
		_17013_decl+=jule::Str("void", 4);
	}
	_17013_decl+=jule::Str(")", 1);
	return _17013_decl;
}



inline jule::Str _1e891c504_gen_fn_kind(jule::Ptr<_229b6ebcb_FnIns> _19220_f) {
	jule::Str _19313_obj = _1e88e3e7b_as_jt(jule::Str("fn", 2));
	_19313_obj+=jule::Str("<", 1);
	_19313_obj+=_1e891c504_gen_fn_anon_decl(_19220_f);
	_19313_obj+=jule::Str(">", 1);
	return _19313_obj;
}



inline jule::Str _1e891c504_gen_type_kind(jule::Ptr<_229d681e3_TypeKind> _20122_k) {
	{
		
		if ((*(_20122_k))._method_cpp_linked()) {
			_case_begin_5079459792:;
			{
				return (*(_20122_k))._field_cpp_ident;
			}
		}
		else if ((*(_20122_k))._method_prim() != nullptr) {
			_case_begin_5079459888:;
			{
				return _1e891c504_gen_prim_kind((*(_20122_k))._method_prim());
			}
		}
		else if ((*(_20122_k))._method_tup() != nullptr) {
			_case_begin_5079459360:;
			{
				return _1e891c504_gen_tuple_kind((*(_20122_k))._method_tup());
			}
		}
		else if ((*(_20122_k))._method_sptr() != nullptr) {
			_case_begin_5079459456:;
			{
				return _1e891c504_gen_sptr_kind((*(_20122_k))._method_sptr());
			}
		}
		else if ((*(_20122_k))._method_ptr() != nullptr) {
			_case_begin_5079458992:;
			{
				return _1e891c504_gen_ptr_kind((*(_20122_k))._method_ptr());
			}
		}
		else if ((*(_20122_k))._method_enm() != nullptr) {
			_case_begin_5079459088:;
			{
				return _1e891c504_gen_enum_kind((*(_20122_k))._method_enm());
			}
		}
		else if ((*(_20122_k))._method_slc() != nullptr) {
			_case_begin_5079459184:;
			{
				return _1e891c504_gen_slice_kind((*(_20122_k))._method_slc());
			}
		}
		else if ((*(_20122_k))._method_map() != nullptr) {
			_case_begin_5079458336:;
			{
				return _1e891c504_gen_map_kind((*(_20122_k))._method_map());
			}
		}
		else if ((*(_20122_k))._method_trt() != nullptr) {
			_case_begin_5079458432:;
			{
				return _1e891c504_gen_trait_kind((*(_20122_k))._method_trt());
			}
		}
		else if ((*(_20122_k))._method_strct() != nullptr) {
			_case_begin_5079458528:;
			{
				return _1e891c504_gen_struct_kind_ins((*(_20122_k))._method_strct());
			}
		}
		else if ((*(_20122_k))._method_arr() != nullptr) {
			_case_begin_5079458624:;
			{
				return _1e891c504_gen_array_kind((*(_20122_k))._method_arr());
			}
		}
		else if ((*(_20122_k))._method_fnc() != nullptr) {
			_case_begin_5079460000:;
			{
				return _1e891c504_gen_fn_kind((*(_20122_k))._method_fnc());
			}
		}
		else {
			_case_begin_5079457984:;
			{
				return jule::Str("[<unimplemented_type_kind>]", 27);
			}
		}
		_match_end_5079457808:;
	}
}



inline void _1e8949c3a_add_indent(void) {
	_1e8949c3a_INDENT.push(9LLU);
}



inline void _1e8949c3a_done_indent(void) {
	_1e8949c3a_INDENT=_1e8949c3a_INDENT.slice(0LL,_1e8949c3a_INDENT.len() - 1LL);
}



inline jule::Str _1e8949c3a_indent(void) {
	return static_cast<jule::Str>(_1e8949c3a_INDENT);
}



inline jule::Bool _1e8949c3a_is_cpp_header_file(jule::Str _6823_path) {
	jule::Int _699_offset = _6823_path.rfind(jule::Str(".", 1));
	if (_699_offset == -1LL) {
		return false;
	}
	return _2275ec68e_is_valid_header_ext(_6823_path.slice(_699_offset));
}



inline jule::Str _1e8949c3a_gen_links(jule::Ptr<_228c91a35_IR>& _7719_ir) {
	jule::Str _7813_obj = jule::Str();
	{
		auto &expr = (*(_7719_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079493232:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_pkg = *it;
			{
				{
					
					if ((!((*(_1e8949c3a_pkg))._field_cpp_linked))) {
						_case_begin_5079494928:;
						{
							goto _iter_next_5079493232;
						}
					}
					else if (_2275ec68e_is_std_header_path((*(_1e8949c3a_pkg))._field_path)) {
						_case_begin_5079495040:;
						{
							_7813_obj+=jule::Str("#include ", 9);
							_7813_obj+=(*(_1e8949c3a_pkg))._field_path;
							_7813_obj+=jule::Str("\n", 1);
						}
					}
					_match_end_5079494704:;
				}
			}
			_iter_next_5079493232:;
			++it;
			goto _iter_begin_5079493232;
		}
		_iter_end_5079493232:;
	}
	{
		auto &expr = (*(_7719_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079498912:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_pkg = *it;
			{
				{
					
					if ((!((*(_1e8949c3a_pkg))._field_cpp_linked))) {
						_case_begin_5079499696:;
						{
							goto _iter_next_5079498912;
						}
					}
					else if (_1e8949c3a_is_cpp_header_file((*(_1e8949c3a_pkg))._field_path)) {
						_case_begin_5079499808:;
						{
							_7813_obj+=jule::Str("#include \"", 10);
							_7813_obj+=(*(_1e8949c3a_pkg))._field_path;
							_7813_obj+=jule::Str("\"\n", 2);
						}
					}
					_match_end_5079499536:;
				}
			}
			_iter_next_5079498912:;
			++it;
			goto _iter_begin_5079498912;
		}
		_iter_end_5079498912:;
	}
	return _7813_obj;
}



inline jule::Str _1e8949c3a_gen_fn_result(jule::Ptr<_229b6ebcb_Fn>& _10623_f) {
	if ((*(_10623_f))._method_is_void()) {
		if ((*(_10623_f))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*(_10623_f))._field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _1e891c504_gen_type_kind((*((*((*(_10623_f))._field_result))._field_kind))._field_kind)) + jule::Str(">", 1);
	}
	return _1e891c504_gen_type_kind((*((*((*(_10623_f))._field_result))._field_kind))._field_kind);
}



inline jule::Str _1e8949c3a_gen_fn_ins_result(jule::Ptr<_229b6ebcb_FnIns>& _12027_f) {
	if ((*((*(_12027_f))._field_decl))._method_is_void()) {
		if ((*((*(_12027_f))._field_decl))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*((*(_12027_f))._field_decl))._field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _1e891c504_gen_type_kind((*(_12027_f))._field_result)) + jule::Str(">", 1);
	}
	return _1e891c504_gen_type_kind((*(_12027_f))._field_result);
}



inline jule::Str _1e8949c3a_gen_param_prototype(jule::Ptr<_229b6ebcb_Param>& _13429_p) {
	jule::Str _13513_obj = jule::Str();
	if ((*(_13429_p))._field_variadic) {
		_13513_obj+=_1e88e3e7b_as_jt(jule::Str("slice", 5));
		_13513_obj+=jule::Str("<", 1);
		_13513_obj+=_1e891c504_gen_type_kind((*((*(_13429_p))._field_kind))._field_kind);
		_13513_obj+=jule::Str(">", 1);
	} else {
		_13513_obj+=_1e891c504_gen_type_kind((*((*(_13429_p))._field_kind))._field_kind);
	}
	return _13513_obj;
}



inline jule::Str _1e8949c3a_gen_param_ins(jule::Ptr<_229b6ebcb_ParamIns>& _14823_p) {
	jule::Str _14913_obj = _1e8949c3a_gen_param_ins_prototype(_14823_p);
	_14913_obj+=jule::Str(" ", 1);
	_14913_obj+=_1e88e3e7b_param_out_ident((*(_14823_p))._field_decl);
	return _14913_obj;
}



inline jule::Str _1e8949c3a_gen_param_ins_prototype(jule::Ptr<_229b6ebcb_ParamIns>& _15633_p) {
	jule::Str _15713_obj = jule::Str();
	if ((*((*(_15633_p))._field_decl))._field_variadic) {
		_15713_obj+=_1e88e3e7b_as_jt(jule::Str("slice", 5));
		_15713_obj+=jule::Str("<", 1);
		_15713_obj+=_1e891c504_gen_type_kind((*(_15633_p))._field_kind);
		_15713_obj+=jule::Str(">", 1);
	} else {
		_15713_obj+=_1e891c504_gen_type_kind((*(_15633_p))._field_kind);
	}
	if ((*((*(_15633_p))._field_decl))._field_reference) {
		_15713_obj+=jule::Str("&", 1);
	}
	return _15713_obj;
}



inline jule::Str _1e8949c3a_gen_param(jule::Ptr<_229b6ebcb_Param>& _17519_p) {
	jule::Str _17613_obj = _1e8949c3a_gen_param_prototype(_17519_p);
	if ((((*(_17519_p))._field_ident != jule::Str()) && (!(_228d7aadb_is_ignore_ident((*(_17519_p))._field_ident)))) && (!(_228d7aadb_is_anon_ident((*(_17519_p))._field_ident)))) {
		_17613_obj+=jule::Str(" ", 1);
		_17613_obj+=_1e88e3e7b_param_out_ident(_17519_p);
	}
	return _17613_obj;
}



inline jule::Str _1e8949c3a_gen_params(jule::Slice<jule::Ptr<_229b6ebcb_Param>>& _18520_params) {
	{
		
		if (_18520_params.len() == 0LL) {
			_case_begin_5079536496:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_18520_params.len() == 1LL) && (*(_18520_params[0LL]))._method_is_self()) {
			_case_begin_5079536592:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_5079536208:;
	}
	jule::Str _19413_obj = jule::Str("(", 1);
	{
		auto &expr = _18520_params;
		auto it = expr.begin();
		_iter_begin_5079539808:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Param> _1e8949c3a_p = *it;
			{
				if ((!((*(_1e8949c3a_p))._method_is_self()))) {
					_19413_obj+=_1e8949c3a_gen_param(_1e8949c3a_p) + jule::Str(",", 1);
				}
			}
			_iter_next_5079539808:;
			++it;
			goto _iter_begin_5079539808;
		}
		_iter_end_5079539808:;
	}
	_19413_obj=_19413_obj.slice(0LL,_19413_obj.len() - 1LL);
	return _19413_obj + jule::Str(")", 1);
}



inline jule::Str _1e8949c3a_gen_params_ins(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>& _20624_params) {
	{
		
		if (_20624_params.len() == 0LL) {
			_case_begin_5079545040:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_20624_params.len() == 1LL) && (*((*(_20624_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_5079545152:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_5079542672:;
	}
	jule::Str _21513_obj = jule::Str("(", 1);
	{
		auto &expr = _20624_params;
		auto it = expr.begin();
		_iter_begin_5079549152:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_ParamIns> _1e8949c3a_p = *it;
			{
				if ((!((*((*(_1e8949c3a_p))._field_decl))._method_is_self()))) {
					_21513_obj+=_1e8949c3a_gen_param_ins(_1e8949c3a_p) + jule::Str(",", 1);
				}
			}
			_iter_next_5079549152:;
			++it;
			goto _iter_begin_5079549152;
		}
		_iter_end_5079549152:;
	}
	_21513_obj=_21513_obj.slice(0LL,_21513_obj.len() - 1LL);
	return _21513_obj + jule::Str(")", 1);
}



inline jule::Str _1e8949c3a_gen_params_prototypes(jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>& _22831_params) {
	{
		
		if (_22831_params.len() == 0LL) {
			_case_begin_5079555120:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_22831_params.len() == 1LL) && (*((*(_22831_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_5079555232:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_5079554720:;
	}
	jule::Str _23713_obj = jule::Str("(", 1);
	{
		auto &expr = _22831_params;
		auto it = expr.begin();
		_iter_begin_5079559120:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_ParamIns> _1e8949c3a_p = *it;
			{
				if ((!((*((*(_1e8949c3a_p))._field_decl))._method_is_self()))) {
					_23713_obj+=_1e8949c3a_gen_param_ins_prototype(_1e8949c3a_p);
					_23713_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_5079559120:;
			++it;
			goto _iter_begin_5079559120;
		}
		_iter_end_5079559120:;
	}
	_23713_obj=_23713_obj.slice(0LL,_23713_obj.len() - 1LL);
	return _23713_obj + jule::Str(")", 1);
}



inline jule::Str _1e8949c3a_gen_trait(jule::Ptr<_229b5076c_Trait>& _25119_t) {
	
	jule::Str _2539_outid = _1e88e3e7b_trait_out_ident(_25119_t);
	jule::Str _25513_obj = jule::Str("struct ", 7);
	_25513_obj+=_2539_outid;
	_25513_obj+=jule::Str(" {\n", 3);
	_25513_obj+=jule::Str("\t", 1);
	_25513_obj+=jule::Str("virtual ~", 9);
	_25513_obj+=_2539_outid;
	_25513_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto &expr = (*(_25119_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_5079569472:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e8949c3a_f = *it;
			{
				_25513_obj+=jule::Str("\t", 1);
				_25513_obj+=jule::Str("virtual ", 8);
				_25513_obj+=_1e8949c3a_gen_fn_result(_1e8949c3a_f);
				_25513_obj+=jule::Str(" _method_", 9);
				_25513_obj+=(*(_1e8949c3a_f))._field_ident;
				_25513_obj+=_1e8949c3a_gen_params((*(_1e8949c3a_f))._field_params);
				_25513_obj+=jule::Str(" {", 2);
				if ((!((*(_1e8949c3a_f))._method_is_void()))) {
					_25513_obj+=jule::Str(" return {}; ", 12);
				}
				_25513_obj+=jule::Str("}\n", 2);
			}
			_iter_next_5079569472:;
			++it;
			goto _iter_begin_5079569472;
		}
		_iter_end_5079569472:;
	}
	_25513_obj+=jule::Str("};", 2);
	return _25513_obj;
}



inline jule::Str _1e8949c3a_gen_traits_tbl(jule::Ptr<_229d56533_SymbolTable>& _28024_tbl) {
	jule::Str _28113_obj = jule::Str();
	{
		auto &expr = (*(_28024_tbl))._field_traits;
		auto it = expr.begin();
		_iter_begin_5079576752:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> _1e8949c3a_t = *it;
			{
				_28113_obj+=_1e8949c3a_gen_trait(_1e8949c3a_t);
				_28113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5079576752:;
			++it;
			goto _iter_begin_5079576752;
		}
		_iter_end_5079576752:;
	}
	return _28113_obj;
}



inline jule::Str _1e8949c3a_gen_traits_pkg(jule::Ptr<_1e53308ee_Package>& _29024_pkg) {
	jule::Str _29113_obj = jule::Str();
	{
		auto &expr = (*(_29024_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5079580336:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e8949c3a_tbl = *it;
			{
				_29113_obj+=_1e8949c3a_gen_traits_tbl(_1e8949c3a_tbl);
			}
			_iter_next_5079580336:;
			++it;
			goto _iter_begin_5079580336;
		}
		_iter_end_5079580336:;
	}
	return _29113_obj;
}



inline jule::Str _1e8949c3a_gen_traits(jule::Ptr<_228c91a35_IR>& _29920_ir) {
	jule::Str _30013_obj = jule::Str();
	{
		auto &expr = (*(_29920_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079583696:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_u = *it;
			{
				if ((!((*(_1e8949c3a_u))._field_cpp_linked))) {
					_30013_obj+=_1e8949c3a_gen_traits_pkg((*(_1e8949c3a_u))._field_package);
				}
			}
			_iter_next_5079583696:;
			++it;
			goto _iter_begin_5079583696;
		}
		_iter_end_5079583696:;
	}
	_30013_obj+=_1e8949c3a_gen_traits_pkg((*(_29920_ir))._field_main);
	return _30013_obj;
}



inline jule::Str _1e8949c3a_gen_trait_prototype(jule::Ptr<_229b5076c_Trait>& _31125_t) {
	jule::Str _31213_obj = jule::Str("struct ", 7);
	_31213_obj+=_1e88e3e7b_trait_out_ident(_31125_t);
	_31213_obj+=jule::Str(";", 1);
	return _31213_obj;
}



inline jule::Str _1e8949c3a_gen_trait_prototypes(jule::Ptr<_1e53308ee_Package>& _31930_p) {
	jule::Str _32013_obj = jule::Str();
	{
		auto &expr = (*(_31930_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5079591328:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e8949c3a_f = *it;
			{
				{
					auto &expr = (*(_1e8949c3a_f))._field_traits;
					auto it = expr.begin();
					_iter_begin_5079593168:;
					if (it != expr.end()) {
						jule::Ptr<_229b5076c_Trait> &_1e8949c3a_t = *it;
						{
							if ((*(_1e8949c3a_t))._field_token._field_id != 0LLU) {
								_32013_obj+=_1e8949c3a_gen_trait_prototype(_1e8949c3a_t);
								_32013_obj+=jule::Str("\n", 1);
							}
						}
						_iter_next_5079593168:;
						++it;
						goto _iter_begin_5079593168;
					}
					_iter_end_5079593168:;
				}
			}
			_iter_next_5079591328:;
			++it;
			goto _iter_begin_5079591328;
		}
		_iter_end_5079591328:;
	}
	return _32013_obj;
}



inline jule::Str _1e8949c3a_gen_struct_plain_prototype(jule::Ptr<_228e0d025_Struct>& _33336_s) {
	jule::Str _33413_obj = jule::Str();
	{
		auto &expr = (*(_33336_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5079592256:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_StructIns> _1e8949c3a_ins = *it;
			{
				_33413_obj+=jule::Str("\nstruct ", 8);
				_33413_obj+=_1e88e3e7b_struct_ins_out_ident(_1e8949c3a_ins);
				_33413_obj+=jule::Str(";", 1);
				_33413_obj+=jule::Str("\n", 1);
			}
			_iter_next_5079592256:;
			++it;
			goto _iter_begin_5079592256;
		}
		_iter_end_5079592256:;
	}
	return _33413_obj;
}



inline jule::Str _1e8949c3a_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_228e0d025_Struct>>& _34537_structs) {
	jule::Str _34613_obj = jule::Str();
	{
		auto &expr = _34537_structs;
		auto it = expr.begin();
		_iter_begin_5079600576:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _1e8949c3a_s = *it;
			{
				if ((!((*(_1e8949c3a_s))._field_cpp_linked)) && ((*(_1e8949c3a_s))._field_token._field_id != 0LLU)) {
					_34613_obj+=_1e8949c3a_gen_struct_plain_prototype(_1e8949c3a_s);
					_34613_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_5079600576:;
			++it;
			goto _iter_begin_5079600576;
		}
		_iter_end_5079600576:;
	}
	return _34613_obj;
}



inline jule::Str _1e8949c3a_gen_struct_traits(jule::Ptr<_228e0d025_Struct>& _35723_s) {
	if ((*(_35723_s))._field_implements.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _36213_obj = jule::Str(": ", 2);
	{
		auto &expr = (*(_35723_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_5079607072:;
		if (it != expr.end()) {
			jule::Ptr<_229b5076c_Trait> &_1e8949c3a_i = *it;
			{
				_36213_obj+=jule::Str("public ", 7);
				_36213_obj+=_1e88e3e7b_trait_out_ident(_1e8949c3a_i);
				_36213_obj+=jule::Str(",", 1);
			}
			_iter_next_5079607072:;
			++it;
			goto _iter_begin_5079607072;
		}
		_iter_end_5079607072:;
	}
	_36213_obj=_36213_obj.slice(0LL,_36213_obj.len() - 1LL);
	return _36213_obj;
}



inline jule::Str _1e8949c3a_gen_field_decl(jule::Ptr<_228e0d025_FieldIns>& _37324_f) {
	jule::Str _37413_obj = _1e891c504_gen_type_kind((*(_37324_f))._field_kind);
	_37413_obj+=jule::Str(" ", 1);
	_37413_obj+=_1e88e3e7b_field_out_ident((*(_37324_f))._field_decl);
	_37413_obj+=jule::Str(" = ", 3);
	if ((*(_37324_f))._field_default == nullptr) {
		_37413_obj+=_229da5351_get_init_expr((*(_37324_f))._field_kind);
	} else {
		_37413_obj+=_229da5351_gen_expr((*((*(_37324_f))._field_default))._field_model);
	}
	_37413_obj+=jule::Str(";", 1);
	return _37413_obj;
}



inline jule::Str _1e8949c3a_gen_struct_self_field_type_kind(jule::Ptr<_228e0d025_StructIns>& _38941_s) {
	return _1e891c504_as_sptr_kind(_1e891c504_gen_struct_kind_ins(_38941_s));
}



inline jule::Str _1e8949c3a_gen_struct_self_field(jule::Ptr<_228e0d025_StructIns>& _39431_s) {
	jule::Str _39513_obj = _1e8949c3a_gen_struct_self_field_type_kind(_39431_s);
	_39513_obj+=jule::Str(" self;", 6);
	return _39513_obj;
}



inline jule::Str _1e8949c3a_gen_struct_self_field_init_st(jule::Ptr<_228e0d025_StructIns>& _40039_s) {
	jule::Str _40113_obj = jule::Str("this->self = ", 13);
	_40113_obj+=_1e8949c3a_gen_struct_self_field_type_kind(_40039_s);
	_40113_obj+=jule::Str("::make(this, nullptr);", 22);
	return _40113_obj;
}



inline jule::Str _1e8949c3a_gen_struct_constructor(jule::Ptr<_228e0d025_StructIns>& _40732_s) {
	jule::Str _40813_obj = _1e88e3e7b_struct_ins_out_ident(_40732_s);
	_40813_obj+=jule::Str("(", 1);
	if ((*(_40732_s))._field_fields.len() > 0LL) {
		{
			auto &expr = (*(_40732_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5079625232:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_FieldIns> _1e8949c3a_f = *it;
				{
					_40813_obj+=_1e891c504_gen_type_kind((*(_1e8949c3a_f))._field_kind);
					_40813_obj+=jule::Str(" __param_", 9);
					_40813_obj+=(*((*(_1e8949c3a_f))._field_decl))._field_ident;
					_40813_obj+=jule::Str(", ", 2);
				}
				_iter_next_5079625232:;
				++it;
				goto _iter_begin_5079625232;
			}
			_iter_end_5079625232:;
		}
		_40813_obj=_40813_obj.slice(0LL,_40813_obj.len() - 2LL);
	} else {
		_40813_obj+=jule::Str("void", 4);
	}
	_40813_obj+=jule::Str(")", 1);
	if ((*(_40732_s))._field_fields.len() > 0LL) {
		_40813_obj+=jule::Str(": ", 2);
		{
			auto &expr = (*(_40732_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5079630960:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_FieldIns> &_1e8949c3a_f = *it;
				{
					_40813_obj+=_1e88e3e7b_field_out_ident((*(_1e8949c3a_f))._field_decl);
					_40813_obj+=jule::Str("(", 1);
					_40813_obj+=jule::Str("__param_", 8);
					_40813_obj+=(*((*(_1e8949c3a_f))._field_decl))._field_ident;
					_40813_obj+=jule::Str("), ", 3);
				}
				_iter_next_5079630960:;
				++it;
				goto _iter_begin_5079630960;
			}
			_iter_end_5079630960:;
		}
		_40813_obj=_40813_obj.slice(0LL,_40813_obj.len() - 2LL);
	}
	_40813_obj+=jule::Str(" {", 2);
	if ((*((*(_40732_s))._field_decl))._method_has_ref_accessible()) {
		_40813_obj+=jule::Str("\n", 1);
		_1e8949c3a_add_indent();
		_40813_obj+=_1e8949c3a_indent();
		_40813_obj+=_1e8949c3a_gen_struct_self_field_init_st(_40732_s);
		_40813_obj+=jule::Str("\n", 1);
		_1e8949c3a_done_indent();
		_40813_obj+=jule::Str("\n", 1);
		_40813_obj+=_1e8949c3a_indent();
	}
	_40813_obj+=jule::Str("}", 1);
	return _40813_obj;
}



inline jule::Str _1e8949c3a_gen_struct_destructor(jule::Ptr<_228e0d025_StructIns>& _45131_s) {
	jule::Bool _4529_disposed = (*((*(_45131_s))._field_decl))._method_is_implements(_1e614d809_BUILTIN_TRAIT_DISPOSE);
	jule::Bool _4539_ref_access = (*((*(_45131_s))._field_decl))._method_has_ref_accessible();
	if ((!(_4539_ref_access)) && (!(_4529_disposed))) {
		return jule::Str();
	}
	jule::Str _45913_obj = jule::Str("~", 1);
	_45913_obj+=_1e88e3e7b_struct_ins_out_ident(_45131_s);
	_45913_obj+=jule::Str("(void) { ", 9);
	if (_4529_disposed) {
		jule::Ptr<_229b6ebcb_Fn> _46413_dispose_method = (*(_45131_s))._method_find_method(jule::Str("dispose", 7),false);
		_45913_obj+=jule::Str("this->", 6);
		_45913_obj+=_1e88e3e7b_fn_out_ident(_46413_dispose_method);
		_45913_obj+=jule::Str("(); ", 4);
	}
	if (_4539_ref_access) {
		_45913_obj+=jule::Str("this->self.ref = nullptr; ", 26);
	}
	_45913_obj+=jule::Str("}", 1);
	return _45913_obj;
}



inline jule::Str _1e8949c3a_gen_struct_operators(jule::Ptr<_228e0d025_StructIns>& _47830_s) {
	jule::Str _4799_out_ident = _1e88e3e7b_struct_ins_out_ident(_47830_s);
	jule::Str _48013_obj = jule::Str();
	_48013_obj+=_1e8949c3a_indent();
	if (_227532edc_OPT_INLINE) {
		_48013_obj+=jule::Str("inline ", 7);
	}
	_48013_obj+=jule::Str("bool operator==(const ", 22);
	_48013_obj+=_4799_out_ident;
	_48013_obj+=jule::Str(" &_Src) const {", 15);
	if ((*(_47830_s))._field_fields.len() > 0LL) {
		_1e8949c3a_add_indent();
		_48013_obj+=jule::Str("\n", 1);
		_48013_obj+=_1e8949c3a_indent();
		_48013_obj+=jule::Str("return ", 7);
		_1e8949c3a_add_indent();
		jule::Int _49517_n = 0LL;
		{
			auto &expr = (*(_47830_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5079658784:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_FieldIns> _1e8949c3a_f = *it;
				{
					jule::Ptr<_228e0d025_StructIns> _49817_strct = (*((*(_1e8949c3a_f))._field_kind))._method_strct();
					if (((_49817_strct != nullptr) && ((*(_49817_strct))._field_decl != nullptr)) && (*((*(_49817_strct))._field_decl))._field_cpp_linked) {
						goto _iter_next_5079658784;
					}
					(_49517_n)++;
					_48013_obj+=jule::Str("\n", 1);
					_48013_obj+=_1e8949c3a_indent();
					_48013_obj+=jule::Str("this->", 6);
					jule::Str _50717_f_ident = _1e88e3e7b_field_out_ident((*(_1e8949c3a_f))._field_decl);
					_48013_obj+=_50717_f_ident;
					_48013_obj+=jule::Str(" == _Src.", 9);
					_48013_obj+=_50717_f_ident;
					_48013_obj+=jule::Str(" &&", 3);
				}
				_iter_next_5079658784:;
				++it;
				goto _iter_begin_5079658784;
			}
			_iter_end_5079658784:;
		}
		_1e8949c3a_done_indent();
		if (_49517_n > 0LL) {
			_48013_obj=_48013_obj.slice(0LL,_48013_obj.len() - 3LL);
		} else {
			_48013_obj+=jule::Str("true", 4);
		}
		_48013_obj+=jule::Str(";\n", 2);
		_1e8949c3a_done_indent();
		_48013_obj+=_1e8949c3a_indent();
		_48013_obj+=jule::Str("}", 1);
	} else {
		_48013_obj+=jule::Str(" return true; }", 15);
	}
	_48013_obj+=jule::Str("\n\n", 2);
	_48013_obj+=_1e8949c3a_indent();
	if (_227532edc_OPT_INLINE) {
		_48013_obj+=jule::Str("inline ", 7);
	}
	_48013_obj+=jule::Str("bool operator!=(const ", 22);
	_48013_obj+=_4799_out_ident;
	_48013_obj+=jule::Str(" &_Src) const { return !this->operator==(_Src); }", 49);
	return _48013_obj;
}



inline jule::Str _1e8949c3a_gen_struct_derive_defs_prototypes(jule::Ptr<_228e0d025_StructIns>& _53739_s) {
	jule::Str _53813_obj = jule::Str();
	if ((*((*(_53739_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_53813_obj+=_1e8949c3a_indent();
		_53813_obj+=_1e88e4520_get_derive_fn_decl_clone((*(_53739_s))._field_decl);
		_53813_obj+=jule::Str(";\n\n", 3);
	}
	return _53813_obj;
}



inline jule::Str _1e8949c3a_gen_struct_ins_prototype(jule::Ptr<_228e0d025_StructIns>& _54934_s) {
	jule::Str _55013_obj = jule::Str("struct ", 7);
	jule::Str _5519_out_ident = _1e88e3e7b_struct_ins_out_ident(_54934_s);
	_55013_obj+=_5519_out_ident;
	_55013_obj+=_1e8949c3a_gen_struct_traits((*(_54934_s))._field_decl);
	_55013_obj+=jule::Str(" {\n", 3);
	jule::Bool _5579_ref_access = (*((*(_54934_s))._field_decl))._method_has_ref_accessible();
	_1e8949c3a_add_indent();
	if (_5579_ref_access) {
		_55013_obj+=_1e8949c3a_indent();
		_55013_obj+=_1e8949c3a_gen_struct_self_field(_54934_s);
		_55013_obj+=jule::Str("\n\n", 2);
	}
	if ((*(_54934_s))._field_fields.len() > 0LL) {
		{
			auto &expr = (*(_54934_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5079685648:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_FieldIns> _1e8949c3a_f = *it;
				{
					_55013_obj+=_1e8949c3a_indent();
					_55013_obj+=_1e8949c3a_gen_field_decl(_1e8949c3a_f);
					_55013_obj+=jule::Str("\n", 1);
				}
				_iter_next_5079685648:;
				++it;
				goto _iter_begin_5079685648;
			}
			_iter_end_5079685648:;
		}
		_55013_obj+=jule::Str("\n\n", 2);
		_55013_obj+=_1e8949c3a_indent();
		_55013_obj+=_1e8949c3a_gen_struct_constructor(_54934_s);
		_55013_obj+=jule::Str("\n\n", 2);
	}
	_55013_obj+=_1e8949c3a_indent();
	_55013_obj+=_1e8949c3a_gen_struct_destructor(_54934_s);
	_55013_obj+=jule::Str("\n\n", 2);
	_55013_obj+=_1e8949c3a_indent();
	_55013_obj+=_5519_out_ident;
	if (_5579_ref_access) {
		_55013_obj+=jule::Str("(void) { ", 9);
		_55013_obj+=_1e8949c3a_gen_struct_self_field_init_st(_54934_s);
		_55013_obj+=jule::Str(" }\n\n", 4);
	} else {
		_55013_obj+=jule::Str("(void) = default;\n\n", 19);
	}
	{
		auto &expr = (*(_54934_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_5079682848:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e8949c3a_f = *it;
			{
				_55013_obj+=_1e8949c3a_gen_fn_prototype(_1e8949c3a_f,true);
				_55013_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5079682848:;
			++it;
			goto _iter_begin_5079682848;
		}
		_iter_end_5079682848:;
	}
	_55013_obj+=_1e8949c3a_gen_struct_derive_defs_prototypes(_54934_s);
	_55013_obj+=_1e8949c3a_gen_struct_operators(_54934_s);
	_55013_obj+=jule::Str("\n", 1);
	_1e8949c3a_done_indent();
	_55013_obj+=_1e8949c3a_indent() + jule::Str("};", 2);
	return _55013_obj;
}



inline jule::Str _1e8949c3a_gen_struct_prototype(jule::Ptr<_228e0d025_Struct>& _60830_s) {
	jule::Str _60913_obj = jule::Str();
	{
		auto &expr = (*(_60830_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5079699152:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_StructIns> _1e8949c3a_ins = *it;
			{
				_60913_obj+=_1e8949c3a_gen_struct_ins_prototype(_1e8949c3a_ins);
				_60913_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5079699152:;
			++it;
			goto _iter_begin_5079699152;
		}
		_iter_end_5079699152:;
	}
	return _60913_obj;
}



inline jule::Str _1e8949c3a_gen_struct_prototypes(jule::Slice<jule::Ptr<_228e0d025_Struct>>& _61831_structs) {
	jule::Str _61913_obj = jule::Str();
	{
		auto &expr = _61831_structs;
		auto it = expr.begin();
		_iter_begin_5079702320:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _1e8949c3a_s = *it;
			{
				if ((!((*(_1e8949c3a_s))._field_cpp_linked)) && ((*(_1e8949c3a_s))._field_token._field_id != 0LLU)) {
					_61913_obj+=_1e8949c3a_gen_struct_prototype(_1e8949c3a_s);
					_61913_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_5079702320:;
			++it;
			goto _iter_begin_5079702320;
		}
		_iter_end_5079702320:;
	}
	return _61913_obj;
}



inline jule::Str _1e8949c3a_gen_fn_decl_head(jule::Ptr<_229b6ebcb_FnIns>& _62926_f,jule::Bool _62937_method) {
	jule::Str _63013_obj = jule::Str();
	if (_62937_method && (*((*(_62926_f))._field_decl))._field_statically) {
		_63013_obj+=jule::Str("static ", 7);
	}
	if (_227532edc_OPT_INLINE && (!((*((*(_62926_f))._field_decl))._method_is_entry_point()))) {
		_63013_obj+=jule::Str("inline ", 7);
	}
	_63013_obj+=_1e8949c3a_gen_fn_ins_result(_62926_f) + jule::Str(" ", 1);
	if ((!(_62937_method)) && ((*((*(_62926_f))._field_decl))._field_owner != nullptr)) {
		_63013_obj+=_1e88e3e7b_struct_ins_out_ident((*(_62926_f))._field_owner);
		_63013_obj+=jule::Str("::", 2);
	}
	_63013_obj+=_1e88e3e7b_fn_ins_out_ident(_62926_f);
	return _63013_obj;
}



inline jule::Str _1e8949c3a_gen_fn_prototype(jule::Ptr<_229b6ebcb_Fn>& _65126_f,jule::Bool _65134_method) {
	jule::Str _65213_obj = jule::Str();
	{
		auto &expr = (*(_65126_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5079717296:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_FnIns> _1e8949c3a_c = *it;
			{
				_65213_obj+=_1e8949c3a_indent();
				_65213_obj+=_1e8949c3a_gen_fn_decl_head(_1e8949c3a_c,_65134_method);
				_65213_obj+=_1e8949c3a_gen_params_prototypes((*(_1e8949c3a_c))._field_params);
				_65213_obj+=jule::Str(";\n", 2);
			}
			_iter_next_5079717296:;
			++it;
			goto _iter_begin_5079717296;
		}
		_iter_end_5079717296:;
	}
	return _65213_obj;
}



inline jule::Str _1e8949c3a_gen_fn_prototypes(jule::Ptr<_1e53308ee_Package>& _66327_pkg) {
	jule::Str _66413_obj = jule::Str();
	{
		auto &expr = (*(_66327_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_5079722448:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e8949c3a_file = *it;
			{
				{
					auto &expr = (*(_1e8949c3a_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5079724288:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_Fn> _1e8949c3a_f = *it;
						{
							if ((!((*(_1e8949c3a_f))._field_cpp_linked)) && ((*(_1e8949c3a_f))._field_token._field_id != 0LLU)) {
								_66413_obj+=_1e8949c3a_gen_fn_prototype(_1e8949c3a_f,false);
							}
						}
						_iter_next_5079724288:;
						++it;
						goto _iter_begin_5079724288;
					}
					_iter_end_5079724288:;
				}
			}
			_iter_next_5079722448:;
			++it;
			goto _iter_begin_5079722448;
		}
		_iter_end_5079722448:;
	}
	return _66413_obj;
}



inline jule::Str _1e8949c3a_gen_prototypes(jule::Ptr<_228c91a35_IR>& _67624_ir) {
	jule::Str _67713_obj = jule::Str();
	{
		auto &expr = (*(_67624_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079723360:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_u = *it;
			{
				if ((!((*(_1e8949c3a_u))._field_cpp_linked))) {
					_67713_obj+=_1e8949c3a_gen_trait_prototypes((*(_1e8949c3a_u))._field_package);
				}
			}
			_iter_next_5079723360:;
			++it;
			goto _iter_begin_5079723360;
		}
		_iter_end_5079723360:;
	}
	_67713_obj+=_1e8949c3a_gen_trait_prototypes((*(_67624_ir))._field_main);
	_67713_obj+=_1e8949c3a_gen_struct_plain_prototypes((*(_67624_ir))._field_ordered._field_structs);
	_67713_obj+=_1e8949c3a_gen_traits(_67624_ir);
	_67713_obj+=jule::Str("\n", 1);
	_67713_obj+=_1e8949c3a_gen_struct_prototypes((*(_67624_ir))._field_ordered._field_structs);
	{
		auto &expr = (*(_67624_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079734752:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_u = *it;
			{
				if ((!((*(_1e8949c3a_u))._field_cpp_linked))) {
					_67713_obj+=_1e8949c3a_gen_fn_prototypes((*(_1e8949c3a_u))._field_package);
				}
			}
			_iter_next_5079734752:;
			++it;
			goto _iter_begin_5079734752;
		}
		_iter_end_5079734752:;
	}
	_67713_obj+=_1e8949c3a_gen_fn_prototypes((*(_67624_ir))._field_main);
	return _67713_obj;
}



inline jule::Str _1e8949c3a_gen_var_init_expr(jule::Ptr<_1e58b0654_Var>& _70527_v,jule::Str _70536_init) {
	jule::Str _70613_obj = jule::Str();
	if ((*(_70527_v))._field_statically) {
		_70613_obj+=jule::Str("static ", 7);
	}
	_70613_obj+=_1e891c504_gen_type_kind((*((*(_70527_v))._field_kind))._field_kind);
	_70613_obj+=jule::Str(" ", 1);
	if ((*(_70527_v))._field_reference) {
		_70613_obj+=jule::Str("&", 1);
	}
	_70613_obj+=_1e88e3e7b_var_out_ident(_70527_v);
	if (_70536_init != jule::Str()) {
		_70613_obj+=jule::Str(" = ", 3);
		_70613_obj+=_70536_init;
	}
	_70613_obj+=jule::Str(";", 1);
	return _70613_obj;
}



inline jule::Str _1e8949c3a_gen_var(jule::Ptr<_1e58b0654_Var> _72616_v) {
	if (_228d7aadb_is_ignore_ident((*(_72616_v))._field_ident)) {
		return jule::Str();
	}
	if (((*(_72616_v))._field_value != nullptr) && ((*((*(_72616_v))._field_value))._field_expr != nullptr)) {
		if ((*((*((*(_72616_v))._field_value))._field_data))._field_model != nullptr) {
			return _1e8949c3a_gen_var_init_expr(_72616_v,_229da5351_gen_val((*(_72616_v))._field_value));
		}
		return _1e8949c3a_gen_var_init_expr(_72616_v,jule::Str());
	}
	return _1e8949c3a_gen_var_init_expr(_72616_v,_229da5351_get_init_expr((*((*(_72616_v))._field_kind))._field_kind));
}



inline jule::Str _1e8949c3a_gen_pkg_globals(jule::Ptr<_1e53308ee_Package>& _74025_p,jule::Str& _74043_global_initializers) {
	jule::Str _74113_obj = jule::Str();
	{
		auto &expr = (*(_74025_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5079755744:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e8949c3a_f = *it;
			{
				{
					auto &expr = (*(_1e8949c3a_f))._field_vars;
					auto it = expr.begin();
					_iter_begin_5079757584:;
					if (it != expr.end()) {
						jule::Ptr<_1e58b0654_Var> _1e8949c3a_v = *it;
						{
							if ((((*(_1e8949c3a_v))._field_token._field_id != 0LLU) && (!((*(_1e8949c3a_v))._field_cpp_linked))) && (!((*(_1e8949c3a_v))._field_constant))) {
								_74113_obj+=_1e891c504_gen_type_kind((*((*(_1e8949c3a_v))._field_kind))._field_kind);
								_74113_obj+=jule::Str(" ", 1);
								if ((*(_1e8949c3a_v))._field_reference) {
									_74113_obj+=jule::Str("&", 1);
								}
								_74113_obj+=_1e88e3e7b_var_out_ident(_1e8949c3a_v);
								_74113_obj+=jule::Str(";\n", 2);
								_74043_global_initializers+=_1e8949c3a_indent();
								_74043_global_initializers+=_1e88e3e7b_var_out_ident(_1e8949c3a_v);
								if (((*(_1e8949c3a_v))._field_value != nullptr) && ((*((*(_1e8949c3a_v))._field_value))._field_expr != nullptr)) {
									if ((*((*((*(_1e8949c3a_v))._field_value))._field_data))._field_model != nullptr) {
										_74043_global_initializers+=jule::Str(" = ", 3);
										_74043_global_initializers+=_229da5351_gen_val((*(_1e8949c3a_v))._field_value);
									}
								} else {
									_74043_global_initializers+=jule::Str(" = ", 3);
									_74043_global_initializers+=_229da5351_get_init_expr((*((*(_1e8949c3a_v))._field_kind))._field_kind);
								}
								_74043_global_initializers+=jule::Str(";\n", 2);
							}
						}
						_iter_next_5079757584:;
						++it;
						goto _iter_begin_5079757584;
					}
					_iter_end_5079757584:;
				}
			}
			_iter_next_5079755744:;
			++it;
			goto _iter_begin_5079755744;
		}
		_iter_end_5079755744:;
	}
	return _74113_obj;
}



inline jule::Str _1e8949c3a_gen_globals(jule::Ptr<_228c91a35_IR> _77220_ir,jule::Str& _77234_global_initializers) {
	jule::Str _77313_obj = jule::Str();
	_1e8949c3a_add_indent();
	{
		auto &expr = (*(_77220_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079772928:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_u = *it;
			{
				if ((!((*(_1e8949c3a_u))._field_cpp_linked))) {
					_77313_obj+=_1e8949c3a_gen_pkg_globals((*(_1e8949c3a_u))._field_package,_77234_global_initializers);
				}
			}
			_iter_next_5079772928:;
			++it;
			goto _iter_begin_5079772928;
		}
		_iter_end_5079772928:;
	}
	_77313_obj+=_1e8949c3a_gen_pkg_globals((*(_77220_ir))._field_main,_77234_global_initializers);
	_1e8949c3a_done_indent();
	return _77313_obj;
}



inline jule::Str _1e8949c3a_gen_fn(jule::Ptr<_229b6ebcb_Fn>& _79016_f) {
	jule::Str _79113_obj = jule::Str();
	{
		auto &expr = (*(_79016_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_5079778720:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_FnIns> _1e8949c3a_ins = *it;
			{
				_79113_obj+=_1e8949c3a_gen_fn_decl_head(_1e8949c3a_ins,false);
				_79113_obj+=_1e8949c3a_gen_params_ins((*(_1e8949c3a_ins))._field_params);
				_79113_obj+=jule::Str(" ", 1);
				_79113_obj+=_229cbb9e8_gen_fn_scope(_1e8949c3a_ins);
				_79113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5079778720:;
			++it;
			goto _iter_begin_5079778720;
		}
		_iter_end_5079778720:;
	}
	return _79113_obj;
}



inline jule::Str _1e8949c3a_gen_pkg_fns(jule::Ptr<_1e53308ee_Package>& _80321_p) {
	jule::Str _80413_obj = jule::Str();
	{
		auto &expr = (*(_80321_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5079783792:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e8949c3a_f = *it;
			{
				{
					auto &expr = (*(_1e8949c3a_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5079785632:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_Fn> _1e8949c3a_f = *it;
						{
							if ((!(_2275c8280_TEST)) && _1e891c504_has_directive((*(_1e8949c3a_f))._field_directives,jule::Str("test", 4))) {
								goto _iter_next_5079785632;
							}
							if ((!((*(_1e8949c3a_f))._field_cpp_linked)) && ((*(_1e8949c3a_f))._field_token._field_id != 0LLU)) {
								_80413_obj+=_1e8949c3a_gen_fn(_1e8949c3a_f);
								_80413_obj+=jule::Str("\n\n", 2);
							}
						}
						_iter_next_5079785632:;
						++it;
						goto _iter_begin_5079785632;
					}
					_iter_end_5079785632:;
				}
			}
			_iter_next_5079783792:;
			++it;
			goto _iter_begin_5079783792;
		}
		_iter_end_5079783792:;
	}
	return _80413_obj;
}



inline jule::Str _1e8949c3a_gen_struct_method_defs(jule::Ptr<_228e0d025_StructIns>& _82032_s) {
	jule::Str _82113_obj = jule::Str();
	{
		auto &expr = (*(_82032_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_5079784704:;
		if (it != expr.end()) {
			jule::Ptr<_229b6ebcb_Fn> _1e8949c3a_f = *it;
			{
				_82113_obj+=_1e8949c3a_indent();
				_82113_obj+=_1e8949c3a_gen_fn(_1e8949c3a_f);
				_82113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5079784704:;
			++it;
			goto _iter_begin_5079784704;
		}
		_iter_end_5079784704:;
	}
	return _82113_obj;
}



inline jule::Str _1e8949c3a_gen_struct_ostream(jule::Ptr<_228e0d025_StructIns>& _83128_s) {
	jule::Str _83213_obj = jule::Str();
	_83213_obj+=_1e8949c3a_indent();
	_83213_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_83213_obj+=_1e88e3e7b_struct_ins_out_ident(_83128_s);
	_83213_obj+=jule::Str(" &_Src) {\n", 10);
	_1e8949c3a_add_indent();
	_83213_obj+=_1e8949c3a_indent();
	_83213_obj+=jule::Str("_Stream << \"", 12);
	_83213_obj+=(*((*(_83128_s))._field_decl))._field_ident;
	_83213_obj+=jule::Str("{\";\n", 4);
	{
		auto &expr = (*(_83128_s))._field_fields;
		auto it = expr.begin();
		_iter_begin_5079799248:;
		if (it != expr.end()) {
			jule::Int _1e8949c3a_i = it - expr.begin();
			jule::Ptr<_228e0d025_FieldIns> _1e8949c3a_f = *it;
			{
				_83213_obj+=_1e8949c3a_indent();
				_83213_obj+=jule::Str("_Stream << \"", 12);
				_83213_obj+=(*((*(_1e8949c3a_f))._field_decl))._field_ident;
				_83213_obj+=jule::Str(":", 1);
				jule::Ptr<_228e0d025_StructIns> _85013_strct = (*((*(_1e8949c3a_f))._field_kind))._method_strct();
				if (((_85013_strct != nullptr) && ((*(_85013_strct))._field_decl != nullptr)) && (*((*(_85013_strct))._field_decl))._field_cpp_linked) {
					_83213_obj+=jule::Str(" cpp.", 5);
					_83213_obj+=_1e88e3e7b_field_out_ident((*(_1e8949c3a_f))._field_decl);
					_83213_obj+=jule::Str("\"", 1);
				} else {
					_83213_obj+=jule::Str("\" << _Src.", 10);
					_83213_obj+=_1e88e3e7b_field_out_ident((*(_1e8949c3a_f))._field_decl);
				}
				if ((_1e8949c3a_i + 1LL) < (*(_83128_s))._field_fields.len()) {
					_83213_obj+=jule::Str(" << \", \"", 8);
				}
				_83213_obj+=jule::Str(";\n", 2);
			}
			_iter_next_5079799248:;
			++it;
			_1e8949c3a_i++;
			goto _iter_begin_5079799248;
		}
		_iter_end_5079799248:;
	}
	_83213_obj+=_1e8949c3a_indent();
	_83213_obj+=jule::Str("_Stream << \"}\";\n", 16);
	_83213_obj+=_1e8949c3a_indent();
	_83213_obj+=jule::Str("return _Stream;\n", 16);
	_1e8949c3a_done_indent();
	_83213_obj+=_1e8949c3a_indent();
	_83213_obj+=jule::Str("}", 1);
	return _83213_obj;
}



inline jule::Str _1e8949c3a_gen_struct_derive_defs(jule::Ptr<_228e0d025_StructIns>& _87532_s) {
	jule::Str _87613_obj = jule::Str();
	if ((*((*(_87532_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_87613_obj+=_1e8949c3a_indent();
		_87613_obj+=_1e88e4520_get_derive_fn_def_clone((*(_87532_s))._field_decl);
		_87613_obj+=jule::Str("{\n", 2);
		_1e8949c3a_add_indent();
		_87613_obj+=_1e8949c3a_indent();
		_87613_obj+=_1e891c504_gen_struct_kind_ins(_87532_s);
		_87613_obj+=jule::Str(" clone;\n", 8);
		{
			auto &expr = (*(_87532_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_5079814608:;
			if (it != expr.end()) {
				jule::Ptr<_228e0d025_FieldIns> &_1e8949c3a_f = *it;
				{
					jule::Str _88717_ident = _1e88e3e7b_field_out_ident((*(_1e8949c3a_f))._field_decl);
					_87613_obj+=_1e8949c3a_indent();
					_87613_obj+=jule::Str("clone.", 6);
					_87613_obj+=_88717_ident;
					_87613_obj+=jule::Str(" = jule::clone(this->", 21);
					_87613_obj+=_88717_ident;
					_87613_obj+=jule::Str(");\n", 3);
				}
				_iter_next_5079814608:;
				++it;
				goto _iter_begin_5079814608;
			}
			_iter_end_5079814608:;
		}
		_87613_obj+=_1e8949c3a_indent();
		_87613_obj+=jule::Str("return clone;\n", 14);
		_1e8949c3a_done_indent();
		_87613_obj+=_1e8949c3a_indent();
		_87613_obj+=jule::Str("}", 1);
	}
	return _87613_obj;
}



inline jule::Str _1e8949c3a_gen_struct_ins(jule::Ptr<_228e0d025_StructIns>& _90724_s) {
	jule::Str _90813_obj = _1e8949c3a_gen_struct_method_defs(_90724_s);
	_90813_obj+=jule::Str("\n\n", 2);
	_90813_obj+=_1e8949c3a_gen_struct_derive_defs(_90724_s);
	_90813_obj+=jule::Str("\n\n", 2);
	_90813_obj+=_1e8949c3a_gen_struct_ostream(_90724_s);
	return _90813_obj;
}



inline jule::Str _1e8949c3a_gen_struct(jule::Ptr<_228e0d025_Struct>& _91720_s) {
	jule::Str _91813_obj = jule::Str();
	{
		auto &expr = (*(_91720_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_5079829696:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_StructIns> _1e8949c3a_ins = *it;
			{
				_91813_obj+=_1e8949c3a_gen_struct_ins(_1e8949c3a_ins);
				_91813_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_5079829696:;
			++it;
			goto _iter_begin_5079829696;
		}
		_iter_end_5079829696:;
	}
	return _91813_obj;
}



inline jule::Str _1e8949c3a_gen_structs(jule::Slice<jule::Ptr<_228e0d025_Struct>>& _92721_structs) {
	jule::Str _92813_obj = jule::Str();
	{
		auto &expr = _92721_structs;
		auto it = expr.begin();
		_iter_begin_5079832832:;
		if (it != expr.end()) {
			jule::Ptr<_228e0d025_Struct> _1e8949c3a_s = *it;
			{
				if ((!((*(_1e8949c3a_s))._field_cpp_linked)) && ((*(_1e8949c3a_s))._field_token._field_id != 0LLU)) {
					_92813_obj+=_1e8949c3a_gen_struct(_1e8949c3a_s);
					_92813_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_5079832832:;
			++it;
			goto _iter_begin_5079832832;
		}
		_iter_end_5079832832:;
	}
	return _92813_obj;
}



inline jule::Str _1e8949c3a_gen_fns(jule::Ptr<_228c91a35_IR>& _93917_ir) {
	jule::Str _94013_obj = jule::Str();
	{
		auto &expr = (*(_93917_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079838160:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_u = *it;
			{
				if ((!((*(_1e8949c3a_u))._field_cpp_linked))) {
					_94013_obj+=_1e8949c3a_gen_pkg_fns((*(_1e8949c3a_u))._field_package);
				}
			}
			_iter_next_5079838160:;
			++it;
			goto _iter_begin_5079838160;
		}
		_iter_end_5079838160:;
	}
	_94013_obj+=_1e8949c3a_gen_pkg_fns((*(_93917_ir))._field_main);
	return _94013_obj;
}



inline void _1e8949c3a_push_init(jule::Ptr<_1e53308ee_Package>& _95219_pkg,jule::Str& _95239_obj) {
	
	
	jule::Ptr<_229b6ebcb_Fn> _9569_f = (*(_95219_pkg))._method_find_fn(jule::Str("init", 4),false);
	if (_9569_f == nullptr) {
		return;
	}
	_95239_obj+=jule::Str("\n\t", 2);
	_95239_obj+=_1e88e3e7b_fn_out_ident(_9569_f);
	_95239_obj+=jule::Str("();", 3);
}



inline jule::Str _1e8949c3a_gen_init_caller(jule::Ptr<_228c91a35_IR>& _96725_ir,jule::Str& _96735_global_initializers) {
	jule::Str _96813_obj = jule::Str("void ", 5);
	_96813_obj+=jule::Str("__jule_call_initializers", 24);
	_96813_obj+=jule::Str("(void) {\n", 9);
	_96813_obj+=_96735_global_initializers;
	{
		auto &expr = (*(_96725_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079850928:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_u = *it;
			{
				if ((!((*(_1e8949c3a_u))._field_cpp_linked))) {
					_1e8949c3a_push_init((*(_1e8949c3a_u))._field_package,_96813_obj);
				}
			}
			_iter_next_5079850928:;
			++it;
			goto _iter_begin_5079850928;
		}
		_iter_end_5079850928:;
	}
	_1e8949c3a_push_init((*(_96725_ir))._field_main,_96813_obj);
	_96813_obj+=jule::Str("\n}", 2);
	return _96813_obj;
}



inline jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_find_testing_package(jule::Ptr<_228c91a35_IR>& _98434_ir) {
	{
		auto &expr = (*(_98434_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5079855776:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> _1e8949c3a_imp = *it;
			{
				if ((*(_1e8949c3a_imp))._field_link_path == jule::Str("std::testing", 12)) {
					return _1e8949c3a_imp;
				}
			}
			_iter_next_5079855776:;
			++it;
			goto _iter_begin_5079855776;
		}
		_iter_end_5079855776:;
	}
	return nullptr;
}



inline void _1e8949c3a_append_test(jule::Str& _99325_obj,jule::Ptr<_229b6ebcb_FnIns> _99339_f) {
	_99325_obj+=_1e8949c3a_indent();
	_99325_obj+=jule::Str("_t->_method_reset();\n", 21);
	_99325_obj+=_1e8949c3a_indent();
	_99325_obj+=jule::Str("std::cout << \">>> TEST RUNNING: \";\n", 35);
	_99325_obj+=_1e8949c3a_indent();
	_99325_obj+=jule::Str("jule::outln(", 12);
	_99325_obj+=_229da5351_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_99339_f))._field_decl))._field_ident));
	_99325_obj+=jule::Str(");\n", 3);
	_99325_obj+=_1e8949c3a_indent();
	_99325_obj+=_1e88e3e7b_fn_ins_out_ident(_99339_f);
	_99325_obj+=jule::Str("(_t);\n", 6);
	_99325_obj+=_1e8949c3a_indent();
	_99325_obj+=jule::Str("post_test();\n", 13);
}



inline void _1e8949c3a_append_package_tests(jule::Str& _100934_obj,jule::Ptr<_1e53308ee_Package>& _100949_p) {
	{
		auto &expr = (*(_100949_p))._field_files;
		auto it = expr.begin();
		_iter_begin_5079865632:;
		if (it != expr.end()) {
			jule::Ptr<_229d56533_SymbolTable> _1e8949c3a_file = *it;
			{
				{
					auto &expr = (*(_1e8949c3a_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_5079867504:;
					if (it != expr.end()) {
						jule::Ptr<_229b6ebcb_Fn> _1e8949c3a_f = *it;
						{
							if (_1e891c504_has_directive((*(_1e8949c3a_f))._field_directives,jule::Str("test", 4))) {
								_1e8949c3a_append_test(_100934_obj,(*(_1e8949c3a_f))._field_instances[0LL]);
							}
						}
						_iter_next_5079867504:;
						++it;
						goto _iter_begin_5079867504;
					}
					_iter_end_5079867504:;
				}
			}
			_iter_next_5079865632:;
			++it;
			goto _iter_begin_5079865632;
		}
		_iter_end_5079865632:;
	}
}



inline void _1e8949c3a_append_test_point(jule::Str& _101931_obj,jule::Ptr<_228c91a35_IR>& _101946_ir) {
	_101931_obj+=jule::Str("\nvoid test_point(void) {\n", 25);
	_1e8949c3a_add_indent();
	_101931_obj+=_1e8949c3a_indent();
	jule::Ptr<_1e53308ee_ImportInfo> _102413_p = _1e8949c3a_find_testing_package(_101946_ir);
	if (_102413_p == nullptr) {
		_101931_obj+=jule::Str("}", 1);
		_1e8949c3a_done_indent();
		return;
	}
	jule::Ptr<_228e0d025_StructIns> _103413_t = (*((*(_102413_p))._method_find_struct(jule::Str("T", 1),false)))._field_instances[0LL];
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=_1e891c504_as_sptr_kind(_1e891c504_gen_struct_kind_ins(_103413_t));
	_101931_obj+=jule::Str(" _t = jule::new_struct<", 23);
	_101931_obj+=_1e891c504_gen_struct_kind_ins(_103413_t);
	_101931_obj+=jule::Str(">(new(std::nothrow) ", 20);
	_101931_obj+=_1e891c504_gen_struct_kind_ins(_103413_t);
	_101931_obj+=jule::Str(");\n", 3);
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("jule::Uint total = 0, failed = 0, skipped = 0;\n", 47);
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("auto post_test = [&](void) {\n", 29);
	_1e8949c3a_add_indent();
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("++total;\n", 9);
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("if (_t->_method_failed()) { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n", 84);
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("else if (_t->_method_skipped()) { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n", 92);
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("else { std::cout << \"    [*] PASSED\" << std::endl; }\n", 53);
	_1e8949c3a_done_indent();
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("};\n", 3);
	_1e8949c3a_append_package_tests(_101931_obj,(*(_101946_ir))._field_main);
	_101931_obj+=jule::Str("\n\n", 2);
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("std::cout << std::endl << std::endl << \"total tests: \" << total << \"  skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n", 168);
	_1e8949c3a_done_indent();
	_101931_obj+=_1e8949c3a_indent();
	_101931_obj+=jule::Str("}\n", 2);
}



inline void _1e8949c3a_append_standard(jule::Str& _107329_obj_code,jule::Str _107344_compiler,jule::Str _107359_compiler_cmd) {
	_1e8a7c6a8_AbsTime _10749_time = _1e8a7c6a8_Time::_static_method_now()._method_abs();
	jule::Str _107613_time_str = jule::Str();
	_107613_time_str+=_22866a079_fmt_uint(_10749_time._field_day,10LL);
	_107613_time_str+=jule::Str("/", 1);
	_107613_time_str+=_22866a079_fmt_uint(_10749_time._field_month,10LL);
	_107613_time_str+=jule::Str("/", 1);
	_107613_time_str+=_22866a079_fmt_uint(_10749_time._field_year,10LL);
	_107613_time_str+=jule::Str(" ", 1);
	_107613_time_str+=_22866a079_fmt_uint(_10749_time._field_hour,10LL);
	_107613_time_str+=jule::Str(".", 1);
	_107613_time_str+=_22866a079_fmt_uint(_10749_time._field_minute,10LL);
	_107613_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM) UTC", 25);
	jule::Str _108813_s = jule::Str();
	_108813_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_108813_s+=jule::Str("// JuleC version: ", 18);
	_108813_s+=jule::Str("beta 0.0.7 @master", 18);
	_108813_s+=jule::Str("\n", 1);
	_108813_s+=jule::Str("// Date: ", 9);
	_108813_s+=_107613_time_str;
	_108813_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_108813_s+=_107344_compiler;
	_108813_s+=jule::Str(" ", 1);
	_108813_s+=_107359_compiler_cmd;
	_108813_s+=jule::Str("\n\n", 2);
	if (_227532edc_PRODUCTION) {
		_108813_s+=jule::Str("#define __JULE_ENABLE__PRODUCTION\n", 34);
	}
	if ((!(_2275c8280_RC))) {
		_108813_s+=jule::Str("#define __JULE_DISABLE__REFERENCE_COUNTING\n", 43);
	}
	_108813_s+=jule::Str("\n\n#include \"", 12);
	_108813_s+=_22779d455_PATH_API;
	_108813_s+=jule::Str("\"\n\n", 3);
	_108813_s+=_107329_obj_code;
	_108813_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    jule::setup_argv(argc, argv);\n    jule::setup_envp(envp);\n\n    __jule_call_initializers();\n    ", 149);
	if (_2275c8280_TEST) {
		_108813_s+=jule::Str("test_point();", 13);
	} else {
		_108813_s+=jule::Str("entry_point();", 14);
	}
	_108813_s+=jule::Str("\n\n    return EXIT_SUCCESS;\n}", 28);
	_107329_obj_code=_108813_s;
}



inline jule::Str _1e8949c3a_gen(jule::Ptr<_228c91a35_IR>& _113617_ir) {
	jule::Str _113713_global_initializers = jule::Str();
	jule::Str _113813_obj = jule::Str();
	_113813_obj+=_1e8949c3a_gen_links(_113617_ir);
	_113813_obj+=jule::Str("\n", 1);
	_113813_obj+=_1e8949c3a_gen_prototypes(_113617_ir);
	_113813_obj+=jule::Str("\n\n", 2);
	_113813_obj+=_1e8949c3a_gen_globals(_113617_ir,_113713_global_initializers);
	_113813_obj+=jule::Str("\n", 1);
	_113813_obj+=_1e8949c3a_gen_structs((*(_113617_ir))._field_ordered._field_structs);
	_113813_obj+=_1e8949c3a_gen_fns(_113617_ir);
	_113813_obj+=jule::Str("\n", 1);
	_113813_obj+=_1e8949c3a_gen_init_caller(_113617_ir,_113713_global_initializers);
	_113813_obj+=jule::Str("\n", 1);
	return _113813_obj;
}



inline jule::Bool _229cbb663_is_std_package(jule::Str _19419_f,jule::Str _19427_p) {
	return _19419_f.has_prefix(_227711594_join(jule::Slice<jule::Str>({_22779d455_PATH_STDLIB,_19427_p})));
}



inline jule::Bool _229cbb663_is_constant_valid_conditional_case(jule::Ptr<_1e56c3885_If>& _19840_i) {
	{
		auto &_match_expr{ (*(_19840_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1e856e8a4_Const>>()) {
			_case_begin_5079938704:;
			{
				jule::Ptr<_1e856e8a4_Const> _20113_c = (*(_19840_i))._field_expr.operator jule::Ptr<_1e856e8a4_Const>();
				return (*(_20113_c))._method_is_bool() && (*(_20113_c))._method_read_bool();
			}
		}
		_match_end_5079936048:;
	}
	return false;
}



inline jule::Bool _229cbb663_is_constant_valid_match_case(jule::Ptr<_1e56c3885_Case>& _20834_case) {
	{
		auto &expr = (*(_20834_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5079939568:;
		if (it != expr.end()) {
			jule::Ptr<_229d70d33_Data> &_229cbb663_expr = *it;
			{
				if (((*(_229cbb663_expr))._method_is_const() && (*((*(_229cbb663_expr))._field_constant))._method_is_bool()) && (*((*(_229cbb663_expr))._field_constant))._method_read_bool()) {
					return true;
				}
			}
			_iter_next_5079939568:;
			++it;
			goto _iter_begin_5079939568;
		}
		_iter_end_5079939568:;
	}
	return false;
}



inline jule::Bool _229cbb663_is_unreachable_conditional_case(jule::Ptr<_1e56c3885_If>& _21837_i) {
	{
		auto &_match_expr{ (*(_21837_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1e856e8a4_Const>>()) {
			_case_begin_5079948208:;
			{
				jule::Ptr<_1e856e8a4_Const> _22113_c = (*(_21837_i))._field_expr.operator jule::Ptr<_1e856e8a4_Const>();
				return (*(_22113_c))._method_is_bool() && (!((*(_22113_c))._method_read_bool()));
			}
		}
		_match_end_5079948112:;
	}
	return false;
}



inline jule::Bool _229cbb663_is_unreachable_match_case(jule::Ptr<_1e56c3885_Case>& _22831_case) {
	{
		auto &expr = (*(_22831_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_5079949232:;
		if (it != expr.end()) {
			jule::Ptr<_229d70d33_Data> &_229cbb663_expr = *it;
			{
				if (((*(_229cbb663_expr))._method_is_const() && (*((*(_229cbb663_expr))._field_constant))._method_is_bool()) && (!((*((*(_229cbb663_expr))._field_constant))._method_read_bool()))) {
					return true;
				}
			}
			_iter_next_5079949232:;
			++it;
			goto _iter_begin_5079949232;
		}
		_iter_end_5079949232:;
	}
	return false;
}



inline jule::Str _227532d99_str_repeat(jule::Str _3415_sub,jule::Int _3429_n) {
	if (_3429_n == 0LL) {
		return jule::Str();
	}
	jule::Str _3913_s = jule::Str();
	for (; _3429_n > 0LL; (_3429_n)--) {
		{
			_3913_s+=_3415_sub;
		}
	_iter_next_5080321488:;
	}
	_iter_end_5080321488:;
	return _3913_s;
}



inline void _227532d99_print_error_message(jule::Str _4624_msg) {
	jule::outln(_4624_msg);
}



inline void _227532d99_help(jule::Slice<jule::Str>& _4910_args) {
	if (_4910_args.len() > 2LL) {
		_227532d99_print_error_message(jule::Str("invalid command: ", 17) + _4910_args[2LL]);
		return;
	}
	jule::I64 _5513_max = _227532d99_HELP_MAP.__at(0LL).__at(0LL).len();
	{
		auto &expr = _227532d99_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_5080328096:;
		if (it != expr.end()) {
			jule::Array<jule::Str,2> &_227532d99_k = *it;
			{
				jule::I64 _5713_n = _227532d99_k.__at(0LL).len();
				if (_5713_n > _5513_max) {
					_5513_max=_5713_n;
				}
			}
			_iter_next_5080328096:;
			++it;
			goto _iter_begin_5080328096;
		}
		_iter_end_5080328096:;
	}
	jule::Str _6313_s = jule::Str();
	
	{
		auto &expr = _227532d99_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_5080329472:;
		if (it != expr.end()) {
			jule::Int _227532d99_i = it - expr.begin();
			jule::Array<jule::Str,2> &_227532d99_part = *it;
			{
				_6313_s+=_227532d99_part.__at(0LL);
				_6313_s+=_227532d99_str_repeat(jule::Str(" ", 1),static_cast<jule::I64>((_5513_max - _227532d99_part.__at(0LL).len()) + 5LL));
				_6313_s+=_227532d99_part.__at(1LL);
				if ((_227532d99_i + 1LL) < 5LL) {
					_6313_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_5080329472:;
			++it;
			_227532d99_i++;
			goto _iter_begin_5080329472;
		}
		_iter_end_5080329472:;
	}
	jule::outln(_6313_s);
}



inline void _227532d99_version(jule::Slice<jule::Str>& _7713_args) {
	if (_7713_args.len() > 2LL) {
		_227532d99_print_error_message(jule::Str("invalid command: ", 17) + _7713_args[2LL]);
		return;
	}
	jule::out(jule::Str("julec version ", 14));
	jule::outln(jule::Str("beta 0.0.7 @master", 18));
}



inline void _227532d99_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto &expr = _227785d55_DISTOS;
		auto it = expr.begin();
		_iter_begin_5080343568:;
		if (it != expr.end()) {
			jule::Str &_227532d99_os = *it;
			{
				jule::out(_227532d99_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_5080343568:;
			++it;
			goto _iter_begin_5080343568;
		}
		_iter_end_5080343568:;
	}
	jule::outln(jule::Str());
}



inline void _227532d99_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto &expr = _227785d55_DISTARCH;
		auto it = expr.begin();
		_iter_begin_5080344576:;
		if (it != expr.end()) {
			jule::Str &_227532d99_arch = *it;
			{
				jule::out(_227532d99_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_5080344576:;
			++it;
			goto _iter_begin_5080344576;
		}
		_iter_end_5080344576:;
	}
	jule::outln(jule::Str());
}



inline void _227532d99_tool(jule::Slice<jule::Str>& _10710_args) {
	if (_10710_args.len() == 2LL) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if (_10710_args.len() > 3LL) {
		_227532d99_print_error_message(jule::Str("invalid command: ", 17) + _10710_args[3LL]);
		return;
	}
	jule::Str _1189_cmd = _10710_args[2LL];
	{
		auto &_match_expr{ _1189_cmd };
		
		if (_match_expr == jule::Str("distos", 6)) {
			_case_begin_5080371552:;
			{
				_227532d99_tool_distos();
			}
		}
		else if (_match_expr == jule::Str("distarch", 8)) {
			_case_begin_5080371088:;
			{
				_227532d99_tool_distarch();
			}
		}
		else {
			_case_begin_5080370160:;
			{
				_227532d99_print_error_message(jule::Str("undefined command: ", 19) + _1189_cmd);
			}
		}
		_match_end_5080370080:;
	}
}



inline void _227532d99_julenv(jule::Slice<jule::Str>& _12712_args) {
	if (_12712_args.len() > 2LL) {
		_227532d99_print_error_message(jule::Str("invalid command: ", 17) + _12712_args[2LL]);
		return;
	}
	jule::outln(jule::Str("julec version: beta 0.0.7 @master", 33));
	jule::outln(jule::Str("architecture: amd64", 19));
	jule::outln(jule::Str("operating system: darwin", 24));
	jule::outln(jule::Str("default compiler: ", 18) + _2275c8280_COMPILER);
	jule::outln(jule::Str("default C++ standard: ", 22) + _2275c8280_CPP_STD);
}



inline void _227532d99_mod(jule::Slice<jule::Str>& _1409_args) {
	if (_1409_args.len() == 2LL) {
		jule::outln(jule::Str("command is not given, try julec mod init", 40));
		return;
	}
	if (_1409_args.len() > 3LL) {
		_227532d99_print_error_message(jule::Str("invalid command: ", 17) + _1409_args[3LL]);
		return;
	}
	{
		auto &_match_expr{ _1409_args[2LL] };
		
		if (_match_expr == jule::Str("init", 4)) {
			_case_begin_5080384752:;
			{
				({
					auto except = _2276a6c54_File::_static_method_write(jule::Str("jule.mod", 8),jule::Slice<jule::U8>(),432LL);
					if (!except.ok()) {
						_227532d99_print_error_message(jule::Str("module could not generated because of a problem", 47));
					}
				});
			}
		}
		else {
			_case_begin_5080384000:;
			{
				_227532d99_print_error_message(jule::Str("invalid command: ", 17) + _1409_args[2LL]);
			}
		}
		_match_end_5080382208:;
	}
}



inline jule::Bool _227532d99_process_command(jule::Slice<jule::Str>& _16421_args) {
	{
		auto &_match_expr{ _16421_args[1LL] };
		
		if (_match_expr == jule::Str("help", 4)) {
			_case_begin_5080391104:;
			{
				_227532d99_help(_16421_args);
			}
		}
		else if (_match_expr == jule::Str("version", 7)) {
			_case_begin_5080391200:;
			{
				_227532d99_version(_16421_args);
			}
		}
		else if (_match_expr == jule::Str("tool", 4)) {
			_case_begin_5080388784:;
			{
				_227532d99_tool(_16421_args);
			}
		}
		else if (_match_expr == jule::Str("julenv", 6)) {
			_case_begin_5080388880:;
			{
				_227532d99_julenv(_16421_args);
			}
		}
		else if (_match_expr == jule::Str("mod", 3)) {
			_case_begin_5080388976:;
			{
				_227532d99_mod(_16421_args);
			}
		}
		else {
			_case_begin_5080387360:;
			{
				return false;
			}
		}
		_match_end_5080388432:;
	}
	return true;
}



inline void _227532d99_exit_err(jule::Str _17713_msg) {
	jule::outln(_17713_msg);
	_2277d2c70_exit(1LL);
}



inline void _227532d99_show_info(void) {
	jule::outln(jule::Str("JuleC is a tool for Jule source code and developers.\n\nCommands:\n    help          Show help,\n    version       Show version,\n    tool          Tools for effective Jule,\n    julenv        Show information about native jule environment\n    mod           Module management\n\nCompilation:\n    julec [OPTIONS] INPUT\n", 310));
}



void entry_point(void) {
	jule::Slice<jule::Str> _19913_args = _2275d406b_args();
	if (_19913_args.len() < 2LL) {
		_227532d99_show_info();
		return;
	}
	if (_227532d99_process_command(_19913_args)) {
		return;
	}
	_227571404_compile_command(_19913_args);
}



inline void _227533eee___init_common(void) {
	_2275c8280_COMPILER=jule::Str("clang", 5);
	_2275c8280_COMPILER_PATH=jule::Str("clang++", 7);
}



inline void _22757047a_init(void) {
	_227533eee___init_common();
}



inline void _227571404_write_output(jule::Str _4217_path,jule::Str _4228_content) {
	jule::Str _439_dir = _227711594_dir(_4217_path);
	({
		auto except = _2276a6da8_Status::_static_method_of(_439_dir);
		if (!except.ok()) {
			({
				auto except = _22762b646_Directory::_static_method_create(_439_dir);
				if (!except.ok()) {
					_227532d99_exit_err(jule::Str("a problem occurs when code generation", 37));
				}
			});
		}
	});
	({
		auto except = _2276a6c54_File::_static_method_write(_4217_path,static_cast<jule::Slice<jule::U8>>(_4228_content),432LL);
		if (!except.ok()) {
			_227532d99_exit_err(jule::Str("a problem occurs when code generation", 37));
		}
	});
}



inline void _227571404_clear_objects(void) {
	({
		auto except = _2276a6c54_File::_static_method_remove(_227571404_get_compile_path());
		if (!except.ok()) {
			jule::outln(jule::Str("a problem occurs when object cleaning", 37));
			return;
		}
	});
	_22762b646_Directory::_static_method_remove(_227571404_OUT_DIR);
}



inline void _227571404_compile_ir(jule::Str _7015_compiler,jule::Str _7030_compiler_cmd) {
	jule::Ptr<_2277c77c0_Cmd> _7113_cmd = _2277c77c0_Cmd::_static_method_new(_7015_compiler);
	(*(_7113_cmd))._field_args=jule::Slice<jule::Str>({_7015_compiler});
	(*(_7113_cmd))._field_args=jule::append((*(_7113_cmd))._field_args,_7030_compiler_cmd.split(jule::Str(" ", 1),-1LL));
	({
		auto except = (*(_7113_cmd))._method_spawn();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/src/julec/compile.jule:74:5"));
	});
	jule::Int _759_status = ({
		auto except = (*(_7113_cmd))._method_wait();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/src/julec/compile.jule:75:18"));
		(except.result);
	});
	if (_759_status != 0LL) {
		jule::Str _7713_error_message = (jule::Str("\n>>> your backend compiler (", 28) + _2275c8280_COMPILER) + jule::Str(") reports problems\n>>> please check errors above\n>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose", 149);
		_227532e21_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),_7713_error_message);
		_227532d99_exit_err(jule::Str());
	}
	_227571404_clear_objects();
}



inline void _227571404_do_spell(jule::Str _8813_obj,jule::Str _8823_compiler,jule::Str _8838_compiler_cmd) {
	jule::Str _899_path = _227571404_get_compile_path();
	_227571404_write_output(_899_path,_8813_obj);
	if ((!(_2275c8280_TRANSPILATION))) {
		_227571404_compile_ir(_8823_compiler,_8838_compiler_cmd);
	}
}



inline jule::Bool _227571404_is_cpp_source_file(jule::Str _9623_path) {
	jule::Int _979_offset = _9623_path.rfind(jule::Str(".", 1));
	if (_979_offset == -1LL) {
		return false;
	}
	return _2275ec68e_is_valid_cpp_ext(_9623_path.slice(_979_offset));
}



inline void _227571404_push_comp_cmd_clang(jule::Str& _10429_cmd) {
	_10429_cmd+=jule::Str("-Wno-everything ", 16);
	_10429_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _2275c8280_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_5080437360:;
			{
				_10429_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_5080437456:;
			{
				_10429_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5080437584:;
			{
				_10429_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_5080437088:;
	}
	_10429_cmd+=jule::Str(" ", 1);
	if (_227532edc_PRODUCTION) {
		_10429_cmd+=jule::Str("-O3 ", 4);
		_10429_cmd+=jule::Str("-flto ", 6);
		_10429_cmd+=jule::Str("-DNDEBUG ", 9);
		_10429_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_10429_cmd+=jule::Str("-O0 ", 4);
	}
}



inline void _227571404_push_comp_cmd_gcc(jule::Str& _12727_cmd) {
	_12727_cmd+=jule::Str("-w ", 3);
	_12727_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _2275c8280_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_5080443312:;
			{
				_12727_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_5080443552:;
			{
				_12727_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5080443648:;
			{
				_12727_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_5080443232:;
	}
	_12727_cmd+=jule::Str(" ", 1);
	if (_227532edc_PRODUCTION) {
		_12727_cmd+=jule::Str("-O3 ", 4);
		_12727_cmd+=jule::Str("-DNDEBUG ", 9);
		_12727_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_12727_cmd+=jule::Str("-O0 ", 4);
	}
}



inline std::tuple<jule::Str,jule::Str> _227571404_gen_compile_cmd(jule::Str _15020_source_path,jule::Ptr<_228c91a35_IR>& _15039_ir) {
	jule::Str &_15110_compiler = _2275c8280_COMPILER_PATH;
	jule::Str _15313_cmd = jule::Str();
	{
		auto &_match_expr{ _2275c8280_COMPILER };
		
		if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_5080450640:;
			{
				_227571404_push_comp_cmd_gcc(_15313_cmd);
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_5080450736:;
			{
				_227571404_push_comp_cmd_clang(_15313_cmd);
			}
		}
		_match_end_5080450560:;
	}
	{
		auto &expr = (*(_15039_ir))._field_passes;
		auto it = expr.begin();
		_iter_begin_5080453104:;
		if (it != expr.end()) {
			jule::Str &_227571404_pass = *it;
			{
				_15313_cmd+=_227571404_pass;
				_15313_cmd+=jule::Str(" ", 1);
			}
			_iter_next_5080453104:;
			++it;
			goto _iter_begin_5080453104;
		}
		_iter_end_5080453104:;
	}
	{
		auto &expr = (*(_15039_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_5080456128:;
		if (it != expr.end()) {
			jule::Ptr<_1e53308ee_ImportInfo> &_227571404_u = *it;
			{
				if ((*(_227571404_u))._field_cpp_linked && _227571404_is_cpp_source_file((*(_227571404_u))._field_path)) {
					_15313_cmd+=(*(_227571404_u))._field_path;
					_15313_cmd+=jule::Str(" ", 1);
				}
			}
			_iter_next_5080456128:;
			++it;
			goto _iter_begin_5080456128;
		}
		_iter_end_5080456128:;
	}
	if (_227571404_OUT != jule::Str()) {
		_15313_cmd+=jule::Str("-o ", 3);
		_15313_cmd+=_227571404_OUT;
		_15313_cmd+=jule::Str(" ", 1);
	}
	_15313_cmd+=_15020_source_path;
	return std::make_tuple(_15110_compiler,_15313_cmd);
}



inline jule::Str _227571404_get_compile_path(void) {
	return _227711594_join(jule::Slice<jule::Str>({_227571404_OUT_DIR,_227571404_OUT_NAME}));
}



inline void _227571404_apply_target_independent_optimizations(jule::Ptr<_228c91a35_IR>& _19448_ir) {
	if (_227532edc_OPT_DEADCODE) {
		_22777e238_eliminate_defines(_19448_ir);
	}
	jule::Ptr<_229d710b9_Optimizer> _20113_opt = _229d710b9_Optimizer::_static_method_new(_19448_ir);
	(*(_20113_opt))._method_optimize();
	if (_227532edc_OPT_DEADCODE) {
		_228798383_eliminate_scopes(_19448_ir);
	}
}



inline void _227571404_check_compiler_flag(void) {
	{
		auto &_match_expr{ _2275c8280_COMPILER };
		
		if (_match_expr == jule::Str()) {
			_case_begin_5080467312:;
			{
				_227532d99_exit_err(jule::Str("missing option value: --compiler", 32));
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_5080466816:;
			{
				_2275c8280_COMPILER_PATH=jule::Str("clang++", 7);
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_5080466912:;
			{
				_2275c8280_COMPILER_PATH=jule::Str("g++", 3);
			}
		}
		else {
			_case_begin_5080466416:;
			{
				_227532d99_exit_err(jule::Str("invalid option value for --compiler: ", 37) + _2275c8280_COMPILER);
			}
		}
		_match_end_5080465264:;
	}
}



inline void _227571404_check_target_arch(jule::Str _22622_arch) {
	{
		auto &expr = _227785d55_DISTARCH;
		auto it = expr.begin();
		_iter_begin_5080469968:;
		if (it != expr.end()) {
			jule::Str &_227571404_distarch = *it;
			{
				if (_22622_arch == _227571404_distarch) {
					return;
				}
			}
			_iter_next_5080469968:;
			++it;
			goto _iter_begin_5080469968;
		}
		_iter_end_5080469968:;
	}
	_227532d99_exit_err(jule::Str("--target: unsupported/undefined architecture: ", 46) + _22622_arch);
}



inline void _227571404_check_target_os(jule::Str _23620_os) {
	{
		auto &expr = _227785d55_DISTOS;
		auto it = expr.begin();
		_iter_begin_5080474288:;
		if (it != expr.end()) {
			jule::Str &_227571404_distos = *it;
			{
				if (_23620_os == _227571404_distos) {
					return;
				}
			}
			_iter_next_5080474288:;
			++it;
			goto _iter_begin_5080474288;
		}
		_iter_end_5080474288:;
	}
	_227532d99_exit_err(jule::Str("--target: unsupported/undefined operating system: ", 50) + _23620_os);
}



inline void _227571404_check_target_flag(jule::Str& _24623_target) {
	if (_24623_target == jule::Str()) {
		_227532d99_exit_err(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _2519_parts = _24623_target.split(jule::Str("-", 1),-1LL);
	if (_2519_parts.len() != 2LL) {
		_227532d99_exit_err(jule::Str("--target: undefined platform target format: ", 44) + _24623_target);
	}
	jule::Str _25610_os = _2519_parts[0LL];
	jule::Str _25614_arch = _2519_parts[1LL];
	std::tie(_25610_os,_25614_arch) = std::make_tuple(_2519_parts[0LL],_2519_parts[1LL]);
	if (_25610_os != jule::Str("native", 6)) {
		_227571404_check_target_os(_25610_os);
		_2275b25dd_OS=_25610_os;
	}
	if (_25614_arch != jule::Str("native", 6)) {
		_227571404_check_target_arch(_25614_arch);
		_2275b25dd_ARCH=_25614_arch;
	}
}



inline void _227571404_check_opt_flag(jule::Str& _26920_opt) {
	if (_26920_opt == jule::Str()) {
		_227532d99_exit_err(jule::Str("missing option value: --opt", 27));
	}
	{
		auto &_match_expr{ _26920_opt };
		
		if (_match_expr == jule::Str("L0", 2)) {
			_case_begin_5080491168:;
		}
		else if (_match_expr == jule::Str("L1", 2)) {
			_case_begin_5080485376:;
			{
				_227532edc_push_opt_level(1LLU);
			}
		}
		else {
			_case_begin_5080488368:;
			{
				_227532d99_exit_err(jule::Str("--opt: invalid optimization level: ", 35) + _26920_opt);
			}
		}
		_match_end_5080490160:;
	}
}



inline void _227571404_check_cpp_std_flag(void) {
	{
		auto &_match_expr{ _2275c8280_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5) || _match_expr == jule::Str("cpp17", 5) || _match_expr == jule::Str("cpp20", 5)) {
			_case_begin_5080492704:;
		}
		else {
			_case_begin_5080490416:;
			{
				_227532d99_exit_err(jule::Str("--cppstd: invalid optimization level: ", 38) + _2275c8280_CPP_STD);
			}
		}
		_match_end_5080493040:;
	}
}



inline jule::Slice<jule::Str> _227571404_check_flags(jule::Slice<jule::Str>& _29317_args) {
	jule::Str _29413_opt = jule::Str("L0", 2);
	jule::Str _29513_target = jule::Str("native-native", 13);
	jule::Ptr<_229cbddd5_FlagSet> _29713_fs = _229cbddd5_FlagSet::_static_method_new();
	(*(_29713_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_29413_opt)))),jule::Str("opt", 3),0LL,jule::Str("Optimization level", 18));
	(*(_29713_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_29513_target)))),jule::Str("target", 6),0LL,jule::Str("Target system", 13));
	(*(_29713_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_227571404_OUT)))),jule::Str("out", 3),'o',jule::Str("Output identifier", 17));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2275c8280_SHADOWING)))),jule::Str("shadowing", 9),0LL,jule::Str("Allow shadowing", 15));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2275c8280_TRANSPILATION)))),jule::Str("transpile", 9),'t',jule::Str("Transpile code", 14));
	(*(_29713_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_2275c8280_COMPILER)))),jule::Str("compiler", 8),0LL,jule::Str("Backend compiler", 16));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_PRODUCTION)))),jule::Str("production", 10),'p',jule::Str("Compile for production", 22));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_2275c8280_RC)))),jule::Str("disable-rc", 10),0LL,jule::Str("Disable reference counting", 26));
	(*(_29713_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_2275c8280_CPP_STD)))),jule::Str("cppstd", 6),0LL,jule::Str("C++ standard", 12));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_COPY)))),jule::Str("opt-copy", 8),0LL,jule::Str("Copy optimization", 17));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_DEADCODE)))),jule::Str("opt-deadcode", 12),0LL,jule::Str("Deadcode optimization", 21));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_APPEND)))),jule::Str("opt-append", 10),0LL,jule::Str("Append optimization", 19));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_MATH)))),jule::Str("opt-math", 8),0LL,jule::Str("Math optimization", 17));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_ACCESS)))),jule::Str("opt-access", 10),0LL,jule::Str("Access optimization", 19));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_INLINE)))),jule::Str("opt-inline", 10),0LL,jule::Str("Inline optimization", 19));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_PTR)))),jule::Str("opt-ptr", 7),0LL,jule::Str("Pointer optimizations", 21));
	(*(_29713_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_227532edc_OPT_COND)))),jule::Str("opt-cond", 8),0LL,jule::Str("Conditional optimizations", 25));
	jule::Slice<jule::Str> _31713_content = ({
		auto except = (*(_29713_fs))._method_parse(_29317_args);
		(except.ok()) ? (except.result) : ({
			_227532d99_exit_err(except.error.operator jule::Str());
			nullptr;
		});
	});
	_227571404_check_compiler_flag();
	_227571404_check_cpp_std_flag();
	_227571404_check_target_flag(_29513_target);
	_227571404_check_opt_flag(_29413_opt);
	return _31713_content;
}



inline void _227571404_setup_sema_flags(jule::Int& _33026_flags) {
	if (_2275c8280_SHADOWING) {
		_33026_flags|=1LL;
	}
}



inline jule::Ptr<_228c91a35_IR> _227571404_build_ir(jule::Slice<jule::Str>& _33614_args) {
	jule::Slice<jule::Str> _3379_content = _227571404_check_flags(_33614_args);
	jule::Int _33913_sema_flags = 0LL;
	_227571404_setup_sema_flags(_33913_sema_flags);
	if (_3379_content.len() == 0LL) {
		_227532d99_exit_err(_2276bcb9e_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>()));
	} else if (_3379_content.len() > 1LL) {
		_227532d99_exit_err(jule::Str("undefined content: ", 19) + _3379_content[1LL]);
	}
	jule::Str _34714_path;
	jule::Bool _34720_ok;
	std::tie(_34714_path,_34720_ok) = _227711594_abs(_3379_content[0LL]);
	if ((!(_34720_ok))) {
		_227532d99_exit_err(jule::Str("compile path could not processed because of a problem", 53));
	}
	jule::Ptr<_2276a6da8_Status> _3539_inf = ({
		auto except = _2276a6da8_Status::_static_method_of(_22779d455_PATH_STDLIB);
		(except.ok()) ? (except.result) : ({{
			_227532d99_exit_err(_2276bcb9e_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
			return nullptr;
			return nullptr;
		} jule::Ptr<_2276a6da8_Status>();});
	});
	if ((!((*(_3539_inf))._method_is_dir()))) {
		_227532d99_exit_err(_2276bcb9e_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
	}
	_228cd1217_init_vars();
	jule::Ptr<_228c91a35_IR> _36414_ir;
	jule::Slice<_2276bcb9e_Log> _36418_logs;
	std::tie(_36414_ir,_36418_logs) = _228c91a35_IR::_static_method_build(_34714_path,_33913_sema_flags);
	if ((_36414_ir == nullptr) && (_36418_logs == nullptr)) {
		_227532d99_exit_err(_2276bcb9e_logf(jule::Str("there is no Jule source code in this package: @", 47),jule::Slice<jule::Any>({jule::Any(_34714_path)})));
	}
	if (_36418_logs != nullptr) {
		_227532e21_Logger::_static_method_print_logs(_36418_logs);
		_227532d99_exit_err(jule::Str());
	}
	return _36414_ir;
}



inline void _227571404_compile_command(jule::Slice<jule::Str>& _37925_args) {
	_37925_args=_37925_args.slice(1LL);
	if (_37925_args[0LL] == jule::Str("test", 4)) {
		_2275c8280_TEST=true;
		_37925_args=_37925_args.slice(1LL);
	}
	jule::Ptr<_228c91a35_IR> _38513_ir = _227571404_build_ir(_37925_args);
	
	if ((!(_2275c8280_TEST))) {
		jule::Ptr<_229b6ebcb_Fn> _39017_f = (*((*(_38513_ir))._field_main))._method_find_fn(jule::Str("main", 4),false);
		if (_39017_f == nullptr) {
			_227532d99_exit_err(_2276bcb9e_logf(jule::Str("missing entry point: entry point (main) function is not defined", 63),jule::Slice<jule::Any>()));
		}
		(*(_39017_f))._field_statically=true;
	}
	jule::Ptr<_229b6ebcb_Fn> _39613_f = (*((*(_38513_ir))._field_main))._method_find_fn(jule::Str("init", 4),false);
	if (_39613_f != nullptr) {
		(*(_39613_f))._field_statically=true;
	}
	_227571404_apply_target_independent_optimizations(_38513_ir);
	(*(_38513_ir))._method_order();
	jule::Str _40610_compiler;
	jule::Str _40620_compiler_cmd;
	std::tie(_40610_compiler,_40620_compiler_cmd) = _227571404_gen_compile_cmd(_227571404_get_compile_path(),_38513_ir);
	jule::Str _40813_obj = _1e8949c3a_gen(_38513_ir);
	if (_2275c8280_TEST) {
		_1e8949c3a_append_test_point(_40813_obj,_38513_ir);
	}
	_1e8949c3a_append_standard(_40813_obj,_40610_compiler,_40620_compiler_cmd);
	_227571404_do_spell(_40813_obj,_40610_compiler,_40620_compiler_cmd);
}




void __jule_call_initializers(void) {
	_2275b25dd_OS = jule::Str("darwin", 6);
	_2275b25dd_ARCH = jule::Str("amd64", 5);
	_227532edc_PRODUCTION = false;
	_227532edc_OPT_COPY = false;
	_227532edc_OPT_DEADCODE = false;
	_227532edc_OPT_APPEND = false;
	_227532edc_OPT_MATH = false;
	_227532edc_OPT_ACCESS = false;
	_227532edc_OPT_INLINE = false;
	_227532edc_OPT_PTR = false;
	_227532edc_OPT_COND = false;
	_2275c8280_COMPILER = jule::Str();
	_2275c8280_COMPILER_PATH = jule::Str();
	_2275c8280_CPP_STD = jule::Str("cpp17", 5);
	_2275c8280_SHADOWING = false;
	_2275c8280_TRANSPILATION = false;
	_2275c8280_TEST = false;
	_2275c8280_RC = true;
	_2275ec68e_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
	_2275ec68e_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
	_2275ec68e_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
	_227785d55_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
	_227785d55_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
	_22779d455_PATH_STDLIB = jule::Str();
	_22779d455_PATH_EXEC = jule::Str();
	_22779d455_PATH_WD = jule::Str();
	_22779d455_PATH_API = jule::Str();
	_228bb20b5_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
	_228bb20b5_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
	_22777cad8_F32_INFO = _22777cad8_FloatInfo(23LLU,8LLU,-127LL);
	_22777cad8_F64_INFO = _22777cad8_FloatInfo(52LLU,11LLU,-1023LL);
	_22778ec3d_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
	_2284c0eac_POWTAB = jule::Slice<jule::Int>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
	_2284c0eac_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
	_2284c0eac_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
	_2285d3a92_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
	_2286660ca_LEFTCHEATS = jule::Slice<_2286660ca_LeftCheat>({_2286660ca_LeftCheat(0LL,jule::Str()),_2286660ca_LeftCheat(1LL,jule::Str("5", 1)),_2286660ca_LeftCheat(1LL,jule::Str("25", 2)),_2286660ca_LeftCheat(1LL,jule::Str("125", 3)),_2286660ca_LeftCheat(2LL,jule::Str("625", 3)),_2286660ca_LeftCheat(2LL,jule::Str("3125", 4)),_2286660ca_LeftCheat(2LL,jule::Str("15625", 5)),_2286660ca_LeftCheat(3LL,jule::Str("78125", 5)),_2286660ca_LeftCheat(3LL,jule::Str("390625", 6)),_2286660ca_LeftCheat(3LL,jule::Str("1953125", 7)),_2286660ca_LeftCheat(4LL,jule::Str("9765625", 7)),_2286660ca_LeftCheat(4LL,jule::Str("48828125", 8)),_2286660ca_LeftCheat(4LL,jule::Str("244140625", 9)),_2286660ca_LeftCheat(4LL,jule::Str("1220703125", 10)),_2286660ca_LeftCheat(5LL,jule::Str("6103515625", 10)),_2286660ca_LeftCheat(5LL,jule::Str("30517578125", 11)),_2286660ca_LeftCheat(5LL,jule::Str("152587890625", 12)),_2286660ca_LeftCheat(6LL,jule::Str("762939453125", 12)),_2286660ca_LeftCheat(6LL,jule::Str("3814697265625", 13)),_2286660ca_LeftCheat(6LL,jule::Str("19073486328125", 14)),_2286660ca_LeftCheat(7LL,jule::Str("95367431640625", 14)),_2286660ca_LeftCheat(7LL,jule::Str("476837158203125", 15)),_2286660ca_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_2286660ca_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_2286660ca_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_2286660ca_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_2286660ca_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_2286660ca_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_2286660ca_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_2286660ca_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_2286660ca_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_2286660ca_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_2286660ca_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_2286660ca_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_2286660ca_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_2286660ca_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_2286660ca_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_2286660ca_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_2286660ca_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_2286660ca_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_2286660ca_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_2286660ca_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_2286660ca_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_2286660ca_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_2286660ca_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_2286660ca_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_2286660ca_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_2286660ca_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_2286660ca_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_2286660ca_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_2286660ca_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_2286660ca_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_2286660ca_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_2286660ca_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_2286660ca_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_2286660ca_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_2286660ca_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_2286660ca_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_2286660ca_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_2286660ca_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_2286660ca_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
	_228e8044e__L = jule::new_struct<_228e939c3_RangeTable>(new( std::nothrow ) _228e939c3_RangeTable(jule::Slice<_228e939c3_Range16>({_228e939c3_Range16(65LLU,90LLU,1LLU),_228e939c3_Range16(97LLU,122LLU,1LLU),_228e939c3_Range16(170LLU,181LLU,11LLU),_228e939c3_Range16(186LLU,192LLU,6LLU),_228e939c3_Range16(193LLU,214LLU,1LLU),_228e939c3_Range16(216LLU,246LLU,1LLU),_228e939c3_Range16(248LLU,705LLU,1LLU),_228e939c3_Range16(710LLU,721LLU,1LLU),_228e939c3_Range16(736LLU,740LLU,1LLU),_228e939c3_Range16(748LLU,750LLU,2LLU),_228e939c3_Range16(880LLU,884LLU,1LLU),_228e939c3_Range16(886LLU,887LLU,1LLU),_228e939c3_Range16(890LLU,893LLU,1LLU),_228e939c3_Range16(895LLU,902LLU,7LLU),_228e939c3_Range16(904LLU,906LLU,1LLU),_228e939c3_Range16(908LLU,910LLU,2LLU),_228e939c3_Range16(911LLU,929LLU,1LLU),_228e939c3_Range16(931LLU,1013LLU,1LLU),_228e939c3_Range16(1015LLU,1153LLU,1LLU),_228e939c3_Range16(1162LLU,1327LLU,1LLU),_228e939c3_Range16(1329LLU,1366LLU,1LLU),_228e939c3_Range16(1369LLU,1376LLU,7LLU),_228e939c3_Range16(1377LLU,1416LLU,1LLU),_228e939c3_Range16(1488LLU,1514LLU,1LLU),_228e939c3_Range16(1519LLU,1522LLU,1LLU),_228e939c3_Range16(1568LLU,1610LLU,1LLU),_228e939c3_Range16(1646LLU,1647LLU,1LLU),_228e939c3_Range16(1649LLU,1747LLU,1LLU),_228e939c3_Range16(1749LLU,1765LLU,16LLU),_228e939c3_Range16(1766LLU,1774LLU,8LLU),_228e939c3_Range16(1775LLU,1786LLU,11LLU),_228e939c3_Range16(1787LLU,1788LLU,1LLU),_228e939c3_Range16(1791LLU,1808LLU,17LLU),_228e939c3_Range16(1810LLU,1839LLU,1LLU),_228e939c3_Range16(1869LLU,1957LLU,1LLU),_228e939c3_Range16(1969LLU,1994LLU,25LLU),_228e939c3_Range16(1995LLU,2026LLU,1LLU),_228e939c3_Range16(2036LLU,2037LLU,1LLU),_228e939c3_Range16(2042LLU,2048LLU,6LLU),_228e939c3_Range16(2049LLU,2069LLU,1LLU),_228e939c3_Range16(2074LLU,2084LLU,10LLU),_228e939c3_Range16(2088LLU,2112LLU,24LLU),_228e939c3_Range16(2113LLU,2136LLU,1LLU),_228e939c3_Range16(2144LLU,2154LLU,1LLU),_228e939c3_Range16(2160LLU,2183LLU,1LLU),_228e939c3_Range16(2185LLU,2190LLU,1LLU),_228e939c3_Range16(2208LLU,2249LLU,1LLU),_228e939c3_Range16(2308LLU,2361LLU,1LLU),_228e939c3_Range16(2365LLU,2384LLU,19LLU),_228e939c3_Range16(2392LLU,2401LLU,1LLU),_228e939c3_Range16(2417LLU,2432LLU,1LLU),_228e939c3_Range16(2437LLU,2444LLU,1LLU),_228e939c3_Range16(2447LLU,2448LLU,1LLU),_228e939c3_Range16(2451LLU,2472LLU,1LLU),_228e939c3_Range16(2474LLU,2480LLU,1LLU),_228e939c3_Range16(2482LLU,2486LLU,4LLU),_228e939c3_Range16(2487LLU,2489LLU,1LLU),_228e939c3_Range16(2493LLU,2510LLU,17LLU),_228e939c3_Range16(2524LLU,2525LLU,1LLU),_228e939c3_Range16(2527LLU,2529LLU,1LLU),_228e939c3_Range16(2544LLU,2545LLU,1LLU),_228e939c3_Range16(2556LLU,2565LLU,9LLU),_228e939c3_Range16(2566LLU,2570LLU,1LLU),_228e939c3_Range16(2575LLU,2576LLU,1LLU),_228e939c3_Range16(2579LLU,2600LLU,1LLU),_228e939c3_Range16(2602LLU,2608LLU,1LLU),_228e939c3_Range16(2610LLU,2611LLU,1LLU),_228e939c3_Range16(2613LLU,2614LLU,1LLU),_228e939c3_Range16(2616LLU,2617LLU,1LLU),_228e939c3_Range16(2649LLU,2652LLU,1LLU),_228e939c3_Range16(2654LLU,2674LLU,20LLU),_228e939c3_Range16(2675LLU,2676LLU,1LLU),_228e939c3_Range16(2693LLU,2701LLU,1LLU),_228e939c3_Range16(2703LLU,2705LLU,1LLU),_228e939c3_Range16(2707LLU,2728LLU,1LLU),_228e939c3_Range16(2730LLU,2736LLU,1LLU),_228e939c3_Range16(2738LLU,2739LLU,1LLU),_228e939c3_Range16(2741LLU,2745LLU,1LLU),_228e939c3_Range16(2749LLU,2768LLU,19LLU),_228e939c3_Range16(2784LLU,2785LLU,1LLU),_228e939c3_Range16(2809LLU,2821LLU,12LLU),_228e939c3_Range16(2822LLU,2828LLU,1LLU),_228e939c3_Range16(2831LLU,2832LLU,1LLU),_228e939c3_Range16(2835LLU,2856LLU,1LLU),_228e939c3_Range16(2858LLU,2864LLU,1LLU),_228e939c3_Range16(2866LLU,2867LLU,1LLU),_228e939c3_Range16(2869LLU,2873LLU,1LLU),_228e939c3_Range16(2877LLU,2908LLU,31LLU),_228e939c3_Range16(2909LLU,2911LLU,2LLU),_228e939c3_Range16(2912LLU,2913LLU,1LLU),_228e939c3_Range16(2929LLU,2947LLU,18LLU),_228e939c3_Range16(2949LLU,2954LLU,1LLU),_228e939c3_Range16(2958LLU,2960LLU,1LLU),_228e939c3_Range16(2962LLU,2965LLU,1LLU),_228e939c3_Range16(2969LLU,2970LLU,1LLU),_228e939c3_Range16(2972LLU,2974LLU,2LLU),_228e939c3_Range16(2975LLU,2979LLU,4LLU),_228e939c3_Range16(2980LLU,2984LLU,4LLU),_228e939c3_Range16(2985LLU,2986LLU,1LLU),_228e939c3_Range16(2990LLU,3001LLU,1LLU),_228e939c3_Range16(3024LLU,3077LLU,53LLU),_228e939c3_Range16(3078LLU,3084LLU,1LLU),_228e939c3_Range16(3086LLU,3088LLU,1LLU),_228e939c3_Range16(3090LLU,3112LLU,1LLU),_228e939c3_Range16(3114LLU,3129LLU,1LLU),_228e939c3_Range16(3133LLU,3160LLU,27LLU),_228e939c3_Range16(3161LLU,3162LLU,1LLU),_228e939c3_Range16(3165LLU,3168LLU,3LLU),_228e939c3_Range16(3169LLU,3200LLU,31LLU),_228e939c3_Range16(3205LLU,3212LLU,1LLU),_228e939c3_Range16(3214LLU,3216LLU,1LLU),_228e939c3_Range16(3218LLU,3240LLU,1LLU),_228e939c3_Range16(3242LLU,3251LLU,1LLU),_228e939c3_Range16(3253LLU,3257LLU,1LLU),_228e939c3_Range16(3261LLU,3293LLU,32LLU),_228e939c3_Range16(3294LLU,3296LLU,2LLU),_228e939c3_Range16(3297LLU,3313LLU,16LLU),_228e939c3_Range16(3314LLU,3332LLU,18LLU),_228e939c3_Range16(3333LLU,3340LLU,1LLU),_228e939c3_Range16(3342LLU,3344LLU,1LLU),_228e939c3_Range16(3346LLU,3386LLU,1LLU),_228e939c3_Range16(3389LLU,3406LLU,17LLU),_228e939c3_Range16(3412LLU,3414LLU,1LLU),_228e939c3_Range16(3423LLU,3425LLU,1LLU),_228e939c3_Range16(3450LLU,3455LLU,1LLU),_228e939c3_Range16(3461LLU,3478LLU,1LLU),_228e939c3_Range16(3482LLU,3505LLU,1LLU),_228e939c3_Range16(3507LLU,3515LLU,1LLU),_228e939c3_Range16(3517LLU,3520LLU,3LLU),_228e939c3_Range16(3521LLU,3526LLU,1LLU),_228e939c3_Range16(3585LLU,3632LLU,1LLU),_228e939c3_Range16(3634LLU,3635LLU,1LLU),_228e939c3_Range16(3648LLU,3654LLU,1LLU),_228e939c3_Range16(3713LLU,3714LLU,1LLU),_228e939c3_Range16(3716LLU,3718LLU,2LLU),_228e939c3_Range16(3719LLU,3722LLU,1LLU),_228e939c3_Range16(3724LLU,3747LLU,1LLU),_228e939c3_Range16(3749LLU,3751LLU,2LLU),_228e939c3_Range16(3752LLU,3760LLU,1LLU),_228e939c3_Range16(3762LLU,3763LLU,1LLU),_228e939c3_Range16(3773LLU,3776LLU,3LLU),_228e939c3_Range16(3777LLU,3780LLU,1LLU),_228e939c3_Range16(3782LLU,3804LLU,22LLU),_228e939c3_Range16(3805LLU,3807LLU,1LLU),_228e939c3_Range16(3840LLU,3904LLU,64LLU),_228e939c3_Range16(3905LLU,3911LLU,1LLU),_228e939c3_Range16(3913LLU,3948LLU,1LLU),_228e939c3_Range16(3976LLU,3980LLU,1LLU),_228e939c3_Range16(4096LLU,4138LLU,1LLU),_228e939c3_Range16(4159LLU,4176LLU,17LLU),_228e939c3_Range16(4177LLU,4181LLU,1LLU),_228e939c3_Range16(4186LLU,4189LLU,1LLU),_228e939c3_Range16(4193LLU,4197LLU,4LLU),_228e939c3_Range16(4198LLU,4206LLU,8LLU),_228e939c3_Range16(4207LLU,4208LLU,1LLU),_228e939c3_Range16(4213LLU,4225LLU,1LLU),_228e939c3_Range16(4238LLU,4256LLU,18LLU),_228e939c3_Range16(4257LLU,4293LLU,1LLU),_228e939c3_Range16(4295LLU,4301LLU,6LLU),_228e939c3_Range16(4304LLU,4346LLU,1LLU),_228e939c3_Range16(4348LLU,4680LLU,1LLU),_228e939c3_Range16(4682LLU,4685LLU,1LLU),_228e939c3_Range16(4688LLU,4694LLU,1LLU),_228e939c3_Range16(4696LLU,4698LLU,2LLU),_228e939c3_Range16(4699LLU,4701LLU,1LLU),_228e939c3_Range16(4704LLU,4744LLU,1LLU),_228e939c3_Range16(4746LLU,4749LLU,1LLU),_228e939c3_Range16(4752LLU,4784LLU,1LLU),_228e939c3_Range16(4786LLU,4789LLU,1LLU),_228e939c3_Range16(4792LLU,4798LLU,1LLU),_228e939c3_Range16(4800LLU,4802LLU,2LLU),_228e939c3_Range16(4803LLU,4805LLU,1LLU),_228e939c3_Range16(4808LLU,4822LLU,1LLU),_228e939c3_Range16(4824LLU,4880LLU,1LLU),_228e939c3_Range16(4882LLU,4885LLU,1LLU),_228e939c3_Range16(4888LLU,4954LLU,1LLU),_228e939c3_Range16(4992LLU,5007LLU,1LLU),_228e939c3_Range16(5024LLU,5109LLU,1LLU),_228e939c3_Range16(5112LLU,5117LLU,1LLU),_228e939c3_Range16(5121LLU,5740LLU,1LLU),_228e939c3_Range16(5743LLU,5759LLU,1LLU),_228e939c3_Range16(5761LLU,5786LLU,1LLU),_228e939c3_Range16(5792LLU,5866LLU,1LLU),_228e939c3_Range16(5873LLU,5880LLU,1LLU),_228e939c3_Range16(5888LLU,5905LLU,1LLU),_228e939c3_Range16(5919LLU,5937LLU,1LLU),_228e939c3_Range16(5952LLU,5969LLU,1LLU),_228e939c3_Range16(5984LLU,5996LLU,1LLU),_228e939c3_Range16(5998LLU,6000LLU,1LLU),_228e939c3_Range16(6016LLU,6067LLU,1LLU),_228e939c3_Range16(6103LLU,6108LLU,5LLU),_228e939c3_Range16(6176LLU,6264LLU,1LLU),_228e939c3_Range16(6272LLU,6276LLU,1LLU),_228e939c3_Range16(6279LLU,6312LLU,1LLU),_228e939c3_Range16(6314LLU,6320LLU,6LLU),_228e939c3_Range16(6321LLU,6389LLU,1LLU),_228e939c3_Range16(6400LLU,6430LLU,1LLU),_228e939c3_Range16(6480LLU,6509LLU,1LLU),_228e939c3_Range16(6512LLU,6516LLU,1LLU),_228e939c3_Range16(6528LLU,6571LLU,1LLU),_228e939c3_Range16(6576LLU,6601LLU,1LLU),_228e939c3_Range16(6656LLU,6678LLU,1LLU),_228e939c3_Range16(6688LLU,6740LLU,1LLU),_228e939c3_Range16(6823LLU,6917LLU,94LLU),_228e939c3_Range16(6918LLU,6963LLU,1LLU),_228e939c3_Range16(6981LLU,6988LLU,1LLU),_228e939c3_Range16(7043LLU,7072LLU,1LLU),_228e939c3_Range16(7086LLU,7087LLU,1LLU),_228e939c3_Range16(7098LLU,7141LLU,1LLU),_228e939c3_Range16(7168LLU,7203LLU,1LLU),_228e939c3_Range16(7245LLU,7247LLU,1LLU),_228e939c3_Range16(7258LLU,7293LLU,1LLU),_228e939c3_Range16(7296LLU,7304LLU,1LLU),_228e939c3_Range16(7312LLU,7354LLU,1LLU),_228e939c3_Range16(7357LLU,7359LLU,1LLU),_228e939c3_Range16(7401LLU,7404LLU,1LLU),_228e939c3_Range16(7406LLU,7411LLU,1LLU),_228e939c3_Range16(7413LLU,7414LLU,1LLU),_228e939c3_Range16(7418LLU,7424LLU,6LLU),_228e939c3_Range16(7425LLU,7615LLU,1LLU),_228e939c3_Range16(7680LLU,7957LLU,1LLU),_228e939c3_Range16(7960LLU,7965LLU,1LLU),_228e939c3_Range16(7968LLU,8005LLU,1LLU),_228e939c3_Range16(8008LLU,8013LLU,1LLU),_228e939c3_Range16(8016LLU,8023LLU,1LLU),_228e939c3_Range16(8025LLU,8031LLU,2LLU),_228e939c3_Range16(8032LLU,8061LLU,1LLU),_228e939c3_Range16(8064LLU,8116LLU,1LLU),_228e939c3_Range16(8118LLU,8124LLU,1LLU),_228e939c3_Range16(8126LLU,8130LLU,4LLU),_228e939c3_Range16(8131LLU,8132LLU,1LLU),_228e939c3_Range16(8134LLU,8140LLU,1LLU),_228e939c3_Range16(8144LLU,8147LLU,1LLU),_228e939c3_Range16(8150LLU,8155LLU,1LLU),_228e939c3_Range16(8160LLU,8172LLU,1LLU),_228e939c3_Range16(8178LLU,8180LLU,1LLU),_228e939c3_Range16(8182LLU,8188LLU,1LLU),_228e939c3_Range16(8305LLU,8319LLU,14LLU),_228e939c3_Range16(8336LLU,8348LLU,1LLU),_228e939c3_Range16(8450LLU,8455LLU,5LLU),_228e939c3_Range16(8458LLU,8467LLU,1LLU),_228e939c3_Range16(8469LLU,8473LLU,4LLU),_228e939c3_Range16(8474LLU,8477LLU,1LLU),_228e939c3_Range16(8484LLU,8490LLU,2LLU),_228e939c3_Range16(8491LLU,8493LLU,1LLU),_228e939c3_Range16(8495LLU,8505LLU,1LLU),_228e939c3_Range16(8508LLU,8511LLU,1LLU),_228e939c3_Range16(8517LLU,8521LLU,1LLU),_228e939c3_Range16(8526LLU,8579LLU,53LLU),_228e939c3_Range16(8580LLU,11264LLU,2684LLU),_228e939c3_Range16(11265LLU,11492LLU,1LLU),_228e939c3_Range16(11499LLU,11502LLU,1LLU),_228e939c3_Range16(11506LLU,11507LLU,1LLU),_228e939c3_Range16(11520LLU,11557LLU,1LLU),_228e939c3_Range16(11559LLU,11565LLU,6LLU),_228e939c3_Range16(11568LLU,11623LLU,1LLU),_228e939c3_Range16(11631LLU,11648LLU,17LLU),_228e939c3_Range16(11649LLU,11670LLU,1LLU),_228e939c3_Range16(11680LLU,11686LLU,1LLU),_228e939c3_Range16(11688LLU,11694LLU,1LLU),_228e939c3_Range16(11696LLU,11702LLU,1LLU),_228e939c3_Range16(11704LLU,11710LLU,1LLU),_228e939c3_Range16(11712LLU,11718LLU,1LLU),_228e939c3_Range16(11720LLU,11726LLU,1LLU),_228e939c3_Range16(11728LLU,11734LLU,1LLU),_228e939c3_Range16(11736LLU,11742LLU,1LLU),_228e939c3_Range16(11823LLU,12293LLU,470LLU),_228e939c3_Range16(12294LLU,12337LLU,43LLU),_228e939c3_Range16(12338LLU,12341LLU,1LLU),_228e939c3_Range16(12347LLU,12348LLU,1LLU),_228e939c3_Range16(12353LLU,12438LLU,1LLU),_228e939c3_Range16(12445LLU,12447LLU,1LLU),_228e939c3_Range16(12449LLU,12538LLU,1LLU),_228e939c3_Range16(12540LLU,12543LLU,1LLU),_228e939c3_Range16(12549LLU,12591LLU,1LLU),_228e939c3_Range16(12593LLU,12686LLU,1LLU),_228e939c3_Range16(12704LLU,12735LLU,1LLU),_228e939c3_Range16(12784LLU,12799LLU,1LLU),_228e939c3_Range16(13312LLU,19903LLU,1LLU),_228e939c3_Range16(19968LLU,42124LLU,1LLU),_228e939c3_Range16(42192LLU,42237LLU,1LLU),_228e939c3_Range16(42240LLU,42508LLU,1LLU),_228e939c3_Range16(42512LLU,42527LLU,1LLU),_228e939c3_Range16(42538LLU,42539LLU,1LLU),_228e939c3_Range16(42560LLU,42606LLU,1LLU),_228e939c3_Range16(42623LLU,42653LLU,1LLU),_228e939c3_Range16(42656LLU,42725LLU,1LLU),_228e939c3_Range16(42775LLU,42783LLU,1LLU),_228e939c3_Range16(42786LLU,42888LLU,1LLU),_228e939c3_Range16(42891LLU,42954LLU,1LLU),_228e939c3_Range16(42960LLU,42961LLU,1LLU),_228e939c3_Range16(42963LLU,42965LLU,2LLU),_228e939c3_Range16(42966LLU,42969LLU,1LLU),_228e939c3_Range16(42994LLU,43009LLU,1LLU),_228e939c3_Range16(43011LLU,43013LLU,1LLU),_228e939c3_Range16(43015LLU,43018LLU,1LLU),_228e939c3_Range16(43020LLU,43042LLU,1LLU),_228e939c3_Range16(43072LLU,43123LLU,1LLU),_228e939c3_Range16(43138LLU,43187LLU,1LLU),_228e939c3_Range16(43250LLU,43255LLU,1LLU),_228e939c3_Range16(43259LLU,43261LLU,2LLU),_228e939c3_Range16(43262LLU,43274LLU,12LLU),_228e939c3_Range16(43275LLU,43301LLU,1LLU),_228e939c3_Range16(43312LLU,43334LLU,1LLU),_228e939c3_Range16(43360LLU,43388LLU,1LLU),_228e939c3_Range16(43396LLU,43442LLU,1LLU),_228e939c3_Range16(43471LLU,43488LLU,17LLU),_228e939c3_Range16(43489LLU,43492LLU,1LLU),_228e939c3_Range16(43494LLU,43503LLU,1LLU),_228e939c3_Range16(43514LLU,43518LLU,1LLU),_228e939c3_Range16(43520LLU,43560LLU,1LLU),_228e939c3_Range16(43584LLU,43586LLU,1LLU),_228e939c3_Range16(43588LLU,43595LLU,1LLU),_228e939c3_Range16(43616LLU,43638LLU,1LLU),_228e939c3_Range16(43642LLU,43646LLU,4LLU),_228e939c3_Range16(43647LLU,43695LLU,1LLU),_228e939c3_Range16(43697LLU,43701LLU,4LLU),_228e939c3_Range16(43702LLU,43705LLU,3LLU),_228e939c3_Range16(43706LLU,43709LLU,1LLU),_228e939c3_Range16(43712LLU,43714LLU,2LLU),_228e939c3_Range16(43739LLU,43741LLU,1LLU),_228e939c3_Range16(43744LLU,43754LLU,1LLU),_228e939c3_Range16(43762LLU,43764LLU,1LLU),_228e939c3_Range16(43777LLU,43782LLU,1LLU),_228e939c3_Range16(43785LLU,43790LLU,1LLU),_228e939c3_Range16(43793LLU,43798LLU,1LLU),_228e939c3_Range16(43808LLU,43814LLU,1LLU),_228e939c3_Range16(43816LLU,43822LLU,1LLU),_228e939c3_Range16(43824LLU,43866LLU,1LLU),_228e939c3_Range16(43868LLU,43881LLU,1LLU),_228e939c3_Range16(43888LLU,44002LLU,1LLU),_228e939c3_Range16(44032LLU,55203LLU,1LLU),_228e939c3_Range16(55216LLU,55238LLU,1LLU),_228e939c3_Range16(55243LLU,55291LLU,1LLU),_228e939c3_Range16(63744LLU,64109LLU,1LLU),_228e939c3_Range16(64112LLU,64217LLU,1LLU),_228e939c3_Range16(64256LLU,64262LLU,1LLU),_228e939c3_Range16(64275LLU,64279LLU,1LLU),_228e939c3_Range16(64285LLU,64287LLU,2LLU),_228e939c3_Range16(64288LLU,64296LLU,1LLU),_228e939c3_Range16(64298LLU,64310LLU,1LLU),_228e939c3_Range16(64312LLU,64316LLU,1LLU),_228e939c3_Range16(64318LLU,64320LLU,2LLU),_228e939c3_Range16(64321LLU,64323LLU,2LLU),_228e939c3_Range16(64324LLU,64326LLU,2LLU),_228e939c3_Range16(64327LLU,64433LLU,1LLU),_228e939c3_Range16(64467LLU,64829LLU,1LLU),_228e939c3_Range16(64848LLU,64911LLU,1LLU),_228e939c3_Range16(64914LLU,64967LLU,1LLU),_228e939c3_Range16(65008LLU,65019LLU,1LLU),_228e939c3_Range16(65136LLU,65140LLU,1LLU),_228e939c3_Range16(65142LLU,65276LLU,1LLU),_228e939c3_Range16(65313LLU,65338LLU,1LLU),_228e939c3_Range16(65345LLU,65370LLU,1LLU),_228e939c3_Range16(65382LLU,65470LLU,1LLU),_228e939c3_Range16(65474LLU,65479LLU,1LLU),_228e939c3_Range16(65482LLU,65487LLU,1LLU),_228e939c3_Range16(65490LLU,65495LLU,1LLU),_228e939c3_Range16(65498LLU,65500LLU,1LLU)}),jule::Slice<_228e939c3_Range32>({_228e939c3_Range32(65536LLU,65547LLU,1LLU),_228e939c3_Range32(65549LLU,65574LLU,1LLU),_228e939c3_Range32(65576LLU,65594LLU,1LLU),_228e939c3_Range32(65596LLU,65597LLU,1LLU),_228e939c3_Range32(65599LLU,65613LLU,1LLU),_228e939c3_Range32(65616LLU,65629LLU,1LLU),_228e939c3_Range32(65664LLU,65786LLU,1LLU),_228e939c3_Range32(66176LLU,66204LLU,1LLU),_228e939c3_Range32(66208LLU,66256LLU,1LLU),_228e939c3_Range32(66304LLU,66335LLU,1LLU),_228e939c3_Range32(66349LLU,66368LLU,1LLU),_228e939c3_Range32(66370LLU,66377LLU,1LLU),_228e939c3_Range32(66384LLU,66421LLU,1LLU),_228e939c3_Range32(66432LLU,66461LLU,1LLU),_228e939c3_Range32(66464LLU,66499LLU,1LLU),_228e939c3_Range32(66504LLU,66511LLU,1LLU),_228e939c3_Range32(66560LLU,66717LLU,1LLU),_228e939c3_Range32(66736LLU,66771LLU,1LLU),_228e939c3_Range32(66776LLU,66811LLU,1LLU),_228e939c3_Range32(66816LLU,66855LLU,1LLU),_228e939c3_Range32(66864LLU,66915LLU,1LLU),_228e939c3_Range32(66928LLU,66938LLU,1LLU),_228e939c3_Range32(66940LLU,66954LLU,1LLU),_228e939c3_Range32(66956LLU,66962LLU,1LLU),_228e939c3_Range32(66964LLU,66965LLU,1LLU),_228e939c3_Range32(66967LLU,66977LLU,1LLU),_228e939c3_Range32(66979LLU,66993LLU,1LLU),_228e939c3_Range32(66995LLU,67001LLU,1LLU),_228e939c3_Range32(67003LLU,67004LLU,1LLU),_228e939c3_Range32(67072LLU,67382LLU,1LLU),_228e939c3_Range32(67392LLU,67413LLU,1LLU),_228e939c3_Range32(67424LLU,67431LLU,1LLU),_228e939c3_Range32(67456LLU,67461LLU,1LLU),_228e939c3_Range32(67463LLU,67504LLU,1LLU),_228e939c3_Range32(67506LLU,67514LLU,1LLU),_228e939c3_Range32(67584LLU,67589LLU,1LLU),_228e939c3_Range32(67592LLU,67594LLU,2LLU),_228e939c3_Range32(67595LLU,67637LLU,1LLU),_228e939c3_Range32(67639LLU,67640LLU,1LLU),_228e939c3_Range32(67644LLU,67647LLU,3LLU),_228e939c3_Range32(67648LLU,67669LLU,1LLU),_228e939c3_Range32(67680LLU,67702LLU,1LLU),_228e939c3_Range32(67712LLU,67742LLU,1LLU),_228e939c3_Range32(67808LLU,67826LLU,1LLU),_228e939c3_Range32(67828LLU,67829LLU,1LLU),_228e939c3_Range32(67840LLU,67861LLU,1LLU),_228e939c3_Range32(67872LLU,67897LLU,1LLU),_228e939c3_Range32(67968LLU,68023LLU,1LLU),_228e939c3_Range32(68030LLU,68031LLU,1LLU),_228e939c3_Range32(68096LLU,68112LLU,16LLU),_228e939c3_Range32(68113LLU,68115LLU,1LLU),_228e939c3_Range32(68117LLU,68119LLU,1LLU),_228e939c3_Range32(68121LLU,68149LLU,1LLU),_228e939c3_Range32(68192LLU,68220LLU,1LLU),_228e939c3_Range32(68224LLU,68252LLU,1LLU),_228e939c3_Range32(68288LLU,68295LLU,1LLU),_228e939c3_Range32(68297LLU,68324LLU,1LLU),_228e939c3_Range32(68352LLU,68405LLU,1LLU),_228e939c3_Range32(68416LLU,68437LLU,1LLU),_228e939c3_Range32(68448LLU,68466LLU,1LLU),_228e939c3_Range32(68480LLU,68497LLU,1LLU),_228e939c3_Range32(68608LLU,68680LLU,1LLU),_228e939c3_Range32(68736LLU,68786LLU,1LLU),_228e939c3_Range32(68800LLU,68850LLU,1LLU),_228e939c3_Range32(68864LLU,68899LLU,1LLU),_228e939c3_Range32(69248LLU,69289LLU,1LLU),_228e939c3_Range32(69296LLU,69297LLU,1LLU),_228e939c3_Range32(69376LLU,69404LLU,1LLU),_228e939c3_Range32(69415LLU,69424LLU,9LLU),_228e939c3_Range32(69425LLU,69445LLU,1LLU),_228e939c3_Range32(69488LLU,69505LLU,1LLU),_228e939c3_Range32(69552LLU,69572LLU,1LLU),_228e939c3_Range32(69600LLU,69622LLU,1LLU),_228e939c3_Range32(69635LLU,69687LLU,1LLU),_228e939c3_Range32(69745LLU,69746LLU,1LLU),_228e939c3_Range32(69749LLU,69763LLU,14LLU),_228e939c3_Range32(69764LLU,69807LLU,1LLU),_228e939c3_Range32(69840LLU,69864LLU,1LLU),_228e939c3_Range32(69891LLU,69926LLU,1LLU),_228e939c3_Range32(69956LLU,69959LLU,3LLU),_228e939c3_Range32(69968LLU,70002LLU,1LLU),_228e939c3_Range32(70006LLU,70019LLU,13LLU),_228e939c3_Range32(70020LLU,70066LLU,1LLU),_228e939c3_Range32(70081LLU,70084LLU,1LLU),_228e939c3_Range32(70106LLU,70108LLU,2LLU),_228e939c3_Range32(70144LLU,70161LLU,1LLU),_228e939c3_Range32(70163LLU,70187LLU,1LLU),_228e939c3_Range32(70207LLU,70208LLU,1LLU),_228e939c3_Range32(70272LLU,70278LLU,1LLU),_228e939c3_Range32(70280LLU,70282LLU,2LLU),_228e939c3_Range32(70283LLU,70285LLU,1LLU),_228e939c3_Range32(70287LLU,70301LLU,1LLU),_228e939c3_Range32(70303LLU,70312LLU,1LLU),_228e939c3_Range32(70320LLU,70366LLU,1LLU),_228e939c3_Range32(70405LLU,70412LLU,1LLU),_228e939c3_Range32(70415LLU,70416LLU,1LLU),_228e939c3_Range32(70419LLU,70440LLU,1LLU),_228e939c3_Range32(70442LLU,70448LLU,1LLU),_228e939c3_Range32(70450LLU,70451LLU,1LLU),_228e939c3_Range32(70453LLU,70457LLU,1LLU),_228e939c3_Range32(70461LLU,70480LLU,19LLU),_228e939c3_Range32(70493LLU,70497LLU,1LLU),_228e939c3_Range32(70656LLU,70708LLU,1LLU),_228e939c3_Range32(70727LLU,70730LLU,1LLU),_228e939c3_Range32(70751LLU,70753LLU,1LLU),_228e939c3_Range32(70784LLU,70831LLU,1LLU),_228e939c3_Range32(70852LLU,70853LLU,1LLU),_228e939c3_Range32(70855LLU,71040LLU,185LLU),_228e939c3_Range32(71041LLU,71086LLU,1LLU),_228e939c3_Range32(71128LLU,71131LLU,1LLU),_228e939c3_Range32(71168LLU,71215LLU,1LLU),_228e939c3_Range32(71236LLU,71296LLU,60LLU),_228e939c3_Range32(71297LLU,71338LLU,1LLU),_228e939c3_Range32(71352LLU,71424LLU,72LLU),_228e939c3_Range32(71425LLU,71450LLU,1LLU),_228e939c3_Range32(71488LLU,71494LLU,1LLU),_228e939c3_Range32(71680LLU,71723LLU,1LLU),_228e939c3_Range32(71840LLU,71903LLU,1LLU),_228e939c3_Range32(71935LLU,71942LLU,1LLU),_228e939c3_Range32(71945LLU,71948LLU,3LLU),_228e939c3_Range32(71949LLU,71955LLU,1LLU),_228e939c3_Range32(71957LLU,71958LLU,1LLU),_228e939c3_Range32(71960LLU,71983LLU,1LLU),_228e939c3_Range32(71999LLU,72001LLU,2LLU),_228e939c3_Range32(72096LLU,72103LLU,1LLU),_228e939c3_Range32(72106LLU,72144LLU,1LLU),_228e939c3_Range32(72161LLU,72163LLU,2LLU),_228e939c3_Range32(72192LLU,72203LLU,11LLU),_228e939c3_Range32(72204LLU,72242LLU,1LLU),_228e939c3_Range32(72250LLU,72272LLU,22LLU),_228e939c3_Range32(72284LLU,72329LLU,1LLU),_228e939c3_Range32(72349LLU,72368LLU,19LLU),_228e939c3_Range32(72369LLU,72440LLU,1LLU),_228e939c3_Range32(72704LLU,72712LLU,1LLU),_228e939c3_Range32(72714LLU,72750LLU,1LLU),_228e939c3_Range32(72768LLU,72818LLU,50LLU),_228e939c3_Range32(72819LLU,72847LLU,1LLU),_228e939c3_Range32(72960LLU,72966LLU,1LLU),_228e939c3_Range32(72968LLU,72969LLU,1LLU),_228e939c3_Range32(72971LLU,73008LLU,1LLU),_228e939c3_Range32(73030LLU,73056LLU,26LLU),_228e939c3_Range32(73057LLU,73061LLU,1LLU),_228e939c3_Range32(73063LLU,73064LLU,1LLU),_228e939c3_Range32(73066LLU,73097LLU,1LLU),_228e939c3_Range32(73112LLU,73440LLU,328LLU),_228e939c3_Range32(73441LLU,73458LLU,1LLU),_228e939c3_Range32(73474LLU,73476LLU,2LLU),_228e939c3_Range32(73477LLU,73488LLU,1LLU),_228e939c3_Range32(73490LLU,73523LLU,1LLU),_228e939c3_Range32(73648LLU,73728LLU,80LLU),_228e939c3_Range32(73729LLU,74649LLU,1LLU),_228e939c3_Range32(74880LLU,75075LLU,1LLU),_228e939c3_Range32(77712LLU,77808LLU,1LLU),_228e939c3_Range32(77824LLU,78895LLU,1LLU),_228e939c3_Range32(78913LLU,78918LLU,1LLU),_228e939c3_Range32(82944LLU,83526LLU,1LLU),_228e939c3_Range32(92160LLU,92728LLU,1LLU),_228e939c3_Range32(92736LLU,92766LLU,1LLU),_228e939c3_Range32(92784LLU,92862LLU,1LLU),_228e939c3_Range32(92880LLU,92909LLU,1LLU),_228e939c3_Range32(92928LLU,92975LLU,1LLU),_228e939c3_Range32(92992LLU,92995LLU,1LLU),_228e939c3_Range32(93027LLU,93047LLU,1LLU),_228e939c3_Range32(93053LLU,93071LLU,1LLU),_228e939c3_Range32(93760LLU,93823LLU,1LLU),_228e939c3_Range32(93952LLU,94026LLU,1LLU),_228e939c3_Range32(94032LLU,94099LLU,67LLU),_228e939c3_Range32(94100LLU,94111LLU,1LLU),_228e939c3_Range32(94176LLU,94177LLU,1LLU),_228e939c3_Range32(94179LLU,94208LLU,29LLU),_228e939c3_Range32(94209LLU,100343LLU,1LLU),_228e939c3_Range32(100352LLU,101589LLU,1LLU),_228e939c3_Range32(101632LLU,101640LLU,1LLU),_228e939c3_Range32(110576LLU,110579LLU,1LLU),_228e939c3_Range32(110581LLU,110587LLU,1LLU),_228e939c3_Range32(110589LLU,110590LLU,1LLU),_228e939c3_Range32(110592LLU,110882LLU,1LLU),_228e939c3_Range32(110898LLU,110928LLU,30LLU),_228e939c3_Range32(110929LLU,110930LLU,1LLU),_228e939c3_Range32(110933LLU,110948LLU,15LLU),_228e939c3_Range32(110949LLU,110951LLU,1LLU),_228e939c3_Range32(110960LLU,111355LLU,1LLU),_228e939c3_Range32(113664LLU,113770LLU,1LLU),_228e939c3_Range32(113776LLU,113788LLU,1LLU),_228e939c3_Range32(113792LLU,113800LLU,1LLU),_228e939c3_Range32(113808LLU,113817LLU,1LLU),_228e939c3_Range32(119808LLU,119892LLU,1LLU),_228e939c3_Range32(119894LLU,119964LLU,1LLU),_228e939c3_Range32(119966LLU,119967LLU,1LLU),_228e939c3_Range32(119970LLU,119973LLU,3LLU),_228e939c3_Range32(119974LLU,119977LLU,3LLU),_228e939c3_Range32(119978LLU,119980LLU,1LLU),_228e939c3_Range32(119982LLU,119993LLU,1LLU),_228e939c3_Range32(119995LLU,119997LLU,2LLU),_228e939c3_Range32(119998LLU,120003LLU,1LLU),_228e939c3_Range32(120005LLU,120069LLU,1LLU),_228e939c3_Range32(120071LLU,120074LLU,1LLU),_228e939c3_Range32(120077LLU,120084LLU,1LLU),_228e939c3_Range32(120086LLU,120092LLU,1LLU),_228e939c3_Range32(120094LLU,120121LLU,1LLU),_228e939c3_Range32(120123LLU,120126LLU,1LLU),_228e939c3_Range32(120128LLU,120132LLU,1LLU),_228e939c3_Range32(120134LLU,120138LLU,4LLU),_228e939c3_Range32(120139LLU,120144LLU,1LLU),_228e939c3_Range32(120146LLU,120485LLU,1LLU),_228e939c3_Range32(120488LLU,120512LLU,1LLU),_228e939c3_Range32(120514LLU,120538LLU,1LLU),_228e939c3_Range32(120540LLU,120570LLU,1LLU),_228e939c3_Range32(120572LLU,120596LLU,1LLU),_228e939c3_Range32(120598LLU,120628LLU,1LLU),_228e939c3_Range32(120630LLU,120654LLU,1LLU),_228e939c3_Range32(120656LLU,120686LLU,1LLU),_228e939c3_Range32(120688LLU,120712LLU,1LLU),_228e939c3_Range32(120714LLU,120744LLU,1LLU),_228e939c3_Range32(120746LLU,120770LLU,1LLU),_228e939c3_Range32(120772LLU,120779LLU,1LLU),_228e939c3_Range32(122624LLU,122654LLU,1LLU),_228e939c3_Range32(122661LLU,122666LLU,1LLU),_228e939c3_Range32(122928LLU,122989LLU,1LLU),_228e939c3_Range32(123136LLU,123180LLU,1LLU),_228e939c3_Range32(123191LLU,123197LLU,1LLU),_228e939c3_Range32(123214LLU,123536LLU,322LLU),_228e939c3_Range32(123537LLU,123565LLU,1LLU),_228e939c3_Range32(123584LLU,123627LLU,1LLU),_228e939c3_Range32(124112LLU,124139LLU,1LLU),_228e939c3_Range32(124896LLU,124902LLU,1LLU),_228e939c3_Range32(124904LLU,124907LLU,1LLU),_228e939c3_Range32(124909LLU,124910LLU,1LLU),_228e939c3_Range32(124912LLU,124926LLU,1LLU),_228e939c3_Range32(124928LLU,125124LLU,1LLU),_228e939c3_Range32(125184LLU,125251LLU,1LLU),_228e939c3_Range32(125259LLU,126464LLU,1205LLU),_228e939c3_Range32(126465LLU,126467LLU,1LLU),_228e939c3_Range32(126469LLU,126495LLU,1LLU),_228e939c3_Range32(126497LLU,126498LLU,1LLU),_228e939c3_Range32(126500LLU,126503LLU,3LLU),_228e939c3_Range32(126505LLU,126514LLU,1LLU),_228e939c3_Range32(126516LLU,126519LLU,1LLU),_228e939c3_Range32(126521LLU,126523LLU,2LLU),_228e939c3_Range32(126530LLU,126535LLU,5LLU),_228e939c3_Range32(126537LLU,126541LLU,2LLU),_228e939c3_Range32(126542LLU,126543LLU,1LLU),_228e939c3_Range32(126545LLU,126546LLU,1LLU),_228e939c3_Range32(126548LLU,126551LLU,3LLU),_228e939c3_Range32(126553LLU,126561LLU,2LLU),_228e939c3_Range32(126562LLU,126564LLU,2LLU),_228e939c3_Range32(126567LLU,126570LLU,1LLU),_228e939c3_Range32(126572LLU,126578LLU,1LLU),_228e939c3_Range32(126580LLU,126583LLU,1LLU),_228e939c3_Range32(126585LLU,126588LLU,1LLU),_228e939c3_Range32(126590LLU,126592LLU,2LLU),_228e939c3_Range32(126593LLU,126601LLU,1LLU),_228e939c3_Range32(126603LLU,126619LLU,1LLU),_228e939c3_Range32(126625LLU,126627LLU,1LLU),_228e939c3_Range32(126629LLU,126633LLU,1LLU),_228e939c3_Range32(126635LLU,126651LLU,1LLU),_228e939c3_Range32(131072LLU,173791LLU,1LLU),_228e939c3_Range32(173824LLU,177977LLU,1LLU),_228e939c3_Range32(177984LLU,178205LLU,1LLU),_228e939c3_Range32(178208LLU,183969LLU,1LLU),_228e939c3_Range32(183984LLU,191456LLU,1LLU),_228e939c3_Range32(194560LLU,195101LLU,1LLU),_228e939c3_Range32(196608LLU,201546LLU,1LLU),_228e939c3_Range32(201552LLU,205743LLU,1LLU)}),6LL));
	_228e8044e_LETTER = _228e8044e__L;
	_228e8044e__PROPERTIES = jule::Array<jule::U8,256>({1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,144LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,130LLU,130LLU,136LLU,136LLU,136LLU,130LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,130LLU,130LLU,130LLU,136LLU,130LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,130LLU,136LLU,130LLU,136LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,16LLU,130LLU,136LLU,136LLU,136LLU,136LLU,136LLU,130LLU,136LLU,136LLU,224LLU,130LLU,136LLU,0LLU,136LLU,136LLU,136LLU,136LLU,132LLU,132LLU,136LLU,192LLU,130LLU,130LLU,136LLU,132LLU,224LLU,130LLU,132LLU,132LLU,132LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,136LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU});
	_228e84d38_FIRST = jule::Array<jule::U8,256>({});
	_228e84d38_ACCEPT_RANGES = jule::Array<_228e84d38_accept_range,16>({_228e84d38_accept_range(128LLU,191LLU),_228e84d38_accept_range(160LLU,191LLU),_228e84d38_accept_range(128LLU,159LLU),_228e84d38_accept_range(144LLU,191LLU),_228e84d38_accept_range(128LLU,143LLU)});
	_228d7aadb_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
	_228d7aadb_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
	_228d7aadb_BIN_OPS = jule::Array<jule::Str,12>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("&&", 2),jule::Str("||", 2)});
	_228d7aadb_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
	_228d7aadb_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
	_228d36080_KEYWORDS = jule::Array<_228d36080_KindPair,47>({_228d36080_KindPair(jule::Str("i8", 2),1LLU),_228d36080_KindPair(jule::Str("i16", 3),1LLU),_228d36080_KindPair(jule::Str("i32", 3),1LLU),_228d36080_KindPair(jule::Str("i64", 3),1LLU),_228d36080_KindPair(jule::Str("u8", 2),1LLU),_228d36080_KindPair(jule::Str("u16", 3),1LLU),_228d36080_KindPair(jule::Str("u32", 3),1LLU),_228d36080_KindPair(jule::Str("u64", 3),1LLU),_228d36080_KindPair(jule::Str("f32", 3),1LLU),_228d36080_KindPair(jule::Str("f64", 3),1LLU),_228d36080_KindPair(jule::Str("uint", 4),1LLU),_228d36080_KindPair(jule::Str("int", 3),1LLU),_228d36080_KindPair(jule::Str("uintptr", 7),1LLU),_228d36080_KindPair(jule::Str("bool", 4),1LLU),_228d36080_KindPair(jule::Str("str", 3),1LLU),_228d36080_KindPair(jule::Str("any", 3),1LLU),_228d36080_KindPair(jule::Str("true", 4),6LLU),_228d36080_KindPair(jule::Str("false", 5),6LLU),_228d36080_KindPair(jule::Str("nil", 3),6LLU),_228d36080_KindPair(jule::Str("const", 5),9LLU),_228d36080_KindPair(jule::Str("ret", 3),4LLU),_228d36080_KindPair(jule::Str("type", 4),10LLU),_228d36080_KindPair(jule::Str("for", 3),12LLU),_228d36080_KindPair(jule::Str("break", 5),13LLU),_228d36080_KindPair(jule::Str("continue", 8),14LLU),_228d36080_KindPair(jule::Str("in", 2),15LLU),_228d36080_KindPair(jule::Str("if", 2),16LLU),_228d36080_KindPair(jule::Str("else", 4),17LLU),_228d36080_KindPair(jule::Str("use", 3),19LLU),_228d36080_KindPair(jule::Str("pub", 3),21LLU),_228d36080_KindPair(jule::Str("goto", 4),22LLU),_228d36080_KindPair(jule::Str("enum", 4),24LLU),_228d36080_KindPair(jule::Str("struct", 6),25LLU),_228d36080_KindPair(jule::Str("co", 2),26LLU),_228d36080_KindPair(jule::Str("match", 5),27LLU),_228d36080_KindPair(jule::Str("self", 4),28LLU),_228d36080_KindPair(jule::Str("trait", 5),29LLU),_228d36080_KindPair(jule::Str("impl", 4),30LLU),_228d36080_KindPair(jule::Str("cpp", 3),31LLU),_228d36080_KindPair(jule::Str("fall", 4),32LLU),_228d36080_KindPair(jule::Str("fn", 2),33LLU),_228d36080_KindPair(jule::Str("let", 3),34LLU),_228d36080_KindPair(jule::Str("unsafe", 6),35LLU),_228d36080_KindPair(jule::Str("mut", 3),36LLU),_228d36080_KindPair(jule::Str("defer", 5),37LLU),_228d36080_KindPair(jule::Str("static", 6),38LLU),_228d36080_KindPair(jule::Str("error", 5),40LLU)});
	_228d36080_BASIC_OPS = jule::Array<_228d36080_KindPair,39>({_228d36080_KindPair(jule::Str("::", 2),23LLU),_228d36080_KindPair(jule::Str(":", 1),11LLU),_228d36080_KindPair(jule::Str(";", 1),5LLU),_228d36080_KindPair(jule::Str(",", 1),8LLU),_228d36080_KindPair(jule::Str("...", 3),7LLU),_228d36080_KindPair(jule::Str(".", 1),20LLU),_228d36080_KindPair(jule::Str("+=", 2),7LLU),_228d36080_KindPair(jule::Str("-=", 2),7LLU),_228d36080_KindPair(jule::Str("*=", 2),7LLU),_228d36080_KindPair(jule::Str("/=", 2),7LLU),_228d36080_KindPair(jule::Str("%=", 2),7LLU),_228d36080_KindPair(jule::Str("<<=", 3),7LLU),_228d36080_KindPair(jule::Str(">>=", 3),7LLU),_228d36080_KindPair(jule::Str("^=", 2),7LLU),_228d36080_KindPair(jule::Str("&=", 2),7LLU),_228d36080_KindPair(jule::Str("|=", 2),7LLU),_228d36080_KindPair(jule::Str("==", 2),7LLU),_228d36080_KindPair(jule::Str("!=", 2),7LLU),_228d36080_KindPair(jule::Str(">=", 2),7LLU),_228d36080_KindPair(jule::Str("<=", 2),7LLU),_228d36080_KindPair(jule::Str("&&", 2),7LLU),_228d36080_KindPair(jule::Str("||", 2),7LLU),_228d36080_KindPair(jule::Str("<<", 2),7LLU),_228d36080_KindPair(jule::Str(">>", 2),7LLU),_228d36080_KindPair(jule::Str("++", 2),7LLU),_228d36080_KindPair(jule::Str("--", 2),7LLU),_228d36080_KindPair(jule::Str("+", 1),7LLU),_228d36080_KindPair(jule::Str("-", 1),7LLU),_228d36080_KindPair(jule::Str("*", 1),7LLU),_228d36080_KindPair(jule::Str("/", 1),7LLU),_228d36080_KindPair(jule::Str("%", 1),7LLU),_228d36080_KindPair(jule::Str("&", 1),7LLU),_228d36080_KindPair(jule::Str("|", 1),7LLU),_228d36080_KindPair(jule::Str("^", 1),7LLU),_228d36080_KindPair(jule::Str("!", 1),7LLU),_228d36080_KindPair(jule::Str("<", 1),7LLU),_228d36080_KindPair(jule::Str(">", 1),7LLU),_228d36080_KindPair(jule::Str("=", 1),7LLU),_228d36080_KindPair(jule::Str("#", 1),39LLU)});
	_1e614d809_BUILTIN_TYPE_ALIAS_BYTE = jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias(jule::Ptr<_228d31971_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_228d7aadb_Token(),jule::Str(),jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>()));
	_1e614d809_BUILTIN_TYPE_ALIAS_RUNE = jule::new_struct<_229d681e3_TypeAlias>(new( std::nothrow ) _229d681e3_TypeAlias(jule::Ptr<_228d31971_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_228d7aadb_Token(),jule::Str(),jule::new_struct<_229d681e3_TypeSymbol>(new( std::nothrow ) _229d681e3_TypeSymbol(jule::Ptr<_228d31971_TypeDecl>(),jule::new_struct_ptr<_229d681e3_TypeKind>(new( std::nothrow ) _229d681e3_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_229d681e3_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>()));
	_1e614d809_BUILTIN_TRAIT_DISPOSE = jule::new_struct_ptr<_229b5076c_Trait>(new( std::nothrow ) _229b5076c_Trait(_228d7aadb_Token(),jule::Str("Dispose", 7),true,jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_229b6ebcb_Fn>>({jule::new_struct_ptr<_229b6ebcb_Fn>(new( std::nothrow ) _229b6ebcb_Fn(jule::Ptr<_1e538b460_Sema>(),_228d7aadb_Token(),jule::Bool(),jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Str("dispose", 7),jule::Slice<jule::Ptr<_228d31971_Directive>>(),jule::Str(),jule::Ptr<_228d31971_ScopeTree>(),jule::Slice<jule::Ptr<_228d31971_GenericDecl>>(),jule::Ptr<_229b6ebcb_RetType>(),jule::Slice<jule::Ptr<_229b6ebcb_Param>>({jule::new_struct_ptr<_229b6ebcb_Param>(new( std::nothrow ) _229b6ebcb_Param(_228d7aadb_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_229d681e3_TypeSymbol>(),jule::Str("self", 4)))}),jule::Ptr<_228e0d025_Struct>(),jule::Slice<jule::Ptr<_229b6ebcb_FnIns>>({jule::new_struct_ptr<_229b6ebcb_FnIns>(new( std::nothrow ) _229b6ebcb_FnIns(jule::Ptr<_228e0d025_StructIns>(),jule::Ptr<_229b6ebcb_Fn>(),jule::Slice<jule::Ptr<_229d681e3_TypeKind>>(),jule::Slice<jule::Ptr<_229b6ebcb_ParamIns>>(),jule::Ptr<_229d681e3_TypeKind>(),jule::Ptr<_1e56c3885_Scope>(),jule::Ptr<_228d6ecab_ReferenceStack>(),jule::Bool(),jule::Ptr<_228d6ecab_ReferenceStack>(),1LLU,jule::Bool()))})))}),jule::Slice<jule::Ptr<_228e0d025_Struct>>()));
	_228cd1217_VARS = nullptr;
	_22777e238_deads = nullptr;
	_22777e238_checking = nullptr;
	_22777e238_current = jule::Any(nullptr);
	_22777e238_main_current = jule::Any(nullptr);
	_1e8a7c6a8_MDAYS = jule::Array<jule::U8,12>({31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,29LLU});
	_1e8949c3a_INDENT = nullptr;
	_227532d99_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,5>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)}),jule::Array<jule::Str,2>({jule::Str("mod", 3),jule::Str("Module management", 17)})});
	_227571404_OUT_DIR = jule::Str("dist", 4);
	_227571404_OUT_NAME = jule::Str("ir.cpp", 6);
	_227571404_OUT = jule::Str();

	_22779d455_init();
	_22757047a_init();
}

int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}