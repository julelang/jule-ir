// Auto generated by JuleC.
// JuleC version: jule beta 0.0.8 @master
// Date: 28/1/2024 13.47 (DD/MM/YYYY) (HH.MM) UTC
//
// Recommended Compile Command;
// clang++ -Wno-everything --std=c++17 -O3 -flto -DNDEBUG -fomit-frame-pointer dist/ir.cpp

#define __JULE_ENABLE__PRODUCTION


#include "api/jule.hpp"                                   

#include <dirent.h>
#include <fcntl.h>
#include <unistd.h>
#include <cstdio>
#include <sys/stat.h>
#include <signal.h>
#include <sys/wait.h>
#include <time.h>
#include "std/jule/integrated/integrated.hpp"                                   
#include "std/process/cmd.hpp"                                   

struct _1a9266420_Reader;
struct _1a9266420_Writer;
struct _1a9266420_Stream;
struct _1a6e9a574_Importer;
struct _1a6a19a50_Kind;
struct _1a9062c33_Lookup;
struct _1a70d117c_CommonFlag;

struct _211ad8b4c_AnsiEscape;


struct _211ad8b4c_Logger;


struct _1b687a818_FoldPair;


struct _1b687a818_CaseRange;


struct _1b687a818_Range16;


struct _1b687a818_Range32;


struct _1b687a818_RangeTable;


struct _1b687997c_accept_range;


struct _1ce9be05e_LazyBuff;


struct _1ce947cda_DirEntry;


struct _1ce947cda_Directory;


struct _1ce96429b_File;


struct _1ce976e6d_Status;


struct _1b6a03760_Cmd;


struct _1b6986b22_Log;


struct _211ca7535_FloatInfo;


struct _211ca7535_DecimalSlice;


struct _1b6a7a1bb_LeftCheat;


struct _1b6a7a1bb_Decimal;


struct _1b7553d92_Token;


struct _1b750c763_File;


struct _1b75960d2_KindPair;


struct _1b75960d2_Lex;


struct _1b74bea77_Ast;


struct _1b7509a90_CommentGroup;


struct _1b7509a90_NamespaceTypeDecl;


struct _1b7509a90_SptrTypeDecl;


struct _1b7509a90_SlcTypeDecl;


struct _1b7509a90_TupleTypeDecl;


struct _1b7509a90_PtrTypeDecl;


struct _1b7509a90_ArrTypeDecl;


struct _1b7509a90_MapTypeDecl;


struct _1b7509a90_RetTypeDecl;


struct _1b7509a90_TupleExpr;


struct _1b7509a90_CastExpr;


struct _1b7509a90_StructLit;


struct _1b7509a90_ScopeTree;


struct _1b7509a90_Conditional;


struct _1b7509a90_Impl;


struct _1b76a925b_FileInfo;


struct _1b76a925b_PackageInfo;


struct _1b76b4310_Stmt;


struct _1b76b4310_ScopeParser;


struct _1b76b4ac4_CallData;


struct _1b76b4ac4_ExprBuilder;


struct _1b78b1aa1_Parser;


struct _1a691245e_TypeBuilder;


struct _1b6dd59aa_Const;


struct _1a9265694_FileStream;


struct _1a92719ad_ByteStream;


struct _1a92b4627_Scanner;


struct _1b7905331_FieldIns;


struct _1b7905331_StructIns;


struct _1a69b8d2e_OperandExprModel;


struct _1a69b8d2e_StructArgExprModel;


struct _1a69b8d2e_AllocStructLitExprModel;


struct _1a69b8d2e_SliceExprModel;


struct _1a69b8d2e_AnonFnExprModel;


struct _1a69b8d2e_KeyValPairExprModel;


struct _1a69b8d2e_MapExprModel;


struct _1a69b8d2e_StructSubIdentExprModel;


struct _1a69b8d2e_StructStaticIdentExprModel;


struct _1a69b8d2e_ArrayExprModel;


struct _1a69b8d2e_CommonIdentExprModel;


struct _1a69b8d2e_CommonSubIdentExprModel;


struct _1a69b8d2e_TupleExprModel;


struct _1a69b8d2e_BuiltinOutCallExprModel;


struct _1a69b8d2e_BuiltinOutlnCallExprModel;


struct _1a69b8d2e_BuiltinCloneCallExprModel;


struct _1a69b8d2e_BuiltinNewCallExprModel;


struct _1a69b8d2e_BuiltinMakeCallExprModel;


struct _1a69b8d2e_BuiltinAppendCallExprModel;


struct _1a69b8d2e_BuiltinErrorCallExprModel;


struct _1a69b8d2e_SizeofExprModel;


struct _1a69b8d2e_AlignofExprModel;


struct _1a69b8d2e_RuneExprModel;


struct _1a69b8d2e_IntegratedToStrExprModel;


struct _1a69b8d2e_TernaryExprModel;


struct _1a69b8d2e_BackendEmitExprModel;


struct _1a69b8d2e_FreeExprModel;


struct _1a691a500_RetType;


struct _1a691a500_ParamIns;


struct _1a691a500_FnIns;


struct _1b6a47496_ReferenceStack;


struct _1b6a47496_SymbolBuilder;


struct _1a6bbbe44_Impl;


struct _1a6bc3e29_Scope;


struct _1a6bc3e29_If;


struct _1a6bc3e29_Else;


struct _1a6bc3e29_Conditional;


struct _1a6bc3e29_InfIter;


struct _1a6bc3e29_WhileIter;


struct _1a6bc3e29_RangeIter;


struct _1a6bc3e29_ContSt;


struct _1a6bc3e29_BreakSt;


struct _1a6bc3e29_Label;


struct _1a6bc3e29_GotoSt;


struct _1a6bc3e29_Postfix;


struct _1a6bc3e29_MultiAssign;


struct _1a6bc3e29_Match;


struct _1a6bc3e29_Case;


struct _1a6bc3e29_FallSt;


struct _1a6bc3e29_RetSt;


struct _1a6bc3e29_ScopeGoto;


struct _1a6bc3e29_ScopeChecker;


struct _1a6e9963e_DirectiveChecker;


struct _1a6e9a574_Package;


struct _1a7002752_Sema;


struct _1a7003e4b_IterRelation;


struct _1a700327a_RangeChecker;


struct _1a8acbe95_SymbolTable;


struct _1a8b431d7_Data;


struct _1a8b431d7_Value;


struct _1a8b431d7_Eval;


struct _1a8b431d7_UnaryEval;


struct _1a6a19a50_TypeKind;


struct _1a6a19a50_TypeSymbol;


struct _1a6a19a50_Prim;


struct _1a6a19a50_Sptr;


struct _1a6a19a50_Slc;


struct _1a6a19a50_Tuple;


struct _1a6a19a50_Map;


struct _1a6a19a50_Arr;


struct _1a6a19a50_Ptr;


struct _1a6a19a50_Referencer;


struct _1b74b0925_DirectiveEval;


struct _1b74c00a5_PlainImporter;


struct _1b719c3c0_OrderedDefines;


struct _1b719c3c0_DefineOrderer;


struct _1b719b688_ScopeDeadCode;


struct _1a9612e81_AbsTime;


struct _1a9612e81_Time;


struct _1a9612e81_Duration;


struct _1a70a995d_ScopeOptimizer;


struct _1a70a6dab_Optimizer;


struct _1a70d117c_Flag_0;

struct _1a70d117c_Flag_1;

struct _1a70d117c_Flag_2;

struct _1a70d117c_Flag_3;

struct _1a70d117c_Flag_4;


struct _1a70d117c_FlagSet;


struct _1b7509a90_BreakSt;


struct _1b7509a90_ContSt;


struct _1b7509a90_If;


struct _1b7509a90_Else;


struct _1b7509a90_Directive;


struct _1b7509a90_TypeAliasDecl;


struct _1b7509a90_Case;


struct _1a691a500_Param;


struct _1a691a500_Fn;


struct _1b7509a90_MatchCase;


struct _1b7509a90_UseDecl;


struct _1b7509a90_EnumItemDecl;


struct _1b6a47496_Pass;


struct _1b7509a90_EnumDecl;


struct _1b76b472d_Trait;


struct _1a6bb9150_EnumItem;


struct _1a6bb9150_Enum;


struct _1b7509a90_FieldDecl;


struct _1b7509a90_StructDecl;


struct _1b7509a90_TraitDecl;


struct _1b7509a90_Expr;


struct _1b7509a90_UseExpr;


struct _1b7509a90_TypeDecl;


struct _1b7509a90_LitExpr;


struct _1b7509a90_UnsafeExpr;


struct _1b7509a90_CoExpr;


struct _1b7509a90_IdentExpr;


struct _1b77c370a_AssignInfo;


struct _1b7509a90_UnaryExpr;


struct _1b7509a90_VariadicExpr;


struct _1a6bc3e29_Assign;


struct _1b7509a90_IdentTypeDecl;


struct _1b7509a90_NsSelectionExpr;


struct _1b7509a90_SubIdentExpr;


struct _1b7509a90_BinopExpr;


struct _1b7905331_Field;


struct _1a6bc3e29_ScopeLabel;


struct _1b7905331_Struct;


struct _1b7509a90_FnCallExpr;


struct _1b7509a90_FieldExprPair;


struct _1a6e9a574_ImportInfo;


struct _1b7509a90_Node;


struct _1a69b8d2e_BinopExprModel;


struct _1a69b8d2e_UnaryExprModel;


struct _1a7003e4b_Var;


struct _1a700327a_TypeCompatibilityChecker;


struct _1a700327a_AssignTypeChecker;


struct _1a700327a_DynamicTypeAnnotation;


struct _1a700327a_FnCallArgChecker;


struct _1a700327a_StructLitChecker;


struct _1b7509a90_BraceLit;


struct _1a700327a_RetTypeChecker;


struct _1a69b8d2e_StructLitExprModel;


struct _1b7509a90_KeyValPair;


struct _1a69b8d2e_CastingExprModel;


struct _1a69b8d2e_FnCallExprModel;


struct _1b7509a90_SliceExpr;


struct _1a8b431d7_BinaryEval;


struct _1a6a19a50_TypeAlias;


struct _1a69b8d2e_IndexingExprModel;


struct _1b7509a90_IndexingExpr;


struct _1b7509a90_SlicingExpr;


struct _1b7509a90_TernaryExpr;


struct _1a69b8d2e_SlicingExprModel;


struct _1a69b8d2e_TraitSubIdentExprModel;


struct _1b7509a90_GenericDecl;


struct _1b7509a90_LabelSt;


struct _1b7509a90_GotoSt;


struct _1b7509a90_FallSt;


struct _1a6a19a50_TypeChecker;


struct _1b7509a90_AssignLeft;


struct _1b7509a90_AssignSt;


struct _1b719bcc6_IR;


struct _1b7509a90_Comment;


struct _1b7509a90_ParamDecl;


struct _1b7509a90_FnDecl;


struct _1b7509a90_VarDecl;


struct _1a69b8d2e_BuiltinPanicCallExprModel;


struct _1a69b8d2e_BuiltinAssertCallExprModel;


struct _1b7509a90_RetSt;


struct _1b7509a90_Iter;


struct _1b7509a90_WhileKind;


struct _1b7509a90_RangeKind;


struct _1a70d117c_ArgParser;

struct _1a9266420_Reader {
	virtual ~_1a9266420_Reader(void) {}

	virtual jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8> _1131_buff) { return {}; }
};

struct _1a9266420_Writer {
	virtual ~_1a9266420_Writer(void) {}

	virtual jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8> _1828_buff) { return {}; }
};

struct _1a9266420_Stream {
	virtual ~_1a9266420_Stream(void) {}

	virtual jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8> _2431_buff) { return {}; }
	virtual jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8> _2628_buff) { return {}; }
};

struct _1a6e9a574_Importer {
	virtual ~_1a6e9a574_Importer(void) {}

	virtual void _method_set_mod_path(jule::Str _1735_path) {}
	virtual jule::Str _method_get_mod_path(void) { return {}; }
	virtual jule::Str _method_mod_by_id(jule::Int _2328_id) { return {}; }
	virtual jule::Ptr<_1a6e9a574_ImportInfo> _method_get_import(jule::Str _2833_path) { return {}; }
	virtual std::tuple<jule::Slice<jule::Ptr<_1b74bea77_Ast>>,jule::Slice<_1b6986b22_Log>> _method_import_package(jule::Str _3337_path,jule::Bool _3348_update_mod) { return {}; }
	virtual void _method_imported(jule::Ptr<_1a6e9a574_ImportInfo>) {}
};

struct _1a6a19a50_Kind {
	virtual ~_1a6a19a50_Kind(void) {}

	virtual jule::Str _method_to_str(void) { return {}; }
	virtual jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind> _5822_other) { return {}; }
};

struct _1a9062c33_Lookup {
	virtual ~_1a9062c33_Lookup(void) {}

	virtual jule::Ptr<_1a6e9a574_ImportInfo> _method_find_package(jule::Str _935_ident) { return {}; }
	virtual jule::Ptr<_1a6e9a574_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)> _1337_selector) { return {}; }
	virtual jule::Ptr<_1a7003e4b_Var> _method_find_var(jule::Str _1731_ident,jule::Bool _1743_cpp_linked) { return {}; }
	virtual jule::Ptr<_1a6a19a50_TypeAlias> _method_find_type_alias(jule::Str _2138_ident,jule::Bool _2150_cpp_linked) { return {}; }
	virtual jule::Ptr<_1b7905331_Struct> _method_find_struct(jule::Str _2534_ident,jule::Bool _2546_cpp_linked) { return {}; }
	virtual jule::Ptr<_1a691a500_Fn> _method_find_fn(jule::Str _2930_ident,jule::Bool _2942_cpp_linked) { return {}; }
	virtual jule::Ptr<_1b76b472d_Trait> _method_find_trait(jule::Str _3333_ident) { return {}; }
	virtual jule::Ptr<_1a6bb9150_Enum> _method_find_enum(jule::Str _3732_ident) { return {}; }
};

struct _1a70d117c_CommonFlag {
	virtual ~_1a70d117c_CommonFlag(void) {}

	virtual jule::Str _method_name(void) { return {}; }
	virtual jule::I32 _method_short(void) { return {}; }
	virtual jule::Str _method_what(void) { return {}; }
	virtual void _method_reset(void) {}
};


struct _211ad8b4c_AnsiEscape {
	

	_211ad8b4c_AnsiEscape(void) = default;

	static inline void _static_method_reset(void);


	static inline void _static_method_print(jule::Str,jule::Str);


	inline bool operator==(const _211ad8b4c_AnsiEscape &_Src) const { return true; }

	inline bool operator!=(const _211ad8b4c_AnsiEscape &_Src) const { return !this->operator==(_Src); }
};


struct _211ad8b4c_Logger {
	

	_211ad8b4c_Logger(void) = default;

	static inline void _static_method_log_flat(_1b6986b22_Log&);


	static inline void _static_method_log_error(_1b6986b22_Log&);


	static inline void _static_method_log(_1b6986b22_Log&);


	static inline void _static_method_print_logs(jule::Slice<_1b6986b22_Log>&);


	inline bool operator==(const _211ad8b4c_Logger &_Src) const { return true; }

	inline bool operator!=(const _211ad8b4c_Logger &_Src) const { return !this->operator==(_Src); }
};


struct _1b687a818_FoldPair {
	jule::U16 _field_from = jule::U16();
	jule::U16 _field_to = jule::U16();


	_1b687a818_FoldPair(jule::U16 __param_from, jule::U16 __param_to): _field_from(__param_from), _field_to(__param_to) {}

	

	_1b687a818_FoldPair(void) = default;

	inline bool operator==(const _1b687a818_FoldPair &_Src) const {
		return 
			this->_field_from == _Src._field_from &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _1b687a818_FoldPair &_Src) const { return !this->operator==(_Src); }
};


struct _1b687a818_CaseRange {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::Array<jule::I32,3> _field_delta = jule::Array<jule::I32,3>();


	_1b687a818_CaseRange(jule::U32 __param_lo, jule::U32 __param_hi, jule::Array<jule::I32,3> __param_delta): _field_lo(__param_lo), _field_hi(__param_hi), _field_delta(__param_delta) {}

	

	_1b687a818_CaseRange(void) = default;

	inline bool operator==(const _1b687a818_CaseRange &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_delta == _Src._field_delta;
	}

	inline bool operator!=(const _1b687a818_CaseRange &_Src) const { return !this->operator==(_Src); }
};


struct _1b687a818_Range16 {
	jule::U16 _field_lo = jule::U16();
	jule::U16 _field_hi = jule::U16();
	jule::U16 _field_stride = jule::U16();


	_1b687a818_Range16(jule::U16 __param_lo, jule::U16 __param_hi, jule::U16 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_1b687a818_Range16(void) = default;

	inline bool operator==(const _1b687a818_Range16 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _1b687a818_Range16 &_Src) const { return !this->operator==(_Src); }
};


struct _1b687a818_Range32 {
	jule::U32 _field_lo = jule::U32();
	jule::U32 _field_hi = jule::U32();
	jule::U32 _field_stride = jule::U32();


	_1b687a818_Range32(jule::U32 __param_lo, jule::U32 __param_hi, jule::U32 __param_stride): _field_lo(__param_lo), _field_hi(__param_hi), _field_stride(__param_stride) {}

	

	_1b687a818_Range32(void) = default;

	inline bool operator==(const _1b687a818_Range32 &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi &&
			this->_field_stride == _Src._field_stride;
	}

	inline bool operator!=(const _1b687a818_Range32 &_Src) const { return !this->operator==(_Src); }
};


struct _1b687a818_RangeTable {
	jule::Slice<_1b687a818_Range16> _field_r16 = jule::Slice<_1b687a818_Range16>();
	jule::Slice<_1b687a818_Range32> _field_r32 = jule::Slice<_1b687a818_Range32>();
	jule::Int _field_latin_offset = jule::Int();


	_1b687a818_RangeTable(jule::Slice<_1b687a818_Range16> __param_r16, jule::Slice<_1b687a818_Range32> __param_r32, jule::Int __param_latin_offset): _field_r16(__param_r16), _field_r32(__param_r32), _field_latin_offset(__param_latin_offset) {}

	

	_1b687a818_RangeTable(void) = default;

	inline bool operator==(const _1b687a818_RangeTable &_Src) const {
		return 
			this->_field_r16 == _Src._field_r16 &&
			this->_field_r32 == _Src._field_r32 &&
			this->_field_latin_offset == _Src._field_latin_offset;
	}

	inline bool operator!=(const _1b687a818_RangeTable &_Src) const { return !this->operator==(_Src); }
};


struct _1b687997c_accept_range {
	jule::U8 _field_lo = jule::U8();
	jule::U8 _field_hi = jule::U8();


	_1b687997c_accept_range(jule::U8 __param_lo, jule::U8 __param_hi): _field_lo(__param_lo), _field_hi(__param_hi) {}

	

	_1b687997c_accept_range(void) = default;

	inline bool operator==(const _1b687997c_accept_range &_Src) const {
		return 
			this->_field_lo == _Src._field_lo &&
			this->_field_hi == _Src._field_hi;
	}

	inline bool operator!=(const _1b687997c_accept_range &_Src) const { return !this->operator==(_Src); }
};


struct _1ce9be05e_LazyBuff {
	jule::Str _field_path = jule::Str();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();
	jule::Int _field_w = jule::Int();
	jule::Str _field_vol_and_path = jule::Str();
	jule::Int _field_vol_len = jule::Int();


	_1ce9be05e_LazyBuff(jule::Str __param_path, jule::Slice<jule::U8> __param_buff, jule::Int __param_w, jule::Str __param_vol_and_path, jule::Int __param_vol_len): _field_path(__param_path), _field_buff(__param_buff), _field_w(__param_w), _field_vol_and_path(__param_vol_and_path), _field_vol_len(__param_vol_len) {}

	

	_1ce9be05e_LazyBuff(void) = default;

	inline jule::U8 _method_index(jule::Int);


	inline void _method_append(jule::U8);


	inline jule::Str _method_string(void);


	inline bool operator==(const _1ce9be05e_LazyBuff &_Src) const {
		return 
			this->_field_path == _Src._field_path &&
			this->_field_buff == _Src._field_buff &&
			this->_field_w == _Src._field_w &&
			this->_field_vol_and_path == _Src._field_vol_and_path &&
			this->_field_vol_len == _Src._field_vol_len;
	}

	inline bool operator!=(const _1ce9be05e_LazyBuff &_Src) const { return !this->operator==(_Src); }
};


struct _1ce947cda_DirEntry {
	jule::Str _field_name = jule::Str();
	jule::Ptr<_1ce976e6d_Status> _field_stat = jule::Ptr<_1ce976e6d_Status>();


	_1ce947cda_DirEntry(jule::Str __param_name, jule::Ptr<_1ce976e6d_Status> __param_stat): _field_name(__param_name), _field_stat(__param_stat) {}

	

	_1ce947cda_DirEntry(void) = default;

	inline bool operator==(const _1ce947cda_DirEntry &_Src) const {
		return 
			this->_field_name == _Src._field_name &&
			this->_field_stat == _Src._field_stat;
	}

	inline bool operator!=(const _1ce947cda_DirEntry &_Src) const { return !this->operator==(_Src); }
};


struct _1ce947cda_Directory {
	

	_1ce947cda_Directory(void) = default;

	static inline jule::Exceptional<jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_create(jule::Str);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline bool operator==(const _1ce947cda_Directory &_Src) const { return true; }

	inline bool operator!=(const _1ce947cda_Directory &_Src) const { return !this->operator==(_Src); }
};


struct _1ce96429b_File {
	jule::Uintptr _field_handle = jule::Uintptr();


	_1ce96429b_File(jule::Uintptr __param_handle): _field_handle(__param_handle) {}

	

	_1ce96429b_File(void) = default;

	static inline jule::Exceptional<jule::Ptr<_1ce96429b_File>> _static_method_open(jule::Str,jule::Int,jule::Int);


	static inline jule::VoidExceptional _static_method_remove(jule::Str);


	inline jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8>);


	static inline jule::Ptr<_1ce96429b_File> _static_method_new(jule::Uintptr);


	static inline jule::Exceptional<jule::Ptr<_1ce96429b_File>> _static_method_create(jule::Str);


	static inline jule::Exceptional<jule::Slice<jule::U8>> _static_method_read(jule::Str);


	static inline jule::VoidExceptional _static_method_write(jule::Str,jule::Slice<jule::U8>,jule::Int);


	inline jule::Exceptional<jule::I64> _method_seek(jule::I64,jule::Int);


	inline jule::VoidExceptional _method_close(void);


	inline bool operator==(const _1ce96429b_File &_Src) const {
		return 
			this->_field_handle == _Src._field_handle;
	}

	inline bool operator!=(const _1ce96429b_File &_Src) const { return !this->operator==(_Src); }
};


struct _1ce976e6d_Status {
	jule::Uint _field_mode = jule::Uint();
	jule::Uint _field_size = jule::Uint();


	_1ce976e6d_Status(jule::Uint __param_mode, jule::Uint __param_size): _field_mode(__param_mode), _field_size(__param_size) {}

	

	_1ce976e6d_Status(void) = default;

	static inline jule::Exceptional<jule::Ptr<_1ce976e6d_Status>> _static_method_of(jule::Str);


	inline jule::Bool _method_is_dir(void);


	inline jule::Bool _method_is_reg(void);


	inline bool operator==(const _1ce976e6d_Status &_Src) const {
		return 
			this->_field_mode == _Src._field_mode &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _1ce976e6d_Status &_Src) const { return !this->operator==(_Src); }
};


struct _1b6a03760_Cmd {
	jule::Str _field__fle = jule::Str();
	jule::Int _field__pid = jule::Int();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_env = jule::Slice<jule::Str>();


	_1b6a03760_Cmd(jule::Str __param__fle, jule::Int __param__pid, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_env): _field__fle(__param__fle), _field__pid(__param__pid), _field_args(__param_args), _field_env(__param_env) {}

	

	_1b6a03760_Cmd(void) = default;

	static inline jule::Ptr<_1b6a03760_Cmd> _static_method_new(jule::Str);


	inline jule::Int _method_pid(void);


	inline jule::Str _method_file(void);


	inline jule::VoidExceptional _method_spawn(void);


	inline jule::VoidExceptional _method_kill(void);


	inline jule::Exceptional<jule::Int> _method_wait(void);


	inline bool operator==(const _1b6a03760_Cmd &_Src) const {
		return 
			this->_field__fle == _Src._field__fle &&
			this->_field__pid == _Src._field__pid &&
			this->_field_args == _Src._field_args &&
			this->_field_env == _Src._field_env;
	}

	inline bool operator!=(const _1b6a03760_Cmd &_Src) const { return !this->operator==(_Src); }
};


struct _1b6986b22_Log {
	jule::Int _field_kind = 0LLU;
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_path = jule::Str();
	jule::Str _field_text = jule::Str();
	jule::Str _field_line = jule::Str();
	jule::Str _field_suggestion = jule::Str();


	_1b6986b22_Log(jule::Int __param_kind, jule::Int __param_row, jule::Int __param_column, jule::Str __param_path, jule::Str __param_text, jule::Str __param_line, jule::Str __param_suggestion): _field_kind(__param_kind), _field_row(__param_row), _field_column(__param_column), _field_path(__param_path), _field_text(__param_text), _field_line(__param_line), _field_suggestion(__param_suggestion) {}

	

	_1b6986b22_Log(void) = default;

	inline bool operator==(const _1b6986b22_Log &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_path == _Src._field_path &&
			this->_field_text == _Src._field_text &&
			this->_field_line == _Src._field_line &&
			this->_field_suggestion == _Src._field_suggestion;
	}

	inline bool operator!=(const _1b6986b22_Log &_Src) const { return !this->operator==(_Src); }
};


struct _211ca7535_FloatInfo {
	jule::Uint _field_mantbits = jule::Uint();
	jule::Uint _field_expbits = jule::Uint();
	jule::Int _field_bias = jule::Int();


	_211ca7535_FloatInfo(jule::Uint __param_mantbits, jule::Uint __param_expbits, jule::Int __param_bias): _field_mantbits(__param_mantbits), _field_expbits(__param_expbits), _field_bias(__param_bias) {}

	

	_211ca7535_FloatInfo(void) = default;

	inline bool operator==(const _211ca7535_FloatInfo &_Src) const {
		return 
			this->_field_mantbits == _Src._field_mantbits &&
			this->_field_expbits == _Src._field_expbits &&
			this->_field_bias == _Src._field_bias;
	}

	inline bool operator!=(const _211ca7535_FloatInfo &_Src) const { return !this->operator==(_Src); }
};


struct _211ca7535_DecimalSlice {
	jule::Slice<jule::U8> _field_d = jule::Slice<jule::U8>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();


	_211ca7535_DecimalSlice(jule::Slice<jule::U8> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg) {}

	

	_211ca7535_DecimalSlice(void) = default;

	inline bool operator==(const _211ca7535_DecimalSlice &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg;
	}

	inline bool operator!=(const _211ca7535_DecimalSlice &_Src) const { return !this->operator==(_Src); }
};


struct _1b6a7a1bb_LeftCheat {
	jule::Int _field_delta = jule::Int();
	jule::Str _field_cutoff = jule::Str();


	_1b6a7a1bb_LeftCheat(jule::Int __param_delta, jule::Str __param_cutoff): _field_delta(__param_delta), _field_cutoff(__param_cutoff) {}

	

	_1b6a7a1bb_LeftCheat(void) = default;

	inline bool operator==(const _1b6a7a1bb_LeftCheat &_Src) const {
		return 
			this->_field_delta == _Src._field_delta &&
			this->_field_cutoff == _Src._field_cutoff;
	}

	inline bool operator!=(const _1b6a7a1bb_LeftCheat &_Src) const { return !this->operator==(_Src); }
};


struct _1b6a7a1bb_Decimal {
	jule::Array<jule::U8,800> _field_d = jule::Array<jule::U8,800>();
	jule::Int _field_nd = jule::Int();
	jule::Int _field_dp = jule::Int();
	jule::Bool _field_neg = jule::Bool();
	jule::Bool _field_trunc = jule::Bool();


	_1b6a7a1bb_Decimal(jule::Array<jule::U8,800> __param_d, jule::Int __param_nd, jule::Int __param_dp, jule::Bool __param_neg, jule::Bool __param_trunc): _field_d(__param_d), _field_nd(__param_nd), _field_dp(__param_dp), _field_neg(__param_neg), _field_trunc(__param_trunc) {}

	

	_1b6a7a1bb_Decimal(void) = default;

	inline jule::Bool _method_set(jule::Str);


	inline std::tuple<jule::U64,jule::Bool> _method_float_bits(_211ca7535_FloatInfo&);


	inline void _method_assign(jule::U64);


	inline void _method_shift(jule::Int);


	inline void _method_round_down(jule::Int);


	inline void _method_round_up(jule::Int);


	inline void _method_round(jule::Int);


	inline jule::U64 _method_rounded_integer(void);


	inline bool operator==(const _1b6a7a1bb_Decimal &_Src) const {
		return 
			this->_field_d == _Src._field_d &&
			this->_field_nd == _Src._field_nd &&
			this->_field_dp == _Src._field_dp &&
			this->_field_neg == _Src._field_neg &&
			this->_field_trunc == _Src._field_trunc;
	}

	inline bool operator!=(const _1b6a7a1bb_Decimal &_Src) const { return !this->operator==(_Src); }
};


struct _1b7553d92_Token {
	jule::Ptr<_1b750c763_File> _field_file = jule::Ptr<_1b750c763_File>();
	jule::Int _field_row = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Str _field_kind = jule::Str();
	jule::Uint _field_id = 0LLU;


	_1b7553d92_Token(jule::Ptr<_1b750c763_File> __param_file, jule::Int __param_row, jule::Int __param_column, jule::Str __param_kind, jule::Uint __param_id): _field_file(__param_file), _field_row(__param_row), _field_column(__param_column), _field_kind(__param_kind), _field_id(__param_id) {}

	

	_1b7553d92_Token(void) = default;

	inline jule::U8 _method_prec(void);


	inline bool operator==(const _1b7553d92_Token &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_row == _Src._field_row &&
			this->_field_column == _Src._field_column &&
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _1b7553d92_Token &_Src) const { return !this->operator==(_Src); }
};


struct _1b750c763_File {
	jule::Slice<jule::U8> _field_data = jule::Slice<jule::U8>();
	jule::Str _field__path = jule::Str();
	jule::Slice<_1b7553d92_Token> _field__tokens = jule::Slice<_1b7553d92_Token>();


	_1b750c763_File(jule::Slice<jule::U8> __param_data, jule::Str __param__path, jule::Slice<_1b7553d92_Token> __param__tokens): _field_data(__param_data), _field__path(__param__path), _field__tokens(__param__tokens) {}

	

	_1b750c763_File(void) = default;

	inline jule::Bool _method_is_ok(void);


	inline void _method_fill(jule::Slice<jule::U8>);


	inline jule::Str _method_path(void);


	inline jule::Str _method_dir(void);


	inline jule::Str _method_name(void);


	inline jule::Uintptr _method_addr(void);


	inline jule::Slice<_1b7553d92_Token> _method_tokens(void);


	inline jule::Str _method_get_row(jule::Int);


	inline bool operator==(const _1b750c763_File &_Src) const {
		return 
			this->_field_data == _Src._field_data &&
			this->_field__path == _Src._field__path &&
			this->_field__tokens == _Src._field__tokens;
	}

	inline bool operator!=(const _1b750c763_File &_Src) const { return !this->operator==(_Src); }
};


struct _1b75960d2_KindPair {
	jule::Str _field_kind = jule::Str("::", 2);
	jule::Uint _field_id = 0LLU;


	_1b75960d2_KindPair(jule::Str __param_kind, jule::Uint __param_id): _field_kind(__param_kind), _field_id(__param_id) {}

	

	_1b75960d2_KindPair(void) = default;

	inline bool operator==(const _1b75960d2_KindPair &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_id == _Src._field_id;
	}

	inline bool operator!=(const _1b75960d2_KindPair &_Src) const { return !this->operator==(_Src); }
};


struct _1b75960d2_Lex {
	jule::Slice<_1b7553d92_Token> _field_tokens = jule::Slice<_1b7553d92_Token>();
	jule::Ptr<_1b750c763_File> _field_file = jule::Ptr<_1b750c763_File>();
	jule::Int _field_pos = jule::Int();
	jule::Int _field_column = jule::Int();
	jule::Int _field_row = jule::Int();
	jule::Slice<_1b6986b22_Log> _field_errors = jule::Slice<_1b6986b22_Log>();


	_1b75960d2_Lex(jule::Slice<_1b7553d92_Token> __param_tokens, jule::Ptr<_1b750c763_File> __param_file, jule::Int __param_pos, jule::Int __param_column, jule::Int __param_row, jule::Slice<_1b6986b22_Log> __param_errors): _field_tokens(__param_tokens), _field_file(__param_file), _field_pos(__param_pos), _field_column(__param_column), _field_row(__param_row), _field_errors(__param_errors) {}

	

	_1b75960d2_Lex(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_tok(_1b7553d92_Token&,jule::Str);


	inline void _method_lex(void);


	inline jule::Str _method_id(jule::Slice<jule::U8>&);


	inline jule::Slice<jule::U8> _method_resume(void);


	inline void _method_lex_line_comment(_1b7553d92_Token&);


	inline void _method_lex_range_comment(void);


	inline jule::Str _method_num(jule::Slice<jule::U8>&);


	inline jule::Str _method_escape_seq(jule::Slice<jule::U8>&);


	inline jule::Str _method_get_rune(jule::Slice<jule::U8>&,jule::Bool);


	inline jule::Str _method_lex_rune(jule::Slice<jule::U8>&);


	inline jule::Str _method_lex_str(void);


	inline jule::Bool _method_is_first_token_of_line(void);


	inline void _method_new_line(void);


	inline jule::Bool _method_is_op(jule::Slice<jule::U8>&,jule::Str,jule::Uint,_1b7553d92_Token&);


	inline jule::Bool _method_lex_basic_ops(jule::Slice<jule::U8>,_1b7553d92_Token&);


	inline jule::Bool _method_lex_id(jule::Slice<jule::U8>&,_1b7553d92_Token&);


	inline jule::Bool _method_lex_num(jule::Slice<jule::U8>&,_1b7553d92_Token&);


	inline _1b7553d92_Token _method_token(void);


	inline bool operator==(const _1b75960d2_Lex &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_file == _Src._field_file &&
			this->_field_pos == _Src._field_pos &&
			this->_field_column == _Src._field_column &&
			this->_field_row == _Src._field_row &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1b75960d2_Lex &_Src) const { return !this->operator==(_Src); }
};


struct _1b74bea77_Ast {
	jule::Ptr<_1b750c763_File> _field_file = jule::Ptr<_1b750c763_File>();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_top_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Slice<jule::Ptr<_1b7509a90_UseDecl>> _field_use_decls = jule::Slice<jule::Ptr<_1b7509a90_UseDecl>>();
	jule::Slice<jule::Ptr<_1b7509a90_Impl>> _field_impls = jule::Slice<jule::Ptr<_1b7509a90_Impl>>();
	jule::Slice<_1b7509a90_Node> _field_decls = jule::Slice<_1b7509a90_Node>();


	_1b74bea77_Ast(jule::Ptr<_1b750c763_File> __param_file, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_top_directives, jule::Slice<jule::Ptr<_1b7509a90_UseDecl>> __param_use_decls, jule::Slice<jule::Ptr<_1b7509a90_Impl>> __param_impls, jule::Slice<_1b7509a90_Node> __param_decls): _field_file(__param_file), _field_top_directives(__param_top_directives), _field_use_decls(__param_use_decls), _field_impls(__param_impls), _field_decls(__param_decls) {}

	

	_1b74bea77_Ast(void) = default;

	inline bool operator==(const _1b74bea77_Ast &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_top_directives == _Src._field_top_directives &&
			this->_field_use_decls == _Src._field_use_decls &&
			this->_field_impls == _Src._field_impls &&
			this->_field_decls == _Src._field_decls;
	}

	inline bool operator!=(const _1b74bea77_Ast &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_CommentGroup {
	jule::Slice<jule::Ptr<_1b7509a90_Comment>> _field_comments = jule::Slice<jule::Ptr<_1b7509a90_Comment>>();


	_1b7509a90_CommentGroup(jule::Slice<jule::Ptr<_1b7509a90_Comment>> __param_comments): _field_comments(__param_comments) {}

	

	_1b7509a90_CommentGroup(void) = default;

	inline bool operator==(const _1b7509a90_CommentGroup &_Src) const {
		return 
			this->_field_comments == _Src._field_comments;
	}

	inline bool operator!=(const _1b7509a90_CommentGroup &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_NamespaceTypeDecl {
	jule::Slice<_1b7553d92_Token> _field_idents = jule::Slice<_1b7553d92_Token>();
	jule::Ptr<_1b7509a90_IdentTypeDecl> _field_kind = jule::Ptr<_1b7509a90_IdentTypeDecl>();


	_1b7509a90_NamespaceTypeDecl(jule::Slice<_1b7553d92_Token> __param_idents, jule::Ptr<_1b7509a90_IdentTypeDecl> __param_kind): _field_idents(__param_idents), _field_kind(__param_kind) {}

	

	_1b7509a90_NamespaceTypeDecl(void) = default;

	inline bool operator==(const _1b7509a90_NamespaceTypeDecl &_Src) const {
		return 
			this->_field_idents == _Src._field_idents &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1b7509a90_NamespaceTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_SptrTypeDecl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_elem = jule::Ptr<_1b7509a90_TypeDecl>();


	_1b7509a90_SptrTypeDecl(jule::Ptr<_1b7509a90_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1b7509a90_SptrTypeDecl(void) = default;

	inline bool operator==(const _1b7509a90_SptrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1b7509a90_SptrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_SlcTypeDecl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_elem = jule::Ptr<_1b7509a90_TypeDecl>();


	_1b7509a90_SlcTypeDecl(jule::Ptr<_1b7509a90_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1b7509a90_SlcTypeDecl(void) = default;

	inline bool operator==(const _1b7509a90_SlcTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1b7509a90_SlcTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_TupleTypeDecl {
	jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _field_types = jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>();


	_1b7509a90_TupleTypeDecl(jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> __param_types): _field_types(__param_types) {}

	

	_1b7509a90_TupleTypeDecl(void) = default;

	inline bool operator==(const _1b7509a90_TupleTypeDecl &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _1b7509a90_TupleTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_PtrTypeDecl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_elem = jule::Ptr<_1b7509a90_TypeDecl>();


	_1b7509a90_PtrTypeDecl(jule::Ptr<_1b7509a90_TypeDecl> __param_elem): _field_elem(__param_elem) {}

	

	_1b7509a90_PtrTypeDecl(void) = default;

	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _1b7509a90_PtrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1b7509a90_PtrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_ArrTypeDecl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_elem = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1b7509a90_Expr> _field_size = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_ArrTypeDecl(jule::Ptr<_1b7509a90_TypeDecl> __param_elem, jule::Ptr<_1b7509a90_Expr> __param_size): _field_elem(__param_elem), _field_size(__param_size) {}

	

	_1b7509a90_ArrTypeDecl(void) = default;

	inline jule::Bool _method_auto_sized(void);


	inline bool operator==(const _1b7509a90_ArrTypeDecl &_Src) const {
		return 
			this->_field_elem == _Src._field_elem &&
			this->_field_size == _Src._field_size;
	}

	inline bool operator!=(const _1b7509a90_ArrTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_MapTypeDecl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_key = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1b7509a90_TypeDecl> _field_val = jule::Ptr<_1b7509a90_TypeDecl>();


	_1b7509a90_MapTypeDecl(jule::Ptr<_1b7509a90_TypeDecl> __param_key, jule::Ptr<_1b7509a90_TypeDecl> __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1b7509a90_MapTypeDecl(void) = default;

	inline bool operator==(const _1b7509a90_MapTypeDecl &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1b7509a90_MapTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_RetTypeDecl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Slice<_1b7553d92_Token> _field_idents = jule::Slice<_1b7553d92_Token>();


	_1b7509a90_RetTypeDecl(jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Slice<_1b7553d92_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_1b7509a90_RetTypeDecl(void) = default;

	inline bool operator==(const _1b7509a90_RetTypeDecl &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _1b7509a90_RetTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_TupleExpr {
	jule::Slice<jule::Ptr<_1b7509a90_Expr>> _field_expr = jule::Slice<jule::Ptr<_1b7509a90_Expr>>();


	_1b7509a90_TupleExpr(jule::Slice<jule::Ptr<_1b7509a90_Expr>> __param_expr): _field_expr(__param_expr) {}

	

	_1b7509a90_TupleExpr(void) = default;

	inline bool operator==(const _1b7509a90_TupleExpr &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_TupleExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_CastExpr {
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Any _field_expr = jule::Any();


	_1b7509a90_CastExpr(jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Any __param_expr): _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_1b7509a90_CastExpr(void) = default;

	inline bool operator==(const _1b7509a90_CastExpr &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_CastExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_StructLit {
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_1b7509a90_StructLit(jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Slice<jule::Any> __param_exprs): _field_kind(__param_kind), _field_exprs(__param_exprs) {}

	

	_1b7509a90_StructLit(void) = default;

	inline bool operator==(const _1b7509a90_StructLit &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1b7509a90_StructLit &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_ScopeTree {
	jule::Ptr<_1b7509a90_ScopeTree> _field_parent = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_1b7509a90_ScopeTree(jule::Ptr<_1b7509a90_ScopeTree> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_1b7509a90_ScopeTree(void) = default;

	inline bool operator==(const _1b7509a90_ScopeTree &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _1b7509a90_ScopeTree &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Conditional {
	jule::Ptr<_1b7509a90_If> _field_head = jule::Ptr<_1b7509a90_If>();
	jule::Slice<jule::Ptr<_1b7509a90_If>> _field_tail = jule::Slice<jule::Ptr<_1b7509a90_If>>();
	jule::Ptr<_1b7509a90_Else> _field_default = jule::Ptr<_1b7509a90_Else>();


	_1b7509a90_Conditional(jule::Ptr<_1b7509a90_If> __param_head, jule::Slice<jule::Ptr<_1b7509a90_If>> __param_tail, jule::Ptr<_1b7509a90_Else> __param_default): _field_head(__param_head), _field_tail(__param_tail), _field_default(__param_default) {}

	

	_1b7509a90_Conditional(void) = default;

	inline bool operator==(const _1b7509a90_Conditional &_Src) const {
		return 
			this->_field_head == _Src._field_head &&
			this->_field_tail == _Src._field_tail &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1b7509a90_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Impl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_base = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1b7509a90_TypeDecl> _field_dest = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Slice<jule::Ptr<_1b7509a90_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_1b7509a90_FnDecl>>();
	jule::Slice<jule::Ptr<_1b7509a90_VarDecl>> _field_statics = jule::Slice<jule::Ptr<_1b7509a90_VarDecl>>();


	_1b7509a90_Impl(jule::Ptr<_1b7509a90_TypeDecl> __param_base, jule::Ptr<_1b7509a90_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_1b7509a90_FnDecl>> __param_methods, jule::Slice<jule::Ptr<_1b7509a90_VarDecl>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1b7509a90_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _1b7509a90_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _1b7509a90_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _1b76a925b_FileInfo {
	jule::Ptr<_1b74bea77_Ast> _field_ast = jule::Ptr<_1b74bea77_Ast>();
	jule::Slice<_1b6986b22_Log> _field_errors = jule::Slice<_1b6986b22_Log>();


	_1b76a925b_FileInfo(jule::Ptr<_1b74bea77_Ast> __param_ast, jule::Slice<_1b6986b22_Log> __param_errors): _field_ast(__param_ast), _field_errors(__param_errors) {}

	

	_1b76a925b_FileInfo(void) = default;

	inline bool operator==(const _1b76a925b_FileInfo &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1b76a925b_FileInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1b76a925b_PackageInfo {
	jule::Slice<jule::Ptr<_1b76a925b_FileInfo>> _field_files = jule::Slice<jule::Ptr<_1b76a925b_FileInfo>>();


	_1b76a925b_PackageInfo(jule::Slice<jule::Ptr<_1b76a925b_FileInfo>> __param_files): _field_files(__param_files) {}

	

	_1b76a925b_PackageInfo(void) = default;

	inline bool operator==(const _1b76a925b_PackageInfo &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _1b76a925b_PackageInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1b76b4310_Stmt {
	jule::Slice<_1b7553d92_Token> _field_tokens = jule::Slice<_1b7553d92_Token>();
	jule::Bool _field_terminated = jule::Bool();


	_1b76b4310_Stmt(jule::Slice<_1b7553d92_Token> __param_tokens, jule::Bool __param_terminated): _field_tokens(__param_tokens), _field_terminated(__param_terminated) {}

	

	_1b76b4310_Stmt(void) = default;

	inline bool operator==(const _1b76b4310_Stmt &_Src) const {
		return 
			this->_field_tokens == _Src._field_tokens &&
			this->_field_terminated == _Src._field_terminated;
	}

	inline bool operator!=(const _1b76b4310_Stmt &_Src) const { return !this->operator==(_Src); }
};


struct _1b76b4310_ScopeParser {
	jule::Ptr<_1b78b1aa1_Parser> _field_p = jule::Ptr<_1b78b1aa1_Parser>();
	jule::Ptr<_1b7509a90_ScopeTree> _field_s = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _field_stmts = jule::Slice<jule::Ptr<_1b76b4310_Stmt>>();
	jule::Int _field_pos = jule::Int();


	_1b76b4310_ScopeParser(jule::Ptr<_1b78b1aa1_Parser> __param_p, jule::Ptr<_1b7509a90_ScopeTree> __param_s, jule::Slice<jule::Ptr<_1b76b4310_Stmt>> __param_stmts, jule::Int __param_pos): _field_p(__param_p), _field_s(__param_s), _field_stmts(__param_stmts), _field_pos(__param_pos) {}

	

	_1b76b4310_ScopeParser(void) = default;

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline jule::Bool _method_finished(void);


	inline jule::Bool _method_is_last_st(void);


	inline void _method_push_err(_1b7553d92_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_insert_as_next(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b76b4310_Stmt> _method_next(void);


	inline jule::Ptr<_1b7509a90_ScopeTree> _method_build_scope(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_var_st(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_ret_st(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_while_next_iter(jule::Ptr<_1b76b4310_Stmt>&);


	inline jule::Ptr<_1b7509a90_WhileKind> _method_build_while_iter_kind(jule::Slice<_1b7553d92_Token>&);


	inline jule::Slice<jule::Slice<_1b7553d92_Token>> _method_get_range_kind_keys_tokens(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_VarDecl> _method_build_range_kind_key(jule::Slice<_1b7553d92_Token>&);


	inline jule::Slice<jule::Ptr<_1b7509a90_VarDecl>> _method_build_range_kind_keys(jule::Slice<jule::Slice<_1b7553d92_Token>>&);


	inline void _method_setup_range_kind_keys_plain(jule::Ptr<_1b7509a90_RangeKind>&,jule::Slice<_1b7553d92_Token>&);


	inline void _method_setup_range_kind_keys_explicit(jule::Ptr<_1b7509a90_RangeKind>&,jule::Slice<_1b7553d92_Token>&);


	inline void _method_setup_range_kind_keys(jule::Ptr<_1b7509a90_RangeKind>&,jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_RangeKind> _method_build_range_iter_kind(jule::Slice<_1b7553d92_Token>&,jule::Slice<_1b7553d92_Token>&,_1b7553d92_Token&);


	inline jule::Any _method_build_common_iter_kind(jule::Slice<_1b7553d92_Token>&,_1b7553d92_Token&);


	inline jule::Any _method_build_common_iter(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_buid_iter_st(jule::Ptr<_1b76b4310_Stmt>&);


	inline jule::Any _method_build_break_st(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_cont_st(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_If> _method_build_if(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_Else> _method_build_else(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_if_else_chain(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_comment_st(_1b7553d92_Token&);


	inline jule::Any _method_build_co_call_st(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_goto_st(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_fall_st(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_type_alias_st(jule::Slice<_1b7553d92_Token>&);


	inline void _method_push_case_expr(jule::Slice<_1b7553d92_Token>,_1b7553d92_Token,jule::Bool,jule::Slice<jule::Ptr<_1b7509a90_Expr>>&);


	inline jule::Slice<jule::Ptr<_1b7509a90_Expr>> _method_build_case_exprs(jule::Slice<_1b7553d92_Token>&,jule::Bool);


	inline jule::Ptr<_1b7509a90_ScopeTree> _method_build_case_scope(jule::Slice<_1b7553d92_Token>&);


	inline std::tuple<jule::Ptr<_1b7509a90_Case>,jule::Bool> _method_build_case(jule::Slice<_1b7553d92_Token>&,jule::Bool);


	inline std::tuple<jule::Slice<jule::Ptr<_1b7509a90_Case>>,jule::Ptr<_1b7509a90_Else>> _method_build_cases(jule::Slice<_1b7553d92_Token>,jule::Bool);


	inline jule::Ptr<_1b7509a90_MatchCase> _method_build_match_case(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_ScopeTree> _method_build_scope_st(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_LabelSt> _method_build_label_st(jule::Slice<_1b7553d92_Token>&);


	inline std::tuple<jule::Any,jule::Bool> _method_build_id_st(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b77c370a_AssignInfo> _method_build_assign_info(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_AssignLeft> _method_build_assign_l(jule::Slice<_1b7553d92_Token>&);


	inline jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>> _method_build_assign_ls(jule::Slice<jule::Slice<_1b7553d92_Token>>&);


	inline std::tuple<jule::Ptr<_1b7509a90_AssignSt>,jule::Bool> _method_build_plain_assign(jule::Slice<_1b7553d92_Token>&);


	inline std::tuple<jule::Ptr<_1b7509a90_AssignSt>,jule::Bool> _method_build_decl_assign(jule::Slice<_1b7553d92_Token>);


	inline std::tuple<jule::Ptr<_1b7509a90_AssignSt>,jule::Bool> _method_build_assign_st(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_use_expr(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_st(jule::Ptr<_1b76b4310_Stmt>&);


	inline void _method_build(jule::Slice<_1b7553d92_Token>&,jule::Ptr<_1b7509a90_ScopeTree>&);


	inline bool operator==(const _1b76b4310_ScopeParser &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _1b76b4310_ScopeParser &_Src) const { return !this->operator==(_Src); }
};


struct _1b76b4ac4_CallData {
	jule::Slice<_1b7553d92_Token> _field_expr_tokens = jule::Slice<_1b7553d92_Token>();
	jule::Slice<_1b7553d92_Token> _field_args_tokens = jule::Slice<_1b7553d92_Token>();
	jule::Slice<_1b7553d92_Token> _field_generics_tokens = jule::Slice<_1b7553d92_Token>();


	_1b76b4ac4_CallData(jule::Slice<_1b7553d92_Token> __param_expr_tokens, jule::Slice<_1b7553d92_Token> __param_args_tokens, jule::Slice<_1b7553d92_Token> __param_generics_tokens): _field_expr_tokens(__param_expr_tokens), _field_args_tokens(__param_args_tokens), _field_generics_tokens(__param_generics_tokens) {}

	

	_1b76b4ac4_CallData(void) = default;

	inline bool operator==(const _1b76b4ac4_CallData &_Src) const {
		return 
			this->_field_expr_tokens == _Src._field_expr_tokens &&
			this->_field_args_tokens == _Src._field_args_tokens &&
			this->_field_generics_tokens == _Src._field_generics_tokens;
	}

	inline bool operator!=(const _1b76b4ac4_CallData &_Src) const { return !this->operator==(_Src); }
};


struct _1b76b4ac4_ExprBuilder {
	jule::Ptr<_1b78b1aa1_Parser> _field_p = jule::Ptr<_1b78b1aa1_Parser>();


	_1b76b4ac4_ExprBuilder(jule::Ptr<_1b78b1aa1_Parser> __param_p): _field_p(__param_p) {}

	

	_1b76b4ac4_ExprBuilder(void) = default;

	inline void _method_push_err(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_1b7509a90_TupleExpr> _method_build_tuple(jule::Slice<jule::Slice<_1b7553d92_Token>>&);


	inline jule::Ptr<_1b7509a90_LitExpr> _method_build_lit(_1b7553d92_Token);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_primitive_type(_1b7553d92_Token&);


	inline jule::Any _method_build_single(_1b7553d92_Token);


	inline jule::Ptr<_1b7509a90_IdentExpr> _method_build_cpp_linked_ident(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_UnaryExpr> _method_build_unary(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_SubIdentExpr> _method_build_obj_sub_ident(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_NsSelectionExpr> _method_build_ns_sub_ident(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_type(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_sub_ident(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_VariadicExpr> _method_build_variadic(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_op_right(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_between_parentheses(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_CastExpr> _method_try_build_cast(jule::Slice<_1b7553d92_Token>&);


	inline void _method_push_arg(jule::Slice<jule::Ptr<_1b7509a90_Expr>>&,jule::Slice<_1b7553d92_Token>,_1b7553d92_Token);


	inline jule::Slice<jule::Ptr<_1b7509a90_Expr>> _method_build_args(jule::Slice<_1b7553d92_Token>);


	inline jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _method_build_call_generics(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_FnCallExpr> _method_build_fn_call(_1b7553d92_Token&,jule::Ptr<_1b76b4ac4_CallData>&);


	inline jule::Any _method_build_parentheses_range(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_UnsafeExpr> _method_build_unsafe_expr(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_FnDecl> _method_build_anon_fn(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_unsafe(jule::Slice<_1b7553d92_Token>&);


	inline void _method_push_range_lit_part(jule::Slice<_1b7553d92_Token>,_1b7553d92_Token,jule::Slice<jule::Slice<_1b7553d92_Token>>&);


	inline jule::Slice<jule::Slice<_1b7553d92_Token>> _method_get_brace_range_lit_expr_parts(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_FieldExprPair> _method_build_field_expr_pair(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_struct_lit_expr(jule::Slice<_1b7553d92_Token>&);


	inline jule::Slice<jule::Any> _method_build_struct_lit_exprs(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_StructLit> _method_build_typed_struct_literal(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_brace_lit_part(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_BraceLit> _method_build_brace_lit(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_brace_range(jule::Slice<_1b7553d92_Token>&);


	inline jule::Slice<jule::Slice<_1b7553d92_Token>> _method_get_enumerable_parts(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_SliceExpr> _method_build_slice(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_IndexingExpr> _method_build_indexing(jule::Slice<_1b7553d92_Token>,jule::Slice<_1b7553d92_Token>,_1b7553d92_Token);


	inline jule::Ptr<_1b7509a90_SlicingExpr> _method_build_slicing(jule::Slice<_1b7553d92_Token>&,jule::Slice<_1b7553d92_Token>&,jule::Int&,_1b7553d92_Token&);


	inline jule::Any _method_build_bracket_range(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_ternary(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_data(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_BinopExpr> _method_build_binop(jule::Slice<_1b7553d92_Token>&,jule::Int);


	inline jule::Any _method_build(jule::Slice<_1b7553d92_Token>&);


	inline jule::Any _method_build_kind(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_Expr> _method_build_from_tokens(jule::Slice<_1b7553d92_Token>);


	inline bool operator==(const _1b76b4ac4_ExprBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p;
	}

	inline bool operator!=(const _1b76b4ac4_ExprBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1b78b1aa1_Parser {
	jule::Ptr<_1b78b1aa1_Parser> self;

	jule::Ptr<_1b74bea77_Ast> _field_ast = jule::Ptr<_1b74bea77_Ast>();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Ptr<_1b7509a90_CommentGroup> _field_comment_group = jule::Ptr<_1b7509a90_CommentGroup>();
	jule::Slice<_1b6986b22_Log> _field_errors = jule::Slice<_1b6986b22_Log>();


	_1b78b1aa1_Parser(jule::Ptr<_1b74bea77_Ast> __param_ast, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_directives, jule::Ptr<_1b7509a90_CommentGroup> __param_comment_group, jule::Slice<_1b6986b22_Log> __param_errors): _field_ast(__param_ast), _field_directives(__param_directives), _field_comment_group(__param_comment_group), _field_errors(__param_errors) {
		this->self = jule::Ptr<_1b78b1aa1_Parser>::make(this, nullptr);

	}

	~_1b78b1aa1_Parser(void) { this->self.ref = nullptr; }

	_1b78b1aa1_Parser(void) { this->self = jule::Ptr<_1b78b1aa1_Parser>::make(this, nullptr); }

	inline void _method_stop(void);


	inline jule::Bool _method_stopped(void);


	inline void _method_push_err(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_1b7509a90_Expr> _method_build_expr(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_Directive> _method_build_directive(jule::Slice<_1b7553d92_Token>);


	inline void _method_push_directive(jule::Ptr<_1b7509a90_Directive>);


	inline jule::Ptr<_1b7509a90_ScopeTree> _method_build_scope(jule::Slice<_1b7553d92_Token>&);


	inline std::tuple<jule::Ptr<_1b7509a90_TypeDecl>,jule::Bool> _method___build_type(jule::Slice<_1b7553d92_Token>&,jule::Int*,jule::Bool);


	inline std::tuple<jule::Ptr<_1b7509a90_TypeDecl>,jule::Bool> _method_build_type(jule::Slice<_1b7553d92_Token>&,jule::Int*,jule::Bool);


	inline jule::Ptr<_1b7509a90_TypeAliasDecl> _method_build_type_alias_decl(jule::Slice<_1b7553d92_Token>&);


	inline void _method_build_var_type_and_expr(jule::Ptr<_1b7509a90_VarDecl>&,jule::Slice<_1b7553d92_Token>&);


	inline void _method_build_var_common(jule::Ptr<_1b7509a90_VarDecl>&,jule::Slice<_1b7553d92_Token>);


	inline void _method_build_var_begin(jule::Ptr<_1b7509a90_VarDecl>&,jule::Ptr<jule::Int>,jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_VarDecl> _method_build_var(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_GenericDecl> _method_build_generic(jule::Slice<_1b7553d92_Token>&);


	inline jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _method_build_generics(jule::Slice<_1b7553d92_Token>&,_1b7553d92_Token&);


	inline jule::Ptr<_1b7509a90_ParamDecl> _method_build_self_param(jule::Slice<_1b7553d92_Token>);


	inline void _method_param_type_begin(jule::Ptr<_1b7509a90_ParamDecl>&,jule::Int&,jule::Slice<_1b7553d92_Token>&);


	inline void _method_build_param_type(jule::Ptr<_1b7509a90_ParamDecl>&,jule::Slice<_1b7553d92_Token>&);


	inline void _method_param_body_id(jule::Ptr<_1b7509a90_ParamDecl>,_1b7553d92_Token);


	inline void _method_build_param_body(jule::Ptr<_1b7509a90_ParamDecl>&,jule::Ptr<jule::Int>,jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_ParamDecl> _method_build_param(jule::Slice<_1b7553d92_Token>);


	inline void _method_check_params(jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>>&);


	inline jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>> _method_build_params(jule::Slice<_1b7553d92_Token>&,jule::Bool);


	inline std::tuple<jule::Ptr<_1b7509a90_RetTypeDecl>,jule::Bool> _method_build_multi_ret_type(jule::Slice<_1b7553d92_Token>&,jule::Int&);


	inline std::tuple<jule::Ptr<_1b7509a90_RetTypeDecl>,jule::Bool> _method_build_ret_type(jule::Slice<_1b7553d92_Token>&,jule::Int&);


	inline jule::Ptr<_1b7509a90_FnDecl> _method_build_fn_prototype(jule::Slice<_1b7553d92_Token>&,jule::Int&,jule::Bool);


	inline jule::Ptr<_1b7509a90_FnDecl> _method_build_fn(jule::Slice<_1b7553d92_Token>&,jule::Bool,jule::Bool);


	inline jule::Slice<_1b7553d92_Token> _method_get_use_decl_selectors(jule::Slice<_1b7553d92_Token>);


	inline void _method_build_cpp_use_decl(jule::Ptr<_1b7509a90_UseDecl>&,jule::Slice<_1b7553d92_Token>&);


	inline void _method_build_std_use_decl(jule::Ptr<_1b7509a90_UseDecl>&,jule::Slice<_1b7553d92_Token>);


	inline void _method_build_ident_use_decl(jule::Ptr<_1b7509a90_UseDecl>&,jule::Slice<_1b7553d92_Token>);


	inline void _method_parse_use_decl(jule::Ptr<_1b7509a90_UseDecl>&,jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_UseDecl> _method_build_use_decl(jule::Slice<_1b7553d92_Token>,jule::Bool);


	inline jule::Ptr<_1b7509a90_Expr> _method_build_enum_item_expr(jule::Ptr<jule::Int>,jule::Slice<_1b7553d92_Token>&);


	inline jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>> _method_build_enum_items(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_EnumDecl> _method_build_enum_decl(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_FieldDecl> _method_build_field(jule::Slice<_1b7553d92_Token>);


	inline jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>> _method_build_struct_decl_fields(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_StructDecl> _method_build_struct_decl(jule::Slice<_1b7553d92_Token>&);


	inline void _method_check_method_receiver(jule::Ptr<_1b7509a90_FnDecl>&);


	inline jule::Slice<jule::Ptr<_1b7509a90_FnDecl>> _method_build_trait_methods(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_TraitDecl> _method_build_trait_decl(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_FnDecl> _method_build_cpp_link_fn(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_VarDecl> _method_build_cpp_link_var(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_StructDecl> _method_build_cpp_link_struct(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_TypeAliasDecl> _method_build_cpp_link_type_alias(jule::Slice<_1b7553d92_Token>);


	inline jule::Ptr<_1b7509a90_UseDecl> _method_build_cpp_link_use(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_cpp_link(jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_FnDecl> _method_get_method(jule::Slice<_1b7553d92_Token>&);


	inline void _method_parse_impl_body(jule::Ptr<_1b7509a90_Impl>&,jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_Impl> _method_build_impl(jule::Slice<_1b7553d92_Token>);


	inline jule::Any _method_build_node_data(jule::Slice<_1b7553d92_Token>&);


	inline void _method_check_comment_group(_1b7509a90_Node&);


	inline void _method_check_directive(_1b7509a90_Node&);


	inline void _method_apply_fn_meta(jule::Ptr<_1b7509a90_FnDecl>&,jule::Bool);


	inline void _method_apply_meta(_1b7509a90_Node&,jule::Bool);


	inline void _method_check_use_decl(_1b7509a90_Node&);


	inline std::tuple<jule::Bool,jule::Any> _method_build_general_scope_node_data(jule::Slice<_1b7553d92_Token>);


	inline _1b7509a90_Node _method_parse_node(jule::Slice<_1b7553d92_Token>&);


	inline void _method_append_node(jule::Slice<_1b7553d92_Token>&);


	inline void _method_remove_range(jule::Int,jule::Str,jule::Slice<_1b7553d92_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_wrong_order_close_err(_1b7553d92_Token&,jule::Slice<_1b7553d92_Token>&,jule::Slice<jule::Int>&);


	inline void _method_push_range_close(_1b7553d92_Token,jule::Str,jule::Slice<_1b7553d92_Token>&,jule::Slice<jule::Int>&);


	inline void _method_check_ranges(jule::Slice<_1b7553d92_Token>&);


	inline void _method_parse(jule::Ptr<_1b750c763_File>&);


	inline bool operator==(const _1b78b1aa1_Parser &_Src) const {
		return 
			this->_field_ast == _Src._field_ast &&
			this->_field_directives == _Src._field_directives &&
			this->_field_comment_group == _Src._field_comment_group &&
			this->_field_errors == _Src._field_errors;
	}

	inline bool operator!=(const _1b78b1aa1_Parser &_Src) const { return !this->operator==(_Src); }
};


struct _1a691245e_TypeBuilder {
	jule::Ptr<_1b78b1aa1_Parser> _field_p = jule::Ptr<_1b78b1aa1_Parser>();
	jule::Slice<_1b7553d92_Token> _field_tokens = jule::Slice<_1b7553d92_Token>();
	jule::Int* _field_i = nullptr;
	jule::Bool _field_err = jule::Bool();


	_1a691245e_TypeBuilder(jule::Ptr<_1b78b1aa1_Parser> __param_p, jule::Slice<_1b7553d92_Token> __param_tokens, jule::Int* __param_i, jule::Bool __param_err): _field_p(__param_p), _field_tokens(__param_tokens), _field_i(__param_i), _field_err(__param_err) {}

	

	_1a691245e_TypeBuilder(void) = default;

	inline void _method_push_err(_1b7553d92_Token,jule::Str);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_prim(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_namespace(void);


	inline jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _method_build_generics(void);


	inline jule::Slice<jule::Slice<_1b7553d92_Token>> _method_ident_generics(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_ident(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_cpp_link(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_fn(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_ptr(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_sptr(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_op(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_slc(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_arr(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_map(jule::Int,jule::Slice<_1b7553d92_Token>&);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_build_enumerable(void);


	inline jule::Ptr<_1b7509a90_TypeDecl> _method_step(void);


	inline std::tuple<jule::Ptr<_1b7509a90_TypeDecl>,jule::Bool> _method_build(void);


	inline bool operator==(const _1a691245e_TypeBuilder &_Src) const {
		return 
			this->_field_p == _Src._field_p &&
			this->_field_tokens == _Src._field_tokens &&
			this->_field_i == _Src._field_i &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _1a691245e_TypeBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1b6dd59aa_Const {
	jule::Any _field_data = jule::Any();


	_1b6dd59aa_Const(jule::Any __param_data): _field_data(__param_data) {}

	

	_1b6dd59aa_Const(void) = default;

	static inline jule::Ptr<_1b6dd59aa_Const> _static_method_new_i64(jule::I64);


	static inline jule::Ptr<_1b6dd59aa_Const> _static_method_new_u64(jule::U64);


	static inline jule::Ptr<_1b6dd59aa_Const> _static_method_new_bool(jule::Bool);


	static inline jule::Ptr<_1b6dd59aa_Const> _static_method_new_str(jule::Str);


	static inline jule::Ptr<_1b6dd59aa_Const> _static_method_new_f64(jule::F64);


	static inline jule::Ptr<_1b6dd59aa_Const> _static_method_new_nil(void);


	inline jule::I64 _method_read_i64(void);


	inline jule::U64 _method_read_u64(void);


	inline jule::Bool _method_read_bool(void);


	inline jule::Str _method_read_str(void);


	inline jule::F64 _method_read_f64(void);


	inline jule::I64 _method_as_i64(void);


	inline jule::U64 _method_as_u64(void);


	inline jule::F64 _method_as_f64(void);


	inline void _method_set_i64(jule::I64);


	inline void _method_set_u64(jule::U64);


	inline void _method_set_bool(jule::Bool);


	inline void _method_set_str(jule::Str);


	inline void _method_set_f64(jule::F64);


	inline void _method_set_nil(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_are_same_types(_1b6dd59aa_Const);


	inline jule::Bool _method_and(_1b6dd59aa_Const);


	inline jule::Bool _method_or(_1b6dd59aa_Const);


	inline jule::Bool _method_eqs(_1b6dd59aa_Const);


	inline jule::Bool _method_lt(_1b6dd59aa_Const);


	inline jule::Bool _method_gt(_1b6dd59aa_Const);


	inline jule::Bool _method_add(_1b6dd59aa_Const);


	inline jule::Bool _method_sub(_1b6dd59aa_Const);


	inline jule::Bool _method_mul(_1b6dd59aa_Const);


	inline jule::Bool _method_div(_1b6dd59aa_Const);


	inline jule::Bool _method_mod(_1b6dd59aa_Const);


	inline jule::Bool _method_bitwise_and(_1b6dd59aa_Const);


	inline jule::Bool _method_bitwise_or(_1b6dd59aa_Const);


	inline jule::Bool _method_xor(_1b6dd59aa_Const);


	inline jule::Bool _method_lshift(_1b6dd59aa_Const);


	inline jule::Bool _method_rshift(_1b6dd59aa_Const);


	inline bool operator==(const _1b6dd59aa_Const &_Src) const {
		return 
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1b6dd59aa_Const &_Src) const { return !this->operator==(_Src); }
};


struct _1a9265694_FileStream: public _1a9266420_Reader,public _1a9266420_Writer,public _1a9266420_Stream {
	jule::Ptr<_1ce96429b_File> _field_buff = jule::Ptr<_1ce96429b_File>();


	_1a9265694_FileStream(jule::Ptr<_1ce96429b_File> __param_buff): _field_buff(__param_buff) {}

	

	_1a9265694_FileStream(void) = default;

	static inline jule::Ptr<_1a9265694_FileStream> _static_method_new(jule::Ptr<_1ce96429b_File>);


	inline jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Slice<jule::U8>> _method_read_line(void);


	inline bool operator==(const _1a9265694_FileStream &_Src) const {
		return 
			this->_field_buff == _Src._field_buff;
	}

	inline bool operator!=(const _1a9265694_FileStream &_Src) const { return !this->operator==(_Src); }
};


struct _1a92719ad_ByteStream: public _1a9266420_Reader,public _1a9266420_Writer,public _1a9266420_Stream {
	jule::Int _field_pos = jule::Int();
	jule::Slice<jule::U8> _field_buff = jule::Slice<jule::U8>();


	_1a92719ad_ByteStream(jule::Int __param_pos, jule::Slice<jule::U8> __param_buff): _field_pos(__param_pos), _field_buff(__param_buff) {}

	

	_1a92719ad_ByteStream(void) = default;

	inline jule::Exceptional<jule::Int> _method_read(jule::Slice<jule::U8>);


	inline jule::Exceptional<jule::Int> _method_write(jule::Slice<jule::U8>);


	static inline jule::Ptr<_1a92719ad_ByteStream> _static_method_new(void);


	inline jule::Bool _method_data(void);


	inline void _method_fit(void);


	inline bool operator==(const _1a92719ad_ByteStream &_Src) const {
		return 
			this->_field_pos == _Src._field_pos &&
			this->_field_buff == _Src._field_buff;
	}

	inline bool operator!=(const _1a92719ad_ByteStream &_Src) const { return !this->operator==(_Src); }
};


struct _1a92b4627_Scanner {
	jule::Trait<_1a9266420_Reader> _field_r = jule::Trait<_1a9266420_Reader>();
	jule::Slice<jule::U8> _field_b = jule::Slice<jule::U8>();


	_1a92b4627_Scanner(jule::Trait<_1a9266420_Reader> __param_r, jule::Slice<jule::U8> __param_b): _field_r(__param_r), _field_b(__param_b) {}

	

	_1a92b4627_Scanner(void) = default;

	static inline jule::Ptr<_1a92b4627_Scanner> _static_method_new(jule::Trait<_1a9266420_Reader>);


	static inline jule::Ptr<_1a92b4627_Scanner> _static_method_newf(jule::Ptr<_1ce96429b_File>);


	inline void _method_reset(void);


	inline jule::Slice<jule::U8> _method_bytes(void);


	inline jule::Str _method_text(void);


	inline jule::Exceptional<jule::Bool> _method_scan(void);


	inline bool operator==(const _1a92b4627_Scanner &_Src) const {
		return 
			this->_field_r == _Src._field_r &&
			this->_field_b == _Src._field_b;
	}

	inline bool operator!=(const _1a92b4627_Scanner &_Src) const { return !this->operator==(_Src); }
};


struct _1b7905331_FieldIns {
	jule::Ptr<_1b7905331_Field> _field_decl = jule::Ptr<_1b7905331_Field>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a8b431d7_Data> _field_default = jule::Ptr<_1a8b431d7_Data>();


	_1b7905331_FieldIns(jule::Ptr<_1b7905331_Field> __param_decl, jule::Ptr<_1a6a19a50_TypeKind> __param_kind, jule::Ptr<_1a8b431d7_Data> __param_default): _field_decl(__param_decl), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_1b7905331_FieldIns(void) = default;

	inline bool operator==(const _1b7905331_FieldIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1b7905331_FieldIns &_Src) const { return !this->operator==(_Src); }
};


struct _1b7905331_StructIns: public _1a6a19a50_Kind {
	jule::Ptr<_1b7905331_StructIns> self;

	jule::Bool _field_checked = jule::Bool();
	jule::Ptr<_1b7905331_Struct> _field_decl = jule::Ptr<_1b7905331_Struct>();
	jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>();
	jule::Slice<jule::Ptr<_1b7905331_FieldIns>> _field_fields = jule::Slice<jule::Ptr<_1b7905331_FieldIns>>();
	jule::Slice<jule::Ptr<_1a691a500_Fn>> _field_methods = jule::Slice<jule::Ptr<_1a691a500_Fn>>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Ptr<_1b6a47496_ReferenceStack> _field_references = jule::Ptr<_1b6a47496_ReferenceStack>();


	_1b7905331_StructIns(jule::Bool __param_checked, jule::Ptr<_1b7905331_Struct> __param_decl, jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1b7905331_FieldIns>> __param_fields, jule::Slice<jule::Ptr<_1a691a500_Fn>> __param_methods, jule::Bool __param_mutable, jule::Ptr<_1b6a47496_ReferenceStack> __param_references): _field_checked(__param_checked), _field_decl(__param_decl), _field_generics(__param_generics), _field_fields(__param_fields), _field_methods(__param_methods), _field_mutable(__param_mutable), _field_references(__param_references) {
		this->self = jule::Ptr<_1b7905331_StructIns>::make(this, nullptr);

	}

	~_1b7905331_StructIns(void) { this->self.ref = nullptr; }

	_1b7905331_StructIns(void) { this->self = jule::Ptr<_1b7905331_StructIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Bool _method_same(jule::Ptr<_1b7905331_StructIns>);


	inline jule::Ptr<_1a691a500_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_1b7905331_FieldIns> _method_find_field(jule::Str);


	inline bool operator==(const _1b7905331_StructIns &_Src) const {
		return 
			this->_field_checked == _Src._field_checked &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_references == _Src._field_references;
	}

	inline bool operator!=(const _1b7905331_StructIns &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_OperandExprModel {
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Any _field_model = jule::Any();


	_1a69b8d2e_OperandExprModel(jule::Ptr<_1a6a19a50_TypeKind> __param_kind, jule::Any __param_model): _field_kind(__param_kind), _field_model(__param_model) {}

	

	_1a69b8d2e_OperandExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_OperandExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _1a69b8d2e_OperandExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_StructArgExprModel {
	jule::Ptr<_1b7905331_FieldIns> _field_field = jule::Ptr<_1b7905331_FieldIns>();
	jule::Any _field_expr = jule::Any();


	_1a69b8d2e_StructArgExprModel(jule::Ptr<_1b7905331_FieldIns> __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1a69b8d2e_StructArgExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_StructArgExprModel &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a69b8d2e_StructArgExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_AllocStructLitExprModel {
	jule::Ptr<_1a69b8d2e_StructLitExprModel> _field_lit = jule::Ptr<_1a69b8d2e_StructLitExprModel>();


	_1a69b8d2e_AllocStructLitExprModel(jule::Ptr<_1a69b8d2e_StructLitExprModel> __param_lit): _field_lit(__param_lit) {}

	

	_1a69b8d2e_AllocStructLitExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_AllocStructLitExprModel &_Src) const {
		return 
			this->_field_lit == _Src._field_lit;
	}

	inline bool operator!=(const _1a69b8d2e_AllocStructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_SliceExprModel {
	jule::Ptr<_1a6a19a50_TypeKind> _field_elem_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1a69b8d2e_SliceExprModel(jule::Ptr<_1a6a19a50_TypeKind> __param_elem_kind, jule::Slice<jule::Any> __param_elems): _field_elem_kind(__param_elem_kind), _field_elems(__param_elems) {}

	

	_1a69b8d2e_SliceExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_SliceExprModel &_Src) const {
		return 
			this->_field_elem_kind == _Src._field_elem_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1a69b8d2e_SliceExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_AnonFnExprModel {
	jule::Ptr<_1a691a500_FnIns> _field_func = jule::Ptr<_1a691a500_FnIns>();
	jule::Bool _field_global = jule::Bool();


	_1a69b8d2e_AnonFnExprModel(jule::Ptr<_1a691a500_FnIns> __param_func, jule::Bool __param_global): _field_func(__param_func), _field_global(__param_global) {}

	

	_1a69b8d2e_AnonFnExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_AnonFnExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_global == _Src._field_global;
	}

	inline bool operator!=(const _1a69b8d2e_AnonFnExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_KeyValPairExprModel {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();


	_1a69b8d2e_KeyValPairExprModel(jule::Any __param_key, jule::Any __param_val): _field_key(__param_key), _field_val(__param_val) {}

	

	_1a69b8d2e_KeyValPairExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_KeyValPairExprModel &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1a69b8d2e_KeyValPairExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_MapExprModel {
	jule::Ptr<_1a6a19a50_TypeKind> _field_key_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_val_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Slice<jule::Ptr<_1a69b8d2e_KeyValPairExprModel>> _field_entries = jule::Slice<jule::Ptr<_1a69b8d2e_KeyValPairExprModel>>();


	_1a69b8d2e_MapExprModel(jule::Ptr<_1a6a19a50_TypeKind> __param_key_kind, jule::Ptr<_1a6a19a50_TypeKind> __param_val_kind, jule::Slice<jule::Ptr<_1a69b8d2e_KeyValPairExprModel>> __param_entries): _field_key_kind(__param_key_kind), _field_val_kind(__param_val_kind), _field_entries(__param_entries) {}

	

	_1a69b8d2e_MapExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_MapExprModel &_Src) const {
		return 
			this->_field_key_kind == _Src._field_key_kind &&
			this->_field_val_kind == _Src._field_val_kind &&
			this->_field_entries == _Src._field_entries;
	}

	inline bool operator!=(const _1a69b8d2e_MapExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_StructSubIdentExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1a6a19a50_TypeKind> _field_expr_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a691a500_FnIns> _field_method = jule::Ptr<_1a691a500_FnIns>();
	jule::Ptr<_1b7905331_FieldIns> _field_field = jule::Ptr<_1b7905331_FieldIns>();


	_1a69b8d2e_StructSubIdentExprModel(jule::Any __param_expr, jule::Ptr<_1a6a19a50_TypeKind> __param_expr_kind, jule::Ptr<_1a691a500_FnIns> __param_method, jule::Ptr<_1b7905331_FieldIns> __param_field): _field_expr(__param_expr), _field_expr_kind(__param_expr_kind), _field_method(__param_method), _field_field(__param_field) {}

	

	_1a69b8d2e_StructSubIdentExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_StructSubIdentExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_method == _Src._field_method &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _1a69b8d2e_StructSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_StructStaticIdentExprModel {
	jule::Ptr<_1b7905331_StructIns> _field_structure = jule::Ptr<_1b7905331_StructIns>();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1a691a500_FnIns> _field_method = jule::Ptr<_1a691a500_FnIns>();


	_1a69b8d2e_StructStaticIdentExprModel(jule::Ptr<_1b7905331_StructIns> __param_structure, jule::Any __param_expr, jule::Ptr<_1a691a500_FnIns> __param_method): _field_structure(__param_structure), _field_expr(__param_expr), _field_method(__param_method) {}

	

	_1a69b8d2e_StructStaticIdentExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_StructStaticIdentExprModel &_Src) const {
		return 
			this->_field_structure == _Src._field_structure &&
			this->_field_expr == _Src._field_expr &&
			this->_field_method == _Src._field_method;
	}

	inline bool operator!=(const _1a69b8d2e_StructStaticIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_ArrayExprModel {
	jule::Ptr<_1a6a19a50_Arr> _field_kind = jule::Ptr<_1a6a19a50_Arr>();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1a69b8d2e_ArrayExprModel(jule::Ptr<_1a6a19a50_Arr> __param_kind, jule::Slice<jule::Any> __param_elems): _field_kind(__param_kind), _field_elems(__param_elems) {}

	

	_1a69b8d2e_ArrayExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_ArrayExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1a69b8d2e_ArrayExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_CommonIdentExprModel {
	jule::Str _field_ident = jule::Str();


	_1a69b8d2e_CommonIdentExprModel(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1a69b8d2e_CommonIdentExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_CommonIdentExprModel &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1a69b8d2e_CommonIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_CommonSubIdentExprModel {
	jule::Ptr<_1a6a19a50_TypeKind> _field_expr_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1a69b8d2e_CommonSubIdentExprModel(jule::Ptr<_1a6a19a50_TypeKind> __param_expr_kind, jule::Any __param_expr, jule::Str __param_ident): _field_expr_kind(__param_expr_kind), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1a69b8d2e_CommonSubIdentExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_CommonSubIdentExprModel &_Src) const {
		return 
			this->_field_expr_kind == _Src._field_expr_kind &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1a69b8d2e_CommonSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_TupleExprModel {
	jule::Slice<jule::Ptr<_1a8b431d7_Data>> _field_datas = jule::Slice<jule::Ptr<_1a8b431d7_Data>>();


	_1a69b8d2e_TupleExprModel(jule::Slice<jule::Ptr<_1a8b431d7_Data>> __param_datas): _field_datas(__param_datas) {}

	

	_1a69b8d2e_TupleExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_TupleExprModel &_Src) const {
		return 
			this->_field_datas == _Src._field_datas;
	}

	inline bool operator!=(const _1a69b8d2e_TupleExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinOutCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1a69b8d2e_BuiltinOutCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1a69b8d2e_BuiltinOutCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinOutCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinOutCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinOutlnCallExprModel {
	jule::Any _field_expr = jule::Any();
	jule::Bool _field_debug = jule::Bool();


	_1a69b8d2e_BuiltinOutlnCallExprModel(jule::Any __param_expr, jule::Bool __param_debug): _field_expr(__param_expr), _field_debug(__param_debug) {}

	

	_1a69b8d2e_BuiltinOutlnCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinOutlnCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_debug == _Src._field_debug;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinOutlnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinCloneCallExprModel {
	jule::Any _field_expr = jule::Any();


	_1a69b8d2e_BuiltinCloneCallExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1a69b8d2e_BuiltinCloneCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinCloneCallExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinCloneCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinNewCallExprModel {
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Any _field_init = jule::Any();


	_1a69b8d2e_BuiltinNewCallExprModel(jule::Ptr<_1a6a19a50_TypeKind> __param_kind, jule::Any __param_init): _field_kind(__param_kind), _field_init(__param_init) {}

	

	_1a69b8d2e_BuiltinNewCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinNewCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_init == _Src._field_init;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinNewCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinMakeCallExprModel {
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Any _field_len = jule::Any();
	jule::Any _field_cap = jule::Any();


	_1a69b8d2e_BuiltinMakeCallExprModel(jule::Ptr<_1a6a19a50_TypeKind> __param_kind, jule::Any __param_len, jule::Any __param_cap): _field_kind(__param_kind), _field_len(__param_len), _field_cap(__param_cap) {}

	

	_1a69b8d2e_BuiltinMakeCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinMakeCallExprModel &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_len == _Src._field_len &&
			this->_field_cap == _Src._field_cap;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinMakeCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinAppendCallExprModel {
	jule::Any _field_dest = jule::Any();
	jule::Any _field_elements = jule::Any();


	_1a69b8d2e_BuiltinAppendCallExprModel(jule::Any __param_dest, jule::Any __param_elements): _field_dest(__param_dest), _field_elements(__param_elements) {}

	

	_1a69b8d2e_BuiltinAppendCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinAppendCallExprModel &_Src) const {
		return 
			this->_field_dest == _Src._field_dest &&
			this->_field_elements == _Src._field_elements;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinAppendCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinErrorCallExprModel {
	jule::Ptr<_1a691a500_FnIns> _field_func = jule::Ptr<_1a691a500_FnIns>();
	jule::Any _field_err = jule::Any();


	_1a69b8d2e_BuiltinErrorCallExprModel(jule::Ptr<_1a691a500_FnIns> __param_func, jule::Any __param_err): _field_func(__param_func), _field_err(__param_err) {}

	

	_1a69b8d2e_BuiltinErrorCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinErrorCallExprModel &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_err == _Src._field_err;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinErrorCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_SizeofExprModel {
	jule::Any _field_expr = jule::Any();


	_1a69b8d2e_SizeofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1a69b8d2e_SizeofExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_SizeofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a69b8d2e_SizeofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_AlignofExprModel {
	jule::Any _field_expr = jule::Any();


	_1a69b8d2e_AlignofExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1a69b8d2e_AlignofExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_AlignofExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a69b8d2e_AlignofExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_RuneExprModel {
	jule::I32 _field_code = jule::I32();


	_1a69b8d2e_RuneExprModel(jule::I32 __param_code): _field_code(__param_code) {}

	

	_1a69b8d2e_RuneExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_RuneExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code;
	}

	inline bool operator!=(const _1a69b8d2e_RuneExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_IntegratedToStrExprModel {
	jule::Any _field_expr = jule::Any();


	_1a69b8d2e_IntegratedToStrExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1a69b8d2e_IntegratedToStrExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_IntegratedToStrExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a69b8d2e_IntegratedToStrExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_TernaryExprModel {
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_1a69b8d2e_TernaryExprModel(jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_1a69b8d2e_TernaryExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_TernaryExprModel &_Src) const {
		return 
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _1a69b8d2e_TernaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BackendEmitExprModel {
	jule::Str _field_code = jule::Str();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_1a69b8d2e_BackendEmitExprModel(jule::Str __param_code, jule::Slice<jule::Any> __param_exprs): _field_code(__param_code), _field_exprs(__param_exprs) {}

	

	_1a69b8d2e_BackendEmitExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BackendEmitExprModel &_Src) const {
		return 
			this->_field_code == _Src._field_code &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1a69b8d2e_BackendEmitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_FreeExprModel {
	jule::Any _field_expr = jule::Any();


	_1a69b8d2e_FreeExprModel(jule::Any __param_expr): _field_expr(__param_expr) {}

	

	_1a69b8d2e_FreeExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_FreeExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a69b8d2e_FreeExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a691a500_RetType {
	jule::Ptr<_1a6a19a50_TypeSymbol> _field_kind = jule::Ptr<_1a6a19a50_TypeSymbol>();
	jule::Slice<_1b7553d92_Token> _field_idents = jule::Slice<_1b7553d92_Token>();


	_1a691a500_RetType(jule::Ptr<_1a6a19a50_TypeSymbol> __param_kind, jule::Slice<_1b7553d92_Token> __param_idents): _field_kind(__param_kind), _field_idents(__param_idents) {}

	

	_1a691a500_RetType(void) = default;

	inline bool operator==(const _1a691a500_RetType &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_idents == _Src._field_idents;
	}

	inline bool operator!=(const _1a691a500_RetType &_Src) const { return !this->operator==(_Src); }
};


struct _1a691a500_ParamIns {
	jule::Ptr<_1a691a500_Param> _field_decl = jule::Ptr<_1a691a500_Param>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a691a500_ParamIns(jule::Ptr<_1a691a500_Param> __param_decl, jule::Ptr<_1a6a19a50_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1a691a500_ParamIns(void) = default;

	inline jule::Str _method_to_str(void);


	inline bool operator==(const _1a691a500_ParamIns &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1a691a500_ParamIns &_Src) const { return !this->operator==(_Src); }
};


struct _1a691a500_FnIns: public _1a6a19a50_Kind {
	jule::Ptr<_1a691a500_FnIns> self;

	jule::Ptr<_1b7905331_StructIns> _field_owner = jule::Ptr<_1b7905331_StructIns>();
	jule::Ptr<_1a691a500_Fn> _field_decl = jule::Ptr<_1a691a500_Fn>();
	jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _field_generics = jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>();
	jule::Slice<jule::Ptr<_1a691a500_ParamIns>> _field_params = jule::Slice<jule::Ptr<_1a691a500_ParamIns>>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_result = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();
	jule::Ptr<_1b6a47496_ReferenceStack> _field_references = jule::Ptr<_1b6a47496_ReferenceStack>();
	jule::Bool _field_anon = jule::Bool();
	jule::Ptr<_1b6a47496_ReferenceStack> _field_refers = jule::Ptr<_1b6a47496_ReferenceStack>();
	jule::U8 _field_caller = jule::U8();
	jule::Bool _field_reloaded = jule::Bool();


	_1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns> __param_owner, jule::Ptr<_1a691a500_Fn> __param_decl, jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> __param_generics, jule::Slice<jule::Ptr<_1a691a500_ParamIns>> __param_params, jule::Ptr<_1a6a19a50_TypeKind> __param_result, jule::Ptr<_1a6bc3e29_Scope> __param_scope, jule::Ptr<_1b6a47496_ReferenceStack> __param_references, jule::Bool __param_anon, jule::Ptr<_1b6a47496_ReferenceStack> __param_refers, jule::U8 __param_caller, jule::Bool __param_reloaded): _field_owner(__param_owner), _field_decl(__param_decl), _field_generics(__param_generics), _field_params(__param_params), _field_result(__param_result), _field_scope(__param_scope), _field_references(__param_references), _field_anon(__param_anon), _field_refers(__param_refers), _field_caller(__param_caller), _field_reloaded(__param_reloaded) {
		this->self = jule::Ptr<_1a691a500_FnIns>::make(this, nullptr);

	}

	~_1a691a500_FnIns(void) { this->self.ref = nullptr; }

	_1a691a500_FnIns(void) { this->self = jule::Ptr<_1a691a500_FnIns>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_same(jule::Ptr<_1a691a500_FnIns>);


	inline jule::Str _method_get_kind_str(jule::Bool);


	inline bool operator==(const _1a691a500_FnIns &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_decl == _Src._field_decl &&
			this->_field_generics == _Src._field_generics &&
			this->_field_params == _Src._field_params &&
			this->_field_result == _Src._field_result &&
			this->_field_scope == _Src._field_scope &&
			this->_field_references == _Src._field_references &&
			this->_field_anon == _Src._field_anon &&
			this->_field_refers == _Src._field_refers &&
			this->_field_caller == _Src._field_caller &&
			this->_field_reloaded == _Src._field_reloaded;
	}

	inline bool operator!=(const _1a691a500_FnIns &_Src) const { return !this->operator==(_Src); }
};


struct _1b6a47496_ReferenceStack {
	jule::Slice<jule::Any> _field_buffer = jule::Slice<jule::Any>();


	_1b6a47496_ReferenceStack(jule::Slice<jule::Any> __param_buffer): _field_buffer(__param_buffer) {}

	

	_1b6a47496_ReferenceStack(void) = default;

	static inline jule::Ptr<_1b6a47496_ReferenceStack> _static_method_new(void);


	inline jule::Int _method_len(void);


	inline jule::Any _method_at(jule::Int);


	inline void _method_push(jule::Any);


	inline jule::Bool _method_exist_0(jule::Ptr<_1a7003e4b_Var>);
	inline jule::Bool _method_exist_1(jule::Ptr<_1a691a500_FnIns>);
	inline jule::Bool _method_exist_2(jule::Ptr<_1b7905331_StructIns>);


	inline bool operator==(const _1b6a47496_ReferenceStack &_Src) const {
		return 
			this->_field_buffer == _Src._field_buffer;
	}

	inline bool operator!=(const _1b6a47496_ReferenceStack &_Src) const { return !this->operator==(_Src); }
};


struct _1b6a47496_SymbolBuilder {
	jule::Ptr<_1b6a47496_SymbolBuilder> self;

	jule::Ptr<_1b6a47496_SymbolBuilder> _field_owner = jule::Ptr<_1b6a47496_SymbolBuilder>();
	jule::Trait<_1a6e9a574_Importer> _field_importer = jule::Trait<_1a6e9a574_Importer>();
	jule::Slice<_1b6986b22_Log> _field_errors = jule::Slice<_1b6986b22_Log>();
	jule::Ptr<_1b74bea77_Ast> _field_ast = jule::Ptr<_1b74bea77_Ast>();
	jule::Ptr<_1a8acbe95_SymbolTable> _field_table = jule::Ptr<_1a8acbe95_SymbolTable>();


	_1b6a47496_SymbolBuilder(jule::Ptr<_1b6a47496_SymbolBuilder> __param_owner, jule::Trait<_1a6e9a574_Importer> __param_importer, jule::Slice<_1b6986b22_Log> __param_errors, jule::Ptr<_1b74bea77_Ast> __param_ast, jule::Ptr<_1a8acbe95_SymbolTable> __param_table): _field_owner(__param_owner), _field_importer(__param_importer), _field_errors(__param_errors), _field_ast(__param_ast), _field_table(__param_table) {
		this->self = jule::Ptr<_1b6a47496_SymbolBuilder>::make(this, nullptr);

	}

	~_1b6a47496_SymbolBuilder(void) { this->self.ref = nullptr; }

	_1b6a47496_SymbolBuilder(void) { this->self = jule::Ptr<_1b6a47496_SymbolBuilder>::make(this, nullptr); }

	inline jule::Ptr<_1b6a47496_SymbolBuilder> _method_get_root(void);


	inline void _method_push_err(_1b7553d92_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err_text(_1b7553d92_Token&,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_cpp_use_decl_path(jule::Ptr<_1b7509a90_UseDecl>&);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_build_cpp_header_import(jule::Ptr<_1b7509a90_UseDecl>&);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_build_std_import(jule::Ptr<_1b7509a90_UseDecl>&);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_build_ident_import(jule::Ptr<_1b7509a90_UseDecl>&);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_build_import(jule::Ptr<_1b7509a90_UseDecl>&);


	inline jule::Bool _method_check_duplicate_use_decl(jule::Ptr<_1a6e9a574_ImportInfo>&);


	inline void _method_impl_import_selections(jule::Ptr<_1a6e9a574_ImportInfo>&,jule::Ptr<_1b7509a90_UseDecl>&);


	inline jule::Str _method_get_as_link_path(jule::Str);


	inline void _method_push_cycle_error(jule::Ptr<_1b6a47496_SymbolBuilder>&,jule::Str,jule::Str&);


	inline void _method_push_cross_cycle_error(jule::Ptr<_1b6a47496_SymbolBuilder>&,jule::Ptr<_1a6e9a574_ImportInfo>&,_1b7553d92_Token&);


	inline jule::Bool _method_check_import_cycles(jule::Ptr<_1a6e9a574_ImportInfo>,jule::Ptr<_1b7509a90_UseDecl>&);


	inline void _method_check_package_accessibility(jule::Ptr<_1b7509a90_UseDecl>&,jule::Str&,jule::Str&);


	inline jule::Bool _method_import_package(jule::Ptr<_1a6e9a574_ImportInfo>&,jule::Ptr<_1b7509a90_UseDecl>&);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_import_use_decl(jule::Ptr<_1b7509a90_UseDecl>&);


	inline void _method_import_use_decls(void);


	inline void _method_append_decl(_1b7509a90_Node&);


	inline void _method_append_decls(void);


	inline void _method_append_impls(void);


	inline void _method_push_directive_pass(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_append_top_directives(void);


	inline void _method_build(void);


	inline bool operator==(const _1b6a47496_SymbolBuilder &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_importer == _Src._field_importer &&
			this->_field_errors == _Src._field_errors &&
			this->_field_ast == _Src._field_ast &&
			this->_field_table == _Src._field_table;
	}

	inline bool operator!=(const _1b6a47496_SymbolBuilder &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bbbe44_Impl {
	jule::Ptr<_1b7509a90_TypeDecl> _field_base = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1b7509a90_TypeDecl> _field_dest = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Slice<jule::Ptr<_1a691a500_Fn>> _field_methods = jule::Slice<jule::Ptr<_1a691a500_Fn>>();
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _field_statics = jule::Slice<jule::Ptr<_1a7003e4b_Var>>();


	_1a6bbbe44_Impl(jule::Ptr<_1b7509a90_TypeDecl> __param_base, jule::Ptr<_1b7509a90_TypeDecl> __param_dest, jule::Slice<jule::Ptr<_1a691a500_Fn>> __param_methods, jule::Slice<jule::Ptr<_1a7003e4b_Var>> __param_statics): _field_base(__param_base), _field_dest(__param_dest), _field_methods(__param_methods), _field_statics(__param_statics) {}

	

	_1a6bbbe44_Impl(void) = default;

	inline jule::Bool _method_is_trait_impl(void);


	inline jule::Bool _method_is_struct_impl(void);


	inline bool operator==(const _1a6bbbe44_Impl &_Src) const {
		return 
			this->_field_base == _Src._field_base &&
			this->_field_dest == _Src._field_dest &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics;
	}

	inline bool operator!=(const _1a6bbbe44_Impl &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Scope {
	jule::Ptr<_1a6bc3e29_Scope> _field_parent = jule::Ptr<_1a6bc3e29_Scope>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_deferred = jule::Bool();
	jule::Slice<jule::Any> _field_stmts = jule::Slice<jule::Any>();


	_1a6bc3e29_Scope(jule::Ptr<_1a6bc3e29_Scope> __param_parent, jule::Bool __param_unsafety, jule::Bool __param_deferred, jule::Slice<jule::Any> __param_stmts): _field_parent(__param_parent), _field_unsafety(__param_unsafety), _field_deferred(__param_deferred), _field_stmts(__param_stmts) {}

	

	_1a6bc3e29_Scope(void) = default;

	inline bool operator==(const _1a6bc3e29_Scope &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_deferred == _Src._field_deferred &&
			this->_field_stmts == _Src._field_stmts;
	}

	inline bool operator!=(const _1a6bc3e29_Scope &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_If {
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();


	_1a6bc3e29_If(jule::Any __param_expr, jule::Ptr<_1a6bc3e29_Scope> __param_scope): _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1a6bc3e29_If(void) = default;

	inline bool operator==(const _1a6bc3e29_If &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1a6bc3e29_If &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Else {
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();


	_1a6bc3e29_Else(jule::Ptr<_1a6bc3e29_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1a6bc3e29_Else(void) = default;

	inline bool operator==(const _1a6bc3e29_Else &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1a6bc3e29_Else &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Conditional {
	jule::Slice<jule::Ptr<_1a6bc3e29_If>> _field_elifs = jule::Slice<jule::Ptr<_1a6bc3e29_If>>();
	jule::Ptr<_1a6bc3e29_Else> _field_default = jule::Ptr<_1a6bc3e29_Else>();


	_1a6bc3e29_Conditional(jule::Slice<jule::Ptr<_1a6bc3e29_If>> __param_elifs, jule::Ptr<_1a6bc3e29_Else> __param_default): _field_elifs(__param_elifs), _field_default(__param_default) {}

	

	_1a6bc3e29_Conditional(void) = default;

	inline bool operator==(const _1a6bc3e29_Conditional &_Src) const {
		return 
			this->_field_elifs == _Src._field_elifs &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1a6bc3e29_Conditional &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_InfIter {
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();


	_1a6bc3e29_InfIter(jule::Ptr<_1a6bc3e29_Scope> __param_scope): _field_scope(__param_scope) {}

	

	_1a6bc3e29_InfIter(void) = default;

	inline bool operator==(const _1a6bc3e29_InfIter &_Src) const {
		return 
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1a6bc3e29_InfIter &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_WhileIter {
	jule::Any _field_expr = jule::Any();
	jule::Any _field_next = jule::Any();
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();


	_1a6bc3e29_WhileIter(jule::Any __param_expr, jule::Any __param_next, jule::Ptr<_1a6bc3e29_Scope> __param_scope): _field_expr(__param_expr), _field_next(__param_next), _field_scope(__param_scope) {}

	

	_1a6bc3e29_WhileIter(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _1a6bc3e29_WhileIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1a6bc3e29_WhileIter &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_RangeIter {
	jule::Ptr<_1a8b431d7_Data> _field_expr = jule::Ptr<_1a8b431d7_Data>();
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();
	jule::Ptr<_1a7003e4b_Var> _field_key_a = jule::Ptr<_1a7003e4b_Var>();
	jule::Ptr<_1a7003e4b_Var> _field_key_b = jule::Ptr<_1a7003e4b_Var>();


	_1a6bc3e29_RangeIter(jule::Ptr<_1a8b431d7_Data> __param_expr, jule::Ptr<_1a6bc3e29_Scope> __param_scope, jule::Ptr<_1a7003e4b_Var> __param_key_a, jule::Ptr<_1a7003e4b_Var> __param_key_b): _field_expr(__param_expr), _field_scope(__param_scope), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1a6bc3e29_RangeIter(void) = default;

	inline bool operator==(const _1a6bc3e29_RangeIter &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _1a6bc3e29_RangeIter &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_ContSt {
	jule::Uintptr _field_it = jule::Uintptr();


	_1a6bc3e29_ContSt(jule::Uintptr __param_it): _field_it(__param_it) {}

	

	_1a6bc3e29_ContSt(void) = default;

	inline bool operator==(const _1a6bc3e29_ContSt &_Src) const {
		return 
			this->_field_it == _Src._field_it;
	}

	inline bool operator!=(const _1a6bc3e29_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_BreakSt {
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_mtch = jule::Uintptr();


	_1a6bc3e29_BreakSt(jule::Uintptr __param_it, jule::Uintptr __param_mtch): _field_it(__param_it), _field_mtch(__param_mtch) {}

	

	_1a6bc3e29_BreakSt(void) = default;

	inline bool operator==(const _1a6bc3e29_BreakSt &_Src) const {
		return 
			this->_field_it == _Src._field_it &&
			this->_field_mtch == _Src._field_mtch;
	}

	inline bool operator!=(const _1a6bc3e29_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Label {
	jule::Str _field_ident = jule::Str();


	_1a6bc3e29_Label(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1a6bc3e29_Label(void) = default;

	inline bool operator==(const _1a6bc3e29_Label &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1a6bc3e29_Label &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_GotoSt {
	jule::Str _field_ident = jule::Str();


	_1a6bc3e29_GotoSt(jule::Str __param_ident): _field_ident(__param_ident) {}

	

	_1a6bc3e29_GotoSt(void) = default;

	inline bool operator==(const _1a6bc3e29_GotoSt &_Src) const {
		return 
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1a6bc3e29_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Postfix {
	jule::Any _field_expr = jule::Any();
	jule::Str _field_op = jule::Str();


	_1a6bc3e29_Postfix(jule::Any __param_expr, jule::Str __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1a6bc3e29_Postfix(void) = default;

	inline bool operator==(const _1a6bc3e29_Postfix &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1a6bc3e29_Postfix &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_MultiAssign {
	jule::Slice<jule::Any> _field_l = jule::Slice<jule::Any>();
	jule::Any _field_r = jule::Any();


	_1a6bc3e29_MultiAssign(jule::Slice<jule::Any> __param_l, jule::Any __param_r): _field_l(__param_l), _field_r(__param_r) {}

	

	_1a6bc3e29_MultiAssign(void) = default;

	inline bool operator==(const _1a6bc3e29_MultiAssign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r;
	}

	inline bool operator!=(const _1a6bc3e29_MultiAssign &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Match {
	jule::Ptr<_1a8b431d7_Data> _field_expr = jule::Ptr<_1a8b431d7_Data>();
	jule::Bool _field_type_match = jule::Bool();
	jule::Slice<jule::Ptr<_1a6bc3e29_Case>> _field_cases = jule::Slice<jule::Ptr<_1a6bc3e29_Case>>();
	jule::Ptr<_1a6bc3e29_Case> _field_default = jule::Ptr<_1a6bc3e29_Case>();


	_1a6bc3e29_Match(jule::Ptr<_1a8b431d7_Data> __param_expr, jule::Bool __param_type_match, jule::Slice<jule::Ptr<_1a6bc3e29_Case>> __param_cases, jule::Ptr<_1a6bc3e29_Case> __param_default): _field_expr(__param_expr), _field_type_match(__param_type_match), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1a6bc3e29_Match(void) = default;

	inline jule::Bool _method_is_generic_type_match(void);


	inline bool operator==(const _1a6bc3e29_Match &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1a6bc3e29_Match &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Case {
	jule::Ptr<_1a6bc3e29_Match> _field_owner = jule::Ptr<_1a6bc3e29_Match>();
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();
	jule::Slice<jule::Ptr<_1a8b431d7_Data>> _field_exprs = jule::Slice<jule::Ptr<_1a8b431d7_Data>>();
	jule::Ptr<_1a6bc3e29_Case> _field_next = jule::Ptr<_1a6bc3e29_Case>();


	_1a6bc3e29_Case(jule::Ptr<_1a6bc3e29_Match> __param_owner, jule::Ptr<_1a6bc3e29_Scope> __param_scope, jule::Slice<jule::Ptr<_1a8b431d7_Data>> __param_exprs, jule::Ptr<_1a6bc3e29_Case> __param_next): _field_owner(__param_owner), _field_scope(__param_scope), _field_exprs(__param_exprs), _field_next(__param_next) {}

	

	_1a6bc3e29_Case(void) = default;

	inline jule::Bool _method_is_default(void);


	inline bool operator==(const _1a6bc3e29_Case &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_next == _Src._field_next;
	}

	inline bool operator!=(const _1a6bc3e29_Case &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_FallSt {
	jule::Uintptr _field_dest_case = jule::Uintptr();


	_1a6bc3e29_FallSt(jule::Uintptr __param_dest_case): _field_dest_case(__param_dest_case) {}

	

	_1a6bc3e29_FallSt(void) = default;

	inline bool operator==(const _1a6bc3e29_FallSt &_Src) const {
		return 
			this->_field_dest_case == _Src._field_dest_case;
	}

	inline bool operator!=(const _1a6bc3e29_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_RetSt {
	jule::Ptr<_1a691a500_FnIns> _field_func = jule::Ptr<_1a691a500_FnIns>();
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _field_vars = jule::Slice<jule::Ptr<_1a7003e4b_Var>>();
	jule::Any _field_expr = jule::Any();


	_1a6bc3e29_RetSt(jule::Ptr<_1a691a500_FnIns> __param_func, jule::Slice<jule::Ptr<_1a7003e4b_Var>> __param_vars, jule::Any __param_expr): _field_func(__param_func), _field_vars(__param_vars), _field_expr(__param_expr) {}

	

	_1a6bc3e29_RetSt(void) = default;

	inline bool operator==(const _1a6bc3e29_RetSt &_Src) const {
		return 
			this->_field_func == _Src._field_func &&
			this->_field_vars == _Src._field_vars &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a6bc3e29_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_ScopeGoto {
	jule::Ptr<_1b7509a90_GotoSt> _field_gt = jule::Ptr<_1b7509a90_GotoSt>();
	jule::Ptr<_1a6bc3e29_ScopeChecker> _field_scope = jule::Ptr<_1a6bc3e29_ScopeChecker>();
	jule::Int _field_pos = jule::Int();


	_1a6bc3e29_ScopeGoto(jule::Ptr<_1b7509a90_GotoSt> __param_gt, jule::Ptr<_1a6bc3e29_ScopeChecker> __param_scope, jule::Int __param_pos): _field_gt(__param_gt), _field_scope(__param_scope), _field_pos(__param_pos) {}

	

	_1a6bc3e29_ScopeGoto(void) = default;

	inline bool operator==(const _1a6bc3e29_ScopeGoto &_Src) const {
		return 
			this->_field_gt == _Src._field_gt &&
			this->_field_scope == _Src._field_scope &&
			this->_field_pos == _Src._field_pos;
	}

	inline bool operator!=(const _1a6bc3e29_ScopeGoto &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_ScopeChecker: public _1a9062c33_Lookup {
	jule::Ptr<_1a6bc3e29_ScopeChecker> self;

	jule::Ptr<_1a7002752_Sema> _field_s = jule::Ptr<_1a7002752_Sema>();
	jule::Ptr<_1a691a500_FnIns> _field_owner = jule::Ptr<_1a691a500_FnIns>();
	jule::Ptr<_1a6bc3e29_ScopeChecker> _field_parent = jule::Ptr<_1a6bc3e29_ScopeChecker>();
	jule::Int _field_child_index = jule::Int();
	jule::Ptr<_1a8acbe95_SymbolTable> _field_table = jule::Ptr<_1a8acbe95_SymbolTable>();
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();
	jule::Ptr<_1b7509a90_ScopeTree> _field_tree = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_result = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Uintptr _field_it = jule::Uintptr();
	jule::Uintptr _field_cse = jule::Uintptr();
	jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeLabel>>> _field_labels = jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeLabel>>>();
	jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeGoto>>> _field_gotos = jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeGoto>>>();
	jule::Int _field_i = jule::Int();


	_1a6bc3e29_ScopeChecker(jule::Ptr<_1a7002752_Sema> __param_s, jule::Ptr<_1a691a500_FnIns> __param_owner, jule::Ptr<_1a6bc3e29_ScopeChecker> __param_parent, jule::Int __param_child_index, jule::Ptr<_1a8acbe95_SymbolTable> __param_table, jule::Ptr<_1a6bc3e29_Scope> __param_scope, jule::Ptr<_1b7509a90_ScopeTree> __param_tree, jule::Ptr<_1a6a19a50_TypeKind> __param_result, jule::Uintptr __param_it, jule::Uintptr __param_cse, jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeLabel>>> __param_labels, jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeGoto>>> __param_gotos, jule::Int __param_i): _field_s(__param_s), _field_owner(__param_owner), _field_parent(__param_parent), _field_child_index(__param_child_index), _field_table(__param_table), _field_scope(__param_scope), _field_tree(__param_tree), _field_result(__param_result), _field_it(__param_it), _field_cse(__param_cse), _field_labels(__param_labels), _field_gotos(__param_gotos), _field_i(__param_i) {
		this->self = jule::Ptr<_1a6bc3e29_ScopeChecker>::make(this, nullptr);

	}

	~_1a6bc3e29_ScopeChecker(void) { this->self.ref = nullptr; }

	_1a6bc3e29_ScopeChecker(void) { this->self = jule::Ptr<_1a6bc3e29_ScopeChecker>::make(this, nullptr); }

	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>);


	inline jule::Ptr<_1a7003e4b_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1a6a19a50_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1b7905331_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1a691a500_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1b76b472d_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1a6bb9150_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_root(void);


	inline jule::Bool _method_is_deferred(void);


	inline jule::Ptr<_1a6bc3e29_ScopeChecker> _method_get_root(void);


	inline jule::Ptr<_1a6bc3e29_Label> _method_find_label(jule::Str);


	inline jule::Ptr<_1a6bc3e29_ScopeLabel> _method_find_label_scope(jule::Str);


	inline jule::Ptr<_1a6bc3e29_ScopeLabel> _method_find_label_all(jule::Str);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str);


	inline void _method_check_var_decl(jule::Ptr<_1b7509a90_VarDecl>);


	inline void _method_check_type_alias_decl(jule::Ptr<_1b7509a90_TypeAliasDecl>);


	inline jule::Ptr<_1a6bc3e29_Scope> _method_get_child(void);


	inline void _method_check_child_ssc(jule::Ptr<_1b7509a90_ScopeTree>&,jule::Ptr<_1a6bc3e29_Scope>&,jule::Ptr<_1a6bc3e29_ScopeChecker>&);


	inline jule::Ptr<_1a6bc3e29_Scope> _method_check_child_sc(jule::Ptr<_1b7509a90_ScopeTree>&,jule::Ptr<_1a6bc3e29_ScopeChecker>&);


	inline jule::Ptr<_1a6bc3e29_Scope> _method_check_child(jule::Ptr<_1b7509a90_ScopeTree>&);


	inline void _method_check_anon_scope(jule::Ptr<_1b7509a90_ScopeTree>);


	inline void _method_process_error_call(jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>&,_1b7553d92_Token);


	inline void _method_check_expr(jule::Ptr<_1b7509a90_Expr>);


	inline void _method_check_co_expr(jule::Ptr<_1b7509a90_CoExpr>);


	inline jule::Ptr<_1a6bc3e29_If> _method_check_if(jule::Ptr<_1b7509a90_If>);


	inline jule::Ptr<_1a6bc3e29_Else> _method_check_else(jule::Ptr<_1b7509a90_Else>);


	inline void _method_check_conditional(jule::Ptr<_1b7509a90_Conditional>);


	inline jule::Ptr<_1a6bc3e29_Scope> _method_check_iter_scope_sc(jule::Uintptr,jule::Ptr<_1b7509a90_ScopeTree>,jule::Ptr<_1a6bc3e29_ScopeChecker>);


	inline jule::Ptr<_1a6bc3e29_Scope> _method_check_iter_scope(jule::Uintptr,jule::Ptr<_1b7509a90_ScopeTree>&);


	inline void _method_check_inf_iter(jule::Ptr<_1b7509a90_Iter>&);


	inline void _method_check_while_iter(jule::Ptr<_1b7509a90_Iter>&);


	inline void _method_check_range_iter(jule::Ptr<_1b7509a90_Iter>&);


	inline void _method_check_iter(jule::Ptr<_1b7509a90_Iter>);


	inline jule::Bool _method_check_valid_cont_label(jule::Uintptr);


	inline jule::Bool _method_check_valid_break_label(jule::Uintptr);


	inline jule::Ptr<_1a6bc3e29_ContSt> _method_check_cont_valid_scope(jule::Ptr<_1b7509a90_ContSt>);


	inline void _method_check_cont(jule::Ptr<_1b7509a90_ContSt>);


	inline void _method_check_label(jule::Ptr<_1b7509a90_LabelSt>);


	inline void _method_push_goto(jule::Ptr<_1b7509a90_GotoSt>);


	inline void _method_check_postfix(jule::Ptr<_1b7509a90_AssignSt>);


	inline jule::Bool _method_is_new_assign_ident(jule::Str);


	inline void _method_check_single_assign(jule::Ptr<_1b7509a90_AssignSt>&);


	inline void _method___process_end_part_of_multi_assign(jule::Ptr<_1a6bc3e29_MultiAssign>,jule::Ptr<_1b7509a90_AssignSt>,jule::Ptr<_1b7509a90_AssignLeft>,jule::Ptr<_1a8b431d7_Data>,jule::Ptr<_1a8b431d7_Data>);


	inline void _method_check_ret_multi_assign(jule::Ptr<_1b7509a90_AssignSt>&);


	inline void _method_check_multi_assign(jule::Ptr<_1b7509a90_AssignSt>&);


	inline void _method_check_assign_st(jule::Ptr<_1b7509a90_AssignSt>);


	inline jule::Ptr<_1a6bc3e29_Scope> _method_check_case_scope(jule::Ptr<_1a6bc3e29_Case>&,jule::Ptr<_1b7509a90_ScopeTree>&);


	inline jule::Ptr<_1a6bc3e29_Case> _method_check_case(jule::Ptr<_1a6bc3e29_Match>,jule::Int,jule::Ptr<_1b7509a90_Case>,jule::Ptr<_1a8b431d7_Data>);


	inline void _method_check_cases(jule::Ptr<_1b7509a90_MatchCase>&,jule::Ptr<_1a6bc3e29_Match>,jule::Ptr<_1a8b431d7_Data>);


	inline jule::Ptr<_1a6bc3e29_Case> _method_check_default(jule::Ptr<_1a6bc3e29_Match>,jule::Ptr<_1b7509a90_Else>);


	inline void _method_check_comptime_panic(jule::Ptr<_1a6bc3e29_Scope>&,_1b7553d92_Token);


	inline void _method_push_type_match(jule::Ptr<_1a6bc3e29_Match>,jule::Ptr<_1b7509a90_MatchCase>&);


	inline void _method_check_type_match(jule::Ptr<_1b7509a90_MatchCase>&);


	inline void _method_check_common_match(jule::Ptr<_1b7509a90_MatchCase>&);


	inline void _method_check_match(jule::Ptr<_1b7509a90_MatchCase>);


	inline void _method_check_fall(jule::Ptr<_1b7509a90_FallSt>);


	inline jule::Ptr<_1a6bc3e29_BreakSt> _method_check_break_with_label(jule::Ptr<_1b7509a90_BreakSt>);


	inline jule::Ptr<_1a6bc3e29_BreakSt> _method_check_plain_break(jule::Ptr<_1b7509a90_BreakSt>);


	inline void _method_check_break(jule::Ptr<_1b7509a90_BreakSt>);


	inline void _method_check_ret(jule::Ptr<_1b7509a90_RetSt>);


	inline void _method_check_use_expr(jule::Ptr<_1b7509a90_UseExpr>);


	inline void _method_check_node(jule::Any&);


	inline void _method_check_result(void);


	inline void _method_check_tree(void);


	inline void _method_check_goto(jule::Ptr<_1a6bc3e29_ScopeGoto>&,jule::Ptr<_1a6bc3e29_ScopeLabel>&);


	inline void _method_check_gotos(void);


	inline void _method_check_labels(void);


	inline void _method_check_vars(void);


	inline void _method_check_aliases(void);


	inline void _method_check(jule::Ptr<_1b7509a90_ScopeTree>&,jule::Ptr<_1a6bc3e29_Scope>&);


	inline jule::Ptr<_1a6bc3e29_ScopeChecker> _method_new_child_checker(void);


	inline bool operator==(const _1a6bc3e29_ScopeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_owner == _Src._field_owner &&
			this->_field_parent == _Src._field_parent &&
			this->_field_child_index == _Src._field_child_index &&
			this->_field_table == _Src._field_table &&
			this->_field_scope == _Src._field_scope &&
			this->_field_tree == _Src._field_tree &&
			this->_field_result == _Src._field_result &&
			this->_field_it == _Src._field_it &&
			this->_field_cse == _Src._field_cse &&
			this->_field_labels == _Src._field_labels &&
			this->_field_gotos == _Src._field_gotos &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1a6bc3e29_ScopeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1a6e9963e_DirectiveChecker {
	jule::Ptr<_1a7002752_Sema> _field_s = jule::Ptr<_1a7002752_Sema>();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_d = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Any _field_o = jule::Any();


	_1a6e9963e_DirectiveChecker(jule::Ptr<_1a7002752_Sema> __param_s, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_d, jule::Any __param_o): _field_s(__param_s), _field_d(__param_d), _field_o(__param_o) {}

	

	_1a6e9963e_DirectiveChecker(void) = default;

	inline void _method_check_cdef(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_check_typedef(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_check_derive(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_check_namespace(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_check_deprecated(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_check_test(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_check_directive(jule::Ptr<_1b7509a90_Directive>&);


	inline void _method_check(void);


	inline bool operator==(const _1a6e9963e_DirectiveChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_d == _Src._field_d &&
			this->_field_o == _Src._field_o;
	}

	inline bool operator!=(const _1a6e9963e_DirectiveChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1a6e9a574_Package: public _1a9062c33_Lookup {
	jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>();


	_1a6e9a574_Package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>> __param_files): _field_files(__param_files) {}

	

	_1a6e9a574_Package(void) = default;

	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>);


	inline jule::Ptr<_1a7003e4b_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1a6a19a50_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1b7905331_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1a691a500_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1b76b472d_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1a6bb9150_Enum> _method_find_enum(jule::Str);


	inline bool operator==(const _1a6e9a574_Package &_Src) const {
		return 
			this->_field_files == _Src._field_files;
	}

	inline bool operator!=(const _1a6e9a574_Package &_Src) const { return !this->operator==(_Src); }
};


struct _1a7002752_Sema: public _1a9062c33_Lookup {
	jule::Ptr<_1a7002752_Sema> self;

	jule::Slice<_1b6986b22_Log> _field_errors = jule::Slice<_1b6986b22_Log>();
	jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>> _field_files = jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>();
	jule::Ptr<_1a8acbe95_SymbolTable> _field_file = jule::Ptr<_1a8acbe95_SymbolTable>();
	jule::Int _field_flags = 0LL;


	_1a7002752_Sema(jule::Slice<_1b6986b22_Log> __param_errors, jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>> __param_files, jule::Ptr<_1a8acbe95_SymbolTable> __param_file, jule::Int __param_flags): _field_errors(__param_errors), _field_files(__param_files), _field_file(__param_file), _field_flags(__param_flags) {
		this->self = jule::Ptr<_1a7002752_Sema>::make(this, nullptr);

	}

	~_1a7002752_Sema(void) { this->self.ref = nullptr; }

	_1a7002752_Sema(void) { this->self = jule::Ptr<_1a7002752_Sema>::make(this, nullptr); }

	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>);


	inline jule::Ptr<_1a7003e4b_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1a6a19a50_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1b7905331_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1a691a500_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1b76b472d_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1a6bb9150_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_flag(jule::Int);


	inline void _method_set_current_file(jule::Ptr<_1a8acbe95_SymbolTable>);


	inline void _method_push_err(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_is_accessible_define(jule::Bool,_1b7553d92_Token);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline void _method_check_directives(jule::Slice<jule::Ptr<_1b7509a90_Directive>>&,jule::Any);


	inline jule::Bool _method_check_generic_quantity(jule::Int,jule::Int,_1b7553d92_Token);


	inline jule::Bool _method_is_duplicated_import_selection(jule::Uintptr,jule::Str);


	inline jule::Any _method_get_import_def(jule::Str,jule::Ptr<_1a6e9a574_ImportInfo>&);


	inline void _method_check_import_selections(jule::Ptr<_1a6e9a574_ImportInfo>&);


	inline jule::Bool _method_is_use_alias_duplication(jule::Ptr<_1a6e9a574_ImportInfo>&);


	inline jule::Bool _method_check_import(jule::Ptr<_1a6e9a574_ImportInfo>&);


	inline void _method_check_imports(void);


	inline void _method_impl_file_impls(void);


	inline void _method_impl_impls(void);


	inline void _method_check_enums(void);


	inline jule::Bool _method_check_type_with_refers(jule::Ptr<_1a6a19a50_TypeSymbol>&,jule::Trait<_1a9062c33_Lookup>,jule::Ptr<_1a6a19a50_Referencer>);


	inline jule::Bool _method_check_type(jule::Ptr<_1a6a19a50_TypeSymbol>&,jule::Trait<_1a9062c33_Lookup>);


	inline jule::Ptr<_1a6a19a50_TypeKind> _method_build_type_with_generics(jule::Ptr<_1b7509a90_TypeDecl>&,jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>);


	inline jule::Ptr<_1a6a19a50_TypeKind> _method_build_type(jule::Ptr<_1b7509a90_TypeDecl>&);


	inline jule::Ptr<_1a6a19a50_TypeKind> _method_select_type(jule::Ptr<_1b7509a90_TypeDecl>&);


	inline jule::Ptr<_1a8b431d7_Eval> _method_evalpd(jule::Trait<_1a9062c33_Lookup>,jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a7003e4b_Var>);


	inline jule::Ptr<_1a8b431d7_Eval> _method_evalp(jule::Trait<_1a9062c33_Lookup>,jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Ptr<_1a8b431d7_Eval> _method_eval(jule::Trait<_1a9062c33_Lookup>);


	inline void _method_check_assign_type(jule::Bool,jule::Ptr<_1a6a19a50_TypeKind>&,jule::Ptr<_1a8b431d7_Data>&,_1b7553d92_Token);


	inline jule::Bool _method_check_type_compatibility(jule::Ptr<_1a6a19a50_TypeKind>&,jule::Ptr<_1a6a19a50_TypeKind>&,_1b7553d92_Token&);


	inline jule::Ptr<_1a6a19a50_TypeKind> _method_build_non_generic_type_kind(jule::Ptr<_1b7509a90_TypeDecl>&,jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>&);


	inline void _method_build_fn_non_generic_type_kinds(jule::Ptr<_1a691a500_FnIns>&);


	inline jule::Ptr<_1a691a500_FnIns> _method_get_trait_check_fn_kind(jule::Ptr<_1a691a500_Fn>&);


	inline jule::Bool _method_reload_fn_ins_types(jule::Ptr<_1a691a500_FnIns>&);


	inline void _method_check_ref_validity_for_init_expr(jule::Bool,jule::Ptr<_1a8b431d7_Data>&,_1b7553d92_Token&);


	inline void _method_check_validity_for_init_expr(jule::Bool,jule::Bool,jule::Ptr<_1a6a19a50_TypeKind>&,jule::Ptr<_1a8b431d7_Data>&,_1b7553d92_Token&);


	inline jule::Bool _method_check_type_alias_decl_kind(jule::Ptr<_1a6a19a50_TypeAlias>&,jule::Trait<_1a9062c33_Lookup>);


	inline void _method_check_type_alias_decl(jule::Ptr<_1a6a19a50_TypeAlias>&,jule::Trait<_1a9062c33_Lookup>);


	inline void _method_check_type_alias_decl_dup(jule::Ptr<_1a6a19a50_TypeAlias>&);


	inline jule::Bool _method_check_type_alias_decls(void);


	inline void _method_check_enum_items_dup(jule::Ptr<_1a6bb9150_Enum>);


	inline void _method_check_enum_items_str(jule::Ptr<_1a6bb9150_Enum>&);


	inline void _method_check_enum_items_int(jule::Ptr<_1a6bb9150_Enum>&);


	inline void _method_check_enum_decl(jule::Ptr<_1a6bb9150_Enum>&);


	inline jule::Bool _method_check_enum_decls(void);


	inline jule::Bool _method_check_decl_generics(jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>&);


	inline jule::Bool _method_check_fn_decl_params_dup(jule::Ptr<_1a691a500_Fn>&);


	inline jule::Bool _method_check_fn_decl_result_dup(jule::Ptr<_1a691a500_Fn>&);


	inline jule::Bool _method_check_fn_decl_types(jule::Ptr<_1a691a500_Fn>&);


	inline jule::Bool _method_check_fn_decl_prototype(jule::Ptr<_1a691a500_Fn>&);


	inline void _method_check_trait_decl_method(jule::Ptr<_1a691a500_Fn>&);


	inline void _method_check_trait_decl_methods(jule::Ptr<_1b76b472d_Trait>&);


	inline void _method_check_trait_decl(jule::Ptr<_1b76b472d_Trait>&);


	inline jule::Bool _method_check_trait_decls(void);


	inline jule::Bool _method_check_trait_impl_methods(jule::Ptr<_1b76b472d_Trait>&,jule::Ptr<_1a6bbbe44_Impl>&);


	inline jule::Bool _method_impl_to_struct(jule::Ptr<_1b7905331_Struct>&,jule::Ptr<_1a6bbbe44_Impl>&);


	inline void _method_impl_trait(jule::Ptr<_1a6bbbe44_Impl>&);


	inline void _method_impl_struct(jule::Ptr<_1a6bbbe44_Impl>&);


	inline void _method_impl_impl(jule::Ptr<_1a6bbbe44_Impl>&);


	inline void _method_check_var_decl(jule::Ptr<_1a7003e4b_Var>&,jule::Trait<_1a9062c33_Lookup>);


	inline void _method_check_global_var_decl(jule::Ptr<_1a7003e4b_Var>&);


	inline jule::Bool _method_check_global_decls(void);


	inline jule::Bool _method_check_struct_trait_impl(jule::Ptr<_1b7905331_Struct>&,jule::Ptr<_1b76b472d_Trait>&);


	inline jule::Bool _method_check_struct_impls(jule::Ptr<_1b7905331_Struct>&);


	inline jule::Bool _method_check_struct_fields(jule::Ptr<_1b7905331_Struct>&);


	inline jule::Bool _method_check_struct_decl_methods(jule::Ptr<_1b7905331_Struct>&);


	inline void _method_check_struct_decl(jule::Ptr<_1b7905331_Struct>&);


	inline jule::Bool _method_check_struct_decls(void);


	inline void _method_check_fn_decl(jule::Ptr<_1a691a500_Fn>&);


	inline jule::Bool _method_check_fn_decls(void);


	inline void _method_push_cycle_error(jule::Ptr<_1b7905331_Struct>&,jule::Ptr<_1b7905331_Struct>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_1b7905331_Struct>&,jule::Ptr<_1b7905331_Struct>&,jule::Str&);


	inline jule::Bool _method_check_struct_derive_illegal_cycles(jule::Str,jule::Ptr<_1b7905331_Struct>&,jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_check_struct_ins_derive_clone(jule::Ptr<_1b7905331_StructIns>);


	inline jule::Bool _method_check_struct_derive_clone(jule::Ptr<_1b7905331_Struct>&);


	inline jule::Bool _method_check_file_derives(void);


	inline void _method_check_package_derives(void);


	inline void _method_check_package_decls(void);


	inline void _method_check_data_for_type_inference(jule::Ptr<_1a8b431d7_Data>&,_1b7553d92_Token&);


	inline void _method_check_var(jule::Ptr<_1a7003e4b_Var>&);


	inline void _method_check_type_var(jule::Ptr<_1a7003e4b_Var>&,jule::Trait<_1a9062c33_Lookup>);


	inline void _method_check_global_types(void);


	inline void _method_check_type_method(jule::Ptr<_1b7905331_StructIns>&,jule::Ptr<_1a691a500_Fn>&);


	inline void _method_check_field_defaults(jule::Ptr<_1b7905331_StructIns>&);


	inline void _method_check_type_struct(jule::Ptr<_1b7905331_Struct>&);


	inline void _method_check_struct_types(void);


	inline void _method_check_rets(jule::Ptr<_1a691a500_FnIns>&);


	inline void _method_check_fn_ins_sc(jule::Ptr<_1a691a500_FnIns>&,jule::Ptr<_1a6bc3e29_ScopeChecker>&);


	inline void _method_check_fn_ins(jule::Ptr<_1a691a500_FnIns>&);


	inline void _method_check_type_fn(jule::Ptr<_1a691a500_Fn>&);


	inline void _method_check_test_fn(jule::Ptr<_1a691a500_FnIns>&);


	inline void _method_precheck_type_fn(jule::Ptr<_1a691a500_Fn>&);


	inline void _method_precheck_fn_types(void);


	inline void _method_check_fn_types(void);


	inline void _method_check_package_types(void);


	inline void _method_set_file_sema_fields(void);


	inline void _method_set_sema_fields(void);


	inline void _method_check(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&);


	inline bool operator==(const _1a7002752_Sema &_Src) const {
		return 
			this->_field_errors == _Src._field_errors &&
			this->_field_files == _Src._field_files &&
			this->_field_file == _Src._field_file &&
			this->_field_flags == _Src._field_flags;
	}

	inline bool operator!=(const _1a7002752_Sema &_Src) const { return !this->operator==(_Src); }
};


struct _1a7003e4b_IterRelation {
	jule::Ptr<_1a7003e4b_Var> _field_range = jule::Ptr<_1a7003e4b_Var>();


	_1a7003e4b_IterRelation(jule::Ptr<_1a7003e4b_Var> __param_range): _field_range(__param_range) {}

	

	_1a7003e4b_IterRelation(void) = default;

	inline bool operator==(const _1a7003e4b_IterRelation &_Src) const {
		return 
			this->_field_range == _Src._field_range;
	}

	inline bool operator!=(const _1a7003e4b_IterRelation &_Src) const { return !this->operator==(_Src); }
};


struct _1a700327a_RangeChecker {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _field_sc = jule::Ptr<_1a6bc3e29_ScopeChecker>();
	jule::Ptr<_1b7509a90_RangeKind> _field_rang = jule::Ptr<_1b7509a90_RangeKind>();
	jule::Ptr<_1a6bc3e29_RangeIter> _field_kind = jule::Ptr<_1a6bc3e29_RangeIter>();
	jule::Ptr<_1a8b431d7_Data> _field_d = jule::Ptr<_1a8b431d7_Data>();


	_1a700327a_RangeChecker(jule::Ptr<_1a6bc3e29_ScopeChecker> __param_sc, jule::Ptr<_1b7509a90_RangeKind> __param_rang, jule::Ptr<_1a6bc3e29_RangeIter> __param_kind, jule::Ptr<_1a8b431d7_Data> __param_d): _field_sc(__param_sc), _field_rang(__param_rang), _field_kind(__param_kind), _field_d(__param_d) {}

	

	_1a700327a_RangeChecker(void) = default;

	inline jule::Ptr<_1a7003e4b_Var> _method_build_var(jule::Ptr<_1b7509a90_VarDecl>&);


	inline void _method_set_size_key(void);


	inline void _method_check_range_expr_validity(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a7003e4b_Var>&,jule::Ptr<_1a6a19a50_TypeKind>&);


	inline void _method_check_slice(void);


	inline void _method_check_array(void);


	inline void _method_check_map_key_a(void);


	inline void _method_check_map_key_b(void);


	inline void _method_check_map(void);


	inline void _method_check_str(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1a700327a_RangeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_rang == _Src._field_rang &&
			this->_field_kind == _Src._field_kind &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _1a700327a_RangeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1a8acbe95_SymbolTable: public _1a9062c33_Lookup {
	jule::Ptr<_1b750c763_File> _field_file = jule::Ptr<_1b750c763_File>();
	jule::Slice<_1b6a47496_Pass> _field_passes = jule::Slice<_1b6a47496_Pass>();
	jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>> _field_imports = jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>>();
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _field_vars = jule::Slice<jule::Ptr<_1a7003e4b_Var>>();
	jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _field_type_aliases = jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>();
	jule::Slice<jule::Ptr<_1b7905331_Struct>> _field_structs = jule::Slice<jule::Ptr<_1b7905331_Struct>>();
	jule::Slice<jule::Ptr<_1a691a500_Fn>> _field_funcs = jule::Slice<jule::Ptr<_1a691a500_Fn>>();
	jule::Slice<jule::Ptr<_1b76b472d_Trait>> _field_traits = jule::Slice<jule::Ptr<_1b76b472d_Trait>>();
	jule::Slice<jule::Ptr<_1a6bb9150_Enum>> _field_enums = jule::Slice<jule::Ptr<_1a6bb9150_Enum>>();
	jule::Slice<jule::Ptr<_1a6bbbe44_Impl>> _field_impls = jule::Slice<jule::Ptr<_1a6bbbe44_Impl>>();


	_1a8acbe95_SymbolTable(jule::Ptr<_1b750c763_File> __param_file, jule::Slice<_1b6a47496_Pass> __param_passes, jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>> __param_imports, jule::Slice<jule::Ptr<_1a7003e4b_Var>> __param_vars, jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> __param_type_aliases, jule::Slice<jule::Ptr<_1b7905331_Struct>> __param_structs, jule::Slice<jule::Ptr<_1a691a500_Fn>> __param_funcs, jule::Slice<jule::Ptr<_1b76b472d_Trait>> __param_traits, jule::Slice<jule::Ptr<_1a6bb9150_Enum>> __param_enums, jule::Slice<jule::Ptr<_1a6bbbe44_Impl>> __param_impls): _field_file(__param_file), _field_passes(__param_passes), _field_imports(__param_imports), _field_vars(__param_vars), _field_type_aliases(__param_type_aliases), _field_structs(__param_structs), _field_funcs(__param_funcs), _field_traits(__param_traits), _field_enums(__param_enums), _field_impls(__param_impls) {}

	

	_1a8acbe95_SymbolTable(void) = default;

	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>);


	inline jule::Ptr<_1a7003e4b_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1a6a19a50_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1b7905331_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1a691a500_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1b76b472d_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1a6bb9150_Enum> _method_find_enum(jule::Str);


	inline jule::Ptr<_1a7003e4b_Var> _method___find_var(jule::Str,jule::Bool,jule::Bool);


	inline jule::Ptr<_1a6a19a50_TypeAlias> _method___find_type_alias(jule::Str,jule::Bool,jule::Bool);


	inline jule::Any _method_def_by_ident(jule::Str,jule::Bool);


	inline jule::Bool _method_is_duplicated_ident(jule::Uintptr,jule::Str,jule::Bool);


	inline bool operator==(const _1a8acbe95_SymbolTable &_Src) const {
		return 
			this->_field_file == _Src._field_file &&
			this->_field_passes == _Src._field_passes &&
			this->_field_imports == _Src._field_imports &&
			this->_field_vars == _Src._field_vars &&
			this->_field_type_aliases == _Src._field_type_aliases &&
			this->_field_structs == _Src._field_structs &&
			this->_field_funcs == _Src._field_funcs &&
			this->_field_traits == _Src._field_traits &&
			this->_field_enums == _Src._field_enums &&
			this->_field_impls == _Src._field_impls;
	}

	inline bool operator!=(const _1a8acbe95_SymbolTable &_Src) const { return !this->operator==(_Src); }
};


struct _1a8b431d7_Data {
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_cast_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Bool _field_lvalue = jule::Bool();
	jule::Bool _field_is_rune = jule::Bool();
	jule::Any _field_model = jule::Any();
	jule::Bool _field_decl = jule::Bool();
	jule::Ptr<_1b6dd59aa_Const> _field_constant = jule::Ptr<_1b6dd59aa_Const>();


	_1a8b431d7_Data(jule::Ptr<_1a6a19a50_TypeKind> __param_kind, jule::Ptr<_1a6a19a50_TypeKind> __param_cast_kind, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Bool __param_lvalue, jule::Bool __param_is_rune, jule::Any __param_model, jule::Bool __param_decl, jule::Ptr<_1b6dd59aa_Const> __param_constant): _field_kind(__param_kind), _field_cast_kind(__param_cast_kind), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_lvalue(__param_lvalue), _field_is_rune(__param_is_rune), _field_model(__param_model), _field_decl(__param_decl), _field_constant(__param_constant) {}

	

	_1a8b431d7_Data(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_const(void);


	inline jule::Bool _method_good_operand(jule::Ptr<_1a8b431d7_Data>&);


	inline bool operator==(const _1a8b431d7_Data &_Src) const {
		return 
			this->_field_kind == _Src._field_kind &&
			this->_field_cast_kind == _Src._field_cast_kind &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_lvalue == _Src._field_lvalue &&
			this->_field_is_rune == _Src._field_is_rune &&
			this->_field_model == _Src._field_model &&
			this->_field_decl == _Src._field_decl &&
			this->_field_constant == _Src._field_constant;
	}

	inline bool operator!=(const _1a8b431d7_Data &_Src) const { return !this->operator==(_Src); }
};


struct _1a8b431d7_Value {
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();
	jule::Ptr<_1a8b431d7_Data> _field_data = jule::Ptr<_1a8b431d7_Data>();


	_1a8b431d7_Value(jule::Ptr<_1b7509a90_Expr> __param_expr, jule::Ptr<_1a8b431d7_Data> __param_data): _field_expr(__param_expr), _field_data(__param_data) {}

	

	_1a8b431d7_Value(void) = default;

	inline bool operator==(const _1a8b431d7_Value &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1a8b431d7_Value &_Src) const { return !this->operator==(_Src); }
};


struct _1a8b431d7_Eval {
	jule::Ptr<_1a8b431d7_Eval> self;

	jule::Ptr<_1a7002752_Sema> _field_s = jule::Ptr<_1a7002752_Sema>();
	jule::Trait<_1a9062c33_Lookup> _field_lookup = jule::Trait<_1a9062c33_Lookup>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_prefix = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_immutable = jule::Bool();
	jule::Bool _field_ignored = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Ptr<_1a7003e4b_Var> _field_owner = jule::Ptr<_1a7003e4b_Var>();
	jule::Ptr<_1b7905331_FieldIns> _field_field = jule::Ptr<_1b7905331_FieldIns>();


	_1a8b431d7_Eval(jule::Ptr<_1a7002752_Sema> __param_s, jule::Trait<_1a9062c33_Lookup> __param_lookup, jule::Ptr<_1a6a19a50_TypeKind> __param_prefix, jule::Bool __param_unsafety, jule::Bool __param_immutable, jule::Bool __param_ignored, jule::Bool __param_dis_builtin, jule::Ptr<_1a7003e4b_Var> __param_owner, jule::Ptr<_1b7905331_FieldIns> __param_field): _field_s(__param_s), _field_lookup(__param_lookup), _field_prefix(__param_prefix), _field_unsafety(__param_unsafety), _field_immutable(__param_immutable), _field_ignored(__param_ignored), _field_dis_builtin(__param_dis_builtin), _field_owner(__param_owner), _field_field(__param_field) {
		this->self = jule::Ptr<_1a8b431d7_Eval>::make(this, nullptr);

	}

	~_1a8b431d7_Eval(void) { this->self.ref = nullptr; }

	_1a8b431d7_Eval(void) { this->self = jule::Ptr<_1a8b431d7_Eval>::make(this, nullptr); }

	inline void _method_push_err(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Bool _method_is_unsafe(void);


	inline jule::Bool _method_is_global(void);


	inline void _method_apply_numeric_prefix(jule::Ptr<_1a8b431d7_Data>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_lit_nil(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_lit_str(jule::Ptr<_1b7509a90_LitExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_lit_bool(jule::Ptr<_1b7509a90_LitExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_lit_rune(jule::Ptr<_1b7509a90_LitExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_lit_float(jule::Ptr<_1b7509a90_LitExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_lit_int(jule::Ptr<_1b7509a90_LitExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_lit_num(jule::Ptr<_1b7509a90_LitExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_lit(jule::Ptr<_1b7509a90_LitExpr>);


	inline jule::Any _method_find_builtins(jule::Str);


	inline jule::Any _method_get_def(jule::Str,jule::Bool);


	inline void _method_push_reference(jule::Ptr<_1b6a47496_ReferenceStack>&);


	inline void _method_push_reference_to_fn(jule::Ptr<_1a691a500_FnIns>&);


	inline void _method_push_reference_to_var(jule::Ptr<_1a7003e4b_Var>&);


	inline void _method_push_reference_to_struct(jule::Ptr<_1b7905331_StructIns>&);


	inline jule::Ptr<_1a8b431d7_Data> _method___eval_enum(jule::Ptr<_1a6bb9150_Enum>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_enum(jule::Ptr<_1a6bb9150_Enum>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method___eval_struct(jule::Ptr<_1b7905331_StructIns>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_struct(jule::Ptr<_1b7905331_StructIns>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_fn_ins(jule::Ptr<_1a691a500_FnIns>);


	inline void _method_check_deprecated(jule::Slice<jule::Ptr<_1b7509a90_Directive>>&,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_fn(jule::Ptr<_1a691a500_Fn>,_1b7553d92_Token);


	inline void _method_push_illegal_cycle_error(jule::Ptr<_1a7003e4b_Var>&,jule::Ptr<_1a7003e4b_Var>&,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Ptr<_1a7003e4b_Var>&,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_1a7003e4b_Var>&,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_var(jule::Ptr<_1a7003e4b_Var>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_type_alias(jule::Ptr<_1a6a19a50_TypeAlias>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_def(jule::Any,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_ident(jule::Ptr<_1b7509a90_IdentExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_unary(jule::Ptr<_1b7509a90_UnaryExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_variadic(jule::Ptr<_1b7509a90_VariadicExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_unsafe(jule::Ptr<_1b7509a90_UnsafeExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_arr(jule::Ptr<_1b7509a90_SliceExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_exp_slc(jule::Ptr<_1b7509a90_SliceExpr>,jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_slice_expr(jule::Ptr<_1b7509a90_SliceExpr>);


	inline void _method_check_integer_indexing_by_data(jule::Ptr<_1a8b431d7_Data>&,_1b7553d92_Token);


	inline void _method_indexing_ptr(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1b7509a90_IndexingExpr>&);


	inline void _method_indexing_arr(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1b7509a90_IndexingExpr>&);


	inline void _method_indexing_slc(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1b7509a90_IndexingExpr>&);


	inline void _method_indexing_map(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1b7509a90_IndexingExpr>&);


	inline void _method_indexing_str(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1b7509a90_IndexingExpr>&);


	inline void _method_to_indexing(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1b7509a90_IndexingExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_ident_decl_from_indexing(jule::Ptr<_1b7509a90_IndexingExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_indexing(jule::Ptr<_1b7509a90_IndexingExpr>);


	inline std::tuple<jule::Ptr<_1a8b431d7_Data>,jule::Ptr<_1a8b431d7_Data>> _method_eval_slicing_exprs(jule::Ptr<_1b7509a90_SlicingExpr>&);


	inline void _method_slicing_arr(jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_slicing_slc(jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_slicing_str(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_check_slicing(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1b7509a90_SlicingExpr>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_slicing(jule::Ptr<_1b7509a90_SlicingExpr>);


	inline void _method_cast_ptr(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_struct(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_ref(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_slc(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_str(jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_int(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_num(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_prim(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline void _method_cast_constant(jule::Ptr<_1a6a19a50_TypeKind>&,jule::Ptr<_1a8b431d7_Data>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_cast_by_type_n_data(jule::Ptr<_1a6a19a50_TypeKind>,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_cast(jule::Ptr<_1b7509a90_CastExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_ns_selection(jule::Ptr<_1b7509a90_NsSelectionExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_struct_lit_explicit(jule::Ptr<_1b7905331_StructIns>,jule::Slice<jule::Any>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_struct_lit(jule::Ptr<_1b7509a90_StructLit>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_type(jule::Ptr<_1b7509a90_TypeDecl>);


	inline void _method_call_type_fn(jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);


	inline std::tuple<jule::Bool,jule::Bool> _method_check_fn_call_generics(jule::Ptr<_1a691a500_FnIns>,jule::Ptr<_1b7509a90_FnCallExpr>);


	inline void _method_call_builtin_fn(jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_check_fn_of_concurrent_call(jule::Ptr<_1a691a500_FnIns>&,_1b7553d92_Token);


	inline void _method_process_exceptional_handler(jule::Ptr<_1a691a500_FnIns>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_call_fn(jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_fn_call(jule::Ptr<_1b7509a90_FnCallExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_enum_static(jule::Ptr<_1a6bb9150_Enum>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_struct_static(jule::Ptr<_1b7905331_StructIns>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_trait_sub_ident(jule::Ptr<_1a8b431d7_Data>,jule::Ptr<_1b76b472d_Trait>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_struct_sub_ident(jule::Ptr<_1a8b431d7_Data>,jule::Ptr<_1b7905331_StructIns>,jule::Ptr<_1b7509a90_SubIdentExpr>,jule::Bool);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_slice_sub_ident(jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_array_sub_ident(jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_map_sub_ident(jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_str_sub_ident(jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_int_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_uint_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_i8_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_i16_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_i32_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_i64_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_u8_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_u16_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_u32_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_u64_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_f32_type_tatic(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_f64_type_static(_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_prim_static(jule::Str,_1b7553d92_Token);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_type_static(jule::Ptr<_1a8b431d7_Data>,jule::Ptr<_1b7509a90_SubIdentExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_obj_sub_ident(jule::Ptr<_1a8b431d7_Data>,jule::Ptr<_1b7509a90_SubIdentExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_sub_ident(jule::Ptr<_1b7509a90_SubIdentExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_tuple(jule::Ptr<_1b7509a90_TupleExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_map(jule::Ptr<_1a6a19a50_Map>,jule::Ptr<_1b7509a90_BraceLit>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_brace_lit(jule::Ptr<_1b7509a90_BraceLit>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_anon_fn(jule::Ptr<_1b7509a90_FnDecl>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_binop(jule::Ptr<_1b7509a90_BinopExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_ternary(jule::Ptr<_1b7509a90_TernaryExpr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_expr_kind(jule::Any);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval(jule::Ptr<_1b7509a90_Expr>);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_expr(jule::Ptr<_1b7509a90_Expr>);


	inline bool operator==(const _1a8b431d7_Eval &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_prefix == _Src._field_prefix &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_immutable == _Src._field_immutable &&
			this->_field_ignored == _Src._field_ignored &&
			this->_field_dis_builtin == _Src._field_dis_builtin &&
			this->_field_owner == _Src._field_owner &&
			this->_field_field == _Src._field_field;
	}

	inline bool operator!=(const _1a8b431d7_Eval &_Src) const { return !this->operator==(_Src); }
};


struct _1a8b431d7_UnaryEval {
	jule::Ptr<_1a8b431d7_Eval> _field_e = jule::Ptr<_1a8b431d7_Eval>();
	jule::Ptr<_1a8b431d7_Data> _field_d = jule::Ptr<_1a8b431d7_Data>();
	jule::Ptr<_1b7509a90_UnaryExpr> _field_u = jule::Ptr<_1b7509a90_UnaryExpr>();


	_1a8b431d7_UnaryEval(jule::Ptr<_1a8b431d7_Eval> __param_e, jule::Ptr<_1a8b431d7_Data> __param_d, jule::Ptr<_1b7509a90_UnaryExpr> __param_u): _field_e(__param_e), _field_d(__param_d), _field_u(__param_u) {}

	

	_1a8b431d7_UnaryEval(void) = default;

	static inline _1a8b431d7_UnaryEval _static_method_new(jule::Ptr<_1a8b431d7_Eval>);


	inline void _method_eval_minus(void);


	inline void _method_eval_plus(void);


	inline void _method_eval_caret(void);


	inline void _method_eval_excl(void);


	inline void _method_eval_star(void);


	inline void _method_eval_amper(void);


	inline void _method_eval_type_decl(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval(jule::Ptr<_1b7509a90_UnaryExpr>);


	inline bool operator==(const _1a8b431d7_UnaryEval &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_d == _Src._field_d &&
			this->_field_u == _Src._field_u;
	}

	inline bool operator!=(const _1a8b431d7_UnaryEval &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_TypeKind: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_TypeKind> self;

	jule::Str _field_cpp_ident = jule::Str();
	jule::Bool _field_generic = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Trait<_1a6a19a50_Kind> _field_kind = jule::Trait<_1a6a19a50_Kind>();


	_1a6a19a50_TypeKind(jule::Str __param_cpp_ident, jule::Bool __param_generic, jule::Bool __param_variadic, jule::Trait<_1a6a19a50_Kind> __param_kind): _field_cpp_ident(__param_cpp_ident), _field_generic(__param_generic), _field_variadic(__param_variadic), _field_kind(__param_kind) {
		this->self = jule::Ptr<_1a6a19a50_TypeKind>::make(this, nullptr);

	}

	~_1a6a19a50_TypeKind(void) { this->self.ref = nullptr; }

	_1a6a19a50_TypeKind(void) { this->self = jule::Ptr<_1a6a19a50_TypeKind>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Bool _method_cpp_linked(void);


	inline jule::Bool _method_is_nil(void);


	inline jule::Bool _method_void(void);


	inline jule::Bool _method_mutable(void);


	inline jule::Bool _method_nil_compatible(void);


	inline jule::Bool _method_performs_rc(void);


	inline jule::Bool _method_supports_cloning(void);


	inline jule::Bool _method_variadicable(void);


	inline jule::Ptr<_1a6a19a50_Prim> _method_prim(void);


	inline jule::Ptr<_1a6a19a50_Sptr> _method_sptr(void);


	inline jule::Ptr<_1a6a19a50_Ptr> _method_ptr(void);


	inline jule::Ptr<_1a6bb9150_Enum> _method_enm(void);


	inline jule::Ptr<_1a6a19a50_Arr> _method_arr(void);


	inline jule::Ptr<_1a6a19a50_Slc> _method_slc(void);


	inline jule::Ptr<_1a691a500_FnIns> _method_fnc(void);


	inline jule::Ptr<_1b7905331_StructIns> _method_strct(void);


	inline jule::Ptr<_1b76b472d_Trait> _method_trt(void);


	inline jule::Ptr<_1a6a19a50_Map> _method_map(void);


	inline jule::Ptr<_1a6a19a50_Tuple> _method_tup(void);


	inline bool operator==(const _1a6a19a50_TypeKind &_Src) const {
		return 
			this->_field_cpp_ident == _Src._field_cpp_ident &&
			this->_field_generic == _Src._field_generic &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1a6a19a50_TypeKind &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_TypeSymbol {
	jule::Ptr<_1b7509a90_TypeDecl> _field_decl = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl> __param_decl, jule::Ptr<_1a6a19a50_TypeKind> __param_kind): _field_decl(__param_decl), _field_kind(__param_kind) {}

	

	_1a6a19a50_TypeSymbol(void) = default;

	inline jule::Bool _method_checked(void);


	inline void _method_remove_kind(void);


	inline bool operator==(const _1a6a19a50_TypeSymbol &_Src) const {
		return 
			this->_field_decl == _Src._field_decl &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1a6a19a50_TypeSymbol &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Prim: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_Prim> self;

	jule::Str _field_kind = jule::Str();


	_1a6a19a50_Prim(jule::Str __param_kind): _field_kind(__param_kind) {
		this->self = jule::Ptr<_1a6a19a50_Prim>::make(this, nullptr);

	}

	~_1a6a19a50_Prim(void) { this->self.ref = nullptr; }

	_1a6a19a50_Prim(void) { this->self = jule::Ptr<_1a6a19a50_Prim>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Bool _method_is_i8(void);


	inline jule::Bool _method_is_i16(void);


	inline jule::Bool _method_is_i32(void);


	inline jule::Bool _method_is_i64(void);


	inline jule::Bool _method_is_u8(void);


	inline jule::Bool _method_is_u16(void);


	inline jule::Bool _method_is_u32(void);


	inline jule::Bool _method_is_u64(void);


	inline jule::Bool _method_is_f32(void);


	inline jule::Bool _method_is_f64(void);


	inline jule::Bool _method_is_int(void);


	inline jule::Bool _method_is_uint(void);


	inline jule::Bool _method_is_uintptr(void);


	inline jule::Bool _method_is_bool(void);


	inline jule::Bool _method_is_str(void);


	inline jule::Bool _method_is_any(void);


	inline bool operator==(const _1a6a19a50_Prim &_Src) const {
		return 
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1a6a19a50_Prim &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Sptr: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_Sptr> self;

	jule::Ptr<_1a6a19a50_TypeKind> _field_elem = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a6a19a50_Sptr(jule::Ptr<_1a6a19a50_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1a6a19a50_Sptr>::make(this, nullptr);

	}

	~_1a6a19a50_Sptr(void) { this->self.ref = nullptr; }

	_1a6a19a50_Sptr(void) { this->self = jule::Ptr<_1a6a19a50_Sptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline bool operator==(const _1a6a19a50_Sptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1a6a19a50_Sptr &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Slc: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_Slc> self;

	jule::Ptr<_1a6a19a50_TypeKind> _field_elem = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a6a19a50_Slc(jule::Ptr<_1a6a19a50_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1a6a19a50_Slc>::make(this, nullptr);

	}

	~_1a6a19a50_Slc(void) { this->self.ref = nullptr; }

	_1a6a19a50_Slc(void) { this->self = jule::Ptr<_1a6a19a50_Slc>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline bool operator==(const _1a6a19a50_Slc &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1a6a19a50_Slc &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Tuple: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_Tuple> self;

	jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>();


	_1a6a19a50_Tuple(jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> __param_types): _field_types(__param_types) {
		this->self = jule::Ptr<_1a6a19a50_Tuple>::make(this, nullptr);

	}

	~_1a6a19a50_Tuple(void) { this->self.ref = nullptr; }

	_1a6a19a50_Tuple(void) { this->self = jule::Ptr<_1a6a19a50_Tuple>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline bool operator==(const _1a6a19a50_Tuple &_Src) const {
		return 
			this->_field_types == _Src._field_types;
	}

	inline bool operator!=(const _1a6a19a50_Tuple &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Map: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_Map> self;

	jule::Ptr<_1a6a19a50_TypeKind> _field_key = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_val = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a6a19a50_Map(jule::Ptr<_1a6a19a50_TypeKind> __param_key, jule::Ptr<_1a6a19a50_TypeKind> __param_val): _field_key(__param_key), _field_val(__param_val) {
		this->self = jule::Ptr<_1a6a19a50_Map>::make(this, nullptr);

	}

	~_1a6a19a50_Map(void) { this->self.ref = nullptr; }

	_1a6a19a50_Map(void) { this->self = jule::Ptr<_1a6a19a50_Map>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline bool operator==(const _1a6a19a50_Map &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val;
	}

	inline bool operator!=(const _1a6a19a50_Map &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Arr: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_Arr> self;

	jule::Bool _field_auto = jule::Bool();
	jule::Int _field_n = jule::Int();
	jule::Ptr<_1a6a19a50_TypeKind> _field_elem = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a6a19a50_Arr(jule::Bool __param_auto, jule::Int __param_n, jule::Ptr<_1a6a19a50_TypeKind> __param_elem): _field_auto(__param_auto), _field_n(__param_n), _field_elem(__param_elem) {
		this->self = jule::Ptr<_1a6a19a50_Arr>::make(this, nullptr);

	}

	~_1a6a19a50_Arr(void) { this->self.ref = nullptr; }

	_1a6a19a50_Arr(void) { this->self = jule::Ptr<_1a6a19a50_Arr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline bool operator==(const _1a6a19a50_Arr &_Src) const {
		return 
			this->_field_auto == _Src._field_auto &&
			this->_field_n == _Src._field_n &&
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1a6a19a50_Arr &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Ptr: public _1a6a19a50_Kind {
	jule::Ptr<_1a6a19a50_Ptr> self;

	jule::Ptr<_1a6a19a50_TypeKind> _field_elem = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a6a19a50_Ptr(jule::Ptr<_1a6a19a50_TypeKind> __param_elem): _field_elem(__param_elem) {
		this->self = jule::Ptr<_1a6a19a50_Ptr>::make(this, nullptr);

	}

	~_1a6a19a50_Ptr(void) { this->self.ref = nullptr; }

	_1a6a19a50_Ptr(void) { this->self = jule::Ptr<_1a6a19a50_Ptr>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Bool _method_is_unsafe(void);


	inline bool operator==(const _1a6a19a50_Ptr &_Src) const {
		return 
			this->_field_elem == _Src._field_elem;
	}

	inline bool operator!=(const _1a6a19a50_Ptr &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_Referencer {
	jule::Str _field_ident = jule::Str();
	jule::Any _field_owner = jule::Any();
	jule::Slice<jule::Any>* _field_refs = nullptr;


	_1a6a19a50_Referencer(jule::Str __param_ident, jule::Any __param_owner, jule::Slice<jule::Any>* __param_refs): _field_ident(__param_ident), _field_owner(__param_owner), _field_refs(__param_refs) {}

	

	_1a6a19a50_Referencer(void) = default;

	inline bool operator==(const _1a6a19a50_Referencer &_Src) const {
		return 
			this->_field_ident == _Src._field_ident &&
			this->_field_owner == _Src._field_owner &&
			this->_field_refs == _Src._field_refs;
	}

	inline bool operator!=(const _1a6a19a50_Referencer &_Src) const { return !this->operator==(_Src); }
};


struct _1b74b0925_DirectiveEval {
	jule::Slice<_1b6986b22_Log> _field_logs = jule::Slice<_1b6986b22_Log>();
	jule::Ptr<_1b7509a90_Directive> _field_d = jule::Ptr<_1b7509a90_Directive>();


	_1b74b0925_DirectiveEval(jule::Slice<_1b6986b22_Log> __param_logs, jule::Ptr<_1b7509a90_Directive> __param_d): _field_logs(__param_logs), _field_d(__param_d) {}

	

	_1b74b0925_DirectiveEval(void) = default;

	inline void _method_push_err(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Slice<_1b7553d92_Token>> _method_split_operans(jule::Str,jule::Slice<_1b7553d92_Token>&);


	inline jule::Bool _method_eval_directive_ident(jule::Str);


	inline jule::Bool _method_eval_directive_part(jule::Slice<_1b7553d92_Token>);


	inline jule::Bool _method_eval(void);


	inline bool operator==(const _1b74b0925_DirectiveEval &_Src) const {
		return 
			this->_field_logs == _Src._field_logs &&
			this->_field_d == _Src._field_d;
	}

	inline bool operator!=(const _1b74b0925_DirectiveEval &_Src) const { return !this->operator==(_Src); }
};


struct _1b74c00a5_PlainImporter: public _1a6e9a574_Importer {
	jule::Slice<jule::Str> _field_mods = jule::Slice<jule::Str>();
	jule::Str _field_mod = jule::Str();
	jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>> _field_all_packages = jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>>();


	_1b74c00a5_PlainImporter(jule::Slice<jule::Str> __param_mods, jule::Str __param_mod, jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>> __param_all_packages): _field_mods(__param_mods), _field_mod(__param_mod), _field_all_packages(__param_all_packages) {}

	

	_1b74c00a5_PlainImporter(void) = default;

	static inline jule::Ptr<_1b74c00a5_PlainImporter> _static_method_new(void);


	inline void _method_set_mod_path(jule::Str);


	inline jule::Str _method_get_mod_path(void);


	inline jule::Str _method_mod_by_id(jule::Int);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_get_import(jule::Str);


	inline std::tuple<jule::Slice<jule::Ptr<_1b74bea77_Ast>>,jule::Slice<_1b6986b22_Log>> _method_import_package(jule::Str,jule::Bool);


	inline void _method_imported(jule::Ptr<_1a6e9a574_ImportInfo>);


	inline bool operator==(const _1b74c00a5_PlainImporter &_Src) const {
		return 
			this->_field_mods == _Src._field_mods &&
			this->_field_mod == _Src._field_mod &&
			this->_field_all_packages == _Src._field_all_packages;
	}

	inline bool operator!=(const _1b74c00a5_PlainImporter &_Src) const { return !this->operator==(_Src); }
};


struct _1b719c3c0_OrderedDefines {
	jule::Slice<jule::Ptr<_1b7905331_Struct>> _field_structs = jule::Slice<jule::Ptr<_1b7905331_Struct>>();


	_1b719c3c0_OrderedDefines(jule::Slice<jule::Ptr<_1b7905331_Struct>> __param_structs): _field_structs(__param_structs) {}

	

	_1b719c3c0_OrderedDefines(void) = default;

	inline bool operator==(const _1b719c3c0_OrderedDefines &_Src) const {
		return 
			this->_field_structs == _Src._field_structs;
	}

	inline bool operator!=(const _1b719c3c0_OrderedDefines &_Src) const { return !this->operator==(_Src); }
};


struct _1b719c3c0_DefineOrderer {
	

	_1b719c3c0_DefineOrderer(void) = default;

	static inline jule::Bool _static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_1b7905331_Struct>>&,jule::Ptr<_1b7905331_Struct>);


	static inline void _static_method_order_common_0(jule::Slice<jule::Ptr<_1b7905331_Struct>>&);


	static inline void _static_method_order_structures(jule::Slice<jule::Ptr<_1b7905331_Struct>>&);


	inline bool operator==(const _1b719c3c0_DefineOrderer &_Src) const { return true; }

	inline bool operator!=(const _1b719c3c0_DefineOrderer &_Src) const { return !this->operator==(_Src); }
};


struct _1b719b688_ScopeDeadCode {
	jule::Ptr<_1b719b688_ScopeDeadCode> self;

	jule::Ptr<_1b719b688_ScopeDeadCode> _field_parent = jule::Ptr<_1b719b688_ScopeDeadCode>();
	jule::Ptr<_1a6bc3e29_Scope> _field_s = jule::Ptr<_1a6bc3e29_Scope>();
	jule::Slice<jule::Any>* _field_stmts = nullptr;
	jule::Int _field_i = jule::Int();


	_1b719b688_ScopeDeadCode(jule::Ptr<_1b719b688_ScopeDeadCode> __param_parent, jule::Ptr<_1a6bc3e29_Scope> __param_s, jule::Slice<jule::Any>* __param_stmts, jule::Int __param_i): _field_parent(__param_parent), _field_s(__param_s), _field_stmts(__param_stmts), _field_i(__param_i) {
		this->self = jule::Ptr<_1b719b688_ScopeDeadCode>::make(this, nullptr);

	}

	~_1b719b688_ScopeDeadCode(void) { this->self.ref = nullptr; }

	_1b719b688_ScopeDeadCode(void) { this->self = jule::Ptr<_1b719b688_ScopeDeadCode>::make(this, nullptr); }

	inline void _method_optimize_child(jule::Ptr<_1a6bc3e29_Scope>&);


	inline void _method_eliminate_followed(void);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_stmts(void);


	inline bool operator==(const _1b719b688_ScopeDeadCode &_Src) const {
		return 
			this->_field_parent == _Src._field_parent &&
			this->_field_s == _Src._field_s &&
			this->_field_stmts == _Src._field_stmts &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1b719b688_ScopeDeadCode &_Src) const { return !this->operator==(_Src); }
};


struct _1a9612e81_AbsTime {
	jule::Uint _field_day = jule::Uint();
	jule::Uint _field_week_day = jule::Uint();
	jule::Uint _field_year_day = jule::Uint();
	jule::Uint _field_month = jule::Uint();
	jule::Uint _field_year = jule::Uint();
	jule::Uint _field_second = jule::Uint();
	jule::Uint _field_minute = jule::Uint();
	jule::Uint _field_hour = jule::Uint();


	_1a9612e81_AbsTime(jule::Uint __param_day, jule::Uint __param_week_day, jule::Uint __param_year_day, jule::Uint __param_month, jule::Uint __param_year, jule::Uint __param_second, jule::Uint __param_minute, jule::Uint __param_hour): _field_day(__param_day), _field_week_day(__param_week_day), _field_year_day(__param_year_day), _field_month(__param_month), _field_year(__param_year), _field_second(__param_second), _field_minute(__param_minute), _field_hour(__param_hour) {}

	

	_1a9612e81_AbsTime(void) = default;

	inline jule::U64 _method_unix(void);


	inline bool operator==(const _1a9612e81_AbsTime &_Src) const {
		return 
			this->_field_day == _Src._field_day &&
			this->_field_week_day == _Src._field_week_day &&
			this->_field_year_day == _Src._field_year_day &&
			this->_field_month == _Src._field_month &&
			this->_field_year == _Src._field_year &&
			this->_field_second == _Src._field_second &&
			this->_field_minute == _Src._field_minute &&
			this->_field_hour == _Src._field_hour;
	}

	inline bool operator!=(const _1a9612e81_AbsTime &_Src) const { return !this->operator==(_Src); }
};


struct _1a9612e81_Time {
	jule::U64 _field_sec = jule::U64();


	_1a9612e81_Time(jule::U64 __param_sec): _field_sec(__param_sec) {}

	

	_1a9612e81_Time(void) = default;

	static inline _1a9612e81_Time _static_method_unix(jule::U64);


	static inline _1a9612e81_Time _static_method_now(void);


	inline jule::U64 _method_unix(void);


	inline jule::Uint _method_day(void);


	inline jule::Uint _method_month(void);


	inline jule::Uint _method_year(void);


	inline jule::Uint _method_second(void);


	inline jule::Uint _method_minute(void);


	inline jule::Uint _method_hour(void);


	inline _1a9612e81_AbsTime _method_abs(void);


	inline bool operator==(const _1a9612e81_Time &_Src) const {
		return 
			this->_field_sec == _Src._field_sec;
	}

	inline bool operator!=(const _1a9612e81_Time &_Src) const { return !this->operator==(_Src); }
};


struct _1a9612e81_Duration {
	

	_1a9612e81_Duration(void) = default;

	static inline jule::I64 _static_method_nanoseconds(jule::I64);


	static inline jule::I64 _static_method_microseconds(jule::I64);


	static inline jule::I64 _static_method_milliseconds(jule::I64);


	static inline jule::I64 _static_method_seconds(jule::I64);


	static inline jule::I64 _static_method_minutes(jule::I64);


	static inline jule::I64 _static_method_hours(jule::I64);


	inline bool operator==(const _1a9612e81_Duration &_Src) const { return true; }

	inline bool operator!=(const _1a9612e81_Duration &_Src) const { return !this->operator==(_Src); }
};


struct _1a70a995d_ScopeOptimizer {
	jule::Int _field_i = jule::Int();
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();


	_1a70a995d_ScopeOptimizer(jule::Int __param_i, jule::Ptr<_1a6bc3e29_Scope> __param_scope): _field_i(__param_i), _field_scope(__param_scope) {}

	

	_1a70a995d_ScopeOptimizer(void) = default;

	static inline jule::Ptr<_1a70a995d_ScopeOptimizer> _static_method_new(jule::Ptr<_1a6bc3e29_Scope>);


	inline void _method_set_current_stmt(jule::Any);


	inline jule::Any _method_current_stmt(void);


	inline void _method_optimize_data(jule::Ptr<_1a8b431d7_Data>);


	inline void _method_optimize_conditional(jule::Ptr<_1a6bc3e29_Conditional>);


	inline void _method_optimize_match(jule::Ptr<_1a6bc3e29_Match>);


	inline void _method_optimize_stmt(jule::Any);


	inline void _method_optimize_child(jule::Ptr<_1a6bc3e29_Scope>);


	inline void _method_optimize(void);


	inline bool operator==(const _1a70a995d_ScopeOptimizer &_Src) const {
		return 
			this->_field_i == _Src._field_i &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1a70a995d_ScopeOptimizer &_Src) const { return !this->operator==(_Src); }
};


struct _1a70a6dab_Optimizer {
	jule::Ptr<_1b719bcc6_IR> _field_ir = jule::Ptr<_1b719bcc6_IR>();


	_1a70a6dab_Optimizer(jule::Ptr<_1b719bcc6_IR> __param_ir): _field_ir(__param_ir) {}

	

	_1a70a6dab_Optimizer(void) = default;

	static inline jule::Ptr<_1a70a6dab_Optimizer> _static_method_new(jule::Ptr<_1b719bcc6_IR>&);


	inline void _method_optimize_function(jule::Ptr<_1a691a500_Fn>&);


	inline void _method_optimize_struct(jule::Ptr<_1b7905331_Struct>&);


	inline void _method_optimize_functions(jule::Ptr<_1a6e9a574_Package>&);


	inline void _method_optimize_structs(jule::Ptr<_1a6e9a574_Package>&);


	inline void _method_optimize_package(jule::Ptr<_1a6e9a574_Package>&);


	inline void _method_optimize(void);


	inline bool operator==(const _1a70a6dab_Optimizer &_Src) const {
		return 
			this->_field_ir == _Src._field_ir;
	}

	inline bool operator!=(const _1a70a6dab_Optimizer &_Src) const { return !this->operator==(_Src); }
};


struct _1a70d117c_Flag_0: public _1a70d117c_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Int _field__default = jule::Int();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Int> _field__data = jule::Ptr<jule::Int>();


	_1a70d117c_Flag_0(jule::Str __param__name, jule::I32 __param__short, jule::Int __param__default, jule::Str __param__what, jule::Ptr<jule::Int> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1a70d117c_Flag_0(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1a70d117c_Flag_0 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1a70d117c_Flag_0 &_Src) const { return !this->operator==(_Src); }
};

struct _1a70d117c_Flag_1: public _1a70d117c_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Uint _field__default = jule::Uint();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Uint> _field__data = jule::Ptr<jule::Uint>();


	_1a70d117c_Flag_1(jule::Str __param__name, jule::I32 __param__short, jule::Uint __param__default, jule::Str __param__what, jule::Ptr<jule::Uint> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1a70d117c_Flag_1(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1a70d117c_Flag_1 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1a70d117c_Flag_1 &_Src) const { return !this->operator==(_Src); }
};

struct _1a70d117c_Flag_2: public _1a70d117c_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::F64 _field__default = jule::F64();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::F64> _field__data = jule::Ptr<jule::F64>();


	_1a70d117c_Flag_2(jule::Str __param__name, jule::I32 __param__short, jule::F64 __param__default, jule::Str __param__what, jule::Ptr<jule::F64> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1a70d117c_Flag_2(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1a70d117c_Flag_2 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1a70d117c_Flag_2 &_Src) const { return !this->operator==(_Src); }
};

struct _1a70d117c_Flag_3: public _1a70d117c_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Bool _field__default = jule::Bool();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Bool> _field__data = jule::Ptr<jule::Bool>();


	_1a70d117c_Flag_3(jule::Str __param__name, jule::I32 __param__short, jule::Bool __param__default, jule::Str __param__what, jule::Ptr<jule::Bool> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1a70d117c_Flag_3(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1a70d117c_Flag_3 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1a70d117c_Flag_3 &_Src) const { return !this->operator==(_Src); }
};

struct _1a70d117c_Flag_4: public _1a70d117c_CommonFlag {
	jule::Str _field__name = jule::Str();
	jule::I32 _field__short = jule::I32();
	jule::Str _field__default = jule::Str();
	jule::Str _field__what = jule::Str();
	jule::Ptr<jule::Str> _field__data = jule::Ptr<jule::Str>();


	_1a70d117c_Flag_4(jule::Str __param__name, jule::I32 __param__short, jule::Str __param__default, jule::Str __param__what, jule::Ptr<jule::Str> __param__data): _field__name(__param__name), _field__short(__param__short), _field__default(__param__default), _field__what(__param__what), _field__data(__param__data) {}

	

	_1a70d117c_Flag_4(void) = default;

	inline jule::Str _method_name(void);


	inline jule::Str _method_what(void);


	inline void _method_reset(void);


	inline jule::I32 _method_short(void);


	inline bool operator==(const _1a70d117c_Flag_4 &_Src) const {
		return 
			this->_field__name == _Src._field__name &&
			this->_field__short == _Src._field__short &&
			this->_field__default == _Src._field__default &&
			this->_field__what == _Src._field__what &&
			this->_field__data == _Src._field__data;
	}

	inline bool operator!=(const _1a70d117c_Flag_4 &_Src) const { return !this->operator==(_Src); }
};


struct _1a70d117c_FlagSet {
	jule::Slice<jule::Trait<_1a70d117c_CommonFlag>> _field__flags = jule::Slice<jule::Trait<_1a70d117c_CommonFlag>>();


	_1a70d117c_FlagSet(jule::Slice<jule::Trait<_1a70d117c_CommonFlag>> __param__flags): _field__flags(__param__flags) {}

	

	_1a70d117c_FlagSet(void) = default;

	static inline jule::Ptr<_1a70d117c_FlagSet> _static_method_new(void);


	inline jule::Trait<_1a70d117c_CommonFlag> _method_find_flag(jule::Str);


	inline jule::Trait<_1a70d117c_CommonFlag> _method_find_flag_short(jule::I32);


	inline jule::Slice<jule::Trait<_1a70d117c_CommonFlag>> _method_flags(void);


	inline jule::Exceptional<jule::Slice<jule::Str>> _method_parse(jule::Slice<jule::Str>);


	inline void _method_reset(void);


	inline jule::Ptr<_1a70d117c_Flag_4> _method_add_flag_common_0(jule::Str,jule::I32,jule::Str);
	inline jule::Ptr<_1a70d117c_Flag_3> _method_add_flag_common_1(jule::Str,jule::I32,jule::Str);




	inline void _method_add_var_0(jule::Ptr<jule::Str>,jule::Str,jule::I32,jule::Str);
	inline void _method_add_var_1(jule::Ptr<jule::Bool>,jule::Str,jule::I32,jule::Str);


	inline bool operator==(const _1a70d117c_FlagSet &_Src) const {
		return 
			this->_field__flags == _Src._field__flags;
	}

	inline bool operator!=(const _1a70d117c_FlagSet &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_BreakSt {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	_1b7553d92_Token _field_label = _1b7553d92_Token();


	_1b7509a90_BreakSt(_1b7553d92_Token __param_token, _1b7553d92_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1b7509a90_BreakSt(void) = default;

	inline bool operator==(const _1b7509a90_BreakSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1b7509a90_BreakSt &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_ContSt {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	_1b7553d92_Token _field_label = _1b7553d92_Token();


	_1b7509a90_ContSt(_1b7553d92_Token __param_token, _1b7553d92_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1b7509a90_ContSt(void) = default;

	inline bool operator==(const _1b7509a90_ContSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1b7509a90_ContSt &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_If {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();


	_1b7509a90_If(_1b7553d92_Token __param_token, jule::Ptr<_1b7509a90_Expr> __param_expr, jule::Ptr<_1b7509a90_ScopeTree> __param_scope): _field_token(__param_token), _field_expr(__param_expr), _field_scope(__param_scope) {}

	

	_1b7509a90_If(void) = default;

	inline bool operator==(const _1b7509a90_If &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1b7509a90_If &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Else {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();


	_1b7509a90_Else(_1b7553d92_Token __param_token, jule::Ptr<_1b7509a90_ScopeTree> __param_scope): _field_token(__param_token), _field_scope(__param_scope) {}

	

	_1b7509a90_Else(void) = default;

	inline bool operator==(const _1b7509a90_Else &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1b7509a90_Else &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Directive {
	_1b7553d92_Token _field_tag = _1b7553d92_Token();
	jule::Slice<_1b7553d92_Token> _field_args = jule::Slice<_1b7553d92_Token>();


	_1b7509a90_Directive(_1b7553d92_Token __param_tag, jule::Slice<_1b7553d92_Token> __param_args): _field_tag(__param_tag), _field_args(__param_args) {}

	

	_1b7509a90_Directive(void) = default;

	inline bool operator==(const _1b7509a90_Directive &_Src) const {
		return 
			this->_field_tag == _Src._field_tag &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1b7509a90_Directive &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_TypeAliasDecl {
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1b7509a90_CommentGroup> _field_doc_comments = jule::Ptr<_1b7509a90_CommentGroup>();


	_1b7509a90_TypeAliasDecl(jule::Ptr<_1b7509a90_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, _1b7553d92_Token __param_token, jule::Str __param_ident, jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Ptr<_1b7509a90_CommentGroup> __param_doc_comments): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc_comments(__param_doc_comments) {}

	

	_1b7509a90_TypeAliasDecl(void) = default;

	inline bool operator==(const _1b7509a90_TypeAliasDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _1b7509a90_TypeAliasDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Case {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Slice<jule::Ptr<_1b7509a90_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1b7509a90_Expr>>();


	_1b7509a90_Case(_1b7553d92_Token __param_token, jule::Ptr<_1b7509a90_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1b7509a90_Expr>> __param_exprs): _field_token(__param_token), _field_scope(__param_scope), _field_exprs(__param_exprs) {}

	

	_1b7509a90_Case(void) = default;

	inline bool operator==(const _1b7509a90_Case &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_scope == _Src._field_scope &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1b7509a90_Case &_Src) const { return !this->operator==(_Src); }
};


struct _1a691a500_Param {
	jule::Ptr<_1a691a500_Param> self;

	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1a6a19a50_TypeSymbol> _field_kind = jule::Ptr<_1a6a19a50_TypeSymbol>();
	jule::Str _field_ident = jule::Str();


	_1a691a500_Param(_1b7553d92_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_1a6a19a50_TypeSymbol> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {
		this->self = jule::Ptr<_1a691a500_Param>::make(this, nullptr);

	}

	~_1a691a500_Param(void) { this->self.ref = nullptr; }

	_1a691a500_Param(void) { this->self = jule::Ptr<_1a691a500_Param>::make(this, nullptr); }

	inline jule::Ptr<_1a691a500_ParamIns> _method_instance(void);


	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _1a691a500_Param &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1a691a500_Param &_Src) const { return !this->operator==(_Src); }
};


struct _1a691a500_Fn {
	jule::Ptr<_1a691a500_Fn> self;

	jule::Ptr<_1a7002752_Sema> _field_sema = jule::Ptr<_1a7002752_Sema>();
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>();
	jule::Ptr<_1a691a500_RetType> _field_result = jule::Ptr<_1a691a500_RetType>();
	jule::Slice<jule::Ptr<_1a691a500_Param>> _field_params = jule::Slice<jule::Ptr<_1a691a500_Param>>();
	jule::Ptr<_1b7905331_Struct> _field_owner = jule::Ptr<_1b7905331_Struct>();
	jule::Slice<jule::Ptr<_1a691a500_FnIns>> _field_instances = jule::Slice<jule::Ptr<_1a691a500_FnIns>>();


	_1a691a500_Fn(jule::Ptr<_1a7002752_Sema> __param_sema, _1b7553d92_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_directives, jule::Str __param_doc, jule::Ptr<_1b7509a90_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> __param_generics, jule::Ptr<_1a691a500_RetType> __param_result, jule::Slice<jule::Ptr<_1a691a500_Param>> __param_params, jule::Ptr<_1b7905331_Struct> __param_owner, jule::Slice<jule::Ptr<_1a691a500_FnIns>> __param_instances): _field_sema(__param_sema), _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc(__param_doc), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params), _field_owner(__param_owner), _field_instances(__param_instances) {
		this->self = jule::Ptr<_1a691a500_Fn>::make(this, nullptr);

	}

	~_1a691a500_Fn(void) { this->self.ref = nullptr; }

	_1a691a500_Fn(void) { this->self = jule::Ptr<_1a691a500_Fn>::make(this, nullptr); }

	inline jule::Bool _method_is_void(void);


	inline jule::Bool _method_is_method(void);


	inline jule::Bool _method_is_entry_point(void);


	inline jule::Bool _method_is_init(void);


	inline jule::Bool _method_is_anon(void);


	inline jule::Bool _method_any_var(void);


	inline jule::Bool _method_parameters_uses_generics(void);


	inline jule::Bool _method_result_uses_generics(void);


	inline jule::Ptr<_1a691a500_FnIns> _method_instance_force(void);


	inline jule::Ptr<_1a691a500_FnIns> _method_instance(void);


	inline std::tuple<jule::Bool,jule::Int> _method_append_instance(jule::Ptr<_1a691a500_FnIns>&);


	inline bool operator==(const _1a691a500_Fn &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params &&
			this->_field_owner == _Src._field_owner &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _1a691a500_Fn &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_MatchCase {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_type_match = jule::Bool();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();
	jule::Slice<jule::Ptr<_1b7509a90_Case>> _field_cases = jule::Slice<jule::Ptr<_1b7509a90_Case>>();
	jule::Ptr<_1b7509a90_Else> _field_default = jule::Ptr<_1b7509a90_Else>();


	_1b7509a90_MatchCase(_1b7553d92_Token __param_token, jule::Bool __param_type_match, jule::Ptr<_1b7509a90_Expr> __param_expr, jule::Slice<jule::Ptr<_1b7509a90_Case>> __param_cases, jule::Ptr<_1b7509a90_Else> __param_default): _field_token(__param_token), _field_type_match(__param_type_match), _field_expr(__param_expr), _field_cases(__param_cases), _field_default(__param_default) {}

	

	_1b7509a90_MatchCase(void) = default;

	inline bool operator==(const _1b7509a90_MatchCase &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_type_match == _Src._field_type_match &&
			this->_field_expr == _Src._field_expr &&
			this->_field_cases == _Src._field_cases &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1b7509a90_MatchCase &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_UseDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_full = jule::Bool();
	jule::Slice<_1b7553d92_Token> _field_selected = jule::Slice<_1b7553d92_Token>();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();


	_1b7509a90_UseDecl(_1b7553d92_Token __param_token, jule::Str __param_link_path, jule::Str __param_alias, jule::Bool __param_full, jule::Slice<_1b7553d92_Token> __param_selected, jule::Bool __param_cpp_linked, jule::Bool __param_std): _field_token(__param_token), _field_link_path(__param_link_path), _field_alias(__param_alias), _field_full(__param_full), _field_selected(__param_selected), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std) {}

	

	_1b7509a90_UseDecl(void) = default;

	inline bool operator==(const _1b7509a90_UseDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_alias == _Src._field_alias &&
			this->_field_full == _Src._field_full &&
			this->_field_selected == _Src._field_selected &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std;
	}

	inline bool operator!=(const _1b7509a90_UseDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_EnumItemDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_EnumItemDecl(_1b7553d92_Token __param_token, jule::Str __param_ident, jule::Ptr<_1b7509a90_Expr> __param_expr): _field_token(__param_token), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_1b7509a90_EnumItemDecl(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _1b7509a90_EnumItemDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_EnumItemDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b6a47496_Pass {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_text = jule::Str();


	_1b6a47496_Pass(_1b7553d92_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_1b6a47496_Pass(void) = default;

	inline bool operator==(const _1b6a47496_Pass &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _1b6a47496_Pass &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_EnumDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>> _field_items = jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>>();
	jule::Ptr<_1b7509a90_CommentGroup> _field_doc_comments = jule::Ptr<_1b7509a90_CommentGroup>();


	_1b7509a90_EnumDecl(_1b7553d92_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>> __param_items, jule::Ptr<_1b7509a90_CommentGroup> __param_doc_comments): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc_comments(__param_doc_comments) {}

	

	_1b7509a90_EnumDecl(void) = default;

	inline jule::Bool _method_default_typed(void);


	inline bool operator==(const _1b7509a90_EnumDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc_comments == _Src._field_doc_comments;
	}

	inline bool operator!=(const _1b7509a90_EnumDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b76b472d_Trait: public _1a6a19a50_Kind {
	jule::Ptr<_1b76b472d_Trait> self;

	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_1a691a500_Fn>> _field_methods = jule::Slice<jule::Ptr<_1a691a500_Fn>>();
	jule::Slice<jule::Ptr<_1b7905331_Struct>> _field_implemented = jule::Slice<jule::Ptr<_1b7905331_Struct>>();


	_1b76b472d_Trait(_1b7553d92_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_doc, jule::Slice<jule::Ptr<_1a691a500_Fn>> __param_methods, jule::Slice<jule::Ptr<_1b7905331_Struct>> __param_implemented): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_mutable(__param_mutable), _field_doc(__param_doc), _field_methods(__param_methods), _field_implemented(__param_implemented) {
		this->self = jule::Ptr<_1b76b472d_Trait>::make(this, nullptr);

	}

	~_1b76b472d_Trait(void) { this->self.ref = nullptr; }

	_1b76b472d_Trait(void) { this->self = jule::Ptr<_1b76b472d_Trait>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Bool _method_is_builtin(void);


	inline jule::Ptr<_1a691a500_Fn> _method_find_method(jule::Str);


	inline bool operator==(const _1b76b472d_Trait &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_doc == _Src._field_doc &&
			this->_field_methods == _Src._field_methods &&
			this->_field_implemented == _Src._field_implemented;
	}

	inline bool operator!=(const _1b76b472d_Trait &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bb9150_EnumItem {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1a8b431d7_Value> _field_value = jule::Ptr<_1a8b431d7_Value>();


	_1a6bb9150_EnumItem(_1b7553d92_Token __param_token, jule::Str __param_ident, jule::Ptr<_1a8b431d7_Value> __param_value): _field_token(__param_token), _field_ident(__param_ident), _field_value(__param_value) {}

	

	_1a6bb9150_EnumItem(void) = default;

	inline jule::Bool _method_auto_expr(void);


	inline bool operator==(const _1a6bb9150_EnumItem &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _1a6bb9150_EnumItem &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bb9150_Enum: public _1a6a19a50_Kind {
	jule::Ptr<_1a6bb9150_Enum> self;

	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1a6a19a50_TypeSymbol> _field_kind = jule::Ptr<_1a6a19a50_TypeSymbol>();
	jule::Slice<jule::Ptr<_1a6bb9150_EnumItem>> _field_items = jule::Slice<jule::Ptr<_1a6bb9150_EnumItem>>();
	jule::Str _field_doc = jule::Str();


	_1a6bb9150_Enum(_1b7553d92_Token __param_token, jule::Bool __param_public, jule::Str __param_ident, jule::Ptr<_1a6a19a50_TypeSymbol> __param_kind, jule::Slice<jule::Ptr<_1a6bb9150_EnumItem>> __param_items, jule::Str __param_doc): _field_token(__param_token), _field_public(__param_public), _field_ident(__param_ident), _field_kind(__param_kind), _field_items(__param_items), _field_doc(__param_doc) {
		this->self = jule::Ptr<_1a6bb9150_Enum>::make(this, nullptr);

	}

	~_1a6bb9150_Enum(void) { this->self.ref = nullptr; }

	_1a6bb9150_Enum(void) { this->self = jule::Ptr<_1a6bb9150_Enum>::make(this, nullptr); }

	inline jule::Str _method_to_str(void);


	inline jule::Bool _method_equals(jule::Ptr<_1a6a19a50_TypeKind>);


	inline jule::Ptr<_1a6bb9150_EnumItem> _method_find_item(jule::Str);


	inline bool operator==(const _1a6bb9150_Enum &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_items == _Src._field_items &&
			this->_field_doc == _Src._field_doc;
	}

	inline bool operator!=(const _1a6bb9150_Enum &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_FieldDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1b7509a90_Expr> _field_default = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_FieldDecl(_1b7553d92_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Ptr<_1b7509a90_Expr> __param_default): _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {}

	

	_1b7509a90_FieldDecl(void) = default;

	inline bool operator==(const _1b7509a90_FieldDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1b7509a90_FieldDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_StructDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>> _field_fields = jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Ptr<_1b7509a90_CommentGroup> _field_doc_comments = jule::Ptr<_1b7509a90_CommentGroup>();
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>();


	_1b7509a90_StructDecl(_1b7553d92_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>> __param_fields, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_directives, jule::Ptr<_1b7509a90_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_generics(__param_generics) {}

	

	_1b7509a90_StructDecl(void) = default;

	inline bool operator==(const _1b7509a90_StructDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _1b7509a90_StructDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_TraitDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_public = jule::Bool();
	jule::Ptr<_1b7509a90_CommentGroup> _field_doc_comments = jule::Ptr<_1b7509a90_CommentGroup>();
	jule::Slice<jule::Ptr<_1b7509a90_FnDecl>> _field_methods = jule::Slice<jule::Ptr<_1b7509a90_FnDecl>>();


	_1b7509a90_TraitDecl(_1b7553d92_Token __param_token, jule::Str __param_ident, jule::Bool __param_public, jule::Ptr<_1b7509a90_CommentGroup> __param_doc_comments, jule::Slice<jule::Ptr<_1b7509a90_FnDecl>> __param_methods): _field_token(__param_token), _field_ident(__param_ident), _field_public(__param_public), _field_doc_comments(__param_doc_comments), _field_methods(__param_methods) {}

	

	_1b7509a90_TraitDecl(void) = default;

	inline bool operator==(const _1b7509a90_TraitDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_public == _Src._field_public &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_methods == _Src._field_methods;
	}

	inline bool operator!=(const _1b7509a90_TraitDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Expr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_kind = jule::Any();


	_1b7509a90_Expr(_1b7553d92_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_1b7509a90_Expr(void) = default;

	inline bool operator==(const _1b7509a90_Expr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1b7509a90_Expr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_UseExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_UseExpr(_1b7553d92_Token __param_token, jule::Ptr<_1b7509a90_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1b7509a90_UseExpr(void) = default;

	inline bool operator==(const _1b7509a90_UseExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_UseExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_TypeDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_kind = jule::Any();


	_1b7509a90_TypeDecl(_1b7553d92_Token __param_token, jule::Any __param_kind): _field_token(__param_token), _field_kind(__param_kind) {}

	

	_1b7509a90_TypeDecl(void) = default;

	inline bool operator==(const _1b7509a90_TypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind;
	}

	inline bool operator!=(const _1b7509a90_TypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_LitExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_value = jule::Str();


	_1b7509a90_LitExpr(_1b7553d92_Token __param_token, jule::Str __param_value): _field_token(__param_token), _field_value(__param_value) {}

	

	_1b7509a90_LitExpr(void) = default;

	inline jule::Bool _method_is_nil(void);


	inline bool operator==(const _1b7509a90_LitExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_value == _Src._field_value;
	}

	inline bool operator!=(const _1b7509a90_LitExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_UnsafeExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();


	_1b7509a90_UnsafeExpr(_1b7553d92_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1b7509a90_UnsafeExpr(void) = default;

	inline bool operator==(const _1b7509a90_UnsafeExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_UnsafeExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_CoExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_CoExpr(_1b7553d92_Token __param_token, jule::Ptr<_1b7509a90_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1b7509a90_CoExpr(void) = default;

	inline bool operator==(const _1b7509a90_CoExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_CoExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_IdentExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();


	_1b7509a90_IdentExpr(_1b7553d92_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked) {}

	

	_1b7509a90_IdentExpr(void) = default;

	inline jule::Bool _method_is_self(void);


	inline bool operator==(const _1b7509a90_IdentExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked;
	}

	inline bool operator!=(const _1b7509a90_IdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b77c370a_AssignInfo {
	jule::Slice<_1b7553d92_Token> _field_l = jule::Slice<_1b7553d92_Token>();
	jule::Slice<_1b7553d92_Token> _field_r = jule::Slice<_1b7553d92_Token>();
	_1b7553d92_Token _field_setter = _1b7553d92_Token();
	jule::Bool _field_ok = jule::Bool();


	_1b77c370a_AssignInfo(jule::Slice<_1b7553d92_Token> __param_l, jule::Slice<_1b7553d92_Token> __param_r, _1b7553d92_Token __param_setter, jule::Bool __param_ok): _field_l(__param_l), _field_r(__param_r), _field_setter(__param_setter), _field_ok(__param_ok) {}

	

	_1b77c370a_AssignInfo(void) = default;

	inline bool operator==(const _1b77c370a_AssignInfo &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_setter == _Src._field_setter &&
			this->_field_ok == _Src._field_ok;
	}

	inline bool operator!=(const _1b77c370a_AssignInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_UnaryExpr {
	_1b7553d92_Token _field_op = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();


	_1b7509a90_UnaryExpr(_1b7553d92_Token __param_op, jule::Any __param_expr): _field_op(__param_op), _field_expr(__param_expr) {}

	

	_1b7509a90_UnaryExpr(void) = default;

	inline bool operator==(const _1b7509a90_UnaryExpr &_Src) const {
		return 
			this->_field_op == _Src._field_op &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_UnaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_VariadicExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();


	_1b7509a90_VariadicExpr(_1b7553d92_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1b7509a90_VariadicExpr(void) = default;

	inline bool operator==(const _1b7509a90_VariadicExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_VariadicExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_Assign {
	jule::Ptr<_1a69b8d2e_OperandExprModel> _field_l = jule::Ptr<_1a69b8d2e_OperandExprModel>();
	jule::Ptr<_1a69b8d2e_OperandExprModel> _field_r = jule::Ptr<_1a69b8d2e_OperandExprModel>();
	_1b7553d92_Token _field_op = _1b7553d92_Token();


	_1a6bc3e29_Assign(jule::Ptr<_1a69b8d2e_OperandExprModel> __param_l, jule::Ptr<_1a69b8d2e_OperandExprModel> __param_r, _1b7553d92_Token __param_op): _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1a6bc3e29_Assign(void) = default;

	inline bool operator==(const _1a6bc3e29_Assign &_Src) const {
		return 
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1a6bc3e29_Assign &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_IdentTypeDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>();


	_1b7509a90_IdentTypeDecl(_1b7553d92_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> __param_generics): _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_generics(__param_generics) {}

	

	_1b7509a90_IdentTypeDecl(void) = default;

	inline jule::Bool _method_is_prim(void);


	inline bool operator==(const _1b7509a90_IdentTypeDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_generics == _Src._field_generics;
	}

	inline bool operator!=(const _1b7509a90_IdentTypeDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_NsSelectionExpr {
	jule::Slice<_1b7553d92_Token> _field_ns = jule::Slice<_1b7553d92_Token>();
	_1b7553d92_Token _field_ident = _1b7553d92_Token();


	_1b7509a90_NsSelectionExpr(jule::Slice<_1b7553d92_Token> __param_ns, _1b7553d92_Token __param_ident): _field_ns(__param_ns), _field_ident(__param_ident) {}

	

	_1b7509a90_NsSelectionExpr(void) = default;

	inline bool operator==(const _1b7509a90_NsSelectionExpr &_Src) const {
		return 
			this->_field_ns == _Src._field_ns &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1b7509a90_NsSelectionExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_SubIdentExpr {
	jule::Bool _field_is_self = jule::Bool();
	jule::Any _field_expr = jule::Any();
	_1b7553d92_Token _field_ident = _1b7553d92_Token();


	_1b7509a90_SubIdentExpr(jule::Bool __param_is_self, jule::Any __param_expr, _1b7553d92_Token __param_ident): _field_is_self(__param_is_self), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1b7509a90_SubIdentExpr(void) = default;

	inline bool operator==(const _1b7509a90_SubIdentExpr &_Src) const {
		return 
			this->_field_is_self == _Src._field_is_self &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1b7509a90_SubIdentExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_BinopExpr {
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();
	_1b7553d92_Token _field_op = _1b7553d92_Token();


	_1b7509a90_BinopExpr(jule::Any __param_left, jule::Any __param_right, _1b7553d92_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1b7509a90_BinopExpr(void) = default;

	inline bool operator==(const _1b7509a90_BinopExpr &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1b7509a90_BinopExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7905331_Field {
	jule::Ptr<_1b7905331_Field> self;

	jule::Ptr<_1b7905331_Struct> _field_owner = jule::Ptr<_1b7905331_Struct>();
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1a6a19a50_TypeSymbol> _field_kind = jule::Ptr<_1a6a19a50_TypeSymbol>();
	jule::Ptr<_1b7509a90_Expr> _field_default = jule::Ptr<_1b7509a90_Expr>();


	_1b7905331_Field(jule::Ptr<_1b7905331_Struct> __param_owner, _1b7553d92_Token __param_token, jule::Bool __param_public, jule::Bool __param_mutable, jule::Str __param_ident, jule::Ptr<_1a6a19a50_TypeSymbol> __param_kind, jule::Ptr<_1b7509a90_Expr> __param_default): _field_owner(__param_owner), _field_token(__param_token), _field_public(__param_public), _field_mutable(__param_mutable), _field_ident(__param_ident), _field_kind(__param_kind), _field_default(__param_default) {
		this->self = jule::Ptr<_1b7905331_Field>::make(this, nullptr);

	}

	~_1b7905331_Field(void) { this->self.ref = nullptr; }

	_1b7905331_Field(void) { this->self = jule::Ptr<_1b7905331_Field>::make(this, nullptr); }

	inline jule::Ptr<_1b7905331_FieldIns> _method_instance(void);


	inline bool operator==(const _1b7905331_Field &_Src) const {
		return 
			this->_field_owner == _Src._field_owner &&
			this->_field_token == _Src._field_token &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_default == _Src._field_default;
	}

	inline bool operator!=(const _1b7905331_Field &_Src) const { return !this->operator==(_Src); }
};


struct _1a6bc3e29_ScopeLabel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1a6bc3e29_Label> _field_label = jule::Ptr<_1a6bc3e29_Label>();
	jule::Int _field_pos = jule::Int();
	jule::Ptr<_1a6bc3e29_ScopeChecker> _field_scope = jule::Ptr<_1a6bc3e29_ScopeChecker>();
	jule::Bool _field_used = jule::Bool();


	_1a6bc3e29_ScopeLabel(_1b7553d92_Token __param_token, jule::Ptr<_1a6bc3e29_Label> __param_label, jule::Int __param_pos, jule::Ptr<_1a6bc3e29_ScopeChecker> __param_scope, jule::Bool __param_used): _field_token(__param_token), _field_label(__param_label), _field_pos(__param_pos), _field_scope(__param_scope), _field_used(__param_used) {}

	

	_1a6bc3e29_ScopeLabel(void) = default;

	inline bool operator==(const _1a6bc3e29_ScopeLabel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label &&
			this->_field_pos == _Src._field_pos &&
			this->_field_scope == _Src._field_scope &&
			this->_field_used == _Src._field_used;
	}

	inline bool operator!=(const _1a6bc3e29_ScopeLabel &_Src) const { return !this->operator==(_Src); }
};


struct _1b7905331_Struct {
	jule::Ptr<_1b7905331_Struct> self;

	jule::Ptr<_1a7002752_Sema> _field_sema = jule::Ptr<_1a7002752_Sema>();
	jule::Slice<jule::Ptr<_1b7905331_Struct>> _field_depends = jule::Slice<jule::Ptr<_1b7905331_Struct>>();
	jule::Slice<jule::Ptr<_1b7905331_Struct>> _field_uses = jule::Slice<jule::Ptr<_1b7905331_Struct>>();
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1b7905331_Field>> _field_fields = jule::Slice<jule::Ptr<_1b7905331_Field>>();
	jule::Slice<jule::Ptr<_1a691a500_Fn>> _field_methods = jule::Slice<jule::Ptr<_1a691a500_Fn>>();
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _field_statics = jule::Slice<jule::Ptr<_1a7003e4b_Var>>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>();
	jule::Slice<jule::Ptr<_1b76b472d_Trait>> _field_implements = jule::Slice<jule::Ptr<_1b76b472d_Trait>>();
	jule::Slice<jule::Ptr<_1b7905331_StructIns>> _field_instances = jule::Slice<jule::Ptr<_1b7905331_StructIns>>();


	_1b7905331_Struct(jule::Ptr<_1a7002752_Sema> __param_sema, jule::Slice<jule::Ptr<_1b7905331_Struct>> __param_depends, jule::Slice<jule::Ptr<_1b7905331_Struct>> __param_uses, _1b7553d92_Token __param_token, jule::Str __param_ident, jule::Slice<jule::Ptr<_1b7905331_Field>> __param_fields, jule::Slice<jule::Ptr<_1a691a500_Fn>> __param_methods, jule::Slice<jule::Ptr<_1a7003e4b_Var>> __param_statics, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_directives, jule::Str __param_doc, jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> __param_generics, jule::Slice<jule::Ptr<_1b76b472d_Trait>> __param_implements, jule::Slice<jule::Ptr<_1b7905331_StructIns>> __param_instances): _field_sema(__param_sema), _field_depends(__param_depends), _field_uses(__param_uses), _field_token(__param_token), _field_ident(__param_ident), _field_fields(__param_fields), _field_methods(__param_methods), _field_statics(__param_statics), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_directives(__param_directives), _field_doc(__param_doc), _field_generics(__param_generics), _field_implements(__param_implements), _field_instances(__param_instances) {
		this->self = jule::Ptr<_1b7905331_Struct>::make(this, nullptr);

	}

	~_1b7905331_Struct(void) { this->self.ref = nullptr; }

	_1b7905331_Struct(void) { this->self = jule::Ptr<_1b7905331_Struct>::make(this, nullptr); }

	inline jule::Ptr<_1b7905331_StructIns> _method_instance(void);


	inline jule::Ptr<_1b7905331_StructIns> _method_append_instance(jule::Ptr<_1b7905331_StructIns>&);


	inline jule::Ptr<_1a691a500_Fn> _method_find_method(jule::Str,jule::Bool);


	inline jule::Ptr<_1a7003e4b_Var> _method_find_static(jule::Str);


	inline jule::Ptr<_1b7905331_Field> _method_find_field(jule::Str);


	inline jule::Bool _method_is_implements(jule::Ptr<_1b76b472d_Trait>);


	inline jule::Bool _method_is_derives(jule::Str);


	inline jule::Bool _method_is_uses(jule::Ptr<_1b7905331_Struct>);


	inline jule::Bool _method_has_ref_accessible(void);


	inline bool operator==(const _1b7905331_Struct &_Src) const {
		return 
			this->_field_sema == _Src._field_sema &&
			this->_field_depends == _Src._field_depends &&
			this->_field_uses == _Src._field_uses &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_fields == _Src._field_fields &&
			this->_field_methods == _Src._field_methods &&
			this->_field_statics == _Src._field_statics &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc == _Src._field_doc &&
			this->_field_generics == _Src._field_generics &&
			this->_field_implements == _Src._field_implements &&
			this->_field_instances == _Src._field_instances;
	}

	inline bool operator!=(const _1b7905331_Struct &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_FnCallExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();
	jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _field_generics = jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>();
	jule::Slice<jule::Ptr<_1b7509a90_Expr>> _field_args = jule::Slice<jule::Ptr<_1b7509a90_Expr>>();
	jule::Ptr<_1b7509a90_ScopeTree> _field_exception = jule::Ptr<_1b7509a90_ScopeTree>();


	_1b7509a90_FnCallExpr(_1b7553d92_Token __param_token, jule::Ptr<_1b7509a90_Expr> __param_expr, jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> __param_generics, jule::Slice<jule::Ptr<_1b7509a90_Expr>> __param_args, jule::Ptr<_1b7509a90_ScopeTree> __param_exception): _field_token(__param_token), _field_expr(__param_expr), _field_generics(__param_generics), _field_args(__param_args), _field_exception(__param_exception) {}

	

	_1b7509a90_FnCallExpr(void) = default;

	inline jule::Bool _method_unhandled(void);


	inline jule::Bool _method_ignored(void);


	inline bool operator==(const _1b7509a90_FnCallExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_generics == _Src._field_generics &&
			this->_field_args == _Src._field_args &&
			this->_field_exception == _Src._field_exception;
	}

	inline bool operator!=(const _1b7509a90_FnCallExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_FieldExprPair {
	_1b7553d92_Token _field_field = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();


	_1b7509a90_FieldExprPair(_1b7553d92_Token __param_field, jule::Any __param_expr): _field_field(__param_field), _field_expr(__param_expr) {}

	

	_1b7509a90_FieldExprPair(void) = default;

	inline jule::Bool _method_is_targeted(void);


	inline bool operator==(const _1b7509a90_FieldExprPair &_Src) const {
		return 
			this->_field_field == _Src._field_field &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_FieldExprPair &_Src) const { return !this->operator==(_Src); }
};


struct _1a6e9a574_ImportInfo: public _1a9062c33_Lookup {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_path = jule::Str();
	jule::Str _field_link_path = jule::Str();
	jule::Str _field_ident = jule::Str();
	jule::Str _field_alias = jule::Str();
	jule::Bool _field_duplicate = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_std = jule::Bool();
	jule::Bool _field_import_all = jule::Bool();
	jule::Slice<_1b7553d92_Token> _field_selected = jule::Slice<_1b7553d92_Token>();
	jule::Ptr<_1a6e9a574_Package> _field_package = jule::Ptr<_1a6e9a574_Package>();
	jule::Int _field_mod_id = jule::Int();


	_1a6e9a574_ImportInfo(_1b7553d92_Token __param_token, jule::Str __param_path, jule::Str __param_link_path, jule::Str __param_ident, jule::Str __param_alias, jule::Bool __param_duplicate, jule::Bool __param_cpp_linked, jule::Bool __param_std, jule::Bool __param_import_all, jule::Slice<_1b7553d92_Token> __param_selected, jule::Ptr<_1a6e9a574_Package> __param_package, jule::Int __param_mod_id): _field_token(__param_token), _field_path(__param_path), _field_link_path(__param_link_path), _field_ident(__param_ident), _field_alias(__param_alias), _field_duplicate(__param_duplicate), _field_cpp_linked(__param_cpp_linked), _field_std(__param_std), _field_import_all(__param_import_all), _field_selected(__param_selected), _field_package(__param_package), _field_mod_id(__param_mod_id) {}

	

	_1a6e9a574_ImportInfo(void) = default;

	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_find_package(jule::Str);


	inline jule::Ptr<_1a6e9a574_ImportInfo> _method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>);


	inline jule::Ptr<_1a7003e4b_Var> _method_find_var(jule::Str,jule::Bool);


	inline jule::Ptr<_1a6a19a50_TypeAlias> _method_find_type_alias(jule::Str,jule::Bool);


	inline jule::Ptr<_1b7905331_Struct> _method_find_struct(jule::Str,jule::Bool);


	inline jule::Ptr<_1a691a500_Fn> _method_find_fn(jule::Str,jule::Bool);


	inline jule::Ptr<_1b76b472d_Trait> _method_find_trait(jule::Str);


	inline jule::Ptr<_1a6bb9150_Enum> _method_find_enum(jule::Str);


	inline jule::Bool _method_is_lookupable(jule::Str);


	inline jule::Bool _method_exist_ident(jule::Str);


	inline jule::Bool _method_is_accessible_via_selection(void);


	inline bool operator==(const _1a6e9a574_ImportInfo &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_path == _Src._field_path &&
			this->_field_link_path == _Src._field_link_path &&
			this->_field_ident == _Src._field_ident &&
			this->_field_alias == _Src._field_alias &&
			this->_field_duplicate == _Src._field_duplicate &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_std == _Src._field_std &&
			this->_field_import_all == _Src._field_import_all &&
			this->_field_selected == _Src._field_selected &&
			this->_field_package == _Src._field_package &&
			this->_field_mod_id == _Src._field_mod_id;
	}

	inline bool operator!=(const _1a6e9a574_ImportInfo &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Node {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_data = jule::Any();


	_1b7509a90_Node(_1b7553d92_Token __param_token, jule::Any __param_data): _field_token(__param_token), _field_data(__param_data) {}

	

	_1b7509a90_Node(void) = default;

	inline jule::Bool _method_is_decl(void);


	inline jule::Bool _method_is_comment(void);


	inline jule::Bool _method_is_directive(void);


	inline jule::Bool _method_is_impl(void);


	inline jule::Bool _method_is_use_decl(void);


	inline bool operator==(const _1b7509a90_Node &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_data == _Src._field_data;
	}

	inline bool operator!=(const _1b7509a90_Node &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BinopExprModel {
	jule::Ptr<_1a69b8d2e_OperandExprModel> _field_left = jule::Ptr<_1a69b8d2e_OperandExprModel>();
	jule::Ptr<_1a69b8d2e_OperandExprModel> _field_right = jule::Ptr<_1a69b8d2e_OperandExprModel>();
	_1b7553d92_Token _field_op = _1b7553d92_Token();


	_1a69b8d2e_BinopExprModel(jule::Ptr<_1a69b8d2e_OperandExprModel> __param_left, jule::Ptr<_1a69b8d2e_OperandExprModel> __param_right, _1b7553d92_Token __param_op): _field_left(__param_left), _field_right(__param_right), _field_op(__param_op) {}

	

	_1a69b8d2e_BinopExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BinopExprModel &_Src) const {
		return 
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1a69b8d2e_BinopExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_UnaryExprModel {
	jule::Ptr<_1a8b431d7_Data> _field_expr = jule::Ptr<_1a8b431d7_Data>();
	_1b7553d92_Token _field_op = _1b7553d92_Token();


	_1a69b8d2e_UnaryExprModel(jule::Ptr<_1a8b431d7_Data> __param_expr, _1b7553d92_Token __param_op): _field_expr(__param_expr), _field_op(__param_op) {}

	

	_1a69b8d2e_UnaryExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_UnaryExprModel &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1a69b8d2e_UnaryExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a7003e4b_Var {
	jule::Ptr<_1a6bc3e29_Scope> _field_scope = jule::Ptr<_1a6bc3e29_Scope>();
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_doc = jule::Str();
	jule::Ptr<_1a6a19a50_TypeSymbol> _field_kind = jule::Ptr<_1a6a19a50_TypeSymbol>();
	jule::Ptr<_1a8b431d7_Value> _field_value = jule::Ptr<_1a8b431d7_Value>();
	jule::Ptr<_1b6a47496_ReferenceStack> _field_references = jule::Ptr<_1b6a47496_ReferenceStack>();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Ptr<_1a7003e4b_IterRelation> _field_iter_relation = jule::Ptr<_1a7003e4b_IterRelation>();
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _field_depends = jule::Slice<jule::Ptr<_1a7003e4b_Var>>();


	_1a7003e4b_Var(jule::Ptr<_1a6bc3e29_Scope> __param_scope, _1b7553d92_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_constant, jule::Bool __param_mutable, jule::Bool __param_public, jule::Bool __param_used, jule::Bool __param_statically, jule::Bool __param_reference, jule::Str __param_doc, jule::Ptr<_1a6a19a50_TypeSymbol> __param_kind, jule::Ptr<_1a8b431d7_Value> __param_value, jule::Ptr<_1b6a47496_ReferenceStack> __param_references, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_directives, jule::Ptr<_1a7003e4b_IterRelation> __param_iter_relation, jule::Slice<jule::Ptr<_1a7003e4b_Var>> __param_depends): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_constant(__param_constant), _field_mutable(__param_mutable), _field_public(__param_public), _field_used(__param_used), _field_statically(__param_statically), _field_reference(__param_reference), _field_doc(__param_doc), _field_kind(__param_kind), _field_value(__param_value), _field_references(__param_references), _field_directives(__param_directives), _field_iter_relation(__param_iter_relation), _field_depends(__param_depends) {}

	

	_1a7003e4b_Var(void) = default;

	inline jule::Bool _method_is_initialized(void);


	inline jule::Bool _method_is_type_inferred(void);


	inline bool operator==(const _1a7003e4b_Var &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_constant == _Src._field_constant &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_public == _Src._field_public &&
			this->_field_used == _Src._field_used &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_doc == _Src._field_doc &&
			this->_field_kind == _Src._field_kind &&
			this->_field_value == _Src._field_value &&
			this->_field_references == _Src._field_references &&
			this->_field_directives == _Src._field_directives &&
			this->_field_iter_relation == _Src._field_iter_relation &&
			this->_field_depends == _Src._field_depends;
	}

	inline bool operator!=(const _1a7003e4b_Var &_Src) const { return !this->operator==(_Src); }
};


struct _1a700327a_TypeCompatibilityChecker {
	jule::Ptr<_1a7002752_Sema> _field_s = jule::Ptr<_1a7002752_Sema>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_dest = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_src = jule::Ptr<_1a6a19a50_TypeKind>();
	_1b7553d92_Token _field_error_token = _1b7553d92_Token();


	_1a700327a_TypeCompatibilityChecker(jule::Ptr<_1a7002752_Sema> __param_s, jule::Ptr<_1a6a19a50_TypeKind> __param_dest, jule::Ptr<_1a6a19a50_TypeKind> __param_src, _1b7553d92_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_src(__param_src), _field_error_token(__param_error_token) {}

	

	_1a700327a_TypeCompatibilityChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_trait(void);


	inline jule::Bool _method_check_ptr(void);


	inline jule::Bool _method_check_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1a700327a_TypeCompatibilityChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_src == _Src._field_src &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _1a700327a_TypeCompatibilityChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1a700327a_AssignTypeChecker {
	jule::Ptr<_1a7002752_Sema> _field_s = jule::Ptr<_1a7002752_Sema>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_dest = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a8b431d7_Data> _field_d = jule::Ptr<_1a8b431d7_Data>();
	_1b7553d92_Token _field_error_token = _1b7553d92_Token();


	_1a700327a_AssignTypeChecker(jule::Ptr<_1a7002752_Sema> __param_s, jule::Ptr<_1a6a19a50_TypeKind> __param_dest, jule::Ptr<_1a8b431d7_Data> __param_d, _1b7553d92_Token __param_error_token): _field_s(__param_s), _field_dest(__param_dest), _field_d(__param_d), _field_error_token(__param_error_token) {}

	

	_1a700327a_AssignTypeChecker(void) = default;

	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Bool _method_check_validity(void);


	inline jule::Bool _method_check_const(void);


	inline jule::Bool _method_is_prim(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1a700327a_AssignTypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_dest == _Src._field_dest &&
			this->_field_d == _Src._field_d &&
			this->_field_error_token == _Src._field_error_token;
	}

	inline bool operator!=(const _1a700327a_AssignTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1a700327a_DynamicTypeAnnotation {
	jule::Ptr<_1a8b431d7_Eval> _field_e = jule::Ptr<_1a8b431d7_Eval>();
	jule::Ptr<_1a691a500_FnIns> _field_f = jule::Ptr<_1a691a500_FnIns>();
	jule::Ptr<_1a691a500_ParamIns> _field_p = jule::Ptr<_1a691a500_ParamIns>();
	jule::Ptr<_1a8b431d7_Data> _field_a = jule::Ptr<_1a8b431d7_Data>();
	_1b7553d92_Token _field_error_token = _1b7553d92_Token();
	jule::Ptr<_1a6a19a50_TypeKind>* _field_k = nullptr;


	_1a700327a_DynamicTypeAnnotation(jule::Ptr<_1a8b431d7_Eval> __param_e, jule::Ptr<_1a691a500_FnIns> __param_f, jule::Ptr<_1a691a500_ParamIns> __param_p, jule::Ptr<_1a8b431d7_Data> __param_a, _1b7553d92_Token __param_error_token, jule::Ptr<_1a6a19a50_TypeKind>* __param_k): _field_e(__param_e), _field_f(__param_f), _field_p(__param_p), _field_a(__param_a), _field_error_token(__param_error_token), _field_k(__param_k) {}

	

	_1a700327a_DynamicTypeAnnotation(void) = default;

	inline void _method_push_generic(jule::Ptr<_1a6a19a50_TypeKind>&,jule::Int);


	inline jule::Bool _method_annotate_prim(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate_slc(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_check_map_key(jule::Ptr<_1a6a19a50_TypeKind>*,jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate_map(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate_fn(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate_ptr(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate_sptr(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate_any(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate_kind(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Bool _method_annotate(void);


	inline bool operator==(const _1a700327a_DynamicTypeAnnotation &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_f == _Src._field_f &&
			this->_field_p == _Src._field_p &&
			this->_field_a == _Src._field_a &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_k == _Src._field_k;
	}

	inline bool operator!=(const _1a700327a_DynamicTypeAnnotation &_Src) const { return !this->operator==(_Src); }
};


struct _1a700327a_FnCallArgChecker {
	jule::Ptr<_1a8b431d7_Eval> _field_e = jule::Ptr<_1a8b431d7_Eval>();
	jule::Slice<jule::Ptr<_1b7509a90_Expr>> _field_args = jule::Slice<jule::Ptr<_1b7509a90_Expr>>();
	_1b7553d92_Token _field_error_token = _1b7553d92_Token();
	jule::Ptr<_1a691a500_FnIns> _field_f = jule::Ptr<_1a691a500_FnIns>();
	jule::Bool _field_dynamic_annotation = jule::Bool();
	jule::Slice<jule::Any> _field_arg_models = jule::Slice<jule::Any>();


	_1a700327a_FnCallArgChecker(jule::Ptr<_1a8b431d7_Eval> __param_e, jule::Slice<jule::Ptr<_1b7509a90_Expr>> __param_args, _1b7553d92_Token __param_error_token, jule::Ptr<_1a691a500_FnIns> __param_f, jule::Bool __param_dynamic_annotation, jule::Slice<jule::Any> __param_arg_models): _field_e(__param_e), _field_args(__param_args), _field_error_token(__param_error_token), _field_f(__param_f), _field_dynamic_annotation(__param_dynamic_annotation), _field_arg_models(__param_arg_models) {}

	

	_1a700327a_FnCallArgChecker(void) = default;

	inline void _method_push_err_token(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_err(jule::Str,jule::Slice<jule::Any>);


	inline jule::Slice<jule::Ptr<_1a691a500_ParamIns>> _method_get_params(void);


	inline jule::Bool _method_check_counts(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>&);


	inline jule::Bool _method_check_arg(jule::Ptr<_1a691a500_ParamIns>&,jule::Ptr<_1a8b431d7_Data>&,_1b7553d92_Token&);


	inline jule::Bool _method_push(jule::Ptr<_1a691a500_ParamIns>&,jule::Ptr<_1b7509a90_Expr>);


	inline jule::Bool _method_push_variadic(jule::Ptr<_1a691a500_ParamIns>&,jule::Int);


	inline jule::Bool _method_check_args(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>&);


	inline jule::Bool _method_check_dynamic_type_annotation(void);


	inline jule::Bool _method_check(void);


	inline bool operator==(const _1a700327a_FnCallArgChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_args == _Src._field_args &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_f == _Src._field_f &&
			this->_field_dynamic_annotation == _Src._field_dynamic_annotation &&
			this->_field_arg_models == _Src._field_arg_models;
	}

	inline bool operator!=(const _1a700327a_FnCallArgChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1a700327a_StructLitChecker {
	jule::Ptr<_1a8b431d7_Eval> _field_e = jule::Ptr<_1a8b431d7_Eval>();
	_1b7553d92_Token _field_error_token = _1b7553d92_Token();
	jule::Ptr<_1b7905331_StructIns> _field_s = jule::Ptr<_1b7905331_StructIns>();
	jule::Slice<jule::Ptr<_1a69b8d2e_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1a69b8d2e_StructArgExprModel>>();


	_1a700327a_StructLitChecker(jule::Ptr<_1a8b431d7_Eval> __param_e, _1b7553d92_Token __param_error_token, jule::Ptr<_1b7905331_StructIns> __param_s, jule::Slice<jule::Ptr<_1a69b8d2e_StructArgExprModel>> __param_args): _field_e(__param_e), _field_error_token(__param_error_token), _field_s(__param_s), _field_args(__param_args) {}

	

	_1a700327a_StructLitChecker(void) = default;

	inline void _method_push_err(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_suggestion(jule::Str,jule::Slice<jule::Any>);


	inline void _method_push_match(jule::Ptr<_1b7905331_FieldIns>&,jule::Ptr<_1a8b431d7_Data>&,_1b7553d92_Token&);


	inline void _method_check_pair(jule::Ptr<_1b7509a90_FieldExprPair>&,jule::Slice<jule::Any>&);


	inline jule::Bool _method_ready_exprs(jule::Slice<jule::Any>&);


	inline void _method_check(jule::Slice<jule::Any>&);


	inline bool operator==(const _1a700327a_StructLitChecker &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_s == _Src._field_s &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1a700327a_StructLitChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_BraceLit {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Slice<jule::Any> _field_exprs = jule::Slice<jule::Any>();


	_1b7509a90_BraceLit(_1b7553d92_Token __param_token, jule::Slice<jule::Any> __param_exprs): _field_token(__param_token), _field_exprs(__param_exprs) {}

	

	_1b7509a90_BraceLit(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _1b7509a90_BraceLit &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_exprs == _Src._field_exprs;
	}

	inline bool operator!=(const _1b7509a90_BraceLit &_Src) const { return !this->operator==(_Src); }
};


struct _1a700327a_RetTypeChecker {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _field_sc = jule::Ptr<_1a6bc3e29_ScopeChecker>();
	jule::Ptr<_1a691a500_FnIns> _field_f = jule::Ptr<_1a691a500_FnIns>();
	jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _field_types = jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>();
	jule::Slice<jule::Ptr<_1b7509a90_Expr>> _field_exprs = jule::Slice<jule::Ptr<_1b7509a90_Expr>>();
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _field_vars = jule::Slice<jule::Ptr<_1a7003e4b_Var>>();
	_1b7553d92_Token _field_error_token = _1b7553d92_Token();
	jule::Any _field_model = jule::Any();


	_1a700327a_RetTypeChecker(jule::Ptr<_1a6bc3e29_ScopeChecker> __param_sc, jule::Ptr<_1a691a500_FnIns> __param_f, jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> __param_types, jule::Slice<jule::Ptr<_1b7509a90_Expr>> __param_exprs, jule::Slice<jule::Ptr<_1a7003e4b_Var>> __param_vars, _1b7553d92_Token __param_error_token, jule::Any __param_model): _field_sc(__param_sc), _field_f(__param_f), _field_types(__param_types), _field_exprs(__param_exprs), _field_vars(__param_vars), _field_error_token(__param_error_token), _field_model(__param_model) {}

	

	_1a700327a_RetTypeChecker(void) = default;

	inline void _method_prepare_types(void);


	inline void _method_prepare_exprs(jule::Ptr<_1b7509a90_Expr>&);


	inline void _method_ret_vars(void);


	inline void _method_check_exprs(void);


	inline jule::Bool _method_check(jule::Ptr<_1b7509a90_Expr>&);


	inline bool operator==(const _1a700327a_RetTypeChecker &_Src) const {
		return 
			this->_field_sc == _Src._field_sc &&
			this->_field_f == _Src._field_f &&
			this->_field_types == _Src._field_types &&
			this->_field_exprs == _Src._field_exprs &&
			this->_field_vars == _Src._field_vars &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_model == _Src._field_model;
	}

	inline bool operator!=(const _1a700327a_RetTypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_StructLitExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7905331_StructIns> _field_strct = jule::Ptr<_1b7905331_StructIns>();
	jule::Slice<jule::Ptr<_1a69b8d2e_StructArgExprModel>> _field_args = jule::Slice<jule::Ptr<_1a69b8d2e_StructArgExprModel>>();


	_1a69b8d2e_StructLitExprModel(_1b7553d92_Token __param_token, jule::Ptr<_1b7905331_StructIns> __param_strct, jule::Slice<jule::Ptr<_1a69b8d2e_StructArgExprModel>> __param_args): _field_token(__param_token), _field_strct(__param_strct), _field_args(__param_args) {}

	

	_1a69b8d2e_StructLitExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_StructLitExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_strct == _Src._field_strct &&
			this->_field_args == _Src._field_args;
	}

	inline bool operator!=(const _1a69b8d2e_StructLitExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_KeyValPair {
	jule::Any _field_key = jule::Any();
	jule::Any _field_val = jule::Any();
	_1b7553d92_Token _field_colon = _1b7553d92_Token();


	_1b7509a90_KeyValPair(jule::Any __param_key, jule::Any __param_val, _1b7553d92_Token __param_colon): _field_key(__param_key), _field_val(__param_val), _field_colon(__param_colon) {}

	

	_1b7509a90_KeyValPair(void) = default;

	inline bool operator==(const _1b7509a90_KeyValPair &_Src) const {
		return 
			this->_field_key == _Src._field_key &&
			this->_field_val == _Src._field_val &&
			this->_field_colon == _Src._field_colon;
	}

	inline bool operator!=(const _1b7509a90_KeyValPair &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_CastingExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();
	jule::Ptr<_1a6a19a50_TypeKind> _field_kind = jule::Ptr<_1a6a19a50_TypeKind>();
	jule::Ptr<_1a6a19a50_TypeKind> _field_expr_kind = jule::Ptr<_1a6a19a50_TypeKind>();


	_1a69b8d2e_CastingExprModel(_1b7553d92_Token __param_token, jule::Any __param_expr, jule::Ptr<_1a6a19a50_TypeKind> __param_kind, jule::Ptr<_1a6a19a50_TypeKind> __param_expr_kind): _field_token(__param_token), _field_expr(__param_expr), _field_kind(__param_kind), _field_expr_kind(__param_expr_kind) {}

	

	_1a69b8d2e_CastingExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_CastingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr_kind == _Src._field_expr_kind;
	}

	inline bool operator!=(const _1a69b8d2e_CastingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_FnCallExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1a691a500_FnIns> _field_func = jule::Ptr<_1a691a500_FnIns>();
	jule::Bool _field_is_co = jule::Bool();
	jule::Any _field_expr = jule::Any();
	jule::Slice<jule::Any> _field_args = jule::Slice<jule::Any>();
	jule::Ptr<_1a6bc3e29_Scope> _field_except = jule::Ptr<_1a6bc3e29_Scope>();
	jule::Bool _field_assigned = jule::Bool();


	_1a69b8d2e_FnCallExprModel(_1b7553d92_Token __param_token, jule::Ptr<_1a691a500_FnIns> __param_func, jule::Bool __param_is_co, jule::Any __param_expr, jule::Slice<jule::Any> __param_args, jule::Ptr<_1a6bc3e29_Scope> __param_except, jule::Bool __param_assigned): _field_token(__param_token), _field_func(__param_func), _field_is_co(__param_is_co), _field_expr(__param_expr), _field_args(__param_args), _field_except(__param_except), _field_assigned(__param_assigned) {}

	

	_1a69b8d2e_FnCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_FnCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_func == _Src._field_func &&
			this->_field_is_co == _Src._field_is_co &&
			this->_field_expr == _Src._field_expr &&
			this->_field_args == _Src._field_args &&
			this->_field_except == _Src._field_except &&
			this->_field_assigned == _Src._field_assigned;
	}

	inline bool operator!=(const _1a69b8d2e_FnCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_SliceExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Slice<jule::Any> _field_elems = jule::Slice<jule::Any>();


	_1b7509a90_SliceExpr(_1b7553d92_Token __param_token, jule::Slice<jule::Any> __param_elems): _field_token(__param_token), _field_elems(__param_elems) {}

	

	_1b7509a90_SliceExpr(void) = default;

	inline jule::Bool _method_is_empty(void);


	inline bool operator==(const _1b7509a90_SliceExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_elems == _Src._field_elems;
	}

	inline bool operator!=(const _1b7509a90_SliceExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1a8b431d7_BinaryEval {
	jule::Ptr<_1a8b431d7_Eval> _field_e = jule::Ptr<_1a8b431d7_Eval>();
	jule::Ptr<_1a8b431d7_Data> _field_l = jule::Ptr<_1a8b431d7_Data>();
	jule::Ptr<_1a8b431d7_Data> _field_r = jule::Ptr<_1a8b431d7_Data>();
	_1b7553d92_Token _field_op = _1b7553d92_Token();


	_1a8b431d7_BinaryEval(jule::Ptr<_1a8b431d7_Eval> __param_e, jule::Ptr<_1a8b431d7_Data> __param_l, jule::Ptr<_1a8b431d7_Data> __param_r, _1b7553d92_Token __param_op): _field_e(__param_e), _field_l(__param_l), _field_r(__param_r), _field_op(__param_op) {}

	

	_1a8b431d7_BinaryEval(void) = default;

	static inline _1a8b431d7_BinaryEval _static_method_new_plain(jule::Ptr<_1a8b431d7_Eval>);


	static inline _1a8b431d7_BinaryEval _static_method_new(jule::Ptr<_1a8b431d7_Eval>,_1b7553d92_Token);


	inline jule::Bool _method_check_type_compatibility(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_nil(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_enum(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_sptr(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_ptr(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_arr(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_slc(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_fn(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_struct(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_trait(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_any(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_bool(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_str(void);


	inline void _method_set_type_to_greater(void);


	inline void _method_check_mod_data(jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_mod(void);


	inline jule::Bool _method_numbers_are_compatibile(jule::Str&,jule::Str&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_float(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_int(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_prim(void);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval_op(void);


	inline void _method_eval_const(jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_post_const(jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_check_data(jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_check_datas(void);


	inline void _method_set_model(jule::Ptr<_1a8b431d7_Data>&);


	inline void _method_post_eval(jule::Ptr<_1a8b431d7_Data>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_solve_explicit(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>&);


	inline jule::Ptr<_1a8b431d7_Data> _method_eval(jule::Ptr<_1b7509a90_BinopExpr>&);


	inline bool operator==(const _1a8b431d7_BinaryEval &_Src) const {
		return 
			this->_field_e == _Src._field_e &&
			this->_field_l == _Src._field_l &&
			this->_field_r == _Src._field_r &&
			this->_field_op == _Src._field_op;
	}

	inline bool operator!=(const _1a8b431d7_BinaryEval &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_TypeAlias {
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_used = jule::Bool();
	jule::Bool _field_generic = jule::Bool();
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1a6a19a50_TypeSymbol> _field_kind = jule::Ptr<_1a6a19a50_TypeSymbol>();
	jule::Str _field_doc = jule::Str();
	jule::Slice<jule::Any> _field_refers = jule::Slice<jule::Any>();


	_1a6a19a50_TypeAlias(jule::Ptr<_1b7509a90_ScopeTree> __param_scope, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_used, jule::Bool __param_generic, _1b7553d92_Token __param_token, jule::Str __param_ident, jule::Ptr<_1a6a19a50_TypeSymbol> __param_kind, jule::Str __param_doc, jule::Slice<jule::Any> __param_refers): _field_scope(__param_scope), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_used(__param_used), _field_generic(__param_generic), _field_token(__param_token), _field_ident(__param_ident), _field_kind(__param_kind), _field_doc(__param_doc), _field_refers(__param_refers) {}

	

	_1a6a19a50_TypeAlias(void) = default;

	inline bool operator==(const _1a6a19a50_TypeAlias &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_used == _Src._field_used &&
			this->_field_generic == _Src._field_generic &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_kind == _Src._field_kind &&
			this->_field_doc == _Src._field_doc &&
			this->_field_refers == _Src._field_refers;
	}

	inline bool operator!=(const _1a6a19a50_TypeAlias &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_IndexingExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1a8b431d7_Data> _field_expr = jule::Ptr<_1a8b431d7_Data>();
	jule::Ptr<_1a8b431d7_Data> _field_index = jule::Ptr<_1a8b431d7_Data>();


	_1a69b8d2e_IndexingExprModel(_1b7553d92_Token __param_token, jule::Ptr<_1a8b431d7_Data> __param_expr, jule::Ptr<_1a8b431d7_Data> __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1a69b8d2e_IndexingExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_IndexingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _1a69b8d2e_IndexingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_IndexingExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_index = jule::Any();


	_1b7509a90_IndexingExpr(_1b7553d92_Token __param_token, jule::Any __param_expr, jule::Any __param_index): _field_token(__param_token), _field_expr(__param_expr), _field_index(__param_index) {}

	

	_1b7509a90_IndexingExpr(void) = default;

	inline bool operator==(const _1b7509a90_IndexingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_index == _Src._field_index;
	}

	inline bool operator!=(const _1b7509a90_IndexingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_SlicingExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_start = jule::Any();
	jule::Any _field_to = jule::Any();


	_1b7509a90_SlicingExpr(_1b7553d92_Token __param_token, jule::Any __param_expr, jule::Any __param_start, jule::Any __param_to): _field_token(__param_token), _field_expr(__param_expr), _field_start(__param_start), _field_to(__param_to) {}

	

	_1b7509a90_SlicingExpr(void) = default;

	inline bool operator==(const _1b7509a90_SlicingExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_start == _Src._field_start &&
			this->_field_to == _Src._field_to;
	}

	inline bool operator!=(const _1b7509a90_SlicingExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_TernaryExpr {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_condition = jule::Any();
	jule::Any _field_true_expr = jule::Any();
	jule::Any _field_false_expr = jule::Any();


	_1b7509a90_TernaryExpr(_1b7553d92_Token __param_token, jule::Any __param_condition, jule::Any __param_true_expr, jule::Any __param_false_expr): _field_token(__param_token), _field_condition(__param_condition), _field_true_expr(__param_true_expr), _field_false_expr(__param_false_expr) {}

	

	_1b7509a90_TernaryExpr(void) = default;

	inline bool operator==(const _1b7509a90_TernaryExpr &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_condition == _Src._field_condition &&
			this->_field_true_expr == _Src._field_true_expr &&
			this->_field_false_expr == _Src._field_false_expr;
	}

	inline bool operator!=(const _1b7509a90_TernaryExpr &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_SlicingExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();
	jule::Any _field_left = jule::Any();
	jule::Any _field_right = jule::Any();


	_1a69b8d2e_SlicingExprModel(_1b7553d92_Token __param_token, jule::Any __param_expr, jule::Any __param_left, jule::Any __param_right): _field_token(__param_token), _field_expr(__param_expr), _field_left(__param_left), _field_right(__param_right) {}

	

	_1a69b8d2e_SlicingExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_SlicingExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _1a69b8d2e_SlicingExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_TraitSubIdentExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_ident = jule::Str();


	_1a69b8d2e_TraitSubIdentExprModel(_1b7553d92_Token __param_token, jule::Any __param_expr, jule::Str __param_ident): _field_token(__param_token), _field_expr(__param_expr), _field_ident(__param_ident) {}

	

	_1a69b8d2e_TraitSubIdentExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_TraitSubIdentExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1a69b8d2e_TraitSubIdentExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_GenericDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();


	_1b7509a90_GenericDecl(_1b7553d92_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_1b7509a90_GenericDecl(void) = default;

	inline bool operator==(const _1b7509a90_GenericDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1b7509a90_GenericDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_LabelSt {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();


	_1b7509a90_LabelSt(_1b7553d92_Token __param_token, jule::Str __param_ident): _field_token(__param_token), _field_ident(__param_ident) {}

	

	_1b7509a90_LabelSt(void) = default;

	inline bool operator==(const _1b7509a90_LabelSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1b7509a90_LabelSt &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_GotoSt {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	_1b7553d92_Token _field_label = _1b7553d92_Token();


	_1b7509a90_GotoSt(_1b7553d92_Token __param_token, _1b7553d92_Token __param_label): _field_token(__param_token), _field_label(__param_label) {}

	

	_1b7509a90_GotoSt(void) = default;

	inline bool operator==(const _1b7509a90_GotoSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_label == _Src._field_label;
	}

	inline bool operator!=(const _1b7509a90_GotoSt &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_FallSt {
	_1b7553d92_Token _field_token = _1b7553d92_Token();


	_1b7509a90_FallSt(_1b7553d92_Token __param_token): _field_token(__param_token) {}

	

	_1b7509a90_FallSt(void) = default;

	inline bool operator==(const _1b7509a90_FallSt &_Src) const {
		return 
			this->_field_token == _Src._field_token;
	}

	inline bool operator!=(const _1b7509a90_FallSt &_Src) const { return !this->operator==(_Src); }
};


struct _1a6a19a50_TypeChecker {
	jule::Ptr<_1a7002752_Sema> _field_s = jule::Ptr<_1a7002752_Sema>();
	jule::Trait<_1a9062c33_Lookup> _field_lookup = jule::Trait<_1a9062c33_Lookup>();
	jule::Ptr<_1a6a19a50_Referencer> _field_referencer = jule::Ptr<_1a6a19a50_Referencer>();
	_1b7553d92_Token _field_error_token = _1b7553d92_Token();
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _field_ignore_generics = jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>();
	jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _field_use_generics = jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>();
	jule::Bool _field_not_plain = jule::Bool();
	jule::Bool _field_dis_builtin = jule::Bool();
	jule::Bool _field_selection = jule::Bool();


	_1a6a19a50_TypeChecker(jule::Ptr<_1a7002752_Sema> __param_s, jule::Trait<_1a9062c33_Lookup> __param_lookup, jule::Ptr<_1a6a19a50_Referencer> __param_referencer, _1b7553d92_Token __param_error_token, jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> __param_ignore_generics, jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> __param_use_generics, jule::Bool __param_not_plain, jule::Bool __param_dis_builtin, jule::Bool __param_selection): _field_s(__param_s), _field_lookup(__param_lookup), _field_referencer(__param_referencer), _field_error_token(__param_error_token), _field_ignore_generics(__param_ignore_generics), _field_use_generics(__param_use_generics), _field_not_plain(__param_not_plain), _field_dis_builtin(__param_dis_builtin), _field_selection(__param_selection) {}

	

	_1a6a19a50_TypeChecker(void) = default;

	inline void _method_push_err(_1b7553d92_Token,jule::Str,jule::Slice<jule::Any>);


	inline void _method_allow_builtin(void);


	inline void _method_disallow_builtin(void);


	inline jule::Ptr<_1a6a19a50_Prim> _method_build_prim(jule::Ptr<_1b7509a90_IdentTypeDecl>&);


	inline void _method_push_cycle_error(jule::Any,jule::Any,jule::Str&);


	inline jule::Bool _method_check_cross_cycle(jule::Any,jule::Str&);


	inline jule::Bool _method_check_illegal_cycles(jule::Ptr<_1b7509a90_IdentTypeDecl>&,jule::Any);


	inline jule::Trait<_1a6a19a50_Kind> _method_from_type_alias(jule::Ptr<_1b7509a90_IdentTypeDecl>&,jule::Ptr<_1a6a19a50_TypeAlias>&);


	inline jule::Ptr<_1a6bb9150_Enum> _method_from_enum(jule::Ptr<_1b7509a90_IdentTypeDecl>&,jule::Ptr<_1a6bb9150_Enum>&);


	inline jule::Bool _method_check_struct_ins(jule::Ptr<_1b7905331_StructIns>&,_1b7553d92_Token&);


	inline void _method_append_used_struct_reference(jule::Ptr<_1b7905331_Struct>&);


	inline jule::Ptr<_1b7905331_StructIns> _method_from_struct(jule::Ptr<_1b7509a90_IdentTypeDecl>&,jule::Ptr<_1b7905331_Struct>&);


	inline jule::Trait<_1a6a19a50_Kind> _method_get_def(jule::Ptr<_1b7509a90_IdentTypeDecl>&);


	inline jule::Trait<_1a6a19a50_Kind> _method_build_ident(jule::Ptr<_1b7509a90_IdentTypeDecl>);


	inline jule::Ptr<_1a6a19a50_Sptr> _method_build_sptr_from_type(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Ptr<_1a6a19a50_Sptr> _method_build_sptr(jule::Ptr<_1b7509a90_SptrTypeDecl>);


	inline jule::Ptr<_1a6a19a50_Ptr> _method_build_ptr_from_type(jule::Ptr<_1a6a19a50_TypeKind>&);


	inline jule::Ptr<_1a6a19a50_Ptr> _method_build_ptr(jule::Ptr<_1b7509a90_PtrTypeDecl>);


	inline jule::Ptr<_1a6a19a50_Slc> _method_build_slc(jule::Ptr<_1b7509a90_SlcTypeDecl>);


	inline jule::Ptr<_1a6a19a50_Arr> _method_build_arr(jule::Ptr<_1b7509a90_ArrTypeDecl>);


	inline jule::Ptr<_1a6a19a50_Map> _method_build_map(jule::Ptr<_1b7509a90_MapTypeDecl>);


	inline jule::Ptr<_1a6a19a50_Tuple> _method_build_tuple(jule::Ptr<_1b7509a90_TupleTypeDecl>);


	inline jule::Bool _method_check_fn_types(jule::Ptr<_1a691a500_FnIns>&);


	inline jule::Ptr<_1a691a500_FnIns> _method_build_fn(jule::Ptr<_1b7509a90_FnDecl>);


	inline jule::Trait<_1a6a19a50_Kind> _method_build_by_namespace(jule::Ptr<_1b7509a90_NamespaceTypeDecl>);


	inline jule::Ptr<_1a6a19a50_TypeKind> _method_build(jule::Any&);


	inline jule::Ptr<_1a6a19a50_TypeKind> _method_check_decl(jule::Ptr<_1b7509a90_TypeDecl>&);


	inline void _method_check(jule::Ptr<_1a6a19a50_TypeSymbol>&);


	inline bool operator==(const _1a6a19a50_TypeChecker &_Src) const {
		return 
			this->_field_s == _Src._field_s &&
			this->_field_lookup == _Src._field_lookup &&
			this->_field_referencer == _Src._field_referencer &&
			this->_field_error_token == _Src._field_error_token &&
			this->_field_ignore_generics == _Src._field_ignore_generics &&
			this->_field_use_generics == _Src._field_use_generics &&
			this->_field_not_plain == _Src._field_not_plain &&
			this->_field_dis_builtin == _Src._field_dis_builtin &&
			this->_field_selection == _Src._field_selection;
	}

	inline bool operator!=(const _1a6a19a50_TypeChecker &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_AssignLeft {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_AssignLeft(_1b7553d92_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_reference, jule::Str __param_ident, jule::Ptr<_1b7509a90_Expr> __param_expr): _field_token(__param_token), _field_mutable(__param_mutable), _field_reference(__param_reference), _field_ident(__param_ident), _field_expr(__param_expr) {}

	

	_1b7509a90_AssignLeft(void) = default;

	inline bool operator==(const _1b7509a90_AssignLeft &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_reference == _Src._field_reference &&
			this->_field_ident == _Src._field_ident &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_AssignLeft &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_AssignSt {
	jule::Bool _field_declarative = jule::Bool();
	_1b7553d92_Token _field_setter = _1b7553d92_Token();
	jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>> _field_left = jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>>();
	jule::Ptr<_1b7509a90_Expr> _field_right = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_AssignSt(jule::Bool __param_declarative, _1b7553d92_Token __param_setter, jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>> __param_left, jule::Ptr<_1b7509a90_Expr> __param_right): _field_declarative(__param_declarative), _field_setter(__param_setter), _field_left(__param_left), _field_right(__param_right) {}

	

	_1b7509a90_AssignSt(void) = default;

	inline bool operator==(const _1b7509a90_AssignSt &_Src) const {
		return 
			this->_field_declarative == _Src._field_declarative &&
			this->_field_setter == _Src._field_setter &&
			this->_field_left == _Src._field_left &&
			this->_field_right == _Src._field_right;
	}

	inline bool operator!=(const _1b7509a90_AssignSt &_Src) const { return !this->operator==(_Src); }
};


struct _1b719bcc6_IR {
	jule::Slice<jule::Str> _field_passes = jule::Slice<jule::Str>();
	jule::Ptr<_1a6e9a574_Package> _field_main = jule::Ptr<_1a6e9a574_Package>();
	jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>> _field_used = jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>>();
	_1b719c3c0_OrderedDefines _field_ordered = _1b719c3c0_OrderedDefines();


	_1b719bcc6_IR(jule::Slice<jule::Str> __param_passes, jule::Ptr<_1a6e9a574_Package> __param_main, jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>> __param_used, _1b719c3c0_OrderedDefines __param_ordered): _field_passes(__param_passes), _field_main(__param_main), _field_used(__param_used), _field_ordered(__param_ordered) {}

	

	_1b719bcc6_IR(void) = default;

	static inline std::tuple<jule::Ptr<_1b719bcc6_IR>,jule::Slice<_1b6986b22_Log>> _static_method_build(jule::Str,jule::Int);


	inline void _method_append_structs(jule::Ptr<_1a6e9a574_Package>&,jule::Slice<jule::Ptr<_1b7905331_Struct>>&);


	inline jule::Slice<jule::Ptr<_1b7905331_Struct>> _method_get_all_structures(void);


	inline void _method_order(void);


	inline bool operator==(const _1b719bcc6_IR &_Src) const {
		return 
			this->_field_passes == _Src._field_passes &&
			this->_field_main == _Src._field_main &&
			this->_field_used == _Src._field_used &&
			this->_field_ordered == _Src._field_ordered;
	}

	inline bool operator!=(const _1b719bcc6_IR &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Comment {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_text = jule::Str();


	_1b7509a90_Comment(_1b7553d92_Token __param_token, jule::Str __param_text): _field_token(__param_token), _field_text(__param_text) {}

	

	_1b7509a90_Comment(void) = default;

	inline bool operator==(const _1b7509a90_Comment &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_text == _Src._field_text;
	}

	inline bool operator!=(const _1b7509a90_Comment &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_ParamDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_variadic = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Str _field_ident = jule::Str();


	_1b7509a90_ParamDecl(_1b7553d92_Token __param_token, jule::Bool __param_mutable, jule::Bool __param_variadic, jule::Bool __param_reference, jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Str __param_ident): _field_token(__param_token), _field_mutable(__param_mutable), _field_variadic(__param_variadic), _field_reference(__param_reference), _field_kind(__param_kind), _field_ident(__param_ident) {}

	

	_1b7509a90_ParamDecl(void) = default;

	inline jule::Bool _method_is_self(void);


	inline jule::Bool _method_is_ref(void);


	inline bool operator==(const _1b7509a90_ParamDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_variadic == _Src._field_variadic &&
			this->_field_reference == _Src._field_reference &&
			this->_field_kind == _Src._field_kind &&
			this->_field_ident == _Src._field_ident;
	}

	inline bool operator!=(const _1b7509a90_ParamDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_FnDecl {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Bool _field_global = jule::Bool();
	jule::Bool _field_unsafety = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_exceptional = jule::Bool();
	jule::Str _field_ident = jule::Str();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Ptr<_1b7509a90_CommentGroup> _field_doc_comments = jule::Ptr<_1b7509a90_CommentGroup>();
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _field_generics = jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>();
	jule::Ptr<_1b7509a90_RetTypeDecl> _field_result = jule::Ptr<_1b7509a90_RetTypeDecl>();
	jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>> _field_params = jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>>();


	_1b7509a90_FnDecl(_1b7553d92_Token __param_token, jule::Bool __param_global, jule::Bool __param_unsafety, jule::Bool __param_public, jule::Bool __param_cpp_linked, jule::Bool __param_statically, jule::Bool __param_exceptional, jule::Str __param_ident, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_directives, jule::Ptr<_1b7509a90_CommentGroup> __param_doc_comments, jule::Ptr<_1b7509a90_ScopeTree> __param_scope, jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> __param_generics, jule::Ptr<_1b7509a90_RetTypeDecl> __param_result, jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>> __param_params): _field_token(__param_token), _field_global(__param_global), _field_unsafety(__param_unsafety), _field_public(__param_public), _field_cpp_linked(__param_cpp_linked), _field_statically(__param_statically), _field_exceptional(__param_exceptional), _field_ident(__param_ident), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_scope(__param_scope), _field_generics(__param_generics), _field_result(__param_result), _field_params(__param_params) {}

	

	_1b7509a90_FnDecl(void) = default;

	inline jule::Bool _method_is_anon(void);


	inline bool operator==(const _1b7509a90_FnDecl &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_global == _Src._field_global &&
			this->_field_unsafety == _Src._field_unsafety &&
			this->_field_public == _Src._field_public &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_statically == _Src._field_statically &&
			this->_field_exceptional == _Src._field_exceptional &&
			this->_field_ident == _Src._field_ident &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_scope == _Src._field_scope &&
			this->_field_generics == _Src._field_generics &&
			this->_field_result == _Src._field_result &&
			this->_field_params == _Src._field_params;
	}

	inline bool operator!=(const _1b7509a90_FnDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_VarDecl {
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Str _field_ident = jule::Str();
	jule::Bool _field_cpp_linked = jule::Bool();
	jule::Bool _field_public = jule::Bool();
	jule::Bool _field_mutable = jule::Bool();
	jule::Bool _field_constant = jule::Bool();
	jule::Bool _field_statically = jule::Bool();
	jule::Bool _field_reference = jule::Bool();
	jule::Slice<jule::Ptr<_1b7509a90_Directive>> _field_directives = jule::Slice<jule::Ptr<_1b7509a90_Directive>>();
	jule::Ptr<_1b7509a90_CommentGroup> _field_doc_comments = jule::Ptr<_1b7509a90_CommentGroup>();
	jule::Ptr<_1b7509a90_TypeDecl> _field_kind = jule::Ptr<_1b7509a90_TypeDecl>();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_VarDecl(jule::Ptr<_1b7509a90_ScopeTree> __param_scope, _1b7553d92_Token __param_token, jule::Str __param_ident, jule::Bool __param_cpp_linked, jule::Bool __param_public, jule::Bool __param_mutable, jule::Bool __param_constant, jule::Bool __param_statically, jule::Bool __param_reference, jule::Slice<jule::Ptr<_1b7509a90_Directive>> __param_directives, jule::Ptr<_1b7509a90_CommentGroup> __param_doc_comments, jule::Ptr<_1b7509a90_TypeDecl> __param_kind, jule::Ptr<_1b7509a90_Expr> __param_expr): _field_scope(__param_scope), _field_token(__param_token), _field_ident(__param_ident), _field_cpp_linked(__param_cpp_linked), _field_public(__param_public), _field_mutable(__param_mutable), _field_constant(__param_constant), _field_statically(__param_statically), _field_reference(__param_reference), _field_directives(__param_directives), _field_doc_comments(__param_doc_comments), _field_kind(__param_kind), _field_expr(__param_expr) {}

	

	_1b7509a90_VarDecl(void) = default;

	inline bool operator==(const _1b7509a90_VarDecl &_Src) const {
		return 
			this->_field_scope == _Src._field_scope &&
			this->_field_token == _Src._field_token &&
			this->_field_ident == _Src._field_ident &&
			this->_field_cpp_linked == _Src._field_cpp_linked &&
			this->_field_public == _Src._field_public &&
			this->_field_mutable == _Src._field_mutable &&
			this->_field_constant == _Src._field_constant &&
			this->_field_statically == _Src._field_statically &&
			this->_field_reference == _Src._field_reference &&
			this->_field_directives == _Src._field_directives &&
			this->_field_doc_comments == _Src._field_doc_comments &&
			this->_field_kind == _Src._field_kind &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_VarDecl &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinPanicCallExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();


	_1a69b8d2e_BuiltinPanicCallExprModel(_1b7553d92_Token __param_token, jule::Any __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1a69b8d2e_BuiltinPanicCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinPanicCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinPanicCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1a69b8d2e_BuiltinAssertCallExprModel {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_expr = jule::Any();
	jule::Str _field_log = jule::Str();


	_1a69b8d2e_BuiltinAssertCallExprModel(_1b7553d92_Token __param_token, jule::Any __param_expr, jule::Str __param_log): _field_token(__param_token), _field_expr(__param_expr), _field_log(__param_log) {}

	

	_1a69b8d2e_BuiltinAssertCallExprModel(void) = default;

	inline bool operator==(const _1a69b8d2e_BuiltinAssertCallExprModel &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_log == _Src._field_log;
	}

	inline bool operator!=(const _1a69b8d2e_BuiltinAssertCallExprModel &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_RetSt {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();


	_1b7509a90_RetSt(_1b7553d92_Token __param_token, jule::Ptr<_1b7509a90_Expr> __param_expr): _field_token(__param_token), _field_expr(__param_expr) {}

	

	_1b7509a90_RetSt(void) = default;

	inline bool operator==(const _1b7509a90_RetSt &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_expr == _Src._field_expr;
	}

	inline bool operator!=(const _1b7509a90_RetSt &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_Iter {
	_1b7553d92_Token _field_token = _1b7553d92_Token();
	jule::Any _field_kind = jule::Any();
	jule::Ptr<_1b7509a90_ScopeTree> _field_scope = jule::Ptr<_1b7509a90_ScopeTree>();


	_1b7509a90_Iter(_1b7553d92_Token __param_token, jule::Any __param_kind, jule::Ptr<_1b7509a90_ScopeTree> __param_scope): _field_token(__param_token), _field_kind(__param_kind), _field_scope(__param_scope) {}

	

	_1b7509a90_Iter(void) = default;

	inline jule::Bool _method_is_inf(void);


	inline bool operator==(const _1b7509a90_Iter &_Src) const {
		return 
			this->_field_token == _Src._field_token &&
			this->_field_kind == _Src._field_kind &&
			this->_field_scope == _Src._field_scope;
	}

	inline bool operator!=(const _1b7509a90_Iter &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_WhileKind {
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();
	jule::Any _field_next = jule::Any();
	_1b7553d92_Token _field_next_token = _1b7553d92_Token();


	_1b7509a90_WhileKind(jule::Ptr<_1b7509a90_Expr> __param_expr, jule::Any __param_next, _1b7553d92_Token __param_next_token): _field_expr(__param_expr), _field_next(__param_next), _field_next_token(__param_next_token) {}

	

	_1b7509a90_WhileKind(void) = default;

	inline jule::Bool _method_is_while_next(void);


	inline bool operator==(const _1b7509a90_WhileKind &_Src) const {
		return 
			this->_field_expr == _Src._field_expr &&
			this->_field_next == _Src._field_next &&
			this->_field_next_token == _Src._field_next_token;
	}

	inline bool operator!=(const _1b7509a90_WhileKind &_Src) const { return !this->operator==(_Src); }
};


struct _1b7509a90_RangeKind {
	_1b7553d92_Token _field_in_token = _1b7553d92_Token();
	jule::Ptr<_1b7509a90_Expr> _field_expr = jule::Ptr<_1b7509a90_Expr>();
	jule::Ptr<_1b7509a90_VarDecl> _field_key_a = jule::Ptr<_1b7509a90_VarDecl>();
	jule::Ptr<_1b7509a90_VarDecl> _field_key_b = jule::Ptr<_1b7509a90_VarDecl>();


	_1b7509a90_RangeKind(_1b7553d92_Token __param_in_token, jule::Ptr<_1b7509a90_Expr> __param_expr, jule::Ptr<_1b7509a90_VarDecl> __param_key_a, jule::Ptr<_1b7509a90_VarDecl> __param_key_b): _field_in_token(__param_in_token), _field_expr(__param_expr), _field_key_a(__param_key_a), _field_key_b(__param_key_b) {}

	

	_1b7509a90_RangeKind(void) = default;

	inline bool operator==(const _1b7509a90_RangeKind &_Src) const {
		return 
			this->_field_in_token == _Src._field_in_token &&
			this->_field_expr == _Src._field_expr &&
			this->_field_key_a == _Src._field_key_a &&
			this->_field_key_b == _Src._field_key_b;
	}

	inline bool operator!=(const _1b7509a90_RangeKind &_Src) const { return !this->operator==(_Src); }
};


struct _1a70d117c_ArgParser {
	_1a70d117c_FlagSet _field_set = _1a70d117c_FlagSet();
	jule::Slice<jule::Str> _field_args = jule::Slice<jule::Str>();
	jule::Slice<jule::Str> _field_content = jule::Slice<jule::Str>();
	jule::Int _field_i = jule::Int();


	_1a70d117c_ArgParser(_1a70d117c_FlagSet __param_set, jule::Slice<jule::Str> __param_args, jule::Slice<jule::Str> __param_content, jule::Int __param_i): _field_set(__param_set), _field_args(__param_args), _field_content(__param_content), _field_i(__param_i) {}

	

	_1a70d117c_ArgParser(void) = default;

	inline std::tuple<jule::Int,jule::Bool> _method_parse_integer_0(jule::Str&,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>);
	inline std::tuple<jule::Uint,jule::Bool> _method_parse_integer_1(jule::Str&,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>);


	inline jule::Str _method_get_data(void);


	inline jule::VoidExceptional _method_process_flag(jule::Trait<_1a70d117c_CommonFlag>&);


	inline jule::VoidExceptional _method_single_dash(jule::Str&);


	inline jule::VoidExceptional _method_double_dash(jule::Str&);


	inline jule::VoidExceptional _method_try_arg(void);


	inline jule::VoidExceptional _method_parse(void);


	inline bool operator==(const _1a70d117c_ArgParser &_Src) const {
		return 
			this->_field_set == _Src._field_set &&
			this->_field_args == _Src._field_args &&
			this->_field_content == _Src._field_content &&
			this->_field_i == _Src._field_i;
	}

	inline bool operator!=(const _1a70d117c_ArgParser &_Src) const { return !this->operator==(_Src); }
};


inline void _1e828d848_free(void*);
inline jule::Str _1ce8d9a07_byte_ptr_to_str(jule::U8*);
inline jule::Int _211c51d4d_get_last_errno(void);
inline jule::Int _211c54070_stat(jule::U8*,struct stat*);
inline jule::Int _211c54070_open(jule::U8*,jule::Int,jule::Int);
inline jule::U8* _211c54070_getcwd(jule::U8*,jule::Uint);
inline DIR* _211c54070_opendir(jule::U8*);
inline struct dirent* _211c54070_readdir(DIR*);
inline jule::Int _211c54070_closedir(DIR*);
inline jule::Int _211c54070_mkdir(jule::U8*,jule::Int);
inline jule::Int _211c54070_rmdir(jule::U8*);
inline jule::Int _211c54070_unlink(jule::U8*);
inline jule::I64 _1e825ca7b_seek(jule::Int,jule::I64,jule::Int);
inline jule::Int _1e825ca7b_read(jule::Int,void*,jule::Uint);
inline jule::Int _1e825ca7b_close(jule::Int);
inline jule::Int _1e825ca7b_write(jule::Int,void*,jule::Uint);
inline void _1e825ca7b_exit(jule::Int);
inline jule::Int _211b8062d_get_last_os_error(void);
inline jule::Slice<jule::Str> _211c409b8_args(void);
inline jule::Exceptional<jule::Str> _211c409b8_working_dir(void);
inline jule::Exceptional<jule::Str> _211c4c970___getwd(void);
inline void _211b70ab3_push_opt_level(jule::Int);
inline jule::Bool _1b6099851_is_letter(jule::I32);
inline jule::Bool _1b687a818_is16(jule::Slice<_1b687a818_Range16>,jule::U16);
inline jule::Bool _1b687a818_is32(jule::Slice<_1b687a818_Range32>,jule::U32);
inline jule::Bool _1b687a818_is_excluding_latin(jule::Ptr<_1b687a818_RangeTable>,jule::I32);
inline std::tuple<jule::I32,jule::Int> _1b687997c_decode_rune(jule::Slice<jule::U8>);
inline std::tuple<jule::I32,jule::Int> _1b687997c_decode_last_rune(jule::Slice<jule::U8>);
inline jule::Slice<jule::U8> _1b687997c_append_rune(jule::Slice<jule::U8>,jule::I32);
inline jule::Slice<jule::U8> _1b687997c_append_rune_non_ascii(jule::Slice<jule::U8>,jule::I32);
inline jule::Int _1b687997c_rune_count_str(jule::Str);
inline jule::Bool _1b687997c_rune_start(jule::U8);
inline jule::Slice<jule::U8> _1cea13504_stobs(jule::Str&);
inline jule::Str _1cea16edb_repeat(jule::Str,jule::Int);
inline jule::Bool _1cea16edb__has_prefix(jule::Str&,jule::Str&,jule::Int);
inline jule::Bool _1cea16edb_has_prefix(jule::Str,jule::Str);
inline jule::Bool _1cea16edb__has_suffix(jule::Str&,jule::Str&,jule::Int);
inline jule::Bool _1cea16edb_has_suffix(jule::Str,jule::Str);
inline jule::Int _1cea16edb_find_at(jule::Str,jule::Str,jule::Int);
inline jule::Int _1cea16edb_find_last_at(jule::Str,jule::Str,jule::Int);
inline jule::Int _1cea16edb_find_last(jule::Str,jule::Str);
inline jule::Int _1cea16edb__find_rune(jule::Slice<jule::U8>&,jule::I32);
inline jule::Int _1cea16edb_find_last_byte(jule::Str,jule::U8);
inline jule::Int _1cea16edb_find_any(jule::Str,jule::Str);
inline jule::Slice<jule::Str> _1cea16edb_split(jule::Str,jule::Str,jule::Int);
inline jule::Bool _1cea16edb_contains(jule::Str,jule::Str);
inline jule::Bool _1cea16edb_contains_any(jule::Str,jule::Str);
inline jule::Str _1cea16edb_replace(jule::Str,jule::Str,jule::Str,jule::Int);
inline void _1cea16edb__trim_left(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _1cea16edb_trim_left(jule::Str,jule::Str);
inline void _1cea16edb__trim_right(jule::Slice<jule::U8>&,jule::Slice<jule::U8>&);
inline jule::Str _1cea16edb_trim(jule::Str,jule::Str);
inline jule::Str _1ce9be05e_clean(jule::Str);
inline jule::Str _1ce9be05e_from_slash(jule::Str);
inline jule::Str _1ce9be05e_join(jule::Slice<jule::Str>);
inline jule::Str _1ce9be05e_ext(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _1ce9be05e_abs(jule::Str);
inline jule::Str _1ce9be05e_base(jule::Str);
inline jule::Str _1ce9be05e_dir(jule::Str);
inline jule::Str _1ce9be05e_volume_name(jule::Str);
inline jule::Bool _1ce9c31a6_is_path_sep(jule::U8);
inline jule::Bool _1ce9c31a6_is_abs(jule::Str);
inline jule::Int _1ce9c31a6_volume_name_len(jule::Str);
inline std::tuple<jule::Str,jule::Bool> _1ce9c31a6___abs(jule::Str);
inline jule::Str _1ce9c31a6_str_join(jule::Slice<jule::Str>,jule::Str);
inline jule::Str _1ce9c31a6___join(jule::Slice<jule::Str>);
inline jule::Int _1ce947c0d_get_last_fs_error(void);
inline jule::Int _1b6a0330e_get_last_process_error(void);
inline void _211c5d002_exit(jule::Int);
inline jule::Str _211c5d002_executable(void);
inline jule::Bool _1b697da81_is_std_header_path(jule::Str);
inline jule::Bool _1b697da81_is_valid_header_ext(jule::Str);
inline jule::Bool _1b697da81_is_valid_cpp_ext(jule::Str);
inline jule::Str _1b6986b22_logf(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1b6986b22_arg_to_str(jule::Any);
inline jule::Int _1b6986b22_find_next_fmt(jule::Str);
inline jule::Str _1b6986b22_apply_fmt(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1b69bd670_is_top_directive(jule::Str);
inline jule::Bool _1b698aa8d_is_windows(jule::Str);
inline jule::Bool _1b698aa8d_is_darwin(jule::Str);
inline jule::Bool _1b698aa8d_is_linux(jule::Str);
inline jule::Bool _1b698aa8d_is_i386(jule::Str);
inline jule::Bool _1b698aa8d_is_amd64(jule::Str);
inline jule::Bool _1b698aa8d_is_arm64(jule::Str);
inline jule::Bool _1b698aa8d_is_unix(jule::Str);
inline jule::Bool _1b698aa8d_is_32bit(jule::Str);
inline jule::Bool _1b698aa8d_is_64bit(jule::Str);
inline void _1b69ce708_exit_err(jule::Str);
inline void _1b69ce708_init(void);
inline jule::Int _1b738619c_leading_zeros64(jule::U64);
inline jule::Int _1b738619c_trailing_zeros(jule::Uint);
inline jule::Int _1b738619c_trailing_zeros32(jule::U32);
inline jule::Int _1b738619c_trailing_zeros64(jule::U64);
inline jule::Int _1b738619c_len32(jule::U32);
inline jule::Int _1b738619c_len64(jule::U64);
inline std::tuple<jule::U64,jule::U64> _1b738619c_add64(jule::U64,jule::U64,jule::U64);
inline std::tuple<jule::U64,jule::U64> _1b738619c_mul64(jule::U64,jule::U64);
inline jule::U32 _1b6aecc33_f32_bits(jule::F32);
inline jule::F32 _1b6aecc33_f32_from_bits(jule::U32);
inline jule::U64 _1b6aecc33_f64_bits(jule::F64);
inline jule::F64 _1b6aecc33_f64_from_bits(jule::U64);
inline std::tuple<jule::F64,jule::Int> _1b6b517ae_frexp(jule::F64);
inline jule::F64 _1b62a95ee_nan(void);
inline jule::Bool _1b62a95ee_is_nan(jule::F64);
inline jule::F64 _1b62a95ee_inf(jule::Int);
inline jule::Bool _1b62a95ee_is_inf(jule::F64,jule::Int);
inline std::tuple<jule::F64,jule::Int> _1b62a95ee_normalize(jule::F64);
inline jule::F64 _1b62e9452_log(jule::F64);
inline jule::F64 _1b6e66134_abs(jule::F64);
inline std::tuple<jule::F64,jule::F64> _1b6eb7619_modf(jule::F64);
inline jule::F64 _1b6ee77ae_log2(jule::F64);
inline jule::Str _211ca7535_fmt_float(jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _211ca7535_generic_ftoa(jule::Slice<jule::U8>,jule::F64,jule::U8,jule::Int,jule::Int);
inline jule::Slice<jule::U8> _211ca7535_big_ftoa(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_211ca7535_FloatInfo&);
inline jule::Slice<jule::U8> _211ca7535_fmt_digits(jule::Slice<jule::U8>,jule::Bool,jule::Bool,_211ca7535_DecimalSlice,jule::Int,jule::U8);
inline void _211ca7535_round_shortest(_1b6a7a1bb_Decimal&,jule::U64,jule::Int,_211ca7535_FloatInfo&);
inline jule::Slice<jule::U8> _211ca7535_fmt_e(jule::Slice<jule::U8>,jule::Bool,_211ca7535_DecimalSlice,jule::Int,jule::U8);
inline jule::Slice<jule::U8> _211ca7535_fmt_f(jule::Slice<jule::U8>,jule::Bool,_211ca7535_DecimalSlice,jule::Int);
inline jule::Slice<jule::U8> _211ca7535_fmt_b(jule::Slice<jule::U8>,jule::Bool,jule::U64,jule::Int,_211ca7535_FloatInfo&);
inline jule::Slice<jule::U8> _211ca7535_fmt_x(jule::Slice<jule::U8>,jule::Int,jule::U8,jule::Bool,jule::U64,jule::Int,_211ca7535_FloatInfo&);
inline jule::Int _211ca7535_min(jule::Int,jule::Int);
inline jule::Int _211ca7535_max(jule::Int,jule::Int);
inline jule::U8 _211cb0593_lower(jule::U8);
inline std::tuple<jule::U64,jule::Int> _211cb0593_parse_uint(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::I64,jule::Int> _211cb0593_parse_int(jule::Str,jule::Int,jule::Int);
inline std::tuple<jule::F64,jule::Bool> _211d62436_eisel_lemire64(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _211d62436_eisel_lemire32(jule::U64,jule::Int,jule::Bool);
inline jule::Int _211cadddd_common_prefix_len_ignore_case(jule::Str,jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Bool> _211cadddd_special(jule::Str);
inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _211cadddd_read_float(jule::Str);
inline std::tuple<jule::F64,jule::Bool> _211cadddd_atof64exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F32,jule::Bool> _211cadddd_atof32exact(jule::U64,jule::Int,jule::Bool);
inline std::tuple<jule::F64,jule::Int> _211cadddd_atof_hex(jule::Str,_211ca7535_FloatInfo&,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline std::tuple<jule::F32,jule::Int,jule::Int> _211cadddd_atof32(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _211cadddd_atof64(jule::Str);
inline std::tuple<jule::F64,jule::Int,jule::Int> _211cadddd_parse_float_prefix(jule::Str,jule::Int);
inline std::tuple<jule::F64,jule::Int> _211cadddd_parse_float(jule::Str,jule::Int);
inline void _211d646ad_ryu_ftoa_fixed32(_211ca7535_DecimalSlice&,jule::U32,jule::Int,jule::Int);
inline void _211d646ad_ryu_ftoa_fixed64(_211ca7535_DecimalSlice&,jule::U64,jule::Int,jule::Int);
inline void _211d646ad_format_decimal(_211ca7535_DecimalSlice&,jule::U64,jule::Bool,jule::Bool,jule::Int);
inline void _211d646ad_ryu_ftoa_shortest(_211ca7535_DecimalSlice&,jule::U64,jule::Int,_211ca7535_FloatInfo&);
inline jule::Int _211d646ad_mul_by_log2_log10(jule::Int);
inline jule::Int _211d646ad_mul_by_log10_log2(jule::Int);
inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _211d646ad_compute_bounds(jule::U64,jule::Int,_211ca7535_FloatInfo&);
inline void _211d646ad_ryu_digits(_211ca7535_DecimalSlice&,jule::U64,jule::U64,jule::U64,jule::Bool,jule::Bool);
inline void _211d646ad_ryu_digits32(_211ca7535_DecimalSlice&,jule::U32,jule::U32,jule::U32,jule::Bool,jule::Bool,jule::Int);
inline std::tuple<jule::U32,jule::Int,jule::Bool> _211d646ad_mult64bit_pow10(jule::U32,jule::Int,jule::Int);
inline std::tuple<jule::U64,jule::Int,jule::Bool> _211d646ad_mult128bit_pow10(jule::U64,jule::Int,jule::Int);
inline jule::Bool _211d646ad_divisible_by_pow5(jule::U64,jule::Int);
inline std::tuple<jule::U32,jule::U32> _211d646ad_divmod1e9(jule::U64);
inline void _1b6a7a1bb_trim(_1b6a7a1bb_Decimal&);
inline void _1b6a7a1bb_right_shift(_1b6a7a1bb_Decimal&,jule::Uint);
inline jule::Bool _1b6a7a1bb_prefix_is_less_than(jule::Array<jule::U8,800>,jule::Int,jule::Str);
inline void _1b6a7a1bb_left_shift(_1b6a7a1bb_Decimal&,jule::Uint);
inline jule::Bool _1b6a7a1bb_should_round_up(_1b6a7a1bb_Decimal&,jule::Int);
inline jule::Str _1b6ac3d91_fmt_uint(jule::U64,jule::Int);
inline jule::Str _1b6ac3d91_fmt_int(jule::I64,jule::Int);
inline jule::Str _1b6ac3d91_itoa(jule::Int);
inline jule::Str _1b6ac3d91_small(jule::Int);
inline jule::Bool _1b6ac3d91_is_power_of_two(jule::Int);
inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1b6ac3d91_fmt_bits(jule::Slice<jule::U8>,jule::U64,jule::Int,jule::Bool,jule::Bool);
inline jule::Bool _1b7553d92_is_unary_op(jule::Str);
inline jule::Bool _1b7553d92_is_bin_op(jule::Str);
inline jule::Bool _1b7553d92_is_str(jule::Str);
inline jule::Bool _1b7553d92_is_raw_str(jule::Str);
inline jule::Bool _1b7553d92_is_rune(jule::Str);
inline jule::Bool _1b7553d92_is_bool(jule::Str);
inline jule::Bool _1b7553d92_is_float(jule::Str);
inline jule::Bool _1b7553d92_is_num(jule::Str);
inline jule::Bool _1b7553d92_is_ignore_ident(jule::Str);
inline jule::Bool _1b7553d92_is_anon_ident(jule::Str);
inline jule::Bool _1b7553d92_is_space(jule::I32);
inline jule::Bool _1b7553d92_is_letter(jule::I32);
inline jule::Bool _1b7553d92_is_decimal(jule::U8);
inline jule::Bool _1b7553d92_is_binary(jule::U8);
inline jule::Bool _1b7553d92_is_octal(jule::U8);
inline jule::Bool _1b7553d92_is_hex(jule::U8);
inline jule::Bool _1b7553d92_is_assign(jule::Uint);
inline jule::Bool _1b7553d92_is_postfix_op(jule::Str);
inline jule::Bool _1b7553d92_is_assign_op(jule::Str);
inline jule::Ptr<_1b750c763_File> _1b750c763_new_file_set(jule::Str);
inline _1b6986b22_Log _1b75960d2_make_err(jule::Int,jule::Int,jule::Ptr<_1b750c763_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1b75960d2_bytes_has_prefix(jule::Slice<jule::U8>&,jule::Str);
inline jule::Str _1b75960d2_float_fmt_e(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_float_fmt_p(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_float_num(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_common_num(jule::Slice<jule::U8>&);
inline jule::Str _1b75960d2_binary_num(jule::Slice<jule::U8>&);
inline jule::Bool _1b75960d2_is_float_fmt_e(jule::U8,jule::Int);
inline jule::Bool _1b75960d2_is_float_fmt_p(jule::U8,jule::Int);
inline jule::Bool _1b75960d2_is_float_fmt_dotnp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _1b75960d2_is_float_fmt_dotp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Bool _1b75960d2_is_float_fmt_dotfp(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_octal_num(jule::Slice<jule::U8>&);
inline jule::Str _1b75960d2_hex_num(jule::Slice<jule::U8>&);
inline jule::Str _1b75960d2_hex_escape(jule::Slice<jule::U8>&,jule::Int);
inline jule::Str _1b75960d2_big_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _1b75960d2_little_unicode_point_escape(jule::Slice<jule::U8>&);
inline jule::Str _1b75960d2_hex_byte_escape(jule::Slice<jule::U8>&);
inline jule::Str _1b75960d2_byte_escape(jule::Slice<jule::U8>&);
inline jule::Slice<_1b6986b22_Log> _1b75960d2_lex(jule::Ptr<_1b750c763_File>);
inline jule::Bool _1b76a914b_find_module_file(jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>&);
inline jule::Str _1b76a914b_find_module_file_deep(jule::Str);
inline jule::Slice<_1b6986b22_Log> _1b76a914b_check_module_file(jule::Str);
inline jule::Ptr<_1b76a925b_FileInfo> _1b76a925b_parse_file(jule::Ptr<_1b750c763_File>);
inline std::tuple<jule::Ptr<_1b74bea77_Ast>,jule::Slice<_1b6986b22_Log>> _1b76a925b_parse_fileset(jule::Ptr<_1b750c763_File>);
inline jule::Ptr<_1b7509a90_ScopeTree> _1b76b4310_new_scope(void);
inline std::tuple<jule::Bool,jule::Bool> _1b76b4310_is_st(_1b7553d92_Token,_1b7553d92_Token);
inline jule::Bool _1b76b4310_prev_is_incomplete_expr(jule::Slice<_1b7553d92_Token>&,jule::Int&);
inline std::tuple<jule::Int,jule::Bool> _1b76b4310_next_st_pos(jule::Slice<_1b7553d92_Token>&,jule::Int);
inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Bool> _1b76b4310_skip_st(jule::Int&,jule::Slice<_1b7553d92_Token>);
inline jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _1b76b4310_split_stmts(jule::Slice<_1b7553d92_Token>&);
inline jule::Ptr<_1b76b4ac4_CallData> _1b76b4ac4_get_call_data(jule::Slice<_1b7553d92_Token>&);
inline jule::Slice<_1b7553d92_Token> _1b76b4ac4_get_block_expr(jule::Slice<_1b7553d92_Token>&);
inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Slice<_1b7553d92_Token>> _1b76b4ac4_split_colon(jule::Slice<_1b7553d92_Token>&);
inline jule::Slice<_1b7553d92_Token> _1b76b4ac4_eliminate_comments(jule::Slice<_1b7553d92_Token>&);
inline jule::Int _1b76b4ac4_find_lowest_prec_op(jule::Slice<_1b7553d92_Token>&);
inline jule::Ptr<_1b7509a90_IdentExpr> _1b76b4ac4_build_ident_expr(_1b7553d92_Token&);
inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Int> _1b76b4ac4_get_range_expr_tokens(jule::Slice<_1b7553d92_Token>&);
inline jule::Bool _1b77c370a_check_assign_tokens(jule::Slice<_1b7553d92_Token>&);
inline _1b6986b22_Log _1b78b1aa1_make_err(jule::Int,jule::Int,jule::Ptr<_1b750c763_File>&,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<_1b7553d92_Token> _1b78b1aa1_range(jule::Int&,jule::Str,jule::Str,jule::Slice<_1b7553d92_Token>&);
inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Slice<_1b7553d92_Token>> _1b78b1aa1_range_last(jule::Slice<_1b7553d92_Token>&);
inline std::tuple<jule::Slice<jule::Slice<_1b7553d92_Token>>,jule::Slice<_1b6986b22_Log>> _1b78b1aa1_parts(jule::Slice<_1b7553d92_Token>&,jule::Uint,jule::Bool);
inline jule::Str _1b78b1aa1_get_close_kind_of_brace(jule::Str);
inline _1b6986b22_Log _1b78b1aa1_compiler_err(_1b7553d92_Token&,jule::Str&,jule::Slice<jule::Any>);
inline void _1b78b1aa1_push_suggestion(_1b6986b22_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Ptr<_1b7509a90_Comment> _1b78b1aa1_build_comment(_1b7553d92_Token&);
inline jule::Str _1b78b1aa1_tokstoa(jule::Slice<_1b7553d92_Token>&);
inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_build_void_type(void);
inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_build_prim_type(_1b7553d92_Token);
inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Int> _1a691245e_split_map_range(jule::Slice<_1b7553d92_Token>&,jule::Int&);
inline void _1b6dd59aa_lshift_unsig(_1b6dd59aa_Const&,_1b6dd59aa_Const&);
inline void _1b6dd59aa_rshift_unsig(_1b6dd59aa_Const&,_1b6dd59aa_Const&);
inline jule::Str _1a90e11ac_real_kind_of(jule::Str);
inline jule::Int _1a90e11ac_bitsize_of(jule::Str);
inline jule::Str _1a90e11ac_int_from_bits(jule::U64);
inline jule::Str _1a90e11ac_uint_from_bits(jule::U64);
inline jule::Bool _1a90e11ac_check_bit_float(jule::Str,jule::Int);
inline jule::U64 _1a90e11ac_bitsize_of_int(jule::I64);
inline jule::U64 _1a90e11ac_bitsize_of_uint(jule::U64);
inline jule::F64 _1b6dd88c0_min(jule::Str);
inline jule::F64 _1b6dd88c0_max(jule::Str);
inline jule::Bool _1b6dd79e0_is_i8_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_i16_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_i32_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_i64_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_u8_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_u16_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_u32_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_u64_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_f32_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_is_f64_compatible(jule::Str);
inline jule::Bool _1b6dd79e0_types_are_compatible(jule::Str,jule::Str);
inline jule::Bool _1b6dd79e0_is_i16_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_i32_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_i64_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_u16_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_u32_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_u64_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_f32_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_f64_greater(jule::Str);
inline jule::Bool _1b6dd79e0_is_greater(jule::Str,jule::Str);
inline jule::Bool _1a9133243_is_sig_int(jule::Str);
inline jule::Bool _1a9133243_is_unsig_int(jule::Str);
inline jule::Bool _1a9133243_is_int(jule::Str);
inline jule::Bool _1a9133243_is_float(jule::Str);
inline jule::Bool _1a9133243_is_num(jule::Str);
inline jule::Bool _1a91ba31e_is_ascii(jule::I32);
inline jule::I32 _1a91ba31e_to_rune(jule::Slice<jule::U8>);
inline jule::Str _1a91ba31e_to_raw_str(jule::Slice<jule::U8>);
inline jule::Str _1a91ba31e_to_str(jule::Slice<jule::U8>);
inline std::tuple<jule::U8,jule::Bool> _1a91ba31e_try_btoa_common_esq(jule::Slice<jule::U8>);
inline jule::I32 _1a91ba31e_rune_from_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Slice<jule::U8> _1a91ba31e_str_esq_seq(jule::Slice<jule::U8>,jule::Int&);
inline jule::Int _1a9265e14_find_format_prefix(jule::Slice<jule::U8>&,jule::Int&);
inline jule::Slice<jule::U8> _1a9265e14_get_format_range(jule::Int&,jule::Slice<jule::U8>&);
inline jule::Slice<jule::U8> _1a9265e14_fmt_by_default(jule::Any&);
inline jule::Slice<jule::U8> _1a9265e14_apply_fmt_by_default(jule::Int&,jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _1a9265e14_apply_fmt(jule::Slice<jule::U8>&,jule::Int&,jule::Slice<jule::Any>&);
inline jule::Slice<jule::U8> _1a9265e14_format_bytes(jule::Str,jule::Slice<jule::Any>);
inline jule::Str _1a9265e14_format(jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1a691a500_kind_uses_generics(jule::Ptr<_1a6a19a50_TypeKind>,jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>&);
inline jule::Bool _1a691a500_parameter_uses_generics(jule::Ptr<_1a691a500_Param>&,jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>&);
inline jule::Str _1b6a47496_build_doc(jule::Ptr<_1b7509a90_CommentGroup>);
inline jule::Ptr<_1a6a19a50_TypeSymbol> _1b6a47496_build_type(jule::Ptr<_1b7509a90_TypeDecl>);
inline jule::Ptr<_1a8b431d7_Value> _1b6a47496_build_expr(jule::Ptr<_1b7509a90_Expr>);
inline jule::Ptr<_1a6a19a50_TypeAlias> _1b6a47496_build_type_alias(jule::Ptr<_1b7509a90_TypeAliasDecl>);
inline jule::Ptr<_1b7905331_Field> _1b6a47496_build_field(jule::Ptr<_1b7509a90_FieldDecl>);
inline jule::Slice<jule::Ptr<_1b7905331_Field>> _1b6a47496_build_fields(jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>>&);
inline jule::Ptr<_1b7905331_Struct> _1b6a47496_build_struct(jule::Ptr<_1b7509a90_StructDecl>);
inline jule::Ptr<_1a691a500_Param> _1b6a47496_build_param(jule::Ptr<_1b7509a90_ParamDecl>);
inline jule::Slice<jule::Ptr<_1a691a500_Param>> _1b6a47496_build_params(jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>>&);
inline jule::Ptr<_1a691a500_RetType> _1b6a47496_build_ret_type(jule::Ptr<_1b7509a90_RetTypeDecl>);
inline jule::Ptr<_1a691a500_Fn> _1b6a47496_build_fn(jule::Ptr<_1b7509a90_FnDecl>);
inline jule::Slice<jule::Ptr<_1a691a500_Fn>> _1b6a47496_build_methods(jule::Slice<jule::Ptr<_1b7509a90_FnDecl>>&);
inline jule::Ptr<_1b76b472d_Trait> _1b6a47496_build_trait(jule::Ptr<_1b7509a90_TraitDecl>);
inline jule::Ptr<_1a6bb9150_EnumItem> _1b6a47496_build_enum_item(jule::Ptr<_1b7509a90_EnumItemDecl>);
inline jule::Slice<jule::Ptr<_1a6bb9150_EnumItem>> _1b6a47496_build_enum_items(jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>>&);
inline jule::Ptr<_1a6bb9150_Enum> _1b6a47496_build_enum(jule::Ptr<_1b7509a90_EnumDecl>);
inline jule::Ptr<_1a7003e4b_Var> _1b6a47496_build_var(jule::Ptr<_1b7509a90_VarDecl>);
inline jule::Slice<jule::Ptr<_1a7003e4b_Var>> _1b6a47496_build_vars(jule::Slice<jule::Ptr<_1b7509a90_VarDecl>>);
inline jule::Ptr<_1a6bbbe44_Impl> _1b6a47496_build_impl(jule::Ptr<_1b7509a90_Impl>);
inline jule::Ptr<_1a6bc3e29_ScopeChecker> _1a6bc3e29_new_scope_checker_base(jule::Ptr<_1a7002752_Sema>&,jule::Ptr<_1a691a500_FnIns>);
inline jule::Ptr<_1a6bc3e29_ScopeChecker> _1a6bc3e29_new_scope_checker(jule::Ptr<_1a7002752_Sema>&,jule::Ptr<_1a691a500_FnIns>);
inline jule::Ptr<_1a6bc3e29_ScopeLabel> _1a6bc3e29_find_label_parent(jule::Str,jule::Ptr<_1a6bc3e29_ScopeChecker>);
inline jule::Bool _1a6bc3e29_stmt_is_goto_scope(jule::Any&,jule::Ptr<_1a6bc3e29_Scope>&);
inline jule::Int _1a6bc3e29_count_match_type(jule::Ptr<_1a6bc3e29_Match>&,jule::Ptr<_1a6a19a50_TypeKind>&);
inline jule::Slice<jule::Ptr<_1a8b431d7_Data>> _1a6bc3e29_get_datas_from_tuple_data(jule::Ptr<_1a8b431d7_Data>&);
inline jule::Slice<jule::Any> _1a6bc3e29_get_expr_models(jule::Any&);
inline jule::Bool _1a6bc3e29_check_mut(jule::Ptr<_1a7002752_Sema>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);
inline jule::Bool _1a6bc3e29_check_assign(jule::Ptr<_1a7002752_Sema>&,jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a8b431d7_Data>,_1b7553d92_Token);
inline jule::Bool _1a6bc3e29_is_valid_ast_st_for_next_st(jule::Any&);
inline jule::Bool _1a6bc3e29_is_valid_st_for_next_st(jule::Any&);
inline jule::Bool _1a6bc3e29_st_is_def(jule::Any&);
inline jule::Ptr<_1a7003e4b_Var> _1a6e9a574_find_var_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1a6a19a50_TypeAlias> _1a6e9a574_find_type_alias_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1b7905331_Struct> _1a6e9a574_find_struct_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1a691a500_Fn> _1a6e9a574_find_fn_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&,jule::Str,jule::Bool);
inline jule::Ptr<_1b76b472d_Trait> _1a6e9a574_find_trait_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&,jule::Str);
inline jule::Ptr<_1a6bb9150_Enum> _1a6e9a574_find_enum_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&,jule::Str);
inline jule::Bool _1a6e9a574_is_std_package(jule::Str,jule::Str);
inline jule::Bool _1a7002752_is_valid_model_for_ref(jule::Any&);
inline _1b6986b22_Log _1a7002752_compiler_err(_1b7553d92_Token&,jule::Bool,jule::Str,jule::Slice<jule::Any>);
inline jule::Bool _1a7002752_imp_is_lookupable(jule::Ptr<_1a6e9a574_ImportInfo>&,jule::Str);
inline jule::Slice<jule::Ptr<_1a7003e4b_Var>> _1a7002752_build_ret_vars(jule::Ptr<_1a691a500_FnIns>&);
inline jule::Slice<jule::Ptr<_1a7003e4b_Var>> _1a7002752_build_param_vars(jule::Ptr<_1a691a500_FnIns>&);
inline jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _1a7002752_build_generic_type_aliases(jule::Ptr<_1a691a500_FnIns>&);
inline jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_find_file(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>&,jule::Ptr<_1b750c763_File>&);
inline std::tuple<jule::Bool,jule::Bool> _1a7002752_conditional_has_ret(jule::Ptr<_1a6bc3e29_Conditional>);
inline jule::Bool _1a7002752_match_has_ret(jule::Ptr<_1a6bc3e29_Match>);
inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _1a7002752___has_ret(jule::Ptr<_1a6bc3e29_Scope>);
inline jule::Bool _1a7002752_has_ret(jule::Ptr<_1a6bc3e29_Scope>);
inline void _1a7002752_push_suggestion(_1b6986b22_Log*,jule::Str,jule::Slice<jule::Any>);
inline jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _1a700327a_get_result_types(jule::Ptr<_1a6a19a50_TypeKind>&);
inline jule::Bool _1a700327a_trait_has_reference_receiver(jule::Ptr<_1b76b472d_Trait>&);
inline jule::Bool _1a700327a_float_assignable(jule::Str,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Bool _1a700327a_sig_assignable(jule::Str,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Bool _1a700327a_unsig_assignable(jule::Str,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Bool _1a700327a_int_assignable(jule::Str,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1b7509a90_Directive> _1a8b431d7_find_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>&,jule::Str);
inline jule::Any _1a8b431d7_find_builtins_import(jule::Str,jule::Ptr<_1a6e9a574_ImportInfo>);
inline void _1a8b431d7_make_struct_lit_alloc(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a69b8d2e_StructLitExprModel>&);
inline jule::Ptr<_1a7003e4b_Var> _1a8b431d7_build_error_var(jule::Ptr<_1a6bc3e29_Scope>&,jule::Ptr<_1b7509a90_FnCallExpr>&);
inline jule::Any _1a8b431d7_find_builtins_sema(jule::Str,jule::Ptr<_1a7002752_Sema>);
inline jule::Bool _1a8b431d7_is_ok_for_shifting(jule::Ptr<_1a8b431d7_Data>&);
inline jule::Bool _1a8b431d7_is_instanced_struct(jule::Ptr<_1b7905331_StructIns>);
inline jule::Bool _1a8b431d7_is_ptr_arithmetic_compatible_int(jule::Ptr<_1a8b431d7_Data>&);
inline void _1a8b431d7_normalize_bitsize(jule::Ptr<_1a8b431d7_Data>&);
inline void _1a8b431d7_normalize_type(jule::Ptr<_1a8b431d7_Data>&);
inline void _1a8b431d7_fit_type(jule::Ptr<_1a8b431d7_Data>&);
inline void _1a8b431d7_apply_cast_kind_model(jule::Ptr<_1a8b431d7_Data>&);
inline void _1a8b431d7_apply_cast_kind(jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_build_void_data(void);
inline jule::Str _1a8b431d7_check_data_for_integer_indexing(jule::Ptr<_1a8b431d7_Data>&);
inline jule::Bool _1a6a19a50_has_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>&,jule::Str);
inline jule::Bool _1a6a19a50_can_get_ptr(jule::Ptr<_1a8b431d7_Data>&);
inline jule::Bool _1a6a19a50_is_valid_for_sptr_type(jule::Ptr<_1a6a19a50_TypeKind>&);
inline jule::Bool _1a6a19a50_is_valid_for_ref(jule::Ptr<_1a6a19a50_TypeKind>&);
inline jule::Bool _1a6a19a50_is_builtin_str_convertable(jule::Ptr<_1a6a19a50_TypeKind>&);
inline jule::Str _1a6a19a50_build_link_path_by_tokens(jule::Slice<_1b7553d92_Token>&);
inline jule::Ptr<_1a6a19a50_Prim> _1a6a19a50_build_prim_type(jule::Str);
inline jule::Ptr<_1b7905331_Struct> _1a6a19a50_get_struct_from_kind(jule::Ptr<_1a6a19a50_TypeKind>);
inline jule::Bool _1a6a19a50_is_prim(jule::Str);
inline std::tuple<jule::Ptr<_1a8acbe95_SymbolTable>,jule::Slice<_1b6986b22_Log>> _1a6a15b7d_build_symbols(jule::Ptr<_1b74bea77_Ast>&,jule::Trait<_1a6e9a574_Importer>&,jule::Ptr<_1b6a47496_SymbolBuilder>);
inline std::tuple<jule::Ptr<_1a6e9a574_Package>,jule::Slice<_1b6986b22_Log>> _1a6a15b7d___analyze_package(jule::Slice<jule::Ptr<_1b74bea77_Ast>>&,jule::Trait<_1a6e9a574_Importer>&,jule::Int&);
inline std::tuple<jule::Ptr<_1a6e9a574_Package>,jule::Slice<_1b6986b22_Log>> _1a6a15b7d_analyze_package(jule::Slice<jule::Ptr<_1b74bea77_Ast>>,jule::Trait<_1a6e9a574_Importer>,jule::Int);
inline jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)> _1a90790e0_find_builtin_caller(jule::U8);
inline jule::Ptr<_1a691a500_FnIns> _1a90790e0_find_builtin_fn(jule::Str);
inline jule::Ptr<_1a6a19a50_TypeAlias> _1a90790e0_find_builtin_type_alias(jule::Str);
inline jule::Ptr<_1b76b472d_Trait> _1a90790e0_find_builtin_trait(jule::Str);
inline jule::Any _1a90790e0_find_builtin_def(jule::Str);
inline jule::Any _1a90790e0_find_builtin_def_std_debug(jule::Str);
inline jule::Any _1a90790e0_find_builtin_def_std_mem(jule::Str);
inline jule::Any _1a90790e0_find_builtin_def_std_jule_integrated(jule::Str);
inline jule::Any _1a90790e0_find_package_builtin_def(jule::Str,jule::Str);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_common_plain(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_common(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_common_mut(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_error(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_out(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_outln(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_new(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_panic(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_make(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_append(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_copy(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_clone(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_assert(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_mem_size_of(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_mem_align_of(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_mem_free(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_jule_integrated_emit(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_debug_out(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_debug_outln(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&);
inline std::tuple<jule::Bool,jule::Bool> _1b71c24a0_check_os(jule::Str);
inline std::tuple<jule::Bool,jule::Bool> _1b71c24a0_check_arch(jule::Str);
inline jule::Bool _1b71c24a0_is_pass_file_annotation(jule::Str);
inline void _1b74b0d98_set_os_vars(void);
inline void _1b74b0d98_set_arch_vars(void);
inline void _1b74b0d98_init_vars(void);
inline void _1b74c00a5_exit_err(jule::Str);
inline jule::Slice<jule::U8> _1b74c00a5_read_buff(jule::Str);
inline _1b6986b22_Log _1b74c00a5_flat_compiler_err(jule::Str);
inline std::tuple<jule::Bool,jule::Slice<_1b6986b22_Log>> _1b74c00a5_is_pass_build_directives(jule::Ptr<_1b74bea77_Ast>&);
inline void _1b719bcc6_push_passes(jule::Ptr<_1a6e9a574_Package>&,jule::Slice<jule::Str>&);
inline jule::Slice<jule::Str> _1b719bcc6_get_all_unique_passes(jule::Ptr<_1a6e9a574_Package>&,jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>>);
inline jule::Bool _1b7467756_is_exist(jule::Slice<jule::Any>,jule::Any);
inline jule::Bool _1b7467756_is_dead(jule::Any);
inline void _1b7467756_drop_ref(jule::Slice<jule::Any>&,jule::Int);
inline jule::Bool _1b7467756_is_all_references_are_dead(jule::Ptr<_1b6a47496_ReferenceStack>);
inline jule::Bool _1b7467756_is_fn_dead(jule::Ptr<_1a691a500_FnIns>);
inline jule::Bool _1b7467756_is_var_dead(jule::Ptr<_1a7003e4b_Var>);
inline jule::Bool _1b7467756_is_struct_dead(jule::Ptr<_1b7905331_StructIns>);
inline jule::Bool _1b7467756_is_trait_dead(jule::Ptr<_1b76b472d_Trait>);
inline void _1b7467756_eliminate_dead_functions(jule::Slice<jule::Ptr<_1a691a500_Fn>>&);
inline void _1b7467756_eliminate_dead_globals(jule::Ptr<_1a6e9a574_Package>&);
inline void _1b7467756_eliminate_dead_functions_package(jule::Ptr<_1a6e9a574_Package>&);
inline void _1b7467756_catch_alive_init(jule::Ptr<_1a6e9a574_Package>&);
inline void _1b7467756_eliminate_package(jule::Ptr<_1a6e9a574_Package>&);
inline void _1b7467756_eliminate_defines(jule::Ptr<_1b719bcc6_IR>&);
inline void _1b719b688_eliminate_dead_code_of_scope(jule::Ptr<_1a6bc3e29_Scope>);
inline void _1b719b688_eliminate_scope_functions(jule::Slice<jule::Ptr<_1a691a500_Fn>>&);
inline void _1b719b688_eliminate_functions_scope_package(jule::Ptr<_1a6e9a574_Package>&);
inline void _1b719b688_eliminate_scope_package(jule::Ptr<_1a6e9a574_Package>&);
inline void _1b719b688_eliminate_scopes(jule::Ptr<_1b719bcc6_IR>&);
inline jule::U64 _1a9612e81_unix(void);
inline jule::U64 _1a9612e81_unix_year_to_seconds(jule::Uint,jule::Bool&);
inline jule::U64 _1a9612e81_unix_month_to_seconds(jule::Uint,jule::Bool);
inline jule::Bool _1b6d721b6_iter_expr_is_copy_optimizable(jule::Ptr<_1a8b431d7_Data>&,jule::Ptr<_1a7003e4b_Var>&);
inline jule::Str _1b6d721b6_gen_range_index_iter(jule::Ptr<_1a6bc3e29_RangeIter>&);
inline jule::Str _1b6d721b6_gen_range_hashmap_iter(jule::Ptr<_1a6bc3e29_RangeIter>&);
inline jule::Str _1b6d721b6_gen_if(jule::Ptr<_1a6bc3e29_If>);
inline jule::Str _1b6d721b6_gen_conditional(jule::Ptr<_1a6bc3e29_Conditional>);
inline jule::Str _1b6d721b6_gen_inf_iter(jule::Ptr<_1a6bc3e29_InfIter>);
inline jule::Str _1b6d721b6_gen_while_iter(jule::Ptr<_1a6bc3e29_WhileIter>);
inline jule::Str _1b6d721b6_gen_range_iter(jule::Ptr<_1a6bc3e29_RangeIter>);
inline jule::Str _1b6d721b6_gen_cont(jule::Ptr<_1a6bc3e29_ContSt>);
inline jule::Str _1b6d721b6_gen_label(jule::Ptr<_1a6bc3e29_Label>);
inline jule::Str _1b6d721b6_gen_goto(jule::Ptr<_1a6bc3e29_GotoSt>);
inline jule::Str _1b6d721b6_gen_postfix(jule::Ptr<_1a6bc3e29_Postfix>);
inline jule::Str _1b6d721b6_gen_div_by_zero_assign(jule::Ptr<_1a6bc3e29_Assign>);
inline jule::Str _1b6d721b6_gen_assign(jule::Ptr<_1a6bc3e29_Assign>);
inline jule::Str _1b6d721b6_gen_multi_assign(jule::Ptr<_1a6bc3e29_MultiAssign>);
inline jule::Str _1b6d721b6_get_case_match_expr(jule::Ptr<_1a6bc3e29_Match>&);
inline jule::Str _1b6d721b6_gen_case(jule::Ptr<_1a6bc3e29_Match>,jule::Ptr<_1a6bc3e29_Case>);
inline jule::Str _1b6d721b6_gen_match(jule::Ptr<_1a6bc3e29_Match>);
inline jule::Str _1b6d721b6_gen_fall_st(jule::Ptr<_1a6bc3e29_FallSt>);
inline jule::Str _1b6d721b6_gen_break_st(jule::Ptr<_1a6bc3e29_BreakSt>);
inline jule::Str _1b6d721b6_gen_ret_vars(jule::Ptr<_1a6bc3e29_RetSt>);
inline jule::Str _1b6d721b6_gen_ret_expr_tuple(jule::Ptr<_1a6bc3e29_RetSt>);
inline jule::Str _1b6d721b6_gen_ret_expr(jule::Ptr<_1a6bc3e29_RetSt>);
inline jule::Str _1b6d721b6_gen_ret_st(jule::Ptr<_1a6bc3e29_RetSt>);
inline jule::Str _1b6d721b6_gen_data_expr(jule::Ptr<_1a8b431d7_Data>);
inline jule::Str _1b6d721b6_gen_scope_var(jule::Ptr<_1a7003e4b_Var>);
inline jule::Str _1b6d721b6_gen_st(jule::Any);
inline jule::Str _1b6d721b6_gen_scope(jule::Ptr<_1a6bc3e29_Scope>);
inline jule::Str _1b6d721b6_gen_fn_scope(jule::Ptr<_1a691a500_FnIns>);
inline jule::Str _1b6d721b6_gen_method_scope(jule::Ptr<_1a691a500_FnIns>);
inline jule::Str _1a709c632_concat_all_parts(jule::Slice<_1b7553d92_Token>);
inline std::tuple<jule::Bool,jule::U64> _1a709c632_check_for_bit_shift_opt(jule::Ptr<_1a69b8d2e_OperandExprModel>&,jule::Ptr<_1a69b8d2e_OperandExprModel>&);
inline jule::Str _1a709c632_decompose_common_esq(jule::U8);
inline jule::Str _1a709c632_sbtoa(jule::U8);
inline jule::Str _1a709c632_get_cstr_model(jule::Slice<jule::U8>);
inline jule::Str _1a709c632_get_str_model(jule::Ptr<_1b6dd59aa_Const>&);
inline jule::Str _1a709c632_get_bool_model(jule::Ptr<_1b6dd59aa_Const>&);
inline jule::Str _1a709c632_get_nil_model(void);
inline jule::Str _1a709c632_gen_float_special_cases(jule::F64&);
inline jule::Str _1a709c632_ftoa(jule::F64,jule::Int);
inline jule::Str _1a709c632_get_f32_model(jule::Ptr<_1b6dd59aa_Const>&);
inline jule::Str _1a709c632_get_f64_model(jule::Ptr<_1b6dd59aa_Const>&);
inline jule::Str _1a709c632_get_float_model(jule::Ptr<_1a8b431d7_Data>&);
inline jule::Str _1a709c632_i64toa(jule::I64);
inline jule::Str _1a709c632_get_i64_model(jule::Ptr<_1b6dd59aa_Const>&);
inline jule::Str _1a709c632_u64toa(jule::U64);
inline jule::Str _1a709c632_get_u64_model(jule::Ptr<_1b6dd59aa_Const>);
inline jule::Str _1a709c632_gen_const_expr(jule::Ptr<_1a8b431d7_Data>);
inline jule::Str _1a709c632_gen_const_expr_model(jule::Ptr<_1b6dd59aa_Const>);
inline jule::Str _1a709c632_gen_div_by_zero_binop_expr_model(_1b7553d92_Token&,jule::Ptr<_1a69b8d2e_OperandExprModel>&,jule::Ptr<_1a69b8d2e_OperandExprModel>&);
inline jule::Str _1a709c632_gen_binop_expr_model(jule::Ptr<_1a69b8d2e_BinopExprModel>);
inline jule::Str _1a709c632_gen_var_expr_model(jule::Ptr<_1a7003e4b_Var>);
inline jule::Str _1a709c632_gen_struct_expr_model(jule::Ptr<_1b7905331_Struct>);
inline jule::Str _1a709c632_gen_struct_ins_expr_model(jule::Ptr<_1b7905331_StructIns>);
inline jule::Str _1a709c632_gen_unary_expr_model(jule::Ptr<_1a69b8d2e_UnaryExprModel>);
inline jule::Str _1a709c632_gen_cpp_struct_lit_expr_model(jule::Ptr<_1a69b8d2e_StructLitExprModel>);
inline jule::Str _1a709c632_gen_struct_lit_expr_model(jule::Ptr<_1a69b8d2e_StructLitExprModel>);
inline jule::Str _1a709c632_gen_alloc_struct_lit_expr_model(jule::Ptr<_1a69b8d2e_AllocStructLitExprModel>);
inline jule::Str _1a709c632_gen_casting_expr_model(jule::Ptr<_1a69b8d2e_CastingExprModel>);
inline jule::Str _1a709c632_gen_arg_expr_models(jule::Slice<jule::Any>);
inline jule::Str _1a709c632_gen_expr_model_for_call(jule::Any);
inline jule::Str _1a709c632_gen_loc_info(_1b7553d92_Token&);
inline jule::Str _1a709c632_gen_pure_fn_call_expr_model(jule::Ptr<_1a69b8d2e_FnCallExprModel>&);
inline jule::Bool _1a709c632_is_forwarded(jule::Ptr<_1a6bc3e29_Scope>&);
inline jule::Str _1a709c632_gen_fn_call_expr_model(jule::Ptr<_1a69b8d2e_FnCallExprModel>);
inline jule::Str _1a709c632_gen_slice_expr_model(jule::Ptr<_1a69b8d2e_SliceExprModel>);
inline jule::Str _1a709c632_gen_indexing_expr_model(jule::Ptr<_1a69b8d2e_IndexingExprModel>);
inline jule::Str _1a709c632_gen_anon_fn_expr_model(jule::Ptr<_1a69b8d2e_AnonFnExprModel>);
inline jule::Str _1a709c632_gen_map_expr_model(jule::Ptr<_1a69b8d2e_MapExprModel>);
inline jule::Str _1a709c632_gen_slicing_expr_model(jule::Ptr<_1a69b8d2e_SlicingExprModel>);
inline jule::Str _1a709c632_gen_trait_sub_ident_expr_model(jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel>);
inline jule::Str _1a709c632_gen_struct_sub_ident_expr_model(jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>);
inline jule::Str _1a709c632_gen_common_ident_expr_model(jule::Ptr<_1a69b8d2e_CommonIdentExprModel>);
inline jule::Str _1a709c632_gen_common_sub_ident_expr_model(jule::Ptr<_1a69b8d2e_CommonSubIdentExprModel>);
inline jule::Str _1a709c632_gen_array_expr_model(jule::Ptr<_1a69b8d2e_ArrayExprModel>);
inline jule::Str _1a709c632_gen_fn_ins_expr_model_common(jule::Ptr<_1a691a500_FnIns>);
inline jule::Str _1a709c632_gen_fn_ins_expr_model(jule::Ptr<_1a691a500_FnIns>);
inline jule::Str _1a709c632_gen_tuple_expr_model(jule::Ptr<_1a69b8d2e_TupleExprModel>);
inline jule::Str _1a709c632_gen_builtin_new_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinNewCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_out_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinOutCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_outln_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinOutlnCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_panic_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_assert_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinAssertCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_error_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_make_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinMakeCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_append_call_expr_model_assign_opt(jule::Bool,jule::Str&,jule::Ptr<_1a6a19a50_TypeKind>&,jule::Ptr<_1a69b8d2e_SliceExprModel>&,jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>&);
inline std::tuple<jule::Str,jule::Bool> _1a709c632_gen_builtin_append_call_expr_model_assign(jule::Any,jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_append_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>);
inline jule::Str _1a709c632_gen_builtin_clone_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinCloneCallExprModel>);
inline jule::Str _1a709c632_gen_sizeof_expr_model(jule::Ptr<_1a69b8d2e_SizeofExprModel>);
inline jule::Str _1a709c632_gen_alignof_expr_model(jule::Ptr<_1a69b8d2e_AlignofExprModel>);
inline jule::Str _1a709c632_gen_rune_expr_model(jule::Ptr<_1a69b8d2e_RuneExprModel>);
inline jule::Str _1a709c632_gen_struct_static_ident_expr_model(jule::Ptr<_1a69b8d2e_StructStaticIdentExprModel>);
inline jule::Str _1a709c632_gen_integrated_to_str_expr_model(jule::Ptr<_1a69b8d2e_IntegratedToStrExprModel>);
inline jule::Str _1a709c632_gen_ternary_expr_model(jule::Ptr<_1a69b8d2e_TernaryExprModel>);
inline jule::Str _1a709c632_gen_backend_emit_expr_model(jule::Ptr<_1a69b8d2e_BackendEmitExprModel>);
inline jule::Str _1a709c632_gen_free_expr_model(jule::Ptr<_1a69b8d2e_FreeExprModel>);
inline jule::Str _1a709c632_gen_expr_model(jule::Any);
inline jule::Str _1a709c632_gen_expr(jule::Any);
inline jule::Str _1a709c632_gen_val(jule::Ptr<_1a8b431d7_Value>);
inline jule::Str _1a709c632_get_init_expr(jule::Ptr<_1a6a19a50_TypeKind>);
inline jule::Str _1a946e727_get_derive_fn_decl_clone(jule::Ptr<_1b7905331_Struct>&);
inline jule::Str _1a946e727_get_derive_fn_def_clone(jule::Ptr<_1b7905331_Struct>&);
inline jule::Str _1a946cd0d_as_ident(jule::Str);
inline jule::Str _1a946cd0d_as_jt(jule::Str);
inline jule::Str _1a946cd0d_get_addr_as_ident(jule::Uintptr);
inline jule::Str _1a946cd0d_as_out_ident(jule::Str,jule::Uintptr);
inline jule::Str _1a946cd0d_as_local_ident(jule::Int,jule::Int,jule::Str);
inline jule::Str _1a946cd0d_fn_out_ident(jule::Ptr<_1a691a500_Fn>&);
inline jule::Str _1a946cd0d_fn_ins_out_ident(jule::Ptr<_1a691a500_FnIns>&);
inline jule::Str _1a946cd0d_trait_out_ident(jule::Ptr<_1b76b472d_Trait>);
inline jule::Str _1a946cd0d_param_out_ident(jule::Ptr<_1a691a500_Param>&);
inline jule::Str _1a946cd0d_struct_out_ident(jule::Ptr<_1b7905331_Struct>&);
inline jule::Str _1a946cd0d_struct_ins_out_ident(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a946cd0d_field_out_ident(jule::Ptr<_1b7905331_Field>&);
inline jule::Str _1a946cd0d_var_out_ident(jule::Ptr<_1a7003e4b_Var>);
inline jule::Str _1a946cd0d_iter_begin_label_ident(jule::Uintptr);
inline jule::Str _1a946cd0d_iter_end_label_ident(jule::Uintptr);
inline jule::Str _1a946cd0d_iter_next_label_ident(jule::Uintptr);
inline jule::Str _1a946cd0d_label_ident(jule::Str);
inline jule::Str _1a946cd0d_match_end_label_ident(jule::Uintptr);
inline jule::Str _1a946cd0d_case_begin_label_ident(jule::Uintptr);
inline jule::Ptr<_1b7509a90_Directive> _1a947143d_find_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>&,jule::Str);
inline jule::Bool _1a947143d_has_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>&,jule::Str);
inline jule::Str _1a947143d_gen_prim_kind(jule::Ptr<_1a6a19a50_Prim>);
inline jule::Str _1a947143d_gen_tuple_kind(jule::Ptr<_1a6a19a50_Tuple>);
inline jule::Str _1a947143d_as_sptr_kind(jule::Str);
inline jule::Str _1a947143d_gen_sptr_kind(jule::Ptr<_1a6a19a50_Sptr>);
inline jule::Str _1a947143d_gen_ptr_kind(jule::Ptr<_1a6a19a50_Ptr>);
inline jule::Str _1a947143d_gen_enum_kind(jule::Ptr<_1a6bb9150_Enum>);
inline jule::Str _1a947143d_as_slice_kind(jule::Ptr<_1a6a19a50_TypeKind>);
inline jule::Str _1a947143d_gen_slice_kind(jule::Ptr<_1a6a19a50_Slc>);
inline jule::Str _1a947143d_gen_map_kind(jule::Ptr<_1a6a19a50_Map>);
inline jule::Str _1a947143d_gen_trait_kind_from_ident(jule::Str);
inline jule::Str _1a947143d_gen_trait_kind(jule::Ptr<_1b76b472d_Trait>);
inline jule::Str _1a947143d_gen_struct_kind(jule::Ptr<_1b7905331_Struct>);
inline jule::Str _1a947143d_gen_struct_kind_ins(jule::Ptr<_1b7905331_StructIns>);
inline jule::Str _1a947143d_gen_array_kind(jule::Ptr<_1a6a19a50_Arr>);
inline jule::Str _1a947143d_gen_fn_anon_decl(jule::Ptr<_1a691a500_FnIns>);
inline jule::Str _1a947143d_gen_fn_kind(jule::Ptr<_1a691a500_FnIns>);
inline jule::Str _1a947143d_gen_type_kind(jule::Ptr<_1a6a19a50_TypeKind>);
inline void _1a94c037c_add_indent(void);
inline void _1a94c037c_done_indent(void);
inline jule::Str _1a94c037c_indent(void);
inline jule::Bool _1a94c037c_is_cpp_header_file(jule::Str);
inline jule::Str _1a94c037c_gen_links(jule::Ptr<_1b719bcc6_IR>&);
inline jule::Str _1a94c037c_gen_fn_result(jule::Ptr<_1a691a500_Fn>&);
inline jule::Str _1a94c037c_gen_fn_ins_result(jule::Ptr<_1a691a500_FnIns>&);
inline jule::Str _1a94c037c_gen_param_prototype(jule::Ptr<_1a691a500_Param>&);
inline jule::Str _1a94c037c_gen_param_ins(jule::Ptr<_1a691a500_ParamIns>&);
inline jule::Str _1a94c037c_gen_param_ins_prototype(jule::Ptr<_1a691a500_ParamIns>&);
inline jule::Str _1a94c037c_gen_param(jule::Ptr<_1a691a500_Param>&);
inline jule::Str _1a94c037c_gen_params(jule::Slice<jule::Ptr<_1a691a500_Param>>&);
inline jule::Str _1a94c037c_gen_params_ins(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>&);
inline jule::Str _1a94c037c_gen_params_prototypes(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>&);
inline jule::Str _1a94c037c_gen_trait(jule::Ptr<_1b76b472d_Trait>&);
inline jule::Str _1a94c037c_gen_traits_tbl(jule::Ptr<_1a8acbe95_SymbolTable>&);
inline jule::Str _1a94c037c_gen_traits_pkg(jule::Ptr<_1a6e9a574_Package>&);
inline jule::Str _1a94c037c_gen_traits(jule::Ptr<_1b719bcc6_IR>&);
inline jule::Str _1a94c037c_gen_trait_prototype(jule::Ptr<_1b76b472d_Trait>&);
inline jule::Str _1a94c037c_gen_trait_prototypes(jule::Ptr<_1a6e9a574_Package>&);
inline jule::Str _1a94c037c_gen_struct_plain_prototype(jule::Ptr<_1b7905331_Struct>&);
inline jule::Str _1a94c037c_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_1b7905331_Struct>>&);
inline jule::Str _1a94c037c_gen_struct_traits(jule::Ptr<_1b7905331_Struct>&);
inline jule::Str _1a94c037c_gen_field_decl(jule::Ptr<_1b7905331_FieldIns>&);
inline jule::Str _1a94c037c_gen_struct_self_field_type_kind(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_self_field(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_self_field_init_st(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_constructor(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_destructor(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_operators(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_derive_defs_prototypes(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_ins_prototype(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_prototype(jule::Ptr<_1b7905331_Struct>&);
inline jule::Str _1a94c037c_gen_struct_prototypes(jule::Slice<jule::Ptr<_1b7905331_Struct>>&);
inline jule::Str _1a94c037c_gen_fn_decl_head(jule::Ptr<_1a691a500_FnIns>&,jule::Bool);
inline jule::Str _1a94c037c_gen_fn_prototype(jule::Ptr<_1a691a500_Fn>&,jule::Bool);
inline jule::Str _1a94c037c_gen_fn_prototypes(jule::Ptr<_1a6e9a574_Package>&);
inline jule::Str _1a94c037c_gen_prototypes(jule::Ptr<_1b719bcc6_IR>&);
inline jule::Str _1a94c037c_gen_var_init_expr(jule::Ptr<_1a7003e4b_Var>&,jule::Str);
inline jule::Str _1a94c037c_gen_var(jule::Ptr<_1a7003e4b_Var>);
inline jule::Str _1a94c037c_gen_pkg_globals(jule::Ptr<_1a6e9a574_Package>&,jule::Str&);
inline jule::Str _1a94c037c_gen_globals(jule::Ptr<_1b719bcc6_IR>,jule::Str&);
inline jule::Str _1a94c037c_gen_fn(jule::Ptr<_1a691a500_Fn>&);
inline jule::Str _1a94c037c_gen_pkg_fns(jule::Ptr<_1a6e9a574_Package>&);
inline jule::Str _1a94c037c_gen_struct_method_defs(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Bool _1a94c037c_fn_is_to_str(jule::Ptr<_1a691a500_Fn>&);
inline jule::Bool _1a94c037c_fn_is_dispose(jule::Ptr<_1a691a500_Fn>);
inline jule::Str _1a94c037c_gen_struct_ostream(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_derive_defs(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct_ins(jule::Ptr<_1b7905331_StructIns>&);
inline jule::Str _1a94c037c_gen_struct(jule::Ptr<_1b7905331_Struct>&);
inline jule::Str _1a94c037c_gen_structs(jule::Slice<jule::Ptr<_1b7905331_Struct>>&);
inline jule::Str _1a94c037c_gen_fns(jule::Ptr<_1b719bcc6_IR>&);
inline void _1a94c037c_push_init(jule::Ptr<_1a6e9a574_Package>&,jule::Str&);
inline jule::Str _1a94c037c_gen_init_caller(jule::Ptr<_1b719bcc6_IR>&,jule::Str&);
inline jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_find_testing_package(jule::Ptr<_1b719bcc6_IR>&);
inline void _1a94c037c_append_test(jule::Str&,jule::Ptr<_1a691a500_FnIns>);
inline void _1a94c037c_append_package_tests(jule::Str&,jule::Ptr<_1a6e9a574_Package>&);
inline void _1a94c037c_append_test_point(jule::Str&,jule::Ptr<_1b719bcc6_IR>&);
inline void _1a94c037c_append_standard(jule::Str&,jule::Str,jule::Str);
inline jule::Str _1a94c037c_gen(jule::Ptr<_1b719bcc6_IR>&);
inline jule::Bool _1a70a995d_is_std_package(jule::Str,jule::Str);
inline jule::Bool _1a70a995d_is_constant_valid_conditional_case(jule::Ptr<_1a6bc3e29_If>&);
inline jule::Bool _1a70a995d_is_constant_valid_match_case(jule::Ptr<_1a6bc3e29_Case>&);
inline jule::Bool _1a70a995d_is_unreachable_conditional_case(jule::Ptr<_1a6bc3e29_If>&);
inline jule::Bool _1a70a995d_is_unreachable_match_case(jule::Ptr<_1a6bc3e29_Case>&);
inline void _211ad8025_print_error_message(jule::Str);
inline void _211ad8025_help(jule::Slice<jule::Str>&);
inline void _211ad8025_version(jule::Slice<jule::Str>&);
inline void _211ad8025_tool_distos(void);
inline void _211ad8025_tool_distarch(void);
inline void _211ad8025_tool(jule::Slice<jule::Str>&);
inline void _211ad8025_julenv(jule::Slice<jule::Str>&);
inline void _211ad8025_mod(jule::Slice<jule::Str>&);
inline jule::Bool _211ad8025_process_command(jule::Slice<jule::Str>&);
inline void _211ad8025_exit_err(jule::Str);
inline void _211ad8025_show_info(void);
void entry_point(void);
inline void _211b0b9b6___init_common(void);
inline void _211b23cb9_init(void);
inline void _211b24e41_write_output(jule::Str,jule::Str);
inline void _211b24e41_clear_objects(void);
inline void _211b24e41_compile_ir(jule::Str,jule::Str);
inline void _211b24e41_do_spell(jule::Str,jule::Str,jule::Str);
inline jule::Bool _211b24e41_is_cpp_source_file(jule::Str);
inline void _211b24e41_push_comp_cmd_clang(jule::Str&);
inline void _211b24e41_push_comp_cmd_gcc(jule::Str&);
inline std::tuple<jule::Str,jule::Str> _211b24e41_gen_compile_cmd(jule::Str,jule::Ptr<_1b719bcc6_IR>&);
inline jule::Str _211b24e41_get_compile_path(void);
inline void _211b24e41_apply_target_independent_optimizations(jule::Ptr<_1b719bcc6_IR>&);
inline void _211b24e41_check_compiler_flag(void);
inline void _211b24e41_check_target_arch(jule::Str);
inline void _211b24e41_check_target_os(jule::Str);
inline void _211b24e41_check_target_flag(jule::Str&);
inline void _211b24e41_check_opt_flag(jule::Str&);
inline void _211b24e41_check_cpp_std_flag(void);
inline jule::Slice<jule::Str> _211b24e41_check_flags(jule::Slice<jule::Str>&);
inline void _211b24e41_setup_sema_flags(jule::Int&);
inline jule::Ptr<_1b719bcc6_IR> _211b24e41_build_ir(jule::Slice<jule::Str>&);
inline void _211b24e41_compile_command(jule::Slice<jule::Str>&);


jule::Str _211b246b0_OS;
jule::Str _211b246b0_ARCH;
jule::Bool _211b70ab3_PRODUCTION;
jule::Bool _211b70ab3_OPT_COPY;
jule::Bool _211b70ab3_OPT_DEADCODE;
jule::Bool _211b70ab3_OPT_APPEND;
jule::Bool _211b70ab3_OPT_MATH;
jule::Bool _211b70ab3_OPT_ACCESS;
jule::Bool _211b70ab3_OPT_INLINE;
jule::Bool _211b70ab3_OPT_PTR;
jule::Bool _211b70ab3_OPT_COND;
jule::Str _211b7d3b7_COMPILER;
jule::Str _211b7d3b7_COMPILER_PATH;
jule::Str _211b7d3b7_CPP_STD;
jule::Bool _211b7d3b7_SHADOWING;
jule::Bool _211b7d3b7_TRANSPILATION;
jule::Bool _211b7d3b7_TEST;
jule::Bool _211b7d3b7_RC;
jule::Bool _211b7d3b7_SAFETY;
jule::Ptr<_1b687a818_RangeTable> _211c58508__L;
jule::Ptr<_1b687a818_RangeTable> _211c58508_LETTER;
jule::Array<jule::U8,256> _211c58508__PROPERTIES;
jule::Array<jule::U8,256> _1b687997c_FIRST;
jule::Array<_1b687997c_accept_range,16> _1b687997c_ACCEPT_RANGES;
jule::Array<jule::Str,4> _1b697da81_CPP_HEADER_EXTS;
jule::Array<jule::Str,3> _1b697da81_CPP_EXTS;
jule::Array<jule::Str,1> _1b697da81_OBJECTIVE_CPP_EXTS;
jule::Array<jule::Str,3> _1b698aa8d_DISTOS;
jule::Array<jule::Str,3> _1b698aa8d_DISTARCH;
jule::Str _1b69ce708_PATH_STDLIB;
jule::Str _1b69ce708_PATH_EXEC;
jule::Str _1b69ce708_PATH_WD;
jule::Str _1b69ce708_PATH_API;
jule::Array<jule::U8,32> _1b738619c_DE_BRUIJN32_TAB;
jule::Array<jule::U8,64> _1b738619c_DE_BRUIJN64_TAB;
_211ca7535_FloatInfo _211ca7535_F32_INFO;
_211ca7535_FloatInfo _211ca7535_F64_INFO;
jule::Array<jule::Array<jule::U64,2>,696> _211d62436_DETAILED_POWS_OF_TEN;
jule::Slice<jule::Int> _211cadddd_POWTAB;
jule::Slice<jule::F64> _211cadddd_F64_POW10;
jule::Slice<jule::F32> _211cadddd_F32_POW10;
jule::Array<jule::U64,20> _211d646ad_U64_POW10;
jule::Slice<_1b6a7a1bb_LeftCheat> _1b6a7a1bb_LEFTCHEATS;
jule::Array<jule::I32,5> _1b7553d92_SPACES;
jule::Array<jule::Str,6> _1b7553d92_UNARY_OPS;
jule::Array<jule::Str,12> _1b7553d92_BIN_OPS;
jule::Array<jule::Str,2> _1b7553d92_POSTFIX_OPS;
jule::Array<jule::Str,11> _1b7553d92_ASSING_OPS;
jule::Array<_1b75960d2_KindPair,47> _1b75960d2_KEYWORDS;
jule::Array<_1b75960d2_KindPair,39> _1b75960d2_BASIC_OPS;
jule::Ptr<_1a6a19a50_TypeAlias> _1a90790e0_BUILTIN_TYPE_ALIAS_BYTE;
jule::Ptr<_1a6a19a50_TypeAlias> _1a90790e0_BUILTIN_TYPE_ALIAS_RUNE;
jule::Slice<jule::Str> _1b74b0d98_VARS;
jule::Slice<jule::Any> _1b7467756_deads;
jule::Slice<jule::Any> _1b7467756_checking;
jule::Any _1b7467756_current;
jule::Any _1b7467756_main_current;
jule::Array<jule::U8,12> _1a9612e81_MDAYS;
jule::Slice<jule::U8> _1a94c037c_INDENT;
jule::Array<jule::Array<jule::Str,2>,5> _211ad8025_HELP_MAP;
jule::Str _211b24e41_OUT_DIR;
jule::Str _211b24e41_OUT_NAME;
jule::Str _211b24e41_OUT;

inline void _211ad8b4c_AnsiEscape::_static_method_reset(void) {
	jule::out(jule::Str("\033[0m", 4));
}



inline void _211ad8b4c_AnsiEscape::_static_method_print(jule::Str _2121_escape,jule::Str _2134_text) {
	jule::out(_2121_escape);
	jule::out(_2134_text);
	_211ad8b4c_AnsiEscape::_static_method_reset();
}







std::ostream &operator<<(std::ostream &_Stream, const _211ad8b4c_AnsiEscape &_Src) {
	_Stream << "AnsiEscape{";
	_Stream << "}";
	return _Stream;
}



inline void _211ad8b4c_Logger::_static_method_log_flat(_1b6986b22_Log& _3225_l) {
	jule::outln(_3225_l._field_text);
}



inline void _211ad8b4c_Logger::_static_method_log_error(_1b6986b22_Log& _3526_l) {
	jule::out(jule::Str("\033[31m", 5));
	jule::out(jule::Str("error: ", 7));
	jule::out(_3526_l._field_text);
	_211ad8b4c_AnsiEscape::_static_method_reset();
	if (_3526_l._field_path.len() != 0LL) {
		jule::out(jule::Str("\n  --> ", 7));
		jule::out(_3526_l._field_path);
	}
	if ((_3526_l._field_row != 0LL) && (_3526_l._field_column != 0LL)) {
		jule::out(jule::Str(":", 1));
		jule::out(_1b6ac3d91_itoa(_3526_l._field_row));
		jule::out(jule::Str(":", 1));
		jule::out(_1b6ac3d91_itoa(_3526_l._field_column));
	}
	if (_3526_l._field_line.len() != 0LL) {
		jule::Str _5221_line = _1cea16edb_trim_left(_3526_l._field_line,jule::Str("\r\n\v\b ", 5));
		jule::I64 _5321_offset = (_3526_l._field_line.len() - _5221_line.len()) + 1LL;
		jule::I64 _5421_old_len = _5221_line.len();
		_5221_line=_1cea16edb_trim_left(_5221_line,jule::Str("\t", 1));
		if (_5421_old_len != _5221_line.len()) {
			_5321_offset+=static_cast<jule::I64>((_5421_old_len - _5221_line.len()) << 3LLU);
		}
		jule::out(jule::Str("\n  ", 3));
		jule::Str _6017_row = _1b6ac3d91_itoa(_3526_l._field_row);
		jule::out(_6017_row);
		jule::out(jule::Str(" | ", 3));
		jule::out(_5221_line);
		jule::out(jule::Str("\n  ", 3));
		jule::out(_1cea16edb_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_6017_row.len())));
		jule::out(jule::Str(" | ", 3));
		jule::out(_1cea16edb_repeat(jule::Str(" ", 1),static_cast<jule::Int>(_3526_l._field_column - _5321_offset)));
		jule::out(jule::Str("^", 1));
		if (_3526_l._field_suggestion.len() != 0LL) {
			jule::out(jule::Str("\n  ", 3));
			jule::out(_1cea16edb_repeat(jule::Str(" ", 1),static_cast<jule::I64>(_6017_row.len())));
			jule::out(jule::Str(" | ", 3));
			_211ad8b4c_AnsiEscape::_static_method_print(jule::Str("\033[95m", 5),jule::Str("suggestion: ", 12));
			jule::out(_3526_l._field_suggestion);
		}
	}
	jule::outln(jule::Str("\n", 1));
}



inline void _211ad8b4c_Logger::_static_method_log(_1b6986b22_Log& _8120_l) {
	{
		auto &_match_expr{ _8120_l._field_kind };
		
		if (_match_expr == 0LLU) {
			_case_begin_4405490912:;
			{
				_211ad8b4c_Logger::_static_method_log_flat(_8120_l);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_4405491152:;
			{
				_211ad8b4c_Logger::_static_method_log_error(_8120_l);
			}
		}
		_match_end_4405490768:;
	}
}



inline void _211ad8b4c_Logger::_static_method_print_logs(jule::Slice<_1b6986b22_Log>& _8927_logs) {
	{
		auto &expr = _8927_logs;
		auto it = expr.begin();
		_iter_begin_4405495232:;
		if (it != expr.end()) {
			_1b6986b22_Log &_211ad8b4c_l = *it;
			{
				_211ad8b4c_Logger::_static_method_log(_211ad8b4c_l);
			}
			_iter_next_4405495232:;
			++it;
			goto _iter_begin_4405495232;
		}
		_iter_end_4405495232:;
	}
	jule::out(jule::Str("=== ", 4));
	jule::out(_1b6ac3d91_itoa(static_cast<jule::I64>(_8927_logs.len())));
	jule::outln(jule::Str(" error generated ===", 20));
}







std::ostream &operator<<(std::ostream &_Stream, const _211ad8b4c_Logger &_Src) {
	_Stream << "Logger{";
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b687a818_FoldPair &_Src) {
	_Stream << "FoldPair{";
	_Stream << "from:" << _Src._field_from << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b687a818_CaseRange &_Src) {
	_Stream << "CaseRange{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "delta:" << _Src._field_delta;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b687a818_Range16 &_Src) {
	_Stream << "Range16{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b687a818_Range32 &_Src) {
	_Stream << "Range32{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi << ", ";
	_Stream << "stride:" << _Src._field_stride;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b687a818_RangeTable &_Src) {
	_Stream << "RangeTable{";
	_Stream << "r16:" << _Src._field_r16 << ", ";
	_Stream << "r32:" << _Src._field_r32 << ", ";
	_Stream << "latin_offset:" << _Src._field_latin_offset;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b687997c_accept_range &_Src) {
	_Stream << "accept_range{";
	_Stream << "lo:" << _Src._field_lo << ", ";
	_Stream << "hi:" << _Src._field_hi;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _1ce9be05e_LazyBuff::_method_index(jule::Int _5424_i) {
	if ((*this)._field_buff != nullptr) {
		return (*this)._field_buff[_5424_i];
	}
	return (*this)._field_path[_5424_i];
}



inline void _1ce9be05e_LazyBuff::_method_append(jule::U8 _6125_c) {
	if ((*this)._field_buff == nullptr) {
		if (((*this)._field_w < (*this)._field_path.len()) && ((*this)._field_path[(*this)._field_w] == _6125_c)) {
			((*this)._field_w)++;
			return;
		}
		(*this)._field_buff=jule::Slice<jule::U8>::alloc(static_cast<jule::I64>((*this)._field_path.len()));
		copy((*this)._field_buff,static_cast<jule::Slice<jule::U8>>((*this)._field_path.slice(0LL,(*this)._field_w)));
	}
	(*this)._field_buff[(*this)._field_w]=_6125_c;
	((*this)._field_w)++;
}



inline jule::Str _1ce9be05e_LazyBuff::_method_string(void) {
	if ((*this)._field_buff == nullptr) {
		return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len + (*this)._field_w);
	}
	return (*this)._field_vol_and_path.slice(0LL,(*this)._field_vol_len) + static_cast<jule::Str>((*this)._field_buff.slice(0LL,(*this)._field_w));
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce9be05e_LazyBuff &_Src) {
	_Stream << "LazyBuff{";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "buff:" << _Src._field_buff << ", ";
	_Stream << "w:" << _Src._field_w << ", ";
	_Stream << "vol_and_path:" << _Src._field_vol_and_path << ", ";
	_Stream << "vol_len:" << _Src._field_vol_len;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce947cda_DirEntry &_Src) {
	_Stream << "DirEntry{";
	_Stream << "name:" << _Src._field_name << ", ";
	_Stream << "stat:" << _Src._field_stat;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>> _1ce947cda_Directory::_static_method_read(jule::Str _1524_path) {
	jule::Slice<jule::Ptr<_1ce947cda_DirEntry>> _1538_dirents = jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>();
	DIR* _1617_dir = _211c54070_opendir((&(_1524_path[0LL])));
	if (_1617_dir == nullptr) {
		return jule::Exceptional<jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>>(_1ce947c0d_get_last_fs_error());
	}
	for (;;) {
		{
			struct dirent* _2117_dirent = _211c54070_readdir(_1617_dir);
			if (_2117_dirent == nullptr) {
				goto _iter_end_4383960912;
			}
			jule::Str _2517_name = _1ce8d9a07_byte_ptr_to_str(((jule::U8*)((*(_2117_dirent)).d_name)));
			jule::Ptr<_1ce976e6d_Status> _2621_stat = ({
				auto except = _1ce976e6d_Status::_static_method_of(_1ce9be05e_join(jule::Slice<jule::Str>({_1524_path,_2517_name})));
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>>(except.error);
					return jule::Exceptional<jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>>(except.error);
				} jule::Ptr<_1ce976e6d_Status>();});
			});
			_1538_dirents = jule::alloc_for_append(_1538_dirents,1);_1538_dirents.__push(jule::new_struct<_1ce947cda_DirEntry>(new( std::nothrow ) _1ce947cda_DirEntry(_2517_name,_2621_stat)));
		}
	_iter_next_4383960912:;
	}
	_iter_end_4383960912:;
	_211c54070_closedir(_1617_dir);
	return jule::Exceptional<jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>>(jule::Any(), _1538_dirents);
}



inline jule::VoidExceptional _1ce947cda_Directory::_static_method_create(jule::Str _3926_path) {
	if (_211c54070_mkdir((&(_3926_path[0LL])),448LL) != 0LL) {
		return jule::VoidExceptional(_1ce947c0d_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1ce947cda_Directory::_static_method_remove(jule::Str _5126_path) {
	if (_211c54070_rmdir((&(_5126_path[0LL]))) != 0LL) {
		return jule::VoidExceptional(_1ce947c0d_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _1ce947cda_Directory &_Src) {
	_Stream << "Directory{";
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Ptr<_1ce96429b_File>> _1ce96429b_File::_static_method_open(jule::Str _1824_path,jule::Int _1835_flag,jule::Int _1848_mode) {
	jule::Int _1913_handle = _211c54070_open((&(_1824_path[0LL])),static_cast<jule::Int>(_1835_flag),_1848_mode);
	if (_1913_handle == -1LL) {
		return jule::Exceptional<jule::Ptr<_1ce96429b_File>>(_1ce947c0d_get_last_fs_error());
	}
	return jule::Exceptional<jule::Ptr<_1ce96429b_File>>(jule::Any(),_1ce96429b_File::_static_method_new(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_1913_handle))));
}



inline jule::VoidExceptional _1ce96429b_File::_static_method_remove(jule::Str _3026_path) {
	if (_211c54070_unlink((&(_3026_path[0LL]))) != 0LL) {
		return jule::VoidExceptional(_1ce947c0d_get_last_fs_error());
	} return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _1ce96429b_File::_method_write(jule::Slice<jule::U8> _4428_buff) {
	jule::Int _4445_n = jule::Int();
	if (_4428_buff.len() == 0LL) {
		_4445_n = 0LL;
		return jule::Exceptional<jule::Int>(jule::Any(),_4445_n);
	}
	_4445_n=static_cast<jule::Int>(static_cast<jule::Int>(_1e825ca7b_write(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),(&(_4428_buff[0LL])),static_cast<jule::Uint>(static_cast<jule::Uint>(_4428_buff.len())))));
	if (_4445_n == -1LL) {
		return jule::Exceptional<jule::Int>(_1ce947c0d_get_last_fs_error());
	}
	return jule::Exceptional<jule::Int>(jule::Any(),_4445_n);
}



inline jule::Exceptional<jule::Int> _1ce96429b_File::_method_read(jule::Slice<jule::U8> _6531_buff) {
	jule::Int _6548_n = jule::Int();
	if (_6531_buff.len() == 0LL) {
		_6548_n = 0LL;
		return jule::Exceptional<jule::Int>(jule::Any(),_6548_n);
	}
	_6548_n=static_cast<jule::Int>(static_cast<jule::Int>(_1e825ca7b_read(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),(&(_6531_buff[0LL])),static_cast<jule::Uint>(static_cast<jule::Uint>(_6531_buff.len())))));
	if (_6548_n == -1LL) {
		return jule::Exceptional<jule::Int>(_1ce947c0d_get_last_fs_error());
	}
	return jule::Exceptional<jule::Int>(jule::Any(),_6548_n);
}



inline jule::Ptr<_1ce96429b_File> _1ce96429b_File::_static_method_new(jule::Uintptr _4523_handle) {
	return jule::new_struct<_1ce96429b_File>(new( std::nothrow ) _1ce96429b_File(_4523_handle));
}



inline jule::Exceptional<jule::Ptr<_1ce96429b_File>> _1ce96429b_File::_static_method_create(jule::Str _5526_path) {
	return jule::Exceptional<jule::Ptr<_1ce96429b_File>>(jule::Any(),({
		auto except = _1ce96429b_File::_static_method_open(_5526_path,1538LL,438LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Ptr<_1ce96429b_File>>(except.error);
			return jule::Exceptional<jule::Ptr<_1ce96429b_File>>(except.error);
		} jule::Ptr<_1ce96429b_File>();});
	}));
}



inline jule::Exceptional<jule::Slice<jule::U8>> _1ce96429b_File::_static_method_read(jule::Str _6724_path) {
	jule::Ptr<_1ce976e6d_Status> _6813_s = ({
		auto except = _1ce976e6d_Status::_static_method_of(_6724_path);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_1ce976e6d_Status>();});
	});
	if ((!((*(_6813_s))._method_is_reg()))) {
		return jule::Exceptional<jule::Slice<jule::U8>>(14LLU);
	}
	if ((*(_6813_s))._field_size == 0LL) {
		return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),jule::Slice<jule::U8>::alloc(0LL));
	}
	jule::Ptr<_1ce96429b_File> _7817_f = ({
		auto except = _1ce96429b_File::_static_method_open(_6724_path,0LL,0LL);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Ptr<_1ce96429b_File>();});
	});
	__JULE_DEFER({
		({
			auto except = (*(_7817_f))._method_close();
			if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/fs/file.jule:79:17"));
		});
	});
	jule::Slice<jule::U8> _8117_buff = jule::Slice<jule::U8>::alloc(static_cast<jule::Int>((*(_6813_s))._field_size));
	jule::Int _8213_n = ({
		auto except = (*(_7817_f))._method_read(_8117_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
			return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
		} jule::Int();});
	});
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_8117_buff.slice(0LL,_8213_n));
}



inline jule::VoidExceptional _1ce96429b_File::_static_method_write(jule::Str _9125_path,jule::Slice<jule::U8> _9136_data,jule::Int _9150_perm) {
	jule::Ptr<_1ce96429b_File> _9217_f = ({
		auto except = _1ce96429b_File::_static_method_open(_9125_path,1537LL,_9150_perm);
		(except.ok()) ? (except.result) : ({{
			return jule::VoidExceptional(except.error);
			return jule::VoidExceptional(except.error);
		} jule::Ptr<_1ce96429b_File>();});
	});
	({
		auto except = (*(_9217_f))._method_write(_9136_data);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	});
	({
		auto except = (*(_9217_f))._method_close();
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::Exceptional<jule::I64> _1ce96429b_File::_method_seek(jule::I64 _10527_offset,jule::Int _10540_origin) {
	jule::I64 _10613_pos = _1e825ca7b_seek(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle)),_10527_offset,static_cast<jule::Int>(_10540_origin));
	if (_10613_pos == -1LL) {
		return jule::Exceptional<jule::I64>(_1ce947c0d_get_last_fs_error());
	}
	return jule::Exceptional<jule::I64>(jule::Any(),_10613_pos);
}



inline jule::VoidExceptional _1ce96429b_File::_method_close(void) {
	if (_1e825ca7b_close(static_cast<jule::Int>(static_cast<jule::Int>((*this)._field_handle))) == -1LL) {
		return jule::VoidExceptional(_1ce947c0d_get_last_fs_error());
	} return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _1ce96429b_File &_Src) {
	_Stream << "File{";
	_Stream << "handle:" << _Src._field_handle;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Ptr<_1ce976e6d_Status>> _1ce976e6d_Status::_static_method_of(jule::Str _1122_path) {
	struct stat _1217_handle = (struct stat){};
	jule::Int _1313_code = _211c54070_stat((&(_1122_path[0LL])),(&(_1217_handle)));
	if (_1313_code != -1LL) {
		return jule::Exceptional<jule::Ptr<_1ce976e6d_Status>>(jule::Any(),jule::new_struct<_1ce976e6d_Status>(new( std::nothrow ) _1ce976e6d_Status(static_cast<jule::Uint>(static_cast<jule::Uint>(_1217_handle.st_mode)),static_cast<jule::Uint>(static_cast<jule::Uint>(_1217_handle.st_size)))));
	}
	return jule::Exceptional<jule::Ptr<_1ce976e6d_Status>>(_1ce947c0d_get_last_fs_error());
}



inline jule::Bool _1ce976e6d_Status::_method_is_dir(void) {
	return ((*this)._field_mode & 16384LL) == 16384LL;
}



inline jule::Bool _1ce976e6d_Status::_method_is_reg(void) {
	return ((*this)._field_mode & 32768LL) == 32768LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1ce976e6d_Status &_Src) {
	_Stream << "Status{";
	_Stream << "mode:" << _Src._field_mode << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b6a03760_Cmd> _1b6a03760_Cmd::_static_method_new(jule::Str _2923_file) {
	return jule::new_struct<_1b6a03760_Cmd>(new( std::nothrow ) _1b6a03760_Cmd(_2923_file,-1LL,jule::Slice<jule::Str>(),jule::Slice<jule::Str>()));
}



inline jule::Int _1b6a03760_Cmd::_method_pid(void) {
	return (*this)._field__pid;
}



inline jule::Str _1b6a03760_Cmd::_method_file(void) {
	return (*this)._field__fle;
}



inline jule::VoidExceptional _1b6a03760_Cmd::_method_spawn(void) {
	if ((*this)._field__pid != -1LL) {
		return jule::VoidExceptional(jule::Str("command already spawned", 23));
	}
	(*this)._field__pid=static_cast<jule::Int>(fork());
	{
		auto &_match_expr{ (*this)._field__pid };
		
		if (_match_expr == -1LL) {
			_case_begin_4384121984:;
			{
				return jule::VoidExceptional(jule::Str("fork failed", 11));
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_4384122080:;
			{
				jule::Int _3117_stat = ((((*this)._field_env == nullptr)) ? (__jule_execvp((*this)._field__fle,(*this)._field_args)) : (static_cast<jule::Int>(__jule_execve((*this)._field__fle,(*this)._field_args,(*this)._field_env))));
				if (_3117_stat == -1LL) {
					return jule::VoidExceptional(_1b6a0330e_get_last_process_error());
				}
				_211c5d002_exit(255LL);
			}
		}
		_match_end_4384121904:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1b6a03760_Cmd::_method_kill(void) {
	if (kill((*this)._field__pid,1LL) != 0LL) {
		return jule::VoidExceptional(jule::Str("kill failed", 11));
	}
	(*this)._field__pid=-1LL; return jule::VoidExceptional(); }



inline jule::Exceptional<jule::Int> _1b6a03760_Cmd::_method_wait(void) {
	if ((*this)._field__pid == -1LL) {
		return jule::Exceptional<jule::Int>(jule::Str("command is not spawned", 22));
	}
	jule::Int _6017_status = 0LL;
	if (waitpid((*this)._field__pid,((signed*)((&(_6017_status)))),0LL) == -1LL) {
		return jule::Exceptional<jule::Int>(_1b6a0330e_get_last_process_error());
	}
	(*this)._field__pid=-1LL;
	return jule::Exceptional<jule::Int>(jule::Any(),static_cast<jule::Int>(WEXITSTATUS(_6017_status)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6a03760_Cmd &_Src) {
	_Stream << "Cmd{";
	_Stream << "_fle:" << _Src._field__fle << ", ";
	_Stream << "_pid:" << _Src._field__pid << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "env:" << _Src._field_env;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6986b22_Log &_Src) {
	_Stream << "Log{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "text:" << _Src._field_text << ", ";
	_Stream << "line:" << _Src._field_line << ", ";
	_Stream << "suggestion:" << _Src._field_suggestion;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _211ca7535_FloatInfo &_Src) {
	_Stream << "FloatInfo{";
	_Stream << "mantbits:" << _Src._field_mantbits << ", ";
	_Stream << "expbits:" << _Src._field_expbits << ", ";
	_Stream << "bias:" << _Src._field_bias;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _211ca7535_DecimalSlice &_Src) {
	_Stream << "DecimalSlice{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6a7a1bb_LeftCheat &_Src) {
	_Stream << "LeftCheat{";
	_Stream << "delta:" << _Src._field_delta << ", ";
	_Stream << "cutoff:" << _Src._field_cutoff;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b6a7a1bb_Decimal::_method_set(jule::Str _23422_s) {
	jule::Bool _23432_ok = jule::Bool();
	jule::Int _23517_i = 0LL;
	(*this)._field_neg=false;
	(*this)._field_trunc=false;
	if (_23517_i >= _23422_s.len()) {
		return _23432_ok;
	}
	{
		
		if (_23422_s[_23517_i] == '+') {
			_case_begin_4389928848:;
			{
				(_23517_i)++;
			}
		}
		else if (_23422_s[_23517_i] == '-') {
			_case_begin_4389928944:;
			{
				(*this)._field_neg=true;
				(_23517_i)++;
			}
		}
		_match_end_4389927648:;
	}
	jule::Bool _25217_sawdot = false;
	jule::Bool _25317_sawdigits = false;
	for (; _23517_i < _23422_s.len(); (_23517_i)++) {
		{
			{
				
				if (_23422_s[_23517_i] == '_') {
					_case_begin_4389935584:;
					{
						goto _iter_next_4389927200;
					}
				}
				else if (_23422_s[_23517_i] == '.') {
					_case_begin_4389935696:;
					{
						if (_25217_sawdot) {
							return _23432_ok;
						}
						_25217_sawdot=true;
						(*this)._field_dp=(*this)._field_nd;
						goto _iter_next_4389927200;
					}
				}
				else if (('0' <= _23422_s[_23517_i]) && (_23422_s[_23517_i] <= '9')) {
					_case_begin_4389935808:;
					{
						_25317_sawdigits=true;
						if ((_23422_s[_23517_i] == '0') && ((*this)._field_nd == 0LL)) {
							((*this)._field_dp)--;
							goto _iter_next_4389927200;
						}
						if ((*this)._field_nd < 800LL) {
							(*this)._field_d[(*this)._field_nd]=_23422_s[_23517_i];
							((*this)._field_nd)++;
						} else if (_23422_s[_23517_i] != '0') {
							(*this)._field_trunc=true;
						}
						goto _iter_next_4389927200;
					}
				}
				_match_end_4389935344:;
			}
			goto _iter_end_4389927200;
		}
	_iter_next_4389927200:;
	}
	_iter_end_4389927200:;
	if ((!(_25317_sawdigits))) {
		return _23432_ok;
	}
	if ((!(_25217_sawdot))) {
		(*this)._field_dp=(*this)._field_nd;
	}
	if ((_23517_i < _23422_s.len()) && (_211cb0593_lower(_23422_s[_23517_i]) == 'e')) {
		(_23517_i)++;
		if (_23517_i >= _23422_s.len()) {
			return _23432_ok;
		}
		jule::Int _29821_esign = 1LL;
		if (_23422_s[_23517_i] == '+') {
			(_23517_i)++;
		} else if (_23422_s[_23517_i] == '-') {
			(_23517_i)++;
			_29821_esign=-1LL;
		}
		if (((_23517_i >= _23422_s.len()) || (_23422_s[_23517_i] < '0')) || (_23422_s[_23517_i] > '9')) {
			return _23432_ok;
		}
		jule::Int _30821_e = 0LL;
		for (; (_23517_i < _23422_s.len()) && ((('0' <= _23422_s[_23517_i]) && (_23422_s[_23517_i] <= '9')) || (_23422_s[_23517_i] == '_')); (_23517_i)++) {
			{
				if (_23422_s[_23517_i] == '_') {
					goto _iter_next_4389959456;
				}
				if (_30821_e < 10000LL) {
					_30821_e=static_cast<jule::Int>(((_30821_e * 10LL) + static_cast<jule::Int>(_23422_s[_23517_i])) - '0');
				}
			}
		_iter_next_4389959456:;
		}
		_iter_end_4389959456:;
		(*this)._field_dp+=static_cast<jule::Int>(_30821_e * _29821_esign);
	}
	if (_23517_i != _23422_s.len()) {
		return _23432_ok;
	}
	_23432_ok=true;
	return _23432_ok;
}



inline std::tuple<jule::U64,jule::Bool> _1b6a7a1bb_Decimal::_method_float_bits(_211ca7535_FloatInfo& _32830_flt) {
	jule::U64 _32848_b = jule::U64();
	jule::Bool _32856_overflow = jule::Bool();
	jule::Int _32917_exp = 0LL;
	jule::U64 _33017_mant = 0LLU;
	if ((*this)._field_nd == 0LL) {
		_33017_mant=0LL;
		_32917_exp=_32830_flt._field_bias;
		goto _julec_label_out;
	}
	if ((*this)._field_dp > 310LL) {
		goto _julec_label_overflow;
	}
	if ((*this)._field_dp < -330LL) {
		_33017_mant=0LL;
		_32917_exp=_32830_flt._field_bias;
		goto _julec_label_out;
	}
	_32917_exp=0LL;
	while ((*this)._field_dp > 0LL) {
		{
			jule::Int _35521_n = 0LL;
			if ((*this)._field_dp >= _211cadddd_POWTAB.len()) {
				_35521_n=27LL;
			} else {
				_35521_n=_211cadddd_POWTAB[(*this)._field_dp];
			}
			(*this)._method_shift(static_cast<jule::Int>((-(_35521_n))));
			_32917_exp+=_35521_n;
		}
	_iter_next_4389987104:;
	}
	_iter_end_4389987104:;
	while (((*this)._field_dp < 0LL) || (((*this)._field_dp == 0LL) && ((*this)._field_d.__at(0LL) < '5'))) {
		{
			jule::Int _36521_n = 0LL;
			if ((-((*this)._field_dp)) >= _211cadddd_POWTAB.len()) {
				_36521_n=27LL;
			} else {
				_36521_n=_211cadddd_POWTAB[(-((*this)._field_dp))];
			}
			(*this)._method_shift(_36521_n);
			_32917_exp-=_36521_n;
		}
	_iter_next_4389989024:;
	}
	_iter_end_4389989024:;
	(_32917_exp)--;
	if (_32917_exp < (_32830_flt._field_bias + 1LL)) {
		jule::Int _38217_n = (_32830_flt._field_bias + 1LL) - _32917_exp;
		(*this)._method_shift(static_cast<jule::Int>((-(_38217_n))));
		_32917_exp+=_38217_n;
	}
	if ((_32917_exp - _32830_flt._field_bias) >= static_cast<jule::Int>((1LL << _32830_flt._field_expbits) - 1LL)) {
		goto _julec_label_overflow;
	}
	(*this)._method_shift(static_cast<jule::Int>(static_cast<jule::Int>(1LL + _32830_flt._field_mantbits)));
	_33017_mant=static_cast<jule::U64>((*this)._method_rounded_integer());
	if (_33017_mant == (2LL << _32830_flt._field_mantbits)) {
		_33017_mant>>=1LL;
		(_32917_exp)++;
		if ((_32917_exp - _32830_flt._field_bias) >= static_cast<jule::Int>((1LL << _32830_flt._field_expbits) - 1LL)) {
			goto _julec_label_overflow;
		}
	}
	if ((_33017_mant & (1LL << _32830_flt._field_mantbits)) == 0LL) {
		_32917_exp=_32830_flt._field_bias;
	}
	goto _julec_label_out;
	_julec_label_overflow:;
	_33017_mant=0LL;
	_32917_exp=static_cast<jule::Int>(static_cast<jule::Int>(((1LL << _32830_flt._field_expbits) - 1LL) + static_cast<jule::Uint>(_32830_flt._field_bias)));
	_32856_overflow=true;
	_julec_label_out:;
	jule::U64 _41817_bits = _33017_mant & ((static_cast<jule::U64>(1LLU) << _32830_flt._field_mantbits) - 1LL);
	_41817_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_32917_exp - _32830_flt._field_bias) & static_cast<jule::Int>((1LL << _32830_flt._field_expbits) - 1LL)) << _32830_flt._field_mantbits);
	if ((*this)._field_neg) {
		_41817_bits|=static_cast<jule::Uint>((1LL << _32830_flt._field_mantbits) << _32830_flt._field_expbits);
	}
	_32848_b = _41817_bits;
	return std::make_tuple(_32848_b,_32856_overflow);
}



inline void _1b6a7a1bb_Decimal::_method_assign(jule::U64 _15229_v) {
	jule::Array<jule::U8,24> _15317_buf = jule::Array<jule::U8,24>();
	jule::Int _15617_n = 0LL;
	while (_15229_v > 0LL) {
		{
			jule::U64 _15817_v1 = _15229_v / 10LL;
			_15229_v-=static_cast<jule::U64>(10LL * _15817_v1);
			_15317_buf[_15617_n]=static_cast<jule::U8>(static_cast<jule::U8>(_15229_v + '0'));
			(_15617_n)++;
			_15229_v=_15817_v1;
		}
	_iter_next_4390033888:;
	}
	_iter_end_4390033888:;
	(*this)._field_nd=0LL;
	(_15617_n)--;
	for (; _15617_n >= 0LL; (_15617_n)--) {
		{
			(*this)._field_d[(*this)._field_nd]=_15317_buf[_15617_n];
			((*this)._field_nd)++;
		}
	_iter_next_4390038368:;
	}
	_iter_end_4390038368:;
	(*this)._field_dp=(*this)._field_nd;
	_1b6a7a1bb_trim((*this));
}



inline void _1b6a7a1bb_Decimal::_method_shift(jule::Int _17728_k) {
	{
		
		if ((*this)._field_nd == 0LL) {
			_case_begin_4390044512:;
		}
		else if (_17728_k > 0LL) {
			_case_begin_4390044624:;
			{
				while (_17728_k > 60LLU) {
					{
						_1b6a7a1bb_left_shift((*this),60LLU);
						_17728_k-=60LLU;
					}
				_iter_next_4390046176:;
				}
				_iter_end_4390046176:;
				_1b6a7a1bb_left_shift((*this),static_cast<jule::Uint>(static_cast<jule::Uint>(_17728_k)));
			}
		}
		else if (_17728_k < 0LL) {
			_case_begin_4390044736:;
			{
				while (_17728_k < -60LL) {
					{
						_1b6a7a1bb_right_shift((*this),60LLU);
						_17728_k+=60LLU;
					}
				_iter_next_4390046976:;
				}
				_iter_end_4390046976:;
				_1b6a7a1bb_right_shift((*this),static_cast<jule::Uint>(static_cast<jule::Uint>((-(_17728_k)))));
			}
		}
		_match_end_4390044272:;
	}
}



inline void _1b6a7a1bb_Decimal::_method_round_down(jule::Int _19729_nd) {
	if ((_19729_nd < 0LL) || (_19729_nd >= (*this)._field_nd)) {
		return;
	}
	(*this)._field_nd=_19729_nd;
	_1b6a7a1bb_trim((*this));
}



inline void _1b6a7a1bb_Decimal::_method_round_up(jule::Int _20627_nd) {
	if ((_20627_nd < 0LL) || (_20627_nd >= (*this)._field_nd)) {
		return;
	}
	jule::Int _21217_i = _20627_nd - 1LL;
	for (; _21217_i >= 0LL; (_21217_i)--) {
		{
			jule::U8 _21417_c = (*this)._field_d[_21217_i];
			if (_21417_c < '9') {
				((*this)._field_d[_21217_i])++;
				(*this)._field_nd=static_cast<jule::Int>(_21217_i + 1LL);
				return;
			}
		}
	_iter_next_4390061760:;
	}
	_iter_end_4390061760:;
	(*this)._field_d.__at(0LL)='1';
	(*this)._field_nd=1LL;
	((*this)._field_dp)++;
}



inline void _1b6a7a1bb_Decimal::_method_round(jule::Int _23324_nd) {
	if ((_23324_nd < 0LL) || (_23324_nd >= (*this)._field_nd)) {
		return;
	}
	if (_1b6a7a1bb_should_round_up((*this),_23324_nd)) {
		(*this)._method_round_up(_23324_nd);
	} else {
		(*this)._method_round_down(_23324_nd);
	}
}



inline jule::U64 _1b6a7a1bb_Decimal::_method_rounded_integer(void) {
	if ((*this)._field_dp > 20LL) {
		return jule::MAX_U64;
	}
	jule::Int _25017_i = 0LL;
	jule::U64 _25117_n = 0LLU;
	for (; (_25017_i < (*this)._field_dp) && (_25017_i < (*this)._field_nd); (_25017_i)++) {
		{
			_25117_n=static_cast<jule::U64>((_25117_n * 10LL) + static_cast<jule::U64>((*this)._field_d[_25017_i] - '0'));
		}
	_iter_next_4390074320:;
	}
	_iter_end_4390074320:;
	for (; _25017_i < (*this)._field_dp; (_25017_i)++) {
		{
			_25117_n*=10LL;
		}
	_iter_next_4390079312:;
	}
	_iter_end_4390079312:;
	if (_1b6a7a1bb_should_round_up((*this),(*this)._field_dp)) {
		(_25117_n)++;
	}
	return _25117_n;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6a7a1bb_Decimal &_Src) {
	_Stream << "Decimal{";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "nd:" << _Src._field_nd << ", ";
	_Stream << "dp:" << _Src._field_dp << ", ";
	_Stream << "neg:" << _Src._field_neg << ", ";
	_Stream << "trunc:" << _Src._field_trunc;
	_Stream << "}";
	return _Stream;
}



inline jule::U8 _1b7553d92_Token::_method_prec(void) {
	if ((*this)._field_id != 7LLU) {
		return 0LL;
	}
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr == jule::Str("*", 1) || _match_expr == jule::Str("%", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str(">>", 2) || _match_expr == jule::Str("<<", 2) || _match_expr == jule::Str("&", 1)) {
			_case_begin_4390549088:;
			{
				return 5LL;
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_4390549184:;
			{
				return 4LL;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("=", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_4390549280:;
			{
				return 3LL;
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_4390549376:;
			{
				return 2LL;
			}
		}
		else if (_match_expr == jule::Str("||", 2)) {
			_case_begin_4390549504:;
			{
				return 1LL;
			}
		}
		else {
			_case_begin_4390548912:;
			{
				return 0LL;
			}
		}
		_match_end_4390547568:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7553d92_Token &_Src) {
	_Stream << "Token{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b750c763_File::_method_is_ok(void) {
	({
		auto except = _1ce976e6d_Status::_static_method_of((*this)._field__path);
		if (!except.ok()) {
			return false;
		}
	});
	return true;
}



inline void _1b750c763_File::_method_fill(jule::Slice<jule::U8> _2431_data) {
	(*this)._field_data=_2431_data;
}



inline jule::Str _1b750c763_File::_method_path(void) {
	return (*this)._field__path;
}



inline jule::Str _1b750c763_File::_method_dir(void) {
	return _1ce9be05e_dir((*this)._field__path);
}



inline jule::Str _1b750c763_File::_method_name(void) {
	return _1ce9be05e_base((*this)._field__path);
}



inline jule::Uintptr _1b750c763_File::_method_addr(void) {
	return static_cast<jule::Uintptr>(((jule::Uintptr)((&((*this))))));
}



inline jule::Slice<_1b7553d92_Token> _1b750c763_File::_method_tokens(void) {
	return (*this)._field__tokens;
}



inline jule::Str _1b750c763_File::_method_get_row(jule::Int _4426_row) {
	jule::Int _4517_n = 0LL;
	jule::Int _4617_line_start = 0LL;
	jule::Int _4717_i = 0LL;
	for (; _4717_i < (*this)._field_data.len(); (_4717_i)++) {
		{
			if ((*this)._field_data[_4717_i] != '\n') {
				goto _iter_next_4390573904;
			}
			(_4517_n)++;
			if (_4517_n == _4426_row) {
				return static_cast<jule::Str>((*this)._field_data.slice(_4617_line_start,_4717_i));
			}
			_4617_line_start=static_cast<jule::Int>(_4717_i + 1LL);
		}
	_iter_next_4390573904:;
	}
	_iter_end_4390573904:;
	return jule::Str();
}







std::ostream &operator<<(std::ostream &_Stream, const _1b750c763_File &_Src) {
	_Stream << "File{";
	_Stream << "data:" << _Src._field_data << ", ";
	_Stream << "_path:" << _Src._field__path << ", ";
	_Stream << "_tokens:" << _Src._field__tokens;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b75960d2_KindPair &_Src) {
	_Stream << "KindPair{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "id:" << _Src._field_id;
	_Stream << "}";
	return _Stream;
}



inline void _1b75960d2_Lex::_method_push_err(jule::Str _45127_fmt,jule::Slice<jule::Any> _45140_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1b75960d2_make_err((*this)._field_row,(*this)._field_column,(*this)._field_file,_45127_fmt,_45140_args));
}



inline void _1b75960d2_Lex::_method_push_err_tok(_1b7553d92_Token& _45632_token,jule::Str _45646_fmt) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1b75960d2_make_err(_45632_token._field_row,_45632_token._field_column,(*this)._field_file,_45646_fmt,jule::Slice<jule::Any>()));
}



inline void _1b75960d2_Lex::_method_lex(void) {
	(*this)._field_errors=nullptr;
	(*this)._method_new_line();
	while ((*this)._field_pos < (*((*this)._field_file))._field_data.len()) {
		{
			_1b7553d92_Token _46621_token = (*this)._method_token();
			if (_46621_token._field_id != 0LLU) {
				(*this)._field_tokens = jule::alloc_for_append((*this)._field_tokens,1);(*this)._field_tokens.__push(_46621_token);
			}
		}
	_iter_next_4390589552:;
	}
	_iter_end_4390589552:;
}



inline jule::Str _1b75960d2_Lex::_method_id(jule::Slice<jule::U8>& _47522_ln) {
	if (_47522_ln.len() == 0LL) {
		return jule::Str();
	}
	jule::I32 _47914_r;
	jule::Int _47921_i;
	std::tie(_47914_r,_47921_i) = _1b687997c_decode_rune(_47522_ln);
	if ((_47914_r != '_') && (!(_1b7553d92_is_letter(_47914_r)))) {
		return jule::Str();
	}
	while (_47921_i < _47522_ln.len()) {
		{
			jule::I32 _48518_r;
			jule::Int _48521_n;
			std::tie(_48518_r,_48521_n) = _1b687997c_decode_rune(_47522_ln.slice(_47921_i));
			if (((_48518_r != '_') && (!(_1b7553d92_is_decimal(static_cast<jule::U8>(static_cast<jule::U8>(_48518_r)))))) && (!(_1b7553d92_is_letter(_48518_r)))) {
				(*this)._field_pos+=_47921_i;
				return static_cast<jule::Str>(_47522_ln.slice(0LL,_47921_i));
			}
			_47921_i+=_48521_n;
		}
	_iter_next_4390602816:;
	}
	_iter_end_4390602816:;
	(*this)._field_pos+=static_cast<jule::I64>(_47522_ln.len());
	return static_cast<jule::Str>(_47522_ln);
}



inline jule::Slice<jule::U8> _1b75960d2_Lex::_method_resume(void) {
	jule::Int _50017_i = (*this)._field_pos;
	for (; _50017_i < (*((*this)._field_file))._field_data.len(); (_50017_i)++) {
		{
			jule::I32 _50217_r = static_cast<jule::I32>((*((*this)._field_file))._field_data[_50017_i]);
			if (_1b7553d92_is_space(_50217_r)) {
				
				((*this)._field_pos)++;
				{
					auto &_match_expr{ _50217_r };
					
					if (_match_expr == '\n') {
						_case_begin_4390619040:;
						{
							(*this)._method_new_line();
						}
					}
					else if (_match_expr == '\t') {
						_case_begin_4390620256:;
						{
							(*this)._field_column+=8LL;
						}
					}
					else {
						_case_begin_4390618880:;
						{
							((*this)._field_column)++;
						}
					}
					_match_end_4390618800:;
				}
				goto _iter_next_4390613648;
			}
			jule::Int _51421_j = _50017_i;
			for (; _51421_j < (*((*this)._field_file))._field_data.len(); (_51421_j)++) {
				{
					if ((*((*this)._field_file))._field_data[_51421_j] == '\n') {
						goto _iter_end_4390616640;
					}
				}
			_iter_next_4390616640:;
			}
			_iter_end_4390616640:;
			return (*((*this)._field_file))._field_data.slice(_50017_i,_51421_j);
		}
	_iter_next_4390613648:;
	}
	_iter_end_4390613648:;
	return nullptr;
}



inline void _1b75960d2_Lex::_method_lex_line_comment(_1b7553d92_Token& _52640_token) {
	jule::Int _52713_start = (*this)._field_pos;
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*((*this)._field_file))._field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _53117_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if ((_53117_r == '\n') || (_53117_r == '\r')) {
				if ((*this)._method_is_first_token_of_line()) {
					_52640_token._field_id=18LLU;
					_52640_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_52713_start,(*this)._field_pos));
				}
				return;
			}
		}
	_iter_next_4390629536:;
	}
	_iter_end_4390629536:;
	if ((*this)._method_is_first_token_of_line()) {
		_52640_token._field_id=18LLU;
		_52640_token._field_kind=static_cast<jule::Str>((*((*this)._field_file))._field_data.slice(_52713_start));
	}
}



inline void _1b75960d2_Lex::_method_lex_range_comment(void) {
	(*this)._field_pos+=2LL;
	for (; (*this)._field_pos < (*((*this)._field_file))._field_data.len(); ((*this)._field_pos)++) {
		{
			jule::U8 _55017_r = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_55017_r == '\r') {
				goto _iter_next_4390641824;
			}
			if (_55017_r == '\n') {
				(*this)._method_new_line();
				goto _iter_next_4390641824;
			}
			(*this)._field_column+=1LL;
			if (((((*this)._field_pos + 1LL) < (*((*this)._field_file))._field_data.len()) && (_55017_r == '*')) && ((*((*this)._field_file))._field_data[(*this)._field_pos + 1LL] == '/')) {
				(*this)._field_column+=2LL;
				(*this)._field_pos+=2LL;
				return;
			}
		}
	_iter_next_4390641824:;
	}
	_iter_end_4390641824:;
	(*this)._method_push_err(jule::Str("missing block comment close", 27),jule::Slice<jule::Any>());
}



inline jule::Str _1b75960d2_Lex::_method_num(jule::Slice<jule::U8>& _57123_txt) {
	jule::Str _57138_lit = jule::Str();
	if (_57123_txt[0LL] == '_') {
		_57138_lit = jule::Str();
		return _57138_lit;
	}
	_57138_lit=_1b75960d2_hex_num(_57123_txt);
	if (_57138_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_57138_lit=_1b75960d2_octal_num(_57123_txt);
	if (_57138_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_57138_lit=_1b75960d2_binary_num(_57123_txt);
	if (_57138_lit != jule::Str()) {
		goto _julec_label_end;
	}
	_57138_lit=_1b75960d2_common_num(_57123_txt);
	_julec_label_end:;
	(*this)._field_pos+=static_cast<jule::I64>(_57138_lit.len());
	return _57138_lit;
}



inline jule::Str _1b75960d2_Lex::_method_escape_seq(jule::Slice<jule::U8>& _59330_txt) {
	jule::Str _59417_seq = jule::Str();
	if (_59330_txt.len() < 2LL) {
		goto _julec_label_end;
	}
	{
		auto &_match_expr{ _59330_txt[1LL] };
		
		if (_match_expr == '\\' || _match_expr == '\'' || _match_expr == '\"' || _match_expr == 'a' || _match_expr == 'b' || _match_expr == 'f' || _match_expr == 'n' || _match_expr == 'r' || _match_expr == 't' || _match_expr == 'v') {
			_case_begin_4390676496:;
			{
				(*this)._field_pos+=2LL;
				return static_cast<jule::Str>(_59330_txt.slice(0LL,2LL));
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_4390676272:;
			{
				_59417_seq=_1b75960d2_big_unicode_point_escape(_59330_txt);
			}
		}
		else if (_match_expr == 'u') {
			_case_begin_4390675824:;
			{
				_59417_seq=_1b75960d2_little_unicode_point_escape(_59330_txt);
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_4390675920:;
			{
				_59417_seq=_1b75960d2_hex_byte_escape(_59330_txt);
			}
		}
		else {
			_case_begin_4390675520:;
			{
				_59417_seq=_1b75960d2_byte_escape(_59330_txt);
			}
		}
		_match_end_4390675440:;
	}
	_julec_label_end:;
	if (_59417_seq == jule::Str()) {
		((*this)._field_pos)++;
		(*this)._method_push_err(jule::Str("invalid escape sequence", 23),jule::Slice<jule::Any>());
		return jule::Str();
	}
	(*this)._field_pos+=static_cast<jule::I64>(_59417_seq.len());
	return _59417_seq;
}



inline jule::Str _1b75960d2_Lex::_method_get_rune(jule::Slice<jule::U8>& _62728_txt,jule::Bool _62741_raw) {
	if ((!(_62741_raw)) && (_62728_txt[0LL] == '\\')) {
		return (*this)._method_escape_seq(_62728_txt);
	}
	jule::I32 _63214_r;
	jule::Int _63217_n;
	std::tie(_63214_r,_63217_n) = _1b687997c_decode_rune(_62728_txt);
	(*this)._field_pos+=_63217_n;
	return static_cast<jule::Str>(_63214_r);
}



inline jule::Str _1b75960d2_Lex::_method_lex_rune(jule::Slice<jule::U8>& _63728_txt) {
	jule::Str _63817_run = jule::Str("'", 1);
	((*this)._field_column)++;
	jule::Int _64017_n = 0LL;
	jule::Int _64117_i = 1LL;
	for (; _64117_i < _63728_txt.len(); (_64117_i)++) {
		{
			if (_63728_txt[_64117_i] == '\r') {
				goto _iter_next_4390700816;
			}
			if (_63728_txt[_64117_i] == '\n') {
				(*this)._method_push_err(jule::Str("rune is not finished", 20),jule::Slice<jule::Any>());
				((*this)._field_pos)++;
				(*this)._method_new_line();
				return jule::Str();
			}
			jule::Slice<jule::U8> _65317_part = _63728_txt.slice(_64117_i);
			jule::Str _65417_r = (*this)._method_get_rune(_65317_part,false);
			_63817_run+=_65417_r;
			(*this)._field_column+=static_cast<jule::Int>(_1b687997c_rune_count_str(_65417_r));
			if (_65417_r == jule::Str("'", 1)) {
				((*this)._field_pos)++;
				goto _iter_end_4390700816;
			}
			if (_65417_r.len() > 1LL) {
				_64117_i+=static_cast<jule::I64>(_65417_r.len() - 1LL);
			}
			(_64017_n)++;
		}
	_iter_next_4390700816:;
	}
	_iter_end_4390700816:;
	if (_64017_n == 0LL) {
		(*this)._method_push_err(jule::Str("rune is cannot empty", 20),jule::Slice<jule::Any>());
	} else if (_64017_n > 1LL) {
		(*this)._method_push_err(jule::Str("rune is should be single", 24),jule::Slice<jule::Any>());
	}
	return _63817_run;
}



inline jule::Str _1b75960d2_Lex::_method_lex_str(void) {
	jule::Str _67717_s = jule::Str();
	jule::U8 _67813_mark = (*((*this)._field_file))._field_data[(*this)._field_pos];
	((*this)._field_pos)++;
	jule::Bool _68013_raw = _67813_mark == '`';
	_67717_s+=static_cast<jule::Str>(_67813_mark);
	((*this)._field_column)++;
	while ((*this)._field_pos < (*((*this)._field_file))._field_data.len()) {
		{
			jule::U8 _68517_ch = (*((*this)._field_file))._field_data[(*this)._field_pos];
			if (_68517_ch == '\r') {
				goto _iter_next_4390724560;
			}
			if (_68517_ch == '\n') {
				(*this)._method_new_line();
				if ((!(_68013_raw))) {
					(*this)._method_push_err(jule::Str("string is not finished", 22),jule::Slice<jule::Any>());
					((*this)._field_pos)++;
					return jule::Str();
				}
			}
			jule::Slice<jule::U8> _69721_part = (*((*this)._field_file))._field_data.slice((*this)._field_pos);
			jule::Str _69817_r = (*this)._method_get_rune(_69721_part,_68013_raw);
			_67717_s+=_69817_r;
			(*this)._field_column+=static_cast<jule::Int>(_1b687997c_rune_count_str(_69817_r));
			if (_68517_ch == _67813_mark) {
				goto _iter_end_4390724560;
			}
		}
	_iter_next_4390724560:;
	}
	_iter_end_4390724560:;
	return _67717_s;
}



inline jule::Bool _1b75960d2_Lex::_method_is_first_token_of_line(void) {
	return (*this)._field_column == 1LL;
}



inline void _1b75960d2_Lex::_method_new_line(void) {
	((*this)._field_row)++;
	(*this)._field_column=1LL;
}



inline jule::Bool _1b75960d2_Lex::_method_is_op(jule::Slice<jule::U8>& _71825_txt,jule::Str _71838_kind,jule::Uint _71849_id,_1b7553d92_Token& _71867_t) {
	if ((!(_1b75960d2_bytes_has_prefix(_71825_txt,_71838_kind)))) {
		return false;
	}
	_71867_t._field_kind=_71838_kind;
	_71867_t._field_id=_71849_id;
	(*this)._field_pos+=static_cast<jule::I64>(_71838_kind.len());
	return true;
}



inline jule::Bool _1b75960d2_Lex::_method_lex_basic_ops(jule::Slice<jule::U8> _72932_txt,_1b7553d92_Token& _72950_tok) {
	{
		auto &expr = _1b75960d2_BASIC_OPS;
		auto it = expr.begin();
		_iter_begin_4390751056:;
		if (it != expr.end()) {
			_1b75960d2_KindPair &_1b75960d2_pair = *it;
			{
				if ((*this)._method_is_op(_72932_txt,_1b75960d2_pair._field_kind,_1b75960d2_pair._field_id,_72950_tok)) {
					return true;
				}
			}
			_iter_next_4390751056:;
			++it;
			goto _iter_begin_4390751056;
		}
		_iter_end_4390751056:;
	}
	return false;
}



inline jule::Bool _1b75960d2_Lex::_method_lex_id(jule::Slice<jule::U8>& _73926_txt,_1b7553d92_Token& _73944_t) {
	jule::Str _74013_lex = (*this)._method_id(_73926_txt);
	if (_74013_lex == jule::Str()) {
		return false;
	}
	_73944_t._field_kind=_74013_lex;
	_73944_t._field_id=2LLU;
	return true;
}



inline jule::Bool _1b75960d2_Lex::_method_lex_num(jule::Slice<jule::U8>& _75027_txt,_1b7553d92_Token& _75045_t) {
	jule::Str _75113_lex = (*this)._method_num(_75027_txt);
	if (_75113_lex == jule::Str()) {
		return false;
	}
	_75045_t._field_kind=_75113_lex;
	_75045_t._field_id=6LLU;
	return true;
}



inline _1b7553d92_Token _1b75960d2_Lex::_method_token(void) {
	_1b7553d92_Token _76317_t = _1b7553d92_Token((*this)._field_file,jule::Int(),jule::Int(),jule::Str(),0LLU);
	jule::Slice<jule::U8> _76513_txt = (*this)._method_resume();
	if (_76513_txt == nullptr) {
		return _76317_t;
	}
	_76317_t._field_column=(*this)._field_column;
	_76317_t._field_row=(*this)._field_row;
	{
		
		if ((*this)._method_lex_num(_76513_txt,_76317_t)) {
			_case_begin_4390774400:;
		}
		else if (_76513_txt[0LL] == '\'') {
			_case_begin_4390772144:;
			{
				_76317_t._field_kind=(*this)._method_lex_rune(_76513_txt);
				_76317_t._field_id=6LLU;
				return _76317_t;
			}
		}
		else if ((_76513_txt[0LL] == '\"') || (_76513_txt[0LL] == '`')) {
			_case_begin_4390772240:;
			{
				_76317_t._field_kind=(*this)._method_lex_str();
				_76317_t._field_id=6LLU;
				return _76317_t;
			}
		}
		else if (_1b75960d2_bytes_has_prefix(_76513_txt,jule::Str("//", 2))) {
			_case_begin_4390776544:;
			{
				(*this)._method_lex_line_comment(_76317_t);
				return _76317_t;
			}
		}
		else if (_1b75960d2_bytes_has_prefix(_76513_txt,jule::Str("/*", 2))) {
			_case_begin_4390776640:;
			{
				(*this)._method_lex_range_comment();
				return _76317_t;
			}
		}
		else if ((*this)._method_is_op(_76513_txt,jule::Str("(", 1),3LLU,_76317_t) || (*this)._method_is_op(_76513_txt,jule::Str(")", 1),3LLU,_76317_t) || (*this)._method_is_op(_76513_txt,jule::Str("{", 1),3LLU,_76317_t) || (*this)._method_is_op(_76513_txt,jule::Str("}", 1),3LLU,_76317_t) || (*this)._method_is_op(_76513_txt,jule::Str("[", 1),3LLU,_76317_t) || (*this)._method_is_op(_76513_txt,jule::Str("]", 1),3LLU,_76317_t) || (*this)._method_lex_basic_ops(_76513_txt,_76317_t)) {
			_case_begin_4390776736:;
		}
		else if ((*this)._method_lex_id(_76513_txt,_76317_t)) {
			_case_begin_4390776832:;
			{
				{
					auto &expr = _1b75960d2_KEYWORDS;
					auto it = expr.begin();
					_iter_begin_4390799360:;
					if (it != expr.end()) {
						_1b75960d2_KindPair &_1b75960d2_pair = *it;
						{
							if (_1b75960d2_pair._field_kind == _76317_t._field_kind) {
								_76317_t._field_id=_1b75960d2_pair._field_id;
								goto _iter_end_4390799360;
							}
						}
						_iter_next_4390799360:;
						++it;
						goto _iter_begin_4390799360;
					}
					_iter_end_4390799360:;
				}
			}
		}
		else {
			_case_begin_4390771568:;
			{
				jule::I32 _81518_r;
				jule::Int _81521_sz;
				std::tie(_81518_r,_81521_sz) = _1b687997c_decode_rune(_76513_txt);
				(*this)._method_push_err(jule::Str("undefined token: @", 18),jule::Slice<jule::Any>({jule::Any(_81518_r)}));
				((*this)._field_column)++;
				(*this)._field_pos+=_81521_sz;
				return _76317_t;
			}
		}
		_match_end_4390771488:;
	}
	(*this)._field_column+=static_cast<jule::Int>(_1b687997c_rune_count_str(_76317_t._field_kind));
	return _76317_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b75960d2_Lex &_Src) {
	_Stream << "Lex{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "column:" << _Src._field_column << ", ";
	_Stream << "row:" << _Src._field_row << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b74bea77_Ast &_Src) {
	_Stream << "Ast{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "top_directives:" << _Src._field_top_directives << ", ";
	_Stream << "use_decls:" << _Src._field_use_decls << ", ";
	_Stream << "impls:" << _Src._field_impls << ", ";
	_Stream << "decls:" << _Src._field_decls;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_CommentGroup &_Src) {
	_Stream << "CommentGroup{";
	_Stream << "comments:" << _Src._field_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_NamespaceTypeDecl &_Src) {
	_Stream << "NamespaceTypeDecl{";
	_Stream << "idents:" << _Src._field_idents << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_SptrTypeDecl &_Src) {
	_Stream << "SptrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_SlcTypeDecl &_Src) {
	_Stream << "SlcTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_TupleTypeDecl &_Src) {
	_Stream << "TupleTypeDecl{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_PtrTypeDecl::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_PtrTypeDecl &_Src) {
	_Stream << "PtrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_ArrTypeDecl::_method_auto_sized(void) {
	return (*this)._field_size == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_ArrTypeDecl &_Src) {
	_Stream << "ArrTypeDecl{";
	_Stream << "elem:" << _Src._field_elem << ", ";
	_Stream << "size:" << _Src._field_size;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_MapTypeDecl &_Src) {
	_Stream << "MapTypeDecl{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_RetTypeDecl &_Src) {
	_Stream << "RetTypeDecl{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_TupleExpr &_Src) {
	_Stream << "TupleExpr{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_CastExpr &_Src) {
	_Stream << "CastExpr{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_StructLit &_Src) {
	_Stream << "StructLit{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_ScopeTree &_Src) {
	_Stream << "ScopeTree{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "head:" << _Src._field_head << ", ";
	_Stream << "tail:" << _Src._field_tail << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base != nullptr;
}



inline jule::Bool _1b7509a90_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b76a925b_FileInfo &_Src) {
	_Stream << "FileInfo{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b76a925b_PackageInfo &_Src) {
	_Stream << "PackageInfo{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b76b4310_Stmt &_Src) {
	_Stream << "Stmt{";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "terminated:" << _Src._field_terminated;
	_Stream << "}";
	return _Stream;
}



inline void _1b76b4310_ScopeParser::_method_stop(void) {
	(*this)._field_pos=-1LL;
}



inline jule::Bool _1b76b4310_ScopeParser::_method_stopped(void) {
	return (*this)._field_pos == -1LL;
}



inline jule::Bool _1b76b4310_ScopeParser::_method_finished(void) {
	return (*this)._field_pos >= (*this)._field_stmts.len();
}



inline jule::Bool _1b76b4310_ScopeParser::_method_is_last_st(void) {
	return ((*this)._field_pos + 1LL) >= (*this)._field_stmts.len();
}



inline void _1b76b4310_ScopeParser::_method_push_err(_1b7553d92_Token _17827_token,jule::Str _17841_fmt) {
	(*((*this)._field_p))._method_push_err(_17827_token,_17841_fmt,jule::Slice<jule::Any>());
}



inline void _1b76b4310_ScopeParser::_method_push_suggestion(jule::Str _18134_fmt,jule::Slice<jule::Any> _18147_args) {
	(*((*this)._field_p))._method_push_suggestion(_18134_fmt,_18147_args);
}



inline void _1b76b4310_ScopeParser::_method_insert_as_next(jule::Slice<_1b7553d92_Token>& _18538_tokens) {
	(*this)._field_stmts=jule::append((*this)._field_stmts.slice(0LL,(*this)._field_pos + 1LL),(*this)._field_stmts.slice((*this)._field_pos));
	(*this)._field_stmts[(*this)._field_pos + 1LL]=jule::new_struct<_1b76b4310_Stmt>(new( std::nothrow ) _1b76b4310_Stmt(_18538_tokens,jule::Bool()));
}



inline jule::Ptr<_1b76b4310_Stmt> _1b76b4310_ScopeParser::_method_next(void) {
	((*this)._field_pos)++;
	return (*this)._field_stmts[(*this)._field_pos];
}



inline jule::Ptr<_1b7509a90_ScopeTree> _1b76b4310_ScopeParser::_method_build_scope(jule::Slice<_1b7553d92_Token>& _19535_tokens) {
	jule::Ptr<_1b7509a90_ScopeTree> _19617_s = _1b76b4310_new_scope();
	(*(_19617_s))._field_parent=(*this)._field_s;
	_1b76b4310_ScopeParser _19817_ssp = _1b76b4310_ScopeParser((*this)._field_p,jule::Ptr<_1b7509a90_ScopeTree>(),jule::Slice<jule::Ptr<_1b76b4310_Stmt>>(),jule::Int());
	_19817_ssp._method_build(_19535_tokens,_19617_s);
	return _19617_s;
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_var_st(jule::Slice<_1b7553d92_Token>& _20536_tokens) {
	jule::Ptr<_1b7509a90_VarDecl> _20617_v = (*((*this)._field_p))._method_build_var(_20536_tokens);
	(*(_20617_v))._field_scope=(*this)._field_s;
	return jule::Any(_20617_v);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_ret_st(jule::Slice<_1b7553d92_Token> _21135_tokens) {
	jule::Ptr<_1b7509a90_RetSt> _21217_st = jule::new_struct<_1b7509a90_RetSt>(new( std::nothrow ) _1b7509a90_RetSt(_21135_tokens[0LL],jule::Ptr<_1b7509a90_Expr>()));
	if (_21135_tokens.len() > 1LL) {
		_21135_tokens=_21135_tokens.slice(1LL);
		(*(_21217_st))._field_expr=(*((*this)._field_p))._method_build_expr(_21135_tokens);
	}
	return jule::Any(_21217_st);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_while_next_iter(jule::Ptr<_1b76b4310_Stmt>& _22245_s) {
	jule::Ptr<_1b7509a90_Iter> _22317_it = jule::new_struct<_1b7509a90_Iter>(new( std::nothrow ) _1b7509a90_Iter((*(_22245_s))._field_tokens[0LL],jule::Any(),jule::Ptr<_1b7509a90_ScopeTree>()));
	jule::Slice<_1b7553d92_Token> _22617_tokens = (*(_22245_s))._field_tokens.slice(1LL);
	jule::Ptr<_1b7509a90_WhileKind> _22717_kind = jule::new_struct<_1b7509a90_WhileKind>(new( std::nothrow ) _1b7509a90_WhileKind());
	if (_22617_tokens.len() > 0LL) {
		(*(_22717_kind))._field_expr=(*((*this)._field_p))._method_build_expr(_22617_tokens);
	}
	if ((*this)._method_is_last_st()) {
		(*this)._method_push_err((*(_22317_it))._field_token,jule::Str("invalid syntax", 14));
		return jule::Any(nullptr);
	}
	_22617_tokens=(*((*this)._method_next()))._field_tokens;
	jule::Slice<_1b7553d92_Token> _23917_st_tokens = _1b76b4ac4_get_block_expr(_22617_tokens);
	if (_23917_st_tokens.len() > 0LL) {
		jule::Ptr<_1b76b4310_Stmt> _24121_stmt = jule::new_struct<_1b76b4310_Stmt>(new( std::nothrow ) _1b76b4310_Stmt(_23917_st_tokens,(*(_22245_s))._field_terminated));
		(*(_22717_kind))._field_next_token=_23917_st_tokens[0LL];
		(*(_22717_kind))._field_next=(*this)._method_build_st(_24121_stmt);
	}
	jule::I64 _24917_i = _23917_st_tokens.len();
	jule::Slice<_1b7553d92_Token> _25017_block_tokens = _1b78b1aa1_range(_24917_i,jule::Str("{", 1),jule::Str("}", 1),_22617_tokens);
	if (_25017_block_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_22317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_24917_i < _22617_tokens.len()) {
		(*this)._method_push_err(_22617_tokens[_24917_i],jule::Str("invalid syntax", 14));
	}
	(*(_22317_it))._field_scope=(*this)._method_build_scope(_25017_block_tokens);
	(*(_22317_it))._field_kind=jule::Any(_22717_kind);
	return jule::Any(_22317_it);
}



inline jule::Ptr<_1b7509a90_WhileKind> _1b76b4310_ScopeParser::_method_build_while_iter_kind(jule::Slice<_1b7553d92_Token>& _26745_tokens) {
	return jule::new_struct<_1b7509a90_WhileKind>(new( std::nothrow ) _1b7509a90_WhileKind((*((*this)._field_p))._method_build_expr(_26745_tokens),jule::Any(),_1b7553d92_Token()));
}



inline jule::Slice<jule::Slice<_1b7553d92_Token>> _1b76b4310_ScopeParser::_method_get_range_kind_keys_tokens(jule::Slice<_1b7553d92_Token>& _27350_toks) {
	jule::Slice<jule::Slice<_1b7553d92_Token>> _27418_vars;
	jule::Slice<_1b6986b22_Log> _27424_errs;
	std::tie(_27418_vars,_27424_errs) = _1b78b1aa1_parts(_27350_toks,8LLU,true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_27424_errs);
	return _27418_vars;
}



inline jule::Ptr<_1b7509a90_VarDecl> _1b76b4310_ScopeParser::_method_build_range_kind_key(jule::Slice<_1b7553d92_Token>& _27944_tokens) {
	if (_27944_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_1b7509a90_VarDecl> _28317_key = jule::new_struct<_1b7509a90_VarDecl>(new( std::nothrow ) _1b7509a90_VarDecl(jule::Ptr<_1b7509a90_ScopeTree>(),_27944_tokens[0LL],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1b7509a90_CommentGroup>(),jule::Ptr<_1b7509a90_TypeDecl>(),jule::Ptr<_1b7509a90_Expr>()));
	if ((*(_28317_key))._field_token._field_id == 36LLU) {
		(*(_28317_key))._field_mutable=true;
		if (_27944_tokens.len() == 1LL) {
			(*this)._method_push_err((*(_28317_key))._field_token,jule::Str("invalid syntax", 14));
		}
		(*(_28317_key))._field_token=_27944_tokens[1LL];
	} else if (_27944_tokens.len() > 1LL) {
		(*this)._method_push_err(_27944_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	if ((*(_28317_key))._field_token._field_id != 2LLU) {
		(*this)._method_push_err((*(_28317_key))._field_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_28317_key))._field_ident=(*(_28317_key))._field_token._field_kind;
	return _28317_key;
}



inline jule::Slice<jule::Ptr<_1b7509a90_VarDecl>> _1b76b4310_ScopeParser::_method_build_range_kind_keys(jule::Slice<jule::Slice<_1b7553d92_Token>>& _30445_parts) {
	jule::Slice<jule::Ptr<_1b7509a90_VarDecl>> _30517_keys = nullptr;
	{
		auto &expr = _30445_parts;
		auto it = expr.begin();
		_iter_begin_4391626272:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4310_tokens = *it;
			{
				_30517_keys = jule::alloc_for_append(_30517_keys,1);_30517_keys.__push((*this)._method_build_range_kind_key(_1b76b4310_tokens));
			}
			_iter_next_4391626272:;
			++it;
			goto _iter_begin_4391626272;
		}
		_iter_end_4391626272:;
	}
	return _30517_keys;
}



inline void _1b76b4310_ScopeParser::_method_setup_range_kind_keys_plain(jule::Ptr<_1b7509a90_RangeKind>& _31251_rng,jule::Slice<_1b7553d92_Token>& _31273_tokens) {
	jule::Slice<jule::Slice<_1b7553d92_Token>> _31317_key_tokens = (*this)._method_get_range_kind_keys_tokens(_31273_tokens);
	if (_31317_key_tokens.len() == 0LL) {
		return;
	}
	if (_31317_key_tokens.len() > 2LL) {
		(*this)._method_push_err((*(_31251_rng))._field_in_token,jule::Str("range variables can be maximum two", 34));
	}
	jule::Slice<jule::Ptr<_1b7509a90_VarDecl>> _32017_keys = (*this)._method_build_range_kind_keys(_31317_key_tokens);
	(*(_31251_rng))._field_key_a=_32017_keys[0LL];
	if (_32017_keys.len() > 1LL) {
		(*(_31251_rng))._field_key_b=_32017_keys[1LL];
	}
}



inline void _1b76b4310_ScopeParser::_method_setup_range_kind_keys_explicit(jule::Ptr<_1b7509a90_RangeKind>& _32754_rng,jule::Slice<_1b7553d92_Token>& _32776_tokens) {
	jule::Int _32817_i = 0LL;
	jule::Slice<_1b7553d92_Token> _32917_rang = _1b78b1aa1_range(_32817_i,jule::Str("(", 1),jule::Str(")", 1),_32776_tokens);
	if (_32817_i < _32776_tokens.len()) {
		(*this)._method_push_err((*(_32754_rng))._field_in_token,jule::Str("invalid syntax", 14));
	}
	(*this)._method_setup_range_kind_keys_plain(_32754_rng,_32917_rang);
}



inline void _1b76b4310_ScopeParser::_method_setup_range_kind_keys(jule::Ptr<_1b7509a90_RangeKind>& _33645_rng,jule::Slice<_1b7553d92_Token>& _33667_tokens) {
	if (_33667_tokens[0LL]._field_id == 3LLU) {
		if (_33667_tokens[0LL]._field_kind != jule::Str("(", 1)) {
			(*this)._method_push_err(_33667_tokens[0LL],jule::Str("invalid syntax", 14));
			return;
		}
		(*this)._method_setup_range_kind_keys_explicit(_33645_rng,_33667_tokens);
		return;
	}
	(*this)._method_setup_range_kind_keys_plain(_33645_rng,_33667_tokens);
}



inline jule::Ptr<_1b7509a90_RangeKind> _1b76b4310_ScopeParser::_method_build_range_iter_kind(jule::Slice<_1b7553d92_Token>& _34845_var_tokens,jule::Slice<_1b7553d92_Token>& _34914_expr_tokens,_1b7553d92_Token& _34941_in_token) {
	jule::Ptr<_1b7509a90_RangeKind> _35017_rng = jule::new_struct<_1b7509a90_RangeKind>(new( std::nothrow ) _1b7509a90_RangeKind(_34941_in_token,jule::Ptr<_1b7509a90_Expr>(),jule::Ptr<_1b7509a90_VarDecl>(),jule::Ptr<_1b7509a90_VarDecl>()));
	if (_34914_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_35017_rng))._field_in_token,jule::Str("expression missing", 18));
		return _35017_rng;
	}
	(*(_35017_rng))._field_expr=(*((*this)._field_p))._method_build_expr(_34914_expr_tokens);
	if (_34845_var_tokens.len() > 0LL) {
		(*this)._method_setup_range_kind_keys(_35017_rng,_34845_var_tokens);
	}
	return _35017_rng;
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_common_iter_kind(jule::Slice<_1b7553d92_Token>& _36446_tokens,_1b7553d92_Token& _36464_err_tok) {
	jule::Int _36517_brace_n = 0LL;
	{
		auto &expr = _36446_tokens;
		auto it = expr.begin();
		_iter_begin_4391674176:;
		if (it != expr.end()) {
			jule::Int _1b76b4310_i = it - expr.begin();
			_1b7553d92_Token _1b76b4310_tok = *it;
			{
				if (_1b76b4310_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b76b4310_tok._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4391678784:;
							{
								(_36517_brace_n)++;
								goto _iter_next_4391674176;
							}
						}
						else {
							_case_begin_4391676992:;
							{
								(_36517_brace_n)--;
							}
						}
						_match_end_4391677104:;
					}
				}
				if (_36517_brace_n != 0LL) {
					goto _iter_next_4391674176;
				}
				{
					auto &_match_expr{ _1b76b4310_tok._field_id };
					
					if (_match_expr == 15LLU) {
						_case_begin_4391680256:;
						{
							jule::Slice<_1b7553d92_Token> _38425_decl_tokens = _36446_tokens.slice(0LL,_1b76b4310_i);
							jule::Slice<_1b7553d92_Token> _38525_expr_tokens = _36446_tokens.slice(_1b76b4310_i + 1LL);
							return jule::Any((*this)._method_build_range_iter_kind(_38425_decl_tokens,_38525_expr_tokens,_1b76b4310_tok));
						}
					}
					_match_end_4391680176:;
				}
			}
			_iter_next_4391674176:;
			++it;
			_1b76b4310_i++;
			goto _iter_begin_4391674176;
		}
		_iter_end_4391674176:;
	}
	return jule::Any((*this)._method_build_while_iter_kind(_36446_tokens));
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_common_iter(jule::Slice<_1b7553d92_Token> _39240_tokens) {
	jule::Ptr<_1b7509a90_Iter> _39317_it = jule::new_struct<_1b7509a90_Iter>(new( std::nothrow ) _1b7509a90_Iter(_39240_tokens[0LL],jule::Any(),jule::Ptr<_1b7509a90_ScopeTree>()));
	_39240_tokens=_39240_tokens.slice(1LL);
	if (_39240_tokens.len() == 0LL) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_39317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	jule::Slice<_1b7553d92_Token> _40317_expr_tokens = _1b76b4ac4_get_block_expr(_39240_tokens);
	if (_40317_expr_tokens.len() > 0LL) {
		(*(_39317_it))._field_kind=(*this)._method_build_common_iter_kind(_40317_expr_tokens,(*(_39317_it))._field_token);
	}
	jule::I64 _40717_i = _40317_expr_tokens.len();
	jule::Slice<_1b7553d92_Token> _40817_scope_tokens = _1b78b1aa1_range(_40717_i,jule::Str("{", 1),jule::Str("}", 1),_39240_tokens);
	if (_40817_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_39317_it))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	if (_40717_i < _39240_tokens.len()) {
		(*this)._method_push_err(_39240_tokens[_40717_i],jule::Str("invalid syntax", 14));
	}
	(*(_39317_it))._field_scope=(*this)._method_build_scope(_40817_scope_tokens);
	return jule::Any(_39317_it);
}



inline jule::Any _1b76b4310_ScopeParser::_method_buid_iter_st(jule::Ptr<_1b76b4310_Stmt>& _42236_st) {
	if ((*(_42236_st))._field_terminated) {
		return (*this)._method_build_while_next_iter(_42236_st);
	}
	return (*this)._method_build_common_iter((*(_42236_st))._field_tokens);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_break_st(jule::Slice<_1b7553d92_Token>& _42938_tokens) {
	jule::Ptr<_1b7509a90_BreakSt> _43017_brk = jule::new_struct<_1b7509a90_BreakSt>(new( std::nothrow ) _1b7509a90_BreakSt(_42938_tokens[0LL],_1b7553d92_Token()));
	if (_42938_tokens.len() > 1LL) {
		if (_42938_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_43017_brk))._field_label=_42938_tokens[1LL];
			if (_42938_tokens.len() > 2LL) {
				(*this)._method_push_err(_42938_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_43017_brk);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_cont_st(jule::Slice<_1b7553d92_Token>& _44737_tokens) {
	jule::Ptr<_1b7509a90_ContSt> _44817_cont = jule::new_struct<_1b7509a90_ContSt>(new( std::nothrow ) _1b7509a90_ContSt(_44737_tokens[0LL],_1b7553d92_Token()));
	if (_44737_tokens.len() > 1LL) {
		if (_44737_tokens[1LL]._field_id != 2LLU) {
			(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			(*this)._method_push_suggestion(jule::Str("write a label identifier because label expected", 47),jule::Slice<jule::Any>());
		} else {
			(*(_44817_cont))._field_label=_44737_tokens[1LL];
			if (_44737_tokens.len() > 2LL) {
				(*this)._method_push_err(_44737_tokens[1LL],jule::Str("invalid syntax", 14));
			}
		}
	}
	return jule::Any(_44817_cont);
}



inline jule::Ptr<_1b7509a90_If> _1b76b4310_ScopeParser::_method_build_if(jule::Slice<_1b7553d92_Token>& _46532_tokens) {
	jule::Ptr<_1b7509a90_If> _46617_model = jule::new_struct<_1b7509a90_If>(new( std::nothrow ) _1b7509a90_If(_46532_tokens[0LL],jule::Ptr<_1b7509a90_Expr>(),jule::Ptr<_1b7509a90_ScopeTree>()));
	_46532_tokens=_46532_tokens.slice(1LL);
	jule::Slice<_1b7553d92_Token> _47017_expr_tokens = _1b76b4ac4_get_block_expr(_46532_tokens);
	jule::Int _47117_i = 0LL;
	if (_47017_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_46617_model))._field_token,jule::Str("expression missing", 18));
	} else {
		_47117_i=static_cast<jule::I64>(_47017_expr_tokens.len());
	}
	jule::Slice<_1b7553d92_Token> _47717_scope_tokens = _1b78b1aa1_range(_47117_i,jule::Str("{", 1),jule::Str("}", 1),_46532_tokens);
	if (_47717_scope_tokens == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_46617_model))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_47117_i < _46532_tokens.len()) {
		if (_46532_tokens[_47117_i]._field_id == 17LLU) {
			_46532_tokens=_46532_tokens.slice(_47117_i);
		} else {
			(*this)._method_push_err(_46532_tokens[_47117_i],jule::Str("invalid syntax", 14));
			_46532_tokens=nullptr;
		}
	}
	(*(_46617_model))._field_expr=(*((*this)._field_p))._method_build_expr(_47017_expr_tokens);
	(*(_46617_model))._field_scope=(*this)._method_build_scope(_47717_scope_tokens);
	return _46617_model;
}



inline jule::Ptr<_1b7509a90_Else> _1b76b4310_ScopeParser::_method_build_else(jule::Slice<_1b7553d92_Token>& _49734_tokens) {
	jule::Ptr<_1b7509a90_Else> _49817_els = jule::new_struct<_1b7509a90_Else>(new( std::nothrow ) _1b7509a90_Else(_49734_tokens[0LL],jule::Ptr<_1b7509a90_ScopeTree>()));
	_49734_tokens=_49734_tokens.slice(1LL);
	jule::Int _50217_i = 0LL;
	jule::Slice<_1b7553d92_Token> _50317_scope_tokens = _1b78b1aa1_range(_50217_i,jule::Str("{", 1),jule::Str("}", 1),_49734_tokens);
	if (_50317_scope_tokens == nullptr) {
		if (_50217_i < _49734_tokens.len()) {
			(*this)._method_push_err((*(_49817_els))._field_token,jule::Str("else's cannot have any expression", 33));
		} else {
			(*this)._method_stop();
			(*this)._method_push_err((*(_49817_els))._field_token,jule::Str("body is not exist", 17));
			(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	if (_50217_i < _49734_tokens.len()) {
		(*this)._method_push_err(_49734_tokens[_50217_i],jule::Str("invalid syntax", 14));
	}
	(*(_49817_els))._field_scope=(*this)._method_build_scope(_50317_scope_tokens);
	return _49817_els;
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_if_else_chain(jule::Slice<_1b7553d92_Token> _52142_tokens) {
	jule::Ptr<_1b7509a90_Conditional> _52217_chain = jule::new_struct<_1b7509a90_Conditional>(new( std::nothrow ) _1b7509a90_Conditional((*this)._method_build_if(_52142_tokens),jule::Slice<jule::Ptr<_1b7509a90_If>>(),jule::Ptr<_1b7509a90_Else>()));
	if ((*(_52217_chain))._field_head == nullptr) {
		return jule::Any(nullptr);
	}
	while (_52142_tokens.len() != 0LL) {
		{
			if (_52142_tokens[0LL]._field_id != 17LLU) {
				goto _iter_end_4391786032;
			}
			if ((_52142_tokens.len() > 1LL) && (_52142_tokens[1LL]._field_id == 16LLU)) {
				_52142_tokens=_52142_tokens.slice(1LL);
				jule::Ptr<_1b7509a90_If> _53425_elif = (*this)._method_build_if(_52142_tokens);
				(*(_52217_chain))._field_tail = jule::alloc_for_append((*(_52217_chain))._field_tail,1);(*(_52217_chain))._field_tail.__push(_53425_elif);
				goto _iter_next_4391786032;
			}
			(*(_52217_chain))._field_default=(*this)._method_build_else(_52142_tokens);
			goto _iter_end_4391786032;
		}
	_iter_next_4391786032:;
	}
	_iter_end_4391786032:;
	return jule::Any(_52217_chain);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_comment_st(_1b7553d92_Token& _54436_token) {
	return jule::Any(_1b78b1aa1_build_comment(_54436_token));
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_co_call_st(jule::Slice<_1b7553d92_Token> _54839_tokens) {
	jule::Ptr<_1b7509a90_CoExpr> _54917_c = jule::new_struct<_1b7509a90_CoExpr>(new( std::nothrow ) _1b7509a90_CoExpr(_54839_tokens[0LL],jule::Ptr<_1b7509a90_Expr>()));
	_54839_tokens=_54839_tokens.slice(1LL);
	(*(_54917_c))._field_expr=(*((*this)._field_p))._method_build_expr(_54839_tokens);
	return jule::Any(_54917_c);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_goto_st(jule::Slice<_1b7553d92_Token>& _55737_tokens) {
	jule::Ptr<_1b7509a90_GotoSt> _55817_gt = jule::new_struct<_1b7509a90_GotoSt>(new( std::nothrow ) _1b7509a90_GotoSt(_55737_tokens[0LL],_1b7553d92_Token()));
	if (_55737_tokens.len() == 1LL) {
		(*this)._method_push_err((*(_55817_gt))._field_token,jule::Str("missing label identifier for goto statement", 43));
		return jule::Any(nullptr);
	} else if (_55737_tokens.len() > 2LL) {
		(*this)._method_push_err(_55737_tokens[2LL],jule::Str("invalid syntax", 14));
	}
	_1b7553d92_Token _56717_ident_token = _55737_tokens[1LL];
	if (_56717_ident_token._field_id != 2LLU) {
		(*this)._method_push_err(_56717_ident_token,jule::Str("invalid syntax", 14));
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return jule::Any(_55817_gt);
	}
	(*(_55817_gt))._field_label=_56717_ident_token;
	return jule::Any(_55817_gt);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_fall_st(jule::Slice<_1b7553d92_Token>& _57737_tokens) {
	jule::Ptr<_1b7509a90_FallSt> _57817_fll = jule::new_struct<_1b7509a90_FallSt>(new( std::nothrow ) _1b7509a90_FallSt(_57737_tokens[0LL]));
	if (_57737_tokens.len() > 1LL) {
		(*this)._method_push_err(_57737_tokens[1LL],jule::Str("invalid syntax", 14));
	}
	return jule::Any(_57817_fll);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_type_alias_st(jule::Slice<_1b7553d92_Token>& _58743_tokens) {
	jule::Ptr<_1b7509a90_TypeAliasDecl> _58817_tad = (*((*this)._field_p))._method_build_type_alias_decl(_58743_tokens);
	(*(_58817_tad))._field_scope=(*this)._field_s;
	return jule::Any(_58817_tad);
}



inline void _1b76b4310_ScopeParser::_method_push_case_expr(jule::Slice<_1b7553d92_Token> _59337_tokens,_1b7553d92_Token _59358_token,jule::Bool _5949_type_match,jule::Slice<jule::Ptr<_1b7509a90_Expr>>& _59432_exprs) {
	if (_59337_tokens.len() == 0LL) {
		return;
	}
	if (_5949_type_match) {
		jule::Int _60021_i = 0LL;
		jule::Ptr<_1b7509a90_TypeDecl> _60122_t;
		jule::Bool _60125_ok;
		std::tie(_60122_t,_60125_ok) = (*((*this)._field_p))._method_build_type(_59337_tokens,(&(_60021_i)),true);
		if (_60125_ok) {
			_59432_exprs = jule::alloc_for_append(_59432_exprs,1);_59432_exprs.__push(jule::new_struct<_1b7509a90_Expr>(new( std::nothrow ) _1b7509a90_Expr(_59358_token,jule::Any(_60122_t))));
		}
		if (_60021_i < _59337_tokens.len()) {
			(*this)._method_push_err(_59337_tokens[_60021_i],jule::Str("invalid syntax", 14));
		}
		return;
	}
	_59432_exprs = jule::alloc_for_append(_59432_exprs,1);_59432_exprs.__push((*((*this)._field_p))._method_build_expr(_59337_tokens));
}



inline jule::Slice<jule::Ptr<_1b7509a90_Expr>> _1b76b4310_ScopeParser::_method_build_case_exprs(jule::Slice<_1b7553d92_Token>& _61640_tokens,jule::Bool _61657_type_match) {
	jule::Slice<jule::Ptr<_1b7509a90_Expr>> _61717_exprs = jule::Slice<jule::Ptr<_1b7509a90_Expr>>::alloc(0LL,1LL);
	jule::Int _61917_brace_n = 0LL;
	jule::Int _62017_j = 0LL;
	{
		auto &expr = _61640_tokens;
		auto it = expr.begin();
		_iter_begin_4391855552:;
		if (it != expr.end()) {
			jule::Int _1b76b4310_i = it - expr.begin();
			_1b7553d92_Token _1b76b4310_tok = *it;
			{
				if (_1b76b4310_tok._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b76b4310_tok._field_kind };
						
						if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
							_case_begin_4391860016:;
							{
								(_61917_brace_n)++;
							}
						}
						else {
							_case_begin_4391858224:;
							{
								(_61917_brace_n)--;
							}
						}
						_match_end_4391858336:;
					}
					goto _iter_next_4391855552;
				} else if (_61917_brace_n != 0LL) {
					goto _iter_next_4391855552;
				}
				{
					
					if ((_1b76b4310_tok._field_id == 7LLU) && (_1b76b4310_tok._field_kind == jule::Str("|", 1))) {
						_case_begin_4391857760:;
						{
							jule::Slice<_1b7553d92_Token> _63821_expr_tokens = _61640_tokens.slice(_62017_j,_1b76b4310_i);
							if (_63821_expr_tokens.len() == 0LL) {
								(*this)._method_push_err(_1b76b4310_tok,jule::Str("expression missing", 18));
							} else {
								(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_1b76b4310_i),_1b76b4310_tok,_61657_type_match,_61717_exprs);
							}
							_62017_j=static_cast<jule::Int>(_1b76b4310_i + 1LL);
						}
					}
					else if (_1b76b4310_tok._field_id == 11LLU) {
						_case_begin_4391861696:;
						{
							(*this)._method_push_case_expr(_61640_tokens.slice(_62017_j,_1b76b4310_i),_1b76b4310_tok,_61657_type_match,_61717_exprs);
							_61640_tokens=_61640_tokens.slice(_1b76b4310_i + 1LL);
							return _61717_exprs;
						}
					}
					_match_end_4391857632:;
				}
			}
			_iter_next_4391855552:;
			++it;
			_1b76b4310_i++;
			goto _iter_begin_4391855552;
		}
		_iter_end_4391855552:;
	}
	(*this)._method_push_err(_61640_tokens[0LL],jule::Str("invalid syntax", 14));
	_61640_tokens=nullptr;
	return nullptr;
}



inline jule::Ptr<_1b7509a90_ScopeTree> _1b76b4310_ScopeParser::_method_build_case_scope(jule::Slice<_1b7553d92_Token>& _65740_tokens) {
	jule::Int _65817_n = 0LL;
	for (;;) {
		{
			jule::Int _66021_i = 0LL;
			jule::Slice<_1b7553d92_Token> _66122_next;
			std::tie(_66122_next,std::ignore) = _1b76b4310_skip_st(_66021_i,_65740_tokens.slice(_65817_n));
			if (_66122_next.len() == 0LL) {
				goto _iter_end_4391877760;
			}
			_1b7553d92_Token _66517_tok = _66122_next[0LL];
			if ((_66517_tok._field_id != 7LLU) || (_66517_tok._field_kind != jule::Str("|", 1))) {
				_65817_n+=_66021_i;
				goto _iter_next_4391877760;
			}
			jule::Slice<_1b7553d92_Token> _67021_scope_tokens = _65740_tokens.slice(0LL,_65817_n);
			jule::Ptr<_1b7509a90_ScopeTree> _67121_scope = (*this)._method_build_scope(_67021_scope_tokens);
			_65740_tokens=_65740_tokens.slice(_65817_n);
			return _67121_scope;
		}
	_iter_next_4391877760:;
	}
	_iter_end_4391877760:;
	jule::Ptr<_1b7509a90_ScopeTree> _67517_scope = (*this)._method_build_scope(_65740_tokens);
	_65740_tokens=nullptr;
	return _67517_scope;
}



inline std::tuple<jule::Ptr<_1b7509a90_Case>,jule::Bool> _1b76b4310_ScopeParser::_method_build_case(jule::Slice<_1b7553d92_Token>& _68034_tokens,jule::Bool _68051_type_match) {
	jule::Ptr<_1b7509a90_Case> _68117_c = jule::new_struct<_1b7509a90_Case>(new( std::nothrow ) _1b7509a90_Case(_68034_tokens[0LL],jule::Ptr<_1b7509a90_ScopeTree>(),jule::Slice<jule::Ptr<_1b7509a90_Expr>>()));
	_68034_tokens=_68034_tokens.slice(1LL);
	(*(_68117_c))._field_exprs=(*this)._method_build_case_exprs(_68034_tokens,_68051_type_match);
	(*(_68117_c))._field_scope=(*this)._method_build_case_scope(_68034_tokens);
	jule::Bool _68713_is_default = (*(_68117_c))._field_exprs.len() == 0LL;
	return std::make_tuple(_68117_c,_68713_is_default);
}



inline std::tuple<jule::Slice<jule::Ptr<_1b7509a90_Case>>,jule::Ptr<_1b7509a90_Else>> _1b76b4310_ScopeParser::_method_build_cases(jule::Slice<_1b7553d92_Token> _69134_tokens,jule::Bool _69151_type_match) {
	jule::Slice<jule::Ptr<_1b7509a90_Case>> _69217_cases = nullptr;
	jule::Ptr<_1b7509a90_Else> _69317_def = nullptr;
	jule::Bool _69417_def_not_last = false;
	while (_69134_tokens.len() > 0LL) {
		{
			_1b7553d92_Token _69621_tok = _69134_tokens[0LL];
			if (_69621_tok._field_id == 18LLU) {
				_69134_tokens=_69134_tokens.slice(1LL);
				goto _iter_next_4391904912;
			}
			if ((_69621_tok._field_id != 7LLU) || (_69621_tok._field_kind != jule::Str("|", 1))) {
				(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				goto _iter_end_4391904912;
			}
			jule::Ptr<_1b7509a90_Case> _70722_c;
			jule::Bool _70725_is_default;
			std::tie(_70722_c,_70725_is_default) = (*this)._method_build_case(_69134_tokens,_69151_type_match);
			if (_70725_is_default) {
				(*(_70722_c))._field_token=_69621_tok;
				if (_69317_def == nullptr) {
					_69317_def=jule::new_struct<_1b7509a90_Else>(new( std::nothrow ) _1b7509a90_Else((*(_70722_c))._field_token,(*(_70722_c))._field_scope));
				} else {
					(*this)._method_push_err(_69621_tok,jule::Str("invalid syntax", 14));
				}
			} else {
				_69417_def_not_last=_69417_def_not_last || (_69317_def != nullptr);
				_69217_cases = jule::alloc_for_append(_69217_cases,1);_69217_cases.__push(_70722_c);
			}
		}
	_iter_next_4391904912:;
	}
	_iter_end_4391904912:;
	if (_69417_def_not_last) {
		(*this)._method_push_err((*(_69317_def))._field_token,jule::Str("default case should be last case", 32));
	}
	return std::make_tuple(_69217_cases,_69317_def);
}



inline jule::Ptr<_1b7509a90_MatchCase> _1b76b4310_ScopeParser::_method_build_match_case(jule::Slice<_1b7553d92_Token> _73139_tokens) {
	jule::Ptr<_1b7509a90_MatchCase> _73217_m = jule::new_struct<_1b7509a90_MatchCase>(new( std::nothrow ) _1b7509a90_MatchCase(_73139_tokens[0LL],jule::Bool(),jule::Ptr<_1b7509a90_Expr>(),jule::Slice<jule::Ptr<_1b7509a90_Case>>(),jule::Ptr<_1b7509a90_Else>()));
	_73139_tokens=_73139_tokens.slice(1LL);
	if ((_73139_tokens.len() > 0LL) && (_73139_tokens[0LL]._field_id == 10LLU)) {
		(*(_73217_m))._field_type_match=true;
		_73139_tokens=_73139_tokens.slice(1LL);
	}
	jule::Slice<_1b7553d92_Token> _74217_expr_tokens = _1b76b4ac4_get_block_expr(_73139_tokens);
	if (_74217_expr_tokens.len() > 0LL) {
		(*(_73217_m))._field_expr=(*((*this)._field_p))._method_build_expr(_74217_expr_tokens);
	} else if ((*(_73217_m))._field_type_match) {
		(*this)._method_push_err((*(_73217_m))._field_token,jule::Str("expression missing", 18));
	}
	jule::I64 _74917_i = _74217_expr_tokens.len();
	jule::Slice<_1b7553d92_Token> _75017_block_toks = _1b78b1aa1_range(_74917_i,jule::Str("{", 1),jule::Str("}", 1),_73139_tokens);
	if (_75017_block_toks == nullptr) {
		(*this)._method_stop();
		(*this)._method_push_err((*(_73217_m))._field_token,jule::Str("body is not exist", 17));
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_73217_m))._field_cases,(*(_73217_m))._field_default) = (*this)._method_build_cases(_75017_block_toks,(*(_73217_m))._field_type_match);
	return _73217_m;
}



inline jule::Ptr<_1b7509a90_ScopeTree> _1b76b4310_ScopeParser::_method_build_scope_st(jule::Slice<_1b7553d92_Token> _76237_tokens) {
	jule::Bool _76317_is_unsafe = false;
	jule::Bool _76417_is_deferred = false;
	_1b7553d92_Token _76517_token = _76237_tokens[0LL];
	if (_76517_token._field_id == 35LLU) {
		_76317_is_unsafe=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
		_76517_token=_76237_tokens[0LL];
		if (_76517_token._field_id == 37LLU) {
			_76417_is_deferred=true;
			_76237_tokens=_76237_tokens.slice(1LL);
			if (_76237_tokens.len() == 0LL) {
				(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
	} else if (_76517_token._field_id == 37LLU) {
		_76417_is_deferred=true;
		_76237_tokens=_76237_tokens.slice(1LL);
		if (_76237_tokens.len() == 0LL) {
			(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
			return nullptr;
		}
	}
	jule::Int _79117_i = 0LL;
	jule::Slice<_1b7553d92_Token> _79217_scope_tokens = _1b78b1aa1_range(_79117_i,jule::Str("{", 1),jule::Str("}", 1),_76237_tokens);
	if (_79217_scope_tokens == nullptr) {
		(*this)._method_push_err(_76517_token,jule::Str("invalid syntax", 14));
		return nullptr;
	} else if (_79117_i < _76237_tokens.len()) {
		(*this)._method_push_err(_76237_tokens[_79117_i],jule::Str("invalid syntax", 14));
	}
	jule::Ptr<_1b7509a90_ScopeTree> _79917_scope = (*this)._method_build_scope(_79217_scope_tokens);
	(*(_79917_scope))._field_unsafety=_76317_is_unsafe;
	(*(_79917_scope))._field_deferred=_76417_is_deferred;
	return _79917_scope;
}



inline jule::Ptr<_1b7509a90_LabelSt> _1b76b4310_ScopeParser::_method_build_label_st(jule::Slice<_1b7553d92_Token>& _80538_tokens) {
	jule::Ptr<_1b7509a90_LabelSt> _80617_lbl = jule::new_struct<_1b7509a90_LabelSt>(new( std::nothrow ) _1b7509a90_LabelSt(_80538_tokens[0LL],_80538_tokens[0LL]._field_kind));
	if (_80538_tokens.len() > 2LL) {
		_80538_tokens=_80538_tokens.slice(2LL);
		(*this)._method_insert_as_next(_80538_tokens);
	}
	return _80617_lbl;
}



inline std::tuple<jule::Any,jule::Bool> _1b76b4310_ScopeParser::_method_build_id_st(jule::Slice<_1b7553d92_Token>& _82035_tokens) {
	jule::Bool _82064_ok = jule::Bool();
	if (_82035_tokens.len() == 1LL) {
		return std::make_tuple(jule::Any(),_82064_ok);
	}
	_1b7553d92_Token _82517_token = _82035_tokens[1LL];
	{
		auto &_match_expr{ _82517_token._field_id };
		
		if (_match_expr == 11LLU) {
			_case_begin_4391988624:;
			{
				_82064_ok = true;
				return std::make_tuple(jule::Any((*this)._method_build_label_st(_82035_tokens)),_82064_ok);
			}
		}
		_match_end_4391986416:;
	}
	return std::make_tuple(jule::Any(),_82064_ok);
}



inline jule::Ptr<_1b77c370a_AssignInfo> _1b76b4310_ScopeParser::_method_build_assign_info(jule::Slice<_1b7553d92_Token>& _83441_tokens) {
	jule::Ptr<_1b77c370a_AssignInfo> _83517_info = jule::new_struct<_1b77c370a_AssignInfo>(new( std::nothrow ) _1b77c370a_AssignInfo(jule::Slice<_1b7553d92_Token>(),jule::Slice<_1b7553d92_Token>(),_1b7553d92_Token(),true));
	jule::Int _83817_brace_n = 0LL;
	{
		auto &expr = _83441_tokens;
		auto it = expr.begin();
		_iter_begin_4391995920:;
		if (it != expr.end()) {
			jule::Int _1b76b4310_i = it - expr.begin();
			_1b7553d92_Token _1b76b4310_token = *it;
			{
				if (_1b76b4310_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b76b4310_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4392000592:;
							{
								(_83817_brace_n)++;
							}
						}
						else {
							_case_begin_4391998800:;
							{
								(_83817_brace_n)--;
							}
						}
						_match_end_4391998912:;
					}
				}
				{
					
					if (_83817_brace_n > 0LL) {
						_case_begin_4392002080:;
						{
							goto _iter_next_4391995920;
						}
					}
					else if (_1b76b4310_token._field_id != 7LLU) {
						_case_begin_4391998080:;
						{
							goto _iter_next_4391995920;
						}
					}
					else if ((!(_1b7553d92_is_assign_op(_1b76b4310_token._field_kind)))) {
						_case_begin_4391998176:;
						{
							goto _iter_next_4391995920;
						}
					}
					_match_end_4392001936:;
				}
				(*(_83517_info))._field_l=_83441_tokens.slice(0LL,_1b76b4310_i);
				if ((*(_83517_info))._field_l.len() == 0LL) {
					(*(_83517_info))._field_ok=false;
				}
				(*(_83517_info))._field_setter=_1b76b4310_token;
				if ((_1b76b4310_i + 1LL) >= _83441_tokens.len()) {
					(*(_83517_info))._field_r=nullptr;
					(*(_83517_info))._field_ok=_1b7553d92_is_postfix_op((*(_83517_info))._field_setter._field_kind);
					goto _iter_end_4391995920;
				}
				(*(_83517_info))._field_r=_83441_tokens.slice(_1b76b4310_i + 1LL);
				if (_1b7553d92_is_postfix_op((*(_83517_info))._field_setter._field_kind)) {
					if ((*(_83517_info))._field_r.len() > 0LL) {
						(*this)._method_push_err((*(_83517_info))._field_r[0LL],jule::Str("invalid syntax", 14));
						(*(_83517_info))._field_r=nullptr;
					}
				}
				goto _iter_end_4391995920;
			}
			_iter_next_4391995920:;
			++it;
			_1b76b4310_i++;
			goto _iter_begin_4391995920;
		}
		_iter_end_4391995920:;
	}
	return _83517_info;
}



inline jule::Ptr<_1b7509a90_AssignLeft> _1b76b4310_ScopeParser::_method_build_assign_l(jule::Slice<_1b7553d92_Token>& _88138_tokens) {
	jule::Ptr<_1b7509a90_AssignLeft> _88217_l = jule::new_struct<_1b7509a90_AssignLeft>(new( std::nothrow ) _1b7509a90_AssignLeft(_88138_tokens[0LL],jule::Bool(),jule::Bool(),jule::Str(),jule::Ptr<_1b7509a90_Expr>()));
	if (_88138_tokens[0LL]._field_id == 2LLU) {
		(*(_88217_l))._field_ident=(*(_88217_l))._field_token._field_kind;
	}
	(*(_88217_l))._field_expr=(*((*this)._field_p))._method_build_expr(_88138_tokens);
	return _88217_l;
}



inline jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>> _1b76b4310_ScopeParser::_method_build_assign_ls(jule::Slice<jule::Slice<_1b7553d92_Token>>& _89439_parts) {
	jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>> _89517_lefts = nullptr;
	{
		auto &expr = _89439_parts;
		auto it = expr.begin();
		_iter_begin_4392029856:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4310_part = *it;
			{
				jule::Ptr<_1b7509a90_AssignLeft> _89721_l = (*this)._method_build_assign_l(_1b76b4310_part);
				_89517_lefts = jule::alloc_for_append(_89517_lefts,1);_89517_lefts.__push(_89721_l);
			}
			_iter_next_4392029856:;
			++it;
			goto _iter_begin_4392029856;
		}
		_iter_end_4392029856:;
	}
	return _89517_lefts;
}



inline std::tuple<jule::Ptr<_1b7509a90_AssignSt>,jule::Bool> _1b76b4310_ScopeParser::_method_build_plain_assign(jule::Slice<_1b7553d92_Token>& _90442_tokens) {
	jule::Ptr<_1b77c370a_AssignInfo> _90517_info = (*this)._method_build_assign_info(_90442_tokens);
	if ((!((*(_90517_info))._field_ok))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_1b7509a90_AssignSt> _91017_assign = jule::new_struct<_1b7509a90_AssignSt>(new( std::nothrow ) _1b7509a90_AssignSt(jule::Bool(),(*(_90517_info))._field_setter,jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>>(),jule::Ptr<_1b7509a90_Expr>()));
	jule::Slice<jule::Slice<_1b7553d92_Token>> _91418_parts;
	jule::Slice<_1b6986b22_Log> _91425_errs;
	std::tie(_91418_parts,_91425_errs) = _1b78b1aa1_parts((*(_90517_info))._field_l,8LLU,true);
	if (_91425_errs.len() > 0LL) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_91425_errs);
		return std::make_tuple(nullptr,false);
	}
	(*(_91017_assign))._field_left=(*this)._method_build_assign_ls(_91418_parts);
	if ((*(_90517_info))._field_r != nullptr) {
		(*(_91017_assign))._field_right=(*((*this)._field_p))._method_build_expr((*(_90517_info))._field_r);
	}
	return std::make_tuple(_91017_assign,true);
}



inline std::tuple<jule::Ptr<_1b7509a90_AssignSt>,jule::Bool> _1b76b4310_ScopeParser::_method_build_decl_assign(jule::Slice<_1b7553d92_Token> _92840_tokens) {
	if (_92840_tokens.len() < 1LL) {
		return std::make_tuple(nullptr,false);
	}
	_92840_tokens=_92840_tokens.slice(1LL);
	_1b7553d92_Token _93417_token = _92840_tokens[0LL];
	if ((_93417_token._field_id != 3LLU) || (_93417_token._field_kind != jule::Str("(", 1))) {
		return std::make_tuple(nullptr,false);
	}
	jule::Ptr<_1b7509a90_AssignSt> _93917_assign = jule::new_struct<_1b7509a90_AssignSt>(new( std::nothrow ) _1b7509a90_AssignSt(true,_1b7553d92_Token(),jule::Slice<jule::Ptr<_1b7509a90_AssignLeft>>(),jule::Ptr<_1b7509a90_Expr>()));
	jule::Int _94317_i = 0LL;
	jule::Slice<_1b7553d92_Token> _94417_rang = _1b78b1aa1_range(_94317_i,jule::Str("(", 1),jule::Str(")", 1),_92840_tokens);
	if (_94417_rang == nullptr) {
		(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
		return std::make_tuple(nullptr,false);
	} else if ((_94317_i + 1LL) < _92840_tokens.len()) {
		(*(_93917_assign))._field_setter=_92840_tokens[_94317_i];
		(_94317_i)++;
		jule::Slice<_1b7553d92_Token> _95121_expr_tokens = _92840_tokens.slice(_94317_i);
		(*(_93917_assign))._field_right=(*((*this)._field_p))._method_build_expr(_95121_expr_tokens);
	}
	jule::Slice<jule::Slice<_1b7553d92_Token>> _95618_parts;
	jule::Slice<_1b6986b22_Log> _95625_errs;
	std::tie(_95618_parts,_95625_errs) = _1b78b1aa1_parts(_94417_rang,8LLU,true);
	if (_95625_errs.len() > 0LL) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_95625_errs);
		return std::make_tuple(nullptr,false);
	}
	{
		auto &expr = _95618_parts;
		auto it = expr.begin();
		_iter_begin_4392074976:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4310_part = *it;
			{
				jule::Bool _96321_is_mut = false;
				jule::Bool _96421_is_ref = false;
				_93417_token=_1b76b4310_part[0LL];
				if (_93417_token._field_id == 36LLU) {
					_96321_is_mut=true;
					_1b76b4310_part=_1b76b4310_part.slice(1LL);
					if (_1b76b4310_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4392074976;
					}
				}
				if ((_1b76b4310_part[0LL]._field_id == 7LLU) && (_1b76b4310_part[0LL]._field_kind == jule::Str("&", 1))) {
					_96421_is_ref=true;
					_1b76b4310_part=_1b76b4310_part.slice(1LL);
					if (_1b76b4310_part.len() == 0LL) {
						(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
						goto _iter_next_4392074976;
					}
				}
				if (((_1b76b4310_part[0LL]._field_id != 2LLU) && (_1b76b4310_part[0LL]._field_id != 3LLU)) && (_1b76b4310_part[0LL]._field_kind != jule::Str("(", 1))) {
					(*this)._method_push_err(_93417_token,jule::Str("invalid syntax", 14));
					goto _iter_next_4392074976;
				}
				jule::Ptr<_1b7509a90_AssignLeft> _99221_l = (*this)._method_build_assign_l(_1b76b4310_part);
				(*(_99221_l))._field_mutable=_96321_is_mut;
				(*(_99221_l))._field_reference=_96421_is_ref;
				(*(_93917_assign))._field_left = jule::alloc_for_append((*(_93917_assign))._field_left,1);(*(_93917_assign))._field_left.__push(_99221_l);
			}
			_iter_next_4392074976:;
			++it;
			goto _iter_begin_4392074976;
		}
		_iter_end_4392074976:;
	}
	return std::make_tuple(_93917_assign,true);
}



inline std::tuple<jule::Ptr<_1b7509a90_AssignSt>,jule::Bool> _1b76b4310_ScopeParser::_method_build_assign_st(jule::Slice<_1b7553d92_Token>& _100139_tokens) {
	jule::Ptr<_1b7509a90_AssignSt> _100158_st = jule::Ptr<_1b7509a90_AssignSt>();
	jule::Bool _100173_ok = jule::Bool();
	if ((!(_1b77c370a_check_assign_tokens(_100139_tokens)))) {
		_100158_st = nullptr;
		_100173_ok = false;
		return std::make_tuple(_100158_st,_100173_ok);
	}
	{
		auto &_match_expr{ _100139_tokens[0LL]._field_id };
		
		if (_match_expr == 34LLU) {
			_case_begin_4392107360:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_decl_assign(_100139_tokens);
			}
		}
		else {
			_case_begin_4392105104:;
			{
				std::tie(_100158_st,_100173_ok) = (*this)._method_build_plain_assign(_100139_tokens);
			}
		}
		_match_end_4392106544:;
	}
	return std::make_tuple(_100158_st,_100173_ok);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_use_expr(jule::Slice<_1b7553d92_Token>& _101438_tokens) {
	if (_101438_tokens.len() == 1LL) {
		(*this)._method_push_err(_101438_tokens[0LL],jule::Str("expression missing", 18));
		return jule::Any(nullptr);
	}
	jule::Ptr<_1b7509a90_UseExpr> _102017_ue = jule::new_struct<_1b7509a90_UseExpr>(new( std::nothrow ) _1b7509a90_UseExpr(_101438_tokens[0LL],jule::Ptr<_1b7509a90_Expr>()));
	_101438_tokens=_101438_tokens.slice(1LL);
	(*(_102017_ue))._field_expr=(*((*this)._field_p))._method_build_expr(_101438_tokens);
	return jule::Any(_102017_ue);
}



inline jule::Any _1b76b4310_ScopeParser::_method_build_st(jule::Ptr<_1b76b4310_Stmt>& _102932_st) {
	_1b7553d92_Token _103017_token = (*(_102932_st))._field_tokens[0LL];
	if (_103017_token._field_id == 2LLU) {
		jule::Any _103222_s;
		jule::Bool _103225_ok;
		std::tie(_103222_s,_103225_ok) = (*this)._method_build_id_st((*(_102932_st))._field_tokens);
		if (_103225_ok) {
			return _103222_s;
		}
	}
	jule::Ptr<_1b7509a90_AssignSt> _103818_s;
	jule::Bool _103821_ok;
	std::tie(_103818_s,_103821_ok) = (*this)._method_build_assign_st((*(_102932_st))._field_tokens);
	if (_103821_ok) {
		return jule::Any(_103818_s);
	}
	{
		auto &_match_expr{ _103017_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_4392132112:;
			{
				return (*this)._method_build_use_expr((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 38LLU || _match_expr == 9LLU || _match_expr == 34LLU || _match_expr == 36LLU) {
			_case_begin_4392132672:;
			{
				return (*this)._method_build_var_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_4392127760:;
			{
				return (*this)._method_build_ret_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_4392131824:;
			{
				return (*this)._method_buid_iter_st(_102932_st);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_4392131008:;
			{
				return (*this)._method_build_break_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_4392131104:;
			{
				return (*this)._method_build_cont_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_4392131200:;
			{
				return (*this)._method_build_if_else_chain((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_4392131296:;
			{
				return (*this)._method_build_comment_st(_103017_token);
			}
		}
		else if (_match_expr == 26LLU) {
			_case_begin_4392131392:;
			{
				return (*this)._method_build_co_call_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 22LLU) {
			_case_begin_4392132832:;
			{
				return (*this)._method_build_goto_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 32LLU) {
			_case_begin_4392132928:;
			{
				return (*this)._method_build_fall_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4392133024:;
			{
				return (*this)._method_build_type_alias_st((*(_102932_st))._field_tokens);
			}
		}
		else if (_match_expr == 27LLU) {
			_case_begin_4392133120:;
			{
				return jule::Any((*this)._method_build_match_case((*(_102932_st))._field_tokens));
			}
		}
		else if (_match_expr == 35LLU || _match_expr == 37LLU) {
			_case_begin_4392133216:;
			{
				return jule::Any((*this)._method_build_scope_st((*(_102932_st))._field_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4392133312:;
			{
				if (_103017_token._field_kind == jule::Str("{", 1)) {
					return jule::Any((*this)._method_build_scope_st((*(_102932_st))._field_tokens));
				}
			}
		}
		else {
			_case_begin_4392126144:;
			{
				jule::Ptr<_1b7509a90_Expr> _109921_expr = (*((*this)._field_p))._method_build_expr((*(_102932_st))._field_tokens);
				if (_109921_expr != nullptr) {
					return jule::Any(_109921_expr);
				}
			}
		}
		_match_end_4392128368:;
	}
	(*this)._method_push_err(_103017_token,jule::Str("invalid syntax", 14));
	return jule::Any(nullptr);
}



inline void _1b76b4310_ScopeParser::_method_build(jule::Slice<_1b7553d92_Token>& _110929_tokens,jule::Ptr<_1b7509a90_ScopeTree>& _110951_s) {
	if (_110951_s == nullptr) {
		return;
	}
	(*this)._field_stmts=_1b76b4310_split_stmts(_110929_tokens);
	(*this)._field_pos=-1LL;
	(*this)._field_s=_110951_s;
	while ((!((*this)._method_is_last_st())) && (!((*this)._method_finished()))) {
		{
			jule::Ptr<_1b76b4310_Stmt> _111821_st = (*this)._method_next();
			jule::Any _111921_data = (*this)._method_build_st(_111821_st);
			if (_111921_data != nullptr) {
				(*((*this)._field_s))._field_stmts = jule::alloc_for_append((*((*this)._field_s))._field_stmts,1);(*((*this)._field_s))._field_stmts.__push(_111921_data);
			}
			if ((*this)._method_stopped()) {
				goto _iter_end_4392158688;
			}
		}
	_iter_next_4392158688:;
	}
	_iter_end_4392158688:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b76b4310_ScopeParser &_Src) {
	_Stream << "ScopeParser{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b76b4ac4_CallData &_Src) {
	_Stream << "CallData{";
	_Stream << "expr_tokens:" << _Src._field_expr_tokens << ", ";
	_Stream << "args_tokens:" << _Src._field_args_tokens << ", ";
	_Stream << "generics_tokens:" << _Src._field_generics_tokens;
	_Stream << "}";
	return _Stream;
}



inline void _1b76b4ac4_ExprBuilder::_method_push_err(_1b7553d92_Token _24227_token,jule::Str _24241_fmt,jule::Slice<jule::Any> _24254_args) {
	(*((*this)._field_p))._method_push_err(_24227_token,_24241_fmt,_24254_args);
}



inline void _1b76b4ac4_ExprBuilder::_method_push_suggestion(jule::Str _24734_fmt,jule::Slice<jule::Any> _24747_args) {
	(*((*this)._field_p))._method_push_suggestion(_24734_fmt,_24747_args);
}



inline jule::Ptr<_1b7509a90_TupleExpr> _1b76b4ac4_ExprBuilder::_method_build_tuple(jule::Slice<jule::Slice<_1b7553d92_Token>>& _25135_parts) {
	jule::Ptr<_1b7509a90_TupleExpr> _25217_tuple = jule::new_struct<_1b7509a90_TupleExpr>(new( std::nothrow ) _1b7509a90_TupleExpr(jule::Slice<jule::Ptr<_1b7509a90_Expr>>::alloc(0LL,static_cast<jule::I64>(_25135_parts.len()))));
	{
		auto &expr = _25135_parts;
		auto it = expr.begin();
		_iter_begin_4392200144:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4ac4_part = *it;
			{
				(*(_25217_tuple))._field_expr = jule::alloc_for_append((*(_25217_tuple))._field_expr,1);(*(_25217_tuple))._field_expr.__push((*this)._method_build_from_tokens(_1b76b4ac4_part));
			}
			_iter_next_4392200144:;
			++it;
			goto _iter_begin_4392200144;
		}
		_iter_end_4392200144:;
	}
	return _25217_tuple;
}



inline jule::Ptr<_1b7509a90_LitExpr> _1b76b4ac4_ExprBuilder::_method_build_lit(_1b7553d92_Token _26128_token) {
	return jule::new_struct<_1b7509a90_LitExpr>(new( std::nothrow ) _1b7509a90_LitExpr(_26128_token,_26128_token._field_kind));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1b76b4ac4_ExprBuilder::_method_build_primitive_type(_1b7553d92_Token& _26840_token) {
	return _1a691245e_build_prim_type(_26840_token);
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_single(_1b7553d92_Token _27235_token) {
	{
		auto &_match_expr{ _27235_token._field_id };
		
		if (_match_expr == 6LLU) {
			_case_begin_4392212320:;
			{
				return jule::Any((*this)._method_build_lit(_27235_token));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4392212416:;
			{
				if (_27235_token._field_kind == jule::Str("...", 3)) {
					return jule::Any(jule::new_struct<_1b7509a90_VariadicExpr>(new( std::nothrow ) _1b7509a90_VariadicExpr(_27235_token,jule::Any())));
				}
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 28LLU || _match_expr == 40LLU) {
			_case_begin_4392212560:;
			{
				return jule::Any(_1b76b4ac4_build_ident_expr(_27235_token));
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_4392212656:;
			{
				return jule::Any((*this)._method_build_primitive_type(_27235_token));
			}
		}
		_match_end_4392212096:;
	}
	(*this)._method_push_err(_27235_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1b7509a90_IdentExpr> _1b76b4ac4_ExprBuilder::_method_build_cpp_linked_ident(jule::Slice<_1b7553d92_Token>& _29646_tokens) {
	if (_29646_tokens[0LL]._field_id != 31LLU) {
		return nullptr;
	} else if (_29646_tokens[1LL]._field_id != 20LLU) {
		(*this)._method_push_err(_29646_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use dot (.) to access cpp-linked defines", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1b7553d92_Token _30417_token = _29646_tokens[2LL];
	if (_30417_token._field_id != 2LLU) {
		(*this)._method_push_err(_29646_tokens[2LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7509a90_IdentExpr> _31017_expr = _1b76b4ac4_build_ident_expr(_30417_token);
	(*(_31017_expr))._field_cpp_linked=true;
	return _31017_expr;
}



inline jule::Ptr<_1b7509a90_UnaryExpr> _1b76b4ac4_ExprBuilder::_method_build_unary(jule::Slice<_1b7553d92_Token> _31534_tokens) {
	_1b7553d92_Token _31617_op = _31534_tokens[0LL];
	if (_31534_tokens.len() == 1LL) {
		(*this)._method_push_err(_31617_op,jule::Str("missing expression for unary operator", 37),jule::Slice<jule::Any>());
		return nullptr;
	} else if ((!(_1b7553d92_is_unary_op(_31617_op._field_kind)))) {
		(*this)._method_push_err(_31617_op,jule::Str("operator @ is not unary", 23),jule::Slice<jule::Any>({jule::Any(_31617_op._field_kind)}));
		return nullptr;
	}
	_31534_tokens=_31534_tokens.slice(1LL);
	return jule::new_struct<_1b7509a90_UnaryExpr>(new( std::nothrow ) _1b7509a90_UnaryExpr(_31617_op,(*this)._method_build(_31534_tokens)));
}



inline jule::Ptr<_1b7509a90_SubIdentExpr> _1b76b4ac4_ExprBuilder::_method_build_obj_sub_ident(jule::Slice<_1b7553d92_Token> _33642_tokens) {
	jule::I64 _33717_i = _33642_tokens.len() - 1LL;
	_1b7553d92_Token _33817_ident_token = _33642_tokens[_33717_i];
	(_33717_i)--;
	_33642_tokens=_33642_tokens.slice(0LL,_33717_i);
	if (_33642_tokens.len() == 0LL) {
		(*this)._method_push_err(_33817_ident_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_SubIdentExpr>(new( std::nothrow ) _1b7509a90_SubIdentExpr(jule::Bool(),(*this)._method_build(_33642_tokens),_33817_ident_token));
}



inline jule::Ptr<_1b7509a90_NsSelectionExpr> _1b76b4ac4_ExprBuilder::_method_build_ns_sub_ident(jule::Slice<_1b7553d92_Token>& _35142_tokens) {
	jule::Ptr<_1b7509a90_NsSelectionExpr> _35217_ns = jule::new_struct<_1b7509a90_NsSelectionExpr>(new( std::nothrow ) _1b7509a90_NsSelectionExpr());
	{
		auto &expr = _35142_tokens;
		auto it = expr.begin();
		_iter_begin_4392260528:;
		if (it != expr.end()) {
			jule::Int _1b76b4ac4_i = it - expr.begin();
			_1b7553d92_Token _1b76b4ac4_token = *it;
			{
				if ((_1b76b4ac4_i % 2LL) == 0LL) {
					if (_1b76b4ac4_token._field_id != 2LLU) {
						(*this)._method_push_err(_1b76b4ac4_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					}
					(*(_35217_ns))._field_ns = jule::alloc_for_append((*(_35217_ns))._field_ns,1);(*(_35217_ns))._field_ns.__push(_1b76b4ac4_token);
				} else if (_1b76b4ac4_token._field_id != 23LLU) {
					(*this)._method_push_err(_1b76b4ac4_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("expected double colon \"::\"", 26),jule::Slice<jule::Any>());
				}
			}
			_iter_next_4392260528:;
			++it;
			_1b76b4ac4_i++;
			goto _iter_begin_4392260528;
		}
		_iter_end_4392260528:;
	}
	(*(_35217_ns))._field_ident=(*(_35217_ns))._field_ns[(*(_35217_ns))._field_ns.len() - 1LL];
	(*(_35217_ns))._field_ns=(*(_35217_ns))._field_ns.slice(0LL,(*(_35217_ns))._field_ns.len() - 1LL);
	return _35217_ns;
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1b76b4ac4_ExprBuilder::_method_build_type(jule::Slice<_1b7553d92_Token>& _37034_tokens) {
	jule::Int _37117_i = 0LL;
	jule::Ptr<_1b7509a90_TypeDecl> _37218_t;
	jule::Bool _37221_ok;
	std::tie(_37218_t,_37221_ok) = (*((*this)._field_p))._method_build_type(_37034_tokens,(&(_37117_i)),false);
	if ((!(_37221_ok))) {
		(*this)._method_push_err(_37034_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_37117_i < _37034_tokens.len()) {
		(*this)._method_push_err(_37034_tokens[_37117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _37218_t;
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_sub_ident(jule::Slice<_1b7553d92_Token>& _38439_tokens) {
	jule::I64 _38513_i = _38439_tokens.len() - 2LL;
	_1b7553d92_Token _38613_token = _38439_tokens[_38513_i];
	{
		auto &_match_expr{ _38613_token._field_id };
		
		if (_match_expr == 20LLU) {
			_case_begin_4392291552:;
			{
				return jule::Any((*this)._method_build_obj_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 23LLU) {
			_case_begin_4392291696:;
			{
				return jule::Any((*this)._method_build_ns_sub_ident(_38439_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4392291792:;
			{
				if (_38613_token._field_kind == jule::Str("]", 1)) {
					return jule::Any((*this)._method_build_type(_38439_tokens));
				}
			}
		}
		_match_end_4392291408:;
	}
	(*this)._method_push_err(_38613_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1b7509a90_VariadicExpr> _1b76b4ac4_ExprBuilder::_method_build_variadic(jule::Slice<_1b7553d92_Token> _40537_tokens) {
	_1b7553d92_Token _40617_token = _40537_tokens[_40537_tokens.len() - 1LL];
	_40537_tokens=_40537_tokens.slice(0LL,_40537_tokens.len() - 1LL);
	return jule::new_struct<_1b7509a90_VariadicExpr>(new( std::nothrow ) _1b7509a90_VariadicExpr(_40617_token,(*this)._method_build(_40537_tokens)));
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_op_right(jule::Slice<_1b7553d92_Token>& _41438_tokens) {
	_1b7553d92_Token _41517_token = _41438_tokens[_41438_tokens.len() - 1LL];
	{
		auto &_match_expr{ _41517_token._field_kind };
		
		if (_match_expr == jule::Str("!", 1)) {
			_case_begin_4392309040:;
			{
				_41438_tokens=_41438_tokens.slice(0LL,_41438_tokens.len() - 1LL);
				jule::Any _41921_d = (*this)._method_build(_41438_tokens);
				if (_41921_d == nullptr) {
					return jule::Any(nullptr);
				}
				{
					auto &_match_expr{ _41921_d };
					
					if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnCallExpr>>()) {
						_case_begin_4392312944:;
						{
							(*(_41921_d.operator jule::Ptr<_1b7509a90_FnCallExpr>()))._field_exception=jule::new_struct<_1b7509a90_ScopeTree>(new( std::nothrow ) _1b7509a90_ScopeTree(jule::Ptr<_1b7509a90_ScopeTree>(),jule::Bool(),true,jule::Slice<jule::Any>()));
							return _41921_d;
						}
					}
					_match_end_4392313824:;
				}
			}
		}
		else if (_match_expr == jule::Str("...", 3)) {
			_case_begin_4392309136:;
			{
				return jule::Any((*this)._method_build_variadic(_41438_tokens));
			}
		}
		_match_end_4392308960:;
	}
	(*this)._method_push_err(_41517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_between_parentheses(jule::Slice<_1b7553d92_Token> _43948_tokens) {
	_1b7553d92_Token _44013_token = _43948_tokens[0LL];
	_43948_tokens=_43948_tokens.slice(1LL,_43948_tokens.len() - 1LL);
	if (_43948_tokens.len() == 0LL) {
		(*this)._method_push_err(_44013_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("empty parentheses are not valid expression, must include an expression in range", 79),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	return (*this)._method_build(_43948_tokens);
}



inline jule::Ptr<_1b7509a90_CastExpr> _1b76b4ac4_ExprBuilder::_method_try_build_cast(jule::Slice<_1b7553d92_Token>& _45038_tokens) {
	jule::Int _45117_range_n = 0LL;
	{
		auto &expr = _45038_tokens;
		auto it = expr.begin();
		_iter_begin_4392331296:;
		if (it != expr.end()) {
			jule::Int _1b76b4ac4_i = it - expr.begin();
			_1b7553d92_Token &_1b76b4ac4_token = *it;
			{
				if (_1b76b4ac4_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b76b4ac4_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4392335904:;
							{
								(_45117_range_n)++;
								goto _iter_next_4392331296;
							}
						}
						else {
							_case_begin_4392334112:;
							{
								(_45117_range_n)--;
							}
						}
						_match_end_4392334224:;
					}
				}
				if (_45117_range_n > 0LL) {
					goto _iter_next_4392331296;
				} else if ((_1b76b4ac4_i + 1LL) == _45038_tokens.len()) {
					return nullptr;
				}
				jule::Slice<_1b7553d92_Token> _47221_type_tokens = _45038_tokens.slice(0LL,_1b76b4ac4_i + 1LL);
				jule::Slice<_1b7553d92_Token> _47321_expr_tokens = _45038_tokens.slice(_1b76b4ac4_i + 1LL);
				if (_47321_expr_tokens.len() == 0LL) {
					return nullptr;
				}
				_1b7553d92_Token _48017_tok = _47321_expr_tokens[0LL];
				if ((_48017_tok._field_id != 3LLU) || (_48017_tok._field_kind != jule::Str("(", 1))) {
					return nullptr;
				}
				jule::Ptr<_1b7509a90_CastExpr> _48521_cast = jule::new_struct<_1b7509a90_CastExpr>(new( std::nothrow ) _1b7509a90_CastExpr());
				if (_47321_expr_tokens.len() == 2LL) {
					(*this)._method_push_err(_47321_expr_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("give an expression for casting", 30),jule::Slice<jule::Any>());
				}
				if (_47221_type_tokens.len() == 2LL) {
					(*this)._method_push_err(_47221_type_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("type declaration expected for casting", 37),jule::Slice<jule::Any>());
				} else {
					_47221_type_tokens=_47221_type_tokens.slice(1LL,_47221_type_tokens.len() - 1LL);
					jule::Int _49925_type_index = 0LL;
					jule::Ptr<_1b7509a90_TypeDecl> _50026_t;
					jule::Bool _50029_ok;
					std::tie(_50026_t,_50029_ok) = (*((*this)._field_p))._method_build_type(_47221_type_tokens,(&(_49925_type_index)),true);
					if (_50029_ok && (_49925_type_index < _47221_type_tokens.len())) {
						(*this)._method_push_err(_47221_type_tokens[_49925_type_index],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					} else if ((!(_50029_ok))) {
						return _48521_cast;
					}
					(*(_48521_cast))._field_kind=_50026_t;
					if (_47321_expr_tokens.len() > 2LL) {
						jule::Int _51029_j = 0LL;
						_1b78b1aa1_range(_51029_j,jule::Str("(", 1),jule::Str(")", 1),_47321_expr_tokens);
						if (_51029_j < _47321_expr_tokens.len()) {
							return nullptr;
						}
						_47321_expr_tokens=_47321_expr_tokens.slice(0LL,_51029_j);
						(*(_48521_cast))._field_expr=(*this)._method_build(_47321_expr_tokens);
					}
				}
				return _48521_cast;
			}
			_iter_next_4392331296:;
			++it;
			_1b76b4ac4_i++;
			goto _iter_begin_4392331296;
		}
		_iter_end_4392331296:;
	}
	return nullptr;
}



inline void _1b76b4ac4_ExprBuilder::_method_push_arg(jule::Slice<jule::Ptr<_1b7509a90_Expr>>& _52532_args,jule::Slice<_1b7553d92_Token> _52551_tokens,_1b7553d92_Token _52568_err_token) {
	if (_52551_tokens.len() == 0LL) {
		(*this)._method_push_err(_52568_err_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_52532_args = jule::alloc_for_append(_52532_args,1);_52532_args.__push((*this)._method_build_from_tokens(_52551_tokens));
}



inline jule::Slice<jule::Ptr<_1b7509a90_Expr>> _1b76b4ac4_ExprBuilder::_method_build_args(jule::Slice<_1b7553d92_Token> _53433_tokens) {
	if (_53433_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1b7509a90_Expr>> _54017_args = nullptr;
	jule::Int _54117_last = 0LL;
	jule::Int _54217_range_n = 0LL;
	_53433_tokens=_53433_tokens.slice(1LL,_53433_tokens.len() - 1LL);
	{
		auto &expr = _53433_tokens;
		auto it = expr.begin();
		_iter_begin_4392384176:;
		if (it != expr.end()) {
			jule::Int _1b76b4ac4_i = it - expr.begin();
			_1b7553d92_Token &_1b76b4ac4_token = *it;
			{
				if (_1b76b4ac4_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b76b4ac4_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4392390528:;
							{
								(_54217_range_n)++;
							}
						}
						else {
							_case_begin_4392388736:;
							{
								(_54217_range_n)--;
							}
						}
						_match_end_4392388848:;
					}
				}
				if ((_54217_range_n > 0LL) || (_1b76b4ac4_token._field_id != 8LLU)) {
					goto _iter_next_4392384176;
				}
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last,_1b76b4ac4_i),_1b76b4ac4_token);
				_54117_last=static_cast<jule::Int>(_1b76b4ac4_i + 1LL);
			}
			_iter_next_4392384176:;
			++it;
			_1b76b4ac4_i++;
			goto _iter_begin_4392384176;
		}
		_iter_end_4392384176:;
	}
	if (_54117_last < _53433_tokens.len()) {
		if (_54117_last == 0LL) {
			if (_53433_tokens.len() > 0LL) {
				(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last]);
			}
		} else {
			(*this)._method_push_arg(_54017_args,_53433_tokens.slice(_54117_last),_53433_tokens[_54117_last - 1LL]);
		}
	}
	return _54017_args;
}



inline jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _1b76b4ac4_ExprBuilder::_method_build_call_generics(jule::Slice<_1b7553d92_Token> _57742_tokens) {
	if (_57742_tokens.len() == 0LL) {
		return nullptr;
	}
	_57742_tokens=_57742_tokens.slice(1LL,_57742_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_1b7553d92_Token>> _58318_parts;
	jule::Slice<_1b6986b22_Log> _58325_errs;
	std::tie(_58318_parts,_58325_errs) = _1b78b1aa1_parts(_57742_tokens,8LLU,true);
	jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _58417_generics = jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_58318_parts.len()));
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_58325_errs);
	{
		auto &expr = _58318_parts;
		auto it = expr.begin();
		_iter_begin_4392408112:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4ac4_part = *it;
			{
				if (_1b76b4ac4_part.len() == 0LL) {
					goto _iter_next_4392408112;
				}
				jule::Int _59021_j = 0LL;
				jule::Ptr<_1b7509a90_TypeDecl> _59122_generic;
				std::tie(_59122_generic,std::ignore) = (*((*this)._field_p))._method_build_type(_1b76b4ac4_part,(&(_59021_j)),true);
				if (_59021_j < _1b76b4ac4_part.len()) {
					(*this)._method_push_err(_1b76b4ac4_part[_59021_j],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_58417_generics = jule::alloc_for_append(_58417_generics,1);_58417_generics.__push(_59122_generic);
			}
			_iter_next_4392408112:;
			++it;
			goto _iter_begin_4392408112;
		}
		_iter_end_4392408112:;
	}
	return _58417_generics;
}



inline jule::Ptr<_1b7509a90_FnCallExpr> _1b76b4ac4_ExprBuilder::_method_build_fn_call(_1b7553d92_Token& _60137_token,jule::Ptr<_1b76b4ac4_CallData>& _60156_data) {
	return jule::new_struct<_1b7509a90_FnCallExpr>(new( std::nothrow ) _1b7509a90_FnCallExpr(_60137_token,(*this)._method_build_from_tokens((*(_60156_data))._field_expr_tokens),(*this)._method_build_call_generics((*(_60156_data))._field_generics_tokens),(*this)._method_build_args((*(_60156_data))._field_args_tokens),jule::Ptr<_1b7509a90_ScopeTree>()));
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_parentheses_range(jule::Slice<_1b7553d92_Token>& _61047_tokens) {
	_1b7553d92_Token _61117_token = _61047_tokens[0LL];
	{
		auto &_match_expr{ _61117_token._field_id };
		
		if (_match_expr == 3LLU) {
			_case_begin_4392430336:;
			{
				{
					auto &_match_expr{ _61117_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_4392431904:;
						{
							jule::Ptr<_1b7509a90_CastExpr> _61625_expr = (*this)._method_try_build_cast(_61047_tokens);
							if (_61625_expr != nullptr) {
								return jule::Any(_61625_expr);
							}
						}
					}
					_match_end_4392430688:;
				}
			}
		}
		_match_end_4392429936:;
	}
	jule::Ptr<_1b76b4ac4_CallData> _62317_data = _1b76b4ac4_get_call_data(_61047_tokens);
	if ((*(_62317_data))._field_expr_tokens.len() == 0LL) {
		return (*this)._method_build_between_parentheses((*(_62317_data))._field_args_tokens);
	}
	return jule::Any((*this)._method_build_fn_call(_61117_token,_62317_data));
}



inline jule::Ptr<_1b7509a90_UnsafeExpr> _1b76b4ac4_ExprBuilder::_method_build_unsafe_expr(jule::Slice<_1b7553d92_Token> _63440_tokens) {
	_1b7553d92_Token _63517_token = _63440_tokens[0LL];
	_63440_tokens=_63440_tokens.slice(1LL);
	jule::Int _63717_i = 0LL;
	jule::Slice<_1b7553d92_Token> _63817_range_tokens = _1b78b1aa1_range(_63717_i,jule::Str("{", 1),jule::Str("}", 1),_63440_tokens);
	if (_63817_range_tokens.len() == 0LL) {
		(*this)._method_push_err(_63440_tokens[0LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_UnsafeExpr>(new( std::nothrow ) _1b7509a90_UnsafeExpr(_63517_token,(*((*this)._method_build_from_tokens(_63817_range_tokens)))._field_kind));
}



inline jule::Ptr<_1b7509a90_FnDecl> _1b76b4ac4_ExprBuilder::_method_build_anon_fn(jule::Slice<_1b7553d92_Token>& _64937_tokens) {
	jule::Ptr<_1b7509a90_FnDecl> _65017_f = (*((*this)._field_p))._method_build_fn(_64937_tokens,false,false);
	if ((!((*(_65017_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_65017_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("anonymous function expected, remove identifier of function", 58),jule::Slice<jule::Any>());
	}
	return _65017_f;
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_unsafe(jule::Slice<_1b7553d92_Token>& _65836_tokens) {
	{
		auto &_match_expr{ _65836_tokens[1LL]._field_id };
		
		if (_match_expr == 33LLU) {
			_case_begin_4392464416:;
			{
				return jule::Any((*this)._method_build_anon_fn(_65836_tokens));
			}
		}
		else {
			_case_begin_4392462144:;
			{
				return jule::Any((*this)._method_build_unsafe_expr(_65836_tokens));
			}
		}
		_match_end_4392463008:;
	}
}



inline void _1b76b4ac4_ExprBuilder::_method_push_range_lit_part(jule::Slice<_1b7553d92_Token> _66942_part,_1b7553d92_Token _6709_error_token,jule::Slice<jule::Slice<_1b7553d92_Token>>& _67034_parts) {
	if (_66942_part.len() == 0LL) {
		(*this)._method_push_err(_6709_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("an expression expected", 22),jule::Slice<jule::Any>());
		return;
	}
	_67034_parts = jule::alloc_for_append(_67034_parts,1);_67034_parts.__push(_66942_part);
}



inline jule::Slice<jule::Slice<_1b7553d92_Token>> _1b76b4ac4_ExprBuilder::_method_get_brace_range_lit_expr_parts(jule::Slice<_1b7553d92_Token> _68053_tokens) {
	if (_68053_tokens.len() < 2LL) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1b7553d92_Token>> _68617_parts = nullptr;
	jule::Int _68817_last = 0LL;
	jule::Int _68917_range_n = 0LL;
	_68053_tokens=_68053_tokens.slice(1LL,_68053_tokens.len() - 1LL);
	{
		auto &expr = _68053_tokens;
		auto it = expr.begin();
		_iter_begin_4392479936:;
		if (it != expr.end()) {
			jule::Int _1b76b4ac4_i = it - expr.begin();
			_1b7553d92_Token &_1b76b4ac4_token = *it;
			{
				if (_1b76b4ac4_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b76b4ac4_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4392502800:;
							{
								(_68917_range_n)++;
							}
						}
						else {
							_case_begin_4392484496:;
							{
								(_68917_range_n)--;
							}
						}
						_match_end_4392501504:;
					}
				}
				if ((_68917_range_n > 0LL) || (_1b76b4ac4_token._field_id != 8LLU)) {
					goto _iter_next_4392479936;
				}
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last,_1b76b4ac4_i),_1b76b4ac4_token,_68617_parts);
				_68817_last=static_cast<jule::Int>(_1b76b4ac4_i + 1LL);
			}
			_iter_next_4392479936:;
			++it;
			_1b76b4ac4_i++;
			goto _iter_begin_4392479936;
		}
		_iter_end_4392479936:;
	}
	if (_68817_last < _68053_tokens.len()) {
		if (_68817_last == 0LL) {
			if (_68053_tokens.len() > 0LL) {
				(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last],_68617_parts);
			}
		} else {
			(*this)._method_push_range_lit_part(_68053_tokens.slice(_68817_last),_68053_tokens[_68817_last - 1LL],_68617_parts);
		}
	}
	return _68617_parts;
}



inline jule::Ptr<_1b7509a90_FieldExprPair> _1b76b4ac4_ExprBuilder::_method_build_field_expr_pair(jule::Slice<_1b7553d92_Token> _72344_tokens) {
	if ((_72344_tokens.len() - 2LL) == 0LL) {
		(*this)._method_push_err(_72344_tokens[1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7509a90_FieldExprPair> _72817_pair = jule::new_struct<_1b7509a90_FieldExprPair>(new( std::nothrow ) _1b7509a90_FieldExprPair(_72344_tokens[0LL],jule::Any()));
	_72344_tokens=_72344_tokens.slice(2LL);
	(*(_72817_pair))._field_expr=(*((*this)._method_build_from_tokens(_72344_tokens)))._field_kind;
	return _72817_pair;
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_struct_lit_expr(jule::Slice<_1b7553d92_Token>& _73645_tokens) {
	_1b7553d92_Token _73717_token = _73645_tokens[0LL];
	if (_73717_token._field_id == 2LLU) {
		if (_73645_tokens.len() > 1LL) {
			_73717_token=_73645_tokens[1LL];
			if (_73717_token._field_id == 11LLU) {
				return jule::Any((*this)._method_build_field_expr_pair(_73645_tokens));
			}
		}
	}
	return jule::Any((*this)._method_build_from_tokens(_73645_tokens));
}



inline jule::Slice<jule::Any> _1b76b4ac4_ExprBuilder::_method_build_struct_lit_exprs(jule::Slice<_1b7553d92_Token>& _74946_tokens) {
	jule::Slice<jule::Slice<_1b7553d92_Token>> _75017_parts = (*this)._method_get_brace_range_lit_expr_parts(_74946_tokens);
	if (_75017_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Any> _75517_pairs = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_75017_parts.len()));
	{
		auto &expr = _75017_parts;
		auto it = expr.begin();
		_iter_begin_4392538064:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4ac4_part = *it;
			{
				_75517_pairs = jule::alloc_for_append(_75517_pairs,1);_75517_pairs.__push((*this)._method_build_struct_lit_expr(_1b76b4ac4_part));
			}
			_iter_next_4392538064:;
			++it;
			goto _iter_begin_4392538064;
		}
		_iter_end_4392538064:;
	}
	return _75517_pairs;
}



inline jule::Ptr<_1b7509a90_StructLit> _1b76b4ac4_ExprBuilder::_method_build_typed_struct_literal(jule::Slice<_1b7553d92_Token> _76249_tokens) {
	jule::Int _76317_i = 0LL;
	jule::Ptr<_1b7509a90_TypeDecl> _76418_t;
	jule::Bool _76421_ok;
	std::tie(_76418_t,_76421_ok) = (*((*this)._field_p))._method_build_type(_76249_tokens,(&(_76317_i)),true);
	if ((!(_76421_ok))) {
		return nullptr;
	} else if (_76317_i >= _76249_tokens.len()) {
		(*this)._method_push_err(_76249_tokens[_76317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_76249_tokens=_76249_tokens.slice(_76317_i);
	_1b7553d92_Token _77313_token = _76249_tokens[0LL];
	if ((_77313_token._field_id != 3LLU) || (_77313_token._field_kind != jule::Str("{", 1))) {
		(*this)._method_push_err(_77313_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_StructLit>(new( std::nothrow ) _1b7509a90_StructLit(_76418_t,(*this)._method_build_struct_lit_exprs(_76249_tokens)));
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_brace_lit_part(jule::Slice<_1b7553d92_Token>& _78544_tokens) {
	jule::Slice<_1b7553d92_Token> _78618_l;
	jule::Slice<_1b7553d92_Token> _78625_r;
	std::tie(_78618_l,_78625_r) = _1b76b4ac4_split_colon(_78544_tokens);
	if (_78618_l != nullptr) {
		return jule::Any(jule::new_struct<_1b7509a90_KeyValPair>(new( std::nothrow ) _1b7509a90_KeyValPair((*((*this)._method_build_from_tokens(_78618_l)))._field_kind,(*((*this)._method_build_from_tokens(_78625_r)))._field_kind,_78544_tokens[_78618_l.len()])));
	}
	return jule::Any((*this)._method_build_from_tokens(_78544_tokens));
}



inline jule::Ptr<_1b7509a90_BraceLit> _1b76b4ac4_ExprBuilder::_method_build_brace_lit(jule::Slice<_1b7553d92_Token>& _79839_tokens) {
	jule::Ptr<_1b7509a90_BraceLit> _79917_lit = jule::new_struct<_1b7509a90_BraceLit>(new( std::nothrow ) _1b7509a90_BraceLit(_79839_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_1b7553d92_Token>> _80317_parts = (*this)._method_get_brace_range_lit_expr_parts(_79839_tokens);
	if (_80317_parts == nullptr) {
		return _79917_lit;
	}
	(*(_79917_lit))._field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_80317_parts.len()));
	{
		auto &expr = _80317_parts;
		auto it = expr.begin();
		_iter_begin_4392571168:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4ac4_part = *it;
			{
				(*(_79917_lit))._field_exprs = jule::alloc_for_append((*(_79917_lit))._field_exprs,1);(*(_79917_lit))._field_exprs.__push((*this)._method_build_brace_lit_part(_1b76b4ac4_part));
			}
			_iter_next_4392571168:;
			++it;
			goto _iter_begin_4392571168;
		}
		_iter_end_4392571168:;
	}
	return _79917_lit;
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_brace_range(jule::Slice<_1b7553d92_Token>& _81641_tokens) {
	jule::Slice<_1b7553d92_Token> _81718_expr_tokens;
	jule::Int _81731_range_n;
	std::tie(_81718_expr_tokens,_81731_range_n) = _1b76b4ac4_get_range_expr_tokens(_81641_tokens);
	{
		
		if (_81718_expr_tokens.len() == 0LL) {
			_case_begin_4392579488:;
			{
				return jule::Any((*this)._method_build_brace_lit(_81641_tokens));
			}
		}
		else if (_81731_range_n > 0LL) {
			_case_begin_4392579584:;
			{
				(*this)._method_push_err(_81641_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4392579360:;
	}
	_1b7553d92_Token _82913_else_token = _81718_expr_tokens[_81718_expr_tokens.len() - 1LL];
	if (_81718_expr_tokens[_81718_expr_tokens.len() - 1LL]._field_id == 17LLU) {
		_81718_expr_tokens=_81718_expr_tokens.slice(0LL,_81718_expr_tokens.len() - 1LL);
		jule::Any _83221_d = (*this)._method_build(_81718_expr_tokens);
		if (_83221_d == nullptr) {
			return jule::Any(nullptr);
		}
		{
			auto &_match_expr{ _83221_d };
			
			if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnCallExpr>>()) {
				_case_begin_4392591312:;
				{
					_81641_tokens=_81641_tokens.slice(_81718_expr_tokens.len() + 1LL);
					jule::Int _83925_i = 0LL;
					jule::Slice<_1b7553d92_Token> _84025_range_tokens = _1b78b1aa1_range(_83925_i,jule::Str("{", 1),jule::Str("}", 1),_81641_tokens);
					jule::Ptr<_1b7509a90_FnCallExpr> _84125_model = _83221_d.operator jule::Ptr<_1b7509a90_FnCallExpr>();
					if ((*(_84125_model))._method_ignored()) {
						(*this)._method_push_err(_82913_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						(*this)._method_push_suggestion(jule::Str("just ignore exceptional or handle it but you cannot do both at same time", 72),jule::Slice<jule::Any>());
					}
					(*(_84125_model))._field_exception=(*((*this)._field_p))._method_build_scope(_84025_range_tokens);
					return _83221_d;
				}
			}
			else {
				_case_begin_4392590336:;
				{
					(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return jule::Any(nullptr);
				}
			}
			_match_end_4392591152:;
		}
	}
	{
		auto &_match_expr{ _81718_expr_tokens[0LL]._field_id };
		
		if (_match_expr == 35LLU) {
			_case_begin_4392610912:;
			{
				return (*this)._method_build_unsafe(_81641_tokens);
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_4392610656:;
			{
				return jule::Any((*this)._method_build_anon_fn(_81641_tokens));
			}
		}
		else if (_match_expr == 2LLU || _match_expr == 31LLU) {
			_case_begin_4392610752:;
			{
				return jule::Any((*this)._method_build_typed_struct_literal(_81641_tokens));
			}
		}
		else {
			_case_begin_4392579168:;
			{
				(*this)._method_push_err(_81718_expr_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4392607712:;
	}
}



inline jule::Slice<jule::Slice<_1b7553d92_Token>> _1b76b4ac4_ExprBuilder::_method_get_enumerable_parts(jule::Slice<_1b7553d92_Token> _87343_tokens) {
	_87343_tokens=_87343_tokens.slice(1LL,_87343_tokens.len() - 1LL);
	jule::Slice<jule::Slice<_1b7553d92_Token>> _87518_parts;
	jule::Slice<_1b6986b22_Log> _87525_errors;
	std::tie(_87518_parts,_87525_errors) = _1b78b1aa1_parts(_87343_tokens,8LLU,true);
	(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_87525_errors);
	return _87518_parts;
}



inline jule::Ptr<_1b7509a90_SliceExpr> _1b76b4ac4_ExprBuilder::_method_build_slice(jule::Slice<_1b7553d92_Token> _88034_tokens) {
	jule::Ptr<_1b7509a90_SliceExpr> _88117_slc = jule::new_struct<_1b7509a90_SliceExpr>(new( std::nothrow ) _1b7509a90_SliceExpr(_88034_tokens[0LL],jule::Slice<jule::Any>()));
	jule::Slice<jule::Slice<_1b7553d92_Token>> _88517_parts = (*this)._method_get_enumerable_parts(_88034_tokens);
	if (_88517_parts.len() == 0LL) {
		return _88117_slc;
	}
	(*(_88117_slc))._field_elems=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(_88517_parts.len()));
	{
		auto &expr = _88517_parts;
		auto it = expr.begin();
		_iter_begin_4387836304:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b76b4ac4_p = *it;
			{
				(*(_88117_slc))._field_elems = jule::alloc_for_append((*(_88117_slc))._field_elems,1);(*(_88117_slc))._field_elems.__push((*((*this)._method_build_from_tokens(_1b76b4ac4_p)))._field_kind);
			}
			_iter_next_4387836304:;
			++it;
			goto _iter_begin_4387836304;
		}
		_iter_end_4387836304:;
	}
	return _88117_slc;
}



inline jule::Ptr<_1b7509a90_IndexingExpr> _1b76b4ac4_ExprBuilder::_method_build_indexing(jule::Slice<_1b7553d92_Token> _89837_expr_tokens,jule::Slice<_1b7553d92_Token> _89913_tokens,_1b7553d92_Token _89934_error_token) {
	_89913_tokens=_89913_tokens.slice(1LL,_89913_tokens.len() - 1LL);
	return jule::new_struct<_1b7509a90_IndexingExpr>(new( std::nothrow ) _1b7509a90_IndexingExpr(_89934_error_token,(*((*this)._method_build_from_tokens(_89837_expr_tokens)))._field_kind,(*((*this)._method_build_from_tokens(_89913_tokens)))._field_kind));
}



inline jule::Ptr<_1b7509a90_SlicingExpr> _1b76b4ac4_ExprBuilder::_method_build_slicing(jule::Slice<_1b7553d92_Token>& _90837_expr_tokens,jule::Slice<_1b7553d92_Token>& _90864_slicing_tokens,jule::Int& _90910_colon,_1b7553d92_Token& _90927_error_token) {
	jule::Ptr<_1b7509a90_SlicingExpr> _91017_slc = jule::new_struct<_1b7509a90_SlicingExpr>(new( std::nothrow ) _1b7509a90_SlicingExpr(_90927_error_token,(*((*this)._method_build_from_tokens(_90837_expr_tokens)))._field_kind,jule::Any(),jule::Any()));
	jule::Slice<_1b7553d92_Token> _91517_start_expr_tokens = _90864_slicing_tokens.slice(0LL,_90910_colon);
	if (_91517_start_expr_tokens.len() > 0LL) {
		(*(_91017_slc))._field_start=(*((*this)._method_build_from_tokens(_91517_start_expr_tokens)))._field_kind;
	}
	jule::Slice<_1b7553d92_Token> _92017_to_expr_tokens = _90864_slicing_tokens.slice(_90910_colon + 1LL);
	if (_92017_to_expr_tokens.len() > 0LL) {
		(*(_91017_slc))._field_to=(*((*this)._method_build_from_tokens(_92017_to_expr_tokens)))._field_kind;
	}
	return _91017_slc;
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_bracket_range(jule::Slice<_1b7553d92_Token> _92842_tokens) {
	_1b7553d92_Token _92917_error_token = _92842_tokens[0LL];
	jule::Slice<_1b7553d92_Token> _93018_expr_tokens;
	jule::Int _93031_range_n;
	std::tie(_93018_expr_tokens,_93031_range_n) = _1b76b4ac4_get_range_expr_tokens(_92842_tokens);
	{
		
		if (_93018_expr_tokens.len() == 0LL) {
			_case_begin_4387865616:;
			{
				return jule::Any((*this)._method_build_slice(_92842_tokens));
			}
		}
		else if ((_93018_expr_tokens.len() == 0LL) || (_93031_range_n > 0LL)) {
			_case_begin_4387865728:;
			{
				(*this)._method_push_err(_92917_error_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4387865456:;
	}
	_92842_tokens=_92842_tokens.slice(_93018_expr_tokens.len());
	jule::Int _94917_i = 0LL;
	jule::Slice<_1b7553d92_Token> _95018_slicing_tokens;
	jule::Int _95034_colon;
	std::tie(_95018_slicing_tokens,_95034_colon) = _1a691245e_split_map_range(_92842_tokens,_94917_i);
	if (_95034_colon != -1LL) {
		return jule::Any((*this)._method_build_slicing(_93018_expr_tokens,_95018_slicing_tokens,_95034_colon,_92917_error_token));
	}
	return jule::Any((*this)._method_build_indexing(_93018_expr_tokens,_92842_tokens,_92917_error_token));
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_ternary(jule::Slice<_1b7553d92_Token> _95736_tokens) {
	jule::Ptr<_1b7509a90_TernaryExpr> _95817_ter = jule::new_struct<_1b7509a90_TernaryExpr>(new( std::nothrow ) _1b7509a90_TernaryExpr());
	(*(_95817_ter))._field_token=_95736_tokens[0LL];
	_95736_tokens=_95736_tokens.slice(1LL);
	jule::Slice<_1b7553d92_Token> _96217_expr_tokens = _1b76b4ac4_get_block_expr(_95736_tokens);
	if (_96217_expr_tokens.len() == 0LL) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	(*(_95817_ter))._field_condition=(*this)._method_build_kind(_96217_expr_tokens);
	jule::I64 _96917_i = _96217_expr_tokens.len();
	jule::Slice<_1b7553d92_Token> _97017_true_expr = _1b78b1aa1_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_97017_true_expr == nullptr) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_97017_true_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_96217_expr_tokens.len()],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i >= _95736_tokens.len()) {
		(*this)._method_push_err((*(_95817_ter))._field_token,jule::Str("else block missed for ternary operator", 38),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	_1b7553d92_Token _98413_else_token = _95736_tokens[_96917_i];
	if (_98413_else_token._field_id != 17LLU) {
		(*this)._method_push_err(_98413_else_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("else keyword expected for else block of ternary operator", 56),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	}
	(_96917_i)++;
	jule::I64 _99213_j = _96917_i;
	jule::Slice<_1b7553d92_Token> _99317_false_expr = _1b78b1aa1_range(_96917_i,jule::Str("{", 1),jule::Str("}", 1),_95736_tokens);
	if (_99317_false_expr == nullptr) {
		(*this)._method_push_err(_98413_else_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return jule::Any(_95817_ter);
	} else if (_99317_false_expr.len() == 0LL) {
		(*this)._method_push_err(_95736_tokens[_99213_j],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
	}
	if (_96917_i < _95736_tokens.len()) {
		(*this)._method_push_err(_95736_tokens[_96917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_95817_ter))._field_true_expr=(*this)._method_build_kind(_97017_true_expr);
	(*(_95817_ter))._field_false_expr=(*this)._method_build_kind(_99317_false_expr);
	return jule::Any(_95817_ter);
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_data(jule::Slice<_1b7553d92_Token>& _101234_tokens) {
	{
		auto _match_expr{ _101234_tokens.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_4387922208:;
			{
				return jule::Any(nullptr);
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_4387922304:;
			{
				return (*this)._method_build_single(_101234_tokens[0LL]);
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_4387922400:;
			{
				if (_101234_tokens[0LL]._field_id == 31LLU) {
					return jule::Any((*this)._method_build_cpp_linked_ident(_101234_tokens));
				}
			}
		}
		_match_end_4387921824:;
	}
	_1b7553d92_Token _102617_token = _101234_tokens[0LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		
		if (_match_expr == 16LLU) {
			_case_begin_4387929632:;
			{
				return (*this)._method_build_ternary(_101234_tokens);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4387929776:;
			{
				if ((_101234_tokens.len() > 1LL) && (_102617_token._field_kind == jule::Str("*", 1))) {
					_102617_token=_101234_tokens[1LL];
					if ((_102617_token._field_id == 1LLU) || (_102617_token._field_id == 35LLU)) {
						return jule::Any((*this)._method_build_type(_101234_tokens));
					}
				}
				return jule::Any((*this)._method_build_unary(_101234_tokens));
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4387929872:;
			{
				if (_101234_tokens.len() < 3LL) {
					goto _match_end_4387929488;
				}
				if (_101234_tokens.len() > 3LL) {
					_1b7553d92_Token _104921_t = _101234_tokens[_101234_tokens.len() - 1LL];
					if ((_104921_t._field_id == 3LLU) && (_104921_t._field_kind == jule::Str(")", 1))) {
						goto _match_end_4387929488;
					}
				}
				_1b7553d92_Token _105517_next = _101234_tokens[1LL];
				if ((_105517_next._field_id != 3LLU) || (_105517_next._field_kind != jule::Str("]", 1))) {
					goto _match_end_4387929488;
				}
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		_match_end_4387929488:;
	}
	_102617_token=_101234_tokens[_101234_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102617_token._field_id };
		
		if (_match_expr == 2LLU) {
			_case_begin_4387950032:;
			{
				return (*this)._method_build_sub_ident(_101234_tokens);
			}
		}
		else if (_match_expr == 1LLU) {
			_case_begin_4387950128:;
			{
				return jule::Any((*this)._method_build_type(_101234_tokens));
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4387950224:;
			{
				return (*this)._method_build_op_right(_101234_tokens);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4387950336:;
			{
				{
					auto &_match_expr{ _102617_token._field_kind };
					
					if (_match_expr == jule::Str(")", 1)) {
						_case_begin_4387955600:;
						{
							return (*this)._method_build_parentheses_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_4387955696:;
						{
							return (*this)._method_build_brace_range(_101234_tokens);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_4387955792:;
						{
							return (*this)._method_build_bracket_range(_101234_tokens);
						}
					}
					_match_end_4387951760:;
				}
			}
		}
		_match_end_4387949952:;
	}
	(*this)._method_push_err(_102617_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return jule::Any(nullptr);
}



inline jule::Ptr<_1b7509a90_BinopExpr> _1b76b4ac4_ExprBuilder::_method_build_binop(jule::Slice<_1b7553d92_Token>& _109235_tokens,jule::Int _109252_i) {
	jule::Slice<_1b7553d92_Token> _109317_left_tokens = _109235_tokens.slice(0LL,_109252_i);
	jule::Slice<_1b7553d92_Token> _109417_right_tokens = _109235_tokens.slice(_109252_i + 1LL);
	if (_109317_left_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("left operand expected for binary operator", 41),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_109417_right_tokens.len() == 0LL) {
		(*this)._method_push_err(_109235_tokens[_109252_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("right operand expected for binary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_BinopExpr>(new( std::nothrow ) _1b7509a90_BinopExpr((*this)._method_build(_109317_left_tokens),(*this)._method_build(_109417_right_tokens),_109235_tokens[_109252_i]));
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build(jule::Slice<_1b7553d92_Token>& _111529_tokens) {
	jule::Int _111613_i = _1b76b4ac4_find_lowest_prec_op(_111529_tokens);
	if (_111613_i == -1LL) {
		return (*this)._method_build_data(_111529_tokens);
	}
	return jule::Any((*this)._method_build_binop(_111529_tokens,_111613_i));
}



inline jule::Any _1b76b4ac4_ExprBuilder::_method_build_kind(jule::Slice<_1b7553d92_Token>& _112334_tokens) {
	jule::Slice<jule::Slice<_1b7553d92_Token>> _112418_parts;
	jule::Slice<_1b6986b22_Log> _112425_errors;
	std::tie(_112418_parts,_112425_errors) = _1b78b1aa1_parts(_112334_tokens,8LLU,true);
	if (_112425_errors != nullptr) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_112425_errors);
		return jule::Any(nullptr);
	} else if (_112418_parts.len() > 1LL) {
		return jule::Any((*this)._method_build_tuple(_112418_parts));
	}
	return (*this)._method_build(_112334_tokens);
}



inline jule::Ptr<_1b7509a90_Expr> _1b76b4ac4_ExprBuilder::_method_build_from_tokens(jule::Slice<_1b7553d92_Token> _113440_tokens) {
	_113440_tokens=_1b76b4ac4_eliminate_comments(_113440_tokens);
	if (_113440_tokens.len() == 0LL) {
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_Expr>(new( std::nothrow ) _1b7509a90_Expr(_113440_tokens[0LL],(*this)._method_build_kind(_113440_tokens)));
}







std::ostream &operator<<(std::ostream &_Stream, const _1b76b4ac4_ExprBuilder &_Src) {
	_Stream << "ExprBuilder{";
	_Stream << "p:" << _Src._field_p;
	_Stream << "}";
	return _Stream;
}



inline void _1b78b1aa1_Parser::_method_stop(void) {
	(*this)._field_ast=nullptr;
}



inline jule::Bool _1b78b1aa1_Parser::_method_stopped(void) {
	return (*this)._field_ast == nullptr;
}



inline void _1b78b1aa1_Parser::_method_push_err(_1b7553d92_Token _24027_token,jule::Str _24041_fmt,jule::Slice<jule::Any> _24054_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1b78b1aa1_compiler_err(_24027_token,_24041_fmt,_24054_args));
}



inline void _1b78b1aa1_Parser::_method_push_suggestion(jule::Str _24534_fmt,jule::Slice<jule::Any> _24547_args) {
	{
		_1b78b1aa1_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_24534_fmt,_24547_args);
	}
}



inline jule::Ptr<_1b7509a90_Expr> _1b78b1aa1_Parser::_method_build_expr(jule::Slice<_1b7553d92_Token>& _24935_tokens) {
	jule::Ptr<_1b76b4ac4_ExprBuilder> _25017_ep = jule::new_struct<_1b76b4ac4_ExprBuilder>(new( std::nothrow ) _1b76b4ac4_ExprBuilder(this->self));
	jule::Ptr<_1b7509a90_Expr> _25117_expr = (*(_25017_ep))._method_build_from_tokens(_24935_tokens);
	return _25117_expr;
}



inline jule::Ptr<_1b7509a90_Directive> _1b78b1aa1_Parser::_method_build_directive(jule::Slice<_1b7553d92_Token> _25538_tokens) {
	if (_25538_tokens.len() == 1LL) {
		(*this)._method_push_err(_25538_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_25538_tokens[1LL]._field_column != (_25538_tokens[0LL]._field_column + 1LL)) {
		(*this)._method_push_err(_25538_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_Directive>(new( std::nothrow ) _1b7509a90_Directive(_25538_tokens[1LL],_25538_tokens.slice(2LL)));
}



inline void _1b78b1aa1_Parser::_method_push_directive(jule::Ptr<_1b7509a90_Directive> _27237_d) {
	if (_27237_d == nullptr) {
		return;
	}
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_4388025232:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> &_1b78b1aa1_pd = *it;
			{
				if ((*(_27237_d))._field_tag._field_kind == (*(_1b78b1aa1_pd))._field_tag._field_kind) {
					return;
				}
			}
			_iter_next_4388025232:;
			++it;
			goto _iter_begin_4388025232;
		}
		_iter_end_4388025232:;
	}
	(*this)._field_directives = jule::alloc_for_append((*this)._field_directives,1);(*this)._field_directives.__push(_27237_d);
}



inline jule::Ptr<_1b7509a90_ScopeTree> _1b78b1aa1_Parser::_method_build_scope(jule::Slice<_1b7553d92_Token>& _28636_tokens) {
	jule::Ptr<_1b7509a90_ScopeTree> _28717_s = _1b76b4310_new_scope();
	_1b76b4310_ScopeParser _28817_sp = _1b76b4310_ScopeParser(this->self,jule::Ptr<_1b7509a90_ScopeTree>(),jule::Slice<jule::Ptr<_1b76b4310_Stmt>>(),jule::Int());
	_28817_sp._method_build(_28636_tokens,_28717_s);
	return _28717_s;
}



inline std::tuple<jule::Ptr<_1b7509a90_TypeDecl>,jule::Bool> _1b78b1aa1_Parser::_method___build_type(jule::Slice<_1b7553d92_Token>& _29544_tokens,jule::Int* _29613_i,jule::Bool _29622_err) {
	_1a691245e_TypeBuilder _29717_tb = _1a691245e_TypeBuilder(this->self,_29544_tokens,_29613_i,_29622_err);
	jule::Ptr<_1b7509a90_TypeDecl> _30318_decl;
	jule::Bool _30324_ok;
	std::tie(_30318_decl,_30324_ok) = _29717_tb._method_build();
	return std::make_tuple(_30318_decl,_30324_ok);
}



inline std::tuple<jule::Ptr<_1b7509a90_TypeDecl>,jule::Bool> _1b78b1aa1_Parser::_method_build_type(jule::Slice<_1b7553d92_Token>& _30842_tokens,jule::Int* _30913_i,jule::Bool _30922_err) {
	_1b7553d92_Token _31013_token = _30842_tokens[(*(_30913_i))];
	jule::Ptr<_1b7509a90_TypeDecl> _31118_t;
	jule::Bool _31121_ok;
	std::tie(_31118_t,_31121_ok) = (*(this->self))._method___build_type(_30842_tokens,_30913_i,_30922_err);
	if (_30922_err && (!(_31121_ok))) {
		(*(this->self))._method_push_err(_31013_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
	}
	return std::make_tuple(_31118_t,_31121_ok);
}



inline jule::Ptr<_1b7509a90_TypeAliasDecl> _1b78b1aa1_Parser::_method_build_type_alias_decl(jule::Slice<_1b7553d92_Token>& _31846_tokens) {
	jule::Int _31917_i = 1LL;
	if (_31917_i >= _31846_tokens.len()) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7509a90_TypeAliasDecl> _32417_tad = jule::new_struct<_1b7509a90_TypeAliasDecl>(new( std::nothrow ) _1b7509a90_TypeAliasDecl(jule::Ptr<_1b7509a90_ScopeTree>(),jule::Bool(),jule::Bool(),_31846_tokens[1LL],_31846_tokens[1LL]._field_kind,jule::Ptr<_1b7509a90_TypeDecl>(),jule::Ptr<_1b7509a90_CommentGroup>()));
	_1b7553d92_Token _32817_token = _31846_tokens[_31917_i];
	if (_32817_token._field_id != 2LLU) {
		(*(this->self))._method_push_err(_32817_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_31917_i)++;
	if (_31917_i >= _31846_tokens.len()) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	_32817_token=_31846_tokens[_31917_i];
	if (_32817_token._field_id != 11LLU) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected colon \":\"", 18),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	(_31917_i)++;
	if (_31917_i >= _31846_tokens.len()) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i - 1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return _32417_tad;
	}
	jule::Ptr<_1b7509a90_TypeDecl> _34918_t;
	jule::Bool _34921_ok;
	std::tie(_34918_t,_34921_ok) = (*(this->self))._method_build_type(_31846_tokens,(&(_31917_i)),true);
	(*(_32417_tad))._field_kind=_34918_t;
	if (_34921_ok && (_31917_i < _31846_tokens.len())) {
		(*(this->self))._method_push_err(_31846_tokens[_31917_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _32417_tad;
}



inline void _1b78b1aa1_Parser::_method_build_var_type_and_expr(jule::Ptr<_1b7509a90_VarDecl>& _35748_v,jule::Slice<_1b7553d92_Token>& _35766_tokens) {
	jule::Int _35817_i = 0LL;
	_1b7553d92_Token _35917_tok = _35766_tokens[_35817_i];
	if (_35917_tok._field_id == 11LLU) {
		(_35817_i)++;
		if ((_35817_i >= _35766_tokens.len()) || ((_35766_tokens[_35817_i]._field_id == 7LLU) && (_35766_tokens[_35817_i]._field_kind == jule::Str("=", 1)))) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
			return;
		}
		jule::Ptr<_1b7509a90_TypeDecl> _36722_t;
		jule::Bool _36725_ok;
		std::tie(_36722_t,_36725_ok) = (*(this->self))._method_build_type(_35766_tokens,(&(_35817_i)),true);
		if (_36725_ok) {
			(*(_35748_v))._field_kind=_36722_t;
			if (_35817_i >= _35766_tokens.len()) {
				return;
			}
			_35917_tok=_35766_tokens[_35817_i];
		}
	}
	if (_35917_tok._field_id == 7LLU) {
		if (_35917_tok._field_kind != jule::Str("=", 1)) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return;
		}
		jule::Slice<_1b7553d92_Token> _38221_expr_tokens = _35766_tokens.slice(_35817_i + 1LL);
		if (_38221_expr_tokens.len() == 0LL) {
			(*(this->self))._method_push_err(_35917_tok,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return;
		}
		(*(_35748_v))._field_expr=(*(this->self))._method_build_expr(_38221_expr_tokens);
	} else {
		(*(this->self))._method_push_err(_35917_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1b78b1aa1_Parser::_method_build_var_common(jule::Ptr<_1b7509a90_VarDecl>& _39341_v,jule::Slice<_1b7553d92_Token> _39358_tokens) {
	(*(_39341_v))._field_token=_39358_tokens[0LL];
	if ((*(_39341_v))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_39341_v))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	(*(_39341_v))._field_ident=(*(_39341_v))._field_token._field_kind;
	(*(_39341_v))._field_kind=nullptr;
	if (_39358_tokens.len() > 1LL) {
		_39358_tokens=_39358_tokens.slice(1LL);
		(*(this->self))._method_build_var_type_and_expr(_39341_v,_39358_tokens);
	}
}



inline void _1b78b1aa1_Parser::_method_build_var_begin(jule::Ptr<_1b7509a90_VarDecl>& _40839_v,jule::Ptr<jule::Int> _40856_i,jule::Slice<_1b7553d92_Token>& _40866_tokens) {
	_1b7553d92_Token _40913_tok = _40866_tokens[(*(_40856_i))];
	{
		auto &_match_expr{ _40913_tok._field_id };
		
		if (_match_expr == 38LLU) {
			_case_begin_4388138864:;
			{
				(*(_40839_v))._field_statically=true;
				goto _case_begin_4388136928;
			}
		}
		else if (_match_expr == 34LLU) {
			_case_begin_4388136928:;
			{
				((*(_40856_i)))++;
				if ((*(_40856_i)) >= _40866_tokens.len()) {
					(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				if (_40866_tokens[(*(_40856_i))]._field_id == 36LLU) {
					(*(_40839_v))._field_mutable=true;
					((*(_40856_i)))++;
				}
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_4388137024:;
			{
				((*(_40856_i)))++;
				(*(_40839_v))._field_constant=true;
			}
		}
		else {
			_case_begin_4388135312:;
			{
				(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4388136144:;
	}
	if ((*(_40856_i)) >= _40866_tokens.len()) {
		(*this)._method_push_err(_40913_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_1b7509a90_VarDecl> _1b78b1aa1_Parser::_method_build_var(jule::Slice<_1b7553d92_Token> _44233_tokens) {
	jule::Ptr<jule::Int> _44317_i = jule::new_ptr<jule::Int>(0LL);
	jule::Ptr<_1b7509a90_VarDecl> _44417_v = jule::new_struct<_1b7509a90_VarDecl>(new( std::nothrow ) _1b7509a90_VarDecl(jule::Ptr<_1b7509a90_ScopeTree>(),_44233_tokens[(*(_44317_i))],jule::Str(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1b7509a90_CommentGroup>(),jule::Ptr<_1b7509a90_TypeDecl>(),jule::Ptr<_1b7509a90_Expr>()));
	(*(this->self))._method_build_var_begin(_44417_v,_44317_i,_44233_tokens);
	if ((*(_44317_i)) >= _44233_tokens.len()) {
		return nullptr;
	}
	_44233_tokens=_44233_tokens.slice((*(_44317_i)));
	if ((_44233_tokens[0LL]._field_id == 7LLU) && (_44233_tokens[0LL]._field_kind == jule::Str("&", 1))) {
		(*(_44417_v))._field_reference=true;
		if (_44233_tokens.len() == 1LL) {
			return nullptr;
		}
		_44233_tokens=_44233_tokens.slice(1LL);
	}
	(*(this->self))._method_build_var_common(_44417_v,_44233_tokens);
	return _44417_v;
}



inline jule::Ptr<_1b7509a90_GenericDecl> _1b78b1aa1_Parser::_method_build_generic(jule::Slice<_1b7553d92_Token>& _46437_tokens) {
	if (_46437_tokens.len() > 1LL) {
		(*this)._method_push_err(_46437_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1b7509a90_GenericDecl> _46817_g = jule::new_struct<_1b7509a90_GenericDecl>(new( std::nothrow ) _1b7509a90_GenericDecl(_46437_tokens[0LL],jule::Str()));
	if ((*(_46817_g))._field_token._field_id != 2LLU) {
		(*this)._method_push_err((*(_46817_g))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_46817_g))._field_ident=(*(_46817_g))._field_token._field_kind;
	return _46817_g;
}



inline jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _1b78b1aa1_Parser::_method_build_generics(jule::Slice<_1b7553d92_Token>& _47938_tokens,_1b7553d92_Token& _47956_error_token) {
	if (_47938_tokens.len() == 0LL) {
		(*this)._method_push_err(_47956_error_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<jule::Slice<_1b7553d92_Token>> _48518_parts;
	jule::Slice<_1b6986b22_Log> _48525_errors;
	std::tie(_48518_parts,_48525_errors) = _1b78b1aa1_parts(_47938_tokens,8LLU,true);
	if (_48525_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_48525_errors);
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _49117_generics = jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>::alloc(0LL,static_cast<jule::I64>(_48518_parts.len()));
	{
		auto &expr = _48518_parts;
		auto it = expr.begin();
		_iter_begin_4388187984:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b78b1aa1_part = *it;
			{
				_49117_generics = jule::alloc_for_append(_49117_generics,1);_49117_generics.__push((*this)._method_build_generic(_1b78b1aa1_part));
			}
			_iter_next_4388187984:;
			++it;
			goto _iter_begin_4388187984;
		}
		_iter_end_4388187984:;
	}
	return _49117_generics;
}



inline jule::Ptr<_1b7509a90_ParamDecl> _1b78b1aa1_Parser::_method_build_self_param(jule::Slice<_1b7553d92_Token> _49939_tokens) {
	if (_49939_tokens.len() == 0LL) {
		return nullptr;
	}
	jule::Ptr<_1b7509a90_ParamDecl> _50417_param = jule::new_struct<_1b7509a90_ParamDecl>(new( std::nothrow ) _1b7509a90_ParamDecl());
	jule::Int _50717_i = 0LL;
	if (_49939_tokens[_50717_i]._field_id == 36LLU) {
		(*(_50417_param))._field_mutable=true;
		(_50717_i)++;
		if (_50717_i >= _49939_tokens.len()) {
			(*this)._method_push_err(_49939_tokens[_50717_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49939_tokens[_50717_i]._field_kind == jule::Str("&", 1)) {
		(*(_50417_param))._field_ident=jule::Str("&", 1);
		(_50717_i)++;
		if (_50717_i >= _49939_tokens.len()) {
			(*this)._method_push_err(_49939_tokens[_50717_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	if (_49939_tokens[_50717_i]._field_id == 28LLU) {
		(*(_50417_param))._field_ident+=jule::Str("self", 4);
		(*(_50417_param))._field_token=_49939_tokens[_50717_i];
		(_50717_i)++;
		if (_50717_i < _49939_tokens.len()) {
			(*this)._method_push_err(_49939_tokens[_50717_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	}
	return _50417_param;
}



inline void _1b78b1aa1_Parser::_method_param_type_begin(jule::Ptr<_1b7509a90_ParamDecl>& _53840_param,jule::Int& _53864_i,jule::Slice<_1b7553d92_Token>& _53873_tokens) {
	for (; _53864_i < _53873_tokens.len(); (_53864_i)++) {
		{
			_1b7553d92_Token _54017_token = _53873_tokens[_53864_i];
			if (_54017_token._field_id != 7LLU) {
				return;
			} else if (_54017_token._field_kind != jule::Str("...", 3)) {
				return;
			}
			if ((*(_53840_param))._field_variadic) {
				(*this)._method_push_err(_54017_token,jule::Str("define is already variadic", 26),jule::Slice<jule::Any>());
				goto _iter_next_4388215088;
			}
			(*(_53840_param))._field_variadic=true;
		}
	_iter_next_4388215088:;
	}
	_iter_end_4388215088:;
}



inline void _1b78b1aa1_Parser::_method_build_param_type(jule::Ptr<_1b7509a90_ParamDecl>& _55541_param,jule::Slice<_1b7553d92_Token>& _55565_tokens) {
	jule::Int _55617_i = 0LL;
	(*(this->self))._method_param_type_begin(_55541_param,_55617_i,_55565_tokens);
	if (_55617_i >= _55565_tokens.len()) {
		return;
	}
	std::tie((*(_55541_param))._field_kind,std::ignore) = (*(this->self))._method_build_type(_55565_tokens,(&(_55617_i)),true);
	if (_55617_i < _55565_tokens.len()) {
		(*(this->self))._method_push_err(_55565_tokens[_55617_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1b78b1aa1_Parser::_method_param_body_id(jule::Ptr<_1b7509a90_ParamDecl> _56832_param,_1b7553d92_Token _56851_token) {
	if (_1b7553d92_is_ignore_ident(_56851_token._field_kind)) {
		(*(_56832_param))._field_ident=jule::Str("<anonymous>", 11);
		return;
	}
	(*(_56832_param))._field_ident=_56851_token._field_kind;
}



inline void _1b78b1aa1_Parser::_method_build_param_body(jule::Ptr<_1b7509a90_ParamDecl>& _57641_param,jule::Ptr<jule::Int> _57664_i,jule::Slice<_1b7553d92_Token> _57677_tokens) {
	(*(this->self))._method_param_body_id(_57641_param,_57677_tokens[(*(_57664_i))]);
	_1b7553d92_Token _57817_tok = _57677_tokens[(*(_57664_i))];
	if (((*(_57664_i)) + 1LL) >= _57677_tokens.len()) {
		return;
	} else if (((_57677_tokens.len() - (*(_57664_i))) - 1LL) < 2LL) {
		(*(this->self))._method_push_err(_57817_tok,jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return;
	}
	_57817_tok=_57677_tokens[(*(_57664_i)) + 1LL];
	if (_57817_tok._field_id != 11LLU) {
		(*(this->self))._method_build_param_type(_57641_param,_57677_tokens);
		return;
	}
	_57677_tokens=_57677_tokens.slice((*(_57664_i)) + 2LL);
	(*(this->self))._method_build_param_type(_57641_param,_57677_tokens);
}



inline jule::Ptr<_1b7509a90_ParamDecl> _1b78b1aa1_Parser::_method_build_param(jule::Slice<_1b7553d92_Token> _59735_tokens) {
	jule::Ptr<_1b7509a90_ParamDecl> _59817_param = jule::new_struct<_1b7509a90_ParamDecl>(new( std::nothrow ) _1b7509a90_ParamDecl(_59735_tokens[0LL],jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1b7509a90_TypeDecl>(),jule::Str()));
	if ((*(_59817_param))._field_token._field_id == 36LLU) {
		(*(_59817_param))._field_mutable=true;
		if (_59735_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_59735_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_59735_tokens=_59735_tokens.slice(1LL);
		(*(_59817_param))._field_token=_59735_tokens[0LL];
	}
	if (_59735_tokens.len() >= 3LL) {
		if (((*(_59817_param))._field_token._field_id == 7LLU) && ((*(_59817_param))._field_token._field_kind == jule::Str("&", 1))) {
			if (_59735_tokens.len() == 1LL) {
				(*(this->self))._method_push_err(_59735_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
			if ((_59735_tokens[1LL]._field_id == 2LLU) && (_59735_tokens[2LL]._field_id == 11LLU)) {
				(*(_59817_param))._field_reference=true;
				_59735_tokens=_59735_tokens.slice(1LL);
				(*(_59817_param))._field_token=_59735_tokens[0LL];
			}
		}
	}
	if ((*(_59817_param))._field_token._field_id != 2LLU) {
		(*(_59817_param))._field_ident=jule::Str("<anonymous>", 11);
		(*(this->self))._method_build_param_type(_59817_param,_59735_tokens);
	} else {
		jule::Ptr<jule::Int> _63421_i = jule::new_ptr<jule::Int>(0LL);
		(*(this->self))._method_build_param_body(_59817_param,_63421_i,_59735_tokens);
	}
	return _59817_param;
}



inline void _1b78b1aa1_Parser::_method_check_params(jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>>& _64136_params) {
	{
		auto &expr = _64136_params;
		auto it = expr.begin();
		_iter_begin_4388286256:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_ParamDecl> _1b78b1aa1_param = *it;
			{
				if ((*(_1b78b1aa1_param))._method_is_self() || ((*(_1b78b1aa1_param))._field_kind != nullptr)) {
					goto _iter_next_4388286256;
				}
				if ((*(_1b78b1aa1_param))._field_token._field_id == 0LLU) {
					(*this)._method_push_err((*(_1b78b1aa1_param))._field_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
				} else {
					(*(_1b78b1aa1_param))._field_kind=jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl((*(_1b78b1aa1_param))._field_token,jule::Any(jule::new_struct<_1b7509a90_IdentTypeDecl>(new( std::nothrow ) _1b7509a90_IdentTypeDecl((*(_1b78b1aa1_param))._field_token,(*(_1b78b1aa1_param))._field_token._field_kind,jule::Bool(),jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>())))));
					(*(_1b78b1aa1_param))._field_ident=jule::Str("<anonymous>", 11);
					(*(_1b78b1aa1_param))._field_token=_1b7553d92_Token();
				}
			}
			_iter_next_4388286256:;
			++it;
			goto _iter_begin_4388286256;
		}
		_iter_end_4388286256:;
	}
}



inline jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>> _1b78b1aa1_Parser::_method_build_params(jule::Slice<_1b7553d92_Token>& _66237_tokens,jule::Bool _66254_method) {
	jule::Slice<jule::Slice<_1b7553d92_Token>> _66318_parts;
	jule::Slice<_1b6986b22_Log> _66325_errs;
	std::tie(_66318_parts,_66325_errs) = _1b78b1aa1_parts(_66237_tokens,8LLU,true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_66325_errs);
	if (_66318_parts.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>> _66917_params = nullptr;
	if (_66254_method && (_66318_parts.len() > 0LL)) {
		jule::Ptr<_1b7509a90_ParamDecl> _67121_param = (*(this->self))._method_build_self_param(_66318_parts[0LL]);
		if ((_67121_param != nullptr) && (*(_67121_param))._method_is_self()) {
			_66917_params = jule::alloc_for_append(_66917_params,1);_66917_params.__push(_67121_param);
			_66318_parts=_66318_parts.slice(1LL);
		}
	}
	{
		auto &expr = _66318_parts;
		auto it = expr.begin();
		_iter_begin_4393566336:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b78b1aa1_part = *it;
			{
				jule::Ptr<_1b7509a90_ParamDecl> _67921_param = (*(this->self))._method_build_param(_1b78b1aa1_part);
				if (_67921_param != nullptr) {
					_66917_params = jule::alloc_for_append(_66917_params,1);_66917_params.__push(_67921_param);
				}
			}
			_iter_next_4393566336:;
			++it;
			goto _iter_begin_4393566336;
		}
		_iter_end_4393566336:;
	}
	(*(this->self))._method_check_params(_66917_params);
	return _66917_params;
}



inline std::tuple<jule::Ptr<_1b7509a90_RetTypeDecl>,jule::Bool> _1b78b1aa1_Parser::_method_build_multi_ret_type(jule::Slice<_1b7553d92_Token>& _68945_tokens,jule::Int& _68967_i) {
	jule::Ptr<_1b7509a90_RetTypeDecl> _68977_t = jule::Ptr<_1b7509a90_RetTypeDecl>();
	jule::Bool _68994_ok = jule::Bool();
	_68977_t=jule::new_struct<_1b7509a90_RetTypeDecl>(new( std::nothrow ) _1b7509a90_RetTypeDecl());
	(_68967_i)++;
	if (_68967_i >= _68945_tokens.len()) {
		(_68967_i)--;
		std::tie((*(_68977_t))._field_kind,_68994_ok) = (*(this->self))._method_build_type(_68945_tokens,(&(_68967_i)),false);
		return std::make_tuple(_68977_t,_68994_ok);
	}
	(_68967_i)--;
	jule::Slice<_1b7553d92_Token> _69917_range_tokens = _1b78b1aa1_range(_68967_i,jule::Str("(", 1),jule::Str(")", 1),_68945_tokens);
	jule::Slice<jule::Slice<_1b7553d92_Token>> _70118_parts;
	jule::Slice<_1b6986b22_Log> _70125_errs;
	std::tie(_70118_parts,_70125_errs) = _1b78b1aa1_parts(_69917_range_tokens,8LLU,true);
	(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_70125_errs);
	if (_70118_parts.len() == 0LL) {
		return std::make_tuple(_68977_t,_68994_ok);
	}
	jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _70717_types = jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_70118_parts.len()));
	(*(_68977_t))._field_idents=jule::Slice<_1b7553d92_Token>::alloc(0LL,static_cast<jule::I64>(_70118_parts.len()));
	{
		auto &expr = _70118_parts;
		auto it = expr.begin();
		_iter_begin_4393596032:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b78b1aa1_part = *it;
			{
				_1b7553d92_Token _71021_token = _1b78b1aa1_part[0LL];
				jule::Int _71121_offset = 0LL;
				if (_1b78b1aa1_part.len() > 1LL) {
					_71021_token=_1b78b1aa1_part[1LL];
					if (_71021_token._field_id == 11LLU) {
						_71121_offset=2LL;
						if (_1b78b1aa1_part.len() < 3LL) {
							(*(this->self))._method_push_err(_71021_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
							goto _iter_next_4393596032;
						}
					}
				}
				_71021_token=_1b78b1aa1_part[0LL];
				if (_71121_offset == 2LL) {
					if (_71021_token._field_id != 2LLU) {
					}
					(*(_68977_t))._field_idents = jule::alloc_for_append((*(_68977_t))._field_idents,1);(*(_68977_t))._field_idents.__push(_71021_token);
				} else {
					_71021_token._field_kind=jule::Str("_", 1);
					(*(_68977_t))._field_idents = jule::alloc_for_append((*(_68977_t))._field_idents,1);(*(_68977_t))._field_idents.__push(_71021_token);
				}
				jule::Ptr<_1b7509a90_TypeDecl> _73622_t;
				std::tie(_73622_t,std::ignore) = (*(this->self))._method_build_type(_1b78b1aa1_part,(&(_71121_offset)),true);
				if (_71121_offset < _1b78b1aa1_part.len()) {
					(*(this->self))._method_push_err(_1b78b1aa1_part[_71121_offset],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_70717_types = jule::alloc_for_append(_70717_types,1);_70717_types.__push(_73622_t);
			}
			_iter_next_4393596032:;
			++it;
			goto _iter_begin_4393596032;
		}
		_iter_end_4393596032:;
	}
	if (_70717_types.len() > 1LL) {
		(*(_68977_t))._field_kind=jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_68945_tokens[0LL],jule::Any(jule::new_struct<_1b7509a90_TupleTypeDecl>(new( std::nothrow ) _1b7509a90_TupleTypeDecl(_70717_types)))));
	} else {
		(*(_68977_t))._field_kind=_70717_types[0LL];
	}
	_68994_ok=true;
	return std::make_tuple(_68977_t,_68994_ok);
}



inline std::tuple<jule::Ptr<_1b7509a90_RetTypeDecl>,jule::Bool> _1b78b1aa1_Parser::_method_build_ret_type(jule::Slice<_1b7553d92_Token>& _75939_tokens,jule::Int& _75961_i) {
	jule::Ptr<_1b7509a90_RetTypeDecl> _75971_t = jule::Ptr<_1b7509a90_RetTypeDecl>();
	jule::Bool _75988_ok = jule::Bool();
	_75971_t=jule::new_struct<_1b7509a90_RetTypeDecl>(new( std::nothrow ) _1b7509a90_RetTypeDecl());
	if (_75961_i >= _75939_tokens.len()) {
		return std::make_tuple(_75971_t,_75988_ok);
	}
	_1b7553d92_Token _76517_token = _75939_tokens[_75961_i];
	{
		auto &_match_expr{ _76517_token._field_id };
		
		if (_match_expr == 3LLU) {
			_case_begin_4393628944:;
			{
				if (_76517_token._field_kind == jule::Str("{", 1)) {
					return std::make_tuple(_75971_t,_75988_ok);
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4393629040:;
			{
				if (_76517_token._field_kind == jule::Str("=", 1)) {
					return std::make_tuple(_75971_t,_75988_ok);
				}
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_4393629152:;
			{
				if ((_75961_i + 1LL) >= _75939_tokens.len()) {
					(*(this->self))._method_push_err(_76517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
					return std::make_tuple(_75971_t,_75988_ok);
				}
				(_75961_i)++;
				_76517_token=_75939_tokens[_75961_i];
				if (_76517_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _76517_token._field_kind };
						
						if (_match_expr == jule::Str("(", 1)) {
							_case_begin_4393638320:;
							{
								jule::Ptr<_1b7509a90_RetTypeDecl> _78830_decl;
								jule::Bool _78836_ok;
								std::tie(_78830_decl,_78836_ok) = (*(this->self))._method_build_multi_ret_type(_75939_tokens,_75961_i);
								_75971_t = _78830_decl;
								_75988_ok = _78836_ok;
								return std::make_tuple(_75971_t,_75988_ok);
							}
						}
						else if (_match_expr == jule::Str("{", 1)) {
							_case_begin_4393638496:;
							{
								(*(this->self))._method_push_err(_76517_token,jule::Str("type missing", 12),jule::Slice<jule::Any>());
								return std::make_tuple(_75971_t,_75988_ok);
							}
						}
						_match_end_4393638192:;
					}
				}
				std::tie((*(_75971_t))._field_kind,_75988_ok) = (*(this->self))._method_build_type(_75939_tokens,(&(_75961_i)),true);
				return std::make_tuple(_75971_t,_75988_ok);
			}
		}
		_match_end_4393628864:;
	}
	(_75961_i)++;
	(*(this->self))._method_push_err(_76517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	return std::make_tuple(_75971_t,_75988_ok);
}



inline jule::Ptr<_1b7509a90_FnDecl> _1b78b1aa1_Parser::_method_build_fn_prototype(jule::Slice<_1b7553d92_Token>& _80743_tokens,jule::Int& _80765_i,jule::Bool _80773_method) {
	jule::Ptr<_1b7509a90_FnDecl> _80817_f = jule::new_struct<_1b7509a90_FnDecl>(new( std::nothrow ) _1b7509a90_FnDecl(_80743_tokens[_80765_i],jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1b7509a90_CommentGroup>(),jule::Ptr<_1b7509a90_ScopeTree>(),jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>(),jule::Ptr<_1b7509a90_RetTypeDecl>(),jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>>()));
	if ((*(_80817_f))._field_token._field_id == 38LLU) {
		(*(_80817_f))._field_statically=true;
		(_80765_i)++;
		if (_80765_i >= _80743_tokens.len()) {
			(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80817_f))._field_token=_80743_tokens[_80765_i];
	}
	if ((*(_80817_f))._field_token._field_id == 35LLU) {
		(*(_80817_f))._field_unsafety=true;
		(_80765_i)++;
		if (_80765_i >= _80743_tokens.len()) {
			(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80817_f))._field_token=_80743_tokens[_80765_i];
	}
	(_80765_i)++;
	if (_80765_i >= _80743_tokens.len()) {
		(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_1b7553d92_Token _84113_tok = _80743_tokens[_80765_i];
	if (_84113_tok._field_id == 2LLU) {
		(_80765_i)++;
		if (_80765_i >= _80743_tokens.len()) {
			(*(this->self))._method_push_err((*(_80817_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(*(_80817_f))._field_ident=_84113_tok._field_kind;
	} else {
		(*(_80817_f))._field_ident=jule::Str("<anonymous>", 11);
	}
	_1b7553d92_Token _85313_error_token = _80743_tokens[_80765_i];
	jule::Slice<_1b7553d92_Token> _85417_generics_tokens = _1b78b1aa1_range(_80765_i,jule::Str("[", 1),jule::Str("]", 1),_80743_tokens);
	if (_85417_generics_tokens != nullptr) {
		(*(_80817_f))._field_generics=(*(this->self))._method_build_generics(_85417_generics_tokens,_85313_error_token);
	}
	if (_80743_tokens[_80765_i]._field_kind != jule::Str("(", 1)) {
		(*(this->self))._method_push_err(_80743_tokens[_80765_i],jule::Str("missing function parentheses", 28),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_1b7553d92_Token> _86417_params_toks = _1b78b1aa1_range(_80765_i,jule::Str("(", 1),jule::Str(")", 1),_80743_tokens);
	if (_86417_params_toks.len() > 0LL) {
		(*(_80817_f))._field_params=(*(this->self))._method_build_params(_86417_params_toks,_80773_method);
	}
	if (_80765_i < _80743_tokens.len()) {
		_1b7553d92_Token _87017_token = _80743_tokens[_80765_i];
		if ((_87017_token._field_id == 7LLU) && (_87017_token._field_kind == jule::Str("!", 1))) {
			(*(_80817_f))._field_exceptional=true;
			(_80765_i)++;
		}
	}
	std::tie((*(_80817_f))._field_result,std::ignore) = (*(this->self))._method_build_ret_type(_80743_tokens,_80765_i);
	return _80817_f;
}



inline jule::Ptr<_1b7509a90_FnDecl> _1b78b1aa1_Parser::_method_build_fn(jule::Slice<_1b7553d92_Token>& _88333_tokens,jule::Bool _88350_method,jule::Bool _88364_prototype) {
	jule::Int _88417_i = 0LL;
	jule::Ptr<_1b7509a90_FnDecl> _88517_f = (*(this->self))._method_build_fn_prototype(_88333_tokens,_88417_i,_88350_method);
	if (_88364_prototype) {
		if (_88417_i < _88333_tokens.len()) {
			(*(this->self))._method_push_err(_88333_tokens[_88417_i + 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		return _88517_f;
	} else if (_88517_f == nullptr) {
		return _88517_f;
	}
	if (_88417_i >= _88333_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88517_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Slice<_1b7553d92_Token> _90117_block_tokens = _1b78b1aa1_range(_88417_i,jule::Str("{", 1),jule::Str("}", 1),_88333_tokens);
	if (_90117_block_tokens != nullptr) {
		(*(_88517_f))._field_scope=(*(this->self))._method_build_scope(_90117_block_tokens);
		(*((*(_88517_f))._field_scope))._field_unsafety=(*(_88517_f))._field_unsafety;
		if (_88417_i < _88333_tokens.len()) {
			(*(this->self))._method_push_err(_88333_tokens[_88417_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_88517_f))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _88517_f;
}



inline jule::Slice<_1b7553d92_Token> _1b78b1aa1_Parser::_method_get_use_decl_selectors(jule::Slice<_1b7553d92_Token> _91745_tokens) {
	jule::Int _91817_i = 0LL;
	_91745_tokens=_1b78b1aa1_range(_91817_i,jule::Str("{", 1),jule::Str("}", 1),_91745_tokens);
	jule::Slice<jule::Slice<_1b7553d92_Token>> _92018_parts;
	jule::Slice<_1b6986b22_Log> _92025_errs;
	std::tie(_92018_parts,_92025_errs) = _1b78b1aa1_parts(_91745_tokens,8LLU,true);
	if (_92025_errs.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,_92025_errs);
		return nullptr;
	}
	jule::Slice<_1b7553d92_Token> _92617_selectors = jule::Slice<_1b7553d92_Token>::alloc(0LL,static_cast<jule::I64>(_92018_parts.len()));
	{
		auto &expr = _92018_parts;
		auto it = expr.begin();
		_iter_begin_4393730832:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b78b1aa1_part = *it;
			{
				if (_1b78b1aa1_part.len() > 1LL) {
					(*this)._method_push_err(_1b78b1aa1_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				}
				_1b7553d92_Token _93121_tok = _1b78b1aa1_part[0LL];
				if ((_93121_tok._field_id != 2LLU) && (_93121_tok._field_id != 28LLU)) {
					(*this)._method_push_err(_93121_tok,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
					goto _iter_next_4393730832;
				}
				_92617_selectors = jule::alloc_for_append(_92617_selectors,1);_92617_selectors.__push(_93121_tok);
			}
			_iter_next_4393730832:;
			++it;
			goto _iter_begin_4393730832;
		}
		_iter_end_4393730832:;
	}
	return _92617_selectors;
}



inline void _1b78b1aa1_Parser::_method_build_cpp_use_decl(jule::Ptr<_1b7509a90_UseDecl>& _94242_decl,jule::Slice<_1b7553d92_Token>& _94259_tokens) {
	if (_94259_tokens.len() > 1LL) {
		(*this)._method_push_err(_94259_tokens[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	_1b7553d92_Token _94613_token = _94259_tokens[0LL];
	if ((_94613_token._field_id != 6LLU) || ((_94613_token._field_kind[0LL] != '`') && (_94613_token._field_kind[0LL] != '\"'))) {
		(*this)._method_push_err(_94613_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	(*(_94242_decl))._field_cpp_linked=true;
	(*(_94242_decl))._field_link_path=_94613_token._field_kind.slice(1LL,_94613_token._field_kind.len() - 1LL);
	if ((!(_1b697da81_is_std_header_path((*(_94242_decl))._field_link_path)))) {
		(*(_94242_decl))._field_link_path=_1ce9be05e_join(jule::Slice<jule::Str>({(*(_94613_token._field_file))._method_dir(),(*(_94242_decl))._field_link_path}));
	}
}



inline void _1b78b1aa1_Parser::_method_build_std_use_decl(jule::Ptr<_1b7509a90_UseDecl>& _95842_decl,jule::Slice<_1b7553d92_Token> _95862_tokens) {
	(*(_95842_decl))._field_std=true;
	_1b7553d92_Token _96117_token = _95862_tokens[0LL];
	if (_95862_tokens.len() < 3LL) {
		(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	_95862_tokens=_95862_tokens.slice(2LL);
	_96117_token=_95862_tokens[_95862_tokens.len() - 1LL];
	{
		auto &_match_expr{ _96117_token._field_id };
		
		if (_match_expr == 23LLU) {
			_case_begin_4393768736:;
			{
				(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4393768832:;
			{
				if (_96117_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_1b7553d92_Token> _97921_selectors = nullptr;
				std::tie(_95862_tokens,_97921_selectors) = _1b78b1aa1_range_last(_95862_tokens);
				(*(_95842_decl))._field_selected=(*this)._method_get_use_decl_selectors(_97921_selectors);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96117_token=_95862_tokens[_95862_tokens.len() - 1LL];
				if (_96117_token._field_id != 23LLU) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95862_tokens=_95862_tokens.slice(0LL,_95862_tokens.len() - 1LL);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4393768928:;
			{
				if (_96117_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95862_tokens=_95862_tokens.slice(0LL,_95862_tokens.len() - 1LL);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_96117_token=_95862_tokens[_95862_tokens.len() - 1LL];
				if (_96117_token._field_id != 23LLU) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_95862_tokens=_95862_tokens.slice(0LL,_95862_tokens.len() - 1LL);
				if (_95862_tokens.len() == 0LL) {
					(*this)._method_push_err(_96117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_95842_decl))._field_full=true;
			}
		}
		_match_end_4393768656:;
	}
	(*(_95842_decl))._field_link_path=jule::Str("std::", 5) + _1b78b1aa1_tokstoa(_95862_tokens);
}



inline void _1b78b1aa1_Parser::_method_build_ident_use_decl(jule::Ptr<_1b7509a90_UseDecl>& _102244_decl,jule::Slice<_1b7553d92_Token> _102264_tokens) {
	(*(_102244_decl))._field_std=false;
	_1b7553d92_Token _102517_token = _102264_tokens[_102264_tokens.len() - 1LL];
	{
		auto &_match_expr{ _102517_token._field_id };
		
		if (_match_expr == 23LLU) {
			_case_begin_4393807696:;
			{
				(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return;
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4393807808:;
			{
				if (_102517_token._field_kind != jule::Str("}", 1)) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				jule::Slice<_1b7553d92_Token> _103721_selectors = nullptr;
				std::tie(_102264_tokens,_103721_selectors) = _1b78b1aa1_range_last(_102264_tokens);
				(*(_102244_decl))._field_selected=(*this)._method_get_use_decl_selectors(_103721_selectors);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102517_token=_102264_tokens[_102264_tokens.len() - 1LL];
				if (_102517_token._field_id != 23LLU) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102264_tokens=_102264_tokens.slice(0LL,_102264_tokens.len() - 1LL);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4393807904:;
			{
				if (_102517_token._field_kind != jule::Str("*", 1)) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102264_tokens=_102264_tokens.slice(0LL,_102264_tokens.len() - 1LL);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102517_token=_102264_tokens[_102264_tokens.len() - 1LL];
				if (_102517_token._field_id != 23LLU) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				_102264_tokens=_102264_tokens.slice(0LL,_102264_tokens.len() - 1LL);
				if (_102264_tokens.len() == 0LL) {
					(*this)._method_push_err(_102517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return;
				}
				(*(_102244_decl))._field_full=true;
			}
		}
		_match_end_4393807552:;
	}
	(*(_102244_decl))._field_link_path=_1b78b1aa1_tokstoa(_102264_tokens);
}



inline void _1b78b1aa1_Parser::_method_parse_use_decl(jule::Ptr<_1b7509a90_UseDecl>& _108738_decl,jule::Slice<_1b7553d92_Token> _108758_tokens) {
	if ((*(_108738_decl))._field_cpp_linked) {
		(*this)._method_build_cpp_use_decl(_108738_decl,_108758_tokens);
		return;
	}
	_1b7553d92_Token _109317_token = _108758_tokens[0LL];
	if (_109317_token._field_id != 2LLU) {
		(*this)._method_push_err(_109317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	}
	if ((_108758_tokens.len() > 2LL) && (_108758_tokens[1LL]._field_id == 12LLU)) {
		(*(_108738_decl))._field_alias=_109317_token._field_kind;
		if (_108758_tokens[2LL]._field_id != 2LLU) {
			(*this)._method_push_err(_109317_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			return;
		}
		_108758_tokens=_108758_tokens.slice(2LL);
		_109317_token=_108758_tokens[0LL];
	}
	
	{
		
		if (_109317_token._field_kind == jule::Str("std", 3)) {
			_case_begin_4393861280:;
			{
				(*this)._method_build_std_use_decl(_108738_decl,_108758_tokens);
			}
		}
		else {
			_case_begin_4393859200:;
			{
				(*this)._method_build_ident_use_decl(_108738_decl,_108758_tokens);
			}
		}
		_match_end_4393859088:;
	}
}



inline jule::Ptr<_1b7509a90_UseDecl> _1b78b1aa1_Parser::_method_build_use_decl(jule::Slice<_1b7553d92_Token> _112237_tokens,jule::Bool _112254_cpp_linked) {
	jule::Ptr<_1b7509a90_UseDecl> _112317_decl = jule::new_struct<_1b7509a90_UseDecl>(new( std::nothrow ) _1b7509a90_UseDecl(_112237_tokens[0LL],jule::Str(),jule::Str(),jule::Bool(),jule::Slice<_1b7553d92_Token>(),_112254_cpp_linked,jule::Bool()));
	if (_112237_tokens.len() < 2LL) {
		(*this)._method_push_err((*(_112317_decl))._field_token,jule::Str("missing path of use statement", 29),jule::Slice<jule::Any>());
		return nullptr;
	}
	_112237_tokens=_112237_tokens.slice(1LL);
	(*this)._method_parse_use_decl(_112317_decl,_112237_tokens);
	return _112317_decl;
}



inline jule::Ptr<_1b7509a90_Expr> _1b78b1aa1_Parser::_method_build_enum_item_expr(jule::Ptr<jule::Int> _113644_i,jule::Slice<_1b7553d92_Token>& _113658_tokens) {
	jule::Int _113717_brace_n = 0LL;
	jule::Int _113813_expr_start = (*(_113644_i));
	for (; (*(_113644_i)) < _113658_tokens.len(); ((*(_113644_i)))++) {
		{
			_1b7553d92_Token _114017_t = _113658_tokens[(*(_113644_i))];
			if (_114017_t._field_id == 3LLU) {
				{
					auto &_match_expr{ _114017_t._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_4393881696:;
						{
							(_113717_brace_n)++;
							goto _iter_next_4393876576;
						}
					}
					else {
						_case_begin_4393879904:;
						{
							(_113717_brace_n)--;
						}
					}
					_match_end_4393880016:;
				}
			}
			if (_113717_brace_n > 0LL) {
				goto _iter_next_4393876576;
			}
			if ((_114017_t._field_id == 8LLU) || (((*(_113644_i)) + 1LL) >= _113658_tokens.len())) {
				jule::Slice<_1b7553d92_Token> _115925_expr_tokens = nullptr;
				if (_114017_t._field_id == 8LLU) {
					_115925_expr_tokens=_113658_tokens.slice(_113813_expr_start,(*(_113644_i)));
				} else {
					_115925_expr_tokens=_113658_tokens.slice(_113813_expr_start);
				}
				return (*(this->self))._method_build_expr(_115925_expr_tokens);
			}
		}
	_iter_next_4393876576:;
	}
	_iter_end_4393876576:;
	return nullptr;
}



inline jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>> _1b78b1aa1_Parser::_method_build_enum_items(jule::Slice<_1b7553d92_Token>& _117141_tokens) {
	jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>> _117217_items = jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>>::alloc(0LL,1LL);
	jule::Ptr<jule::Int> _117317_i = jule::new_ptr<jule::Int>(0LL);
	for (; (*(_117317_i)) < _117141_tokens.len(); ((*(_117317_i)))++) {
		{
			_1b7553d92_Token _117521_t = _117141_tokens[(*(_117317_i))];
			if (_117521_t._field_id == 18LLU) {
				goto _iter_next_4393896352;
			}
			jule::Ptr<_1b7509a90_EnumItemDecl> _118021_item = jule::new_struct<_1b7509a90_EnumItemDecl>(new( std::nothrow ) _1b7509a90_EnumItemDecl());
			(*(_118021_item))._field_token=_117521_t;
			if ((*(_118021_item))._field_token._field_id != 2LLU) {
				(*(this->self))._method_push_err((*(_118021_item))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
			}
			(*(_118021_item))._field_ident=(*(_118021_item))._field_token._field_kind;
			if ((((*(_117317_i)) + 1LL) >= _117141_tokens.len()) || (_117141_tokens[(*(_117317_i)) + 1LL]._field_id == 8LLU)) {
				if (((*(_117317_i)) + 1LL) < _117141_tokens.len()) {
					((*(_117317_i)))++;
				}
				_117217_items = jule::alloc_for_append(_117217_items,1);_117217_items.__push(_118021_item);
				goto _iter_next_4393896352;
			}
			((*(_117317_i)))++;
			_117521_t=_117141_tokens[(*(_117317_i))];
			((*(_117317_i)))++;
			if ((_117521_t._field_id != 7LLU) || (_117521_t._field_kind != jule::Str("=", 1))) {
				(*(this->self))._method_push_err(_117521_t,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				(*(this->self))._method_push_suggestion(jule::Str("expected equals \"=\" for assignment", 34),jule::Slice<jule::Any>());
				goto _iter_next_4393896352;
			}
			if (((*(_117317_i)) >= _117141_tokens.len()) || (_117141_tokens[(*(_117317_i))]._field_id == 8LLU)) {
				(*(this->self))._method_push_err(_117521_t,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
				goto _iter_next_4393896352;
			}
			(*(_118021_item))._field_expr=(*(this->self))._method_build_enum_item_expr(_117317_i,_117141_tokens);
			_117217_items = jule::alloc_for_append(_117217_items,1);_117217_items.__push(_118021_item);
		}
	_iter_next_4393896352:;
	}
	_iter_end_4393896352:;
	return _117217_items;
}



inline jule::Ptr<_1b7509a90_EnumDecl> _1b78b1aa1_Parser::_method_build_enum_decl(jule::Slice<_1b7553d92_Token>& _121240_tokens) {
	if ((_121240_tokens.len() < 2LL) || (_121240_tokens.len() < 3LL)) {
		(*(this->self))._method_push_err(_121240_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7509a90_EnumDecl> _121717_e = jule::new_struct<_1b7509a90_EnumDecl>(new( std::nothrow ) _1b7509a90_EnumDecl(_121240_tokens[1LL],jule::Bool(),jule::Str(),jule::Ptr<_1b7509a90_TypeDecl>(),jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>>(),jule::Ptr<_1b7509a90_CommentGroup>()));
	if ((*(_121717_e))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_121717_e))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_121717_e))._field_ident=(*(_121717_e))._field_token._field_kind;
	jule::Int _122517_i = 2LL;
	if (_121240_tokens[_122517_i]._field_id == 11LLU) {
		(_122517_i)++;
		if (_122517_i >= _121240_tokens.len()) {
			(*(this->self))._method_push_err(_121240_tokens[_122517_i - 1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return _121717_e;
		}
		std::tie((*(_121717_e))._field_kind,std::ignore) = (*(this->self))._method_build_type(_121240_tokens,(&(_122517_i)),true);
		if (_122517_i >= _121240_tokens.len()) {
			(*(this->self))._method_stop();
			(*(this->self))._method_push_err((*(_121717_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
			(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
			return _121717_e;
		}
	} else {
		(*(_121717_e))._field_kind=nullptr;
	}
	jule::Slice<_1b7553d92_Token> _124217_item_tokens = _1b78b1aa1_range(_122517_i,jule::Str("{", 1),jule::Str("}", 1),_121240_tokens);
	if (_124217_item_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_121717_e))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _121717_e;
	} else if (_122517_i < _121240_tokens.len()) {
		(*(this->self))._method_push_err(_121240_tokens[_122517_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_121717_e))._field_items=(*(this->self))._method_build_enum_items(_124217_item_tokens);
	return _121717_e;
}



inline jule::Ptr<_1b7509a90_FieldDecl> _1b78b1aa1_Parser::_method_build_field(jule::Slice<_1b7553d92_Token> _125535_tokens) {
	jule::Ptr<_1b7509a90_FieldDecl> _125617_f = jule::new_struct<_1b7509a90_FieldDecl>(new( std::nothrow ) _1b7509a90_FieldDecl());
	(*(_125617_f))._field_public=_125535_tokens[0LL]._field_id == 21LLU;
	if ((*(_125617_f))._field_public) {
		if (_125535_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_125535_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125535_tokens=_125535_tokens.slice(1LL);
	}
	(*(_125617_f))._field_mutable=_125535_tokens[0LL]._field_id == 36LLU;
	if ((*(_125617_f))._field_mutable) {
		if (_125535_tokens.len() == 1LL) {
			(*(this->self))._method_push_err(_125535_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125535_tokens=_125535_tokens.slice(1LL);
	}
	(*(_125617_f))._field_token=_125535_tokens[0LL];
	if ((*(_125617_f))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_125617_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_125617_f))._field_ident=(*(_125617_f))._field_token._field_kind;
	if (_125535_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_125535_tokens[0LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	} else if (_125535_tokens[1LL]._field_id != 11LLU) {
		(*(this->self))._method_push_err(_125535_tokens[1LL],jule::Str("type missing", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	_125535_tokens=_125535_tokens.slice(2LL);
	jule::Int _129317_i = 0LL;
	std::tie((*(_125617_f))._field_kind,std::ignore) = (*(this->self))._method_build_type(_125535_tokens,(&(_129317_i)),true);
	if (_129317_i < _125535_tokens.len()) {
		_1b7553d92_Token _129617_token = _125535_tokens[_129317_i];
		if ((_129617_token._field_id != 7LLU) || (_129617_token._field_kind != jule::Str("=", 1))) {
			(*(this->self))._method_push_err(_125535_tokens[_129317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_129317_i)++;
		if (_129317_i >= _125535_tokens.len()) {
			(*(this->self))._method_push_err(_129617_token,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
			return nullptr;
		}
		_125535_tokens=_125535_tokens.slice(_129317_i);
		(*(_125617_f))._field_default=(*(this->self))._method_build_expr(_125535_tokens);
	}
	return _125617_f;
}



inline jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>> _1b78b1aa1_Parser::_method_build_struct_decl_fields(jule::Slice<_1b7553d92_Token> _131348_tokens) {
	jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>> _131417_fields = nullptr;
	jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _131517_stmts = _1b76b4310_split_stmts(_131348_tokens);
	{
		auto &expr = _131517_stmts;
		auto it = expr.begin();
		_iter_begin_4394010816:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b4310_Stmt> _1b78b1aa1_stmt = *it;
			{
				_131348_tokens=(*(_1b78b1aa1_stmt))._field_tokens;
				if (_131348_tokens[0LL]._field_id == 18LLU) {
					goto _iter_next_4394010816;
				}
				jule::Ptr<_1b7509a90_FieldDecl> _132121_f = (*(this->self))._method_build_field(_131348_tokens);
				_131417_fields = jule::alloc_for_append(_131417_fields,1);_131417_fields.__push(_132121_f);
			}
			_iter_next_4394010816:;
			++it;
			goto _iter_begin_4394010816;
		}
		_iter_end_4394010816:;
	}
	return _131417_fields;
}



inline jule::Ptr<_1b7509a90_StructDecl> _1b78b1aa1_Parser::_method_build_struct_decl(jule::Slice<_1b7553d92_Token>& _132742_tokens) {
	if (_132742_tokens.len() < 3LL) {
		(*(this->self))._method_push_err(_132742_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Int _133317_i = 1LL;
	jule::Ptr<_1b7509a90_StructDecl> _133417_s = jule::new_struct<_1b7509a90_StructDecl>(new( std::nothrow ) _1b7509a90_StructDecl(_132742_tokens[_133317_i],jule::Str(),jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>>(),jule::Bool(),jule::Bool(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1b7509a90_CommentGroup>(),jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>()));
	if ((*(_133417_s))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_133417_s))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(_133317_i)++;
	if (_133317_i >= _132742_tokens.len()) {
		(*(this->self))._method_push_err(_132742_tokens[_133317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _133417_s;
	}
	(*(_133417_s))._field_ident=(*(_133417_s))._field_token._field_kind;
	_1b7553d92_Token _134813_error_token = _132742_tokens[_133317_i];
	jule::Slice<_1b7553d92_Token> _134917_generics_tokens = _1b78b1aa1_range(_133317_i,jule::Str("[", 1),jule::Str("]", 1),_132742_tokens);
	if (_134917_generics_tokens != nullptr) {
		(*(_133417_s))._field_generics=(*(this->self))._method_build_generics(_134917_generics_tokens,_134813_error_token);
	}
	if (_133317_i >= _132742_tokens.len()) {
		(*(this->self))._method_push_err(_132742_tokens[_133317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return _133417_s;
	}
	jule::Slice<_1b7553d92_Token> _135817_body_tokens = _1b78b1aa1_range(_133317_i,jule::Str("{", 1),jule::Str("}", 1),_132742_tokens);
	if (_135817_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_133417_s))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return _133417_s;
	}
	if (_133317_i < _132742_tokens.len()) {
		(*(this->self))._method_push_err(_132742_tokens[_133317_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_133417_s))._field_fields=(*(this->self))._method_build_struct_decl_fields(_135817_body_tokens);
	return _133417_s;
}



inline void _1b78b1aa1_Parser::_method_check_method_receiver(jule::Ptr<_1b7509a90_FnDecl>& _137241_f) {
	if ((*(_137241_f))._field_statically) {
		if (((*(_137241_f))._field_params.len() > 0LL) && (*((*(_137241_f))._field_params[0LL]))._method_is_self()) {
			(*this)._method_push_err((*(_137241_f))._field_token,jule::Str("static functions cannot have receiver parameter", 47),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((*(_137241_f))._field_params.len() == 0LL) {
		(*this)._method_push_err((*(_137241_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1b7509a90_ParamDecl> _138513_param = (*(_137241_f))._field_params[0LL];
	if ((!((*(_138513_param))._method_is_self()))) {
		(*this)._method_push_err((*(_137241_f))._field_token,jule::Str("missing receiver parameter", 26),jule::Slice<jule::Any>());
		return;
	}
}



inline jule::Slice<jule::Ptr<_1b7509a90_FnDecl>> _1b78b1aa1_Parser::_method_build_trait_methods(jule::Slice<_1b7553d92_Token> _139243_tokens) {
	jule::Slice<jule::Ptr<_1b7509a90_FnDecl>> _139317_methods = nullptr;
	jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _139417_stmts = _1b76b4310_split_stmts(_139243_tokens);
	{
		auto &expr = _139417_stmts;
		auto it = expr.begin();
		_iter_begin_4394071840:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b4310_Stmt> _1b78b1aa1_stmt = *it;
			{
				_139243_tokens=_1b76b4ac4_eliminate_comments((*(_1b78b1aa1_stmt))._field_tokens);
				if (_139243_tokens.len() == 0LL) {
					goto _iter_next_4394071840;
				}
				jule::Bool _140121_is_pub = false;
				if (_139243_tokens[0LL]._field_id == 21LLU) {
					_140121_is_pub=true;
					if (_139243_tokens.len() == 1LL) {
						(*(this->self))._method_push_err(_139243_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
						goto _iter_next_4394071840;
					}
					_139243_tokens=_139243_tokens.slice(1LL);
				}
				jule::Ptr<_1b7509a90_FnDecl> _141121_f = (*(this->self))._method_build_fn(_139243_tokens,true,true);
				if (_141121_f != nullptr) {
					if ((*(_141121_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_141121_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_method_receiver(_141121_f);
					if ((*(_141121_f))._field_generics.len() > 0LL) {
						(*(this->self))._method_push_err((*(_141121_f))._field_token,jule::Str("trait methods cannot have generics", 34),jule::Slice<jule::Any>());
					}
					(*(_141121_f))._field_public=_140121_is_pub;
					_139317_methods = jule::alloc_for_append(_139317_methods,1);_139317_methods.__push(_141121_f);
				}
			}
			_iter_next_4394071840:;
			++it;
			goto _iter_begin_4394071840;
		}
		_iter_end_4394071840:;
	}
	return _139317_methods;
}



inline jule::Ptr<_1b7509a90_TraitDecl> _1b78b1aa1_Parser::_method_build_trait_decl(jule::Slice<_1b7553d92_Token>& _142741_tokens) {
	if (_142741_tokens.len() < 3LL) {
		(*(this->self))._method_push_err(_142741_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7509a90_TraitDecl> _143217_t = jule::new_struct<_1b7509a90_TraitDecl>(new( std::nothrow ) _1b7509a90_TraitDecl(_142741_tokens[1LL],jule::Str(),jule::Bool(),jule::Ptr<_1b7509a90_CommentGroup>(),jule::Slice<jule::Ptr<_1b7509a90_FnDecl>>()));
	if ((*(_143217_t))._field_token._field_id != 2LLU) {
		(*(this->self))._method_push_err((*(_143217_t))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
	}
	(*(_143217_t))._field_ident=(*(_143217_t))._field_token._field_kind;
	jule::Int _144017_i = 2LL;
	jule::Slice<_1b7553d92_Token> _144117_body_tokens = _1b78b1aa1_range(_144017_i,jule::Str("{", 1),jule::Str("}", 1),_142741_tokens);
	if (_144117_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err((*(_143217_t))._field_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_144017_i < _142741_tokens.len()) {
		(*(this->self))._method_push_err(_142741_tokens[_144017_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(_143217_t))._field_methods=(*(this->self))._method_build_trait_methods(_144117_body_tokens);
	return _143217_t;
}



inline jule::Ptr<_1b7509a90_FnDecl> _1b78b1aa1_Parser::_method_build_cpp_link_fn(jule::Slice<_1b7553d92_Token> _145541_tokens) {
	_145541_tokens=_145541_tokens.slice(1LL);
	jule::Ptr<_1b7509a90_FnDecl> _145717_f = (*(this->self))._method_build_fn(_145541_tokens,false,true);
	if (_145717_f != nullptr) {
		if ((*(_145717_f))._method_is_anon()) {
			(*(this->self))._method_push_err((*(_145717_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		}
		(*(_145717_f))._field_cpp_linked=true;
	}
	return _145717_f;
}



inline jule::Ptr<_1b7509a90_VarDecl> _1b78b1aa1_Parser::_method_build_cpp_link_var(jule::Slice<_1b7553d92_Token> _146742_tokens) {
	_146742_tokens=_146742_tokens.slice(1LL);
	jule::Ptr<_1b7509a90_VarDecl> _146917_v = (*(this->self))._method_build_var(_146742_tokens);
	if (_146917_v != nullptr) {
		(*(_146917_v))._field_cpp_linked=true;
		if ((*(_146917_v))._field_expr != nullptr) {
			(*(this->self))._method_push_err((*(_146917_v))._field_token,jule::Str("cpp linked variables cannot have expression", 43),jule::Slice<jule::Any>());
		}
	}
	return _146917_v;
}



inline jule::Ptr<_1b7509a90_StructDecl> _1b78b1aa1_Parser::_method_build_cpp_link_struct(jule::Slice<_1b7553d92_Token> _147945_tokens) {
	_147945_tokens=_147945_tokens.slice(1LL);
	jule::Ptr<_1b7509a90_StructDecl> _148117_s = (*(this->self))._method_build_struct_decl(_147945_tokens);
	if (_148117_s != nullptr) {
		(*(_148117_s))._field_cpp_linked=true;
	}
	return _148117_s;
}



inline jule::Ptr<_1b7509a90_TypeAliasDecl> _1b78b1aa1_Parser::_method_build_cpp_link_type_alias(jule::Slice<_1b7553d92_Token> _148849_tokens) {
	_148849_tokens=_148849_tokens.slice(1LL);
	jule::Ptr<_1b7509a90_TypeAliasDecl> _149017_t = (*(this->self))._method_build_type_alias_decl(_148849_tokens);
	if (_149017_t != nullptr) {
		(*(_149017_t))._field_cpp_linked=true;
	}
	return _149017_t;
}



inline jule::Ptr<_1b7509a90_UseDecl> _1b78b1aa1_Parser::_method_build_cpp_link_use(jule::Slice<_1b7553d92_Token> _149742_tokens) {
	if (_149742_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_149742_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_149742_tokens=_149742_tokens.slice(1LL);
	
	return (*(this->self))._method_build_use_decl(_149742_tokens,true);
}



inline jule::Any _1b78b1aa1_Parser::_method_build_cpp_link(jule::Slice<_1b7553d92_Token>& _150839_tokens) {
	_1b7553d92_Token _150917_token = _150839_tokens[0LL];
	if (_150839_tokens.len() == 1LL) {
		(*(this->self))._method_push_err(_150917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return jule::Any(nullptr);
	}
	_150917_token=_150839_tokens[1LL];
	{
		auto &_match_expr{ _150917_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_4394163616:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_use(_150839_tokens));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_4394163712:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_fn(_150839_tokens));
			}
		}
		else if (_match_expr == 9LLU || _match_expr == 34LLU) {
			_case_begin_4394163808:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_var(_150839_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_4394163904:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_struct(_150839_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4394165616:;
			{
				return jule::Any((*(this->self))._method_build_cpp_link_type_alias(_150839_tokens));
			}
		}
		else {
			_case_begin_4394159744:;
			{
				(*(this->self))._method_push_err(_150917_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4394163168:;
	}
	return jule::Any(nullptr);
}



inline jule::Ptr<_1b7509a90_FnDecl> _1b78b1aa1_Parser::_method_get_method(jule::Slice<_1b7553d92_Token>& _153935_tokens) {
	jule::Int _154017_i = 0LL;
	_1b7553d92_Token _154117_token = _153935_tokens[_154017_i];
	if (_154117_token._field_id == 38LLU) {
		if ((_154017_i + 1LL) >= _153935_tokens.len()) {
			(*(this->self))._method_push_err(_154117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_154017_i)++;
		_154117_token=_153935_tokens[_154017_i];
	}
	if (_154117_token._field_id == 35LLU) {
		if ((_154017_i + 1LL) >= _153935_tokens.len()) {
			(*(this->self))._method_push_err(_154117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return nullptr;
		}
		(_154017_i)++;
		_154117_token=_153935_tokens[_154017_i];
	}
	if (_154117_token._field_id != 33LLU) {
		(*(this->self))._method_push_err(_154117_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7509a90_FnDecl> _156517_f = (*(this->self))._method_build_fn(_153935_tokens,true,false);
	if ((_156517_f != nullptr) && (*(_156517_f))._method_is_anon()) {
		(*(this->self))._method_push_err((*(_156517_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	return _156517_f;
}



inline void _1b78b1aa1_Parser::_method_parse_impl_body(jule::Ptr<_1b7509a90_Impl>& _157240_ipl,jule::Slice<_1b7553d92_Token>& _157257_tokens) {
	jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _157317_stmts = _1b76b4310_split_stmts(_157257_tokens);
	{
		auto &expr = _157317_stmts;
		auto it = expr.begin();
		_iter_begin_4394200080:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b4310_Stmt> _1b78b1aa1_stmt = *it;
			{
				_157257_tokens=(*(_1b78b1aa1_stmt))._field_tokens;
				_1b7553d92_Token _157621_token = _157257_tokens[0LL];
				jule::Bool _157721_is_pub = false;
				{
					auto &_match_expr{ _157621_token._field_id };
					
					if (_match_expr == 18LLU) {
						_case_begin_4394204464:;
						{
							goto _iter_next_4394200080;
						}
					}
					else if (_match_expr == 39LLU) {
						_case_begin_4394204560:;
						{
							(*(this->self))._method_push_directive((*(this->self))._method_build_directive(_157257_tokens));
							goto _iter_next_4394200080;
						}
					}
					else if (_match_expr == 21LLU) {
						_case_begin_4394204672:;
						{
							_157721_is_pub=true;
							if (_157257_tokens.len() == 1LL) {
								(*(this->self))._method_push_err(_157257_tokens[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
								goto _iter_next_4394200080;
							}
							_157257_tokens=_157257_tokens.slice(1LL);
							if (_157257_tokens.len() > 0LL) {
								_157621_token=_157257_tokens[0LL];
							}
						}
					}
					_match_end_4394204384:;
				}
				{
					auto &_match_expr{ _157621_token._field_id };
					
					if (_match_expr == 9LLU) {
						_case_begin_4394215360:;
						{
							jule::Ptr<_1b7509a90_VarDecl> _160125_v = (*(this->self))._method_build_var(_157257_tokens);
							if (_160125_v != nullptr) {
								(*(_160125_v))._field_public=_157721_is_pub;
								(*(_157240_ipl))._field_statics = jule::alloc_for_append((*(_157240_ipl))._field_statics,1);(*(_157240_ipl))._field_statics.__push(_160125_v);
							}
						}
					}
					else if (_match_expr == 38LLU || _match_expr == 33LLU || _match_expr == 35LLU) {
						_case_begin_4394208592:;
						{
							jule::Ptr<_1b7509a90_FnDecl> _161025_f = (*(this->self))._method_get_method(_157257_tokens);
							if (_161025_f != nullptr) {
								(*(this->self))._method_check_method_receiver(_161025_f);
								(*(this->self))._method_apply_fn_meta(_161025_f,_157721_is_pub);
								(*(_157240_ipl))._field_methods = jule::alloc_for_append((*(_157240_ipl))._field_methods,1);(*(_157240_ipl))._field_methods.__push(_161025_f);
							}
						}
					}
					else {
						_case_begin_4394213856:;
						{
							(*(this->self))._method_push_err(_157621_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							goto _iter_next_4394200080;
						}
					}
					_match_end_4394213776:;
				}
			}
			_iter_next_4394200080:;
			++it;
			goto _iter_begin_4394200080;
		}
		_iter_end_4394200080:;
	}
}



inline jule::Ptr<_1b7509a90_Impl> _1b78b1aa1_Parser::_method_build_impl(jule::Slice<_1b7553d92_Token> _162434_tokens) {
	_1b7553d92_Token _162517_token = _162434_tokens[0LL];
	if (_162434_tokens.len() < 2LL) {
		(*(this->self))._method_push_err(_162517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Int _163117_i = 1LL;
	jule::Ptr<_1b7509a90_TypeDecl> _163318_base;
	jule::Bool _163328_ok;
	std::tie(_163318_base,_163328_ok) = (*(this->self))._method_build_type(_162434_tokens,(&(_163117_i)),true);
	if ((!(_163328_ok))) {
		return nullptr;
	}
	if (_163117_i >= _162434_tokens.len()) {
		(*(this->self))._method_push_err(_162517_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7509a90_Impl> _164217_ipl = jule::new_struct<_1b7509a90_Impl>(new( std::nothrow ) _1b7509a90_Impl(_163318_base,jule::Ptr<_1b7509a90_TypeDecl>(),jule::Slice<jule::Ptr<_1b7509a90_FnDecl>>(),jule::Slice<jule::Ptr<_1b7509a90_VarDecl>>()));
	_162517_token=_162434_tokens[_163117_i];
	if (_162517_token._field_id != 12LLU) {
		if ((_162517_token._field_id == 3LLU) && (_162517_token._field_kind == jule::Str("{", 1))) {
			std::tie((*(_164217_ipl))._field_base,(*(_164217_ipl))._field_dest) = std::make_tuple((*(_164217_ipl))._field_dest,(*(_164217_ipl))._field_base);
			goto _julec_label_body;
		}
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	(_163117_i)++;
	if (_163117_i >= _162434_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	std::tie((*(_164217_ipl))._field_dest,_163328_ok) = (*(this->self))._method_build_type(_162434_tokens,(&(_163117_i)),true);
	if ((!(_163328_ok))) {
		return nullptr;
	}
	if (_163117_i >= _162434_tokens.len()) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_body:;
	jule::Slice<_1b7553d92_Token> _168217_body_tokens = _1b78b1aa1_range(_163117_i,jule::Str("{", 1),jule::Str("}", 1),_162434_tokens);
	if (_168217_body_tokens == nullptr) {
		(*(this->self))._method_stop();
		(*(this->self))._method_push_err(_162517_token,jule::Str("body is not exist", 17),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected a body, bodies should start in same line with their definition and declared with braces \"{ }\"", 102),jule::Slice<jule::Any>());
		return nullptr;
	}
	if (_163117_i < _162434_tokens.len()) {
		(*(this->self))._method_push_err(_162434_tokens[_163117_i],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_parse_impl_body(_164217_ipl,_168217_body_tokens);
	return _164217_ipl;
}



inline jule::Any _1b78b1aa1_Parser::_method_build_node_data(jule::Slice<_1b7553d92_Token>& _169640_tokens) {
	_1b7553d92_Token _169717_token = _169640_tokens[0LL];
	{
		auto &_match_expr{ _169717_token._field_id };
		
		if (_match_expr == 19LLU) {
			_case_begin_4394283840:;
			{
				
				return jule::Any((*(this->self))._method_build_use_decl(_169640_tokens,false));
			}
		}
		else if (_match_expr == 33LLU || _match_expr == 35LLU) {
			_case_begin_4394281504:;
			{
				jule::Ptr<_1b7509a90_FnDecl> _170521_f = (*(this->self))._method_build_fn(_169640_tokens,false,false);
				if (_170521_f != nullptr) {
					(*(_170521_f))._field_global=true;
					if ((*(_170521_f))._method_is_anon()) {
						(*(this->self))._method_push_err((*(_170521_f))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					}
				}
				return jule::Any(_170521_f);
			}
		}
		else if (_match_expr == 34LLU || _match_expr == 9LLU || _match_expr == 36LLU || _match_expr == 38LLU) {
			_case_begin_4394281600:;
			{
				return jule::Any((*(this->self))._method_build_var(_169640_tokens));
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4394281696:;
			{
				return jule::Any((*(this->self))._method_build_type_alias_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 24LLU) {
			_case_begin_4394281792:;
			{
				return jule::Any((*(this->self))._method_build_enum_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 25LLU) {
			_case_begin_4394281888:;
			{
				return jule::Any((*(this->self))._method_build_struct_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 29LLU) {
			_case_begin_4394284432:;
			{
				return jule::Any((*(this->self))._method_build_trait_decl(_169640_tokens));
			}
		}
		else if (_match_expr == 30LLU) {
			_case_begin_4394284528:;
			{
				return jule::Any((*(this->self))._method_build_impl(_169640_tokens));
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_4394284624:;
			{
				return (*(this->self))._method_build_cpp_link(_169640_tokens);
			}
		}
		else if (_match_expr == 39LLU) {
			_case_begin_4394284720:;
			{
				return jule::Any((*(this->self))._method_build_directive(_169640_tokens));
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_4394284816:;
			{
				return jule::Any(_1b78b1aa1_build_comment(_169717_token));
			}
		}
		else {
			_case_begin_4394279808:;
			{
				(*(this->self))._method_push_err(_169717_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return jule::Any(nullptr);
			}
		}
		_match_end_4394280720:;
	}
}



inline void _1b78b1aa1_Parser::_method_check_comment_group(_1b7509a90_Node& _175039_node) {
	if ((*this)._field_comment_group == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _175039_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_Comment>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_Directive>>()) {
			_case_begin_4394311168:;
		}
		else {
			_case_begin_4394311632:;
			{
				(*this)._field_comment_group=nullptr;
			}
		}
		_match_end_4394310304:;
	}
}



inline void _1b78b1aa1_Parser::_method_check_directive(_1b7509a90_Node& _176435_node) {
	if ((*this)._field_directives == nullptr) {
		return;
	}
	{
		auto &_match_expr{ _176435_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_Directive>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_Comment>>()) {
			_case_begin_4394320768:;
		}
		else {
			_case_begin_4394316544:;
			{
				if ((*this)._field_directives.len() != 0LL) {
					(*this)._method_push_err((*((*this)._field_directives[0LL]))._field_tag,jule::Str("this directive is out of scope, cant assign to any define", 57),jule::Slice<jule::Any>());
				}
				(*this)._field_directives=nullptr;
			}
		}
		_match_end_4394315216:;
	}
}



inline void _1b78b1aa1_Parser::_method_apply_fn_meta(jule::Ptr<_1b7509a90_FnDecl>& _178237_f,jule::Bool _178249_is_pub) {
	(*(_178237_f))._field_public=_178249_is_pub;
	(*(_178237_f))._field_directives=(*this)._field_directives;
	(*this)._field_directives=nullptr;
	(*(_178237_f))._field_doc_comments=(*this)._field_comment_group;
	(*this)._field_comment_group=nullptr;
}



inline void _1b78b1aa1_Parser::_method_apply_meta(_1b7509a90_Node& _179034_node,jule::Bool _179046_is_pub) {
	{
		auto &_match_expr{ _179034_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_VarDecl>>()) {
			_case_begin_4394329456:;
			{
				jule::Ptr<_1b7509a90_VarDecl> _179321_v = _179034_node._field_data.operator jule::Ptr<_1b7509a90_VarDecl>();
				if (_179321_v == nullptr) {
					return;
				}
				(*(_179321_v))._field_public=_179046_is_pub;
				(*(_179321_v))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_179321_v))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnDecl>>()) {
			_case_begin_4394329552:;
			{
				jule::Ptr<_1b7509a90_FnDecl> _180621_f = _179034_node._field_data.operator jule::Ptr<_1b7509a90_FnDecl>();
				if (_180621_f == nullptr) {
					return;
				}
				(*this)._method_apply_fn_meta(_180621_f,_179046_is_pub);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TypeAliasDecl>>()) {
			_case_begin_4394329648:;
			{
				jule::Ptr<_1b7509a90_TypeAliasDecl> _181421_tad = _179034_node._field_data.operator jule::Ptr<_1b7509a90_TypeAliasDecl>();
				if (_181421_tad == nullptr) {
					return;
				}
				(*(_181421_tad))._field_public=_179046_is_pub;
				(*(_181421_tad))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_EnumDecl>>()) {
			_case_begin_4394329744:;
			{
				jule::Ptr<_1b7509a90_EnumDecl> _182321_ed = _179034_node._field_data.operator jule::Ptr<_1b7509a90_EnumDecl>();
				if (_182321_ed == nullptr) {
					return;
				}
				(*(_182321_ed))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_182321_ed))._field_public=_179046_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_StructDecl>>()) {
			_case_begin_4394329968:;
			{
				jule::Ptr<_1b7509a90_StructDecl> _183221_sd = _179034_node._field_data.operator jule::Ptr<_1b7509a90_StructDecl>();
				if (_183221_sd == nullptr) {
					return;
				}
				(*(_183221_sd))._field_directives=(*this)._field_directives;
				(*this)._field_directives=nullptr;
				(*(_183221_sd))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_183221_sd))._field_public=_179046_is_pub;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TraitDecl>>()) {
			_case_begin_4394330064:;
			{
				jule::Ptr<_1b7509a90_TraitDecl> _184321_td = _179034_node._field_data.operator jule::Ptr<_1b7509a90_TraitDecl>();
				if (_184321_td == nullptr) {
					return;
				}
				(*(_184321_td))._field_doc_comments=(*this)._field_comment_group;
				(*this)._field_comment_group=nullptr;
				(*(_184321_td))._field_public=_179046_is_pub;
			}
		}
		else {
			_case_begin_4394329024:;
			{
				if (_179046_is_pub) {
					(*this)._method_push_err(_179034_node._field_token,jule::Str("define is not supports pub modifier", 35),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_4394328944:;
	}
}



inline void _1b78b1aa1_Parser::_method_check_use_decl(_1b7509a90_Node& _185834_node) {
	{
		auto &_match_expr{ _185834_node._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_UseDecl>>()) {
			_case_begin_4394362608:;
		}
		else {
			_case_begin_4394361616:;
			{
				return;
			}
		}
		_match_end_4394361456:;
	}
	if ((*((*this)._field_ast))._field_decls.len() > 0LL) {
		(*this)._method_push_err(_185834_node._field_token,jule::Str("use declarations must declared before other declarations", 56),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("move this use declaration to top of source file", 47),jule::Slice<jule::Any>());
	}
}



inline std::tuple<jule::Bool,jule::Any> _1b78b1aa1_Parser::_method_build_general_scope_node_data(jule::Slice<_1b7553d92_Token> _187353_st) {
	jule::Bool _187368_is_pub = jule::Bool();
	jule::Any _187382_data = jule::Any();
	if (_187353_st[0LL]._field_id == 21LLU) {
		_187368_is_pub=true;
		_187353_st=_187353_st.slice(1LL);
		if (_187353_st.len() == 0LL) {
			(*(this->self))._method_push_err(_187353_st[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			return std::make_tuple(_187368_is_pub,_187382_data);
		}
	}
	_187382_data=(*(this->self))._method_build_node_data(_187353_st);
	return std::make_tuple(_187368_is_pub,_187382_data);
}



inline _1b7509a90_Node _1b78b1aa1_Parser::_method_parse_node(jule::Slice<_1b7553d92_Token>& _188835_st) {
	_1b7509a90_Node _188917_node = _1b7509a90_Node(_188835_st[0LL],jule::Any());
	jule::Bool _189314_is_pub;
	jule::Any _189326_data;
	std::tie(_189314_is_pub,_189326_data) = (*(this->self))._method_build_general_scope_node_data(_188835_st);
	if (_189326_data == nullptr) {
		return _188917_node;
	}
	_188917_node._field_data=_189326_data;
	(*(this->self))._method_apply_meta(_188917_node,_189314_is_pub);
	(*(this->self))._method_check_comment_group(_188917_node);
	(*(this->self))._method_check_directive(_188917_node);
	(*(this->self))._method_check_use_decl(_188917_node);
	return _188917_node;
}



inline void _1b78b1aa1_Parser::_method_append_node(jule::Slice<_1b7553d92_Token>& _190736_st) {
	if (_190736_st.len() == 0LL) {
		return;
	}
	_1b7509a90_Node _191217_node = (*(this->self))._method_parse_node(_190736_st);
	if ((_191217_node._field_data == nullptr) || (*(this->self))._method_stopped()) {
		return;
	}
	{
		
		if (_191217_node._method_is_directive()) {
			_case_begin_4394397408:;
			{
				(*(this->self))._method_push_directive(_191217_node._field_data.operator jule::Ptr<_1b7509a90_Directive>());
			}
		}
		else if (_191217_node._method_is_use_decl()) {
			_case_begin_4394397504:;
			{
				(*((*(this->self))._field_ast))._field_use_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_use_decls,1);(*((*(this->self))._field_ast))._field_use_decls.__push(_191217_node._field_data.operator jule::Ptr<_1b7509a90_UseDecl>());
			}
		}
		else if (_191217_node._method_is_decl()) {
			_case_begin_4394397600:;
			{
				(*((*(this->self))._field_ast))._field_decls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_decls,1);(*((*(this->self))._field_ast))._field_decls.__push(_191217_node);
			}
		}
		else if (_191217_node._method_is_comment()) {
			_case_begin_4394397696:;
			{
				if ((*(this->self))._field_comment_group == nullptr) {
					(*(this->self))._field_comment_group=jule::new_struct<_1b7509a90_CommentGroup>(new( std::nothrow ) _1b7509a90_CommentGroup());
				}
				(*((*(this->self))._field_comment_group))._field_comments = jule::alloc_for_append((*((*(this->self))._field_comment_group))._field_comments,1);(*((*(this->self))._field_comment_group))._field_comments.__push(_191217_node._field_data.operator jule::Ptr<_1b7509a90_Comment>());
			}
		}
		else if (_191217_node._method_is_impl()) {
			_case_begin_4394399776:;
			{
				(*((*(this->self))._field_ast))._field_impls = jule::alloc_for_append((*((*(this->self))._field_ast))._field_impls,1);(*((*(this->self))._field_ast))._field_impls.__push(_191217_node._field_data.operator jule::Ptr<_1b7509a90_Impl>());
			}
		}
		else {
			_case_begin_4394397104:;
			{
				(*(this->self))._method_push_err(_191217_node._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4394397008:;
	}
}



inline void _1b78b1aa1_Parser::_method_remove_range(jule::Int _194231_i,jule::Str _194239_kind,jule::Slice<_1b7553d92_Token>& _194251_tokens,jule::Slice<jule::Int>& _194273_ranges) {
	jule::Str _194313_close = _1b78b1aa1_get_close_kind_of_brace(_194239_kind);
	for (; _194231_i >= 0LL; (_194231_i)--) {
		{
			_1b7553d92_Token _194517_tok = _194251_tokens[_194273_ranges[_194231_i]];
			if (_194517_tok._field_kind != _194313_close) {
				goto _iter_next_4391292720;
			}
			_194273_ranges=jule::append(_194273_ranges.slice(0LL,_194231_i),_194273_ranges.slice(_194231_i + 1LL));
			goto _iter_end_4391292720;
		}
	_iter_next_4391292720:;
	}
	_iter_end_4391292720:;
}



inline void _1b78b1aa1_Parser::_method_push_wrong_order_close_err(_1b7553d92_Token& _195546_t,jule::Slice<_1b7553d92_Token>& _195557_tokens,jule::Slice<jule::Int>& _195575_ranges) {
	{
		auto &_match_expr{ _195557_tokens[_195575_ranges[_195575_ranges.len() - 1LL]]._field_kind };
		
		if (_match_expr == jule::Str("(", 1)) {
			_case_begin_4392620416:;
			{
				(*this)._method_push_err(_195546_t,jule::Str("was expected parentheses close", 30),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("{", 1)) {
			_case_begin_4392620512:;
			{
				(*this)._method_push_err(_195546_t,jule::Str("was expected brace close", 24),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr == jule::Str("[", 1)) {
			_case_begin_4392620608:;
			{
				(*this)._method_push_err(_195546_t,jule::Str("was expected bracket close", 26),jule::Slice<jule::Any>());
			}
		}
		_match_end_4392620288:;
	}
}



inline void _1b78b1aa1_Parser::_method_push_range_close(_1b7553d92_Token _196335_t,jule::Str _196345_left,jule::Slice<_1b7553d92_Token>& _196357_tokens,jule::Slice<jule::Int>& _196379_ranges) {
	jule::I64 _196413_n = _196379_ranges.len();
	if (_196413_n == 0LL) {
		{
			auto &_match_expr{ _196335_t._field_kind };
			
			if (_match_expr == jule::Str("]", 1)) {
				_case_begin_4392632528:;
				{
					(*this)._method_push_err(_196335_t,jule::Str("extra closed brackets", 21),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str("}", 1)) {
				_case_begin_4392632624:;
				{
					(*this)._method_push_err(_196335_t,jule::Str("extra closed braces", 19),jule::Slice<jule::Any>());
				}
			}
			else if (_match_expr == jule::Str(")", 1)) {
				_case_begin_4392632720:;
				{
					(*this)._method_push_err(_196335_t,jule::Str("extra closed parentheses", 24),jule::Slice<jule::Any>());
				}
			}
			_match_end_4392632416:;
		}
		return;
	} else if (_196357_tokens[_196379_ranges[_196413_n - 1LL]]._field_kind != _196345_left) {
		(*this)._method_push_wrong_order_close_err(_196335_t,_196357_tokens,_196379_ranges);
	}
	(*this)._method_remove_range(static_cast<jule::I64>(_196413_n - 1LL),_196335_t._field_kind,_196357_tokens,_196379_ranges);
}



inline void _1b78b1aa1_Parser::_method_check_ranges(jule::Slice<_1b7553d92_Token>& _197832_tokens) {
	jule::Slice<jule::Int> _197917_ranges = nullptr;
	{
		auto &expr = _197832_tokens;
		auto it = expr.begin();
		_iter_begin_4392646224:;
		if (it != expr.end()) {
			jule::Int _1b78b1aa1_i = it - expr.begin();
			_1b7553d92_Token &_1b78b1aa1_token = *it;
			{
				if (_1b78b1aa1_token._field_id != 3LLU) {
					goto _iter_next_4392646224;
				}
				{
					auto &_match_expr{ _1b78b1aa1_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1)) {
						_case_begin_4392648400:;
						{
							_197917_ranges = jule::alloc_for_append(_197917_ranges,1);_197917_ranges.__push(_1b78b1aa1_i);
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_4392649600:;
						{
							(*this)._method_push_range_close(_1b78b1aa1_token,jule::Str("(", 1),_197832_tokens,_197917_ranges);
						}
					}
					else if (_match_expr == jule::Str("}", 1)) {
						_case_begin_4392649696:;
						{
							(*this)._method_push_range_close(_1b78b1aa1_token,jule::Str("{", 1),_197832_tokens,_197917_ranges);
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_4392649792:;
						{
							(*this)._method_push_range_close(_1b78b1aa1_token,jule::Str("[", 1),_197832_tokens,_197917_ranges);
						}
					}
					_match_end_4392648192:;
				}
			}
			_iter_next_4392646224:;
			++it;
			_1b78b1aa1_i++;
			goto _iter_begin_4392646224;
		}
		_iter_end_4392646224:;
	}
	{
		auto &expr = _197917_ranges;
		auto it = expr.begin();
		_iter_begin_4392656976:;
		if (it != expr.end()) {
			jule::Int &_1b78b1aa1_i = *it;
			{
				_1b7553d92_Token _200417_token = _197832_tokens[_1b78b1aa1_i];
				{
					auto &_match_expr{ _200417_token._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_4392659744:;
						{
							(*this)._method_push_err(_200417_token,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("{", 1)) {
						_case_begin_4392659840:;
						{
							(*this)._method_push_err(_200417_token,jule::Str("brace waiting to close", 22),jule::Slice<jule::Any>());
						}
					}
					else if (_match_expr == jule::Str("[", 1)) {
						_case_begin_4392659952:;
						{
							(*this)._method_push_err(_200417_token,jule::Str("bracket are waiting to close", 28),jule::Slice<jule::Any>());
						}
					}
					_match_end_4392659664:;
				}
			}
			_iter_next_4392656976:;
			++it;
			goto _iter_begin_4392656976;
		}
		_iter_end_4392656976:;
	}
}



inline void _1b78b1aa1_Parser::_method_parse(jule::Ptr<_1b750c763_File>& _201330_f) {
	(*(this->self))._field_ast=jule::new_struct<_1b74bea77_Ast>(new( std::nothrow ) _1b74bea77_Ast(_201330_f,jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Slice<jule::Ptr<_1b7509a90_UseDecl>>(),jule::Slice<jule::Ptr<_1b7509a90_Impl>>(),jule::Slice<_1b7509a90_Node>()));
	jule::Slice<_1b7553d92_Token> _201817_tokens = (*(_201330_f))._method_tokens();
	(*(this->self))._method_check_ranges(_201817_tokens);
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _202417_stmts = _1b76b4310_split_stmts(_201817_tokens);
	jule::Int _202717_i = 0LL;
	_julec_label_iter:;
	for (; _202717_i < _202417_stmts.len(); (_202717_i)++) {
		{
			jule::Ptr<_1b76b4310_Stmt> _203021_stmt = _202417_stmts[_202717_i];
			if ((*(_203021_stmt))._field_tokens.len() == 0LL) {
				return;
			}
			jule::Any _203525_data;
			std::tie(std::ignore,_203525_data) = (*(this->self))._method_build_general_scope_node_data((*(_203021_stmt))._field_tokens);
			if (_203525_data == nullptr) {
				goto _iter_end_4392670768;
			}
			if ((*(this->self))._method_stopped()) {
				return;
			}
			{
				auto &_match_expr{ _203525_data };
				
				if (_match_expr.type_is<jule::Ptr<_1b7509a90_Directive>>()) {
					_case_begin_4392681280:;
					{
						jule::Ptr<_1b7509a90_Directive> _204625_d = _203525_data.operator jule::Ptr<_1b7509a90_Directive>();
						if ((_204625_d != nullptr) && _1b69bd670_is_top_directive((*(_204625_d))._field_tag._field_kind)) {
							(*((*(this->self))._field_ast))._field_top_directives = jule::alloc_for_append((*((*(this->self))._field_ast))._field_top_directives,1);(*((*(this->self))._field_ast))._field_top_directives.__push(_204625_d);
						} else {
							goto _iter_end_4392670768;
						}
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1b7509a90_Comment>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_CommentGroup>>()) {
					_case_begin_4392681376:;
				}
				else {
					_case_begin_4392680848:;
					{
						goto _iter_end_4392670768;
					}
				}
				_match_end_4392680768:;
			}
		}
	_iter_next_4392670768:;
	}
	_iter_end_4392670768:;
	(*(this->self))._field_errors=nullptr;
	for (; _202717_i < _202417_stmts.len(); (_202717_i)++) {
		{
			jule::Ptr<_1b76b4310_Stmt> _206621_stmt = _202417_stmts[_202717_i];
			(*(this->self))._method_append_node((*(_206621_stmt))._field_tokens);
			if ((*(this->self))._method_stopped()) {
				goto _iter_end_4392682160;
			}
		}
	_iter_next_4392682160:;
	}
	_iter_end_4392682160:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b78b1aa1_Parser &_Src) {
	_Stream << "Parser{";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "comment_group:" << _Src._field_comment_group << ", ";
	_Stream << "errors:" << _Src._field_errors;
	_Stream << "}";
	return _Stream;
}



inline void _1a691245e_TypeBuilder::_method_push_err(_1b7553d92_Token _7827_token,jule::Str _7841_fmt) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_err(_7827_token,_7841_fmt,jule::Slice<jule::Any>());
	}
}



inline void _1a691245e_TypeBuilder::_method_push_suggestion(jule::Str _8534_fmt,jule::Slice<jule::Any> _8547_args) {
	if ((*this)._field_err) {
		(*((*this)._field_p))._method_push_suggestion(_8534_fmt,_8547_args);
	}
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_prim(void) {
	jule::Ptr<_1b7509a90_TypeDecl> _9217_t = _1a691245e_build_prim_type((*this)._field_tokens[(*((*this)._field_i))]);
	((*((*this)._field_i)))++;
	return _9217_t;
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_namespace(void) {
	jule::Ptr<_1b7509a90_TypeDecl> _9817_t = jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl((*this)._field_tokens[(*((*this)._field_i))],jule::Any()));
	jule::Ptr<_1b7509a90_NamespaceTypeDecl> _10217_nst = jule::new_struct<_1b7509a90_NamespaceTypeDecl>(new( std::nothrow ) _1b7509a90_NamespaceTypeDecl());
	jule::Int _10317_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_1b7553d92_Token _10521_token = (*this)._field_tokens[(*((*this)._field_i))];
			if ((_10317_n % 2LL) == 0LL) {
				if (_10521_token._field_id != 2LLU) {
					(*this)._method_push_err(_10521_token,jule::Str("invalid syntax", 14));
					(*this)._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
				}
				(*(_10217_nst))._field_idents = jule::alloc_for_append((*(_10217_nst))._field_idents,1);(*(_10217_nst))._field_idents.__push(_10521_token);
			} else if (_10521_token._field_id != 23LLU) {
				goto _iter_end_4392709808;
			}
			(_10317_n)++;
		}
	_iter_next_4392709808:;
	}
	_iter_end_4392709808:;
	(*(_10217_nst))._field_idents=(*(_10217_nst))._field_idents.slice(0LL,(*(_10217_nst))._field_idents.len() - 1LL);
	((*((*this)._field_i)))--;
	(*(_10217_nst))._field_kind=(*((*this)._method_build_ident()))._field_kind.operator jule::Ptr<_1b7509a90_IdentTypeDecl>();
	(*(_9817_t))._field_kind=jule::Any(_10217_nst);
	return _9817_t;
}



inline jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _1a691245e_TypeBuilder::_method_build_generics(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		return nullptr;
	}
	_1b7553d92_Token _13113_token = (*this)._field_tokens[(*((*this)._field_i))];
	if ((_13113_token._field_id != 3LLU) || (_13113_token._field_kind != jule::Str("[", 1))) {
		return nullptr;
	}
	jule::Slice<jule::Slice<_1b7553d92_Token>> _13617_parts = (*this)._method_ident_generics();
	if (_13617_parts.len() == 0LL) {
		(*this)._method_push_err(_13113_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>> _14217_types = jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>::alloc(0LL,static_cast<jule::I64>(_13617_parts.len()));
	{
		auto &expr = _13617_parts;
		auto it = expr.begin();
		_iter_begin_4392740192:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1a691245e_part = *it;
			{
				jule::Int _14421_j = 0LL;
				jule::Ptr<_1b7509a90_TypeDecl> _14522_t;
				std::tie(_14522_t,std::ignore) = (*((*this)._field_p))._method_build_type(_1a691245e_part,(&(_14421_j)),true);
				if (_14421_j < _1a691245e_part.len()) {
					(*this)._method_push_err(_1a691245e_part[_14421_j],jule::Str("invalid syntax", 14));
				}
				_14217_types = jule::alloc_for_append(_14217_types,1);_14217_types.__push(_14522_t);
			}
			_iter_next_4392740192:;
			++it;
			goto _iter_begin_4392740192;
		}
		_iter_end_4392740192:;
	}
	return _14217_types;
}



inline jule::Slice<jule::Slice<_1b7553d92_Token>> _1a691245e_TypeBuilder::_method_ident_generics(void) {
	jule::Int _15513_first = (*((*this)._field_i));
	jule::Int _15617_range_n = 0LL;
	for (; (*((*this)._field_i)) < (*this)._field_tokens.len(); ((*((*this)._field_i)))++) {
		{
			_1b7553d92_Token _15817_token = (*this)._field_tokens[(*((*this)._field_i))];
			if (_15817_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _15817_token._field_kind };
					
					if (_match_expr == jule::Str("[", 1)) {
						_case_begin_4392753824:;
						{
							(_15617_range_n)++;
						}
					}
					else if (_match_expr == jule::Str("]", 1)) {
						_case_begin_4392753936:;
						{
							(_15617_range_n)--;
						}
					}
					_match_end_4392753344:;
				}
			}
			if (_15617_range_n == 0LL) {
				((*((*this)._field_i)))++;
				goto _iter_end_4392745520;
			}
		}
	_iter_next_4392745520:;
	}
	_iter_end_4392745520:;
	jule::Slice<_1b7553d92_Token> _17017_tokens = (*this)._field_tokens.slice(_15513_first + 1LL,(*((*this)._field_i)) - 1LL);
	jule::Slice<jule::Slice<_1b7553d92_Token>> _17118_parts;
	jule::Slice<_1b6986b22_Log> _17125_errors;
	std::tie(_17118_parts,_17125_errors) = _1b78b1aa1_parts(_17017_tokens,8LLU,true);
	if ((*this)._field_err) {
		(*((*this)._field_p))._field_errors=jule::append((*((*this)._field_p))._field_errors,_17125_errors);
	}
	return _17118_parts;
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_ident(void) {
	if ((((*((*this)._field_i)) + 1LL) < (*this)._field_tokens.len()) && ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id == 23LLU)) {
		return (*this)._method_build_namespace();
	}
	_1b7553d92_Token _18217_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_1b7509a90_IdentTypeDecl> _18317_it = jule::new_struct<_1b7509a90_IdentTypeDecl>(new( std::nothrow ) _1b7509a90_IdentTypeDecl(_18217_token,_18217_token._field_kind,false,jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>()));
	((*((*this)._field_i)))++;
	(*(_18317_it))._field_generics=(*this)._method_build_generics();
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_18217_token,jule::Any(_18317_it)));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_cpp_link(void) {
	if ((((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) || ((*this)._field_tokens[(*((*this)._field_i)) + 1LL]._field_id != 20LLU)) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i))],jule::Str("invalid syntax", 14));
		return nullptr;
	}
	(*((*this)._field_i))+=2LL;
	jule::Ptr<_1b7509a90_TypeDecl> _20217_t = (*this)._method_build_ident();
	(*((*(_20217_t))._field_kind.operator jule::Ptr<_1b7509a90_IdentTypeDecl>()))._field_cpp_linked=true;
	return _20217_t;
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_fn(void) {
	_1b7553d92_Token _20817_token = (*this)._field_tokens[(*((*this)._field_i))];
	jule::Ptr<_1b7509a90_FnDecl> _20917_f = (*((*this)._field_p))._method_build_fn_prototype((*this)._field_tokens,(*((*this)._field_i)),false);
	if (_20917_f == nullptr) {
		return nullptr;
	}
	if ((!((*(_20917_f))._method_is_anon()))) {
		(*this)._method_push_err((*(_20917_f))._field_token,jule::Str("invalid syntax", 14));
	}
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_20817_token,jule::Any(_20917_f)));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_ptr(void) {
	_1b7553d92_Token _22317_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_22317_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	if ((*this)._field_tokens[(*((*this)._field_i))]._field_id == 35LLU) {
		((*((*this)._field_i)))++;
		return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_22317_token,jule::Any(jule::new_struct<_1b7509a90_PtrTypeDecl>(new( std::nothrow ) _1b7509a90_PtrTypeDecl(nullptr)))));
	}
	jule::Ptr<_1b7509a90_TypeDecl> _24017_elem = (*this)._method_step();
	if (_24017_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_22317_token,jule::Any(jule::new_struct<_1b7509a90_PtrTypeDecl>(new( std::nothrow ) _1b7509a90_PtrTypeDecl(_24017_elem)))));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_sptr(void) {
	_1b7553d92_Token _25417_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((*((*this)._field_i)) + 1LL) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err(_25417_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	jule::Ptr<_1b7509a90_TypeDecl> _26117_elem = (*this)._method_step();
	if (_26117_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_25417_token,jule::Any(jule::new_struct<_1b7509a90_SptrTypeDecl>(new( std::nothrow ) _1b7509a90_SptrTypeDecl(_26117_elem)))));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_op(void) {
	_1b7553d92_Token _27517_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _27517_token._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4392822800:;
			{
				return (*this)._method_build_ptr();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4392821264:;
			{
				return (*this)._method_build_sptr();
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_4392821360:;
			{
				return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_1b7553d92_Token(),jule::Any(jule::new_struct<_1b7509a90_SptrTypeDecl>(new( std::nothrow ) _1b7509a90_SptrTypeDecl((*this)._method_build_sptr())))));
			}
		}
		else {
			_case_begin_4392819536:;
			{
				(*this)._method_push_err(_27517_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_4392820976:;
	}
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_slc(void) {
	_1b7553d92_Token _29717_token = (*this)._field_tokens[(*((*this)._field_i))];
	((*((*this)._field_i)))++;
	jule::Ptr<_1b7509a90_TypeDecl> _29917_elem = (*this)._method_step();
	if (_29917_elem == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_29717_token,jule::Any(jule::new_struct<_1b7509a90_SlcTypeDecl>(new( std::nothrow ) _1b7509a90_SlcTypeDecl(_29917_elem)))));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_arr(void) {
	if ((*((*this)._field_i)) >= (*this)._field_tokens.len()) {
		(*this)._method_push_err((*this)._field_tokens[(*((*this)._field_i)) - 1LL],jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Int _32013_expr_delta = (*((*this)._field_i));
	jule::Ptr<_1b7509a90_TypeDecl> _32217_elem = (*this)._method_step();
	if (_32217_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1b7509a90_ArrTypeDecl> _32717_arrt = jule::new_struct<_1b7509a90_ArrTypeDecl>(new( std::nothrow ) _1b7509a90_ArrTypeDecl(_32217_elem,jule::Ptr<_1b7509a90_Expr>()));
	jule::Slice<_1b7553d92_Token> _33117_expr_tokens = (*this)._field_tokens.slice(0LL,_32013_expr_delta);
	std::tie(std::ignore,_33117_expr_tokens) = _1b78b1aa1_range_last(_33117_expr_tokens);
	_33117_expr_tokens=_33117_expr_tokens.slice(1LL,_33117_expr_tokens.len() - 1LL);
	_1b7553d92_Token _33417_token = _33117_expr_tokens[0LL];
	if (((_33117_expr_tokens.len() == 1LL) && (_33417_token._field_id == 7LLU)) && (_33417_token._field_kind == jule::Str("...", 3))) {
	} else {
		(*(_32717_arrt))._field_size=(*((*this)._field_p))._method_build_expr(_33117_expr_tokens);
	}
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_33417_token,jule::Any(_32717_arrt)));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_map(jule::Int _34728_colon,jule::Slice<_1b7553d92_Token>& _34745_tokens) {
	_1b7553d92_Token _34817_colon_token = (*this)._field_tokens[_34728_colon];
	if ((_34728_colon == 0LL) || ((_34728_colon + 1LL) >= _34745_tokens.len())) {
		(*this)._method_push_err(_34817_colon_token,jule::Str("type missing", 12));
		return nullptr;
	}
	jule::Slice<_1b7553d92_Token> _35317_key_tokens = _34745_tokens.slice(0LL,_34728_colon);
	jule::Slice<_1b7553d92_Token> _35417_val_tokens = _34745_tokens.slice(_34728_colon + 1LL);
	jule::Ptr<_1b7509a90_MapTypeDecl> _35517_mapt = jule::new_struct<_1b7509a90_MapTypeDecl>(new( std::nothrow ) _1b7509a90_MapTypeDecl());
	jule::Int _35717_j = 0LL;
	jule::Ptr<_1b7509a90_TypeDecl> _35818_keyt;
	jule::Bool _35828_ok;
	std::tie(_35818_keyt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35317_key_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35317_key_tokens.len()) {
		(*this)._method_push_err(_35317_key_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_key=_35818_keyt;
	_35717_j=0LL;
	jule::Ptr<_1b7509a90_TypeDecl> _36718_valt;
	std::tie(_36718_valt,_35828_ok) = (*((*this)._field_p))._method_build_type(_35417_val_tokens,(&(_35717_j)),(*this)._field_err);
	if ((!(_35828_ok))) {
		return nullptr;
	} else if (_35717_j < _35417_val_tokens.len()) {
		(*this)._method_push_err(_35417_val_tokens[_35717_j],jule::Str("invalid syntax", 14));
	}
	(*(_35517_mapt))._field_val=_36718_valt;
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_34817_colon_token,jule::Any(_35517_mapt)));
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_build_enumerable(void) {
	_1b7553d92_Token _38217_token = (*this)._field_tokens[(*((*this)._field_i))];
	if (((((*((*this)._field_i)) + 2LL) >= (*this)._field_tokens.len()) || (_38217_token._field_id != 3LLU)) || (_38217_token._field_kind != jule::Str("[", 1))) {
		(*this)._method_push_err(_38217_token,jule::Str("invalid syntax", 14));
		return nullptr;
	}
	((*((*this)._field_i)))++;
	_38217_token=(*this)._field_tokens[(*((*this)._field_i))];
	if ((_38217_token._field_id == 3LLU) && (_38217_token._field_kind == jule::Str("]", 1))) {
		return (*this)._method_build_slc();
	}
	((*((*this)._field_i)))--;
	jule::Slice<_1b7553d92_Token> _39618_map_tokens;
	jule::Int _39630_colon;
	std::tie(_39618_map_tokens,_39630_colon) = _1a691245e_split_map_range((*this)._field_tokens,(*((*this)._field_i)));
	((*((*this)._field_i)))++;
	if (_39630_colon == -1LL) {
		return (*this)._method_build_arr();
	}
	return (*this)._method_build_map(_39630_colon,_39618_map_tokens);
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_TypeBuilder::_method_step(void) {
	_1b7553d92_Token _40513_token = (*this)._field_tokens[(*((*this)._field_i))];
	{
		auto &_match_expr{ _40513_token._field_id };
		
		if (_match_expr == 1LLU) {
			_case_begin_4392898368:;
			{
				return (*this)._method_build_prim();
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_4392898464:;
			{
				return (*this)._method_build_ident();
			}
		}
		else if (_match_expr == 31LLU) {
			_case_begin_4392900544:;
			{
				return (*this)._method_build_cpp_link();
			}
		}
		else if (_match_expr == 33LLU) {
			_case_begin_4392900640:;
			{
				return (*this)._method_build_fn();
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4392900736:;
			{
				return (*this)._method_build_op();
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4392900832:;
			{
				return (*this)._method_build_enumerable();
			}
		}
		else {
			_case_begin_4392895280:;
			{
				((*((*this)._field_i)))++;
				(*this)._method_push_err(_40513_token,jule::Str("invalid syntax", 14));
				return nullptr;
			}
		}
		_match_end_4392897472:;
	}
}



inline std::tuple<jule::Ptr<_1b7509a90_TypeDecl>,jule::Bool> _1a691245e_TypeBuilder::_method_build(void) {
	jule::Bool _43444_ok = jule::Bool();
	jule::Ptr<_1b7509a90_TypeDecl> _43517_root = (*this)._method_step();
	if (_43517_root == nullptr) {
		_43444_ok = false;
		return std::make_tuple(_1a691245e_build_void_type(),_43444_ok);
	}
	_43444_ok = true;
	return std::make_tuple(_43517_root,_43444_ok);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a691245e_TypeBuilder &_Src) {
	_Stream << "TypeBuilder{";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "tokens:" << _Src._field_tokens << ", ";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b6dd59aa_Const> _1b6dd59aa_Const::_static_method_new_i64(jule::I64 _1327_x) {
	return jule::new_struct<_1b6dd59aa_Const>(new( std::nothrow ) _1b6dd59aa_Const(jule::Any(_1327_x)));
}



inline jule::Ptr<_1b6dd59aa_Const> _1b6dd59aa_Const::_static_method_new_u64(jule::U64 _1527_x) {
	return jule::new_struct<_1b6dd59aa_Const>(new( std::nothrow ) _1b6dd59aa_Const(jule::Any(_1527_x)));
}



inline jule::Ptr<_1b6dd59aa_Const> _1b6dd59aa_Const::_static_method_new_bool(jule::Bool _1728_x) {
	return jule::new_struct<_1b6dd59aa_Const>(new( std::nothrow ) _1b6dd59aa_Const(jule::Any(_1728_x)));
}



inline jule::Ptr<_1b6dd59aa_Const> _1b6dd59aa_Const::_static_method_new_str(jule::Str _1927_x) {
	return jule::new_struct<_1b6dd59aa_Const>(new( std::nothrow ) _1b6dd59aa_Const(jule::Any(_1927_x)));
}



inline jule::Ptr<_1b6dd59aa_Const> _1b6dd59aa_Const::_static_method_new_f64(jule::F64 _2127_x) {
	return jule::new_struct<_1b6dd59aa_Const>(new( std::nothrow ) _1b6dd59aa_Const(jule::Any(_2127_x)));
}



inline jule::Ptr<_1b6dd59aa_Const> _1b6dd59aa_Const::_static_method_new_nil(void) {
	return jule::new_struct<_1b6dd59aa_Const>(new( std::nothrow ) _1b6dd59aa_Const(jule::Any(nullptr)));
}



inline jule::I64 _1b6dd59aa_Const::_method_read_i64(void) {
	if ((!((*this)._method_is_i64()))) {
		return 0LL;
	}
	return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
}



inline jule::U64 _1b6dd59aa_Const::_method_read_u64(void) {
	if ((!((*this)._method_is_u64()))) {
		return 0LL;
	}
	return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
}



inline jule::Bool _1b6dd59aa_Const::_method_read_bool(void) {
	if ((!((*this)._method_is_bool()))) {
		return false;
	}
	return (*this)._field_data.operator jule::Bool();
}



inline jule::Str _1b6dd59aa_Const::_method_read_str(void) {
	if ((!((*this)._method_is_str()))) {
		return jule::Str();
	}
	return (*this)._field_data.operator jule::Str();
}



inline jule::F64 _1b6dd59aa_Const::_method_read_f64(void) {
	if ((!((*this)._method_is_f64()))) {
		return 0LL;
	}
	return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
}



inline jule::I64 _1b6dd59aa_Const::_method_as_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4392987184:;
			{
				return static_cast<jule::I64>((*this)._field_data.operator jule::I64());
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4392986080:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::U64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4392986176:;
			{
				return static_cast<jule::I64>(static_cast<jule::I64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_4392985648:;
			{
				return 0LL;
			}
		}
		_match_end_4392985392:;
	}
}



inline jule::U64 _1b6dd59aa_Const::_method_as_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4392993024:;
			{
				return static_cast<jule::U64>((*this)._field_data.operator jule::U64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4392992000:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4392992096:;
			{
				return static_cast<jule::U64>(static_cast<jule::U64>((*this)._field_data.operator jule::F64()));
			}
		}
		else {
			_case_begin_4392958448:;
			{
				return 0LL;
			}
		}
		_match_end_4392985840:;
	}
}



inline jule::F64 _1b6dd59aa_Const::_method_as_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4392999568:;
			{
				return static_cast<jule::F64>((*this)._field_data.operator jule::F64());
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4392999664:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::I64()));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4392998416:;
			{
				return static_cast<jule::F64>(static_cast<jule::F64>((*this)._field_data.operator jule::U64()));
			}
		}
		else {
			_case_begin_4392998064:;
			{
				return 0LL;
			}
		}
		_match_end_4392997984:;
	}
}



inline void _1b6dd59aa_Const::_method_set_i64(jule::I64 _13930_x) {
	(*this)._field_data=jule::Any(_13930_x);
}



inline void _1b6dd59aa_Const::_method_set_u64(jule::U64 _14130_x) {
	(*this)._field_data=jule::Any(_14130_x);
}



inline void _1b6dd59aa_Const::_method_set_bool(jule::Bool _14331_x) {
	(*this)._field_data=jule::Any(_14331_x);
}



inline void _1b6dd59aa_Const::_method_set_str(jule::Str _14530_x) {
	(*this)._field_data=jule::Any(_14530_x);
}



inline void _1b6dd59aa_Const::_method_set_f64(jule::F64 _14730_x) {
	(*this)._field_data=jule::Any(_14730_x);
}



inline void _1b6dd59aa_Const::_method_set_nil(void) {
	(*this)._field_data=jule::Any(nullptr);
}



inline jule::Bool _1b6dd59aa_Const::_method_is_i64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4393016640:;
			{
				return true;
			}
		}
		else {
			_case_begin_4393017008:;
			{
				return false;
			}
		}
		_match_end_4393016752:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_is_u64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4393019248:;
			{
				return true;
			}
		}
		else {
			_case_begin_4393019552:;
			{
				return false;
			}
		}
		_match_end_4393019472:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_is_bool(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_4393021456:;
			{
				return true;
			}
		}
		else {
			_case_begin_4393021760:;
			{
				return false;
			}
		}
		_match_end_4393021680:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_is_str(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_4393023664:;
			{
				return true;
			}
		}
		else {
			_case_begin_4393023968:;
			{
				return false;
			}
		}
		_match_end_4393023888:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_is_f64(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4393025872:;
			{
				return true;
			}
		}
		else {
			_case_begin_4393026176:;
			{
				return false;
			}
		}
		_match_end_4393026096:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_is_nil(void) {
	return (*this)._field_data == nullptr;
}



inline jule::Bool _1b6dd59aa_Const::_method_are_same_types(_1b6dd59aa_Const _19933_x) {
	{
		
		if ((*this)._method_is_i64() == _19933_x._method_is_i64()) {
			_case_begin_4393033136:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_u64() == _19933_x._method_is_u64()) {
			_case_begin_4393031712:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_f64() == _19933_x._method_is_f64()) {
			_case_begin_4393031808:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_bool() == _19933_x._method_is_bool()) {
			_case_begin_4393031904:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_str() == _19933_x._method_is_str()) {
			_case_begin_4393032000:;
			{
				return true;
			}
		}
		else if ((*this)._method_is_nil() == _19933_x._method_is_nil()) {
			_case_begin_4393032416:;
			{
				return true;
			}
		}
		else {
			_case_begin_4393031408:;
			{
				return false;
			}
		}
		_match_end_4393031232:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_and(_1b6dd59aa_Const _21722_x) {
	{
		
		if ((*this)._method_is_bool() && _21722_x._method_is_bool()) {
			_case_begin_4393044896:;
			{
				return (*this)._method_read_bool() && _21722_x._method_read_bool();
			}
		}
		else {
			_case_begin_4393043248:;
			{
				return false;
			}
		}
		_match_end_4393043072:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_or(_1b6dd59aa_Const _22921_x) {
	{
		
		if ((*this)._method_is_bool() && _22921_x._method_is_bool()) {
			_case_begin_4393050256:;
			{
				return (*this)._method_read_bool() || _22921_x._method_read_bool();
			}
		}
		else {
			_case_begin_4393048608:;
			{
				return false;
			}
		}
		_match_end_4393048432:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_eqs(_1b6dd59aa_Const _24122_x) {
	{
		
		if ((*this)._method_is_nil()) {
			_case_begin_4393055536:;
			{
				return _24122_x._method_is_nil();
			}
		}
		else if ((*this)._method_is_bool()) {
			_case_begin_4393054112:;
			{
				return _24122_x._method_is_bool() && ((*this)._method_read_bool() == _24122_x._method_read_bool());
			}
		}
		else if ((*this)._method_is_str()) {
			_case_begin_4393054208:;
			{
				return _24122_x._method_is_str() && ((*this)._method_read_str() == _24122_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4393054304:;
			{
				return (*this)._method_read_i64() == _24122_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393054400:;
			{
				return (*this)._method_read_u64() == _24122_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4393054816:;
			{
				return (*this)._method_read_f64() == _24122_x._method_as_f64();
			}
		}
		else {
			_case_begin_4393053808:;
			{
				return false;
			}
		}
		_match_end_4393053632:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_lt(_1b6dd59aa_Const _27421_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_4393070576:;
			{
				return _27421_x._method_is_str() && ((*this)._method_read_str() < _27421_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4393070672:;
			{
				return (*this)._method_read_i64() < _27421_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393069200:;
			{
				return (*this)._method_read_u64() < _27421_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4393069312:;
			{
				return (*this)._method_read_f64() < _27421_x._method_as_f64();
			}
		}
		else {
			_case_begin_4393068880:;
			{
				return false;
			}
		}
		_match_end_4393068704:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_gt(_1b6dd59aa_Const _30121_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_4393081216:;
			{
				return _30121_x._method_is_str() && ((*this)._method_read_str() > _30121_x._method_read_str());
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4393081312:;
			{
				return (*this)._method_read_i64() > _30121_x._method_as_i64();
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393079840:;
			{
				return (*this)._method_read_u64() > _30121_x._method_as_u64();
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4393079952:;
			{
				return (*this)._method_read_f64() > _30121_x._method_as_f64();
			}
		}
		else {
			_case_begin_4393079520:;
			{
				return false;
			}
		}
		_match_end_4393079344:;
	}
}



inline jule::Bool _1b6dd59aa_Const::_method_add(_1b6dd59aa_Const _32626_x) {
	{
		
		if ((*this)._method_is_str()) {
			_case_begin_4393092240:;
			{
				if ((!(_32626_x._method_is_str()))) {
					return false;
				}
				(*this)._method_set_str(((*this)._method_read_str() + _32626_x._method_read_str()));
			}
		}
		else if ((*this)._method_is_f64()) {
			_case_begin_4393092336:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() + _32626_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4393090864:;
			{
				if (_32626_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _32626_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() + _32626_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393090976:;
			{
				if (_32626_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() + _32626_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() + _32626_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_4393090544:;
			{
				return false;
			}
		}
		_match_end_4393090368:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_sub(_1b6dd59aa_Const _35926_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_4393112064:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() - _35926_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4393112160:;
			{
				if (_35926_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35926_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() - _35926_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393110688:;
			{
				if (_35926_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() - _35926_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() - _35926_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_4393110384:;
			{
				return false;
			}
		}
		_match_end_4393110208:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_mul(_1b6dd59aa_Const _38626_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_4393128608:;
			{
				(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_read_f64() * _38626_x._method_as_f64()));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4393128704:;
			{
				if (_38626_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _38626_x._method_read_f64()));
				} else {
					(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() * _38626_x._method_as_i64()));
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393127232:;
			{
				if (_38626_x._method_is_f64()) {
					(*this)._method_set_f64(static_cast<jule::F64>((*this)._method_as_f64() * _38626_x._method_read_f64()));
				} else {
					(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() * _38626_x._method_as_u64()));
				}
			}
		}
		else {
			_case_begin_4393126928:;
			{
				return false;
			}
		}
		_match_end_4393126752:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_div(_1b6dd59aa_Const _41726_x) {
	{
		
		if ((*this)._method_is_f64()) {
			_case_begin_4393144768:;
			{
				jule::F64 _42017_l = _41726_x._method_as_f64();
				if (_42017_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_read_f64(),_42017_l)));
			}
		}
		else if ((*this)._method_is_i64()) {
			_case_begin_4393144864:;
			{
				jule::F64 _42717_l = _41726_x._method_as_f64();
				if (_42717_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_42717_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393143392:;
			{
				jule::F64 _43417_l = _41726_x._method_as_f64();
				if (_43417_l == 0LL) {
					return false;
				}
				(*this)._method_set_f64(static_cast<jule::F64>(jule::div((*this)._method_as_f64(),_43417_l)));
			}
		}
		else {
			_case_begin_4393143088:;
			{
				return false;
			}
		}
		_match_end_4393142912:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_mod(_1b6dd59aa_Const _44926_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_4393160864:;
			{
				jule::I64 _45217_l = _44926_x._method_as_i64();
				if (_45217_l == 0LL) {
					return false;
				}
				(*this)._method_set_i64(static_cast<jule::I64>(jule::mod((*this)._method_read_i64(),_45217_l)));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393160960:;
			{
				jule::U64 _45917_l = _44926_x._method_as_u64();
				if (_45917_l == 0LL) {
					return false;
				}
				(*this)._method_set_u64(static_cast<jule::U64>(jule::mod((*this)._method_read_u64(),_45917_l)));
			}
		}
		else {
			_case_begin_4393159200:;
			{
				return false;
			}
		}
		_match_end_4393159024:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_bitwise_and(_1b6dd59aa_Const _47334_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_4393172912:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() & _47334_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393173008:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() & _47334_x._method_as_u64()));
			}
		}
		else {
			_case_begin_4393171248:;
			{
				return false;
			}
		}
		_match_end_4393171072:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_bitwise_or(_1b6dd59aa_Const _48933_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_4393181280:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() | _48933_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393181376:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() | _48933_x._method_as_u64()));
			}
		}
		else {
			_case_begin_4393179616:;
			{
				return false;
			}
		}
		_match_end_4393179440:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_xor(_1b6dd59aa_Const _50526_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_4393189520:;
			{
				(*this)._method_set_i64(static_cast<jule::I64>((*this)._method_read_i64() ^ _50526_x._method_as_i64()));
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393189616:;
			{
				(*this)._method_set_u64(static_cast<jule::U64>((*this)._method_read_u64() ^ _50526_x._method_as_u64()));
			}
		}
		else {
			_case_begin_4393187856:;
			{
				return false;
			}
		}
		_match_end_4393187680:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_lshift(_1b6dd59aa_Const _52129_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_4393197888:;
			{
				jule::I64 _52417_l = (*this)._method_as_i64();
				if (_52417_l < 0LL) {
					jule::U64 _52621_r = _52129_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_52417_l << _52621_r));
				} else {
					_1b6dd59aa_lshift_unsig((*this),_52129_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393197984:;
			{
				_1b6dd59aa_lshift_unsig((*this),_52129_x);
			}
		}
		else {
			_case_begin_4393196224:;
			{
				return false;
			}
		}
		_match_end_4393196048:;
	}
	return true;
}



inline jule::Bool _1b6dd59aa_Const::_method_rshift(_1b6dd59aa_Const _54429_x) {
	{
		
		if ((*this)._method_is_i64()) {
			_case_begin_4393208368:;
			{
				jule::I64 _54717_l = (*this)._method_as_i64();
				if (_54717_l < 0LL) {
					jule::U64 _54921_r = _54429_x._method_as_u64();
					(*this)._method_set_i64(static_cast<jule::I64>(_54717_l >> _54921_r));
				} else {
					_1b6dd59aa_rshift_unsig((*this),_54429_x);
				}
			}
		}
		else if ((*this)._method_is_u64()) {
			_case_begin_4393208464:;
			{
				_1b6dd59aa_rshift_unsig((*this),_54429_x);
			}
		}
		else {
			_case_begin_4393206704:;
			{
				return false;
			}
		}
		_match_end_4393206528:;
	}
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6dd59aa_Const &_Src) {
	_Stream << "Const{";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a9265694_FileStream> _1a9265694_FileStream::_static_method_new(jule::Ptr<_1ce96429b_File> _1527_f) {
	return jule::new_struct<_1a9265694_FileStream>(new( std::nothrow ) _1a9265694_FileStream(_1527_f));
}



inline jule::Exceptional<jule::Int> _1a9265694_FileStream::_method_read(jule::Slice<jule::U8> _2431_buff) {
	jule::Int _2448_n = jule::Int();
	_2448_n = static_cast<jule::Int>(({
		auto except = (*((*this)._field_buff))._method_read(_2431_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Int>(except.error);
			return jule::Exceptional<jule::Int>(except.error);
		} jule::Int();});
	}));
	return jule::Exceptional<jule::Int>(jule::Any(),_2448_n);
}



inline jule::Exceptional<jule::Int> _1a9265694_FileStream::_method_write(jule::Slice<jule::U8> _2828_buff) {
	jule::Int _2845_n = jule::Int();
	_2845_n = static_cast<jule::Int>(({
		auto except = (*((*this)._field_buff))._method_write(_2828_buff);
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Int>(except.error);
			return jule::Exceptional<jule::Int>(except.error);
		} jule::Int();});
	}));
	return jule::Exceptional<jule::Int>(jule::Any(),_2845_n);
}



inline jule::Exceptional<jule::Slice<jule::U8>> _1a9265694_FileStream::_method_read_line(void) {
	
	jule::Slice<jule::U8> _4017_buff = jule::Slice<jule::U8>::alloc(0LL,1024LL);
	jule::Slice<jule::U8> _4117_part = jule::Slice<jule::U8>::alloc(1LL);
	for (;;) {
		{
			jule::Int _4317_n = ({
				auto except = (*((*this)._field_buff))._method_read(_4117_part);
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
					return jule::Exceptional<jule::Slice<jule::U8>>(except.error);
				} jule::Int();});
			});
			if (_4317_n == 0LL) {
				goto _iter_end_4394656272;
			}
			jule::U8 _4817_b = _4117_part[0LL];
			_4017_buff = jule::alloc_for_append(_4017_buff,1);_4017_buff.__push(_4817_b);
			if (_4817_b == 10LL) {
				goto _iter_end_4394656272;
			}
		}
	_iter_next_4394656272:;
	}
	_iter_end_4394656272:;
	return jule::Exceptional<jule::Slice<jule::U8>>(jule::Any(),_4017_buff);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a9265694_FileStream &_Src) {
	_Stream << "FileStream{";
	_Stream << "buff:" << _Src._field_buff;
	_Stream << "}";
	return _Stream;
}



inline jule::Exceptional<jule::Int> _1a92719ad_ByteStream::_method_read(jule::Slice<jule::U8> _1831_buff) {
	jule::Int _1848_n = jule::Int();
	if ((!((*this)._method_data()))) {
		_1848_n = 0LL;
		return jule::Exceptional<jule::Int>(jule::Any(),_1848_n);
	}
	jule::I64 _2313_offset = (*this)._field_buff.len() - (*this)._field_pos;
	if (_2313_offset < _1831_buff.len()) {
		_1848_n=static_cast<jule::I64>(_1831_buff.len() - _2313_offset);
		copy(_1831_buff,(*this)._field_buff.slice((*this)._field_pos,(*this)._field_pos + _1848_n));
	} else {
		_1848_n=static_cast<jule::I64>(_1831_buff.len());
		copy(_1831_buff,(*this)._field_buff.slice((*this)._field_pos,(*this)._field_pos + _1848_n));
	}
	(*this)._field_pos+=_1848_n;
	return jule::Exceptional<jule::Int>(jule::Any(), _1848_n);
}



inline jule::Exceptional<jule::Int> _1a92719ad_ByteStream::_method_write(jule::Slice<jule::U8> _3528_buff) {
	jule::Int _3545_n = jule::Int();
	_3545_n=static_cast<jule::I64>(_3528_buff.len());
	(*this)._field_buff=jule::append((*this)._field_buff,_3528_buff);
	return jule::Exceptional<jule::Int>(jule::Any(), _3545_n);
}



inline jule::Ptr<_1a92719ad_ByteStream> _1a92719ad_ByteStream::_static_method_new(void) {
	return jule::new_ptr<_1a92719ad_ByteStream>();
}



inline jule::Bool _1a92719ad_ByteStream::_method_data(void) {
	return (*this)._field_pos < (*this)._field_buff.len();
}



inline void _1a92719ad_ByteStream::_method_fit(void) {
	if ((!((*this)._method_data()))) {
		(*this)._field_pos=0LL;
		(*this)._field_buff=nullptr;
		return;
	}
	jule::I64 _6213_n = (*this)._field_buff.len() - (*this)._field_pos;
	jule::Slice<jule::U8> _6317_buff = jule::Slice<jule::U8>::alloc(_6213_n);
	copy(_6317_buff,(*this)._field_buff.slice((*this)._field_pos));
	(*this)._field_pos=0LL;
	(*this)._field_buff=_6317_buff;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a92719ad_ByteStream &_Src) {
	_Stream << "ByteStream{";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "buff:" << _Src._field_buff;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a92b4627_Scanner> _1a92b4627_Scanner::_static_method_new(jule::Trait<_1a9266420_Reader> _1627_r) {
	return jule::new_struct<_1a92b4627_Scanner>(new( std::nothrow ) _1a92b4627_Scanner(_1627_r,jule::Slice<jule::U8>()));
}



inline jule::Ptr<_1a92b4627_Scanner> _1a92b4627_Scanner::_static_method_newf(jule::Ptr<_1ce96429b_File> _2428_f) {
	return jule::new_struct<_1a92b4627_Scanner>(new( std::nothrow ) _1a92b4627_Scanner(_1a9265694_FileStream::_static_method_new(_2428_f),jule::Slice<jule::U8>()));
}



inline void _1a92b4627_Scanner::_method_reset(void) {
	(*this)._field_b=nullptr;
}



inline jule::Slice<jule::U8> _1a92b4627_Scanner::_method_bytes(void) {
	return (*this)._field_b;
}



inline jule::Str _1a92b4627_Scanner::_method_text(void) {
	return static_cast<jule::Str>((*this)._field_b);
}



inline jule::Exceptional<jule::Bool> _1a92b4627_Scanner::_method_scan(void) {
	
	(*this)._method_reset();
	jule::Slice<jule::U8> _5117_buff = jule::Slice<jule::U8>::alloc(0LL,1024LL);
	jule::Slice<jule::U8> _5217_part = jule::Slice<jule::U8>::alloc(1LL);
	for (;;) {
		{
			jule::Int _5417_n = ({
				auto except = (*this)._field_r.get()._method_read(_5217_part);
				(except.ok()) ? (except.result) : ({{
					return jule::Exceptional<jule::Bool>(jule::Any(),false);
					return jule::Exceptional<jule::Bool>(jule::Any(),false);
				} jule::Int();});
			});
			if (_5417_n == 0LL) {
				goto _iter_end_4394709408;
			}
			jule::U8 _6117_b = _5217_part[0LL];
			if (_6117_b == 10LL) {
				goto _iter_end_4394709408;
			}
			_5117_buff = jule::alloc_for_append(_5117_buff,1);_5117_buff.__push(_6117_b);
		}
	_iter_next_4394709408:;
	}
	_iter_end_4394709408:;
	(*this)._field_b=_5117_buff;
	return jule::Exceptional<jule::Bool>(jule::Any(),_5217_part[0LL] != 0LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a92b4627_Scanner &_Src) {
	_Stream << "Scanner{";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "b:" << _Src._field_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7905331_FieldIns &_Src) {
	_Stream << "FieldIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1b7905331_StructIns::_method_to_str(void) {
	jule::Str _22417_kind = jule::Str();
	_22417_kind+=(*((*this)._field_decl))._field_ident;
	if ((*this)._field_generics.len() > 0LL) {
		_22417_kind+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_4397186368:;
			if (it != expr.end()) {
				jule::Ptr<_1a6a19a50_TypeKind> &_1b7905331_g = *it;
				{
					_22417_kind+=(*(_1b7905331_g))._method_to_str();
					_22417_kind+=jule::Str(",", 1);
				}
				_iter_next_4397186368:;
				++it;
				goto _iter_begin_4397186368;
			}
			_iter_end_4397186368:;
		}
		_22417_kind=_22417_kind.slice(0LL,_22417_kind.len() - 1LL);
		_22417_kind+=jule::Str("]", 1);
	}
	return _22417_kind;
}



inline jule::Bool _1b7905331_StructIns::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _23922_other) {
	jule::Ptr<_1b7905331_StructIns> _24013_s = (*(_23922_other))._method_strct();
	if (_24013_s == nullptr) {
		return false;
	}
	if ((*(this->self))._field_decl != (*(_24013_s))._field_decl) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != (*(_24013_s))._field_generics.len()) {
		return false;
	}
	jule::Int _25317_i = 0LL;
	for (; _25317_i < (*(this->self))._field_generics.len(); (_25317_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_25317_i]))._method_equals((*(_24013_s))._field_generics[_25317_i])))) {
				return false;
			}
		}
	_iter_next_4397198528:;
	}
	_iter_end_4397198528:;
	return true;
}



inline jule::Bool _1b7905331_StructIns::_method_same(jule::Ptr<_1b7905331_StructIns> _26723_s) {
	if (((*this)._field_decl != (*(_26723_s))._field_decl) || ((*(_26723_s))._field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_4397209408:;
		if (it != expr.end()) {
			jule::Int _1b7905331_i = it - expr.begin();
			jule::Ptr<_1a6a19a50_TypeKind> &_1b7905331_g = *it;
			{
				if ((!((*(_1b7905331_g))._method_equals((*(_26723_s))._field_generics[_1b7905331_i])))) {
					return false;
				}
			}
			_iter_next_4397209408:;
			++it;
			_1b7905331_i++;
			goto _iter_begin_4397209408;
		}
		_iter_end_4397209408:;
	}
	return true;
}



inline jule::Ptr<_1a691a500_Fn> _1b7905331_StructIns::_method_find_method(jule::Str _28234_ident,jule::Bool _28246_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4397216160:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1b7905331_f = *it;
			{
				if (((*(_1b7905331_f))._field_statically == _28246_statically) && ((*(_1b7905331_f))._field_ident == _28234_ident)) {
					return _1b7905331_f;
				}
			}
			_iter_next_4397216160:;
			++it;
			goto _iter_begin_4397216160;
		}
		_iter_end_4397216160:;
	}
	return nullptr;
}



inline jule::Ptr<_1b7905331_FieldIns> _1b7905331_StructIns::_method_find_field(jule::Str _29333_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_4397221264:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_FieldIns> _1b7905331_f = *it;
			{
				if ((*((*(_1b7905331_f))._field_decl))._field_ident == _29333_ident) {
					return _1b7905331_f;
				}
			}
			_iter_next_4397221264:;
			++it;
			goto _iter_begin_4397221264;
		}
		_iter_end_4397221264:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7905331_StructIns &_Src) {
	_Stream << "StructIns{";
	_Stream << "checked:" << _Src._field_checked << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "references:" << _Src._field_references;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_OperandExprModel &_Src) {
	_Stream << "OperandExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_StructArgExprModel &_Src) {
	_Stream << "StructArgExprModel{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_AllocStructLitExprModel &_Src) {
	_Stream << "AllocStructLitExprModel{";
	_Stream << "lit:" << _Src._field_lit;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_SliceExprModel &_Src) {
	_Stream << "SliceExprModel{";
	_Stream << "elem_kind:" << _Src._field_elem_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_AnonFnExprModel &_Src) {
	_Stream << "AnonFnExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "global:" << _Src._field_global;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_KeyValPairExprModel &_Src) {
	_Stream << "KeyValPairExprModel{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_MapExprModel &_Src) {
	_Stream << "MapExprModel{";
	_Stream << "key_kind:" << _Src._field_key_kind << ", ";
	_Stream << "val_kind:" << _Src._field_val_kind << ", ";
	_Stream << "entries:" << _Src._field_entries;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_StructSubIdentExprModel &_Src) {
	_Stream << "StructSubIdentExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "method:" << _Src._field_method << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_StructStaticIdentExprModel &_Src) {
	_Stream << "StructStaticIdentExprModel{";
	_Stream << "structure:" << _Src._field_structure << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "method:" << _Src._field_method;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_ArrayExprModel &_Src) {
	_Stream << "ArrayExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_CommonIdentExprModel &_Src) {
	_Stream << "CommonIdentExprModel{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_CommonSubIdentExprModel &_Src) {
	_Stream << "CommonSubIdentExprModel{";
	_Stream << "expr_kind:" << _Src._field_expr_kind << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_TupleExprModel &_Src) {
	_Stream << "TupleExprModel{";
	_Stream << "datas:" << _Src._field_datas;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinOutCallExprModel &_Src) {
	_Stream << "BuiltinOutCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinOutlnCallExprModel &_Src) {
	_Stream << "BuiltinOutlnCallExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "debug:" << _Src._field_debug;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinCloneCallExprModel &_Src) {
	_Stream << "BuiltinCloneCallExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinNewCallExprModel &_Src) {
	_Stream << "BuiltinNewCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "init:" << _Src._field_init;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinMakeCallExprModel &_Src) {
	_Stream << "BuiltinMakeCallExprModel{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "len:" << _Src._field_len << ", ";
	_Stream << "cap:" << _Src._field_cap;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinAppendCallExprModel &_Src) {
	_Stream << "BuiltinAppendCallExprModel{";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "elements:" << _Src._field_elements;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinErrorCallExprModel &_Src) {
	_Stream << "BuiltinErrorCallExprModel{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "err:" << _Src._field_err;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_SizeofExprModel &_Src) {
	_Stream << "SizeofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_AlignofExprModel &_Src) {
	_Stream << "AlignofExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_RuneExprModel &_Src) {
	_Stream << "RuneExprModel{";
	_Stream << "code:" << _Src._field_code;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_IntegratedToStrExprModel &_Src) {
	_Stream << "IntegratedToStrExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_TernaryExprModel &_Src) {
	_Stream << "TernaryExprModel{";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BackendEmitExprModel &_Src) {
	_Stream << "BackendEmitExprModel{";
	_Stream << "code:" << _Src._field_code << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_FreeExprModel &_Src) {
	_Stream << "FreeExprModel{";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a691a500_RetType &_Src) {
	_Stream << "RetType{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "idents:" << _Src._field_idents;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a691a500_ParamIns::_method_to_str(void) {
	jule::Str _18117_s = jule::Str();
	if ((*((*this)._field_decl))._field_mutable) {
		_18117_s+=jule::Str("mut ", 4);
	}
	if ((*((*this)._field_decl))._field_reference) {
		_18117_s+=jule::Str("&_:", 3);
	}
	if ((*((*this)._field_decl))._method_is_self()) {
		if ((*((*this)._field_decl))._method_is_ref()) {
			_18117_s+=jule::Str("&", 1);
		}
		_18117_s+=jule::Str("self", 4);
		return _18117_s;
	}
	if ((*((*this)._field_decl))._field_variadic) {
		_18117_s+=jule::Str("...", 3);
	}
	if ((*this)._field_kind != nullptr) {
		_18117_s+=(*((*this)._field_kind))._method_to_str();
	}
	return _18117_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a691a500_ParamIns &_Src) {
	_Stream << "ParamIns{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a691a500_FnIns::_method_to_str(void) {
	
	return (*this)._method_get_kind_str(false);
}



inline jule::Bool _1a691a500_FnIns::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _23622_other) {
	jule::Ptr<_1a691a500_FnIns> _23713_f = (*(_23622_other))._method_fnc();
	if (_23713_f == nullptr) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_statically != (*((*(_23713_f))._field_decl))._field_statically) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_exceptional != (*((*(_23713_f))._field_decl))._field_exceptional) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._field_unsafety != (*((*(_23713_f))._field_decl))._field_unsafety) {
		return false;
	}
	if ((*(this->self))._field_generics.len() != (*(_23713_f))._field_generics.len()) {
		return false;
	}
	if ((*((*(this->self))._field_decl))._method_is_void() != (*((*(_23713_f))._field_decl))._method_is_void()) {
		return false;
	}
	jule::Int _26217_i = 0LL;
	for (; _26217_i < (*(this->self))._field_generics.len(); (_26217_i)++) {
		{
			if ((!((*((*(this->self))._field_generics[_26217_i]))._method_equals((*(_23713_f))._field_generics[_26217_i])))) {
				return false;
			}
		}
	_iter_next_4397327136:;
	}
	_iter_end_4397327136:;
	jule::Fn<jule::Bool(jule::Ptr<_1a691a500_ParamIns>,jule::Ptr<_1a691a500_ParamIns>)> _26913_check_params = jule::Fn<jule::Bool(jule::Ptr<_1a691a500_ParamIns>,jule::Ptr<_1a691a500_ParamIns>)>([=](jule::Ptr<_1a691a500_ParamIns> _26931_p1,jule::Ptr<_1a691a500_ParamIns> _26946_p2) mutable -> jule::Bool {
		if ((*((*(_26931_p1))._field_decl))._field_mutable != (*((*(_26946_p2))._field_decl))._field_mutable) {
			return false;
		}
		if ((*((*(_26931_p1))._field_decl))._method_is_self()) {
			if ((!((*((*(_26946_p2))._field_decl))._method_is_self()))) {
				return false;
			}
			if ((*((*(_26931_p1))._field_decl))._method_is_ref() != (*((*(_26946_p2))._field_decl))._method_is_ref()) {
				return false;
			}
			return true;
		}
		if ((*((*(_26931_p1))._field_decl))._field_reference != (*((*(_26946_p2))._field_decl))._field_reference) {
			return false;
		}
		if ((*((*(_26931_p1))._field_decl))._field_variadic != (*((*(_26946_p2))._field_decl))._field_variadic) {
			return false;
		}
		return (*((*(_26931_p1))._field_kind))._method_equals((*(_26946_p2))._field_kind);
	});
	_26217_i=0LL;
	for (; _26217_i < (*(this->self))._field_params.len(); (_26217_i)++) {
		{
			if ((!(_26913_check_params((*(this->self))._field_params[_26217_i],(*(_23713_f))._field_params[_26217_i])))) {
				return false;
			}
		}
	_iter_next_4397351920:;
	}
	_iter_end_4397351920:;
	if ((!((*((*(this->self))._field_decl))._method_is_void()))) {
		if ((!((*((*(this->self))._field_result))._method_equals((*(_23713_f))._field_result)))) {
			return false;
		}
	}
	return true;
}



inline jule::Bool _1a691a500_FnIns::_method_is_builtin(void) {
	return (*this)._field_caller != 0LL;
}



inline jule::Bool _1a691a500_FnIns::_method_is_anon(void) {
	return (*this)._field_anon || (((*this)._field_decl != nullptr) && (*((*this)._field_decl))._method_is_anon());
}



inline jule::Bool _1a691a500_FnIns::_method_same(jule::Ptr<_1a691a500_FnIns> _32623_f) {
	if (((*this)._field_decl != (*(_32623_f))._field_decl) || ((*(_32623_f))._field_generics.len() != (*this)._field_generics.len())) {
		return false;
	}
	{
		auto &expr = (*this)._field_generics;
		auto it = expr.begin();
		_iter_begin_4397369056:;
		if (it != expr.end()) {
			jule::Int _1a691a500_i = it - expr.begin();
			jule::Ptr<_1a6a19a50_TypeKind> &_1a691a500_g = *it;
			{
				if ((!((*(_1a691a500_g))._method_equals((*(_32623_f))._field_generics[_1a691a500_i])))) {
					return false;
				}
			}
			_iter_next_4397369056:;
			++it;
			_1a691a500_i++;
			goto _iter_begin_4397369056;
		}
		_iter_end_4397369056:;
	}
	return true;
}



inline jule::Str _1a691a500_FnIns::_method_get_kind_str(jule::Bool _34231_ident) {
	jule::Str _34317_s = jule::Str();
	if ((*((*this)._field_decl))._field_statically) {
		_34317_s+=jule::Str("static ", 7);
	}
	if ((*((*this)._field_decl))._field_unsafety) {
		_34317_s+=jule::Str("unsafe ", 7);
	}
	_34317_s+=jule::Str("fn", 2);
	if (_34231_ident && ((*this)._field_decl != nullptr)) {
		_34317_s+=jule::Str(" ", 1) + (*((*this)._field_decl))._field_ident;
	}
	if ((*this)._field_generics.len() > 0LL) {
		_34317_s+=jule::Str("[", 1);
		{
			auto &expr = (*this)._field_generics;
			auto it = expr.begin();
			_iter_begin_4397381760:;
			if (it != expr.end()) {
				jule::Int _1a691a500_i = it - expr.begin();
				jule::Ptr<_1a6a19a50_TypeKind> &_1a691a500_t = *it;
				{
					_34317_s+=(*(_1a691a500_t))._method_to_str();
					if ((_1a691a500_i + 1LL) < (*this)._field_generics.len()) {
						_34317_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4397381760:;
				++it;
				_1a691a500_i++;
				goto _iter_begin_4397381760;
			}
			_iter_end_4397381760:;
		}
		_34317_s+=jule::Str("]", 1);
	} else if ((*((*this)._field_decl))._field_generics.len() > 0LL) {
		_34317_s+=jule::Str("[", 1);
		{
			auto &expr = (*((*this)._field_decl))._field_generics;
			auto it = expr.begin();
			_iter_begin_4397388320:;
			if (it != expr.end()) {
				jule::Int _1a691a500_i = it - expr.begin();
				jule::Ptr<_1b7509a90_GenericDecl> &_1a691a500_g = *it;
				{
					_34317_s+=(*(_1a691a500_g))._field_ident;
					if ((_1a691a500_i + 1LL) < (*((*this)._field_decl))._field_generics.len()) {
						_34317_s+=jule::Str(",", 1);
					}
				}
				_iter_next_4397388320:;
				++it;
				_1a691a500_i++;
				goto _iter_begin_4397388320;
			}
			_iter_end_4397388320:;
		}
		_34317_s+=jule::Str("]", 1);
	}
	_34317_s+=jule::Str("(", 1);
	jule::I64 _38013_n = (*this)._field_params.len();
	if (_38013_n > 0LL) {
		{
			auto &expr = (*this)._field_params;
			auto it = expr.begin();
			_iter_begin_4397395184:;
			if (it != expr.end()) {
				jule::Ptr<_1a691a500_ParamIns> &_1a691a500_p = *it;
				{
					_34317_s+=(*(_1a691a500_p))._method_to_str();
					_34317_s+=jule::Str(",", 1);
				}
				_iter_next_4397395184:;
				++it;
				goto _iter_begin_4397395184;
			}
			_iter_end_4397395184:;
		}
		_34317_s=_34317_s.slice(0LL,_34317_s.len() - 1LL);
	}
	_34317_s+=jule::Str(")", 1);
	if ((*((*this)._field_decl))._field_exceptional) {
		_34317_s+=jule::Str("!", 1);
	}
	if ((!((*((*this)._field_decl))._method_is_void()))) {
		_34317_s+=jule::Str(":", 1);
		_34317_s+=(*((*this)._field_result))._method_to_str();
	}
	return _34317_s;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a691a500_FnIns &_Src) {
	_Stream << "FnIns{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "anon:" << _Src._field_anon << ", ";
	_Stream << "refers:" << _Src._field_refers << ", ";
	_Stream << "caller:" << _Src._field_caller << ", ";
	_Stream << "reloaded:" << _Src._field_reloaded;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b6a47496_ReferenceStack> _1b6a47496_ReferenceStack::_static_method_new(void) {
	return jule::new_struct<_1b6a47496_ReferenceStack>(new( std::nothrow ) _1b6a47496_ReferenceStack());
}



inline jule::Int _1b6a47496_ReferenceStack::_method_len(void) {
	return static_cast<jule::I64>((*this)._field_buffer.len());
}



inline jule::Any _1b6a47496_ReferenceStack::_method_at(jule::Int _5925_i) {
	return (*this)._field_buffer[_5925_i];
}



inline void _1b6a47496_ReferenceStack::_method_push(jule::Any _6431_ref) {
	(*this)._field_buffer = jule::alloc_for_append((*this)._field_buffer,1);(*this)._field_buffer.__push(_6431_ref);
}



inline jule::Bool _1b6a47496_ReferenceStack::_method_exist_0(jule::Ptr<_1a7003e4b_Var> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_4401582176:;
		if (it != expr.end()) {
			jule::Any &_1b6a47496_ref = *it;
			{
				if (_1b6a47496_ref == _6927_t) {
					return true;
				}
			}
			_iter_next_4401582176:;
			++it;
			goto _iter_begin_4401582176;
		}
		_iter_end_4401582176:;
	}
	return false;
}

inline jule::Bool _1b6a47496_ReferenceStack::_method_exist_1(jule::Ptr<_1a691a500_FnIns> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_4401592016:;
		if (it != expr.end()) {
			jule::Any &_1b6a47496_ref = *it;
			{
				if (_1b6a47496_ref == _6927_t) {
					return true;
				}
			}
			_iter_next_4401592016:;
			++it;
			goto _iter_begin_4401592016;
		}
		_iter_end_4401592016:;
	}
	return false;
}

inline jule::Bool _1b6a47496_ReferenceStack::_method_exist_2(jule::Ptr<_1b7905331_StructIns> _6927_t) {
	{
		auto &expr = (*this)._field_buffer;
		auto it = expr.begin();
		_iter_begin_4401631712:;
		if (it != expr.end()) {
			jule::Any &_1b6a47496_ref = *it;
			{
				if (_1b6a47496_ref == _6927_t) {
					return true;
				}
			}
			_iter_next_4401631712:;
			++it;
			goto _iter_begin_4401631712;
		}
		_iter_end_4401631712:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6a47496_ReferenceStack &_Src) {
	_Stream << "ReferenceStack{";
	_Stream << "buffer:" << _Src._field_buffer;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b6a47496_SymbolBuilder> _1b6a47496_SymbolBuilder::_method_get_root(void) {
	jule::Ptr<_1b6a47496_SymbolBuilder> _30217_root = this->self;
	while ((*(_30217_root))._field_owner != nullptr) {
		{
			_30217_root=(*(_30217_root))._field_owner;
		}
	_iter_next_4397413376:;
	}
	_iter_end_4397413376:;
	return _30217_root;
}



inline void _1b6a47496_SymbolBuilder::_method_push_err(_1b7553d92_Token& _30928_token,jule::Str _30942_fmt,jule::Slice<jule::Any> _30955_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1a7002752_compiler_err(_30928_token,true,_30942_fmt,_30955_args));
}



inline void _1b6a47496_SymbolBuilder::_method_push_err_text(_1b7553d92_Token& _31333_token,jule::Str _31347_fmt,jule::Slice<jule::Any> _31360_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1a7002752_compiler_err(_31333_token,false,_31347_fmt,_31360_args));
}



inline void _1b6a47496_SymbolBuilder::_method_push_suggestion(jule::Str _31834_fmt,jule::Slice<jule::Any> _31847_args) {
	{
		_1a7002752_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_31834_fmt,_31847_args);
	}
}



inline jule::Bool _1b6a47496_SymbolBuilder::_method_check_cpp_use_decl_path(jule::Ptr<_1b7509a90_UseDecl>& _32243_decl) {
	jule::Bool _32261_ok = jule::Bool();
	if (_1b697da81_is_std_header_path((*(_32243_decl))._field_link_path)) {
		_32261_ok = true;
		return _32261_ok;
	}
	jule::Str _32713_ext = _1ce9be05e_ext((*(_32243_decl))._field_link_path);
	if ((!(_1b697da81_is_valid_header_ext(_32713_ext))) && (!(_1b697da81_is_valid_cpp_ext(_32713_ext)))) {
		(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("invalid C++ extension: @", 24),jule::Slice<jule::Any>({jule::Any(_32713_ext)}));
		_32261_ok = false;
		return _32261_ok;
	}
	jule::Ptr<_1ce976e6d_Status> _33413_info = ({
		auto except = _1ce976e6d_Status::_static_method_of((*(_32243_decl))._field_link_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_32243_decl))._field_link_path)}));
			_32261_ok = false;
			return _32261_ok;
			_32261_ok = false;
			return _32261_ok;
		} jule::Ptr<_1ce976e6d_Status>();});
	});
	if ((*(_33413_info))._method_is_dir()) {
		(*this)._method_push_err((*(_32243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_32243_decl))._field_link_path)}));
		_32261_ok = false;
		return _32261_ok;
	}
	_32261_ok = true;
	return _32261_ok;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1b6a47496_SymbolBuilder::_method_build_cpp_header_import(jule::Ptr<_1b7509a90_UseDecl>& _34647_decl) {
	jule::Str _34717_path = (*(_34647_decl))._field_link_path;
	if ((!(_1b697da81_is_std_header_path((*(_34647_decl))._field_link_path)))) {
		jule::Bool _35021_ok = (*this)._method_check_cpp_use_decl_path(_34647_decl);
		if ((!(_35021_ok))) {
			return nullptr;
		}
		std::tie(_34717_path,_35021_ok) = _1ce9be05e_abs((*(_34647_decl))._field_link_path);
		if ((!(_35021_ok))) {
			(*this)._method_push_err((*(_34647_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_34647_decl))._field_link_path)}));
		}
	}
	return jule::new_struct<_1a6e9a574_ImportInfo>(new( std::nothrow ) _1a6e9a574_ImportInfo((*(_34647_decl))._field_token,_34717_path,(*(_34647_decl))._field_link_path,jule::Str(),jule::Str(),jule::Bool(),true,false,jule::Bool(),jule::Slice<_1b7553d92_Token>(),nullptr,jule::Int()));
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1b6a47496_SymbolBuilder::_method_build_std_import(jule::Ptr<_1b7509a90_UseDecl>& _37340_decl) {
	jule::Str _37417_path = (*(_37340_decl))._field_link_path.slice(5LL);
	_37417_path=_1cea16edb_replace(_37417_path,jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_37417_path=_1ce9be05e_join(jule::Slice<jule::Str>({_1b69ce708_PATH_STDLIB,_37417_path}));
	jule::Bool _37720_ok;
	std::tie(_37417_path,_37720_ok) = _1ce9be05e_abs(_37417_path);
	if ((!(_37720_ok))) {
		(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_1ce976e6d_Status> _38413_info = ({
		auto except = _1ce976e6d_Status::_static_method_of(_37417_path);
		(except.ok()) ? (except.result) : ({{
			(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_1ce976e6d_Status>();});
	});
	if ((!((*(_38413_info))._method_is_dir()))) {
		(*this)._method_push_err((*(_37340_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_37340_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Int _39413_i = _1cea16edb_find_last((*(_37340_decl))._field_link_path,jule::Str("::", 2)) + 1LL;
	jule::Str _39513_ident = (*(_37340_decl))._field_link_path.slice(_39413_i);
	return jule::new_struct<_1a6e9a574_ImportInfo>(new( std::nothrow ) _1a6e9a574_ImportInfo((*(_37340_decl))._field_token,_37417_path,(*(_37340_decl))._field_link_path,_39513_ident,(*(_37340_decl))._field_alias,jule::Bool(),false,true,(*(_37340_decl))._field_full,jule::Slice<_1b7553d92_Token>(),jule::new_struct<_1a6e9a574_Package>(new( std::nothrow ) _1a6e9a574_Package(nullptr)),jule::Int()));
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1b6a47496_SymbolBuilder::_method_build_ident_import(jule::Ptr<_1b7509a90_UseDecl>& _41243_decl) {
	jule::Str _41313_mod_path = (*(this->self))._field_importer.get()._method_get_mod_path();
	if (_41313_mod_path.len() == 0LL) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("no module file found in current directory or any parent directory", 65),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"julec mod init\" command to initialize module", 49),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Str _42017_path = (*(_41243_decl))._field_link_path;
	_42017_path=_1cea16edb_replace(_42017_path,jule::Str("::", 2),static_cast<jule::Str>(47LL),-1LL);
	_42017_path=_1ce9be05e_join(jule::Slice<jule::Str>({_41313_mod_path,_42017_path}));
	jule::Bool _42420_ok;
	std::tie(_42017_path,_42420_ok) = _1ce9be05e_abs(_42017_path);
	if ((!(_42420_ok))) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Ptr<_1ce976e6d_Status> _43113_info = ({
		auto except = _1ce976e6d_Status::_static_method_of(_42017_path);
		(except.ok()) ? (except.result) : ({{
			(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
			return nullptr;
			return nullptr;
		} jule::Ptr<_1ce976e6d_Status>();});
	});
	if ((!((*(_43113_info))._method_is_dir()))) {
		(*(this->self))._method_push_err((*(_41243_decl))._field_token,jule::Str("used directory path not found/access: @", 39),jule::Slice<jule::Any>({jule::Any((*(_41243_decl))._field_link_path)}));
		return nullptr;
	}
	jule::Int _44113_i = _1cea16edb_find_last((*(_41243_decl))._field_link_path,jule::Str("::", 2)) + 1LL;
	jule::Str _44213_ident = (*(_41243_decl))._field_link_path.slice(_44113_i);
	return jule::new_struct<_1a6e9a574_ImportInfo>(new( std::nothrow ) _1a6e9a574_ImportInfo((*(_41243_decl))._field_token,_42017_path,(*(_41243_decl))._field_link_path,_44213_ident,(*(_41243_decl))._field_alias,jule::Bool(),false,false,(*(_41243_decl))._field_full,jule::Slice<_1b7553d92_Token>(),jule::new_struct<_1a6e9a574_Package>(new( std::nothrow ) _1a6e9a574_Package(nullptr)),jule::Int()));
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1b6a47496_SymbolBuilder::_method_build_import(jule::Ptr<_1b7509a90_UseDecl>& _45937_decl) {
	{
		
		if ((*(_45937_decl))._field_cpp_linked) {
			_case_begin_4397521616:;
			{
				return (*(this->self))._method_build_cpp_header_import(_45937_decl);
			}
		}
		else if ((*(_45937_decl))._field_std) {
			_case_begin_4397522112:;
			{
				return (*(this->self))._method_build_std_import(_45937_decl);
			}
		}
		else {
			_case_begin_4397519504:;
			{
				return (*(this->self))._method_build_ident_import(_45937_decl);
			}
		}
		_match_end_4397519328:;
	}
}



inline jule::Bool _1b6a47496_SymbolBuilder::_method_check_duplicate_use_decl(jule::Ptr<_1a6e9a574_ImportInfo>& _46744_pkg) {
	jule::Bool _46764_ok = jule::Bool();
	jule::Ptr<_1a6e9a574_ImportInfo> _46913_lpkg = (*((*this)._field_table))._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>([=](jule::Ptr<_1a6e9a574_ImportInfo> _46949_spkg) mutable -> jule::Bool {
		return (*(_46744_pkg))._field_path == (*(_46949_spkg))._field_path;
	}));
	if (_46913_lpkg == nullptr) {
		_46764_ok = true;
		return _46764_ok;
	}
	(*this)._method_push_err((*(_46744_pkg))._field_token,jule::Str("use declaration duplication: @ is already used above", 52),jule::Slice<jule::Any>({jule::Any((*(_46744_pkg))._field_link_path)}));
	(*this)._method_push_suggestion(jule::Str("remove this use declaration, already used, it is safe", 53),jule::Slice<jule::Any>());
	_46764_ok = false;
	return _46764_ok;
}



inline void _1b6a47496_SymbolBuilder::_method_impl_import_selections(jule::Ptr<_1a6e9a574_ImportInfo>& _48146_imp,jule::Ptr<_1b7509a90_UseDecl>& _48169_decl) {
	{
		auto &expr = (*(_48169_decl))._field_selected;
		auto it = expr.begin();
		_iter_begin_4397542160:;
		if (it != expr.end()) {
			_1b7553d92_Token _1b6a47496_ident = *it;
			{
				if ((*(_48146_imp))._method_exist_ident(_1b6a47496_ident._field_kind)) {
					(*this)._method_push_err(_1b6a47496_ident,jule::Str("duplicated selection: @ is already selected", 43),jule::Slice<jule::Any>({jule::Any(_1b6a47496_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("remove this use selection, already selected, it is safe", 55),jule::Slice<jule::Any>());
					goto _iter_next_4397542160;
				}
				(*(_48146_imp))._field_selected = jule::alloc_for_append((*(_48146_imp))._field_selected,1);(*(_48146_imp))._field_selected.__push(_1b6a47496_ident);
			}
			_iter_next_4397542160:;
			++it;
			goto _iter_begin_4397542160;
		}
		_iter_end_4397542160:;
	}
}



inline jule::Str _1b6a47496_SymbolBuilder::_method_get_as_link_path(jule::Str _49340_path) {
	if (_1cea16edb_has_prefix(_49340_path,_1b69ce708_PATH_STDLIB)) {
		_49340_path=_49340_path.slice(_1b69ce708_PATH_STDLIB.len());
		return jule::Str("std", 3) + _1cea16edb_replace(_49340_path,static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
	}
	jule::Str _49914_root;
	std::tie(_49914_root,std::ignore) = _1ce9be05e_abs((*(this->self))._field_importer.get()._method_get_mod_path());
	_49340_path=_49340_path.slice(_49914_root.len());
	if (_49340_path[0LL] == 47LL) {
		_49340_path=_49340_path.slice(1LL);
	}
	return _1cea16edb_replace(_49340_path,static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
}



inline void _1b6a47496_SymbolBuilder::_method_push_cycle_error(jule::Ptr<_1b6a47496_SymbolBuilder>& _50737_sb,jule::Str _50757_path,jule::Str& _50773_message) {
	
	jule::Str _51013_refers_to = _1b6986b22_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*((*((*(_50737_sb))._field_table))._field_file))._method_dir())),jule::Any((*(this->self))._method_get_as_link_path(_50757_path))}));
	_50773_message=((_1cea16edb_repeat(jule::Str(" ", 1),4LL) + _51013_refers_to) + jule::Str("\n", 1)) + _50773_message;
}



inline void _1b6a47496_SymbolBuilder::_method_push_cross_cycle_error(jule::Ptr<_1b6a47496_SymbolBuilder>& _51743_target,jule::Ptr<_1a6e9a574_ImportInfo>& _51768_imp,_1b7553d92_Token& _51787_error_token) {
	jule::Str _51817_message = jule::Str();
	(*(this->self))._method_push_cycle_error(this->self,(*(_51768_imp))._field_path,_51817_message);
	jule::Ptr<_1b6a47496_SymbolBuilder> _52217_owner = (*(this->self))._field_owner;
	jule::Ptr<_1b6a47496_SymbolBuilder> _52317_old = this->self;
	while ((*(_52217_owner))._field_owner != nullptr) {
		{
			(*(this->self))._method_push_cycle_error((*(_52317_old))._field_owner,(*((*((*(_52317_old))._field_table))._field_file))._method_dir(),_51817_message);
			if ((*(_52217_owner))._field_owner == _51743_target) {
				(*(this->self))._method_push_cycle_error(_51743_target,(*((*((*(_52217_owner))._field_table))._field_file))._method_dir(),_51817_message);
				goto _iter_end_4397579104;
			}
			_52317_old=_52217_owner;
			_52217_owner=(*(_52217_owner))._field_owner;
		}
	_iter_next_4397579104:;
	}
	_iter_end_4397579104:;
	(*(this->self))._method_push_err(_51787_error_token,jule::Str("illegal cross cycle in use declarations;\n@", 42),jule::Slice<jule::Any>({jule::Any(_51817_message)}));
}



inline jule::Bool _1b6a47496_SymbolBuilder::_method_check_import_cycles(jule::Ptr<_1a6e9a574_ImportInfo> _54039_imp,jule::Ptr<_1b7509a90_UseDecl>& _54058_decl) {
	if ((*(_54039_imp))._field_path == (*((*((*(this->self))._field_table))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*(_54058_decl))._field_token,jule::Str("illegal cycle in use declaration, package @ refers to itself", 60),jule::Slice<jule::Any>({jule::Any((*(this->self))._method_get_as_link_path((*(_54039_imp))._field_path))}));
		return false;
	}
	if ((*(this->self))._field_owner == nullptr) {
		return true;
	}
	if ((*((*((*((*(this->self))._field_owner))._field_table))._field_file))._method_dir() == (*(_54039_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error((*(this->self))._field_owner,_54039_imp,(*(_54058_decl))._field_token);
		return false;
	}
	jule::Ptr<_1b6a47496_SymbolBuilder> _55517_owner = (*(this->self))._field_owner;
	_julec_label_iter:;
	if ((*((*((*(_55517_owner))._field_table))._field_file))._method_dir() == (*(_54039_imp))._field_path) {
		(*(this->self))._method_push_cross_cycle_error(_55517_owner,_54039_imp,(*(_54058_decl))._field_token);
		return false;
	}
	if ((*(_55517_owner))._field_owner != nullptr) {
		_55517_owner=(*(_55517_owner))._field_owner;
		goto _julec_label_iter;
	}
	return true;
}



inline void _1b6a47496_SymbolBuilder::_method_check_package_accessibility(jule::Ptr<_1b7509a90_UseDecl>& _57647_decl,jule::Str& _57664_mod,jule::Str& _57675_path) {
	if (((*this)._field_importer.get()._method_get_mod_path() != _57664_mod) && _1cea16edb_contains(_57675_path,jule::Str("internal", 8))) {
		(*this)._method_push_err((*(_57647_decl))._field_token,jule::Str("you cannot access to internal packages", 38),jule::Slice<jule::Any>());
	}
}



inline jule::Bool _1b6a47496_SymbolBuilder::_method_import_package(jule::Ptr<_1a6e9a574_ImportInfo>& _58239_imp,jule::Ptr<_1b7509a90_UseDecl>& _58262_decl) {
	jule::Bool _58280_ok = jule::Bool();
	if ((*(_58239_imp))._field_cpp_linked) {
		_58280_ok = true;
		return _58280_ok;
	}
	jule::Ptr<_1a6e9a574_ImportInfo> _58717_port = (*(this->self))._field_importer.get()._method_get_import((*(_58239_imp))._field_path);
	if (_58717_port != nullptr) {
		(*(_58239_imp))._field_package=(*(_58717_port))._field_package;
		(*(_58239_imp))._field_duplicate=true;
		jule::Str _59217_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		(*(this->self))._field_importer.get()._method_set_mod_path((*(this->self))._field_importer.get()._method_mod_by_id((*(_58239_imp))._field_mod_id));
		(*(this->self))._method_check_package_accessibility(_58262_decl,_59217_old_mod,(*(_58717_port))._field_path);
		(*(this->self))._field_importer.get()._method_set_mod_path(_59217_old_mod);
	} else {
		if ((!((*(this->self))._method_check_import_cycles(_58239_imp,_58262_decl)))) {
			_58280_ok = false;
			return _58280_ok;
		}
		jule::Str _60117_old_mod = (*(this->self))._field_importer.get()._method_get_mod_path();
		__JULE_DEFER({
			(*(this->self))._field_importer.get()._method_set_mod_path(_60117_old_mod);
		});
		if ((*(_58239_imp))._field_std) {
			(*(this->self))._field_importer.get()._method_set_mod_path(_1b69ce708_PATH_STDLIB);
		}
		jule::Slice<jule::Ptr<_1b74bea77_Ast>> _60622_asts;
		jule::Slice<_1b6986b22_Log> _60628_errors;
		std::tie(_60622_asts,_60628_errors) = (*(this->self))._field_importer.get()._method_import_package((*(_58239_imp))._field_path,(!((*(_58239_imp))._field_std)));
		if (_60628_errors.len() > 0LL) {
			(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_60628_errors);
			_58280_ok = false;
			return _58280_ok;
		}
		(*(this->self))._method_check_package_accessibility(_58262_decl,_60117_old_mod,(*(_58239_imp))._field_path);
		{
			auto &expr = _60622_asts;
			auto it = expr.begin();
			_iter_begin_4397652352:;
			if (it != expr.end()) {
				jule::Ptr<_1b74bea77_Ast> _1b6a47496_ast = *it;
				{
					jule::Ptr<_1a8acbe95_SymbolTable> _61526_table;
					jule::Slice<_1b6986b22_Log> _61533_errors;
					std::tie(_61526_table,_61533_errors) = _1a6a15b7d_build_symbols(_1b6a47496_ast,(*(this->self))._field_importer,this->self);
					if (_61533_errors.len() > 0LL) {
						(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,_61533_errors);
						(*(this->self))._method_push_err_text((*(_58239_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_58239_imp))._field_link_path)}));
						_58280_ok = false;
						return _58280_ok;
					}
					(*((*(_58239_imp))._field_package))._field_files = jule::alloc_for_append((*((*(_58239_imp))._field_package))._field_files,1);(*((*(_58239_imp))._field_package))._field_files.__push(_61526_table);
				}
				_iter_next_4397652352:;
				++it;
				goto _iter_begin_4397652352;
			}
			_iter_end_4397652352:;
		}
	}
	(*(this->self))._method_impl_import_selections(_58239_imp,_58262_decl);
	_58280_ok = true;
	return _58280_ok;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1b6a47496_SymbolBuilder::_method_import_use_decl(jule::Ptr<_1b7509a90_UseDecl>& _63340_decl) {
	jule::Ptr<_1a6e9a574_ImportInfo> _63417_imp = (*(this->self))._method_build_import(_63340_decl);
	if (_63417_imp == nullptr) {
		return nullptr;
	}
	jule::Bool _64017_ok = (*(this->self))._method_check_duplicate_use_decl(_63417_imp);
	if ((!(_64017_ok))) {
		return nullptr;
	}
	_64017_ok=(*(this->self))._method_import_package(_63417_imp,_63340_decl);
	(*((*(this->self))._field_table))._field_imports = jule::alloc_for_append((*((*(this->self))._field_table))._field_imports,1);(*((*(this->self))._field_table))._field_imports.__push(_63417_imp);
	if (_64017_ok) {
		(*(this->self))._field_importer.get()._method_imported(_63417_imp);
		return _63417_imp;
	}
	return nullptr;
}



inline void _1b6a47496_SymbolBuilder::_method_import_use_decls(void) {
	{
		auto &expr = (*((*(this->self))._field_ast))._field_use_decls;
		auto it = expr.begin();
		_iter_begin_4397679376:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_UseDecl> _1b6a47496_decl = *it;
			{
				(*(this->self))._method_import_use_decl(_1b6a47496_decl);
				if ((*(this->self))._field_errors.len() > 0LL) {
					goto _iter_end_4397679376;
				}
			}
			_iter_next_4397679376:;
			++it;
			goto _iter_begin_4397679376;
		}
		_iter_end_4397679376:;
	}
}



inline void _1b6a47496_SymbolBuilder::_method_append_decl(_1b7509a90_Node& _66535_decl) {
	{
		auto &_match_expr{ _66535_decl._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_TypeAliasDecl>>()) {
			_case_begin_4397685664:;
			{
				jule::Ptr<_1a6a19a50_TypeAlias> _66821_ta = _1b6a47496_build_type_alias(_66535_decl._field_data.operator jule::Ptr<_1b7509a90_TypeAliasDecl>());
				(*((*this)._field_table))._field_type_aliases = jule::alloc_for_append((*((*this)._field_table))._field_type_aliases,1);(*((*this)._field_table))._field_type_aliases.__push(_66821_ta);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_StructDecl>>()) {
			_case_begin_4397684944:;
			{
				jule::Ptr<_1b7905331_Struct> _67221_srct = _1b6a47496_build_struct(_66535_decl._field_data.operator jule::Ptr<_1b7509a90_StructDecl>());
				(*((*this)._field_table))._field_structs = jule::alloc_for_append((*((*this)._field_table))._field_structs,1);(*((*this)._field_table))._field_structs.__push(_67221_srct);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnDecl>>()) {
			_case_begin_4397685040:;
			{
				jule::Ptr<_1a691a500_Fn> _67621_f = _1b6a47496_build_fn(_66535_decl._field_data.operator jule::Ptr<_1b7509a90_FnDecl>());
				(*((*this)._field_table))._field_funcs = jule::alloc_for_append((*((*this)._field_table))._field_funcs,1);(*((*this)._field_table))._field_funcs.__push(_67621_f);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TraitDecl>>()) {
			_case_begin_4397685136:;
			{
				jule::Ptr<_1b76b472d_Trait> _68021_t = _1b6a47496_build_trait(_66535_decl._field_data.operator jule::Ptr<_1b7509a90_TraitDecl>());
				(*((*this)._field_table))._field_traits = jule::alloc_for_append((*((*this)._field_table))._field_traits,1);(*((*this)._field_table))._field_traits.__push(_68021_t);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_VarDecl>>()) {
			_case_begin_4397685248:;
			{
				jule::Ptr<_1a7003e4b_Var> _68421_v = _1b6a47496_build_var(_66535_decl._field_data.operator jule::Ptr<_1b7509a90_VarDecl>());
				(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.__push(_68421_v);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_EnumDecl>>()) {
			_case_begin_4397686992:;
			{
				jule::Ptr<_1a6bb9150_Enum> _68821_e = _1b6a47496_build_enum(_66535_decl._field_data.operator jule::Ptr<_1b7509a90_EnumDecl>());
				(*((*this)._field_table))._field_enums = jule::alloc_for_append((*((*this)._field_table))._field_enums,1);(*((*this)._field_table))._field_enums.__push(_68821_e);
			}
		}
		else {
			_case_begin_4397684640:;
			{
				(*this)._method_push_err(_66535_decl._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4397684480:;
	}
}



inline void _1b6a47496_SymbolBuilder::_method_append_decls(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_decls;
		auto it = expr.begin();
		_iter_begin_4397709264:;
		if (it != expr.end()) {
			_1b7509a90_Node _1b6a47496_decl = *it;
			{
				(*this)._method_append_decl(_1b6a47496_decl);
			}
			_iter_next_4397709264:;
			++it;
			goto _iter_begin_4397709264;
		}
		_iter_end_4397709264:;
	}
}



inline void _1b6a47496_SymbolBuilder::_method_append_impls(void) {
	(*((*this)._field_table))._field_impls=jule::Slice<jule::Ptr<_1a6bbbe44_Impl>>::alloc(0LL,static_cast<jule::I64>((*((*this)._field_ast))._field_impls.len()));
	{
		auto &expr = (*((*this)._field_ast))._field_impls;
		auto it = expr.begin();
		_iter_begin_4397713968:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Impl> _1b6a47496_decl = *it;
			{
				(*((*this)._field_table))._field_impls = jule::alloc_for_append((*((*this)._field_table))._field_impls,1);(*((*this)._field_table))._field_impls.__push(_1b6a47496_build_impl(_1b6a47496_decl));
			}
			_iter_next_4397713968:;
			++it;
			goto _iter_begin_4397713968;
		}
		_iter_end_4397713968:;
	}
}



inline void _1b6a47496_SymbolBuilder::_method_push_directive_pass(jule::Ptr<_1b7509a90_Directive>& _70943_d) {
	if ((*(_70943_d))._field_args.len() == 0LL) {
		(*this)._method_push_err((*(_70943_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((*(_70943_d))._field_args.len() > 1LL) {
		_1b7553d92_Token _71417_arg = (*(_70943_d))._field_args[1LL];
		(*this)._method_push_err(_71417_arg,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1b7553d92_Token _71813_arg = (*(_70943_d))._field_args[0LL];
	if (_71813_arg._field_id != 6LLU) {
		(*this)._method_push_err(_71813_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_71813_arg._field_kind[0LL] != '\"') {
		(*this)._method_push_err(_71813_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*((*this)._field_table))._field_passes = jule::alloc_for_append((*((*this)._field_table))._field_passes,1);(*((*this)._field_table))._field_passes.__push(_1b6a47496_Pass((*(_70943_d))._field_tag,_71813_arg._field_kind.slice(1LL,_71813_arg._field_kind.len() - 1LL)));
}



inline void _1b6a47496_SymbolBuilder::_method_append_top_directives(void) {
	{
		auto &expr = (*((*this)._field_ast))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_4397752416:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> _1b6a47496_d = *it;
			{
				{
					auto &_match_expr{ (*(_1b6a47496_d))._field_tag._field_kind };
					
					if (_match_expr == jule::Str("pass", 4)) {
						_case_begin_4397757808:;
						{
							(*this)._method_push_directive_pass(_1b6a47496_d);
						}
					}
					_match_end_4397757696:;
				}
			}
			_iter_next_4397752416:;
			++it;
			goto _iter_begin_4397752416;
		}
		_iter_end_4397752416:;
	}
}



inline void _1b6a47496_SymbolBuilder::_method_build(void) {
	(*(this->self))._field_table=jule::new_struct<_1a8acbe95_SymbolTable>(new( std::nothrow ) _1a8acbe95_SymbolTable((*((*(this->self))._field_ast))._field_file,jule::Slice<_1b6a47496_Pass>(),jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>(),jule::Slice<jule::Ptr<_1b7905331_Struct>>(),jule::Slice<jule::Ptr<_1a691a500_Fn>>(),jule::Slice<jule::Ptr<_1b76b472d_Trait>>(),jule::Slice<jule::Ptr<_1a6bb9150_Enum>>(),jule::Slice<jule::Ptr<_1a6bbbe44_Impl>>()));
	(*(this->self))._method_append_top_directives();
	(*(this->self))._method_import_use_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_append_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_append_impls();
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6a47496_SymbolBuilder &_Src) {
	_Stream << "SymbolBuilder{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "importer:" << _Src._field_importer << ", ";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "ast:" << _Src._field_ast << ", ";
	_Stream << "table:" << _Src._field_table;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a6bbbe44_Impl::_method_is_trait_impl(void) {
	return (*this)._field_base != nullptr;
}



inline jule::Bool _1a6bbbe44_Impl::_method_is_struct_impl(void) {
	return (*this)._field_base == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bbbe44_Impl &_Src) {
	_Stream << "Impl{";
	_Stream << "base:" << _Src._field_base << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Scope &_Src) {
	_Stream << "Scope{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "deferred:" << _Src._field_deferred << ", ";
	_Stream << "stmts:" << _Src._field_stmts;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_If &_Src) {
	_Stream << "If{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Else &_Src) {
	_Stream << "Else{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Conditional &_Src) {
	_Stream << "Conditional{";
	_Stream << "elifs:" << _Src._field_elifs << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_InfIter &_Src) {
	_Stream << "InfIter{";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a6bc3e29_WhileIter::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_WhileIter &_Src) {
	_Stream << "WhileIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_RangeIter &_Src) {
	_Stream << "RangeIter{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "it:" << _Src._field_it;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "mtch:" << _Src._field_mtch;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Label &_Src) {
	_Stream << "Label{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Postfix &_Src) {
	_Stream << "Postfix{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_MultiAssign &_Src) {
	_Stream << "MultiAssign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a6bc3e29_Match::_method_is_generic_type_match(void) {
	return ((*this)._field_type_match && ((*this)._field_expr != nullptr)) && (*((*((*this)._field_expr))._field_kind))._field_generic;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Match &_Src) {
	_Stream << "Match{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a6bc3e29_Case::_method_is_default(void) {
	return (*this)._field_exprs == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Case &_Src) {
	_Stream << "Case{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "next:" << _Src._field_next;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "dest_case:" << _Src._field_dest_case;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_ScopeGoto &_Src) {
	_Stream << "ScopeGoto{";
	_Stream << "gt:" << _Src._field_gt << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "pos:" << _Src._field_pos;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a6bc3e29_ScopeChecker::_method_find_package(jule::Str _41835_ident) {
	return (*((*this)._field_s))._method_find_package(_41835_ident);
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a6bc3e29_ScopeChecker::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)> _42837_selector) {
	return (*((*this)._field_s))._method_select_package(_42837_selector);
}



inline jule::Ptr<_1a7003e4b_Var> _1a6bc3e29_ScopeChecker::_method_find_var(jule::Str _43931_ident,jule::Bool _43943_cpp_linked) {
	
	jule::Ptr<_1a7003e4b_Var> _44217_v = (*((*this)._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
	if (_44217_v != nullptr) {
		return _44217_v;
	}
	jule::Ptr<_1a6bc3e29_ScopeChecker> _44717_parent = (*this)._field_parent;
	while (_44717_parent != nullptr) {
		{
			_44217_v=(*((*(_44717_parent))._field_table))._method___find_var(_43931_ident,_43943_cpp_linked,true);
			if (_44217_v != nullptr) {
				return _44217_v;
			}
			_44717_parent=(*(_44717_parent))._field_parent;
		}
	_iter_next_4397825344:;
	}
	_iter_end_4397825344:;
	return (*((*this)._field_s))._method_find_var(_43931_ident,_43943_cpp_linked);
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a6bc3e29_ScopeChecker::_method_find_type_alias(jule::Str _46638_ident,jule::Bool _46650_cpp_linked) {
	
	jule::Ptr<_1a6a19a50_TypeAlias> _46917_ta = (*((*this)._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
	if (_46917_ta != nullptr) {
		return _46917_ta;
	}
	jule::Ptr<_1a6bc3e29_ScopeChecker> _47417_parent = (*this)._field_parent;
	while (_47417_parent != nullptr) {
		{
			_46917_ta=(*((*(_47417_parent))._field_table))._method___find_type_alias(_46638_ident,_46650_cpp_linked,true);
			if (_46917_ta != nullptr) {
				return _46917_ta;
			}
			_47417_parent=(*(_47417_parent))._field_parent;
		}
	_iter_next_4397840352:;
	}
	_iter_end_4397840352:;
	return (*((*this)._field_s))._method_find_type_alias(_46638_ident,_46650_cpp_linked);
}



inline jule::Ptr<_1b7905331_Struct> _1a6bc3e29_ScopeChecker::_method_find_struct(jule::Str _49134_ident,jule::Bool _49146_cpp_linked) {
	return (*((*this)._field_s))._method_find_struct(_49134_ident,_49146_cpp_linked);
}



inline jule::Ptr<_1a691a500_Fn> _1a6bc3e29_ScopeChecker::_method_find_fn(jule::Str _50030_ident,jule::Bool _50042_cpp_linked) {
	return (*((*this)._field_s))._method_find_fn(_50030_ident,_50042_cpp_linked);
}



inline jule::Ptr<_1b76b472d_Trait> _1a6bc3e29_ScopeChecker::_method_find_trait(jule::Str _50933_ident) {
	return (*((*this)._field_s))._method_find_trait(_50933_ident);
}



inline jule::Ptr<_1a6bb9150_Enum> _1a6bc3e29_ScopeChecker::_method_find_enum(jule::Str _51832_ident) {
	return (*((*this)._field_s))._method_find_enum(_51832_ident);
}



inline jule::Bool _1a6bc3e29_ScopeChecker::_method_is_unsafe(void) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _52617_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_52617_scope))._field_scope))._field_unsafety) {
		return true;
	}
	if ((*(_52617_scope))._field_parent != nullptr) {
		_52617_scope=(*(_52617_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1a6bc3e29_ScopeChecker::_method_is_root(void) {
	return ((*this)._field_parent == nullptr) || ((*this)._field_owner != nullptr);
}



inline jule::Bool _1a6bc3e29_ScopeChecker::_method_is_deferred(void) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _54717_scope = this->self;
	_julec_label_iter:;
	if ((*((*(_54717_scope))._field_scope))._field_deferred) {
		return true;
	}
	if ((*(_54717_scope))._field_parent != nullptr) {
		_54717_scope=(*(_54717_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1a6bc3e29_ScopeChecker> _1a6bc3e29_ScopeChecker::_method_get_root(void) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _56517_root = this->self;
	while (((*(_56517_root))._field_parent != nullptr) && ((*(_56517_root))._field_owner == nullptr)) {
		{
			_56517_root=(*(_56517_root))._field_parent;
		}
	_iter_next_4397885024:;
	}
	_iter_end_4397885024:;
	return _56517_root;
}



inline jule::Ptr<_1a6bc3e29_Label> _1a6bc3e29_ScopeChecker::_method_find_label(jule::Str _57529_ident) {
	{
		auto &expr = (*((*this)._field_scope))._field_stmts;
		auto it = expr.begin();
		_iter_begin_4397891056:;
		if (it != expr.end()) {
			jule::Any _1a6bc3e29_st = *it;
			{
				{
					auto &_match_expr{ _1a6bc3e29_st };
					
					if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Label>>()) {
						_case_begin_4397892704:;
						{
							jule::Ptr<_1a6bc3e29_Label> _57925_label = _1a6bc3e29_st.operator jule::Ptr<_1a6bc3e29_Label>();
							if ((*(_57925_label))._field_ident == _57529_ident) {
								return _57925_label;
							}
						}
					}
					_match_end_4397892368:;
				}
			}
			_iter_next_4397891056:;
			++it;
			goto _iter_begin_4397891056;
		}
		_iter_end_4397891056:;
	}
	return nullptr;
}



inline jule::Ptr<_1a6bc3e29_ScopeLabel> _1a6bc3e29_ScopeChecker::_method_find_label_scope(jule::Str _59136_ident) {
	jule::Ptr<_1a6bc3e29_ScopeLabel> _59217_label = (*(this->self))._method_find_label_all(_59136_ident);
	if ((_59217_label != nullptr) && ((*(_59217_label))._field_scope == this->self)) {
		return _59217_label;
	}
	return nullptr;
}



inline jule::Ptr<_1a6bc3e29_ScopeLabel> _1a6bc3e29_ScopeChecker::_method_find_label_all(jule::Str _60333_ident) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_4397902576:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bc3e29_ScopeLabel> _1a6bc3e29_lbl = *it;
			{
				if ((*((*(_1a6bc3e29_lbl))._field_label))._field_ident == _60333_ident) {
					return _1a6bc3e29_lbl;
				}
			}
			_iter_next_4397902576:;
			++it;
			goto _iter_begin_4397902576;
		}
		_iter_end_4397902576:;
	}
	return nullptr;
}



inline jule::Bool _1a6bc3e29_ScopeChecker::_method_is_duplicated_ident(jule::Uintptr _61538_itself,jule::Str _61555_ident) {
	jule::Ptr<_1a7003e4b_Var> _61613_v = (*this)._method_find_var(_61555_ident,false);
	if ((_61613_v != nullptr) && (static_cast<jule::Uintptr>(_61613_v) != _61538_itself)) {
		if ((*(_61613_v))._field_scope == nullptr) {
			return false;
		}
		return ((*(_61613_v))._field_scope == (*this)._field_scope) || (!((*((*this)._field_s))._method_is_flag(1LL)));
	}
	jule::Ptr<_1a6a19a50_TypeAlias> _62413_ta = (*this)._method_find_type_alias(_61555_ident,false);
	if ((_62413_ta != nullptr) && (static_cast<jule::Uintptr>(_62413_ta) != _61538_itself)) {
		if ((*(_62413_ta))._field_scope == nullptr) {
			return false;
		}
		return ((*(_62413_ta))._field_scope == (*this)._field_tree) || (!((*((*this)._field_s))._method_is_flag(1LL)));
	}
	return false;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_var_decl(jule::Ptr<_1b7509a90_VarDecl> _63538_decl) {
	jule::Ptr<_1a7003e4b_Var> _63617_v = _1b6a47496_build_var(_63538_decl);
	(*(_63617_v))._field_scope=(*(this->self))._field_scope;
	__JULE_DEFER({
		(*((*(this->self))._field_table))._field_vars = jule::alloc_for_append((*((*(this->self))._field_table))._field_vars,1);(*((*(this->self))._field_table))._field_vars.__push(_63617_v);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_63617_v));
	});
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_63617_v)),(*(_63617_v))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_63617_v))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_63617_v))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*((*(this->self))._field_s))._method_check_var_decl(_63617_v,this->self);
	if ((!((*(_63617_v))._method_is_type_inferred())) && (((*(_63617_v))._field_kind == nullptr) || ((*((*(_63617_v))._field_kind))._field_kind == nullptr))) {
		return;
	}
	(*((*(this->self))._field_s))._method_check_type_var(_63617_v,this->self);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_type_alias_decl(jule::Ptr<_1b7509a90_TypeAliasDecl> _65745_decl) {
	jule::Ptr<_1a6a19a50_TypeAlias> _65817_ta = _1b6a47496_build_type_alias(_65745_decl);
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_65817_ta)),(*(_65817_ta))._field_ident)) {
		(*((*(this->self))._field_s))._method_push_err((*(_65817_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_65817_ta))._field_ident)}));
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*((*(this->self))._field_s))._method_check_type_alias_decl(_65817_ta,this->self);
	(*((*(this->self))._field_table))._field_type_aliases = jule::alloc_for_append((*((*(this->self))._field_table))._field_type_aliases,1);(*((*(this->self))._field_table))._field_type_aliases.__push(_65817_ta);
}



inline jule::Ptr<_1a6bc3e29_Scope> _1a6bc3e29_ScopeChecker::_method_get_child(void) {
	return jule::new_struct<_1a6bc3e29_Scope>(new( std::nothrow ) _1a6bc3e29_Scope((*this)._field_scope,jule::Bool(),jule::Bool(),jule::Slice<jule::Any>()));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_child_ssc(jule::Ptr<_1b7509a90_ScopeTree>& _67440_tree,jule::Ptr<_1a6bc3e29_Scope>& _67463_s,jule::Ptr<_1a6bc3e29_ScopeChecker>& _67479_ssc) {
	(*(_67479_ssc))._field_parent=this->self;
	(*(_67479_ssc))._method_check(_67440_tree,_67463_s);
}



inline jule::Ptr<_1a6bc3e29_Scope> _1a6bc3e29_ScopeChecker::_method_check_child_sc(jule::Ptr<_1b7509a90_ScopeTree>& _67939_tree,jule::Ptr<_1a6bc3e29_ScopeChecker>& _67962_ssc) {
	jule::Ptr<_1a6bc3e29_Scope> _68017_s = (*(this->self))._method_get_child();
	(*(this->self))._method_check_child_ssc(_67939_tree,_68017_s,_67962_ssc);
	return _68017_s;
}



inline jule::Ptr<_1a6bc3e29_Scope> _1a6bc3e29_ScopeChecker::_method_check_child(jule::Ptr<_1b7509a90_ScopeTree>& _68536_tree) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _68617_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_child_sc(_68536_tree,_68617_ssc);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_anon_scope(jule::Ptr<_1b7509a90_ScopeTree> _69040_tree) {
	jule::Ptr<_1a6bc3e29_Scope> _69117_s = (*(this->self))._method_check_child(_69040_tree);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_69117_s));
}



inline void _1a6bc3e29_ScopeChecker::_method_process_error_call(jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>& _69543_m,_1b7553d92_Token _69574_err) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err(_69574_err,jule::Str("deferred scopes are not supports error calls", 44),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a6bc3e29_ScopeChecker> _70017_root = (*(this->self))._method_get_root();
	if ((!((*((*((*(_70017_root))._field_owner))._field_decl))._field_exceptional))) {
		(*((*(this->self))._field_s))._method_push_err(_69574_err,jule::Str("error call can only useable for exceptional functions", 53),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("you can declare an exceptional function with \"!\" operator", 57),jule::Slice<jule::Any>());
	}
	(*(_69543_m))._field_func=(*(_70017_root))._field_owner;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_expr(jule::Ptr<_1b7509a90_Expr> _70834_expr) {
	jule::Ptr<_1a8b431d7_Eval> _70917_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_70917_eval))._field_ignored=true;
	jule::Ptr<_1a8b431d7_Data> _71117_d = (*(_70917_eval))._method_eval_expr(_70834_expr);
	if (_71117_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_71117_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>>()) {
			_case_begin_4398008000:;
			{
				jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel> _71821_m = (*(_71117_d))._field_model.operator jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>();
				(*(this->self))._method_process_error_call(_71821_m,(*(_70834_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_71117_d));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BackendEmitExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinCloneCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinOutCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinOutlnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinAssertCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_FreeExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_FnCallExprModel>>()) {
			_case_begin_4398008880:;
			{
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_71117_d));
			}
		}
		else {
			_case_begin_4398008528:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_70834_expr))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
			}
		}
		_match_end_4398008448:;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_co_expr(jule::Ptr<_1b7509a90_CoExpr> _73837_expr) {
	jule::Ptr<_1a8b431d7_Eval> _73917_eval = (*((*(this->self))._field_s))._method_eval(this->self);
	(*(_73917_eval))._field_ignored=true;
	jule::Ptr<_1a8b431d7_Data> _74117_d = (*(_73917_eval))._method_eval_expr((*(_73837_expr))._field_expr);
	if (_74117_d == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_74117_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_FnCallExprModel>>()) {
			_case_begin_4398033216:;
			{
				jule::Ptr<_1a69b8d2e_FnCallExprModel> _74821_model = (*(_74117_d))._field_model.operator jule::Ptr<_1a69b8d2e_FnCallExprModel>();
				if ((*((*((*(_74821_model))._field_func))._field_decl))._field_exceptional) {
					(*((*(this->self))._field_s))._method_push_err((*(_73837_expr))._field_token,jule::Str("concurrent calls not supports exceptionals", 42),jule::Slice<jule::Any>());
					(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("handle exceptional in a separate function or anonymous function", 63),jule::Slice<jule::Any>());
				}
				(*(_74821_model))._field_is_co=true;
				(*(_73917_eval))._method_check_fn_of_concurrent_call((*(_74821_model))._field_func,(*((*(_73837_expr))._field_expr))._field_token);
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_74117_d));
			}
		}
		else {
			_case_begin_4398030000:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_73837_expr))._field_token,jule::Str("statement must have function call expression", 44),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4398029920:;
	}
}



inline jule::Ptr<_1a6bc3e29_If> _1a6bc3e29_ScopeChecker::_method_check_if(jule::Ptr<_1b7509a90_If> _76432_i) {
	jule::Ptr<_1a6bc3e29_Scope> _76517_s = (*(this->self))._method_check_child((*(_76432_i))._field_scope);
	jule::Ptr<_1a8b431d7_Data> _76717_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_76432_i))._field_expr);
	if (_76717_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1a6a19a50_Prim> _77217_prim = (*((*(_76717_d))._field_kind))._method_prim();
	if ((_77217_prim == nullptr) || (!((*(_77217_prim))._method_is_bool()))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_76432_i))._field_expr))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1a6bc3e29_If>(new( std::nothrow ) _1a6bc3e29_If((*(_76717_d))._field_model,_76517_s));
}



inline jule::Ptr<_1a6bc3e29_Else> _1a6bc3e29_ScopeChecker::_method_check_else(jule::Ptr<_1b7509a90_Else> _78434_e) {
	return jule::new_struct<_1a6bc3e29_Else>(new( std::nothrow ) _1a6bc3e29_Else((*(this->self))._method_check_child((*(_78434_e))._field_scope)));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_conditional(jule::Ptr<_1b7509a90_Conditional> _79041_conditional) {
	jule::Ptr<_1a6bc3e29_Conditional> _79117_c = jule::new_struct<_1a6bc3e29_Conditional>(new( std::nothrow ) _1a6bc3e29_Conditional());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_79117_c));
	(*(_79117_c))._field_elifs=jule::Slice<jule::Ptr<_1a6bc3e29_If>>::alloc(0LL,static_cast<jule::I64>((*(_79041_conditional))._field_tail.len() + 1LL));
	(*(_79117_c))._field_elifs = jule::alloc_for_append((*(_79117_c))._field_elifs,1);(*(_79117_c))._field_elifs.__push((*(this->self))._method_check_if((*(_79041_conditional))._field_head));
	{
		auto &expr = (*(_79041_conditional))._field_tail;
		auto it = expr.begin();
		_iter_begin_4398076336:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_If> _1a6bc3e29_elif = *it;
			{
				(*(_79117_c))._field_elifs = jule::alloc_for_append((*(_79117_c))._field_elifs,1);(*(_79117_c))._field_elifs.__push((*(this->self))._method_check_if(_1a6bc3e29_elif));
			}
			_iter_next_4398076336:;
			++it;
			goto _iter_begin_4398076336;
		}
		_iter_end_4398076336:;
	}
	if ((*(_79041_conditional))._field_default != nullptr) {
		(*(_79117_c))._field_default=(*(this->self))._method_check_else((*(_79041_conditional))._field_default);
	}
}



inline jule::Ptr<_1a6bc3e29_Scope> _1a6bc3e29_ScopeChecker::_method_check_iter_scope_sc(jule::Uintptr _80639_it,jule::Ptr<_1b7509a90_ScopeTree> _80656_tree,jule::Ptr<_1a6bc3e29_ScopeChecker> _80678_ssc) {
	(*(_80678_ssc))._field_it=_80639_it;
	return (*(this->self))._method_check_child_sc(_80656_tree,_80678_ssc);
}



inline jule::Ptr<_1a6bc3e29_Scope> _1a6bc3e29_ScopeChecker::_method_check_iter_scope(jule::Uintptr _81136_it,jule::Ptr<_1b7509a90_ScopeTree>& _81154_tree) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _81217_ssc = (*(this->self))._method_new_child_checker();
	return (*(this->self))._method_check_iter_scope_sc(_81136_it,_81154_tree,_81217_ssc);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_inf_iter(jule::Ptr<_1b7509a90_Iter>& _81639_it) {
	jule::Ptr<_1a6bc3e29_InfIter> _81717_kind = jule::new_struct<_1a6bc3e29_InfIter>(new( std::nothrow ) _1a6bc3e29_InfIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_81717_kind));
	(*(_81717_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_81717_kind)),(*(_81639_it))._field_scope);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_while_iter(jule::Ptr<_1b7509a90_Iter>& _82441_it) {
	jule::Ptr<_1b7509a90_WhileKind> _82517_wh = (*(_82441_it))._field_kind.operator jule::Ptr<_1b7509a90_WhileKind>();
	if (((*(_82517_wh))._field_expr == nullptr) && ((*(_82517_wh))._field_next == nullptr)) {
		(*(this->self))._method_check_inf_iter(_82441_it);
		return;
	}
	jule::Ptr<_1a6bc3e29_WhileIter> _83117_kind = jule::new_struct<_1a6bc3e29_WhileIter>(new( std::nothrow ) _1a6bc3e29_WhileIter());
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_83117_kind));
	(*(_83117_kind))._field_scope=(*(this->self))._method_check_iter_scope(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_83117_kind)),(*(_82441_it))._field_scope);
	if ((*(_82517_wh))._field_expr != nullptr) {
		jule::Ptr<_1a8b431d7_Data> _83821_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_82517_wh))._field_expr);
		if (_83821_d == nullptr) {
			return;
		}
		jule::Ptr<_1a6a19a50_Prim> _84317_prim = (*((*(_83821_d))._field_kind))._method_prim();
		if (_84317_prim == nullptr) {
			(*((*(this->self))._field_s))._method_push_err((*(_82441_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		if ((!((*(_84317_prim))._method_is_bool()))) {
			(*((*(this->self))._field_s))._method_push_err((*(_82441_it))._field_token,jule::Str("while iterations must be have boolean expression", 48),jule::Slice<jule::Any>());
			return;
		}
		(*(_83117_kind))._field_expr=(*(_83821_d))._field_model;
	}
	if ((*(_82517_wh))._method_is_while_next()) {
		if ((!(_1a6bc3e29_is_valid_ast_st_for_next_st((*(_82517_wh))._field_next)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_82517_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			return;
		}
		jule::I64 _86317_n = (*((*(this->self))._field_scope))._field_stmts.len();
		(*(this->self))._method_check_node((*(_82517_wh))._field_next);
		if (_86317_n < (*((*(this->self))._field_scope))._field_stmts.len()) {
			jule::Any _86625_st = (*((*(this->self))._field_scope))._field_stmts[_86317_n];
			(*((*(this->self))._field_scope))._field_stmts=(*((*(this->self))._field_scope))._field_stmts.slice(0LL,_86317_n);
			if ((!(_1a6bc3e29_is_valid_st_for_next_st(_86625_st)))) {
				(*((*(this->self))._field_s))._method_push_err((*(_82517_wh))._field_next_token,jule::Str("invalid statement for while-next", 32),jule::Slice<jule::Any>());
			}
			(*(_83117_kind))._field_next=_86625_st;
		}
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_range_iter(jule::Ptr<_1b7509a90_Iter>& _87741_it) {
	jule::Ptr<_1b7509a90_RangeKind> _87817_rang = (*(_87741_it))._field_kind.operator jule::Ptr<_1b7509a90_RangeKind>();
	jule::Ptr<_1a8b431d7_Data> _88017_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_87817_rang))._field_expr);
	if (_88017_d == nullptr) {
		return;
	}
	jule::Ptr<_1a6bc3e29_RangeIter> _88517_kind = jule::new_struct<_1a6bc3e29_RangeIter>(new( std::nothrow ) _1a6bc3e29_RangeIter(_88017_d,jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1a7003e4b_Var>(),jule::Ptr<_1a7003e4b_Var>()));
	_1a700327a_RangeChecker _88917_rc = _1a700327a_RangeChecker(this->self,_87817_rang,_88517_kind,_88017_d);
	jule::Bool _89513_ok = _88917_rc._method_check();
	if ((!(_89513_ok))) {
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_88517_kind));
	jule::Ptr<_1a6bc3e29_ScopeChecker> _90217_ssc = (*(this->self))._method_new_child_checker();
	if ((*(_88517_kind))._field_key_a != nullptr) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(1LL))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_88517_kind))._field_key_a))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_88517_kind))._field_key_a))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_88517_kind))._field_key_a))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_90217_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_90217_ssc))._field_table))._field_vars,1);(*((*(_90217_ssc))._field_table))._field_vars.__push((*(_88517_kind))._field_key_a);
	}
	if ((*(_88517_kind))._field_key_b != nullptr) {
		if ((!((*((*(this->self))._field_s))._method_is_flag(1LL))) && (*(this->self))._method_is_duplicated_ident(0LLU,(*((*(_88517_kind))._field_key_b))._field_ident)) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_88517_kind))._field_key_b))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*((*(_88517_kind))._field_key_b))._field_ident)}));
			(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
		}
		(*((*(_90217_ssc))._field_table))._field_vars = jule::alloc_for_append((*((*(_90217_ssc))._field_table))._field_vars,1);(*((*(_90217_ssc))._field_table))._field_vars.__push((*(_88517_kind))._field_key_b);
	}
	(*(_88517_kind))._field_scope=(*(this->self))._method_check_iter_scope_sc(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_88517_kind)),(*(_87741_it))._field_scope,_90217_ssc);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_iter(jule::Ptr<_1b7509a90_Iter> _92334_it) {
	if ((*(_92334_it))._method_is_inf()) {
		(*(this->self))._method_check_inf_iter(_92334_it);
		return;
	}
	{
		auto &_match_expr{ (*(_92334_it))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_WhileKind>>()) {
			_case_begin_4398192832:;
			{
				(*(this->self))._method_check_while_iter(_92334_it);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_RangeKind>>()) {
			_case_begin_4398194128:;
			{
				(*(this->self))._method_check_range_iter(_92334_it);
			}
		}
		else {
			_case_begin_4398193792:;
			{
				jule::outln(jule::Str("error <unimplemented iteration kind>", 36));
			}
		}
		_match_end_4398193712:;
	}
}



inline jule::Bool _1a6bc3e29_ScopeChecker::_method_check_valid_cont_label(jule::Uintptr _93642_it) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _93717_scope = this->self;
	_julec_label_iter:;
	if ((*(_93717_scope))._field_it == _93642_it) {
		return true;
	}
	if ((*(_93717_scope))._field_parent != nullptr) {
		_93717_scope=(*(_93717_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Bool _1a6bc3e29_ScopeChecker::_method_check_valid_break_label(jule::Uintptr _95243_ptr) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _95317_scope = this->self;
	_julec_label_iter:;
	if ((*(_95317_scope))._field_it == _95243_ptr) {
		return true;
	}
	if ((*(_95317_scope))._field_cse != 0LL) {
		jule::Uintptr _96117_mtch = static_cast<jule::Uintptr>((*(((_1a6bc3e29_Case*)((*(_95317_scope))._field_cse))))._field_owner);
		if (_96117_mtch == _95243_ptr) {
			return true;
		}
	}
	if ((*(_95317_scope))._field_parent != nullptr) {
		_95317_scope=(*(_95317_scope))._field_parent;
		goto _julec_label_iter;
	}
	return false;
}



inline jule::Ptr<_1a6bc3e29_ContSt> _1a6bc3e29_ScopeChecker::_method_check_cont_valid_scope(jule::Ptr<_1b7509a90_ContSt> _97542_c) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_97542_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((*(_97542_c))._field_label._field_id != 0LLU) {
		return jule::new_struct<_1a6bc3e29_ContSt>(new( std::nothrow ) _1a6bc3e29_ContSt());
	}
	jule::Ptr<_1a6bc3e29_ScopeChecker> _98517_scope = this->self;
	_julec_label_iter:;
	{
		
		if ((((*(_98517_scope))._field_it == 0LL) && ((*(_98517_scope))._field_parent != nullptr)) && ((*(_98517_scope))._field_owner == nullptr)) {
			_case_begin_4398225840:;
			{
				_98517_scope=(*(_98517_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((*(_98517_scope))._field_it != 0LL) {
			_case_begin_4398225952:;
			{
				return jule::new_struct<_1a6bc3e29_ContSt>(new( std::nothrow ) _1a6bc3e29_ContSt((*(_98517_scope))._field_it));
			}
		}
		_match_end_4398225680:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_97542_c))._field_token,jule::Str("continue keyword is cannot used at out of iteration", 51),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_cont(jule::Ptr<_1b7509a90_ContSt> _100030_c) {
	jule::Ptr<_1a6bc3e29_ContSt> _100117_cont = (*(this->self))._method_check_cont_valid_scope(_100030_c);
	if (_100117_cont == nullptr) {
		return;
	}
	if ((*(_100030_c))._field_label._field_id != 0LLU) {
		jule::Ptr<_1a6bc3e29_ScopeLabel> _100721_label = _1a6bc3e29_find_label_parent((*(_100030_c))._field_label._field_kind,(*(this->self))._field_parent);
		if (_100721_label == nullptr) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
			return;
		}
		(*(_100721_label))._field_used=true;
		if (((*(_100721_label))._field_pos + 1LL) >= (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts.len()) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
			return;
		}
		jule::Int _102017_i = (*(_100721_label))._field_pos + 1LL;
		if (_102017_i >= (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts.len()) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>());
		} else {
			jule::Any _102425_st = (*((*((*(_100721_label))._field_scope))._field_scope))._field_stmts[_102017_i];
			{
				auto &_match_expr{ _102425_st };
				
				if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_InfIter>>()) {
					_case_begin_4398255104:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_1a6bc3e29_InfIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_RangeIter>>()) {
					_case_begin_4398262208:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_1a6bc3e29_RangeIter>()));
					}
				}
				else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_WhileIter>>()) {
					_case_begin_4398262304:;
					{
						(*(_100117_cont))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_102425_st.operator jule::Ptr<_1a6bc3e29_WhileIter>()));
					}
				}
				else {
					_case_begin_4398261744:;
					{
						(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
					}
				}
				_match_end_4398261664:;
			}
		}
	}
	if ((*(_100117_cont))._field_it != 0LL) {
		if ((!((*(this->self))._method_check_valid_cont_label((*(_100117_cont))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_100030_c))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_100030_c))._field_label._field_kind)}));
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_100117_cont));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_label(jule::Ptr<_1b7509a90_LabelSt> _104335_l) {
	if ((*(this->self))._method_find_label((*(_104335_l))._field_ident) != nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_104335_l))._field_token,jule::Str("label is already exist in this identifier: @", 44),jule::Slice<jule::Any>({jule::Any((*(_104335_l))._field_ident)}));
		return;
	}
	jule::Ptr<_1a6bc3e29_Label> _104917_label = jule::new_struct<_1a6bc3e29_Label>(new( std::nothrow ) _1a6bc3e29_Label((*(_104335_l))._field_ident));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_104917_label));
	(*((*(this->self))._field_labels))=jule::append((*((*(this->self))._field_labels)),jule::Slice<jule::Ptr<_1a6bc3e29_ScopeLabel>>({jule::new_struct<_1a6bc3e29_ScopeLabel>(new( std::nothrow ) _1a6bc3e29_ScopeLabel((*(_104335_l))._field_token,_104917_label,static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len() - 1LL),this->self,jule::Bool()))}));
}



inline void _1a6bc3e29_ScopeChecker::_method_push_goto(jule::Ptr<_1b7509a90_GotoSt> _106233_gt) {
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1a6bc3e29_GotoSt>(new( std::nothrow ) _1a6bc3e29_GotoSt((*(_106233_gt))._field_label._field_kind))));
	(*((*(this->self))._field_gotos))=jule::append((*((*(this->self))._field_gotos)),jule::Slice<jule::Ptr<_1a6bc3e29_ScopeGoto>>({jule::new_struct<_1a6bc3e29_ScopeGoto>(new( std::nothrow ) _1a6bc3e29_ScopeGoto(_106233_gt,this->self,static_cast<jule::I64>((*((*(this->self))._field_scope))._field_stmts.len() - 1LL)))}));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_postfix(jule::Ptr<_1b7509a90_AssignSt> _107437_a) {
	if ((*(_107437_a))._field_left.len() > 1LL) {
		(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1b7509a90_Expr> _108017_expr = (*((*(_107437_a))._field_left[0LL]))._field_expr;
	jule::Ptr<_1a8b431d7_Data> _108117_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_108017_expr);
	if (_108117_d == nullptr) {
		return;
	}
	_1a6bc3e29_check_assign((*(this->self))._field_s,_108117_d,nullptr,(*(_107437_a))._field_setter);
	if ((*((*(_108117_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_1a6a19a50_Ptr> _108921_ptr = (*((*(_108117_d))._field_kind))._method_ptr();
		if ((*(_108921_ptr))._method_is_unsafe()) {
			(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_107437_a))._field_setter._field_kind),jule::Any((*((*(_108117_d))._field_kind))._method_to_str())}));
			return;
		}
	} else {
		if (((*((*(_108117_d))._field_kind))._method_prim() == nullptr) || (!(_1a9133243_is_num((*((*((*(_108117_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_107437_a))._field_setter,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*(_107437_a))._field_setter._field_kind),jule::Any((*((*(_108117_d))._field_kind))._method_to_str())}));
			return;
		}
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1a6bc3e29_Postfix>(new( std::nothrow ) _1a6bc3e29_Postfix((*(_108117_d))._field_model,(*(_107437_a))._field_setter._field_kind))));
}



inline jule::Bool _1a6bc3e29_ScopeChecker::_method_is_new_assign_ident(jule::Str _110738_ident) {
	if (_1b7553d92_is_ignore_ident(_110738_ident) || (_110738_ident == jule::Str())) {
		return false;
	}
	return (*((*this)._field_table))._method_def_by_ident(_110738_ident,false) == nullptr;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_single_assign(jule::Ptr<_1b7509a90_AssignSt>& _111544_a) {
	jule::Ptr<_1a8b431d7_Data> _111617_l = nullptr;
	if ((!(_1b7553d92_is_ignore_ident((*((*(_111544_a))._field_left[0LL]))._field_ident)))) {
		jule::Ptr<_1b7509a90_Expr> _111921_expr = (*((*(_111544_a))._field_left[0LL]))._field_expr;
		_111617_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_111921_expr);
		if (_111617_l == nullptr) {
			return;
		}
	}
	jule::Ptr<_1a8b431d7_Eval> _112617_eval = (((_111617_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_111617_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
	jule::Ptr<_1a8b431d7_Data> _113117_r = (*(_112617_eval))._method_eval_expr((*(_111544_a))._field_right);
	if (_113117_r == nullptr) {
		return;
	}
	if (_111617_l == nullptr) {
		if ((*((*(_113117_r))._field_kind))._method_void()) {
			(*((*(this->self))._field_s))._method_push_err((*((*(_111544_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_113117_r));
		return;
	}
	if ((!(_1a6bc3e29_check_assign((*(this->self))._field_s,_111617_l,_113117_r,(*(_111544_a))._field_setter)))) {
		return;
	}
	if ((*((*(_113117_r))._field_kind))._method_tup() != nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_111544_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1a6bc3e29_Assign>(new( std::nothrow ) _1a6bc3e29_Assign(jule::new_struct<_1a69b8d2e_OperandExprModel>(new( std::nothrow ) _1a69b8d2e_OperandExprModel((*(_111617_l))._field_kind,(*(_111617_l))._field_model)),jule::new_struct<_1a69b8d2e_OperandExprModel>(new( std::nothrow ) _1a69b8d2e_OperandExprModel((*(_113117_r))._field_kind,(*(_113117_r))._field_model)),(*(_111544_a))._field_setter))));
	if ((*(_111544_a))._field_setter._field_kind != jule::Str("=", 1)) {
		(*(_111544_a))._field_setter._field_kind=(*(_111544_a))._field_setter._field_kind.slice(0LL,(*(_111544_a))._field_setter._field_kind.len() - 1LL);
		_1a8b431d7_BinaryEval _116921_solver = _1a8b431d7_BinaryEval::_static_method_new(jule::new_struct_ptr<_1a8b431d7_Eval>(new( std::nothrow ) _1a8b431d7_Eval((*(this->self))._field_s,this->self,jule::Ptr<_1a6a19a50_TypeKind>(),(*(this->self))._method_is_unsafe(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a7003e4b_Var>(),jule::Ptr<_1b7905331_FieldIns>())),(*(_111544_a))._field_setter);
		_113117_r=_116921_solver._method_solve_explicit(_111617_l,_113117_r);
		if (_113117_r == nullptr) {
			return;
		}
		(*(_111544_a))._field_setter._field_kind+=jule::Str("=", 1);
		return;
	}
	_1a700327a_AssignTypeChecker _118317_checker = _1a700327a_AssignTypeChecker((*(this->self))._field_s,(*(_111617_l))._field_kind,_113117_r,(*(_111544_a))._field_setter);
	_118317_checker._method_check();
}



inline void _1a6bc3e29_ScopeChecker::_method___process_end_part_of_multi_assign(jule::Ptr<_1a6bc3e29_MultiAssign> _119257_st,jule::Ptr<_1b7509a90_AssignSt> _119313_a,jule::Ptr<_1b7509a90_AssignLeft> _119331_lexpr,jule::Ptr<_1a8b431d7_Data> _119355_l,jule::Ptr<_1a8b431d7_Data> _119369_r) {
	if (_1b7553d92_is_ignore_ident((*(_119331_lexpr))._field_ident)) {
		if ((*((*(_119369_r))._field_kind))._method_void()) {
			(*((*this)._field_s))._method_push_err((*((*(_119313_a))._field_right))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		}
		(*(_119257_st))._field_l = jule::alloc_for_append((*(_119257_st))._field_l,1);(*(_119257_st))._field_l.__push(jule::Any(nullptr));
		return;
	}
	if ((*(_119313_a))._field_declarative && (*this)._method_is_new_assign_ident((*(_119331_lexpr))._field_ident)) {
		jule::Ptr<_1a7003e4b_Var> _120521_v = jule::new_struct<_1a7003e4b_Var>(new( std::nothrow ) _1a7003e4b_Var((*this)._field_scope,(*(_119331_lexpr))._field_token,(*(_119331_lexpr))._field_ident,jule::Bool(),jule::Bool(),(*(_119331_lexpr))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),(*(_119331_lexpr))._field_reference,jule::Str(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::new_struct<_1a8b431d7_Value>(new( std::nothrow ) _1a8b431d7_Value((*(_119313_a))._field_right,_119369_r)),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1a7003e4b_IterRelation>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>()));
		(*((*this)._field_s))._method_check_var(_120521_v);
		(*(_119257_st))._field_l = jule::alloc_for_append((*(_119257_st))._field_l,1);(*(_119257_st))._field_l.__push(jule::Any(_120521_v));
		(*((*this)._field_table))._field_vars = jule::alloc_for_append((*((*this)._field_table))._field_vars,1);(*((*this)._field_table))._field_vars.__push(_120521_v);
		(*((*this)._field_scope))._field_stmts = jule::alloc_for_append((*((*this)._field_scope))._field_stmts,1);(*((*this)._field_scope))._field_stmts.__push(jule::Any(_120521_v));
		return;
	}
	if ((*(_119331_lexpr))._field_mutable || (*(_119331_lexpr))._field_reference) {
		(*((*this)._field_s))._method_push_err((*(_119331_lexpr))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_119331_lexpr))._field_ident)}));
		(*((*this)._field_s))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((!(_1a6bc3e29_check_assign((*this)._field_s,_119355_l,_119369_r,(*(_119313_a))._field_setter)))) {
		return;
	}
	
	(*((*this)._field_s))._method_check_validity_for_init_expr((*(_119355_l))._field_mutable,false,(*(_119355_l))._field_kind,_119369_r,(*(_119313_a))._field_setter);
	_1a700327a_AssignTypeChecker _124017_checker = _1a700327a_AssignTypeChecker((*this)._field_s,(*(_119355_l))._field_kind,_119369_r,(*(_119313_a))._field_setter);
	_124017_checker._method_check();
	(*(_119257_st))._field_l = jule::alloc_for_append((*(_119257_st))._field_l,1);(*(_119257_st))._field_l.__push((*(_119355_l))._field_model);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_ret_multi_assign(jule::Ptr<_1b7509a90_AssignSt>& _125147_a) {
	jule::Ptr<_1a8b431d7_Data> _125217_rd = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_125147_a))._field_right);
	if (_125217_rd == nullptr) {
		return;
	}
	jule::Slice<jule::Ptr<_1a8b431d7_Data>> _125717_r = _1a6bc3e29_get_datas_from_tuple_data(_125217_rd);
	{
		
		if ((*(_125147_a))._field_left.len() > _125717_r.len()) {
			_case_begin_4398440256:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_125147_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_125147_a))._field_left.len() < _125717_r.len()) {
			_case_begin_4398440368:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_125147_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4398440112:;
	}
	jule::Ptr<_1a6bc3e29_MultiAssign> _126917_st = jule::new_struct<_1a6bc3e29_MultiAssign>(new( std::nothrow ) _1a6bc3e29_MultiAssign(jule::Slice<jule::Any>(),(*(_125217_rd))._field_model));
	if ((*((*(_125217_rd))._field_kind))._method_tup() == nullptr) {
		(*(_126917_st))._field_r=jule::Any(jule::new_struct<_1a69b8d2e_TupleExprModel>(new( std::nothrow ) _1a69b8d2e_TupleExprModel(_125717_r)));
	}
	{
		auto &expr = (*(_125147_a))._field_left;
		auto it = expr.begin();
		_iter_begin_4398452784:;
		if (it != expr.end()) {
			jule::Int _1a6bc3e29_i = it - expr.begin();
			{
				jule::Ptr<_1b7509a90_AssignLeft> _127821_lexpr = (*(_125147_a))._field_left[_1a6bc3e29_i];
				jule::Ptr<_1a8b431d7_Data> _127921_l = nullptr;
				if ((!(_1b7553d92_is_ignore_ident((*(_127821_lexpr))._field_ident))) && ((!((*(_125147_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_127821_lexpr))._field_ident))))) {
					_127921_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_127821_lexpr))._field_expr);
					if (_127921_l == nullptr) {
						goto _iter_next_4398452784;
					}
				}
				(*(this->self))._method___process_end_part_of_multi_assign(_126917_st,_125147_a,_127821_lexpr,_127921_l,_125717_r[_1a6bc3e29_i]);
			}
			_iter_next_4398452784:;
			++it;
			_1a6bc3e29_i++;
			goto _iter_begin_4398452784;
		}
		_iter_end_4398452784:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_126917_st));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_multi_assign(jule::Ptr<_1b7509a90_AssignSt>& _129543_a) {
	{
		auto &_match_expr{ (*((*(_129543_a))._field_right))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnCallExpr>>()) {
			_case_begin_4398470064:;
			{
				(*(this->self))._method_check_ret_multi_assign(_129543_a);
				return;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_UnsafeExpr>>()) {
			_case_begin_4398470160:;
			{
				{
					auto &_match_expr{ (*((*((*(_129543_a))._field_right))._field_kind.operator jule::Ptr<_1b7509a90_UnsafeExpr>()))._field_expr };
					
					if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnCallExpr>>()) {
						_case_begin_4398474768:;
						{
							(*(this->self))._method_check_ret_multi_assign(_129543_a);
							return;
						}
					}
					_match_end_4398474656:;
				}
			}
		}
		_match_end_4398469936:;
	}
	jule::Slice<jule::Any> _130917_right = _1a6bc3e29_get_expr_models((*((*(_129543_a))._field_right))._field_kind);
	{
		
		if ((*(_129543_a))._field_left.len() > _130917_right.len()) {
			_case_begin_4398478224:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_129543_a))._field_setter,jule::Str("overflow multi assignment identifers", 36),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((*(_129543_a))._field_left.len() < _130917_right.len()) {
			_case_begin_4398478320:;
			{
				(*((*(this->self))._field_s))._method_push_err((*(_129543_a))._field_setter,jule::Str("missing identifier(s) for multiple assignment", 45),jule::Slice<jule::Any>());
				return;
			}
		}
		_match_end_4398478032:;
	}
	jule::Ptr<_1a69b8d2e_TupleExprModel> _132117_right_tuple = jule::new_struct<_1a69b8d2e_TupleExprModel>(new( std::nothrow ) _1a69b8d2e_TupleExprModel());
	jule::Ptr<_1a6bc3e29_MultiAssign> _132317_st = jule::new_struct<_1a6bc3e29_MultiAssign>(new( std::nothrow ) _1a6bc3e29_MultiAssign(jule::Slice<jule::Any>(),jule::Any(_132117_right_tuple)));
	{
		auto &expr = (*(_129543_a))._field_left;
		auto it = expr.begin();
		_iter_begin_4398489088:;
		if (it != expr.end()) {
			jule::Int _1a6bc3e29_i = it - expr.begin();
			{
				jule::Ptr<_1b7509a90_AssignLeft> _132821_lexpr = (*(_129543_a))._field_left[_1a6bc3e29_i];
				jule::Ptr<_1a8b431d7_Data> _132921_l = nullptr;
				if ((!(_1b7553d92_is_ignore_ident((*(_132821_lexpr))._field_ident))) && ((!((*(_129543_a))._field_declarative)) || (!((*(this->self))._method_is_new_assign_ident((*(_132821_lexpr))._field_ident))))) {
					_132921_l=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_132821_lexpr))._field_expr);
					if (_132921_l == nullptr) {
						goto _iter_next_4398489088;
					}
				}
				jule::Ptr<_1b7509a90_Expr> _133921_expr = jule::new_struct<_1b7509a90_Expr>(new( std::nothrow ) _1b7509a90_Expr((*((*(_129543_a))._field_right))._field_token,_130917_right[_1a6bc3e29_i]));
				jule::Ptr<_1a8b431d7_Eval> _134021_eval = (((_132921_l != nullptr)) ? ((*((*(this->self))._field_s))._method_evalp(this->self,(*(_132921_l))._field_kind)) : ((*((*(this->self))._field_s))._method_eval(this->self)));
				jule::Ptr<_1a8b431d7_Data> _134521_r = (*(_134021_eval))._method_eval_expr(_133921_expr);
				if (_134521_r == nullptr) {
					goto _iter_next_4398489088;
				}
				(*(_132117_right_tuple))._field_datas = jule::alloc_for_append((*(_132117_right_tuple))._field_datas,1);(*(_132117_right_tuple))._field_datas.__push(_134521_r);
				(*(this->self))._method___process_end_part_of_multi_assign(_132317_st,_129543_a,_132821_lexpr,_132921_l,_134521_r);
			}
			_iter_next_4398489088:;
			++it;
			_1a6bc3e29_i++;
			goto _iter_begin_4398489088;
		}
		_iter_end_4398489088:;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_132317_st));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_assign_st(jule::Ptr<_1b7509a90_AssignSt> _135839_a) {
	if (_1b7553d92_is_postfix_op((*(_135839_a))._field_setter._field_kind)) {
		(*(this->self))._method_check_postfix(_135839_a);
		return;
	}
	if (((*(_135839_a))._field_left.len() == 1LL) && (!((*(_135839_a))._field_declarative))) {
		(*(this->self))._method_check_single_assign(_135839_a);
		return;
	}
	(*(this->self))._method_check_multi_assign(_135839_a);
}



inline jule::Ptr<_1a6bc3e29_Scope> _1a6bc3e29_ScopeChecker::_method_check_case_scope(jule::Ptr<_1a6bc3e29_Case>& _137237_c,jule::Ptr<_1b7509a90_ScopeTree>& _137252_tree) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _137317_ssc = (*(this->self))._method_new_child_checker();
	(*(_137317_ssc))._field_cse=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_137237_c));
	return (*(this->self))._method_check_child_sc(_137252_tree,_137317_ssc);
}



inline jule::Ptr<_1a6bc3e29_Case> _1a6bc3e29_ScopeChecker::_method_check_case(jule::Ptr<_1a6bc3e29_Match> _137834_m,jule::Int _137845_i,jule::Ptr<_1b7509a90_Case> _137857_c,jule::Ptr<_1a8b431d7_Data> _137887_expr) {
	jule::Ptr<_1a6bc3e29_Case> _137917__case = (*(_137834_m))._field_cases[_137845_i];
	(*(_137917__case))._field_exprs=jule::Slice<jule::Ptr<_1a8b431d7_Data>>::alloc(0LL,static_cast<jule::I64>((*(_137857_c))._field_exprs.len()));
	jule::Bool _138117_generic_matched = false;
	{
		auto &expr = (*(_137857_c))._field_exprs;
		auto it = expr.begin();
		_iter_begin_4398537488:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Expr> _1a6bc3e29_e = *it;
			{
				if ((*(_137834_m))._field_type_match) {
					jule::Ptr<_1a8b431d7_Eval> _138525_eval = jule::new_struct_ptr<_1a8b431d7_Eval>(new( std::nothrow ) _1a8b431d7_Eval((*(this->self))._field_s,this->self,jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a7003e4b_Var>(),jule::Ptr<_1b7905331_FieldIns>()));
					jule::Ptr<_1a8b431d7_Data> _139025_d = (*(_138525_eval))._method_eval(_1a6bc3e29_e);
					if (_139025_d != nullptr) {
						(*(_137917__case))._field_exprs = jule::alloc_for_append((*(_137917__case))._field_exprs,1);(*(_137917__case))._field_exprs.__push(_139025_d);
						if (_1a6bc3e29_count_match_type(_137834_m,(*(_139025_d))._field_kind) > 1LL) {
							(*((*(this->self))._field_s))._method_push_err((*(_1a6bc3e29_e))._field_token,jule::Str("duplicated case: type @ is already checked", 42),jule::Slice<jule::Any>({jule::Any((*((*(_139025_d))._field_kind))._method_to_str())}));
						}
					}
					if ((*((*(_137887_expr))._field_kind))._field_generic) {
						_138117_generic_matched=_138117_generic_matched || (*((*(_137887_expr))._field_kind))._method_equals((*(_139025_d))._field_kind);
					} else {
						jule::Ptr<_1b76b472d_Trait> _140125_trt = (*((*(_137887_expr))._field_kind))._method_trt();
						if (_140125_trt != nullptr) {
							(*((*(this->self))._field_s))._method_check_type_compatibility((*(_137887_expr))._field_kind,(*(_139025_d))._field_kind,(*(_1a6bc3e29_e))._field_token);
						}
					}
					goto _iter_next_4398537488;
				}
				jule::Ptr<_1a8b431d7_Data> _141021_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_1a6bc3e29_e);
				if (_141021_d == nullptr) {
					goto _iter_next_4398537488;
				}
				(*(_137917__case))._field_exprs = jule::alloc_for_append((*(_137917__case))._field_exprs,1);(*(_137917__case))._field_exprs.__push(_141021_d);
				_1a700327a_AssignTypeChecker _141721_checker = _1a700327a_AssignTypeChecker((*(this->self))._field_s,(*(_137887_expr))._field_kind,_141021_d,(*(_1a6bc3e29_e))._field_token);
				_141721_checker._method_check();
			}
			_iter_next_4398537488:;
			++it;
			goto _iter_begin_4398537488;
		}
		_iter_end_4398537488:;
	}
	if (((!((*(_137834_m))._field_type_match)) || (!((*((*(_137887_expr))._field_kind))._field_generic))) || _138117_generic_matched) {
		(*(_137917__case))._field_scope=(*(this->self))._method_check_case_scope(_137917__case,(*(_137857_c))._field_scope);
	}
	return _137917__case;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_cases(jule::Ptr<_1b7509a90_MatchCase>& _143236_m,jule::Ptr<_1a6bc3e29_Match> _143255_rm,jule::Ptr<_1a8b431d7_Data> _143271_expr) {
	(*(_143255_rm))._field_cases=jule::Slice<jule::Ptr<_1a6bc3e29_Case>>::alloc(static_cast<jule::I64>((*(_143236_m))._field_cases.len()));
	{
		auto &expr = (*(_143236_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_4398574928:;
		if (it != expr.end()) {
			jule::Int _1a6bc3e29_i = it - expr.begin();
			{
				jule::Ptr<_1a6bc3e29_Case> _143521__case = jule::new_struct<_1a6bc3e29_Case>(new( std::nothrow ) _1a6bc3e29_Case(_143255_rm,jule::Ptr<_1a6bc3e29_Scope>(),jule::Slice<jule::Ptr<_1a8b431d7_Data>>(),jule::Ptr<_1a6bc3e29_Case>()));
				if (_1a6bc3e29_i > 0LL) {
					(*((*(_143255_rm))._field_cases[_1a6bc3e29_i - 1LL]))._field_next=_143521__case;
				}
				(*(_143255_rm))._field_cases[_1a6bc3e29_i]=_143521__case;
			}
			_iter_next_4398574928:;
			++it;
			_1a6bc3e29_i++;
			goto _iter_begin_4398574928;
		}
		_iter_end_4398574928:;
	}
	if (((*(_143255_rm))._field_default != nullptr) && ((*(_143236_m))._field_cases.len() > 0LL)) {
		(*((*(_143255_rm))._field_cases[(*(_143255_rm))._field_cases.len() - 1LL]))._field_next=(*(_143255_rm))._field_default;
	}
	{
		auto &expr = (*(_143236_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_4398587840:;
		if (it != expr.end()) {
			jule::Int _1a6bc3e29_i = it - expr.begin();
			jule::Ptr<_1b7509a90_Case> _1a6bc3e29_c = *it;
			{
				(*(this->self))._method_check_case(_143255_rm,_1a6bc3e29_i,_1a6bc3e29_c,_143271_expr);
			}
			_iter_next_4398587840:;
			++it;
			_1a6bc3e29_i++;
			goto _iter_begin_4398587840;
		}
		_iter_end_4398587840:;
	}
}



inline jule::Ptr<_1a6bc3e29_Case> _1a6bc3e29_ScopeChecker::_method_check_default(jule::Ptr<_1a6bc3e29_Match> _145537_m,jule::Ptr<_1b7509a90_Else> _145552_d) {
	jule::Ptr<_1a6bc3e29_Case> _145617_def = jule::new_struct<_1a6bc3e29_Case>(new( std::nothrow ) _1a6bc3e29_Case(_145537_m,jule::Ptr<_1a6bc3e29_Scope>(),jule::Slice<jule::Ptr<_1a8b431d7_Data>>(),jule::Ptr<_1a6bc3e29_Case>()));
	(*(_145617_def))._field_scope=(*(this->self))._method_check_case_scope(_145617_def,(*(_145552_d))._field_scope);
	return _145617_def;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_comptime_panic(jule::Ptr<_1a6bc3e29_Scope>& _146340_s,_1b7553d92_Token _146351_error_token) {
	if ((*(_146340_s))._field_stmts.len() != 1LL) {
		return;
	}
	jule::Any _146813_stmt = (*(_146340_s))._field_stmts[0LL];
	{
		auto &_match_expr{ _146813_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
			_case_begin_4398602896:;
			{
				jule::Ptr<_1a8b431d7_Data> _147117_d = _146813_stmt.operator jule::Ptr<_1a8b431d7_Data>();
				{
					auto &_match_expr{ (*(_147117_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>>()) {
						_case_begin_4398605888:;
						{
							jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel> _147421_m = (*(_147117_d))._field_model.operator jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>();
							{
								auto &_match_expr{ (*(_147421_m))._field_expr };
								
								if (_match_expr.type_is<jule::Ptr<_1b6dd59aa_Const>>()) {
									_case_begin_4398609200:;
									{
										jule::Ptr<_1b6dd59aa_Const> _147725_c = (*(_147421_m))._field_expr.operator jule::Ptr<_1b6dd59aa_Const>();
										if ((*(_147725_c))._method_is_str()) {
											(*((*this)._field_s))._method_push_err(_146351_error_token,jule::Str("compile-time panic: @", 21),jule::Slice<jule::Any>({jule::Any((*(_147725_c))._method_read_str())}));
										}
									}
								}
								_match_end_4398609120:;
							}
						}
					}
					_match_end_4398605760:;
				}
			}
		}
		_match_end_4398602816:;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_push_type_match(jule::Ptr<_1a6bc3e29_Match> _148639_tm,jule::Ptr<_1b7509a90_MatchCase>& _148652_m) {
	if ((*((*((*(_148639_tm))._field_expr))._field_kind))._field_generic) {
		{
			auto &expr = (*(_148639_tm))._field_cases;
			auto it = expr.begin();
			_iter_begin_4398617552:;
			if (it != expr.end()) {
				jule::Int _1a6bc3e29_i = it - expr.begin();
				jule::Ptr<_1a6bc3e29_Case> _1a6bc3e29_c = *it;
				{
					if ((*(_1a6bc3e29_c))._field_scope != nullptr) {
						(*(_148639_tm))._field_cases=nullptr;
						(*(_148639_tm))._field_default=_1a6bc3e29_c;
						(*(this->self))._method_check_comptime_panic((*(_1a6bc3e29_c))._field_scope,(*((*(_148652_m))._field_cases[_1a6bc3e29_i]))._field_token);
						goto _julec_label_push;
					}
				}
				_iter_next_4398617552:;
				++it;
				_1a6bc3e29_i++;
				goto _iter_begin_4398617552;
			}
			_iter_end_4398617552:;
		}
		if ((*(_148639_tm))._field_default != nullptr) {
			(*(this->self))._method_check_comptime_panic((*((*(_148639_tm))._field_default))._field_scope,(*((*(_148652_m))._field_default))._field_token);
		}
		(*(_148639_tm))._field_cases=nullptr;
	}
	_julec_label_push:;
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_148639_tm));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_type_match(jule::Ptr<_1b7509a90_MatchCase>& _150841_m) {
	jule::Ptr<_1a8b431d7_Data> _150917_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval((*(_150841_m))._field_expr);
	if (_150917_d == nullptr) {
		return;
	}
	if ((!((*((*(_150917_d))._field_kind))._field_generic)) && (!((((*((*(_150917_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_150917_d))._field_kind))._method_prim()))._method_is_any()) || ((*((*(_150917_d))._field_kind))._method_trt() != nullptr)))) {
		(*((*(this->self))._field_s))._method_push_err((*((*(_150841_m))._field_expr))._field_token,jule::Str("type-match must be have <any>, <trait> or <generic> typed expression", 68),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1a6bc3e29_Match> _152017_tm = jule::new_struct<_1a6bc3e29_Match>(new( std::nothrow ) _1a6bc3e29_Match(_150917_d,true,jule::Slice<jule::Ptr<_1a6bc3e29_Case>>(),jule::Ptr<_1a6bc3e29_Case>()));
	if ((*(_150841_m))._field_default != nullptr) {
		(*(_152017_tm))._field_default=(*(this->self))._method_check_default(_152017_tm,(*(_150841_m))._field_default);
	}
	(*(this->self))._method_check_cases(_150841_m,_152017_tm,_150917_d);
	(*(this->self))._method_push_type_match(_152017_tm,_150841_m);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_common_match(jule::Ptr<_1b7509a90_MatchCase>& _153343_m) {
	jule::Ptr<_1a8b431d7_Data> _153417_d = nullptr;
	if ((*(_153343_m))._field_expr == nullptr) {
		_153417_d=jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1b6dd59aa_Const::_static_method_new_bool(true)));
		(*(_153417_d))._field_model=jule::Any((*(_153417_d))._field_constant);
	} else {
		_153417_d=(*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_153343_m))._field_expr);
		if (_153417_d == nullptr) {
			return;
		}
	}
	jule::Ptr<_1a6bc3e29_Match> _154817_mc = jule::new_struct<_1a6bc3e29_Match>(new( std::nothrow ) _1a6bc3e29_Match(_153417_d,jule::Bool(),jule::Slice<jule::Ptr<_1a6bc3e29_Case>>(),jule::Ptr<_1a6bc3e29_Case>()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_154817_mc));
	if ((*(_153343_m))._field_default != nullptr) {
		(*(_154817_mc))._field_default=(*(this->self))._method_check_default(_154817_mc,(*(_153343_m))._field_default);
	}
	(*(this->self))._method_check_cases(_153343_m,_154817_mc,_153417_d);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_match(jule::Ptr<_1b7509a90_MatchCase> _156035_m) {
	if ((*(_156035_m))._field_type_match) {
		(*(this->self))._method_check_type_match(_156035_m);
		return;
	}
	(*(this->self))._method_check_common_match(_156035_m);
}



inline void _1a6bc3e29_ScopeChecker::_method_check_fall(jule::Ptr<_1b7509a90_FallSt> _156830_f) {
	if ((((*(this->self))._field_cse == 0LL) || (((*((*(this->self))._field_scope))._field_stmts.len() + 1LL) < (*((*(this->self))._field_scope))._field_stmts.len())) || (*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_156830_f))._field_token,jule::Str("fall keyword can only useable at end of the case scopes", 55),jule::Slice<jule::Any>());
		return;
	}
	_1a6bc3e29_Case* _157617__case = ((_1a6bc3e29_Case*)((*(this->self))._field_cse));
	if ((*(_157617__case))._field_next == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_156830_f))._field_token,jule::Str("fall cannot useable at final case", 33),jule::Slice<jule::Any>());
		(*((*(this->self))._field_s))._method_push_suggestion(jule::Str("remove \"fall\" keyword", 21),jule::Slice<jule::Any>());
		return;
	}
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(jule::new_struct<_1a6bc3e29_FallSt>(new( std::nothrow ) _1a6bc3e29_FallSt(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>((*(_157617__case))._field_next)))))));
}



inline jule::Ptr<_1a6bc3e29_BreakSt> _1a6bc3e29_ScopeChecker::_method_check_break_with_label(jule::Ptr<_1b7509a90_BreakSt> _158842_b) {
	jule::Ptr<_1a6bc3e29_BreakSt> _158917_brk = (*(this->self))._method_check_plain_break(_158842_b);
	if (_158917_brk == nullptr) {
		return nullptr;
	}
	(*(_158917_brk))._field_it=0LL;
	(*(_158917_brk))._field_mtch=0LL;
	jule::Ptr<_1a6bc3e29_ScopeLabel> _159917_label = _1a6bc3e29_find_label_parent((*(_158842_b))._field_label._field_kind,(*(this->self))._field_parent);
	if (_159917_label == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_158842_b))._field_label,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*(_158842_b))._field_label._field_kind)}));
		return nullptr;
	}
	(*(_159917_label))._field_used=true;
	if (((*(_159917_label))._field_pos + 1LL) >= (*((*((*(_159917_label))._field_scope))._field_scope))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_158842_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158842_b))._field_label._field_kind)}));
		return nullptr;
	}
	jule::Int _161213_i = (*(_159917_label))._field_pos + 1LL;
	if (_161213_i >= (*((*((*(_159917_label))._field_scope))._field_scope))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_158842_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158842_b))._field_label._field_kind)}));
	} else {
		jule::Any _161621_st = (*((*((*(_159917_label))._field_scope))._field_scope))._field_stmts[_161213_i];
		{
			auto &_match_expr{ _161621_st };
			
			if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_InfIter>>()) {
				_case_begin_4398724256:;
				{
					(*(_158917_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161621_st.operator jule::Ptr<_1a6bc3e29_InfIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_RangeIter>>()) {
				_case_begin_4398727712:;
				{
					(*(_158917_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161621_st.operator jule::Ptr<_1a6bc3e29_RangeIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_WhileIter>>()) {
				_case_begin_4398727808:;
				{
					(*(_158917_brk))._field_it=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161621_st.operator jule::Ptr<_1a6bc3e29_WhileIter>()));
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Match>>()) {
				_case_begin_4398727904:;
				{
					(*(_158917_brk))._field_mtch=static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_161621_st.operator jule::Ptr<_1a6bc3e29_Match>()));
				}
			}
			else {
				_case_begin_4398727248:;
				{
					(*((*(this->self))._field_s))._method_push_err((*(_158842_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158842_b))._field_label._field_kind)}));
				}
			}
			_match_end_4398727168:;
		}
	}
	if ((*(_158917_brk))._field_it != 0LL) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_158917_brk))._field_it)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_158842_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158842_b))._field_label._field_kind)}));
		}
	}
	if ((*(_158917_brk))._field_mtch != 0LL) {
		if ((!((*(this->self))._method_check_valid_break_label((*(_158917_brk))._field_mtch)))) {
			(*((*(this->self))._field_s))._method_push_err((*(_158842_b))._field_label,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_158842_b))._field_label._field_kind)}));
		}
	}
	return _158917_brk;
}



inline jule::Ptr<_1a6bc3e29_BreakSt> _1a6bc3e29_ScopeChecker::_method_check_plain_break(jule::Ptr<_1b7509a90_BreakSt> _164137_b) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_164137_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a6bc3e29_ScopeChecker> _164717_scope = this->self;
	_julec_label_iter:;
	{
		
		if (((((*(_164717_scope))._field_it == 0LL) && ((*(_164717_scope))._field_cse == 0LL)) && ((*(_164717_scope))._field_parent != nullptr)) && ((*(_164717_scope))._field_owner == nullptr)) {
			_case_begin_4398754496:;
			{
				_164717_scope=(*(_164717_scope))._field_parent;
				goto _julec_label_iter;
			}
		}
		else if ((*(_164717_scope))._field_it != 0LL) {
			_case_begin_4398754608:;
			{
				return jule::new_struct<_1a6bc3e29_BreakSt>(new( std::nothrow ) _1a6bc3e29_BreakSt((*(_164717_scope))._field_it,jule::Uintptr()));
			}
		}
		else if ((*(_164717_scope))._field_cse != 0LL) {
			_case_begin_4398754720:;
			{
				return jule::new_struct<_1a6bc3e29_BreakSt>(new( std::nothrow ) _1a6bc3e29_BreakSt(jule::Uintptr(),static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>((*(((_1a6bc3e29_Case*)((*(_164717_scope))._field_cse))))._field_owner)))));
			}
		}
		_match_end_4398754320:;
	}
	(*((*(this->self))._field_s))._method_push_err((*(_164137_b))._field_token,jule::Str("break keyword is cannot used at out of iteration and match cases", 64),jule::Slice<jule::Any>());
	return nullptr;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_break(jule::Ptr<_1b7509a90_BreakSt> _166531_b) {
	if ((*(_166531_b))._field_label._field_id != 0LLU) {
		jule::Ptr<_1a6bc3e29_BreakSt> _166721_brk = (*(this->self))._method_check_break_with_label(_166531_b);
		(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_166721_brk));
		return;
	}
	jule::Ptr<_1a6bc3e29_BreakSt> _167217_brk = (*(this->self))._method_check_plain_break(_166531_b);
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_167217_brk));
}



inline void _1a6bc3e29_ScopeChecker::_method_check_ret(jule::Ptr<_1b7509a90_RetSt> _167633_r) {
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_167633_r))._field_token,jule::Str("deferred scopes are not supports return statements", 50),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a6bc3e29_RetSt> _168117_rt = jule::new_struct<_1a6bc3e29_RetSt>(new( std::nothrow ) _1a6bc3e29_RetSt((*((*(this->self))._method_get_root()))._field_owner,jule::Slice<jule::Ptr<_1a7003e4b_Var>>(),jule::Any()));
	(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_168117_rt));
	jule::Ptr<_1a700327a_RetTypeChecker> _168617_rtc = jule::new_struct<_1a700327a_RetTypeChecker>(new( std::nothrow ) _1a700327a_RetTypeChecker(this->self,(*(_168117_rt))._field_func,jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1b7509a90_Expr>>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>(),(*(_167633_r))._field_token,jule::Any()));
	jule::Bool _169113_ok = (*(_168617_rtc))._method_check((*(_167633_r))._field_expr);
	if ((!(_169113_ok))) {
		return;
	}
	if (((*(_167633_r))._field_expr == nullptr) && ((*(_168617_rtc))._field_vars.len() == 0LL)) {
		return;
	}
	(*(_168117_rt))._field_vars=(*(_168617_rtc))._field_vars;
	if ((*(_167633_r))._field_expr != nullptr) {
		(*(_168117_rt))._field_expr=(*(_168617_rtc))._field_model;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_use_expr(jule::Ptr<_1b7509a90_UseExpr> _170734_ue) {
	if ((*(this->self))._field_result == nullptr) {
		(*((*(this->self))._field_s))._method_push_err((*(_170734_ue))._field_token,jule::Str("use expressions cannot useable out of exceptional handler scopes", 64),jule::Slice<jule::Any>());
		return;
	}
	if ((*(this->self))._method_is_deferred()) {
		(*((*(this->self))._field_s))._method_push_err((*(_170734_ue))._field_token,jule::Str("use expressions cannot useable in deferred scopes", 49),jule::Slice<jule::Any>());
	}
	if (((*(this->self))._field_i + 1LL) < (*((*(this->self))._field_tree))._field_stmts.len()) {
		(*((*(this->self))._field_s))._method_push_err((*(_170734_ue))._field_token,jule::Str("use expressions must be last statement of scope", 47),jule::Slice<jule::Any>());
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_node(jule::Any& _172435_node) {
	{
		auto &_match_expr{ _172435_node };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_Comment>>()) {
			_case_begin_4398836672:;
			{
				goto _match_end_4398835808;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_ScopeTree>>()) {
			_case_begin_4398837600:;
			{
				(*(this->self))._method_check_anon_scope(_172435_node.operator jule::Ptr<_1b7509a90_ScopeTree>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_VarDecl>>()) {
			_case_begin_4398835696:;
			{
				(*(this->self))._method_check_var_decl(_172435_node.operator jule::Ptr<_1b7509a90_VarDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TypeAliasDecl>>()) {
			_case_begin_4398836896:;
			{
				(*(this->self))._method_check_type_alias_decl(_172435_node.operator jule::Ptr<_1b7509a90_TypeAliasDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_Expr>>()) {
			_case_begin_4398836992:;
			{
				(*(this->self))._method_check_expr(_172435_node.operator jule::Ptr<_1b7509a90_Expr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_CoExpr>>()) {
			_case_begin_4398837088:;
			{
				(*(this->self))._method_check_co_expr(_172435_node.operator jule::Ptr<_1b7509a90_CoExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_Conditional>>()) {
			_case_begin_4398837184:;
			{
				(*(this->self))._method_check_conditional(_172435_node.operator jule::Ptr<_1b7509a90_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_Iter>>()) {
			_case_begin_4398837280:;
			{
				(*(this->self))._method_check_iter(_172435_node.operator jule::Ptr<_1b7509a90_Iter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_ContSt>>()) {
			_case_begin_4398838032:;
			{
				(*(this->self))._method_check_cont(_172435_node.operator jule::Ptr<_1b7509a90_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_LabelSt>>()) {
			_case_begin_4398838128:;
			{
				(*(this->self))._method_check_label(_172435_node.operator jule::Ptr<_1b7509a90_LabelSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_GotoSt>>()) {
			_case_begin_4398838224:;
			{
				(*(this->self))._method_push_goto(_172435_node.operator jule::Ptr<_1b7509a90_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_AssignSt>>()) {
			_case_begin_4398838320:;
			{
				(*(this->self))._method_check_assign_st(_172435_node.operator jule::Ptr<_1b7509a90_AssignSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_MatchCase>>()) {
			_case_begin_4398838432:;
			{
				(*(this->self))._method_check_match(_172435_node.operator jule::Ptr<_1b7509a90_MatchCase>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_FallSt>>()) {
			_case_begin_4398838544:;
			{
				(*(this->self))._method_check_fall(_172435_node.operator jule::Ptr<_1b7509a90_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_BreakSt>>()) {
			_case_begin_4398838656:;
			{
				(*(this->self))._method_check_break(_172435_node.operator jule::Ptr<_1b7509a90_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_RetSt>>()) {
			_case_begin_4398838768:;
			{
				(*(this->self))._method_check_ret(_172435_node.operator jule::Ptr<_1b7509a90_RetSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_UseExpr>>()) {
			_case_begin_4398838880:;
			{
				(*(this->self))._method_check_use_expr(_172435_node.operator jule::Ptr<_1b7509a90_UseExpr>());
			}
		}
		else {
			_case_begin_4398835888:;
			{
				jule::outln(jule::Str("error <unimplemented scope node>", 32));
			}
		}
		_match_end_4398835808:;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_result(void) {
	jule::Any _174817_stmt = (*((*(this->self))._field_tree))._field_stmts[(*((*(this->self))._field_tree))._field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _174817_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_UseExpr>>()) {
			_case_begin_4398878720:;
			{
				jule::Ptr<_1b7509a90_UseExpr> _175121_ue = _174817_stmt.operator jule::Ptr<_1b7509a90_UseExpr>();
				jule::Ptr<_1a8b431d7_Data> _175221_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr((*(_175121_ue))._field_expr);
				if (_175221_d == nullptr) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_175221_d));
				jule::Ptr<_1a700327a_RetTypeChecker> _175921_rtc = jule::new_struct<_1a700327a_RetTypeChecker>(new( std::nothrow ) _1a700327a_RetTypeChecker(this->self,jule::Ptr<_1a691a500_FnIns>(),_1a700327a_get_result_types((*(this->self))._field_result),jule::Slice<jule::Ptr<_1b7509a90_Expr>>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>(),(*((*(_175121_ue))._field_expr))._field_token,jule::Any()));
				(*(_175921_rtc))._method_check((*(_175121_ue))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_Expr>>()) {
			_case_begin_4398879248:;
			{
				jule::Ptr<_1b7509a90_Expr> _176721_expr = _174817_stmt.operator jule::Ptr<_1b7509a90_Expr>();
				jule::Ptr<_1a8b431d7_Data> _176821_d = (*((*((*(this->self))._field_s))._method_eval(this->self)))._method_eval_expr(_176721_expr);
				if (_176821_d == nullptr) {
					return;
				}
				(*((*(this->self))._field_scope))._field_stmts = jule::alloc_for_append((*((*(this->self))._field_scope))._field_stmts,1);(*((*(this->self))._field_scope))._field_stmts.__push(jule::Any(_176821_d));
				{
					auto &_match_expr{ (*(_176821_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>>()) {
						_case_begin_4398897024:;
						{
							jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel> _177725_m = (*(_176821_d))._field_model.operator jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>();
							(*(this->self))._method_process_error_call(_177725_m,(*(_176721_expr))._field_token);
						}
					}
					else {
						_case_begin_4398896576:;
						{
							return;
						}
					}
					_match_end_4398896496:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_GotoSt>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_BreakSt>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_ContSt>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_RetSt>>()) {
			_case_begin_4398879344:;
			{
				(*(this->self))._method_check_node(_174817_stmt);
			}
		}
		else {
			_case_begin_4398877136:;
			{
				(*(this->self))._method_check_node(_174817_stmt);
				return;
			}
		}
		_match_end_4398877056:;
	}
	(*(this->self))._field_result=nullptr;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_tree(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < (*((*(this->self))._field_tree))._field_stmts.len(); ((*(this->self))._field_i)++) {
		{
			jule::Any _180221_stmt = (*((*(this->self))._field_tree))._field_stmts[(*(this->self))._field_i];
			(*(this->self))._method_check_node(_180221_stmt);
		}
	_iter_next_4398906608:;
	}
	_iter_end_4398906608:;
	if (((*(this->self))._field_result != nullptr) && ((*((*(this->self))._field_tree))._field_stmts.len() != 0LL)) {
		(*(this->self))._method_check_result();
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_goto(jule::Ptr<_1a6bc3e29_ScopeGoto>& _181134_gt,jule::Ptr<_1a6bc3e29_ScopeLabel>& _181155_label) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _181217_gtsc = (*(_181134_gt))._field_scope;
	while (((*(_181217_gtsc))._field_child_index - 1LL) > (*((*(_181155_label))._field_scope))._field_child_index) {
		{
			_181217_gtsc=(*(_181217_gtsc))._field_parent;
		}
	_iter_next_4398919024:;
	}
	_iter_end_4398919024:;
	jule::Int _181717_n = 0LL;
	if ((*(_181217_gtsc))._field_scope == (*((*(_181155_label))._field_scope))._field_scope) {
		if ((*(_181134_gt))._field_pos > (*(_181155_label))._field_pos) {
			return;
		}
		_181717_n=(*(_181134_gt))._field_pos;
	}
	jule::Int _183017_i = (*(_181155_label))._field_pos - 1LL;
	if (_181717_n == 0LL) {
		{
			auto &expr = (*((*((*(_181155_label))._field_scope))._field_scope))._field_stmts;
			auto it = expr.begin();
			_iter_begin_4398929696:;
			if (it != expr.end()) {
				jule::Int _1a6bc3e29_j = it - expr.begin();
				jule::Any &_1a6bc3e29_stmt = *it;
				{
					if (_1a6bc3e29_stmt_is_goto_scope(_1a6bc3e29_stmt,(*(_181217_gtsc))._field_scope)) {
						_181717_n=_1a6bc3e29_j;
						goto _iter_end_4398929696;
					}
				}
				_iter_next_4398929696:;
				++it;
				_1a6bc3e29_j++;
				goto _iter_begin_4398929696;
			}
			_iter_end_4398929696:;
		}
	}
	for (; _183017_i >= _181717_n; (_183017_i)--) {
		{
			jule::Any _184321_stmt = (*((*((*(_181155_label))._field_scope))._field_scope))._field_stmts[_183017_i];
			if (_1a6bc3e29_st_is_def(_184321_stmt)) {
				(*((*this)._field_s))._method_push_err((*((*(_181134_gt))._field_gt))._field_token,jule::Str("goto @ jumps over declaration(s)", 32),jule::Slice<jule::Any>({jule::Any((*((*(_181134_gt))._field_gt))._field_label._field_kind)}));
				return;
			}
		}
	_iter_next_4398933808:;
	}
	_iter_end_4398933808:;
}



inline void _1a6bc3e29_ScopeChecker::_method_check_gotos(void) {
	{
		auto &expr = (*((*this)._field_gotos));
		auto it = expr.begin();
		_iter_begin_4398940960:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bc3e29_ScopeGoto> _1a6bc3e29_gt = *it;
			{
				jule::Ptr<_1a6bc3e29_ScopeLabel> _185321_label = (*this)._method_find_label_all((*((*(_1a6bc3e29_gt))._field_gt))._field_label._field_kind);
				if (_185321_label == nullptr) {
					(*((*this)._field_s))._method_push_err((*((*(_1a6bc3e29_gt))._field_gt))._field_token,jule::Str("not exist any label in this identifier: @", 41),jule::Slice<jule::Any>({jule::Any((*((*(_1a6bc3e29_gt))._field_gt))._field_label._field_kind)}));
					goto _iter_next_4398940960;
				}
				(*(_185321_label))._field_used=true;
				(*this)._method_check_goto(_1a6bc3e29_gt,_185321_label);
			}
			_iter_next_4398940960:;
			++it;
			goto _iter_begin_4398940960;
		}
		_iter_end_4398940960:;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_labels(void) {
	{
		auto &expr = (*((*this)._field_labels));
		auto it = expr.begin();
		_iter_begin_4398950944:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bc3e29_ScopeLabel> &_1a6bc3e29_l = *it;
			{
				if ((!((*(_1a6bc3e29_l))._field_used))) {
					(*((*this)._field_s))._method_push_err((*(_1a6bc3e29_l))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*((*(_1a6bc3e29_l))._field_label))._field_ident)}));
				}
			}
			_iter_next_4398950944:;
			++it;
			goto _iter_begin_4398950944;
		}
		_iter_end_4398950944:;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_vars(void) {
	{
		auto &expr = (*((*this)._field_table))._field_vars;
		auto it = expr.begin();
		_iter_begin_4398956992:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> &_1a6bc3e29_v = *it;
			{
				if ((((!((*(_1a6bc3e29_v))._field_used)) && (!(_1b7553d92_is_ignore_ident((*(_1a6bc3e29_v))._field_ident)))) && (!(_1b7553d92_is_anon_ident((*(_1a6bc3e29_v))._field_ident)))) && ((*(_1a6bc3e29_v))._field_ident != jule::Str("self", 4))) {
					(*((*this)._field_s))._method_push_err((*(_1a6bc3e29_v))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_1a6bc3e29_v))._field_ident)}));
				}
			}
			_iter_next_4398956992:;
			++it;
			goto _iter_begin_4398956992;
		}
		_iter_end_4398956992:;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check_aliases(void) {
	{
		auto &expr = (*((*this)._field_table))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4398966176:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeAlias> &_1a6bc3e29_a = *it;
			{
				if (((!((*(_1a6bc3e29_a))._field_used)) && (!(_1b7553d92_is_ignore_ident((*(_1a6bc3e29_a))._field_ident)))) && (!(_1b7553d92_is_anon_ident((*(_1a6bc3e29_a))._field_ident)))) {
					(*((*this)._field_s))._method_push_err((*(_1a6bc3e29_a))._field_token,jule::Str("@ declared but not used", 23),jule::Slice<jule::Any>({jule::Any((*(_1a6bc3e29_a))._field_ident)}));
				}
			}
			_iter_next_4398966176:;
			++it;
			goto _iter_begin_4398966176;
		}
		_iter_end_4398966176:;
	}
}



inline void _1a6bc3e29_ScopeChecker::_method_check(jule::Ptr<_1b7509a90_ScopeTree>& _188930_tree,jule::Ptr<_1a6bc3e29_Scope>& _188953_s) {
	(*(_188953_s))._field_deferred=(*(_188930_tree))._field_deferred;
	(*(_188953_s))._field_unsafety=(*(_188930_tree))._field_unsafety;
	jule::I64 _189313_errors = (*((*(this->self))._field_s))._field_errors.len();
	(*(this->self))._field_tree=_188930_tree;
	(*(this->self))._field_scope=_188953_s;
	(*(this->self))._method_check_tree();
	if (_189313_errors == (*((*(this->self))._field_s))._field_errors.len()) {
		(*(this->self))._method_check_vars();
		(*(this->self))._method_check_aliases();
		if ((*(this->self))._method_is_root()) {
			(*(this->self))._method_check_gotos();
			(*(this->self))._method_check_labels();
		}
	}
}



inline jule::Ptr<_1a6bc3e29_ScopeChecker> _1a6bc3e29_ScopeChecker::_method_new_child_checker(void) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _191317_base = _1a6bc3e29_new_scope_checker_base((*(this->self))._field_s,nullptr);
	(*(_191317_base))._field_parent=this->self;
	(*(_191317_base))._field_labels=(*(this->self))._field_labels;
	(*(_191317_base))._field_gotos=(*(this->self))._field_gotos;
	(*(_191317_base))._field_child_index=static_cast<jule::Int>((*(this->self))._field_child_index + 1LL);
	return _191317_base;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_ScopeChecker &_Src) {
	_Stream << "ScopeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "child_index:" << _Src._field_child_index << ", ";
	_Stream << "table:" << _Src._field_table << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "tree:" << _Src._field_tree << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "it:" << _Src._field_it << ", ";
	_Stream << "cse:" << _Src._field_cse << ", ";
	_Stream << "labels:" << _Src._field_labels << ", ";
	_Stream << "gotos:" << _Src._field_gotos << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _1a6e9963e_DirectiveChecker::_method_check_cdef(jule::Ptr<_1b7509a90_Directive>& _1630_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1a691a500_Fn>>()) {
			_case_begin_4398998736:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1a691a500_Fn>()))._field_cpp_linked) {
					goto _match_end_4398998848;
				}
				goto _case_begin_4398998928;
			}
		}
		else {
			_case_begin_4398998928:;
			{
				(*((*this)._field_s))._method_push_err((*(_1630_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_1630_d))._field_tag._field_kind)}));
			}
		}
		_match_end_4398998848:;
	}
	if ((*(_1630_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_1630_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1a6e9963e_DirectiveChecker::_method_check_typedef(jule::Ptr<_1b7509a90_Directive>& _3233_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4399009568:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1b7905331_Struct>()))._field_cpp_linked) {
					goto _match_end_4399009680;
				}
				goto _case_begin_4399009760;
			}
		}
		else {
			_case_begin_4399009760:;
			{
				(*((*this)._field_s))._method_push_err((*(_3233_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_3233_d))._field_tag._field_kind)}));
			}
		}
		_match_end_4399009680:;
	}
	if ((*(_3233_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_3233_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1a6e9963e_DirectiveChecker::_method_check_derive(jule::Ptr<_1b7509a90_Directive>& _4832_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4399020400:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1b7905331_Struct>()))._field_cpp_linked))) {
					goto _match_end_4399020512;
				}
				goto _case_begin_4399020592;
			}
		}
		else {
			_case_begin_4399020592:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>());
			}
		}
		_match_end_4399020512:;
	}
	if ((*(_4832_d))._field_args.len() == 0LL) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		(*((*this)._field_s))._method_push_suggestion(jule::Str("write an identifier because identifier expected", 47),jule::Slice<jule::Any>());
		return;
	} else if ((*(_4832_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	{
		auto &_match_expr{ (*(_4832_d))._field_args[0LL]._field_kind };
		
		if (_match_expr == jule::Str("Clone", 5)) {
			_case_begin_4399035600:;
		}
		else {
			_case_begin_4399034848:;
			{
				(*((*this)._field_s))._method_push_err((*(_4832_d))._field_args[0LL],jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_4832_d))._field_args[0LL]._field_kind)}));
			}
		}
		_match_end_4399034752:;
	}
}



inline void _1a6e9963e_DirectiveChecker::_method_check_namespace(jule::Ptr<_1b7509a90_Directive>& _7439_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4399041184:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1b7905331_Struct>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a691a500_Fn>>()) {
			_case_begin_4399041984:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1a691a500_Fn>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4399042080:;
			{
				if ((!((*((*this)._field_o.operator jule::Ptr<_1a7003e4b_Var>()))._field_cpp_linked))) {
					(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_4399041376:;
			{
				(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_7439_d))._field_tag._field_kind)}));
			}
		}
		_match_end_4399041296:;
	}
	if ((*(_7439_d))._field_args.len() == 0LL) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return;
	} else if ((*(_7439_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_7439_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1b7553d92_Token _10213_arg = (*(_7439_d))._field_args[0LL];
	if (_10213_arg._field_id != 6LLU) {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_10213_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_10213_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_7439_d))._field_args[0LL]._field_kind=_10213_arg._field_kind.slice(1LL,_10213_arg._field_kind.len() - 1LL);
}



inline void _1a6e9963e_DirectiveChecker::_method_check_deprecated(jule::Ptr<_1b7509a90_Directive>& _11640_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4399076624:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1b7905331_Struct>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a691a500_Fn>>()) {
			_case_begin_4399077424:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1a691a500_Fn>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4399077520:;
			{
				if ((*((*this)._field_o.operator jule::Ptr<_1a7003e4b_Var>()))._field_cpp_linked) {
					(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
				}
			}
		}
		else {
			_case_begin_4399076816:;
			{
				(*((*this)._field_s))._method_push_err((*(_11640_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_11640_d))._field_tag._field_kind)}));
			}
		}
		_match_end_4399076736:;
	}
	if ((*(_11640_d))._field_args.len() == 0LL) {
		return;
	}
	if ((*(_11640_d))._field_args.len() > 1LL) {
		(*((*this)._field_s))._method_push_err((*(_11640_d))._field_args[1LL],jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	_1b7553d92_Token _14413_arg = (*(_11640_d))._field_args[0LL];
	if (_14413_arg._field_id != 6LLU) {
		(*((*this)._field_s))._method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	if (_14413_arg._field_kind[0LL] != '\"') {
		(*((*this)._field_s))._method_push_err(_14413_arg,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return;
	}
	(*(_11640_d))._field_args[0LL]._field_kind=_14413_arg._field_kind.slice(1LL,_14413_arg._field_kind.len() - 1LL);
}



inline void _1a6e9963e_DirectiveChecker::_method_check_test(jule::Ptr<_1b7509a90_Directive>& _15831_d) {
	{
		auto &_match_expr{ (*this)._field_o };
		
		if (_match_expr.type_is<jule::Ptr<_1a691a500_Fn>>()) {
			_case_begin_4399109856:;
			{
				jule::Ptr<_1a691a500_Fn> _16117_f = (*this)._field_o.operator jule::Ptr<_1a691a500_Fn>();
				if (((!((*(_16117_f))._field_cpp_linked)) && (!((*(_16117_f))._method_is_init()))) && (!((*(_16117_f))._method_is_entry_point()))) {
					goto _match_end_4399109968;
				}
				if ((*(_16117_f))._method_is_method()) {
					(*((*this)._field_s))._method_push_err((*(_16117_f))._field_token,jule::Str("you cannot declarate test methods", 33),jule::Slice<jule::Any>());
					goto _match_end_4399109968;
				}
				goto _case_begin_4399110048;
			}
		}
		else {
			_case_begin_4399110048:;
			{
				(*((*this)._field_s))._method_push_err((*(_15831_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_15831_d))._field_tag._field_kind)}));
			}
		}
		_match_end_4399109968:;
	}
	if ((*(_15831_d))._field_args.len() > 0LL) {
		(*((*this)._field_s))._method_push_err((*(_15831_d))._field_args[0LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
	}
}



inline void _1a6e9963e_DirectiveChecker::_method_check_directive(jule::Ptr<_1b7509a90_Directive>& _17939_d) {
	{
		auto &_match_expr{ (*(_17939_d))._field_tag._field_kind };
		
		if (_match_expr == jule::Str("cdef", 4)) {
			_case_begin_4399127568:;
			{
				(*this)._method_check_cdef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("typedef", 7)) {
			_case_begin_4399127664:;
			{
				(*this)._method_check_typedef(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("derive", 6)) {
			_case_begin_4399127760:;
			{
				(*this)._method_check_derive(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("namespace", 9)) {
			_case_begin_4399127856:;
			{
				(*this)._method_check_namespace(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("deprecated", 10)) {
			_case_begin_4399130848:;
			{
				(*this)._method_check_deprecated(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("test", 4)) {
			_case_begin_4399130944:;
			{
				(*this)._method_check_test(_17939_d);
			}
		}
		else if (_match_expr == jule::Str("build", 5) || _match_expr == jule::Str("pass", 4)) {
			_case_begin_4399131040:;
			{
				(*((*this)._field_s))._method_push_err((*(_17939_d))._field_tag,jule::Str("directive @ is not supported by define", 38),jule::Slice<jule::Any>({jule::Any((*(_17939_d))._field_tag._field_kind)}));
			}
		}
		else {
			_case_begin_4399126592:;
			{
				(*((*this)._field_s))._method_push_err((*(_17939_d))._field_tag,jule::Str("invalid label: @", 16),jule::Slice<jule::Any>({jule::Any((*(_17939_d))._field_tag._field_kind)}));
			}
		}
		_match_end_4399127216:;
	}
}



inline void _1a6e9963e_DirectiveChecker::_method_check(void) {
	{
		auto &expr = (*this)._field_d;
		auto it = expr.begin();
		_iter_begin_4399143664:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> _1a6e9963e_d = *it;
			{
				(*this)._method_check_directive(_1a6e9963e_d);
			}
			_iter_next_4399143664:;
			++it;
			goto _iter_begin_4399143664;
		}
		_iter_end_4399143664:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6e9963e_DirectiveChecker &_Src) {
	_Stream << "DirectiveChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "o:" << _Src._field_o;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a6e9a574_Package::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a6e9a574_Package::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1a7003e4b_Var> _1a6e9a574_Package::_method_find_var(jule::Str _28731_ident,jule::Bool _28743_cpp_linked) {
	return _1a6e9a574_find_var_in_package((*this)._field_files,_28731_ident,_28743_cpp_linked);
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a6e9a574_Package::_method_find_type_alias(jule::Str _29338_ident,jule::Bool _29350_cpp_linked) {
	return _1a6e9a574_find_type_alias_in_package((*this)._field_files,_29338_ident,_29350_cpp_linked);
}



inline jule::Ptr<_1b7905331_Struct> _1a6e9a574_Package::_method_find_struct(jule::Str _29934_ident,jule::Bool _29946_cpp_linked) {
	return _1a6e9a574_find_struct_in_package((*this)._field_files,_29934_ident,_29946_cpp_linked);
}



inline jule::Ptr<_1a691a500_Fn> _1a6e9a574_Package::_method_find_fn(jule::Str _30530_ident,jule::Bool _30542_cpp_linked) {
	return _1a6e9a574_find_fn_in_package((*this)._field_files,_30530_ident,_30542_cpp_linked);
}



inline jule::Ptr<_1b76b472d_Trait> _1a6e9a574_Package::_method_find_trait(jule::Str _31133_ident) {
	return _1a6e9a574_find_trait_in_package((*this)._field_files,_31133_ident);
}



inline jule::Ptr<_1a6bb9150_Enum> _1a6e9a574_Package::_method_find_enum(jule::Str _31732_ident) {
	return _1a6e9a574_find_enum_in_package((*this)._field_files,_31732_ident);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6e9a574_Package &_Src) {
	_Stream << "Package{";
	_Stream << "files:" << _Src._field_files;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_Sema::_method_find_package(jule::Str _35535_ident) {
	return (*((*this)._field_file))._method_find_package(_35535_ident);
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_Sema::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)> _36537_selector) {
	return (*((*this)._field_file))._method_select_package(_36537_selector);
}



inline jule::Ptr<_1a7003e4b_Var> _1a7002752_Sema::_method_find_var(jule::Str _37531_ident,jule::Bool _37543_cpp_linked) {
	jule::Ptr<_1a7003e4b_Var> _37717_v = _1a6e9a574_find_var_in_package((*this)._field_files,_37531_ident,_37543_cpp_linked);
	if (_37717_v != nullptr) {
		return _37717_v;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399229920:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp = *it;
			{
				if ((!(_1a7002752_imp_is_lookupable(_1a7002752_imp,_37531_ident)))) {
					goto _iter_next_4399229920;
				}
				_37717_v=(*(_1a7002752_imp))._method_find_var(_37531_ident,_37543_cpp_linked);
				if ((_37717_v != nullptr) && (*this)._method_is_accessible_define((*(_37717_v))._field_public,(*(_37717_v))._field_token)) {
					return _37717_v;
				}
			}
			_iter_next_4399229920:;
			++it;
			goto _iter_begin_4399229920;
		}
		_iter_end_4399229920:;
	}
	return nullptr;
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a7002752_Sema::_method_find_type_alias(jule::Str _40238_ident,jule::Bool _40250_cpp_linked) {
	jule::Ptr<_1a6a19a50_TypeAlias> _40417_ta = _1a6e9a574_find_type_alias_in_package((*this)._field_files,_40238_ident,_40250_cpp_linked);
	if (_40417_ta != nullptr) {
		return _40417_ta;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399241680:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp = *it;
			{
				if ((!(_1a7002752_imp_is_lookupable(_1a7002752_imp,_40238_ident)))) {
					goto _iter_next_4399241680;
				}
				_40417_ta=(*(_1a7002752_imp))._method_find_type_alias(_40238_ident,_40250_cpp_linked);
				if ((_40417_ta != nullptr) && (*this)._method_is_accessible_define((*(_40417_ta))._field_public,(*(_40417_ta))._field_token)) {
					return _40417_ta;
				}
			}
			_iter_next_4399241680:;
			++it;
			goto _iter_begin_4399241680;
		}
		_iter_end_4399241680:;
	}
	return nullptr;
}



inline jule::Ptr<_1b7905331_Struct> _1a7002752_Sema::_method_find_struct(jule::Str _42934_ident,jule::Bool _42946_cpp_linked) {
	jule::Ptr<_1b7905331_Struct> _43117_s = _1a6e9a574_find_struct_in_package((*this)._field_files,_42934_ident,_42946_cpp_linked);
	if (_43117_s != nullptr) {
		return _43117_s;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399252128:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp = *it;
			{
				if ((!(_1a7002752_imp_is_lookupable(_1a7002752_imp,_42934_ident)))) {
					goto _iter_next_4399252128;
				}
				_43117_s=(*(_1a7002752_imp))._method_find_struct(_42934_ident,_42946_cpp_linked);
				if ((_43117_s != nullptr) && (*this)._method_is_accessible_define((*(_43117_s))._field_public,(*(_43117_s))._field_token)) {
					return _43117_s;
				}
			}
			_iter_next_4399252128:;
			++it;
			goto _iter_begin_4399252128;
		}
		_iter_end_4399252128:;
	}
	return nullptr;
}



inline jule::Ptr<_1a691a500_Fn> _1a7002752_Sema::_method_find_fn(jule::Str _45630_ident,jule::Bool _45642_cpp_linked) {
	jule::Ptr<_1a691a500_Fn> _45817_f = _1a6e9a574_find_fn_in_package((*this)._field_files,_45630_ident,_45642_cpp_linked);
	if (_45817_f != nullptr) {
		return _45817_f;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399262704:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp = *it;
			{
				if ((!(_1a7002752_imp_is_lookupable(_1a7002752_imp,_45630_ident)))) {
					goto _iter_next_4399262704;
				}
				_45817_f=(*(_1a7002752_imp))._method_find_fn(_45630_ident,_45642_cpp_linked);
				if ((_45817_f != nullptr) && (*this)._method_is_accessible_define((*(_45817_f))._field_public,(*(_45817_f))._field_token)) {
					return _45817_f;
				}
			}
			_iter_next_4399262704:;
			++it;
			goto _iter_begin_4399262704;
		}
		_iter_end_4399262704:;
	}
	return nullptr;
}



inline jule::Ptr<_1b76b472d_Trait> _1a7002752_Sema::_method_find_trait(jule::Str _48333_ident) {
	jule::Ptr<_1b76b472d_Trait> _48517_t = _1a6e9a574_find_trait_in_package((*this)._field_files,_48333_ident);
	if (_48517_t != nullptr) {
		return _48517_t;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399273216:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp = *it;
			{
				if ((!(_1a7002752_imp_is_lookupable(_1a7002752_imp,_48333_ident)))) {
					goto _iter_next_4399273216;
				}
				_48517_t=(*(_1a7002752_imp))._method_find_trait(_48333_ident);
				if ((_48517_t != nullptr) && (*this)._method_is_accessible_define((*(_48517_t))._field_public,(*(_48517_t))._field_token)) {
					return _48517_t;
				}
			}
			_iter_next_4399273216:;
			++it;
			goto _iter_begin_4399273216;
		}
		_iter_end_4399273216:;
	}
	return nullptr;
}



inline jule::Ptr<_1a6bb9150_Enum> _1a7002752_Sema::_method_find_enum(jule::Str _51032_ident) {
	jule::Ptr<_1a6bb9150_Enum> _51217_e = _1a6e9a574_find_enum_in_package((*this)._field_files,_51032_ident);
	if (_51217_e != nullptr) {
		return _51217_e;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399282848:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp = *it;
			{
				if ((!(_1a7002752_imp_is_lookupable(_1a7002752_imp,_51032_ident)))) {
					goto _iter_next_4399282848;
				}
				_51217_e=(*(_1a7002752_imp))._method_find_enum(_51032_ident);
				if ((_51217_e != nullptr) && (*this)._method_is_accessible_define((*(_51217_e))._field_public,(*(_51217_e))._field_token)) {
					return _51217_e;
				}
			}
			_iter_next_4399282848:;
			++it;
			goto _iter_begin_4399282848;
		}
		_iter_end_4399282848:;
	}
	return nullptr;
}



inline jule::Bool _1a7002752_Sema::_method_is_flag(jule::Int _53422_flags) {
	return ((*this)._field_flags & _53422_flags) == _53422_flags;
}



inline void _1a7002752_Sema::_method_set_current_file(jule::Ptr<_1a8acbe95_SymbolTable> _53639_f) {
	(*this)._field_file=_53639_f;
}



inline void _1a7002752_Sema::_method_push_err(_1b7553d92_Token _53827_token,jule::Str _53841_fmt,jule::Slice<jule::Any> _53854_args) {
	(*this)._field_errors = jule::alloc_for_append((*this)._field_errors,1);(*this)._field_errors.__push(_1a7002752_compiler_err(_53827_token,true,_53841_fmt,_53854_args));
}



inline void _1a7002752_Sema::_method_push_suggestion(jule::Str _54334_fmt,jule::Slice<jule::Any> _54347_args) {
	{
		_1a7002752_push_suggestion((&((*this)._field_errors[(*this)._field_errors.len() - 1LL])),_54334_fmt,_54347_args);
	}
}



inline jule::Bool _1a7002752_Sema::_method_is_accessible_define(jule::Bool _54835_public,_1b7553d92_Token _54849_token) {
	return (_54835_public || (_54849_token._field_file == nullptr)) || ((*((*((*this)._field_file))._field_file))._method_dir() == (*(_54849_token._field_file))._method_dir());
}



inline jule::Bool _1a7002752_Sema::_method_is_duplicated_ident(jule::Uintptr _55534_itself,jule::Str _55551_ident,jule::Bool _55563_cpp_linked) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_4399310128:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> &_1a7002752_f = *it;
			{
				if ((*(_1a7002752_f))._method_is_duplicated_ident(_55534_itself,_55551_ident,_55563_cpp_linked)) {
					return true;
				}
				{
					auto &expr = (*(_1a7002752_f))._field_imports;
					auto it = expr.begin();
					_iter_begin_4399315136:;
					if (it != expr.end()) {
						jule::Ptr<_1a6e9a574_ImportInfo> &_1a7002752_imp = *it;
						{
							{
								auto &expr = (*(_1a7002752_imp))._field_selected;
								auto it = expr.begin();
								_iter_begin_4399316976:;
								if (it != expr.end()) {
									_1b7553d92_Token &_1a7002752_selected = *it;
									{
										if (_1a7002752_selected._field_kind == _55551_ident) {
											return true;
										}
									}
									_iter_next_4399316976:;
									++it;
									goto _iter_begin_4399316976;
								}
								_iter_end_4399316976:;
							}
						}
						_iter_next_4399315136:;
						++it;
						goto _iter_begin_4399315136;
					}
					_iter_end_4399315136:;
				}
			}
			_iter_next_4399310128:;
			++it;
			goto _iter_begin_4399310128;
		}
		_iter_end_4399310128:;
	}
	return false;
}



inline void _1a7002752_Sema::_method_check_directives(jule::Slice<jule::Ptr<_1b7509a90_Directive>>& _57241_d,jule::Any _57267_o) {
	_1a6e9963e_DirectiveChecker _57317_dc = _1a6e9963e_DirectiveChecker(this->self,_57241_d,_57267_o);
	_57317_dc._method_check();
}



inline jule::Bool _1a7002752_Sema::_method_check_generic_quantity(jule::Int _58141_required,jule::Int _58156_given,_1b7553d92_Token _58168_error_token) {
	jule::Bool _58190_ok = jule::Bool();
	{
		
		if ((_58141_required == 0LL) && (_58156_given > 0LL)) {
			_case_begin_4399326976:;
			{
				(*this)._method_push_err(_58168_error_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
				_58190_ok = false;
				return _58190_ok;
			}
		}
		else if ((_58141_required > 0LL) && (_58156_given == 0LL)) {
			_case_begin_4399327152:;
			{
				(*this)._method_push_err(_58168_error_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				_58190_ok = false;
				return _58190_ok;
			}
		}
		else if (_58141_required < _58156_given) {
			_case_begin_4399327248:;
			{
				(*this)._method_push_err(_58168_error_token,jule::Str("overflow generics", 17),jule::Slice<jule::Any>());
				_58190_ok = false;
				return _58190_ok;
			}
		}
		else if (_58141_required > _58156_given) {
			_case_begin_4399326496:;
			{
				(*this)._method_push_err(_58168_error_token,jule::Str("missing generics", 16),jule::Slice<jule::Any>());
				_58190_ok = false;
				return _58190_ok;
			}
		}
		else {
			_case_begin_4399325488:;
			{
				_58190_ok = true;
				return _58190_ok;
			}
		}
		_match_end_4399325312:;
	}
}



inline jule::Bool _1a7002752_Sema::_method_is_duplicated_import_selection(jule::Uintptr _60445_itself,jule::Str _60462_ident) {
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399340608:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> &_1a7002752_imp = *it;
			{
				if (static_cast<jule::Uintptr>(_1a7002752_imp) == _60445_itself) {
					goto _iter_end_4399340608;
				}
				if ((*(_1a7002752_imp))._method_exist_ident(_60462_ident)) {
					return true;
				}
			}
			_iter_next_4399340608:;
			++it;
			goto _iter_begin_4399340608;
		}
		_iter_end_4399340608:;
	}
	return false;
}



inline jule::Any _1a7002752_Sema::_method_get_import_def(jule::Str _61929_ident,jule::Ptr<_1a6e9a574_ImportInfo>& _61946_imp) {
	if (_1a90790e0_find_package_builtin_def((*(_61946_imp))._field_link_path,_61929_ident) != nullptr) {
		return jule::Any(true);
	}
	{
		auto &expr = (*((*(_61946_imp))._field_package))._field_files;
		auto it = expr.begin();
		_iter_begin_4399349536:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				
				jule::Any _62621_def = (*(_1a7002752_f))._method_def_by_ident(_61929_ident,false);
				if (_62621_def != nullptr) {
					return _62621_def;
				}
			}
			_iter_next_4399349536:;
			++it;
			goto _iter_begin_4399349536;
		}
		_iter_end_4399349536:;
	}
	return jule::Any(nullptr);
}



inline void _1a7002752_Sema::_method_check_import_selections(jule::Ptr<_1a6e9a574_ImportInfo>& _63547_imp) {
	{
		auto &expr = (*(_63547_imp))._field_selected;
		auto it = expr.begin();
		_iter_begin_4399355840:;
		if (it != expr.end()) {
			_1b7553d92_Token &_1a7002752_ident = *it;
			{
				if (_1a7002752_ident._field_kind == jule::Str("self", 4)) {
					goto _iter_next_4399355840;
				}
				if ((*this)._method_is_duplicated_import_selection(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_63547_imp)),_1a7002752_ident._field_kind)) {
					(*this)._method_push_err(_1a7002752_ident,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1a7002752_ident._field_kind)}));
					(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
					goto _iter_next_4399355840;
				}
				jule::Any _64721_def = (*this)._method_get_import_def(_1a7002752_ident._field_kind,_63547_imp);
				{
					auto &_match_expr{ _64721_def };
					
					if (_match_expr.type_is<jule::Bool>()) {
						_case_begin_4399364208:;
						{
							goto _iter_next_4399355840;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
						_case_begin_4399365568:;
						{
							jule::Ptr<_1a7003e4b_Var> _65425_v = _64721_def.operator jule::Ptr<_1a7003e4b_Var>();
							if ((*this)._method_is_accessible_define((*(_65425_v))._field_public,(*(_65425_v))._field_token)) {
								goto _iter_next_4399355840;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeAlias>>()) {
						_case_begin_4399365088:;
						{
							jule::Ptr<_1a6a19a50_TypeAlias> _66025_ta = _64721_def.operator jule::Ptr<_1a6a19a50_TypeAlias>();
							if ((*this)._method_is_accessible_define((*(_66025_ta))._field_public,(*(_66025_ta))._field_token)) {
								goto _iter_next_4399355840;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
						_case_begin_4399365184:;
						{
							jule::Ptr<_1b7905331_Struct> _66625_strct = _64721_def.operator jule::Ptr<_1b7905331_Struct>();
							if ((*this)._method_is_accessible_define((*(_66625_strct))._field_public,(*(_66625_strct))._field_token)) {
								goto _iter_next_4399355840;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1b76b472d_Trait>>()) {
						_case_begin_4399367120:;
						{
							jule::Ptr<_1b76b472d_Trait> _67225_t = _64721_def.operator jule::Ptr<_1b76b472d_Trait>();
							if ((*this)._method_is_accessible_define((*(_67225_t))._field_public,(*(_67225_t))._field_token)) {
								goto _iter_next_4399355840;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bb9150_Enum>>()) {
						_case_begin_4399367216:;
						{
							jule::Ptr<_1a6bb9150_Enum> _67825_e = _64721_def.operator jule::Ptr<_1a6bb9150_Enum>();
							if ((*this)._method_is_accessible_define((*(_67825_e))._field_public,(*(_67825_e))._field_token)) {
								goto _iter_next_4399355840;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a691a500_Fn>>()) {
						_case_begin_4399367312:;
						{
							jule::Ptr<_1a691a500_Fn> _68425_f = _64721_def.operator jule::Ptr<_1a691a500_Fn>();
							if ((*this)._method_is_accessible_define((*(_68425_f))._field_public,(*(_68425_f))._field_token)) {
								goto _iter_next_4399355840;
							}
						}
					}
					else {
						_case_begin_4399364560:;
						{
							(*this)._method_push_err(_1a7002752_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_1a7002752_ident._field_kind)}));
							goto _iter_next_4399355840;
						}
					}
					_match_end_4399364480:;
				}
				(*this)._method_push_err(_1a7002752_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_1a7002752_ident._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
			}
			_iter_next_4399355840:;
			++it;
			goto _iter_begin_4399355840;
		}
		_iter_end_4399355840:;
	}
}



inline jule::Bool _1a7002752_Sema::_method_is_use_alias_duplication(jule::Ptr<_1a6e9a574_ImportInfo>& _69944_imp) {
	if ((*(_69944_imp))._field_alias.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*((*this)._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4399392096:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp2 = *it;
			{
				if (_1a7002752_imp2 == _69944_imp) {
					goto _iter_end_4399392096;
				}
				if ((*(_1a7002752_imp2))._field_alias == (*(_69944_imp))._field_alias) {
					return true;
				}
				if (((*(_1a7002752_imp2))._field_ident == (*(_1a7002752_imp2))._field_link_path) && ((*(_1a7002752_imp2))._field_ident == (*(_69944_imp))._field_alias)) {
					return true;
				}
			}
			_iter_next_4399392096:;
			++it;
			goto _iter_begin_4399392096;
		}
		_iter_end_4399392096:;
	}
	return false;
}



inline jule::Bool _1a7002752_Sema::_method_check_import(jule::Ptr<_1a6e9a574_ImportInfo>& _72036_imp) {
	if ((*(_72036_imp))._field_cpp_linked || ((*((*(_72036_imp))._field_package))._field_files.len() == 0LL)) {
		return true;
	}
	if ((*this)._method_is_use_alias_duplication(_72036_imp)) {
		(*this)._method_push_err((*(_72036_imp))._field_token,jule::Str("identifier duplication: @ is already used for another use declaration above", 75),jule::Slice<jule::Any>({jule::Any((*(_72036_imp))._field_alias)}));
		(*this)._method_push_suggestion(jule::Str("rename alias for this use declaration to avoid duplication", 58),jule::Slice<jule::Any>());
	}
	if ((*(_72036_imp))._field_duplicate) {
		return true;
	}
	jule::Ptr<_1a7002752_Sema> _73417_sema = jule::new_struct_ptr<_1a7002752_Sema>(new( std::nothrow ) _1a7002752_Sema(jule::Slice<_1b6986b22_Log>(),jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>(),jule::Ptr<_1a8acbe95_SymbolTable>(),(*this)._field_flags));
	(*(_73417_sema))._method_check((*((*(_72036_imp))._field_package))._field_files);
	if ((*(_73417_sema))._field_errors.len() > 0LL) {
		(*this)._field_errors=jule::append((*this)._field_errors,(*(_73417_sema))._field_errors);
		(*(_73417_sema))._field_errors=nullptr;
		return false;
	}
	(*this)._method_check_import_selections(_72036_imp);
	return true;
}



inline void _1a7002752_Sema::_method_check_imports(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_4399418288:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_file = *it;
			{
				(*this)._method_set_current_file(_1a7002752_file);
				{
					auto &expr = (*(_1a7002752_file))._field_imports;
					auto it = expr.begin();
					_iter_begin_4399421232:;
					if (it != expr.end()) {
						jule::Ptr<_1a6e9a574_ImportInfo> _1a7002752_imp = *it;
						{
							jule::Bool _75321_ok = (*this)._method_check_import(_1a7002752_imp);
							if ((!(_75321_ok))) {
								(*this)._method_push_err((*(_1a7002752_imp))._field_token,jule::Str("used package has errors: @", 26),jule::Slice<jule::Any>({jule::Any((*(_1a7002752_imp))._field_link_path)}));
								return;
							}
						}
						_iter_next_4399421232:;
						++it;
						goto _iter_begin_4399421232;
					}
					_iter_end_4399421232:;
				}
			}
			_iter_next_4399418288:;
			++it;
			goto _iter_begin_4399418288;
		}
		_iter_end_4399418288:;
	}
}



inline void _1a7002752_Sema::_method_impl_file_impls(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_impls;
		auto it = expr.begin();
		_iter_begin_4399427360:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bbbe44_Impl> _1a7002752_imp = *it;
			{
				(*(this->self))._method_impl_impl(_1a7002752_imp);
			}
			_iter_next_4399427360:;
			++it;
			goto _iter_begin_4399427360;
		}
		_iter_end_4399427360:;
	}
}



inline void _1a7002752_Sema::_method_impl_impls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4399431776:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_file = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_file);
				(*(this->self))._method_impl_file_impls();
			}
			_iter_next_4399431776:;
			++it;
			goto _iter_begin_4399431776;
		}
		_iter_end_4399431776:;
	}
}



inline void _1a7002752_Sema::_method_check_enums(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4399436208:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_file = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_file);
				(*(this->self))._method_check_enum_decls();
			}
			_iter_next_4399436208:;
			++it;
			goto _iter_begin_4399436208;
		}
		_iter_end_4399436208:;
	}
}



inline jule::Bool _1a7002752_Sema::_method_check_type_with_refers(jule::Ptr<_1a6a19a50_TypeSymbol>& _78647_t,jule::Trait<_1a9062c33_Lookup> _78713_l,jule::Ptr<_1a6a19a50_Referencer> _78728_referencer) {
	jule::Bool _78755_ok = jule::Bool();
	if ((*(_78647_t))._method_checked()) {
		_78755_ok = true;
		return _78755_ok;
	}
	_1a6a19a50_TypeChecker _79117_tc = _1a6a19a50_TypeChecker(this->self,_78713_l,_78728_referencer,_1b7553d92_Token(),jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	_79117_tc._method_check(_78647_t);
	_78755_ok = (*(_78647_t))._method_checked();
	return _78755_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_type(jule::Ptr<_1a6a19a50_TypeSymbol>& _80235_t,jule::Trait<_1a9062c33_Lookup> _80255_l) {
	return (*(this->self))._method_check_type_with_refers(_80235_t,_80255_l,nullptr);
}



inline jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_Sema::_method_build_type_with_generics(jule::Ptr<_1b7509a90_TypeDecl>& _80849_t,jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _80913_generics) {
	jule::Ptr<_1a6a19a50_TypeChecker> _81017_tc = jule::new_struct<_1a6a19a50_TypeChecker>(new( std::nothrow ) _1a6a19a50_TypeChecker(this->self,this->self,jule::Ptr<_1a6a19a50_Referencer>(),_1b7553d92_Token(),jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>(),_80913_generics,jule::Bool(),jule::Bool(),jule::Bool()));
	return (*(_81017_tc))._method_check_decl(_80849_t);
}



inline jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_Sema::_method_build_type(jule::Ptr<_1b7509a90_TypeDecl>& _81935_t) {
	return (*(this->self))._method_build_type_with_generics(_81935_t,nullptr);
}



inline jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_Sema::_method_select_type(jule::Ptr<_1b7509a90_TypeDecl>& _82436_t) {
	jule::Ptr<_1a6a19a50_TypeChecker> _82517_tc = jule::new_struct<_1a6a19a50_TypeChecker>(new( std::nothrow ) _1a6a19a50_TypeChecker(this->self,this->self,jule::Ptr<_1a6a19a50_Referencer>(),_1b7553d92_Token(),jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>(),jule::Bool(),jule::Bool(),true));
	return (*(_82517_tc))._method_check_decl(_82436_t);
}



inline jule::Ptr<_1a8b431d7_Eval> _1a7002752_Sema::_method_evalpd(jule::Trait<_1a9062c33_Lookup> _83530_l,jule::Ptr<_1a6a19a50_TypeKind> _83545_p,jule::Ptr<_1a7003e4b_Var> _83563_owner) {
	jule::Ptr<_1a8b431d7_Eval> _83617_e = jule::new_struct_ptr<_1a8b431d7_Eval>(new( std::nothrow ) _1a8b431d7_Eval(this->self,_83530_l,jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_83563_owner,jule::Ptr<_1b7905331_FieldIns>()));
	{
		auto &_match_expr{ _83530_l };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4399488256:;
			{
				(*(_83617_e))._field_unsafety=(*(_83530_l.operator jule::Ptr<_1a6bc3e29_ScopeChecker>()))._method_is_unsafe();
			}
		}
		_match_end_4399488176:;
	}
	(*(_83617_e))._field_prefix=_83545_p;
	return _83617_e;
}



inline jule::Ptr<_1a8b431d7_Eval> _1a7002752_Sema::_method_evalp(jule::Trait<_1a9062c33_Lookup> _85329_l,jule::Ptr<_1a6a19a50_TypeKind> _85344_p) {
	return (*(this->self))._method_evalpd(_85329_l,_85344_p,nullptr);
}



inline jule::Ptr<_1a8b431d7_Eval> _1a7002752_Sema::_method_eval(jule::Trait<_1a9062c33_Lookup> _85828_l) {
	return (*(this->self))._method_evalp(_85828_l,nullptr);
}



inline void _1a7002752_Sema::_method_check_assign_type(jule::Bool _86237_dest_is_ref,jule::Ptr<_1a6a19a50_TypeKind>& _86261_dest,jule::Ptr<_1a8b431d7_Data>& _86314_d,_1b7553d92_Token _86328_error_token) {
	if ((*(_86314_d))._field_decl) {
		(*(this->self))._method_push_err(_86328_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return;
	}
	if (_86237_dest_is_ref) {
		if ((!((*(_86261_dest))._method_equals((*(_86314_d))._field_kind)))) {
			(*(this->self))._method_push_err(_86328_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_86261_dest))._method_to_str()),jule::Any((*((*(_86314_d))._field_kind))._method_to_str())}));
		}
	} else {
		jule::Ptr<_1a700327a_AssignTypeChecker> _87721_atc = jule::new_struct<_1a700327a_AssignTypeChecker>(new( std::nothrow ) _1a700327a_AssignTypeChecker(this->self,_86261_dest,_86314_d,_86328_error_token));
		jule::Bool _88317_ok = (*(_87721_atc))._method_check();
		if ((!(_88317_ok))) {
			return;
		}
	}
	if ((!((*(_86314_d))._method_is_const())) || ((*(_86261_dest))._method_prim() == nullptr)) {
		return;
	}
	jule::Str _89317_kind = (*((*(_86261_dest))._method_prim()))._field_kind;
	{
		
		if (_1a9133243_is_sig_int(_89317_kind)) {
			_case_begin_4399515232:;
			{
				(*((*(_86314_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_86314_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1a9133243_is_unsig_int(_89317_kind)) {
			_case_begin_4399515328:;
			{
				(*((*(_86314_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_86314_d))._field_constant))._method_as_u64()));
			}
		}
		else if (_1a9133243_is_float(_89317_kind)) {
			_case_begin_4399515424:;
			{
				(*((*(_86314_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_86314_d))._field_constant))._method_as_f64()));
			}
		}
		_match_end_4399515024:;
	}
}



inline jule::Bool _1a7002752_Sema::_method_check_type_compatibility(jule::Ptr<_1a6a19a50_TypeKind>& _90249_dest,jule::Ptr<_1a6a19a50_TypeKind>& _90314_src,_1b7553d92_Token& _90335_error_token) {
	if (_90314_src == nullptr) {
		(*(this->self))._method_push_err(_90335_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_90249_dest))._method_to_str()),jule::Any((*(_90314_src))._method_to_str())}));
		return false;
	}
	if ((*(_90314_src))._method_tup() != nullptr) {
		(*(this->self))._method_push_err(_90335_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_90249_dest))._method_to_str()),jule::Any((*(_90314_src))._method_to_str())}));
		return false;
	}
	_1a700327a_TypeCompatibilityChecker _91717_tcc = _1a700327a_TypeCompatibilityChecker(this->self,_90249_dest,_90314_src,_90335_error_token);
	if (_91717_tcc._method_check()) {
		return true;
	}
	(*(this->self))._method_push_err(_90335_error_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_90249_dest))._method_to_str()),jule::Any((*(_90314_src))._method_to_str())}));
	return false;
}



inline jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_Sema::_method_build_non_generic_type_kind(jule::Ptr<_1b7509a90_TypeDecl>& _93852_ast,jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>& _93914_generics) {
	jule::Ptr<_1a6a19a50_TypeChecker> _94017_tc = jule::new_struct<_1a6a19a50_TypeChecker>(new( std::nothrow ) _1a6a19a50_TypeChecker(this->self,this->self,jule::Ptr<_1a6a19a50_Referencer>(),_1b7553d92_Token(),_93914_generics,jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool()));
	return (*(_94017_tc))._method_check_decl(_93852_ast);
}



inline void _1a7002752_Sema::_method_build_fn_non_generic_type_kinds(jule::Ptr<_1a691a500_FnIns>& _94856_f) {
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _94917_generics = nullptr;
	if ((*((*(_94856_f))._field_decl))._method_is_method()) {
		_94917_generics=jule::append((*((*(_94856_f))._field_decl))._field_generics,(*((*((*(_94856_f))._field_decl))._field_owner))._field_generics);
	} else {
		_94917_generics=(*((*(_94856_f))._field_decl))._field_generics;
	}
	{
		auto &expr = (*(_94856_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4399550048:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_ParamIns> _1a7002752_p = *it;
			{
				if ((!((*((*(_1a7002752_p))._field_decl))._method_is_self()))) {
					(*(_1a7002752_p))._field_kind=(*(this->self))._method_build_non_generic_type_kind((*((*((*(_1a7002752_p))._field_decl))._field_kind))._field_decl,_94917_generics);
				}
			}
			_iter_next_4399550048:;
			++it;
			goto _iter_begin_4399550048;
		}
		_iter_end_4399550048:;
	}
	if ((!((*((*(_94856_f))._field_decl))._method_is_void()))) {
		(*(_94856_f))._field_result=(*(this->self))._method_build_non_generic_type_kind((*((*((*((*(_94856_f))._field_decl))._field_result))._field_kind))._field_decl,_94917_generics);
	}
}



inline jule::Ptr<_1a691a500_FnIns> _1a7002752_Sema::_method_get_trait_check_fn_kind(jule::Ptr<_1a691a500_Fn>& _96648_f) {
	jule::Ptr<_1a691a500_FnIns> _96717_ins = (*(_96648_f))._method_instance_force();
	(*(this->self))._method_build_fn_non_generic_type_kinds(_96717_ins);
	return _96717_ins;
}



inline jule::Bool _1a7002752_Sema::_method_reload_fn_ins_types(jule::Ptr<_1a691a500_FnIns>& _97244_f) {
	jule::Bool _97257_ok = jule::Bool();
	if ((*(_97244_f))._method_is_builtin() || (*(_97244_f))._method_is_anon()) {
		_97257_ok = true;
		return _97257_ok;
	}
	jule::Ptr<_1a7002752_Sema> _97717_sema = (*((*(_97244_f))._field_decl))._field_sema;
	jule::Ptr<_1a8acbe95_SymbolTable> _97917_old = (*((*((*(_97244_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_97244_f))._field_decl))._field_sema))._method_set_current_file(_97917_old);
	});
	jule::Ptr<_1a8acbe95_SymbolTable> _98117_file = _1a7002752_find_file((*((*((*(_97244_f))._field_decl))._field_sema))._field_files,(*((*(_97244_f))._field_decl))._field_token._field_file);
	if (_98117_file != nullptr) {
		(*((*((*(_97244_f))._field_decl))._field_sema))._method_set_current_file(_98117_file);
	}
	jule::I64 _98617_size = (*(_97244_f))._field_generics.len();
	if (((*(_97244_f))._field_decl != nullptr) && ((*((*(_97244_f))._field_decl))._field_owner != nullptr)) {
		_98617_size+=static_cast<jule::I64>((*((*((*(_97244_f))._field_decl))._field_owner))._field_generics.len());
	}
	jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _99117_generics = jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>::alloc(0LL,_98617_size);
	{
		auto &expr = (*(_97244_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_4399590128:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_g = *it;
			{
				_99117_generics = jule::alloc_for_append(_99117_generics,1);_99117_generics.__push(jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias(jule::Ptr<_1b7509a90_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1b7553d92_Token(),(*((*((*(_97244_f))._field_decl))._field_generics[_1a7002752_i]))._field_ident,jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),_1a7002752_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_4399590128:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4399590128;
		}
		_iter_end_4399590128:;
	}
	if (((*(_97244_f))._field_decl != nullptr) && ((*((*(_97244_f))._field_decl))._field_owner != nullptr)) {
		jule::Ptr<_1b7905331_StructIns> _100321_owner = (*(_97244_f))._field_owner;
		{
			auto &expr = (*(_100321_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_4399593312:;
			if (it != expr.end()) {
				jule::Int _1a7002752_i = it - expr.begin();
				jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_g = *it;
				{
					_99117_generics = jule::alloc_for_append(_99117_generics,1);_99117_generics.__push(jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias(jule::Ptr<_1b7509a90_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1b7553d92_Token(),(*((*((*(_100321_owner))._field_decl))._field_generics[_1a7002752_i]))._field_ident,jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),_1a7002752_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_4399593312:;
				++it;
				_1a7002752_i++;
				goto _iter_begin_4399593312;
			}
			_iter_end_4399593312:;
		}
	}
	_97257_ok=true;
	{
		auto &expr = (*(_97244_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4399599600:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_ParamIns> _1a7002752_p = *it;
			{
				if ((!((*((*(_1a7002752_p))._field_decl))._method_is_self()))) {
					(*(_1a7002752_p))._field_kind=(*(_97717_sema))._method_build_type_with_generics((*((*((*(_1a7002752_p))._field_decl))._field_kind))._field_decl,_99117_generics);
					if ((*(_1a7002752_p))._field_kind != nullptr) {
						(*((*(_1a7002752_p))._field_kind))._field_variadic=(*((*(_1a7002752_p))._field_decl))._field_variadic;
						if ((*((*(_1a7002752_p))._field_decl))._field_reference && (!(_1a6a19a50_is_valid_for_ref((*(_1a7002752_p))._field_kind)))) {
							(*(this->self))._method_push_err((*((*(_1a7002752_p))._field_decl))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*(_1a7002752_p))._field_kind))._method_to_str())}));
						}
					} else {
						_97257_ok=false;
					}
				}
			}
			_iter_next_4399599600:;
			++it;
			goto _iter_begin_4399599600;
		}
		_iter_end_4399599600:;
	}
	if ((!((*((*(_97244_f))._field_decl))._method_is_void()))) {
		(*(_97244_f))._field_result=(*(_97717_sema))._method_build_type_with_generics((*((*((*((*(_97244_f))._field_decl))._field_result))._field_kind))._field_decl,_99117_generics);
		_97257_ok=((*(_97244_f))._field_result != nullptr) && _97257_ok;
	}
	if (_97717_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*(_97717_sema))._field_errors);
		(*(_97717_sema))._field_errors=nullptr;
	}
	return _97257_ok;
}



inline void _1a7002752_Sema::_method_check_ref_validity_for_init_expr(jule::Bool _104252_left_mut,jule::Ptr<_1a8b431d7_Data>& _104273_d,_1b7553d92_Token& _104288_error_token) {
	{
		auto &_match_expr{ (*(_104273_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4399628608:;
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel>>()) {
			_case_begin_4399628704:;
			{
				jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel> _104821_model = (*(_104273_d))._field_model.operator jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel>();
				if ((!(_1a7002752_is_valid_model_for_ref((*(_104821_model))._field_expr)))) {
					(*(this->self))._method_push_err(_104288_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*(_104821_model))._field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>>()) {
			_case_begin_4399628800:;
			{
				jule::Ptr<_1a69b8d2e_StructSubIdentExprModel> _105421_model = (*(_104273_d))._field_model.operator jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>();
				if ((!(_1a7002752_is_valid_model_for_ref((*(_105421_model))._field_expr)))) {
					(*(this->self))._method_push_err(_104288_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any((*((*((*(_105421_model))._field_field))._field_decl))._field_ident)}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_CommonIdentExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_CommonSubIdentExprModel>>()) {
			_case_begin_4399628896:;
			{
				(*(this->self))._method_push_err(_104288_error_token,jule::Str("built-in defines cannot pass to references", 42),jule::Slice<jule::Any>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_UnaryExprModel>>()) {
			_case_begin_4399630736:;
			{
				jule::Ptr<_1a69b8d2e_UnaryExprModel> _106421_unary = (*(_104273_d))._field_model.operator jule::Ptr<_1a69b8d2e_UnaryExprModel>();
				if ((*(_106421_unary))._field_op._field_kind == jule::Str("*", 1)) {
					if ((!(_1a7002752_is_valid_model_for_ref((*(_104273_d))._field_model)))) {
						(*(this->self))._method_push_err(_104288_error_token,jule::Str("you cannot use reference variable @ because reference is dangling", 65),jule::Slice<jule::Any>({jule::Any(jule::Str("address from * &T", 17))}));
					}
					goto _match_end_4399628160;
				}
				goto _case_begin_4399628304;
			}
		}
		else {
			_case_begin_4399628304:;
			{
				(*(this->self))._method_push_err(_104288_error_token,jule::Str("references requires variable for assignment", 43),jule::Slice<jule::Any>());
			}
		}
		_match_end_4399628160:;
	}
	if (_104252_left_mut && (!((*(_104273_d))._field_mutable))) {
		(*(this->self))._method_push_err(_104288_error_token,jule::Str("mutable reference cannot point to immutable data", 48),jule::Slice<jule::Any>());
	}
}



inline void _1a7002752_Sema::_method_check_validity_for_init_expr(jule::Bool _108248_left_mut,jule::Bool _108264_left_ref,jule::Ptr<_1a6a19a50_TypeKind>& _108310_left_kind,jule::Ptr<_1a8b431d7_Data>& _108337_d,_1b7553d92_Token& _108352_error_token) {
	if ((_108248_left_mut && (!((*(_108337_d))._field_mutable))) && (*((*(_108337_d))._field_kind))._method_mutable()) {
		(*(this->self))._method_push_err(_108352_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
	}
	if (_108264_left_ref) {
		(*(this->self))._method_check_ref_validity_for_init_expr(_108248_left_mut,_108337_d,_108352_error_token);
	}
	jule::Ptr<_1a700327a_AssignTypeChecker> _109117_atc = jule::new_struct<_1a700327a_AssignTypeChecker>(new( std::nothrow ) _1a700327a_AssignTypeChecker(this->self,jule::Ptr<_1a6a19a50_TypeKind>(),_108337_d,_108352_error_token));
	(*(_109117_atc))._method_check_validity();
}



inline jule::Bool _1a7002752_Sema::_method_check_type_alias_decl_kind(jule::Ptr<_1a6a19a50_TypeAlias>& _109951_ta,jule::Trait<_1a9062c33_Lookup> _109971_l) {
	jule::Bool _109984_ok = jule::Bool();
	jule::Ptr<_1a8acbe95_SymbolTable> _110017_old = (*(this->self))._field_file;
	__JULE_DEFER({
		(*(this->self))._method_set_current_file(_110017_old);
	});
	jule::Ptr<_1a8acbe95_SymbolTable> _110217_file = _1a7002752_find_file((*(this->self))._field_files,(*(_109951_ta))._field_token._field_file);
	if (_110217_file != nullptr) {
		(*(this->self))._method_set_current_file(_110217_file);
	}
	_109984_ok=(*(this->self))._method_check_type_with_refers((*(_109951_ta))._field_kind,_109971_l,jule::new_struct<_1a6a19a50_Referencer>(new( std::nothrow ) _1a6a19a50_Referencer((*(_109951_ta))._field_ident,jule::Any(_109951_ta),(&((*(_109951_ta))._field_refers)))));
	if ((_109984_ok && ((*((*((*(_109951_ta))._field_kind))._field_kind))._method_arr() != nullptr)) && (*((*((*((*(_109951_ta))._field_kind))._field_kind))._method_arr()))._field_auto) {
		(*(this->self))._method_push_err((*((*((*(_109951_ta))._field_kind))._field_decl))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
		_109984_ok=false;
	}
	return _109984_ok;
}



inline void _1a7002752_Sema::_method_check_type_alias_decl(jule::Ptr<_1a6a19a50_TypeAlias>& _111946_ta,jule::Trait<_1a9062c33_Lookup> _111966_l) {
	if (_1b7553d92_is_ignore_ident((*(_111946_ta))._field_ident)) {
		(*(this->self))._method_push_err((*(_111946_ta))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_111946_ta,_111966_l);
}



inline void _1a7002752_Sema::_method_check_type_alias_decl_dup(jule::Ptr<_1a6a19a50_TypeAlias>& _112750_ta) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_112750_ta)),(*(_112750_ta))._field_ident,(*(_112750_ta))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_112750_ta))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_112750_ta))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_type_alias_decl_kind(_112750_ta,this->self);
}



inline jule::Bool _1a7002752_Sema::_method_check_type_alias_decls(void) {
	jule::Bool _113644_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4399702928:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeAlias> _1a7002752_ta = *it;
			{
				(*(this->self))._method_check_type_alias_decl_dup(_1a7002752_ta);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_113644_ok = false;
					return _113644_ok;
				}
			}
			_iter_next_4399702928:;
			++it;
			goto _iter_begin_4399702928;
		}
		_iter_end_4399702928:;
	}
	_113644_ok = true;
	return _113644_ok;
}



inline void _1a7002752_Sema::_method_check_enum_items_dup(jule::Ptr<_1a6bb9150_Enum> _114839_e) {
	{
		auto &expr = (*(_114839_e))._field_items;
		auto it = expr.begin();
		_iter_begin_4399709008:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bb9150_EnumItem> &_1a7002752_item = *it;
			{
				if (_1b7553d92_is_ignore_ident((*(_1a7002752_item))._field_ident)) {
					(*this)._method_push_err((*(_1a7002752_item))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
				} else {
					{
						auto &expr = (*(_114839_e))._field_items;
						auto it = expr.begin();
						_iter_begin_4399714352:;
						if (it != expr.end()) {
							jule::Ptr<_1a6bb9150_EnumItem> &_1a7002752_citem = *it;
							{
								if (_1a7002752_item == _1a7002752_citem) {
									goto _iter_end_4399714352;
								} else if ((*(_1a7002752_item))._field_ident == (*(_1a7002752_citem))._field_ident) {
									(*this)._method_push_err((*(_1a7002752_item))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1a7002752_item))._field_ident)}));
									(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
									goto _iter_end_4399714352;
								}
							}
							_iter_next_4399714352:;
							++it;
							goto _iter_begin_4399714352;
						}
						_iter_end_4399714352:;
					}
				}
			}
			_iter_next_4399709008:;
			++it;
			goto _iter_begin_4399709008;
		}
		_iter_end_4399709008:;
	}
}



inline void _1a7002752_Sema::_method_check_enum_items_str(jule::Ptr<_1a6bb9150_Enum>& _116645_e) {
	{
		auto &expr = (*(_116645_e))._field_items;
		auto it = expr.begin();
		_iter_begin_4399721424:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bb9150_EnumItem> _1a7002752_item = *it;
			{
				if ((*(_1a7002752_item))._method_auto_expr()) {
					(*(_1a7002752_item))._field_value=jule::new_struct<_1a8b431d7_Value>(new( std::nothrow ) _1a8b431d7_Value(jule::Ptr<_1b7509a90_Expr>(),jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1b6dd59aa_Const::_static_method_new_str((*(_1a7002752_item))._field_ident)))));
					(*((*((*(_1a7002752_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_1a7002752_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_1a8b431d7_Data> _117625_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_1a7002752_item))._field_value))._field_expr);
					if (_117625_d == nullptr) {
						goto _iter_next_4399721424;
					}
					if ((!((*(_117625_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_1a7002752_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_116645_e))._field_kind))._field_kind,_117625_d,(*(_1a7002752_item))._field_token);
					(*((*(_1a7002752_item))._field_value))._field_data=_117625_d;
				}
			}
			_iter_next_4399721424:;
			++it;
			goto _iter_begin_4399721424;
		}
		_iter_end_4399721424:;
	}
}



inline void _1a7002752_Sema::_method_check_enum_items_int(jule::Ptr<_1a6bb9150_Enum>& _119145_e) {
	jule::U64 _119217_max = static_cast<jule::U64>(_1b6dd88c0_max((*((*((*((*(_119145_e))._field_kind))._field_kind))._method_prim()))._method_to_str()));
	{
		auto &expr = (*(_119145_e))._field_items;
		auto it = expr.begin();
		_iter_begin_4399744128:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			jule::Ptr<_1a6bb9150_EnumItem> _1a7002752_item = *it;
			{
				if (_119217_max == 0LL) {
					(*(this->self))._method_push_err((*(_1a7002752_item))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(_119217_max)--;
				}
				if ((*(_1a7002752_item))._method_auto_expr()) {
					(*(_1a7002752_item))._field_value=jule::new_struct<_1a8b431d7_Value>(new( std::nothrow ) _1a8b431d7_Value(jule::Ptr<_1b7509a90_Expr>(),jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1b6dd59aa_Const::_static_method_new_u64(static_cast<jule::U64>(_119217_max - (_119217_max - static_cast<jule::U64>(_1a7002752_i))))))));
					(*((*((*(_1a7002752_item))._field_value))._field_data))._field_model=jule::Any((*((*((*(_1a7002752_item))._field_value))._field_data))._field_constant);
				} else {
					jule::Ptr<_1a8b431d7_Data> _120825_d = (*((*(this->self))._method_eval(this->self)))._method_eval_expr((*((*(_1a7002752_item))._field_value))._field_expr);
					if (_120825_d == nullptr) {
						goto _iter_next_4399744128;
					}
					if ((!((*(_120825_d))._method_is_const()))) {
						(*(this->self))._method_push_err((*((*((*(_1a7002752_item))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
					}
					(*(this->self))._method_check_assign_type(false,(*((*(_119145_e))._field_kind))._field_kind,_120825_d,(*(_1a7002752_item))._field_token);
					(*((*(_1a7002752_item))._field_value))._field_data=_120825_d;
				}
			}
			_iter_next_4399744128:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4399744128;
		}
		_iter_end_4399744128:;
	}
}



inline void _1a7002752_Sema::_method_check_enum_decl(jule::Ptr<_1a6bb9150_Enum>& _122340_e) {
	if (_1b7553d92_is_ignore_ident((*(_122340_e))._field_ident)) {
		(*(this->self))._method_push_err((*(_122340_e))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_122340_e)),(*(_122340_e))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_122340_e))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_122340_e))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((*(_122340_e))._field_items.len() == 0LL) {
		(*(this->self))._method_push_err((*(_122340_e))._field_token,jule::Str("enum @ have no field", 20),jule::Slice<jule::Any>({jule::Any((*(_122340_e))._field_ident)}));
	}
	(*(this->self))._method_check_enum_items_dup(_122340_e);
	if ((*(_122340_e))._field_kind != nullptr) {
		if ((!((*(this->self))._method_check_type((*(_122340_e))._field_kind,this->self)))) {
			return;
		}
	} else {
		(*(_122340_e))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3))))));
	}
	jule::Ptr<_1a6a19a50_Prim> _125017_t = (*((*((*(_122340_e))._field_kind))._field_kind))._method_prim();
	if (_125017_t == nullptr) {
		(*(this->self))._method_push_err((*(_122340_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((*(_125017_t))._method_is_str()) {
			_case_begin_4399791760:;
			{
				(*(this->self))._method_check_enum_items_str(_122340_e);
			}
		}
		else if (_1a9133243_is_int((*(_125017_t))._method_to_str())) {
			_case_begin_4399791856:;
			{
				(*(this->self))._method_check_enum_items_int(_122340_e);
			}
		}
		else {
			_case_begin_4399788784:;
			{
				(*(this->self))._method_push_err((*(_122340_e))._field_token,jule::Str("invalid type source", 19),jule::Slice<jule::Any>());
			}
		}
		_match_end_4399788656:;
	}
}



inline jule::Bool _1a7002752_Sema::_method_check_enum_decls(void) {
	jule::Bool _127038_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_enums;
		auto it = expr.begin();
		_iter_begin_4399799984:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bb9150_Enum> _1a7002752_e = *it;
			{
				(*(this->self))._method_check_enum_decl(_1a7002752_e);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_127038_ok = false;
					return _127038_ok;
				}
			}
			_iter_next_4399799984:;
			++it;
			goto _iter_begin_4399799984;
		}
		_iter_end_4399799984:;
	}
	_127038_ok = true;
	return _127038_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_decl_generics(jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>& _128239_generics) {
	jule::Bool _128272_ok = jule::Bool();
	_128272_ok=true;
	{
		auto &expr = _128239_generics;
		auto it = expr.begin();
		_iter_begin_4399806736:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			jule::Ptr<_1b7509a90_GenericDecl> &_1a7002752_g = *it;
			{
				if (_1b7553d92_is_ignore_ident((*(_1a7002752_g))._field_ident)) {
					(*this)._method_push_err((*(_1a7002752_g))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
					_128272_ok=false;
					goto _iter_next_4399806736;
				}
				_julec_label_duplication_lookup:;
				{
					auto &expr = _128239_generics;
					auto it = expr.begin();
					_iter_begin_4399812848:;
					if (it != expr.end()) {
						jule::Int _1a7002752_j = it - expr.begin();
						jule::Ptr<_1b7509a90_GenericDecl> &_1a7002752_ct = *it;
						{
							{
								
								if (_1a7002752_j >= _1a7002752_i) {
									_case_begin_4399815248:;
									{
										goto _iter_end_4399812848;
									}
								}
								else if ((*(_1a7002752_g))._field_ident == (*(_1a7002752_ct))._field_ident) {
									_case_begin_4399815360:;
									{
										(*this)._method_push_err((*(_1a7002752_g))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1a7002752_g))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										_128272_ok=false;
										goto _iter_end_4399812848;
									}
								}
								_match_end_4399815024:;
							}
						}
						_iter_next_4399812848:;
						++it;
						_1a7002752_j++;
						goto _iter_begin_4399812848;
					}
					_iter_end_4399812848:;
				}
			}
			_iter_next_4399806736:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4399806736;
		}
		_iter_end_4399806736:;
	}
	return _128272_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_fn_decl_params_dup(jule::Ptr<_1a691a500_Fn>& _131044_f) {
	jule::Bool _131054_ok = jule::Bool();
	_131054_ok=true;
	_julec_label_check:;
	{
		auto &expr = (*(_131044_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4399842704:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			jule::Ptr<_1a691a500_Param> &_1a7002752_p = *it;
			{
				{
					auto &expr = (*(_131044_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_4399845056:;
					if (it != expr.end()) {
						jule::Ptr<_1b7509a90_GenericDecl> &_1a7002752_g = *it;
						{
							if ((*(_1a7002752_p))._field_ident == (*(_1a7002752_g))._field_ident) {
								_131054_ok=false;
								(*this)._method_push_err((*(_1a7002752_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1a7002752_p))._field_ident)}));
								(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								goto _iter_next_4399842704;
							}
						}
						_iter_next_4399845056:;
						++it;
						goto _iter_begin_4399845056;
					}
					_iter_end_4399845056:;
				}
				_julec_label_params_lookup:;
				{
					auto &expr = (*(_131044_f))._field_params;
					auto it = expr.begin();
					_iter_begin_4399845632:;
					if (it != expr.end()) {
						jule::Int _1a7002752_j = it - expr.begin();
						jule::Ptr<_1a691a500_Param> &_1a7002752_jp = *it;
						{
							{
								
								if (_1a7002752_j >= _1a7002752_i) {
									_case_begin_4399853936:;
									{
										goto _iter_end_4399845632;
									}
								}
								else if (_1b7553d92_is_anon_ident((*(_1a7002752_p))._field_ident) || _1b7553d92_is_anon_ident((*(_1a7002752_jp))._field_ident)) {
									_case_begin_4399854048:;
									{
										goto _iter_end_4399845632;
									}
								}
								else if ((*(_1a7002752_p))._field_ident == (*(_1a7002752_jp))._field_ident) {
									_case_begin_4399854160:;
									{
										_131054_ok=false;
										(*this)._method_push_err((*(_1a7002752_p))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1a7002752_p))._field_ident)}));
										(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_next_4399842704;
									}
								}
								_match_end_4399853696:;
							}
						}
						_iter_next_4399845632:;
						++it;
						_1a7002752_j++;
						goto _iter_begin_4399845632;
					}
					_iter_end_4399845632:;
				}
			}
			_iter_next_4399842704:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4399842704;
		}
		_iter_end_4399842704:;
	}
	return _131054_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_fn_decl_result_dup(jule::Ptr<_1a691a500_Fn>& _134644_f) {
	jule::Bool _134654_ok = jule::Bool();
	_134654_ok=true;
	if ((*(_134644_f))._method_is_void()) {
		return _134654_ok;
	}
	{
		auto &expr = (*((*(_134644_f))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_4399867904:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			_1b7553d92_Token &_1a7002752_v = *it;
			{
				if (_1b7553d92_is_ignore_ident(_1a7002752_v._field_kind)) {
					goto _iter_next_4399867904;
				}
				{
					auto &expr = (*(_134644_f))._field_generics;
					auto it = expr.begin();
					_iter_begin_4399871312:;
					if (it != expr.end()) {
						jule::Ptr<_1b7509a90_GenericDecl> &_1a7002752_g = *it;
						{
							if (_1a7002752_v._field_kind == (*(_1a7002752_g))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4399871312:;
						++it;
						goto _iter_begin_4399871312;
					}
					_iter_end_4399871312:;
				}
				{
					auto &expr = (*(_134644_f))._field_params;
					auto it = expr.begin();
					_iter_begin_4399874992:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_Param> &_1a7002752_p = *it;
						{
							if (_1a7002752_v._field_kind == (*(_1a7002752_p))._field_ident) {
								goto _julec_label_exist;
							}
						}
						_iter_next_4399874992:;
						++it;
						goto _iter_begin_4399874992;
					}
					_iter_end_4399874992:;
				}
				_julec_label_itself_lookup:;
				{
					auto &expr = (*((*(_134644_f))._field_result))._field_idents;
					auto it = expr.begin();
					_iter_begin_4399879168:;
					if (it != expr.end()) {
						jule::Int _1a7002752_j = it - expr.begin();
						_1b7553d92_Token &_1a7002752_jv = *it;
						{
							{
								
								if (_1a7002752_j >= _1a7002752_i) {
									_case_begin_4399881440:;
									{
										goto _iter_end_4399879168;
									}
								}
								else if (_1a7002752_jv._field_kind == _1a7002752_v._field_kind) {
									_case_begin_4399881552:;
									{
										goto _julec_label_exist;
									}
								}
								_match_end_4399881216:;
							}
						}
						_iter_next_4399879168:;
						++it;
						_1a7002752_j++;
						goto _iter_begin_4399879168;
					}
					_iter_end_4399879168:;
				}
				goto _iter_next_4399867904;
				_julec_label_exist:;
				(*this)._method_push_err(_1a7002752_v,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any(_1a7002752_v._field_kind)}));
				(*this)._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
				_134654_ok=false;
			}
			_iter_next_4399867904:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4399867904;
		}
		_iter_end_4399867904:;
	}
	return _134654_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_fn_decl_types(jule::Ptr<_1a691a500_Fn>& _139544_f) {
	jule::Bool _139554_ok = jule::Bool();
	_139554_ok=true;
	jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>> _139817_generics = (*(_139544_f))._field_generics;
	if ((*(_139544_f))._field_owner != nullptr) {
		_139817_generics=jule::append(_139817_generics,(*((*(_139544_f))._field_owner))._field_generics);
	}
	{
		auto &expr = (*(_139544_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4399893728:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Param> _1a7002752_p = *it;
			{
				if ((!((*(_1a7002752_p))._method_is_self()))) {
					jule::Ptr<_1a6a19a50_TypeKind> _140525_kind = (*(this->self))._method_build_non_generic_type_kind((*((*(_1a7002752_p))._field_kind))._field_decl,_139817_generics);
					_139554_ok=(_140525_kind != nullptr) && _139554_ok;
					(*((*(_1a7002752_p))._field_kind))._field_kind=_140525_kind;
				}
			}
			_iter_next_4399893728:;
			++it;
			goto _iter_begin_4399893728;
		}
		_iter_end_4399893728:;
	}
	if ((!((*(_139544_f))._method_is_void()))) {
		jule::Ptr<_1a6a19a50_TypeKind> _141221_kind = (*(this->self))._method_build_non_generic_type_kind((*((*((*(_139544_f))._field_result))._field_kind))._field_decl,_139817_generics);
		_139554_ok=(_141221_kind != nullptr) && _139554_ok;
		(*((*((*(_139544_f))._field_result))._field_kind))._field_kind=_141221_kind;
	}
	return _139554_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_fn_decl_prototype(jule::Ptr<_1a691a500_Fn>& _142248_f) {
	jule::Bool _142258_ok = jule::Bool();
	if ((*(_142248_f))._field_exceptional && (*(_142248_f))._field_cpp_linked) {
		(*(this->self))._method_push_err((*(_142248_f))._field_token,jule::Str("cpp-linked defines cannot be exceptional", 40),jule::Slice<jule::Any>());
		_142258_ok = false;
		return _142258_ok;
	}
	if ((*(_142248_f))._field_exceptional) {
		if ((*(_142248_f))._method_is_entry_point()) {
			(*(this->self))._method_push_err((*(_142248_f))._field_token,jule::Str("entry point cannot be exceptional", 33),jule::Slice<jule::Any>());
		} else if ((*(_142248_f))._method_is_init()) {
			(*(this->self))._method_push_err((*(_142248_f))._field_token,jule::Str("initializer function cannot be exceptional", 42),jule::Slice<jule::Any>());
		}
	}
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_142248_f))._field_generics)))) {
			_case_begin_4399921872:;
			{
				_142258_ok = false;
				return _142258_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_params_dup(_142248_f)))) {
			_case_begin_4399922048:;
			{
				_142258_ok = false;
				return _142258_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_result_dup(_142248_f)))) {
			_case_begin_4399922144:;
			{
				_142258_ok = false;
				return _142258_ok;
			}
		}
		else if ((!((*(this->self))._method_check_fn_decl_types(_142248_f)))) {
			_case_begin_4399921392:;
			{
				_142258_ok = false;
				return _142258_ok;
			}
		}
		else {
			_case_begin_4399914784:;
			{
				_142258_ok = true;
				return _142258_ok;
			}
		}
		_match_end_4399914544:;
	}
}



inline void _1a7002752_Sema::_method_check_trait_decl_method(jule::Ptr<_1a691a500_Fn>& _144548_f) {
	if (_1b7553d92_is_ignore_ident((*(_144548_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_144548_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_fn_decl_prototype(_144548_f);
	(*(_144548_f))._field_sema=this->self;
}



inline void _1a7002752_Sema::_method_check_trait_decl_methods(jule::Ptr<_1b76b472d_Trait>& _145449_t) {
	{
		auto &expr = (*(_145449_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_4399937376:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			jule::Ptr<_1a691a500_Fn> _1a7002752_f = *it;
			{
				(*(this->self))._method_check_trait_decl_method(_1a7002752_f);
				(*(_145449_t))._field_mutable=(*(_145449_t))._field_mutable || (*((*(_1a7002752_f))._field_params[0LL]))._field_mutable;
				if ((*(this->self))._field_errors.len() > 0LL) {
					return;
				}
				_julec_label_duplicate_lookup:;
				{
					auto &expr = (*(_145449_t))._field_methods;
					auto it = expr.begin();
					_iter_begin_4399945024:;
					if (it != expr.end()) {
						jule::Int _1a7002752_j = it - expr.begin();
						jule::Ptr<_1a691a500_Fn> &_1a7002752_jf = *it;
						{
							{
								
								if (_1a7002752_j >= _1a7002752_i) {
									_case_begin_4399947296:;
									{
										goto _iter_end_4399945024;
									}
								}
								else if ((*(_1a7002752_f))._field_ident == (*(_1a7002752_jf))._field_ident) {
									_case_begin_4399947408:;
									{
										(*(this->self))._method_push_err((*(_1a7002752_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1a7002752_f))._field_ident)}));
										(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
										goto _iter_end_4399945024;
									}
								}
								_match_end_4399947072:;
							}
						}
						_iter_next_4399945024:;
						++it;
						_1a7002752_j++;
						goto _iter_begin_4399945024;
					}
					_iter_end_4399945024:;
				}
			}
			_iter_next_4399937376:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4399937376;
		}
		_iter_end_4399937376:;
	}
}



inline void _1a7002752_Sema::_method_check_trait_decl(jule::Ptr<_1b76b472d_Trait>& _148641_t) {
	if (_1b7553d92_is_ignore_ident((*(_148641_t))._field_ident)) {
		(*(this->self))._method_push_err((*(_148641_t))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_148641_t)),(*(_148641_t))._field_ident,false)) {
		(*(this->self))._method_push_err((*(_148641_t))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_148641_t))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_trait_decl_methods(_148641_t);
}



inline jule::Bool _1a7002752_Sema::_method_check_trait_decls(void) {
	jule::Bool _149839_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_traits;
		auto it = expr.begin();
		_iter_begin_4399968736:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> _1a7002752_t = *it;
			{
				(*(this->self))._method_check_trait_decl(_1a7002752_t);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_149839_ok = false;
					return _149839_ok;
				}
			}
			_iter_next_4399968736:;
			++it;
			goto _iter_begin_4399968736;
		}
		_iter_end_4399968736:;
	}
	_149839_ok = true;
	return _149839_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_trait_impl_methods(jule::Ptr<_1b76b472d_Trait>& _151048_base,jule::Ptr<_1a6bbbe44_Impl>& _151063_ipl) {
	jule::Bool _151077_ok = jule::Bool();
	_151077_ok=true;
	{
		auto &expr = (*(_151063_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_4399976944:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> &_1a7002752_f = *it;
			{
				if ((*(_151048_base))._method_find_method((*(_1a7002752_f))._field_ident) == nullptr) {
					(*this)._method_push_err((*(_1a7002752_f))._field_token,jule::Str("undefined identifier: trait @ has no define @", 45),jule::Slice<jule::Any>({jule::Any((*(_151048_base))._field_ident),jule::Any((*(_1a7002752_f))._field_ident)}));
					_151077_ok=false;
				}
			}
			_iter_next_4399976944:;
			++it;
			goto _iter_begin_4399976944;
		}
		_iter_end_4399976944:;
	}
	return _151077_ok;
}



inline jule::Bool _1a7002752_Sema::_method_impl_to_struct(jule::Ptr<_1b7905331_Struct>& _152139_dest,jule::Ptr<_1a6bbbe44_Impl>& _152159_ipl) {
	jule::Bool _152173_ok = jule::Bool();
	_152173_ok=true;
	{
		auto &expr = (*(_152159_ipl))._field_methods;
		auto it = expr.begin();
		_iter_begin_4399987312:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a7002752_f = *it;
			{
				if (((*(_152139_dest))._method_find_method((*(_1a7002752_f))._field_ident,(*(_1a7002752_f))._field_statically) != nullptr) || ((*(_152139_dest))._method_find_field((*(_1a7002752_f))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_1a7002752_f))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_152139_dest))._field_ident),jule::Any((*(_1a7002752_f))._field_ident)}));
					_152173_ok=false;
					goto _iter_next_4399987312;
				}
				if (((*(_152139_dest))._field_generics.len() > 0LL) && ((*(_1a7002752_f))._field_generics.len() > 0LL)) {
					{
						auto &expr = (*(_1a7002752_f))._field_generics;
						auto it = expr.begin();
						_iter_begin_4399996736:;
						if (it != expr.end()) {
							jule::Ptr<_1b7509a90_GenericDecl> &_1a7002752_fg = *it;
							{
								{
									auto &expr = (*(_152139_dest))._field_generics;
									auto it = expr.begin();
									_iter_begin_4399998512:;
									if (it != expr.end()) {
										jule::Ptr<_1b7509a90_GenericDecl> &_1a7002752_dg = *it;
										{
											if ((*(_1a7002752_fg))._field_ident == (*(_1a7002752_dg))._field_ident) {
												(*(this->self))._method_push_err((*(_1a7002752_fg))._field_token,jule::Str("methods cannot have same generic identifier with owner same time", 64),jule::Slice<jule::Any>());
												_152173_ok=false;
											}
										}
										_iter_next_4399998512:;
										++it;
										goto _iter_begin_4399998512;
									}
									_iter_end_4399998512:;
								}
							}
							_iter_next_4399996736:;
							++it;
							goto _iter_begin_4399996736;
						}
						_iter_end_4399996736:;
					}
				}
				(*(this->self))._method_check_directives((*(_1a7002752_f))._field_directives,jule::Any(_1a7002752_f));
				(*(_1a7002752_f))._field_sema=this->self;
				(*(_1a7002752_f))._field_owner=_152139_dest;
				(*(_152139_dest))._field_methods = jule::alloc_for_append((*(_152139_dest))._field_methods,1);(*(_152139_dest))._field_methods.__push(_1a7002752_f);
			}
			_iter_next_4399987312:;
			++it;
			goto _iter_begin_4399987312;
		}
		_iter_end_4399987312:;
	}
	{
		auto &expr = (*(_152159_ipl))._field_statics;
		auto it = expr.begin();
		_iter_begin_4399986336:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> _1a7002752_v = *it;
			{
				
				if (((*(_152139_dest))._method_find_method((*(_1a7002752_v))._field_ident,true) != nullptr) || ((*(_152139_dest))._method_find_static((*(_1a7002752_v))._field_ident) != nullptr)) {
					(*(this->self))._method_push_err((*(_1a7002752_v))._field_token,jule::Str("identifier duplication: struct @ already have define @", 54),jule::Slice<jule::Any>({jule::Any((*(_152139_dest))._field_ident),jule::Any((*(_1a7002752_v))._field_ident)}));
					_152173_ok=false;
					goto _iter_next_4399986336;
				}
				(*(this->self))._method_check_var_decl(_1a7002752_v,this->self);
				(*(this->self))._method_check_type_var(_1a7002752_v,this->self);
				(*(_152139_dest))._field_statics = jule::alloc_for_append((*(_152139_dest))._field_statics,1);(*(_152139_dest))._field_statics.__push(_1a7002752_v);
			}
			_iter_next_4399986336:;
			++it;
			goto _iter_begin_4399986336;
		}
		_iter_end_4399986336:;
	}
	return _152173_ok;
}



inline void _1a7002752_Sema::_method_impl_trait(jule::Ptr<_1a6bbbe44_Impl>& _156635_decl) {
	jule::Ptr<_1a6a19a50_TypeKind> _156717_base_t = (*(this->self))._method_select_type((*(_156635_decl))._field_base);
	if (_156717_base_t == nullptr) {
		return;
	}
	jule::Ptr<_1b76b472d_Trait> _157117_base = (*(_156717_base_t))._method_trt();
	if (_157117_base == nullptr) {
		(*(this->self))._method_push_err((*((*(_156635_decl))._field_base))._field_token,jule::Str("invalid base type for impl", 26),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected trait, use a trait", 27),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _157817_dest_t = (*(this->self))._method_select_type((*(_156635_decl))._field_dest);
	if (_157817_dest_t == nullptr) {
		return;
	}
	jule::Ptr<_1b7905331_StructIns> _158217_dest_s = (*(_157817_dest_t))._method_strct();
	if (_158217_dest_s == nullptr) {
		(*(this->self))._method_push_err((*((*(_156635_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl", 33),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1b7905331_Struct> _158917_dest = (*(_158217_dest_s))._field_decl;
	if ((*((*(_158917_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_156635_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	(*(_157117_base))._field_implemented = jule::alloc_for_append((*(_157117_base))._field_implemented,1);(*(_157117_base))._field_implemented.__push(_158917_dest);
	(*(_158917_dest))._field_implements = jule::alloc_for_append((*(_158917_dest))._field_implements,1);(*(_158917_dest))._field_implements.__push(_157117_base);
	if ((*(_156635_decl))._field_statics.len() > 0LL) {
		(*(this->self))._method_push_err((*((*(_156635_decl))._field_statics[0LL]))._field_token,jule::Str("trait implementations cannot implement static field", 51),jule::Slice<jule::Any>());
	}
	{
		
		if ((!((*(this->self))._method_check_trait_impl_methods(_157117_base,_156635_decl)))) {
			_case_begin_4400051776:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_impl_to_struct(_158917_dest,_156635_decl)))) {
			_case_begin_4400052176:;
			{
				return;
			}
		}
		_match_end_4400051648:;
	}
}



inline void _1a7002752_Sema::_method_impl_struct(jule::Ptr<_1a6bbbe44_Impl>& _160936_decl) {
	jule::Ptr<_1a6a19a50_TypeKind> _161017_dest_t = (*(this->self))._method_select_type((*(_160936_decl))._field_dest);
	if (_161017_dest_t == nullptr) {
		return;
	}
	jule::Ptr<_1b7905331_StructIns> _161417_dest_s = (*(_161017_dest_t))._method_strct();
	if (_161417_dest_s == nullptr) {
		(*(this->self))._method_push_err((*((*(_160936_decl))._field_dest))._field_token,jule::Str("invalid destination type for impl", 33),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("expected structure, use a structure", 35),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1b7905331_Struct> _162117_dest = (*(_161417_dest_s))._field_decl;
	if ((*((*(_162117_dest))._field_token._field_file))._method_dir() != (*((*((*(this->self))._field_file))._field_file))._method_dir()) {
		(*(this->self))._method_push_err((*((*(_160936_decl))._field_dest))._field_token,jule::Str("illegal implementation via definition from out of package", 57),jule::Slice<jule::Any>());
		return;
	}
	{
		
		if ((!((*(this->self))._method_impl_to_struct(_162117_dest,_160936_decl)))) {
			_case_begin_4400059424:;
			{
				return;
			}
		}
		_match_end_4400069872:;
	}
}



inline void _1a7002752_Sema::_method_impl_impl(jule::Ptr<_1a6bbbe44_Impl>& _163434_decl) {
	{
		
		if ((*(_163434_decl))._method_is_trait_impl()) {
			_case_begin_4400075440:;
			{
				(*(this->self))._method_impl_trait(_163434_decl);
			}
		}
		else if ((*(_163434_decl))._method_is_struct_impl()) {
			_case_begin_4400075552:;
			{
				(*(this->self))._method_impl_struct(_163434_decl);
			}
		}
		_match_end_4400075216:;
	}
}



inline void _1a7002752_Sema::_method_check_var_decl(jule::Ptr<_1a7003e4b_Var>& _164339_decl,jule::Trait<_1a9062c33_Lookup> _164355_l) {
	if (_1b7553d92_is_ignore_ident((*(_164339_decl))._field_ident)) {
		(*(this->self))._method_push_err((*(_164339_decl))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	}
	if ((*(_164339_decl))._method_is_type_inferred()) {
		if ((!((*(_164339_decl))._method_is_initialized()))) {
			(*(this->self))._method_push_err((*(_164339_decl))._field_token,jule::Str("type inferred declarations should have a initializer expression", 63),jule::Slice<jule::Any>());
		}
	} else {
		(*(this->self))._method_check_type((*(_164339_decl))._field_kind,_164355_l);
	}
	if ((*(_164339_decl))._field_constant && (*(_164339_decl))._field_reference) {
		(*(this->self))._method_push_err((*(_164339_decl))._field_token,jule::Str("references cannot be constant", 29),jule::Slice<jule::Any>());
	}
	if ((!((*(_164339_decl))._method_is_initialized()))) {
		if ((*(_164339_decl))._field_constant) {
			(*(this->self))._method_push_err((*(_164339_decl))._field_token,jule::Str("constant variable must have initialize expression", 49),jule::Slice<jule::Any>());
		}
		if ((*(_164339_decl))._field_statically) {
			(*(this->self))._method_push_err((*(_164339_decl))._field_token,jule::Str("static variables must be have initialize expression", 51),jule::Slice<jule::Any>());
		}
		if ((*(_164339_decl))._field_reference) {
			(*(this->self))._method_push_err((*(_164339_decl))._field_token,jule::Str("reference variables must be have lvalue initialize expression", 61),jule::Slice<jule::Any>());
		}
	}
}



inline void _1a7002752_Sema::_method_check_global_var_decl(jule::Ptr<_1a7003e4b_Var>& _167746_decl) {
	if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_167746_decl)),(*(_167746_decl))._field_ident,(*(_167746_decl))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_167746_decl))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_167746_decl))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	if ((*(_167746_decl))._field_cpp_linked && (*(_167746_decl))._field_constant) {
		(*(this->self))._method_push_err((*(_167746_decl))._field_token,jule::Str("cpp linked variables cannot constant", 36),jule::Slice<jule::Any>());
	}
	if (((!((*(_167746_decl))._field_cpp_linked)) && (!((*(_167746_decl))._field_constant))) && (!((*(_167746_decl))._field_statically))) {
		(*(this->self))._method_push_err((*(_167746_decl))._field_token,jule::Str("global variables must be static", 31),jule::Slice<jule::Any>());
		(*(this->self))._method_push_suggestion(jule::Str("use \"static\" keyword to define", 30),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_167746_decl))._field_directives,jule::Any(_167746_decl));
	(*(this->self))._method_check_var_decl(_167746_decl,this->self);
}



inline jule::Bool _1a7002752_Sema::_method_check_global_decls(void) {
	jule::Bool _169640_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_4400124576:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> _1a7002752_decl = *it;
			{
				(*(this->self))._method_check_global_var_decl(_1a7002752_decl);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_169640_ok = false;
					return _169640_ok;
				}
			}
			_iter_next_4400124576:;
			++it;
			goto _iter_begin_4400124576;
		}
		_iter_end_4400124576:;
	}
	_169640_ok = true;
	return _169640_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_trait_impl(jule::Ptr<_1b7905331_Struct>& _170848_strct,jule::Ptr<_1b76b472d_Trait>& _170869_trt) {
	jule::Bool _170884_ok = jule::Bool();
	{
		auto &expr = (*(_170869_trt))._field_methods;
		auto it = expr.begin();
		_iter_begin_4400132416:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a7002752_tf = *it;
			{
				jule::Bool _171021_exist = false;
				jule::Ptr<_1a691a500_Fn> _171121_sf = (*(_170848_strct))._method_find_method((*(_1a7002752_tf))._field_ident,(*(_1a7002752_tf))._field_statically);
				jule::Ptr<_1a691a500_FnIns> _171217_tf_k = (*(this->self))._method_get_trait_check_fn_kind(_1a7002752_tf);
				if (_171121_sf != nullptr) {
					jule::Ptr<_1a691a500_FnIns> _171425_sf_k = (*(this->self))._method_get_trait_check_fn_kind(_171121_sf);
					_171021_exist=(((*((*(_171217_tf_k))._field_decl))._field_public == (*((*(_171425_sf_k))._field_decl))._field_public) && ((*((*(_171217_tf_k))._field_decl))._field_ident == (*((*(_171425_sf_k))._field_decl))._field_ident)) && (*(_171217_tf_k))._method_equals(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_171425_sf_k)));
				}
				if (_171021_exist) {
					jule::Ptr<_1b7509a90_Directive> _172221_d = _1a8b431d7_find_directive((*(_171121_sf))._field_directives,jule::Str("deprecated", 10));
					if (_172221_d != nullptr) {
						(*(this->self))._method_push_err((*(_172221_d))._field_tag,jule::Str("trait implementations cannot have deprecated code", 49),jule::Slice<jule::Any>());
					}
					_170884_ok=false;
				} else {
					
					jule::Str _172925_s = (*(_171217_tf_k))._method_get_kind_str(true);
					if ((*(_1a7002752_tf))._field_public) {
						_172925_s=jule::Str("pub ", 4) + _172925_s;
					}
					(*(this->self))._method_push_err((*(_170848_strct))._field_token,jule::Str("trait @ derived but not implemented define @", 44),jule::Slice<jule::Any>({jule::Any((*(_170869_trt))._field_ident),jule::Any(_172925_s)}));
					_170884_ok=false;
				}
			}
			_iter_next_4400132416:;
			++it;
			goto _iter_begin_4400132416;
		}
		_iter_end_4400132416:;
	}
	return _170884_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_impls(jule::Ptr<_1b7905331_Struct>& _174043_s) {
	jule::Bool _174057_ok = jule::Bool();
	_174057_ok=true;
	{
		auto &expr = (*(_174043_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_4400161024:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> _1a7002752_trt = *it;
			{
				_174057_ok=(*(this->self))._method_check_struct_trait_impl(_174043_s,_1a7002752_trt) && _174057_ok;
			}
			_iter_next_4400161024:;
			++it;
			goto _iter_begin_4400161024;
		}
		_iter_end_4400161024:;
	}
	return _174057_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_fields(jule::Ptr<_1b7905331_Struct>& _174844_st) {
	jule::Bool _174859_ok = jule::Bool();
	_174859_ok=true;
	jule::Ptr<_1a6a19a50_TypeChecker> _175117_tc = jule::new_struct<_1a6a19a50_TypeChecker>(new( std::nothrow ) _1a6a19a50_TypeChecker(this->self,this->self,jule::new_struct<_1a6a19a50_Referencer>(new( std::nothrow ) _1a6a19a50_Referencer((*(_174844_st))._field_ident,jule::Any(_174844_st),nullptr)),_1b7553d92_Token(),(*(_174844_st))._field_generics,jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool()));
	jule::I64 _176113_n = (*(_174844_st))._field_instances.len();
	{
		auto &expr = (*(_174844_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_4400170912:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Field> _1a7002752_f = *it;
			{
				(*(_1a7002752_f))._field_owner=_174844_st;
				(*((*(_1a7002752_f))._field_kind))._field_kind=(*(_175117_tc))._method_check_decl((*((*(_1a7002752_f))._field_kind))._field_decl);
				_174859_ok=((*((*(_1a7002752_f))._field_kind))._field_kind != nullptr) && _174859_ok;
				{
					auto &expr = (*(_174844_st))._field_fields;
					auto it = expr.begin();
					_iter_begin_4400177344:;
					if (it != expr.end()) {
						jule::Ptr<_1b7905331_Field> &_1a7002752_cf = *it;
						{
							if (_1a7002752_f == _1a7002752_cf) {
								goto _iter_end_4400177344;
							} else if ((*(_1a7002752_f))._field_ident == (*(_1a7002752_cf))._field_ident) {
								(*(this->self))._method_push_err((*(_1a7002752_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_1a7002752_f))._field_ident)}));
								(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
								_174859_ok=false;
							}
						}
						_iter_next_4400177344:;
						++it;
						goto _iter_begin_4400177344;
					}
					_iter_end_4400177344:;
				}
			}
			_iter_next_4400170912:;
			++it;
			goto _iter_begin_4400170912;
		}
		_iter_end_4400170912:;
	}
	if (_174859_ok && (_176113_n != (*(_174844_st))._field_instances.len())) {
		(*(_175117_tc))._field_referencer=nullptr;
		(*(_174844_st))._field_instances=(*(_174844_st))._field_instances.slice(0LL,_176113_n);
		{
			auto &expr = (*(_174844_st))._field_fields;
			auto it = expr.begin();
			_iter_begin_4400185712:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_Field> _1a7002752_f = *it;
				{
					(*((*(_1a7002752_f))._field_kind))._field_kind=(*(_175117_tc))._method_check_decl((*((*(_1a7002752_f))._field_kind))._field_decl);
				}
				_iter_next_4400185712:;
				++it;
				goto _iter_begin_4400185712;
			}
			_iter_end_4400185712:;
		}
	}
	return _174859_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_decl_methods(jule::Ptr<_1b7905331_Struct>& _179050_s) {
	jule::Bool _179064_ok = jule::Bool();
	{
		auto &expr = (*(_179050_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_4400193456:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a7002752_m = *it;
			{
				if ((!((*(this->self))._method_check_fn_decl_types(_1a7002752_m)))) {
					_179064_ok = false;
					return _179064_ok;
				}
			}
			_iter_next_4400193456:;
			++it;
			goto _iter_begin_4400193456;
		}
		_iter_end_4400193456:;
	}
	_179064_ok = true;
	return _179064_ok;
}



inline void _1a7002752_Sema::_method_check_struct_decl(jule::Ptr<_1b7905331_Struct>& _179942_s) {
	if (_1b7553d92_is_ignore_ident((*(_179942_s))._field_ident)) {
		(*(this->self))._method_push_err((*(_179942_s))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_179942_s)),(*(_179942_s))._field_ident,(*(_179942_s))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_179942_s))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_179942_s))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_179942_s))._field_directives,jule::Any(_179942_s));
	(*(_179942_s))._field_sema=this->self;
	{
		
		if ((!((*(this->self))._method_check_decl_generics((*(_179942_s))._field_generics)))) {
			_case_begin_4400209632:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_fields(_179942_s)))) {
			_case_begin_4400209728:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_decl_methods(_179942_s)))) {
			_case_begin_4400209824:;
			{
				return;
			}
		}
		else if ((!((*(this->self))._method_check_struct_impls(_179942_s)))) {
			_case_begin_4400209936:;
			{
				return;
			}
		}
		_match_end_4400198784:;
	}
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_decls(void) {
	jule::Bool _181940_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_4400218880:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a7002752_s = *it;
			{
				(*(this->self))._method_check_struct_decl(_1a7002752_s);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_181940_ok = false;
					return _181940_ok;
				}
			}
			_iter_next_4400218880:;
			++it;
			goto _iter_begin_4400218880;
		}
		_iter_end_4400218880:;
	}
	_181940_ok = true;
	return _181940_ok;
}



inline void _1a7002752_Sema::_method_check_fn_decl(jule::Ptr<_1a691a500_Fn>& _183238_f) {
	if (_1b7553d92_is_ignore_ident((*(_183238_f))._field_ident)) {
		(*(this->self))._method_push_err((*(_183238_f))._field_token,jule::Str("ignore operator cannot use as identifier for this declaration", 61),jule::Slice<jule::Any>());
	} else if ((*(this->self))._method_is_duplicated_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_183238_f)),(*(_183238_f))._field_ident,(*(_183238_f))._field_cpp_linked)) {
		(*(this->self))._method_push_err((*(_183238_f))._field_token,jule::Str("identifier \"@\" is duplicated for scope, used by another declaration", 67),jule::Slice<jule::Any>({jule::Any((*(_183238_f))._field_ident)}));
		(*(this->self))._method_push_suggestion(jule::Str("rename definition to avoid duplication", 38),jule::Slice<jule::Any>());
	}
	(*(this->self))._method_check_directives((*(_183238_f))._field_directives,jule::Any(_183238_f));
	(*(_183238_f))._field_sema=this->self;
	(*(this->self))._method_check_fn_decl_prototype(_183238_f);
}



inline jule::Bool _1a7002752_Sema::_method_check_fn_decls(void) {
	jule::Bool _184736_ok = jule::Bool();
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_4400239408:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a7002752_f = *it;
			{
				(*(this->self))._method_check_fn_decl(_1a7002752_f);
				if ((*(this->self))._field_errors.len() > 0LL) {
					_184736_ok = false;
					return _184736_ok;
				}
			}
			_iter_next_4400239408:;
			++it;
			goto _iter_begin_4400239408;
		}
		_iter_end_4400239408:;
	}
	_184736_ok = true;
	return _184736_ok;
}



inline void _1a7002752_Sema::_method_push_cycle_error(jule::Ptr<_1b7905331_Struct>& _185932_st1,jule::Ptr<_1b7905331_Struct>& _185947_st2,jule::Str& _185966_message) {
	
	jule::Str _186213_refers_to = _1b6986b22_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_185932_st1))._field_ident),jule::Any((*(_185947_st2))._field_ident)}));
	_185966_message=((_1cea16edb_repeat(jule::Str(" ", 1),4LL) + _186213_refers_to) + jule::Str("\n", 1)) + _185966_message;
}



inline jule::Bool _1a7002752_Sema::_method_check_cross_cycle(jule::Ptr<_1b7905331_Struct>& _186633_st1,jule::Ptr<_1b7905331_Struct>& _186648_st2,jule::Str& _186667_message) {
	{
		auto &expr = (*(_186648_st2))._field_uses;
		auto it = expr.begin();
		_iter_begin_4400255504:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> &_1a7002752_u = *it;
			{
				if (_1a7002752_u == _186633_st1) {
					(*this)._method_push_cycle_error(_186648_st2,_1a7002752_u,_186667_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_186633_st1,_1a7002752_u,_186667_message)))) {
					(*this)._method_push_cycle_error(_186648_st2,_1a7002752_u,_186667_message);
					return false;
				}
			}
			_iter_next_4400255504:;
			++it;
			goto _iter_begin_4400255504;
		}
		_iter_end_4400255504:;
	}
	return true;
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_derive_illegal_cycles(jule::Str _188253_derive,jule::Ptr<_1b7905331_Struct>& _188267_st1,jule::Ptr<_1a6a19a50_TypeKind>& _188286_k) {
	jule::Bool _1882102_ok = jule::Bool();
	jule::Ptr<_1b7905331_Struct> _188317_st2 = _1a6a19a50_get_struct_from_kind(_188286_k);
	if (_188317_st2 == nullptr) {
		_1882102_ok = true;
		return _1882102_ok;
	}
	if (_188267_st1 == _188317_st2) {
		(*this)._method_push_err((*(_188267_st1))._field_token,jule::Str("illegal cycle for derive @, struct @ refers to itself", 53),jule::Slice<jule::Any>({jule::Any(_188253_derive),jule::Any((*(_188267_st1))._field_ident)}));
		_1882102_ok = false;
		return _1882102_ok;
	}
	jule::Str _189517_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_188267_st1,_188317_st2,_189517_message)))) {
		jule::Str _189821_err_msg = _189517_message;
		_189517_message=jule::Str();
		(*this)._method_push_cycle_error(_188267_st1,_188317_st2,_189517_message);
		_189821_err_msg=_189821_err_msg + _189517_message;
		(*this)._method_push_err((*(_188267_st1))._field_token,jule::Str("illegal cross cycle for derive @;\n@", 35),jule::Slice<jule::Any>({jule::Any(_188253_derive),jule::Any(_189821_err_msg)}));
		_1882102_ok = false;
		return _1882102_ok;
	}
	_1882102_ok = true;
	return _1882102_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_ins_derive_clone(jule::Ptr<_1b7905331_StructIns> _190952_st) {
	jule::Bool _190970_ok = jule::Bool();
	if ((!((*((*(_190952_st))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
		_190970_ok = true;
		return _190970_ok;
	}
	{
		auto &expr = (*(_190952_st))._field_fields;
		auto it = expr.begin();
		_iter_begin_4400283392:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_FieldIns> _1a7002752_f = *it;
			{
				if (((*(_1a7002752_f))._field_kind == nullptr) || (!((*((*(_1a7002752_f))._field_kind))._method_mutable()))) {
					goto _iter_next_4400283392;
				}
				if ((!((*((*(_1a7002752_f))._field_kind))._method_supports_cloning()))) {
					(*this)._method_push_err((*((*(_190952_st))._field_decl))._field_token,jule::Str("type @ is not compatible to derive @", 36),jule::Slice<jule::Any>({jule::Any((*((*(_1a7002752_f))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					_190970_ok = false;
					return _190970_ok;
				}
				if ((!((*this)._method_check_struct_derive_illegal_cycles(jule::Str("Clone", 5),(*(_190952_st))._field_decl,(*(_1a7002752_f))._field_kind)))) {
					_190970_ok = false;
					return _190970_ok;
				}
			}
			_iter_next_4400283392:;
			++it;
			goto _iter_begin_4400283392;
		}
		_iter_end_4400283392:;
	}
	_190970_ok = true;
	return _190970_ok;
}



inline jule::Bool _1a7002752_Sema::_method_check_struct_derive_clone(jule::Ptr<_1b7905331_Struct>& _193249_st) {
	return (*this)._method_check_struct_ins_derive_clone((*(_193249_st))._method_instance());
}



inline jule::Bool _1a7002752_Sema::_method_check_file_derives(void) {
	jule::Bool _193639_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_4400300432:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a7002752_st = *it;
			{
				_193639_ok=(*this)._method_check_struct_derive_clone(_1a7002752_st);
				if ((!(_193639_ok))) {
					goto _iter_end_4400300432;
				}
			}
			_iter_next_4400300432:;
			++it;
			goto _iter_begin_4400300432;
		}
		_iter_end_4400300432:;
	}
	return _193639_ok;
}



inline void _1a7002752_Sema::_method_check_package_derives(void) {
	{
		auto &expr = (*this)._field_files;
		auto it = expr.begin();
		_iter_begin_4400304064:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*this)._method_set_current_file(_1a7002752_f);
				jule::Bool _195117_ok = (*this)._method_check_file_derives();
				if ((!(_195117_ok))) {
					return;
				}
			}
			_iter_next_4400304064:;
			++it;
			goto _iter_begin_4400304064;
		}
		_iter_end_4400304064:;
	}
}



inline void _1a7002752_Sema::_method_check_package_decls(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400309264:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				if ((!((*(this->self))._method_check_type_alias_decls()))) {
					return;
				}
			}
			_iter_next_4400309264:;
			++it;
			goto _iter_begin_4400309264;
		}
		_iter_end_4400309264:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400313360:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				if ((!((*(this->self))._method_check_trait_decls()))) {
					return;
				}
			}
			_iter_next_4400313360:;
			++it;
			goto _iter_begin_4400313360;
		}
		_iter_end_4400313360:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400316800:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				if ((!((*(this->self))._method_check_global_decls()))) {
					return;
				}
			}
			_iter_next_4400316800:;
			++it;
			goto _iter_begin_4400316800;
		}
		_iter_end_4400316800:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400320304:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				if ((!((*(this->self))._method_check_fn_decls()))) {
					return;
				}
			}
			_iter_next_4400320304:;
			++it;
			goto _iter_begin_4400320304;
		}
		_iter_end_4400320304:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400323744:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				if ((!((*(this->self))._method_check_struct_decls()))) {
					return;
				}
			}
			_iter_next_4400323744:;
			++it;
			goto _iter_begin_4400323744;
		}
		_iter_end_4400323744:;
	}
	(*(this->self))._method_check_package_derives();
}



inline void _1a7002752_Sema::_method_check_data_for_type_inference(jule::Ptr<_1a8b431d7_Data>& _199949_d,_1b7553d92_Token& _199960_err_token) {
	{
		
		if ((*(_199949_d))._method_is_nil()) {
			_case_begin_4400330384:;
			{
				(*this)._method_push_err(_199960_err_token,jule::Str("nil is cannot use with type inferred definitions", 48),jule::Slice<jule::Any>());
			}
		}
		else if ((*(_199949_d))._method_is_void()) {
			_case_begin_4400330496:;
			{
				(*this)._method_push_err(_199960_err_token,jule::Str("void data is cannot use for type inferred definitions", 53),jule::Slice<jule::Any>());
			}
		}
		else if ((*((*(_199949_d))._field_kind))._field_variadic) {
			_case_begin_4400330608:;
			{
				(*this)._method_push_err(_199960_err_token,jule::Str("invalid expression for type inference", 37),jule::Slice<jule::Any>());
			}
		}
		_match_end_4400330176:;
	}
}



inline void _1a7002752_Sema::_method_check_var(jule::Ptr<_1a7003e4b_Var>& _201234_v) {
	if ((*(_201234_v))._field_cpp_linked) {
		return;
	}
	if ((*(_201234_v))._method_is_type_inferred()) {
		(*(_201234_v))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),(*((*((*(_201234_v))._field_value))._field_data))._field_kind));
		(*(this->self))._method_check_data_for_type_inference((*((*(_201234_v))._field_value))._field_data,(*((*((*(_201234_v))._field_value))._field_expr))._field_token);
	} else {
		jule::Ptr<_1a6a19a50_Arr> _202321_arr = (*((*((*(_201234_v))._field_kind))._field_kind))._method_arr();
		if (_202321_arr != nullptr) {
			if ((*(_202321_arr))._field_auto) {
				jule::Ptr<_1a6a19a50_Arr> _202625_data_arr = (*((*((*((*(_201234_v))._field_value))._field_data))._field_kind))._method_arr();
				if (_202625_data_arr != nullptr) {
					(*(_202321_arr))._field_n=(*(_202625_data_arr))._field_n;
				}
			}
		}
		(*(this->self))._method_check_assign_type((*(_201234_v))._field_reference,(*((*(_201234_v))._field_kind))._field_kind,(*((*(_201234_v))._field_value))._field_data,(*((*((*(_201234_v))._field_value))._field_expr))._field_token);
	}
	if ((*(_201234_v))._field_reference && (!(_1a6a19a50_is_valid_for_ref((*((*(_201234_v))._field_kind))._field_kind)))) {
		(*(this->self))._method_push_err((*(_201234_v))._field_token,jule::Str("references cannot points to type @", 34),jule::Slice<jule::Any>({jule::Any((*((*((*(_201234_v))._field_kind))._field_kind))._method_to_str())}));
	}
	(*(this->self))._method_check_validity_for_init_expr((*(_201234_v))._field_mutable,(*(_201234_v))._field_reference,(*((*(_201234_v))._field_kind))._field_kind,(*((*(_201234_v))._field_value))._field_data,(*((*((*(_201234_v))._field_value))._field_expr))._field_token);
	if ((*(_201234_v))._field_constant) {
		if ((!((*((*((*(_201234_v))._field_value))._field_data))._method_is_const()))) {
			(*(this->self))._method_push_err((*((*((*(_201234_v))._field_value))._field_expr))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		}
	} else {
		(*((*((*(_201234_v))._field_value))._field_data))._field_constant=nullptr;
	}
	if ((*((*((*(_201234_v))._field_kind))._field_kind))._method_tup() != nullptr) {
		(*((*(_201234_v))._field_kind))._field_kind=nullptr;
	}
}



inline void _1a7002752_Sema::_method_check_type_var(jule::Ptr<_1a7003e4b_Var>& _206139_decl,jule::Trait<_1a9062c33_Lookup> _206155_l) {
	if ((*(_206139_decl))._field_cpp_linked || (!((*(_206139_decl))._method_is_initialized()))) {
		return;
	}
	jule::Ptr<_1a8b431d7_Eval> _206617_eval = ((((*(_206139_decl))._field_kind != nullptr)) ? ((*(this->self))._method_evalpd(_206155_l,(*((*(_206139_decl))._field_kind))._field_kind,_206139_decl)) : ((*(this->self))._method_evalpd(_206155_l,nullptr,_206139_decl)));
	(*(_206617_eval))._field_immutable=(!((*(_206139_decl))._field_mutable));
	(*((*(_206139_decl))._field_value))._field_data=(*(_206617_eval))._method_eval_expr((*((*(_206139_decl))._field_value))._field_expr);
	if ((*((*(_206139_decl))._field_value))._field_data == nullptr) {
		return;
	}
	(*(this->self))._method_check_var(_206139_decl);
}



inline void _1a7002752_Sema::_method_check_global_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_vars;
		auto it = expr.begin();
		_iter_begin_4400391440:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> _1a7002752_decl = *it;
			{
				if (((*(_1a7002752_decl))._method_is_initialized() && ((*((*(_1a7002752_decl))._field_value))._field_data == nullptr)) || ((*(_1a7002752_decl))._method_is_type_inferred() && ((*((*(_1a7002752_decl))._field_kind))._field_kind == nullptr))) {
					(*(this->self))._method_check_type_var(_1a7002752_decl,this->self);
				}
			}
			_iter_next_4400391440:;
			++it;
			goto _iter_begin_4400391440;
		}
		_iter_end_4400391440:;
	}
}



inline void _1a7002752_Sema::_method_check_type_method(jule::Ptr<_1b7905331_StructIns>& _209042_strct,jule::Ptr<_1a691a500_Fn>& _209066_f) {
	if ((*(_209066_f))._field_cpp_linked) {
		return;
	}
	if ((*(_209066_f))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_209066_f))._field_instances.len() == 0LL) {
		jule::Ptr<_1a691a500_FnIns> _210121_ins = (*(_209066_f))._method_instance();
		(*(_210121_ins))._field_owner=_209042_strct;
		(*(_209066_f))._method_append_instance(_210121_ins);
		(*(this->self))._method_reload_fn_ins_types(_210121_ins);
		(*(_210121_ins))._field_reloaded=true;
	}
	{
		auto &expr = (*(_209066_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_4400409632:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_FnIns> _1a7002752_ins = *it;
			{
				if ((*((*(_1a7002752_ins))._field_scope))._field_stmts.len() > 0LL) {
					goto _iter_next_4400409632;
				}
				(*(this->self))._method_check_fn_ins(_1a7002752_ins);
			}
			_iter_next_4400409632:;
			++it;
			goto _iter_begin_4400409632;
		}
		_iter_end_4400409632:;
	}
}



inline void _1a7002752_Sema::_method_check_field_defaults(jule::Ptr<_1b7905331_StructIns>& _211745_ins) {
	jule::Ptr<_1a8b431d7_Eval> _211817_eval = (*(this->self))._method_eval(this->self);
	{
		auto &expr = (*(_211745_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_4400417904:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_FieldIns> _1a7002752_f = *it;
			{
				if ((*((*(_1a7002752_f))._field_decl))._field_default == nullptr) {
					goto _iter_next_4400417904;
				}
				(*(_211817_eval))._field_prefix=(*(_1a7002752_f))._field_kind;
				(*(_211817_eval))._field_field=_1a7002752_f;
				(*(_1a7002752_f))._field_default=(*(_211817_eval))._method_eval_expr((*((*(_1a7002752_f))._field_decl))._field_default);
				if ((*(_1a7002752_f))._field_default == nullptr) {
					goto _iter_next_4400417904;
				}
				
				(*(this->self))._method_check_assign_type(false,(*(_1a7002752_f))._field_kind,(*(_1a7002752_f))._field_default,(*((*((*(_1a7002752_f))._field_decl))._field_default))._field_token);
			}
			_iter_next_4400417904:;
			++it;
			goto _iter_begin_4400417904;
		}
		_iter_end_4400417904:;
	}
}



inline void _1a7002752_Sema::_method_check_type_struct(jule::Ptr<_1b7905331_Struct>& _213942_strct) {
	if ((*(_213942_strct))._field_cpp_linked) {
		return;
	}
	if ((*(_213942_strct))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_213942_strct))._field_instances.len() == 0LL) {
		jule::Ptr<_1b7905331_StructIns> _215021_ins = (*(_213942_strct))._method_instance();
		(*(_215021_ins))._field_checked=true;
		(*(_213942_strct))._method_append_instance(_215021_ins);
	}
	{
		auto &expr = (*(_213942_strct))._field_instances;
		auto it = expr.begin();
		_iter_begin_4400437824:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_StructIns> _1a7002752_ins = *it;
			{
				(*(this->self))._method_check_field_defaults(_1a7002752_ins);
				{
					auto &expr = (*(_1a7002752_ins))._field_methods;
					auto it = expr.begin();
					_iter_begin_4400440768:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_Fn> _1a7002752_f = *it;
						{
							(*(this->self))._method_check_type_method(_1a7002752_ins,_1a7002752_f);
						}
						_iter_next_4400440768:;
						++it;
						goto _iter_begin_4400440768;
					}
					_iter_end_4400440768:;
				}
			}
			_iter_next_4400437824:;
			++it;
			goto _iter_begin_4400437824;
		}
		_iter_end_4400437824:;
	}
}



inline void _1a7002752_Sema::_method_check_struct_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_4400444016:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a7002752_s = *it;
			{
				(*(this->self))._method_check_type_struct(_1a7002752_s);
			}
			_iter_next_4400444016:;
			++it;
			goto _iter_begin_4400444016;
		}
		_iter_end_4400444016:;
	}
}



inline void _1a7002752_Sema::_method_check_rets(jule::Ptr<_1a691a500_FnIns>& _216934_f) {
	if ((*((*(_216934_f))._field_decl))._method_is_void()) {
		return;
	}
	jule::Bool _217413_ok = _1a7002752_has_ret((*(_216934_f))._field_scope);
	if ((!(_217413_ok))) {
		(*this)._method_push_err((*((*(_216934_f))._field_decl))._field_token,jule::Str("missing return at end of function", 33),jule::Slice<jule::Any>());
	}
}



inline void _1a7002752_Sema::_method_check_fn_ins_sc(jule::Ptr<_1a691a500_FnIns>& _218039_f,jule::Ptr<_1a6bc3e29_ScopeChecker>& _218055_sc) {
	if ((*((*(_218039_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _218517_vars = _1a7002752_build_ret_vars(_218039_f);
	(*((*(_218055_sc))._field_table))._field_vars=jule::append((*((*(_218055_sc))._field_table))._field_vars,_218517_vars);
	(*((*(_218055_sc))._field_table))._field_vars=jule::append((*((*(_218055_sc))._field_table))._field_vars,_1a7002752_build_param_vars(_218039_f));
	(*((*(_218055_sc))._field_table))._field_type_aliases=jule::append((*((*(_218055_sc))._field_table))._field_type_aliases,_1a7002752_build_generic_type_aliases(_218039_f));
	(*(_218055_sc))._method_check((*((*(_218039_f))._field_decl))._field_scope,(*(_218039_f))._field_scope);
	if (_218517_vars.len() > 0LL) {
		jule::Slice<jule::Any> _219521_stmts = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*((*(_218039_f))._field_scope))._field_stmts.len() + _218517_vars.len()));
		{
			auto &expr = _218517_vars;
			auto it = expr.begin();
			_iter_begin_4400469024:;
			if (it != expr.end()) {
				jule::Ptr<_1a7003e4b_Var> _1a7002752_v = *it;
				{
					_219521_stmts = jule::alloc_for_append(_219521_stmts,1);_219521_stmts.__push(jule::Any(_1a7002752_v));
				}
				_iter_next_4400469024:;
				++it;
				goto _iter_begin_4400469024;
			}
			_iter_end_4400469024:;
		}
		_219521_stmts=jule::append(_219521_stmts,(*((*(_218039_f))._field_scope))._field_stmts);
		(*((*(_218039_f))._field_scope))._field_stmts=_219521_stmts;
	}
	(*this)._method_check_rets(_218039_f);
}



inline void _1a7002752_Sema::_method_check_fn_ins(jule::Ptr<_1a691a500_FnIns>& _220737_f) {
	if ((*((*(_220737_f))._field_decl))._field_cpp_linked) {
		return;
	}
	jule::Ptr<_1a8acbe95_SymbolTable> _221217_old = (*((*((*(_220737_f))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_220737_f))._field_decl))._field_sema))._method_set_current_file(_221217_old);
	});
	jule::Ptr<_1a8acbe95_SymbolTable> _221417_file = _1a7002752_find_file((*((*((*(_220737_f))._field_decl))._field_sema))._field_files,(*((*(_220737_f))._field_decl))._field_token._field_file);
	if (_221417_file != nullptr) {
		(*((*((*(_220737_f))._field_decl))._field_sema))._method_set_current_file(_221417_file);
	}
	jule::Ptr<_1a6bc3e29_ScopeChecker> _221917_sc = _1a6bc3e29_new_scope_checker((*((*(_220737_f))._field_decl))._field_sema,_220737_f);
	(*(this->self))._method_check_fn_ins_sc(_220737_f,_221917_sc);
	if ((*((*(_220737_f))._field_decl))._field_sema != this->self) {
		(*(this->self))._field_errors=jule::append((*(this->self))._field_errors,(*((*((*(_220737_f))._field_decl))._field_sema))._field_errors);
		(*((*((*(_220737_f))._field_decl))._field_sema))._field_errors=nullptr;
	}
}



inline void _1a7002752_Sema::_method_check_type_fn(jule::Ptr<_1a691a500_Fn>& _222838_f) {
	if ((*(_222838_f))._field_cpp_linked) {
		return;
	}
	if ((*(_222838_f))._field_generics.len() > 0LL) {
		return;
	}
	{
		auto &expr = (*(_222838_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_4400499392:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_FnIns> _1a7002752_ins = *it;
			{
				(*(this->self))._method_check_fn_ins(_1a7002752_ins);
			}
			_iter_next_4400499392:;
			++it;
			goto _iter_begin_4400499392;
		}
		_iter_end_4400499392:;
	}
}



inline void _1a7002752_Sema::_method_check_test_fn(jule::Ptr<_1a691a500_FnIns>& _224337_f) {
	if ((*((*(_224337_f))._field_decl))._field_public) {
		(*this)._method_push_err((*((*(_224337_f))._field_decl))._field_token,jule::Str("test function cannot be public", 30),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("remove \"pub\" modifier", 21),jule::Slice<jule::Any>());
		return;
	}
	if (((*(_224337_f))._field_params.len() != 1LL) || ((*(_224337_f))._field_result != nullptr)) {
		(*this)._method_push_err((*((*(_224337_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1a6a19a50_Sptr> _225617_sptr = (*((*((*(_224337_f))._field_params[0LL]))._field_kind))._method_sptr();
	if (_225617_sptr == nullptr) {
		(*this)._method_push_err((*((*(_224337_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1b7905331_StructIns> _226313_s = (*((*(_225617_sptr))._field_elem))._method_strct();
	if ((_226313_s == nullptr) || (!(_1a6e9a574_is_std_package((*((*((*(_226313_s))._field_decl))._field_token._field_file))._method_path(),jule::Str("testing", 7))))) {
		(*this)._method_push_err((*((*(_224337_f))._field_decl))._field_token,jule::Str("wrong test function declaration", 31),jule::Slice<jule::Any>());
		(*this)._method_push_suggestion(jule::Str("use expected test function declaration: fn(t: &std::testing::T)", 63),jule::Slice<jule::Any>());
		return;
	}
}



inline void _1a7002752_Sema::_method_precheck_type_fn(jule::Ptr<_1a691a500_Fn>& _227141_f) {
	if ((*(_227141_f))._field_cpp_linked) {
		return;
	}
	if ((*(_227141_f))._field_generics.len() > 0LL) {
		return;
	}
	if ((*(_227141_f))._field_instances.len() == 0LL) {
		jule::Ptr<_1a691a500_FnIns> _228221_ins = (*(_227141_f))._method_instance();
		(*(_227141_f))._field_instances = jule::alloc_for_append((*(_227141_f))._field_instances,1);(*(_227141_f))._field_instances.__push(_228221_ins);
		(*(this->self))._method_reload_fn_ins_types(_228221_ins);
		(*(_228221_ins))._field_reloaded=true;
		if (_1a6a19a50_has_directive((*(_227141_f))._field_directives,jule::Str("test", 4))) {
			(*(this->self))._method_check_test_fn(_228221_ins);
		}
	}
}



inline void _1a7002752_Sema::_method_precheck_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_4400541936:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a7002752_decl = *it;
			{
				(*(this->self))._method_precheck_type_fn(_1a7002752_decl);
			}
			_iter_next_4400541936:;
			++it;
			goto _iter_begin_4400541936;
		}
		_iter_end_4400541936:;
	}
}



inline void _1a7002752_Sema::_method_check_fn_types(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_4400545856:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a7002752_decl = *it;
			{
				(*(this->self))._method_check_type_fn(_1a7002752_decl);
			}
			_iter_next_4400545856:;
			++it;
			goto _iter_begin_4400545856;
		}
		_iter_end_4400545856:;
	}
}



inline void _1a7002752_Sema::_method_check_package_types(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400549408:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				(*(this->self))._method_check_global_types();
			}
			_iter_next_4400549408:;
			++it;
			goto _iter_begin_4400549408;
		}
		_iter_end_4400549408:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400550224:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				(*(this->self))._method_precheck_fn_types();
			}
			_iter_next_4400550224:;
			++it;
			goto _iter_begin_4400550224;
		}
		_iter_end_4400550224:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400553296:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				(*(this->self))._method_check_fn_types();
			}
			_iter_next_4400553296:;
			++it;
			goto _iter_begin_4400553296;
		}
		_iter_end_4400553296:;
	}
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400556384:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_f = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_f);
				(*(this->self))._method_check_struct_types();
			}
			_iter_next_4400556384:;
			++it;
			goto _iter_begin_4400556384;
		}
		_iter_end_4400556384:;
	}
}



inline void _1a7002752_Sema::_method_set_file_sema_fields(void) {
	{
		auto &expr = (*((*(this->self))._field_file))._field_funcs;
		auto it = expr.begin();
		_iter_begin_4400563440:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a7002752_f = *it;
			{
				(*(_1a7002752_f))._field_sema=this->self;
			}
			_iter_next_4400563440:;
			++it;
			goto _iter_begin_4400563440;
		}
		_iter_end_4400563440:;
	}
	{
		auto &expr = (*((*(this->self))._field_file))._field_structs;
		auto it = expr.begin();
		_iter_begin_4400564240:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a7002752_st = *it;
			{
				(*(_1a7002752_st))._field_sema=this->self;
			}
			_iter_next_4400564240:;
			++it;
			goto _iter_begin_4400564240;
		}
		_iter_end_4400564240:;
	}
}



inline void _1a7002752_Sema::_method_set_sema_fields(void) {
	{
		auto &expr = (*(this->self))._field_files;
		auto it = expr.begin();
		_iter_begin_4400568464:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_file = *it;
			{
				(*(this->self))._method_set_current_file(_1a7002752_file);
				(*(this->self))._method_set_file_sema_fields();
			}
			_iter_next_4400568464:;
			++it;
			goto _iter_begin_4400568464;
		}
		_iter_end_4400568464:;
	}
}



inline void _1a7002752_Sema::_method_check(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _234830_files) {
	(*(this->self))._field_files=_234830_files;
	(*(this->self))._method_check_imports();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_enums();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_set_sema_fields();
	(*(this->self))._method_impl_impls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_package_decls();
	if ((*(this->self))._field_errors.len() > 0LL) {
		return;
	}
	(*(this->self))._method_check_package_types();
}







std::ostream &operator<<(std::ostream &_Stream, const _1a7002752_Sema &_Src) {
	_Stream << "Sema{";
	_Stream << "errors:" << _Src._field_errors << ", ";
	_Stream << "files:" << _Src._field_files << ", ";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "flags:" << _Src._field_flags;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a7003e4b_IterRelation &_Src) {
	_Stream << "IterRelation{";
	_Stream << "range:" << _Src._field_range;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a7003e4b_Var> _1a700327a_RangeChecker::_method_build_var(jule::Ptr<_1b7509a90_VarDecl>& _91829_decl) {
	jule::Ptr<_1a7003e4b_Var> _91917_v = _1b6a47496_build_var(_91829_decl);
	return _91917_v;
}



inline void _1a700327a_RangeChecker::_method_set_size_key(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _1b7553d92_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3))))));
	{
		auto &_match_expr{ (*((*this)._field_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4401124240:;
			{
				(*((*((*this)._field_kind))._field_key_a))._field_iter_relation=jule::new_struct<_1a7003e4b_IterRelation>(new( std::nothrow ) _1a7003e4b_IterRelation((*((*this)._field_d))._field_model.operator jule::Ptr<_1a7003e4b_Var>()));
			}
		}
		_match_end_4401124128:;
	}
}



inline void _1a700327a_RangeChecker::_method_check_range_expr_validity(jule::Ptr<_1a8b431d7_Data>& _94949_d,jule::Ptr<_1a7003e4b_Var>& _94960_key,jule::Ptr<_1a6a19a50_TypeKind>& _94976_k) {
	jule::Bool _95017__mut = (*(_94960_key))._field_mutable;
	if (_95017__mut && (!((*(_94976_k))._method_mutable()))) {
		_95017__mut=false;
	}
	(*((*((*this)._field_sc))._field_s))._method_check_validity_for_init_expr(_95017__mut,(*(_94960_key))._field_reference,(*((*(_94960_key))._field_kind))._field_kind,_94949_d,(*((*this)._field_rang))._field_in_token);
}



inline void _1a700327a_RangeChecker::_method_check_slice(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _1b7553d92_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_1a6a19a50_Slc> _96817_slc = (*((*((*this)._field_d))._field_kind))._method_slc();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),(*(_96817_slc))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_96817_slc))._field_elem);
}



inline void _1a700327a_RangeChecker::_method_check_array(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _1b7553d92_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_1a6a19a50_Arr> _98117_arr = (*((*((*this)._field_d))._field_kind))._method_arr();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),(*(_98117_arr))._field_elem));
	(*this)._method_check_range_expr_validity((*this)._field_d,(*((*this)._field_kind))._field_key_b,(*(_98117_arr))._field_elem);
}



inline void _1a700327a_RangeChecker::_method_check_map_key_a(void) {
	if (((*((*this)._field_rang))._field_key_a == nullptr) || _1b7553d92_is_ignore_ident((*((*((*this)._field_rang))._field_key_a))._field_ident)) {
		return;
	}
	jule::Ptr<_1a6a19a50_Map> _99317_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_a=(*this)._method_build_var((*((*this)._field_rang))._field_key_a);
	(*((*((*this)._field_kind))._field_key_a))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),(*(_99317_m))._field_key));
	jule::Ptr<_1a8b431d7_Data> _99717_d = jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d)));
	(*(_99717_d))._field_kind=(*(_99317_m))._field_key;
	(*this)._method_check_range_expr_validity(_99717_d,(*((*this)._field_kind))._field_key_a,(*(_99317_m))._field_key);
}



inline void _1a700327a_RangeChecker::_method_check_map_key_b(void) {
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _1b7553d92_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	jule::Ptr<_1a6a19a50_Map> _100817_m = (*((*((*this)._field_d))._field_kind))._method_map();
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),(*(_100817_m))._field_val));
	jule::Ptr<_1a8b431d7_Data> _101217_d = jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d)));
	(*(_101217_d))._field_kind=(*(_100817_m))._field_val;
	(*this)._method_check_range_expr_validity(_101217_d,(*((*this)._field_kind))._field_key_b,(*(_100817_m))._field_val);
}



inline void _1a700327a_RangeChecker::_method_check_map(void) {
	(*this)._method_check_map_key_a();
	(*this)._method_check_map_key_b();
}



inline void _1a700327a_RangeChecker::_method_check_str(void) {
	(*this)._method_set_size_key();
	if (((*((*this)._field_rang))._field_key_b == nullptr) || _1b7553d92_is_ignore_ident((*((*((*this)._field_rang))._field_key_b))._field_ident)) {
		return;
	}
	(*((*this)._field_kind))._field_key_b=(*this)._method_build_var((*((*this)._field_rang))._field_key_b);
	(*((*((*this)._field_kind))._field_key_b))._field_kind=jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u8", 2))))));
}



inline jule::Bool _1a700327a_RangeChecker::_method_check(void) {
	{
		
		if ((*((*((*this)._field_d))._field_kind))._field_variadic) {
			_case_begin_4401202672:;
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_4401199632:;
			{
				(*this)._method_check_slice();
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_4401199728:;
			{
				(*this)._method_check_array();
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_map() != nullptr) {
			_case_begin_4401199824:;
			{
				(*this)._method_check_map();
				return true;
			}
		}
		else {
			_case_begin_4401199328:;
			{
				jule::Ptr<_1a6a19a50_Prim> _105517_prim = (*((*((*this)._field_d))._field_kind))._method_prim();
				if ((_105517_prim != nullptr) && (*(_105517_prim))._method_is_str()) {
					(*this)._method_check_str();
					return true;
				}
			}
		}
		_match_end_4401199152:;
	}
	(*((*((*this)._field_sc))._field_s))._method_push_err((*((*this)._field_rang))._field_in_token,jule::Str("range iterations must be have enumerable expression", 51),jule::Slice<jule::Any>());
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a700327a_RangeChecker &_Src) {
	_Stream << "RangeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "rang:" << _Src._field_rang << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a8acbe95_SymbolTable::_method_find_package(jule::Str _2535_ident) {
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_4401289376:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a8acbe95_pkg = *it;
			{
				if ((*(_1a8acbe95_pkg))._field_ident == _2535_ident) {
					return _1a8acbe95_pkg;
				}
			}
			_iter_next_4401289376:;
			++it;
			goto _iter_begin_4401289376;
		}
		_iter_end_4401289376:;
	}
	return nullptr;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a8acbe95_SymbolTable::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)> _3737_selector) {
	if (_3737_selector == nullptr) {
		return nullptr;
	}
	{
		auto &expr = (*this)._field_imports;
		auto it = expr.begin();
		_iter_begin_4401294128:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a8acbe95_pkg = *it;
			{
				if (_3737_selector(_1a8acbe95_pkg)) {
					return _1a8acbe95_pkg;
				}
			}
			_iter_next_4401294128:;
			++it;
			goto _iter_begin_4401294128;
		}
		_iter_end_4401294128:;
	}
	return nullptr;
}



inline jule::Ptr<_1a7003e4b_Var> _1a8acbe95_SymbolTable::_method_find_var(jule::Str _5231_ident,jule::Bool _5243_cpp_linked) {
	return (*this)._method___find_var(_5231_ident,_5243_cpp_linked,false);
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a8acbe95_SymbolTable::_method_find_type_alias(jule::Str _5838_ident,jule::Bool _5850_cpp_linked) {
	return (*this)._method___find_type_alias(_5838_ident,_5850_cpp_linked,false);
}



inline jule::Ptr<_1b7905331_Struct> _1a8acbe95_SymbolTable::_method_find_struct(jule::Str _6434_ident,jule::Bool _6446_cpp_linked) {
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_4401303104:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a8acbe95_s = *it;
			{
				if (((*(_1a8acbe95_s))._field_ident == _6434_ident) && ((*(_1a8acbe95_s))._field_cpp_linked == _6446_cpp_linked)) {
					return _1a8acbe95_s;
				}
			}
			_iter_next_4401303104:;
			++it;
			goto _iter_begin_4401303104;
		}
		_iter_end_4401303104:;
	}
	return nullptr;
}



inline jule::Ptr<_1a691a500_Fn> _1a8acbe95_SymbolTable::_method_find_fn(jule::Str _7530_ident,jule::Bool _7542_cpp_linked) {
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_4401307824:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a8acbe95_f = *it;
			{
				if (((*(_1a8acbe95_f))._field_ident == _7530_ident) && ((*(_1a8acbe95_f))._field_cpp_linked == _7542_cpp_linked)) {
					return _1a8acbe95_f;
				}
			}
			_iter_next_4401307824:;
			++it;
			goto _iter_begin_4401307824;
		}
		_iter_end_4401307824:;
	}
	return nullptr;
}



inline jule::Ptr<_1b76b472d_Trait> _1a8acbe95_SymbolTable::_method_find_trait(jule::Str _8633_ident) {
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_4401311904:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> _1a8acbe95_t = *it;
			{
				if ((*(_1a8acbe95_t))._field_ident == _8633_ident) {
					return _1a8acbe95_t;
				}
			}
			_iter_next_4401311904:;
			++it;
			goto _iter_begin_4401311904;
		}
		_iter_end_4401311904:;
	}
	return nullptr;
}



inline jule::Ptr<_1a6bb9150_Enum> _1a8acbe95_SymbolTable::_method_find_enum(jule::Str _9732_ident) {
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_4401312896:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bb9150_Enum> _1a8acbe95_e = *it;
			{
				if ((*(_1a8acbe95_e))._field_ident == _9732_ident) {
					return _1a8acbe95_e;
				}
			}
			_iter_next_4401312896:;
			++it;
			goto _iter_begin_4401312896;
		}
		_iter_end_4401312896:;
	}
	return nullptr;
}



inline jule::Ptr<_1a7003e4b_Var> _1a8acbe95_SymbolTable::_method___find_var(jule::Str _10829_ident,jule::Bool _10841_cpp_linked,jule::Bool _10859_reverse) {
	if (_10859_reverse) {
		jule::I64 _11021_i = (*this)._field_vars.len() - 1LL;
		for (; _11021_i >= 0LL; (_11021_i)--) {
			{
				jule::Ptr<_1a7003e4b_Var> _11225_v = (*this)._field_vars[_11021_i];
				if (((*(_11225_v))._field_ident == _10829_ident) && ((*(_11225_v))._field_cpp_linked == _10841_cpp_linked)) {
					return _11225_v;
				}
			}
		_iter_next_4401321824:;
		}
		_iter_end_4401321824:;
	} else {
		{
			auto &expr = (*this)._field_vars;
			auto it = expr.begin();
			_iter_begin_4401326176:;
			if (it != expr.end()) {
				jule::Ptr<_1a7003e4b_Var> _1a8acbe95_v = *it;
				{
					if (((*(_1a8acbe95_v))._field_ident == _10829_ident) && ((*(_1a8acbe95_v))._field_cpp_linked == _10841_cpp_linked)) {
						return _1a8acbe95_v;
					}
				}
				_iter_next_4401326176:;
				++it;
				goto _iter_begin_4401326176;
			}
			_iter_end_4401326176:;
		}
	}
	return nullptr;
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a8acbe95_SymbolTable::_method___find_type_alias(jule::Str _12736_ident,jule::Bool _12748_cpp_linked,jule::Bool _12766_reverse) {
	if (_12766_reverse) {
		jule::I64 _12921_i = (*this)._field_type_aliases.len() - 1LL;
		for (; _12921_i >= 0LL; (_12921_i)--) {
			{
				jule::Ptr<_1a6a19a50_TypeAlias> _13125_ta = (*this)._field_type_aliases[_12921_i];
				if (((*(_13125_ta))._field_ident == _12736_ident) && ((*(_13125_ta))._field_cpp_linked == _12748_cpp_linked)) {
					return _13125_ta;
				}
			}
		_iter_next_4401332976:;
		}
		_iter_end_4401332976:;
	} else {
		{
			auto &expr = (*this)._field_type_aliases;
			auto it = expr.begin();
			_iter_begin_4401337328:;
			if (it != expr.end()) {
				jule::Ptr<_1a6a19a50_TypeAlias> _1a8acbe95_ta = *it;
				{
					if (((*(_1a8acbe95_ta))._field_ident == _12736_ident) && ((*(_1a8acbe95_ta))._field_cpp_linked == _12748_cpp_linked)) {
						return _1a8acbe95_ta;
					}
				}
				_iter_next_4401337328:;
				++it;
				goto _iter_begin_4401337328;
			}
			_iter_end_4401337328:;
		}
	}
	return nullptr;
}



inline jule::Any _1a8acbe95_SymbolTable::_method_def_by_ident(jule::Str _14831_ident,jule::Bool _14843_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_4401333264:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> _1a8acbe95_v = *it;
			{
				if (((*(_1a8acbe95_v))._field_ident == _14831_ident) && ((*(_1a8acbe95_v))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1a8acbe95_v);
				}
			}
			_iter_next_4401333264:;
			++it;
			goto _iter_begin_4401333264;
		}
		_iter_end_4401333264:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4401343776:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeAlias> _1a8acbe95_ta = *it;
			{
				if (((*(_1a8acbe95_ta))._field_ident == _14831_ident) && ((*(_1a8acbe95_ta))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1a8acbe95_ta);
				}
			}
			_iter_next_4401343776:;
			++it;
			goto _iter_begin_4401343776;
		}
		_iter_end_4401343776:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_4401347488:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a8acbe95_s = *it;
			{
				if (((*(_1a8acbe95_s))._field_ident == _14831_ident) && ((*(_1a8acbe95_s))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1a8acbe95_s);
				}
			}
			_iter_next_4401347488:;
			++it;
			goto _iter_begin_4401347488;
		}
		_iter_end_4401347488:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_4401350608:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a8acbe95_f = *it;
			{
				if (((*(_1a8acbe95_f))._field_ident == _14831_ident) && ((*(_1a8acbe95_f))._field_cpp_linked == _14843_cpp_linked)) {
					return jule::Any(_1a8acbe95_f);
				}
			}
			_iter_next_4401350608:;
			++it;
			goto _iter_begin_4401350608;
		}
		_iter_end_4401350608:;
	}
	if (_14843_cpp_linked) {
		return jule::Any(nullptr);
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_4401354992:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> _1a8acbe95_t = *it;
			{
				if ((*(_1a8acbe95_t))._field_ident == _14831_ident) {
					return jule::Any(_1a8acbe95_t);
				}
			}
			_iter_next_4401354992:;
			++it;
			goto _iter_begin_4401354992;
		}
		_iter_end_4401354992:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_4401351408:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bb9150_Enum> _1a8acbe95_e = *it;
			{
				if ((*(_1a8acbe95_e))._field_ident == _14831_ident) {
					return jule::Any(_1a8acbe95_e);
				}
			}
			_iter_next_4401351408:;
			++it;
			goto _iter_begin_4401351408;
		}
		_iter_end_4401351408:;
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1a8acbe95_SymbolTable::_method_is_duplicated_ident(jule::Uintptr _19534_itself,jule::Str _19551_ident,jule::Bool _19563_cpp_linked) {
	{
		auto &expr = (*this)._field_vars;
		auto it = expr.begin();
		_iter_begin_4401361360:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> &_1a8acbe95_v = *it;
			{
				if (((static_cast<jule::Uintptr>(_1a8acbe95_v) != _19534_itself) && ((*(_1a8acbe95_v))._field_ident == _19551_ident)) && ((*(_1a8acbe95_v))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4401361360:;
			++it;
			goto _iter_begin_4401361360;
		}
		_iter_end_4401361360:;
	}
	{
		auto &expr = (*this)._field_type_aliases;
		auto it = expr.begin();
		_iter_begin_4401363664:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeAlias> &_1a8acbe95_ta = *it;
			{
				if (((static_cast<jule::Uintptr>(_1a8acbe95_ta) != _19534_itself) && ((*(_1a8acbe95_ta))._field_ident == _19551_ident)) && ((*(_1a8acbe95_ta))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4401363664:;
			++it;
			goto _iter_begin_4401363664;
		}
		_iter_end_4401363664:;
	}
	{
		auto &expr = (*this)._field_structs;
		auto it = expr.begin();
		_iter_begin_4401362272:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> &_1a8acbe95_s = *it;
			{
				if (((static_cast<jule::Uintptr>(_1a8acbe95_s) != _19534_itself) && ((*(_1a8acbe95_s))._field_ident == _19551_ident)) && ((*(_1a8acbe95_s))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4401362272:;
			++it;
			goto _iter_begin_4401362272;
		}
		_iter_end_4401362272:;
	}
	{
		auto &expr = (*this)._field_funcs;
		auto it = expr.begin();
		_iter_begin_4401373856:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> &_1a8acbe95_f = *it;
			{
				if (((static_cast<jule::Uintptr>(_1a8acbe95_f) != _19534_itself) && ((*(_1a8acbe95_f))._field_ident == _19551_ident)) && ((*(_1a8acbe95_f))._field_cpp_linked == _19563_cpp_linked)) {
					return true;
				}
			}
			_iter_next_4401373856:;
			++it;
			goto _iter_begin_4401373856;
		}
		_iter_end_4401373856:;
	}
	if (_19563_cpp_linked) {
		return false;
	}
	{
		auto &expr = (*this)._field_traits;
		auto it = expr.begin();
		_iter_begin_4401378448:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> &_1a8acbe95_t = *it;
			{
				if ((static_cast<jule::Uintptr>(_1a8acbe95_t) != _19534_itself) && ((*(_1a8acbe95_t))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_4401378448:;
			++it;
			goto _iter_begin_4401378448;
		}
		_iter_end_4401378448:;
	}
	{
		auto &expr = (*this)._field_enums;
		auto it = expr.begin();
		_iter_begin_4401362416:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bb9150_Enum> &_1a8acbe95_e = *it;
			{
				if ((static_cast<jule::Uintptr>(_1a8acbe95_e) != _19534_itself) && ((*(_1a8acbe95_e))._field_ident == _19551_ident)) {
					return true;
				}
			}
			_iter_next_4401362416:;
			++it;
			goto _iter_begin_4401362416;
		}
		_iter_end_4401362416:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a8acbe95_SymbolTable &_Src) {
	_Stream << "SymbolTable{";
	_Stream << "file:" << _Src._field_file << ", ";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "imports:" << _Src._field_imports << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "type_aliases:" << _Src._field_type_aliases << ", ";
	_Stream << "structs:" << _Src._field_structs << ", ";
	_Stream << "funcs:" << _Src._field_funcs << ", ";
	_Stream << "traits:" << _Src._field_traits << ", ";
	_Stream << "enums:" << _Src._field_enums << ", ";
	_Stream << "impls:" << _Src._field_impls;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a8b431d7_Data::_method_is_nil(void) {
	return (*((*this)._field_kind))._method_is_nil();
}



inline jule::Bool _1a8b431d7_Data::_method_is_void(void) {
	return (*((*this)._field_kind))._method_void();
}



inline jule::Bool _1a8b431d7_Data::_method_is_const(void) {
	return (*this)._field_constant != nullptr;
}



inline jule::Bool _1a8b431d7_Data::_method_good_operand(jule::Ptr<_1a8b431d7_Data>& _31836_other) {
	return ((((*((*(_31836_other))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_31836_other))._field_kind))._method_prim()))._method_is_any()))) && ((*((*(_31836_other))._field_kind))._method_trt() == nullptr)) && (!((*((*this)._field_kind))._method_is_nil()));
}







std::ostream &operator<<(std::ostream &_Stream, const _1a8b431d7_Data &_Src) {
	_Stream << "Data{";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "cast_kind:" << _Src._field_cast_kind << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "lvalue:" << _Src._field_lvalue << ", ";
	_Stream << "is_rune:" << _Src._field_is_rune << ", ";
	_Stream << "model:" << _Src._field_model << ", ";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "constant:" << _Src._field_constant;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a8b431d7_Value &_Src) {
	_Stream << "Value{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}



inline void _1a8b431d7_Eval::_method_push_err(_1b7553d92_Token _34527_token,jule::Str _34541_fmt,jule::Slice<jule::Any> _34554_args) {
	(*((*this)._field_s))._method_push_err(_34527_token,_34541_fmt,_34554_args);
}



inline void _1a8b431d7_Eval::_method_push_suggestion(jule::Str _35034_fmt,jule::Slice<jule::Any> _35047_args) {
	(*((*this)._field_s))._method_push_suggestion(_35034_fmt,_35047_args);
}



inline void _1a8b431d7_Eval::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _1a8b431d7_Eval::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Bool _1a8b431d7_Eval::_method_is_unsafe(void) {
	return (*this)._field_unsafety;
}



inline jule::Bool _1a8b431d7_Eval::_method_is_global(void) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a7002752_Sema>>()) {
			_case_begin_4401408896:;
			{
				return true;
			}
		}
		else {
			_case_begin_4401409360:;
			{
				return false;
			}
		}
		_match_end_4401409104:;
	}
}



inline void _1a8b431d7_Eval::_method_apply_numeric_prefix(jule::Ptr<_1a8b431d7_Data>& _36844_d) {
	if ((((_36844_d == nullptr) || ((*(_36844_d))._field_cast_kind != nullptr)) || (!((*(_36844_d))._method_is_const()))) || ((*((*(_36844_d))._field_kind))._method_prim() == nullptr)) {
		return;
	}
	if (((*this)._field_prefix == nullptr) || ((*((*this)._field_prefix))._method_prim() == nullptr)) {
		return;
	}
	jule::Str _37613_pk = (*((*((*this)._field_prefix))._method_prim()))._field_kind;
	{
		
		if (_1a9133243_is_float(_37613_pk)) {
			_case_begin_4401422064:;
			{
				(*(_36844_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_36844_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_36844_d))._field_constant))._method_as_f64()));
			}
		}
		else if (_1a9133243_is_sig_int(_37613_pk)) {
			_case_begin_4401422176:;
			{
				if ((!(_1a700327a_int_assignable(_37613_pk,_36844_d)))) {
					goto _match_end_4401421888;
				}
				(*(_36844_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_36844_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_36844_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1a9133243_is_unsig_int(_37613_pk)) {
			_case_begin_4401422288:;
			{
				if ((!(_1a700327a_int_assignable(_37613_pk,_36844_d)))) {
					goto _match_end_4401421888;
				}
				(*(_36844_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*((*this)._field_prefix))._field_kind));
				(*((*(_36844_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_36844_d))._field_constant))._method_as_u64()));
			}
		}
		_match_end_4401421888:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_lit_nil(void) {
	jule::Ptr<_1b6dd59aa_Const> _40217_constant = _1b6dd59aa_Const::_static_method_new_nil();
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),nullptr)),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_40217_constant),false,_40217_constant));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_lit_str(jule::Ptr<_1b7509a90_LitExpr>& _41323_l) {
	jule::Str _41417_s = (*(_41323_l))._field_value.slice(1LL,(*(_41323_l))._field_value.len() - 1LL);
	if (_1b7553d92_is_raw_str((*(_41323_l))._field_value)) {
		_41417_s=_1a91ba31e_to_raw_str(static_cast<jule::Slice<jule::U8>>(_41417_s));
	} else {
		_41417_s=_1a91ba31e_to_str(static_cast<jule::Slice<jule::U8>>(_41417_s));
	}
	jule::Ptr<_1b6dd59aa_Const> _42017_constant = _1b6dd59aa_Const::_static_method_new_str(_41417_s);
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_42017_constant),false,_42017_constant));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_lit_bool(jule::Ptr<_1b7509a90_LitExpr>& _43424_l) {
	jule::Ptr<_1b6dd59aa_Const> _43517_constant = _1b6dd59aa_Const::_static_method_new_bool(((*(_43424_l))._field_value == jule::Str("true", 4)));
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_43517_constant),false,_43517_constant));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_lit_rune(jule::Ptr<_1b7509a90_LitExpr>& _44824_l) {
	
	
	jule::Str _45213_lt = (*(_44824_l))._field_value.slice(1LL,(*(_44824_l))._field_value.len() - 1LL);
	jule::I32 _45313_r = _1a91ba31e_to_rune(static_cast<jule::Slice<jule::U8>>(_45213_lt));
	jule::Ptr<_1a8b431d7_Data> _45417_data = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,_1b6dd59aa_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_45313_r)))));
	jule::Bool _46113_is_ascii = _1a91ba31e_is_ascii(_45313_r);
	if (_46113_is_ascii) {
		(*(_45417_data))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u8", 2))));
	} else {
		(*(_45417_data))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i32", 3))));
	}
	(*(_45417_data))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_RuneExprModel>(new( std::nothrow ) _1a69b8d2e_RuneExprModel(_45313_r)));
	(*(_45417_data))._field_is_rune=true;
	return _45417_data;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_lit_float(jule::Ptr<_1b7509a90_LitExpr>& _47725_l) {
	
	jule::F64 _48014_f;
	std::tie(_48014_f,std::ignore) = _211cadddd_parse_float((*(_47725_l))._field_value,64LL);
	jule::Ptr<_1b6dd59aa_Const> _48117_constant = _1b6dd59aa_Const::_static_method_new_f64(_48014_f);
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_48117_constant),false,_48117_constant));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_lit_int(jule::Ptr<_1b7509a90_LitExpr>& _49527_l) {
	
	jule::Str _49817_lit = (*(_49527_l))._field_value;
	jule::Int _49917_base = 0LL;
	{
		
		if (_1cea16edb_has_prefix(_49817_lit,jule::Str("0x", 2))) {
			_case_begin_4401490192:;
			{
				_49817_lit=_49817_lit.slice(2LL);
				_49917_base=16LL;
			}
		}
		else if (_1cea16edb_has_prefix(_49817_lit,jule::Str("0b", 2))) {
			_case_begin_4401490288:;
			{
				_49817_lit=_49817_lit.slice(2LL);
				_49917_base=2LL;
			}
		}
		else if (_1cea16edb_has_prefix(_49817_lit,jule::Str("0o", 2))) {
			_case_begin_4401489696:;
			{
				_49817_lit=_49817_lit.slice(2LL);
				_49917_base=8LL;
			}
		}
		else if ((_49817_lit[0LL] == '0') && (_49817_lit.len() > 1LL)) {
			_case_begin_4401489792:;
			{
				_49817_lit=_49817_lit.slice(1LL);
				_49917_base=8LL;
			}
		}
		else {
			_case_begin_4401489392:;
			{
				_49917_base=10LL;
			}
		}
		_match_end_4401489280:;
	}
	jule::Ptr<_1a8b431d7_Data> _52217_d = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1b6dd59aa_Const>()));
	jule::I64 _52814_sig;
	jule::Int _52819_err;
	std::tie(_52814_sig,_52819_err) = _211cb0593_parse_int(_49817_lit,_49917_base,64LL);
	if (_52819_err == 0LLU) {
		(*(_52217_d))._field_constant=_1b6dd59aa_Const::_static_method_new_i64(_52814_sig);
		(*(_52217_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3))));
	} else {
		jule::U64 _53518_unsig;
		jule::Int _53525_err;
		std::tie(_53518_unsig,_53525_err) = _211cb0593_parse_uint(_49817_lit,_49917_base,64LL);
		if (_53525_err != 0LLU) {
			(*this)._method_push_err((*(_49527_l))._field_token,jule::Str("arithmetic value overflow: this value too big", 45),jule::Slice<jule::Any>());
			(*this)._method_push_suggestion(jule::Str("floating-point literals may solve your problem", 46),jule::Slice<jule::Any>());
		}
		(*(_52217_d))._field_constant=_1b6dd59aa_Const::_static_method_new_u64(_53518_unsig);
		(*(_52217_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("uint", 4))));
	}
	(*(_52217_d))._field_model=jule::Any((*(_52217_d))._field_constant);
	return _52217_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_lit_num(jule::Ptr<_1b7509a90_LitExpr>& _55127_l) {
	{
		
		if (_1b7553d92_is_float((*(_55127_l))._field_value)) {
			_case_begin_4401521376:;
			{
				return (*this)._method_lit_float(_55127_l);
			}
		}
		else {
			_case_begin_4401520000:;
			{
				return (*this)._method_lit_int(_55127_l);
			}
		}
		_match_end_4401519824:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_lit(jule::Ptr<_1b7509a90_LitExpr> _56027_lit) {
	{
		
		if ((*(_56027_lit))._method_is_nil()) {
			_case_begin_4401527296:;
			{
				return (*this)._method_lit_nil();
			}
		}
		else if (_1b7553d92_is_str((*(_56027_lit))._field_value)) {
			_case_begin_4401527392:;
			{
				return (*this)._method_lit_str(_56027_lit);
			}
		}
		else if (_1b7553d92_is_bool((*(_56027_lit))._field_value)) {
			_case_begin_4401526720:;
			{
				return (*this)._method_lit_bool(_56027_lit);
			}
		}
		else if (_1b7553d92_is_rune((*(_56027_lit))._field_value)) {
			_case_begin_4401526816:;
			{
				return (*this)._method_lit_rune(_56027_lit);
			}
		}
		else if (_1b7553d92_is_num((*(_56027_lit))._field_value)) {
			_case_begin_4401526912:;
			{
				return (*this)._method_lit_num(_56027_lit);
			}
		}
		else {
			_case_begin_4401525712:;
			{
				return nullptr;
			}
		}
		_match_end_4401525536:;
	}
}



inline jule::Any _1a8b431d7_Eval::_method_find_builtins(jule::Str _57732_ident) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a6e9a574_ImportInfo>>()) {
			_case_begin_4401537888:;
			{
				jule::Any _58021_def = _1a8b431d7_find_builtins_import(_57732_ident,(*this)._field_lookup.operator jule::Ptr<_1a6e9a574_ImportInfo>());
				if (_58021_def != nullptr) {
					return _58021_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a7002752_Sema>>()) {
			_case_begin_4401537984:;
			{
				jule::Any _58621_def = _1a8b431d7_find_builtins_sema(_57732_ident,(*this)._field_lookup.operator jule::Ptr<_1a7002752_Sema>());
				if (_58621_def != nullptr) {
					return _58621_def;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4401538080:;
			{
				jule::Any _59221_def = _1a8b431d7_find_builtins_sema(_57732_ident,(*((*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>()))._field_s);
				if (_59221_def != nullptr) {
					return _59221_def;
				}
			}
		}
		_match_end_4401537472:;
	}
	return ((jule::Any((*this)._field_dis_builtin)) ? (jule::Any(nullptr)) : (_1a90790e0_find_builtin_def(_57732_ident)));
}



inline jule::Any _1a8b431d7_Eval::_method_get_def(jule::Str _60126_ident,jule::Bool _60138_cpp_linked) {
	if ((!(_60138_cpp_linked))) {
		jule::Ptr<_1a6bb9150_Enum> _60321_enm = (*this)._field_lookup.get()._method_find_enum(_60126_ident);
		if (_60321_enm != nullptr) {
			return jule::Any(_60321_enm);
		}
	}
	jule::Ptr<_1a7003e4b_Var> _60917_v = (*this)._field_lookup.get()._method_find_var(_60126_ident,_60138_cpp_linked);
	if (_60917_v != nullptr) {
		return jule::Any(_60917_v);
	}
	jule::Ptr<_1a691a500_Fn> _61417_f = (*this)._field_lookup.get()._method_find_fn(_60126_ident,_60138_cpp_linked);
	if (_61417_f != nullptr) {
		return jule::Any(_61417_f);
	}
	jule::Ptr<_1b7905331_Struct> _61917_s = (*this)._field_lookup.get()._method_find_struct(_60126_ident,_60138_cpp_linked);
	if (_61917_s != nullptr) {
		return jule::Any(_61917_s);
	}
	jule::Ptr<_1a6a19a50_TypeAlias> _62417_ta = (*this)._field_lookup.get()._method_find_type_alias(_60126_ident,_60138_cpp_linked);
	if (_62417_ta != nullptr) {
		return jule::Any(_62417_ta);
	}
	return (*this)._method_find_builtins(_60126_ident);
}



inline void _1a8b431d7_Eval::_method_push_reference(jule::Ptr<_1b6a47496_ReferenceStack>& _63238_references) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4401575824:;
			{
				jule::Ptr<_1a6bc3e29_ScopeChecker> _63521_sc = (*((*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>()))._method_get_root();
				if ((!((*(_63238_references))._method_exist_1((*(_63521_sc))._field_owner)))) {
					(*(_63238_references))._method_push(jule::Any((*(_63521_sc))._field_owner));
				}
			}
		}
		else {
			_case_begin_4401573984:;
			{
				if (((*this)._field_owner != nullptr) && (!((*(_63238_references))._method_exist_0((*this)._field_owner)))) {
					(*(_63238_references))._method_push(jule::Any((*this)._field_owner));
				}
			}
		}
		_match_end_4401573904:;
	}
}



inline void _1a8b431d7_Eval::_method_push_reference_to_fn(jule::Ptr<_1a691a500_FnIns>& _64744_f) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4401590000:;
			{
				jule::Ptr<_1a6bc3e29_ScopeChecker> _65021_sc = (*((*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_65021_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_65021_sc))._field_owner))._field_references))._method_exist_1(_64744_f)))) {
					(*((*((*(_65021_sc))._field_owner))._field_refers))._method_push(jule::Any(_64744_f));
				}
			}
		}
		_match_end_4401594048:;
	}
	(*this)._method_push_reference((*(_64744_f))._field_references);
}



inline void _1a8b431d7_Eval::_method_push_reference_to_var(jule::Ptr<_1a7003e4b_Var>& _65845_v) {
	if ((*(_65845_v))._field_references == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4401607952:;
			{
				jule::Ptr<_1a6bc3e29_ScopeChecker> _66521_sc = (*((*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_66521_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_66521_sc))._field_owner))._field_references))._method_exist_0(_65845_v)))) {
					(*((*((*(_66521_sc))._field_owner))._field_refers))._method_push(jule::Any(_65845_v));
				}
			}
		}
		_match_end_4401606352:;
	}
	(*this)._method_push_reference((*(_65845_v))._field_references);
}



inline void _1a8b431d7_Eval::_method_push_reference_to_struct(jule::Ptr<_1b7905331_StructIns>& _67448_s) {
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4401619600:;
			{
				jule::Ptr<_1a6bc3e29_ScopeChecker> _67721_sc = (*((*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>()))._method_get_root();
				if ((*((*((*(_67721_sc))._field_owner))._field_decl))._method_is_init() && (!((*((*((*(_67721_sc))._field_owner))._field_references))._method_exist_2(_67448_s)))) {
					(*((*((*(_67721_sc))._field_owner))._field_refers))._method_push(jule::Any(_67448_s));
				}
			}
		}
		_match_end_4401619504:;
	}
	(*this)._method_push_reference((*(_67448_s))._field_references);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method___eval_enum(jule::Ptr<_1a6bb9150_Enum> _68530_enm) {
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_68530_enm)),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),true,nullptr));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_enum(jule::Ptr<_1a6bb9150_Enum> _69732_enm,_1b7553d92_Token _69744_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_69732_enm))._field_public,(*(_69732_enm))._field_token)))) {
		(*this)._method_push_err(_69744_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_69732_enm))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	return (*this)._method___eval_enum(_69732_enm);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method___eval_struct(jule::Ptr<_1b7905331_StructIns> _70732_s) {
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_70732_s)),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_70732_s),true,nullptr));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_struct(jule::Ptr<_1b7905331_StructIns> _72034_s,_1b7553d92_Token _72049_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_72034_s))._field_decl))._field_public,(*((*(_72034_s))._field_decl))._field_token)))) {
		(*this)._method_push_err(_72049_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_72034_s))._field_decl))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*((*(_72034_s))._field_decl))._field_directives,_72049_error_token);
	return (*this)._method___eval_struct(_72034_s);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_fn_ins(jule::Ptr<_1a691a500_FnIns> _73230_f) {
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_73230_f)),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(_73230_f),false,nullptr));
}



inline void _1a8b431d7_Eval::_method_check_deprecated(jule::Slice<jule::Ptr<_1b7509a90_Directive>>& _74540_directives,_1b7553d92_Token _74582_tok) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	jule::Ptr<_1b7509a90_Directive> _75013_d = _1a8b431d7_find_directive(_74540_directives,jule::Str("deprecated", 10));
	if (_75013_d != nullptr) {
		if ((*(_75013_d))._field_args.len() == 0LL) {
			(*this)._method_push_err(_74582_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any(jule::Str("this code is deprecated", 23))}));
		} else {
			(*this)._method_push_err(_74582_tok,jule::Str("deprecated usage: @", 19),jule::Slice<jule::Any>({jule::Any((*(_75013_d))._field_args[0LL]._field_kind)}));
		}
		(*this)._method_push_suggestion(jule::Str("use Unsafe Jule for deprecated codes or replace to successor", 60),jule::Slice<jule::Any>());
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_fn(jule::Ptr<_1a691a500_Fn> _76130_f,_1b7553d92_Token _76138_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_76130_f))._field_public,(*(_76130_f))._field_token)))) {
		(*this)._method_push_err(_76138_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_76130_f))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_76130_f))._field_directives,_76138_error_token);
	jule::Ptr<_1a691a500_FnIns> _77017_ins = (*(_76130_f))._method_instance();
	(*this)._method_push_reference_to_fn(_77017_ins);
	return (*this)._method_eval_fn_ins(_77017_ins);
}



inline void _1a8b431d7_Eval::_method_push_illegal_cycle_error(jule::Ptr<_1a7003e4b_Var>& _77544_v1,jule::Ptr<_1a7003e4b_Var>& _77555_v2,jule::Str& _77570_message) {
	
	jule::Str _77813_refers_to = _1b6986b22_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any((*(_77544_v1))._field_ident),jule::Any((*(_77555_v2))._field_ident)}));
	_77570_message=((_1cea16edb_repeat(jule::Str(" ", 1),4LL) + _77813_refers_to) + jule::Str("\n", 1)) + _77570_message;
}



inline jule::Bool _1a8b431d7_Eval::_method_check_cross_cycle(jule::Ptr<_1a7003e4b_Var>& _78237_v,jule::Str& _78251_message) {
	{
		auto &expr = (*(_78237_v))._field_depends;
		auto it = expr.begin();
		_iter_begin_4401699376:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> &_1a8b431d7_d = *it;
			{
				if (_1a8b431d7_d == (*this)._field_owner) {
					(*this)._method_push_illegal_cycle_error(_78237_v,_1a8b431d7_d,_78251_message);
					return false;
				}
				if ((!((*this)._method_check_cross_cycle(_1a8b431d7_d,_78251_message)))) {
					(*this)._method_push_illegal_cycle_error(_78237_v,_1a8b431d7_d,_78251_message);
					return false;
				}
			}
			_iter_next_4401699376:;
			++it;
			goto _iter_begin_4401699376;
		}
		_iter_end_4401699376:;
	}
	return true;
}



inline jule::Bool _1a8b431d7_Eval::_method_check_illegal_cycles(jule::Ptr<_1a7003e4b_Var>& _80144_v,_1b7553d92_Token _80153_decl_token) {
	jule::Bool _80174_ok = jule::Bool();
	if ((*this)._field_owner == nullptr) {
		_80174_ok = true;
		return _80174_ok;
	}
	if ((*this)._field_owner == _80144_v) {
		(*this)._method_push_err((*((*this)._field_owner))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_owner))._field_ident)}));
		_80174_ok = false;
		return _80174_ok;
	}
	jule::Str _81317_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_80144_v,_81317_message)))) {
		jule::Str _81621_err_msg = _81317_message;
		_81317_message=jule::Str();
		(*this)._method_push_illegal_cycle_error((*this)._field_owner,_80144_v,_81317_message);
		_81621_err_msg=_81621_err_msg + _81317_message;
		(*this)._method_push_err(_80153_decl_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_81621_err_msg)}));
		_80174_ok = false;
		return _80174_ok;
	}
	(*((*this)._field_owner))._field_depends = jule::alloc_for_append((*((*this)._field_owner))._field_depends,1);(*((*this)._field_owner))._field_depends.__push(_80144_v);
	_80174_ok = true;
	return _80174_ok;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_var(jule::Ptr<_1a7003e4b_Var> _82831_v,_1b7553d92_Token _82840_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_82831_v))._field_public,(*(_82831_v))._field_token)))) {
		(*this)._method_push_err(_82840_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_82831_v))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*this)._method_check_deprecated((*(_82831_v))._field_directives,_82840_error_token);
	(*(_82831_v))._field_used=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a7002752_Sema>>()) {
			_case_begin_4401731904:;
			{
				jule::Bool _84217_ok = (*this)._method_check_illegal_cycles(_82831_v,_82840_error_token);
				if ((!(_84217_ok))) {
					return nullptr;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4401732000:;
			{
				if ((!((*(_82831_v))._field_reference)) || (*this)._method_is_unsafe()) {
					goto _match_end_4401731184;
				}
				jule::Ptr<_1a6bc3e29_ScopeChecker> _85221_s = (*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>();
				while (((*(_85221_s))._field_owner == nullptr) && ((*(_85221_s))._field_parent != nullptr)) {
					{
						_85221_s=(*(_85221_s))._field_parent;
					}
				_iter_next_4401736432:;
				}
				_iter_end_4401736432:;
				if ((((*(_85221_s))._field_owner != nullptr) && (*((*(_85221_s))._field_owner))._field_anon) && ((*(_82831_v))._field_scope != (*((*(_85221_s))._field_owner))._field_scope)) {
					(*this)._method_push_err(_82840_error_token,jule::Str("anonymous functions cannot access to reference definition @ of parent scope", 75),jule::Slice<jule::Any>({jule::Any((*(_82831_v))._field_ident)}));
				}
			}
		}
		_match_end_4401731184:;
	}
	(*this)._method_push_reference_to_var(_82831_v);
	if ((!((*(_82831_v))._field_cpp_linked)) && (((*(_82831_v))._field_value == nullptr) || ((*((*(_82831_v))._field_value))._field_data == nullptr))) {
		if ((*(_82831_v))._field_constant) {
			(*((*this)._field_s))._method_check_type_var(_82831_v,(*this)._field_s);
			if ((*((*(_82831_v))._field_value))._field_data == nullptr) {
				return nullptr;
			}
		}
	}
	if (((*(_82831_v))._field_kind == nullptr) || ((*((*(_82831_v))._field_kind))._field_kind == nullptr)) {
		if ((*(_82831_v))._field_scope != nullptr) {
			return nullptr;
		}
		(*((*this)._field_s))._method_check_type_var(_82831_v,(*this)._field_lookup);
		if (((*(_82831_v))._field_kind == nullptr) || ((*((*(_82831_v))._field_kind))._field_kind == nullptr)) {
			return nullptr;
		}
	}
	jule::Ptr<_1a8b431d7_Data> _89217_d = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data((*((*(_82831_v))._field_kind))._field_kind,jule::Ptr<_1a6a19a50_TypeKind>(),(*(_82831_v))._field_mutable,(*(_82831_v))._field_reference,(!((*(_82831_v))._field_constant)),jule::Bool(),jule::Any(_82831_v),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
	if (((!((*(_82831_v))._field_cpp_linked)) && (*(_82831_v))._method_is_initialized()) && ((*((*(_82831_v))._field_value))._field_data != nullptr)) {
		(*(_89217_d))._field_is_rune=(*((*((*(_82831_v))._field_value))._field_data))._field_is_rune;
	}
	if ((*(_82831_v))._field_constant && ((*((*((*(_82831_v))._field_value))._field_data))._field_constant != nullptr)) {
		(*(_89217_d))._field_constant=jule::new_ptr<_1b6dd59aa_Const>((*((*((*((*(_82831_v))._field_value))._field_data))._field_constant)));
		(*(_89217_d))._field_model=jule::Any((*(_89217_d))._field_constant);
	}
	if ((*((*(_89217_d))._field_kind))._method_fnc() != nullptr) {
		jule::Ptr<_1a691a500_FnIns> _91021_f = (*((*(_89217_d))._field_kind))._method_fnc();
		if ((*(_91021_f))._field_decl != nullptr) {
			(*((*(_91021_f))._field_decl))._field_ident=(*(_82831_v))._field_ident;
		}
	}
	return _89217_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_type_alias(jule::Ptr<_1a6a19a50_TypeAlias> _92138_ta,_1b7553d92_Token _92154_error_token) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_92138_ta))._field_public,(*(_92138_ta))._field_token)))) {
		(*this)._method_push_err(_92154_error_token,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_92138_ta))._field_ident)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_92138_ta))._field_used=true;
	jule::Trait<_1a6a19a50_Kind> _93017_kind = (*((*((*(_92138_ta))._field_kind))._field_kind))._field_kind;
	{
		auto &_match_expr{ _93017_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_StructIns>>()) {
			_case_begin_4401791904:;
			{
				return (*this)._method___eval_struct(_93017_kind.operator jule::Ptr<_1b7905331_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bb9150_Enum>>()) {
			_case_begin_4401792000:;
			{
				return (*this)._method___eval_enum(_93017_kind.operator jule::Ptr<_1a6bb9150_Enum>());
			}
		}
		else {
			_case_begin_4401791424:;
			{
				jule::Ptr<_1a8b431d7_Data> _93921_d = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind((((*(_92138_ta))._field_cpp_linked) ? ((*(_92138_ta))._field_ident) : ((*((*((*(_92138_ta))._field_kind))._field_kind))._field_cpp_ident)),(*(_92138_ta))._field_generic,jule::Bool(),(*((*((*(_92138_ta))._field_kind))._field_kind))._field_kind)),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),true,jule::Ptr<_1b6dd59aa_Const>()));
				(*(_93921_d))._field_model=jule::Any((*(_93921_d))._field_kind);
				return _93921_d;
			}
		}
		_match_end_4401791344:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_def(jule::Any _95331_def,_1b7553d92_Token _95341_ident) {
	{
		auto &_match_expr{ _95331_def };
		
		if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4401807776:;
			{
				return (*this)._method_eval_var(_95331_def.operator jule::Ptr<_1a7003e4b_Var>(),_95341_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bb9150_Enum>>()) {
			_case_begin_4401804928:;
			{
				return (*this)._method_eval_enum(_95331_def.operator jule::Ptr<_1a6bb9150_Enum>(),_95341_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4401805024:;
			{
				return (*this)._method_eval_struct((*(_95331_def.operator jule::Ptr<_1b7905331_Struct>()))._method_instance(),_95341_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a691a500_Fn>>()) {
			_case_begin_4401805120:;
			{
				return (*this)._method_eval_fn(_95331_def.operator jule::Ptr<_1a691a500_Fn>(),_95341_ident);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a691a500_FnIns>>()) {
			_case_begin_4401805216:;
			{
				return (*this)._method_eval_fn_ins(_95331_def.operator jule::Ptr<_1a691a500_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeAlias>>()) {
			_case_begin_4401807232:;
			{
				return (*this)._method_eval_type_alias(_95331_def.operator jule::Ptr<_1a6a19a50_TypeAlias>(),_95341_ident);
			}
		}
		else {
			_case_begin_4401804624:;
			{
				(*this)._method_push_err(_95341_ident,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any(_95341_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4401804416:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_ident(jule::Ptr<_1b7509a90_IdentExpr> _97929_ident) {
	jule::Any _98017_def = (*this)._method_get_def((*(_97929_ident))._field_ident,(*(_97929_ident))._field_cpp_linked);
	return (*this)._method_eval_def(_98017_def,(*(_97929_ident))._field_token);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_unary(jule::Ptr<_1b7509a90_UnaryExpr> _98434_u) {
	_1a8b431d7_UnaryEval _98517_unary = _1a8b431d7_UnaryEval::_static_method_new(this->self);
	return _98517_unary._method_eval(_98434_u);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_variadic(jule::Ptr<_1b7509a90_VariadicExpr> _98937_v) {
	if ((*(_98937_v))._field_expr == nullptr) {
		(*(this->self))._method_push_err((*(_98937_v))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _99517_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_99517_prefix;
	});
	jule::Ptr<_1a8b431d7_Data> _99917_d = (*(this->self))._method_eval_expr_kind((*(_98937_v))._field_expr);
	if (_99917_d == nullptr) {
		return nullptr;
	}
	if ((!((*((*(_99917_d))._field_kind))._method_variadicable()))) {
		(*(this->self))._method_push_err((*(_98937_v))._field_token,jule::Str("type @ is not variadicable", 26),jule::Slice<jule::Any>({jule::Any((*((*(_99917_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	jule::Ptr<_1a6a19a50_Slc> _100913_slc = (*((*(_99917_d))._field_kind))._method_slc();
	(*(_99917_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind((*((*(_100913_slc))._field_elem))._field_cpp_ident,(*((*(_100913_slc))._field_elem))._field_generic,true,(*((*(_100913_slc))._field_elem))._field_kind));
	return _99917_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_unsafe(jule::Ptr<_1b7509a90_UnsafeExpr> _101935_u) {
	jule::Bool _102013_unsafety = (*(this->self))._field_unsafety;
	(*(this->self))._field_unsafety=true;
	jule::Ptr<_1a8b431d7_Data> _102317_d = (*(this->self))._method_eval_expr_kind((*(_101935_u))._field_expr);
	(*(this->self))._field_unsafety=_102013_unsafety;
	return _102317_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_arr(jule::Ptr<_1b7509a90_SliceExpr> _103032_s) {
	jule::Ptr<_1a6a19a50_Arr> _103217_pt = (*((*(this->self))._field_prefix))._method_arr();
	jule::Ptr<_1a6a19a50_Arr> _103417_arr = jule::new_struct_ptr<_1a6a19a50_Arr>(new( std::nothrow ) _1a6a19a50_Arr(false,0LL,(*(_103217_pt))._field_elem));
	jule::Bool _104017_filled = false;
	if ((*(_103032_s))._field_elems.len() == 2LL) {
		{
			auto &_match_expr{ (*(_103032_s))._field_elems[1LL] };
			
			if (_match_expr.type_is<jule::Ptr<_1b7509a90_VariadicExpr>>()) {
				_case_begin_4401866704:;
				{
					if ((*((*(_103032_s))._field_elems[1LL].operator jule::Ptr<_1b7509a90_VariadicExpr>()))._field_expr != nullptr) {
						goto _match_end_4401866624;
					}
					if ((*(_103217_pt))._field_auto) {
						(*(this->self))._method_push_err((*(_103032_s))._field_token,jule::Str("auto-sized arrays cannot filled", 31),jule::Slice<jule::Any>());
						return nullptr;
					}
					_104017_filled=true;
					(*(_103032_s))._field_elems=(*(_103032_s))._field_elems.slice(0LL,1LL);
				}
			}
			_match_end_4401866624:;
		}
	}
	(*(_103417_arr))._field_n=static_cast<jule::I64>((*(_103032_s))._field_elems.len());
	if ((!((*(_103217_pt))._field_auto))) {
		if ((*(_103417_arr))._field_n > (*(_103217_pt))._field_n) {
			(*(this->self))._method_push_err((*(_103032_s))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else if ((*(_103417_arr))._field_n < (*(_103217_pt))._field_n) {
			(*(_103417_arr))._field_n=(*(_103217_pt))._field_n;
		}
	}
	jule::Ptr<_1a69b8d2e_ArrayExprModel> _106917_model = jule::new_struct<_1a69b8d2e_ArrayExprModel>(new( std::nothrow ) _1a69b8d2e_ArrayExprModel(_103417_arr,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>(((_104017_filled) ? (2LL) : (static_cast<jule::I64>((*(_103032_s))._field_elems.len())))))));
	jule::Ptr<_1a6a19a50_TypeKind> _107417_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_103417_arr))._field_elem;
	{
		auto &expr = (*(_103032_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_4401886800:;
		if (it != expr.end()) {
			jule::Any _1a8b431d7_elem = *it;
			{
				jule::Ptr<_1a8b431d7_Data> _107721_d = (*(this->self))._method_eval_expr_kind(_1a8b431d7_elem);
				if (_107721_d == nullptr) {
					goto _iter_next_4401886800;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_103417_arr))._field_elem,_107721_d,(*(_103032_s))._field_token);
				(*(_106917_model))._field_elems = jule::alloc_for_append((*(_106917_model))._field_elems,1);(*(_106917_model))._field_elems.__push((*(_107721_d))._field_model);
			}
			_iter_next_4401886800:;
			++it;
			goto _iter_begin_4401886800;
		}
		_iter_end_4401886800:;
	}
	(*(this->self))._field_prefix=_107417_prefix;
	if (_104017_filled) {
		(*(_106917_model))._field_elems = jule::alloc_for_append((*(_106917_model))._field_elems,1);(*(_106917_model))._field_elems.__push(jule::Any(nullptr));
	}
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_103417_arr)),jule::Ptr<_1a6a19a50_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_106917_model),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_exp_slc(jule::Ptr<_1b7509a90_SliceExpr> _110136_s,jule::Ptr<_1a6a19a50_TypeKind> _110155_elem_type) {
	jule::Ptr<_1a6a19a50_Slc> _110217_slc = jule::new_struct_ptr<_1a6a19a50_Slc>(new( std::nothrow ) _1a6a19a50_Slc(_110155_elem_type));
	jule::Ptr<_1a69b8d2e_SliceExprModel> _110617_model = jule::new_struct<_1a69b8d2e_SliceExprModel>(new( std::nothrow ) _1a69b8d2e_SliceExprModel(_110155_elem_type,jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_110136_s))._field_elems.len()))));
	jule::Ptr<_1a6a19a50_TypeKind> _111117_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_110217_slc))._field_elem;
	{
		auto &expr = (*(_110136_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_4401906640:;
		if (it != expr.end()) {
			jule::Any _1a8b431d7_elem = *it;
			{
				jule::Ptr<_1a8b431d7_Data> _111421_d = (*(this->self))._method_eval_expr_kind(_1a8b431d7_elem);
				if (_111421_d == nullptr) {
					goto _iter_next_4401906640;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_110217_slc))._field_elem,_111421_d,(*(_110136_s))._field_token);
				(*(_110617_model))._field_elems = jule::alloc_for_append((*(_110617_model))._field_elems,1);(*(_110617_model))._field_elems.__push((*(_111421_d))._field_model);
			}
			_iter_next_4401906640:;
			++it;
			goto _iter_begin_4401906640;
		}
		_iter_end_4401906640:;
	}
	(*(this->self))._field_prefix=_111117_prefix;
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_110217_slc)),jule::Ptr<_1a6a19a50_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_110617_model),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_slice_expr(jule::Ptr<_1b7509a90_SliceExpr> _113339_s) {
	if ((*(this->self))._field_prefix != nullptr) {
		{
			
			if ((*((*(this->self))._field_prefix))._method_arr() != nullptr) {
				_case_begin_4401919616:;
				{
					return (*(this->self))._method_eval_arr(_113339_s);
				}
			}
			else if ((*((*(this->self))._field_prefix))._method_slc() != nullptr) {
				_case_begin_4401919728:;
				{
					jule::Ptr<_1a6a19a50_Slc> _114025_pt = (*((*(this->self))._field_prefix))._method_slc();
					return (*(this->self))._method_eval_exp_slc(_113339_s,(*(_114025_pt))._field_elem);
				}
			}
			_match_end_4401919392:;
		}
	}
	jule::Ptr<_1a6a19a50_TypeKind> _114517_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	if ((*(_113339_s))._field_elems.len() == 0LL) {
		(*(this->self))._method_push_err((*(_113339_s))._field_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _115317_first_elem = (*(this->self))._method_eval_expr_kind((*(_113339_s))._field_elems[0LL]);
	if (_115317_first_elem == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _115817_d = (*(this->self))._method_eval_exp_slc(_113339_s,(*(_115317_first_elem))._field_kind);
	(*(this->self))._field_prefix=_114517_prefix;
	return _115817_d;
}



inline void _1a8b431d7_Eval::_method_check_integer_indexing_by_data(jule::Ptr<_1a8b431d7_Data>& _116454_d,_1b7553d92_Token _116464_token) {
	jule::Str _116513_err_key = _1a8b431d7_check_data_for_integer_indexing(_116454_d);
	{
		auto &_match_expr{ _116513_err_key };
		
		if (_match_expr == jule::Str()) {
			_case_begin_4397002080:;
			{
				return;
			}
		}
		else if (_match_expr == jule::Str("type @ is invalid for indexing", 30)) {
			_case_begin_4401957952:;
			{
				(*this)._method_push_err(_116464_token,_116513_err_key,jule::Slice<jule::Any>({jule::Any((*((*(_116454_d))._field_kind))._method_to_str())}));
			}
		}
		else {
			_case_begin_4401956480:;
			{
				(*this)._method_push_err(_116464_token,_116513_err_key,jule::Slice<jule::Any>());
			}
		}
		_match_end_4401957584:;
	}
}



inline void _1a8b431d7_Eval::_method_indexing_ptr(jule::Ptr<_1a8b431d7_Data>& _117836_d,jule::Ptr<_1a8b431d7_Data>& _117851_index,jule::Ptr<_1b7509a90_IndexingExpr>& _117866_i) {
	(*this)._method_check_integer_indexing_by_data(_117851_index,(*(_117866_i))._field_token);
	jule::Ptr<_1a6a19a50_Ptr> _118117_ptr = (*((*(_117836_d))._field_kind))._method_ptr();
	{
		
		if ((*(_118117_ptr))._method_is_unsafe()) {
			_case_begin_4401969776:;
			{
				(*this)._method_push_err((*(_117866_i))._field_token,jule::Str("unsafe pointers not supports indexing", 37),jule::Slice<jule::Any>());
				return;
			}
		}
		else if ((!((*this)._method_is_unsafe()))) {
			_case_begin_4401969872:;
			{
				(*this)._method_push_err((*(_117866_i))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
		}
		_match_end_4401969536:;
	}
	(*(_117836_d))._field_kind=(*(_118117_ptr))._field_elem;
}



inline void _1a8b431d7_Eval::_method_indexing_arr(jule::Ptr<_1a8b431d7_Data>& _119436_d,jule::Ptr<_1a8b431d7_Data>& _119451_index,jule::Ptr<_1b7509a90_IndexingExpr>& _119466_i) {
	jule::Ptr<_1a6a19a50_Arr> _119517_arr = (*((*(_119436_d))._field_kind))._method_arr();
	(*(_119436_d))._field_kind=(*(_119517_arr))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_119451_index,(*(_119466_i))._field_token);
	if ((*(_119451_index))._method_is_const() && ((*((*(_119451_index))._field_constant))._method_as_f64() >= static_cast<jule::F64>((*(_119517_arr))._field_n))) {
		(*this)._method_push_err((*(_119466_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
	}
}



inline void _1a8b431d7_Eval::_method_indexing_slc(jule::Ptr<_1a8b431d7_Data>& _120336_d,jule::Ptr<_1a8b431d7_Data>& _120351_index,jule::Ptr<_1b7509a90_IndexingExpr>& _120366_i) {
	jule::Ptr<_1a6a19a50_Slc> _120417_slc = (*((*(_120336_d))._field_kind))._method_slc();
	(*(_120336_d))._field_kind=(*(_120417_slc))._field_elem;
	(*this)._method_check_integer_indexing_by_data(_120351_index,(*(_120366_i))._field_token);
	if ((!((*(_120351_index))._method_is_const()))) {
		return;
	}
	{
		auto &_match_expr{ (*(_120336_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_SliceExprModel>>()) {
			_case_begin_4401997168:;
			{
				jule::Ptr<_1a69b8d2e_SliceExprModel> _121421_m = (*(_120336_d))._field_model.operator jule::Ptr<_1a69b8d2e_SliceExprModel>();
				jule::F64 _121517_indx = (*((*(_120351_index))._field_constant))._method_as_f64();
				if (_121517_indx >= static_cast<jule::F64>((*(_121421_m))._field_elems.len())) {
					(*this)._method_push_err((*(_120366_i))._field_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
				} else {
					(*(_120336_d))._field_model=(*(_121421_m))._field_elems[static_cast<jule::Int>(static_cast<jule::U64>(_121517_indx))];
					(*(_120336_d))._field_decl=true;
				}
			}
		}
		_match_end_4401997008:;
	}
}



inline void _1a8b431d7_Eval::_method_indexing_map(jule::Ptr<_1a8b431d7_Data>& _122536_d,jule::Ptr<_1a8b431d7_Data>& _122551_index,jule::Ptr<_1b7509a90_IndexingExpr>& _122570_i) {
	if (_122551_index == nullptr) {
		return;
	}
	jule::Ptr<_1a6a19a50_Map> _123017_m = (*((*(_122536_d))._field_kind))._method_map();
	_1a700327a_AssignTypeChecker _123117_atc = _1a700327a_AssignTypeChecker((*this)._field_s,(*(_123017_m))._field_key,_122551_index,(*(_122570_i))._field_token);
	_123117_atc._method_check();
	(*(_122536_d))._field_kind=(*(_123017_m))._field_val;
}



inline void _1a8b431d7_Eval::_method_indexing_str(jule::Ptr<_1a8b431d7_Data>& _124236_d,jule::Ptr<_1a8b431d7_Data>& _124251_index,jule::Ptr<_1b7509a90_IndexingExpr>& _124266_i) {
	
	(*(_124236_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u8", 2))));
	if (_124251_index == nullptr) {
		return;
	}
	(*this)._method_check_integer_indexing_by_data(_124251_index,(*(_124266_i))._field_token);
	if ((!((*(_124251_index))._method_is_const()))) {
		(*(_124236_d))._field_constant=nullptr;
		return;
	}
	if ((*(_124236_d))._method_is_const()) {
		_1b7553d92_Token _125817_error_token = (*(_124266_i))._field_token;
		jule::I64 _125917_j = (*((*(_124251_index))._field_constant))._method_as_i64();
		jule::Str _126017_s = (*((*(_124236_d))._field_constant))._method_read_str();
		if (static_cast<jule::Int>(_125917_j) >= _126017_s.len()) {
			(*this)._method_push_err(_125817_error_token,jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
		} else {
			(*((*(_124236_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>(_126017_s[_125917_j])));
		}
	}
}



inline void _1a8b431d7_Eval::_method_to_indexing(jule::Ptr<_1a8b431d7_Data>& _126935_d,jule::Ptr<_1a8b431d7_Data>& _126950_index,jule::Ptr<_1b7509a90_IndexingExpr>& _126969_i) {
	{
		
		if ((*((*(_126935_d))._field_kind))._method_ptr() != nullptr) {
			_case_begin_4402040560:;
			{
				(*this)._method_indexing_ptr(_126935_d,_126950_index,_126969_i);
				return;
			}
		}
		else if ((*((*(_126935_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_4402040672:;
			{
				(*this)._method_indexing_arr(_126935_d,_126950_index,_126969_i);
				return;
			}
		}
		else if ((*((*(_126935_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_4402040784:;
			{
				(*this)._method_indexing_slc(_126935_d,_126950_index,_126969_i);
				return;
			}
		}
		else if ((*((*(_126935_d))._field_kind))._method_map() != nullptr) {
			_case_begin_4402040896:;
			{
				(*this)._method_indexing_map(_126935_d,_126950_index,_126969_i);
				return;
			}
		}
		else if ((*((*(_126935_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_4402041008:;
			{
				jule::Ptr<_1a6a19a50_Prim> _128817_prim = (*((*(_126935_d))._field_kind))._method_prim();
				{
					
					if ((*(_128817_prim))._method_is_str()) {
						_case_begin_4402057344:;
						{
							(*this)._method_indexing_str(_126935_d,_126950_index,_126969_i);
							return;
						}
					}
					_match_end_4402057200:;
				}
			}
		}
		_match_end_4402040288:;
	}
	(*this)._method_push_err((*(_126969_i))._field_token,jule::Str("type @ is not support indexing", 30),jule::Slice<jule::Any>({jule::Any((*((*(_126935_d))._field_kind))._method_to_str())}));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_ident_decl_from_indexing(jule::Ptr<_1b7509a90_IndexingExpr>& _129954_i) {
	{
		auto &_match_expr{ (*(_129954_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_IdentExpr>>()) {
			_case_begin_4402067616:;
		}
		else {
			_case_begin_4402064608:;
			{
				(*(this->self))._method_push_err((*(_129954_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4402064528:;
	}
	jule::Ptr<_1b7509a90_IdentTypeDecl> _130717_decl = jule::new_struct<_1b7509a90_IdentTypeDecl>(new( std::nothrow ) _1b7509a90_IdentTypeDecl(_1b7553d92_Token(),(*((*(_129954_i))._field_expr.operator jule::Ptr<_1b7509a90_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>()));
	{
		auto &_match_expr{ (*(_129954_i))._field_index };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_UnaryExpr>>()) {
			_case_begin_4402073200:;
			{
				jule::Ptr<_1a8b431d7_Data> _131521_d = (*(this->self))._method_eval_unary((*(_129954_i))._field_index.operator jule::Ptr<_1b7509a90_UnaryExpr>());
				if ((!((*(_131521_d))._field_decl))) {
					(*(this->self))._method_push_err((*(_129954_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
					return nullptr;
				}
				(*(_130717_decl))._field_generics = jule::alloc_for_append((*(_130717_decl))._field_generics,1);(*(_130717_decl))._field_generics.__push(jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_1b7553d92_Token(),jule::Any((*(_131521_d))._field_kind))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TypeDecl>>()) {
			_case_begin_4402073408:;
			{
				(*(_130717_decl))._field_generics = jule::alloc_for_append((*(_130717_decl))._field_generics,1);(*(_130717_decl))._field_generics.__push((*(_129954_i))._field_index.operator jule::Ptr<_1b7509a90_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_IdentExpr>>()) {
			_case_begin_4402073504:;
			{
				(*(_130717_decl))._field_generics = jule::alloc_for_append((*(_130717_decl))._field_generics,1);(*(_130717_decl))._field_generics.__push(jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_1b7553d92_Token(),jule::Any(jule::new_struct<_1b7509a90_IdentTypeDecl>(new( std::nothrow ) _1b7509a90_IdentTypeDecl(_1b7553d92_Token(),(*((*(_129954_i))._field_index.operator jule::Ptr<_1b7509a90_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>()))))));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TupleExpr>>()) {
			_case_begin_4402072944:;
			{
				{
					auto &expr = (*((*(_129954_i))._field_index.operator jule::Ptr<_1b7509a90_TupleExpr>()))._field_expr;
					auto it = expr.begin();
					_iter_begin_4402085824:;
					if (it != expr.end()) {
						jule::Ptr<_1b7509a90_Expr> _1a8b431d7_expr = *it;
						{
							{
								auto &_match_expr{ (*(_1a8b431d7_expr))._field_kind };
								
								if (_match_expr.type_is<jule::Ptr<_1b7509a90_TypeDecl>>()) {
									_case_begin_4402091088:;
									{
										(*(_130717_decl))._field_generics = jule::alloc_for_append((*(_130717_decl))._field_generics,1);(*(_130717_decl))._field_generics.__push((*(_1a8b431d7_expr))._field_kind.operator jule::Ptr<_1b7509a90_TypeDecl>());
									}
								}
								else if (_match_expr.type_is<jule::Ptr<_1b7509a90_IdentExpr>>()) {
									_case_begin_4402091184:;
									{
										(*(_130717_decl))._field_generics = jule::alloc_for_append((*(_130717_decl))._field_generics,1);(*(_130717_decl))._field_generics.__push(jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_1b7553d92_Token(),jule::Any(jule::new_struct<_1b7509a90_IdentTypeDecl>(new( std::nothrow ) _1b7509a90_IdentTypeDecl(_1b7553d92_Token(),(*((*(_1a8b431d7_expr))._field_kind.operator jule::Ptr<_1b7509a90_IdentExpr>()))._field_ident,jule::Bool(),jule::Slice<jule::Ptr<_1b7509a90_TypeDecl>>()))))));
									}
								}
								_match_end_4402091008:;
							}
						}
						_iter_next_4402085824:;
						++it;
						goto _iter_begin_4402085824;
					}
					_iter_end_4402085824:;
				}
			}
		}
		else {
			_case_begin_4402070208:;
			{
				(*(this->self))._method_push_err((*(_129954_i))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4402070128:;
	}
	return (*(this->self))._method_eval_type(jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_1b7553d92_Token(),jule::Any(_130717_decl))));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_indexing(jule::Ptr<_1b7509a90_IndexingExpr> _135137_i) {
	jule::Ptr<_1a6a19a50_TypeKind> _135217_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_135217_prefix;
	});
	jule::Ptr<_1a8b431d7_Data> _135617_d = (*(this->self))._method_eval_expr_kind((*(_135137_i))._field_expr);
	if (_135617_d == nullptr) {
		return nullptr;
	}
	if ((*(_135617_d))._field_decl) {
		return (*(this->self))._method_eval_ident_decl_from_indexing(_135137_i);
	}
	_1a8b431d7_Data _136617_old_d = (*(_135617_d));
	jule::Ptr<_1a8b431d7_Data> _136817_index = (*(this->self))._method_eval_expr_kind((*(_135137_i))._field_index);
	if (_136817_index == nullptr) {
		return nullptr;
	}
	(*(_135617_d))._field_decl=false;
	(*(this->self))._method_to_indexing(_135617_d,_136817_index,_135137_i);
	if ((*(_135617_d))._method_is_const()) {
		(*(_135617_d))._field_decl=false;
		(*(_135617_d))._field_model=jule::Any((*(_135617_d))._field_constant);
	} else if ((*(_135617_d))._field_decl) {
		(*(_135617_d))._field_decl=false;
	} else {
		(*(_135617_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_IndexingExprModel>(new( std::nothrow ) _1a69b8d2e_IndexingExprModel((*(_135137_i))._field_token,jule::new_ptr<_1a8b431d7_Data>(_136617_old_d),_136817_index)));
	}
	return _135617_d;
}



inline std::tuple<jule::Ptr<_1a8b431d7_Data>,jule::Ptr<_1a8b431d7_Data>> _1a8b431d7_Eval::_method_eval_slicing_exprs(jule::Ptr<_1b7509a90_SlicingExpr>& _139943_s) {
	jule::Ptr<_1a6a19a50_TypeKind> _140017_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_140017_prefix;
	});
	jule::Ptr<_1a8b431d7_Data> _140417_l = nullptr;
	jule::Ptr<_1a8b431d7_Data> _140517_r = nullptr;
	if ((*(_139943_s))._field_start != nullptr) {
		_140417_l=(*(this->self))._method_eval_expr_kind((*(_139943_s))._field_start);
		if (_140417_l != nullptr) {
			(*(this->self))._method_check_integer_indexing_by_data(_140417_l,(*(_139943_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	} else {
		_140417_l=jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),_1b6dd59aa_Const::_static_method_new_i64(0LL)));
		(*(_140417_l))._field_model=jule::Any((*(_140417_l))._field_constant);
	}
	if ((*(_139943_s))._field_to != nullptr) {
		_140517_r=(*(this->self))._method_eval_expr_kind((*(_139943_s))._field_to);
		if (_140517_r != nullptr) {
			(*(this->self))._method_check_integer_indexing_by_data(_140517_r,(*(_139943_s))._field_token);
		} else {
			return std::make_tuple(nullptr,nullptr);
		}
	}
	return std::make_tuple(_140417_l,_140517_r);
}



inline void _1a8b431d7_Eval::_method_slicing_arr(jule::Ptr<_1a8b431d7_Data>& _143431_d) {
	jule::Ptr<_1a6a19a50_TypeKind> _143517_elem_type = (*((*((*(_143431_d))._field_kind))._method_arr()))._field_elem;
	(*(_143431_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a6a19a50_Slc>(new( std::nothrow ) _1a6a19a50_Slc(_143517_elem_type))));
	(*(_143431_d))._field_lvalue=false;
	(*(_143431_d))._field_mutable=(*(_143431_d))._field_mutable || (!((*(_143517_elem_type))._method_mutable()));
}



inline void _1a8b431d7_Eval::_method_slicing_slc(jule::Ptr<_1a8b431d7_Data>& _144931_d) {
	(*(_144931_d))._field_lvalue=false;
}



inline void _1a8b431d7_Eval::_method_slicing_str(jule::Ptr<_1a8b431d7_Data>& _145331_d,jule::Ptr<_1a8b431d7_Data>& _145342_l,jule::Ptr<_1a8b431d7_Data>& _145353_r) {
	(*(_145331_d))._field_lvalue=false;
	(*(_145331_d))._field_mutable=true;
	if ((!((*(_145331_d))._method_is_const()))) {
		return;
	}
	if ((_145342_l == nullptr) || (_145353_r == nullptr)) {
		(*(_145331_d))._field_constant=nullptr;
		return;
	}
	if ((*(_145342_l))._method_is_const() && (*(_145353_r))._method_is_const()) {
		jule::I64 _146617_left = (*((*(_145342_l))._field_constant))._method_as_i64();
		if (_146617_left < 0LL) {
			return;
		}
		jule::Str _147117_s = (*((*(_145331_d))._field_constant))._method_read_str();
		jule::I64 _147221_right = 0LL;
		if (_145353_r == nullptr) {
			_147221_right=static_cast<jule::I64>(static_cast<jule::I64>(_147117_s.len()));
		} else {
			_147221_right=static_cast<jule::I64>((*((*(_145353_r))._field_constant))._method_as_i64());
		}
		if (_146617_left > _147221_right) {
			return;
		}
		(*((*(_145331_d))._field_constant))._method_set_str(_147117_s.slice(_146617_left,_147221_right));
		(*(_145331_d))._field_decl=true;
	} else {
		(*(_145331_d))._field_constant=nullptr;
	}
}



inline void _1a8b431d7_Eval::_method_check_slicing(jule::Ptr<_1a8b431d7_Data>& _148937_d,jule::Ptr<_1a8b431d7_Data>& _148948_l,jule::Ptr<_1a8b431d7_Data>& _148959_r,jule::Ptr<_1b7509a90_SlicingExpr>& _148970_s) {
	{
		
		if ((*((*(_148937_d))._field_kind))._method_arr() != nullptr) {
			_case_begin_4402179200:;
			{
				(*this)._method_slicing_arr(_148937_d);
				return;
			}
		}
		else if ((*((*(_148937_d))._field_kind))._method_slc() != nullptr) {
			_case_begin_4402179312:;
			{
				(*this)._method_slicing_slc(_148937_d);
				return;
			}
		}
		else if ((*((*(_148937_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_4402179424:;
			{
				jule::Ptr<_1a6a19a50_Prim> _150017_prim = (*((*(_148937_d))._field_kind))._method_prim();
				{
					
					if ((*(_150017_prim))._method_is_str()) {
						_case_begin_4402189136:;
						{
							(*this)._method_slicing_str(_148937_d,_148948_l,_148959_r);
							return;
						}
					}
					_match_end_4402188992:;
				}
			}
		}
		_match_end_4402179024:;
	}
	(*this)._method_push_err((*(_148970_s))._field_token,jule::Str("type @ is not support slicing", 29),jule::Slice<jule::Any>({jule::Any((*((*(_148937_d))._field_kind))._method_to_str())}));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_slicing(jule::Ptr<_1b7509a90_SlicingExpr> _151136_s) {
	jule::Ptr<_1a8b431d7_Data> _151217_d = (*(this->self))._method_eval_expr_kind((*(_151136_s))._field_expr);
	if (_151217_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _151718_l;
	jule::Ptr<_1a8b431d7_Data> _151725_r;
	std::tie(_151718_l,_151725_r) = (*(this->self))._method_eval_slicing_exprs(_151136_s);
	if (_151718_l == nullptr) {
		return _151217_d;
	}
	(*(_151217_d))._field_decl=false;
	(*(this->self))._method_check_slicing(_151217_d,_151718_l,_151725_r,_151136_s);
	(*(_151217_d))._field_cast_kind=nullptr;
	if ((*(_151217_d))._method_is_const()) {
		(*(_151217_d))._field_decl=false;
		(*(_151217_d))._field_model=jule::Any((*(_151217_d))._field_constant);
	} else if ((*(_151217_d))._field_decl) {
		(*(_151217_d))._field_decl=false;
	} else {
		jule::Ptr<_1a69b8d2e_SlicingExprModel> _153621_model = jule::new_struct<_1a69b8d2e_SlicingExprModel>(new( std::nothrow ) _1a69b8d2e_SlicingExprModel((*(_151136_s))._field_token,(*(_151217_d))._field_model,(*(_151718_l))._field_model,jule::Any()));
		if (_151725_r != nullptr) {
			(*(_153621_model))._field_right=(*(_151725_r))._field_model;
		}
		(*(_151217_d))._field_model=jule::Any(_153621_model);
	}
	return _151217_d;
}



inline void _1a8b431d7_Eval::_method_cast_ptr(jule::Ptr<_1a6a19a50_TypeKind> _155231_t,jule::Ptr<_1a8b431d7_Data> _155249_d,_1b7553d92_Token _155259_error_token) {
	jule::Ptr<_1a6a19a50_Sptr> _155313_sptr = (*((*(_155249_d))._field_kind))._method_sptr();
	if (_155313_sptr != nullptr) {
		if ((!((*((*((*(_155231_t))._method_ptr()))._field_elem))._method_equals((*(_155313_sptr))._field_elem)))) {
			(*this)._method_push_err(_155259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_155249_d))._field_kind))._method_to_str()),jule::Any((*(_155231_t))._method_to_str())}));
		}
		return;
	}
	if ((!((*this)._method_is_unsafe()))) {
		(*this)._method_push_err(_155259_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		return;
	}
	jule::Ptr<_1a6a19a50_Prim> _156613_prim = (*((*(_155249_d))._field_kind))._method_prim();
	if (((*((*(_155249_d))._field_kind))._method_ptr() == nullptr) && ((_156613_prim == nullptr) || (!(_1a9133243_is_int((*(_156613_prim))._method_to_str()))))) {
		(*this)._method_push_err(_155259_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_155249_d))._field_kind))._method_to_str()),jule::Any((*(_155231_t))._method_to_str())}));
	}
	(*(_155249_d))._field_constant=nullptr;
}



inline void _1a8b431d7_Eval::_method_cast_struct(jule::Ptr<_1a6a19a50_TypeKind> _157434_t,jule::Ptr<_1a8b431d7_Data> _157452_d,_1b7553d92_Token _157462_error_token) {
	jule::Ptr<_1b76b472d_Trait> _157517_tr = (*((*(_157452_d))._field_kind))._method_trt();
	if (_157517_tr == nullptr) {
		(*this)._method_push_err(_157462_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_157452_d))._field_kind))._method_to_str()),jule::Any((*(_157434_t))._method_to_str())}));
		return;
	}
	jule::Ptr<_1b7905331_StructIns> _158117_s = (*(_157434_t))._method_strct();
	(*this)._method_push_reference_to_struct(_158117_s);
	if ((!((*((*(_158117_s))._field_decl))._method_is_implements(_157517_tr)))) {
		(*this)._method_push_err(_157462_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_157452_d))._field_kind))._method_to_str()),jule::Any((*(_157434_t))._method_to_str())}));
	}
}



inline void _1a8b431d7_Eval::_method_cast_ref(jule::Ptr<_1a6a19a50_TypeKind> _158931_t,jule::Ptr<_1a8b431d7_Data> _158949_d,_1b7553d92_Token _158959_error_token) {
	jule::Ptr<_1a6a19a50_Sptr> _159017_sptr = (*(_158931_t))._method_sptr();
	jule::Ptr<_1a6a19a50_Ptr> _159217_ptr = (*((*(_158949_d))._field_kind))._method_ptr();
	if ((_159217_ptr != nullptr) && (*((*(_159017_sptr))._field_elem))._method_equals((*(_159217_ptr))._field_elem)) {
		if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_158959_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		}
		return;
	}
	if ((*((*(_159017_sptr))._field_elem))._method_strct() != nullptr) {
		(*this)._method_cast_struct((*(_159017_sptr))._field_elem,_158949_d,_158959_error_token);
		return;
	}
	(*this)._method_push_err(_158959_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_158949_d))._field_kind))._method_to_str()),jule::Any((*(_158931_t))._method_to_str())}));
}



inline void _1a8b431d7_Eval::_method_cast_slc(jule::Ptr<_1a6a19a50_TypeKind> _161131_t,jule::Ptr<_1a8b431d7_Data> _161149_d,_1b7553d92_Token _161159_error_token) {
	if ((*((*(_161149_d))._field_kind))._method_enm() != nullptr) {
		if (((*((*((*((*((*(_161149_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim() == nullptr) || (!((*((*((*((*((*((*(_161149_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._method_is_str()))) {
			(*this)._method_push_err(_161159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_161149_d))._field_kind))._method_to_str()),jule::Any((*(_161131_t))._method_to_str())}));
			return;
		}
	} else if (((*((*(_161149_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_161149_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*this)._method_push_err(_161159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_161149_d))._field_kind))._method_to_str()),jule::Any((*(_161131_t))._method_to_str())}));
		return;
	}
	_161131_t=(*((*(_161131_t))._method_slc()))._field_elem;
	jule::Ptr<_1a6a19a50_Prim> _162313_prim = (*(_161131_t))._method_prim();
	if ((_162313_prim == nullptr) || ((!((*(_162313_prim))._method_is_u8())) && (!((*(_162313_prim))._method_is_i32())))) {
		(*this)._method_push_err(_161159_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_161149_d))._field_kind))._method_to_str()),jule::Any((*(_161131_t))._method_to_str())}));
	}
}



inline void _1a8b431d7_Eval::_method_cast_str(jule::Ptr<_1a8b431d7_Data> _162931_d,_1b7553d92_Token _162941_error_token) {
	if ((*((*(_162931_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_1a6bb9150_Enum> _163121_e = (*((*(_162931_d))._field_kind))._method_enm();
		if (((*((*((*(_163121_e))._field_kind))._field_kind))._method_prim() != nullptr) && (*((*((*((*(_163121_e))._field_kind))._field_kind))._method_prim()))._method_is_str()) {
			return;
		}
	}
	if ((*((*(_162931_d))._field_kind))._method_prim() != nullptr) {
		jule::Ptr<_1a6a19a50_Prim> _163817_prim = (*((*(_162931_d))._field_kind))._method_prim();
		if ((!((*(_163817_prim))._method_is_u8())) && (!((*(_163817_prim))._method_is_i32()))) {
			(*this)._method_push_err(_162941_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_162931_d))._field_kind))._method_to_str())}));
		}
		return;
	}
	if ((*((*(_162931_d))._field_kind))._method_slc() == nullptr) {
		(*this)._method_push_err(_162941_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_162931_d))._field_kind))._method_to_str())}));
		return;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _165017_t = (*((*((*(_162931_d))._field_kind))._method_slc()))._field_elem;
	jule::Ptr<_1a6a19a50_Prim> _165113_prim = (*(_165017_t))._method_prim();
	if ((_165113_prim == nullptr) || ((!((*(_165113_prim))._method_is_u8())) && (!((*(_165113_prim))._method_is_i32())))) {
		(*this)._method_push_err(_162941_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_162931_d))._field_kind))._method_to_str())}));
	}
}



inline void _1a8b431d7_Eval::_method_cast_int(jule::Ptr<_1a6a19a50_TypeKind> _165731_t,jule::Ptr<_1a8b431d7_Data> _165749_d,_1b7553d92_Token _165759_error_token) {
	if ((*(_165749_d))._method_is_const()) {
		jule::Ptr<_1a6a19a50_Prim> _165917_prim = (*(_165731_t))._method_prim();
		{
			
			if (_1a9133243_is_sig_int((*(_165917_prim))._field_kind)) {
				_case_begin_4402336064:;
				{
					(*((*(_165749_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_165749_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_1a9133243_is_unsig_int((*(_165917_prim))._field_kind)) {
				_case_begin_4402336176:;
				{
					(*((*(_165749_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_165749_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_4402335904:;
		}
	}
	if ((*((*(_165749_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_1a6bb9150_Enum> _167017_e = (*((*(_165749_d))._field_kind))._method_enm();
		if (_1a9133243_is_num((*((*((*(_167017_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	if ((*((*(_165749_d))._field_kind))._method_sptr() != nullptr) {
		jule::Ptr<_1a6a19a50_Prim> _167717_prim = (*(_165731_t))._method_prim();
		if ((!((*(_167717_prim))._method_is_uintptr()))) {
			(*this)._method_push_err(_165759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_165749_d))._field_kind))._method_to_str()),jule::Any((*(_165731_t))._method_to_str())}));
		}
		return;
	}
	if ((*((*(_165749_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_1a6a19a50_Prim> _168417_prim = (*(_165731_t))._method_prim();
		if ((*(_168417_prim))._method_is_uintptr()) {
		} else if ((!((*this)._method_is_unsafe()))) {
			(*this)._method_push_err(_165759_error_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
		} else if (((((!((*(_168417_prim))._method_is_i32())) && (!((*(_168417_prim))._method_is_i64()))) && (!((*(_168417_prim))._method_is_u16()))) && (!((*(_168417_prim))._method_is_u32()))) && (!((*(_168417_prim))._method_is_u64()))) {
			(*this)._method_push_err(_165759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_165749_d))._field_kind))._method_to_str()),jule::Any((*(_165731_t))._method_to_str())}));
		}
		return;
	}
	jule::Ptr<_1a6a19a50_Prim> _169513_prim = (*((*(_165749_d))._field_kind))._method_prim();
	if ((_169513_prim != nullptr) && _1a9133243_is_num((*(_169513_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_165759_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_165749_d))._field_kind))._method_to_str()),jule::Any((*(_165731_t))._method_to_str())}));
}



inline void _1a8b431d7_Eval::_method_cast_num(jule::Ptr<_1a6a19a50_TypeKind> _170331_t,jule::Ptr<_1a8b431d7_Data> _170349_d,_1b7553d92_Token _170359_error_token) {
	if ((*(_170349_d))._method_is_const()) {
		jule::Ptr<_1a6a19a50_Prim> _170517_prim = (*(_170331_t))._method_prim();
		{
			
			if (_1a9133243_is_float((*(_170517_prim))._field_kind)) {
				_case_begin_4402386272:;
				{
					(*((*(_170349_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_170349_d))._field_constant))._method_as_f64()));
				}
			}
			else if (_1a9133243_is_sig_int((*(_170517_prim))._field_kind)) {
				_case_begin_4402386384:;
				{
					(*((*(_170349_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_170349_d))._field_constant))._method_as_i64()));
				}
			}
			else if (_1a9133243_is_unsig_int((*(_170517_prim))._field_kind)) {
				_case_begin_4402386496:;
				{
					(*((*(_170349_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_170349_d))._field_constant))._method_as_u64()));
				}
			}
			_match_end_4402386096:;
		}
	}
	if ((*((*(_170349_d))._field_kind))._method_enm() != nullptr) {
		jule::Ptr<_1a6bb9150_Enum> _171917_e = (*((*(_170349_d))._field_kind))._method_enm();
		if (_1a9133243_is_num((*((*((*(_171917_e))._field_kind))._field_kind))._method_to_str())) {
			return;
		}
	}
	jule::Ptr<_1a6a19a50_Prim> _172513_prim = (*((*(_170349_d))._field_kind))._method_prim();
	if ((_172513_prim != nullptr) && _1a9133243_is_num((*(_172513_prim))._method_to_str())) {
		return;
	}
	(*this)._method_push_err(_170359_error_token,jule::Str("type @ not supports casting to type @", 37),jule::Slice<jule::Any>({jule::Any((*((*(_170349_d))._field_kind))._method_to_str()),jule::Any((*(_170331_t))._method_to_str())}));
}



inline void _1a8b431d7_Eval::_method_cast_prim(jule::Ptr<_1a6a19a50_TypeKind> _173332_t,jule::Ptr<_1a8b431d7_Data> _173350_d,_1b7553d92_Token _173360_error_token) {
	jule::Ptr<_1a6a19a50_Prim> _173413_prim = (*(_173332_t))._method_prim();
	{
		
		if ((*(_173413_prim))._method_is_any()) {
			_case_begin_4402414784:;
		}
		else if ((*(_173413_prim))._method_is_str()) {
			_case_begin_4402414288:;
			{
				(*this)._method_cast_str(_173350_d,_173360_error_token);
			}
		}
		else if (_1a9133243_is_int((*(_173413_prim))._method_to_str())) {
			_case_begin_4402414384:;
			{
				(*this)._method_cast_int(_173332_t,_173350_d,_173360_error_token);
			}
		}
		else if (_1a9133243_is_num((*(_173413_prim))._method_to_str())) {
			_case_begin_4402414480:;
			{
				(*this)._method_cast_num(_173332_t,_173350_d,_173360_error_token);
			}
		}
		else {
			_case_begin_4402413984:;
			{
				(*this)._method_push_err(_173360_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_173332_t))._method_to_str())}));
			}
		}
		_match_end_4402413872:;
	}
}



inline void _1a8b431d7_Eval::_method_cast_constant(jule::Ptr<_1a6a19a50_TypeKind>& _175337_t,jule::Ptr<_1a8b431d7_Data>& _175356_d) {
	jule::Ptr<_1a6a19a50_Prim> _175413_prim = (*(_175337_t))._method_prim();
	if ((_175413_prim == nullptr) || (!((*(_175356_d))._method_is_const()))) {
		return;
	}
	{
		
		if (_1a9133243_is_sig_int((*(_175413_prim))._field_kind)) {
			_case_begin_4402431680:;
			{
				(*((*(_175356_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_175356_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1a9133243_is_unsig_int((*(_175413_prim))._field_kind)) {
			_case_begin_4402431776:;
			{
				(*((*(_175356_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_175356_d))._field_constant))._method_as_u64()));
			}
		}
		else if (_1a9133243_is_float((*(_175413_prim))._field_kind)) {
			_case_begin_4402431872:;
			{
				(*((*(_175356_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_175356_d))._field_constant))._method_as_f64()));
			}
		}
		_match_end_4402431392:;
	}
	(*(_175356_d))._field_model=jule::Any((*(_175356_d))._field_constant);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_cast_by_type_n_data(jule::Ptr<_1a6a19a50_TypeKind> _177347_t,jule::Ptr<_1a8b431d7_Data> _177365_d,_1b7553d92_Token _177379_error_token) {
	if ((_177365_d != nullptr) && (*(_177365_d))._field_decl) {
		(*this)._method_push_err(_177379_error_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	{
		
		if (((*((*(_177365_d))._field_kind))._method_prim() != nullptr) && (*((*((*(_177365_d))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_4402449664:;
			{
				if ((*(_177347_t))._method_enm() != nullptr) {
					(*this)._method_push_err(_177379_error_token,jule::Str("enum cannot casted from any type", 32),jule::Slice<jule::Any>());
					(*this)._method_push_suggestion(jule::Str("try cast to type of enum fields instead of enum", 47),jule::Slice<jule::Any>());
				}
			}
		}
		else if ((*(_177347_t))._method_ptr() != nullptr) {
			_case_begin_4402449760:;
			{
				(*this)._method_cast_ptr(_177347_t,_177365_d,_177379_error_token);
			}
		}
		else if ((*(_177347_t))._method_sptr() != nullptr) {
			_case_begin_4402449856:;
			{
				(*this)._method_cast_ref(_177347_t,_177365_d,_177379_error_token);
			}
		}
		else if ((*(_177347_t))._method_slc() != nullptr) {
			_case_begin_4402449952:;
			{
				(*this)._method_cast_slc(_177347_t,_177365_d,_177379_error_token);
			}
		}
		else if ((*(_177347_t))._method_strct() != nullptr) {
			_case_begin_4402453600:;
			{
				(*this)._method_cast_struct(_177347_t,_177365_d,_177379_error_token);
			}
		}
		else if ((*(_177347_t))._method_prim() != nullptr) {
			_case_begin_4402453696:;
			{
				(*this)._method_cast_prim(_177347_t,_177365_d,_177379_error_token);
			}
		}
		else {
			_case_begin_4402449360:;
			{
				(*this)._method_push_err(_177379_error_token,jule::Str("type @ not supports casting", 27),jule::Slice<jule::Any>({jule::Any((*(_177347_t))._method_to_str())}));
				_177365_d=nullptr;
			}
		}
		_match_end_4402449264:;
	}
	if (_177365_d == nullptr) {
		return nullptr;
	}
	(*(_177365_d))._field_mutable=(*(_177365_d))._field_mutable || ((!((*((*(_177365_d))._field_kind))._method_mutable())) && (*(_177347_t))._method_mutable());
	(*(_177365_d))._field_lvalue=false;
	(*(_177365_d))._field_decl=false;
	(*this)._method_cast_constant(_177347_t,_177365_d);
	if (((*((*(_177365_d))._field_kind))._method_enm() == nullptr) || (!((*((*((*((*((*(_177365_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_equals(_177347_t)))) {
		(*(_177365_d))._field_cast_kind=_177347_t;
		_1a8b431d7_apply_cast_kind(_177365_d);
		(*((*(_177365_d))._field_model.operator jule::Ptr<_1a69b8d2e_CastingExprModel>()))._field_token=_177379_error_token;
	} else {
		(*(_177365_d))._field_kind=_177347_t;
	}
	return _177365_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_cast(jule::Ptr<_1b7509a90_CastExpr> _182933_c) {
	jule::Ptr<_1a6a19a50_TypeSymbol> _183017_t = _1b6a47496_build_type((*(_182933_c))._field_kind);
	jule::Bool _183113_ok = (*((*(this->self))._field_s))._method_check_type(_183017_t,(*(this->self))._field_lookup);
	if ((!(_183113_ok))) {
		return nullptr;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _183617_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_183617_prefix;
	});
	jule::Ptr<_1a8b431d7_Data> _184017_d = (*(this->self))._method_eval_expr_kind((*(_182933_c))._field_expr);
	if (_184017_d == nullptr) {
		return nullptr;
	}
	return (*(this->self))._method_eval_cast_by_type_n_data((*(_183017_t))._field_kind,_184017_d,(*((*(_182933_c))._field_kind))._field_token);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_ns_selection(jule::Ptr<_1b7509a90_NsSelectionExpr> _184836_s) {
	jule::Str _184913_path = _1a6a19a50_build_link_path_by_tokens((*(_184836_s))._field_ns);
	jule::Ptr<_1a6e9a574_ImportInfo> _185017_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>([=](jule::Ptr<_1a6e9a574_ImportInfo> _185053_imp) mutable -> jule::Bool {
		if (((*(_184836_s))._field_ns.len() == 1LL) && ((*(_185053_imp))._field_alias == _184913_path)) {
			return true;
		}
		return ((*(_185053_imp))._field_link_path == _184913_path) && (*(_185053_imp))._method_is_accessible_via_selection();
	}));
	if (_185017_imp == nullptr) {
		(*this)._method_push_err((*(_184836_s))._field_ident,jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_184913_path)}));
		return nullptr;
	}
	jule::Trait<_1a9062c33_Lookup> _186217_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_185017_imp;
	
	(*this)._method_disallow_builtin();
	jule::Any _186717_def = (*this)._method_get_def((*(_184836_s))._field_ident._field_kind,false);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_186217_lookup;
	jule::Ptr<_1a8b431d7_Data> _187117_d = (*this)._method_eval_def(_186717_def,(*(_184836_s))._field_ident);
	return _187117_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_struct_lit_explicit(jule::Ptr<_1b7905331_StructIns> _187648_s,jule::Slice<jule::Any> _187713_exprs,_1b7553d92_Token _187736_error_token) {
	jule::Bool _187813_ok = (*((*(this->self))._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_187648_s))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_187648_s))._field_generics.len()),_187736_error_token);
	if ((!(_187813_ok))) {
		return nullptr;
	}
	if (((*(this->self))._field_field != nullptr) && ((*((*((*(this->self))._field_field))._field_decl))._field_owner == (*(_187648_s))._field_decl)) {
		(*(this->self))._method_push_err(_187736_error_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*(_187648_s))._field_decl))._field_ident)}));
	}
	(*(this->self))._method_push_reference_to_struct(_187648_s);
	(*(this->self))._method_check_deprecated((*((*(_187648_s))._field_decl))._field_directives,_187736_error_token);
	_1a700327a_StructLitChecker _189117_slc = _1a700327a_StructLitChecker(this->self,_187736_error_token,_187648_s,jule::Slice<jule::Ptr<_1a69b8d2e_StructArgExprModel>>());
	_189117_slc._method_check(_187713_exprs);
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_187648_s)),jule::Ptr<_1a6a19a50_TypeKind>(),(!((*(this->self))._field_immutable)),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_StructLitExprModel>(new( std::nothrow ) _1a69b8d2e_StructLitExprModel(_187736_error_token,_187648_s,_189117_slc._field_args))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_struct_lit(jule::Ptr<_1b7509a90_StructLit> _190939_lit) {
	jule::Ptr<_1a6a19a50_TypeSymbol> _191017_t = _1b6a47496_build_type((*(_190939_lit))._field_kind);
	jule::Bool _191113_ok = (*((*(this->self))._field_s))._method_check_type(_191017_t,(*(this->self))._field_lookup);
	if ((!(_191113_ok))) {
		return nullptr;
	}
	jule::Ptr<_1b7905331_StructIns> _191617_s = (*((*(_191017_t))._field_kind))._method_strct();
	if (_191617_s == nullptr) {
		if ((*((*(_191017_t))._field_kind))._method_sptr() != nullptr) {
			_191617_s=(*((*((*((*(_191017_t))._field_kind))._method_sptr()))._field_elem))._method_strct();
			if (_191617_s != nullptr) {
				goto _julec_label_eval;
			}
		}
		(*(this->self))._method_push_err((*((*(_190939_lit))._field_kind))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	_julec_label_eval:;
	jule::Ptr<_1a8b431d7_Data> _192917_d = (*(this->self))._method_eval_struct_lit_explicit(_191617_s,(*(_190939_lit))._field_exprs,(*((*(_190939_lit))._field_kind))._field_token);
	if ((*((*(_191017_t))._field_kind))._method_sptr() != nullptr) {
		jule::Ptr<_1a69b8d2e_StructLitExprModel> _193121_model = (*(_192917_d))._field_model.operator jule::Ptr<_1a69b8d2e_StructLitExprModel>();
		_1a8b431d7_make_struct_lit_alloc(_192917_d,_193121_model);
	}
	return _192917_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_type(jule::Ptr<_1b7509a90_TypeDecl> _193732_t) {
	jule::Ptr<_1a6a19a50_TypeSymbol> _193817_tk = _1b6a47496_build_type(_193732_t);
	jule::Bool _193913_ok = (*((*this)._field_s))._method_check_type(_193817_tk,(*this)._field_lookup);
	if ((!(_193913_ok))) {
		return nullptr;
	}
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data((*(_193817_tk))._field_kind,jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any((*(_193817_tk))._field_kind),true,jule::Ptr<_1b6dd59aa_Const>()));
}



inline void _1a8b431d7_Eval::_method_call_type_fn(jule::Ptr<_1b7509a90_FnCallExpr>& _195137_fc,jule::Ptr<_1a8b431d7_Data>& _195159_d) {
	if ((*(_195137_fc))._field_generics.len() > 0LL) {
		(*(this->self))._method_push_err((*(_195137_fc))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*((*(_195159_d))._field_kind))._method_to_str())}));
	} else if ((*(_195137_fc))._field_args.len() < 1LL) {
		(*(this->self))._method_push_err((*(_195137_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
	} else if ((*(_195137_fc))._field_args.len() > 1LL) {
		(*(this->self))._method_push_err((*((*(_195137_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	if ((*(_195137_fc))._field_args.len() > 0LL) {
		jule::Ptr<_1a8b431d7_Data> _196121_arg = (*(this->self))._method_eval_expr_kind((*((*(_195137_fc))._field_args[0LL]))._field_kind);
		if (_196121_arg != nullptr) {
			_195159_d=(*(this->self))._method_eval_cast_by_type_n_data((*(_195159_d))._field_kind,_196121_arg,(*((*(_195137_fc))._field_args[0LL]))._field_token);
		}
	}
	if (_195159_d != nullptr) {
		(*(_195159_d))._field_decl=false;
	}
}



inline std::tuple<jule::Bool,jule::Bool> _1a8b431d7_Eval::_method_check_fn_call_generics(jule::Ptr<_1a691a500_FnIns> _197345_f,jule::Ptr<_1b7509a90_FnCallExpr> _197413_fc) {
	jule::Bool _197432_ok = jule::Bool();
	jule::Bool _197442_dynamic_annotation = jule::Bool();
	{
		
		if ((((*((*(_197345_f))._field_decl))._field_generics.len() > 0LL) && ((*(_197413_fc))._field_generics.len() == 0LL)) && ((*(_197345_f))._field_params.len() > 0LL)) {
			_case_begin_4402611728:;
			{
				_197442_dynamic_annotation=true;
				(*(_197345_f))._field_generics=jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>::alloc(static_cast<jule::I64>((*((*(_197345_f))._field_decl))._field_generics.len()));
				_197432_ok = true;
				_197442_dynamic_annotation = true;
				return std::make_tuple(_197432_ok,_197442_dynamic_annotation);
			}
		}
		else if ((!((*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_197345_f))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_197413_fc))._field_generics.len()),(*(_197413_fc))._field_token)))) {
			_case_begin_4402611824:;
			{
				_197432_ok = false;
				_197442_dynamic_annotation = false;
				return std::make_tuple(_197432_ok,_197442_dynamic_annotation);
			}
		}
		else {
			_case_begin_4402607632:;
			{
				(*(_197345_f))._field_generics=jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*((*(_197345_f))._field_decl))._field_generics.len()));
				{
					auto &expr = (*(_197413_fc))._field_generics;
					auto it = expr.begin();
					_iter_begin_4402609104:;
					if (it != expr.end()) {
						jule::Ptr<_1b7509a90_TypeDecl> _1a8b431d7_g = *it;
						{
							jule::Ptr<_1a6a19a50_TypeSymbol> _198925_k = _1b6a47496_build_type(_1a8b431d7_g);
							_197432_ok=(*((*this)._field_s))._method_check_type(_198925_k,(*this)._field_lookup);
							if ((!(_197432_ok))) {
								_197432_ok = false;
								_197442_dynamic_annotation = false;
								return std::make_tuple(_197432_ok,_197442_dynamic_annotation);
							}
							(*(_197345_f))._field_generics = jule::alloc_for_append((*(_197345_f))._field_generics,1);(*(_197345_f))._field_generics.__push((*(_198925_k))._field_kind);
						}
						_iter_next_4402609104:;
						++it;
						goto _iter_begin_4402609104;
					}
					_iter_end_4402609104:;
				}
				_197432_ok = true;
				_197442_dynamic_annotation = false;
				return std::make_tuple(_197432_ok,_197442_dynamic_annotation);
			}
		}
		_match_end_4402607488:;
	}
}



inline void _1a8b431d7_Eval::_method_call_builtin_fn(jule::Ptr<_1b7509a90_FnCallExpr>& _200140_fc,jule::Ptr<_1a8b431d7_Data>& _200162_d) {
	_200162_d=_1a90790e0_find_builtin_caller((*((*((*(_200162_d))._field_kind))._method_fnc()))._field_caller)(this->self,_200140_fc,_200162_d);
	if (_200162_d == nullptr) {
		return;
	}
	(*(_200162_d))._field_mutable=true;
}



inline void _1a8b431d7_Eval::_method_check_fn_of_concurrent_call(jule::Ptr<_1a691a500_FnIns>& _201047_f,_1b7553d92_Token _201058_error_token) {
	if ((*this)._method_is_unsafe()) {
		return;
	}
	{
		auto &expr = (*(_201047_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4402641216:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_ParamIns> &_1a8b431d7_p = *it;
			{
				if ((*((*(_1a8b431d7_p))._field_decl))._field_reference) {
					(*this)._method_push_err(_201058_error_token,jule::Str("concurrent calls does not support functions which is has reference parameter(s)", 79),jule::Slice<jule::Any>());
					return;
				}
			}
			_iter_next_4402641216:;
			++it;
			goto _iter_begin_4402641216;
		}
		_iter_end_4402641216:;
	}
}



inline void _1a8b431d7_Eval::_method_process_exceptional_handler(jule::Ptr<_1a691a500_FnIns>& _202351_f,jule::Ptr<_1b7509a90_FnCallExpr>& _202367_fc,jule::Ptr<_1a8b431d7_Data>& _202389_d) {
	jule::Bool _202413_result_needed = (!((*((*(_202351_f))._field_decl))._method_is_void())) && (!((*this)._field_ignored));
	jule::Ptr<_1a6bc3e29_ScopeChecker> _202517_csc = nullptr;
	jule::Ptr<_1a6bc3e29_Scope> _202617_ch = nullptr;
	jule::Ptr<_1a69b8d2e_FnCallExprModel> _202817_model = (*(_202389_d))._field_model.operator jule::Ptr<_1a69b8d2e_FnCallExprModel>();
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a7002752_Sema>>()) {
			_case_begin_4402653888:;
			{
				jule::Ptr<_1a7002752_Sema> _203221_s = (*this)._field_lookup.operator jule::Ptr<_1a7002752_Sema>();
				_202517_csc=_1a6bc3e29_new_scope_checker(_203221_s,nullptr);
				if (_202413_result_needed) {
					(*(_202517_csc))._field_result=(*(_202351_f))._field_result;
				}
				_202617_ch=jule::new_struct<_1a6bc3e29_Scope>(new( std::nothrow ) _1a6bc3e29_Scope());
				(*((*(_202517_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_202517_csc))._field_table))._field_vars,1);(*((*(_202517_csc))._field_table))._field_vars.__push(_1a8b431d7_build_error_var(_202617_ch,_202367_fc));
				(*(_202517_csc))._method_check((*(_202367_fc))._field_exception,_202617_ch);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4402653984:;
			{
				jule::Ptr<_1a6bc3e29_ScopeChecker> _204221_sc = (*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>();
				_202517_csc=(*(_204221_sc))._method_new_child_checker();
				if (_202413_result_needed) {
					(*(_202517_csc))._field_result=(*(_202351_f))._field_result;
				}
				_202617_ch=(*(_204221_sc))._method_get_child();
				(*((*(_202517_csc))._field_table))._field_vars = jule::alloc_for_append((*((*(_202517_csc))._field_table))._field_vars,1);(*((*(_202517_csc))._field_table))._field_vars.__push(_1a8b431d7_build_error_var(_202617_ch,_202367_fc));
				(*(_204221_sc))._method_check_child_ssc((*(_202367_fc))._field_exception,_202617_ch,_202517_csc);
			}
		}
		_match_end_4402653808:;
	}
	(*(_202817_model))._field_assigned=_202413_result_needed;
	(*(_202817_model))._field_except=_202617_ch;
	if (_202413_result_needed && ((*(_202517_csc))._field_result != nullptr)) {
		(*this)._method_push_err((*(_202367_fc))._field_token,jule::Str("assignments requires expression", 31),jule::Slice<jule::Any>());
	}
}



inline void _1a8b431d7_Eval::_method_call_fn(jule::Ptr<_1b7509a90_FnCallExpr>& _206032_fc,jule::Ptr<_1a8b431d7_Data>& _206054_d) {
	jule::Ptr<_1a691a500_FnIns> _206117_f = (*((*(_206054_d))._field_kind))._method_fnc();
	if ((*(_206117_f))._method_is_builtin()) {
		(*(this->self))._method_call_builtin_fn(_206032_fc,_206054_d);
		return;
	}
	if ((!((*((*(_206117_f))._field_decl))._method_is_method())) && _1a6a19a50_has_directive((*((*(_206117_f))._field_decl))._field_directives,jule::Str("test", 4))) {
		(*(this->self))._method_push_err((*(_206032_fc))._field_token,jule::Str("you cannot call test functions", 30),jule::Slice<jule::Any>());
		_206054_d=nullptr;
		return;
	}
	if ((((!((*(_206054_d))._field_mutable)) && (*((*(_206117_f))._field_decl))._method_is_method()) && (!((*((*(_206117_f))._field_decl))._field_statically))) && (*((*((*(_206117_f))._field_decl))._field_params[0LL]))._field_mutable) {
		(*(this->self))._method_push_err((*(_206032_fc))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	} else if ((!((*(this->self))._method_is_unsafe())) && (*((*(_206117_f))._field_decl))._field_unsafety) {
		(*(this->self))._method_push_err((*(_206032_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	jule::Bool _207918_ok;
	jule::Bool _207922_dynamic_annotation;
	std::tie(_207918_ok,_207922_dynamic_annotation) = (*(this->self))._method_check_fn_call_generics(_206117_f,_206032_fc);
	if ((!(_207918_ok))) {
		_206054_d=nullptr;
		return;
	}
	jule::Ptr<_1a7002752_Sema> _208517_old = (*(this->self))._field_s;
	if ((*((*(_206117_f))._field_decl))._field_owner != nullptr) {
		(*(this->self))._field_s=(*((*((*(_206117_f))._field_decl))._field_owner))._field_sema;
	}
	__JULE_DEFER({
		if (_208517_old != (*(this->self))._field_s) {
			(*(_208517_old))._field_errors=jule::append((*(_208517_old))._field_errors,(*((*(this->self))._field_s))._field_errors);
			(*((*(this->self))._field_s))._field_errors=nullptr;
		}
		(*(this->self))._field_s=_208517_old;
	});
	if ((!(_207922_dynamic_annotation))) {
		if ((!((*(_206117_f))._field_reloaded))) {
			_207918_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_206117_f);
			if ((!(_207918_ok))) {
				_206054_d=nullptr;
				return;
			}
			(*(_206117_f))._field_reloaded=true;
		}
	} else {
		(*((*(this->self))._field_s))._method_build_fn_non_generic_type_kinds(_206117_f);
	}
	_1a700327a_FnCallArgChecker _211117_fcac = _1a700327a_FnCallArgChecker(this->self,(*(_206032_fc))._field_args,(*(_206032_fc))._field_token,_206117_f,_207922_dynamic_annotation,jule::Slice<jule::Any>());
	if ((*((*(_206117_f))._field_decl))._field_owner != nullptr) {
		std::tie(_208517_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_208517_old);
		_207918_ok=_211117_fcac._method_check();
		std::tie(_208517_old,(*(this->self))._field_s) = std::make_tuple((*(this->self))._field_s,_208517_old);
	} else {
		_207918_ok=_211117_fcac._method_check();
	}
	if ((!(_207918_ok)) && _207922_dynamic_annotation) {
		_206054_d=nullptr;
		return;
	}
	jule::Bool _213114_is_unique_ins;
	jule::Int _213129_pos;
	std::tie(_213114_is_unique_ins,_213129_pos) = (*((*(_206117_f))._field_decl))._method_append_instance(_206117_f);
	if ((!(_213114_is_unique_ins))) {
		_206117_f=(*((*(_206117_f))._field_decl))._field_instances[_213129_pos];
	}
	jule::Any _213617_call_model = (*(_206054_d))._field_model;
	if ((*((*(_206117_f))._field_decl))._method_is_void()) {
		_206054_d=_1a8b431d7_build_void_data();
	} else {
		if (_207922_dynamic_annotation) {
			_207918_ok=(*((*(this->self))._field_s))._method_reload_fn_ins_types(_206117_f);
			if ((!(_207918_ok))) {
				_206054_d=nullptr;
				return;
			}
			(*(_206117_f))._field_reloaded=true;
		}
		(*(_206054_d))._field_kind=(*(_206117_f))._field_result;
		(*(_206054_d))._field_lvalue=false;
	}
	(*(_206054_d))._field_mutable=true;
	(*(_206054_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_FnCallExprModel>(new( std::nothrow ) _1a69b8d2e_FnCallExprModel((*(_206032_fc))._field_token,_206117_f,jule::Bool(),_213617_call_model,_211117_fcac._field_arg_models,jule::Ptr<_1a6bc3e29_Scope>(),jule::Bool())));
	if ((*((*(_206117_f))._field_decl))._field_exceptional) {
		{
			
			if ((*(_206032_fc))._method_unhandled()) {
				_case_begin_4402742832:;
				{
					(*(this->self))._method_push_err((*(_206032_fc))._field_token,jule::Str("exceptionals must be handled", 28),jule::Slice<jule::Any>());
					(*(this->self))._method_push_suggestion(jule::Str("use \"!\" operator after exceptional to handle it", 47),jule::Slice<jule::Any>());
				}
			}
			else if ((*(_206032_fc))._method_ignored()) {
				_case_begin_4402741440:;
			}
			else {
				_case_begin_4402740640:;
				{
					(*(this->self))._method_process_exceptional_handler(_206117_f,_206032_fc,_206054_d);
				}
			}
			_match_end_4402740464:;
		}
	} else if ((!((*(_206032_fc))._method_unhandled()))) {
		(*(this->self))._method_push_err((*(_206032_fc))._field_token,jule::Str("non-exceptionals cannot handled like exceptionals", 49),jule::Slice<jule::Any>());
	}
	if (((*(_206117_f))._field_generics.len() > 0LL) && _213114_is_unique_ins) {
		(*((*(this->self))._field_s))._method_check_fn_ins(_206117_f);
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_fn_call(jule::Ptr<_1b7509a90_FnCallExpr> _218436_fc) {
	jule::Ptr<_1a6a19a50_TypeKind> _218517_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_218517_prefix;
	});
	{
		auto &_match_expr{ (*((*(_218436_fc))._field_expr))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_IdentExpr>>()) {
			_case_begin_4402759040:;
			{
				if ((*((*(_218436_fc))._field_expr))._field_token._field_kind == jule::Str("error", 5)) {
					return _1a90790e0_builtin_caller_error(this->self,_218436_fc);
				}
			}
		}
		_match_end_4402758000:;
	}
	jule::Ptr<_1a8b431d7_Data> _219817_d = (*(this->self))._method_eval_expr_kind((*((*(_218436_fc))._field_expr))._field_kind);
	if (_219817_d == nullptr) {
		return nullptr;
	}
	if ((*(_219817_d))._field_decl) {
		(*(this->self))._method_call_type_fn(_218436_fc,_219817_d);
		return _219817_d;
	}
	if ((*((*(_219817_d))._field_kind))._method_fnc() == nullptr) {
		(*(this->self))._method_push_err((*(_218436_fc))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(this->self))._method_call_fn(_218436_fc,_219817_d);
	return _219817_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_enum_static(jule::Ptr<_1a6bb9150_Enum> _221739_enm,_1b7553d92_Token _221751_ident) {
	jule::Ptr<_1a8b431d7_Data> _221817_d = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_221739_enm)),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1b6dd59aa_Const>()));
	jule::Ptr<_1a6bb9150_EnumItem> _222517_item = (*(_221739_enm))._method_find_item(_221751_ident._field_kind);
	if (_222517_item == nullptr) {
		(*this)._method_push_err(_221751_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_221739_enm))._field_ident),jule::Any(_221751_ident._field_kind)}));
	} else {
		(*(_221817_d))._field_constant=jule::new_ptr<_1b6dd59aa_Const>((*((*((*((*(_222517_item))._field_value))._field_data))._field_constant)));
		(*(_221817_d))._field_model=jule::Any((*(_221817_d))._field_constant);
	}
	return _221817_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_struct_static(jule::Ptr<_1b7905331_StructIns> _223641_s,_1b7553d92_Token _223656_ident) {
	jule::Ptr<_1a8b431d7_Data> _223717_d = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1b6dd59aa_Const>()));
	
	jule::Ptr<_1a691a500_Fn> _224517_method = (*(_223641_s))._method_find_method(_223656_ident._field_kind,true);
	if (_224517_method != nullptr) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*(_224517_method))._field_public,(*(_224517_method))._field_token)))) {
			(*this)._method_push_err(_223656_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any(_223656_ident._field_kind)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1a691a500_FnIns> _225221_ins = (*(_224517_method))._method_instance();
		(*(_225221_ins))._field_owner=_223641_s;
		(*this)._method_push_reference_to_fn(_225221_ins);
		(*(_223717_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_StructStaticIdentExprModel>(new( std::nothrow ) _1a69b8d2e_StructStaticIdentExprModel(_223641_s,(*(_223717_d))._field_model,_225221_ins)));
		(*(_223717_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_225221_ins));
		return _223717_d;
	}
	jule::Ptr<_1a7003e4b_Var> _226417_sttc = (*((*(_223641_s))._field_decl))._method_find_static(_223656_ident._field_kind);
	if (_226417_sttc != nullptr) {
		return (*this)._method_eval_var(_226417_sttc,_223656_ident);
	}
	(*this)._method_push_err(_223656_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_223641_s))._field_decl))._field_ident),jule::Any(_223656_ident._field_kind)}));
	return nullptr;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_trait_sub_ident(jule::Ptr<_1a8b431d7_Data> _227343_d,jule::Ptr<_1b76b472d_Trait> _227357_trt,_1b7553d92_Token _227374_ident) {
	jule::Ptr<_1a691a500_Fn> _227417_f = (*(_227357_trt))._method_find_method(_227374_ident._field_kind);
	if (_227417_f == nullptr) {
		(*this)._method_push_err(_227374_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_227357_trt))._field_ident),jule::Any(_227374_ident._field_kind)}));
		return nullptr;
	}
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_227417_f))._method_instance())),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_TraitSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_TraitSubIdentExprModel(_227374_ident,(*(_227343_d))._field_model,_227374_ident._field_kind))),false,jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_struct_sub_ident(jule::Ptr<_1a8b431d7_Data> _229344_d,jule::Ptr<_1b7905331_StructIns> _229358_s,jule::Ptr<_1b7509a90_SubIdentExpr> _229373_si,jule::Bool _229392_ref) {
	jule::Ptr<_1b7905331_FieldIns> _229417_f = (*(_229358_s))._method_find_field((*(_229373_si))._field_ident._field_kind);
	if (_229417_f != nullptr) {
		if ((!((*((*this)._field_s))._method_is_accessible_define((*((*(_229417_f))._field_decl))._field_public,(*((*(_229417_f))._field_decl))._field_token)))) {
			(*this)._method_push_err((*(_229373_si))._field_ident,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*((*(_229417_f))._field_decl))._field_ident)}));
			(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
		}
		jule::Ptr<_1a69b8d2e_StructSubIdentExprModel> _230121_model = jule::new_struct<_1a69b8d2e_StructSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_StructSubIdentExprModel((*(_229344_d))._field_model,(*(_229344_d))._field_kind,jule::Ptr<_1a691a500_FnIns>(),_229417_f));
		(*(_229344_d))._field_model=jule::Any(_230121_model);
		(*(_229344_d))._field_kind=(*(_229417_f))._field_kind;
		(*(_229344_d))._field_lvalue=true;
		if ((*((*(_229417_f))._field_decl))._field_mutable && (!((*(_229344_d))._field_mutable))) {
			{
				auto &_match_expr{ (*this)._field_lookup };
				
				if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
					_case_begin_4402840768:;
					{
						jule::Ptr<_1a6bc3e29_ScopeChecker> _231425_scope = (*((*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>()))._method_get_root();
						(*(_229344_d))._field_mutable=((*(_231425_scope))._field_owner != nullptr) && ((*((*(_231425_scope))._field_owner))._field_owner == _229358_s);
						if ((*(_229344_d))._field_mutable) {
							jule::Ptr<_1a7003e4b_Var> _231733_field = (*(_230121_model))._field_expr.operator jule::Ptr<_1a7003e4b_Var>();
							jule::Ptr<_1a7003e4b_Var> _231833_v = jule::new_struct<_1a7003e4b_Var>(new( std::nothrow ) _1a7003e4b_Var((*(_231733_field))._field_scope,(*(_231733_field))._field_token,(*(_231733_field))._field_ident,(*(_231733_field))._field_cpp_linked,(*(_231733_field))._field_constant,jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),(*(_231733_field))._field_kind,(*(_231733_field))._field_value,jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1a7003e4b_IterRelation>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>()));
							(*(_231833_v))._field_mutable=true;
							(*(_230121_model))._field_expr=jule::Any(_231833_v);
						}
					}
				}
				_match_end_4402840544:;
			}
		}
		return _229344_d;
	}
	
	jule::Ptr<_1a691a500_Fn> _233717_m = (*(_229358_s))._method_find_method((*(_229373_si))._field_ident._field_kind,false);
	if (_233717_m == nullptr) {
		(*this)._method_push_err((*(_229373_si))._field_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_229358_s))._field_decl))._field_ident),jule::Any((*(_229373_si))._field_ident._field_kind)}));
		return nullptr;
	}
	if ((*((*(_233717_m))._field_params[0LL]))._method_is_ref() && (!(_229392_ref))) {
		(*this)._method_push_err((*(_229373_si))._field_ident,jule::Str("reference method cannot use with non-reference instance", 55),jule::Slice<jule::Any>());
	}
	(*this)._method_check_deprecated((*(_233717_m))._field_directives,(*(_229373_si))._field_ident);
	jule::Ptr<_1a691a500_FnIns> _234917_ins = (*(_233717_m))._method_instance();
	(*(_234917_ins))._field_owner=_229358_s;
	(*this)._method_push_reference_to_fn(_234917_ins);
	(*(_229344_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_StructSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_StructSubIdentExprModel((*(_229344_d))._field_model,(*(_229344_d))._field_kind,_234917_ins,jule::Ptr<_1b7905331_FieldIns>())));
	(*(_229344_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_234917_ins));
	return _229344_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_slice_sub_ident(jule::Ptr<_1a8b431d7_Data> _236143_d,_1b7553d92_Token _236153_ident) {
	{
		auto &_match_expr{ _236153_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4402879856:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_236143_d))._field_kind,(*(_236143_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("cap", 3)) {
			_case_begin_4402879952:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_236143_d))._field_kind,(*(_236143_d))._field_model,jule::Str("cap()", 5)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_4402876160:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>({jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))))),jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3))))))}),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1a6a19a50_TypeKind>(),(*(_236143_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_236143_d))._field_kind,(*(_236143_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4402875312:;
			{
				(*this)._method_push_err(_236153_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_236143_d))._field_kind))._method_to_str()),jule::Any(_236153_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4402875648:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_array_sub_ident(jule::Ptr<_1a8b431d7_Data> _242043_d,_1b7553d92_Token _242053_ident) {
	{
		auto &_match_expr{ _242053_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4402900928:;
			{
				jule::Ptr<_1b6dd59aa_Const> _242321_c = _1b6dd59aa_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*((*(_242043_d))._field_kind))._method_arr()))._field_n)));
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_242321_c),jule::Bool(),_242321_c));
			}
		}
		else if (_match_expr == jule::Str("swap", 4)) {
			_case_begin_4402901024:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>({jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str("i", 1))),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))))),jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str("j", 1))),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3))))))}),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1a6a19a50_TypeKind>(),(*(_242043_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_242043_d))._field_kind,(*(_242043_d))._field_model,jule::Str("swap", 4)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4402896384:;
			{
				(*this)._method_push_err(_242053_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*((*(_242043_d))._field_kind))._method_to_str()),jule::Any(_242053_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4402896720:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_map_sub_ident(jule::Ptr<_1a8b431d7_Data> _246641_d,_1b7553d92_Token _246651_ident) {
	jule::Ptr<_1a6a19a50_Map> _246717_map_kind = (*((*(_246641_d))._field_kind))._method_map();
	{
		auto &_match_expr{ _246651_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4402917616:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_246641_d))._field_kind,(*(_246641_d))._field_model,jule::Str("len()", 5)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("clear", 5)) {
			_case_begin_4402921696:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1a6a19a50_TypeKind>(),(*(_246641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_246641_d))._field_kind,(*(_246641_d))._field_model,jule::Str("clear", 5)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("keys", 4)) {
			_case_begin_4402917152:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a6a19a50_Slc>(new( std::nothrow ) _1a6a19a50_Slc((*(_246717_map_kind))._field_key)))),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1a6a19a50_TypeKind>(),(*(_246641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_246641_d))._field_kind,(*(_246641_d))._field_model,jule::Str("keys", 4)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("values", 6)) {
			_case_begin_4402917248:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a6a19a50_Slc>(new( std::nothrow ) _1a6a19a50_Slc((*(_246717_map_kind))._field_val)))),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1a6a19a50_TypeKind>(),(*(_246641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_246641_d))._field_kind,(*(_246641_d))._field_model,jule::Str("values", 6)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("has", 3)) {
			_case_begin_4402917344:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>({jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str("key", 3))),(*(_246717_map_kind))._field_key))}),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),1LLU,jule::Bool())))),jule::Ptr<_1a6a19a50_TypeKind>(),(*(_246641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_246641_d))._field_kind,(*(_246641_d))._field_model,jule::Str("has", 3)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("del", 3)) {
			_case_begin_4402917440:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>({jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str("key", 3))),(*(_246717_map_kind))._field_key))}),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),2LLU,jule::Bool())))),jule::Ptr<_1a6a19a50_TypeKind>(),(*(_246641_d))._field_mutable,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_246641_d))._field_kind,(*(_246641_d))._field_model,jule::Str("del", 3)))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4402915456:;
			{
				(*this)._method_push_err(_246651_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_246717_map_kind))._method_to_str()),jule::Any(_246651_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4402916864:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_str_sub_ident(jule::Ptr<_1a8b431d7_Data> _258941_d,_1b7553d92_Token _258951_ident) {
	jule::Ptr<_1a6a19a50_TypeKind> _259017_str_kind = jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("str", 3))));
	{
		auto &_match_expr{ _258951_ident._field_kind };
		
		if (_match_expr == jule::Str("len", 3)) {
			_case_begin_4402956432:;
			{
				jule::Ptr<_1a8b431d7_Data> _259321_sd = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
				if ((*(_258941_d))._method_is_const()) {
					(*(_259321_sd))._field_constant=_1b6dd59aa_Const::_static_method_new_i64(static_cast<jule::I64>((*((*(_258941_d))._field_constant))._method_read_str().len()));
					(*(_259321_sd))._field_model=jule::Any((*(_259321_sd))._field_constant);
				} else {
					(*(_259321_sd))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_CommonSubIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonSubIdentExprModel((*(_258941_d))._field_kind,(*(_258941_d))._field_model,jule::Str("len()", 5))));
				}
				return _259321_sd;
			}
		}
		else {
			_case_begin_4402952352:;
			{
				(*this)._method_push_err(_258951_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any((*(_259017_str_kind))._method_to_str()),jule::Any(_258951_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4402954064:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_int_type_static(_1b7553d92_Token _261539_ident) {
	
	{
		auto &_match_expr{ _261539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4402988704:;
			{
				jule::Ptr<_1b6dd59aa_Const> _262021_c = _1b6dd59aa_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1b6dd88c0_max(jule::Str("int", 3)))));
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_262021_c),jule::Bool(),_262021_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4402988800:;
			{
				jule::Ptr<_1b6dd59aa_Const> _262821_c = _1b6dd59aa_Const::_static_method_new_i64(static_cast<jule::I64>(static_cast<jule::I64>(_1b6dd88c0_min(jule::Str("int", 3)))));
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_262821_c),jule::Bool(),_262821_c));
			}
		}
		else {
			_case_begin_4402967984:;
			{
				(*this)._method_push_err(_261539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("int", 3)),jule::Any(_261539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4402968736:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_uint_type_static(_1b7553d92_Token _264140_ident) {
	
	{
		auto &_match_expr{ _264140_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403003008:;
			{
				jule::Ptr<_1b6dd59aa_Const> _264621_c = _1b6dd59aa_Const::_static_method_new_u64(static_cast<jule::U64>(static_cast<jule::U64>(_1b6dd88c0_max(jule::Str("uint", 4)))));
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_264621_c),jule::Bool(),_264621_c));
			}
		}
		else {
			_case_begin_4402998800:;
			{
				(*this)._method_push_err(_264140_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("uint", 4)),jule::Any(_264140_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4402999552:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_i8_type_static(_1b7553d92_Token _265938_ident) {
	
	
	
	{
		auto &_match_expr{ _265938_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403014720:;
			{
				jule::Ptr<_1b6dd59aa_Const> _266621_c = _1b6dd59aa_Const::_static_method_new_i64(127LL);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_266621_c),jule::Bool(),_266621_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4403014816:;
			{
				jule::Ptr<_1b6dd59aa_Const> _267421_c = _1b6dd59aa_Const::_static_method_new_i64(-128LL);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i8", 2)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_267421_c),jule::Bool(),_267421_c));
			}
		}
		else {
			_case_begin_4403010848:;
			{
				(*this)._method_push_err(_265938_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i8", 2)),jule::Any(_265938_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403011248:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_i16_type_static(_1b7553d92_Token _268739_ident) {
	
	
	
	{
		auto &_match_expr{ _268739_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403029056:;
			{
				jule::Ptr<_1b6dd59aa_Const> _269421_c = _1b6dd59aa_Const::_static_method_new_i64(32767LL);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_269421_c),jule::Bool(),_269421_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4403029152:;
			{
				jule::Ptr<_1b6dd59aa_Const> _270221_c = _1b6dd59aa_Const::_static_method_new_i64(-32768LL);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i16", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_270221_c),jule::Bool(),_270221_c));
			}
		}
		else {
			_case_begin_4403025264:;
			{
				(*this)._method_push_err(_268739_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i16", 3)),jule::Any(_268739_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403025584:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_i32_type_static(_1b7553d92_Token _271539_ident) {
	
	
	
	{
		auto &_match_expr{ _271539_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403043776:;
			{
				jule::Ptr<_1b6dd59aa_Const> _272221_c = _1b6dd59aa_Const::_static_method_new_i64(2147483647LL);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_272221_c),jule::Bool(),_272221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4403043872:;
			{
				jule::Ptr<_1b6dd59aa_Const> _273021_c = _1b6dd59aa_Const::_static_method_new_i64(-2147483648LL);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i32", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_273021_c),jule::Bool(),_273021_c));
			}
		}
		else {
			_case_begin_4403039984:;
			{
				(*this)._method_push_err(_271539_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i32", 3)),jule::Any(_271539_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403040304:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_i64_type_static(_1b7553d92_Token _274339_ident) {
	
	
	
	{
		auto &_match_expr{ _274339_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403057856:;
			{
				jule::Ptr<_1b6dd59aa_Const> _275021_c = _1b6dd59aa_Const::_static_method_new_i64(jule::MAX_I64);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_275021_c),jule::Bool(),_275021_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4403057952:;
			{
				jule::Ptr<_1b6dd59aa_Const> _275821_c = _1b6dd59aa_Const::_static_method_new_i64(jule::MIN_I64);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_275821_c),jule::Bool(),_275821_c));
			}
		}
		else {
			_case_begin_4403054256:;
			{
				(*this)._method_push_err(_274339_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("i64", 3)),jule::Any(_274339_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403054416:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_u8_type_static(_1b7553d92_Token _277138_ident) {
	
	
	{
		auto &_match_expr{ _277138_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403071248:;
			{
				jule::Ptr<_1b6dd59aa_Const> _277721_c = _1b6dd59aa_Const::_static_method_new_u64(255LLU);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u8", 2)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_277721_c),jule::Bool(),_277721_c));
			}
		}
		else {
			_case_begin_4403067792:;
			{
				(*this)._method_push_err(_277138_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u8", 2)),jule::Any(_277138_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403067712:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_u16_type_static(_1b7553d92_Token _279039_ident) {
	
	
	{
		auto &_match_expr{ _279039_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403081280:;
			{
				jule::Ptr<_1b6dd59aa_Const> _279621_c = _1b6dd59aa_Const::_static_method_new_u64(65535LLU);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u16", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_279621_c),jule::Bool(),_279621_c));
			}
		}
		else {
			_case_begin_4403077824:;
			{
				(*this)._method_push_err(_279039_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u16", 3)),jule::Any(_279039_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403077744:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_u32_type_static(_1b7553d92_Token _280939_ident) {
	
	
	{
		auto &_match_expr{ _280939_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403091344:;
			{
				jule::Ptr<_1b6dd59aa_Const> _281521_c = _1b6dd59aa_Const::_static_method_new_u64(4294967295LLU);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u32", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_281521_c),jule::Bool(),_281521_c));
			}
		}
		else {
			_case_begin_4403087856:;
			{
				(*this)._method_push_err(_280939_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u32", 3)),jule::Any(_280939_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403087776:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_u64_type_static(_1b7553d92_Token _282839_ident) {
	
	
	{
		auto &_match_expr{ _282839_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403101280:;
			{
				jule::Ptr<_1b6dd59aa_Const> _283421_c = _1b6dd59aa_Const::_static_method_new_u64(jule::MAX_U64);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_283421_c),jule::Bool(),_283421_c));
			}
		}
		else {
			_case_begin_4403097888:;
			{
				(*this)._method_push_err(_282839_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("u64", 3)),jule::Any(_282839_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403097808:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_f32_type_tatic(_1b7553d92_Token _284738_ident) {
	
	
	
	
	{
		auto &_match_expr{ _284738_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403112816:;
			{
				jule::Ptr<_1b6dd59aa_Const> _285521_c = _1b6dd59aa_Const::_static_method_new_f64(340282346638528860000000000000000000000.0);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_285521_c),jule::Bool(),_285521_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4403112912:;
			{
				jule::Ptr<_1b6dd59aa_Const> _286321_c = _1b6dd59aa_Const::_static_method_new_f64(-340282346638528860000000000000000000000.0);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_286321_c),jule::Bool(),_286321_c));
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_4403109680:;
			{
				jule::Ptr<_1b6dd59aa_Const> _287121_c = _1b6dd59aa_Const::_static_method_new_f64(0.00000000000000000000000000000000000000000000140129846432481707);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("f32", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_287121_c),jule::Bool(),_287121_c));
			}
		}
		else {
			_case_begin_4403108240:;
			{
				(*this)._method_push_err(_284738_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f32", 3)),jule::Any(_284738_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403109344:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_f64_type_static(_1b7553d92_Token _288439_ident) {
	
	
	
	
	{
		auto &_match_expr{ _288439_ident._field_kind };
		
		if (_match_expr == jule::Str("MAX", 3)) {
			_case_begin_4403130976:;
			{
				jule::Ptr<_1b6dd59aa_Const> _289221_c = _1b6dd59aa_Const::_static_method_new_f64(jule::MAX_F64);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_289221_c),jule::Bool(),_289221_c));
			}
		}
		else if (_match_expr == jule::Str("MIN", 3)) {
			_case_begin_4403130464:;
			{
				jule::Ptr<_1b6dd59aa_Const> _290021_c = _1b6dd59aa_Const::_static_method_new_f64(jule::MIN_F64);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_290021_c),jule::Bool(),_290021_c));
			}
		}
		else if (_match_expr == jule::Str("SMALLEST_NON_ZERO", 17)) {
			_case_begin_4403130560:;
			{
				jule::Ptr<_1b6dd59aa_Const> _290821_c = _1b6dd59aa_Const::_static_method_new_f64(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005);
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("f64", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_290821_c),jule::Bool(),_290821_c));
			}
		}
		else {
			_case_begin_4403126880:;
			{
				(*this)._method_push_err(_288439_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(jule::Str("f64", 3)),jule::Any(_288439_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403127440:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_prim_static(jule::Str _292135_kind,_1b7553d92_Token _292146_ident) {
	{
		auto &_match_expr{ _292135_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_4403146640:;
			{
				return (*this)._method_eval_int_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("uint", 4)) {
			_case_begin_4403146736:;
			{
				return (*this)._method_eval_uint_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4403143648:;
			{
				return (*this)._method_eval_i8_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4403143744:;
			{
				return (*this)._method_eval_i16_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4403143840:;
			{
				return (*this)._method_eval_i32_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4403143936:;
			{
				return (*this)._method_eval_i64_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_4403146208:;
			{
				return (*this)._method_eval_u8_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4403146304:;
			{
				return (*this)._method_eval_u16_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4403146400:;
			{
				return (*this)._method_eval_u32_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4403146496:;
			{
				return (*this)._method_eval_u64_type_static(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4403146864:;
			{
				return (*this)._method_eval_f32_type_tatic(_292146_ident);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4403146960:;
			{
				return (*this)._method_eval_f64_type_static(_292146_ident);
			}
		}
		else {
			_case_begin_4403143024:;
			{
				(*this)._method_push_err(_292146_ident,jule::Str("undefined identifier: type @ has no field or method @", 53),jule::Slice<jule::Any>({jule::Any(_292135_kind),jule::Any(_292146_ident._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403143136:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_type_static(jule::Ptr<_1a8b431d7_Data> _294139_d,jule::Ptr<_1b7509a90_SubIdentExpr> _294153_si) {
	{
		
		if ((*((*(_294139_d))._field_kind))._method_prim() != nullptr) {
			_case_begin_4403168992:;
			{
				return (*this)._method_eval_prim_static((*((*((*(_294139_d))._field_kind))._method_prim()))._method_to_str(),(*(_294153_si))._field_ident);
			}
		}
		else if ((*((*(_294139_d))._field_kind))._method_enm() != nullptr) {
			_case_begin_4403169200:;
			{
				return (*this)._method_eval_enum_static((*((*(_294139_d))._field_kind))._method_enm(),(*(_294153_si))._field_ident);
			}
		}
		else if ((*((*(_294139_d))._field_kind))._method_strct() != nullptr) {
			_case_begin_4403169296:;
			{
				return (*this)._method_eval_struct_static((*((*(_294139_d))._field_kind))._method_strct(),(*(_294153_si))._field_ident);
			}
		}
		else {
			_case_begin_4403164960:;
			{
				(*this)._method_push_err((*(_294153_si))._field_ident,jule::Str("type @ is not supports sub-defines", 34),jule::Slice<jule::Any>({jule::Any((*((*(_294139_d))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403164816:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_obj_sub_ident(jule::Ptr<_1a8b431d7_Data> _295841_d,jule::Ptr<_1b7509a90_SubIdentExpr> _295855_si) {
	jule::Ptr<_1a6a19a50_TypeKind> _295917_kind = (*(_295841_d))._field_kind;
	if ((*((*(_295841_d))._field_kind))._method_ptr() != nullptr) {
		jule::Ptr<_1a6a19a50_Ptr> _296117_ptr = (*((*(_295841_d))._field_kind))._method_ptr();
		if ((!((*(_296117_ptr))._method_is_unsafe()))) {
			if ((!((*(_295855_si))._field_is_self)) && (!((*this)._method_is_unsafe()))) {
				(*this)._method_push_err((*(_295855_si))._field_ident,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
			}
			_295917_kind=(*((*((*(_295841_d))._field_kind))._method_ptr()))._field_elem;
			jule::Ptr<_1a8b431d7_Data> _296725_model = jule::new_ptr<_1a8b431d7_Data>((*(_295841_d)));
			_1b7553d92_Token _297025_token = (*(_295855_si))._field_ident;
			_297025_token._field_id=7LLU;
			_297025_token._field_kind=jule::Str("*", 1);
			(*(_295841_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(_296725_model,_297025_token)));
		}
	} else if ((*((*(_295841_d))._field_kind))._method_sptr() != nullptr) {
		_295917_kind=(*((*((*(_295841_d))._field_kind))._method_sptr()))._field_elem;
		jule::Ptr<_1a8b431d7_Data> _298221_model = jule::new_ptr<_1a8b431d7_Data>((*(_295841_d)));
		_1b7553d92_Token _298321_token = (*(_295855_si))._field_ident;
		_298321_token._field_id=7LLU;
		_298321_token._field_kind=jule::Str("*", 1);
		(*(_295841_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(_298221_model,_298321_token)));
	}
	{
		
		if ((*((*(_295841_d))._field_kind))._method_trt() != nullptr) {
			_case_begin_4403205872:;
			{
				return (*this)._method_eval_trait_sub_ident(_295841_d,(*((*(_295841_d))._field_kind))._method_trt(),(*(_295855_si))._field_ident);
			}
		}
		else if ((*(_295917_kind))._method_strct() != nullptr) {
			_case_begin_4403205968:;
			{
				jule::Ptr<_1b7905331_StructIns> _299717_s = (*(_295917_kind))._method_strct();
				if (_1a8b431d7_is_instanced_struct(_299717_s)) {
					jule::Bool _299925_used_reference_elem = (*((*(_295841_d))._field_kind))._method_sptr() != nullptr;
					return (*this)._method_eval_struct_sub_ident(_295841_d,(*(_295917_kind))._method_strct(),_295855_si,_299925_used_reference_elem);
				}
			}
		}
		else if ((*(_295917_kind))._method_slc() != nullptr) {
			_case_begin_4403206064:;
			{
				return (*this)._method_eval_slice_sub_ident(_295841_d,(*(_295855_si))._field_ident);
			}
		}
		else if ((*(_295917_kind))._method_arr() != nullptr) {
			_case_begin_4403206160:;
			{
				return (*this)._method_eval_array_sub_ident(_295841_d,(*(_295855_si))._field_ident);
			}
		}
		else if ((*(_295917_kind))._method_map() != nullptr) {
			_case_begin_4403206256:;
			{
				return (*this)._method_eval_map_sub_ident(_295841_d,(*(_295855_si))._field_ident);
			}
		}
		else if ((*(_295917_kind))._method_prim() != nullptr) {
			_case_begin_4403206352:;
			{
				jule::Ptr<_1a6a19a50_Prim> _301317_p = (*(_295917_kind))._method_prim();
				{
					auto &_match_expr{ (*(_301317_p))._field_kind };
					
					if (_match_expr == jule::Str("str", 3)) {
						_case_begin_4403228816:;
						{
							return (*this)._method_eval_str_sub_ident(_295841_d,(*(_295855_si))._field_ident);
						}
					}
					_match_end_4403228736:;
				}
			}
		}
		_match_end_4403205232:;
	}
	(*this)._method_push_err((*(_295855_si))._field_ident,jule::Str("object @ is not supports sub-defines", 36),jule::Slice<jule::Any>({jule::Any((*((*(_295841_d))._field_kind))._method_to_str())}));
	return nullptr;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_sub_ident(jule::Ptr<_1b7509a90_SubIdentExpr> _302438_si) {
	jule::Ptr<_1a6a19a50_TypeKind> _302517_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_302517_prefix;
	});
	jule::Ptr<_1a8b431d7_Data> _302917_d = (*(this->self))._method_eval_expr_kind((*(_302438_si))._field_expr);
	if (_302917_d == nullptr) {
		return nullptr;
	}
	if ((*(_302917_d))._field_decl) {
		return (*(this->self))._method_eval_type_static(_302917_d,_302438_si);
	}
	return (*(this->self))._method_eval_obj_sub_ident(_302917_d,_302438_si);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_tuple(jule::Ptr<_1b7509a90_TupleExpr> _304134_tup) {
	jule::Ptr<_1a6a19a50_Tuple> _304217_tup_t = jule::new_struct_ptr<_1a6a19a50_Tuple>(new( std::nothrow ) _1a6a19a50_Tuple());
	(*(_304217_tup_t))._field_types=jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_304134_tup))._field_expr.len()));
	jule::Ptr<_1a69b8d2e_TupleExprModel> _304517_model = jule::new_struct<_1a69b8d2e_TupleExprModel>(new( std::nothrow ) _1a69b8d2e_TupleExprModel(jule::Slice<jule::Ptr<_1a8b431d7_Data>>::alloc(0LL,static_cast<jule::I64>((*(_304134_tup))._field_expr.len()))));
	jule::Bool _304917_ok = true;
	{
		auto &expr = (*(_304134_tup))._field_expr;
		auto it = expr.begin();
		_iter_begin_4403252400:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Expr> _1a8b431d7_expr = *it;
			{
				jule::Ptr<_1a8b431d7_Data> _305121_d = (*(this->self))._method_eval_expr_kind((*(_1a8b431d7_expr))._field_kind);
				if (_305121_d == nullptr) {
					_304917_ok=false;
					goto _iter_next_4403252400;
				}
				(*(_304217_tup_t))._field_types = jule::alloc_for_append((*(_304217_tup_t))._field_types,1);(*(_304217_tup_t))._field_types.__push((*(_305121_d))._field_kind);
				(*(_304517_model))._field_datas = jule::alloc_for_append((*(_304517_model))._field_datas,1);(*(_304517_model))._field_datas.__push(_305121_d);
			}
			_iter_next_4403252400:;
			++it;
			goto _iter_begin_4403252400;
		}
		_iter_end_4403252400:;
	}
	if ((!(_304917_ok))) {
		return nullptr;
	}
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_304217_tup_t)),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_304517_model),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_map(jule::Ptr<_1a6a19a50_Map> _307032_m,jule::Ptr<_1b7509a90_BraceLit> _307045_lit) {
	jule::Ptr<_1a69b8d2e_MapExprModel> _307117_model = jule::new_struct<_1a69b8d2e_MapExprModel>(new( std::nothrow ) _1a69b8d2e_MapExprModel((*(_307032_m))._field_key,(*(_307032_m))._field_val,jule::Slice<jule::Ptr<_1a69b8d2e_KeyValPairExprModel>>()));
	{
		auto &expr = (*(_307045_lit))._field_exprs;
		auto it = expr.begin();
		_iter_begin_4403266384:;
		if (it != expr.end()) {
			jule::Any _1a8b431d7_expr = *it;
			{
				{
					auto &_match_expr{ _1a8b431d7_expr };
					
					if (_match_expr.type_is<jule::Ptr<_1b7509a90_KeyValPair>>()) {
						_case_begin_4403267520:;
					}
					else {
						_case_begin_4403267936:;
						{
							(*(this->self))._method_push_err((*(_307045_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							return nullptr;
						}
					}
					_match_end_4403267632:;
				}
				jule::Ptr<_1b7509a90_KeyValPair> _308621_pair = _1a8b431d7_expr.operator jule::Ptr<_1b7509a90_KeyValPair>();
				jule::Ptr<_1a8b431d7_Data> _308821_key = (*(this->self))._method_eval_expr_kind((*(_308621_pair))._field_key);
				if (_308821_key == nullptr) {
					return nullptr;
				}
				jule::Ptr<_1a8b431d7_Data> _309321_val = (*(this->self))._method_eval_expr_kind((*(_308621_pair))._field_val);
				if (_309321_val == nullptr) {
					return nullptr;
				}
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_307032_m))._field_key,_308821_key,(*(_308621_pair))._field_colon);
				(*((*(this->self))._field_s))._method_check_assign_type(false,(*(_307032_m))._field_val,_309321_val,(*(_308621_pair))._field_colon);
				(*(_307117_model))._field_entries = jule::alloc_for_append((*(_307117_model))._field_entries,1);(*(_307117_model))._field_entries.__push(jule::new_struct<_1a69b8d2e_KeyValPairExprModel>(new( std::nothrow ) _1a69b8d2e_KeyValPairExprModel((*(_308821_key))._field_model,(*(_309321_val))._field_model)));
			}
			_iter_next_4403266384:;
			++it;
			goto _iter_begin_4403266384;
		}
		_iter_end_4403266384:;
	}
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_307032_m)),jule::Ptr<_1a6a19a50_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(_307117_model),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_brace_lit(jule::Ptr<_1b7509a90_BraceLit> _311438_lit) {
	{
		
		if ((*(this->self))._field_prefix == nullptr) {
			_case_begin_4403291104:;
			{
				(*(this->self))._method_push_err((*(_311438_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else if ((*((*(this->self))._field_prefix))._method_map() != nullptr) {
			_case_begin_4403291312:;
			{
				return (*(this->self))._method_eval_map((*((*(this->self))._field_prefix))._method_map(),_311438_lit);
			}
		}
		else if ((*((*(this->self))._field_prefix))._method_strct() != nullptr) {
			_case_begin_4403291408:;
			{
				return (*(this->self))._method_eval_struct_lit_explicit((*((*(this->self))._field_prefix))._method_strct(),(*(_311438_lit))._field_exprs,(*(_311438_lit))._field_token);
			}
		}
		else {
			_case_begin_4403287968:;
			{
				(*(this->self))._method_push_err((*(_311438_lit))._field_token,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4403287792:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_anon_fn(jule::Ptr<_1b7509a90_FnDecl> _313235_decl) {
	_1a6a19a50_TypeChecker _313317_tc = _1a6a19a50_TypeChecker((*this)._field_s,(*this)._field_lookup,jule::Ptr<_1a6a19a50_Referencer>(),_1b7553d92_Token(),jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	jule::Ptr<_1a691a500_FnIns> _313717_ins = _313317_tc._method_build_fn(_313235_decl);
	(*(_313717_ins))._field_anon=true;
	{
		auto &_match_expr{ (*this)._field_lookup };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ScopeChecker>>()) {
			_case_begin_4403307584:;
			{
				jule::Ptr<_1a6bc3e29_ScopeChecker> _314221_sc = (*this)._field_lookup.operator jule::Ptr<_1a6bc3e29_ScopeChecker>();
				jule::Ptr<_1a6bc3e29_ScopeChecker> _314321_scc = (*(_314221_sc))._method_new_child_checker();
				(*(_314321_scc))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeLabel>>>(nullptr);
				(*(_314321_scc))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeGoto>>>(nullptr);
				(*(_314321_scc))._field_owner=nullptr;
				(*(_314321_scc))._field_child_index=0LL;
				(*(_314321_scc))._field_it=0LL;
				(*(_314321_scc))._field_cse=0LL;
				(*(_314321_scc))._field_owner=_313717_ins;
				(*((*this)._field_s))._method_check_fn_ins_sc(_313717_ins,_314321_scc);
			}
		}
		else {
			_case_begin_4403308720:;
			{
				(*((*this)._field_s))._method_check_fn_ins(_313717_ins);
			}
		}
		_match_end_4403307280:;
	}
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_313717_ins)),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_AnonFnExprModel>(new( std::nothrow ) _1a69b8d2e_AnonFnExprModel(_313717_ins,(*this)._method_is_global()))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_binop(jule::Ptr<_1b7509a90_BinopExpr> _316634_op) {
	jule::Ptr<_1a6a19a50_TypeKind> _316717_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=nullptr;
	__JULE_DEFER({
		(*(this->self))._field_prefix=_316717_prefix;
	});
	_1a8b431d7_BinaryEval _317117_bs = _1a8b431d7_BinaryEval::_static_method_new_plain(this->self);
	return _317117_bs._method_eval(_316634_op);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_ternary(jule::Ptr<_1b7509a90_TernaryExpr> _317536_ter) {
	jule::Ptr<_1a8b431d7_Data> _317617_d = (*(this->self))._method_eval_expr_kind((*(_317536_ter))._field_condition);
	if (_317617_d == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1a6a19a50_Prim> _318113_prim = (*((*(_317617_d))._field_kind))._method_prim();
	if ((_318113_prim == nullptr) || (!((*(_318113_prim))._method_is_bool()))) {
		(*(this->self))._method_push_err((*(_317536_ter))._field_token,jule::Str("if conditions must be have boolean expression", 45),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _318717_td = (*(this->self))._method_eval_expr_kind((*(_317536_ter))._field_true_expr);
	if (_318717_td == nullptr) {
		return nullptr;
	}
	(*(this->self))._method_apply_numeric_prefix(_318717_td);
	if ((*((*(_318717_td))._field_kind))._method_void()) {
		(*(this->self))._method_push_err((*(_317536_ter))._field_token,jule::Str("void type cannot used for ternary operator", 42),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _319817_prefix = (*(this->self))._field_prefix;
	(*(this->self))._field_prefix=(*(_318717_td))._field_kind;
	jule::Ptr<_1a8b431d7_Data> _320117_fd = (*(this->self))._method_eval_expr_kind((*(_317536_ter))._field_false_expr);
	(*(this->self))._method_apply_numeric_prefix(_320117_fd);
	(*(this->self))._field_prefix=_319817_prefix;
	if (_320117_fd == nullptr) {
		return nullptr;
	}
	_1a700327a_AssignTypeChecker _320917_ac = _1a700327a_AssignTypeChecker((*(this->self))._field_s,jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a8b431d7_Data>(),(*(_317536_ter))._field_token);
	if ((*(_318717_td))._method_is_const() && (!((*(_320117_fd))._method_is_const()))) {
		_320917_ac._field_dest=(*(_320117_fd))._field_kind;
		_320917_ac._field_d=_318717_td;
	} else {
		_320917_ac._field_dest=(*(_318717_td))._field_kind;
		_320917_ac._field_d=_320117_fd;
	}
	if ((!(_320917_ac._method_check()))) {
		(*(this->self))._method_push_suggestion(jule::Str("use same or compatible values for ternary expressions", 53),jule::Slice<jule::Any>());
	}
	if ((*(_317617_d))._method_is_const()) {
		if ((*((*(_317617_d))._field_constant))._method_read_bool()) {
			return _318717_td;
		}
		return _320117_fd;
	}
	jule::Ptr<_1a8b431d7_Data> _323117_r = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data());
	(*(_323117_r))._field_kind=_320917_ac._field_dest;
	(*(_323117_r))._field_lvalue=false;
	(*(_323117_r))._field_mutable=(*((*(_323117_r))._field_kind))._method_mutable();
	(*(_323117_r))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_TernaryExprModel>(new( std::nothrow ) _1a69b8d2e_TernaryExprModel((*(_317617_d))._field_model,(*(_318717_td))._field_model,(*(_320117_fd))._field_model)));
	return _323117_r;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_expr_kind(jule::Any _324338_kind) {
	jule::Ptr<_1a8b431d7_Data> _324417_d = nullptr;
	{
		auto &_match_expr{ _324338_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_LitExpr>>()) {
			_case_begin_4403374912:;
			{
				_324417_d=(*(this->self))._method_eval_lit(_324338_kind.operator jule::Ptr<_1b7509a90_LitExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_IdentExpr>>()) {
			_case_begin_4403375008:;
			{
				_324417_d=(*(this->self))._method_eval_ident(_324338_kind.operator jule::Ptr<_1b7509a90_IdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_UnaryExpr>>()) {
			_case_begin_4403375104:;
			{
				_324417_d=(*(this->self))._method_eval_unary(_324338_kind.operator jule::Ptr<_1b7509a90_UnaryExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_VariadicExpr>>()) {
			_case_begin_4403375200:;
			{
				_324417_d=(*(this->self))._method_eval_variadic(_324338_kind.operator jule::Ptr<_1b7509a90_VariadicExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_UnsafeExpr>>()) {
			_case_begin_4403375312:;
			{
				_324417_d=(*(this->self))._method_eval_unsafe(_324338_kind.operator jule::Ptr<_1b7509a90_UnsafeExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_SliceExpr>>()) {
			_case_begin_4403375424:;
			{
				_324417_d=(*(this->self))._method_eval_slice_expr(_324338_kind.operator jule::Ptr<_1b7509a90_SliceExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_IndexingExpr>>()) {
			_case_begin_4403375536:;
			{
				_324417_d=(*(this->self))._method_eval_indexing(_324338_kind.operator jule::Ptr<_1b7509a90_IndexingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_SlicingExpr>>()) {
			_case_begin_4403375648:;
			{
				_324417_d=(*(this->self))._method_eval_slicing(_324338_kind.operator jule::Ptr<_1b7509a90_SlicingExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_CastExpr>>()) {
			_case_begin_4403375760:;
			{
				_324417_d=(*(this->self))._method_eval_cast(_324338_kind.operator jule::Ptr<_1b7509a90_CastExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_NsSelectionExpr>>()) {
			_case_begin_4403375872:;
			{
				_324417_d=(*(this->self))._method_eval_ns_selection(_324338_kind.operator jule::Ptr<_1b7509a90_NsSelectionExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_StructLit>>()) {
			_case_begin_4403375984:;
			{
				_324417_d=(*(this->self))._method_eval_struct_lit(_324338_kind.operator jule::Ptr<_1b7509a90_StructLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TypeDecl>>()) {
			_case_begin_4403376096:;
			{
				_324417_d=(*(this->self))._method_eval_type(_324338_kind.operator jule::Ptr<_1b7509a90_TypeDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnCallExpr>>()) {
			_case_begin_4403376208:;
			{
				_324417_d=(*(this->self))._method_eval_fn_call(_324338_kind.operator jule::Ptr<_1b7509a90_FnCallExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_SubIdentExpr>>()) {
			_case_begin_4403376320:;
			{
				_324417_d=(*(this->self))._method_eval_sub_ident(_324338_kind.operator jule::Ptr<_1b7509a90_SubIdentExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TupleExpr>>()) {
			_case_begin_4403376432:;
			{
				_324417_d=(*(this->self))._method_eval_tuple(_324338_kind.operator jule::Ptr<_1b7509a90_TupleExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_BraceLit>>()) {
			_case_begin_4403376544:;
			{
				_324417_d=(*(this->self))._method_eval_brace_lit(_324338_kind.operator jule::Ptr<_1b7509a90_BraceLit>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnDecl>>()) {
			_case_begin_4403376656:;
			{
				_324417_d=(*(this->self))._method_eval_anon_fn(_324338_kind.operator jule::Ptr<_1b7509a90_FnDecl>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_BinopExpr>>()) {
			_case_begin_4403376768:;
			{
				_324417_d=(*(this->self))._method_eval_binop(_324338_kind.operator jule::Ptr<_1b7509a90_BinopExpr>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TernaryExpr>>()) {
			_case_begin_4403376880:;
			{
				_324417_d=(*(this->self))._method_eval_ternary(_324338_kind.operator jule::Ptr<_1b7509a90_TernaryExpr>());
			}
		}
		_match_end_4403374464:;
	}
	if (_324417_d == nullptr) {
		return nullptr;
	}
	if ((*(_324417_d))._field_kind == nullptr) {
		return _324417_d;
	}
	if ((!((*(_324417_d))._field_decl))) {
		if ((((((((!((*((*(_324417_d))._field_kind))._method_cpp_linked())) && ((*(this->self))._field_prefix != nullptr)) && ((*(_324417_d))._field_cast_kind == nullptr)) && (!((*((*(_324417_d))._field_kind))._field_variadic))) && (!((*(_324417_d))._field_lvalue))) && (!((*(_324417_d))._method_is_const()))) && ((*((*(_324417_d))._field_kind))._method_prim() != nullptr)) && _1a9133243_is_num((*((*((*(_324417_d))._field_kind))._method_prim()))._field_kind)) {
			(*(_324417_d))._field_cast_kind=(*(_324417_d))._field_kind;
		}
		_1a8b431d7_apply_cast_kind(_324417_d);
		if (((*((*(_324417_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_324417_d))._field_kind))._method_prim()))._method_is_any()))) {
			if ((((*(this->self))._field_prefix != nullptr) && ((*((*(this->self))._field_prefix))._method_prim() != nullptr)) && (*((*((*(this->self))._field_prefix))._method_prim()))._method_is_any()) {
				(*(_324417_d))._field_cast_kind=(*(this->self))._field_prefix;
				_1a8b431d7_apply_cast_kind_model(_324417_d);
				(*(_324417_d))._field_cast_kind=nullptr;
			}
		}
	}
	return _324417_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval(jule::Ptr<_1b7509a90_Expr> _334128_expr) {
	jule::Ptr<_1a8b431d7_Data> _334217_d = (*(this->self))._method_eval_expr_kind((*(_334128_expr))._field_kind);
	if ((_334217_d == nullptr) || ((*(_334217_d))._field_kind == nullptr)) {
		return nullptr;
	}
	{
		
		if ((*((*(_334217_d))._field_kind))._method_fnc() != nullptr) {
			_case_begin_4403445840:;
			{
				jule::Ptr<_1a691a500_FnIns> _334921_f = (*((*(_334217_d))._field_kind))._method_fnc();
				if ((*(_334921_f))._method_is_builtin()) {
					goto _match_end_4403444496;
				}
				if ((*(_334921_f))._field_generics.len() != (*((*(_334921_f))._field_decl))._field_generics.len()) {
					(*((*(this->self))._field_s))._method_push_err((*(_334128_expr))._field_token,jule::Str("define has generics", 19),jule::Slice<jule::Any>());
				}
				if ((*((*(_334921_f))._field_decl))._method_is_method()) {
					(*((*(this->self))._field_s))._method_push_err((*(_334128_expr))._field_token,jule::Str("methods should be invoked", 25),jule::Slice<jule::Any>());
				}
			}
		}
		_match_end_4403444496:;
	}
	return _334217_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_Eval::_method_eval_expr(jule::Ptr<_1b7509a90_Expr> _336933_expr) {
	jule::Ptr<_1a8b431d7_Data> _337017_d = (*(this->self))._method_eval(_336933_expr);
	{
		
		if (_337017_d == nullptr) {
			_case_begin_4403462000:;
			{
				return nullptr;
			}
		}
		else if ((*(_337017_d))._field_decl) {
			_case_begin_4403462096:;
			{
				(*(this->self))._method_push_err((*(_336933_expr))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		else {
			_case_begin_4403460624:;
			{
				return _337017_d;
			}
		}
		_match_end_4403460512:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1a8b431d7_Eval &_Src) {
	_Stream << "Eval{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "prefix:" << _Src._field_prefix << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "immutable:" << _Src._field_immutable << ", ";
	_Stream << "ignored:" << _Src._field_ignored << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "field:" << _Src._field_field;
	_Stream << "}";
	return _Stream;
}



inline _1a8b431d7_UnaryEval _1a8b431d7_UnaryEval::_static_method_new(jule::Ptr<_1a8b431d7_Eval> _339223_e) {
	return _1a8b431d7_UnaryEval(_339223_e,jule::Ptr<_1a8b431d7_Data>(),jule::Ptr<_1b7509a90_UnaryExpr>());
}



inline void _1a8b431d7_UnaryEval::_method_eval_minus(void) {
	jule::Ptr<_1a6a19a50_Prim> _339913_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_339913_t == nullptr) || (!(_1a9133243_is_num((*(_339913_t))._method_to_str())))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_f64()) {
				_case_begin_4403473184:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*((*this)._field_d))._field_constant))._method_read_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_4403473296:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_4403473408:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((-((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			_match_end_4403472944:;
		}
		_1a8b431d7_normalize_type((*this)._field_d);
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1a8b431d7_UnaryEval::_method_eval_plus(void) {
	jule::Ptr<_1a6a19a50_Prim> _342713_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_342713_t == nullptr) || (!(_1a9133243_is_num((*(_342713_t))._method_to_str())))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_f64()) {
				_case_begin_4403496512:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*((*this)._field_d))._field_constant))._method_read_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_4403496624:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_4403496736:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_f64(static_cast<jule::F64>((+((*((*((*this)._field_d))._field_constant))._method_as_f64()))));
				}
			}
			_match_end_4403496272:;
		}
		_1a8b431d7_normalize_type((*this)._field_d);
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1a8b431d7_UnaryEval::_method_eval_caret(void) {
	jule::Ptr<_1a6a19a50_Prim> _345513_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_345513_t == nullptr) || (!(_1a9133243_is_int((*(_345513_t))._method_to_str())))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_i64()) {
				_case_begin_4403519792:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_i64(static_cast<jule::I64>((~((*((*((*this)._field_d))._field_constant))._method_read_i64()))));
				}
			}
			else if ((*((*((*this)._field_d))._field_constant))._method_is_u64()) {
				_case_begin_4403519904:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_u64(static_cast<jule::U64>((~((*((*((*this)._field_d))._field_constant))._method_read_u64()))));
				}
			}
			_match_end_4403519568:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1a8b431d7_UnaryEval::_method_eval_excl(void) {
	jule::Ptr<_1a6a19a50_Prim> _347913_t = (*((*((*this)._field_d))._field_kind))._method_prim();
	if ((_347913_t == nullptr) || (!((*(_347913_t))._method_is_bool()))) {
		(*this)._field_d=nullptr;
		return;
	}
	if ((*((*this)._field_d))._method_is_const()) {
		{
			
			if ((*((*((*this)._field_d))._field_constant))._method_is_bool()) {
				_case_begin_4403538048:;
				{
					(*((*((*this)._field_d))._field_constant))._method_set_bool((!((*((*((*this)._field_d))._field_constant))._method_read_bool())));
				}
			}
			_match_end_4403537840:;
		}
	}
	(*((*this)._field_d))._field_lvalue=false;
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
}



inline void _1a8b431d7_UnaryEval::_method_eval_star(void) {
	(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
	{
		
		if ((*((*((*this)._field_d))._field_kind))._method_ptr() != nullptr) {
			_case_begin_4403550720:;
			{
				if ((!((*((*this)._field_e))._method_is_unsafe()))) {
					(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
				}
				jule::Ptr<_1a6a19a50_Ptr> _351121_t = (*((*((*this)._field_d))._field_kind))._method_ptr();
				if ((*(_351121_t))._method_is_unsafe()) {
					(*this)._field_d=nullptr;
					return;
				}
				(*((*this)._field_d))._field_kind=(*(_351121_t))._field_elem;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_sptr() != nullptr) {
			_case_begin_4403550816:;
			{
				(*((*this)._field_d))._field_kind=(*((*((*((*this)._field_d))._field_kind))._method_sptr()))._field_elem;
			}
		}
		else {
			_case_begin_4403549744:;
			{
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_4403549664:;
	}
	(*((*this)._field_d))._field_constant=nullptr;
	(*((*this)._field_d))._field_lvalue=true;
}



inline void _1a8b431d7_UnaryEval::_method_eval_amper(void) {
	{
		auto &_match_expr{ (*((*this)._field_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructLitExprModel>>()) {
			_case_begin_4403569568:;
			{
				jule::Ptr<_1a69b8d2e_StructLitExprModel> _353321_lit = (*((*this)._field_d))._field_model.operator jule::Ptr<_1a69b8d2e_StructLitExprModel>();
				_1a8b431d7_make_struct_lit_alloc((*this)._field_d,_353321_lit);
			}
		}
		else {
			_case_begin_4403567360:;
			{
				{
					
					if (_1a6a19a50_can_get_ptr((*this)._field_d)) {
						_case_begin_4403569360:;
						{
							(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a6a19a50_Ptr>(new( std::nothrow ) _1a6a19a50_Ptr((*((*this)._field_d))._field_kind))));
							(*((*this)._field_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_UnaryExprModel>(new( std::nothrow ) _1a69b8d2e_UnaryExprModel(jule::new_ptr<_1a8b431d7_Data>((*((*this)._field_d))),(*((*this)._field_u))._field_op)));
						}
					}
					else {
						_case_begin_4403568560:;
						{
							(*this)._field_d=nullptr;
						}
					}
					_match_end_4403566672:;
				}
			}
		}
		_match_end_4403567280:;
	}
	if ((*this)._field_d != nullptr) {
		(*((*this)._field_d))._field_constant=nullptr;
		(*((*this)._field_d))._field_lvalue=false;
		(*((*this)._field_d))._field_mutable=true;
	}
}



inline void _1a8b431d7_UnaryEval::_method_eval_type_decl(void) {
	_1a6a19a50_TypeChecker _356017_tc = _1a6a19a50_TypeChecker((*((*this)._field_e))._field_s,(*((*this)._field_e))._field_lookup,jule::Ptr<_1a6a19a50_Referencer>(),(*((*this)._field_u))._field_op,jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>(),jule::Bool(),jule::Bool(),jule::Bool());
	{
		auto &_match_expr{ (*((*this)._field_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4403590752:;
			{
				(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_356017_tc._method_build_ptr_from_type((*((*this)._field_d))._field_kind)));
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4403590848:;
			{
				(*((*this)._field_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_356017_tc._method_build_sptr_from_type((*((*this)._field_d))._field_kind)));
			}
		}
		else {
			_case_begin_4403582336:;
			{
				(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*((*this)._field_u))._field_op._field_kind),jule::Any((*((*((*this)._field_d))._field_kind))._method_to_str())}));
				(*this)._field_d=nullptr;
				return;
			}
		}
		_match_end_4403585216:;
	}
	(*((*this)._field_d))._field_decl=true;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_UnaryEval::_method_eval(jule::Ptr<_1b7509a90_UnaryExpr> _358227_u) {
	(*this)._field_u=_358227_u;
	jule::Ptr<_1a6a19a50_TypeKind> _358517_prefix = (*((*this)._field_e))._field_prefix;
	(*((*this)._field_e))._field_prefix=nullptr;
	__JULE_DEFER({
		(*((*this)._field_e))._field_prefix=_358517_prefix;
	});
	(*this)._field_d=(*((*this)._field_e))._method_eval_expr_kind((*((*this)._field_u))._field_expr);
	if ((*this)._field_d == nullptr) {
		return nullptr;
	}
	if ((*((*this)._field_d))._field_decl) {
		(*this)._method_eval_type_decl();
		return (*this)._field_d;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _359917_cast_kind = (*((*this)._field_d))._field_cast_kind;
	jule::Ptr<_1a6a19a50_TypeKind> _360013_kind = (*((*this)._field_d))._field_kind;
	{
		auto &_match_expr{ (*(_358227_u))._field_op._field_kind };
		
		if (_match_expr == jule::Str("-", 1)) {
			_case_begin_4403610160:;
			{
				(*this)._method_eval_minus();
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_4403610256:;
			{
				(*this)._method_eval_plus();
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_4403609472:;
			{
				(*this)._method_eval_caret();
			}
		}
		else if (_match_expr == jule::Str("!", 1)) {
			_case_begin_4403609568:;
			{
				(*this)._method_eval_excl();
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4403609664:;
			{
				(*this)._method_eval_star();
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4403609760:;
			{
				(*this)._method_eval_amper();
			}
		}
		else {
			_case_begin_4403605920:;
			{
				(*this)._field_d=nullptr;
			}
		}
		_match_end_4403609184:;
	}
	if ((*this)._field_d == nullptr) {
		(*((*this)._field_e))._method_push_err((*((*this)._field_u))._field_op,jule::Str("unary operator @ is not defined for type @", 42),jule::Slice<jule::Any>({jule::Any((*((*this)._field_u))._field_op._field_kind),jule::Any((*(_360013_kind))._method_to_str())}));
	} else if ((*((*this)._field_d))._method_is_const()) {
		(*((*this)._field_d))._field_model=jule::Any((*((*this)._field_d))._field_constant);
	} else if (_359917_cast_kind != nullptr) {
		(*((*this)._field_d))._field_cast_kind=_359917_cast_kind;
		_1a8b431d7_apply_cast_kind((*this)._field_d);
	}
	return (*this)._field_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a8b431d7_UnaryEval &_Src) {
	_Stream << "UnaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "u:" << _Src._field_u;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_TypeKind::_method_to_str(void) {
	if ((*this)._method_is_nil()) {
		return jule::Str("nil", 3);
	}
	jule::Str _7617_kind = jule::Str();
	if ((*this)._field_variadic) {
		_7617_kind+=jule::Str("...", 3);
	}
	if ((*this)._method_cpp_linked()) {
		_7617_kind+=jule::Str("cpp.", 4);
		_7617_kind+=(*this)._field_cpp_ident;
	} else {
		_7617_kind+=(*this)._field_kind.get()._method_to_str();
	}
	return _7617_kind;
}



inline jule::Bool _1a6a19a50_TypeKind::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _9222_other) {
	if ((*(this->self))._method_is_nil()) {
		return (*(_9222_other))._method_is_nil();
	}
	if ((*(this->self))._method_cpp_linked()) {
		return (*(_9222_other))._method_cpp_linked() && ((*(this->self))._field_cpp_ident == (*(_9222_other))._field_cpp_ident);
	}
	return (*(this->self))._field_kind.get()._method_equals(_9222_other);
}



inline jule::Bool _1a6a19a50_TypeKind::_method_cpp_linked(void) {
	return (*this)._field_cpp_ident.len() != 0LL;
}



inline jule::Bool _1a6a19a50_TypeKind::_method_is_nil(void) {
	return (*this)._field_kind == nullptr;
}



inline jule::Bool _1a6a19a50_TypeKind::_method_void(void) {
	jule::Ptr<_1a6a19a50_Prim> _11513_prim = (*this)._method_prim();
	return (_11513_prim != nullptr) && ((*(_11513_prim))._field_kind == jule::Str("void", 4));
}



inline jule::Bool _1a6a19a50_TypeKind::_method_mutable(void) {
	{
		_1a6a19a50_TypeKind* _12221__self = (&((*this)));
		if ((*(_12221__self))._method_strct() != nullptr) {
			return (*((*(_12221__self))._method_strct()))._field_mutable;
		}
		if ((*(_12221__self))._method_trt() != nullptr) {
			return (*((*(_12221__self))._method_trt()))._field_mutable;
		}
		if ((*(_12221__self))._method_prim() != nullptr) {
			jule::Ptr<_1a6a19a50_Prim> _13121_p = (*(_12221__self))._method_prim();
			return (*(_13121_p))._method_is_any();
		}
		if ((*(_12221__self))._method_arr() != nullptr) {
			return (*((*((*(_12221__self))._method_arr()))._field_elem))._method_mutable();
		}
		return (((*(_12221__self))._method_slc() != nullptr) || ((*(_12221__self))._method_ptr() != nullptr)) || ((*(_12221__self))._method_sptr() != nullptr);
	}
}



inline jule::Bool _1a6a19a50_TypeKind::_method_nil_compatible(void) {
	{
		_1a6a19a50_TypeKind* _14621__self = (&((*this)));
		jule::Ptr<_1a6a19a50_Prim> _14817_prim = (*(_14621__self))._method_prim();
		if ((_14817_prim != nullptr) && (*(_14817_prim))._method_is_any()) {
			return true;
		}
		return ((((((*(_14621__self))._method_is_nil() || ((*(_14621__self))._method_fnc() != nullptr)) || ((*(_14621__self))._method_sptr() != nullptr)) || ((*(_14621__self))._method_ptr() != nullptr)) || ((*(_14621__self))._method_trt() != nullptr)) || ((*(_14621__self))._method_slc() != nullptr)) || ((*(_14621__self))._method_map() != nullptr);
	}
}



inline jule::Bool _1a6a19a50_TypeKind::_method_performs_rc(void) {
	{
		_1a6a19a50_TypeKind* _16621__self = (&((*this)));
		return (((*(_16621__self))._method_sptr() != nullptr) || ((*(_16621__self))._method_slc() != nullptr)) || ((*(_16621__self))._method_trt() != nullptr);
	}
}



inline jule::Bool _1a6a19a50_TypeKind::_method_supports_cloning(void) {
	{
		_1a6a19a50_TypeKind* _17421__self = (&((*this)));
		{
			
			if ((*(_17421__self))._method_prim() != nullptr) {
				_case_begin_4404181264:;
				{
					return (!((*((*(_17421__self))._method_prim()))._method_is_any()));
				}
			}
			else if ((*(_17421__self))._method_enm() != nullptr) {
				_case_begin_4404179792:;
				{
					return true;
				}
			}
			else if ((*(_17421__self))._method_fnc() != nullptr) {
				_case_begin_4404179888:;
				{
					return true;
				}
			}
			else if ((*(_17421__self))._method_ptr() != nullptr) {
				_case_begin_4404180000:;
				{
					return true;
				}
			}
			else if ((*(_17421__self))._method_slc() != nullptr) {
				_case_begin_4404180112:;
				{
					return (*((*((*(_17421__self))._method_slc()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_map() != nullptr) {
				_case_begin_4404180512:;
				{
					jule::Ptr<_1a6a19a50_Map> _18821_m = (*(_17421__self))._method_map();
					return (*((*(_18821_m))._field_key))._method_supports_cloning() && (*((*(_18821_m))._field_val))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_arr() != nullptr) {
				_case_begin_4404180624:;
				{
					return (*((*((*(_17421__self))._method_arr()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_sptr() != nullptr) {
				_case_begin_4404180736:;
				{
					return (*((*((*(_17421__self))._method_sptr()))._field_elem))._method_supports_cloning();
				}
			}
			else if ((*(_17421__self))._method_strct() != nullptr) {
				_case_begin_4404180848:;
				{
					jule::Ptr<_1b7905331_StructIns> _19825_s = (*(_17421__self))._method_strct();
					if ((!((*(_19825_s))._field_mutable))) {
						return true;
					}
					if ((((*(_19825_s))._field_decl == nullptr) || (*((*(_19825_s))._field_decl))._field_cpp_linked) || (!((*((*(_19825_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						return false;
					}
					return true;
				}
			}
			else {
				_case_begin_4404179488:;
				{
					return false;
				}
			}
			_match_end_4404179376:;
		}
	}
}



inline jule::Bool _1a6a19a50_TypeKind::_method_variadicable(void) {
	{
		_1a6a19a50_TypeKind* _21821__self = (&((*this)));
		return (*(_21821__self))._method_slc() != nullptr;
	}
}



inline jule::Ptr<_1a6a19a50_Prim> _1a6a19a50_TypeKind::_method_prim(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_Prim>>()) {
			_case_begin_4404213936:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6a19a50_Prim>();
			}
		}
		else {
			_case_begin_4404212656:;
			{
				return nullptr;
			}
		}
		_match_end_4404212576:;
	}
}



inline jule::Ptr<_1a6a19a50_Sptr> _1a6a19a50_TypeKind::_method_sptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_Sptr>>()) {
			_case_begin_4404214608:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6a19a50_Sptr>();
			}
		}
		else {
			_case_begin_4404214496:;
			{
				return nullptr;
			}
		}
		_match_end_4404214416:;
	}
}



inline jule::Ptr<_1a6a19a50_Ptr> _1a6a19a50_TypeKind::_method_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_Ptr>>()) {
			_case_begin_4404219232:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6a19a50_Ptr>();
			}
		}
		else {
			_case_begin_4404216224:;
			{
				return nullptr;
			}
		}
		_match_end_4404217504:;
	}
}



inline jule::Ptr<_1a6bb9150_Enum> _1a6a19a50_TypeKind::_method_enm(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bb9150_Enum>>()) {
			_case_begin_4404221984:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6bb9150_Enum>();
			}
		}
		else {
			_case_begin_4404220192:;
			{
				return nullptr;
			}
		}
		_match_end_4404219056:;
	}
}



inline jule::Ptr<_1a6a19a50_Arr> _1a6a19a50_TypeKind::_method_arr(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_Arr>>()) {
			_case_begin_4404222192:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6a19a50_Arr>();
			}
		}
		else {
			_case_begin_4404222608:;
			{
				return nullptr;
			}
		}
		_match_end_4404222944:;
	}
}



inline jule::Ptr<_1a6a19a50_Slc> _1a6a19a50_TypeKind::_method_slc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_Slc>>()) {
			_case_begin_4404225680:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6a19a50_Slc>();
			}
		}
		else {
			_case_begin_4404225568:;
			{
				return nullptr;
			}
		}
		_match_end_4404225488:;
	}
}



inline jule::Ptr<_1a691a500_FnIns> _1a6a19a50_TypeKind::_method_fnc(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a691a500_FnIns>>()) {
			_case_begin_4404230304:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a691a500_FnIns>();
			}
		}
		else {
			_case_begin_4404227296:;
			{
				return nullptr;
			}
		}
		_match_end_4404228576:;
	}
}



inline jule::Ptr<_1b7905331_StructIns> _1a6a19a50_TypeKind::_method_strct(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_StructIns>>()) {
			_case_begin_4404233056:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1b7905331_StructIns>();
			}
		}
		else {
			_case_begin_4404231264:;
			{
				return nullptr;
			}
		}
		_match_end_4404230128:;
	}
}



inline jule::Ptr<_1b76b472d_Trait> _1a6a19a50_TypeKind::_method_trt(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b76b472d_Trait>>()) {
			_case_begin_4404233264:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1b76b472d_Trait>();
			}
		}
		else {
			_case_begin_4404233680:;
			{
				return nullptr;
			}
		}
		_match_end_4404234016:;
	}
}



inline jule::Ptr<_1a6a19a50_Map> _1a6a19a50_TypeKind::_method_map(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_Map>>()) {
			_case_begin_4404236752:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6a19a50_Map>();
			}
		}
		else {
			_case_begin_4404236640:;
			{
				return nullptr;
			}
		}
		_match_end_4404236560:;
	}
}



inline jule::Ptr<_1a6a19a50_Tuple> _1a6a19a50_TypeKind::_method_tup(void) {
	{
		auto &_match_expr{ (*this)._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_Tuple>>()) {
			_case_begin_4404238368:;
			{
				return (*this)._field_kind.operator jule::Ptr<_1a6a19a50_Tuple>();
			}
		}
		else {
			_case_begin_4404239584:;
			{
				return nullptr;
			}
		}
		_match_end_4404239504:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_TypeKind &_Src) {
	_Stream << "TypeKind{";
	_Stream << "cpp_ident:" << _Src._field_cpp_ident << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a6a19a50_TypeSymbol::_method_checked(void) {
	return (*this)._field_kind != nullptr;
}



inline void _1a6a19a50_TypeSymbol::_method_remove_kind(void) {
	(*this)._field_kind=nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_TypeSymbol &_Src) {
	_Stream << "TypeSymbol{";
	_Stream << "decl:" << _Src._field_decl << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_Prim::_method_to_str(void) {
	return (*this)._field_kind;
}



inline jule::Bool _1a6a19a50_Prim::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _33722_other) {
	jule::Ptr<_1a6a19a50_Prim> _33813_prim = (*(_33722_other))._method_prim();
	if (_33813_prim == nullptr) {
		return false;
	}
	return _1a90e11ac_real_kind_of((*(this->self))._field_kind) == _1a90e11ac_real_kind_of((*(_33813_prim))._field_kind);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_i8(void) {
	return (*this)._field_kind == jule::Str("i8", 2);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_i16(void) {
	return (*this)._field_kind == jule::Str("i16", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_i32(void) {
	return (*this)._field_kind == jule::Str("i32", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_i64(void) {
	return (*this)._field_kind == jule::Str("i64", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_u8(void) {
	return (*this)._field_kind == jule::Str("u8", 2);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_u16(void) {
	return (*this)._field_kind == jule::Str("u16", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_u32(void) {
	return (*this)._field_kind == jule::Str("u32", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_u64(void) {
	return (*this)._field_kind == jule::Str("u64", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_f32(void) {
	return (*this)._field_kind == jule::Str("f32", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_f64(void) {
	return (*this)._field_kind == jule::Str("f64", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_int(void) {
	return (*this)._field_kind == jule::Str("int", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_uint(void) {
	return (*this)._field_kind == jule::Str("uint", 4);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_uintptr(void) {
	return (*this)._field_kind == jule::Str("uintptr", 7);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_bool(void) {
	return (*this)._field_kind == jule::Str("bool", 4);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_str(void) {
	return (*this)._field_kind == jule::Str("str", 3);
}



inline jule::Bool _1a6a19a50_Prim::_method_is_any(void) {
	return (*this)._field_kind == jule::Str("any", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Prim &_Src) {
	_Stream << "Prim{";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_Sptr::_method_to_str(void) {
	return jule::Str("&", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _1a6a19a50_Sptr::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _40622_other) {
	jule::Ptr<_1a6a19a50_Sptr> _40713_sptr = (*(_40622_other))._method_sptr();
	if (_40713_sptr == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_40713_sptr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Sptr &_Src) {
	_Stream << "Sptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_Slc::_method_to_str(void) {
	return jule::Str("[]", 2) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _1a6a19a50_Slc::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _42522_other) {
	jule::Ptr<_1a6a19a50_Slc> _42613_slc = (*(_42522_other))._method_slc();
	if (_42613_slc == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_42613_slc))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Slc &_Src) {
	_Stream << "Slc{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_Tuple::_method_to_str(void) {
	jule::Str _44217_s = jule::Str("(", 1);
	_44217_s+=(*((*this)._field_types[0LL]))._method_to_str();
	{
		auto expr = (*this)._field_types.slice(1LL);
		auto it = expr.begin();
		_iter_begin_4404299584:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeKind> &_1a6a19a50_t = *it;
			{
				_44217_s+=jule::Str(",", 1);
				_44217_s+=(*(_1a6a19a50_t))._method_to_str();
			}
			_iter_next_4404299584:;
			++it;
			goto _iter_begin_4404299584;
		}
		_iter_end_4404299584:;
	}
	_44217_s+=jule::Str(")", 1);
	return _44217_s;
}



inline jule::Bool _1a6a19a50_Tuple::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _45322_other) {
	jule::Ptr<_1a6a19a50_Tuple> _45413_tup = (*(_45322_other))._method_tup();
	if (_45413_tup == nullptr) {
		return false;
	}
	if ((*(this->self))._field_types.len() != (*(_45413_tup))._field_types.len()) {
		return false;
	}
	jule::Int _46317_i = 0LL;
	for (; _46317_i < (*(this->self))._field_types.len(); (_46317_i)++) {
		{
			if ((!((*((*(this->self))._field_types[_46317_i]))._method_equals((*(_45413_tup))._field_types[_46317_i])))) {
				return false;
			}
		}
	_iter_next_4404306944:;
	}
	_iter_end_4404306944:;
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Tuple &_Src) {
	_Stream << "Tuple{";
	_Stream << "types:" << _Src._field_types;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_Map::_method_to_str(void) {
	jule::Str _48317_s = jule::Str("[", 1);
	_48317_s+=(*((*this)._field_key))._method_to_str();
	_48317_s+=jule::Str(":", 1);
	_48317_s+=(*((*this)._field_val))._method_to_str();
	_48317_s+=jule::Str("]", 1);
	return _48317_s;
}



inline jule::Bool _1a6a19a50_Map::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _49222_other) {
	jule::Ptr<_1a6a19a50_Map> _49313_map = (*(_49222_other))._method_map();
	if (_49313_map == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_key))._method_equals((*(_49313_map))._field_key) && (*((*(this->self))._field_val))._method_equals((*(_49313_map))._field_val);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Map &_Src) {
	_Stream << "Map{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_Arr::_method_to_str(void) {
	jule::Str _51117_s = jule::Str("[", 1);
	_51117_s+=_1b6ac3d91_itoa((*this)._field_n);
	_51117_s+=jule::Str("]", 1);
	_51117_s+=(*((*this)._field_elem))._method_to_str();
	return _51117_s;
}



inline jule::Bool _1a6a19a50_Arr::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _51922_other) {
	jule::Ptr<_1a6a19a50_Arr> _52013_arr = (*(_51922_other))._method_arr();
	if (_52013_arr == nullptr) {
		return false;
	}
	return ((*(this->self))._field_n == (*(_52013_arr))._field_n) && (*((*(this->self))._field_elem))._method_equals((*(_52013_arr))._field_elem);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Arr &_Src) {
	_Stream << "Arr{";
	_Stream << "auto:" << _Src._field_auto << ", ";
	_Stream << "n:" << _Src._field_n << ", ";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6a19a50_Ptr::_method_to_str(void) {
	if ((*this)._method_is_unsafe()) {
		return jule::Str("*unsafe", 7);
	}
	return jule::Str("*", 1) + (*((*this)._field_elem))._method_to_str();
}



inline jule::Bool _1a6a19a50_Ptr::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _54322_other) {
	jule::Ptr<_1a6a19a50_Ptr> _54413_ptr = (*(_54322_other))._method_ptr();
	if (_54413_ptr == nullptr) {
		return false;
	}
	return (*((*(this->self))._field_elem))._method_equals((*(_54413_ptr))._field_elem);
}



inline jule::Bool _1a6a19a50_Ptr::_method_is_unsafe(void) {
	return (*this)._field_elem == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Ptr &_Src) {
	_Stream << "Ptr{";
	_Stream << "elem:" << _Src._field_elem;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_Referencer &_Src) {
	_Stream << "Referencer{";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "refs:" << _Src._field_refs;
	_Stream << "}";
	return _Stream;
}



inline void _1b74b0925_DirectiveEval::_method_push_err(_1b7553d92_Token _2027_t,jule::Str _2037_fmt,jule::Slice<jule::Any> _2050_args) {
	(*this)._field_logs = jule::alloc_for_append((*this)._field_logs,1);(*this)._field_logs.__push(_1b6986b22_Log(1LLU,_2027_t._field_row,_2027_t._field_column,(*(_2027_t._field_file))._method_path(),_1b6986b22_logf(_2037_fmt,_2050_args),jule::Str(),jule::Str()));
}



inline jule::Slice<jule::Slice<_1b7553d92_Token>> _1b74b0925_DirectiveEval::_method_split_operans(jule::Str _3232_op,jule::Slice<_1b7553d92_Token>& _3252_tokens) {
	jule::Slice<jule::Slice<_1b7553d92_Token>> _3317_parts = jule::Slice<jule::Slice<_1b7553d92_Token>>::alloc(0LL,10LL);
	jule::Int _3517_i = 0LL;
	jule::Int _3617_range_n = 0LL;
	jule::Int _3717_last = 0LL;
	for (; _3517_i < (_3252_tokens.len() - 1LL); (_3517_i)++) {
		{
			_1b7553d92_Token _3917_b = _3252_tokens[_3517_i];
			if (_3917_b._field_id == 3LLU) {
				{
					auto &_match_expr{ _3917_b._field_kind };
					
					if (_match_expr == jule::Str("(", 1)) {
						_case_begin_4404937840:;
						{
							(_3617_range_n)++;
							goto _iter_next_4404934096;
						}
					}
					else if (_match_expr == jule::Str(")", 1)) {
						_case_begin_4404938112:;
						{
							(_3617_range_n)--;
						}
					}
					_match_end_4404937696:;
				}
			}
			if ((_3617_range_n > 0LL) || (_3917_b._field_id != 7LLU)) {
				goto _iter_next_4404934096;
			}
			if (_3917_b._field_kind == _3232_op) {
				_3317_parts = jule::alloc_for_append(_3317_parts,1);_3317_parts.__push(_3252_tokens.slice(_3717_last,_3517_i));
				_3717_last=static_cast<jule::Int>(_3517_i + 1LL);
			}
		}
	_iter_next_4404934096:;
	}
	_iter_end_4404934096:;
	if (_3717_last < _3252_tokens.len()) {
		_3317_parts = jule::alloc_for_append(_3317_parts,1);_3317_parts.__push(_3252_tokens.slice(_3717_last));
	} else {
		(*this)._method_push_err(_3252_tokens[_3717_last - 1LL],jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return _3317_parts;
}



inline jule::Bool _1b74b0925_DirectiveEval::_method_eval_directive_ident(jule::Str _7335_ident) {
	if (_7335_ident == jule::Str()) {
		return false;
	}
	{
		auto &expr = _1b74b0d98_VARS;
		auto it = expr.begin();
		_iter_begin_4404951424:;
		if (it != expr.end()) {
			jule::Str &_1b74b0925_var = *it;
			{
				if (_1b74b0925_var == _7335_ident) {
					return true;
				}
			}
			_iter_next_4404951424:;
			++it;
			goto _iter_begin_4404951424;
		}
		_iter_end_4404951424:;
	}
	return false;
}



inline jule::Bool _1b74b0925_DirectiveEval::_method_eval_directive_part(jule::Slice<_1b7553d92_Token> _8942_part) {
	jule::Bool _9013_logical_not = (_8942_part[0LL]._field_id == 7LLU) && (_8942_part[0LL]._field_kind == jule::Str("!", 1));
	if (_9013_logical_not) {
		_8942_part=_8942_part.slice(1LL);
	}
	if (_8942_part.len() > 1LL) {
		(*this)._method_push_err(_8942_part[1LL],jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _10017_result = (*this)._method_eval_directive_ident(_8942_part[0LL]._field_kind);
	if (_9013_logical_not) {
		_10017_result=(!(_10017_result));
	}
	return _10017_result;
}



inline jule::Bool _1b74b0925_DirectiveEval::_method_eval(void) {
	if ((*((*this)._field_d))._field_args.len() == 0LL) {
		(*this)._method_push_err((*((*this)._field_d))._field_tag,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
		return false;
	}
	jule::Bool _11317_result = false;
	jule::Slice<jule::Slice<_1b7553d92_Token>> _11517_logical_or_parts = (*this)._method_split_operans(jule::Str("||", 2),(*((*this)._field_d))._field_args);
	if (_11517_logical_or_parts == nullptr) {
		return false;
	}
	{
		auto &expr = _11517_logical_or_parts;
		auto it = expr.begin();
		_iter_begin_4404972912:;
		if (it != expr.end()) {
			jule::Slice<_1b7553d92_Token> _1b74b0925_part = *it;
			{
				jule::Bool _12121_and = true;
				jule::Slice<jule::Slice<_1b7553d92_Token>> _12221_logical_and_parts = (*this)._method_split_operans(jule::Str("&&", 2),_1b74b0925_part);
				if (_12221_logical_and_parts == nullptr) {
					return false;
				}
				{
					auto &expr = _12221_logical_and_parts;
					auto it = expr.begin();
					_iter_begin_4404977744:;
					if (it != expr.end()) {
						jule::Slice<_1b7553d92_Token> _1b74b0925_and_part = *it;
						{
							_1b7553d92_Token _12821_first = _1b74b0925_and_part[0LL];
							if ((_12821_first._field_id == 3LLU) && (_12821_first._field_kind == jule::Str("(", 1))) {
								_1b7553d92_Token _13025_end = _1b74b0925_and_part[_1b74b0925_and_part.len() - 1LL];
								if ((_13025_end._field_id != 3LLU) || (_13025_end._field_kind != jule::Str(")", 1))) {
									(*this)._method_push_err(_12821_first,jule::Str("parentheses waiting to close", 28),jule::Slice<jule::Any>());
									return false;
								}
								_1b74b0925_and_part=_1b74b0925_and_part.slice(1LL,_1b74b0925_and_part.len() - 1LL);
							}
							_12121_and=_12121_and && (*this)._method_eval_directive_part(_1b74b0925_and_part);
						}
						_iter_next_4404977744:;
						++it;
						goto _iter_begin_4404977744;
					}
					_iter_end_4404977744:;
				}
				_11317_result=_11317_result || _12121_and;
			}
			_iter_next_4404972912:;
			++it;
			goto _iter_begin_4404972912;
		}
		_iter_end_4404972912:;
	}
	return _11317_result;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b74b0925_DirectiveEval &_Src) {
	_Stream << "DirectiveEval{";
	_Stream << "logs:" << _Src._field_logs << ", ";
	_Stream << "d:" << _Src._field_d;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b74c00a5_PlainImporter> _1b74c00a5_PlainImporter::_static_method_new(void) {
	return jule::new_struct<_1b74c00a5_PlainImporter>(new( std::nothrow ) _1b74c00a5_PlainImporter(jule::Slice<jule::Str>({_1b69ce708_PATH_STDLIB}),jule::Str(),jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>>()));
}



inline void _1b74c00a5_PlainImporter::_method_set_mod_path(jule::Str _8835_path) {
	(*this)._field_mod=_8835_path;
}



inline jule::Str _1b74c00a5_PlainImporter::_method_get_mod_path(void) {
	return (*this)._field_mod;
}



inline jule::Str _1b74c00a5_PlainImporter::_method_mod_by_id(jule::Int _9628_id) {
	return (*this)._field_mods[_9628_id];
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1b74c00a5_PlainImporter::_method_get_import(jule::Str _10033_path) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_4404999296:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1b74c00a5_p = *it;
			{
				if ((*(_1b74c00a5_p))._field_path == _10033_path) {
					return _1b74c00a5_p;
				}
			}
			_iter_next_4404999296:;
			++it;
			goto _iter_begin_4404999296;
		}
		_iter_end_4404999296:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<jule::Ptr<_1b74bea77_Ast>>,jule::Slice<_1b6986b22_Log>> _1b74c00a5_PlainImporter::_method_import_package(jule::Str _11037_path,jule::Bool _11048_update_mod) {
	jule::Slice<jule::Ptr<_1ce947cda_DirEntry>> _11117_dirents = ({
		auto except = _1ce947cda_Directory::_static_method_read(_11037_path);
		(except.ok()) ? (except.result) : ({{
			return std::make_tuple(nullptr,jule::Slice<_1b6986b22_Log>({_1b74c00a5_flat_compiler_err((jule::Str("connot read package directory: ", 31) + _11037_path))}));
			return std::make_tuple(nullptr,jule::Slice<_1b6986b22_Log>({_1b74c00a5_flat_compiler_err((jule::Str("connot read package directory: ", 31) + _11037_path))}));
		} jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>();});
	});
	if (_11048_update_mod) {
		jule::Str _11617_new_mod = _1b76a914b_find_module_file_deep(_11037_path);
		if (_11617_new_mod != (*this)._field_mod) {
			(*this)._field_mod=_11617_new_mod;
			jule::Slice<_1b6986b22_Log> _11925_errs = _1b76a914b_check_module_file((*this)._field_mod);
			if (_11925_errs.len() != 0LL) {
				return std::make_tuple(nullptr,_11925_errs);
			}
		}
	}
	jule::Slice<jule::Ptr<_1b74bea77_Ast>> _12617_asts = jule::Slice<jule::Ptr<_1b74bea77_Ast>>::alloc(0LL,static_cast<jule::I64>(_11117_dirents.len()));
	{
		auto &expr = _11117_dirents;
		auto it = expr.begin();
		_iter_begin_4405007664:;
		if (it != expr.end()) {
			jule::Ptr<_1ce947cda_DirEntry> &_1b74c00a5_dirent = *it;
			{
				if ((*((*(_1b74c00a5_dirent))._field_stat))._method_is_dir() || (!(_1cea16edb_has_suffix((*(_1b74c00a5_dirent))._field_name,jule::Str(".jule", 5))))) {
					goto _iter_next_4405007664;
				}
				jule::Str _13317__path = _1ce9be05e_join(jule::Slice<jule::Str>({_11037_path,(*(_1b74c00a5_dirent))._field_name}));
				jule::Ptr<_1b750c763_File> _13421_file = _1b750c763_new_file_set(_13317__path);
				(*(_13421_file))._method_fill(_1b74c00a5_read_buff((*(_13421_file))._method_path()));
				jule::Slice<_1b6986b22_Log> _13621_errors = _1b75960d2_lex(_13421_file);
				if (_13621_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_13621_errors);
				}
				jule::Ptr<_1b76a925b_FileInfo> _14121_finfo = _1b76a925b_parse_file(_13421_file);
				if ((*(_14121_finfo))._field_errors.len() > 0LL) {
					return std::make_tuple(nullptr,(*(_14121_finfo))._field_errors);
				}
				if ((!(_1b71c24a0_is_pass_file_annotation((*(_1b74c00a5_dirent))._field_name)))) {
					goto _iter_next_4405007664;
				}
				jule::Bool _15118_r;
				jule::Slice<_1b6986b22_Log> _15125_logs;
				std::tie(_15118_r,_15125_logs) = _1b74c00a5_is_pass_build_directives((*(_14121_finfo))._field_ast);
				if (_15125_logs.len() > 0LL) {
					return std::make_tuple(nullptr,_15125_logs);
				}
				if ((!(_15118_r))) {
					goto _iter_next_4405007664;
				}
				_12617_asts = jule::alloc_for_append(_12617_asts,1);_12617_asts.__push((*(_14121_finfo))._field_ast);
			}
			_iter_next_4405007664:;
			++it;
			goto _iter_begin_4405007664;
		}
		_iter_end_4405007664:;
	}
	return std::make_tuple(_12617_asts,nullptr);
}



inline void _1b74c00a5_PlainImporter::_method_imported(jule::Ptr<_1a6e9a574_ImportInfo> _16735_imp) {
	{
		auto &expr = (*this)._field_all_packages;
		auto it = expr.begin();
		_iter_begin_4405041680:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> &_1b74c00a5_p = *it;
			{
				if (((*(_1b74c00a5_p))._field_cpp_linked == (*(_16735_imp))._field_cpp_linked) && ((*(_1b74c00a5_p))._field_link_path == (*(_16735_imp))._field_link_path)) {
					return;
				}
			}
			_iter_next_4405041680:;
			++it;
			goto _iter_begin_4405041680;
		}
		_iter_end_4405041680:;
	}
	if ((*this)._field_mod.len() != 0LL) {
		{
			auto &expr = (*this)._field_mods;
			auto it = expr.begin();
			_iter_begin_4405046512:;
			if (it != expr.end()) {
				jule::Int _1b74c00a5_i = it - expr.begin();
				jule::Str &_1b74c00a5_mod = *it;
				{
					if ((*this)._field_mod == _1b74c00a5_mod) {
						(*(_16735_imp))._field_mod_id=_1b74c00a5_i;
						goto _julec_label_setted;
					}
				}
				_iter_next_4405046512:;
				++it;
				_1b74c00a5_i++;
				goto _iter_begin_4405046512;
			}
			_iter_end_4405046512:;
		}
		(*(_16735_imp))._field_mod_id=static_cast<jule::I64>((*this)._field_mods.len());
		(*this)._field_mods = jule::alloc_for_append((*this)._field_mods,1);(*this)._field_mods.__push((*this)._field_mod);
		_julec_label_setted:;
	}
	(*this)._field_all_packages = jule::alloc_for_append((*this)._field_all_packages,1);(*this)._field_all_packages.__push(_16735_imp);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b74c00a5_PlainImporter &_Src) {
	_Stream << "PlainImporter{";
	_Stream << "mods:" << _Src._field_mods << ", ";
	_Stream << "mod:" << _Src._field_mod << ", ";
	_Stream << "all_packages:" << _Src._field_all_packages;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b719c3c0_OrderedDefines &_Src) {
	_Stream << "OrderedDefines{";
	_Stream << "structs:" << _Src._field_structs;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b719c3c0_DefineOrderer::_static_method_is_common_ordered_0(jule::Slice<jule::Ptr<_1b7905331_Struct>>& _1737_s,jule::Ptr<_1b7905331_Struct> _1746_t) {
	jule::Ptr<_1b7905331_Struct>* _1817_p = (&((*(_1746_t))._field_depends[0LL]));
	jule::Ptr<_1b7905331_Struct>* _1913_end = _1817_p + (*(_1746_t))._field_depends.len();
	{
		auto &expr = _1737_s;
		auto it = expr.begin();
		_iter_begin_4405164816:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> &_1b719c3c0_tt = *it;
			{
				{
					if (_1b719c3c0_tt == _1746_t) {
						goto _iter_end_4405164816;
					}
					if (((*((*(_1817_p))))._field_cpp_linked || ((*((*(_1817_p))))._field_depends.len() == 0LL)) || (_1b719c3c0_tt == (*(_1817_p)))) {
						(_1817_p)++;
						if (_1817_p == _1913_end) {
							return true;
						}
					}
				}
			}
			_iter_next_4405164816:;
			++it;
			goto _iter_begin_4405164816;
		}
		_iter_end_4405164816:;
	}
	return false;
}



inline void _1b719c3c0_DefineOrderer::_static_method_order_common_0(jule::Slice<jule::Ptr<_1b7905331_Struct>>& _3840_s) {
	jule::Int _3917_i = 0LL;
	{
		auto &expr = _3840_s;
		auto it = expr.begin();
		_iter_begin_4405144560:;
		if (it != expr.end()) {
			jule::Int _1b719c3c0_j = it - expr.begin();
			jule::Ptr<_1b7905331_Struct> _1b719c3c0_t = *it;
			{
				if ((*(_1b719c3c0_t))._field_cpp_linked || ((*(_1b719c3c0_t))._field_depends.len() == 0LL)) {
					_3840_s.swap(_3917_i,_1b719c3c0_j);
					(_3917_i)++;
				}
			}
			_iter_next_4405144560:;
			++it;
			_1b719c3c0_j++;
			goto _iter_begin_4405144560;
		}
		_iter_end_4405144560:;
	}
	jule::Int _4717_j = _3917_i;
	for (; _4717_j < _3840_s.len(); (_4717_j)++) {
		{
			jule::Int _4921_k = _3917_i;
			for (; _4921_k < (_3840_s.len() - 1LL); (_4921_k)++) {
				{
					if ((!(_1b719c3c0_DefineOrderer::_static_method_is_common_ordered_0(_3840_s,_3840_s[_4921_k])))) {
						_3840_s.swap(_4921_k,static_cast<jule::Int>(_4921_k + 1LL));
					}
				}
			_iter_next_4405146224:;
			}
			_iter_end_4405146224:;
		}
	_iter_next_4405143216:;
	}
	_iter_end_4405143216:;
}



inline void _1b719c3c0_DefineOrderer::_static_method_order_structures(jule::Slice<jule::Ptr<_1b7905331_Struct>>& _6041_structs) {
	_1b719c3c0_DefineOrderer::_static_method_order_common_0(_6041_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b719c3c0_DefineOrderer &_Src) {
	_Stream << "DefineOrderer{";
	_Stream << "}";
	return _Stream;
}



inline void _1b719b688_ScopeDeadCode::_method_optimize_child(jule::Ptr<_1a6bc3e29_Scope>& _2739_s) {
	jule::Ptr<_1b719b688_ScopeDeadCode> _2817_sdc = jule::new_struct_ptr<_1b719b688_ScopeDeadCode>(new( std::nothrow ) _1b719b688_ScopeDeadCode(this->self,_2739_s,(&((*(_2739_s))._field_stmts)),jule::Int()));
	{
		(*(_2817_sdc))._method_optimize_stmts();
	}
}



inline void _1b719b688_ScopeDeadCode::_method_eliminate_followed(void) {
	(*((*this)._field_stmts))=(*((*this)._field_stmts)).slice(0LL,(*this)._field_i + 1LL);
	jule::Ptr<_1b719b688_ScopeDeadCode> _3817_parent = (*this)._field_parent;
	while (_3817_parent != nullptr) {
		{
			(*((*(_3817_parent))._field_stmts))=(*((*(_3817_parent))._field_stmts)).slice(0LL,(*(_3817_parent))._field_i + 1LL);
			_3817_parent=(*(_3817_parent))._field_parent;
		}
	_iter_next_4405389456:;
	}
	_iter_end_4405389456:;
}



inline void _1b719b688_ScopeDeadCode::_method_optimize_stmt(jule::Any _4544_st) {
	{
		auto &_match_expr{ _4544_st };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Scope>>()) {
			_case_begin_4405396624:;
			{
				jule::Ptr<_1a6bc3e29_Scope> _4821_scope = _4544_st.operator jule::Ptr<_1a6bc3e29_Scope>();
				if ((*(_4821_scope))._field_deferred) {
					_1b719b688_eliminate_dead_code_of_scope(_4821_scope);
				} else {
					(*(this->self))._method_optimize_child(_4821_scope);
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
			_case_begin_4405396720:;
			{
				{
					auto &_match_expr{ (*(_4544_st.operator jule::Ptr<_1a8b431d7_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>>()) {
						_case_begin_4405403456:;
						{
							(*(this->self))._method_eliminate_followed();
						}
					}
					_match_end_4405403360:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_RetSt>>()) {
			_case_begin_4405396816:;
			{
				(*(this->self))._method_eliminate_followed();
			}
		}
		_match_end_4405396480:;
	}
}



inline void _1b719b688_ScopeDeadCode::_method_optimize_stmts(void) {
	(*(this->self))._field_i=0LL;
	for (; (*(this->self))._field_i < (*((*(this->self))._field_stmts)).len(); ((*(this->self))._field_i)++) {
		{
			(*(this->self))._method_optimize_stmt((*((*(this->self))._field_stmts))[(*(this->self))._field_i]);
		}
	_iter_next_4405407824:;
	}
	_iter_end_4405407824:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b719b688_ScopeDeadCode &_Src) {
	_Stream << "ScopeDeadCode{";
	_Stream << "parent:" << _Src._field_parent << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "stmts:" << _Src._field_stmts << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline jule::U64 _1a9612e81_AbsTime::_method_unix(void) {
	jule::Bool _5417_leap = false;
	jule::Uint _5517_y = (*this)._field_year - 1900LL;
	jule::Uint _5617_m = (*this)._field_month - 1LL;
	if ((_5617_m >= 12LL) || (_5617_m < 0LL)) {
		jule::Uint _5821_adj = _5617_m / 12LL;
		_5617_m = (_5617_m % 12LL);
		if (_5617_m < 0LL) {
			(_5821_adj)--;
			_5617_m+=12LL;
		}
		_5517_y+=_5821_adj;
	}
	jule::U64 _6617_t = _1a9612e81_unix_year_to_seconds(_5517_y,_5417_leap);
	_6617_t+=static_cast<jule::U64>(_1a9612e81_unix_month_to_seconds(_5617_m,_5417_leap));
	_6617_t+=static_cast<jule::Uint>(86400LL * ((*this)._field_day - 1LL));
	_6617_t+=static_cast<jule::Uint>(3600LL * (*this)._field_hour);
	_6617_t+=static_cast<jule::Uint>(60LL * (*this)._field_minute);
	_6617_t+=(*this)._field_second;
	return _6617_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a9612e81_AbsTime &_Src) {
	_Stream << "AbsTime{";
	_Stream << "day:" << _Src._field_day << ", ";
	_Stream << "week_day:" << _Src._field_week_day << ", ";
	_Stream << "year_day:" << _Src._field_year_day << ", ";
	_Stream << "month:" << _Src._field_month << ", ";
	_Stream << "year:" << _Src._field_year << ", ";
	_Stream << "second:" << _Src._field_second << ", ";
	_Stream << "minute:" << _Src._field_minute << ", ";
	_Stream << "hour:" << _Src._field_hour;
	_Stream << "}";
	return _Stream;
}



inline _1a9612e81_Time _1a9612e81_Time::_static_method_unix(jule::U64 _8924_sec) {
	return _1a9612e81_Time(_8924_sec);
}



inline _1a9612e81_Time _1a9612e81_Time::_static_method_now(void) {
	return _1a9612e81_Time::_static_method_unix(static_cast<jule::U64>(_1a9612e81_unix()));
}



inline jule::U64 _1a9612e81_Time::_method_unix(void) {
	return (*this)._field_sec;
}



inline jule::Uint _1a9612e81_Time::_method_day(void) {
	return (*this)._method_abs()._field_day;
}



inline jule::Uint _1a9612e81_Time::_method_month(void) {
	return (*this)._method_abs()._field_month;
}



inline jule::Uint _1a9612e81_Time::_method_year(void) {
	return (*this)._method_abs()._field_year;
}



inline jule::Uint _1a9612e81_Time::_method_second(void) {
	return (*this)._method_abs()._field_second;
}



inline jule::Uint _1a9612e81_Time::_method_minute(void) {
	return (*this)._method_abs()._field_minute;
}



inline jule::Uint _1a9612e81_Time::_method_hour(void) {
	return (*this)._method_abs()._field_hour;
}



inline _1a9612e81_AbsTime _1a9612e81_Time::_method_abs(void) {
	jule::U64 _12513_secs = (*this)._field_sec - 951868800LL;
	jule::U64 _12617_days = _12513_secs / 86400LL;
	jule::U64 _12717_rem_secs = _12513_secs % 86400LL;
	if (_12717_rem_secs < 0LL) {
		_12717_rem_secs+=86400LL;
		(_12617_days)--;
	}
	jule::U64 _13317_qc_cycles = _12617_days / 146097LL;
	jule::U64 _13417_rem_days = _12617_days % 146097LL;
	if (_13417_rem_days < 0LL) {
		_13417_rem_days+=146097LL;
		(_13317_qc_cycles)--;
	}
	jule::U64 _14017_c_cycles = _13417_rem_days / 36524LL;
	if (_14017_c_cycles == 4LL) {
		(_14017_c_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14017_c_cycles * 36524LL);
	jule::U64 _14617_q_cycles = _13417_rem_days / 1461LL;
	if (_14617_q_cycles == 25LL) {
		(_14617_q_cycles)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_14617_q_cycles * 1461LL);
	jule::U64 _15217_rem_years = _13417_rem_days / 365LL;
	if (_15217_rem_years == 4LL) {
		(_15217_rem_years)--;
	}
	_13417_rem_days-=static_cast<jule::U64>(_15217_rem_years * 365LL);
	jule::U8 _15813_leap = static_cast<jule::U8>(((((_15217_rem_years == 0LL) && ((_14617_q_cycles > 0LL) || (_14017_c_cycles == 0LL)))) ? (1LLU) : (0LLU)));
	jule::U64 _15917_y_day = ((_13417_rem_days + 31LL) + 28LL) + _15813_leap;
	if (_15917_y_day >= (365LL + _15813_leap)) {
		_15917_y_day-=static_cast<jule::U8>(365LL + _15813_leap);
	}
	jule::Int _16417_months = 0LL;
	for (; _1a9612e81_MDAYS[_16417_months] <= _13417_rem_days; (_16417_months)++) {
		{
			_13417_rem_days-=_1a9612e81_MDAYS[_16417_months];
		}
	_iter_next_4382631888:;
	}
	_iter_end_4382631888:;
	_1a9612e81_AbsTime _16917_t = _1a9612e81_AbsTime();
	_16917_t._field_year=static_cast<jule::U64>((((_15217_rem_years + (4LL * _14617_q_cycles)) + (100LL * _14017_c_cycles)) + (400LL * _13317_qc_cycles)) + 100LL);
	_16917_t._field_month=static_cast<jule::Uint>(static_cast<jule::Uint>(_16417_months + 2LL));
	if (_16917_t._field_month >= 12LL) {
		_16917_t._field_month-=12LL;
		(_16917_t._field_year)++;
	}
	_16917_t._field_month+=1LL;
	_16917_t._field_year+=1900LL;
	_16917_t._field_day=static_cast<jule::U64>(_13417_rem_days + 1LL);
	_16917_t._field_week_day=static_cast<jule::U64>(3LL + _12617_days % 7LL);
	if (_16917_t._field_week_day < 0LL) {
		_16917_t._field_week_day+=7LL;
	}
	_16917_t._field_year_day=_15917_y_day;
	_16917_t._field_hour=static_cast<jule::U64>(_12717_rem_secs / 3600LL);
	_16917_t._field_minute=static_cast<jule::U64>(_12717_rem_secs / 60LL % 60LL);
	_16917_t._field_second=static_cast<jule::U64>(_12717_rem_secs % 60LL);
	return _16917_t;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a9612e81_Time &_Src) {
	_Stream << "Time{";
	_Stream << "sec:" << _Src._field_sec;
	_Stream << "}";
	return _Stream;
}



inline jule::I64 _1a9612e81_Duration::_static_method_nanoseconds(jule::I64 _22231_d) {
	return static_cast<jule::I64>(_22231_d * 1LL);
}



inline jule::I64 _1a9612e81_Duration::_static_method_microseconds(jule::I64 _22732_d) {
	return static_cast<jule::I64>(_22732_d * 1000LL);
}



inline jule::I64 _1a9612e81_Duration::_static_method_milliseconds(jule::I64 _23232_d) {
	return static_cast<jule::I64>(_23232_d * 1000000LL);
}



inline jule::I64 _1a9612e81_Duration::_static_method_seconds(jule::I64 _23727_d) {
	return static_cast<jule::I64>(_23727_d * 1000000000LL);
}



inline jule::I64 _1a9612e81_Duration::_static_method_minutes(jule::I64 _24227_d) {
	return static_cast<jule::I64>(_24227_d * 60000000000LL);
}



inline jule::I64 _1a9612e81_Duration::_static_method_hours(jule::I64 _24725_d) {
	return static_cast<jule::I64>(_24725_d * 3600000000000LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a9612e81_Duration &_Src) {
	_Stream << "Duration{";
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a70a995d_ScopeOptimizer> _1a70a995d_ScopeOptimizer::_static_method_new(jule::Ptr<_1a6bc3e29_Scope> _2927_scope) {
	return jule::new_struct<_1a70a995d_ScopeOptimizer>(new( std::nothrow ) _1a70a995d_ScopeOptimizer(jule::Int(),_2927_scope));
}



inline void _1a70a995d_ScopeOptimizer::_method_set_current_stmt(jule::Any _3539_stmt) {
	(*((*this)._field_scope))._field_stmts[(*this)._field_i]=_3539_stmt;
}



inline jule::Any _1a70a995d_ScopeOptimizer::_method_current_stmt(void) {
	return (*((*this)._field_scope))._field_stmts[(*this)._field_i];
}



inline void _1a70a995d_ScopeOptimizer::_method_optimize_data(jule::Ptr<_1a8b431d7_Data> _4336_d) {
	{
		auto &_match_expr{ (*(_4336_d))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_FnCallExprModel>>()) {
			_case_begin_4408601824:;
			{
				jule::Ptr<_1a69b8d2e_FnCallExprModel> _4621_m = (*(_4336_d))._field_model.operator jule::Ptr<_1a69b8d2e_FnCallExprModel>();
				if (_211b70ab3_PRODUCTION) {
					if ((!((*((*(_4621_m))._field_func))._method_is_builtin())) && _1a70a995d_is_std_package((*((*((*((*(_4621_m))._field_func))._field_decl))._field_token._field_file))._method_path(),jule::Str("debug", 5))) {
						(*((*this)._field_scope))._field_stmts[(*this)._field_i]=jule::Any(nullptr);
					}
				}
			}
		}
		_match_end_4408601728:;
	}
}



inline void _1a70a995d_ScopeOptimizer::_method_optimize_conditional(jule::Ptr<_1a6bc3e29_Conditional> _5643_c) {
	if ((!(_211b70ab3_OPT_COND))) {
		return;
	}
	jule::Bool _6117_const_case = false;
	{
		auto &expr = (*(_5643_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_4408614480:;
		if (it != expr.end()) {
			jule::Int _1a70a995d_i = it - expr.begin();
			jule::Ptr<_1a6bc3e29_If> _1a70a995d_elif = *it;
			{
				if ((!(_1a70a995d_is_constant_valid_conditional_case(_1a70a995d_elif)))) {
					goto _iter_next_4408614480;
				}
				_6117_const_case=true;
				(*(_5643_c))._field_elifs=(*(_5643_c))._field_elifs.slice(0LL,_1a70a995d_i + 1LL);
				(*(_1a70a995d_elif))._field_expr=jule::Any(nullptr);
				(*(_5643_c))._field_default=nullptr;
				goto _iter_end_4408614480;
			}
			_iter_next_4408614480:;
			++it;
			_1a70a995d_i++;
			goto _iter_begin_4408614480;
		}
		_iter_end_4408614480:;
	}
	jule::Ptr<_1a6bc3e29_If>* _7617_i = (&((*(_5643_c))._field_elifs[0LL]));
	jule::Ptr<_1a6bc3e29_If>* _7713_end = (&((*(_5643_c))._field_elifs[(*(_5643_c))._field_elifs.len() - 1LL]));
	for (; _7617_i <= _7713_end; (_7617_i)++) {
		{
			{
				if ((!(_1a70a995d_is_unreachable_conditional_case((*(_7617_i)))))) {
					(_7617_i)++;
					goto _iter_next_4408612432;
				}
				(*(_7617_i))=nullptr;
			}
		}
	_iter_next_4408612432:;
	}
	_iter_end_4408612432:;
	if ((*(_5643_c))._field_elifs.len() == 0LL) {
		return;
	}
	if ((!(_6117_const_case))) {
		return;
	}
	jule::Int _9717_only = -1LL;
	{
		auto &expr = (*(_5643_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_4408631760:;
		if (it != expr.end()) {
			jule::Int _1a70a995d_j = it - expr.begin();
			jule::Ptr<_1a6bc3e29_If> &_1a70a995d_elif = *it;
			{
				if (_1a70a995d_elif != nullptr) {
					if (_9717_only != -1LL) {
						return;
					}
					_9717_only=_1a70a995d_j;
				}
			}
			_iter_next_4408631760:;
			++it;
			_1a70a995d_j++;
			goto _iter_begin_4408631760;
		}
		_iter_end_4408631760:;
	}
	if (_9717_only != -1LL) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_5643_c))._field_elifs[_9717_only]))._field_scope));
	}
}



inline void _1a70a995d_ScopeOptimizer::_method_optimize_match(jule::Ptr<_1a6bc3e29_Match> _11437_m) {
	if ((!(_211b70ab3_OPT_COND))) {
		return;
	}
	jule::Bool _11917_const_case = false;
	{
		auto &expr = (*(_11437_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_4408641872:;
		if (it != expr.end()) {
			jule::Int _1a70a995d_i = it - expr.begin();
			jule::Ptr<_1a6bc3e29_Case> _1a70a995d_case = *it;
			{
				if ((!(_1a70a995d_is_constant_valid_match_case(_1a70a995d_case)))) {
					goto _iter_next_4408641872;
				}
				_11917_const_case=true;
				(*(_11437_m))._field_cases=(*(_11437_m))._field_cases.slice(0LL,_1a70a995d_i + 1LL);
				(*(_1a70a995d_case))._field_exprs=nullptr;
				(*(_11437_m))._field_default=nullptr;
				goto _iter_end_4408641872;
			}
			_iter_next_4408641872:;
			++it;
			_1a70a995d_i++;
			goto _iter_begin_4408641872;
		}
		_iter_end_4408641872:;
	}
	if ((*(_11437_m))._field_cases.len() == 0LL) {
		return;
	}
	jule::Ptr<_1a6bc3e29_Case>* _13817_i = (&((*(_11437_m))._field_cases[0LL]));
	jule::Ptr<_1a6bc3e29_Case>* _13913_end = (&((*(_11437_m))._field_cases[(*(_11437_m))._field_cases.len() - 1LL]));
	for (; _13817_i <= _13913_end; (_13817_i)++) {
		{
			{
				if ((!(_1a70a995d_is_unreachable_match_case((*(_13817_i)))))) {
					(_13817_i)++;
					goto _iter_next_4408639680;
				}
				(*(_13817_i))=nullptr;
			}
		}
	_iter_next_4408639680:;
	}
	_iter_end_4408639680:;
	if ((!(_11917_const_case))) {
		return;
	}
	jule::Int _15517_only = -1LL;
	{
		auto &expr = (*(_11437_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_4408658992:;
		if (it != expr.end()) {
			jule::Int _1a70a995d_j = it - expr.begin();
			jule::Ptr<_1a6bc3e29_Case> &_1a70a995d_case = *it;
			{
				if (_1a70a995d_case != nullptr) {
					if (_15517_only != -1LL) {
						return;
					}
					_15517_only=_1a70a995d_j;
				}
			}
			_iter_next_4408658992:;
			++it;
			_1a70a995d_j++;
			goto _iter_begin_4408658992;
		}
		_iter_end_4408658992:;
	}
	if (_15517_only != -1LL) {
		(*this)._method_set_current_stmt(jule::Any((*((*(_11437_m))._field_cases[_15517_only]))._field_scope));
	}
}



inline void _1a70a995d_ScopeOptimizer::_method_optimize_stmt(jule::Any _17236_stmt) {
	{
		auto &_match_expr{ _17236_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Scope>>()) {
			_case_begin_4408667024:;
			{
				(*this)._method_optimize_child(_17236_stmt.operator jule::Ptr<_1a6bc3e29_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
			_case_begin_4408667120:;
			{
				(*this)._method_optimize_data(_17236_stmt.operator jule::Ptr<_1a8b431d7_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Conditional>>()) {
			_case_begin_4408667216:;
			{
				(*this)._method_optimize_conditional(_17236_stmt.operator jule::Ptr<_1a6bc3e29_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Match>>()) {
			_case_begin_4408667488:;
			{
				(*this)._method_optimize_match(_17236_stmt.operator jule::Ptr<_1a6bc3e29_Match>());
			}
		}
		_match_end_4408666864:;
	}
}



inline void _1a70a995d_ScopeOptimizer::_method_optimize_child(jule::Ptr<_1a6bc3e29_Scope> _18137_child) {
	jule::Ptr<_1a70a995d_ScopeOptimizer> _18217_so = _1a70a995d_ScopeOptimizer::_static_method_new(_18137_child);
	(*(_18217_so))._method_optimize();
}



inline void _1a70a995d_ScopeOptimizer::_method_optimize(void) {
	(*this)._field_i=0LL;
	for (; (*this)._field_i < (*((*this)._field_scope))._field_stmts.len(); ((*this)._field_i)++) {
		{
			(*this)._method_optimize_stmt((*this)._method_current_stmt());
		}
	_iter_next_4408673088:;
	}
	_iter_end_4408673088:;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70a995d_ScopeOptimizer &_Src) {
	_Stream << "ScopeOptimizer{";
	_Stream << "i:" << _Src._field_i << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a70a6dab_Optimizer> _1a70a6dab_Optimizer::_static_method_new(jule::Ptr<_1b719bcc6_IR>& _2128_ir) {
	return jule::new_struct<_1a70a6dab_Optimizer>(new( std::nothrow ) _1a70a6dab_Optimizer(_2128_ir));
}



inline void _1a70a6dab_Optimizer::_method_optimize_function(jule::Ptr<_1a691a500_Fn>& _2741_func) {
	if ((*(_2741_func))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_2741_func))._field_instances;
		auto it = expr.begin();
		_iter_begin_4408687824:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_FnIns> _1a70a6dab_ins = *it;
			{
				jule::Ptr<_1a70a995d_ScopeOptimizer> _3321_so = _1a70a995d_ScopeOptimizer::_static_method_new((*(_1a70a6dab_ins))._field_scope);
				(*(_3321_so))._method_optimize();
			}
			_iter_next_4408687824:;
			++it;
			goto _iter_begin_4408687824;
		}
		_iter_end_4408687824:;
	}
}



inline void _1a70a6dab_Optimizer::_method_optimize_struct(jule::Ptr<_1b7905331_Struct>& _3839_s) {
	if ((*(_3839_s))._field_cpp_linked) {
		return;
	}
	{
		auto &expr = (*(_3839_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_4408693440:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_StructIns> _1a70a6dab_ins = *it;
			{
				{
					auto &expr = (*(_1a70a6dab_ins))._field_methods;
					auto it = expr.begin();
					_iter_begin_4408695904:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_Fn> _1a70a6dab_m = *it;
						{
							{
								auto &expr = (*(_1a70a6dab_m))._field_instances;
								auto it = expr.begin();
								_iter_begin_4408697760:;
								if (it != expr.end()) {
									jule::Ptr<_1a691a500_FnIns> _1a70a6dab_mins = *it;
									{
										jule::Ptr<_1a70a995d_ScopeOptimizer> _4629_so = _1a70a995d_ScopeOptimizer::_static_method_new((*(_1a70a6dab_mins))._field_scope);
										(*(_4629_so))._method_optimize();
									}
									_iter_next_4408697760:;
									++it;
									goto _iter_begin_4408697760;
								}
								_iter_end_4408697760:;
							}
						}
						_iter_next_4408695904:;
						++it;
						goto _iter_begin_4408695904;
					}
					_iter_end_4408695904:;
				}
			}
			_iter_next_4408693440:;
			++it;
			goto _iter_begin_4408693440;
		}
		_iter_end_4408693440:;
	}
}



inline void _1a70a6dab_Optimizer::_method_optimize_functions(jule::Ptr<_1a6e9a574_Package>& _5342_p) {
	{
		auto &expr = (*(_5342_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4408698528:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a70a6dab_f = *it;
			{
				{
					auto &expr = (*(_1a70a6dab_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_4408703184:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_Fn> _1a70a6dab_func = *it;
						{
							(*this)._method_optimize_function(_1a70a6dab_func);
						}
						_iter_next_4408703184:;
						++it;
						goto _iter_begin_4408703184;
					}
					_iter_end_4408703184:;
				}
			}
			_iter_next_4408698528:;
			++it;
			goto _iter_begin_4408698528;
		}
		_iter_end_4408698528:;
	}
}



inline void _1a70a6dab_Optimizer::_method_optimize_structs(jule::Ptr<_1a6e9a574_Package>& _6140_p) {
	{
		auto &expr = (*(_6140_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4408706528:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a70a6dab_f = *it;
			{
				{
					auto &expr = (*(_1a70a6dab_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_4408708400:;
					if (it != expr.end()) {
						jule::Ptr<_1b7905331_Struct> _1a70a6dab_s = *it;
						{
							(*this)._method_optimize_struct(_1a70a6dab_s);
						}
						_iter_next_4408708400:;
						++it;
						goto _iter_begin_4408708400;
					}
					_iter_end_4408708400:;
				}
			}
			_iter_next_4408706528:;
			++it;
			goto _iter_begin_4408706528;
		}
		_iter_end_4408706528:;
	}
}



inline void _1a70a6dab_Optimizer::_method_optimize_package(jule::Ptr<_1a6e9a574_Package>& _6940_p) {
	(*this)._method_optimize_functions(_6940_p);
	(*this)._method_optimize_structs(_6940_p);
}



inline void _1a70a6dab_Optimizer::_method_optimize(void) {
	{
		auto &expr = (*((*this)._field_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4408714672:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a70a6dab_u = *it;
			{
				if ((!((*(_1a70a6dab_u))._field_cpp_linked))) {
					(*this)._method_optimize_package((*(_1a70a6dab_u))._field_package);
				}
			}
			_iter_next_4408714672:;
			++it;
			goto _iter_begin_4408714672;
		}
		_iter_end_4408714672:;
	}
	(*this)._method_optimize_package((*((*this)._field_ir))._field_main);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70a6dab_Optimizer &_Src) {
	_Stream << "Optimizer{";
	_Stream << "ir:" << _Src._field_ir;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a70d117c_Flag_0::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1a70d117c_Flag_0::_method_what(void) {
	return (*this)._field__what;
}



inline void _1a70d117c_Flag_0::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1a70d117c_Flag_0::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70d117c_Flag_0 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1a70d117c_Flag_1::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1a70d117c_Flag_1::_method_what(void) {
	return (*this)._field__what;
}



inline void _1a70d117c_Flag_1::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1a70d117c_Flag_1::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70d117c_Flag_1 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1a70d117c_Flag_2::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1a70d117c_Flag_2::_method_what(void) {
	return (*this)._field__what;
}



inline void _1a70d117c_Flag_2::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1a70d117c_Flag_2::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70d117c_Flag_2 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1a70d117c_Flag_3::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1a70d117c_Flag_3::_method_what(void) {
	return (*this)._field__what;
}



inline void _1a70d117c_Flag_3::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1a70d117c_Flag_3::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70d117c_Flag_3 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}

inline jule::Str _1a70d117c_Flag_4::_method_name(void) {
	return (*this)._field__name;
}



inline jule::Str _1a70d117c_Flag_4::_method_what(void) {
	return (*this)._field__what;
}



inline void _1a70d117c_Flag_4::_method_reset(void) {
	(*((*this)._field__data))=(*this)._field__default;
}



inline jule::I32 _1a70d117c_Flag_4::_method_short(void) {
	return (*this)._field__short;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70d117c_Flag_4 &_Src) {
	_Stream << "Flag{";
	_Stream << "_name:" << _Src._field__name << ", ";
	_Stream << "_short:" << _Src._field__short << ", ";
	_Stream << "_default:" << _Src._field__default << ", ";
	_Stream << "_what:" << _Src._field__what << ", ";
	_Stream << "_data:" << _Src._field__data;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a70d117c_FlagSet> _1a70d117c_FlagSet::_static_method_new(void) {
	return jule::new_struct<_1a70d117c_FlagSet>(new( std::nothrow ) _1a70d117c_FlagSet(jule::Slice<jule::Trait<_1a70d117c_CommonFlag>>::alloc(0LL,20LL)));
}



inline jule::Trait<_1a70d117c_CommonFlag> _1a70d117c_FlagSet::_method_find_flag(jule::Str _6732_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_4408787856:;
		if (it != expr.end()) {
			jule::Trait<_1a70d117c_CommonFlag> _1a70d117c_flag = *it;
			{
				if (_1a70d117c_flag.get()._method_name() == _6732_name) {
					return _1a70d117c_flag;
				}
			}
			_iter_next_4408787856:;
			++it;
			goto _iter_begin_4408787856;
		}
		_iter_end_4408787856:;
	}
	return nullptr;
}



inline jule::Trait<_1a70d117c_CommonFlag> _1a70d117c_FlagSet::_method_find_flag_short(jule::I32 _7738_name) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_4408792720:;
		if (it != expr.end()) {
			jule::Trait<_1a70d117c_CommonFlag> _1a70d117c_flag = *it;
			{
				if (_1a70d117c_flag.get()._method_short() == _7738_name) {
					return _1a70d117c_flag;
				}
			}
			_iter_next_4408792720:;
			++it;
			goto _iter_begin_4408792720;
		}
		_iter_end_4408792720:;
	}
	return nullptr;
}



inline jule::Slice<jule::Trait<_1a70d117c_CommonFlag>> _1a70d117c_FlagSet::_method_flags(void) {
	return (*this)._field__flags;
}



inline jule::Exceptional<jule::Slice<jule::Str>> _1a70d117c_FlagSet::_method_parse(jule::Slice<jule::Str> _11128_args) {
	_1a70d117c_ArgParser _11217_ap = _1a70d117c_ArgParser((*this),_11128_args,jule::Slice<jule::Str>(),jule::Int());
	({
		auto except = _11217_ap._method_parse();
		if (!except.ok()) {
			return jule::Exceptional<jule::Slice<jule::Str>>(except.error);
		}
	});
	return jule::Exceptional<jule::Slice<jule::Str>>(jule::Any(),_11217_ap._field_content);
}



inline void _1a70d117c_FlagSet::_method_reset(void) {
	{
		auto &expr = (*this)._field__flags;
		auto it = expr.begin();
		_iter_begin_4408809696:;
		if (it != expr.end()) {
			jule::Trait<_1a70d117c_CommonFlag> &_1a70d117c_f = *it;
			{
				_1a70d117c_f.get()._method_reset();
			}
			_iter_next_4408809696:;
			++it;
			goto _iter_begin_4408809696;
		}
		_iter_end_4408809696:;
	}
}



inline jule::Ptr<_1a70d117c_Flag_4> _1a70d117c_FlagSet::_method_add_flag_common_0(jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	
	if ((*this)._method_find_flag(_12741_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && ((*this)._method_find_flag_short(_12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_1a70d117c_Flag_4> _14417_flag = jule::new_struct<_1a70d117c_Flag_4>(new( std::nothrow ) _1a70d117c_Flag_4(_12741_name,_12752_short,jule::Str(),_12765_what,jule::Ptr<jule::Str>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.__push(_14417_flag);
	return _14417_flag;
}

inline jule::Ptr<_1a70d117c_Flag_3> _1a70d117c_FlagSet::_method_add_flag_common_1(jule::Str _12741_name,jule::I32 _12752_short,jule::Str _12765_what) {
	
	if ((*this)._method_find_flag(_12741_name) != nullptr) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this name: ", 63) + _12741_name + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:137:13"));;
	}
	if ((_12752_short != 0LL) && ((*this)._method_find_flag_short(_12752_short) != nullptr)) {
		jule::panic(jule::Str("std::flag: FlagSet.add[T]: flag is already exist in this short name: ", 69) + static_cast<jule::Str>(_12752_short) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/flag/flag.jule:141:13"));;
	}
	jule::Ptr<_1a70d117c_Flag_3> _14417_flag = jule::new_struct<_1a70d117c_Flag_3>(new( std::nothrow ) _1a70d117c_Flag_3(_12741_name,_12752_short,jule::Bool(),_12765_what,jule::Ptr<jule::Bool>()));
	(*this)._field__flags = jule::alloc_for_append((*this)._field__flags,1);(*this)._field__flags.__push(_14417_flag);
	return _14417_flag;
}





inline void _1a70d117c_FlagSet::_method_add_var_0(jule::Ptr<jule::Str> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_1a70d117c_Flag_4> _17217_flag = (*this)._method_add_flag_common_0(_17146_name,_17157_short,_17170_what);
	(*(_17217_flag))._field__default=(*(_17137_var));
	(*(_17217_flag))._field__data=_17137_var;
}

inline void _1a70d117c_FlagSet::_method_add_var_1(jule::Ptr<jule::Bool> _17137_var,jule::Str _17146_name,jule::I32 _17157_short,jule::Str _17170_what) {
	jule::Ptr<_1a70d117c_Flag_3> _17217_flag = (*this)._method_add_flag_common_1(_17146_name,_17157_short,_17170_what);
	(*(_17217_flag))._field__default=(*(_17137_var));
	(*(_17217_flag))._field__data=_17137_var;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a70d117c_FlagSet &_Src) {
	_Stream << "FlagSet{";
	_Stream << "_flags:" << _Src._field__flags;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_BreakSt &_Src) {
	_Stream << "BreakSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_ContSt &_Src) {
	_Stream << "ContSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_If &_Src) {
	_Stream << "If{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Else &_Src) {
	_Stream << "Else{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Directive &_Src) {
	_Stream << "Directive{";
	_Stream << "tag:" << _Src._field_tag << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_TypeAliasDecl &_Src) {
	_Stream << "TypeAliasDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Case &_Src) {
	_Stream << "Case{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a691a500_ParamIns> _1a691a500_Param::_method_instance(void) {
	return jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(this->self,jule::Ptr<_1a6a19a50_TypeKind>()));
}



inline jule::Bool _1a691a500_Param::_method_is_self(void) {
	return ((*this)._field_ident == jule::Str("&self", 5)) || ((*this)._field_ident == jule::Str("self", 4));
}



inline jule::Bool _1a691a500_Param::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _1a691a500_Param &_Src) {
	_Stream << "Param{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a691a500_Fn::_method_is_void(void) {
	return (*this)._field_result == nullptr;
}



inline jule::Bool _1a691a500_Fn::_method_is_method(void) {
	return (*this)._field_owner != nullptr;
}



inline jule::Bool _1a691a500_Fn::_method_is_entry_point(void) {
	return (*this)._field_ident == jule::Str("main", 4);
}



inline jule::Bool _1a691a500_Fn::_method_is_init(void) {
	return (*this)._field_ident == jule::Str("init", 4);
}



inline jule::Bool _1a691a500_Fn::_method_is_anon(void) {
	return _1b7553d92_is_anon_ident((*this)._field_ident);
}



inline jule::Bool _1a691a500_Fn::_method_any_var(void) {
	return ((*this)._field_result != nullptr) && ((*((*this)._field_result))._field_idents.len() > 0LL);
}



inline jule::Bool _1a691a500_Fn::_method_parameters_uses_generics(void) {
	if ((*this)._field_generics.len() == 0LL) {
		return false;
	}
	{
		auto &expr = (*this)._field_params;
		auto it = expr.begin();
		_iter_begin_4397254048:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Param> &_1a691a500_p = *it;
			{
				if (_1a691a500_parameter_uses_generics(_1a691a500_p,(*this)._field_generics)) {
					return true;
				}
			}
			_iter_next_4397254048:;
			++it;
			goto _iter_begin_4397254048;
		}
		_iter_end_4397254048:;
	}
	return false;
}



inline jule::Bool _1a691a500_Fn::_method_result_uses_generics(void) {
	if ((*this)._method_is_void()) {
		return false;
	} else if (((*((*this)._field_result))._field_kind == nullptr) || ((*((*((*this)._field_result))._field_kind))._field_kind == nullptr)) {
		return false;
	}
	return _1a691a500_kind_uses_generics((*((*((*this)._field_result))._field_kind))._field_kind,(*this)._field_generics);
}



inline jule::Ptr<_1a691a500_FnIns> _1a691a500_Fn::_method_instance_force(void) {
	jule::Ptr<_1a691a500_FnIns> _11217_ins = jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),this->self,jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::new_struct<_1a6bc3e29_Scope>(new( std::nothrow ) _1a6bc3e29_Scope()),_1b6a47496_ReferenceStack::_static_method_new(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::U8(),jule::Bool()));
	if ((*(this->self))._method_is_init()) {
		(*(_11217_ins))._field_refers=_1b6a47496_ReferenceStack::_static_method_new();
	}
	(*(_11217_ins))._field_params=jule::Slice<jule::Ptr<_1a691a500_ParamIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_params.len()));
	{
		auto &expr = (*(this->self))._field_params;
		auto it = expr.begin();
		_iter_begin_4397268672:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Param> _1a691a500_p = *it;
			{
				(*(_11217_ins))._field_params = jule::alloc_for_append((*(_11217_ins))._field_params,1);(*(_11217_ins))._field_params.__push((*(_1a691a500_p))._method_instance());
			}
			_iter_next_4397268672:;
			++it;
			goto _iter_begin_4397268672;
		}
		_iter_end_4397268672:;
	}
	if ((*((*(_11217_ins))._field_decl))._field_result != nullptr) {
		(*(_11217_ins))._field_result=(*((*((*((*(_11217_ins))._field_decl))._field_result))._field_kind))._field_kind;
	}
	return _11217_ins;
}



inline jule::Ptr<_1a691a500_FnIns> _1a691a500_Fn::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	return (*(this->self))._method_instance_force();
}



inline std::tuple<jule::Bool,jule::Int> _1a691a500_Fn::_method_append_instance(jule::Ptr<_1a691a500_FnIns>& _14339_ins) {
	if ((*this)._field_generics.len() == 0LL) {
		if ((*this)._field_instances.len() == 1LL) {
			return std::make_tuple(false,0LL);
		}
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_14339_ins);
		return std::make_tuple(true,-1LL);
	}
	if ((*this)._field_instances.len() == 0LL) {
		(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_14339_ins);
		return std::make_tuple(true,-1LL);
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_4397291296:;
		if (it != expr.end()) {
			jule::Int _1a691a500_j = it - expr.begin();
			jule::Ptr<_1a691a500_FnIns> &_1a691a500_ains = *it;
			{
				if ((*(_1a691a500_ains))._method_same(_14339_ins)) {
					return std::make_tuple(false,_1a691a500_j);
				}
			}
			_iter_next_4397291296:;
			++it;
			_1a691a500_j++;
			goto _iter_begin_4397291296;
		}
		_iter_end_4397291296:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_14339_ins);
	return std::make_tuple(true,-1LL);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a691a500_Fn &_Src) {
	_Stream << "Fn{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params << ", ";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_MatchCase &_Src) {
	_Stream << "MatchCase{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "type_match:" << _Src._field_type_match << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "cases:" << _Src._field_cases << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_UseDecl &_Src) {
	_Stream << "UseDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "full:" << _Src._field_full << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_EnumItemDecl::_method_auto_expr(void) {
	return (*this)._field_expr == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_EnumItemDecl &_Src) {
	_Stream << "EnumItemDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b6a47496_Pass &_Src) {
	_Stream << "Pass{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_EnumDecl::_method_default_typed(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_EnumDecl &_Src) {
	_Stream << "EnumDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1b76b472d_Trait::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1b76b472d_Trait::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _2522_other) {
	jule::Ptr<_1b76b472d_Trait> _2613_trt = (*(_2522_other))._method_trt();
	return this->self == _2613_trt;
}



inline jule::Bool _1b76b472d_Trait::_method_is_builtin(void) {
	return (*this)._field_token._field_id == 0LLU;
}



inline jule::Ptr<_1a691a500_Fn> _1b76b472d_Trait::_method_find_method(jule::Str _3734_ident) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4397779296:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1b76b472d_f = *it;
			{
				if ((*(_1b76b472d_f))._field_ident == _3734_ident) {
					return _1b76b472d_f;
				}
			}
			_iter_next_4397779296:;
			++it;
			goto _iter_begin_4397779296;
		}
		_iter_end_4397779296:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b76b472d_Trait &_Src) {
	_Stream << "Trait{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "implemented:" << _Src._field_implemented;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a6bb9150_EnumItem::_method_auto_expr(void) {
	return (*this)._field_value == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bb9150_EnumItem &_Src) {
	_Stream << "EnumItem{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}



inline jule::Str _1a6bb9150_Enum::_method_to_str(void) {
	return (*this)._field_ident;
}



inline jule::Bool _1a6bb9150_Enum::_method_equals(jule::Ptr<_1a6a19a50_TypeKind> _3522_other) {
	jule::Ptr<_1a6bb9150_Enum> _3613_enm = (*(_3522_other))._method_enm();
	return this->self == _3613_enm;
}



inline jule::Ptr<_1a6bb9150_EnumItem> _1a6bb9150_Enum::_method_find_item(jule::Str _4432_ident) {
	{
		auto &expr = (*this)._field_items;
		auto it = expr.begin();
		_iter_begin_4397791680:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bb9150_EnumItem> _1a6bb9150_item = *it;
			{
				if ((*(_1a6bb9150_item))._field_ident == _4432_ident) {
					return _1a6bb9150_item;
				}
			}
			_iter_next_4397791680:;
			++it;
			goto _iter_begin_4397791680;
		}
		_iter_end_4397791680:;
	}
	return nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bb9150_Enum &_Src) {
	_Stream << "Enum{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "items:" << _Src._field_items << ", ";
	_Stream << "doc:" << _Src._field_doc;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_FieldDecl &_Src) {
	_Stream << "FieldDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_StructDecl &_Src) {
	_Stream << "StructDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_TraitDecl &_Src) {
	_Stream << "TraitDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "methods:" << _Src._field_methods;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Expr &_Src) {
	_Stream << "Expr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_UseExpr &_Src) {
	_Stream << "UseExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_TypeDecl &_Src) {
	_Stream << "TypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_LitExpr::_method_is_nil(void) {
	return (*this)._field_value == jule::Str("nil", 3);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_LitExpr &_Src) {
	_Stream << "LitExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "value:" << _Src._field_value;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_UnsafeExpr &_Src) {
	_Stream << "UnsafeExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_CoExpr &_Src) {
	_Stream << "CoExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_IdentExpr::_method_is_self(void) {
	return (*this)._field_ident == jule::Str("self", 4);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_IdentExpr &_Src) {
	_Stream << "IdentExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b77c370a_AssignInfo &_Src) {
	_Stream << "AssignInfo{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "ok:" << _Src._field_ok;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_UnaryExpr &_Src) {
	_Stream << "UnaryExpr{";
	_Stream << "op:" << _Src._field_op << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_VariadicExpr &_Src) {
	_Stream << "VariadicExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_Assign &_Src) {
	_Stream << "Assign{";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_IdentTypeDecl::_method_is_prim(void) {
	return (*this)._field_token._field_id == 1LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_IdentTypeDecl &_Src) {
	_Stream << "IdentTypeDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "generics:" << _Src._field_generics;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_NsSelectionExpr &_Src) {
	_Stream << "NsSelectionExpr{";
	_Stream << "ns:" << _Src._field_ns << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_SubIdentExpr &_Src) {
	_Stream << "SubIdentExpr{";
	_Stream << "is_self:" << _Src._field_is_self << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_BinopExpr &_Src) {
	_Stream << "BinopExpr{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b7905331_FieldIns> _1b7905331_Field::_method_instance(void) {
	return jule::new_struct<_1b7905331_FieldIns>(new( std::nothrow ) _1b7905331_FieldIns(this->self,(*((*(this->self))._field_kind))._field_kind,jule::Ptr<_1a8b431d7_Data>()));
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7905331_Field &_Src) {
	_Stream << "Field{";
	_Stream << "owner:" << _Src._field_owner << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "default:" << _Src._field_default;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6bc3e29_ScopeLabel &_Src) {
	_Stream << "ScopeLabel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label << ", ";
	_Stream << "pos:" << _Src._field_pos << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "used:" << _Src._field_used;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1b7905331_StructIns> _1b7905331_Struct::_method_instance(void) {
	if (((*(this->self))._field_generics.len() == 0LL) && ((*(this->self))._field_instances.len() == 1LL)) {
		return (*(this->self))._field_instances[0LL];
	}
	jule::Ptr<_1b7905331_StructIns> _6817_ins = jule::new_struct_ptr<_1b7905331_StructIns>(new( std::nothrow ) _1b7905331_StructIns(jule::Bool(),this->self,jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1b7905331_FieldIns>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_fields.len())),jule::Slice<jule::Ptr<_1a691a500_Fn>>::alloc(0LL,static_cast<jule::I64>((*(this->self))._field_methods.len())),jule::Bool(),_1b6a47496_ReferenceStack::_static_method_new()));
	{
		auto &expr = (*(this->self))._field_fields;
		auto it = expr.begin();
		_iter_begin_4397120224:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Field> _1b7905331_f = *it;
			{
				(*(_6817_ins))._field_fields = jule::alloc_for_append((*(_6817_ins))._field_fields,1);(*(_6817_ins))._field_fields.__push((*(_1b7905331_f))._method_instance());
				if (((*((*(_1b7905331_f))._field_kind))._field_kind != nullptr) && (*((*((*(_1b7905331_f))._field_kind))._field_kind))._method_mutable()) {
					(*(_6817_ins))._field_mutable=true;
				}
			}
			_iter_next_4397120224:;
			++it;
			goto _iter_begin_4397120224;
		}
		_iter_end_4397120224:;
	}
	{
		auto &expr = (*(this->self))._field_methods;
		auto it = expr.begin();
		_iter_begin_4397120864:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1b7905331_f = *it;
			{
				jule::Ptr<_1a691a500_Fn> _8321_fins = jule::new_struct_ptr<_1a691a500_Fn>(new( std::nothrow ) _1a691a500_Fn((*(_1b7905331_f))._field_sema,(*(_1b7905331_f))._field_token,(*(_1b7905331_f))._field_global,(*(_1b7905331_f))._field_unsafety,(*(_1b7905331_f))._field_public,(*(_1b7905331_f))._field_cpp_linked,(*(_1b7905331_f))._field_statically,(*(_1b7905331_f))._field_exceptional,(*(_1b7905331_f))._field_ident,(*(_1b7905331_f))._field_directives,(*(_1b7905331_f))._field_doc,(*(_1b7905331_f))._field_scope,(*(_1b7905331_f))._field_generics,(*(_1b7905331_f))._field_result,(*(_1b7905331_f))._field_params,(*(_1b7905331_f))._field_owner,nullptr));
				(*(_6817_ins))._field_methods = jule::alloc_for_append((*(_6817_ins))._field_methods,1);(*(_6817_ins))._field_methods.__push(_8321_fins);
			}
			_iter_next_4397120864:;
			++it;
			goto _iter_begin_4397120864;
		}
		_iter_end_4397120864:;
	}
	return _6817_ins;
}



inline jule::Ptr<_1b7905331_StructIns> _1b7905331_Struct::_method_append_instance(jule::Ptr<_1b7905331_StructIns>& _11039_ins) {
	if (((*this)._field_generics.len() == 0LL) && ((*this)._field_instances.len() == 1LL)) {
		return (*this)._field_instances[0LL];
	}
	{
		auto &expr = (*this)._field_instances;
		auto it = expr.begin();
		_iter_begin_4397142624:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_StructIns> _1b7905331_ains = *it;
			{
				if ((*(_1b7905331_ains))._method_same(_11039_ins)) {
					return _1b7905331_ains;
				}
			}
			_iter_next_4397142624:;
			++it;
			goto _iter_begin_4397142624;
		}
		_iter_end_4397142624:;
	}
	(*this)._field_instances = jule::alloc_for_append((*this)._field_instances,1);(*this)._field_instances.__push(_11039_ins);
	return nullptr;
}



inline jule::Ptr<_1a691a500_Fn> _1b7905331_Struct::_method_find_method(jule::Str _12834_ident,jule::Bool _12846_statically) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4397149728:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1b7905331_f = *it;
			{
				if (((*(_1b7905331_f))._field_statically == _12846_statically) && ((*(_1b7905331_f))._field_ident == _12834_ident)) {
					return _1b7905331_f;
				}
			}
			_iter_next_4397149728:;
			++it;
			goto _iter_begin_4397149728;
		}
		_iter_end_4397149728:;
	}
	return nullptr;
}



inline jule::Ptr<_1a7003e4b_Var> _1b7905331_Struct::_method_find_static(jule::Str _13934_ident) {
	{
		auto &expr = (*this)._field_statics;
		auto it = expr.begin();
		_iter_begin_4397154832:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> _1b7905331_v = *it;
			{
				if ((*(_1b7905331_v))._field_ident == _13934_ident) {
					return _1b7905331_v;
				}
			}
			_iter_next_4397154832:;
			++it;
			goto _iter_begin_4397154832;
		}
		_iter_end_4397154832:;
	}
	return nullptr;
}



inline jule::Ptr<_1b7905331_Field> _1b7905331_Struct::_method_find_field(jule::Str _15033_ident) {
	{
		auto &expr = (*this)._field_fields;
		auto it = expr.begin();
		_iter_begin_4397159136:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Field> _1b7905331_f = *it;
			{
				if ((*(_1b7905331_f))._field_ident == _15033_ident) {
					return _1b7905331_f;
				}
			}
			_iter_next_4397159136:;
			++it;
			goto _iter_begin_4397159136;
		}
		_iter_end_4397159136:;
	}
	return nullptr;
}



inline jule::Bool _1b7905331_Struct::_method_is_implements(jule::Ptr<_1b76b472d_Trait> _16032_t) {
	{
		auto &expr = (*this)._field_implements;
		auto it = expr.begin();
		_iter_begin_4397163440:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> &_1b7905331_it = *it;
			{
				if (_16032_t == _1b7905331_it) {
					return true;
				}
			}
			_iter_next_4397163440:;
			++it;
			goto _iter_begin_4397163440;
		}
		_iter_end_4397163440:;
	}
	return false;
}



inline jule::Bool _1b7905331_Struct::_method_is_derives(jule::Str _17029_ident) {
	{
		auto &expr = (*this)._field_directives;
		auto it = expr.begin();
		_iter_begin_4397164288:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> &_1b7905331_d = *it;
			{
				if ((*(_1b7905331_d))._field_tag._field_kind == jule::Str("derive", 6)) {
					if (((*(_1b7905331_d))._field_args.len() == 1LL) && ((*(_1b7905331_d))._field_args[0LL]._field_kind == _17029_ident)) {
						return true;
					}
				}
			}
			_iter_next_4397164288:;
			++it;
			goto _iter_begin_4397164288;
		}
		_iter_end_4397164288:;
	}
	return false;
}



inline jule::Bool _1b7905331_Struct::_method_is_uses(jule::Ptr<_1b7905331_Struct> _18226_s) {
	{
		auto &expr = (*this)._field_uses;
		auto it = expr.begin();
		_iter_begin_4397174208:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> &_1b7905331_u = *it;
			{
				while (_18226_s == _1b7905331_u) {
					{
						return true;
					}
				_iter_next_4397175488:;
				}
				_iter_end_4397175488:;
			}
			_iter_next_4397174208:;
			++it;
			goto _iter_begin_4397174208;
		}
		_iter_end_4397174208:;
	}
	return false;
}



inline jule::Bool _1b7905331_Struct::_method_has_ref_accessible(void) {
	{
		auto &expr = (*this)._field_methods;
		auto it = expr.begin();
		_iter_begin_4397175168:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> &_1b7905331_m = *it;
			{
				if (((*(_1b7905331_m))._field_params.len() > 0LL) && (*((*(_1b7905331_m))._field_params[0LL]))._method_is_ref()) {
					return true;
				}
			}
			_iter_next_4397175168:;
			++it;
			goto _iter_begin_4397175168;
		}
		_iter_end_4397175168:;
	}
	return false;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7905331_Struct &_Src) {
	_Stream << "Struct{";
	_Stream << "sema:" << _Src._field_sema << ", ";
	_Stream << "depends:" << _Src._field_depends << ", ";
	_Stream << "uses:" << _Src._field_uses << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "fields:" << _Src._field_fields << ", ";
	_Stream << "methods:" << _Src._field_methods << ", ";
	_Stream << "statics:" << _Src._field_statics << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "implements:" << _Src._field_implements << ", ";
	_Stream << "instances:" << _Src._field_instances;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_FnCallExpr::_method_unhandled(void) {
	return (*this)._field_exception == nullptr;
}



inline jule::Bool _1b7509a90_FnCallExpr::_method_ignored(void) {
	return ((*this)._field_exception != nullptr) && (*((*this)._field_exception))._field_deferred;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_FnCallExpr &_Src) {
	_Stream << "FnCallExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "exception:" << _Src._field_exception;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_FieldExprPair::_method_is_targeted(void) {
	return (*this)._field_field._field_id != 0LLU;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_FieldExprPair &_Src) {
	_Stream << "FieldExprPair{";
	_Stream << "field:" << _Src._field_field << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a6e9a574_ImportInfo::_method_find_package(jule::Str ) {
	return nullptr;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a6e9a574_ImportInfo::_method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)> ) {
	return nullptr;
}



inline jule::Ptr<_1a7003e4b_Var> _1a6e9a574_ImportInfo::_method_find_var(jule::Str _16431_ident,jule::Bool _16443_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_16431_ident)))) {
		return nullptr;
	}
	return _1a6e9a574_find_var_in_package((*((*this)._field_package))._field_files,_16431_ident,false);
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a6e9a574_ImportInfo::_method_find_type_alias(jule::Str _17738_ident,jule::Bool _17750_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_17738_ident)))) {
		return nullptr;
	}
	return _1a6e9a574_find_type_alias_in_package((*((*this)._field_package))._field_files,_17738_ident,false);
}



inline jule::Ptr<_1b7905331_Struct> _1a6e9a574_ImportInfo::_method_find_struct(jule::Str _19034_ident,jule::Bool _19046_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_19034_ident)))) {
		return nullptr;
	}
	return _1a6e9a574_find_struct_in_package((*((*this)._field_package))._field_files,_19034_ident,false);
}



inline jule::Ptr<_1a691a500_Fn> _1a6e9a574_ImportInfo::_method_find_fn(jule::Str _20330_ident,jule::Bool _20342_cpp_linked) {
	if ((!((*this)._method_is_lookupable(_20330_ident)))) {
		return nullptr;
	}
	return _1a6e9a574_find_fn_in_package((*((*this)._field_package))._field_files,_20330_ident,false);
}



inline jule::Ptr<_1b76b472d_Trait> _1a6e9a574_ImportInfo::_method_find_trait(jule::Str _21533_ident) {
	if ((!((*this)._method_is_lookupable(_21533_ident)))) {
		return nullptr;
	}
	return _1a6e9a574_find_trait_in_package((*((*this)._field_package))._field_files,_21533_ident);
}



inline jule::Ptr<_1a6bb9150_Enum> _1a6e9a574_ImportInfo::_method_find_enum(jule::Str _22732_ident) {
	if ((!((*this)._method_is_lookupable(_22732_ident)))) {
		return nullptr;
	}
	return _1a6e9a574_find_enum_in_package((*((*this)._field_package))._field_files,_22732_ident);
}



inline jule::Bool _1a6e9a574_ImportInfo::_method_is_lookupable(jule::Str _23728_ident) {
	if ((*this)._field_cpp_linked) {
		return false;
	}
	if ((!((*this)._field_import_all))) {
		if (((*this)._field_alias.len() != 0LL) || (*this)._method_exist_ident(jule::Str("self", 4))) {
			return true;
		}
		if ((*this)._field_selected.len() > 0LL) {
			if ((!((*this)._method_exist_ident(_23728_ident)))) {
				return false;
			}
		}
	}
	return true;
}



inline jule::Bool _1a6e9a574_ImportInfo::_method_exist_ident(jule::Str _25726_ident) {
	{
		auto &expr = (*this)._field_selected;
		auto it = expr.begin();
		_iter_begin_4399189440:;
		if (it != expr.end()) {
			_1b7553d92_Token &_1a6e9a574_sident = *it;
			{
				if (_1a6e9a574_sident._field_kind == _25726_ident) {
					return true;
				}
			}
			_iter_next_4399189440:;
			++it;
			goto _iter_begin_4399189440;
		}
		_iter_end_4399189440:;
	}
	return false;
}



inline jule::Bool _1a6e9a574_ImportInfo::_method_is_accessible_via_selection(void) {
	return ((*this)._field_import_all || ((*this)._field_selected.len() == 0LL)) || (*this)._method_exist_ident(jule::Str("self", 4));
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6e9a574_ImportInfo &_Src) {
	_Stream << "ImportInfo{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "path:" << _Src._field_path << ", ";
	_Stream << "link_path:" << _Src._field_link_path << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "alias:" << _Src._field_alias << ", ";
	_Stream << "duplicate:" << _Src._field_duplicate << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "std:" << _Src._field_std << ", ";
	_Stream << "import_all:" << _Src._field_import_all << ", ";
	_Stream << "selected:" << _Src._field_selected << ", ";
	_Stream << "package:" << _Src._field_package << ", ";
	_Stream << "mod_id:" << _Src._field_mod_id;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_Node::_method_is_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_EnumDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_FnDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_StructDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_TraitDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_TypeAliasDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_FieldDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_UseDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_VarDecl>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_TypeDecl>>()) {
			_case_begin_4390901136:;
			{
				return true;
			}
		}
		else {
			_case_begin_4390899664:;
			{
				return false;
			}
		}
		_match_end_4390899584:;
	}
}



inline jule::Bool _1b7509a90_Node::_method_is_comment(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_Comment>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_CommentGroup>>()) {
			_case_begin_4390917280:;
			{
				return true;
			}
		}
		else {
			_case_begin_4390915808:;
			{
				return false;
			}
		}
		_match_end_4390915728:;
	}
}



inline jule::Bool _1b7509a90_Node::_method_is_directive(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_Directive>>()) {
			_case_begin_4390920672:;
			{
				return true;
			}
		}
		else {
			_case_begin_4390919200:;
			{
				return false;
			}
		}
		_match_end_4390919120:;
	}
}



inline jule::Bool _1b7509a90_Node::_method_is_impl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_Impl>>()) {
			_case_begin_4390923680:;
			{
				return true;
			}
		}
		else {
			_case_begin_4390922208:;
			{
				return false;
			}
		}
		_match_end_4390922128:;
	}
}



inline jule::Bool _1b7509a90_Node::_method_is_use_decl(void) {
	{
		auto &_match_expr{ (*this)._field_data };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_UseDecl>>()) {
			_case_begin_4390926688:;
			{
				return true;
			}
		}
		else {
			_case_begin_4390925216:;
			{
				return false;
			}
		}
		_match_end_4390925136:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Node &_Src) {
	_Stream << "Node{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "data:" << _Src._field_data;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BinopExprModel &_Src) {
	_Stream << "BinopExprModel{";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_UnaryExprModel &_Src) {
	_Stream << "UnaryExprModel{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1a7003e4b_Var::_method_is_initialized(void) {
	return (*this)._field_value != nullptr;
}



inline jule::Bool _1a7003e4b_Var::_method_is_type_inferred(void) {
	return ((*this)._field_kind == nullptr) || ((*((*this)._field_kind))._field_decl == nullptr);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a7003e4b_Var &_Src) {
	_Stream << "Var{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "value:" << _Src._field_value << ", ";
	_Stream << "references:" << _Src._field_references << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "iter_relation:" << _Src._field_iter_relation << ", ";
	_Stream << "depends:" << _Src._field_depends;
	_Stream << "}";
	return _Stream;
}



inline void _1a700327a_TypeCompatibilityChecker::_method_push_err(jule::Str _13527_fmt,jule::Slice<jule::Any> _13540_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_13527_fmt,_13540_args);
}



inline jule::Bool _1a700327a_TypeCompatibilityChecker::_method_check_trait(void) {
	jule::Bool _13932_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_13932_ok = true;
		return _13932_ok;
	}
	jule::Ptr<_1b76b472d_Trait> _14413_trt = (*((*this)._field_dest))._method_trt();
	jule::Bool _14517_ref = false;
	{
		
		if ((*((*this)._field_src))._method_sptr() != nullptr) {
			_case_begin_4400600768:;
			{
				_14517_ref=true;
				(*this)._field_src=(*((*((*this)._field_src))._method_sptr()))._field_elem;
				if ((*((*this)._field_src))._method_strct() == nullptr) {
					_13932_ok = false;
					return _13932_ok;
				}
				goto _case_begin_4400600960;
			}
		}
		else if ((*((*this)._field_src))._method_strct() != nullptr) {
			_case_begin_4400600960:;
			{
				jule::Ptr<_1b7905331_StructIns> _15617_s = (*((*this)._field_src))._method_strct();
				if ((!((*((*(_15617_s))._field_decl))._method_is_implements(_14413_trt)))) {
					_13932_ok = false;
					return _13932_ok;
				}
				if ((!(_14517_ref)) && _1a700327a_trait_has_reference_receiver(_14413_trt)) {
					(*this)._method_push_err(jule::Str("trait has reference receiver parameter used method, cannot assign non-reference instance", 88),jule::Slice<jule::Any>());
					_13932_ok = false;
					return _13932_ok;
				}
				_13932_ok = true;
				return _13932_ok;
			}
		}
		else if ((*((*this)._field_src))._method_trt() != nullptr) {
			_case_begin_4400601056:;
			{
				_13932_ok = _14413_trt == (*((*this)._field_src))._method_trt();
				return _13932_ok;
			}
		}
		else {
			_case_begin_4400599296:;
			{
				_13932_ok = false;
				return _13932_ok;
			}
		}
		_match_end_4400599184:;
	}
}



inline jule::Bool _1a700327a_TypeCompatibilityChecker::_method_check_ptr(void) {
	jule::Bool _17630_ok = jule::Bool();
	if ((*((*this)._field_src))._method_is_nil()) {
		_17630_ok = true;
		return _17630_ok;
	}
	jule::Ptr<_1a6a19a50_Ptr> _18117_dest = (*((*this)._field_dest))._method_ptr();
	if ((*(_18117_dest))._method_is_unsafe()) {
		_17630_ok = true;
		return _17630_ok;
	}
	_17630_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _17630_ok;
}



inline jule::Bool _1a700327a_TypeCompatibilityChecker::_method_check_prim(void) {
	jule::Bool _19031_ok = jule::Bool();
	if ((!((*((*this)._field_dest))._field_variadic))) {
		jule::Ptr<_1a6a19a50_Prim> _19217_prim = (*((*this)._field_dest))._method_prim();
		if ((_19217_prim != nullptr) && (*(_19217_prim))._method_is_any()) {
			_19031_ok = true;
			return _19031_ok;
		}
	}
	_19031_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
	return _19031_ok;
}



inline jule::Bool _1a700327a_TypeCompatibilityChecker::_method_check(void) {
	jule::Bool _20026_ok = jule::Bool();
	if ((*((*this)._field_dest))._method_ptr() != nullptr) {
		_20026_ok = (*this)._method_check_ptr();
		return _20026_ok;
	}
	if ((*((*this)._field_dest))._method_nil_compatible()) {
		if ((*((*this)._field_src))._method_is_nil()) {
			_20026_ok = true;
			return _20026_ok;
		}
	}
	{
		
		if ((*((*this)._field_dest))._method_prim() != nullptr) {
			_case_begin_4400637088:;
			{
				_20026_ok = (*this)._method_check_prim();
				return _20026_ok;
			}
		}
		else if ((*((*this)._field_dest))._method_trt() != nullptr) {
			_case_begin_4400637184:;
			{
				_20026_ok = (*this)._method_check_trait();
				return _20026_ok;
			}
		}
		else {
			_case_begin_4400635744:;
			{
				_20026_ok = (*((*this)._field_dest))._method_equals((*this)._field_src);
				return _20026_ok;
			}
		}
		_match_end_4400635504:;
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1a700327a_TypeCompatibilityChecker &_Src) {
	_Stream << "TypeCompatibilityChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "src:" << _Src._field_src << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1a700327a_AssignTypeChecker::_method_push_err(jule::Str _22727_fmt,jule::Slice<jule::Any> _22740_args) {
	(*((*this)._field_s))._method_push_err((*this)._field_error_token,_22727_fmt,_22740_args);
}



inline jule::Bool _1a700327a_AssignTypeChecker::_method_check_validity(void) {
	jule::Bool _23217_valid = true;
	{
		
		if ((*((*((*this)._field_d))._field_kind))._method_fnc() != nullptr) {
			_case_begin_4400647968:;
			{
				jule::Ptr<_1a691a500_FnIns> _23617_f = (*((*((*this)._field_d))._field_kind))._method_fnc();
				{
					
					if ((*(_23617_f))._method_is_builtin()) {
						_case_begin_4400652816:;
						{
							(*this)._method_push_err(jule::Str("builtin define cannot use as anonymous function", 47),jule::Slice<jule::Any>());
							_23217_valid=false;
						}
					}
					else if ((*((*(_23617_f))._field_decl))._field_cpp_linked) {
						_case_begin_4400652928:;
						{
							(*this)._method_push_err(jule::Str("cpp-linked functions cannot use as anonymous function", 53),jule::Slice<jule::Any>());
							_23217_valid=false;
						}
					}
					else if ((*((*(_23617_f))._field_decl))._method_is_method()) {
						_case_begin_4400653040:;
						{
							(*this)._method_push_err(jule::Str("methods cannot use as anonymous function", 40),jule::Slice<jule::Any>());
							_23217_valid=false;
						}
					}
					else if ((*((*(_23617_f))._field_decl))._field_generics.len() > 0LL) {
						_case_begin_4400653152:;
						{
							(*this)._method_push_err(jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
							_23217_valid=false;
						}
					}
					_match_end_4400652624:;
				}
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_tup() != nullptr) {
			_case_begin_4400648080:;
			{
				(*this)._method_push_err(jule::Str("tuples cannot assign to single define in same time", 50),jule::Slice<jule::Any>());
				_23217_valid=false;
			}
		}
		_match_end_4400647808:;
	}
	return _23217_valid;
}



inline jule::Bool _1a700327a_AssignTypeChecker::_method_check_const(void) {
	if ((((!((*((*this)._field_d))._method_is_const())) || ((*((*this)._field_dest))._method_prim() == nullptr)) || ((*((*((*this)._field_d))._field_kind))._method_prim() == nullptr)) || (!(_1a9133243_is_num((*((*((*((*this)._field_d))._field_kind))._method_prim()))._field_kind)))) {
		return false;
	}
	jule::Str _27113_kind = (*((*((*this)._field_dest))._method_prim()))._field_kind;
	{
		
		if (_1a9133243_is_float(_27113_kind)) {
			_case_begin_4400678864:;
			{
				if ((!(_1a700327a_float_assignable(_27113_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else if (_1a9133243_is_int(_27113_kind)) {
			_case_begin_4400678960:;
			{
				if ((!(_1a700327a_int_assignable(_27113_kind,(*this)._field_d)))) {
					(*this)._method_push_err(jule::Str("overflow the limit of data-type", 31),jule::Slice<jule::Any>());
					return false;
				}
			}
		}
		else {
			_case_begin_4400677264:;
			{
				return false;
			}
		}
		_match_end_4400677024:;
	}
	return true;
}



inline jule::Bool _1a700327a_AssignTypeChecker::_method_is_prim(void) {
	if ((*((*this)._field_dest))._field_variadic || (*((*((*this)._field_d))._field_kind))._field_variadic) {
		return false;
	}
	if ((*((*this)._field_dest))._method_cpp_linked() || (*((*((*this)._field_d))._field_kind))._method_cpp_linked()) {
		return false;
	}
	return ((*((*this)._field_dest))._method_prim() != nullptr) && ((*((*((*this)._field_d))._field_kind))._method_prim() != nullptr);
}



inline jule::Bool _1a700327a_AssignTypeChecker::_method_check(void) {
	{
		
		if ((*this)._field_d == nullptr) {
			_case_begin_4400695264:;
			{
				return false;
			}
		}
		else if ((!((*this)._method_check_validity()))) {
			_case_begin_4400695376:;
			{
				return false;
			}
		}
		else if ((*this)._method_check_const()) {
			_case_begin_4400695488:;
			{
				return true;
			}
		}
		else if ((*((*((*this)._field_d))._field_kind))._method_enm() != nullptr) {
			_case_begin_4400695600:;
			{
				jule::Ptr<_1a6a19a50_TypeKind> _32021_dkind = (*this)._field_dest;
				if ((*((*this)._field_dest))._method_enm() != nullptr) {
					_32021_dkind=(*((*((*((*this)._field_dest))._method_enm()))._field_kind))._field_kind;
				} else if ((*((*this)._field_dest))._method_prim() == nullptr) {
					goto _match_end_4400694992;
				}
				if (_1b6dd79e0_types_are_compatible((*((*((*((*((*((*((*this)._field_d))._field_kind))._method_enm()))._field_kind))._field_kind))._method_prim()))._field_kind,(*((*(_32021_dkind))._method_prim()))._field_kind)) {
					return true;
				}
			}
		}
		else if ((*this)._method_is_prim()) {
			_case_begin_4400695712:;
			{
				jule::Ptr<_1a6a19a50_Prim> _33217_dest = (*((*this)._field_dest))._method_prim();
				if ((*(_33217_dest))._method_is_any()) {
					return true;
				}
				jule::Ptr<_1a6a19a50_Prim> _33621_src = (*((*((*this)._field_d))._field_kind))._method_prim();
				if (_1b6dd79e0_types_are_compatible((*(_33217_dest))._field_kind,(*(_33621_src))._field_kind)) {
					return true;
				}
			}
		}
		_match_end_4400694992:;
	}
	return (*((*this)._field_s))._method_check_type_compatibility((*this)._field_dest,(*((*this)._field_d))._field_kind,(*this)._field_error_token);
}







std::ostream &operator<<(std::ostream &_Stream, const _1a700327a_AssignTypeChecker &_Src) {
	_Stream << "AssignTypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "dest:" << _Src._field_dest << ", ";
	_Stream << "d:" << _Src._field_d << ", ";
	_Stream << "error_token:" << _Src._field_error_token;
	_Stream << "}";
	return _Stream;
}



inline void _1a700327a_DynamicTypeAnnotation::_method_push_generic(jule::Ptr<_1a6a19a50_TypeKind>& _35536_k,jule::Int _35550_i) {
	(*((*this)._field_f))._field_generics[_35550_i]=_35536_k;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_prim(jule::Ptr<_1a6a19a50_TypeKind>& _35944_k) {
	jule::Bool _35960_ok = jule::Bool();
	jule::Str _36013_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_4400732304:;
		if (it != expr.end()) {
			jule::Int _1a700327a_i = it - expr.begin();
			jule::Ptr<_1b7509a90_GenericDecl> &_1a700327a_g = *it;
			{
				if (_36013_kind != (*(_1a700327a_g))._field_ident) {
					goto _iter_next_4400732304;
				}
				jule::Ptr<_1a6a19a50_TypeKind> _36617_t = (*((*this)._field_f))._field_generics[_1a700327a_i];
				{
					
					if (_36617_t == nullptr) {
						_case_begin_4400737232:;
						{
							(*this)._method_push_generic(_35944_k,_1a700327a_i);
						}
					}
					else if ((!((*(_36617_t))._method_equals(_35944_k)))) {
						_case_begin_4400737328:;
						{
							_35960_ok = false;
							return _35960_ok;
						}
					}
					_match_end_4400736992:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_35944_k))._field_kind;
				_35960_ok = true;
				return _35960_ok;
			}
			_iter_next_4400732304:;
			++it;
			_1a700327a_i++;
			goto _iter_begin_4400732304;
		}
		_iter_end_4400732304:;
	}
	_35960_ok = false;
	return _35960_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_slc(jule::Ptr<_1a6a19a50_TypeKind>& _38343_k) {
	jule::Bool _38359_ok = jule::Bool();
	jule::Ptr<_1a6a19a50_Slc> _38417_pslc = (*((*((*this)._field_k))))._method_slc();
	if (_38417_pslc == nullptr) {
		_38359_ok = false;
		return _38359_ok;
	}
	jule::Ptr<_1a6a19a50_Slc> _38917_slc = (*(_38343_k))._method_slc();
	(*this)._field_k=(&((*(_38417_pslc))._field_elem));
	_38359_ok = (*this)._method_annotate_kind((*(_38917_slc))._field_elem);
	return _38359_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_check_map_key(jule::Ptr<_1a6a19a50_TypeKind>* _39443_k,jule::Ptr<_1a6a19a50_TypeKind>& _39463_ck) {
	jule::Bool _39480_ok = jule::Bool();
	jule::Ptr<_1a6a19a50_TypeKind>* _39517_old = (*this)._field_k;
	(*this)._field_k=_39443_k;
	_39480_ok=(*this)._method_annotate_kind(_39463_ck);
	(*this)._field_k=_39517_old;
	return _39480_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_map(jule::Ptr<_1a6a19a50_TypeKind>& _40243_k) {
	jule::Bool _40259_ok = jule::Bool();
	jule::Ptr<_1a6a19a50_Map> _40317_pmap = (*((*((*this)._field_k))))._method_map();
	if (_40317_pmap == nullptr) {
		_40259_ok = false;
		return _40259_ok;
	}
	jule::Ptr<_1a6a19a50_Map> _40817_m = (*(_40243_k))._method_map();
	_40259_ok = (*this)._method_check_map_key((&((*(_40317_pmap))._field_key)),(*(_40817_m))._field_key) && (*this)._method_check_map_key((&((*(_40317_pmap))._field_val)),(*(_40817_m))._field_val);
	return _40259_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_fn(jule::Ptr<_1a6a19a50_TypeKind>& _41442_k) {
	jule::Bool _41458_ok = jule::Bool();
	jule::Ptr<_1a691a500_FnIns> _41517_pf = (*((*((*this)._field_k))))._method_fnc();
	if (_41517_pf == nullptr) {
		_41458_ok = false;
		return _41458_ok;
	}
	jule::Ptr<_1a691a500_FnIns> _41917_f = (*(_41442_k))._method_fnc();
	{
		
		if ((*(_41517_pf))._field_params.len() != (*(_41917_f))._field_params.len()) {
			_case_begin_4400774272:;
			{
				_41458_ok = false;
				return _41458_ok;
			}
		}
		else if ((*((*(_41517_pf))._field_decl))._method_is_void() != (*((*(_41917_f))._field_decl))._method_is_void()) {
			_case_begin_4400774384:;
			{
				_41458_ok = false;
				return _41458_ok;
			}
		}
		_match_end_4400774112:;
	}
	_41458_ok=true;
	jule::Ptr<_1a6a19a50_TypeKind>* _42917_old = (*this)._field_k;
	{
		auto &expr = (*(_41917_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4400780768:;
		if (it != expr.end()) {
			jule::Int _1a700327a_i = it - expr.begin();
			jule::Ptr<_1a691a500_ParamIns> _1a700327a_fp = *it;
			{
				(*this)._field_k=(&((*((*(_41517_pf))._field_params[_1a700327a_i]))._field_kind));
				_41458_ok=(*this)._method_annotate_kind((*(_1a700327a_fp))._field_kind) && _41458_ok;
			}
			_iter_next_4400780768:;
			++it;
			_1a700327a_i++;
			goto _iter_begin_4400780768;
		}
		_iter_end_4400780768:;
	}
	if ((!((*((*(_41517_pf))._field_decl))._method_is_void()))) {
		(*this)._field_k=(&((*(_41517_pf))._field_result));
		_41458_ok=(*this)._method_annotate_kind((*(_41917_f))._field_result) && _41458_ok;
	}
	(*this)._field_k=_42917_old;
	return _41458_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_ptr(jule::Ptr<_1a6a19a50_TypeKind>& _44443_k) {
	jule::Bool _44459_ok = jule::Bool();
	jule::Ptr<_1a6a19a50_Ptr> _44517_pptr = (*((*((*this)._field_k))))._method_ptr();
	if (_44517_pptr == nullptr) {
		_44459_ok = false;
		return _44459_ok;
	}
	jule::Ptr<_1a6a19a50_Ptr> _45017_ptr = (*(_44443_k))._method_ptr();
	(*this)._field_k=(&((*(_44517_pptr))._field_elem));
	_44459_ok = (*this)._method_annotate_kind((*(_45017_ptr))._field_elem);
	return _44459_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_sptr(jule::Ptr<_1a6a19a50_TypeKind>& _45544_k) {
	jule::Bool _45560_ok = jule::Bool();
	jule::Ptr<_1a6a19a50_Sptr> _45617_ssptr = (*((*((*this)._field_k))))._method_sptr();
	if (_45617_ssptr == nullptr) {
		_45560_ok = false;
		return _45560_ok;
	}
	jule::Ptr<_1a6a19a50_Sptr> _46117_sptr = (*(_45544_k))._method_sptr();
	(*this)._field_k=(&((*(_45617_ssptr))._field_elem));
	_45560_ok = (*this)._method_annotate_kind((*(_46117_sptr))._field_elem);
	return _45560_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_any(jule::Ptr<_1a6a19a50_TypeKind>& _46643_k) {
	jule::Bool _46659_ok = jule::Bool();
	jule::Str _46713_kind = (*((*((*this)._field_k))))._method_to_str();
	{
		auto &expr = (*((*((*this)._field_f))._field_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_4400811312:;
		if (it != expr.end()) {
			jule::Int _1a700327a_i = it - expr.begin();
			jule::Ptr<_1b7509a90_GenericDecl> &_1a700327a_g = *it;
			{
				if (_46713_kind != (*(_1a700327a_g))._field_ident) {
					goto _iter_next_4400811312;
				}
				jule::Ptr<_1a6a19a50_TypeKind> _47317_t = (*((*this)._field_f))._field_generics[_1a700327a_i];
				{
					
					if (_47317_t == nullptr) {
						_case_begin_4400816240:;
						{
							(*this)._method_push_generic(_46643_k,_1a700327a_i);
						}
					}
					else if ((!((*(_47317_t))._method_equals(_46643_k)))) {
						_case_begin_4400816336:;
						{
							_46659_ok = false;
							return _46659_ok;
						}
					}
					_match_end_4400816000:;
				}
				(*((*((*this)._field_k))))._field_kind=(*(_46643_k))._field_kind;
				_46659_ok = true;
				return _46659_ok;
			}
			_iter_next_4400811312:;
			++it;
			_1a700327a_i++;
			goto _iter_begin_4400811312;
		}
		_iter_end_4400811312:;
	}
	_46659_ok = false;
	return _46659_ok;
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate_kind(jule::Ptr<_1a6a19a50_TypeKind>& _49044_k) {
	jule::Bool _49060_ok = jule::Bool();
	if (((*this)._field_k == nullptr) || ((*((*this)._field_k)) == nullptr)) {
		return _49060_ok;
	}
	{
		
		if ((*this)._method_annotate_any(_49044_k)) {
			_case_begin_4400826608:;
			{
				_49060_ok = true;
				return _49060_ok;
			}
		}
		else if ((*(_49044_k))._method_prim() != nullptr) {
			_case_begin_4400826704:;
			{
				_49060_ok = (*this)._method_annotate_prim(_49044_k);
				return _49060_ok;
			}
		}
		else if ((*(_49044_k))._method_slc() != nullptr) {
			_case_begin_4400825952:;
			{
				_49060_ok = (*this)._method_annotate_slc(_49044_k);
				return _49060_ok;
			}
		}
		else if ((*(_49044_k))._method_map() != nullptr) {
			_case_begin_4400826048:;
			{
				_49060_ok = (*this)._method_annotate_map(_49044_k);
				return _49060_ok;
			}
		}
		else if ((*(_49044_k))._method_fnc() != nullptr) {
			_case_begin_4400826144:;
			{
				_49060_ok = (*this)._method_annotate_fn(_49044_k);
				return _49060_ok;
			}
		}
		else if ((*(_49044_k))._method_ptr() != nullptr) {
			_case_begin_4400825248:;
			{
				_49060_ok = (*this)._method_annotate_ptr(_49044_k);
				return _49060_ok;
			}
		}
		else if ((*(_49044_k))._method_sptr() != nullptr) {
			_case_begin_4400825344:;
			{
				_49060_ok = (*this)._method_annotate_sptr(_49044_k);
				return _49060_ok;
			}
		}
		else {
			_case_begin_4400824944:;
			{
				_49060_ok = false;
				return _49060_ok;
			}
		}
		_match_end_4400823360:;
	}
}



inline jule::Bool _1a700327a_DynamicTypeAnnotation::_method_annotate(void) {
	jule::Bool _50736_ok = jule::Bool();
	(*this)._field_k=(&((*((*this)._field_p))._field_kind));
	_50736_ok = (*this)._method_annotate_kind((*((*this)._field_a))._field_kind);
	return _50736_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a700327a_DynamicTypeAnnotation &_Src) {
	_Stream << "DynamicTypeAnnotation{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "p:" << _Src._field_p << ", ";
	_Stream << "a:" << _Src._field_a << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "k:" << _Src._field_k;
	_Stream << "}";
	return _Stream;
}



inline void _1a700327a_FnCallArgChecker::_method_push_err_token(_1b7553d92_Token _52333_token,jule::Str _52347_fmt,jule::Slice<jule::Any> _52360_args) {
	(*((*((*this)._field_e))._field_s))._method_push_err(_52333_token,_52347_fmt,_52360_args);
}



inline void _1a700327a_FnCallArgChecker::_method_push_err(jule::Str _52727_fmt,jule::Slice<jule::Any> _52740_args) {
	(*this)._method_push_err_token((*this)._field_error_token,_52727_fmt,_52740_args);
}



inline jule::Slice<jule::Ptr<_1a691a500_ParamIns>> _1a700327a_FnCallArgChecker::_method_get_params(void) {
	if ((((*((*this)._field_f))._field_params.len() > 0LL) && ((*((*((*this)._field_f))._field_params[0LL]))._field_decl != nullptr)) && (*((*((*((*this)._field_f))._field_params[0LL]))._field_decl))._method_is_self()) {
		return (*((*this)._field_f))._field_params.slice(1LL);
	}
	return (*((*this)._field_f))._field_params;
}



inline jule::Bool _1a700327a_FnCallArgChecker::_method_check_counts(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>& _54032_params) {
	jule::Bool _54055_ok = jule::Bool();
	jule::I64 _54117_n = _54032_params.len();
	if ((_54117_n > 0LL) && (*((*(_54032_params[0LL]))._field_decl))._method_is_self()) {
		(_54117_n)--;
	}
	jule::I64 _54617_diff = _54117_n - (*this)._field_args.len();
	{
		
		if (_54617_diff == 0LL) {
			_case_begin_4400871184:;
			{
				_54055_ok = true;
				return _54055_ok;
			}
		}
		else if ((_54117_n > 0LL) && (*((*(_54032_params[_54117_n - 1LL]))._field_decl))._field_variadic) {
			_case_begin_4400871296:;
			{
				_54055_ok = true;
				return _54055_ok;
			}
		}
		else if ((_54617_diff < 0LL) || (_54617_diff > _54032_params.len())) {
			_case_begin_4400871408:;
			{
				(*this)._method_push_err(jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
				_54055_ok = false;
				return _54055_ok;
			}
		}
		_match_end_4400871008:;
	}
	jule::Str _55917_idents = jule::Str();
	for (; _54617_diff > 0LL; (_54617_diff)--) {
		{
			_55917_idents+=jule::Str(", ", 2) + (*((*(_54032_params[_54117_n - _54617_diff]))._field_decl))._field_ident;
		}
	_iter_next_4400896208:;
	}
	_iter_end_4400896208:;
	_55917_idents=_55917_idents.slice(2LL);
	(*this)._method_push_err(jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_55917_idents)}));
	_54055_ok = false;
	return _54055_ok;
}



inline jule::Bool _1a700327a_FnCallArgChecker::_method_check_arg(jule::Ptr<_1a691a500_ParamIns>& _56933_p,jule::Ptr<_1a8b431d7_Data>& _56952_arg,_1b7553d92_Token& _56969_error_token) {
	jule::Bool _56991_ok = jule::Bool();
	if ((*this)._field_dynamic_annotation && _1a691a500_parameter_uses_generics((*(_56933_p))._field_decl,(*((*((*this)._field_f))._field_decl))._field_generics)) {
		_56991_ok=(!((*((*(_56933_p))._field_decl))._field_variadic));
		if (_56991_ok) {
			_1a700327a_DynamicTypeAnnotation _57325_dta = _1a700327a_DynamicTypeAnnotation((*this)._field_e,(*this)._field_f,_56933_p,_56952_arg,_56969_error_token,nullptr);
			_56991_ok=_57325_dta._method_annotate();
		}
		if ((!(_56991_ok))) {
			(*this)._method_push_err_token(_56969_error_token,jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
			_56991_ok = false;
			return _56991_ok;
		}
	}
	(*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((*((*(_56933_p))._field_decl))._field_mutable,(*((*(_56933_p))._field_decl))._field_reference,(*(_56933_p))._field_kind,_56952_arg,_56969_error_token);
	(*((*((*this)._field_e))._field_s))._method_check_assign_type((*((*(_56933_p))._field_decl))._field_reference,(*(_56933_p))._field_kind,_56952_arg,_56969_error_token);
	_56991_ok = true;
	return _56991_ok;
}



inline jule::Bool _1a700327a_FnCallArgChecker::_method_push(jule::Ptr<_1a691a500_ParamIns>& _59328_p,jule::Ptr<_1b7509a90_Expr> _59346_arg) {
	jule::Bool _59360_ok = jule::Bool();
	jule::Ptr<_1a6a19a50_TypeKind> _59417_old = (*((*this)._field_e))._field_prefix;
	jule::Bool _59513_old_immut = (*((*this)._field_e))._field_immutable;
	jule::Ptr<_1a8b431d7_Data> _59617_d = nullptr;
	(*((*this)._field_e))._field_immutable=(!((*((*(_59328_p))._field_decl))._field_mutable));
	if ((!((*this)._field_dynamic_annotation)) && (!((*((*(_59328_p))._field_decl))._field_variadic))) {
		(*((*this)._field_e))._field_prefix=(*(_59328_p))._field_kind;
	} else {
		(*((*this)._field_e))._field_prefix=nullptr;
	}
	_59617_d=(*((*this)._field_e))._method_eval_expr_kind((*(_59346_arg))._field_kind);
	(*((*this)._field_e))._field_prefix=_59417_old;
	(*((*this)._field_e))._field_immutable=_59513_old_immut;
	if (_59617_d == nullptr) {
		_59360_ok = false;
		return _59360_ok;
	}
	(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.__push(jule::Any(_59617_d));
	_59360_ok = (*this)._method_check_arg(_59328_p,_59617_d,(*(_59346_arg))._field_token);
	return _59360_ok;
}



inline jule::Bool _1a700327a_FnCallArgChecker::_method_push_variadic(jule::Ptr<_1a691a500_ParamIns>& _61737_p,jule::Int _61755_i) {
	jule::Bool _61765_ok = jule::Bool();
	_61765_ok=true;
	jule::Bool _61917_variadiced = false;
	jule::Bool _62013_more = (_61755_i + 1LL) < (*this)._field_args.len();
	jule::Ptr<_1a69b8d2e_SliceExprModel> _62117_model = jule::new_struct<_1a69b8d2e_SliceExprModel>(new( std::nothrow ) _1a69b8d2e_SliceExprModel((*(_61737_p))._field_kind,jule::Slice<jule::Any>()));
	jule::Ptr<_1a6a19a50_TypeKind> _62517_old = (*((*this)._field_e))._field_prefix;
	jule::Bool _63013_variadic = (*((*(_61737_p))._field_kind))._field_variadic;
	(*((*(_61737_p))._field_kind))._field_variadic=false;
	__JULE_DEFER({
		(*((*(_61737_p))._field_kind))._field_variadic=_63013_variadic;
	});
	for (; _61755_i < (*this)._field_args.len(); (_61755_i)++) {
		{
			jule::Ptr<_1b7509a90_Expr> _63721_arg = (*this)._field_args[_61755_i];
			{
				auto &_match_expr{ (*(_63721_arg))._field_kind };
				
				if (_match_expr.type_is<jule::Ptr<_1b7509a90_VariadicExpr>>()) {
					_case_begin_4400951840:;
					{
						(*((*this)._field_e))._field_prefix=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a6a19a50_Slc>(new( std::nothrow ) _1a6a19a50_Slc((*(_61737_p))._field_kind))));
					}
				}
				else {
					_case_begin_4400953232:;
					{
						(*((*this)._field_e))._field_prefix=(*(_61737_p))._field_kind;
					}
				}
				_match_end_4400953136:;
			}
			jule::Ptr<_1a8b431d7_Data> _65121_d = (*((*this)._field_e))._method_eval(_63721_arg);
			if (_65121_d == nullptr) {
				_61765_ok=false;
				goto _iter_next_4400942576;
			}
			if ((*((*(_65121_d))._field_kind))._field_variadic) {
				_61917_variadiced=true;
				{
					auto &_match_expr{ (*(_65121_d))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_SliceExprModel>>()) {
						_case_begin_4400958816:;
						{
							_62117_model=(*(_65121_d))._field_model.operator jule::Ptr<_1a69b8d2e_SliceExprModel>();
							(*(_62117_model))._field_elem_kind=(*(_61737_p))._field_kind;
						}
					}
					else {
						_case_begin_4400961856:;
						{
							_62117_model=nullptr;
							(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.__push(jule::Any(_65121_d));
						}
					}
					_match_end_4400961776:;
				}
				(*((*(_61737_p))._field_kind))._field_variadic=true;
				_61765_ok=_61765_ok && (*this)._method_check_arg(_61737_p,_65121_d,(*(_63721_arg))._field_token);
				(_61755_i)++;
				goto _iter_end_4400942576;
			}
			(*(_62117_model))._field_elems = jule::alloc_for_append((*(_62117_model))._field_elems,1);(*(_62117_model))._field_elems.__push((*(_65121_d))._field_model);
			_61765_ok=_61765_ok && (*this)._method_check_arg(_61737_p,_65121_d,(*(_63721_arg))._field_token);
		}
	_iter_next_4400942576:;
	}
	_iter_end_4400942576:;
	(*((*this)._field_e))._field_prefix=_62517_old;
	if (_61917_variadiced && _62013_more) {
		(*this)._method_push_err_token((*((*this)._field_args[_61755_i]))._field_token,jule::Str("variadic argument can't use with more argument", 46),jule::Slice<jule::Any>());
	}
	if (_62117_model != nullptr) {
		(*this)._field_arg_models = jule::alloc_for_append((*this)._field_arg_models,1);(*this)._field_arg_models.__push(jule::Any(_62117_model));
	}
	return _61765_ok;
}



inline jule::Bool _1a700327a_FnCallArgChecker::_method_check_args(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>& _69834_params) {
	jule::Bool _69857_ok = jule::Bool();
	_69857_ok=true;
	jule::Int _70017_i = 0LL;
	_julec_label_iter:;
	while (_70017_i < _69834_params.len()) {
		{
			jule::Ptr<_1a691a500_ParamIns> _70321_p = _69834_params[_70017_i];
			{
				
				if ((*((*(_70321_p))._field_decl))._method_is_self()) {
					_case_begin_4400985200:;
				}
				else if ((*((*(_70321_p))._field_decl))._field_variadic) {
					_case_begin_4400984912:;
					{
						_69857_ok=(*this)._method_push_variadic(_70321_p,_70017_i) && _69857_ok;
						goto _iter_end_4400981776;
					}
				}
				else if ((*this)._field_args.len() <= _70017_i) {
					_case_begin_4400984416:;
					{
						_69857_ok=false;
						goto _iter_end_4400981776;
					}
				}
				else {
					_case_begin_4400984112:;
					{
						_69857_ok=(*this)._method_push(_70321_p,(*this)._field_args[_70017_i]) && _69857_ok;
					}
				}
				_match_end_4400984000:;
			}
			(_70017_i)++;
		}
	_iter_next_4400981776:;
	}
	_iter_end_4400981776:;
	return _69857_ok;
}



inline jule::Bool _1a700327a_FnCallArgChecker::_method_check_dynamic_type_annotation(void) {
	jule::Bool _72550_ok = jule::Bool();
	{
		auto &expr = (*((*this)._field_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_4400994784:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeKind> &_1a700327a_g = *it;
			{
				if (_1a700327a_g == nullptr) {
					(*this)._method_push_err(jule::Str("dynamic type annotation failed", 30),jule::Slice<jule::Any>());
					_72550_ok = false;
					return _72550_ok;
				}
			}
			_iter_next_4400994784:;
			++it;
			goto _iter_begin_4400994784;
		}
		_iter_end_4400994784:;
	}
	_72550_ok = true;
	return _72550_ok;
}



inline jule::Bool _1a700327a_FnCallArgChecker::_method_check(void) {
	jule::Bool _73526_ok = jule::Bool();
	jule::Slice<jule::Ptr<_1a691a500_ParamIns>> _73617_params = (*this)._method_get_params();
	_73526_ok=(*this)._method_check_counts(_73617_params);
	if ((!(_73526_ok))) {
		_73526_ok = false;
		return _73526_ok;
	}
	_73526_ok=(*this)._method_check_args(_73617_params);
	if (_73526_ok && (*this)._field_dynamic_annotation) {
		_73526_ok=(*this)._method_check_dynamic_type_annotation();
	}
	return _73526_ok;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a700327a_FnCallArgChecker &_Src) {
	_Stream << "FnCallArgChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "dynamic_annotation:" << _Src._field_dynamic_annotation << ", ";
	_Stream << "arg_models:" << _Src._field_arg_models;
	_Stream << "}";
	return _Stream;
}



inline void _1a700327a_StructLitChecker::_method_push_err(_1b7553d92_Token _75927_token,jule::Str _75941_fmt,jule::Slice<jule::Any> _75954_args) {
	(*((*this)._field_e))._method_push_err(_75927_token,_75941_fmt,_75954_args);
}



inline void _1a700327a_StructLitChecker::_method_push_suggestion(jule::Str _76434_fmt,jule::Slice<jule::Any> _76447_args) {
	(*((*this)._field_e))._method_push_suggestion(_76434_fmt,_76447_args);
}



inline void _1a700327a_StructLitChecker::_method_push_match(jule::Ptr<_1b7905331_FieldIns>& _76834_f,jule::Ptr<_1a8b431d7_Data>& _76853_d,_1b7553d92_Token& _76868_error_token) {
	(*this)._field_args = jule::alloc_for_append((*this)._field_args,1);(*this)._field_args.__push(jule::new_struct<_1a69b8d2e_StructArgExprModel>(new( std::nothrow ) _1a69b8d2e_StructArgExprModel(_76834_f,(*(_76853_d))._field_model)));
	
	(*((*((*this)._field_e))._field_s))._method_check_validity_for_init_expr((!((*((*this)._field_e))._field_immutable)),false,(*(_76834_f))._field_kind,_76853_d,_76868_error_token);
	(*((*((*this)._field_e))._field_s))._method_check_assign_type(false,(*(_76834_f))._field_kind,_76853_d,_76868_error_token);
}



inline void _1a700327a_StructLitChecker::_method_check_pair(jule::Ptr<_1b7509a90_FieldExprPair>& _77834_pair,jule::Slice<jule::Any>& _77861_exprs) {
	jule::Ptr<_1b7905331_FieldIns> _78017_f = (*((*this)._field_s))._method_find_field((*(_77834_pair))._field_field._field_kind);
	if (_78017_f == nullptr) {
		(*this)._method_push_err((*(_77834_pair))._field_field,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_77834_pair))._field_field._field_kind)}));
		return;
	}
	if ((!((*((*((*this)._field_e))._field_s))._method_is_accessible_define((*((*(_78017_f))._field_decl))._field_public,(*((*(_78017_f))._field_decl))._field_token)))) {
		(*this)._method_push_err((*(_77834_pair))._field_field,jule::Str("inaccessible identifier: @ is private", 37),jule::Slice<jule::Any>({jule::Any((*(_77834_pair))._field_field._field_kind)}));
		(*this)._method_push_suggestion(jule::Str("make public with \"pub\" keyword to access", 40),jule::Slice<jule::Any>());
	}
	_julec_label_dup_lookup:;
	{
		auto &expr = _77861_exprs;
		auto it = expr.begin();
		_iter_begin_4401043792:;
		if (it != expr.end()) {
			jule::Any _1a700327a_expr = *it;
			{
				{
					auto &_match_expr{ _1a700327a_expr };
					
					if (_match_expr.type_is<jule::Ptr<_1b7509a90_FieldExprPair>>()) {
						_case_begin_4401045424:;
						{
							jule::Ptr<_1b7509a90_FieldExprPair> _79625_dpair = _1a700327a_expr.operator jule::Ptr<_1b7509a90_FieldExprPair>();
							{
								
								if (_77834_pair == _79625_dpair) {
									_case_begin_4401048176:;
									{
										goto _iter_end_4401043792;
									}
								}
								else if ((*(_77834_pair))._field_field._field_kind == (*(_79625_dpair))._field_field._field_kind) {
									_case_begin_4401048288:;
									{
										(*this)._method_push_err((*(_77834_pair))._field_field,jule::Str("@ already has expression", 24),jule::Slice<jule::Any>({jule::Any((*(_77834_pair))._field_field._field_kind)}));
										goto _iter_end_4401043792;
									}
								}
								_match_end_4401048016:;
							}
						}
					}
					_match_end_4401045088:;
				}
			}
			_iter_next_4401043792:;
			++it;
			goto _iter_begin_4401043792;
		}
		_iter_end_4401043792:;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _80817_prefix = (*((*this)._field_e))._field_prefix;
	__JULE_DEFER({
		(*((*this)._field_e))._field_prefix=_80817_prefix;
	});
	(*((*this)._field_e))._field_prefix=(*(_78017_f))._field_kind;
	jule::Ptr<_1a8b431d7_Data> _81217_d = (*((*this)._field_e))._method_eval_expr_kind((*(_77834_pair))._field_expr);
	if (_81217_d == nullptr) {
		return;
	}
	(*this)._method_push_match(_78017_f,_81217_d,(*(_77834_pair))._field_field);
}



inline jule::Bool _1a700327a_StructLitChecker::_method_ready_exprs(jule::Slice<jule::Any>& _81935_exprs) {
	jule::Bool _82017_ok = true;
	{
		auto &expr = _81935_exprs;
		auto it = expr.begin();
		_iter_begin_4401062736:;
		if (it != expr.end()) {
			jule::Int _1a700327a_i = it - expr.begin();
			jule::Any _1a700327a_expr = *it;
			{
				{
					auto &_match_expr{ _1a700327a_expr };
					
					if (_match_expr.type_is<jule::Ptr<_1b7509a90_KeyValPair>>()) {
						_case_begin_4401065072:;
						{
							jule::Ptr<_1b7509a90_KeyValPair> _82425_pair = _1a700327a_expr.operator jule::Ptr<_1b7509a90_KeyValPair>();
							{
								auto &_match_expr{ (*(_82425_pair))._field_key };
								
								if (_match_expr.type_is<jule::Ptr<_1b7509a90_IdentExpr>>()) {
									_case_begin_4401070704:;
								}
								else {
									_case_begin_4401068080:;
									{
										(*this)._method_push_err((*(_82425_pair))._field_colon,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
										_82017_ok=false;
										goto _iter_next_4401062736;
									}
								}
								_match_end_4401067984:;
							}
							_81935_exprs.__at(_1a700327a_i)=jule::Any(jule::new_struct<_1b7509a90_FieldExprPair>(new( std::nothrow ) _1b7509a90_FieldExprPair((*((*(_82425_pair))._field_key.operator jule::Ptr<_1b7509a90_IdentExpr>()))._field_token,(*(_82425_pair))._field_val)));
						}
					}
					_match_end_4401064736:;
				}
			}
			_iter_next_4401062736:;
			++it;
			_1a700327a_i++;
			goto _iter_begin_4401062736;
		}
		_iter_end_4401062736:;
	}
	return _82017_ok;
}



inline void _1a700327a_StructLitChecker::_method_check(jule::Slice<jule::Any>& _84529_exprs) {
	if (_84529_exprs.len() == 0LL) {
		return;
	}
	if ((!((*this)._method_ready_exprs(_84529_exprs)))) {
		return;
	}
	jule::Bool _85417_paired = false;
	{
		auto &expr = _84529_exprs;
		auto it = expr.begin();
		_iter_begin_4401078368:;
		if (it != expr.end()) {
			jule::Int _1a700327a_i = it - expr.begin();
			jule::Any _1a700327a_expr = *it;
			{
				{
					auto &_match_expr{ _1a700327a_expr };
					
					if (_match_expr.type_is<jule::Ptr<_1b7509a90_FieldExprPair>>()) {
						_case_begin_4401080560:;
						{
							jule::Ptr<_1b7509a90_FieldExprPair> _85825_pair = _1a700327a_expr.operator jule::Ptr<_1b7509a90_FieldExprPair>();
							if ((_1a700327a_i > 0LL) && (!(_85417_paired))) {
								(*this)._method_push_err((*(_85825_pair))._field_field,jule::Str("invalid syntax", 14),jule::Slice<jule::Any>());
							}
							_85417_paired=true;
							(*this)._method_check_pair(_85825_pair,_84529_exprs);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1b7509a90_Expr>>()) {
						_case_begin_4401080672:;
						{
							jule::Ptr<_1b7509a90_Expr> _86625_e = _1a700327a_expr.operator jule::Ptr<_1b7509a90_Expr>();
							if (_85417_paired) {
								(*this)._method_push_err((*(_86625_e))._field_token,jule::Str("argument must target to field", 29),jule::Slice<jule::Any>());
							}
							if (_1a700327a_i >= (*((*this)._field_s))._field_fields.len()) {
								(*this)._method_push_err((*(_86625_e))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
								goto _iter_next_4401078368;
							}
							jule::Ptr<_1b7905331_FieldIns> _87525_field = (*((*this)._field_s))._field_fields[_1a700327a_i];
							jule::Ptr<_1a6a19a50_TypeKind> _87725_prefix = (*((*this)._field_e))._field_prefix;
							__JULE_DEFER({
								(*((*this)._field_e))._field_prefix=_87725_prefix;
							});
							(*((*this)._field_e))._field_prefix=(*(_87525_field))._field_kind;
							jule::Ptr<_1a8b431d7_Data> _88125_d = (*((*this)._field_e))._method_eval_expr_kind((*(_86625_e))._field_kind);
							if (_88125_d == nullptr) {
								goto _iter_next_4401078368;
							}
							(*this)._method_push_match(_87525_field,_88125_d,(*(_86625_e))._field_token);
						}
					}
					_match_end_4401080208:;
				}
			}
			_iter_next_4401078368:;
			++it;
			_1a700327a_i++;
			goto _iter_begin_4401078368;
		}
		_iter_end_4401078368:;
	}
	if ((!(_85417_paired))) {
		jule::I64 _89217_n = (*((*this)._field_s))._field_fields.len();
		jule::I64 _89321_diff = _89217_n - _84529_exprs.len();
		{
			
			if (_89321_diff <= 0LL) {
				_case_begin_4401105296:;
				{
					return;
				}
			}
			_match_end_4401105072:;
		}
		jule::Str _89921_idents = jule::Str();
		for (; _89321_diff > 0LL; (_89321_diff)--) {
			{
				_89921_idents+=jule::Str(", ", 2) + (*((*((*((*this)._field_s))._field_fields[_89217_n - _89321_diff]))._field_decl))._field_ident;
			}
		_iter_next_4401079856:;
		}
		_iter_end_4401079856:;
		_89921_idents=_89921_idents.slice(2LL);
		(*this)._method_push_err((*this)._field_error_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(_89921_idents)}));
	}
}







std::ostream &operator<<(std::ostream &_Stream, const _1a700327a_StructLitChecker &_Src) {
	_Stream << "StructLitChecker{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_BraceLit::_method_is_empty(void) {
	return (*this)._field_exprs.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_BraceLit &_Src) {
	_Stream << "BraceLit{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "exprs:" << _Src._field_exprs;
	_Stream << "}";
	return _Stream;
}



inline void _1a700327a_RetTypeChecker::_method_prepare_types(void) {
	if ((*this)._field_f != nullptr) {
		(*this)._field_types=_1a700327a_get_result_types((*((*this)._field_f))._field_result);
	}
}



inline void _1a700327a_RetTypeChecker::_method_prepare_exprs(jule::Ptr<_1b7509a90_Expr>& _108537_e) {
	if (_108537_e == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*(_108537_e))._field_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_TupleExpr>>()) {
			_case_begin_4401223440:;
			{
				(*this)._field_exprs=(*((*(_108537_e))._field_kind.operator jule::Ptr<_1b7509a90_TupleExpr>()))._field_expr;
			}
		}
		else {
			_case_begin_4401222544:;
			{
				(*this)._field_exprs = jule::alloc_for_append((*this)._field_exprs,1);(*this)._field_exprs.__push(_108537_e);
			}
		}
		_match_end_4401221424:;
	}
}



inline void _1a700327a_RetTypeChecker::_method_ret_vars(void) {
	if (((*this)._field_f == nullptr) || (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		return;
	}
	(*this)._field_vars=jule::Slice<jule::Ptr<_1a7003e4b_Var>>::alloc(0LL,static_cast<jule::I64>((*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents.len()));
	jule::Ptr<_1a6bc3e29_ScopeChecker> _110517_root_scope = (*((*this)._field_sc))._method_get_root();
	jule::Int _110717_j = 0LL;
	{
		auto &expr = (*((*((*((*this)._field_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_4401234688:;
		if (it != expr.end()) {
			jule::Int _1a700327a_i = it - expr.begin();
			_1b7553d92_Token &_1a700327a_ident = *it;
			{
				if ((!(_1b7553d92_is_ignore_ident(_1a700327a_ident._field_kind)))) {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.__push((*((*(_110517_root_scope))._field_table))._field_vars[_110717_j]);
					(_110717_j)++;
				} else {
					(*this)._field_vars = jule::alloc_for_append((*this)._field_vars,1);(*this)._field_vars.__push(jule::new_struct<_1a7003e4b_Var>(new( std::nothrow ) _1a7003e4b_Var(jule::Ptr<_1a6bc3e29_Scope>(),_1b7553d92_Token(),jule::Str("_", 1),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),(*this)._field_types[_1a700327a_i])),jule::Ptr<_1a8b431d7_Value>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1a7003e4b_IterRelation>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>())));
				}
			}
			_iter_next_4401234688:;
			++it;
			_1a700327a_i++;
			goto _iter_begin_4401234688;
		}
		_iter_end_4401234688:;
	}
	if (_110717_j == 0LL) {
		(*this)._field_vars=nullptr;
	}
}



inline void _1a700327a_RetTypeChecker::_method_check_exprs(void) {
	if ((*this)._field_exprs.len() == 0LL) {
		return;
	}
	jule::Slice<jule::Ptr<_1a8b431d7_Data>> _113117_datas = jule::Slice<jule::Ptr<_1a8b431d7_Data>>::alloc(0LL,static_cast<jule::I64>((*this)._field_exprs.len()));
	{
		auto &expr = (*this)._field_exprs;
		auto it = expr.begin();
		_iter_begin_4401246496:;
		if (it != expr.end()) {
			jule::Int _1a700327a_i = it - expr.begin();
			jule::Ptr<_1b7509a90_Expr> _1a700327a_expr = *it;
			{
				if (_1a700327a_i >= (*this)._field_types.len()) {
					goto _iter_end_4401246496;
				}
				jule::Ptr<_1a6a19a50_TypeKind> _113821_t = (*this)._field_types[_1a700327a_i];
				jule::Ptr<_1a8b431d7_Data> _114021_d = (*((*((*((*this)._field_sc))._field_s))._method_evalp((*this)._field_sc,_113821_t)))._method_eval_expr(_1a700327a_expr);
				if (_114021_d == nullptr) {
					goto _iter_next_4401246496;
				}
				_113117_datas = jule::alloc_for_append(_113117_datas,1);_113117_datas.__push(_114021_d);
				if ((!((*(_114021_d))._field_mutable)) && (*((*(_114021_d))._field_kind))._method_mutable()) {
					(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("mutable typed return expressions should be mutable", 50),jule::Slice<jule::Any>());
					return;
				}
				_1a700327a_AssignTypeChecker _115221_ac = _1a700327a_AssignTypeChecker((*((*this)._field_sc))._field_s,_113821_t,_114021_d,(*this)._field_error_token);
				_115221_ac._method_check();
			}
			_iter_next_4401246496:;
			++it;
			_1a700327a_i++;
			goto _iter_begin_4401246496;
		}
		_iter_end_4401246496:;
	}
	if (_113117_datas.len() > 1LL) {
		(*this)._field_model=jule::Any(jule::new_struct<_1a69b8d2e_TupleExprModel>(new( std::nothrow ) _1a69b8d2e_TupleExprModel(_113117_datas)));
	} else if (_113117_datas.len() == 1LL) {
		(*this)._field_model=(*(_113117_datas[0LL]))._field_model;
	}
}



inline jule::Bool _1a700327a_RetTypeChecker::_method_check(jule::Ptr<_1b7509a90_Expr>& _117129_e) {
	(*this)._method_prepare_types();
	(*this)._method_prepare_exprs(_117129_e);
	(*this)._method_ret_vars();
	jule::I64 _117613_n = (*this)._field_exprs.len();
	if ((_117613_n == 0LL) && ((*this)._field_types.len() > 0LL)) {
		if ((!((*((*((*this)._field_f))._field_decl))._method_any_var()))) {
			(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("return statements of non-void functions should have return expression", 69),jule::Slice<jule::Any>());
			return false;
		}
		return true;
	}
	if (((_117613_n > 0LL) && ((*this)._field_f != nullptr)) && (*((*((*this)._field_f))._field_decl))._method_is_void()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("void functions is cannot returns any value", 42),jule::Slice<jule::Any>());
		return false;
	}
	if (_117613_n > (*this)._field_types.len()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("overflow return expressions", 27),jule::Slice<jule::Any>());
	} else if (_117613_n < (*this)._field_types.len()) {
		(*((*((*this)._field_sc))._field_s))._method_push_err((*this)._field_error_token,jule::Str("missing return expressions for multi-return", 43),jule::Slice<jule::Any>());
	}
	(*this)._method_check_exprs();
	return true;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a700327a_RetTypeChecker &_Src) {
	_Stream << "RetTypeChecker{";
	_Stream << "sc:" << _Src._field_sc << ", ";
	_Stream << "f:" << _Src._field_f << ", ";
	_Stream << "types:" << _Src._field_types << ", ";
	_Stream << "exprs:" << _Src._field_exprs << ", ";
	_Stream << "vars:" << _Src._field_vars << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "model:" << _Src._field_model;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_StructLitExprModel &_Src) {
	_Stream << "StructLitExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "strct:" << _Src._field_strct << ", ";
	_Stream << "args:" << _Src._field_args;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_KeyValPair &_Src) {
	_Stream << "KeyValPair{";
	_Stream << "key:" << _Src._field_key << ", ";
	_Stream << "val:" << _Src._field_val << ", ";
	_Stream << "colon:" << _Src._field_colon;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_CastingExprModel &_Src) {
	_Stream << "CastingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr_kind:" << _Src._field_expr_kind;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_FnCallExprModel &_Src) {
	_Stream << "FnCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "func:" << _Src._field_func << ", ";
	_Stream << "is_co:" << _Src._field_is_co << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "except:" << _Src._field_except << ", ";
	_Stream << "assigned:" << _Src._field_assigned;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_SliceExpr::_method_is_empty(void) {
	return (*this)._field_elems.len() == 0LL;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_SliceExpr &_Src) {
	_Stream << "SliceExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "elems:" << _Src._field_elems;
	_Stream << "}";
	return _Stream;
}



inline _1a8b431d7_BinaryEval _1a8b431d7_BinaryEval::_static_method_new_plain(jule::Ptr<_1a8b431d7_Eval> _363229_e) {
	return _1a8b431d7_BinaryEval(_363229_e,jule::Ptr<_1a8b431d7_Data>(),jule::Ptr<_1a8b431d7_Data>(),_1b7553d92_Token());
}



inline _1a8b431d7_BinaryEval _1a8b431d7_BinaryEval::_static_method_new(jule::Ptr<_1a8b431d7_Eval> _363823_e,_1b7553d92_Token _363837_op) {
	return _1a8b431d7_BinaryEval(_363823_e,jule::Ptr<_1a8b431d7_Data>(),jule::Ptr<_1a8b431d7_Data>(),_363837_op);
}



inline jule::Bool _1a8b431d7_BinaryEval::_method_check_type_compatibility(void) {
	return (*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*this)._field_l))._field_kind,(*((*this)._field_r))._field_kind,(*this)._field_op);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_nil(void) {
	if ((!((*((*((*this)._field_r))._field_kind))._method_nil_compatible()))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("nil", 3)),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403643216:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403635056:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("nil", 3))}));
				return nullptr;
			}
		}
		_match_end_4403639504:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_enum(void) {
	jule::Ptr<_1a6bb9150_Enum> _367317_enm = (*((*((*this)._field_l))._field_kind))._method_enm();
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403648016:;
			{
				jule::Ptr<_1a6a19a50_TypeKind> _367721_rkind = (*((*this)._field_r))._field_kind;
				if ((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr) {
					_367721_rkind=(*((*((*((*((*this)._field_r))._field_kind))._method_enm()))._field_kind))._field_kind;
				}
				if ((!((*((*((*this)._field_e))._field_s))._method_check_type_compatibility((*((*(_367317_enm))._field_kind))._field_kind,_367721_rkind,(*this)._field_op)))) {
					return nullptr;
				}
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		_match_end_4403647936:;
	}
	if (((*((*((*this)._field_r))._field_kind))._method_enm() == nullptr) || (_367317_enm != (*((*((*this)._field_r))._field_kind))._method_enm())) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_367317_enm))._field_ident),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_4403668928:;
			{
				if ((!(_1a9133243_is_num((*((*((*(_367317_enm))._field_kind))._field_kind))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_367317_enm))._field_ident)}));
					return nullptr;
				}
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1)) {
			_case_begin_4403669088:;
			{
				if (((*((*((*(_367317_enm))._field_kind))._field_kind))._method_prim() == nullptr) || (!(_1a9133243_is_int((*((*((*((*(_367317_enm))._field_kind))._field_kind))._method_prim()))._method_to_str())))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_367317_enm))._field_ident)}));
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4403659264:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*(_367317_enm))._field_ident)}));
				return nullptr;
			}
		}
		_match_end_4403665024:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_sptr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403691296:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403686576:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403685600:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_ptr(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str("<=", 2) || _match_expr == jule::Str(">=", 2)) {
			_case_begin_4403699040:;
			{
				if ((!((*this)._method_check_type_compatibility()))) {
					return nullptr;
				}
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1)) {
			_case_begin_4403699248:;
			{
				if ((*((*((*this)._field_l))._field_kind))._method_ptr() == nullptr) {
					std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				}
				if ((*((*((*((*this)._field_l))._field_kind))._method_ptr()))._method_is_unsafe()) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				}
				if ((!(_1a8b431d7_is_ptr_arithmetic_compatible_int((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("type @ is incompatible to use for pointer arithmetic", 52),jule::Slice<jule::Any>({jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
					return nullptr;
				}
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4403692448:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403694464:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_arr(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403723008:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403718320:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403718752:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_slc(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403731792:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403727168:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403726176:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_fn(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403740576:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403735952:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403734960:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_struct(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403749360:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403744736:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403743744:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_trait(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403758304:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403753520:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403754000:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_any(void) {
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2)) {
			_case_begin_4403765456:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403759424:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("any", 3))}));
				return nullptr;
			}
		}
		_match_end_4403761440:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_bool(void) {
	if ((!((*this)._method_check_type_compatibility()))) {
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("&&", 2) || _match_expr == jule::Str("||", 2)) {
			_case_begin_4403774032:;
			{
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4403769408:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any((*((*((*this)._field_l))._field_kind))._method_to_str())}));
				return nullptr;
			}
		}
		_match_end_4403768416:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_str(void) {
	jule::Str _391617_rk = (*((*((*this)._field_r))._field_kind))._method_to_str();
	if (_391617_rk != jule::Str("str", 3)) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any(_391617_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1)) {
			_case_begin_4403785472:;
			{
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_4403785568:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		else {
			_case_begin_4403778304:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("str", 3))}));
				return nullptr;
			}
		}
		_match_end_4403781488:;
	}
}



inline void _1a8b431d7_BinaryEval::_method_set_type_to_greater(void) {
	if ((*((*this)._field_l))._method_is_const()) {
		if ((!((*((*this)._field_r))._method_is_const()))) {
			(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
			return;
		}
		if (_1b6dd79e0_is_greater((*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind,(*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind)) {
			(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
		}
		return;
	}
	if ((*((*this)._field_r))._method_is_const()) {
		return;
	}
	if (_1b6dd79e0_is_greater((*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind,(*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind)) {
		(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
	}
}



inline void _1a8b431d7_BinaryEval::_method_check_mod_data(jule::Ptr<_1a8b431d7_Data>& _396438_d) {
	if ((!((*(_396438_d))._method_is_const()))) {
		if (((*((*(_396438_d))._field_kind))._method_prim() == nullptr) || (!(_1a9133243_is_int((*((*((*(_396438_d))._field_kind))._method_prim()))._field_kind)))) {
			(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
		}
		return;
	}
	{
		
		if (_1a700327a_sig_assignable(jule::Str("i64", 3),_396438_d)) {
			_case_begin_4403813088:;
			{
				(*((*(_396438_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_396438_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1a700327a_unsig_assignable(jule::Str("u64", 3),_396438_d)) {
			_case_begin_4403812592:;
			{
				(*((*(_396438_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_396438_d))._field_constant))._method_as_u64()));
			}
		}
		else {
			_case_begin_4403812288:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("module operator must be used with integer type", 46),jule::Slice<jule::Any>());
			}
		}
		_match_end_4403812176:;
	}
}



inline void _1a8b431d7_BinaryEval::_method_mod(void) {
	(*this)._method_check_mod_data((*this)._field_l);
	(*this)._method_check_mod_data((*this)._field_r);
}



inline jule::Bool _1a8b431d7_BinaryEval::_method_numbers_are_compatibile(jule::Str& _398939_lk,jule::Str& _398949_rk) {
	if ((!(_1a9133243_is_num(_398949_rk)))) {
		return false;
	}
	if ((*((*this)._field_l))._method_is_const()) {
		return true;
	}
	if (_398939_lk == jule::Str("f32", 3)) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return _398949_rk == jule::Str("f32", 3);
	}
	if (_398939_lk == jule::Str("f64", 3)) {
		if ((*((*this)._field_r))._method_is_const()) {
			return true;
		}
		return _398949_rk == jule::Str("f64", 3);
	}
	if ((*((*this)._field_r))._method_is_const()) {
		{
			auto &_match_expr{ (*((*this)._field_r))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_RuneExprModel>>() || _match_expr.type_is<jule::Ptr<_1b6dd59aa_Const>>()) {
				_case_begin_4403835904:;
				{
					if (_1a9133243_is_sig_int(_398939_lk)) {
						return _1a700327a_int_assignable(jule::Str("int", 3),(*this)._field_r);
					}
					return _1a700327a_int_assignable(jule::Str("uint", 4),(*this)._field_r);
				}
			}
			_match_end_4403835728:;
		}
	}
	return _1a9133243_is_sig_int(_398939_lk) == _1a9133243_is_sig_int(_398949_rk);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_float(void) {
	jule::Str _402813_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _402913_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	if ((!((*this)._method_numbers_are_compatibile(_402813_lk,_402913_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_402813_lk),jule::Any(_402913_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_4403850064:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		_match_end_4403849984:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1)) {
			_case_begin_4403856288:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_4403856448:;
			{
				if ((!(_1a9133243_is_int(_402913_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_402813_lk),jule::Any(_402913_rk)}));
					return nullptr;
				}
				(*this)._method_mod();
				return (*this)._field_r;
			}
		}
		else {
			_case_begin_4403850352:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for floating-point type(s)", 52),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4402818208:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_int(void) {
	jule::Str _407413_lk = (*((*((*((*this)._field_l))._field_kind))._method_prim()))._field_kind;
	jule::Str _407513_rk = (*((*((*((*this)._field_r))._field_kind))._method_prim()))._field_kind;
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("<<", 2) || _match_expr == jule::Str(">>", 2)) {
			_case_begin_4403868112:;
			{
				if ((!(_1a9133243_is_int(_407413_lk))) || (!(_1a9133243_is_int(_407513_rk)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_407413_lk),jule::Any(_407513_rk)}));
					return nullptr;
				}
				if ((!(_1a8b431d7_is_ok_for_shifting((*this)._field_r)))) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("bit shifting value is must be unsigned", 38),jule::Slice<jule::Any>());
					return nullptr;
				}
				if ((*((*this)._field_l))._method_is_const() && (!((*((*this)._field_r))._method_is_const()))) {
					(*((*this)._field_l))._field_kind=(*((*this)._field_r))._field_kind;
				}
				return (*this)._field_l;
			}
		}
		_match_end_4403868032:;
	}
	if ((!((*this)._method_numbers_are_compatibile(_407413_lk,_407513_rk)))) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(_407413_lk),jule::Any(_407513_rk)}));
		return nullptr;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2) || _match_expr == jule::Str("!=", 2) || _match_expr == jule::Str("<", 1) || _match_expr == jule::Str(">", 1) || _match_expr == jule::Str(">=", 2) || _match_expr == jule::Str("<=", 2)) {
			_case_begin_4403883248:;
			{
				return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("bool", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
			}
		}
		_match_end_4403881280:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("+", 1) || _match_expr == jule::Str("-", 1) || _match_expr == jule::Str("*", 1) || _match_expr == jule::Str("/", 1) || _match_expr == jule::Str("&", 1) || _match_expr == jule::Str("|", 1) || _match_expr == jule::Str("^", 1)) {
			_case_begin_4403890752:;
			{
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_4403890912:;
			{
				(*this)._method_mod();
				(*this)._method_set_type_to_greater();
				return (*this)._field_l;
			}
		}
		else {
			_case_begin_4403888368:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for integer type(s)", 45),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind)}));
				return nullptr;
			}
		}
		_match_end_4403887072:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_prim(void) {
	jule::Ptr<_1a6a19a50_Prim> _414013_prim = (*((*((*this)._field_l))._field_kind))._method_prim();
	{
		
		if ((*(_414013_prim))._method_is_bool()) {
			_case_begin_4403898400:;
			{
				return (*this)._method_eval_bool();
			}
		}
		else if ((*(_414013_prim))._method_is_str()) {
			_case_begin_4403898512:;
			{
				return (*this)._method_eval_str();
			}
		}
		_match_end_4403898240:;
	}
	if ((*((*((*this)._field_r))._field_kind))._method_prim() == nullptr) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any((*(_414013_prim))._method_to_str()),jule::Any((*((*((*this)._field_r))._field_kind))._method_to_str())}));
		return nullptr;
	}
	{
		
		if (_1a9133243_is_float((*(_414013_prim))._field_kind)) {
			_case_begin_4403908720:;
			{
				return (*this)._method_eval_float();
			}
		}
		else if (_1a9133243_is_int((*(_414013_prim))._field_kind)) {
			_case_begin_4403908880:;
			{
				return (*this)._method_eval_int();
			}
		}
		else {
			_case_begin_4403906992:;
			{
				return nullptr;
			}
		}
		_match_end_4403906912:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval_op(void) {
	{
		
		if ((*((*((*this)._field_l))._field_kind))._method_void()) {
			_case_begin_4403914400:;
			{
				(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("operator @ is not defined for type @", 36),jule::Slice<jule::Any>({jule::Any((*this)._field_op._field_kind),jule::Any(jule::Str("void", 4))}));
				return nullptr;
			}
		}
		else if (((*((*((*this)._field_r))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_r))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_4403914608:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4403914704;
			}
		}
		else if (((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr) && (*((*((*((*this)._field_l))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_4403914704:;
			{
				return (*this)._method_eval_any();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_is_nil()) {
			_case_begin_4403913328:;
			{
				return (*this)._method_eval_nil();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_enm() != nullptr) {
			_case_begin_4403913424:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4403913520;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_enm() != nullptr) {
			_case_begin_4403913520:;
			{
				return (*this)._method_eval_enum();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_sptr() != nullptr) {
			_case_begin_4403913616:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4403914832;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_sptr() != nullptr) {
			_case_begin_4403914832:;
			{
				return (*this)._method_eval_sptr();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_ptr() != nullptr) {
			_case_begin_4403914928:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4403915024;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_ptr() != nullptr) {
			_case_begin_4403915024:;
			{
				return (*this)._method_eval_ptr();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_arr() != nullptr) {
			_case_begin_4403915120:;
			{
				return (*this)._method_eval_arr();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_slc() != nullptr) {
			_case_begin_4403915216:;
			{
				return (*this)._method_eval_slc();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_fnc() != nullptr) {
			_case_begin_4403915312:;
			{
				return (*this)._method_eval_fn();
			}
		}
		else if ((*((*((*this)._field_r))._field_kind))._method_trt() != nullptr) {
			_case_begin_4403915408:;
			{
				std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple((*this)._field_r,(*this)._field_l);
				goto _case_begin_4403915504;
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_trt() != nullptr) {
			_case_begin_4403915504:;
			{
				return (*this)._method_eval_trait();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_strct() != nullptr) {
			_case_begin_4403915616:;
			{
				return (*this)._method_eval_struct();
			}
		}
		else if ((*((*((*this)._field_l))._field_kind))._method_prim() != nullptr) {
			_case_begin_4403915728:;
			{
				return (*this)._method_eval_prim();
			}
		}
		else {
			_case_begin_4403913024:;
			{
				return nullptr;
			}
		}
		_match_end_4403911616:;
	}
}



inline void _1a8b431d7_BinaryEval::_method_eval_const(jule::Ptr<_1a8b431d7_Data>& _421834_d) {
	{
		
		if (_421834_d == nullptr) {
			_case_begin_4403964656:;
			{
				return;
			}
		}
		else if ((!((*((*this)._field_l))._method_is_const())) || (!((*((*this)._field_r))._method_is_const()))) {
			_case_begin_4403964768:;
			{
				(*(_421834_d))._field_constant=nullptr;
				return;
			}
		}
		_match_end_4403964432:;
	}
	{
		auto &_match_expr{ (*this)._field_op._field_kind };
		
		if (_match_expr == jule::Str("==", 2)) {
			_case_begin_4403966592:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("!=", 2)) {
			_case_begin_4403968272:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool((!((*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant))))));
			}
		}
		else if (_match_expr == jule::Str("::", 2)) {
			_case_begin_4403968368:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_or((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("&&", 2)) {
			_case_begin_4403968464:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_and((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">", 1)) {
			_case_begin_4403969888:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_gt((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str("<", 1)) {
			_case_begin_4403970000:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool((*((*((*this)._field_l))._field_constant))._method_lt((*((*((*this)._field_r))._field_constant))));
			}
		}
		else if (_match_expr == jule::Str(">=", 2)) {
			_case_begin_4403970112:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool(((*((*((*this)._field_l))._field_constant))._method_gt((*((*((*this)._field_r))._field_constant))) || (*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant)))));
			}
		}
		else if (_match_expr == jule::Str("<=", 2)) {
			_case_begin_4403970224:;
			{
				(*(_421834_d))._field_constant=_1b6dd59aa_Const::_static_method_new_bool(((*((*((*this)._field_l))._field_constant))._method_lt((*((*((*this)._field_r))._field_constant))) || (*((*((*this)._field_l))._field_constant))._method_eqs((*((*((*this)._field_r))._field_constant)))));
			}
		}
		else if (_match_expr == jule::Str("+", 1)) {
			_case_begin_4403970336:;
			{
				(*((*((*this)._field_l))._field_constant))._method_add((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("-", 1)) {
			_case_begin_4403970448:;
			{
				(*((*((*this)._field_l))._field_constant))._method_sub((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4403970560:;
			{
				(*((*((*this)._field_l))._field_constant))._method_mul((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("/", 1)) {
			_case_begin_4403970672:;
			{
				jule::Bool _427117_ok = (*((*((*this)._field_l))._field_constant))._method_div((*((*((*this)._field_r))._field_constant)));
				if ((!(_427117_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("%", 1)) {
			_case_begin_4403970784:;
			{
				jule::Bool _427817_ok = (*((*((*this)._field_l))._field_constant))._method_mod((*((*((*this)._field_r))._field_constant)));
				if ((!(_427817_ok)) && ((*((*((*this)._field_r))._field_constant))._method_as_f64() == 0LL)) {
					(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("divide by zero", 14),jule::Slice<jule::Any>());
				}
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("|", 1)) {
			_case_begin_4403970896:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_or((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("&", 1)) {
			_case_begin_4403971008:;
			{
				(*((*((*this)._field_l))._field_constant))._method_bitwise_and((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("^", 1)) {
			_case_begin_4403971120:;
			{
				(*((*((*this)._field_l))._field_constant))._method_xor((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str("<<", 2)) {
			_case_begin_4403971232:;
			{
				(*((*((*this)._field_l))._field_constant))._method_lshift((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		else if (_match_expr == jule::Str(">>", 2)) {
			_case_begin_4403971344:;
			{
				(*((*((*this)._field_l))._field_constant))._method_rshift((*((*((*this)._field_r))._field_constant)));
				(*(_421834_d))._field_constant=(*((*this)._field_l))._field_constant;
			}
		}
		_match_end_4403969760:;
	}
	(*(_421834_d))._field_model=jule::Any((*(_421834_d))._field_constant);
}



inline void _1a8b431d7_BinaryEval::_method_post_const(jule::Ptr<_1a8b431d7_Data>& _430830_d) {
	if ((!((*(_430830_d))._method_is_const()))) {
		return;
	}
	_1a8b431d7_normalize_bitsize(_430830_d);
	_1a8b431d7_fit_type(_430830_d);
}



inline void _1a8b431d7_BinaryEval::_method_check_data(jule::Ptr<_1a8b431d7_Data>& _431634_d) {
	jule::Ptr<_1a691a500_FnIns> _431713_f = (*((*(_431634_d))._field_kind))._method_fnc();
	if (((_431713_f != nullptr) && ((*(_431713_f))._field_decl != nullptr)) && (*((*(_431713_f))._field_decl))._method_is_method()) {
		(*((*this)._field_e))._method_push_err((*this)._field_op,jule::Str("invalid expression used for binary operation", 44),jule::Slice<jule::Any>());
	}
}



inline void _1a8b431d7_BinaryEval::_method_check_datas(void) {
	(*this)._method_check_data((*this)._field_l);
	(*this)._method_check_data((*this)._field_r);
}



inline void _1a8b431d7_BinaryEval::_method_set_model(jule::Ptr<_1a8b431d7_Data>& _432833_d) {
	if ((*(_432833_d))._method_is_const()) {
		return;
	}
	jule::Ptr<_1a8b431d7_Data> _433318_l = (*this)._field_l;
	jule::Ptr<_1a8b431d7_Data> _433325_r = (*this)._field_r;
	std::tie(_433318_l,_433325_r) = std::make_tuple((*this)._field_l,(*this)._field_r);
	if ((!((*(_433318_l))._method_good_operand(_433325_r)))) {
		std::tie(_433318_l,_433325_r) = std::make_tuple(_433325_r,_433318_l);
	}
	(*(_432833_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BinopExprModel>(new( std::nothrow ) _1a69b8d2e_BinopExprModel(jule::new_struct<_1a69b8d2e_OperandExprModel>(new( std::nothrow ) _1a69b8d2e_OperandExprModel((*(_433318_l))._field_kind,(*(_433318_l))._field_model)),jule::new_struct<_1a69b8d2e_OperandExprModel>(new( std::nothrow ) _1a69b8d2e_OperandExprModel((*(_433325_r))._field_kind,(*(_433325_r))._field_model)),(*this)._field_op)));
}



inline void _1a8b431d7_BinaryEval::_method_post_eval(jule::Ptr<_1a8b431d7_Data>& _435133_d) {
	(*this)._method_post_const(_435133_d);
	(*(_435133_d))._field_lvalue=false;
	(*this)._method_set_model(_435133_d);
	(*((*this)._field_e))._method_apply_numeric_prefix(_435133_d);
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_solve_explicit(jule::Ptr<_1a8b431d7_Data>& _436038_l,jule::Ptr<_1a8b431d7_Data>& _436053_r) {
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_436038_l,_436053_r);
	(*this)._method_check_datas();
	jule::Ptr<_1a8b431d7_Data> _436517_d = (*this)._method_eval_op();
	std::tie((*this)._field_l,(*this)._field_r) = std::make_tuple(_436038_l,_436053_r);
	(*this)._method_eval_const(_436517_d);
	if (_436517_d != nullptr) {
		(*this)._method_post_eval(_436517_d);
	}
	return _436517_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_BinaryEval::_method_eval(jule::Ptr<_1b7509a90_BinopExpr>& _437828_op) {
	if ((*(_437828_op))._field_op._field_kind == jule::Str("=", 1)) {
		(*((*this)._field_e))._method_push_err((*(_437828_op))._field_op,jule::Str("assignments not available for expressions", 41),jule::Slice<jule::Any>());
		(*((*this)._field_e))._method_push_suggestion(jule::Str("use clear imperative approach, comes relevant assignment statement before the expression", 88),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _438517_l = (*((*this)._field_e))._method_eval_expr_kind((*(_437828_op))._field_left);
	if ((_438517_l == nullptr) || ((*(_438517_l))._field_kind == nullptr)) {
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _439017_r = (*((*this)._field_e))._method_eval_expr_kind((*(_437828_op))._field_right);
	if ((_439017_r == nullptr) || ((*(_439017_r))._field_kind == nullptr)) {
		return nullptr;
	}
	(*this)._field_op=(*(_437828_op))._field_op;
	jule::Ptr<_1a8b431d7_Data> _439717_d = (*this)._method_solve_explicit(_438517_l,_439017_r);
	if (((_439717_d != nullptr) && (*(_438517_l))._field_is_rune) && (*(_439017_r))._field_is_rune) {
		(*(_439717_d))._field_is_rune=true;
	}
	return _439717_d;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a8b431d7_BinaryEval &_Src) {
	_Stream << "BinaryEval{";
	_Stream << "e:" << _Src._field_e << ", ";
	_Stream << "l:" << _Src._field_l << ", ";
	_Stream << "r:" << _Src._field_r << ", ";
	_Stream << "op:" << _Src._field_op;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_TypeAlias &_Src) {
	_Stream << "TypeAlias{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "generic:" << _Src._field_generic << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "doc:" << _Src._field_doc << ", ";
	_Stream << "refers:" << _Src._field_refers;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_IndexingExprModel &_Src) {
	_Stream << "IndexingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_IndexingExpr &_Src) {
	_Stream << "IndexingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "index:" << _Src._field_index;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_SlicingExpr &_Src) {
	_Stream << "SlicingExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "start:" << _Src._field_start << ", ";
	_Stream << "to:" << _Src._field_to;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_TernaryExpr &_Src) {
	_Stream << "TernaryExpr{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "condition:" << _Src._field_condition << ", ";
	_Stream << "true_expr:" << _Src._field_true_expr << ", ";
	_Stream << "false_expr:" << _Src._field_false_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_SlicingExprModel &_Src) {
	_Stream << "SlicingExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_TraitSubIdentExprModel &_Src) {
	_Stream << "TraitSubIdentExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_GenericDecl &_Src) {
	_Stream << "GenericDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_LabelSt &_Src) {
	_Stream << "LabelSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_GotoSt &_Src) {
	_Stream << "GotoSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "label:" << _Src._field_label;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_FallSt &_Src) {
	_Stream << "FallSt{";
	_Stream << "token:" << _Src._field_token;
	_Stream << "}";
	return _Stream;
}



inline void _1a6a19a50_TypeChecker::_method_push_err(_1b7553d92_Token _69927_token,jule::Str _69941_fmt,jule::Slice<jule::Any> _69954_args) {
	(*((*this)._field_s))._method_push_err(_69927_token,_69941_fmt,_69954_args);
}



inline void _1a6a19a50_TypeChecker::_method_allow_builtin(void) {
	(*this)._field_dis_builtin=false;
}



inline void _1a6a19a50_TypeChecker::_method_disallow_builtin(void) {
	(*this)._field_dis_builtin=true;
}



inline jule::Ptr<_1a6a19a50_Prim> _1a6a19a50_TypeChecker::_method_build_prim(jule::Ptr<_1b7509a90_IdentTypeDecl>& _70630_decl) {
	if ((!(_1a6a19a50_is_prim((*(_70630_decl))._field_ident)))) {
		(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((*(_70630_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_70630_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_70630_decl))._field_ident)}));
		return nullptr;
	}
	return _1a6a19a50_build_prim_type((*(_70630_decl))._field_ident);
}



inline void _1a6a19a50_TypeChecker::_method_push_cycle_error(jule::Any _72031_def1,jule::Any _72042_def2,jule::Str& _72058_message) {
	
	jule::Fn<jule::Str(jule::Any&)> _72313_get_ident = jule::Fn<jule::Str(jule::Any&)>([=](jule::Any& _72329_def) mutable -> jule::Str {
		{
			auto &_match_expr{ _72329_def };
			
			if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeAlias>>()) {
				_case_begin_4404378064:;
				{
					return (*(_72329_def.operator jule::Ptr<_1a6a19a50_TypeAlias>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
				_case_begin_4404377808:;
				{
					return (*(_72329_def.operator jule::Ptr<_1b7905331_Struct>()))._field_ident;
				}
			}
			else if (_match_expr.type_is<jule::Ptr<_1a6bb9150_Enum>>()) {
				_case_begin_4404377904:;
				{
					return (*(_72329_def.operator jule::Ptr<_1a6bb9150_Enum>()))._field_ident;
				}
			}
			else {
				_case_begin_4404376880:;
				{
					return jule::Str();
				}
			}
			_match_end_4404376688:;
		}
	});
	jule::Str _73213_def1_ident = _72313_get_ident(_72031_def1);
	jule::Str _73313_def2_ident = _72313_get_ident(_72042_def2);
	jule::Str _73413_refers_to = _1b6986b22_logf(jule::Str("@ refers to @", 13),jule::Slice<jule::Any>({jule::Any(_73213_def1_ident),jule::Any(_73313_def2_ident)}));
	_72058_message=((_1cea16edb_repeat(jule::Str(" ", 1),4LL) + _73413_refers_to) + jule::Str("\n", 1)) + _72058_message;
}



inline jule::Bool _1a6a19a50_TypeChecker::_method_check_cross_cycle(jule::Any _73832_decl,jule::Str& _73848_message) {
	{
		auto &_match_expr{ _73832_decl };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeAlias>>()) {
			_case_begin_4404389840:;
			{
				jule::Ptr<_1a6a19a50_TypeAlias> _74117_ta = _73832_decl.operator jule::Ptr<_1a6a19a50_TypeAlias>();
				{
					auto &expr = (*(_74117_ta))._field_refers;
					auto it = expr.begin();
					_iter_begin_4404392864:;
					if (it != expr.end()) {
						jule::Any &_1a6a19a50_d = *it;
						{
							if (_1a6a19a50_d == (*((*this)._field_referencer))._field_owner) {
								(*this)._method_push_cycle_error(jule::Any(_74117_ta),_1a6a19a50_d,_73848_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(_1a6a19a50_d,_73848_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_74117_ta),_1a6a19a50_d,_73848_message);
								return false;
							}
						}
						_iter_next_4404392864:;
						++it;
						goto _iter_begin_4404392864;
					}
					_iter_end_4404392864:;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4404389952:;
			{
				jule::Ptr<_1b7905331_Struct> _75517_s = _73832_decl.operator jule::Ptr<_1b7905331_Struct>();
				{
					auto &expr = (*(_75517_s))._field_depends;
					auto it = expr.begin();
					_iter_begin_4404400896:;
					if (it != expr.end()) {
						jule::Ptr<_1b7905331_Struct> &_1a6a19a50_d = *it;
						{
							if ((*((*this)._field_referencer))._field_owner == _1a6a19a50_d) {
								(*this)._method_push_cycle_error(jule::Any(_75517_s),jule::Any(_1a6a19a50_d),_73848_message);
								return false;
							}
							if ((!((*this)._method_check_cross_cycle(jule::Any(_1a6a19a50_d),_73848_message)))) {
								(*this)._method_push_cycle_error(jule::Any(_75517_s),jule::Any(_1a6a19a50_d),_73848_message);
								return false;
							}
						}
						_iter_next_4404400896:;
						++it;
						goto _iter_begin_4404400896;
					}
					_iter_end_4404400896:;
				}
			}
		}
		_match_end_4404389632:;
	}
	return true;
}



inline jule::Bool _1a6a19a50_TypeChecker::_method_check_illegal_cycles(jule::Ptr<_1b7509a90_IdentTypeDecl>& _77640_ident,jule::Any _77667_decl) {
	jule::Bool _77680_ok = jule::Bool();
	if ((*this)._field_referencer == nullptr) {
		_77680_ok = true;
		return _77680_ok;
	}
	{
		auto &_match_expr{ _77667_decl };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4404411264:;
			{
				if ((*this)._field_not_plain) {
					_77680_ok = true;
					return _77680_ok;
				}
			}
		}
		_match_end_4404411184:;
	}
	if (_77667_decl == (*((*this)._field_referencer))._field_owner) {
		(*this)._method_push_err((*(_77640_ident))._field_token,jule::Str("illegal cycle in declaration, @ refers to itself", 48),jule::Slice<jule::Any>({jule::Any((*((*this)._field_referencer))._field_ident)}));
		_77680_ok = false;
		return _77680_ok;
	}
	jule::Str _79517_message = jule::Str();
	if ((!((*this)._method_check_cross_cycle(_77667_decl,_79517_message)))) {
		jule::Str _79821_err_msg = _79517_message;
		_79517_message=jule::Str();
		(*this)._method_push_cycle_error((*((*this)._field_referencer))._field_owner,_77667_decl,_79517_message);
		_79821_err_msg=_79821_err_msg + _79517_message;
		(*this)._method_push_err((*(_77640_ident))._field_token,jule::Str("illegal cross cycle in declarations;\n@", 38),jule::Slice<jule::Any>({jule::Any(_79821_err_msg)}));
		_77680_ok = false;
		return _77680_ok;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeAlias>>()) {
			_case_begin_4404424368:;
			{
				{
					(*((*((*this)._field_referencer))._field_refs))=jule::append((*((*((*this)._field_referencer))._field_refs)),jule::Slice<jule::Any>({_77667_decl}));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4404424464:;
			{
				{
					auto &_match_expr{ _77667_decl };
					
					if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
						_case_begin_4404425856:;
						{
							jule::Ptr<_1b7905331_Struct> _81325_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_1b7905331_Struct>();
							(*(_81325_s))._field_depends = jule::alloc_for_append((*(_81325_s))._field_depends,1);(*(_81325_s))._field_depends.__push(_77667_decl.operator jule::Ptr<_1b7905331_Struct>());
						}
					}
					_match_end_4404425776:;
				}
			}
		}
		_match_end_4404417680:;
	}
	_77680_ok = true;
	return _77680_ok;
}



inline jule::Trait<_1a6a19a50_Kind> _1a6a19a50_TypeChecker::_method_from_type_alias(jule::Ptr<_1b7509a90_IdentTypeDecl>& _82135_decl,jule::Ptr<_1a6a19a50_TypeAlias>& _82162_ta) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_82162_ta))._field_public,(*(_82162_ta))._field_token)))) {
		(*this)._method_push_err((*(_82135_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_82135_decl))._field_ident)}));
		return nullptr;
	}
	(*(_82162_ta))._field_used=true;
	if ((*(_82135_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_82135_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_82135_decl))._field_ident)}));
		return nullptr;
	}
	jule::Bool _83417_ok = (*this)._method_check_illegal_cycles(_82135_decl,jule::Any(_82162_ta));
	if ((!(_83417_ok))) {
		return nullptr;
	}
	_83417_ok=(*((*this)._field_s))._method_check_type_alias_decl_kind(_82162_ta,(*this)._field_lookup);
	if ((!(_83417_ok))) {
		return nullptr;
	}
	return jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind((((*(_82162_ta))._field_cpp_linked) ? ((*(_82162_ta))._field_ident) : ((*((*((*(_82162_ta))._field_kind))._field_kind))._field_cpp_ident)),(*(_82162_ta))._field_generic,jule::Bool(),(*((*((*(_82162_ta))._field_kind))._field_kind))._field_kind));
}



inline jule::Ptr<_1a6bb9150_Enum> _1a6a19a50_TypeChecker::_method_from_enum(jule::Ptr<_1b7509a90_IdentTypeDecl>& _85229_decl,jule::Ptr<_1a6bb9150_Enum>& _85256_e) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_85256_e))._field_public,(*(_85256_e))._field_token)))) {
		(*this)._method_push_err((*(_85229_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_85229_decl))._field_ident)}));
		return nullptr;
	}
	if ((*(_85229_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_85229_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_85229_decl))._field_ident)}));
		return nullptr;
	}
	return _85256_e;
}



inline jule::Bool _1a6a19a50_TypeChecker::_method_check_struct_ins(jule::Ptr<_1b7905331_StructIns>& _86640_ins,_1b7553d92_Token& _86658_error_token) {
	jule::Bool _86680_ok = jule::Bool();
	if ((*(_86640_ins))._field_checked) {
		_86680_ok = true;
		return _86680_ok;
	}
	(*(_86640_ins))._field_checked=true;
	if (((*this)._field_referencer != nullptr) && ((*((*this)._field_referencer))._field_owner == (*(_86640_ins))._field_decl)) {
		_86680_ok = true;
		return _86680_ok;
	}
	jule::Ptr<_1a8acbe95_SymbolTable> _87717_old_file = (*((*this)._field_s))._field_file;
	__JULE_DEFER({
		(*((*this)._field_s))._method_set_current_file(_87717_old_file);
	});
	jule::Ptr<_1a8acbe95_SymbolTable> _88017_file = _1a7002752_find_file((*((*this)._field_s))._field_files,(*((*(_86640_ins))._field_decl))._field_token._field_file);
	if (_88017_file != nullptr) {
		(*((*this)._field_s))._method_set_current_file(_88017_file);
	}
	jule::Ptr<_1a6a19a50_Referencer> _88517_referencer = jule::new_struct<_1a6a19a50_Referencer>(new( std::nothrow ) _1a6a19a50_Referencer((*((*(_86640_ins))._field_decl))._field_ident,jule::Any((*(_86640_ins))._field_decl),nullptr));
	jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _89017_generics = jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>::alloc(0LL,static_cast<jule::I64>((*(_86640_ins))._field_generics.len()));
	{
		auto &expr = (*(_86640_ins))._field_generics;
		auto it = expr.begin();
		_iter_begin_4404481136:;
		if (it != expr.end()) {
			jule::Int _1a6a19a50_i = it - expr.begin();
			jule::Ptr<_1a6a19a50_TypeKind> _1a6a19a50_g = *it;
			{
				_89017_generics = jule::alloc_for_append(_89017_generics,1);_89017_generics.__push(jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias(jule::Ptr<_1b7509a90_ScopeTree>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),_1b7553d92_Token(),(*((*((*(_86640_ins))._field_decl))._field_generics[_1a6a19a50_i]))._field_ident,jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),_1a6a19a50_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_4404481136:;
			++it;
			_1a6a19a50_i++;
			goto _iter_begin_4404481136;
		}
		_iter_end_4404481136:;
	}
	jule::Ptr<_1a8acbe95_SymbolTable> _90017_old_sema_file = (*((*((*(_86640_ins))._field_decl))._field_sema))._field_file;
	__JULE_DEFER({
		(*((*((*(_86640_ins))._field_decl))._field_sema))._method_set_current_file(_90017_old_sema_file);
	});
	_1a6a19a50_TypeChecker _90517_tc = _1a6a19a50_TypeChecker((*((*(_86640_ins))._field_decl))._field_sema,(*((*(_86640_ins))._field_decl))._field_sema,_88517_referencer,_1b7553d92_Token(),jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>(),_89017_generics,jule::Bool(),jule::Bool(),jule::Bool());
	{
		auto &expr = (*(_86640_ins))._field_fields;
		auto it = expr.begin();
		_iter_begin_4404492416:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_FieldIns> _1a6a19a50_field = *it;
			{
				jule::Ptr<_1a6a19a50_TypeKind> _91421_kind = _90517_tc._method_check_decl((*((*((*(_1a6a19a50_field))._field_decl))._field_kind))._field_decl);
				_86680_ok=_91421_kind != nullptr;
				if ((((*((*(_86640_ins))._field_decl))._field_sema != nullptr) && ((*this)._field_s != (*((*(_86640_ins))._field_decl))._field_sema)) && ((*((*((*(_86640_ins))._field_decl))._field_sema))._field_errors.len() > 0LL)) {
					(*((*this)._field_s))._field_errors=jule::append((*((*this)._field_s))._field_errors,(*((*((*(_86640_ins))._field_decl))._field_sema))._field_errors);
					(*((*((*(_86640_ins))._field_decl))._field_sema))._field_errors=nullptr;
				}
				if ((!(_86680_ok))) {
					_86680_ok = false;
					return _86680_ok;
				}
				(*(_1a6a19a50_field))._field_kind=_91421_kind;
				if ((*((*(_1a6a19a50_field))._field_kind))._method_mutable()) {
					(*(_86640_ins))._field_mutable=true;
					(*((*this)._field_s))._method_check_struct_ins_derive_clone(_86640_ins);
				}
			}
			_iter_next_4404492416:;
			++it;
			goto _iter_begin_4404492416;
		}
		_iter_end_4404492416:;
	}
	if ((*(_86640_ins))._field_generics.len() > 0LL) {
		(*((*this)._field_s))._method_check_field_defaults(_86640_ins);
		{
			auto &expr = (*(_86640_ins))._field_methods;
			auto it = expr.begin();
			_iter_begin_4404511616:;
			if (it != expr.end()) {
				jule::Ptr<_1a691a500_Fn> _1a6a19a50_m = *it;
				{
					(*((*this)._field_s))._method_check_type_method(_86640_ins,_1a6a19a50_m);
				}
				_iter_next_4404511616:;
				++it;
				goto _iter_begin_4404511616;
			}
			_iter_end_4404511616:;
		}
	}
	_86680_ok = true;
	return _86680_ok;
}



inline void _1a6a19a50_TypeChecker::_method_append_used_struct_reference(jule::Ptr<_1b7905331_Struct>& _94352_s) {
	if ((*this)._field_referencer == nullptr) {
		return;
	}
	{
		auto &_match_expr{ (*((*this)._field_referencer))._field_owner };
		
		if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4404516848:;
			{
				jule::Ptr<_1b7905331_Struct> _95021_ref_s = (*((*this)._field_referencer))._field_owner.operator jule::Ptr<_1b7905331_Struct>();
				if ((!((*(_95021_ref_s))._method_is_uses(_94352_s)))) {
					(*(_95021_ref_s))._field_uses = jule::alloc_for_append((*(_95021_ref_s))._field_uses,1);(*(_95021_ref_s))._field_uses.__push(_94352_s);
				}
			}
		}
		_match_end_4404516768:;
	}
}



inline jule::Ptr<_1b7905331_StructIns> _1a6a19a50_TypeChecker::_method_from_struct(jule::Ptr<_1b7509a90_IdentTypeDecl>& _95735_decl,jule::Ptr<_1b7905331_Struct>& _95762_s) {
	if ((!((*((*this)._field_s))._method_is_accessible_define((*(_95762_s))._field_public,(*(_95762_s))._field_token)))) {
		(*this)._method_push_err((*(_95735_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_95735_decl))._field_ident)}));
		return nullptr;
	}
	if ((*this)._field_selection) {
		if ((*(_95735_decl))._field_generics.len() > 0LL) {
			(*this)._method_push_err((*(_95735_decl))._field_token,jule::Str("generics are not allowed in this scope", 38),jule::Slice<jule::Any>());
			return nullptr;
		}
		return jule::new_struct_ptr<_1b7905331_StructIns>(new( std::nothrow ) _1b7905331_StructIns(jule::Bool(),_95762_s,jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1b7905331_FieldIns>>(),jule::Slice<jule::Ptr<_1a691a500_Fn>>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>()));
	}
	if ((*this)._field_ignore_generics.len() > 0LL) {
		return nullptr;
	}
	jule::Bool _98117_ok = (*this)._field_not_plain || (*this)._method_check_illegal_cycles(_95735_decl,jule::Any(_95762_s));
	if ((!(_98117_ok))) {
		return nullptr;
	}
	(*this)._method_append_used_struct_reference(_95762_s);
	jule::Ptr<_1b7905331_StructIns> _98717_ins = (*(_95762_s))._method_instance();
	(*(_98717_ins))._field_generics=jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_95735_decl))._field_generics.len()));
	jule::Ptr<_1a6a19a50_Referencer> _98917_referencer = (*this)._field_referencer;
	(*this)._field_referencer=nullptr;
	{
		auto &expr = (*(_95735_decl))._field_generics;
		auto it = expr.begin();
		_iter_begin_4404542656:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_TypeDecl> _1a6a19a50_g = *it;
			{
				jule::Ptr<_1a6a19a50_TypeKind> _99221_kind = (*this)._method_build((*(_1a6a19a50_g))._field_kind);
				if (_99221_kind == nullptr) {
					_98117_ok=false;
					goto _iter_next_4404542656;
				}
				(*(_98717_ins))._field_generics = jule::alloc_for_append((*(_98717_ins))._field_generics,1);(*(_98717_ins))._field_generics.__push(_99221_kind);
			}
			_iter_next_4404542656:;
			++it;
			goto _iter_begin_4404542656;
		}
		_iter_end_4404542656:;
	}
	(*this)._field_referencer=_98917_referencer;
	if ((!(_98117_ok))) {
		return nullptr;
	}
	_98117_ok=(*((*this)._field_s))._method_check_generic_quantity(static_cast<jule::I64>((*((*(_98717_ins))._field_decl))._field_generics.len()),static_cast<jule::I64>((*(_98717_ins))._field_generics.len()),(*(_95735_decl))._field_token);
	if ((!(_98117_ok))) {
		return nullptr;
	}
	jule::Ptr<_1b7905331_StructIns> _101117_exist_instance = (*(_95762_s))._method_append_instance(_98717_ins);
	if (_101117_exist_instance != nullptr) {
		return _101117_exist_instance;
	}
	_98117_ok=(*this)._method_check_struct_ins(_98717_ins,(*(_95735_decl))._field_token);
	if ((!(_98117_ok))) {
		return nullptr;
	}
	return _98717_ins;
}



inline jule::Trait<_1a6a19a50_Kind> _1a6a19a50_TypeChecker::_method_get_def(jule::Ptr<_1b7509a90_IdentTypeDecl>& _102631_decl) {
	{
		auto &expr = (*this)._field_ignore_generics;
		auto it = expr.begin();
		_iter_begin_4404560384:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_GenericDecl> &_1a6a19a50_g = *it;
			{
				if ((*(_1a6a19a50_g))._field_ident == (*(_102631_decl))._field_ident) {
					return _1a6a19a50_build_prim_type((*(_1a6a19a50_g))._field_ident);
				}
			}
			_iter_next_4404560384:;
			++it;
			goto _iter_begin_4404560384;
		}
		_iter_end_4404560384:;
	}
	{
		auto &expr = (*this)._field_use_generics;
		auto it = expr.begin();
		_iter_begin_4404562144:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeAlias> _1a6a19a50_g = *it;
			{
				if ((*(_1a6a19a50_g))._field_ident == (*(_102631_decl))._field_ident) {
					jule::Ptr<_1b7905331_StructIns> _103525_st = (*((*((*(_1a6a19a50_g))._field_kind))._field_kind))._method_strct();
					if (_103525_st != nullptr) {
						jule::Bool _103725_ok = (*this)._method_check_illegal_cycles(_102631_decl,jule::Any((*(_103525_st))._field_decl));
						if ((!(_103725_ok))) {
							return nullptr;
						}
					}
					return (*((*((*(_1a6a19a50_g))._field_kind))._field_kind))._field_kind;
				}
			}
			_iter_next_4404562144:;
			++it;
			goto _iter_begin_4404562144;
		}
		_iter_end_4404562144:;
	}
	if ((!((*(_102631_decl))._field_cpp_linked))) {
		jule::Ptr<_1a6bb9150_Enum> _104721_e = (*this)._field_lookup.get()._method_find_enum((*(_102631_decl))._field_ident);
		if (_104721_e != nullptr) {
			return (*this)._method_from_enum(_102631_decl,_104721_e);
		}
		jule::Ptr<_1b76b472d_Trait> _105221_t = (*this)._field_lookup.get()._method_find_trait((*(_102631_decl))._field_ident);
		if ((_105221_t == nullptr) && (!((*this)._field_dis_builtin))) {
			_105221_t=_1a90790e0_find_builtin_trait((*(_102631_decl))._field_ident);
		}
		if (_105221_t != nullptr) {
			if ((!((*((*this)._field_s))._method_is_accessible_define((*(_105221_t))._field_public,(*(_105221_t))._field_token)))) {
				(*this)._method_push_err((*(_102631_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_102631_decl))._field_ident)}));
				return nullptr;
			}
			if ((*(_102631_decl))._field_generics.len() > 0LL) {
				(*this)._method_push_err((*(_102631_decl))._field_token,jule::Str("type @ not supports generics", 28),jule::Slice<jule::Any>({jule::Any((*(_102631_decl))._field_ident)}));
				return nullptr;
			}
			return _105221_t;
		}
	} else if ((*this)._field_selection) {
		(*this)._method_push_err((*(_102631_decl))._field_token,jule::Str("cpp-linked definitions are not allowed in this scope", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1b7905331_Struct> _107317_s = (*this)._field_lookup.get()._method_find_struct((*(_102631_decl))._field_ident,(*(_102631_decl))._field_cpp_linked);
	if (_107317_s != nullptr) {
		return (*this)._method_from_struct(_102631_decl,_107317_s);
	}
	jule::Ptr<_1a6a19a50_TypeAlias> _107817_ta = (*this)._field_lookup.get()._method_find_type_alias((*(_102631_decl))._field_ident,(*(_102631_decl))._field_cpp_linked);
	if ((_107817_ta == nullptr) && (!((*this)._field_dis_builtin))) {
		_107817_ta=_1a90790e0_find_builtin_type_alias((*(_102631_decl))._field_ident);
	}
	if (_107817_ta != nullptr) {
		return (*this)._method_from_type_alias(_102631_decl,_107817_ta);
	}
	(*this)._method_push_err((*(_102631_decl))._field_token,jule::Str("undefined identifier: @", 23),jule::Slice<jule::Any>({jule::Any((*(_102631_decl))._field_ident)}));
	return nullptr;
}



inline jule::Trait<_1a6a19a50_Kind> _1a6a19a50_TypeChecker::_method_build_ident(jule::Ptr<_1b7509a90_IdentTypeDecl> _109034_decl) {
	{
		
		if (_1a6a19a50_is_prim((*(_109034_decl))._field_ident)) {
			_case_begin_4404607920:;
			{
				return (*this)._method_build_prim(_109034_decl);
			}
		}
		else {
			_case_begin_4404606544:;
			{
				return (*this)._method_get_def(_109034_decl);
			}
		}
		_match_end_4404606368:;
	}
}



inline jule::Ptr<_1a6a19a50_Sptr> _1a6a19a50_TypeChecker::_method_build_sptr_from_type(jule::Ptr<_1a6a19a50_TypeKind>& _109744_elem) {
	{
		
		if (_109744_elem == nullptr) {
			_case_begin_4404609648:;
			{
				return nullptr;
			}
		}
		else if ((*(_109744_elem))._method_strct() != nullptr) {
			_case_begin_4404611328:;
			{
				jule::Ptr<_1b7905331_StructIns> _110417_s = (*(_109744_elem))._method_strct();
				if (((*(_110417_s))._field_decl != nullptr) && (*((*(_110417_s))._field_decl))._field_cpp_linked) {
					(*this)._method_push_err((*this)._field_error_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
					return nullptr;
				}
			}
		}
		else if (((*(_109744_elem))._method_arr() != nullptr) && (*((*(_109744_elem))._method_arr()))._field_auto) {
			_case_begin_4404611424:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4404606960:;
	}
	return jule::new_struct_ptr<_1a6a19a50_Sptr>(new( std::nothrow ) _1a6a19a50_Sptr(_109744_elem));
}



inline jule::Ptr<_1a6a19a50_Sptr> _1a6a19a50_TypeChecker::_method_build_sptr(jule::Ptr<_1b7509a90_SptrTypeDecl> _112033_decl) {
	jule::Bool _112113_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_112113_not_plain;
	});
	jule::Ptr<_1a6a19a50_TypeKind> _112517_elem = (*this)._method_check_decl((*(_112033_decl))._field_elem);
	return (*this)._method_build_sptr_from_type(_112517_elem);
}



inline jule::Ptr<_1a6a19a50_Ptr> _1a6a19a50_TypeChecker::_method_build_ptr_from_type(jule::Ptr<_1a6a19a50_TypeKind>& _112943_elem) {
	{
		
		if (_112943_elem == nullptr) {
			_case_begin_4404631056:;
			{
				return nullptr;
			}
		}
		else if (((*(_112943_elem))._method_arr() != nullptr) && (*((*(_112943_elem))._method_arr()))._field_auto) {
			_case_begin_4404631168:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return jule::new_ptr<_1a6a19a50_Ptr>();
			}
		}
		_match_end_4404630832:;
	}
	return jule::new_struct_ptr<_1a6a19a50_Ptr>(new( std::nothrow ) _1a6a19a50_Ptr(_112943_elem));
}



inline jule::Ptr<_1a6a19a50_Ptr> _1a6a19a50_TypeChecker::_method_build_ptr(jule::Ptr<_1b7509a90_PtrTypeDecl> _114532_decl) {
	jule::Bool _114613_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_114613_not_plain;
	});
	jule::Ptr<_1a6a19a50_TypeKind> _115017_elem = nullptr;
	if ((!((*(_114532_decl))._method_is_unsafe()))) {
		_115017_elem=(*this)._method_check_decl((*(_114532_decl))._field_elem);
		return (*this)._method_build_ptr_from_type(_115017_elem);
	}
	return jule::new_struct_ptr<_1a6a19a50_Ptr>(new( std::nothrow ) _1a6a19a50_Ptr(_115017_elem));
}



inline jule::Ptr<_1a6a19a50_Slc> _1a6a19a50_TypeChecker::_method_build_slc(jule::Ptr<_1b7509a90_SlcTypeDecl> _116232_decl) {
	jule::Bool _116313_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_116313_not_plain;
	});
	jule::Ptr<_1a6a19a50_TypeKind> _116717_elem = (*this)._method_check_decl((*(_116232_decl))._field_elem);
	{
		
		if (_116717_elem == nullptr) {
			_case_begin_4404651648:;
			{
				return nullptr;
			}
		}
		else if (((*(_116717_elem))._method_arr() != nullptr) && (*((*(_116717_elem))._method_arr()))._field_auto) {
			_case_begin_4404651760:;
			{
				(*this)._method_push_err((*((*(_116232_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4404651488:;
	}
	return jule::new_struct_ptr<_1a6a19a50_Slc>(new( std::nothrow ) _1a6a19a50_Slc(_116717_elem));
}



inline jule::Ptr<_1a6a19a50_Arr> _1a6a19a50_TypeChecker::_method_build_arr(jule::Ptr<_1b7509a90_ArrTypeDecl> _118432_decl) {
	jule::Bool _118513_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_118513_not_plain;
	});
	jule::Int _118917_n = 0LL;
	if ((!((*(_118432_decl))._method_auto_sized()))) {
		jule::Ptr<_1a8b431d7_Data> _119221_size = (*((*((*this)._field_s))._method_eval((*this)._field_lookup)))._method_eval_expr((*(_118432_decl))._field_size);
		if (_119221_size == nullptr) {
			return nullptr;
		}
		if ((!((*(_119221_size))._method_is_const()))) {
			(*this)._method_push_err((*((*(_118432_decl))._field_size))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
			return nullptr;
		} else if (((*((*(_119221_size))._field_kind))._method_prim() == nullptr) || (!(_1a9133243_is_int((*((*((*(_119221_size))._field_kind))._method_prim()))._field_kind)))) {
			(*this)._method_push_err((*((*(_118432_decl))._field_size))._field_token,jule::Str("array size must be integer", 26),jule::Slice<jule::Any>());
			return nullptr;
		}
		_118917_n=static_cast<jule::Int>(static_cast<jule::Int>((*((*(_119221_size))._field_constant))._method_as_i64()));
		if (_118917_n < 0LL) {
			(*this)._method_push_err((*((*(_118432_decl))._field_elem))._field_token,jule::Str("array size must be positive integer", 35),jule::Slice<jule::Any>());
			return nullptr;
		}
	}
	jule::Ptr<_1a6a19a50_TypeKind> _121217_elem = (*this)._method_check_decl((*(_118432_decl))._field_elem);
	{
		
		if (_121217_elem == nullptr) {
			_case_begin_4404683216:;
			{
				return nullptr;
			}
		}
		else if (((*(_121217_elem))._method_arr() != nullptr) && (*((*(_121217_elem))._method_arr()))._field_auto) {
			_case_begin_4404683312:;
			{
				(*this)._method_push_err((*((*(_118432_decl))._field_elem))._field_token,jule::Str("array must have explicit size", 29),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4404682848:;
	}
	return jule::new_struct_ptr<_1a6a19a50_Arr>(new( std::nothrow ) _1a6a19a50_Arr((*(_118432_decl))._method_auto_sized(),_118917_n,_121217_elem));
}



inline jule::Ptr<_1a6a19a50_Map> _1a6a19a50_TypeChecker::_method_build_map(jule::Ptr<_1b7509a90_MapTypeDecl> _123132_decl) {
	jule::Bool _123213_not_plain = (*this)._field_not_plain;
	(*this)._field_not_plain=true;
	__JULE_DEFER({
		(*this)._field_not_plain=_123213_not_plain;
	});
	jule::Ptr<_1a6a19a50_TypeKind> _123617_key = (*this)._method_check_decl((*(_123132_decl))._field_key);
	if (_123617_key == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _124117_val = (*this)._method_check_decl((*(_123132_decl))._field_val);
	if (_124117_val == nullptr) {
		return nullptr;
	}
	if ((*(_124117_val))._method_enm() != nullptr) {
		(*this)._method_push_err((*((*(_123132_decl))._field_val))._field_token,jule::Str("maps do not support enums as map key type", 41),jule::Slice<jule::Any>());
	}
	return jule::new_struct_ptr<_1a6a19a50_Map>(new( std::nothrow ) _1a6a19a50_Map(_123617_key,_124117_val));
}



inline jule::Ptr<_1a6a19a50_Tuple> _1a6a19a50_TypeChecker::_method_build_tuple(jule::Ptr<_1b7509a90_TupleTypeDecl> _125534_decl) {
	jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _125617_types = jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>::alloc(0LL,static_cast<jule::I64>((*(_125534_decl))._field_types.len()));
	{
		auto &expr = (*(_125534_decl))._field_types;
		auto it = expr.begin();
		_iter_begin_4404707216:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_TypeDecl> _1a6a19a50_t = *it;
			{
				jule::Ptr<_1a6a19a50_TypeKind> _125821_kind = (*this)._method_check_decl(_1a6a19a50_t);
				if (_125821_kind == nullptr) {
					return nullptr;
				}
				_125617_types = jule::alloc_for_append(_125617_types,1);_125617_types.__push(_125821_kind);
			}
			_iter_next_4404707216:;
			++it;
			goto _iter_begin_4404707216;
		}
		_iter_end_4404707216:;
	}
	return jule::new_struct_ptr<_1a6a19a50_Tuple>(new( std::nothrow ) _1a6a19a50_Tuple(_125617_types));
}



inline jule::Bool _1a6a19a50_TypeChecker::_method_check_fn_types(jule::Ptr<_1a691a500_FnIns>& _126838_f) {
	jule::Bool _126851_ok = jule::Bool();
	{
		auto &expr = (*(_126838_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4404714608:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_ParamIns> _1a6a19a50_p = *it;
			{
				(*(_1a6a19a50_p))._field_kind=(*this)._method_build((*((*((*((*(_1a6a19a50_p))._field_decl))._field_kind))._field_decl))._field_kind);
				_126851_ok=(*(_1a6a19a50_p))._field_kind != nullptr;
				if ((!(_126851_ok))) {
					_126851_ok = false;
					return _126851_ok;
				}
			}
			_iter_next_4404714608:;
			++it;
			goto _iter_begin_4404714608;
		}
		_iter_end_4404714608:;
	}
	if ((!((*((*(_126838_f))._field_decl))._method_is_void()))) {
		(*(_126838_f))._field_result=(*this)._method_build((*((*((*((*((*(_126838_f))._field_decl))._field_result))._field_kind))._field_decl))._field_kind);
		_126851_ok = (*(_126838_f))._field_result != nullptr;
		return _126851_ok;
	}
	_126851_ok = true;
	return _126851_ok;
}



inline jule::Ptr<_1a691a500_FnIns> _1a6a19a50_TypeChecker::_method_build_fn(jule::Ptr<_1b7509a90_FnDecl> _128531_decl) {
	if ((*(_128531_decl))._field_generics.len() > 0LL) {
		(*this)._method_push_err((*(_128531_decl))._field_token,jule::Str("genericed functions cannot use as anonymous function", 52),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a691a500_Fn> _129117_f = _1b6a47496_build_fn(_128531_decl);
	jule::Ptr<_1a691a500_FnIns> _129217_ins = (*(_129117_f))._method_instance_force();
	(*(_129217_ins))._field_anon=true;
	jule::Bool _129513_ok = (*this)._method_check_fn_types(_129217_ins);
	if ((!(_129513_ok))) {
		return nullptr;
	}
	return _129217_ins;
}



inline jule::Trait<_1a6a19a50_Kind> _1a6a19a50_TypeChecker::_method_build_by_namespace(jule::Ptr<_1b7509a90_NamespaceTypeDecl> _130341_decl) {
	jule::Str _130413_path = _1a6a19a50_build_link_path_by_tokens((*(_130341_decl))._field_idents);
	jule::Ptr<_1a6e9a574_ImportInfo> _130517_imp = (*this)._field_lookup.get()._method_select_package(jule::Fn<jule::Bool(jule::Ptr<_1a6e9a574_ImportInfo>)>([=](jule::Ptr<_1a6e9a574_ImportInfo> _130553_imp) mutable -> jule::Bool {
		if (((*(_130341_decl))._field_idents.len() == 1LL) && ((*(_130553_imp))._field_alias == _130413_path)) {
			return true;
		}
		return ((*(_130553_imp))._field_link_path == _130413_path) && (*(_130553_imp))._method_is_accessible_via_selection();
	}));
	if ((_130517_imp == nullptr) || (!((*(_130517_imp))._method_is_lookupable(jule::Str("self", 4))))) {
		(*this)._method_push_err((*(_130341_decl))._field_idents[0LL],jule::Str("undefined namespace: @", 22),jule::Slice<jule::Any>({jule::Any(_130413_path)}));
		return nullptr;
	}
	jule::Trait<_1a9062c33_Lookup> _131717_lookup = (*this)._field_lookup;
	(*this)._field_lookup=_130517_imp;
	(*this)._method_disallow_builtin();
	jule::Trait<_1a6a19a50_Kind> _132117_kind = (*this)._method_build_ident((*(_130341_decl))._field_kind);
	(*this)._method_allow_builtin();
	(*this)._field_lookup=_131717_lookup;
	return _132117_kind;
}



inline jule::Ptr<_1a6a19a50_TypeKind> _1a6a19a50_TypeChecker::_method_build(jule::Any& _132929_decl_kind) {
	jule::Trait<_1a6a19a50_Kind> _133017_kind = nullptr;
	{
		auto &_match_expr{ _132929_decl_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeKind>>()) {
			_case_begin_4404757408:;
			{
				_133017_kind=_132929_decl_kind.operator jule::Ptr<_1a6a19a50_TypeKind>();
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_IdentTypeDecl>>()) {
			_case_begin_4404760672:;
			{
				jule::Trait<_1a6a19a50_Kind> _133721_t = (*this)._method_build_ident(_132929_decl_kind.operator jule::Ptr<_1b7509a90_IdentTypeDecl>());
				if (_133721_t != nullptr) {
					_133017_kind=_133721_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_SptrTypeDecl>>()) {
			_case_begin_4404760768:;
			{
				jule::Ptr<_1a6a19a50_Sptr> _134321_t = (*this)._method_build_sptr(_132929_decl_kind.operator jule::Ptr<_1b7509a90_SptrTypeDecl>());
				if (_134321_t != nullptr) {
					_133017_kind=_134321_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_PtrTypeDecl>>()) {
			_case_begin_4404760208:;
			{
				jule::Ptr<_1a6a19a50_Ptr> _134921_t = (*this)._method_build_ptr(_132929_decl_kind.operator jule::Ptr<_1b7509a90_PtrTypeDecl>());
				if (_134921_t != nullptr) {
					_133017_kind=_134921_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_SlcTypeDecl>>()) {
			_case_begin_4404760304:;
			{
				jule::Ptr<_1a6a19a50_Slc> _135521_t = (*this)._method_build_slc(_132929_decl_kind.operator jule::Ptr<_1b7509a90_SlcTypeDecl>());
				if (_135521_t != nullptr) {
					_133017_kind=_135521_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_ArrTypeDecl>>()) {
			_case_begin_4404758208:;
			{
				jule::Ptr<_1a6a19a50_Arr> _136121_t = (*this)._method_build_arr(_132929_decl_kind.operator jule::Ptr<_1b7509a90_ArrTypeDecl>());
				if (_136121_t != nullptr) {
					_133017_kind=_136121_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_MapTypeDecl>>()) {
			_case_begin_4404758304:;
			{
				jule::Ptr<_1a6a19a50_Map> _136721_t = (*this)._method_build_map(_132929_decl_kind.operator jule::Ptr<_1b7509a90_MapTypeDecl>());
				if (_136721_t != nullptr) {
					_133017_kind=_136721_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_TupleTypeDecl>>()) {
			_case_begin_4404758400:;
			{
				jule::Ptr<_1a6a19a50_Tuple> _137321_t = (*this)._method_build_tuple(_132929_decl_kind.operator jule::Ptr<_1b7509a90_TupleTypeDecl>());
				if (_137321_t != nullptr) {
					_133017_kind=_137321_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnDecl>>()) {
			_case_begin_4404758496:;
			{
				jule::Ptr<_1a691a500_FnIns> _137921_t = (*this)._method_build_fn(_132929_decl_kind.operator jule::Ptr<_1b7509a90_FnDecl>());
				if (_137921_t != nullptr) {
					_133017_kind=_137921_t;
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_NamespaceTypeDecl>>()) {
			_case_begin_4404760896:;
			{
				jule::Trait<_1a6a19a50_Kind> _138521_t = (*this)._method_build_by_namespace(_132929_decl_kind.operator jule::Ptr<_1b7509a90_NamespaceTypeDecl>());
				if (_138521_t != nullptr) {
					_133017_kind=_138521_t;
				}
			}
		}
		else {
			_case_begin_4404757904:;
			{
				(*this)._method_push_err((*this)._field_error_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
				return nullptr;
			}
		}
		_match_end_4404757824:;
	}
	if (_133017_kind == nullptr) {
		return nullptr;
	}
	{
		auto &_match_expr{ _133017_kind };
		
		if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeKind>>()) {
			_case_begin_4404787440:;
			{
				return _133017_kind.operator jule::Ptr<_1a6a19a50_TypeKind>();
			}
		}
		else {
			_case_begin_4404790736:;
			{
				return jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_133017_kind));
			}
		}
		_match_end_4404763216:;
	}
}



inline jule::Ptr<_1a6a19a50_TypeKind> _1a6a19a50_TypeChecker::_method_check_decl(jule::Ptr<_1b7509a90_TypeDecl>& _141034_decl) {
	_1b7553d92_Token _141217_error_token = (*this)._field_error_token;
	(*this)._field_error_token=(*(_141034_decl))._field_token;
	jule::Ptr<_1a6a19a50_TypeKind> _141517_kind = (*this)._method_build((*(_141034_decl))._field_kind);
	(*this)._field_error_token=_141217_error_token;
	return _141517_kind;
}



inline void _1a6a19a50_TypeChecker::_method_check(jule::Ptr<_1a6a19a50_TypeSymbol>& _142129_t) {
	if ((*(_142129_t))._field_decl == nullptr) {
		return;
	}
	jule::Ptr<_1a6a19a50_TypeKind> _142617_kind = (*this)._method_check_decl((*(_142129_t))._field_decl);
	if (_142617_kind == nullptr) {
		(*(_142129_t))._method_remove_kind();
		return;
	}
	(*(_142129_t))._field_kind=_142617_kind;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a6a19a50_TypeChecker &_Src) {
	_Stream << "TypeChecker{";
	_Stream << "s:" << _Src._field_s << ", ";
	_Stream << "lookup:" << _Src._field_lookup << ", ";
	_Stream << "referencer:" << _Src._field_referencer << ", ";
	_Stream << "error_token:" << _Src._field_error_token << ", ";
	_Stream << "ignore_generics:" << _Src._field_ignore_generics << ", ";
	_Stream << "use_generics:" << _Src._field_use_generics << ", ";
	_Stream << "not_plain:" << _Src._field_not_plain << ", ";
	_Stream << "dis_builtin:" << _Src._field_dis_builtin << ", ";
	_Stream << "selection:" << _Src._field_selection;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_AssignLeft &_Src) {
	_Stream << "AssignLeft{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_AssignSt &_Src) {
	_Stream << "AssignSt{";
	_Stream << "declarative:" << _Src._field_declarative << ", ";
	_Stream << "setter:" << _Src._field_setter << ", ";
	_Stream << "left:" << _Src._field_left << ", ";
	_Stream << "right:" << _Src._field_right;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Ptr<_1b719bcc6_IR>,jule::Slice<_1b6986b22_Log>> _1b719bcc6_IR::_static_method_build(jule::Str _2625_path,jule::Int _2636_flags) {
	jule::Ptr<_1b74c00a5_PlainImporter> _2717_importer = _1b74c00a5_PlainImporter::_static_method_new();
	jule::Slice<jule::Ptr<_1b74bea77_Ast>> _2818_files;
	jule::Slice<_1b6986b22_Log> _2829_logs;
	std::tie(_2818_files,_2829_logs) = (*(_2717_importer))._method_import_package(_2625_path,true);
	if (_2829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_2829_logs);
	}
	if (_2818_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1a6e9a574_Package> _3718_pkg;
	std::tie(_3718_pkg,_2829_logs) = _1a6a15b7d_analyze_package(_2818_files,_2717_importer,_2636_flags);
	if (_2829_logs.len() > 0LL) {
		return std::make_tuple(nullptr,_2829_logs);
	}
	jule::Ptr<_1b719bcc6_IR> _4217_ir = jule::new_struct<_1b719bcc6_IR>(new( std::nothrow ) _1b719bcc6_IR(jule::Slice<jule::Str>(),_3718_pkg,(*(_2717_importer))._field_all_packages,_1b719c3c0_OrderedDefines()));
	(*(_4217_ir))._field_passes=_1b719bcc6_get_all_unique_passes((*(_4217_ir))._field_main,(*(_4217_ir))._field_used);
	return std::make_tuple(_4217_ir,nullptr);
}



inline void _1b719bcc6_IR::_method_append_structs(jule::Ptr<_1a6e9a574_Package>& _5334_p,jule::Slice<jule::Ptr<_1b7905331_Struct>>& _5358_buffer) {
	{
		auto &expr = (*(_5334_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4405121392:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1b719bcc6_f = *it;
			{
				{
					auto &expr = (*(_1b719bcc6_f))._field_structs;
					auto it = expr.begin();
					_iter_begin_4405123296:;
					if (it != expr.end()) {
						jule::Ptr<_1b7905331_Struct> _1b719bcc6_s = *it;
						{
							if ((!((*(_1b719bcc6_s))._field_cpp_linked))) {
								_5358_buffer = jule::alloc_for_append(_5358_buffer,1);_5358_buffer.__push(_1b719bcc6_s);
							}
						}
						_iter_next_4405123296:;
						++it;
						goto _iter_begin_4405123296;
					}
					_iter_end_4405123296:;
				}
			}
			_iter_next_4405121392:;
			++it;
			goto _iter_begin_4405121392;
		}
		_iter_end_4405121392:;
	}
}



inline jule::Slice<jule::Ptr<_1b7905331_Struct>> _1b719bcc6_IR::_method_get_all_structures(void) {
	jule::Slice<jule::Ptr<_1b7905331_Struct>> _6617_buffer = nullptr;
	(*this)._method_append_structs((*this)._field_main,_6617_buffer);
	{
		auto &expr = (*this)._field_used;
		auto it = expr.begin();
		_iter_begin_4405128416:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1b719bcc6_u = *it;
			{
				if ((!((*(_1b719bcc6_u))._field_cpp_linked))) {
					(*this)._method_append_structs((*(_1b719bcc6_u))._field_package,_6617_buffer);
				}
			}
			_iter_next_4405128416:;
			++it;
			goto _iter_begin_4405128416;
		}
		_iter_end_4405128416:;
	}
	return _6617_buffer;
}



inline void _1b719bcc6_IR::_method_order(void) {
	(*this)._field_ordered._field_structs=(*this)._method_get_all_structures();
	_1b719c3c0_DefineOrderer::_static_method_order_structures((*this)._field_ordered._field_structs);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b719bcc6_IR &_Src) {
	_Stream << "IR{";
	_Stream << "passes:" << _Src._field_passes << ", ";
	_Stream << "main:" << _Src._field_main << ", ";
	_Stream << "used:" << _Src._field_used << ", ";
	_Stream << "ordered:" << _Src._field_ordered;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Comment &_Src) {
	_Stream << "Comment{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "text:" << _Src._field_text;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_ParamDecl::_method_is_self(void) {
	return _1cea16edb_has_suffix((*this)._field_ident,jule::Str("self", 4));
}



inline jule::Bool _1b7509a90_ParamDecl::_method_is_ref(void) {
	return ((*this)._field_ident != jule::Str()) && ((*this)._field_ident[0LL] == '&');
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_ParamDecl &_Src) {
	_Stream << "ParamDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "variadic:" << _Src._field_variadic << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "ident:" << _Src._field_ident;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_FnDecl::_method_is_anon(void) {
	return (*this)._field_ident == jule::Str("<anonymous>", 11);
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_FnDecl &_Src) {
	_Stream << "FnDecl{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "global:" << _Src._field_global << ", ";
	_Stream << "unsafety:" << _Src._field_unsafety << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "exceptional:" << _Src._field_exceptional << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "generics:" << _Src._field_generics << ", ";
	_Stream << "result:" << _Src._field_result << ", ";
	_Stream << "params:" << _Src._field_params;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_VarDecl &_Src) {
	_Stream << "VarDecl{";
	_Stream << "scope:" << _Src._field_scope << ", ";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "ident:" << _Src._field_ident << ", ";
	_Stream << "cpp_linked:" << _Src._field_cpp_linked << ", ";
	_Stream << "public:" << _Src._field_public << ", ";
	_Stream << "mutable:" << _Src._field_mutable << ", ";
	_Stream << "constant:" << _Src._field_constant << ", ";
	_Stream << "statically:" << _Src._field_statically << ", ";
	_Stream << "reference:" << _Src._field_reference << ", ";
	_Stream << "directives:" << _Src._field_directives << ", ";
	_Stream << "doc_comments:" << _Src._field_doc_comments << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinPanicCallExprModel &_Src) {
	_Stream << "BuiltinPanicCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1a69b8d2e_BuiltinAssertCallExprModel &_Src) {
	_Stream << "BuiltinAssertCallExprModel{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "log:" << _Src._field_log;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_RetSt &_Src) {
	_Stream << "RetSt{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "expr:" << _Src._field_expr;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_Iter::_method_is_inf(void) {
	return (*this)._field_kind == nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_Iter &_Src) {
	_Stream << "Iter{";
	_Stream << "token:" << _Src._field_token << ", ";
	_Stream << "kind:" << _Src._field_kind << ", ";
	_Stream << "scope:" << _Src._field_scope;
	_Stream << "}";
	return _Stream;
}



inline jule::Bool _1b7509a90_WhileKind::_method_is_while_next(void) {
	return (*this)._field_next != nullptr;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_WhileKind &_Src) {
	_Stream << "WhileKind{";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "next:" << _Src._field_next << ", ";
	_Stream << "next_token:" << _Src._field_next_token;
	_Stream << "}";
	return _Stream;
}







std::ostream &operator<<(std::ostream &_Stream, const _1b7509a90_RangeKind &_Src) {
	_Stream << "RangeKind{";
	_Stream << "in_token:" << _Src._field_in_token << ", ";
	_Stream << "expr:" << _Src._field_expr << ", ";
	_Stream << "key_a:" << _Src._field_key_a << ", ";
	_Stream << "key_b:" << _Src._field_key_b;
	_Stream << "}";
	return _Stream;
}



inline std::tuple<jule::Int,jule::Bool> _1a70d117c_ArgParser::_method_parse_integer_0(jule::Str& _18632_s,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)> _18640_parser) {
	jule::Int _18684_x = jule::Int();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s == jule::Str()) {
			_case_begin_4408845472:;
			{
				_18684_x = 0LL;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_1cea16edb_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_4408845568:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_1cea16edb_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_4408845888:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_1cea16edb_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_4408845984:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_4408846080:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_4408843536:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_4408843360:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}

inline std::tuple<jule::Uint,jule::Bool> _1a70d117c_ArgParser::_method_parse_integer_1(jule::Str& _18632_s,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)> _18640_parser) {
	jule::Uint _18684_x = jule::Uint();
	jule::Bool _18690_ok = jule::Bool();
	{
		
		if (_18632_s == jule::Str()) {
			_case_begin_4408877696:;
			{
				_18684_x = 0LL;
				_18690_ok = false;
				return std::make_tuple(_18684_x,_18690_ok);
			}
		}
		else if (_1cea16edb_has_prefix(_18632_s,jule::Str("0x", 2))) {
			_case_begin_4408877792:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),16LL);
			}
		}
		else if (_1cea16edb_has_prefix(_18632_s,jule::Str("0b", 2))) {
			_case_begin_4408878112:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),2LL);
			}
		}
		else if (_1cea16edb_has_prefix(_18632_s,jule::Str("0o", 2))) {
			_case_begin_4408878208:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(2LL),8LL);
			}
		}
		else if (_18632_s[0LL] == '0') {
			_case_begin_4408878304:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s.slice(1LL),8LL);
			}
		}
		else {
			_case_begin_4408875760:;
			{
				std::tie(_18684_x,_18690_ok) = _18640_parser(_18632_s,10LL);
			}
		}
		_match_end_4408875584:;
	}
	return std::make_tuple(_18684_x,_18690_ok);
}



inline jule::Str _1a70d117c_ArgParser::_method_get_data(void) {
	if (((*this)._field_i + 1LL) >= (*this)._field_args.len()) {
		return jule::Str();
	}
	((*this)._field_i)++;
	return (*this)._field_args[(*this)._field_i];
}



inline jule::VoidExceptional _1a70d117c_ArgParser::_method_process_flag(jule::Trait<_1a70d117c_CommonFlag>& _21736_flag) {
	{
		auto &_match_expr{ _21736_flag };
		
		if (_match_expr.type_is<jule::Ptr<_1a70d117c_Flag_3>>()) {
			_case_begin_4408817984:;
			{
				jule::Ptr<_1a70d117c_Flag_3> _22021_bf = _21736_flag.operator jule::Ptr<_1a70d117c_Flag_3>();
				(*((*(_22021_bf))._field__data))=(!((*(_22021_bf))._field__default));
				return jule::VoidExceptional();
			}
		}
		_match_end_4408817904:;
	}
	jule::Str _22513_data = (*this)._method_get_data();
	if (_22513_data == jule::Str()) {
		return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression missing", 20));
	}
	{
		auto &_match_expr{ _21736_flag };
		
		if (_match_expr.type_is<jule::Ptr<_1a70d117c_Flag_0>>()) {
			_case_begin_4408822432:;
			{
				jule::Ptr<_1a70d117c_Flag_0> _23221_intf = _21736_flag.operator jule::Ptr<_1a70d117c_Flag_0>();
				jule::Bool _23333_ok;
				std::tie((*((*(_23221_intf))._field__data)),_23333_ok) = (*this)._method_parse_integer_0(_22513_data,jule::Fn<std::tuple<jule::Int,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _23372_s,jule::Int _23380_base) mutable -> std::tuple<jule::Int,jule::Bool> {
					jule::I64 _23422_x;
					jule::Int _23425_err;
					std::tie(_23422_x,_23425_err) = _211cb0593_parse_int(_23372_s,_23380_base,64LL);
					return std::make_tuple(_23422_x,_23425_err == 0LLU);
				}));
				if ((!(_23333_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression must be valid signed integer", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a70d117c_Flag_1>>()) {
			_case_begin_4408825120:;
			{
				jule::Ptr<_1a70d117c_Flag_1> _24221_uintf = _21736_flag.operator jule::Ptr<_1a70d117c_Flag_1>();
				jule::Bool _24334_ok;
				std::tie((*((*(_24221_uintf))._field__data)),_24334_ok) = (*this)._method_parse_integer_1(_22513_data,jule::Fn<std::tuple<jule::Uint,jule::Bool>(jule::Str,jule::Int)>([=](jule::Str _24374_s,jule::Int _24382_base) mutable -> std::tuple<jule::Uint,jule::Bool> {
					jule::U64 _24422_x;
					jule::Int _24425_err;
					std::tie(_24422_x,_24425_err) = _211cb0593_parse_uint(_24374_s,_24382_base,64LL);
					return std::make_tuple(_24422_x,_24425_err == 0LLU);
				}));
				if ((!(_24334_ok))) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression must be valid unsigned integer", 43));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a70d117c_Flag_2>>()) {
			_case_begin_4408825216:;
			{
				jule::Ptr<_1a70d117c_Flag_2> _25221_ff = _21736_flag.operator jule::Ptr<_1a70d117c_Flag_2>();
				jule::Int _25331_err;
				std::tie((*((*(_25221_ff))._field__data)),_25331_err) = _211cadddd_parse_float(_22513_data,64LL);
				if (_25331_err != 0LLU) {
					return jule::VoidExceptional((jule::Str("--", 2) + _21736_flag.get()._method_name()) + jule::Str(": expression must be valid floating-point", 41));
				}
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a70d117c_Flag_4>>()) {
			_case_begin_4408825312:;
			{
				(*((*(_21736_flag.operator jule::Ptr<_1a70d117c_Flag_4>()))._field__data))=_22513_data;
			}
		}
		_match_end_4408822272:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1a70d117c_ArgParser::_method_single_dash(jule::Str& _26331_arg) {
	jule::Slice<jule::I32> _26413_rarg = static_cast<jule::Slice<jule::I32>>(_26331_arg).slice(1LL);
	{
		auto &expr = _26413_rarg;
		auto it = expr.begin();
		_iter_begin_4408900912:;
		if (it != expr.end()) {
			jule::I32 &_1a70d117c_r = *it;
			{
				jule::Trait<_1a70d117c_CommonFlag> _26621_flag = (*this)._field_set._method_find_flag_short(_1a70d117c_r);
				if (_26621_flag == nullptr) {
					return jule::VoidExceptional((_26331_arg + jule::Str(": flag is not exist: ", 21)) + static_cast<jule::Str>(_1a70d117c_r));
				}
				({
					auto except = (*this)._method_process_flag(_26621_flag);
					if (!except.ok()) {
						return jule::VoidExceptional(except.error);
					}
				});
			}
			_iter_next_4408900912:;
			++it;
			goto _iter_begin_4408900912;
		}
		_iter_end_4408900912:;
	} return jule::VoidExceptional(); }



inline jule::VoidExceptional _1a70d117c_ArgParser::_method_double_dash(jule::Str& _27531_arg) {
	jule::Trait<_1a70d117c_CommonFlag> _27617_flag = (*this)._field_set._method_find_flag(_27531_arg.slice(2LL));
	if (_27617_flag == nullptr) {
		return jule::VoidExceptional(_27531_arg + jule::Str(": flag is not exist", 19));
	}
	({
		auto except = (*this)._method_process_flag(_27617_flag);
		if (!except.ok()) {
			return jule::VoidExceptional(except.error);
		}
	}); return jule::VoidExceptional(); }



inline jule::VoidExceptional _1a70d117c_ArgParser::_method_try_arg(void) {
	jule::Str _28513_arg = (*this)._field_args[(*this)._field_i];
	if ((*this)._field_args.len() == 0LL) {
		return jule::VoidExceptional();
	}
	if (_28513_arg[0LL] == '-') {
		if (((*this)._field_args.len() > 1LL) && (_28513_arg[1LL] == '-')) {
			({
				auto except = (*this)._method_double_dash(_28513_arg);
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
			return jule::VoidExceptional();
		}
		({
			auto except = (*this)._method_single_dash(_28513_arg);
			if (!except.ok()) {
				return jule::VoidExceptional(except.error);
			}
		});
		return jule::VoidExceptional();
	}
	(*this)._field_content = jule::alloc_for_append((*this)._field_content,1);(*this)._field_content.__push(_28513_arg); return jule::VoidExceptional(); }



inline jule::VoidExceptional _1a70d117c_ArgParser::_method_parse(void) {
	for (; (*this)._field_i < (*this)._field_args.len(); ((*this)._field_i)++) {
		{
			({
				auto except = (*this)._method_try_arg();
				if (!except.ok()) {
					return jule::VoidExceptional(except.error);
				}
			});
		}
	_iter_next_4408925440:;
	}
	_iter_end_4408925440:; return jule::VoidExceptional(); }







std::ostream &operator<<(std::ostream &_Stream, const _1a70d117c_ArgParser &_Src) {
	_Stream << "ArgParser{";
	_Stream << "set:" << _Src._field_set << ", ";
	_Stream << "args:" << _Src._field_args << ", ";
	_Stream << "content:" << _Src._field_content << ", ";
	_Stream << "i:" << _Src._field_i;
	_Stream << "}";
	return _Stream;
}



inline void _1e828d848_free(void* _4524_ptr) {
	free(_4524_ptr);
}



inline jule::Str _1ce8d9a07_byte_ptr_to_str(jule::U8* _6931_s) {
	if (_6931_s == nullptr) {
		return jule::Str();
	}
	{
		return static_cast<jule::Str>(_6931_s);
	}
}



inline jule::Int _211c51d4d_get_last_errno(void) {
	return errno;
}



inline jule::Int _211c54070_stat(jule::U8* _4020_path,struct stat* _4037_stat) {
	return static_cast<jule::Int>(stat(((char*)(_4020_path)), _4037_stat));
}



inline jule::Int _211c54070_open(jule::U8* _4520_path,jule::Int _4533_flag,jule::Int _4544_mode) {
	return static_cast<jule::Int>(open(((char*)(_4520_path)),_4533_flag,_4544_mode));
}



inline jule::U8* _211c54070_getcwd(jule::U8* _5122_buff,jule::Uint _5135_bufflen) {
	return ((jule::U8*)(getcwd(((char*)(_5122_buff)),_5135_bufflen)));
}



inline DIR* _211c54070_opendir(jule::U8* _5623_path) {
	return opendir(((char*)(_5623_path)));
}



inline struct dirent* _211c54070_readdir(DIR* _5927_dir) {
	return readdir(_5927_dir);
}



inline jule::Int _211c54070_closedir(DIR* _6228_dir) {
	return static_cast<jule::Int>(closedir(_6228_dir));
}



inline jule::Int _211c54070_mkdir(jule::U8* _7121_path,jule::Int _7134_mode) {
	return static_cast<jule::Int>(mkdir(((char*)(_7121_path)),_7134_mode));
}



inline jule::Int _211c54070_rmdir(jule::U8* _7621_path) {
	return static_cast<jule::Int>(rmdir(((char*)(_7621_path))));
}



inline jule::Int _211c54070_unlink(jule::U8* _7922_path) {
	return static_cast<jule::Int>(unlink(((char*)(_7922_path))));
}



inline jule::I64 _1e825ca7b_seek(jule::Int _2613_handle,jule::I64 _2626_offset,jule::Int _2639_origin) {
	return static_cast<jule::I64>(lseek(_2613_handle,_2626_offset,_2639_origin));
}



inline jule::Int _1e825ca7b_read(jule::Int _3120_handle,void* _3137_buff,jule::Uint _3152_n) {
	return static_cast<jule::Int>(read(_3120_handle,_3137_buff,_3152_n));
}



inline jule::Int _1e825ca7b_close(jule::Int _3614_handle) {
	return static_cast<jule::Int>(close(_3614_handle));
}



inline jule::Int _1e825ca7b_write(jule::Int _3921_handle,void* _3934_buff,jule::Uint _3949_n) {
	return static_cast<jule::Int>(write(_3921_handle,_3934_buff,_3949_n));
}



inline void _1e825ca7b_exit(jule::Int _4413_code) {
	exit(_4413_code);
}



inline jule::Int _211b8062d_get_last_os_error(void) {
	jule::Int _309_err = _211c51d4d_get_last_errno();
	{
		auto &_match_expr{ _309_err };
		
		if (_match_expr == 13LL) {
			_case_begin_4379405232:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_4379405328:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 62LL) {
			_case_begin_4379405424:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 63LL) {
			_case_begin_4379405824:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_4379405920:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_4379406016:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_4379404736:;
			{
				return 6LLU;
			}
		}
		else {
			_case_begin_4379403280:;
			{
				return 1LLU;
			}
		}
		_match_end_4379404160:;
	}
}



inline jule::Slice<jule::Str> _211c409b8_args(void) {
	return jule::args();
}



inline jule::Exceptional<jule::Str> _211c409b8_working_dir(void) {
	return jule::Exceptional<jule::Str>(jule::Any(),({
		auto except = _211c4c970___getwd();
		(except.ok()) ? (except.result) : ({{
			return jule::Exceptional<jule::Str>(except.error);
			return jule::Exceptional<jule::Str>(except.error);
		} jule::Str();});
	}));
}



inline jule::Exceptional<jule::Str> _211c4c970___getwd(void) {
	jule::U8* _1113_buff = _211c54070_getcwd(nullptr,0LLU);
	if (_1113_buff == nullptr) {
		return jule::Exceptional<jule::Str>(_211b8062d_get_last_os_error());
	}
	jule::Str _159_pwd = _1ce8d9a07_byte_ptr_to_str(_1113_buff);
	{
		_1e828d848_free(_1113_buff);
	}
	return jule::Exceptional<jule::Str>(jule::Any(),_159_pwd);
}



inline void _211b70ab3_push_opt_level(jule::Int _3323_level) {
	_211b70ab3_OPT_COPY=_3323_level >= 1LLU;
	_211b70ab3_OPT_DEADCODE=_3323_level >= 1LLU;
	_211b70ab3_OPT_APPEND=_3323_level >= 1LLU;
	_211b70ab3_OPT_MATH=_3323_level >= 1LLU;
	_211b70ab3_OPT_ACCESS=_3323_level >= 1LLU;
	_211b70ab3_OPT_INLINE=_3323_level >= 1LLU;
	_211b70ab3_OPT_PTR=_3323_level >= 1LLU;
	_211b70ab3_OPT_COND=_3323_level >= 1LLU;
}



inline jule::Bool _1b6099851_is_letter(jule::I32 _7618_r) {
	if (static_cast<jule::U32>(_7618_r) <= 255LL) {
		return (_211c58508__PROPERTIES[static_cast<jule::Int>(static_cast<jule::U8>(_7618_r))] & 96LL) != 0LL;
	}
	return _1b687a818_is_excluding_latin(_211c58508_LETTER,_7618_r);
}



inline jule::Bool _1b687a818_is16(jule::Slice<_1b687a818_Range16> _1919_ranges,jule::U16 _19128_r) {
	if ((_1919_ranges.len() <= 18LL) || (_19128_r <= 255LL)) {
		{
			auto &expr = _1919_ranges;
			auto it = expr.begin();
			_iter_begin_4382298352:;
			if (it != expr.end()) {
				jule::Int _1b687a818_i = it - expr.begin();
				{
					_1b687a818_Range16* _19417_range = (&(_1919_ranges.__at(_1b687a818_i)));
					{
						if (_19128_r < (*(_19417_range))._field_lo) {
							return false;
						}
						if (_19128_r <= (*(_19417_range))._field_hi) {
							return ((*(_19417_range))._field_stride == 1LL) || (jule::mod(_19128_r - (*(_19417_range))._field_lo,(*(_19417_range))._field_stride) == 0LL);
						}
					}
				}
				_iter_next_4382298352:;
				++it;
				_1b687a818_i++;
				goto _iter_begin_4382298352;
			}
			_iter_end_4382298352:;
		}
		return false;
	}
	jule::Int _20813_lo = 0LL;
	jule::I64 _20913_hi = _1919_ranges.len();
	while (_20813_lo < _20913_hi) {
		{
			jule::Int _21113_m = _20813_lo + (_20913_hi - _20813_lo >> 1LLU);
			_1b687a818_Range16* _21213_range = (&(_1919_ranges[_21113_m]));
			{
				if (((*(_21213_range))._field_lo <= _19128_r) && (_19128_r <= (*(_21213_range))._field_hi)) {
					return ((*(_21213_range))._field_stride == 1LL) || (jule::mod(_19128_r - (*(_21213_range))._field_lo,(*(_21213_range))._field_stride) == 0LL);
				}
				if (_19128_r < (*(_21213_range))._field_lo) {
					_20913_hi=_21113_m;
				} else {
					_20813_lo=static_cast<jule::Int>(_21113_m + 1LL);
				}
			}
		}
	_iter_next_4382292128:;
	}
	_iter_end_4382292128:;
	return false;
}



inline jule::Bool _1b687a818_is32(jule::Slice<_1b687a818_Range32> _2289_ranges,jule::U32 _22828_r) {
	if (_2289_ranges.len() <= 18LL) {
		{
			auto &expr = _2289_ranges;
			auto it = expr.begin();
			_iter_begin_4382321952:;
			if (it != expr.end()) {
				jule::Int _1b687a818_i = it - expr.begin();
				{
					_1b687a818_Range32* _23117_range = (&(_2289_ranges.__at(_1b687a818_i)));
					{
						if (_22828_r < (*(_23117_range))._field_lo) {
							return false;
						}
						if (_22828_r <= (*(_23117_range))._field_hi) {
							return ((*(_23117_range))._field_stride == 1LL) || (jule::mod(_22828_r - (*(_23117_range))._field_lo,(*(_23117_range))._field_stride) == 0LL);
						}
					}
				}
				_iter_next_4382321952:;
				++it;
				_1b687a818_i++;
				goto _iter_begin_4382321952;
			}
			_iter_end_4382321952:;
		}
		return false;
	}
	jule::Int _24513_lo = 0LL;
	jule::I64 _24613_hi = _2289_ranges.len();
	while (_24513_lo < _24613_hi) {
		{
			jule::Int _24813_m = _24513_lo + (_24613_hi - _24513_lo >> 1LLU);
			_1b687a818_Range32* _24913_range = (&(_2289_ranges[_24813_m]));
			{
				if (((*(_24913_range))._field_lo <= _22828_r) && (_22828_r <= (*(_24913_range))._field_hi)) {
					return ((*(_24913_range))._field_stride == 1LL) || (jule::mod(_22828_r - (*(_24913_range))._field_lo,(*(_24913_range))._field_stride) == 0LL);
				}
				if (_22828_r < (*(_24913_range))._field_lo) {
					_24613_hi=_24813_m;
				} else {
					_24513_lo=static_cast<jule::Int>(_24813_m + 1LL);
				}
			}
		}
	_iter_next_4382297360:;
	}
	_iter_end_4382297360:;
	return false;
}



inline jule::Bool _1b687a818_is_excluding_latin(jule::Ptr<_1b687a818_RangeTable> _27823_range_tab,jule::I32 _27847_r) {
	{
		jule::Slice<_1b687a818_Range16> &_28014_r16 = (*(_27823_range_tab))._field_r16;
		jule::Int _28213_off = (*(_27823_range_tab))._field_latin_offset;
		if ((_28014_r16.len() > _28213_off) && (static_cast<jule::U32>(_27847_r) <= static_cast<jule::U32>(_28014_r16[_28014_r16.len() - 1LL]._field_hi))) {
			return _1b687a818_is16(_28014_r16.slice(_28213_off),static_cast<jule::U16>(static_cast<jule::U16>(_27847_r)));
		}
	}
	jule::Slice<_1b687a818_Range32> &_28710_r32 = (*(_27823_range_tab))._field_r32;
	if ((_28710_r32.len() > 0LL) && (_27847_r >= static_cast<jule::I32>(_28710_r32[0LL]._field_lo))) {
		return _1b687a818_is32(_28710_r32,static_cast<jule::U32>(static_cast<jule::U32>(_27847_r)));
	}
	return false;
}



inline std::tuple<jule::I32,jule::Int> _1b687997c_decode_rune(jule::Slice<jule::U8> _18220_p) {
	jule::I32 _18233_r = jule::I32();
	jule::Int _18242_size = jule::Int();
	if (_18220_p.len() < 1LL) {
		_18233_r = 65533LL;
		_18242_size = 0LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _1869_p0 = _18220_p[0LL];
	jule::U8 _1879_x = _1b687997c_FIRST[static_cast<jule::Int>(_1869_p0)];
	if (_1879_x >= 240LL) {
		jule::I32 _19213_mask = static_cast<jule::U8>((_1879_x << 31LL) >> 31LL);
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_18220_p[0LL]) & (~(_19213_mask))) | (65533LL & _19213_mask));
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::Int _1959_sz = static_cast<jule::Int>(_1879_x & 7LL);
	_1b687997c_accept_range _1969_accept = _1b687997c_ACCEPT_RANGES[static_cast<jule::Int>(_1879_x >> 4LL)];
	if (_18220_p.len() < _1959_sz) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2009_b1 = _18220_p[1LL];
	if ((_2009_b1 < _1969_accept._field_lo) || (_1969_accept._field_hi < _2009_b1)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 2LL) {
		_18233_r = static_cast<jule::I32>((static_cast<jule::I32>(_1869_p0 & 31LL) << 6LL) | static_cast<jule::I32>(_2009_b1 & 63LL));
		_18242_size = 2LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2079_b2 = _18220_p[2LL];
	if ((_2079_b2 < 128LL) || (191LL < _2079_b2)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	if (_1959_sz <= 3LL) {
		_18233_r = static_cast<jule::I32>(((static_cast<jule::I32>(_1869_p0 & 15LL) << 12LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 6LL)) | static_cast<jule::I32>(_2079_b2 & 63LL));
		_18242_size = 3LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	jule::U8 _2149_b3 = _18220_p[3LL];
	if ((_2149_b3 < 128LL) || (191LL < _2149_b3)) {
		_18233_r = 65533LL;
		_18242_size = 1LL;
		return std::make_tuple(_18233_r,_18242_size);
	}
	_18233_r = static_cast<jule::I32>((((static_cast<jule::I32>(_1869_p0 & 7LL) << 18LL) | (static_cast<jule::I32>(_2009_b1 & 63LL) << 12LL)) | (static_cast<jule::I32>(_2079_b2 & 63LL) << 6LL)) | static_cast<jule::I32>(_2149_b3 & 63LL));
	_18242_size = 4LL;
	return std::make_tuple(_18233_r,_18242_size);
}



inline std::tuple<jule::I32,jule::Int> _1b687997c_decode_last_rune(jule::Slice<jule::U8> _27625_p) {
	jule::I32 _27638_r = jule::I32();
	jule::Int _27647_size = jule::Int();
	if (_27625_p.len() == 0LL) {
		_27638_r = 65533LL;
		_27647_size = 0LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _2809_end = _27625_p.len();
	jule::I64 _28113_start = _2809_end - 1LL;
	_27638_r=static_cast<jule::I32>(static_cast<jule::I32>(_27625_p[_28113_start]));
	if (_27638_r < 128LL) {
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	jule::I64 _28913_lim = _2809_end - 4LL;
	if (_28913_lim < 0LL) {
		_28913_lim=0LL;
	}
	(_28113_start)--;
	for (; _28113_start >= _28913_lim; (_28113_start)--) {
		{
			if (_1b687997c_rune_start(_27625_p[_28113_start])) {
				goto _iter_end_4383233008;
			}
		}
	_iter_next_4383233008:;
	}
	_iter_end_4383233008:;
	if (_28113_start < 0LL) {
		_28113_start=0LL;
	}
	std::tie(_27638_r,_27647_size) = _1b687997c_decode_rune(_27625_p.slice(_28113_start,_2809_end));
	if ((_28113_start + _27647_size) != _2809_end) {
		_27638_r = 65533LL;
		_27647_size = 1LL;
		return std::make_tuple(_27638_r,_27647_size);
	}
	return std::make_tuple(_27638_r,_27647_size);
}



inline jule::Slice<jule::U8> _1b687997c_append_rune(jule::Slice<jule::U8> _39824_p,jule::I32 _39835_r) {
	if (_39835_r <= 127LLU) {
		return jule::append(_39824_p,jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_39835_r))}));
	}
	return _1b687997c_append_rune_non_ascii(_39824_p,_39835_r);
}



inline jule::Slice<jule::U8> _1b687997c_append_rune_non_ascii(jule::Slice<jule::U8> _40530_p,jule::I32 _40545_r) {
	jule::U32 _4079_i = static_cast<jule::U32>(_40545_r);
	{
		
		if (_4079_i <= 2047LLU) {
			_case_begin_4383308816:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(192LL | static_cast<jule::U8>(_40545_r >> 6LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else if (_4079_i > 1114111LL || (55296LL <= _4079_i) && (_4079_i <= 57343LL)) {
			_case_begin_4383308912:;
			{
				_40545_r=65533LL;
				goto _case_begin_4383301296;
			}
		}
		else if (_4079_i <= 65535LLU) {
			_case_begin_4383301296:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(224LL | static_cast<jule::U8>(_40545_r >> 12LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		else {
			_case_begin_4383300304:;
			{
				return jule::append(_40530_p,jule::Slice<jule::U8>({static_cast<jule::U8>(240LL | static_cast<jule::U8>(_40545_r >> 18LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 12LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r >> 6LL) & 63LL)),static_cast<jule::U8>(128LL | (static_cast<jule::U8>(_40545_r) & 63LL))}));
			}
		}
		_match_end_4383300176:;
	}
}



inline jule::Int _1b687997c_rune_count_str(jule::Str _46623_s) {
	jule::Int _46633_n = jule::Int();
	jule::Int _46713_i = 0LL;
	for (; _46713_i < _46623_s.len(); (_46633_n)++) {
		{
			jule::U8 _46917_c = _46623_s[_46713_i];
			if (_46917_c < 128LL) {
				(_46713_i)++;
				goto _iter_next_4383342032;
			}
			jule::U8 _47513_x = _1b687997c_FIRST[static_cast<jule::Int>(_46917_c)];
			if (_47513_x == 241LL) {
				(_46713_i)++;
				goto _iter_next_4383342032;
			}
			jule::Int _48017_size = static_cast<jule::Int>(_47513_x & 7LL);
			if ((_46713_i + _48017_size) > _46623_s.len()) {
				(_46713_i)++;
				goto _iter_next_4383342032;
			}
			_1b687997c_accept_range _48513_accept = _1b687997c_ACCEPT_RANGES[static_cast<jule::Int>(_47513_x >> 4LL)];
			_46917_c=_46623_s[_46713_i + 1LL];
			if ((_46917_c < _48513_accept._field_lo) || (_48513_accept._field_hi < _46917_c)) {
				_48017_size=1LL;
			} else if (_48017_size == 2LL) {
			} else {
				_46917_c=_46623_s[_46713_i + 2LL];
				if ((_46917_c < 128LL) || (191LL < _46917_c)) {
					_48017_size=1LL;
				} else if (_48017_size == 3LL) {
				} else {
					_46917_c=_46623_s[_46713_i + 3LL];
					if ((_46917_c < 128LL) || (191LL < _46917_c)) {
						_48017_size=1LL;
					}
				}
			}
			_46713_i+=_48017_size;
		}
	_iter_next_4383342032:;
	}
	_iter_end_4383342032:;
	return _46633_n;
}



inline jule::Bool _1b687997c_rune_start(jule::U8 _51019_b) {
	return (_51019_b & 192LL) != 128LL;
}



inline jule::Slice<jule::U8> _1cea13504_stobs(jule::Str& _911_s) {
	{
		jule::Slice<jule::U8> slice;;
		slice.data.alloc = _911_s.begin();;
		slice.data.ref = nullptr;;
		slice._slice = slice.data.alloc;;
		slice._len = slice._cap = _911_s.len();;
		return slice;
	}
}



inline jule::Str _1cea16edb_repeat(jule::Str _1315_s,jule::Int _1327_n) {
	if (_1327_n <= 0LL) {
		return jule::Str();
	}
	jule::Str _1813_ss = _1315_s;
	for (; _1327_n > 1LL; (_1327_n)--) {
		{
			_1813_ss+=_1315_s;
		}
	_iter_next_4383524896:;
	}
	_iter_end_4383524896:;
	return _1813_ss;
}



inline jule::Bool _1cea16edb__has_prefix(jule::Str& _2517_s,jule::Str& _2526_sub,jule::Int _2540_start) {
	if ((_2526_sub.len() == 0LL) || ((_2517_s.len() - _2540_start) < _2526_sub.len())) {
		return false;
	}
	jule::Int _3013_i = 0LL;
	for (; _3013_i < _2526_sub.len(); std::tie(_3013_i,_2540_start) = std::make_tuple(static_cast<jule::Int>(_3013_i + 1LL),static_cast<jule::Int>(_2540_start + 1LL))) {
		{
			if (_2517_s[_2540_start] != _2526_sub[_3013_i]) {
				return false;
			}
		}
	_iter_next_4383536832:;
	}
	_iter_end_4383536832:;
	return true;
}



inline jule::Bool _1cea16edb_has_prefix(jule::Str _4019_s,jule::Str _4027_sub) {
	return _1cea16edb__has_prefix(_4019_s,_4027_sub,0LL);
}



inline jule::Bool _1cea16edb__has_suffix(jule::Str& _4417_s,jule::Str& _4426_sub,jule::Int _4440_start) {
	if ((_4426_sub.len() == 0LL) || ((_4417_s.len() - _4440_start) < _4426_sub.len())) {
		return false;
	}
	_4440_start=static_cast<jule::I64>(_4417_s.len() - _4440_start);
	jule::Int _5013_i = 0LL;
	for (; _5013_i < _4426_sub.len(); (_5013_i)++) {
		{
			if (_4417_s[(_4440_start - _5013_i) - 1LL] != _4426_sub[(_4426_sub.len() - _5013_i) - 1LL]) {
				return false;
			}
		}
	_iter_next_4383545056:;
	}
	_iter_end_4383545056:;
	return true;
}



inline jule::Bool _1cea16edb_has_suffix(jule::Str _6019_s,jule::Str _6027_sub) {
	return _1cea16edb__has_suffix(_6019_s,_6027_sub,0LL);
}



inline jule::Int _1cea16edb_find_at(jule::Str _6816_s,jule::Str _6824_sub,jule::Int _6838_i) {
	if (((_6838_i < 0LL) || (_6816_s.len() < _6824_sub.len())) || (_6824_sub.len() == 0LL)) {
		return -1LL;
	}
	for (; _6838_i < _6816_s.len(); (_6838_i)++) {
		{
			if (_1cea16edb__has_prefix(_6816_s,_6824_sub,_6838_i)) {
				return _6838_i;
			}
		}
	_iter_next_4383558992:;
	}
	_iter_end_4383558992:;
	return -1LL;
}



inline jule::Int _1cea16edb_find_last_at(jule::Str _9121_s,jule::Str _9129_sub,jule::Int _9139_i) {
	jule::Int _9213_j = (_9139_i - _9129_sub.len()) + 1LL;
	if ((((_9129_sub.len() == 0LL) || (_9139_i < 0LL)) || (_9139_i >= _9121_s.len())) || (_9213_j < 0LL)) {
		return -1LL;
	}
	_julec_label_loop:;
	for (; _9213_j >= 0LL; (_9213_j)--) {
		{
			jule::Int _9817_k = _9213_j;
			jule::Int _9917_z = 0LL;
			for (; _9917_z < _9129_sub.len(); std::tie(_9817_k,_9917_z) = std::make_tuple(static_cast<jule::Int>(_9817_k + 1LL),static_cast<jule::Int>(_9917_z + 1LL))) {
				{
					if (_9121_s[_9817_k] != _9129_sub[_9917_z]) {
						goto _iter_next_4383568256;
					}
				}
			_iter_next_4383575904:;
			}
			_iter_end_4383575904:;
			return _9213_j;
		}
	_iter_next_4383568256:;
	}
	_iter_end_4383568256:;
	return -1LL;
}



inline jule::Int _1cea16edb_find_last(jule::Str _11318_s,jule::Str _11326_sub) {
	return static_cast<jule::Int>(_1cea16edb_find_last_at(_11318_s,_11326_sub,static_cast<jule::I64>(_11318_s.len() - 1LL)));
}



inline jule::Int _1cea16edb__find_rune(jule::Slice<jule::U8>& _16916_s,jule::I32 _16927_r) {
	jule::Int _17013_i = 0LL;
	while (_17013_i < _16916_s.len()) {
		{
			jule::I32 _17214_br;
			jule::Int _17218_n;
			std::tie(_17214_br,_17218_n) = _1b687997c_decode_rune(_16916_s.slice(_17013_i));
			if (_16927_r == _17214_br) {
				return _17013_i;
			}
			_17013_i+=_17218_n;
		}
	_iter_next_4383608144:;
	}
	_iter_end_4383608144:;
	return -1LL;
}



inline jule::Int _1cea16edb_find_last_byte(jule::Str _19623_s,jule::U8 _19631_b) {
	jule::I64 _19713_i = _19623_s.len() - 1LL;
	for (; _19713_i >= 0LL; (_19713_i)--) {
		{
			if (_19623_s[_19713_i] == _19631_b) {
				return _19713_i;
			}
		}
	_iter_next_4383616656:;
	}
	_iter_end_4383616656:;
	return -1LL;
}



inline jule::Int _1cea16edb_find_any(jule::Str _23717_s,jule::Str _23725_runes) {
	jule::Slice<jule::U8> _2389_sb = _1cea13504_stobs(_23717_s);
	jule::Slice<jule::U8> _23913_rb = _1cea13504_stobs(_23725_runes);
	jule::Int _24013_i = 0LL;
	while (_24013_i < _2389_sb.len()) {
		{
			jule::I32 _24214_r;
			jule::Int _24217_n;
			std::tie(_24214_r,_24217_n) = _1b687997c_decode_rune(_2389_sb.slice(_24013_i));
			if (_1cea16edb__find_rune(_23913_rb,_24214_r) != -1LL) {
				return _24013_i;
			}
			_24013_i+=_24217_n;
		}
	_iter_next_4383634832:;
	}
	_iter_end_4383634832:;
	return -1LL;
}



inline jule::Slice<jule::Str> _1cea16edb_split(jule::Str _27114_s,jule::Str _27122_sub,jule::Int _27136_n) {
	jule::Slice<jule::Str> _27213_parts = jule::Slice<jule::Str>::alloc(0LL,static_cast<jule::Int>((((_27136_n < 0LL)) ? (10LL) : (_27136_n))));
	if (_27136_n == 0LL) {
		return _27213_parts;
	}
	if (_27136_n < 0LL) {
		_27136_n=static_cast<jule::I64>(_27114_s.len());
	}
	jule::Int _27913_i = 0LL;
	for (; _27136_n > 0LL; (_27136_n)--) {
		{
			jule::Int _28113_j = _1cea16edb_find_at(_27114_s,_27122_sub,_27913_i);
			if (_28113_j == -1LL) {
				goto _iter_end_4383657760;
			}
			_27213_parts = jule::alloc_for_append(_27213_parts,1);_27213_parts.__push(_27114_s.slice(_27913_i,_28113_j));
			_27913_i=static_cast<jule::Int>(_28113_j + _27122_sub.len());
		}
	_iter_next_4383657760:;
	}
	_iter_end_4383657760:;
	if ((_27136_n > 0LL) && (_27913_i < _27114_s.len())) {
		_27213_parts = jule::alloc_for_append(_27213_parts,1);_27213_parts.__push(_27114_s.slice(_27913_i));
	}
	return _27213_parts;
}



inline jule::Bool _1cea16edb_contains(jule::Str _29517_s,jule::Str _29525_sub) {
	return _1cea16edb_find_at(_29517_s,_29525_sub,0LL) != -1LL;
}



inline jule::Bool _1cea16edb_contains_any(jule::Str _31121_s,jule::Str _31129_runes) {
	return _1cea16edb_find_any(_31121_s,_31129_runes) != -1LL;
}



inline jule::Str _1cea16edb_replace(jule::Str _33716_s,jule::Str _33724_sub,jule::Str _33734_new,jule::Int _33748_n) {
	if ((_33748_n == 0LL) || (_33724_sub == _33734_new)) {
		return _33716_s;
	}
	if (_33748_n < 0LL) {
		_33748_n=static_cast<jule::I64>(_33716_s.len());
	}
	jule::Str _34613_ss = jule::Str();
	jule::Int _34713_i = 0LL;
	for (; _33748_n > 0LL; (_33748_n)--) {
		{
			jule::Int _34913_j = _1cea16edb_find_at(_33716_s,_33724_sub,_34713_i);
			if (_34913_j == -1LL) {
				goto _iter_end_4383689680;
			}
			_34613_ss+=_33716_s.slice(_34713_i,_34913_j);
			_34613_ss+=_33734_new;
			_34713_i=static_cast<jule::Int>(_34913_j + _33724_sub.len());
		}
	_iter_next_4383689680:;
	}
	_iter_end_4383689680:;
	_34613_ss+=_33716_s.slice(_34713_i);
	return _34613_ss;
}



inline void _1cea16edb__trim_left(jule::Slice<jule::U8>& _38920_s,jule::Slice<jule::U8>& _38932_cutset) {
	jule::Int _39013_i = 0LL;
	while (_39013_i < _38920_s.len()) {
		{
			jule::I32 _39214_r;
			jule::Int _39217_n;
			std::tie(_39214_r,_39217_n) = _1b687997c_decode_rune(_38920_s.slice(_39013_i));
			if (_1cea16edb__find_rune(_38932_cutset,_39214_r) == -1LL) {
				_38920_s=_38920_s.slice(_39013_i);
				goto _iter_end_4383709456;
			}
			_39013_i+=_39217_n;
		}
	_iter_next_4383709456:;
	}
	_iter_end_4383709456:;
}



inline jule::Str _1cea16edb_trim_left(jule::Str _40318_s,jule::Str _40326_cutset) {
	jule::Slice<jule::U8> _40413_bytes = _1cea13504_stobs(_40318_s);
	jule::Slice<jule::U8> _4059_bcutset = _1cea13504_stobs(_40326_cutset);
	_1cea16edb__trim_left(_40413_bytes,_4059_bcutset);
	return static_cast<jule::Str>(_40413_bytes);
}



inline void _1cea16edb__trim_right(jule::Slice<jule::U8>& _41021_s,jule::Slice<jule::U8>& _41033_cutset) {
	jule::I64 _41113_i = _41021_s.len();
	while (_41113_i > 0LL) {
		{
			jule::I32 _41314_r;
			jule::Int _41317_n;
			std::tie(_41314_r,_41317_n) = _1b687997c_decode_last_rune(_41021_s.slice(0LL,_41113_i));
			if (_1cea16edb__find_rune(_41033_cutset,_41314_r) == -1LL) {
				_41021_s=_41021_s.slice(0LL,_41113_i);
				goto _iter_end_4383720112;
			}
			_41113_i-=_41317_n;
		}
	_iter_next_4383720112:;
	}
	_iter_end_4383720112:;
}



inline jule::Str _1cea16edb_trim(jule::Str _43313_s,jule::Str _43321_cutset) {
	jule::Slice<jule::U8> _43413_bytes = _1cea13504_stobs(_43313_s);
	jule::Slice<jule::U8> _4359_bcutset = _1cea13504_stobs(_43321_cutset);
	_1cea16edb__trim_left(_43413_bytes,_4359_bcutset);
	_1cea16edb__trim_right(_43413_bytes,_4359_bcutset);
	return static_cast<jule::Str>(_43413_bytes);
}



inline jule::Str _1ce9be05e_clean(jule::Str _10818_path) {
	jule::Str _1099_original_path = _10818_path;
	jule::Int _1109_vol_len = _1ce9c31a6_volume_name_len(_10818_path);
	_10818_path=_10818_path.slice(_1109_vol_len);
	if (_10818_path == jule::Str()) {
		if (((_1109_vol_len > 1LL) && _1ce9c31a6_is_path_sep(_1099_original_path[0LL])) && _1ce9c31a6_is_path_sep(_1099_original_path[1LL])) {
			return _1ce9be05e_from_slash(_1099_original_path);
		}
		return _1099_original_path + jule::Str(".", 1);
	}
	jule::Bool _1199_rooted = _1ce9c31a6_is_path_sep(_10818_path[0LL]);
	jule::I64 _1269_n = _10818_path.len();
	_1ce9be05e_LazyBuff _12713_out = _1ce9be05e_LazyBuff(_10818_path,jule::Slice<jule::U8>(),jule::Int(),_1099_original_path,_1109_vol_len);
	jule::Int _13214_r = 0LL;
	jule::Int _13221_dotdot = 0LL;
	std::tie(_13214_r,_13221_dotdot) = std::make_tuple(0LL,0LL);
	if (_1199_rooted) {
		_12713_out._method_append(47LLU);
		std::tie(_13214_r,_13221_dotdot) = std::make_tuple(1LL,1LL);
	}
	while (_13214_r < _1269_n) {
		{
			{
				
				if (_1ce9c31a6_is_path_sep(_10818_path[_13214_r])) {
					_case_begin_4383800976:;
					{
						(_13214_r)++;
					}
				}
				else if ((_10818_path[_13214_r] == '.') && (((_13214_r + 1LL) == _1269_n) || _1ce9c31a6_is_path_sep(_10818_path[_13214_r + 1LL]))) {
					_case_begin_4383802672:;
					{
						(_13214_r)++;
					}
				}
				else if (((_10818_path[_13214_r] == '.') && (_10818_path[_13214_r + 1LL] == '.')) && (((_13214_r + 2LL) == _1269_n) || _1ce9c31a6_is_path_sep(_10818_path[_13214_r + 2LL]))) {
					_case_begin_4383802768:;
					{
						_13214_r+=2LL;
						{
							
							if (_12713_out._field_w > _13221_dotdot) {
								_case_begin_4383815104:;
								{
									(_12713_out._field_w)--;
									while ((_12713_out._field_w > _13221_dotdot) && (!(_1ce9c31a6_is_path_sep(static_cast<jule::U8>(_12713_out._method_index(_12713_out._field_w)))))) {
										{
											(_12713_out._field_w)--;
										}
									_iter_next_4383815632:;
									}
									_iter_end_4383815632:;
								}
							}
							else if ((!(_1199_rooted))) {
								_case_begin_4383815200:;
								{
									if (_12713_out._field_w > 0LL) {
										_12713_out._method_append(47LLU);
									}
									_12713_out._method_append('.');
									_12713_out._method_append('.');
									_13221_dotdot=_12713_out._field_w;
								}
							}
							_match_end_4383814976:;
						}
					}
				}
				else {
					_case_begin_4383785088:;
					{
						if ((_1199_rooted && (_12713_out._field_w != 1LL)) || ((!(_1199_rooted)) && (_12713_out._field_w != 0LL))) {
							_12713_out._method_append(47LLU);
						}
						if (((false && (_12713_out._field_w == 0LL)) && (_12713_out._field_vol_len == 0LL)) && (_13214_r != 0LL)) {
							jule::Int _17525_i = _13214_r;
							for (; (_17525_i < _1269_n) && (!(_1ce9c31a6_is_path_sep(_10818_path[_17525_i]))); (_17525_i)++) {
								{
									if (_10818_path[_17525_i] == ':') {
										_12713_out._method_append('.');
										_12713_out._method_append(47LLU);
										goto _iter_end_4383790768;
									}
								}
							_iter_next_4383790768:;
							}
							_iter_end_4383790768:;
						}
						for (; (_13214_r < _1269_n) && (!(_1ce9c31a6_is_path_sep(_10818_path[_13214_r]))); (_13214_r)++) {
							{
								_12713_out._method_append(_10818_path[_13214_r]);
							}
						_iter_next_4383790064:;
						}
						_iter_end_4383790064:;
					}
				}
				_match_end_4383784912:;
			}
		}
	_iter_next_4383784480:;
	}
	_iter_end_4383784480:;
	if (_12713_out._field_w == 0LL) {
		_12713_out._method_append('.');
	}
	return _1ce9be05e_from_slash(_12713_out._method_string());
}



inline jule::Str _1ce9be05e_from_slash(jule::Str _21119_path) {
	{
		return _21119_path;
	}
}



inline jule::Str _1ce9be05e_join(jule::Slice<jule::Str> _22513_elem) {
	return _1ce9c31a6___join(_22513_elem);
}



inline jule::Str _1ce9be05e_ext(jule::Str _23012_path) {
	jule::I64 _23113_i = _23012_path.len() - 1LL;
	for (; (_23113_i >= 0LL) && (!(_1ce9c31a6_is_path_sep(_23012_path[_23113_i]))); (_23113_i)--) {
		{
			if (_23012_path[_23113_i] == '.') {
				return _23012_path.slice(_23113_i);
			}
		}
	_iter_next_4383835296:;
	}
	_iter_end_4383835296:;
	return jule::Str();
}



inline std::tuple<jule::Str,jule::Bool> _1ce9be05e_abs(jule::Str _24512_path) {
	jule::Str _24610_abs_path;
	jule::Bool _24620_ok;
	std::tie(_24610_abs_path,_24620_ok) = _1ce9c31a6___abs(_24512_path);
	return std::make_tuple(_24610_abs_path,_24620_ok);
}



inline jule::Str _1ce9be05e_base(jule::Str _25417_path) {
	if (_25417_path == jule::Str()) {
		return jule::Str(".", 1);
	}
	while ((_25417_path.len() > 0LL) && _1ce9c31a6_is_path_sep(_25417_path[_25417_path.len() - 1LL])) {
		{
			_25417_path=_25417_path.slice(0LL,_25417_path.len() - 1LL);
		}
	_iter_next_4383845200:;
	}
	_iter_end_4383845200:;
	_25417_path=_25417_path.slice(_1ce9be05e_volume_name(_25417_path).len());
	jule::I64 _26513_i = _25417_path.len() - 1LL;
	while ((_26513_i >= 0LL) && (!(_1ce9c31a6_is_path_sep(_25417_path[_26513_i])))) {
		{
			(_26513_i)--;
		}
	_iter_next_4383844912:;
	}
	_iter_end_4383844912:;
	if (_26513_i >= 0LL) {
		_25417_path=_25417_path.slice(_26513_i + 1LL);
	}
	if (_25417_path == jule::Str()) {
		return static_cast<jule::Str>(47LL);
	}
	return _25417_path;
}



inline jule::Str _1ce9be05e_dir(jule::Str _28512_path) {
	jule::Str _2869_vol = _1ce9be05e_volume_name(_28512_path);
	jule::I64 _28713_i = _28512_path.len() - 1LL;
	while ((_28713_i >= _2869_vol.len()) && (!(_1ce9c31a6_is_path_sep(_28512_path[_28713_i])))) {
		{
			(_28713_i)--;
		}
	_iter_next_4383857056:;
	}
	_iter_end_4383857056:;
	jule::Str _2919_dir = _1ce9be05e_clean(_28512_path.slice(_2869_vol.len(),_28713_i + 1LL));
	if ((_2919_dir == jule::Str(".", 1)) && (_2869_vol.len() > 2LL)) {
		return _2869_vol;
	}
	return _2869_vol + _2919_dir;
}



inline jule::Str _1ce9be05e_volume_name(jule::Str _30320_path) {
	return _1ce9be05e_from_slash(_30320_path.slice(0LL,_1ce9c31a6_volume_name_len(_30320_path)));
}



inline jule::Bool _1ce9c31a6_is_path_sep(jule::U8 _4820_c) {
	return 47LL == _4820_c;
}



inline jule::Bool _1ce9c31a6_is_abs(jule::Str _5315_path) {
	return _1cea16edb_has_prefix(_5315_path,jule::Str("/", 1));
}



inline jule::Int _1ce9c31a6_volume_name_len(jule::Str _5920_path) {
	return 0LL;
}



inline std::tuple<jule::Str,jule::Bool> _1ce9c31a6___abs(jule::Str _6310_path) {
	jule::Bool _6328_ok = jule::Bool();
	if (_1ce9c31a6_is_abs(_6310_path)) {
		_6328_ok = true;
		return std::make_tuple(_1ce9be05e_clean(_6310_path),_6328_ok);
	}
	jule::Str _679_wd = ({
		auto except = _211c409b8_working_dir();
		(except.ok()) ? (except.result) : ({{
			_6328_ok = false;
			return std::make_tuple(jule::Str(),_6328_ok);
			_6328_ok = false;
			return std::make_tuple(jule::Str(),_6328_ok);
		} jule::Str();});
	});
	_6328_ok = true;
	return std::make_tuple(_1ce9c31a6___join(jule::Slice<jule::Str>({_679_wd,_6310_path})),_6328_ok);
}



inline jule::Str _1ce9c31a6_str_join(jule::Slice<jule::Str> _7313_elems,jule::Str _7327_sep) {
	{
		auto _match_expr{ _7313_elems.len() };
		
		if (_match_expr == 0LL) {
			_case_begin_4383882016:;
			{
				return jule::Str();
			}
		}
		else if (_match_expr == 1LL) {
			_case_begin_4383882112:;
			{
				return _7313_elems[0LL];
			}
		}
		_match_end_4383881536:;
	}
	jule::Str _7913_s = _7313_elems[0LL];
	{
		auto expr = _7313_elems.slice(1LL);
		auto it = expr.begin();
		_iter_begin_4383882992:;
		if (it != expr.end()) {
			jule::Str &_1ce9c31a6_elem = *it;
			{
				_7913_s+=_7327_sep + _1ce9c31a6_elem;
			}
			_iter_next_4383882992:;
			++it;
			goto _iter_begin_4383882992;
		}
		_iter_end_4383882992:;
	}
	return _7913_s;
}



inline jule::Str _1ce9c31a6___join(jule::Slice<jule::Str> _8611_elem) {
	{
		auto &expr = _8611_elem;
		auto it = expr.begin();
		_iter_begin_4383886336:;
		if (it != expr.end()) {
			jule::Int _1ce9c31a6_i = it - expr.begin();
			jule::Str &_1ce9c31a6_e = *it;
			{
				if (_1ce9c31a6_e != jule::Str()) {
					return _1ce9be05e_clean(_1ce9c31a6_str_join(_8611_elem.slice(_1ce9c31a6_i),static_cast<jule::Str>(47LL)));
				}
			}
			_iter_next_4383886336:;
			++it;
			_1ce9c31a6_i++;
			goto _iter_begin_4383886336;
		}
		_iter_end_4383886336:;
	}
	return jule::Str();
}



inline jule::Int _1ce947c0d_get_last_fs_error(void) {
	jule::Int _729_err = _211c51d4d_get_last_errno();
	{
		auto &_match_expr{ _729_err };
		
		if (_match_expr == 13LL) {
			_case_begin_4383935088:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_4383935184:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 62LL) {
			_case_begin_4383934720:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 63LL) {
			_case_begin_4383934816:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_4383934912:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_4383935312:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 84LL) {
			_case_begin_4383935408:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_4383935504:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 24LL) {
			_case_begin_4383934224:;
			{
				return 8LLU;
			}
		}
		else if (_match_expr == 23LL) {
			_case_begin_4383934320:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 12LL) {
			_case_begin_4383934416:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 17LL) {
			_case_begin_4383934512:;
			{
				return 11LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_4383936192:;
			{
				return 12LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_4383936288:;
			{
				return 13LLU;
			}
		}
		else if (_match_expr == 21LL) {
			_case_begin_4383936384:;
			{
				return 14LLU;
			}
		}
		else if (_match_expr == 98LL) {
			_case_begin_4383936496:;
			{
				return 15LLU;
			}
		}
		else if (_match_expr == 28LL) {
			_case_begin_4383936608:;
			{
				return 16LLU;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_4383936720:;
			{
				return 17LLU;
			}
		}
		else if (_match_expr == 30LL) {
			_case_begin_4383936832:;
			{
				return 18LLU;
			}
		}
		else if (_match_expr == 35LL) {
			_case_begin_4383936944:;
			{
				return 19LLU;
			}
		}
		else if (_match_expr == 26LL || _match_expr == 16LL) {
			_case_begin_4383937056:;
			{
				return 20LLU;
			}
		}
		else if (_match_expr == 27LL) {
			_case_begin_4383937168:;
			{
				return 21LLU;
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_4383937280:;
			{
				return 22LLU;
			}
		}
		else if (_match_expr == 34LL) {
			_case_begin_4383937392:;
			{
				return 23LLU;
			}
		}
		else if (_match_expr == 29LL) {
			_case_begin_4383937504:;
			{
				return 24LLU;
			}
		}
		else if (_match_expr == 55LL) {
			_case_begin_4383937616:;
			{
				return 25LLU;
			}
		}
		else if (_match_expr == 94LL) {
			_case_begin_4383937728:;
			{
				return 26LLU;
			}
		}
		else if (_match_expr == 66LL) {
			_case_begin_4383937840:;
			{
				return 27LLU;
			}
		}
		else {
			_case_begin_4383932864:;
			{
				return 1LLU;
			}
		}
		_match_end_4383933648:;
	}
}



inline jule::Int _1b6a0330e_get_last_process_error(void) {
	jule::Int _419_err = _211c51d4d_get_last_errno();
	{
		auto &_match_expr{ _419_err };
		
		if (_match_expr == 13LL) {
			_case_begin_4384086624:;
			{
				return 0LLU;
			}
		}
		else if (_match_expr == 62LL) {
			_case_begin_4384086336:;
			{
				return 1LLU;
			}
		}
		else if (_match_expr == 63LL) {
			_case_begin_4384086432:;
			{
				return 2LLU;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_4384085744:;
			{
				return 3LLU;
			}
		}
		else if (_match_expr == 20LL) {
			_case_begin_4384085840:;
			{
				return 4LLU;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_4384085936:;
			{
				return 5LLU;
			}
		}
		else if (_match_expr == 22LL) {
			_case_begin_4384085248:;
			{
				return 6LLU;
			}
		}
		else if (_match_expr == 26LL || _match_expr == 16LL) {
			_case_begin_4384085344:;
			{
				return 7LLU;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_4384085440:;
			{
				return 9LLU;
			}
		}
		else if (_match_expr == 97LL) {
			_case_begin_4384085536:;
			{
				return 10LLU;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_4384086768:;
			{
				return 11LLU;
			}
		}
		else {
			_case_begin_4384083824:;
			{
				return 0LLU;
			}
		}
		_match_end_4384084672:;
	}
}



inline void _211c5d002_exit(jule::Int _1213_code) {
	_1e825ca7b_exit(_1213_code);
}



inline jule::Str _211c5d002_executable(void) {
	return jule::executable();
}



inline jule::Bool _1b697da81_is_std_header_path(jule::Str _2627_p) {
	return (_2627_p[0LL] == '<') && (_2627_p[_2627_p.len() - 1LL] == '>');
}



inline jule::Bool _1b697da81_is_valid_header_ext(jule::Str _3128_ext) {
	{
		auto &expr = _1b697da81_CPP_HEADER_EXTS;
		auto it = expr.begin();
		_iter_begin_4381861424:;
		if (it != expr.end()) {
			jule::Str &_1b697da81_valid_ext = *it;
			{
				if (_3128_ext == _1b697da81_valid_ext) {
					return true;
				}
			}
			_iter_next_4381861424:;
			++it;
			goto _iter_begin_4381861424;
		}
		_iter_end_4381861424:;
	}
	return false;
}



inline jule::Bool _1b697da81_is_valid_cpp_ext(jule::Str _4225_ext) {
	if (_4225_ext == jule::Str(".c", 2)) {
		return true;
	}
	{
		auto &expr = _1b697da81_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_4381867056:;
		if (it != expr.end()) {
			jule::Str &_1b697da81_e = *it;
			{
				if (_4225_ext == _1b697da81_e) {
					return true;
				}
			}
			_iter_next_4381867056:;
			++it;
			goto _iter_begin_4381867056;
		}
		_iter_end_4381867056:;
	}
	{
		auto &expr = _1b697da81_OBJECTIVE_CPP_EXTS;
		auto it = expr.begin();
		_iter_begin_4381872272:;
		if (it != expr.end()) {
			jule::Str &_1b697da81_e = *it;
			{
				if (_4225_ext == _1b697da81_e) {
					return true;
				}
			}
			_iter_next_4381872272:;
			++it;
			goto _iter_begin_4381872272;
		}
		_iter_end_4381872272:;
	}
	return false;
}



inline jule::Str _1b6986b22_logf(jule::Str _28913_fmt,jule::Slice<jule::Any> _28926_args) {
	return _1b6986b22_apply_fmt(_28913_fmt,_28926_args);
}



inline jule::Str _1b6986b22_arg_to_str(jule::Any _29315_arg) {
	{
		auto &_match_expr{ _29315_arg };
		
		if (_match_expr.type_is<jule::Str>()) {
			_case_begin_4381877696:;
			{
				return _29315_arg.operator jule::Str();
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_4381877792:;
			{
				return static_cast<jule::Str>(_29315_arg.operator jule::U8());
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_4381877888:;
			{
				return static_cast<jule::Str>(_29315_arg.operator jule::I32());
			}
		}
		else {
			_case_begin_4381874912:;
			{
				return jule::Str("<fmt?>", 6);
			}
		}
		_match_end_4381876512:;
	}
}



inline jule::Int _1b6986b22_find_next_fmt(jule::Str _30218_fmt) {
	{
		auto &expr = _30218_fmt;
		auto it = expr.begin();
		_iter_begin_4381880048:;
		if (it != expr.end()) {
			jule::Int _1b6986b22_i = it - expr.begin();
			jule::U8 &_1b6986b22_b = *it;
			{
				if (_1b6986b22_b == '@') {
					return _1b6986b22_i;
				}
			}
			_iter_next_4381880048:;
			++it;
			_1b6986b22_i++;
			goto _iter_begin_4381880048;
		}
		_iter_end_4381880048:;
	}
	return -1LL;
}



inline jule::Str _1b6986b22_apply_fmt(jule::Str _31118_fmt,jule::Slice<jule::Any> _31128_args) {
	jule::Str _31213_s = jule::Str();
	{
		auto &expr = _31128_args;
		auto it = expr.begin();
		_iter_begin_4381885648:;
		if (it != expr.end()) {
			jule::Any &_1b6986b22_arg = *it;
			{
				jule::Int _31513_i = _1b6986b22_find_next_fmt(_31118_fmt);
				if (_31513_i == -1LL) {
					goto _iter_end_4381885648;
				}
				_31213_s+=_31118_fmt.slice(0LL,_31513_i);
				_31213_s+=_1b6986b22_arg_to_str(_1b6986b22_arg);
				_31118_fmt=_31118_fmt.slice(_31513_i + 1LL);
			}
			_iter_next_4381885648:;
			++it;
			goto _iter_begin_4381885648;
		}
		_iter_end_4381885648:;
	}
	_31213_s+=_31118_fmt;
	return _31213_s;
}



inline jule::Bool _1b69bd670_is_top_directive(jule::Str _2825_directive) {
	return (_2825_directive == jule::Str("pass", 4)) || (_2825_directive == jule::Str("build", 5));
}



inline jule::Bool _1b698aa8d_is_windows(jule::Str _5119_os) {
	return _5119_os == jule::Str("windows", 7);
}



inline jule::Bool _1b698aa8d_is_darwin(jule::Str _5318_os) {
	return _5318_os == jule::Str("darwin", 6);
}



inline jule::Bool _1b698aa8d_is_linux(jule::Str _5517_os) {
	return _5517_os == jule::Str("linux", 5);
}



inline jule::Bool _1b698aa8d_is_i386(jule::Str _5716_arch) {
	return _5716_arch == jule::Str("i386", 4);
}



inline jule::Bool _1b698aa8d_is_amd64(jule::Str _5917_arch) {
	return _5917_arch == jule::Str("amd64", 5);
}



inline jule::Bool _1b698aa8d_is_arm64(jule::Str _6117_arch) {
	return _6117_arch == jule::Str("arm64", 5);
}



inline jule::Bool _1b698aa8d_is_unix(jule::Str _6316_os) {
	return _1b698aa8d_is_darwin(_6316_os) || _1b698aa8d_is_linux(_6316_os);
}



inline jule::Bool _1b698aa8d_is_32bit(jule::Str _6517_arch) {
	return _1b698aa8d_is_i386(_6517_arch);
}



inline jule::Bool _1b698aa8d_is_64bit(jule::Str _6717_arch) {
	return _1b698aa8d_is_amd64(_6717_arch) || _1b698aa8d_is_arm64(_6717_arch);
}



inline void _1b69ce708_exit_err(jule::Str _1613_msg) {
	
	jule::outln(_1613_msg);
	_211c5d002_exit(1LL);
}



inline void _1b69ce708_init(void) {
	jule::Str _2413_path = _211c5d002_executable();
	if (_2413_path == jule::Str()) {
		_1b69ce708_exit_err(jule::Str("std::jule::build: executable file cannot found", 46));
	}
	jule::Str _299_pwd = ({
		auto except = _211c409b8_working_dir();
		(except.ok()) ? (except.result) : ({{
			_1b69ce708_exit_err(jule::Str("std::jule::build: working directory path cannot found", 53));
			return;
			return;
		} jule::Str();});
	});
	jule::Str _349_path_exec = _1ce9be05e_dir(_2413_path);
	_2413_path=_1ce9be05e_join(jule::Slice<jule::Str>({_349_path_exec,jule::Str("..", 2)}));
	{
		_1b69ce708_PATH_WD=_299_pwd;
		_1b69ce708_PATH_EXEC=_349_path_exec;
		_1b69ce708_PATH_STDLIB=_1ce9be05e_join(jule::Slice<jule::Str>({_2413_path,jule::Str("std", 3)}));
		_1b69ce708_PATH_API=_1ce9be05e_join(jule::Slice<jule::Str>({_1b69ce708_PATH_EXEC,jule::Str("..", 2)}));
		_1b69ce708_PATH_API=_1ce9be05e_join(jule::Slice<jule::Str>({_1b69ce708_PATH_API,jule::Str("api", 3)}));
		_1b69ce708_PATH_API=_1ce9be05e_join(jule::Slice<jule::Str>({_1b69ce708_PATH_API,jule::Str("jule.hpp", 8)}));
	}
}



inline jule::Int _1b738619c_leading_zeros64(jule::U64 _6124_x) {
	return static_cast<jule::Int>(64LL - _1b738619c_len64(_6124_x));
}



inline jule::Int _1b738619c_trailing_zeros(jule::Uint _8323_x) {
	
	return static_cast<jule::Int>(_1b738619c_trailing_zeros64(static_cast<jule::U64>(static_cast<jule::U64>(_8323_x))));
}



inline jule::Int _1b738619c_trailing_zeros32(jule::U32 _10525_x) {
	if (_10525_x == 0LL) {
		return 32LL;
	}
	return static_cast<jule::Int>(static_cast<jule::Int>(_1b738619c_DE_BRUIJN32_TAB[static_cast<jule::Int>(((_10525_x & (-(_10525_x))) * 125613361LL) >> 27LL)]));
}



inline jule::Int _1b738619c_trailing_zeros64(jule::U64 _11425_x) {
	if (_11425_x == 0LL) {
		return 64LL;
	}
	return static_cast<jule::Int>(static_cast<jule::Int>(_1b738619c_DE_BRUIJN64_TAB[static_cast<jule::Int>(((_11425_x & (-(_11425_x))) * 285870213051353865LL) >> 58LL)]));
}



inline jule::Int _1b738619c_len32(jule::U32 _35218_x) {
	jule::Int _35228_n = jule::Int();
	if (_35218_x >= 65536LLU) {
		_35218_x>>=16LL;
		_35228_n=16LL;
	}
	if (_35218_x >= 256LLU) {
		_35218_x>>=8LL;
		_35228_n+=8LL;
	}
	_35228_n = static_cast<jule::Int>(_35228_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_35218_x)]));
	return _35228_n;
}



inline jule::Int _1b738619c_len64(jule::U64 _36618_x) {
	jule::Int _36628_n = jule::Int();
	if (_36618_x >= 4294967296LLU) {
		_36618_x>>=32LL;
		_36628_n=32LL;
	}
	if (_36618_x >= 65536LLU) {
		_36618_x>>=16LL;
		_36628_n+=16LL;
	}
	if (_36618_x >= 256LLU) {
		_36618_x>>=8LL;
		_36628_n+=8LL;
	}
	_36628_n = static_cast<jule::Int>(_36628_n + static_cast<jule::Int>(jule::Str("\x00\1\2\2\3\3\3\3\4\4\4\4\4\4\4\4\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\5\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\6\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", 256)[static_cast<jule::Int>(_36618_x)]));
	return _36628_n;
}



inline std::tuple<jule::U64,jule::U64> _1b738619c_add64(jule::U64 _41514_x,jule::U64 _41522_y,jule::U64 _41530_carry) {
	jule::U64 _41544_sum = jule::U64();
	jule::U64 _41554_carryout = jule::U64();
	_41544_sum=static_cast<jule::U64>((_41514_x + _41522_y) + _41530_carry);
	_41554_carryout=static_cast<jule::U64>(((_41514_x & _41522_y) | ((_41514_x | _41522_y) & (~(_41544_sum)))) >> 63LL);
	return std::make_tuple(_41544_sum,_41554_carryout);
}



inline std::tuple<jule::U64,jule::U64> _1b738619c_mul64(jule::U64 _49914_x,jule::U64 _49922_y) {
	jule::U64 _49932_hi = jule::U64();
	jule::U64 _49941_lo = jule::U64();
	
	jule::U64 _5019_x0 = _49914_x & 4294967295LLU;
	jule::U64 _5029_x1 = _49914_x >> 32LL;
	jule::U64 _5039_y0 = _49922_y & 4294967295LLU;
	jule::U64 _5049_y1 = _49922_y >> 32LL;
	jule::U64 _5059_w0 = _5019_x0 * _5039_y0;
	jule::U64 _5069_t = (_5029_x1 * _5039_y0) + (_5059_w0 >> 32LL);
	jule::U64 _50713_w1 = _5069_t & 4294967295LLU;
	jule::U64 _5089_w2 = _5069_t >> 32LL;
	_50713_w1+=static_cast<jule::U64>(_5019_x0 * _5049_y1);
	_49932_hi=static_cast<jule::U64>(((_5029_x1 * _5049_y1) + _5089_w2) + (_50713_w1 >> 32LL));
	_49941_lo=static_cast<jule::U64>(_49914_x * _49922_y);
	return std::make_tuple(_49932_hi,_49941_lo);
}



inline jule::U32 _1b6aecc33_f32_bits(jule::F32 _4117_f) {
	return (*(((jule::U32*)((&(_4117_f))))));
}



inline jule::F32 _1b6aecc33_f32_from_bits(jule::U32 _4722_b) {
	return (*(((jule::F32*)((&(_4722_b))))));
}



inline jule::U64 _1b6aecc33_f64_bits(jule::F64 _5217_f) {
	return (*(((jule::U64*)((&(_5217_f))))));
}



inline jule::F64 _1b6aecc33_f64_from_bits(jule::U64 _5822_b) {
	return (*(((jule::F64*)((&(_5822_b))))));
}



inline std::tuple<jule::F64,jule::Int> _1b6b517ae_frexp(jule::F64 _4718_f) {
	jule::F64 _4728_frac = jule::F64();
	jule::Int _4739_exp = jule::Int();
	{
		
		if (_4718_f == 0LL) {
			_case_begin_4385795920:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		else if (_1b62a95ee_is_inf(_4718_f,0LL) || _1b62a95ee_is_nan(_4718_f)) {
			_case_begin_4385796032:;
			{
				_4728_frac = _4718_f;
				_4739_exp = 0LL;
				return std::make_tuple(_4728_frac,_4739_exp);
			}
		}
		_match_end_4385795696:;
	}
	std::tie(_4718_f,_4739_exp) = _1b62a95ee_normalize(_4718_f);
	jule::U64 _5613_x = _1b6aecc33_f64_bits(_4718_f);
	_4739_exp+=static_cast<jule::Int>((static_cast<jule::Int>((_5613_x >> 52LL) & 2047LL) - 1023LL) + 1LL);
	_5613_x=static_cast<jule::U64>(_5613_x & 9227875636482146303LLU);
	_5613_x|=4602678819172646912LLU;
	_4728_frac=static_cast<jule::F64>(_1b6aecc33_f64_from_bits(_5613_x));
	return std::make_tuple(_4728_frac,_4739_exp);
}



inline jule::F64 _1b62a95ee_nan(void) {
	return static_cast<jule::F64>(_1b6aecc33_f64_from_bits(9221120237041090561LLU));
}



inline jule::Bool _1b62a95ee_is_nan(jule::F64 _5215_f) {
	return _5215_f != _5215_f;
}



inline jule::F64 _1b62a95ee_inf(jule::Int _6112_sign) {
	if (_6112_sign >= 0LL) {
		return static_cast<jule::F64>(_1b6aecc33_f64_from_bits(9218868437227405312LLU));
	}
	return static_cast<jule::F64>(_1b6aecc33_f64_from_bits(18442240474082181120LLU));
}



inline jule::Bool _1b62a95ee_is_inf(jule::F64 _7215_f,jule::Int _7223_sign) {
	return ((_7223_sign >= 0LL) && (_7215_f > jule::MAX_F64)) || ((_7223_sign <= 0LL) && (_7215_f < jule::MIN_F64));
}



inline std::tuple<jule::F64,jule::Int> _1b62a95ee_normalize(jule::F64 _8214_x) {
	jule::F64 _8224_y = jule::F64();
	jule::Int _8232_exp = jule::Int();
	
	if (_1b6e66134_abs(_8214_x) < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014) {
		_8224_y = static_cast<jule::F64>(_8214_x * 4503599627370496LLU);
		_8232_exp = -52LL;
		return std::make_tuple(_8224_y,_8232_exp);
	}
	_8224_y = _8214_x;
	_8232_exp = 0LL;
	return std::make_tuple(_8224_y,_8232_exp);
}



inline jule::F64 _1b62e9452_log(jule::F64 _11112_x) {
	
	
	
	
	
	
	
	
	
	{
		
		if (_1b62a95ee_is_nan(_11112_x) || _1b62a95ee_is_inf(_11112_x,1LL)) {
			_case_begin_4386043104:;
			{
				return _11112_x;
			}
		}
		else if (_11112_x < 0LL) {
			_case_begin_4386043216:;
			{
				return static_cast<jule::F64>(_1b62a95ee_nan());
			}
		}
		else if (_11112_x == 0LL) {
			_case_begin_4386043328:;
			{
				return static_cast<jule::F64>(_1b62a95ee_inf(-1LL));
			}
		}
		_match_end_4386042928:;
	}
	jule::F64 _13314_f1;
	jule::Int _13322_ki;
	std::tie(_13314_f1,_13322_ki) = _1b6b517ae_frexp(_11112_x);
	if (_13314_f1 < 0.70710678118654757) {
		_13314_f1*=2LL;
		(_13322_ki)--;
	}
	jule::F64 _1389_f = _13314_f1 - 1LL;
	jule::F64 _1399_k = static_cast<jule::F64>(_13322_ki);
	jule::F64 _1429_s = jule::div(_1389_f,2LL + _1389_f);
	jule::F64 _1439_s2 = _1429_s * _1429_s;
	jule::F64 _1449_s4 = _1439_s2 * _1439_s2;
	jule::F64 _1459_t1 = _1439_s2 * (0.66666666666667351 + (_1449_s4 * (0.28571428743662391 + (_1449_s4 * (0.1818357216161805 + (_1449_s4 * 0.14798198605116586))))));
	jule::F64 _1469_t2 = _1449_s4 * (0.39999999999409419 + (_1449_s4 * (0.22222198432149784 + (_1449_s4 * 0.15313837699209373))));
	jule::F64 _1479_R = _1459_t1 + _1469_t2;
	jule::F64 _1489_hfsq = (0.5 * _1389_f) * _1389_f;
	return static_cast<jule::F64>((_1399_k * 0.69314718036912382) - ((_1489_hfsq - ((_1429_s * (_1489_hfsq + _1479_R)) + (_1399_k * 0.00000000019082149292705877))) - _1389_f));
}



inline jule::F64 _1b6e66134_abs(jule::F64 _4312_x) {
	return static_cast<jule::F64>(_1b6aecc33_f64_from_bits(static_cast<jule::U64>(_1b6aecc33_f64_bits(_4312_x) & 9223372036854775807LLU)));
}



inline std::tuple<jule::F64,jule::F64> _1b6eb7619_modf(jule::F64 _4413_f) {
	jule::F64 _4423_integer = jule::F64();
	jule::F64 _4437_frac = jule::F64();
	
	jule::F64 _469_abs_f = _1b6e66134_abs(_4413_f);
	jule::F64 _4713_i = 0LL;
	if (_469_abs_f > 4503599627370496LL) {
		_4713_i=_4413_f;
	} else {
		_4713_i=static_cast<jule::F64>(_469_abs_f + 4503599627370496LL);
		_4713_i-=4503599627370496LL;
		while (_4713_i > _469_abs_f) {
			{
				(_4713_i)--;
			}
		_iter_next_4372967824:;
		}
		_iter_end_4372967824:;
		if (_4413_f < 0LL) {
			_4713_i=static_cast<jule::F64>((-(_4713_i)));
		}
	}
	_4423_integer = _4713_i;
	_4437_frac = static_cast<jule::F64>(_4413_f - _4713_i);
	return std::make_tuple(_4423_integer,_4437_frac);
}



inline jule::F64 _1b6ee77ae_log2(jule::F64 _4413_x) {
	jule::F64 _4510_frac;
	jule::Int _4516_exp;
	std::tie(_4510_frac,_4516_exp) = _1b6b517ae_frexp(_4413_x);
	if (_4510_frac == 0.5) {
		return static_cast<jule::F64>(static_cast<jule::F64>(_4516_exp - 1LL));
	}
	return static_cast<jule::F64>((_1b62e9452_log(_4510_frac) * 1.4426950408889634) + static_cast<jule::F64>(_4516_exp));
}



inline jule::Str _211ca7535_fmt_float(jule::F64 _7818_f,jule::U8 _7826_fmt,jule::Int _7837_prec,jule::Int _7848_bit_size) {
	return static_cast<jule::Str>(_211ca7535_generic_ftoa(jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::Int>(_211ca7535_max(static_cast<jule::Int>(_7837_prec + 4LL),24LL))),_7818_f,_7826_fmt,_7837_prec,_7848_bit_size));
}



inline jule::Slice<jule::U8> _211ca7535_generic_ftoa(jule::Slice<jule::U8> _8221_dst,jule::F64 _8234_val,jule::U8 _8244_fmt,jule::Int _8259_prec,jule::Int _8270_bit_size) {
	jule::U64 _8313_bits = 0LLU;
	jule::Ptr<_211ca7535_FloatInfo> _8413_flt = nullptr;
	{
		auto &_match_expr{ _8270_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_4388598736:;
			{
				_8313_bits=static_cast<jule::U64>(static_cast<jule::U64>(_1b6aecc33_f32_bits(static_cast<jule::F32>(static_cast<jule::F32>(_8234_val)))));
				_8413_flt=((jule::Ptr<_211ca7535_FloatInfo>)((&(_211ca7535_F32_INFO))));
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4388599088:;
			{
				_8313_bits=static_cast<jule::U64>(_1b6aecc33_f64_bits(_8234_val));
				_8413_flt=((jule::Ptr<_211ca7535_FloatInfo>)((&(_211ca7535_F64_INFO))));
			}
		}
		else {
			_case_begin_4388597360:;
			{
				jule::panic(jule::Str("std::conv: illegal bit_size", 27) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoa.jule:93:9"));;
			}
		}
		_match_end_4388597280:;
	}
	jule::Bool _969_neg = (_8313_bits >> ((*(_8413_flt))._field_expbits + (*(_8413_flt))._field_mantbits)) != 0LL;
	jule::Int _9713_exp = static_cast<jule::Int>(_8313_bits >> (*(_8413_flt))._field_mantbits) & static_cast<jule::Int>((1LL << (*(_8413_flt))._field_expbits) - 1LL);
	jule::U64 _9813_mant = _8313_bits & ((static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits) - 1LL);
	{
		auto &_match_expr{ _9713_exp };
		
		if (_match_expr == static_cast<jule::Int>((1LL << (*(_8413_flt))._field_expbits) - 1LL)) {
			_case_begin_4388596720:;
			{
				{
					
					if (_9813_mant != 0LL) {
						_case_begin_4388621120:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'n','a','n'}));
						}
					}
					else if (_969_neg) {
						_case_begin_4388621488:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'-','i','n','f'}));
						}
					}
					else {
						_case_begin_4388617120:;
						{
							return jule::append(_8221_dst,jule::Slice<jule::U8>({'+','i','n','f'}));
						}
					}
					_match_end_4388615264:;
				}
			}
		}
		else if (_match_expr == 0LL) {
			_case_begin_4388615136:;
			{
				(_9713_exp)++;
			}
		}
		else {
			_case_begin_4388612384:;
			{
				_9813_mant|=static_cast<jule::Uint>(static_cast<jule::U64>(1LLU) << (*(_8413_flt))._field_mantbits);
			}
		}
		_match_end_4388612256:;
	}
	_9713_exp+=(*(_8413_flt))._field_bias;
	if (_8244_fmt == 'b') {
		return _211ca7535_fmt_b(_8221_dst,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	if ((_8244_fmt == 'x') || (_8244_fmt == 'X')) {
		return _211ca7535_fmt_x(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	
	_211ca7535_DecimalSlice _13213_digs = _211ca7535_DecimalSlice();
	jule::Bool _13313_ok = false;
	jule::Bool _1359_shortest = _8259_prec < 0LL;
	if (_1359_shortest) {
		_13213_digs._field_d=jule::Slice<jule::U8>::alloc(32LL);
		_211d646ad_ryu_ftoa_shortest(_13213_digs,_9813_mant,static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits)),(*(_8413_flt)));
		_13313_ok=true;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4388638176:;
				{
					_8259_prec=static_cast<jule::Int>(_211ca7535_max(static_cast<jule::Int>(_13213_digs._field_nd - 1LL),0LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_4388638272:;
				{
					_8259_prec=static_cast<jule::Int>(_211ca7535_max(static_cast<jule::Int>(_13213_digs._field_nd - _13213_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4388638432:;
				{
					_8259_prec=_13213_digs._field_nd;
				}
			}
			_match_end_4388637536:;
		}
	} else if (_8244_fmt != 'f') {
		jule::Int _15217_digits = _8259_prec;
		{
			auto &_match_expr{ _8244_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4388646672:;
				{
					(_15217_digits)++;
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4388646816:;
				{
					if (_8259_prec == 0LL) {
						_8259_prec=1LL;
					}
					_15217_digits=_8259_prec;
				}
			}
			else {
				_case_begin_4388644704:;
				{
					_15217_digits=1LL;
				}
			}
			_match_end_4388645792:;
		}
		if ((_8270_bit_size == 32LL) && (_15217_digits <= 9LL)) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_211d646ad_ryu_ftoa_fixed32(_13213_digs,static_cast<jule::U32>(static_cast<jule::U32>(_9813_mant)),static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits)),_15217_digits);
			_13313_ok=true;
		} else if (_15217_digits <= 18LL) {
			_13213_digs._field_d=jule::Slice<jule::U8>::alloc(24LL);
			_211d646ad_ryu_ftoa_fixed64(_13213_digs,_9813_mant,static_cast<jule::Int>(_9713_exp - static_cast<jule::Int>((*(_8413_flt))._field_mantbits)),_15217_digits);
			_13313_ok=true;
		}
	}
	if ((!(_13313_ok))) {
		return _211ca7535_big_ftoa(_8221_dst,_8259_prec,_8244_fmt,_969_neg,_9813_mant,_9713_exp,(*(_8413_flt)));
	}
	return _211ca7535_fmt_digits(_8221_dst,_1359_shortest,_969_neg,_13213_digs,_8259_prec,_8244_fmt);
}



inline jule::Slice<jule::U8> _211ca7535_big_ftoa(jule::Slice<jule::U8> _18217_dst,jule::Int _18234_prec,jule::U8 _18245_fmt,jule::Bool _18256_neg,jule::U64 _18313_mant,jule::Int _18324_exp,_211ca7535_FloatInfo& _18335_flt) {
	_1b6a7a1bb_Decimal _18413_d = _1b6a7a1bb_Decimal();
	_18413_d._method_assign(_18313_mant);
	_18413_d._method_shift(static_cast<jule::Int>(_18324_exp - static_cast<jule::Int>(_18335_flt._field_mantbits)));
	_211ca7535_DecimalSlice _18713_digs = _211ca7535_DecimalSlice();
	jule::Bool _1889_shortest = _18234_prec < 0LL;
	if (_1889_shortest) {
		_211ca7535_round_shortest(_18413_d,_18313_mant,_18324_exp,_18335_flt);
		_18713_digs=_211ca7535_DecimalSlice(_18413_d._field_d.slice(0LL),_18413_d._field_nd,_18413_d._field_dp,jule::Bool());
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4388678400:;
				{
					_18234_prec=static_cast<jule::Int>(_18713_digs._field_nd - 1LL);
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_4388678496:;
				{
					_18234_prec=static_cast<jule::Int>(_211ca7535_max(static_cast<jule::Int>(_18713_digs._field_nd - _18713_digs._field_dp),0LL));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4388678640:;
				{
					_18234_prec=_18713_digs._field_nd;
				}
			}
			_match_end_4388677024:;
		}
	} else {
		{
			auto &_match_expr{ _18245_fmt };
			
			if (_match_expr == 'e' || _match_expr == 'E') {
				_case_begin_4388684048:;
				{
					_18413_d._method_round(static_cast<jule::Int>(_18234_prec + 1LL));
				}
			}
			else if (_match_expr == 'f') {
				_case_begin_4388684144:;
				{
					_18413_d._method_round(static_cast<jule::Int>(_18413_d._field_dp + _18234_prec));
				}
			}
			else if (_match_expr == 'g' || _match_expr == 'G') {
				_case_begin_4388684240:;
				{
					if (_18234_prec == 0LL) {
						_18234_prec=1LL;
					}
					_18413_d._method_round(_18234_prec);
				}
			}
			_match_end_4388683920:;
		}
		_18713_digs=_211ca7535_DecimalSlice(_18413_d._field_d.slice(0LL),_18413_d._field_nd,_18413_d._field_dp,jule::Bool());
	}
	return _211ca7535_fmt_digits(_18217_dst,_1889_shortest,_18256_neg,_18713_digs,_18234_prec,_18245_fmt);
}



inline jule::Slice<jule::U8> _211ca7535_fmt_digits(jule::Slice<jule::U8> _21919_dst,jule::Bool _21932_shortest,jule::Bool _21948_neg,_211ca7535_DecimalSlice _22013_digs,jule::Int _22037_prec,jule::U8 _22048_fmt) {
	{
		auto &_match_expr{ _22048_fmt };
		
		if (_match_expr == 'e' || _match_expr == 'E') {
			_case_begin_4388698288:;
			{
				return _211ca7535_fmt_e(_21919_dst,_21948_neg,_22013_digs,_22037_prec,_22048_fmt);
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_4388698384:;
			{
				return _211ca7535_fmt_f(_21919_dst,_21948_neg,_22013_digs,_22037_prec);
			}
		}
		else if (_match_expr == 'g' || _match_expr == 'G') {
			_case_begin_4388698576:;
			{
				jule::Int _22817_eprec = _22037_prec;
				if ((_22817_eprec > _22013_digs._field_nd) && (_22013_digs._field_nd >= _22013_digs._field_dp)) {
					_22817_eprec=_22013_digs._field_nd;
				}
				if (_21932_shortest) {
					_22817_eprec=6LL;
				}
				jule::Int _23813_exp = _22013_digs._field_dp - 1LL;
				if ((_23813_exp < -4LL) || (_23813_exp >= _22817_eprec)) {
					if (_22037_prec > _22013_digs._field_nd) {
						_22037_prec=_22013_digs._field_nd;
					}
					return _211ca7535_fmt_e(_21919_dst,_21948_neg,_22013_digs,static_cast<jule::Int>(_22037_prec - 1LL),static_cast<jule::U8>((_22048_fmt + 'e') - 'g'));
				}
				if (_22037_prec > _22013_digs._field_dp) {
					_22037_prec=_22013_digs._field_nd;
				}
				return _211ca7535_fmt_f(_21919_dst,_21948_neg,_22013_digs,static_cast<jule::Int>(_211ca7535_max(static_cast<jule::Int>(_22037_prec - _22013_digs._field_dp),0LL)));
			}
		}
		_match_end_4388698176:;
	}
	return jule::append(_21919_dst,jule::Slice<jule::U8>({'%',_22048_fmt}));
}



inline void _211ca7535_round_shortest(_1b6a7a1bb_Decimal& _25724_d,jule::U64 _25736_mant,jule::Int _25747_exp,_211ca7535_FloatInfo& _25758_flt) {
	if (_25736_mant == 0LL) {
		_25724_d._field_nd=0LL;
		return;
	}
	jule::Int _2789_minexp = _25758_flt._field_bias + 1LL;
	if ((_25747_exp > _2789_minexp) && ((332LL * (_25724_d._field_dp - _25724_d._field_nd)) >= (100LL * (_25747_exp - static_cast<jule::Int>(_25758_flt._field_mantbits))))) {
		return;
	}
	_1b6a7a1bb_Decimal _28713_upper = _1b6a7a1bb_Decimal();
	_28713_upper._method_assign(static_cast<jule::U64>((_25736_mant << 1LLU) + 1LL));
	_28713_upper._method_shift(static_cast<jule::Int>((_25747_exp - static_cast<jule::Int>(_25758_flt._field_mantbits)) - 1LL));
	jule::U64 _29713_mantlo = 0LLU;
	jule::Int _29813_explo = 0LL;
	if ((_25736_mant > (1LL << _25758_flt._field_mantbits)) || (_25747_exp == _2789_minexp)) {
		_29713_mantlo=static_cast<jule::U64>(_25736_mant - 1LL);
		_29813_explo=_25747_exp;
	} else {
		_29713_mantlo=static_cast<jule::U64>((_25736_mant << 1LLU) - 1LL);
		_29813_explo=static_cast<jule::Int>(_25747_exp - 1LL);
	}
	_1b6a7a1bb_Decimal _30613_lower = _1b6a7a1bb_Decimal();
	_30613_lower._method_assign(static_cast<jule::U64>((_29713_mantlo << 1LLU) + 1LL));
	_30613_lower._method_shift(static_cast<jule::Int>((_29813_explo - static_cast<jule::Int>(_25758_flt._field_mantbits)) - 1LL));
	jule::Bool _3139_inclusive = (_25736_mant % 2LL) == 0LL;
	jule::U8 _32613_upperdelta = 0LLU;
	jule::Int _33013_ui = 0LL;
	for (; ; (_33013_ui)++) {
		{
			jule::Int _33513_mi = (_33013_ui - _28713_upper._field_dp) + _25724_d._field_dp;
			if (_33513_mi >= _25724_d._field_nd) {
				goto _iter_end_4388731328;
			}
			jule::Int _33913_li = (_33013_ui - _28713_upper._field_dp) + _30613_lower._field_dp;
			jule::U8 _34017_l = static_cast<jule::U8>(48LLU);
			if ((_33913_li >= 0LL) && (_33913_li < _30613_lower._field_nd)) {
				_34017_l=_30613_lower._field_d[_33913_li];
			}
			jule::U8 _34417_m = static_cast<jule::U8>(48LLU);
			if (_33513_mi >= 0LL) {
				_34417_m=_25724_d._field_d[_33513_mi];
			}
			jule::U8 _34817_u = static_cast<jule::U8>(48LLU);
			if (_33013_ui < _28713_upper._field_nd) {
				_34817_u=_28713_upper._field_d[_33013_ui];
			}
			jule::Bool _35613_okdown = (_34017_l != _34417_m) || (_3139_inclusive && ((_33913_li + 1LL) == _30613_lower._field_nd));
			{
				
				if ((_32613_upperdelta == 0LL) && ((_34417_m + 1LL) < _34817_u)) {
					_case_begin_4388762512:;
					{
						_32613_upperdelta=2LL;
					}
				}
				else if ((_32613_upperdelta == 0LL) && (_34417_m != _34817_u)) {
					_case_begin_4388762624:;
					{
						_32613_upperdelta=1LL;
					}
				}
				else if ((_32613_upperdelta == 1LL) && ((_34417_m != '9') || (_34817_u != '0'))) {
					_case_begin_4388762736:;
					{
						_32613_upperdelta=2LL;
					}
				}
				_match_end_4388762352:;
			}
			jule::Bool _37713_okup = (_32613_upperdelta > 0LL) && ((_3139_inclusive || (_32613_upperdelta > 1LL)) || ((_33013_ui + 1LL) < _28713_upper._field_nd));
			{
				
				if (_35613_okdown && _37713_okup) {
					_case_begin_4388774592:;
					{
						_25724_d._method_round(static_cast<jule::Int>(_33513_mi + 1LL));
						return;
					}
				}
				else if (_35613_okdown) {
					_case_begin_4388774688:;
					{
						_25724_d._method_round_down(static_cast<jule::Int>(_33513_mi + 1LL));
						return;
					}
				}
				else if (_37713_okup) {
					_case_begin_4388774784:;
					{
						_25724_d._method_round_up(static_cast<jule::Int>(_33513_mi + 1LL));
						return;
					}
				}
				_match_end_4388774272:;
			}
		}
	_iter_next_4388731328:;
	}
	_iter_end_4388731328:;
}



inline jule::Slice<jule::U8> _211ca7535_fmt_e(jule::Slice<jule::U8> _39614_dst,jule::Bool _39627_neg,_211ca7535_DecimalSlice _39638_d,jule::Int _39655_prec,jule::U8 _39666_fmt) {
	if (_39627_neg) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('-');
	}
	jule::U8 _40313_ch = '0';
	if (_39638_d._field_nd != 0LL) {
		_40313_ch=_39638_d._field_d[0LL];
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);
	if (_39655_prec > 0LL) {
		_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('.');
		jule::Int _41217_i = 1LL;
		jule::Int _41313_m = _211ca7535_min(_39638_d._field_nd,static_cast<jule::Int>(_39655_prec + 1LL));
		if (_41217_i < _41313_m) {
			_39614_dst=jule::append(_39614_dst,_39638_d._field_d.slice(_41217_i,_41313_m));
			_41217_i=_41313_m;
		}
		for (; _41217_i <= _39655_prec; (_41217_i)++) {
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push('0');
			}
		_iter_next_4388796784:;
		}
		_iter_end_4388796784:;
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_39666_fmt);
	jule::Int _42513_exp = _39638_d._field_dp - 1LL;
	if (_39638_d._field_nd == 0LL) {
		_42513_exp=0LL;
	}
	if (_42513_exp < 0LL) {
		_40313_ch='-';
		_42513_exp=static_cast<jule::Int>((-(_42513_exp)));
	} else {
		_40313_ch='+';
	}
	_39614_dst = jule::alloc_for_append(_39614_dst,1);_39614_dst.__push(_40313_ch);
	{
		
		if (_42513_exp < 10LL) {
			_case_begin_4388803216:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push('0');_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_42513_exp) + '0'));
			}
		}
		else if (_42513_exp < 100LL) {
			_case_begin_4388802816:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,2);_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_42513_exp / 10LL) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_42513_exp % 10LL) + '0'));
			}
		}
		else {
			_case_begin_4388802096:;
			{
				_39614_dst = jule::alloc_for_append(_39614_dst,3);_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_42513_exp / 100LL) + '0'));_39614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>(_42513_exp / 10LL) % 10LL) + '0'));_39614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_42513_exp % 10LL) + '0'));
			}
		}
		_match_end_4388803840:;
	}
	return _39614_dst;
}



inline jule::Slice<jule::U8> _211ca7535_fmt_f(jule::Slice<jule::U8> _45114_dst,jule::Bool _45127_neg,_211ca7535_DecimalSlice _45138_d,jule::Int _45155_prec) {
	if (_45127_neg) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('-');
	}
	if (_45138_d._field_dp > 0LL) {
		jule::Int _45917_m = _211ca7535_min(_45138_d._field_nd,_45138_d._field_dp);
		_45114_dst=jule::append(_45114_dst,_45138_d._field_d.slice(0LL,_45917_m));
		for (; _45917_m < _45138_d._field_dp; (_45917_m)++) {
			{
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');
			}
		_iter_next_4388822896:;
		}
		_iter_end_4388822896:;
	} else {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('0');
	}
	if (_45155_prec > 0LL) {
		_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push('.');
		jule::Int _47017_i = 0LL;
		for (; _47017_i < _45155_prec; (_47017_i)++) {
			{
				jule::U8 _47221_ch = static_cast<jule::U8>(48LLU);
				jule::Int _47317_j = _45138_d._field_dp + _47017_i;
				if ((0LL <= _47317_j) && (_47317_j < _45138_d._field_nd)) {
					_47221_ch=_45138_d._field_d[_47317_j];
				}
				_45114_dst = jule::alloc_for_append(_45114_dst,1);_45114_dst.__push(_47221_ch);
			}
		_iter_next_4388825152:;
		}
		_iter_end_4388825152:;
	}
	return _45114_dst;
}



inline jule::Slice<jule::U8> _211ca7535_fmt_b(jule::Slice<jule::U8> _48414_dst,jule::Bool _48427_neg,jule::U64 _48438_mant,jule::Int _48453_exp,_211ca7535_FloatInfo& _48464_flt) {
	if (_48427_neg) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('-');
	}
	std::tie(_48414_dst,std::ignore) = _1b6ac3d91_fmt_bits(_48414_dst,_48438_mant,10LL,false,true);
	_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('p');
	_48453_exp-=static_cast<jule::Int>(static_cast<jule::Int>(_48464_flt._field_mantbits));
	if (_48453_exp >= 0LL) {
		_48414_dst = jule::alloc_for_append(_48414_dst,1);_48414_dst.__push('+');
	}
	std::tie(_48414_dst,std::ignore) = _1b6ac3d91_fmt_bits(_48414_dst,static_cast<jule::U64>(static_cast<jule::U64>(_48453_exp)),10LL,(_48453_exp < 0LL),true);
	return _48414_dst;
}



inline jule::Slice<jule::U8> _211ca7535_fmt_x(jule::Slice<jule::U8> _50614_dst,jule::Int _50627_prec,jule::U8 _50638_fmt,jule::Bool _50649_neg,jule::U64 _50713_mant,jule::Int _50728_exp,_211ca7535_FloatInfo& _50739_flt) {
	if (_50713_mant == 0LL) {
		_50728_exp=0LL;
	}
	_50713_mant<<=static_cast<jule::Uint>(60LL - _50739_flt._field_mantbits);
	while ((_50713_mant != 0LL) && ((_50713_mant & 1152921504606846976LLU) == 0LL)) {
		{
			_50713_mant<<=1LL;
			(_50728_exp)--;
		}
	_iter_next_4388847440:;
	}
	_iter_end_4388847440:;
	if ((_50627_prec >= 0LL) && (_50627_prec < 15LL)) {
		jule::Uint _52113_shift = static_cast<jule::Uint>(_50627_prec << 2LLU);
		jule::U64 _52213_extra = (_50713_mant << _52113_shift) & 1152921504606846975LLU;
		_50713_mant>>=static_cast<jule::Uint>(60LL - _52113_shift);
		if ((_52213_extra | (_50713_mant & 1LL)) > 576460752303423488LLU) {
			(_50713_mant)++;
		}
		_50713_mant<<=static_cast<jule::Uint>(60LL - _52113_shift);
		if ((_50713_mant & 2305843009213693952LLU) != 0LL) {
			_50713_mant>>=1LL;
			(_50728_exp)++;
		}
	}
	jule::Str _5359_hex = (((_50638_fmt == 'X')) ? (jule::Str("0123456789ABCDEF", 16)) : (jule::Str("0123456789abcdef", 16)));
	if (_50649_neg) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('-');
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push('0');_50614_dst.__push(_50638_fmt);_50614_dst.__push(static_cast<jule::U8>('0' + static_cast<jule::U8>((_50713_mant >> 60LL) & 1LL)));
	_50713_mant<<=4LL;
	if ((_50627_prec < 0LL) && (_50713_mant != 0LL)) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');
		while (_50713_mant != 0LL) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_5359_hex[static_cast<jule::Int>((_50713_mant >> 60LL) & 15LL)]);
				_50713_mant<<=4LL;
			}
		_iter_next_4388867504:;
		}
		_iter_end_4388867504:;
	} else if (_50627_prec > 0LL) {
		_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push('.');
		jule::Int _55317_i = 0LL;
		for (; _55317_i < _50627_prec; (_55317_i)++) {
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_5359_hex[static_cast<jule::Int>((_50713_mant >> 60LL) & 15LL)]);
				_50713_mant<<=4LL;
			}
		_iter_next_4388868000:;
		}
		_iter_end_4388868000:;
	}
	jule::U8 _56113_ch = static_cast<jule::U8>(80LLU);
	if (_50638_fmt == _211cb0593_lower(_50638_fmt)) {
		_56113_ch='p';
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56113_ch);
	if (_50728_exp < 0LL) {
		_56113_ch='-';
		_50728_exp=static_cast<jule::Int>((-(_50728_exp)));
	} else {
		_56113_ch='+';
	}
	_50614_dst = jule::alloc_for_append(_50614_dst,1);_50614_dst.__push(_56113_ch);
	{
		
		if (_50728_exp < 100LL) {
			_case_begin_4388883472:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,2);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp / 10LL) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp % 10LL) + '0'));
			}
		}
		else if (_50728_exp < 1000LL) {
			_case_begin_4388883200:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,3);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp / 100LL) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp / 10LL % 10LL) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp % 10LL) + '0'));
			}
		}
		else {
			_case_begin_4388863856:;
			{
				_50614_dst = jule::alloc_for_append(_50614_dst,4);_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp / 1000LL) + '0'));_50614_dst.__push(static_cast<jule::U8>((static_cast<jule::U8>(_50728_exp / 100LL) % 10LL) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp / 10LL % 10LL) + '0'));_50614_dst.__push(static_cast<jule::U8>(static_cast<jule::U8>(_50728_exp % 10LL) + '0'));
			}
		}
		_match_end_4388885280:;
	}
	return _50614_dst;
}



inline jule::Int _211ca7535_min(jule::Int _5868_a,jule::Int _58616_b) {
	return static_cast<jule::Int>((((_5868_a < _58616_b)) ? (_5868_a) : (_58616_b)));
}



inline jule::Int _211ca7535_max(jule::Int _5908_a,jule::Int _59016_b) {
	return static_cast<jule::Int>((((_5908_a > _59016_b)) ? (_5908_a) : (_59016_b)));
}



inline jule::U8 _211cb0593_lower(jule::U8 _4710_c) {
	return static_cast<jule::U8>(_4710_c | 32LL);
}



inline std::tuple<jule::U64,jule::Int> _211cb0593_parse_uint(jule::Str _5423_s,jule::Int _5435_base,jule::Int _5450_bit_size) {
	if (_5423_s == jule::Str()) {
		return std::make_tuple(0LL,2LLU);
	}
	{
		
		if ((2LL <= _5435_base) && (_5435_base <= 36LL)) {
			_case_begin_4388911712:;
		}
		else if (_5435_base == 0LL) {
			_case_begin_4388910848:;
			{
				_5435_base=10LL;
				if (_5423_s[0LL] == '0') {
					{
						
						if ((_5423_s.len() >= 3LL) && (_211cb0593_lower(_5423_s[1LL]) == 'b')) {
							_case_begin_4388917616:;
							{
								_5435_base=2LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_211cb0593_lower(_5423_s[1LL]) == 'o')) {
							_case_begin_4388917280:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else if ((_5423_s.len() >= 3LL) && (_211cb0593_lower(_5423_s[1LL]) == 'x')) {
							_case_begin_4388916592:;
							{
								_5435_base=16LL;
								_5423_s=_5423_s.slice(2LL);
							}
						}
						else {
							_case_begin_4388916288:;
							{
								_5435_base=8LL;
								_5423_s=_5423_s.slice(1LL);
							}
						}
						_match_end_4388916112:;
					}
				}
			}
		}
		else {
			_case_begin_4388908016:;
			{
				return std::make_tuple(0LL,3LLU);
			}
		}
		_match_end_4388908880:;
	}
	if (_5450_bit_size == 0LL) {
		_5450_bit_size=64LLU;
	} else if ((_5450_bit_size < 0LL) || (_5450_bit_size > 64LL)) {
		return std::make_tuple(0LL,4LLU);
	}
	jule::U64 _9313_cutoff = 0LLU;
	{
		auto &_match_expr{ _5435_base };
		
		if (_match_expr == 10LL) {
			_case_begin_4388935696:;
			{
				_9313_cutoff=1844674407370955265LLU;
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_4388935248:;
			{
				_9313_cutoff=1152921504606846977LLU;
			}
		}
		else {
			_case_begin_4388934400:;
			{
				_9313_cutoff=static_cast<jule::U64>(jule::div(jule::MAX_U64,static_cast<jule::U64>(_5435_base)) + 1LL);
			}
		}
		_match_end_4388934832:;
	}
	jule::U64 _10313_max_val = 0LLU;
	{
		auto &_match_expr{ _5450_bit_size };
		
		if (_match_expr == 32LL) {
			_case_begin_4388939280:;
			{
				_10313_max_val=4294967295LLU;
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4388940496:;
			{
				_10313_max_val=jule::MAX_U64;
			}
		}
		_match_end_4388940032:;
	}
	jule::U64 _11713_n = 0LLU;
	{
		auto &expr = _5423_s;
		auto it = expr.begin();
		_iter_begin_4388943664:;
		if (it != expr.end()) {
			jule::U8 &_211cb0593_c = *it;
			{
				jule::U8 _11917_d = 0LLU;
				{
					
					if (('0' <= _211cb0593_c) && (_211cb0593_c <= '9')) {
						_case_begin_4388948304:;
						{
							_11917_d=static_cast<jule::U8>(_211cb0593_c - '0');
						}
					}
					else if (('a' <= _211cb0593_lower(_211cb0593_c)) && (_211cb0593_lower(_211cb0593_c) <= 'z')) {
						_case_begin_4388947440:;
						{
							_11917_d=static_cast<jule::U8>((_211cb0593_lower(_211cb0593_c) - 'a') + 10LL);
						}
					}
					else if (_211cb0593_c == '_') {
						_case_begin_4388947536:;
						{
							goto _iter_next_4388943664;
						}
					}
					else {
						_case_begin_4388946432:;
						{
							return std::make_tuple(0LL,2LLU);
						}
					}
					_match_end_4388946320:;
				}
				if (_11917_d >= static_cast<jule::U8>(_5435_base)) {
					return std::make_tuple(0LL,2LLU);
				}
				if (_11713_n >= _9313_cutoff) {
					return std::make_tuple(_10313_max_val,1LLU);
				}
				_11713_n*=static_cast<jule::U64>(static_cast<jule::U64>(_5435_base));
				jule::U64 _14113_n1 = _11713_n + static_cast<jule::U64>(_11917_d);
				if ((_14113_n1 < _11713_n) || (_14113_n1 > _10313_max_val)) {
					return std::make_tuple(_10313_max_val,1LLU);
				}
				_11713_n=_14113_n1;
			}
			_iter_next_4388943664:;
			++it;
			goto _iter_begin_4388943664;
		}
		_iter_end_4388943664:;
	}
	return std::make_tuple(_11713_n,0LLU);
}



inline std::tuple<jule::I64,jule::Int> _211cb0593_parse_int(jule::Str _17222_s,jule::Int _17230_base,jule::Int _17245_bit_size) {
	jule::I64 _17262_i = jule::I64();
	jule::Int _17270_err = 0LLU;
	if (_17222_s == jule::Str()) {
		_17262_i = 0LL;
		_17270_err = 2LLU;
		return std::make_tuple(_17262_i,_17270_err);
	}
	jule::Bool _17813_neg = false;
	if (_17222_s[0LL] == '+') {
		_17222_s=_17222_s.slice(1LL);
	} else if (_17222_s[0LL] == '-') {
		_17813_neg=true;
		_17222_s=_17222_s.slice(1LL);
	}
	jule::Uint _18713_un = 0LLU;
	std::tie(_18713_un,_17270_err) = _211cb0593_parse_uint(_17222_s,_17230_base,_17245_bit_size);
	if ((_17270_err != 0LLU) && (_17270_err != 1LLU)) {
		_17262_i = 0LL;
		return std::make_tuple(_17262_i,_17270_err);
	}
	if (_17245_bit_size == 0LL) {
		_17245_bit_size=64LLU;
	}
	jule::U64 _1979_cutoff = static_cast<jule::U64>(1LL << static_cast<jule::Uint>(_17245_bit_size - 1LL));
	if ((!(_17813_neg)) && (_18713_un >= _1979_cutoff)) {
		_17262_i = static_cast<jule::I64>(static_cast<jule::I64>(_1979_cutoff - 1LL));
		_17270_err = 1LLU;
		return std::make_tuple(_17262_i,_17270_err);
	}
	if (_17813_neg && (_18713_un > _1979_cutoff)) {
		_17262_i = static_cast<jule::I64>((-(static_cast<jule::I64>(_1979_cutoff))));
		_17270_err = 1LLU;
		return std::make_tuple(_17262_i,_17270_err);
	}
	jule::I64 _20413_n = static_cast<jule::I64>(_18713_un);
	if (_17813_neg) {
		_20413_n=static_cast<jule::I64>((-(_20413_n)));
	}
	_17262_i = _20413_n;
	_17270_err = 0LLU;
	return std::make_tuple(_17262_i,_17270_err);
}



inline std::tuple<jule::F64,jule::Bool> _211d62436_eisel_lemire64(jule::U64 _4123_man,jule::Int _4133_exp10,jule::Bool _4145_neg) {
	jule::F64 _4158_f = jule::F64();
	jule::Bool _4166_ok = jule::Bool();
	if (_4123_man == 0LL) {
		if (_4145_neg) {
			_4158_f=static_cast<jule::F64>(_1b6aecc33_f64_from_bits(9223372036854775808LLU));
		}
		_4166_ok = true;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	if ((_4133_exp10 < -348LL) || (347LL < _4133_exp10)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::Int _579_clz = _1b738619c_leading_zeros64(_4123_man);
	_4123_man<<=static_cast<jule::Uint>(static_cast<jule::Uint>(_579_clz));
	
	jule::U64 _6013_ret_exp2 = static_cast<jule::U64>((((217706LL * _4133_exp10) >> 16LL) + 64LL) + 1023LL) - static_cast<jule::U64>(_579_clz);
	jule::U64 _6314_x_hi;
	jule::U64 _6324_x_lo;
	std::tie(_6314_x_hi,_6324_x_lo) = _1b738619c_mul64(_4123_man,_211d62436_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(1LL));
	if (((_6314_x_hi & 511LL) == 511LL) && ((_6324_x_lo + _4123_man) < _4123_man)) {
		jule::U64 _6714_y_hi;
		jule::U64 _6720_y_lo;
		std::tie(_6714_y_hi,_6720_y_lo) = _1b738619c_mul64(_4123_man,_211d62436_DETAILED_POWS_OF_TEN[_4133_exp10 - -348LL].__at(0LL));
		jule::U64 _6818_merged_hi = _6314_x_hi;
		jule::U64 _6829_merged_lo = _6324_x_lo + _6714_y_hi;
		std::tie(_6818_merged_hi,_6829_merged_lo) = std::make_tuple(_6314_x_hi,_6324_x_lo + _6714_y_hi);
		if (_6829_merged_lo < _6324_x_lo) {
			(_6818_merged_hi)++;
		}
		if ((((_6818_merged_hi & 511LL) == 511LL) && ((_6829_merged_lo + 1LL) == 0LL)) && ((_6720_y_lo + _4123_man) < _4123_man)) {
			_4158_f = 0LL;
			_4166_ok = false;
			return std::make_tuple(_4158_f,_4166_ok);
		}
		std::tie(_6314_x_hi,_6324_x_lo) = std::make_tuple(_6818_merged_hi,_6829_merged_lo);
	}
	jule::U64 _799_msb = _6314_x_hi >> 63LL;
	jule::U64 _8013_ret_mantissa = _6314_x_hi >> (_799_msb + 9LL);
	_6013_ret_exp2-=static_cast<jule::U64>(1LL ^ _799_msb);
	if (((_6324_x_lo == 0LL) && ((_6314_x_hi & 511LL) == 0LL)) && ((_8013_ret_mantissa & 3LL) == 1LL)) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	_8013_ret_mantissa+=static_cast<jule::U64>(_8013_ret_mantissa & 1LL);
	_8013_ret_mantissa>>=1LL;
	if ((_8013_ret_mantissa >> 53LL) > 0LL) {
		_8013_ret_mantissa>>=1LL;
		_6013_ret_exp2+=1LL;
	}
	if ((_6013_ret_exp2 - 1LL) >= 2046LL) {
		_4158_f = 0LL;
		_4166_ok = false;
		return std::make_tuple(_4158_f,_4166_ok);
	}
	jule::U64 _10313_ret_bits = (_6013_ret_exp2 << 52LL) | (_8013_ret_mantissa & 4503599627370495LL);
	if (_4145_neg) {
		_10313_ret_bits|=9223372036854775808LLU;
	}
	_4158_f = static_cast<jule::F64>(_1b6aecc33_f64_from_bits(_10313_ret_bits));
	_4166_ok = true;
	return std::make_tuple(_4158_f,_4166_ok);
}



inline std::tuple<jule::F32,jule::Bool> _211d62436_eisel_lemire32(jule::U64 _11023_man,jule::Int _11033_exp10,jule::Bool _11045_neg) {
	jule::F32 _11058_f = jule::F32();
	jule::Bool _11066_ok = jule::Bool();
	if (_11023_man == 0LL) {
		if (_11045_neg) {
			_11058_f=static_cast<jule::F32>(_1b6aecc33_f32_from_bits(2147483648LLU));
		}
		_11066_ok = true;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	if ((_11033_exp10 < -348LL) || (347LL < _11033_exp10)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::Int _1329_clz = _1b738619c_leading_zeros64(_11023_man);
	_11023_man<<=static_cast<jule::Uint>(static_cast<jule::Uint>(_1329_clz));
	
	jule::U64 _13513_ret_exp2 = static_cast<jule::U64>((((217706LL * _11033_exp10) >> 16LL) + 64LL) + 127LL) - static_cast<jule::U64>(_1329_clz);
	jule::U64 _13814_x_hi;
	jule::U64 _13824_x_lo;
	std::tie(_13814_x_hi,_13824_x_lo) = _1b738619c_mul64(_11023_man,_211d62436_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(1LL));
	if (((_13814_x_hi & 274877906943LL) == 274877906943LL) && ((_13824_x_lo + _11023_man) < _11023_man)) {
		jule::U64 _14214_y_hi;
		jule::U64 _14220_y_lo;
		std::tie(_14214_y_hi,_14220_y_lo) = _1b738619c_mul64(_11023_man,_211d62436_DETAILED_POWS_OF_TEN[_11033_exp10 - -348LL].__at(0LL));
		jule::U64 _14318_merged_hi = _13814_x_hi;
		jule::U64 _14329_merged_lo = _13824_x_lo + _14214_y_hi;
		std::tie(_14318_merged_hi,_14329_merged_lo) = std::make_tuple(_13814_x_hi,_13824_x_lo + _14214_y_hi);
		if (_14329_merged_lo < _13824_x_lo) {
			(_14318_merged_hi)++;
		}
		if ((((_14318_merged_hi & 274877906943LL) == 274877906943LL) && ((_14329_merged_lo + 1LL) == 0LL)) && ((_14220_y_lo + _11023_man) < _11023_man)) {
			_11058_f = 0LL;
			_11066_ok = false;
			return std::make_tuple(_11058_f,_11066_ok);
		}
		std::tie(_13814_x_hi,_13824_x_lo) = std::make_tuple(_14318_merged_hi,_14329_merged_lo);
	}
	jule::U64 _1549_msb = _13814_x_hi >> 63LL;
	jule::U64 _15513_ret_mantissa = _13814_x_hi >> (_1549_msb + 38LL);
	_13513_ret_exp2-=static_cast<jule::U64>(1LL ^ _1549_msb);
	if (((_13824_x_lo == 0LL) && ((_13814_x_hi & 274877906943LL) == 0LL)) && ((_15513_ret_mantissa & 3LL) == 1LL)) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	_15513_ret_mantissa+=static_cast<jule::U64>(_15513_ret_mantissa & 1LL);
	_15513_ret_mantissa>>=1LL;
	if ((_15513_ret_mantissa >> 24LL) > 0LL) {
		_15513_ret_mantissa>>=1LL;
		_13513_ret_exp2+=1LL;
	}
	if ((_13513_ret_exp2 - 1LL) >= 254LL) {
		_11058_f = 0LL;
		_11066_ok = false;
		return std::make_tuple(_11058_f,_11066_ok);
	}
	jule::U64 _17813_ret_bits = (_13513_ret_exp2 << 23LL) | (_15513_ret_mantissa & 8388607LL);
	if (_11045_neg) {
		_17813_ret_bits|=2147483648LL;
	}
	_11058_f = static_cast<jule::F32>(_1b6aecc33_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_17813_ret_bits))));
	_11066_ok = true;
	return std::make_tuple(_11058_f,_11066_ok);
}



inline jule::Int _211cadddd_common_prefix_len_ignore_case(jule::Str _4534_s,jule::Str _4542_prefix) {
	jule::I64 _4613_n = _4542_prefix.len();
	if (_4613_n > _4534_s.len()) {
		_4613_n=static_cast<jule::I64>(_4534_s.len());
	}
	jule::Int _5013_i = 0LL;
	for (; _5013_i < _4613_n; (_5013_i)++) {
		{
			jule::U8 _5217_c = _4534_s[_5013_i];
			if (('A' <= _5217_c) && (_5217_c <= 'Z')) {
				_5217_c+=32LL;
			}
			if (_5217_c != _4542_prefix[_5013_i]) {
				return _5013_i;
			}
		}
	_iter_next_4389084848:;
	}
	_iter_end_4389084848:;
	return _4613_n;
}



inline std::tuple<jule::F64,jule::Int,jule::Bool> _211cadddd_special(jule::Str _6816_s) {
	jule::F64 _6826_f = jule::F64();
	jule::Int _6834_n = jule::Int();
	jule::Bool _6842_ok = jule::Bool();
	if (_6816_s == jule::Str()) {
		_6826_f = 0LL;
		_6834_n = 0LL;
		_6842_ok = false;
		return std::make_tuple(_6826_f,_6834_n,_6842_ok);
	}
	jule::Int _7213_sign = 1LL;
	jule::Int _7313_nsign = 0LL;
	{
		auto &_match_expr{ _6816_s[0LL] };
		
		if (_match_expr == '+' || _match_expr == '-') {
			_case_begin_4389099776:;
			{
				if (_6816_s[0LL] == '-') {
					_7213_sign=-1LL;
				}
				_7313_nsign=1LL;
				_6816_s=_6816_s.slice(1LL);
				goto _case_begin_4389099872;
			}
		}
		else if (_match_expr == 'i' || _match_expr == 'I') {
			_case_begin_4389099872:;
			{
				jule::Int _8317_case_n = _211cadddd_common_prefix_len_ignore_case(_6816_s,jule::Str("infinity", 8));
				if ((3LL < _8317_case_n) && (_8317_case_n < 8LL)) {
					_8317_case_n=3LL;
				}
				if ((_8317_case_n == 3LL) || (_8317_case_n == 8LL)) {
					_6826_f = static_cast<jule::F64>(_1b62a95ee_inf(_7213_sign));
					_6834_n = static_cast<jule::Int>(_7313_nsign + _6834_n);
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		else if (_match_expr == 'n' || _match_expr == 'N') {
			_case_begin_4389099968:;
			{
				if (_211cadddd_common_prefix_len_ignore_case(_6816_s,jule::Str("nan", 3)) == 3LL) {
					_6826_f = static_cast<jule::F64>(_1b62a95ee_nan());
					_6834_n = 3LL;
					_6842_ok = true;
					return std::make_tuple(_6826_f,_6834_n,_6842_ok);
				}
			}
		}
		_match_end_4389099696:;
	}
	_6826_f = 0LL;
	_6834_n = 0LL;
	_6842_ok = false;
	return std::make_tuple(_6826_f,_6834_n,_6842_ok);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool,jule::Bool,jule::Bool,jule::Int,jule::Bool> _211cadddd_read_float(jule::Str _10315_s) {
	jule::U64 _10325_mantissa = jule::U64();
	jule::Int _10340_exp = jule::Int();
	jule::Bool _10350_neg = jule::Bool();
	jule::Bool _10425_trunc = jule::Bool();
	jule::Bool _10438_hex = jule::Bool();
	jule::Int _10449_i = jule::Int();
	jule::Bool _10457_ok = jule::Bool();
	if (_10449_i >= _10315_s.len()) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	{
		
		if (_10315_s[_10449_i] == '+') {
			_case_begin_4389123328:;
			{
				(_10449_i)++;
			}
		}
		else if (_10315_s[_10449_i] == '-') {
			_case_begin_4389123952:;
			{
				_10350_neg=true;
				(_10449_i)++;
			}
		}
		_match_end_4389122672:;
	}
	jule::U64 _11813_base = 10LLU;
	jule::Int _11913_max_mant_digits = 19LL;
	jule::U8 _12013_exp_char = 'e';
	if ((((_10449_i + 2LL) < _10315_s.len()) && (_10315_s[_10449_i] == '0')) && (_211cb0593_lower(_10315_s[_10449_i + 1LL]) == 'x')) {
		_11813_base=16LL;
		_11913_max_mant_digits=16LL;
		_10449_i+=2LL;
		_12013_exp_char='p';
		_10438_hex=true;
	}
	jule::Bool _12813_sawdot = false;
	jule::Bool _12913_sawdigits = false;
	jule::Int _13013_nd = 0LL;
	jule::Int _13113_nd_mant = 0LL;
	jule::Int _13213_dp = 0LL;
	for (; _10449_i < _10315_s.len(); (_10449_i)++) {
		{
			jule::U8 _13413_c = _10315_s[_10449_i];
			{
				
				if (_13413_c == '_') {
					_case_begin_4389144672:;
					{
						goto _iter_next_4389141200;
					}
				}
				else if (_13413_c == '.') {
					_case_begin_4389144784:;
					{
						if (_12813_sawdot) {
							goto _julec_label_loop_end;
						}
						_12813_sawdot=true;
						_13213_dp=_13013_nd;
						goto _iter_next_4389141200;
					}
				}
				else if (('0' <= _13413_c) && (_13413_c <= '9')) {
					_case_begin_4389144896:;
					{
						_12913_sawdigits=true;
						if ((_13413_c == '0') && (_13013_nd == 0LL)) {
							(_13213_dp)--;
							goto _iter_next_4389141200;
						}
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=_11813_base;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>(_13413_c - '0'));
							(_13113_nd_mant)++;
						} else if (_13413_c != '0') {
							_10425_trunc=true;
						}
						goto _iter_next_4389141200;
					}
				}
				else if (((_11813_base == 16LL) && ('a' <= _211cb0593_lower(_13413_c))) && (_211cb0593_lower(_13413_c) <= 'f')) {
					_case_begin_4389145008:;
					{
						_12913_sawdigits=true;
						(_13013_nd)++;
						if (_13113_nd_mant < _11913_max_mant_digits) {
							_10325_mantissa*=16LL;
							_10325_mantissa+=static_cast<jule::U64>(static_cast<jule::U64>((_211cb0593_lower(_13413_c) - 'a') + 10LL));
							(_13113_nd_mant)++;
						} else {
							_10425_trunc=true;
						}
						goto _iter_next_4389141200;
					}
				}
				_match_end_4389144480:;
			}
			goto _iter_end_4389141200;
		}
	_iter_next_4389141200:;
	}
	_iter_end_4389141200:;
	_julec_label_loop_end:;
	if ((!(_12913_sawdigits))) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if ((!(_12813_sawdot))) {
		_13213_dp=_13013_nd;
	}
	if (_11813_base == 16LL) {
		_13213_dp*=4LL;
		_13113_nd_mant*=4LL;
	}
	if ((_10449_i < _10315_s.len()) && (_211cb0593_lower(_10315_s[_10449_i]) == _12013_exp_char)) {
		(_10449_i)++;
		if (_10449_i >= _10315_s.len()) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _19717_esign = 1LL;
		if (_10315_s[_10449_i] == '+') {
			(_10449_i)++;
		} else if (_10315_s[_10449_i] == '-') {
			(_10449_i)++;
			_19717_esign=-1LL;
		}
		if (((_10449_i >= _10315_s.len()) || (_10315_s[_10449_i] < '0')) || (_10315_s[_10449_i] > '9')) {
			return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
		}
		jule::Int _20717_e = 0LL;
		for (; (_10449_i < _10315_s.len()) && ((('0' <= _10315_s[_10449_i]) && (_10315_s[_10449_i] <= '9')) || (_10315_s[_10449_i] == '_')); (_10449_i)++) {
			{
				if (_10315_s[_10449_i] == '_') {
					goto _iter_next_4389177504;
				}
				if (_20717_e < 10000LL) {
					_20717_e=static_cast<jule::Int>(((_20717_e * 10LL) + static_cast<jule::Int>(_10315_s[_10449_i])) - '0');
				}
			}
		_iter_next_4389177504:;
		}
		_iter_end_4389177504:;
		_13213_dp+=static_cast<jule::Int>(_20717_e * _19717_esign);
	} else if (_11813_base == 16LL) {
		return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
	}
	if (_10325_mantissa != 0LL) {
		_10340_exp=static_cast<jule::Int>(_13213_dp - _13113_nd_mant);
	}
	_10457_ok=true;
	return std::make_tuple(_10325_mantissa,_10340_exp,_10350_neg,_10425_trunc,_10438_hex,_10449_i,_10457_ok);
}



inline std::tuple<jule::F64,jule::Bool> _211cadddd_atof64exact(jule::U64 _48216_mantissa,jule::Int _48235_exp,jule::Bool _48245_neg) {
	jule::F64 _48258_f = jule::F64();
	jule::Bool _48266_ok = jule::Bool();
	if ((_48216_mantissa >> _211ca7535_F64_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_48258_f,_48266_ok);
	}
	_48258_f=static_cast<jule::F64>(static_cast<jule::F64>(_48216_mantissa));
	if (_48245_neg) {
		_48258_f=static_cast<jule::F64>((-(_48258_f)));
	}
	{
		
		if (_48235_exp == 0LL) {
			_case_begin_4389221584:;
			{
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		else if ((_48235_exp > 0LL) && (_48235_exp <= 37LL)) {
			_case_begin_4389221696:;
			{
				if (_48235_exp > 22LL) {
					_48258_f*=_211cadddd_F64_POW10[_48235_exp - 22LL];
					_48235_exp=22LL;
				}
				if ((_48258_f > 1000000000000000LL) || (_48258_f < -1000000000000000LL)) {
					return std::make_tuple(_48258_f,_48266_ok);
				}
				_48258_f = static_cast<jule::F64>(_48258_f * _211cadddd_F64_POW10[_48235_exp]);
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		else if ((_48235_exp < 0LL) && (_48235_exp >= -22LL)) {
			_case_begin_4389221808:;
			{
				_48258_f = static_cast<jule::F64>(jule::div(_48258_f,_211cadddd_F64_POW10[(-(_48235_exp))]));
				_48266_ok = true;
				return std::make_tuple(_48258_f,_48266_ok);
			}
		}
		_match_end_4389221408:;
	}
	return std::make_tuple(_48258_f,_48266_ok);
}



inline std::tuple<jule::F32,jule::Bool> _211cadddd_atof32exact(jule::U64 _51616_mantissa,jule::Int _51635_exp,jule::Bool _51649_neg) {
	jule::F32 _51662_f = jule::F32();
	jule::Bool _51670_ok = jule::Bool();
	if ((_51616_mantissa >> _211ca7535_F32_INFO._field_mantbits) != 0LL) {
		return std::make_tuple(_51662_f,_51670_ok);
	}
	_51662_f=static_cast<jule::F32>(static_cast<jule::F32>(_51616_mantissa));
	if (_51649_neg) {
		_51662_f=static_cast<jule::F32>((-(_51662_f)));
	}
	{
		
		if (_51635_exp == 0LL) {
			_case_begin_4389240960:;
			{
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		else if ((_51635_exp > 0LL) && (_51635_exp <= 17LL)) {
			_case_begin_4389241072:;
			{
				if (_51635_exp > 10LL) {
					_51662_f*=_211cadddd_F32_POW10[_51635_exp - 10LL];
					_51635_exp=10LL;
				}
				if ((_51662_f > 10000000LL) || (_51662_f < -10000000LL)) {
					return std::make_tuple(_51662_f,_51670_ok);
				}
				_51662_f = static_cast<jule::F32>(_51662_f * _211cadddd_F32_POW10[_51635_exp]);
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		else if ((_51635_exp < 0LL) && (_51635_exp >= -10LL)) {
			_case_begin_4389241184:;
			{
				_51662_f = static_cast<jule::F32>(jule::div(_51662_f,_211cadddd_F32_POW10[(-(_51635_exp))]));
				_51670_ok = true;
				return std::make_tuple(_51662_f,_51670_ok);
			}
		}
		_match_end_4389240784:;
	}
	return std::make_tuple(_51662_f,_51670_ok);
}



inline std::tuple<jule::F64,jule::Int> _211cadddd_atof_hex(jule::Str _55213_s,_211ca7535_FloatInfo& _55222_flt,jule::U64 _55242_mantissa,jule::Int _55261_exp,jule::Bool _55271_neg,jule::Bool _55282_trunc) {
	jule::Int _5539_max_exp = (static_cast<jule::Int>(1LL << _55222_flt._field_expbits) + _55222_flt._field_bias) - 2LL;
	jule::Int _5549_min_exp = _55222_flt._field_bias + 1LL;
	_55261_exp+=static_cast<jule::Int>(static_cast<jule::Int>(_55222_flt._field_mantbits));
	while ((_55242_mantissa != 0LL) && ((_55242_mantissa >> (_55222_flt._field_mantbits + 2LL)) == 0LL)) {
		{
			_55242_mantissa<<=1LL;
			(_55261_exp)--;
		}
	_iter_next_4389258912:;
	}
	_iter_end_4389258912:;
	if (_55282_trunc) {
		_55242_mantissa|=1LL;
	}
	while ((_55242_mantissa >> ((1LL + _55222_flt._field_mantbits) + 2LL)) != 0LL) {
		{
			_55242_mantissa=static_cast<jule::U64>((_55242_mantissa >> 1LL) | (_55242_mantissa & 1LL));
			(_55261_exp)++;
		}
	_iter_next_4389263168:;
	}
	_iter_end_4389263168:;
	while ((_55242_mantissa > 1LL) && (_55261_exp < (_5549_min_exp - 2LL))) {
		{
			_55242_mantissa=static_cast<jule::U64>((_55242_mantissa >> 1LL) | (_55242_mantissa & 1LL));
			(_55261_exp)++;
		}
	_iter_next_4389267392:;
	}
	_iter_end_4389267392:;
	jule::U64 _58413_round = _55242_mantissa & 3LL;
	_55242_mantissa>>=2LL;
	_58413_round|=static_cast<jule::U64>(_55242_mantissa & 1LL);
	_55261_exp+=2LL;
	if (_58413_round == 3LL) {
		(_55242_mantissa)++;
		if (_55242_mantissa == (1LL << (1LL + _55222_flt._field_mantbits))) {
			_55242_mantissa>>=1LL;
			(_55261_exp)++;
		}
	}
	if ((_55242_mantissa >> _55222_flt._field_mantbits) == 0LL) {
		_55261_exp=_55222_flt._field_bias;
	}
	jule::Int _59913_err = 0LLU;
	if (_55261_exp > _5539_max_exp) {
		_55242_mantissa=static_cast<jule::U64>(static_cast<jule::U64>(1LL << _55222_flt._field_mantbits));
		_55261_exp=static_cast<jule::Int>(_5539_max_exp + 1LL);
		_59913_err=1LLU;
	}
	jule::U64 _60613_bits = _55242_mantissa & ((1LL << _55222_flt._field_mantbits) - 1LL);
	_60613_bits|=static_cast<jule::U64>(static_cast<jule::U64>((_55261_exp - _55222_flt._field_bias) & static_cast<jule::Int>((1LL << _55222_flt._field_expbits) - 1LL)) << _55222_flt._field_mantbits);
	if (_55271_neg) {
		_60613_bits|=static_cast<jule::Uint>((1LL << _55222_flt._field_mantbits) << _55222_flt._field_expbits);
	}
	if (_55222_flt == _211ca7535_F32_INFO) {
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_1b6aecc33_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_60613_bits))))),_59913_err);
	}
	return std::make_tuple(static_cast<jule::F64>(_1b6aecc33_f64_from_bits(_60613_bits)),_59913_err);
}



inline std::tuple<jule::F32,jule::Int,jule::Int> _211cadddd_atof32(jule::Str _61711_s) {
	jule::F32 _61721_f = jule::F32();
	jule::Int _61729_n = jule::Int();
	jule::Int _61737_err = 0LLU;
	{
		jule::F64 _61914_val;
		jule::Int _61919__n;
		jule::Bool _61923_ok;
		std::tie(_61914_val,_61919__n,_61923_ok) = _211cadddd_special(_61711_s);
		if (_61923_ok) {
			_61721_f = static_cast<jule::F32>(static_cast<jule::F32>(_61914_val));
			_61729_n = _61919__n;
			_61737_err = 0LLU;
			return std::make_tuple(_61721_f,_61729_n,_61737_err);
		}
	}
	jule::U64 _62510_mantissa;
	jule::Int _62520_exp;
	jule::Bool _62525_neg;
	jule::Bool _62530_trunc;
	jule::Bool _62537_hex;
	jule::Int _62542__n;
	jule::Bool _62550_ok;
	std::tie(_62510_mantissa,_62520_exp,_62525_neg,_62530_trunc,_62537_hex,_62542__n,_62550_ok) = _211cadddd_read_float(_61711_s);
	_61729_n=_62542__n;
	if ((!(_62550_ok))) {
		_61721_f = 0LL;
		_61737_err = 2LLU;
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	if (_62537_hex) {
		jule::F64 _63217_ff = 0LL;
		std::tie(_63217_ff,_61737_err) = _211cadddd_atof_hex(_61711_s.slice(0LL,_61729_n),_211ca7535_F32_INFO,_62510_mantissa,_62520_exp,_62525_neg,_62530_trunc);
		_61721_f = static_cast<jule::F32>(static_cast<jule::F32>(_63217_ff));
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	{
		if ((!(_62530_trunc))) {
			std::tie(_61721_f,_62550_ok) = _211cadddd_atof32exact(_62510_mantissa,_62520_exp,_62525_neg);
			if (_62550_ok) {
				_61737_err = 0LLU;
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
		}
		std::tie(_61721_f,_62550_ok) = _211d62436_eisel_lemire32(_62510_mantissa,_62520_exp,_62525_neg);
		if (_62550_ok) {
			if ((!(_62530_trunc))) {
				_61737_err = 0LLU;
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
			jule::F32 _65421_f_up = 0LL;
			std::tie(_65421_f_up,_62550_ok) = _211d62436_eisel_lemire32(static_cast<jule::U64>(_62510_mantissa + 1LL),_62520_exp,_62525_neg);
			if (_62550_ok && (_61721_f == _65421_f_up)) {
				_61737_err = 0LLU;
				return std::make_tuple(_61721_f,_61729_n,_61737_err);
			}
		}
	}
	_1b6a7a1bb_Decimal _66313_d = _1b6a7a1bb_Decimal();
	if ((!(_66313_d._method_set(_61711_s.slice(0LL,_61729_n))))) {
		_61721_f = 0LL;
		_61737_err = 2LLU;
		return std::make_tuple(_61721_f,_61729_n,_61737_err);
	}
	jule::U64 _66710_b;
	jule::Bool _66713_ovf;
	std::tie(_66710_b,_66713_ovf) = _66313_d._method_float_bits(_211ca7535_F32_INFO);
	_61721_f=static_cast<jule::F32>(_1b6aecc33_f32_from_bits(static_cast<jule::U32>(static_cast<jule::U32>(_66710_b))));
	if (_66713_ovf) {
		_61737_err=1LLU;
	}
	return std::make_tuple(_61721_f,_61729_n,_61737_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _211cadddd_atof64(jule::Str _67511_s) {
	jule::F64 _67521_f = jule::F64();
	jule::Int _67529_n = jule::Int();
	jule::Int _67537_err = 0LLU;
	{
		jule::F64 _67714_val;
		jule::Int _67719__n;
		jule::Bool _67723_ok;
		std::tie(_67714_val,_67719__n,_67723_ok) = _211cadddd_special(_67511_s);
		if (_67723_ok) {
			_67521_f = _67714_val;
			_67529_n = _67719__n;
			_67537_err = 0LLU;
			return std::make_tuple(_67521_f,_67529_n,_67537_err);
		}
	}
	jule::U64 _68310_mantissa;
	jule::Int _68320_exp;
	jule::Bool _68325_neg;
	jule::Bool _68330_trunc;
	jule::Bool _68337_hex;
	jule::Int _68342__n;
	jule::Bool _68350_ok;
	std::tie(_68310_mantissa,_68320_exp,_68325_neg,_68330_trunc,_68337_hex,_68342__n,_68350_ok) = _211cadddd_read_float(_67511_s);
	_67529_n=_68342__n;
	if ((!(_68350_ok))) {
		_67521_f = 0LL;
		_67537_err = 2LLU;
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	if (_68337_hex) {
		std::tie(_67521_f,_67537_err) = _211cadddd_atof_hex(_67511_s.slice(0LL,_67529_n),_211ca7535_F64_INFO,_68310_mantissa,_68320_exp,_68325_neg,_68330_trunc);
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	{
		if ((!(_68330_trunc))) {
			std::tie(_67521_f,_68350_ok) = _211cadddd_atof64exact(_68310_mantissa,_68320_exp,_68325_neg);
			if (_68350_ok) {
				_67537_err = 0LLU;
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
		}
		std::tie(_67521_f,_68350_ok) = _211d62436_eisel_lemire64(_68310_mantissa,_68320_exp,_68325_neg);
		if (_68350_ok) {
			if ((!(_68330_trunc))) {
				_67537_err = 0LLU;
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
			jule::F64 _71121_f_up = 0LL;
			std::tie(_71121_f_up,_68350_ok) = _211d62436_eisel_lemire64(static_cast<jule::U64>(_68310_mantissa + 1LL),_68320_exp,_68325_neg);
			if (_68350_ok && (_67521_f == _71121_f_up)) {
				_67537_err = 0LLU;
				return std::make_tuple(_67521_f,_67529_n,_67537_err);
			}
		}
	}
	_1b6a7a1bb_Decimal _72013_d = _1b6a7a1bb_Decimal();
	if ((!(_72013_d._method_set(_67511_s.slice(0LL,_67529_n))))) {
		_67521_f = 0LL;
		_67537_err = 2LLU;
		return std::make_tuple(_67521_f,_67529_n,_67537_err);
	}
	jule::U64 _72410_b;
	jule::Bool _72413_ovf;
	std::tie(_72410_b,_72413_ovf) = _72013_d._method_float_bits(_211ca7535_F64_INFO);
	_67521_f=static_cast<jule::F64>(_1b6aecc33_f64_from_bits(_72410_b));
	if (_72413_ovf) {
		_67537_err=1LLU;
	}
	return std::make_tuple(_67521_f,_67529_n,_67537_err);
}



inline std::tuple<jule::F64,jule::Int,jule::Int> _211cadddd_parse_float_prefix(jule::Str _73223_s,jule::Int _73231_bit_size) {
	if (_73231_bit_size == 32LL) {
		jule::F32 _73414_f;
		jule::Int _73417_n;
		jule::Int _73420_err;
		std::tie(_73414_f,_73417_n,_73420_err) = _211cadddd_atof32(_73223_s);
		return std::make_tuple(static_cast<jule::F64>(static_cast<jule::F64>(_73414_f)),_73417_n,_73420_err);
	}
	jule::F64 _73810_f;
	jule::Int _73813_n;
	jule::Int _73816_err;
	std::tie(_73810_f,_73813_n,_73816_err) = _211cadddd_atof64(_73223_s);
	return std::make_tuple(_73810_f,_73813_n,_73816_err);
}



inline std::tuple<jule::F64,jule::Int> _211cadddd_parse_float(jule::Str _76620_s,jule::Int _76628_bit_size) {
	jule::F64 _76710_f;
	jule::Int _76713_n;
	jule::Int _76716_err;
	std::tie(_76710_f,_76713_n,_76716_err) = _211cadddd_parse_float_prefix(_76620_s,_76628_bit_size);
	if ((_76713_n != _76620_s.len()) && ((_76716_err == 0LLU) || (_76716_err != 2LLU))) {
		return std::make_tuple(0LL,2LLU);
	}
	return std::make_tuple(_76710_f,_76716_err);
}



inline void _211d646ad_ryu_ftoa_fixed32(_211ca7535_DecimalSlice& _4926_d,jule::U32 _4947_mant,jule::Int _4958_exp,jule::Int _4968_prec) {
	if (_4968_prec < 0LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with negative prec", 42) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:51:9"));;
	}
	if (_4968_prec > 9LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed32 called with prec > 9", 37) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:54:9"));;
	}
	if (_4947_mant == 0LL) {
		std::tie(_4926_d._field_nd,_4926_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _6213_e2 = _4958_exp;
	jule::Int _639_b = _1b738619c_len32(_4947_mant);
	if (_639_b < 25LL) {
		_4947_mant<<=static_cast<jule::Uint>(static_cast<jule::Uint>(25LL - _639_b));
		_6213_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_639_b) - 25LL);
	}
	jule::Int _749_q = ((-(_211d646ad_mul_by_log2_log10(static_cast<jule::Int>(_6213_e2 + 24LL)))) + _4968_prec) - 1LL;
	jule::Bool _7913_exact = (_749_q <= 27LL) && (_749_q >= 0LL);
	jule::U32 _8114_di;
	jule::Int _8118_dexp2;
	jule::Bool _8129_d0;
	std::tie(_8114_di,_8118_dexp2,_8129_d0) = _211d646ad_mult64bit_pow10(_4947_mant,_6213_e2,_749_q);
	if (_8118_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult64bit_pow10", 49) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:83:9"));;
	}
	if (((_749_q < 0LL) && (_749_q >= -10LL)) && _211d646ad_divisible_by_pow5(static_cast<jule::U64>(static_cast<jule::U64>(_4947_mant)),static_cast<jule::Int>((-(_749_q))))) {
		_7913_exact=true;
		_8129_d0=true;
	}
	jule::Uint _949_extra = static_cast<jule::Uint>((-(_8118_dexp2)));
	jule::U32 _959_extra_mask = static_cast<jule::U32>((1LL << _949_extra) - 1LL);
	jule::U32 _9713_dfrac = 0LLU;
	std::tie(_8114_di,_9713_dfrac) = std::make_tuple(static_cast<jule::U32>(_8114_di >> _949_extra),static_cast<jule::U32>(_8114_di & _959_extra_mask));
	jule::Bool _9913_round_up = false;
	if (_7913_exact) {
		_9913_round_up=((_9713_dfrac > (1LL << (_949_extra - 1LL))) || ((_9713_dfrac == (1LL << (_949_extra - 1LL))) && (!(_8129_d0)))) || (((_9713_dfrac == (1LL << (_949_extra - 1LL))) && _8129_d0) && ((_8114_di & 1LL) == 1LL));
	} else {
		_9913_round_up=(_9713_dfrac >> (_949_extra - 1LL)) == 1LL;
	}
	if (_9713_dfrac != 0LL) {
		_8129_d0=false;
	}
	_211d646ad_format_decimal(_4926_d,static_cast<jule::U64>(static_cast<jule::U64>(_8114_di)),(!(_8129_d0)),_9913_round_up,_4968_prec);
	_4926_d._field_dp-=_749_q;
}



inline void _211d646ad_ryu_ftoa_fixed64(_211ca7535_DecimalSlice& _12326_d,jule::U64 _12347_mant,jule::Int _12358_exp,jule::Int _12368_prec) {
	if (_12368_prec > 18LL) {
		jule::panic(jule::Str("ryu_ftoa_fixed64 called with prec > 18", 38) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:125:9"));;
	}
	if (_12347_mant == 0LL) {
		std::tie(_12326_d._field_nd,_12326_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	jule::Int _13313_e2 = _12358_exp;
	jule::Int _1349_b = _1b738619c_len64(_12347_mant);
	if (_1349_b < 55LL) {
		_12347_mant=static_cast<jule::U64>(_12347_mant << static_cast<jule::Uint>(55LL - _1349_b));
		_13313_e2+=static_cast<jule::Int>(static_cast<jule::Int>(_1349_b) - 55LL);
	}
	jule::Int _1489_q = ((-(_211d646ad_mul_by_log2_log10(static_cast<jule::Int>(_13313_e2 + 54LL)))) + _12368_prec) - 1LL;
	jule::Bool _15313_exact = (_1489_q <= 55LL) && (_1489_q >= 0LL);
	jule::U64 _15514_di;
	jule::Int _15518_dexp2;
	jule::Bool _15529_d0;
	std::tie(_15514_di,_15518_dexp2,_15529_d0) = _211d646ad_mult128bit_pow10(_12347_mant,_13313_e2,_1489_q);
	if (_15518_dexp2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:157:9"));;
	}
	if (((_1489_q < 0LL) && (_1489_q >= -22LL)) && _211d646ad_divisible_by_pow5(_12347_mant,static_cast<jule::Int>((-(_1489_q))))) {
		_15313_exact=true;
		_15529_d0=true;
	}
	jule::Uint _1689_extra = static_cast<jule::Uint>((-(_15518_dexp2)));
	jule::U64 _1699_extra_mask = static_cast<jule::U64>((1LL << _1689_extra) - 1LL);
	jule::U64 _17113_dfrac = 0LLU;
	std::tie(_15514_di,_17113_dfrac) = std::make_tuple(static_cast<jule::U64>(_15514_di >> _1689_extra),static_cast<jule::U64>(_15514_di & _1699_extra_mask));
	jule::Bool _17313_round_up = false;
	if (_15313_exact) {
		_17313_round_up=((_17113_dfrac > (1LL << (_1689_extra - 1LL))) || ((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && (!(_15529_d0)))) || (((_17113_dfrac == (1LL << (_1689_extra - 1LL))) && _15529_d0) && ((_15514_di & 1LL) == 1LL));
	} else {
		_17313_round_up=(_17113_dfrac >> (_1689_extra - 1LL)) == 1LL;
	}
	if (_17113_dfrac != 0LL) {
		_15529_d0=false;
	}
	_211d646ad_format_decimal(_12326_d,_15514_di,(!(_15529_d0)),_17313_round_up,_12368_prec);
	_12326_d._field_dp-=_1489_q;
}



inline void _211d646ad_format_decimal(_211ca7535_DecimalSlice& _20424_d,jule::U64 _20445_m,jule::Bool _20457_trunc,jule::Bool _20474_round_up,jule::Int _20490_prec) {
	jule::U64 _2059_max = _211d646ad_U64_POW10[_20490_prec];
	jule::Int _20613_trimmed = 0LL;
	while (_20445_m >= _2059_max) {
		{
			jule::U64 _20814_a = _20445_m / 10LL;
			jule::U64 _20817_b = _20445_m % 10LL;
			std::tie(_20814_a,_20817_b) = std::make_tuple(_20445_m / 10LL,_20445_m % 10LL);
			_20445_m=_20814_a;
			(_20613_trimmed)++;
			if (_20817_b > 5LL) {
				_20474_round_up=true;
			} else if (_20817_b < 5LL) {
				_20474_round_up=false;
			} else {
				_20474_round_up=_20457_trunc || ((_20445_m & 1LL) == 1LL);
			}
			if (_20817_b != 0LL) {
				_20457_trunc=true;
			}
		}
	_iter_next_4389484848:;
	}
	_iter_end_4389484848:;
	if (_20474_round_up) {
		(_20445_m)++;
	}
	if (_20445_m >= _2059_max) {
		_20445_m = (_20445_m / 10LL);
		(_20613_trimmed)++;
	}
	jule::Uint _23313_n = static_cast<jule::Uint>(_20490_prec);
	_20424_d._field_nd=static_cast<jule::Int>(static_cast<jule::Int>(_20490_prec));
	jule::U64 _23513_v = _20445_m;
	while (_23513_v >= 100LL) {
		{
			jule::U64 _23717_v1 = 0LLU;
			jule::U64 _23817_v2 = 0LLU;
			if ((_23513_v >> 32LL) == 0LL) {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U32>(_23513_v) / 100LL)),static_cast<jule::U64>(static_cast<jule::U64>(static_cast<jule::U32>(_23513_v) % 100LL)));
			} else {
				std::tie(_23717_v1,_23817_v2) = std::make_tuple(static_cast<jule::U64>(_23513_v / 100LL),static_cast<jule::U64>(_23513_v % 100LL));
			}
			_23313_n-=2LL;
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 1LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 1LL)]);
			_20424_d._field_d[static_cast<jule::Int>(_23313_n + 0LL)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23817_v2) + 0LL)]);
			_23513_v=_23717_v1;
		}
	_iter_next_4389498832:;
	}
	_iter_end_4389498832:;
	if (_23513_v > 0LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _23513_v) + 1LL)]);
	}
	if (_23513_v >= 10LL) {
		(_23313_n)--;
		_20424_d._field_d[static_cast<jule::Int>(_23313_n)]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(2LL * _23513_v)]);
	}
	while (_20424_d._field_d[_20424_d._field_nd - 1LL] == '0') {
		{
			(_20424_d._field_nd)--;
			(_20613_trimmed)++;
		}
	_iter_next_4389520704:;
	}
	_iter_end_4389520704:;
	_20424_d._field_dp=static_cast<jule::Int>(_20424_d._field_nd + _20613_trimmed);
}



inline void _211d646ad_ryu_ftoa_shortest(_211ca7535_DecimalSlice& _26527_d,jule::U64 _26548_mant,jule::Int _26559_exp,_211ca7535_FloatInfo& _26570_flt) {
	if (_26548_mant == 0LL) {
		std::tie(_26527_d._field_nd,_26527_d._field_dp) = std::make_tuple(0LL,0LL);
		return;
	}
	if ((_26559_exp <= 0LL) && (_1b738619c_trailing_zeros64(_26548_mant) >= (-(_26559_exp)))) {
		_26548_mant>>=static_cast<jule::Uint>(static_cast<jule::Uint>((-(_26559_exp))));
		_211d646ad_ryu_digits(_26527_d,_26548_mant,_26548_mant,_26548_mant,true,false);
		return;
	}
	jule::U64 _27710_ml;
	jule::U64 _27714_mc;
	jule::U64 _27718_mu;
	jule::Int _27726_e2;
	std::tie(_27710_ml,_27714_mc,_27718_mu,_27726_e2) = _211d646ad_compute_bounds(_26548_mant,_26559_exp,_26570_flt);
	if (_27726_e2 == 0LL) {
		_211d646ad_ryu_digits(_26527_d,_27710_ml,_27714_mc,_27718_mu,true,false);
		return;
	}
	jule::Int _2839_q = _211d646ad_mul_by_log2_log10(static_cast<jule::Int>((-(_27726_e2)))) + 1LL;
	jule::U64 _28713_dl = 0LLU;
	jule::U64 _28813_dc = 0LLU;
	jule::U64 _28913_du = 0LLU;
	jule::Bool _29013_dl0 = false;
	jule::Bool _29113_dc0 = false;
	jule::Bool _29213_du0 = false;
	if (_26570_flt == _211ca7535_F32_INFO) {
		jule::U32 _29417_dl32 = 0LLU;
		jule::U32 _29517_dc32 = 0LLU;
		jule::U32 _29617_du32 = 0LLU;
		std::tie(_29417_dl32,std::ignore,_29013_dl0) = _211d646ad_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27710_ml)),_27726_e2,_2839_q);
		std::tie(_29517_dc32,std::ignore,_29113_dc0) = _211d646ad_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27714_mc)),_27726_e2,_2839_q);
		std::tie(_29617_du32,_27726_e2,_29213_du0) = _211d646ad_mult64bit_pow10(static_cast<jule::U32>(static_cast<jule::U32>(_27718_mu)),_27726_e2,_2839_q);
		std::tie(_28713_dl,_28813_dc,_28913_du) = std::make_tuple(static_cast<jule::U64>(static_cast<jule::U64>(_29417_dl32)),static_cast<jule::U64>(static_cast<jule::U64>(_29517_dc32)),static_cast<jule::U64>(static_cast<jule::U64>(_29617_du32)));
	} else {
		std::tie(_28713_dl,std::ignore,_29013_dl0) = _211d646ad_mult128bit_pow10(_27710_ml,_27726_e2,_2839_q);
		std::tie(_28813_dc,std::ignore,_29113_dc0) = _211d646ad_mult128bit_pow10(_27714_mc,_27726_e2,_2839_q);
		std::tie(_28913_du,_27726_e2,_29213_du0) = _211d646ad_mult128bit_pow10(_27718_mu,_27726_e2,_2839_q);
	}
	if (_27726_e2 >= 0LL) {
		jule::panic(jule::Str("not enough significant bits after mult128bit_pow10", 50) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:307:9"));;
	}
	if (_2839_q > 55LL) {
		std::tie(_29013_dl0,_29113_dc0,_29213_du0) = std::make_tuple(false,false,false);
	}
	if ((_2839_q < 0LL) && (_2839_q >= -24LL)) {
		if (_211d646ad_divisible_by_pow5(_27710_ml,static_cast<jule::Int>((-(_2839_q))))) {
			_29013_dl0=true;
		}
		if (_211d646ad_divisible_by_pow5(_27714_mc,static_cast<jule::Int>((-(_2839_q))))) {
			_29113_dc0=true;
		}
		if (_211d646ad_divisible_by_pow5(_27718_mu,static_cast<jule::Int>((-(_2839_q))))) {
			_29213_du0=true;
		}
	}
	jule::Uint _3299_extra = static_cast<jule::Uint>((-(_27726_e2)));
	jule::U64 _3309_extra_mask = static_cast<jule::U64>((1LL << _3299_extra) - 1LL);
	jule::U64 _33213_fracl = 0LLU;
	std::tie(_28713_dl,_33213_fracl) = std::make_tuple(static_cast<jule::U64>(_28713_dl >> _3299_extra),static_cast<jule::U64>(_28713_dl & _3309_extra_mask));
	jule::U64 _33413_fracc = 0LLU;
	std::tie(_28813_dc,_33413_fracc) = std::make_tuple(static_cast<jule::U64>(_28813_dc >> _3299_extra),static_cast<jule::U64>(_28813_dc & _3309_extra_mask));
	jule::U64 _33613_fracu = 0LLU;
	std::tie(_28913_du,_33613_fracu) = std::make_tuple(static_cast<jule::U64>(_28913_du >> _3299_extra),static_cast<jule::U64>(_28913_du & _3309_extra_mask));
	jule::Bool _34213_uok = (!(_29213_du0)) || (_33613_fracu > 0LL);
	if (_29213_du0 && (_33613_fracu == 0LL)) {
		_34213_uok=(_26548_mant & 1LL) == 0LL;
	}
	if ((!(_34213_uok))) {
		(_28913_du)--;
	}
	jule::Bool _35113_cup = false;
	if (_29113_dc0) {
		_35113_cup=(_33413_fracc > (1LL << (_3299_extra - 1LL))) || ((_33413_fracc == (1LL << (_3299_extra - 1LL))) && ((_28813_dc & 1LL) == 1LL));
	} else {
		_35113_cup=(_33413_fracc >> (_3299_extra - 1LL)) == 1LL;
	}
	jule::Bool _3679_lok = (_29013_dl0 && (_33213_fracl == 0LL)) && ((_26548_mant & 1LL) == 0LL);
	if ((!(_3679_lok))) {
		(_28713_dl)++;
	}
	jule::Bool _3729_c0 = _29113_dc0 && (_33413_fracc == 0LL);
	_211d646ad_ryu_digits(_26527_d,_28713_dl,_28813_dc,_28913_du,_3729_c0,_35113_cup);
	_26527_d._field_dp-=_2839_q;
}



inline jule::Int _211d646ad_mul_by_log2_log10(jule::Int _38322_x) {
	return static_cast<jule::Int>((_38322_x * 78913LL) >> 18LL);
}



inline jule::Int _211d646ad_mul_by_log10_log2(jule::Int _39322_x) {
	return static_cast<jule::Int>((_39322_x * 108853LL) >> 15LL);
}



inline std::tuple<jule::U64,jule::U64,jule::U64,jule::Int> _211d646ad_compute_bounds(jule::U64 _40119_mant,jule::Int _40130_exp,_211ca7535_FloatInfo& _40218_flt) {
	jule::U64 _40236_lower = jule::U64();
	jule::U64 _40248_central = jule::U64();
	jule::U64 _40262_upper = jule::U64();
	jule::Int _40274_e2 = jule::Int();
	if ((_40119_mant != (1LL << _40218_flt._field_mantbits)) || (_40130_exp == ((_40218_flt._field_bias + 1LL) - static_cast<jule::Int>(_40218_flt._field_mantbits)))) {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((2LL * _40119_mant) - 1LL),static_cast<jule::U64>(2LL * _40119_mant),static_cast<jule::U64>((2LL * _40119_mant) + 1LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 1LL);
	} else {
		std::tie(_40236_lower,_40248_central,_40262_upper) = std::make_tuple(static_cast<jule::U64>((4LL * _40119_mant) - 1LL),static_cast<jule::U64>(4LL * _40119_mant),static_cast<jule::U64>((4LL * _40119_mant) + 2LL));
		_40274_e2=static_cast<jule::Int>(_40130_exp - 2LL);
	}
	return std::make_tuple(_40236_lower,_40248_central,_40262_upper,_40274_e2);
}



inline void _211d646ad_ryu_digits(_211ca7535_DecimalSlice& _41520_d,jule::U64 _41537_lower,jule::U64 _41549_central,jule::U64 _41563_upper,jule::Bool _41579_c0,jule::Bool _41593_cup) {
	jule::U32 _41614_lhi;
	jule::U32 _41619_llo;
	std::tie(_41614_lhi,_41619_llo) = _211d646ad_divmod1e9(_41537_lower);
	jule::U32 _41710_chi;
	jule::U32 _41715_clo;
	std::tie(_41710_chi,_41715_clo) = _211d646ad_divmod1e9(_41549_central);
	jule::U32 _41810_uhi;
	jule::U32 _41815_ulo;
	std::tie(_41810_uhi,_41815_ulo) = _211d646ad_divmod1e9(_41563_upper);
	if (_41810_uhi == 0LL) {
		_211d646ad_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,8LL);
	} else if (_41614_lhi < _41810_uhi) {
		if (_41619_llo != 0LL) {
			(_41614_lhi)++;
		}
		_41579_c0=_41579_c0 && (_41715_clo == 0LL);
		_41593_cup=(_41715_clo > 500000000LL) || ((_41715_clo == 500000000LL) && _41593_cup);
		_211d646ad_ryu_digits32(_41520_d,_41614_lhi,_41710_chi,_41810_uhi,_41579_c0,_41593_cup,8LL);
		_41520_d._field_dp+=9LL;
	} else {
		_41520_d._field_nd=0LL;
		jule::Uint _43417_n = static_cast<jule::Uint>(9LLU);
		jule::U32 _43517_v = _41710_chi;
		while (_43517_v > 0LL) {
			{
				jule::U32 _43718_v1 = _43517_v / 10LL;
				jule::U32 _43722_v2 = _43517_v % 10LL;
				std::tie(_43718_v1,_43722_v2) = std::make_tuple(_43517_v / 10LL,_43517_v % 10LL);
				_43517_v=_43718_v1;
				(_43417_n)--;
				_41520_d._field_d[static_cast<jule::Int>(_43417_n)]=static_cast<jule::U8>(static_cast<jule::U8>(_43722_v2 + '0'));
			}
		_iter_next_4389632560:;
		}
		_iter_end_4389632560:;
		_41520_d._field_d=_41520_d._field_d.slice(static_cast<jule::Int>(_43417_n));
		_41520_d._field_nd=static_cast<jule::Int>(static_cast<jule::Int>(9LL - _43417_n));
		_211d646ad_ryu_digits32(_41520_d,_41619_llo,_41715_clo,_41815_ulo,_41579_c0,_41593_cup,static_cast<jule::Int>(_41520_d._field_nd + 8LL));
	}
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[_41520_d._field_nd - 1LL] == '0')) {
		{
			(_41520_d._field_nd)--;
		}
	_iter_next_4389640432:;
	}
	_iter_end_4389640432:;
	while ((_41520_d._field_nd > 0LL) && (_41520_d._field_d[0LL] == '0')) {
		{
			(_41520_d._field_nd)--;
			(_41520_d._field_dp)--;
			_41520_d._field_d=_41520_d._field_d.slice(1LL);
		}
	_iter_next_4389640992:;
	}
	_iter_end_4389640992:;
}



inline void _211d646ad_ryu_digits32(_211ca7535_DecimalSlice& _46022_d,jule::U32 _46043_lower,jule::U32 _46059_central,jule::U32 _46121_upper,jule::Bool _46137_c0,jule::Bool _46151_cup,jule::Int _46166_endindex) {
	if (_46121_upper == 0LL) {
		_46022_d._field_dp=static_cast<jule::Int>(_46166_endindex + 1LL);
		return;
	}
	jule::Int _46613_trimmed = 0LL;
	jule::Int _46913_c_next_digit = 0LL;
	while (_46121_upper > 0LL) {
		{
			jule::U32 _47613_l = _46043_lower + 9LL / 10LL;
			jule::U32 _47718_c = _46059_central / 10LL;
			jule::U32 _47725_cdigit = _46059_central % 10LL;
			std::tie(_47718_c,_47725_cdigit) = std::make_tuple(_46059_central / 10LL,_46059_central % 10LL);
			jule::U32 _47813_u = _46121_upper / 10LL;
			if (_47613_l > _47813_u) {
				goto _iter_end_4389660784;
			}
			if ((_47613_l == (_47718_c + 1LL)) && (_47718_c < _47813_u)) {
				(_47718_c)++;
				_47725_cdigit=0LL;
				_46151_cup=false;
			}
			(_46613_trimmed)++;
			_46137_c0=_46137_c0 && (_46913_c_next_digit == 0LL);
			_46913_c_next_digit=static_cast<jule::Int>(static_cast<jule::Int>(_47725_cdigit));
			std::tie(_46043_lower,_46059_central,_46121_upper) = std::make_tuple(_47613_l,_47718_c,_47813_u);
		}
	_iter_next_4389660784:;
	}
	_iter_end_4389660784:;
	if (_46613_trimmed > 0LL) {
		_46151_cup=((_46913_c_next_digit > 5LL) || ((_46913_c_next_digit == 5LL) && (!(_46137_c0)))) || (((_46913_c_next_digit == 5LL) && _46137_c0) && ((_46059_central & 1LL) == 1LL));
	}
	if ((_46059_central < _46121_upper) && _46151_cup) {
		(_46059_central)++;
	}
	_46166_endindex-=_46613_trimmed;
	jule::U32 _51713_v = _46059_central;
	jule::Int _51813_n = _46166_endindex;
	while (_51813_n > _46022_d._field_nd) {
		{
			jule::U32 _52014_v1 = _51713_v / 100LL;
			jule::U32 _52018_v2 = _51713_v % 100LL;
			std::tie(_52014_v1,_52018_v2) = std::make_tuple(_51713_v / 100LL,_51713_v % 100LL);
			_46022_d._field_d[_51813_n]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 1LL)]);
			_46022_d._field_d[_51813_n - 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((2LL * _52018_v2) + 0LL)]);
			_51813_n-=2LL;
			_51713_v=_52014_v1;
		}
	_iter_next_4389664464:;
	}
	_iter_end_4389664464:;
	if (_51813_n == _46022_d._field_nd) {
		_46022_d._field_d[_51813_n]=static_cast<jule::U8>(static_cast<jule::U8>(_51713_v + '0'));
	}
	_46022_d._field_nd=static_cast<jule::Int>(_46166_endindex + 1LL);
	_46022_d._field_dp=static_cast<jule::Int>(_46022_d._field_nd + _46613_trimmed);
}



inline std::tuple<jule::U32,jule::Int,jule::Bool> _211d646ad_mult64bit_pow10(jule::U32 _54220_m,jule::Int _54232_e2,jule::Int _54241_q) {
	jule::U32 _54251_resM = jule::U32();
	jule::Int _54262_resE = jule::Int();
	jule::Bool _54273_exact = jule::Bool();
	if (_54241_q == 0LL) {
		_54251_resM = static_cast<jule::U32>(_54220_m << 6LL);
		_54262_resE = static_cast<jule::Int>(_54232_e2 - 6LL);
		_54273_exact = true;
		return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
	}
	if ((_54241_q < -348LL) || (347LL < _54241_q)) {
		jule::panic(jule::Str("mult64bit_pow10: power of 10 is out of range", 44) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:549:9"));;
	}
	jule::U64 _55113_pow = _211d62436_DETAILED_POWS_OF_TEN[_54241_q - -348LL].__at(1LL);
	if (_54241_q < 0LL) {
		_55113_pow+=1LL;
	}
	jule::U64 _55610_hi;
	jule::U64 _55614_lo;
	std::tie(_55610_hi,_55614_lo) = _1b738619c_mul64(static_cast<jule::U64>(static_cast<jule::U64>(_54220_m)),_55113_pow);
	_54232_e2+=static_cast<jule::Int>((_211d646ad_mul_by_log10_log2(_54241_q) - 63LL) + 57LL);
	_54251_resM = static_cast<jule::U32>(static_cast<jule::U32>((_55610_hi << 7LL) | (_55614_lo >> 57LL)));
	_54262_resE = _54232_e2;
	_54273_exact = (_55614_lo << 7LL) == 0LL;
	return std::make_tuple(_54251_resM,_54262_resE,_54273_exact);
}



inline std::tuple<jule::U64,jule::Int,jule::Bool> _211d646ad_mult128bit_pow10(jule::U64 _57021_m,jule::Int _57033_e2,jule::Int _57042_q) {
	jule::U64 _57052_resM = jule::U64();
	jule::Int _57063_resE = jule::Int();
	jule::Bool _57074_exact = jule::Bool();
	if (_57042_q == 0LL) {
		_57052_resM = static_cast<jule::U64>(_57021_m << 8LL);
		_57063_resE = static_cast<jule::Int>(_57033_e2 - 8LL);
		_57074_exact = true;
		return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
	}
	if ((_57042_q < -348LL) || (347LL < _57042_q)) {
		jule::panic(jule::Str("mult128bit_pow10: power of 10 is out of range", 45) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/ftoaryu.jule:577:9"));;
	}
	jule::Array<jule::U64,2> _57913_pow = _211d62436_DETAILED_POWS_OF_TEN[_57042_q - -348LL];
	if (_57042_q < 0LL) {
		_57913_pow.__at(0LL)+=1LL;
	}
	_57033_e2+=static_cast<jule::Int>((_211d646ad_mul_by_log10_log2(_57042_q) - 127LL) + 119LL);
	jule::U64 _58710_l1;
	jule::U64 _58714_l0;
	std::tie(_58710_l1,_58714_l0) = _1b738619c_mul64(_57021_m,_57913_pow.__at(0LL));
	jule::U64 _58814_h1;
	jule::U64 _58818_h0;
	std::tie(_58814_h1,_58818_h0) = _1b738619c_mul64(_57021_m,_57913_pow.__at(1LL));
	jule::U64 _58910_mid;
	jule::U64 _58915_carry;
	std::tie(_58910_mid,_58915_carry) = _1b738619c_add64(_58710_l1,_58818_h0,0LLU);
	_58814_h1+=_58915_carry;
	_57052_resM = static_cast<jule::U64>((_58814_h1 << 9LL) | (_58910_mid >> 55LL));
	_57063_resE = _57033_e2;
	_57074_exact = ((_58910_mid << 9LL) == 0LL) && (_58714_l0 == 0LL);
	return std::make_tuple(_57052_resM,_57063_resE,_57074_exact);
}



inline jule::Bool _211d646ad_divisible_by_pow5(jule::U64 _59426_m,jule::Int _59434_k) {
	if (_59426_m == 0LL) {
		return true;
	}
	jule::Int _59813_i = 0LL;
	for (; _59813_i < _59434_k; (_59813_i)++) {
		{
			if ((_59426_m % 5LL) != 0LL) {
				return false;
			}
			_59426_m = (_59426_m / 5LL);
		}
	_iter_next_4389743664:;
	}
	_iter_end_4389743664:;
	return true;
}



inline std::tuple<jule::U32,jule::U32> _211d646ad_divmod1e9(jule::U64 _61014_x) {
	{
		return std::make_tuple(static_cast<jule::U32>(static_cast<jule::U32>(_61014_x / 1000000000LL)),static_cast<jule::U32>(static_cast<jule::U32>(_61014_x % 1000000000LL)));
	}
}



inline void _1b6a7a1bb_trim(_1b6a7a1bb_Decimal& _27514_a) {
	while ((_27514_a._field_nd > 0LL) && (_27514_a._field_d[_27514_a._field_nd - 1LL] == '0')) {
		{
			(_27514_a._field_nd)--;
		}
	_iter_next_4389757824:;
	}
	_iter_end_4389757824:;
	if (_27514_a._field_nd == 0LL) {
		_27514_a._field_dp=0LL;
	}
}



inline void _1b6a7a1bb_right_shift(_1b6a7a1bb_Decimal& _28521_a,jule::Uint _28533_k) {
	jule::Int _28613_r = 0LL;
	jule::Int _28713_w = 0LL;
	jule::Uint _29013_n = 0LLU;
	for (; (_29013_n >> _28533_k) == 0LL; (_28613_r)++) {
		{
			if (_28613_r >= _28521_a._field_nd) {
				if (_29013_n == 0LL) {
					_28521_a._field_nd=0LL;
					return;
				}
				while ((_29013_n >> _28533_k) == 0LL) {
					{
						_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
						(_28613_r)++;
					}
				_iter_next_4389769456:;
				}
				_iter_end_4389769456:;
				goto _iter_end_4389764960;
			}
			jule::Uint _30413_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _30413_c) - '0');
		}
	_iter_next_4389764960:;
	}
	_iter_end_4389764960:;
	_28521_a._field_dp-=static_cast<jule::Int>(_28613_r - 1LL);
	jule::Uint _3099_mask = static_cast<jule::Uint>(static_cast<jule::Uint>(1LL << _28533_k) - 1LL);
	for (; _28613_r < _28521_a._field_nd; (_28613_r)++) {
		{
			jule::Uint _31313_c = static_cast<jule::Uint>(_28521_a._field_d[_28613_r]);
			jule::Uint _31413_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_31413_dig + '0'));
			(_28713_w)++;
			_29013_n=static_cast<jule::Uint>(((_29013_n * 10LL) + _31313_c) - '0');
		}
	_iter_next_4389777088:;
	}
	_iter_end_4389777088:;
	while (_29013_n > 0LL) {
		{
			jule::Uint _32313_dig = _29013_n >> _28533_k;
			_29013_n&=_3099_mask;
			if (_28713_w < 800LL) {
				_28521_a._field_d[_28713_w]=static_cast<jule::U8>(static_cast<jule::U8>(_32313_dig + '0'));
				(_28713_w)++;
			} else if (_32313_dig > 0LL) {
				_28521_a._field_trunc=true;
			}
			_29013_n=static_cast<jule::Uint>(_29013_n * 10LL);
		}
	_iter_next_4389783712:;
	}
	_iter_end_4389783712:;
	_28521_a._field_nd=_28713_w;
	_1b6a7a1bb_trim(_28521_a);
}



inline jule::Bool _1b6a7a1bb_prefix_is_less_than(jule::Array<jule::U8,800> _33924_b,jule::Int _33938_end,jule::Str _33948_s) {
	jule::Int _34013_i = 0LL;
	for (; _34013_i < _33948_s.len(); (_34013_i)++) {
		{
			if (_34013_i >= _33938_end) {
				return true;
			}
			if (_33924_b[_34013_i] != _33948_s[_34013_i]) {
				return _33924_b[_34013_i] < _33948_s[_34013_i];
			}
		}
	_iter_next_4389794704:;
	}
	_iter_end_4389794704:;
	return false;
}



inline void _1b6a7a1bb_left_shift(_1b6a7a1bb_Decimal& _35320_a,jule::Uint _35332_k) {
	jule::Int _35413_delta = _1b6a7a1bb_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_delta;
	if (_1b6a7a1bb_prefix_is_less_than(_35320_a._field_d,_35320_a._field_nd,_1b6a7a1bb_LEFTCHEATS[static_cast<jule::Int>(_35332_k)]._field_cutoff)) {
		(_35413_delta)--;
	}
	jule::Int _35913_r = _35320_a._field_nd;
	jule::Int _36013_w = _35320_a._field_nd + _35413_delta;
	jule::Uint _36313_n = 0LLU;
	(_35913_r)--;
	for (; _35913_r >= 0LL; (_35913_r)--) {
		{
			_36313_n+=static_cast<jule::Uint>((static_cast<jule::Uint>(_35320_a._field_d[_35913_r]) - '0') << _35332_k);
			jule::Uint _36713_quo = _36313_n / 10LL;
			jule::Uint _36813_rem = _36313_n - (10LL * _36713_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_36813_rem + '0'));
			} else if (_36813_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_36713_quo;
		}
	_iter_next_4389807152:;
	}
	_iter_end_4389807152:;
	while (_36313_n > 0LL) {
		{
			jule::Uint _38013_quo = _36313_n / 10LL;
			jule::Uint _38113_rem = _36313_n - (10LL * _38013_quo);
			(_36013_w)--;
			if (_36013_w < 800LL) {
				_35320_a._field_d[_36013_w]=static_cast<jule::U8>(static_cast<jule::U8>(_38113_rem + '0'));
			} else if (_38113_rem != 0LL) {
				_35320_a._field_trunc=true;
			}
			_36313_n=_38013_quo;
		}
	_iter_next_4389807968:;
	}
	_iter_end_4389807968:;
	_35320_a._field_nd+=_35413_delta;
	if (_35320_a._field_nd >= 800LL) {
		_35320_a._field_nd=800LL;
	}
	_35320_a._field_dp+=_35413_delta;
	_1b6a7a1bb_trim(_35320_a);
}



inline jule::Bool _1b6a7a1bb_should_round_up(_1b6a7a1bb_Decimal& _40021_a,jule::Int _40033_nd) {
	if ((_40033_nd < 0LL) || (_40033_nd >= _40021_a._field_nd)) {
		return false;
	}
	if ((_40021_a._field_d[_40033_nd] == '5') && ((_40033_nd + 1LL) == _40021_a._field_nd)) {
		if (_40021_a._field_trunc) {
			return true;
		}
		return (_40033_nd > 0LL) && ((_40021_a._field_d[_40033_nd - 1LL] - '0' % 2LL) != 0LL);
	}
	return _40021_a._field_d[_40033_nd] >= '5';
}



inline jule::Str _1b6ac3d91_fmt_uint(jule::U64 _6217_i,jule::Int _6225_base) {
	if ((true && (_6217_i < 100LL)) && (_6225_base == 10LL)) {
		return _1b6ac3d91_small(static_cast<jule::Int>(static_cast<jule::Int>(_6217_i)));
	}
	jule::Str _6613_s;
	std::tie(std::ignore,_6613_s) = _1b6ac3d91_fmt_bits(nullptr,_6217_i,_6225_base,false,false);
	return _6613_s;
}



inline jule::Str _1b6ac3d91_fmt_int(jule::I64 _7316_i,jule::Int _7324_base) {
	if (((true && (0LL <= _7316_i)) && (_7316_i < 100LL)) && (_7324_base == 10LL)) {
		return _1b6ac3d91_small(static_cast<jule::Int>(static_cast<jule::Int>(_7316_i)));
	}
	jule::Str _7713_s;
	std::tie(std::ignore,_7713_s) = _1b6ac3d91_fmt_bits(nullptr,static_cast<jule::U64>(static_cast<jule::U64>(_7316_i)),_7324_base,(_7316_i < 0LL),false);
	return _7713_s;
}



inline jule::Str _1b6ac3d91_itoa(jule::Int _8213_i) {
	return _1b6ac3d91_fmt_int(static_cast<jule::I64>(static_cast<jule::I64>(_8213_i)),10LL);
}



inline jule::Str _1b6ac3d91_small(jule::Int _8710_i) {
	if (_8710_i < 10LL) {
		return jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36).slice(_8710_i,_8710_i + 1LL);
	}
	return jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200).slice(_8710_i << 1LLU,(_8710_i << 1LLU) + 2LL);
}



inline jule::Bool _1b6ac3d91_is_power_of_two(jule::Int _9420_x) {
	return (_9420_x & (_9420_x - 1LL)) == 0LL;
}



inline std::tuple<jule::Slice<jule::U8>,jule::Str> _1b6ac3d91_fmt_bits(jule::Slice<jule::U8> _10317_dst,jule::U64 _10334_u,jule::Int _10342_base,jule::Bool _10353_neg,jule::Bool _10364_append_) {
	jule::Slice<jule::U8> _10381_d = jule::Slice<jule::U8>();
	jule::Str _10392_s = jule::Str();
	if ((_10342_base < 2LL) || (_10342_base > 36LL)) {
		jule::panic(jule::Str("std::conv: illegal base", 23) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/conv/itoa.jule:105:9"));;
	}
	jule::Slice<jule::U8> _10913_a = jule::Slice<jule::U8>::alloc(65LL);
	jule::I64 _11013_i = _10913_a.len();
	if (_10353_neg) {
		_10334_u=static_cast<jule::U64>((-(_10334_u)));
	}
	if (_10342_base == 10LL) {
		if (false) {
			while (_10334_u >= 1000000000LL) {
				{
					jule::U64 _12921_q = _10334_u / 1000000000LL;
					jule::Uint _13025_us = static_cast<jule::Uint>(_10334_u - (_12921_q * 1000000000LL));
					jule::Int _13125_j = 4LL;
					for (; _13125_j > 0LL; (_13125_j)--) {
						{
							jule::Uint _13325_is = (_13025_us % 100LL) << 1LLU;
							_13025_us = (_13025_us / 100LL);
							_11013_i-=2LL;
							_10913_a[_11013_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_13325_is + 1LL)]);
							_10913_a[_11013_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_13325_is + 0LL)]);
						}
					_iter_next_4389872096:;
					}
					_iter_end_4389872096:;
					(_11013_i)--;
					_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>((_13025_us << 1LLU) + 1LL)]);
					_10334_u=_12921_q;
				}
			_iter_next_4389869968:;
			}
			_iter_end_4389869968:;
		}
		jule::Uint _15117_us = static_cast<jule::Uint>(_10334_u);
		while (_15117_us >= 100LL) {
			{
				jule::Uint _15317_is = (_15117_us % 100LL) << 1LLU;
				_15117_us = (_15117_us / 100LL);
				_11013_i-=2LL;
				_10913_a[_11013_i + 1LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15317_is + 1LL)]);
				_10913_a[_11013_i + 0LL]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_15317_is + 0LL)]);
			}
		_iter_next_4389870608:;
		}
		_iter_end_4389870608:;
		jule::Uint _16113_is = _15117_us << 1LLU;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_16113_is + 1LL)]);
		if (_15117_us >= 10LL) {
			(_11013_i)--;
			_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", 200)[static_cast<jule::Int>(_16113_is)]);
		}
	} else if (_1b6ac3d91_is_power_of_two(_10342_base)) {
		jule::Uint _17613_shift = static_cast<jule::Uint>(_1b738619c_trailing_zeros(static_cast<jule::Uint>(static_cast<jule::Uint>(_10342_base)))) & 7LL;
		jule::U64 _17713_b = static_cast<jule::U64>(_10342_base);
		jule::Uint _17813_m = static_cast<jule::Uint>(_10342_base) - 1LL;
		while (_10334_u >= _17713_b) {
			{
				(_11013_i)--;
				_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_10334_u) & _17813_m)]);
				_10334_u>>=_17613_shift;
			}
		_iter_next_4389905088:;
		}
		_iter_end_4389905088:;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_10334_u))]);
	} else {
		jule::U64 _18913_b = static_cast<jule::U64>(_10342_base);
		while (_10334_u >= _18913_b) {
			{
				(_11013_i)--;
				jule::U64 _19517_q = jule::div(_10334_u,_18913_b);
				_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_10334_u - (_19517_q * _18913_b)))]);
				_10334_u=_19517_q;
			}
		_iter_next_4389913808:;
		}
		_iter_end_4389913808:;
		(_11013_i)--;
		_10913_a[_11013_i]=static_cast<jule::U8>(jule::Str("0123456789abcdefghijklmnopqrstuvwxyz", 36)[static_cast<jule::Int>(static_cast<jule::Uint>(_10334_u))]);
	}
	if (_10353_neg) {
		(_11013_i)--;
		_10913_a[_11013_i]='-';
	}
	if (_10364_append_) {
		_10381_d=jule::append(_10317_dst,_10913_a.slice(_11013_i));
		return std::make_tuple(_10381_d,_10392_s);
	}
	_10392_s=static_cast<jule::Str>(_10913_a.slice(_11013_i));
	return std::make_tuple(_10381_d,_10392_s);
}



inline jule::Bool _1b7553d92_is_unary_op(jule::Str _31820_kind) {
	{
		auto &expr = _1b7553d92_UNARY_OPS;
		auto it = expr.begin();
		_iter_begin_4390265472:;
		if (it != expr.end()) {
			jule::Str &_1b7553d92_op = *it;
			{
				if (_31820_kind == _1b7553d92_op) {
					return true;
				}
			}
			_iter_next_4390265472:;
			++it;
			goto _iter_begin_4390265472;
		}
		_iter_end_4390265472:;
	}
	return false;
}



inline jule::Bool _1b7553d92_is_bin_op(jule::Str _32918_kind) {
	{
		auto &expr = _1b7553d92_BIN_OPS;
		auto it = expr.begin();
		_iter_begin_4390268656:;
		if (it != expr.end()) {
			jule::Str &_1b7553d92_op = *it;
			{
				if (_32918_kind == _1b7553d92_op) {
					return true;
				}
			}
			_iter_next_4390268656:;
			++it;
			goto _iter_begin_4390268656;
		}
		_iter_end_4390268656:;
	}
	return false;
}



inline jule::Bool _1b7553d92_is_str(jule::Str _35115_k) {
	return (_35115_k != jule::Str()) && ((_35115_k[0LL] == '\"') || _1b7553d92_is_raw_str(_35115_k));
}



inline jule::Bool _1b7553d92_is_raw_str(jule::Str _35319_k) {
	return (_35319_k != jule::Str()) && (_35319_k[0LL] == '`');
}



inline jule::Bool _1b7553d92_is_rune(jule::Str _35616_k) {
	return (_35616_k != jule::Str()) && (_35616_k[0LL] == '\'');
}



inline jule::Bool _1b7553d92_is_bool(jule::Str _36016_k) {
	return (_36016_k == jule::Str("true", 4)) || (_36016_k == jule::Str("false", 5));
}



inline jule::Bool _1b7553d92_is_float(jule::Str _36317_k) {
	if (_1cea16edb_has_prefix(_36317_k,jule::Str("0x", 2))) {
		return _1cea16edb_contains_any(_36317_k,jule::Str(".pP", 3));
	}
	return _1cea16edb_contains_any(_36317_k,jule::Str(".eE", 3));
}



inline jule::Bool _1b7553d92_is_num(jule::Str _37115_k) {
	if (_37115_k == jule::Str()) {
		return false;
	}
	jule::U8 _3769_b = _37115_k[0LL];
	return (_3769_b == '.') || (('0' <= _3769_b) && (_3769_b <= '9'));
}



inline jule::Bool _1b7553d92_is_ignore_ident(jule::Str _38624_ident) {
	return _38624_ident == jule::Str("_", 1);
}



inline jule::Bool _1b7553d92_is_anon_ident(jule::Str _38822_ident) {
	return _38822_ident == jule::Str("<anonymous>", 11);
}



inline jule::Bool _1b7553d92_is_space(jule::I32 _40217_r) {
	{
		auto &expr = _1b7553d92_SPACES;
		auto it = expr.begin();
		_iter_begin_4390303376:;
		if (it != expr.end()) {
			jule::I32 &_1b7553d92_cr = *it;
			{
				if (_40217_r == _1b7553d92_cr) {
					return true;
				}
			}
			_iter_next_4390303376:;
			++it;
			goto _iter_begin_4390303376;
		}
		_iter_end_4390303376:;
	}
	return false;
}



inline jule::Bool _1b7553d92_is_letter(jule::I32 _41318_r) {
	return _1b6099851_is_letter(_41318_r);
}



inline jule::Bool _1b7553d92_is_decimal(jule::U8 _43519_b) {
	return ('0' <= _43519_b) && (_43519_b <= '9');
}



inline jule::Bool _1b7553d92_is_binary(jule::U8 _43718_b) {
	return (_43718_b == '0') || (_43718_b == '1');
}



inline jule::Bool _1b7553d92_is_octal(jule::U8 _43917_b) {
	return ('0' <= _43917_b) && (_43917_b <= '7');
}



inline jule::Bool _1b7553d92_is_hex(jule::U8 _44215_b) {
	{
		
		if (('0' <= _44215_b) && (_44215_b <= '9')) {
			_case_begin_4390320736:;
			{
				return true;
			}
		}
		else if (('a' <= _44215_b) && (_44215_b <= 'f')) {
			_case_begin_4390320832:;
			{
				return true;
			}
		}
		else if (('A' <= _44215_b) && (_44215_b <= 'F')) {
			_case_begin_4390319360:;
			{
				return true;
			}
		}
		else {
			_case_begin_4390319056:;
			{
				return false;
			}
		}
		_match_end_4390318912:;
	}
}



inline jule::Bool _1b7553d92_is_assign(jule::Uint _45418_id) {
	return ((((((_45418_id == 2LLU) || (_45418_id == 31LLU)) || (_45418_id == 34LLU)) || (_45418_id == 20LLU)) || (_45418_id == 28LLU)) || (_45418_id == 3LLU)) || (_45418_id == 7LLU);
}



inline jule::Bool _1b7553d92_is_postfix_op(jule::Str _46722_kind) {
	{
		auto &expr = _1b7553d92_POSTFIX_OPS;
		auto it = expr.begin();
		_iter_begin_4390332448:;
		if (it != expr.end()) {
			jule::Str &_1b7553d92_op = *it;
			{
				if (_46722_kind == _1b7553d92_op) {
					return true;
				}
			}
			_iter_next_4390332448:;
			++it;
			goto _iter_begin_4390332448;
		}
		_iter_end_4390332448:;
	}
	return false;
}



inline jule::Bool _1b7553d92_is_assign_op(jule::Str _47821_kind) {
	if (_1b7553d92_is_postfix_op(_47821_kind)) {
		return true;
	}
	{
		auto &expr = _1b7553d92_ASSING_OPS;
		auto it = expr.begin();
		_iter_begin_4390335616:;
		if (it != expr.end()) {
			jule::Str &_1b7553d92_op = *it;
			{
				if (_47821_kind == _1b7553d92_op) {
					return true;
				}
			}
			_iter_next_4390335616:;
			++it;
			goto _iter_begin_4390335616;
		}
		_iter_end_4390335616:;
	}
	return false;
}



inline jule::Ptr<_1b750c763_File> _1b750c763_new_file_set(jule::Str _6421_path) {
	return jule::new_struct<_1b750c763_File>(new( std::nothrow ) _1b750c763_File(jule::Slice<jule::U8>(),_6421_path,jule::Slice<_1b7553d92_Token>()));
}



inline _1b6986b22_Log _1b75960d2_make_err(jule::Int _10513_row,jule::Int _10523_col,jule::Ptr<_1b750c763_File>& _10534_f,jule::Str _10544_fmt,jule::Slice<jule::Any> _10557_args) {
	return _1b6986b22_Log(1LLU,_10513_row,_10523_col,(*(_10534_f))._method_path(),_1b6986b22_logf(_10544_fmt,_10557_args),jule::Str(),jule::Str());
}



inline jule::Bool _1b75960d2_bytes_has_prefix(jule::Slice<jule::U8>& _11522_bytes,jule::Str _11537_prefix) {
	if (_11522_bytes.len() < _11537_prefix.len()) {
		return false;
	}
	{
		auto &expr = _11537_prefix;
		auto it = expr.begin();
		_iter_begin_4390346912:;
		if (it != expr.end()) {
			jule::Int _1b75960d2_i = it - expr.begin();
			{
				if (_11522_bytes[_1b75960d2_i] != _11537_prefix.__at(_1b75960d2_i)) {
					return false;
				}
			}
			_iter_next_4390346912:;
			++it;
			_1b75960d2_i++;
			goto _iter_begin_4390346912;
		}
		_iter_end_4390346912:;
	}
	return true;
}



inline jule::Str _1b75960d2_float_fmt_e(jule::Slice<jule::U8>& _12717_txt,jule::Int _12734_i) {
	jule::Str _12744_lit = jule::Str();
	(_12734_i)++;
	if (_12734_i >= _12717_txt.len()) {
		return _12744_lit;
	}
	jule::U8 _13313_b = _12717_txt[_12734_i];
	if (_13313_b == '_') {
		return _12744_lit;
	}
	if ((_13313_b == '+') || (_13313_b == '-')) {
		(_12734_i)++;
		if (_12734_i >= _12717_txt.len()) {
			return _12744_lit;
		}
	}
	jule::Int _1449_first = _12734_i;
	for (; _12734_i < _12717_txt.len(); (_12734_i)++) {
		{
			_13313_b=_12717_txt[_12734_i];
			if ((_13313_b != '_') && (!(_1b7553d92_is_decimal(_13313_b)))) {
				goto _iter_end_4390356384;
			}
		}
	_iter_next_4390356384:;
	}
	_iter_end_4390356384:;
	if (_12734_i == _1449_first) {
		_12744_lit = jule::Str();
		return _12744_lit;
	}
	_12744_lit = static_cast<jule::Str>(_12717_txt.slice(0LL,_12734_i));
	return _12744_lit;
}



inline jule::Str _1b75960d2_float_fmt_p(jule::Slice<jule::U8>& _15817_txt,jule::Int _15830_i) {
	return _1b75960d2_float_fmt_e(_15817_txt,_15830_i);
}



inline jule::Str _1b75960d2_float_fmt_dotnp(jule::Slice<jule::U8>& _16221_txt,jule::Int _16238_i) {
	if (_16221_txt[_16238_i] != '.') {
		return jule::Str();
	}
	(_16238_i)++;
	_julec_label_loop:;
	for (; _16238_i < _16221_txt.len(); (_16238_i)++) {
		{
			jule::U8 _17013_b = _16221_txt[_16238_i];
			{
				
				if (_17013_b == '_' || _1b7553d92_is_decimal(_17013_b)) {
					_case_begin_4390370016:;
					{
						goto _iter_next_4390367328;
					}
				}
				else if (_1b75960d2_is_float_fmt_p(_17013_b,_16238_i)) {
					_case_begin_4390370112:;
					{
						return _1b75960d2_float_fmt_p(_16221_txt,_16238_i);
					}
				}
				else {
					_case_begin_4390369664:;
					{
						goto _iter_end_4390367328;
					}
				}
				_match_end_4390369552:;
			}
		}
	_iter_next_4390367328:;
	}
	_iter_end_4390367328:;
	return jule::Str();
}



inline jule::Str _1b75960d2_float_fmt_dotfp(jule::Slice<jule::U8>& _18521_txt,jule::Int _18538_i) {
	_18538_i+=2LL;
	return _1b75960d2_float_fmt_e(_18521_txt,_18538_i);
}



inline jule::Str _1b75960d2_float_fmt_dotp(jule::Slice<jule::U8>& _19220_txt,jule::Int _19237_i) {
	(_19237_i)++;
	return _1b75960d2_float_fmt_e(_19220_txt,_19237_i);
}



inline jule::Str _1b75960d2_float_num(jule::Slice<jule::U8>& _19915_txt,jule::Int _19932_i) {
	jule::Str _19942_lit = jule::Str();
	(_19932_i)++;
	if ((_19932_i >= _19915_txt.len()) || (_19915_txt[_19932_i] == '_')) {
		_19942_lit = jule::Str();
		return _19942_lit;
	}
	for (; _19932_i < _19915_txt.len(); (_19932_i)++) {
		{
			jule::U8 _20513_b = _19915_txt[_19932_i];
			if ((_19932_i > 1LL) && ((_20513_b == 'e') || (_20513_b == 'E'))) {
				_19942_lit = _1b75960d2_float_fmt_e(_19915_txt,_19932_i);
				return _19942_lit;
			}
			if ((_20513_b != '_') && (!(_1b7553d92_is_decimal(_20513_b)))) {
				goto _iter_end_4390382608;
			}
		}
	_iter_next_4390382608:;
	}
	_iter_end_4390382608:;
	if (_19932_i == 1LL) {
		return _19942_lit;
	}
	_19942_lit = static_cast<jule::Str>(_19915_txt.slice(0LL,_19932_i));
	return _19942_lit;
}



inline jule::Str _1b75960d2_common_num(jule::Slice<jule::U8>& _22016_txt) {
	jule::Str _22031_lit = jule::Str();
	jule::Int _22113_i = 0LL;
	_julec_label_loop:;
	for (; _22113_i < _22016_txt.len(); (_22113_i)++) {
		{
			jule::U8 _22413_b = _22016_txt[_22113_i];
			{
				
				if (_22413_b == '.') {
					_case_begin_4390412768:;
					{
						_22031_lit = _1b75960d2_float_num(_22016_txt,_22113_i);
						return _22031_lit;
					}
				}
				else if (_22413_b == '_') {
					_case_begin_4390412880:;
					{
						goto _iter_next_4390410288;
					}
				}
				else if (_1b75960d2_is_float_fmt_e(_22413_b,_22113_i)) {
					_case_begin_4390412992:;
					{
						_22031_lit = _1b75960d2_float_fmt_e(_22016_txt,_22113_i);
						return _22031_lit;
					}
				}
				else if ((!(_1b7553d92_is_decimal(_22413_b)))) {
					_case_begin_4390413104:;
					{
						goto _iter_end_4390410288;
					}
				}
				_match_end_4390412576:;
			}
		}
	_iter_next_4390410288:;
	}
	_iter_end_4390410288:;
	if (_22113_i == 0LL) {
		return _22031_lit;
	}
	_22031_lit = static_cast<jule::Str>(_22016_txt.slice(0LL,_22113_i));
	return _22031_lit;
}



inline jule::Str _1b75960d2_binary_num(jule::Slice<jule::U8>& _24316_txt) {
	jule::Str _24331_lit = jule::Str();
	if ((!(_1b75960d2_bytes_has_prefix(_24316_txt,jule::Str("0b", 2))))) {
		_24331_lit = jule::Str();
		return _24331_lit;
	}
	if (_24316_txt.len() < 2LL) {
		return _24331_lit;
	}
	
	jule::Int _25213_i = 2LL;
	for (; _25213_i < _24316_txt.len(); (_25213_i)++) {
		{
			if ((_24316_txt[_25213_i] != '_') && (!(_1b7553d92_is_binary(_24316_txt[_25213_i])))) {
				goto _iter_end_4390426272;
			}
		}
	_iter_next_4390426272:;
	}
	_iter_end_4390426272:;
	if (_25213_i == 2LL) {
		return _24331_lit;
	}
	_24331_lit = static_cast<jule::Str>(_24316_txt.slice(0LL,_25213_i));
	return _24331_lit;
}



inline jule::Bool _1b75960d2_is_float_fmt_e(jule::U8 _26519_b,jule::Int _26528_i) {
	return (_26528_i > 0LL) && ((_26519_b == 'e') || (_26519_b == 'E'));
}



inline jule::Bool _1b75960d2_is_float_fmt_p(jule::U8 _26919_b,jule::Int _26928_i) {
	return (_26928_i > 0LL) && ((_26919_b == 'p') || (_26919_b == 'P'));
}



inline jule::Bool _1b75960d2_is_float_fmt_dotnp(jule::Slice<jule::U8>& _27324_txt,jule::Int _27341_i) {
	if (_27324_txt[_27341_i] != '.') {
		return false;
	}
	(_27341_i)++;
	_julec_label_loop:;
	for (; _27341_i < _27324_txt.len(); (_27341_i)++) {
		{
			jule::U8 _28113_b = _27324_txt[_27341_i];
			{
				
				if (_28113_b == '_' || _1b7553d92_is_decimal(_28113_b)) {
					_case_begin_4390443904:;
					{
						goto _iter_next_4390440608;
					}
				}
				else if (_1b75960d2_is_float_fmt_p(_28113_b,_27341_i)) {
					_case_begin_4390444000:;
					{
						return true;
					}
				}
				else {
					_case_begin_4390443552:;
					{
						goto _iter_end_4390440608;
					}
				}
				_match_end_4390443440:;
			}
		}
	_iter_next_4390440608:;
	}
	_iter_end_4390440608:;
	return false;
}



inline jule::Bool _1b75960d2_is_float_fmt_dotp(jule::Slice<jule::U8>& _29523_txt,jule::Int _29536_i) {
	{
		
		if (_29523_txt.len() < 3LL) {
			_case_begin_4390450832:;
			{
				goto _case_begin_4390450928;
			}
		}
		else if (_29523_txt[_29536_i] != '.') {
			_case_begin_4390450928:;
			{
				goto _case_begin_4390449456;
			}
		}
		else if ((_29523_txt[_29536_i + 1LL] != 'p') && (_29523_txt[_29536_i + 1LL] != 'P')) {
			_case_begin_4390449456:;
			{
				return false;
			}
		}
		else {
			_case_begin_4390449152:;
			{
				return true;
			}
		}
		_match_end_4390448976:;
	}
}



inline jule::Bool _1b75960d2_is_float_fmt_dotfp(jule::Slice<jule::U8>& _30824_txt,jule::Int _30837_i) {
	{
		
		if (_30824_txt.len() < 4LL) {
			_case_begin_4390459152:;
			{
				goto _case_begin_4390459248;
			}
		}
		else if (_30824_txt[_30837_i] != '.') {
			_case_begin_4390459248:;
			{
				goto _case_begin_4390457776;
			}
		}
		else if ((_30824_txt[_30837_i + 1LL] != 'f') && (_30824_txt[_30837_i + 1LL] != 'F')) {
			_case_begin_4390457776:;
			{
				goto _case_begin_4390457888;
			}
		}
		else if ((_30824_txt[_30837_i + 2LL] != 'p') && (_30824_txt[_30837_i + 1LL] != 'P')) {
			_case_begin_4390457888:;
			{
				return false;
			}
		}
		else {
			_case_begin_4390457456:;
			{
				return true;
			}
		}
		_match_end_4390456944:;
	}
}



inline jule::Str _1b75960d2_octal_num(jule::Slice<jule::U8>& _32315_txt) {
	jule::Str _32330_lit = jule::Str();
	if (_32315_txt[0LL] != '0') {
		_32330_lit = jule::Str();
		return _32330_lit;
	}
	if (_32315_txt.len() < 2LL) {
		return _32330_lit;
	}
	jule::Int _33113_octal_start = 1LL;
	jule::Bool _33313_o = false;
	if (_32315_txt[1LL] == 'o') {
		if (_32315_txt.len() < 3LL) {
			return _32330_lit;
		}
		(_33113_octal_start)++;
		_33313_o=true;
	}
	jule::Int _34213_i = _33113_octal_start;
	for (; _34213_i < _32315_txt.len(); (_34213_i)++) {
		{
			jule::U8 _34413_b = _32315_txt[_34213_i];
			if (_34413_b == '.') {
				if (_33313_o) {
					_32330_lit = jule::Str();
					return _32330_lit;
				}
				_32330_lit = _1b75960d2_float_num(_32315_txt,_34213_i);
				return _32330_lit;
			}
			if (_1b75960d2_is_float_fmt_e(_34413_b,_34213_i)) {
				_32330_lit = _1b75960d2_float_fmt_e(_32315_txt,_34213_i);
				return _32330_lit;
			}
			if ((_34413_b != '_') && (!(_1b7553d92_is_octal(_34413_b)))) {
				goto _iter_end_4390476912;
			}
		}
	_iter_next_4390476912:;
	}
	_iter_end_4390476912:;
	if (_34213_i == _33113_octal_start) {
		return _32330_lit;
	}
	_32330_lit = static_cast<jule::Str>(_32315_txt.slice(0LL,_34213_i));
	return _32330_lit;
}



inline jule::Str _1b75960d2_hex_num(jule::Slice<jule::U8>& _36513_txt) {
	jule::Str _36528_lit = jule::Str();
	if (_36513_txt.len() < 3LL) {
		return _36528_lit;
	}
	if ((_36513_txt[0LL] != '0') || ((_36513_txt[1LL] != 'x') && (_36513_txt[1LL] != 'X'))) {
		return _36528_lit;
	}
	
	jule::Int _37413_i = 2LL;
	_julec_label_loop:;
	for (; _37413_i < _36513_txt.len(); (_37413_i)++) {
		{
			jule::U8 _37713_b = _36513_txt[_37413_i];
			{
				
				if (_1b75960d2_is_float_fmt_dotp(_36513_txt,_37413_i)) {
					_case_begin_4390497424:;
					{
						_36528_lit = _1b75960d2_float_fmt_dotp(_36513_txt,_37413_i);
						return _36528_lit;
					}
				}
				else if (_1b75960d2_is_float_fmt_dotfp(_36513_txt,_37413_i)) {
					_case_begin_4390497536:;
					{
						_36528_lit = _1b75960d2_float_fmt_dotfp(_36513_txt,_37413_i);
						return _36528_lit;
					}
				}
				else if (_1b75960d2_is_float_fmt_p(_37713_b,_37413_i)) {
					_case_begin_4390497648:;
					{
						_36528_lit = _1b75960d2_float_fmt_p(_36513_txt,_37413_i);
						return _36528_lit;
					}
				}
				else if (_1b75960d2_is_float_fmt_dotnp(_36513_txt,_37413_i)) {
					_case_begin_4390497760:;
					{
						_36528_lit = _1b75960d2_float_fmt_dotnp(_36513_txt,_37413_i);
						return _36528_lit;
					}
				}
				else if ((_37713_b != '_') && (!(_1b7553d92_is_hex(_37713_b)))) {
					_case_begin_4390497872:;
					{
						goto _iter_end_4390494432;
					}
				}
				_match_end_4390497216:;
			}
		}
	_iter_next_4390494432:;
	}
	_iter_end_4390494432:;
	if (_37413_i == 2LL) {
		return _36528_lit;
	}
	_36528_lit = static_cast<jule::Str>(_36513_txt.slice(0LL,_37413_i));
	return _36528_lit;
}



inline jule::Str _1b75960d2_hex_escape(jule::Slice<jule::U8>& _39816_txt,jule::Int _39829_n) {
	jule::Str _39839_seq = jule::Str();
	if (_39816_txt.len() < _39829_n) {
		return _39839_seq;
	}
	
	jule::Int _40413_i = 2LL;
	for (; _40413_i < _39829_n; (_40413_i)++) {
		{
			if ((!(_1b7553d92_is_hex(_39816_txt[_40413_i])))) {
				return _39839_seq;
			}
		}
	_iter_next_4390509648:;
	}
	_iter_end_4390509648:;
	_39839_seq=static_cast<jule::Str>(_39816_txt.slice(0LL,_39829_n));
	return _39839_seq;
}



inline jule::Str _1b75960d2_big_unicode_point_escape(jule::Slice<jule::U8>& _41630_txt) {
	return _1b75960d2_hex_escape(_41630_txt,10LL);
}



inline jule::Str _1b75960d2_little_unicode_point_escape(jule::Slice<jule::U8>& _42133_txt) {
	return _1b75960d2_hex_escape(_42133_txt,6LL);
}



inline jule::Str _1b75960d2_hex_byte_escape(jule::Slice<jule::U8>& _42621_txt) {
	return _1b75960d2_hex_escape(_42621_txt,4LL);
}



inline jule::Str _1b75960d2_byte_escape(jule::Slice<jule::U8>& _43117_txt) {
	jule::Str _43132_seq = jule::Str();
	if (_43117_txt.len() < 4LL) {
		return _43132_seq;
	}
	if (((!(_1b7553d92_is_octal(_43117_txt[1LL]))) || (!(_1b7553d92_is_octal(_43117_txt[2LL])))) || (!(_1b7553d92_is_octal(_43117_txt[3LL])))) {
		return _43132_seq;
	}
	_43132_seq = static_cast<jule::Str>(_43117_txt.slice(0LL,4LL));
	return _43132_seq;
}



inline jule::Slice<_1b6986b22_Log> _1b75960d2_lex(jule::Ptr<_1b750c763_File> _83016_f) {
	if (_83016_f == nullptr) {
		return nullptr;
	}
	_1b75960d2_Lex _83513_lex = _1b75960d2_Lex(jule::Slice<_1b7553d92_Token>(),_83016_f,0LL,jule::Int(),-1LL,jule::Slice<_1b6986b22_Log>());
	_83513_lex._method_new_line();
	_83513_lex._method_lex();
	if (_83513_lex._field_errors.len() > 0LL) {
		return _83513_lex._field_errors;
	}
	(*(_83016_f))._field__tokens=_83513_lex._field_tokens;
	return nullptr;
}



inline jule::Bool _1b76a914b_find_module_file(jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>& _1226_dirents) {
	{
		auto &expr = _1226_dirents;
		auto it = expr.begin();
		_iter_begin_4391000816:;
		if (it != expr.end()) {
			jule::Ptr<_1ce947cda_DirEntry> &_1b76a914b_d = *it;
			{
				if ((!((*((*(_1b76a914b_d))._field_stat))._method_is_dir())) && ((*(_1b76a914b_d))._field_name == jule::Str("jule.mod", 8))) {
					return true;
				}
			}
			_iter_next_4391000816:;
			++it;
			goto _iter_begin_4391000816;
		}
		_iter_end_4391000816:;
	}
	return false;
}



inline jule::Str _1b76a914b_find_module_file_deep(jule::Str _2434_path) {
	for (;;) {
		{
			jule::Slice<jule::Ptr<_1ce947cda_DirEntry>> _2617_dirents = ({
				auto except = _1ce947cda_Directory::_static_method_read(_2434_path);
				(except.ok()) ? (except.result) : ({{
					goto _iter_end_4391003888;
					goto _iter_end_4391003888;
				} jule::Slice<jule::Ptr<_1ce947cda_DirEntry>>();});
			});
			jule::Bool _3013_exist = _1b76a914b_find_module_file(_2617_dirents);
			if (_3013_exist) {
				return _2434_path;
			}
			jule::I64 _3513_n = _2434_path.len();
			_2434_path=_1ce9be05e_dir(_2434_path);
			if (_2434_path.len() == _3513_n) {
				goto _iter_end_4391003888;
			}
		}
	_iter_next_4391003888:;
	}
	_iter_end_4391003888:;
	return jule::Str();
}



inline jule::Slice<_1b6986b22_Log> _1b76a914b_check_module_file(jule::Str _4626_path) {
	jule::Slice<jule::U8> _479_bytes = ({
		auto except = _1ce96429b_File::_static_method_read(_1ce9be05e_join(jule::Slice<jule::Str>({_4626_path,jule::Str("jule.mod", 8)})));
		(except.ok()) ? (except.result) : ({{
			return jule::Slice<_1b6986b22_Log>({_1b6986b22_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
			return jule::Slice<_1b6986b22_Log>({_1b6986b22_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file could not checked because of a problem", 50),jule::Str(),jule::Str())});
		} jule::Slice<jule::U8>();});
	});
	jule::Str _549_s = _1cea16edb_trim(static_cast<jule::Str>(_479_bytes),jule::Str(" \n\r\t\v", 5));
	if (_549_s.len() != 0LL) {
		return jule::Slice<_1b6986b22_Log>({_1b6986b22_Log(0LLU,jule::Int(),jule::Int(),jule::Str(),jule::Str("module file has syntax error(s)", 31),jule::Str(),jule::Str())});
	}
	return nullptr;
}



inline jule::Ptr<_1b76a925b_FileInfo> _1b76a925b_parse_file(jule::Ptr<_1b750c763_File> _2223_f) {
	if (_2223_f == nullptr) {
		return nullptr;
	}
	jule::Ptr<_1b76a925b_FileInfo> _2713_finf = jule::new_struct<_1b76a925b_FileInfo>(new( std::nothrow ) _1b76a925b_FileInfo());
	std::tie((*(_2713_finf))._field_ast,(*(_2713_finf))._field_errors) = _1b76a925b_parse_fileset(_2223_f);
	if ((*(_2713_finf))._field_errors.len() > 0LL) {
		(*(_2713_finf))._field_ast=nullptr;
	}
	return _2713_finf;
}



inline std::tuple<jule::Ptr<_1b74bea77_Ast>,jule::Slice<_1b6986b22_Log>> _1b76a925b_parse_fileset(jule::Ptr<_1b750c763_File> _5822_f) {
	jule::Ptr<_1b78b1aa1_Parser> _5913_p = jule::new_struct_ptr<_1b78b1aa1_Parser>(new( std::nothrow ) _1b78b1aa1_Parser());
	(*(_5913_p))._method_parse(_5822_f);
	return std::make_tuple((*(_5913_p))._field_ast,(*(_5913_p))._field_errors);
}



inline jule::Ptr<_1b7509a90_ScopeTree> _1b76b4310_new_scope(void) {
	return jule::new_struct<_1b7509a90_ScopeTree>(new( std::nothrow ) _1b7509a90_ScopeTree());
}



inline std::tuple<jule::Bool,jule::Bool> _1b76b4310_is_st(_1b7553d92_Token _4610_current,_1b7553d92_Token _4626_prev) {
	jule::Bool _4641_ok = jule::Bool();
	jule::Bool _4651_terminated = jule::Bool();
	_4641_ok=(_4610_current._field_id == 5LLU) || (_4626_prev._field_row < _4610_current._field_row);
	_4651_terminated=_4610_current._field_id == 5LLU;
	return std::make_tuple(_4641_ok,_4651_terminated);
}



inline jule::Bool _1b76b4310_prev_is_incomplete_expr(jule::Slice<_1b7553d92_Token>& _5229_tokens,jule::Int& _5247_i) {
	if ((_5247_i > 1LL) && (_5229_tokens[_5247_i - 2LL]._field_id == 23LLU)) {
		return false;
	}
	{
		_1b7553d92_Token* _5913_prev = (&(_5229_tokens[_5247_i - 1LL]));
		return ((*(_5913_prev))._field_id == 20LLU) || ((((*(_5913_prev))._field_id == 7LLU) && _1b7553d92_is_bin_op((*(_5913_prev))._field_kind)) && ((*(_5913_prev))._field_row < _5229_tokens[_5247_i]._field_row));
	}
}



inline std::tuple<jule::Int,jule::Bool> _1b76b4310_next_st_pos(jule::Slice<_1b7553d92_Token>& _6817_tokens,jule::Int _6834_start) {
	jule::Int _6913_brace_n = 0LL;
	jule::Int _7013_i = _6834_start;
	for (; _7013_i < _6817_tokens.len(); (_7013_i)++) {
		{
			jule::Bool _7217_ok = false;
			jule::Bool _7317_terminated = false;
			_1b7553d92_Token _7413_tok = _6817_tokens[_7013_i];
			{
				auto &_match_expr{ _7413_tok._field_id };
				
				if (_match_expr == 3LLU) {
					_case_begin_4391251056:;
					{
						{
							auto &_match_expr{ _7413_tok._field_kind };
							
							if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
								_case_begin_4391257648:;
								{
									if ((_6913_brace_n == 0LL) && (_7013_i > _6834_start)) {
										if ((!(_1b76b4310_prev_is_incomplete_expr(_6817_tokens,_7013_i)))) {
											std::tie(_7217_ok,_7317_terminated) = _1b76b4310_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
											if (_7217_ok) {
												goto _julec_label_return;
											}
										}
									}
									(_6913_brace_n)++;
								}
							}
							else {
								_case_begin_4391251232:;
								{
									(_6913_brace_n)--;
									if ((_6913_brace_n == 0LL) && ((_7013_i + 1LL) < _6817_tokens.len())) {
										std::tie(_7217_ok,_7317_terminated) = _1b76b4310_is_st(_6817_tokens[_7013_i + 1LL],_7413_tok);
										if (_7217_ok) {
											(_7013_i)++;
											goto _julec_label_return;
										}
									}
								}
							}
							_match_end_4391251408:;
						}
						goto _iter_next_4391246528;
					}
				}
				_match_end_4391250656:;
			}
			if (_6913_brace_n != 0LL) {
				goto _iter_next_4391246528;
			}
			if (_7013_i > _6834_start) {
				if (_1b76b4310_prev_is_incomplete_expr(_6817_tokens,_7013_i)) {
					goto _iter_next_4391246528;
				}
				std::tie(_7217_ok,_7317_terminated) = _1b76b4310_is_st(_7413_tok,_6817_tokens[_7013_i - 1LL]);
			} else {
				std::tie(_7217_ok,_7317_terminated) = _1b76b4310_is_st(_7413_tok,_7413_tok);
			}
			if ((!(_7217_ok))) {
				goto _iter_next_4391246528;
			}
			_julec_label_return:;
			if (_7317_terminated) {
				(_7013_i)++;
			}
			return std::make_tuple(_7013_i,_7317_terminated);
		}
	_iter_next_4391246528:;
	}
	_iter_end_4391246528:;
	return std::make_tuple(_7013_i,false);
}



inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Bool> _1b76b4310_skip_st(jule::Int& _13117_i,jule::Slice<_1b7553d92_Token> _13129_tokens) {
	jule::Int _1329_start = _13117_i;
	jule::Bool _13313_terminated = false;
	std::tie(_13117_i,_13313_terminated) = _1b76b4310_next_st_pos(_13129_tokens,_1329_start);
	jule::Slice<_1b7553d92_Token> _13513_st_tokens = _13129_tokens.slice(_1329_start,_13117_i);
	if (_13313_terminated) {
		if (_13513_st_tokens.len() == 1LL) {
			std::tie(_13513_st_tokens,_13313_terminated) = _1b76b4310_skip_st(_13117_i,_13129_tokens);
			return std::make_tuple(_13513_st_tokens,_13313_terminated);
		}
		_13513_st_tokens=_13513_st_tokens.slice(0LL,_13513_st_tokens.len() - 1LL);
	}
	return std::make_tuple(_13513_st_tokens,_13313_terminated);
}



inline jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _1b76b4310_split_stmts(jule::Slice<_1b7553d92_Token>& _15321_tokens) {
	jule::Slice<jule::Ptr<_1b76b4310_Stmt>> _15413_stms = nullptr;
	jule::Int _15513_pos = 0LL;
	while (_15513_pos < _15321_tokens.len()) {
		{
			jule::Slice<_1b7553d92_Token> _15718_tokens;
			jule::Bool _15726_terminated;
			std::tie(_15718_tokens,_15726_terminated) = _1b76b4310_skip_st(_15513_pos,_15321_tokens);
			_15413_stms = jule::alloc_for_append(_15413_stms,1);_15413_stms.__push(jule::new_struct<_1b76b4310_Stmt>(new( std::nothrow ) _1b76b4310_Stmt(_15718_tokens,_15726_terminated)));
		}
	_iter_next_4391283664:;
	}
	_iter_end_4391283664:;
	return _15413_stms;
}



inline jule::Ptr<_1b76b4ac4_CallData> _1b76b4ac4_get_call_data(jule::Slice<_1b7553d92_Token>& _4523_tokens) {
	jule::Ptr<_1b76b4ac4_CallData> _4613_data = jule::new_struct<_1b76b4ac4_CallData>(new( std::nothrow ) _1b76b4ac4_CallData());
	std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_args_tokens) = _1b78b1aa1_range_last(_4523_tokens);
	if ((*(_4613_data))._field_expr_tokens.len() == 0LL) {
		return _4613_data;
	}
	_1b7553d92_Token _539_token = (*(_4613_data))._field_expr_tokens[(*(_4613_data))._field_expr_tokens.len() - 1LL];
	if ((_539_token._field_id == 3LLU) && (_539_token._field_kind == jule::Str("]", 1))) {
		std::tie((*(_4613_data))._field_expr_tokens,(*(_4613_data))._field_generics_tokens) = _1b78b1aa1_range_last((*(_4613_data))._field_expr_tokens);
	}
	return _4613_data;
}



inline jule::Slice<_1b7553d92_Token> _1b76b4ac4_get_block_expr(jule::Slice<_1b7553d92_Token>& _6124_tokens) {
	jule::Int _6213_brace_n = 0LL;
	jule::Int _6313_skip_to_next_brace_close = 0LL;
	{
		auto &expr = _6124_tokens;
		auto it = expr.begin();
		_iter_begin_4391301248:;
		if (it != expr.end()) {
			jule::Int _1b76b4ac4_i = it - expr.begin();
			_1b7553d92_Token &_1b76b4ac4_tok = *it;
			{
				{
					auto &_match_expr{ _1b76b4ac4_tok._field_id };
					
					if (_match_expr == 16LLU || _match_expr == 17LLU || _match_expr == 35LLU) {
						_case_begin_4391307728:;
						{
							(_6313_skip_to_next_brace_close)++;
						}
					}
					else if (_match_expr == 3LLU) {
						_case_begin_4391307840:;
						{
							{
								auto &_match_expr{ _1b76b4ac4_tok._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_4391311312:;
									{
										if ((_6213_brace_n > 0LL) || (_6313_skip_to_next_brace_close > 0LL)) {
											if (_6313_skip_to_next_brace_close > 0LL) {
												(_6313_skip_to_next_brace_close)--;
											}
											(_6213_brace_n)++;
											goto _match_end_4391310016;
										}
										return _6124_tokens.slice(0LL,_1b76b4ac4_i);
									}
								}
								else if (_match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_4391311792:;
									{
										(_6213_brace_n)++;
									}
								}
								else {
									_case_begin_4391308000:;
									{
										(_6213_brace_n)--;
									}
								}
								_match_end_4391310016:;
							}
						}
					}
					_match_end_4391307248:;
				}
			}
			_iter_next_4391301248:;
			++it;
			_1b76b4ac4_i++;
			goto _iter_begin_4391301248;
		}
		_iter_end_4391301248:;
	}
	return nullptr;
}



inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Slice<_1b7553d92_Token>> _1b76b4ac4_split_colon(jule::Slice<_1b7553d92_Token>& _9521_tokens) {
	jule::Int _9613_range_n = 0LL;
	{
		auto &expr = _9521_tokens;
		auto it = expr.begin();
		_iter_begin_4391312192:;
		if (it != expr.end()) {
			jule::Int _1b76b4ac4_i = it - expr.begin();
			_1b7553d92_Token &_1b76b4ac4_token = *it;
			{
				{
					auto &_match_expr{ _1b76b4ac4_token._field_id };
					
					if (_match_expr == 3LLU) {
						_case_begin_4391318560:;
						{
							{
								auto &_match_expr{ _1b76b4ac4_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
									_case_begin_4391320944:;
									{
										(_9613_range_n)++;
										goto _iter_next_4391312192;
									}
								}
								else {
									_case_begin_4391318768:;
									{
										(_9613_range_n)--;
									}
								}
								_match_end_4391319040:;
							}
						}
					}
					else if (_match_expr == 11LLU) {
						_case_begin_4391318672:;
						{
							if (_9613_range_n < 1LL) {
								jule::Slice<_1b7553d92_Token> _11325_l = _9521_tokens.slice(0LL,_1b76b4ac4_i);
								jule::Slice<_1b7553d92_Token> _11425_r = _9521_tokens.slice(_1b76b4ac4_i + 1LL);
								return std::make_tuple(_11325_l,_11425_r);
							}
						}
					}
					_match_end_4391318080:;
				}
			}
			_iter_next_4391312192:;
			++it;
			_1b76b4ac4_i++;
			goto _iter_begin_4391312192;
		}
		_iter_end_4391312192:;
	}
	return std::make_tuple(nullptr,nullptr);
}



inline jule::Slice<_1b7553d92_Token> _1b76b4ac4_eliminate_comments(jule::Slice<_1b7553d92_Token>& _12228_tokens) {
	jule::Slice<_1b7553d92_Token> _12313_cutted = nullptr;
	{
		auto &expr = _12228_tokens;
		auto it = expr.begin();
		_iter_begin_4391327200:;
		if (it != expr.end()) {
			_1b7553d92_Token _1b76b4ac4_token = *it;
			{
				if (_1b76b4ac4_token._field_id != 18LLU) {
					_12313_cutted = jule::alloc_for_append(_12313_cutted,1);_12313_cutted.__push(_1b76b4ac4_token);
				}
			}
			_iter_next_4391327200:;
			++it;
			goto _iter_begin_4391327200;
		}
		_iter_end_4391327200:;
	}
	return _12313_cutted;
}



inline jule::Int _1b76b4ac4_find_lowest_prec_op(jule::Slice<_1b7553d92_Token>& _13425_tokens) {
	jule::U8 _13913_prec = 255LLU;
	jule::Int _14013_prec_pos = -1LL;
	jule::Int _14213_brace_n = 0LL;
	jule::Bool _14313_skip_to_next_brace_open = false;
	{
		auto &expr = _13425_tokens;
		auto it = expr.begin();
		_iter_begin_4391333792:;
		if (it != expr.end()) {
			jule::Int _1b76b4ac4_i = it - expr.begin();
			_1b7553d92_Token &_1b76b4ac4_token = *it;
			{
				{
					
					if (_1b76b4ac4_token._field_id == 3LLU) {
						_case_begin_4391336192:;
						{
							{
								auto &_match_expr{ _1b76b4ac4_token._field_kind };
								
								if (_match_expr == jule::Str("{", 1)) {
									_case_begin_4391339664:;
									{
										_14313_skip_to_next_brace_open=false;
										goto _case_begin_4391340176;
									}
								}
								else if (_match_expr == jule::Str("(", 1) || _match_expr == jule::Str("[", 1)) {
									_case_begin_4391340176:;
									{
										(_14213_brace_n)++;
									}
								}
								else {
									_case_begin_4391336912:;
									{
										(_14213_brace_n)--;
									}
								}
								_match_end_4391338848:;
							}
							goto _iter_next_4391333792;
						}
					}
					else if (_14313_skip_to_next_brace_open) {
						_case_begin_4391336304:;
						{
							goto _iter_next_4391333792;
						}
					}
					else if (_1b76b4ac4_token._field_id == 16LLU) {
						_case_begin_4391336416:;
						{
							_14313_skip_to_next_brace_open=true;
							goto _iter_next_4391333792;
						}
					}
					else if (_1b76b4ac4_i == 0LL) {
						_case_begin_4391336528:;
						{
							goto _iter_next_4391333792;
						}
					}
					else if (_1b76b4ac4_token._field_id != 7LLU) {
						_case_begin_4391336640:;
						{
							goto _iter_next_4391333792;
						}
					}
					else if (_14213_brace_n > 0LL) {
						_case_begin_4391336752:;
						{
							goto _iter_next_4391333792;
						}
					}
					_match_end_4391335904:;
				}
				_1b7553d92_Token _17813_left = _13425_tokens[_1b76b4ac4_i - 1LL];
				if ((_17813_left._field_id == 7LLU) || (_17813_left._field_id == 11LLU)) {
					goto _iter_next_4391333792;
				}
				if (((_1b76b4ac4_i > 1LL) && (_17813_left._field_id == 3LLU)) && (_17813_left._field_kind == jule::Str("]", 1))) {
					_1b7553d92_Token _18617_lleft = _13425_tokens[_1b76b4ac4_i - 2LL];
					if ((_18617_lleft._field_id == 3LLU) && (_18617_lleft._field_kind == jule::Str("[", 1))) {
						if ((_1b76b4ac4_token._field_kind == jule::Str("&", 1)) || (_1b76b4ac4_token._field_kind == jule::Str("*", 1))) {
							goto _iter_next_4391333792;
						}
					}
				}
				jule::U8 _19513_p = _1b76b4ac4_token._method_prec();
				if ((_19513_p != 0LL) && (_19513_p <= _13913_prec)) {
					_13913_prec=_19513_p;
					_14013_prec_pos=_1b76b4ac4_i;
				}
			}
			_iter_next_4391333792:;
			++it;
			_1b76b4ac4_i++;
			goto _iter_begin_4391333792;
		}
		_iter_end_4391333792:;
	}
	return _14013_prec_pos;
}



inline jule::Ptr<_1b7509a90_IdentExpr> _1b76b4ac4_build_ident_expr(_1b7553d92_Token& _20526_token) {
	return jule::new_struct<_1b7509a90_IdentExpr>(new( std::nothrow ) _1b7509a90_IdentExpr(_20526_token,_20526_token._field_kind,false));
}



inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Int> _1b76b4ac4_get_range_expr_tokens(jule::Slice<_1b7553d92_Token>& _21331_tokens) {
	jule::Int _21413_range_n = 0LL;
	jule::I64 _21513_i = _21331_tokens.len() - 1LL;
	for (; _21513_i >= 0LL; (_21513_i)--) {
		{
			_1b7553d92_Token _21713_tok = _21331_tokens[_21513_i];
			if (_21713_tok._field_id == 3LLU) {
				{
					auto &_match_expr{ _21713_tok._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_4391368656:;
						{
							(_21413_range_n)++;
						}
					}
					else {
						_case_begin_4391366864:;
						{
							(_21413_range_n)--;
						}
					}
					_match_end_4391366976:;
				}
			}
			if (_21413_range_n == 0LL) {
				return std::make_tuple(_21331_tokens.slice(0LL,_21513_i),_21413_range_n);
			}
		}
	_iter_next_4391304672:;
	}
	_iter_end_4391304672:;
	return std::make_tuple(nullptr,_21413_range_n);
}



inline jule::Bool _1b77c370a_check_assign_tokens(jule::Slice<_1b7553d92_Token>& _1625_tokens) {
	if ((_1625_tokens.len() == 0LL) || (!(_1b7553d92_is_assign(_1625_tokens[0LL]._field_id)))) {
		return false;
	}
	jule::Int _2113_brace_n = 0LL;
	{
		auto &expr = _1625_tokens;
		auto it = expr.begin();
		_iter_begin_4391375408:;
		if (it != expr.end()) {
			_1b7553d92_Token &_1b77c370a_t = *it;
			{
				if (_1b77c370a_t._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b77c370a_t._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4391379472:;
							{
								(_2113_brace_n)++;
							}
						}
						else {
							_case_begin_4391377680:;
							{
								(_2113_brace_n)--;
							}
						}
						_match_end_4391377792:;
					}
				}
				if (_2113_brace_n < 0LL) {
					return false;
				} else if (_2113_brace_n > 0LL) {
					goto _iter_next_4391375408;
				} else if ((_1b77c370a_t._field_id == 7LLU) && _1b7553d92_is_assign_op(_1b77c370a_t._field_kind)) {
					return true;
				}
			}
			_iter_next_4391375408:;
			++it;
			goto _iter_begin_4391375408;
		}
		_iter_end_4391375408:;
	}
	return false;
}



inline _1b6986b22_Log _1b78b1aa1_make_err(jule::Int _5113_row,jule::Int _5123_col,jule::Ptr<_1b750c763_File>& _5134_f,jule::Str _5144_fmt,jule::Slice<jule::Any> _5157_args) {
	return _1b6986b22_Log(1LLU,_5113_row,_5123_col,(*(_5134_f))._method_path(),_1b6986b22_logf(_5144_fmt,_5157_args),jule::Str(),jule::Str());
}



inline jule::Slice<_1b7553d92_Token> _1b78b1aa1_range(jule::Int& _7015_i,jule::Str _7023_open,jule::Str _7040_close,jule::Slice<_1b7553d92_Token>& _7063_tokens) {
	if (_7015_i >= _7063_tokens.len()) {
		return nullptr;
	}
	_1b7553d92_Token _759_tok = _7063_tokens[_7015_i];
	if ((_759_tok._field_id != 3LLU) || (_759_tok._field_kind != _7023_open)) {
		return nullptr;
	}
	(_7015_i)++;
	jule::Int _8113_range_n = 1LL;
	jule::Int _829_start = _7015_i;
	for (; (_8113_range_n != 0LL) && (_7015_i < _7063_tokens.len()); (_7015_i)++) {
		{
			_1b7553d92_Token _8413_token = _7063_tokens[_7015_i];
			if (_8413_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _8413_token._field_kind };
					
					if (_match_expr == _7023_open) {
						_case_begin_4391398688:;
						{
							(_8113_range_n)++;
						}
					}
					else if (_match_expr == _7040_close) {
						_case_begin_4391398800:;
						{
							(_8113_range_n)--;
						}
					}
					_match_end_4391398208:;
				}
			}
		}
	_iter_next_4391395296:;
	}
	_iter_end_4391395296:;
	return _7063_tokens.slice(_829_start,_7015_i - 1LL);
}



inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Slice<_1b7553d92_Token>> _1b78b1aa1_range_last(jule::Slice<_1b7553d92_Token>& _10320_tokens) {
	jule::Slice<_1b7553d92_Token> _10339_cutted = jule::Slice<_1b7553d92_Token>();
	jule::Slice<_1b7553d92_Token> _10356_cut = jule::Slice<_1b7553d92_Token>();
	if (_10320_tokens.len() == 0LL) {
		_10339_cutted = _10320_tokens;
		_10356_cut = nullptr;
		return std::make_tuple(_10339_cutted,_10356_cut);
	} else if (_10320_tokens[_10320_tokens.len() - 1LL]._field_id != 3LLU) {
		_10339_cutted = _10320_tokens;
		_10356_cut = nullptr;
		return std::make_tuple(_10339_cutted,_10356_cut);
	}
	jule::Int _11013_brace_n = 0LL;
	jule::I64 _11113_i = _10320_tokens.len() - 1LL;
	for (; _11113_i >= 0LL; (_11113_i)--) {
		{
			_1b7553d92_Token _11313_token = _10320_tokens[_11113_i];
			if (_11313_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _11313_token._field_kind };
					
					if (_match_expr == jule::Str("}", 1) || _match_expr == jule::Str("]", 1) || _match_expr == jule::Str(")", 1)) {
						_case_begin_4391413920:;
						{
							(_11013_brace_n)++;
							goto _iter_next_4391408656;
						}
					}
					else {
						_case_begin_4391412128:;
						{
							(_11013_brace_n)--;
						}
					}
					_match_end_4391412240:;
				}
			}
			if (_11013_brace_n == 0LL) {
				_10339_cutted = _10320_tokens.slice(0LL,_11113_i);
				_10356_cut = _10320_tokens.slice(_11113_i);
				return std::make_tuple(_10339_cutted,_10356_cut);
			}
		}
	_iter_next_4391408656:;
	}
	_iter_end_4391408656:;
	_10339_cutted = _10320_tokens;
	_10356_cut = nullptr;
	return std::make_tuple(_10339_cutted,_10356_cut);
}



inline std::tuple<jule::Slice<jule::Slice<_1b7553d92_Token>>,jule::Slice<_1b6986b22_Log>> _1b78b1aa1_parts(jule::Slice<_1b7553d92_Token>& _14115_tokens,jule::Uint _14132_id,jule::Bool _14145_expr_must) {
	if (_14115_tokens.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Slice<jule::Slice<_1b7553d92_Token>> _14613_parts = nullptr;
	jule::Slice<_1b6986b22_Log> _14713_errors = nullptr;
	jule::Int _14913_range_n = 0LL;
	jule::Int _15013_last = 0LL;
	{
		auto &expr = _14115_tokens;
		auto it = expr.begin();
		_iter_begin_4391422960:;
		if (it != expr.end()) {
			jule::Int _1b78b1aa1_i = it - expr.begin();
			_1b7553d92_Token &_1b78b1aa1_token = *it;
			{
				if (_1b78b1aa1_token._field_id == 3LLU) {
					{
						auto &_match_expr{ _1b78b1aa1_token._field_kind };
						
						if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
							_case_begin_4391428496:;
							{
								(_14913_range_n)++;
								goto _iter_next_4391422960;
							}
						}
						else {
							_case_begin_4391426704:;
							{
								(_14913_range_n)--;
							}
						}
						_match_end_4391426816:;
					}
				}
				if (_14913_range_n > 0LL) {
					goto _iter_next_4391422960;
				}
				if (_1b78b1aa1_token._field_id == _14132_id) {
					if (_14145_expr_must && ((_1b78b1aa1_i - _15013_last) <= 0LL)) {
						_1b6986b22_Log _17021_err = _1b78b1aa1_make_err(_1b78b1aa1_token._field_row,_1b78b1aa1_token._field_column,_1b78b1aa1_token._field_file,jule::Str("expression missing", 18),jule::Slice<jule::Any>());
						_14713_errors = jule::alloc_for_append(_14713_errors,1);_14713_errors.__push(_17021_err);
					}
					_14613_parts = jule::alloc_for_append(_14613_parts,1);_14613_parts.__push(_14115_tokens.slice(_15013_last,_1b78b1aa1_i));
					_15013_last=static_cast<jule::Int>(_1b78b1aa1_i + 1LL);
				}
			}
			_iter_next_4391422960:;
			++it;
			_1b78b1aa1_i++;
			goto _iter_begin_4391422960;
		}
		_iter_end_4391422960:;
	}
	if (_15013_last < _14115_tokens.len()) {
		_14613_parts = jule::alloc_for_append(_14613_parts,1);_14613_parts.__push(_14115_tokens.slice(_15013_last));
	} else if ((!(_14145_expr_must))) {
		_14613_parts = jule::alloc_for_append(_14613_parts,1);_14613_parts.__push(jule::Slice<_1b7553d92_Token>());
	}
	return std::make_tuple(_14613_parts,_14713_errors);
}



inline jule::Str _1b78b1aa1_get_close_kind_of_brace(jule::Str _18728_left) {
	{
		auto &_match_expr{ _18728_left };
		
		if (_match_expr == jule::Str(")", 1)) {
			_case_begin_4391457920:;
			{
				return jule::Str("(", 1);
			}
		}
		else if (_match_expr == jule::Str("}", 1)) {
			_case_begin_4391458128:;
			{
				return jule::Str("{", 1);
			}
		}
		else if (_match_expr == jule::Str("]", 1)) {
			_case_begin_4391458224:;
			{
				return jule::Str("[", 1);
			}
		}
		else {
			_case_begin_4391456128:;
			{
				return jule::Str();
			}
		}
		_match_end_4391456240:;
	}
}



inline _1b6986b22_Log _1b78b1aa1_compiler_err(_1b7553d92_Token& _19618_token,jule::Str& _19633_fmt,jule::Slice<jule::Any> _19646_args) {
	return _1b6986b22_Log(1LLU,_19618_token._field_row,_19618_token._field_column,(*(_19618_token._field_file))._method_path(),_1b6986b22_logf(_19633_fmt,_19646_args),(*(_19618_token._field_file))._method_get_row(_19618_token._field_row),jule::Str());
}



inline void _1b78b1aa1_push_suggestion(_1b6986b22_Log* _20731_log,jule::Str _20742_fmt,jule::Slice<jule::Any> _20755_args) {
	(*(_20731_log))._field_suggestion=_1b6986b22_logf(_20742_fmt,_20755_args);
}



inline jule::Ptr<_1b7509a90_Comment> _1b78b1aa1_build_comment(_1b7553d92_Token& _21123_token) {
	_21123_token._field_kind=_1cea16edb_trim(_21123_token._field_kind.slice(2LL),jule::Str(" \n\r\t\v", 5));
	return jule::new_struct<_1b7509a90_Comment>(new( std::nothrow ) _1b7509a90_Comment(_21123_token,_21123_token._field_kind));
}



inline jule::Str _1b78b1aa1_tokstoa(jule::Slice<_1b7553d92_Token>& _22013_tokens) {
	jule::Str _22113_s = jule::Str();
	{
		auto &expr = _22013_tokens;
		auto it = expr.begin();
		_iter_begin_4391471712:;
		if (it != expr.end()) {
			_1b7553d92_Token &_1b78b1aa1_token = *it;
			{
				_22113_s+=_1b78b1aa1_token._field_kind;
			}
			_iter_next_4391471712:;
			++it;
			goto _iter_begin_4391471712;
		}
		_iter_end_4391471712:;
	}
	return _22113_s;
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_build_void_type(void) {
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl());
}



inline jule::Ptr<_1b7509a90_TypeDecl> _1a691245e_build_prim_type(_1b7553d92_Token _2024_token) {
	return jule::new_struct<_1b7509a90_TypeDecl>(new( std::nothrow ) _1b7509a90_TypeDecl(_2024_token,jule::Any(jule::new_struct<_1b7509a90_IdentTypeDecl>(new( std::nothrow ) _1b7509a90_IdentTypeDecl(_2024_token,_2024_token._field_kind,false,nullptr)))));
}



inline std::tuple<jule::Slice<_1b7553d92_Token>,jule::Int> _1a691245e_split_map_range(jule::Slice<_1b7553d92_Token>& _3525_tokens,jule::Int& _3547_i) {
	jule::Slice<_1b7553d92_Token> _3557_range_tokens = jule::Slice<_1b7553d92_Token>();
	jule::Int _3580_colon = jule::Int();
	_3580_colon=-1LL;
	jule::Int _3713_range_n = 0LL;
	jule::Int _389_start = _3547_i;
	for (; _3547_i < _3525_tokens.len(); (_3547_i)++) {
		{
			_1b7553d92_Token _4013_token = _3525_tokens[_3547_i];
			if (_4013_token._field_id == 3LLU) {
				{
					auto &_match_expr{ _4013_token._field_kind };
					
					if (_match_expr == jule::Str("{", 1) || _match_expr == jule::Str("[", 1) || _match_expr == jule::Str("(", 1)) {
						_case_begin_4391484464:;
						{
							(_3713_range_n)++;
							goto _iter_next_4391478384;
						}
					}
					else {
						_case_begin_4391482672:;
						{
							(_3713_range_n)--;
						}
					}
					_match_end_4391482784:;
				}
			}
			if (_3713_range_n == 0LL) {
				if ((_389_start + 1LL) > _3547_i) {
					return std::make_tuple(_3557_range_tokens,_3580_colon);
				}
				_3557_range_tokens=_3525_tokens.slice(_389_start + 1LL,_3547_i);
				goto _iter_end_4391478384;
			} else if (_3713_range_n != 1LL) {
				goto _iter_next_4391478384;
			}
			if ((_3580_colon == -1LL) && (_4013_token._field_id == 11LLU)) {
				_3580_colon=static_cast<jule::Int>((_3547_i - _389_start) - 1LL);
			}
		}
	_iter_next_4391478384:;
	}
	_iter_end_4391478384:;
	return std::make_tuple(_3557_range_tokens,_3580_colon);
}



inline void _1b6dd59aa_lshift_unsig(_1b6dd59aa_Const& _56622_c,_1b6dd59aa_Const& _56633_x) {
	jule::U64 _5679_l = _56622_c._method_as_u64();
	jule::U64 _5689_r = _56633_x._method_as_u64();
	_56622_c._method_set_u64(static_cast<jule::U64>(_5679_l << _5689_r));
}



inline void _1b6dd59aa_rshift_unsig(_1b6dd59aa_Const& _57222_c,_1b6dd59aa_Const& _57233_x) {
	jule::U64 _5739_l = _57222_c._method_as_u64();
	jule::U64 _5749_r = _57233_x._method_as_u64();
	_57222_c._method_set_u64(static_cast<jule::U64>(_5739_l >> _5749_r));
}



inline jule::Str _1a90e11ac_real_kind_of(jule::Str _2521_kind) {
	{
		auto &_match_expr{ _2521_kind };
		
		if (_match_expr == jule::Str("int", 3)) {
			_case_begin_4393299552:;
			{
				return jule::Str("i64", 3);
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("uintptr", 7)) {
			_case_begin_4393299648:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_4393282560:;
			{
				return _2521_kind;
			}
		}
		_match_end_4393297984:;
	}
}



inline jule::Int _1a90e11ac_bitsize_of(jule::Str _4119_k) {
	{
		auto &_match_expr{ _4119_k };
		
		if (_match_expr == jule::Str("i8", 2) || _match_expr == jule::Str("u8", 2)) {
			_case_begin_4393303184:;
			{
				return 8LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3) || _match_expr == jule::Str("u16", 3)) {
			_case_begin_4393303280:;
			{
				return 16LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3) || _match_expr == jule::Str("u32", 3) || _match_expr == jule::Str("f32", 3)) {
			_case_begin_4393302720:;
			{
				return 32LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3) || _match_expr == jule::Str("u64", 3) || _match_expr == jule::Str("f64", 3)) {
			_case_begin_4393302816:;
			{
				return 64LL;
			}
		}
		else if (_match_expr == jule::Str("uint", 4) || _match_expr == jule::Str("int", 3)) {
			_case_begin_4393302912:;
			{
				return 64LL;
			}
		}
		else {
			_case_begin_4393300080:;
			{
				return -1LL;
			}
		}
		_match_end_4393301520:;
	}
}



inline jule::Str _1a90e11ac_int_from_bits(jule::U64 _7322_bits) {
	{
		auto &_match_expr{ _7322_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_4393310352:;
			{
				return jule::Str("i8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_4393310544:;
			{
				return jule::Str("i16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_4393310640:;
			{
				return jule::Str("i32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4393310736:;
			{
				return jule::Str("i64", 3);
			}
		}
		else {
			_case_begin_4393307808:;
			{
				return jule::Str();
			}
		}
		_match_end_4393308112:;
	}
}



inline jule::Str _1a90e11ac_uint_from_bits(jule::U64 _8623_bits) {
	{
		auto &_match_expr{ _8623_bits };
		
		if (_match_expr == 8LL) {
			_case_begin_4393314944:;
			{
				return jule::Str("u8", 2);
			}
		}
		else if (_match_expr == 16LL) {
			_case_begin_4393315136:;
			{
				return jule::Str("u16", 3);
			}
		}
		else if (_match_expr == 32LL) {
			_case_begin_4393315232:;
			{
				return jule::Str("u32", 3);
			}
		}
		else if (_match_expr == 64LL) {
			_case_begin_4393315328:;
			{
				return jule::Str("u64", 3);
			}
		}
		else {
			_case_begin_4393312928:;
			{
				return jule::Str();
			}
		}
		_match_end_4393313296:;
	}
}



inline jule::Bool _1a90e11ac_check_bit_float(jule::Str _12424_val,jule::Int _12434_bit) {
	jule::Int _12513_err;
	std::tie(std::ignore,_12513_err) = _211cadddd_parse_float(_12424_val,_12434_bit);
	return _12513_err == 0LLU;
}



inline jule::U64 _1a90e11ac_bitsize_of_int(jule::I64 _14823_x) {
	{
		
		if ((-128LL <= _14823_x) && (_14823_x <= 127LL)) {
			_case_begin_4393345616:;
			{
				return 8LL;
			}
		}
		else if ((-32768LL <= _14823_x) && (_14823_x <= 32767LL)) {
			_case_begin_4393344304:;
			{
				return 16LL;
			}
		}
		else if ((-2147483648LL <= _14823_x) && (_14823_x <= 2147483647LL)) {
			_case_begin_4393344400:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_4393343040:;
			{
				return 64LL;
			}
		}
		_match_end_4393342912:;
	}
}



inline jule::U64 _1a90e11ac_bitsize_of_uint(jule::U64 _16424_x) {
	{
		
		if (_16424_x <= 255LL) {
			_case_begin_4393352784:;
			{
				return 8LL;
			}
		}
		else if (_16424_x <= 65535LL) {
			_case_begin_4393351472:;
			{
				return 16LL;
			}
		}
		else if (_16424_x <= 4294967295LL) {
			_case_begin_4393351568:;
			{
				return 32LL;
			}
		}
		else {
			_case_begin_4393350112:;
			{
				return 64LL;
			}
		}
		_match_end_4393349968:;
	}
}



inline jule::F64 _1b6dd88c0_min(jule::Str _4716_k) {
	_4716_k=_1a90e11ac_real_kind_of(_4716_k);
	{
		auto &_match_expr{ _4716_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4393358256:;
			{
				return -128LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4393356912:;
			{
				return -32768LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4393357008:;
			{
				return -2147483648LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4393357104:;
			{
				return jule::MIN_I64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4393357200:;
			{
				return -340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4393357440:;
			{
				return jule::MIN_F64;
			}
		}
		else {
			_case_begin_4393356160:;
			{
				return 0LL;
			}
		}
		_match_end_4393356592:;
	}
}



inline jule::F64 _1b6dd88c0_max(jule::Str _6216_k) {
	_6216_k=_1a90e11ac_real_kind_of(_6216_k);
	{
		auto &_match_expr{ _6216_k };
		
		if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4393363728:;
			{
				return 127LL;
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4393363824:;
			{
				return 32767LL;
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4393363920:;
			{
				return 2147483647LL;
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4393364016:;
			{
				return jule::MAX_I64;
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_4393364192:;
			{
				return 255LL;
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4393364288:;
			{
				return 65535LL;
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4393364384:;
			{
				return 4294967295LL;
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4393364480:;
			{
				return jule::MAX_U64;
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4393364592:;
			{
				return 340282346638528860000000000000000000000.0;
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4393364704:;
			{
				return jule::MAX_F64;
			}
		}
		else {
			_case_begin_4393361840:;
			{
				return 0LL;
			}
		}
		_match_end_4393362592:;
	}
}



inline jule::Bool _1b6dd79e0_is_i8_compatible(jule::Str _629_k) {
	_629_k=_1a90e11ac_real_kind_of(_629_k);
	return _629_k == jule::Str("i8", 2);
}



inline jule::Bool _1b6dd79e0_is_i16_compatible(jule::Str _1230_k) {
	_1230_k=_1a90e11ac_real_kind_of(_1230_k);
	return (_1230_k == jule::Str("i8", 2)) || (_1230_k == jule::Str("i16", 3));
}



inline jule::Bool _1b6dd79e0_is_i32_compatible(jule::Str _1930_k) {
	_1930_k=_1a90e11ac_real_kind_of(_1930_k);
	return (((_1930_k == jule::Str("i8", 2)) || (_1930_k == jule::Str("i16", 3))) || (_1930_k == jule::Str("i32", 3))) || (_1930_k == jule::Str("u8", 2));
}



inline jule::Bool _1b6dd79e0_is_i64_compatible(jule::Str _2830_k) {
	_2830_k=_1a90e11ac_real_kind_of(_2830_k);
	return (((_2830_k == jule::Str("i8", 2)) || (_2830_k == jule::Str("i16", 3))) || (_2830_k == jule::Str("i32", 3))) || (_2830_k == jule::Str("i64", 3));
}



inline jule::Bool _1b6dd79e0_is_u8_compatible(jule::Str _3729_k) {
	_3729_k=_1a90e11ac_real_kind_of(_3729_k);
	return _3729_k == jule::Str("u8", 2);
}



inline jule::Bool _1b6dd79e0_is_u16_compatible(jule::Str _4330_k) {
	_4330_k=_1a90e11ac_real_kind_of(_4330_k);
	return (_4330_k == jule::Str("u8", 2)) || (_4330_k == jule::Str("u16", 3));
}



inline jule::Bool _1b6dd79e0_is_u32_compatible(jule::Str _4930_k) {
	_4930_k=_1a90e11ac_real_kind_of(_4930_k);
	return ((_4930_k == jule::Str("u8", 2)) || (_4930_k == jule::Str("u16", 3))) || (_4930_k == jule::Str("u32", 3));
}



inline jule::Bool _1b6dd79e0_is_u64_compatible(jule::Str _5730_k) {
	_5730_k=_1a90e11ac_real_kind_of(_5730_k);
	return (((_5730_k == jule::Str("u8", 2)) || (_5730_k == jule::Str("u16", 3))) || (_5730_k == jule::Str("u32", 3))) || (_5730_k == jule::Str("u64", 3));
}



inline jule::Bool _1b6dd79e0_is_f32_compatible(jule::Str _6630_k) {
	_6630_k=_1a90e11ac_real_kind_of(_6630_k);
	return _6630_k == jule::Str("f32", 3);
}



inline jule::Bool _1b6dd79e0_is_f64_compatible(jule::Str _7230_k) {
	_7230_k=_1a90e11ac_real_kind_of(_7230_k);
	return _7230_k == jule::Str("f64", 3);
}



inline jule::Bool _1b6dd79e0_types_are_compatible(jule::Str _8033_k1,jule::Str _8042_k2) {
	_8033_k1=_1a90e11ac_real_kind_of(_8033_k1);
	{
		auto &_match_expr{ _8033_k1 };
		
		if (_match_expr == jule::Str("any", 3)) {
			_case_begin_4393403296:;
			{
				return true;
			}
		}
		else if (_match_expr == jule::Str("i8", 2)) {
			_case_begin_4393403392:;
			{
				return _1b6dd79e0_is_i8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4393403488:;
			{
				return _1b6dd79e0_is_i16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4393403584:;
			{
				return _1b6dd79e0_is_i32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4393403824:;
			{
				return _1b6dd79e0_is_i64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u8", 2)) {
			_case_begin_4393403920:;
			{
				return _1b6dd79e0_is_u8_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4393404016:;
			{
				return _1b6dd79e0_is_u16_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4393404128:;
			{
				return _1b6dd79e0_is_u32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4393404240:;
			{
				return _1b6dd79e0_is_u64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4393404704:;
			{
				return _1b6dd79e0_is_f32_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4393404800:;
			{
				return _1b6dd79e0_is_f64_compatible(_8042_k2);
			}
		}
		else if (_match_expr == jule::Str("bool", 4)) {
			_case_begin_4393404912:;
			{
				return _8042_k2 == jule::Str("bool", 4);
			}
		}
		else if (_match_expr == jule::Str("str", 3)) {
			_case_begin_4393405024:;
			{
				return _8042_k2 == jule::Str("str", 3);
			}
		}
		else {
			_case_begin_4393402192:;
			{
				return false;
			}
		}
		_match_end_4393401984:;
	}
}



inline jule::Bool _1b6dd79e0_is_i16_greater(jule::Str _10127_k) {
	_10127_k=_1a90e11ac_real_kind_of(_10127_k);
	return _10127_k == jule::Str("i8", 2);
}



inline jule::Bool _1b6dd79e0_is_i32_greater(jule::Str _10727_k) {
	_10727_k=_1a90e11ac_real_kind_of(_10727_k);
	return (_10727_k == jule::Str("i8", 2)) || (_10727_k == jule::Str("i16", 3));
}



inline jule::Bool _1b6dd79e0_is_i64_greater(jule::Str _11327_k) {
	_11327_k=_1a90e11ac_real_kind_of(_11327_k);
	return ((_11327_k == jule::Str("i8", 2)) || (_11327_k == jule::Str("i16", 3))) || (_11327_k == jule::Str("i32", 3));
}



inline jule::Bool _1b6dd79e0_is_u16_greater(jule::Str _12127_k) {
	_12127_k=_1a90e11ac_real_kind_of(_12127_k);
	return _12127_k == jule::Str("u8", 2);
}



inline jule::Bool _1b6dd79e0_is_u32_greater(jule::Str _12727_k) {
	_12727_k=_1a90e11ac_real_kind_of(_12727_k);
	return (_12727_k == jule::Str("u8", 2)) || (_12727_k == jule::Str("u16", 3));
}



inline jule::Bool _1b6dd79e0_is_u64_greater(jule::Str _13427_k) {
	_13427_k=_1a90e11ac_real_kind_of(_13427_k);
	return ((_13427_k == jule::Str("u8", 2)) || (_13427_k == jule::Str("u16", 3))) || (_13427_k == jule::Str("u32", 3));
}



inline jule::Bool _1b6dd79e0_is_f32_greater(jule::Str _14223_k) {
	return _14223_k != jule::Str("f64", 3);
}



inline jule::Bool _1b6dd79e0_is_f64_greater(jule::Str _14423_k) {
	return true;
}



inline jule::Bool _1b6dd79e0_is_greater(jule::Str _14723_k1,jule::Str _14732_k2) {
	_14723_k1=_1a90e11ac_real_kind_of(_14723_k1);
	{
		auto &_match_expr{ _14723_k1 };
		
		if (_match_expr == jule::Str("i16", 3)) {
			_case_begin_4393439920:;
			{
				return _1b6dd79e0_is_i16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i32", 3)) {
			_case_begin_4393438688:;
			{
				return _1b6dd79e0_is_i32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("i64", 3)) {
			_case_begin_4393438784:;
			{
				return _1b6dd79e0_is_i64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u16", 3)) {
			_case_begin_4393438880:;
			{
				return _1b6dd79e0_is_u16_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u32", 3)) {
			_case_begin_4393438976:;
			{
				return _1b6dd79e0_is_u32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("u64", 3)) {
			_case_begin_4393439168:;
			{
				return _1b6dd79e0_is_u64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f32", 3)) {
			_case_begin_4393439280:;
			{
				return _1b6dd79e0_is_f32_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("f64", 3)) {
			_case_begin_4393439392:;
			{
				return _1b6dd79e0_is_f64_greater(_14732_k2);
			}
		}
		else if (_match_expr == jule::Str("any", 3)) {
			_case_begin_4393439504:;
			{
				return true;
			}
		}
		else {
			_case_begin_4393437216:;
			{
				return false;
			}
		}
		_match_end_4393437504:;
	}
}



inline jule::Bool _1a9133243_is_sig_int(jule::Str _2723_k) {
	_2723_k=_1a90e11ac_real_kind_of(_2723_k);
	return (((_2723_k == jule::Str("i8", 2)) || (_2723_k == jule::Str("i16", 3))) || (_2723_k == jule::Str("i32", 3))) || (_2723_k == jule::Str("i64", 3));
}



inline jule::Bool _1a9133243_is_unsig_int(jule::Str _3625_k) {
	_3625_k=_1a90e11ac_real_kind_of(_3625_k);
	return (((_3625_k == jule::Str("u8", 2)) || (_3625_k == jule::Str("u16", 3))) || (_3625_k == jule::Str("u32", 3))) || (_3625_k == jule::Str("u64", 3));
}



inline jule::Bool _1a9133243_is_int(jule::Str _4515_k) {
	return _1a9133243_is_sig_int(_4515_k) || _1a9133243_is_unsig_int(_4515_k);
}



inline jule::Bool _1a9133243_is_float(jule::Str _5017_k) {
	return (_5017_k == jule::Str("f32", 3)) || (_5017_k == jule::Str("f64", 3));
}



inline jule::Bool _1a9133243_is_num(jule::Str _5515_k) {
	return _1a9133243_is_int(_5515_k) || _1a9133243_is_float(_5515_k);
}



inline jule::Bool _1a91ba31e_is_ascii(jule::I32 _1017_r) {
	
	return _1017_r <= 127LLU;
}



inline jule::I32 _1a91ba31e_to_rune(jule::Slice<jule::U8> _1816_bytes) {
	if (_1816_bytes.len() == 0LL) {
		return 0LL;
	}
	jule::I32 _2313_r = 0LL;
	if ((_1816_bytes[0LL] == '\\') && (_1816_bytes.len() > 1LL)) {
		jule::Int _2517_i = 0LL;
		_2313_r=static_cast<jule::I32>(_1a91ba31e_rune_from_esq_seq(_1816_bytes,_2517_i));
	} else {
		std::tie(_2313_r,std::ignore) = _1b687997c_decode_rune(_1816_bytes);
	}
	return _2313_r;
}



inline jule::Str _1a91ba31e_to_raw_str(jule::Slice<jule::U8> _3719_bytes) {
	return static_cast<jule::Str>(_3719_bytes);
}



inline jule::Str _1a91ba31e_to_str(jule::Slice<jule::U8> _4215_bytes) {
	if (_4215_bytes.len() == 0LL) {
		return jule::Str();
	}
	jule::Slice<jule::U8> _4713_s = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_4215_bytes.len()));
	jule::Int _4813_i = 0LL;
	while (_4813_i < _4215_bytes.len()) {
		{
			jule::U8 _5013_b = _4215_bytes[_4813_i];
			if (_5013_b == '\\') {
				_4713_s=jule::append(_4713_s,_1a91ba31e_str_esq_seq(_4215_bytes,_4813_i));
			} else {
				jule::I32 _5418_r;
				jule::Int _5421_size;
				std::tie(_5418_r,_5421_size) = _1b687997c_decode_rune(_4215_bytes.slice(_4813_i));
				_4813_i+=_5421_size;
				_4713_s=_1b687997c_append_rune(_4713_s,_5418_r);
			}
		}
	_iter_next_4393487184:;
	}
	_iter_end_4393487184:;
	return static_cast<jule::Str>(_4713_s);
}



inline std::tuple<jule::U8,jule::Bool> _1a91ba31e_try_btoa_common_esq(jule::Slice<jule::U8> _6224_bytes) {
	jule::U8 _6241_seq = jule::U8();
	jule::Bool _6252_ok = jule::Bool();
	if ((_6224_bytes.len() < 2LL) || (_6224_bytes[0LL] != '\\')) {
		return std::make_tuple(_6241_seq,_6252_ok);
	}
	{
		auto &_match_expr{ _6224_bytes[1LL] };
		
		if (_match_expr == '\\') {
			_case_begin_4393501856:;
			{
				_6241_seq='\\';
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_4393504656:;
			{
				_6241_seq='\'';
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_4393504752:;
			{
				_6241_seq='\"';
			}
		}
		else if (_match_expr == 'a') {
			_case_begin_4393504864:;
			{
				_6241_seq='\a';
			}
		}
		else if (_match_expr == 'b') {
			_case_begin_4393504976:;
			{
				_6241_seq='\b';
			}
		}
		else if (_match_expr == 'f') {
			_case_begin_4393505088:;
			{
				_6241_seq='\f';
			}
		}
		else if (_match_expr == 'n') {
			_case_begin_4393505200:;
			{
				_6241_seq='\n';
			}
		}
		else if (_match_expr == 'r') {
			_case_begin_4393505312:;
			{
				_6241_seq='\r';
			}
		}
		else if (_match_expr == 't') {
			_case_begin_4393505424:;
			{
				_6241_seq='\t';
			}
		}
		else if (_match_expr == 'v') {
			_case_begin_4393505536:;
			{
				_6241_seq='\v';
			}
		}
		_match_end_4393504400:;
	}
	_6252_ok=_6241_seq != 0LL;
	return std::make_tuple(_6241_seq,_6252_ok);
}



inline jule::I32 _1a91ba31e_rune_from_esq_seq(jule::Slice<jule::U8> _8422_bytes,jule::Int& _8442_i) {
	jule::U8 _8510_b;
	jule::Bool _8513_ok;
	std::tie(_8510_b,_8513_ok) = _1a91ba31e_try_btoa_common_esq(_8422_bytes.slice(_8442_i));
	(_8442_i)++;
	if (_8513_ok) {
		(_8442_i)++;
		return static_cast<jule::I32>(static_cast<jule::I32>(_8510_b));
	}
	{
		auto &_match_expr{ _8422_bytes[_8442_i] };
		
		if (_match_expr == 'u') {
			_case_begin_4393528288:;
			{
				
				jule::U64 _9514_rc;
				std::tie(_9514_rc,std::ignore) = _211cb0593_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 5LL)),16LL,64LL);
				_8442_i+=5LL;
				jule::I32 _9713_r = static_cast<jule::I32>(_9514_rc);
				return _9713_r;
			}
		}
		else if (_match_expr == 'U') {
			_case_begin_4393527296:;
			{
				
				jule::U64 _10214_rc;
				std::tie(_10214_rc,std::ignore) = _211cb0593_parse_uint(static_cast<jule::Str>(_8422_bytes.slice(_8442_i + 1LL,_8442_i + 9LL)),16LL,64LL);
				_8442_i+=9LL;
				jule::I32 _10413_r = static_cast<jule::I32>(_10214_rc);
				return _10413_r;
			}
		}
		else if (_match_expr == 'x') {
			_case_begin_4393528096:;
			{
				
				jule::Slice<jule::U8> _10913_seq = _8422_bytes.slice(_8442_i + 1LL,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11114_b;
				std::tie(_11114_b,std::ignore) = _211cb0593_parse_uint(static_cast<jule::Str>(_10913_seq),16LL,64LL);
				return static_cast<jule::I32>(static_cast<jule::I32>(_11114_b));
			}
		}
		else {
			_case_begin_4393521392:;
			{
				
				jule::Slice<jule::U8> _11613_seq = _8422_bytes.slice(_8442_i,_8442_i + 3LL);
				_8442_i+=3LL;
				jule::U64 _11814_b;
				std::tie(_11814_b,std::ignore) = _211cb0593_parse_uint(static_cast<jule::Str>(_11613_seq.slice(1LL)),8LL,64LL);
				return static_cast<jule::I32>(static_cast<jule::I32>(_11814_b));
			}
		}
		_match_end_4393521088:;
	}
}



inline jule::Slice<jule::U8> _1a91ba31e_str_esq_seq(jule::Slice<jule::U8> _12316_bytes,jule::Int& _12336_i) {
	jule::I32 _1249_r = _1a91ba31e_rune_from_esq_seq(_12316_bytes,_12336_i);
	if (_1249_r <= 255LL) {
		return jule::Slice<jule::U8>({static_cast<jule::U8>(static_cast<jule::U8>(_1249_r))});
	}
	return static_cast<jule::Slice<jule::U8>>(static_cast<jule::Str>(_1249_r));
}



inline jule::Int _1a9265e14_find_format_prefix(jule::Slice<jule::U8>& _924_bytes,jule::Int& _940_start) {
	jule::Int _1013_i = _940_start;
	while (_1013_i < _924_bytes.len()) {
		{
			jule::I32 _1214_r;
			jule::Int _1217_size;
			std::tie(_1214_r,_1217_size) = _1b687997c_decode_rune(_924_bytes.slice(_1013_i));
			if (_1214_r == '{') {
				return _1013_i;
			}
			_1013_i+=_1217_size;
		}
	_iter_next_4394762832:;
	}
	_iter_end_4394762832:;
	return -1LL;
}



inline jule::Slice<jule::U8> _1a9265e14_get_format_range(jule::Int& _2630_i,jule::Slice<jule::U8>& _2643_bytes) {
	jule::Int _279_start = _2630_i;
	jule::Int _2813_braces = 0LL;
	while (_2630_i < _2643_bytes.len()) {
		{
			jule::I32 _3014_r;
			jule::Int _3017_size;
			std::tie(_3014_r,_3017_size) = _1b687997c_decode_rune(_2643_bytes.slice(_2630_i));
			_2630_i+=_3017_size;
			{
				auto &_match_expr{ _3014_r };
				
				if (_match_expr == '{') {
					_case_begin_4394774192:;
					{
						(_2813_braces)++;
					}
				}
				else if (_match_expr == '}') {
					_case_begin_4394774592:;
					{
						(_2813_braces)--;
						if (_2813_braces == 0LL) {
							return _2643_bytes.slice(_279_start,_2630_i);
						}
					}
				}
				_match_end_4394774336:;
			}
		}
	_iter_next_4394771136:;
	}
	_iter_end_4394771136:;
	return nullptr;
}



inline jule::Slice<jule::U8> _1a9265e14_fmt_by_default(jule::Any& _4620_arg) {
	if (_4620_arg == nullptr) {
		return jule::Slice<jule::U8>({'n','i','l'});
	}
	{
		auto &_match_expr{ _4620_arg };
		
		if (_match_expr.type_is<jule::F32>()) {
			_case_begin_4394781632:;
			{
				return static_cast<jule::Slice<jule::U8>>(_211ca7535_fmt_float(static_cast<jule::F64>(static_cast<jule::F64>(_4620_arg.operator jule::F32())),'g',-1LL,32LL));
			}
		}
		else if (_match_expr.type_is<jule::F64>()) {
			_case_begin_4394771440:;
			{
				return static_cast<jule::Slice<jule::U8>>(_211ca7535_fmt_float(static_cast<jule::F64>(_4620_arg.operator jule::F64()),'g',-1LL,64LL));
			}
		}
		else if (_match_expr.type_is<jule::I8>()) {
			_case_begin_4394771536:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_int(static_cast<jule::I8>(_4620_arg.operator jule::I8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I16>()) {
			_case_begin_4394771632:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_int(static_cast<jule::I16>(_4620_arg.operator jule::I16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I32>()) {
			_case_begin_4394771728:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_int(static_cast<jule::I32>(_4620_arg.operator jule::I32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::I64>()) {
			_case_begin_4394780208:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_int(static_cast<jule::I64>(_4620_arg.operator jule::I64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U8>()) {
			_case_begin_4394780304:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_uint(static_cast<jule::U8>(_4620_arg.operator jule::U8()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U16>()) {
			_case_begin_4394780400:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_uint(static_cast<jule::U16>(_4620_arg.operator jule::U16()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U32>()) {
			_case_begin_4394780496:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_uint(static_cast<jule::U32>(_4620_arg.operator jule::U32()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::U64>()) {
			_case_begin_4394781088:;
			{
				return static_cast<jule::Slice<jule::U8>>(_1b6ac3d91_fmt_uint(static_cast<jule::U64>(_4620_arg.operator jule::U64()),10LL));
			}
		}
		else if (_match_expr.type_is<jule::Str>()) {
			_case_begin_4394781184:;
			{
				return static_cast<jule::Slice<jule::U8>>(_4620_arg.operator jule::Str());
			}
		}
		else if (_match_expr.type_is<jule::Bool>()) {
			_case_begin_4394781280:;
			{
				if (_4620_arg.operator jule::Bool()) {
					return jule::Slice<jule::U8>({'t','r','u','e'});
				}
				return jule::Slice<jule::U8>({'f','a','l','s','e'});
			}
		}
		else {
			_case_begin_4394777408:;
			{
				return static_cast<jule::Slice<jule::U8>>(jule::to_str(_4620_arg));
			}
		}
		_match_end_4394779616:;
	}
}



inline jule::Slice<jule::U8> _1a9265e14_apply_fmt_by_default(jule::Int& _7530_j,jule::Slice<jule::Any>& _7539_args) {
	jule::Any _769_arg = _7539_args[_7530_j];
	(_7530_j)++;
	return _1a9265e14_fmt_by_default(_769_arg);
}



inline jule::Slice<jule::U8> _1a9265e14_apply_fmt(jule::Slice<jule::U8>& _8319_fmt,jule::Int& _8337_j,jule::Slice<jule::Any>& _8346_args) {
	if (_8319_fmt.len() == 2LL) {
		return _1a9265e14_apply_fmt_by_default(_8337_j,_8346_args);
	}
	if ((_8319_fmt.len() == 4LL) && (_8319_fmt == jule::Slice<jule::U8>({'{','{','}','}'}))) {
		return jule::Slice<jule::U8>({'{','}'});
	}
	return _8319_fmt;
}



inline jule::Slice<jule::U8> _1a9265e14_format_bytes(jule::Str _9717_fmt,jule::Slice<jule::Any> _9727_args) {
	jule::Slice<jule::U8> _9813_fmt_bytes = static_cast<jule::Slice<jule::U8>>(_9717_fmt);
	if (_9727_args.len() == 0LL) {
		return _9813_fmt_bytes;
	}
	jule::Slice<jule::U8> _10413_bytes = jule::Slice<jule::U8>::alloc(0LL,static_cast<jule::I64>(_9717_fmt.len()));
	jule::Int _10613_j = 0LL;
	jule::Int _10713_last = 0LL;
	jule::Int _10813_i = _1a9265e14_find_format_prefix(_9813_fmt_bytes,_10713_last);
	for (; _10813_i != -1LL; _10813_i=static_cast<jule::Int>(_1a9265e14_find_format_prefix(_9813_fmt_bytes,_10813_i))) {
		{
			_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10713_last,_10813_i));
			jule::Slice<jule::U8> _11117_format = _1a9265e14_get_format_range(_10813_i,_9813_fmt_bytes);
			if (_11117_format == nullptr) {
				goto _iter_next_4394826288;
			}
			_10413_bytes=jule::append(_10413_bytes,_1a9265e14_apply_fmt(_11117_format,_10613_j,_9727_args));
			if (_10613_j >= _9727_args.len()) {
				_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10813_i));
				_10713_last=static_cast<jule::I64>(_9813_fmt_bytes.len());
				goto _iter_end_4394826288;
			}
			_10713_last=_10813_i;
		}
	_iter_next_4394826288:;
	}
	_iter_end_4394826288:;
	if (_10713_last < _9813_fmt_bytes.len()) {
		_10413_bytes=jule::append(_10413_bytes,_9813_fmt_bytes.slice(_10713_last));
	}
	return _10413_bytes;
}



inline jule::Str _1a9265e14_format(jule::Str _15715_fmt,jule::Slice<jule::Any> _15725_args) {
	return static_cast<jule::Str>(_1a9265e14_format_bytes(_15715_fmt,_15725_args));
}



inline jule::Bool _1a691a500_kind_uses_generics(jule::Ptr<_1a6a19a50_TypeKind> _40023_k,jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>& _40038_generics) {
	jule::Str _4019_pk = (*(_40023_k))._method_to_str();
	{
		auto &expr = _40038_generics;
		auto it = expr.begin();
		_iter_begin_4395743376:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_GenericDecl> &_1a691a500_g = *it;
			{
				if (_1cea16edb_contains(_4019_pk,(*(_1a691a500_g))._field_ident)) {
					return true;
				}
			}
			_iter_next_4395743376:;
			++it;
			goto _iter_begin_4395743376;
		}
		_iter_end_4395743376:;
	}
	return false;
}



inline jule::Bool _1a691a500_parameter_uses_generics(jule::Ptr<_1a691a500_Param>& _41029_p,jule::Slice<jule::Ptr<_1b7509a90_GenericDecl>>& _41041_generics) {
	if ((*(_41029_p))._method_is_self()) {
		return false;
	}
	return _1a691a500_kind_uses_generics((*((*(_41029_p))._field_kind))._field_kind,_41041_generics);
}



inline jule::Str _1b6a47496_build_doc(jule::Ptr<_1b7509a90_CommentGroup> _8518_cg) {
	if (_8518_cg == nullptr) {
		return jule::Str();
	}
	jule::Str _9013_doc = jule::Str();
	{
		auto &expr = (*(_8518_cg))._field_comments;
		auto it = expr.begin();
		_iter_begin_4395752832:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Comment> &_1b6a47496_c = *it;
			{
				_9013_doc+=(*(_1b6a47496_c))._field_text;
				_9013_doc+=jule::Str(" ", 1);
			}
			_iter_next_4395752832:;
			++it;
			goto _iter_begin_4395752832;
		}
		_iter_end_4395752832:;
	}
	return _9013_doc;
}



inline jule::Ptr<_1a6a19a50_TypeSymbol> _1b6a47496_build_type(jule::Ptr<_1b7509a90_TypeDecl> _9819_t) {
	if (_9819_t == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(_9819_t,jule::Ptr<_1a6a19a50_TypeKind>()));
}



inline jule::Ptr<_1a8b431d7_Value> _1b6a47496_build_expr(jule::Ptr<_1b7509a90_Expr> _10719_expr) {
	if (_10719_expr == nullptr) {
		return nullptr;
	}
	return jule::new_struct<_1a8b431d7_Value>(new( std::nothrow ) _1a8b431d7_Value(_10719_expr,jule::Ptr<_1a8b431d7_Data>()));
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1b6a47496_build_type_alias(jule::Ptr<_1b7509a90_TypeAliasDecl> _11725_decl) {
	return jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias((*(_11725_decl))._field_scope,(*(_11725_decl))._field_public,(*(_11725_decl))._field_cpp_linked,jule::Bool(),jule::Bool(),(*(_11725_decl))._field_token,(*(_11725_decl))._field_ident,_1b6a47496_build_type((*(_11725_decl))._field_kind),_1b6a47496_build_doc((*(_11725_decl))._field_doc_comments),jule::Slice<jule::Any>()));
}



inline jule::Ptr<_1b7905331_Field> _1b6a47496_build_field(jule::Ptr<_1b7509a90_FieldDecl> _12920_decl) {
	return jule::new_struct_ptr<_1b7905331_Field>(new( std::nothrow ) _1b7905331_Field(jule::Ptr<_1b7905331_Struct>(),(*(_12920_decl))._field_token,(*(_12920_decl))._field_public,(*(_12920_decl))._field_mutable,(*(_12920_decl))._field_ident,_1b6a47496_build_type((*(_12920_decl))._field_kind),(*(_12920_decl))._field_default));
}



inline jule::Slice<jule::Ptr<_1b7905331_Field>> _1b6a47496_build_fields(jule::Slice<jule::Ptr<_1b7509a90_FieldDecl>>& _14022_decls) {
	jule::Slice<jule::Ptr<_1b7905331_Field>> _14113_fields = jule::Slice<jule::Ptr<_1b7905331_Field>>::alloc(0LL,static_cast<jule::I64>(_14022_decls.len()));
	{
		auto &expr = _14022_decls;
		auto it = expr.begin();
		_iter_begin_4395769200:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_FieldDecl> _1b6a47496_decl = *it;
			{
				_14113_fields = jule::alloc_for_append(_14113_fields,1);_14113_fields.__push(_1b6a47496_build_field(_1b6a47496_decl));
			}
			_iter_next_4395769200:;
			++it;
			goto _iter_begin_4395769200;
		}
		_iter_end_4395769200:;
	}
	return _14113_fields;
}



inline jule::Ptr<_1b7905331_Struct> _1b6a47496_build_struct(jule::Ptr<_1b7509a90_StructDecl> _14821_decl) {
	return jule::new_struct_ptr<_1b7905331_Struct>(new( std::nothrow ) _1b7905331_Struct(jule::Ptr<_1a7002752_Sema>(),jule::Slice<jule::Ptr<_1b7905331_Struct>>(),jule::Slice<jule::Ptr<_1b7905331_Struct>>(),(*(_14821_decl))._field_token,(*(_14821_decl))._field_ident,_1b6a47496_build_fields((*(_14821_decl))._field_fields),jule::Slice<jule::Ptr<_1a691a500_Fn>>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>(),(*(_14821_decl))._field_public,(*(_14821_decl))._field_cpp_linked,(*(_14821_decl))._field_directives,_1b6a47496_build_doc((*(_14821_decl))._field_doc_comments),(*(_14821_decl))._field_generics,jule::Slice<jule::Ptr<_1b76b472d_Trait>>(),jule::Slice<jule::Ptr<_1b7905331_StructIns>>()));
}



inline jule::Ptr<_1a691a500_Param> _1b6a47496_build_param(jule::Ptr<_1b7509a90_ParamDecl> _16120_decl) {
	return jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param((*(_16120_decl))._field_token,(*(_16120_decl))._field_mutable,(*(_16120_decl))._field_variadic,(*(_16120_decl))._field_reference,_1b6a47496_build_type((*(_16120_decl))._field_kind),(*(_16120_decl))._field_ident));
}



inline jule::Slice<jule::Ptr<_1a691a500_Param>> _1b6a47496_build_params(jule::Slice<jule::Ptr<_1b7509a90_ParamDecl>>& _17222_decls) {
	jule::Slice<jule::Ptr<_1a691a500_Param>> _17313_params = jule::Slice<jule::Ptr<_1a691a500_Param>>::alloc(0LL,static_cast<jule::I64>(_17222_decls.len()));
	{
		auto &expr = _17222_decls;
		auto it = expr.begin();
		_iter_begin_4395782800:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_ParamDecl> _1b6a47496_decl = *it;
			{
				_17313_params = jule::alloc_for_append(_17313_params,1);_17313_params.__push(_1b6a47496_build_param(_1b6a47496_decl));
			}
			_iter_next_4395782800:;
			++it;
			goto _iter_begin_4395782800;
		}
		_iter_end_4395782800:;
	}
	return _17313_params;
}



inline jule::Ptr<_1a691a500_RetType> _1b6a47496_build_ret_type(jule::Ptr<_1b7509a90_RetTypeDecl> _18023_decl) {
	if (((*(_18023_decl))._field_idents == nullptr) && ((*(_18023_decl))._field_kind == nullptr)) {
		return nullptr;
	}
	return jule::new_struct<_1a691a500_RetType>(new( std::nothrow ) _1a691a500_RetType(_1b6a47496_build_type((*(_18023_decl))._field_kind),(*(_18023_decl))._field_idents));
}



inline jule::Ptr<_1a691a500_Fn> _1b6a47496_build_fn(jule::Ptr<_1b7509a90_FnDecl> _19017_decl) {
	return jule::new_struct_ptr<_1a691a500_Fn>(new( std::nothrow ) _1a691a500_Fn(jule::Ptr<_1a7002752_Sema>(),(*(_19017_decl))._field_token,(*(_19017_decl))._field_global,(*(_19017_decl))._field_unsafety,(*(_19017_decl))._field_public,(*(_19017_decl))._field_cpp_linked,(*(_19017_decl))._field_statically,(*(_19017_decl))._field_exceptional,(*(_19017_decl))._field_ident,(*(_19017_decl))._field_directives,_1b6a47496_build_doc((*(_19017_decl))._field_doc_comments),(*(_19017_decl))._field_scope,(*(_19017_decl))._field_generics,_1b6a47496_build_ret_type((*(_19017_decl))._field_result),_1b6a47496_build_params((*(_19017_decl))._field_params),jule::Ptr<_1b7905331_Struct>(),jule::Slice<jule::Ptr<_1a691a500_FnIns>>()));
}



inline jule::Slice<jule::Ptr<_1a691a500_Fn>> _1b6a47496_build_methods(jule::Slice<jule::Ptr<_1b7509a90_FnDecl>>& _20923_decls) {
	jule::Slice<jule::Ptr<_1a691a500_Fn>> _21013_methods = jule::Slice<jule::Ptr<_1a691a500_Fn>>::alloc(0LL,static_cast<jule::I64>(_20923_decls.len()));
	{
		auto &expr = _20923_decls;
		auto it = expr.begin();
		_iter_begin_4395797808:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_FnDecl> _1b6a47496_decl = *it;
			{
				_21013_methods = jule::alloc_for_append(_21013_methods,1);_21013_methods.__push(_1b6a47496_build_fn(_1b6a47496_decl));
			}
			_iter_next_4395797808:;
			++it;
			goto _iter_begin_4395797808;
		}
		_iter_end_4395797808:;
	}
	return _21013_methods;
}



inline jule::Ptr<_1b76b472d_Trait> _1b6a47496_build_trait(jule::Ptr<_1b7509a90_TraitDecl> _21720_decl) {
	return jule::new_struct_ptr<_1b76b472d_Trait>(new( std::nothrow ) _1b76b472d_Trait((*(_21720_decl))._field_token,(*(_21720_decl))._field_ident,(*(_21720_decl))._field_public,jule::Bool(),_1b6a47496_build_doc((*(_21720_decl))._field_doc_comments),_1b6a47496_build_methods((*(_21720_decl))._field_methods),jule::Slice<jule::Ptr<_1b7905331_Struct>>()));
}



inline jule::Ptr<_1a6bb9150_EnumItem> _1b6a47496_build_enum_item(jule::Ptr<_1b7509a90_EnumItemDecl> _22724_decl) {
	return jule::new_struct<_1a6bb9150_EnumItem>(new( std::nothrow ) _1a6bb9150_EnumItem((*(_22724_decl))._field_token,(*(_22724_decl))._field_ident,_1b6a47496_build_expr((*(_22724_decl))._field_expr)));
}



inline jule::Slice<jule::Ptr<_1a6bb9150_EnumItem>> _1b6a47496_build_enum_items(jule::Slice<jule::Ptr<_1b7509a90_EnumItemDecl>>& _23526_decls) {
	jule::Slice<jule::Ptr<_1a6bb9150_EnumItem>> _23613_items = jule::Slice<jule::Ptr<_1a6bb9150_EnumItem>>::alloc(0LL,static_cast<jule::I64>(_23526_decls.len()));
	{
		auto &expr = _23526_decls;
		auto it = expr.begin();
		_iter_begin_4395810464:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_EnumItemDecl> _1b6a47496_decl = *it;
			{
				_23613_items = jule::alloc_for_append(_23613_items,1);_23613_items.__push(_1b6a47496_build_enum_item(_1b6a47496_decl));
			}
			_iter_next_4395810464:;
			++it;
			goto _iter_begin_4395810464;
		}
		_iter_end_4395810464:;
	}
	return _23613_items;
}



inline jule::Ptr<_1a6bb9150_Enum> _1b6a47496_build_enum(jule::Ptr<_1b7509a90_EnumDecl> _24319_decl) {
	return jule::new_struct_ptr<_1a6bb9150_Enum>(new( std::nothrow ) _1a6bb9150_Enum((*(_24319_decl))._field_token,(*(_24319_decl))._field_public,(*(_24319_decl))._field_ident,_1b6a47496_build_type((*(_24319_decl))._field_kind),_1b6a47496_build_enum_items((*(_24319_decl))._field_items),_1b6a47496_build_doc((*(_24319_decl))._field_doc_comments)));
}



inline jule::Ptr<_1a7003e4b_Var> _1b6a47496_build_var(jule::Ptr<_1b7509a90_VarDecl> _25418_decl) {
	return jule::new_struct<_1a7003e4b_Var>(new( std::nothrow ) _1a7003e4b_Var(jule::Ptr<_1a6bc3e29_Scope>(),(*(_25418_decl))._field_token,(*(_25418_decl))._field_ident,(*(_25418_decl))._field_cpp_linked,(*(_25418_decl))._field_constant,(*(_25418_decl))._field_mutable,(*(_25418_decl))._field_public,jule::Bool(),(*(_25418_decl))._field_statically,(*(_25418_decl))._field_reference,_1b6a47496_build_doc((*(_25418_decl))._field_doc_comments),_1b6a47496_build_type((*(_25418_decl))._field_kind),_1b6a47496_build_expr((*(_25418_decl))._field_expr),_1b6a47496_ReferenceStack::_static_method_new(),(*(_25418_decl))._field_directives,jule::Ptr<_1a7003e4b_IterRelation>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>()));
}



inline jule::Slice<jule::Ptr<_1a7003e4b_Var>> _1b6a47496_build_vars(jule::Slice<jule::Ptr<_1b7509a90_VarDecl>> _27219_decls) {
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _27313_vars = jule::Slice<jule::Ptr<_1a7003e4b_Var>>::alloc(0LL,static_cast<jule::I64>(_27219_decls.len()));
	{
		auto &expr = _27219_decls;
		auto it = expr.begin();
		_iter_begin_4395827072:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_VarDecl> _1b6a47496_decl = *it;
			{
				_27313_vars = jule::alloc_for_append(_27313_vars,1);_27313_vars.__push(_1b6a47496_build_var(_1b6a47496_decl));
			}
			_iter_next_4395827072:;
			++it;
			goto _iter_begin_4395827072;
		}
		_iter_end_4395827072:;
	}
	return _27313_vars;
}



inline jule::Ptr<_1a6bbbe44_Impl> _1b6a47496_build_impl(jule::Ptr<_1b7509a90_Impl> _28019_decl) {
	return jule::new_struct<_1a6bbbe44_Impl>(new( std::nothrow ) _1a6bbbe44_Impl((*(_28019_decl))._field_base,(*(_28019_decl))._field_dest,_1b6a47496_build_methods((*(_28019_decl))._field_methods),_1b6a47496_build_vars((*(_28019_decl))._field_statics)));
}



inline jule::Ptr<_1a6bc3e29_ScopeChecker> _1a6bc3e29_new_scope_checker_base(jule::Ptr<_1a7002752_Sema>& _4132_s,jule::Ptr<_1a691a500_FnIns> _4146_owner) {
	return jule::new_struct_ptr<_1a6bc3e29_ScopeChecker>(new( std::nothrow ) _1a6bc3e29_ScopeChecker(_4132_s,_4146_owner,jule::Ptr<_1a6bc3e29_ScopeChecker>(),jule::Int(),jule::new_struct<_1a8acbe95_SymbolTable>(new( std::nothrow ) _1a8acbe95_SymbolTable()),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b7509a90_ScopeTree>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Uintptr(),jule::Uintptr(),jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeLabel>>>(),jule::Ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeGoto>>>(),jule::Int()));
}



inline jule::Ptr<_1a6bc3e29_ScopeChecker> _1a6bc3e29_new_scope_checker(jule::Ptr<_1a7002752_Sema>& _4927_s,jule::Ptr<_1a691a500_FnIns> _4941_owner) {
	jule::Ptr<_1a6bc3e29_ScopeChecker> _5013_base = _1a6bc3e29_new_scope_checker_base(_4927_s,_4941_owner);
	(*(_5013_base))._field_labels=jule::new_ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeLabel>>>(nullptr);
	(*(_5013_base))._field_gotos=jule::new_ptr<jule::Slice<jule::Ptr<_1a6bc3e29_ScopeGoto>>>(nullptr);
	return _5013_base;
}



inline jule::Ptr<_1a6bc3e29_ScopeLabel> _1a6bc3e29_find_label_parent(jule::Str _5922_ident,jule::Ptr<_1a6bc3e29_ScopeChecker> _5938_scope) {
	jule::Ptr<_1a6bc3e29_ScopeLabel> _6013_label = (*(_5938_scope))._method_find_label_scope(_5922_ident);
	while (_6013_label == nullptr) {
		{
			if (((*(_5938_scope))._field_parent == nullptr) || ((*(_5938_scope))._field_owner != nullptr)) {
				return nullptr;
			}
			_5938_scope=(*(_5938_scope))._field_parent;
			_6013_label=(*(_5938_scope))._method_find_label_scope(_5922_ident);
		}
	_iter_next_4395843312:;
	}
	_iter_end_4395843312:;
	return _6013_label;
}



inline jule::Bool _1a6bc3e29_stmt_is_goto_scope(jule::Any& _7324_stmt,jule::Ptr<_1a6bc3e29_Scope>& _7336_sc) {
	{
		auto &_match_expr{ _7324_stmt };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Scope>>()) {
			_case_begin_4395851088:;
			{
				return _7324_stmt.operator jule::Ptr<_1a6bc3e29_Scope>() == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_InfIter>>()) {
			_case_begin_4395851184:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1a6bc3e29_InfIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_RangeIter>>()) {
			_case_begin_4395850000:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1a6bc3e29_RangeIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_WhileIter>>()) {
			_case_begin_4395850096:;
			{
				return (*(_7324_stmt.operator jule::Ptr<_1a6bc3e29_WhileIter>()))._field_scope == _7336_sc;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Match>>()) {
			_case_begin_4395850192:;
			{
				jule::Ptr<_1a6bc3e29_Match> _8813_m = _7324_stmt.operator jule::Ptr<_1a6bc3e29_Match>();
				{
					auto &expr = (*(_8813_m))._field_cases;
					auto it = expr.begin();
					_iter_begin_4395862112:;
					if (it != expr.end()) {
						jule::Ptr<_1a6bc3e29_Case> &_1a6bc3e29_c = *it;
						{
							if ((*(_1a6bc3e29_c))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_4395862112:;
						++it;
						goto _iter_begin_4395862112;
					}
					_iter_end_4395862112:;
				}
				return ((*(_8813_m))._field_default != nullptr) && ((*((*(_8813_m))._field_default))._field_scope == _7336_sc);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Conditional>>()) {
			_case_begin_4395850288:;
			{
				jule::Ptr<_1a6bc3e29_Conditional> _9713_c = _7324_stmt.operator jule::Ptr<_1a6bc3e29_Conditional>();
				{
					auto &expr = (*(_9713_c))._field_elifs;
					auto it = expr.begin();
					_iter_begin_4395868240:;
					if (it != expr.end()) {
						jule::Ptr<_1a6bc3e29_If> &_1a6bc3e29_elif = *it;
						{
							if ((*(_1a6bc3e29_elif))._field_scope == _7336_sc) {
								return true;
							}
						}
						_iter_next_4395868240:;
						++it;
						goto _iter_begin_4395868240;
					}
					_iter_end_4395868240:;
				}
				return ((*(_9713_c))._field_default != nullptr) && ((*((*(_9713_c))._field_default))._field_scope == _7336_sc);
			}
		}
		else {
			_case_begin_4395849504:;
			{
				return false;
			}
		}
		_match_end_4395843760:;
	}
}



inline jule::Int _1a6bc3e29_count_match_type(jule::Ptr<_1a6bc3e29_Match>& _11022_m,jule::Ptr<_1a6a19a50_TypeKind>& _11034_t) {
	jule::Int _11113_n = 0LL;
	jule::Str _1129_kind = (*(_11034_t))._method_to_str();
	_julec_label_loop:;
	{
		auto &expr = (*(_11022_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_4395875408:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bc3e29_Case> &_1a6bc3e29_c = *it;
			{
				if (_1a6bc3e29_c == nullptr) {
					goto _iter_next_4395875408;
				}
				{
					auto &expr = (*(_1a6bc3e29_c))._field_exprs;
					auto it = expr.begin();
					_iter_begin_4395876912:;
					if (it != expr.end()) {
						jule::Ptr<_1a8b431d7_Data> &_1a6bc3e29_expr = *it;
						{
							if (_1a6bc3e29_expr == nullptr) {
								goto _iter_end_4395875408;
							}
							if (_1129_kind == (*((*(_1a6bc3e29_expr))._field_model.operator jule::Ptr<_1a6a19a50_TypeKind>()))._method_to_str()) {
								(_11113_n)++;
							}
						}
						_iter_next_4395876912:;
						++it;
						goto _iter_begin_4395876912;
					}
					_iter_end_4395876912:;
				}
			}
			_iter_next_4395875408:;
			++it;
			goto _iter_begin_4395875408;
		}
		_iter_end_4395875408:;
	}
	return _11113_n;
}



inline jule::Slice<jule::Ptr<_1a8b431d7_Data>> _1a6bc3e29_get_datas_from_tuple_data(jule::Ptr<_1a8b431d7_Data>& _13435_d) {
	if ((*((*(_13435_d))._field_kind))._method_tup() != nullptr) {
		{
			auto &_match_expr{ (*(_13435_d))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_TupleExprModel>>()) {
				_case_begin_4395890592:;
				{
					return (*((*(_13435_d))._field_model.operator jule::Ptr<_1a69b8d2e_TupleExprModel>()))._field_datas;
				}
			}
			else {
				_case_begin_4395883808:;
				{
					jule::Ptr<_1a6a19a50_Tuple> _14121_t = (*((*(_13435_d))._field_kind))._method_tup();
					jule::Slice<jule::Ptr<_1a8b431d7_Data>> _14221_r = jule::Slice<jule::Ptr<_1a8b431d7_Data>>::alloc(0LL,static_cast<jule::I64>((*(_14121_t))._field_types.len()));
					{
						auto &expr = (*(_14121_t))._field_types;
						auto it = expr.begin();
						_iter_begin_4395888544:;
						if (it != expr.end()) {
							jule::Ptr<_1a6a19a50_TypeKind> _1a6bc3e29_kind = *it;
							{
								_14221_r = jule::alloc_for_append(_14221_r,1);_14221_r.__push(jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(_1a6bc3e29_kind,jule::Ptr<_1a6a19a50_TypeKind>(),true,jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>())));
							}
							_iter_next_4395888544:;
							++it;
							goto _iter_begin_4395888544;
						}
						_iter_end_4395888544:;
					}
					return _14221_r;
				}
			}
			_match_end_4395883680:;
		}
	} else {
		return jule::Slice<jule::Ptr<_1a8b431d7_Data>>({_13435_d});
	}
}



inline jule::Slice<jule::Any> _1a6bc3e29_get_expr_models(jule::Any& _15625_m) {
	{
		auto &_match_expr{ _15625_m };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_TupleExpr>>()) {
			_case_begin_4395896112:;
			{
				jule::Ptr<_1b7509a90_TupleExpr> _15917_tup = _15625_m.operator jule::Ptr<_1b7509a90_TupleExpr>();
				jule::Slice<jule::Any> _16017_models = jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_15917_tup))._field_expr.len()));
				{
					auto &expr = (*(_15917_tup))._field_expr;
					auto it = expr.begin();
					_iter_begin_4395899712:;
					if (it != expr.end()) {
						jule::Ptr<_1b7509a90_Expr> _1a6bc3e29_expr = *it;
						{
							_16017_models = jule::alloc_for_append(_16017_models,1);_16017_models.__push((*(_1a6bc3e29_expr))._field_kind);
						}
						_iter_next_4395899712:;
						++it;
						goto _iter_begin_4395899712;
					}
					_iter_end_4395899712:;
				}
				return _16017_models;
			}
		}
		else {
			_case_begin_4395894832:;
			{
				return jule::Slice<jule::Any>({_15625_m});
			}
		}
		_match_end_4395894752:;
	}
}



inline jule::Bool _1a6bc3e29_check_mut(jule::Ptr<_1a7002752_Sema>& _17119_s,jule::Ptr<_1a8b431d7_Data>& _17130_left,jule::Ptr<_1a8b431d7_Data> _17147_right,_1b7553d92_Token _17161_error_token) {
	jule::Bool _17183_ok = jule::Bool();
	{
		
		if ((!((*(_17130_left))._field_mutable))) {
			_case_begin_4395906352:;
			{
				(*(_17119_s))._method_push_err(_17161_error_token,jule::Str("cannot assign to immutable define", 33),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else if (((_17147_right != nullptr) && (!((*(_17147_right))._field_mutable))) && (*((*(_17147_right))._field_kind))._method_mutable()) {
			_case_begin_4395906560:;
			{
				(*(_17119_s))._method_push_err(_17161_error_token,jule::Str("cannot assign mutable type used immutable define to mutable define", 66),jule::Slice<jule::Any>());
				_17183_ok = false;
				return _17183_ok;
			}
		}
		else {
			_case_begin_4395904896:;
			{
				_17183_ok = true;
				return _17183_ok;
			}
		}
		_match_end_4395904720:;
	}
}



inline jule::Bool _1a6bc3e29_check_assign(jule::Ptr<_1a7002752_Sema>& _18622_s,jule::Ptr<_1a8b431d7_Data>& _18637_left,jule::Ptr<_1a8b431d7_Data> _18654_right,_1b7553d92_Token _18668_error_token) {
	jule::Bool _18690_ok = jule::Bool();
	jule::Ptr<_1a691a500_FnIns> _1879_f = (*((*(_18637_left))._field_kind))._method_fnc();
	if (((_1879_f != nullptr) && ((*(_1879_f))._field_decl != nullptr)) && (*((*(_1879_f))._field_decl))._field_global) {
		(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("type is not support assignment", 30),jule::Slice<jule::Any>());
		_18690_ok = false;
		return _18690_ok;
	}
	{
		
		if ((*(_18637_left))._method_is_const()) {
			_case_begin_4395926048:;
			{
				(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("constants is can't assign", 25),jule::Slice<jule::Any>());
				(*(_18622_s))._method_push_suggestion(jule::Str("remove constant qualifer if you need to assign", 46),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!((*(_18637_left))._field_lvalue))) {
			_case_begin_4395926240:;
			{
				(*(_18622_s))._method_push_err(_18668_error_token,jule::Str("invalid expression: expected lvalue for assignment", 50),jule::Slice<jule::Any>());
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else if ((!(_1a6bc3e29_check_mut(_18622_s,_18637_left,_18654_right,_18668_error_token)))) {
			_case_begin_4395926336:;
			{
				_18690_ok = false;
				return _18690_ok;
			}
		}
		else {
			_case_begin_4395924640:;
			{
				_18690_ok = true;
				return _18690_ok;
			}
		}
		_match_end_4395924416:;
	}
}



inline jule::Bool _1a6bc3e29_is_valid_ast_st_for_next_st(jule::Any& _21137_n) {
	{
		auto &_match_expr{ _21137_n };
		
		if (_match_expr.type_is<jule::Ptr<_1b7509a90_AssignSt>>()) {
			_case_begin_4395935632:;
			{
				return (!((*(_21137_n.operator jule::Ptr<_1b7509a90_AssignSt>()))._field_declarative));
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7509a90_FnCallExpr>>() || _match_expr.type_is<jule::Ptr<_1b7509a90_Expr>>()) {
			_case_begin_4395935728:;
			{
				return true;
			}
		}
		else {
			_case_begin_4395936384:;
			{
				return false;
			}
		}
		_match_end_4395936096:;
	}
}



inline jule::Bool _1a6bc3e29_is_valid_st_for_next_st(jule::Any& _22529_st) {
	{
		auto &_match_expr{ _22529_st };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_FnCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a6bc3e29_Postfix>>() || _match_expr.type_is<jule::Ptr<_1a6bc3e29_Assign>>() || _match_expr.type_is<jule::Ptr<_1a6bc3e29_MultiAssign>>()) {
			_case_begin_4395941792:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
			_case_begin_4395941888:;
			{
				{
					auto &_match_expr{ (*(_22529_st.operator jule::Ptr<_1a8b431d7_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_FnCallExprModel>>()) {
						_case_begin_4395950848:;
						{
							return true;
						}
					}
					else {
						_case_begin_4395949408:;
						{
							return false;
						}
					}
					_match_end_4395949328:;
				}
			}
		}
		else {
			_case_begin_4395940080:;
			{
				return false;
			}
		}
		_match_end_4395940576:;
	}
}



inline jule::Bool _1a6bc3e29_st_is_def(jule::Any& _24415_st) {
	{
		auto &_match_expr{ _24415_st };
		
		if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4395948128:;
			{
				return true;
			}
		}
		else {
			_case_begin_4395951824:;
			{
				return false;
			}
		}
		_match_end_4395951744:;
	}
}



inline jule::Ptr<_1a7003e4b_Var> _1a6e9a574_find_var_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _4129_files,jule::Str _4152_ident,jule::Bool _4164_cpp_linked) {
	{
		auto &expr = _4129_files;
		auto it = expr.begin();
		_iter_begin_4395953504:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a6e9a574_f = *it;
			{
				jule::Ptr<_1a7003e4b_Var> _4317_v = (*(_1a6e9a574_f))._method_find_var(_4152_ident,_4164_cpp_linked);
				if (_4317_v != nullptr) {
					return _4317_v;
				}
			}
			_iter_next_4395953504:;
			++it;
			goto _iter_begin_4395953504;
		}
		_iter_end_4395953504:;
	}
	return nullptr;
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a6e9a574_find_type_alias_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _5336_files,jule::Str _5359_ident,jule::Bool _5371_cpp_linked) {
	{
		auto &expr = _5336_files;
		auto it = expr.begin();
		_iter_begin_4395958992:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a6e9a574_f = *it;
			{
				jule::Ptr<_1a6a19a50_TypeAlias> _5517_ta = (*(_1a6e9a574_f))._method_find_type_alias(_5359_ident,_5371_cpp_linked);
				if (_5517_ta != nullptr) {
					return _5517_ta;
				}
			}
			_iter_next_4395958992:;
			++it;
			goto _iter_begin_4395958992;
		}
		_iter_end_4395958992:;
	}
	return nullptr;
}



inline jule::Ptr<_1b7905331_Struct> _1a6e9a574_find_struct_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _6532_files,jule::Str _6555_ident,jule::Bool _6567_cpp_linked) {
	{
		auto &expr = _6532_files;
		auto it = expr.begin();
		_iter_begin_4395965264:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a6e9a574_f = *it;
			{
				jule::Ptr<_1b7905331_Struct> _6717_s = (*(_1a6e9a574_f))._method_find_struct(_6555_ident,_6567_cpp_linked);
				if (_6717_s != nullptr) {
					return _6717_s;
				}
			}
			_iter_next_4395965264:;
			++it;
			goto _iter_begin_4395965264;
		}
		_iter_end_4395965264:;
	}
	return nullptr;
}



inline jule::Ptr<_1a691a500_Fn> _1a6e9a574_find_fn_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _7728_files,jule::Str _7751_ident,jule::Bool _7763_cpp_linked) {
	{
		auto &expr = _7728_files;
		auto it = expr.begin();
		_iter_begin_4395971536:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a6e9a574_file = *it;
			{
				jule::Ptr<_1a691a500_Fn> _7917_f = (*(_1a6e9a574_file))._method_find_fn(_7751_ident,_7763_cpp_linked);
				if (_7917_f != nullptr) {
					return _7917_f;
				}
			}
			_iter_next_4395971536:;
			++it;
			goto _iter_begin_4395971536;
		}
		_iter_end_4395971536:;
	}
	return nullptr;
}



inline jule::Ptr<_1b76b472d_Trait> _1a6e9a574_find_trait_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _8931_files,jule::Str _8954_ident) {
	{
		auto &expr = _8931_files;
		auto it = expr.begin();
		_iter_begin_4395977296:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a6e9a574_f = *it;
			{
				jule::Ptr<_1b76b472d_Trait> _9117_t = (*(_1a6e9a574_f))._method_find_trait(_8954_ident);
				if (_9117_t != nullptr) {
					return _9117_t;
				}
			}
			_iter_next_4395977296:;
			++it;
			goto _iter_begin_4395977296;
		}
		_iter_end_4395977296:;
	}
	return nullptr;
}



inline jule::Ptr<_1a6bb9150_Enum> _1a6e9a574_find_enum_in_package(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _10130_files,jule::Str _10153_ident) {
	{
		auto &expr = _10130_files;
		auto it = expr.begin();
		_iter_begin_4395982560:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a6e9a574_f = *it;
			{
				jule::Ptr<_1a6bb9150_Enum> _10317_e = (*(_1a6e9a574_f))._method_find_enum(_10153_ident);
				if (_10317_e != nullptr) {
					return _10317_e;
				}
			}
			_iter_next_4395982560:;
			++it;
			goto _iter_begin_4395982560;
		}
		_iter_end_4395982560:;
	}
	return nullptr;
}



inline jule::Bool _1a6e9a574_is_std_package(jule::Str _32219_f,jule::Str _32227_p) {
	return _1cea16edb_has_prefix(_32219_f,_1ce9be05e_join(jule::Slice<jule::Str>({_1b69ce708_PATH_STDLIB,_32227_p})));
}



inline jule::Bool _1a7002752_is_valid_model_for_ref(jule::Any& _1232_m) {
	{
		auto &_match_expr{ _1232_m };
		
		if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4395992704:;
			{
				return true;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>>()) {
			_case_begin_4395992800:;
			{
				jule::Ptr<_1a69b8d2e_StructSubIdentExprModel> _1817_model = _1232_m.operator jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>();
				return _1a7002752_is_valid_model_for_ref((*(_1817_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel>>()) {
			_case_begin_4395991664:;
			{
				jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel> _2217_model = _1232_m.operator jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel>();
				return _1a7002752_is_valid_model_for_ref((*(_2217_model))._field_expr);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_UnaryExprModel>>()) {
			_case_begin_4395991760:;
			{
				jule::Ptr<_1a69b8d2e_UnaryExprModel> _2617_unary = _1232_m.operator jule::Ptr<_1a69b8d2e_UnaryExprModel>();
				if ((*(_2617_unary))._field_op._field_kind != jule::Str("*", 1)) {
					return false;
				}
				if ((*((*((*(_2617_unary))._field_expr))._field_kind))._method_ptr() != nullptr) {
					return true;
				}
				if ((*((*((*(_2617_unary))._field_expr))._field_kind))._method_sptr() == nullptr) {
					return false;
				}
				return _1a7002752_is_valid_model_for_ref((*((*(_2617_unary))._field_expr))._field_model);
			}
		}
		else {
			_case_begin_4395988448:;
			{
				return false;
			}
		}
		_match_end_4395988368:;
	}
}



inline _1b6986b22_Log _1a7002752_compiler_err(_1b7553d92_Token& _4818_token,jule::Bool _4832_line,jule::Str _4844_fmt,jule::Slice<jule::Any> _4857_args) {
	_1b6986b22_Log _4913_log = _1b6986b22_Log(1LLU,_4818_token._field_row,_4818_token._field_column,(*(_4818_token._field_file))._method_path(),_1b6986b22_logf(_4844_fmt,_4857_args),jule::Str(),jule::Str());
	if (_4832_line) {
		_4913_log._field_line=(*(_4818_token._field_file))._method_get_row(_4818_token._field_row);
	}
	return _4913_log;
}



inline jule::Bool _1a7002752_imp_is_lookupable(jule::Ptr<_1a6e9a574_ImportInfo>& _6223_i,jule::Str _6239_ident) {
	if ((*(_6223_i))._field_cpp_linked) {
		return false;
	}
	if ((!((*(_6223_i))._field_import_all))) {
		if ((*(_6223_i))._field_selected.len() > 0LL) {
			return (*(_6223_i))._method_exist_ident(_6239_ident);
		}
	}
	return (*(_6223_i))._field_import_all;
}



inline jule::Slice<jule::Ptr<_1a7003e4b_Var>> _1a7002752_build_ret_vars(jule::Ptr<_1a691a500_FnIns>& _7524_f) {
	if ((*((*(_7524_f))._field_decl))._method_is_void() || ((*(_7524_f))._field_result == nullptr)) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _8013_vars = nullptr;
	jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _8113_types = _1a700327a_get_result_types((*(_7524_f))._field_result);
	{
		auto &expr = (*((*((*(_7524_f))._field_decl))._field_result))._field_idents;
		auto it = expr.begin();
		_iter_begin_4396032608:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			_1b7553d92_Token _1a7002752_ident = *it;
			{
				if (_1b7553d92_is_ignore_ident(_1a7002752_ident._field_kind)) {
					goto _iter_next_4396032608;
				}
				jule::Ptr<_1a7003e4b_Var> _8717_v = jule::new_struct<_1a7003e4b_Var>(new( std::nothrow ) _1a7003e4b_Var((*(_7524_f))._field_scope,_1a7002752_ident,_1a7002752_ident._field_kind,jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),jule::Bool(),jule::Str(),jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),_8113_types[_1a7002752_i])),jule::new_struct<_1a8b431d7_Value>(new( std::nothrow ) _1a8b431d7_Value(jule::Ptr<_1b7509a90_Expr>(),jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data()))),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1a7003e4b_IterRelation>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>()));
				_8013_vars = jule::alloc_for_append(_8013_vars,1);_8013_vars.__push(_8717_v);
			}
			_iter_next_4396032608:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4396032608;
		}
		_iter_end_4396032608:;
	}
	return _8013_vars;
}



inline jule::Slice<jule::Ptr<_1a7003e4b_Var>> _1a7002752_build_param_vars(jule::Ptr<_1a691a500_FnIns>& _10426_f) {
	if ((*(_10426_f))._field_params.len() == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1a7003e4b_Var>> _10913_vars = jule::Slice<jule::Ptr<_1a7003e4b_Var>>::alloc(0LL,static_cast<jule::I64>((*(_10426_f))._field_params.len()));
	{
		auto &expr = (*(_10426_f))._field_params;
		auto it = expr.begin();
		_iter_begin_4396042992:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_ParamIns> _1a7002752_p = *it;
			{
				jule::Ptr<_1a7003e4b_Var> _11117_v = jule::new_struct<_1a7003e4b_Var>(new( std::nothrow ) _1a7003e4b_Var((*(_10426_f))._field_scope,(*((*(_1a7002752_p))._field_decl))._field_token,(*((*(_1a7002752_p))._field_decl))._field_ident,jule::Bool(),jule::Bool(),(*((*(_1a7002752_p))._field_decl))._field_mutable,jule::Bool(),true,jule::Bool(),(*((*(_1a7002752_p))._field_decl))._field_reference,jule::Str(),jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol()),jule::new_struct<_1a8b431d7_Value>(new( std::nothrow ) _1a8b431d7_Value(jule::Ptr<_1b7509a90_Expr>(),jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data()))),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1a7003e4b_IterRelation>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>()));
				{
					
					if ((*((*(_1a7002752_p))._field_decl))._method_is_self()) {
						_case_begin_4396051760:;
						{
							(*((*(_11117_v))._field_kind))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),false,(*(_10426_f))._field_owner));
							(*(_11117_v))._field_reference=true;
							if ((*((*(_1a7002752_p))._field_decl))._method_is_ref()) {
								(*(_11117_v))._field_ident=(*(_11117_v))._field_ident.slice(1LL);
								(*((*((*(_11117_v))._field_kind))._field_kind))._field_kind=jule::new_struct_ptr<_1a6a19a50_Sptr>(new( std::nothrow ) _1a6a19a50_Sptr(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind((*((*((*(_11117_v))._field_kind))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*((*(_11117_v))._field_kind))._field_kind))._field_kind))));
							}
						}
					}
					else if ((*((*(_1a7002752_p))._field_decl))._field_variadic) {
						_case_begin_4396051264:;
						{
							(*((*(_11117_v))._field_kind))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),false,jule::new_struct_ptr<_1a6a19a50_Slc>(new( std::nothrow ) _1a6a19a50_Slc(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind((*((*(_1a7002752_p))._field_kind))._field_cpp_ident,jule::Bool(),jule::Bool(),(*((*(_1a7002752_p))._field_kind))._field_kind))))));
						}
					}
					else {
						_case_begin_4396050960:;
						{
							(*((*(_11117_v))._field_kind))._field_kind=(*(_1a7002752_p))._field_kind;
						}
					}
					_match_end_4396050848:;
				}
				_10913_vars = jule::alloc_for_append(_10913_vars,1);_10913_vars.__push(_11117_v);
			}
			_iter_next_4396042992:;
			++it;
			goto _iter_begin_4396042992;
		}
		_iter_end_4396042992:;
	}
	return _10913_vars;
}



inline jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _1a7002752_build_generic_type_aliases(jule::Ptr<_1a691a500_FnIns>& _16336_f) {
	jule::I64 _16413_size = (*(_16336_f))._field_generics.len();
	if ((*((*(_16336_f))._field_decl))._field_owner != nullptr) {
		_16413_size+=static_cast<jule::I64>((*((*((*(_16336_f))._field_decl))._field_owner))._field_generics.len());
	}
	if (_16413_size == 0LL) {
		return nullptr;
	}
	jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>> _17313_aliases = jule::Slice<jule::Ptr<_1a6a19a50_TypeAlias>>::alloc(0LL,_16413_size);
	{
		auto &expr = (*(_16336_f))._field_generics;
		auto it = expr.begin();
		_iter_begin_4396075472:;
		if (it != expr.end()) {
			jule::Int _1a7002752_i = it - expr.begin();
			jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_g = *it;
			{
				jule::Ptr<_1b7509a90_GenericDecl> _17617_decl = (*((*(_16336_f))._field_decl))._field_generics[_1a7002752_i];
				_17313_aliases = jule::alloc_for_append(_17313_aliases,1);_17313_aliases.__push(jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias((*((*(_16336_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_17617_decl))._field_token,(*(_17617_decl))._field_ident,jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),_1a7002752_g)),jule::Str(),jule::Slice<jule::Any>())));
			}
			_iter_next_4396075472:;
			++it;
			_1a7002752_i++;
			goto _iter_begin_4396075472;
		}
		_iter_end_4396075472:;
	}
	if ((*((*(_16336_f))._field_decl))._field_owner != nullptr) {
		jule::Ptr<_1b7905331_StructIns> _18817_owner = (*(_16336_f))._field_owner;
		{
			auto &expr = (*(_18817_owner))._field_generics;
			auto it = expr.begin();
			_iter_begin_4396080656:;
			if (it != expr.end()) {
				jule::Int _1a7002752_i = it - expr.begin();
				jule::Ptr<_1a6a19a50_TypeKind> _1a7002752_g = *it;
				{
					jule::Ptr<_1b7509a90_GenericDecl> _19021_decl = (*((*(_18817_owner))._field_decl))._field_generics[_1a7002752_i];
					_17313_aliases = jule::alloc_for_append(_17313_aliases,1);_17313_aliases.__push(jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias((*((*(_16336_f))._field_decl))._field_scope,jule::Bool(),jule::Bool(),true,true,(*(_19021_decl))._field_token,(*(_19021_decl))._field_ident,jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),_1a7002752_g)),jule::Str(),jule::Slice<jule::Any>())));
				}
				_iter_next_4396080656:;
				++it;
				_1a7002752_i++;
				goto _iter_begin_4396080656;
			}
			_iter_end_4396080656:;
		}
	}
	return _17313_aliases;
}



inline jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_find_file(jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>& _20519_files,jule::Ptr<_1b750c763_File>& _20543_handler) {
	{
		auto &expr = _20519_files;
		auto it = expr.begin();
		_iter_begin_4396079664:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a7002752_fl = *it;
			{
				if ((*(_1a7002752_fl))._field_file == _20543_handler) {
					return _1a7002752_fl;
				}
			}
			_iter_next_4396079664:;
			++it;
			goto _iter_begin_4396079664;
		}
		_iter_end_4396079664:;
	}
	return nullptr;
}



inline std::tuple<jule::Bool,jule::Bool> _1a7002752_conditional_has_ret(jule::Ptr<_1a6bc3e29_Conditional> _21428_c) {
	jule::Bool _21447_ok = jule::Bool();
	jule::Bool _21457_breaking = jule::Bool();
	jule::Bool _21513_breaked = false;
	{
		auto &expr = (*(_21428_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_4396096592:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bc3e29_If> _1a7002752_elif = *it;
			{
				if (_1a7002752_elif == nullptr) {
					_21447_ok = false;
					_21457_breaking = false;
					return std::make_tuple(_21447_ok,_21457_breaking);
				}
				std::tie(_21447_ok,std::ignore,_21457_breaking) = _1a7002752___has_ret((*(_1a7002752_elif))._field_scope);
				_21513_breaked=_21513_breaked || _21457_breaking;
				if ((!(_21447_ok))) {
					_21447_ok = false;
					_21457_breaking = _21513_breaked;
					return std::make_tuple(_21447_ok,_21457_breaking);
				}
			}
			_iter_next_4396096592:;
			++it;
			goto _iter_begin_4396096592;
		}
		_iter_end_4396096592:;
	}
	if ((*(_21428_c))._field_default == nullptr) {
		_21447_ok = false;
		_21457_breaking = _21513_breaked;
		return std::make_tuple(_21447_ok,_21457_breaking);
	}
	std::tie(_21447_ok,std::ignore,_21457_breaking) = _1a7002752___has_ret((*((*(_21428_c))._field_default))._field_scope);
	_21513_breaked=_21513_breaked || _21457_breaking;
	_21457_breaking = _21513_breaked;
	return std::make_tuple(_21447_ok,_21457_breaking);
}



inline jule::Bool _1a7002752_match_has_ret(jule::Ptr<_1a6bc3e29_Match> _23622_m) {
	if ((*(_23622_m))._field_default == nullptr) {
		return false;
	}
	jule::Bool _24113_ok = true;
	jule::Bool _24213_falled = false;
	jule::Bool _24313_breaked = false;
	{
		auto &expr = (*(_23622_m))._field_cases;
		auto it = expr.begin();
		_iter_begin_4396110896:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bc3e29_Case> _1a7002752_c = *it;
			{
				if (_1a7002752_c == nullptr) {
					return false;
				}
				std::tie(_24113_ok,_24213_falled,_24313_breaked) = _1a7002752___has_ret((*(_1a7002752_c))._field_scope);
				if (((!(_24113_ok)) && (!(_24213_falled))) || _24313_breaked) {
					return false;
				}
				{
					
					if ((!(_24113_ok))) {
						_case_begin_4396116368:;
						{
							if ((!(_24213_falled))) {
								return false;
							}
							goto _case_begin_4396116464;
						}
					}
					else if (_24213_falled) {
						_case_begin_4396116464:;
						{
							if ((*(_1a7002752_c))._field_next == nullptr) {
								return false;
							}
							goto _iter_next_4396110896;
						}
					}
					_match_end_4396115728:;
				}
				_24213_falled=false;
			}
			_iter_next_4396110896:;
			++it;
			goto _iter_begin_4396110896;
		}
		_iter_end_4396110896:;
	}
	return _1a7002752_has_ret((*((*(_23622_m))._field_default))._field_scope);
}



inline std::tuple<jule::Bool,jule::Bool,jule::Bool> _1a7002752___has_ret(jule::Ptr<_1a6bc3e29_Scope> _27218_s) {
	jule::Bool _27231_ok = jule::Bool();
	jule::Bool _27241_falled = jule::Bool();
	jule::Bool _27255_breaked = jule::Bool();
	if (_27218_s == nullptr) {
		_27231_ok = false;
		_27241_falled = false;
		_27255_breaked = false;
		return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
	}
	{
		auto &expr = (*(_27218_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_4396122880:;
		if (it != expr.end()) {
			jule::Any _1a7002752_st = *it;
			{
				{
					auto &_match_expr{ _1a7002752_st };
					
					if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_FallSt>>()) {
						_case_begin_4396126864:;
						{
							_27241_falled=true;
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_BreakSt>>()) {
						_case_begin_4396126976:;
						{
							_27231_ok = false;
							_27241_falled = false;
							_27255_breaked = true;
							return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ContSt>>()) {
						_case_begin_4396127088:;
						{
							_27231_ok = false;
							_27241_falled = false;
							_27255_breaked = true;
							return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_InfIter>>()) {
						_case_begin_4396127200:;
						{
							_27231_ok=_1a7002752_has_ret((*(_1a7002752_st.operator jule::Ptr<_1a6bc3e29_InfIter>()))._field_scope);
							if (_27231_ok) {
								_27231_ok = true;
								_27241_falled = false;
								_27255_breaked = false;
								return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_RetSt>>()) {
						_case_begin_4396127312:;
						{
							_27231_ok = true;
							return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Scope>>()) {
						_case_begin_4396127424:;
						{
							_27231_ok=_1a7002752_has_ret(_1a7002752_st.operator jule::Ptr<_1a6bc3e29_Scope>());
							if (_27231_ok) {
								_27231_ok = true;
								_27241_falled = false;
								_27255_breaked = false;
								return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
						_case_begin_4396127536:;
						{
							{
								auto &_match_expr{ (*(_1a7002752_st.operator jule::Ptr<_1a8b431d7_Data>()))._field_model };
								
								if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>>() || _match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>>()) {
									_case_begin_4396145216:;
									{
										_27231_ok = true;
										return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
									}
								}
								_match_end_4396145136:;
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Conditional>>()) {
						_case_begin_4396127648:;
						{
							std::tie(_27231_ok,_27255_breaked) = _1a7002752_conditional_has_ret(_1a7002752_st.operator jule::Ptr<_1a6bc3e29_Conditional>());
							if (_27231_ok) {
								_27231_ok = true;
								_27241_falled = false;
								_27255_breaked = false;
								return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
							}
							if (_27255_breaked) {
								_27231_ok = false;
								_27241_falled = false;
								return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
							}
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Match>>()) {
						_case_begin_4396127760:;
						{
							_27231_ok=_1a7002752_match_has_ret(_1a7002752_st.operator jule::Ptr<_1a6bc3e29_Match>());
							if (_27231_ok) {
								_27231_ok = true;
								_27241_falled = false;
								_27255_breaked = false;
								return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
							}
						}
					}
					_match_end_4396126400:;
				}
			}
			_iter_next_4396122880:;
			++it;
			goto _iter_begin_4396122880;
		}
		_iter_end_4396122880:;
	}
	_27231_ok = false;
	return std::make_tuple(_27231_ok,_27241_falled,_27255_breaked);
}



inline jule::Bool _1a7002752_has_ret(jule::Ptr<_1a6bc3e29_Scope> _33116_s) {
	jule::Bool _33210_ok;
	std::tie(_33210_ok,std::ignore,std::ignore) = _1a7002752___has_ret(_33116_s);
	return _33210_ok;
}



inline void _1a7002752_push_suggestion(_1b6986b22_Log* _33631_log,jule::Str _33642_fmt,jule::Slice<jule::Any> _33655_args) {
	(*(_33631_log))._field_suggestion=_1b6986b22_logf(_33642_fmt,_33655_args);
}



inline jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>> _1a700327a_get_result_types(jule::Ptr<_1a6a19a50_TypeKind>& _2626_result) {
	{
		
		if (_2626_result == nullptr) {
			_case_begin_4396163088:;
			{
				return nullptr;
			}
		}
		else if ((*(_2626_result))._method_tup() == nullptr) {
			_case_begin_4396162720:;
			{
				return jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>({_2626_result});
			}
		}
		else {
			_case_begin_4396161712:;
			{
				return (*((*(_2626_result))._method_tup()))._field_types;
			}
		}
		_match_end_4396159584:;
	}
}



inline jule::Bool _1a700327a_trait_has_reference_receiver(jule::Ptr<_1b76b472d_Trait>& _3934_t) {
	{
		auto &expr = (*(_3934_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_4396167488:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> &_1a700327a_f = *it;
			{
				if ((*(_1a700327a_f))._field_statically) {
					goto _iter_next_4396167488;
				}
				jule::Ptr<_1a691a500_Param> _4613_p = (*(_1a700327a_f))._field_params[0LL];
				if ((*(_4613_p))._method_is_ref() && (*(_4613_p))._method_is_self()) {
					return true;
				}
			}
			_iter_next_4396167488:;
			++it;
			goto _iter_begin_4396167488;
		}
		_iter_end_4396167488:;
	}
	return false;
}



inline jule::Bool _1a700327a_float_assignable(jule::Str _5421_kind,jule::Ptr<_1a8b431d7_Data>& _5433_d) {
	jule::Str _559_value = _211ca7535_fmt_float(static_cast<jule::F64>((*((*(_5433_d))._field_constant))._method_as_f64()),'g',-1LL,64LL);
	return _1a90e11ac_check_bit_float(_559_value,static_cast<jule::Int>(_1a90e11ac_bitsize_of(_5421_kind)));
}



inline jule::Bool _1a700327a_sig_assignable(jule::Str _5919_kind,jule::Ptr<_1a8b431d7_Data>& _5931_d) {
	jule::F64 _609_min = _1b6dd88c0_min(_5919_kind);
	jule::F64 _619_max = _1b6dd88c0_max(_5919_kind);
	{
		
		if ((*((*(_5931_d))._field_constant))._method_is_f64()) {
			_case_begin_4396181392:;
			{
				jule::F64 _6513_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_f64());
				jule::F64 _6614_i;
				jule::F64 _6617_frac;
				std::tie(_6614_i,_6617_frac) = _1b6eb7619_modf(_6513_x);
				if (_6617_frac != 0LL) {
					return false;
				}
				return (_6614_i >= _609_min) && (_6614_i <= _619_max);
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_u64()) {
			_case_begin_4396181504:;
			{
				jule::F64 _7313_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_u64());
				if (_7313_x <= _619_max) {
					return true;
				}
			}
		}
		else if ((*((*(_5931_d))._field_constant))._method_is_i64()) {
			_case_begin_4396181616:;
			{
				jule::F64 _7913_x = static_cast<jule::F64>((*((*(_5931_d))._field_constant))._method_read_i64());
				return (_609_min <= _7913_x) && (_7913_x <= _619_max);
			}
		}
		_match_end_4396181152:;
	}
	return false;
}



inline jule::Bool _1a700327a_unsig_assignable(jule::Str _8621_kind,jule::Ptr<_1a8b431d7_Data>& _8633_d) {
	jule::F64 _879_max = _1b6dd88c0_max(_8621_kind);
	if ((*(_8633_d))._field_is_rune && (_8621_kind == jule::Str("u8", 2))) {
		return _1a91ba31e_is_ascii(static_cast<jule::I32>(static_cast<jule::I32>((*((*(_8633_d))._field_constant))._method_read_i64())));
	}
	{
		
		if ((*((*(_8633_d))._field_constant))._method_is_f64()) {
			_case_begin_4396202736:;
			{
				jule::F64 _9413_x = (*((*(_8633_d))._field_constant))._method_read_f64();
				if (_9413_x < 0LL) {
					return false;
				}
				jule::F64 _9914_i;
				jule::F64 _9917_frac;
				std::tie(_9914_i,_9917_frac) = _1b6eb7619_modf(_9413_x);
				if (_9917_frac != 0LL) {
					return false;
				}
				return _9914_i <= _879_max;
			}
		}
		else if ((*((*(_8633_d))._field_constant))._method_is_u64()) {
			_case_begin_4396202832:;
			{
				jule::F64 _10613_x = static_cast<jule::F64>((*((*(_8633_d))._field_constant))._method_read_u64());
				if (_10613_x <= _879_max) {
					return true;
				}
			}
		}
		else if ((*((*(_8633_d))._field_constant))._method_is_i64()) {
			_case_begin_4396202928:;
			{
				jule::F64 _11213_x = static_cast<jule::F64>((*((*(_8633_d))._field_constant))._method_read_i64());
				return (0LL <= _11213_x) && (_11213_x <= _879_max);
			}
		}
		_match_end_4396199584:;
	}
	return false;
}



inline jule::Bool _1a700327a_int_assignable(jule::Str _11919_kind,jule::Ptr<_1a8b431d7_Data>& _11931_d) {
	{
		
		if (_1a9133243_is_sig_int(_11919_kind)) {
			_case_begin_4396221584:;
			{
				return _1a700327a_sig_assignable(_11919_kind,_11931_d);
			}
		}
		else if (_1a9133243_is_unsig_int(_11919_kind)) {
			_case_begin_4396221680:;
			{
				return _1a700327a_unsig_assignable(_11919_kind,_11931_d);
			}
		}
		else {
			_case_begin_4396219920:;
			{
				return false;
			}
		}
		_match_end_4396218064:;
	}
}



inline jule::Ptr<_1b7509a90_Directive> _1a8b431d7_find_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>& _5124_directives,jule::Str _5166_d) {
	{
		auto &expr = _5124_directives;
		auto it = expr.begin();
		_iter_begin_4396222128:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> _1a8b431d7_dr = *it;
			{
				if ((*(_1a8b431d7_dr))._field_tag._field_kind == _5166_d) {
					return _1a8b431d7_dr;
				}
			}
			_iter_next_4396222128:;
			++it;
			goto _iter_begin_4396222128;
		}
		_iter_end_4396222128:;
	}
	return nullptr;
}



inline jule::Any _1a8b431d7_find_builtins_import(jule::Str _6025_ident,jule::Ptr<_1a6e9a574_ImportInfo> _6037_imp) {
	return _1a90790e0_find_package_builtin_def((*(_6037_imp))._field_link_path,_6025_ident);
}



inline void _1a8b431d7_make_struct_lit_alloc(jule::Ptr<_1a8b431d7_Data>& _6431_d,jule::Ptr<_1a69b8d2e_StructLitExprModel>& _6446_lit) {
	(*(_6431_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a6a19a50_Sptr>(new( std::nothrow ) _1a6a19a50_Sptr(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),(*(_6446_lit))._field_strct))))));
	(*(_6431_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_AllocStructLitExprModel>(new( std::nothrow ) _1a69b8d2e_AllocStructLitExprModel(_6446_lit)));
}



inline jule::Ptr<_1a7003e4b_Var> _1a8b431d7_build_error_var(jule::Ptr<_1a6bc3e29_Scope>& _7625_s,jule::Ptr<_1b7509a90_FnCallExpr>& _7641_fc) {
	return jule::new_struct<_1a7003e4b_Var>(new( std::nothrow ) _1a7003e4b_Var(_7625_s,(*(_7641_fc))._field_token,jule::Str("error", 5),jule::Bool(),jule::Bool(),true,jule::Bool(),true,jule::Bool(),false,jule::Str(),jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("any", 3)))))),jule::new_struct<_1a8b431d7_Value>(new( std::nothrow ) _1a8b431d7_Value(jule::Ptr<_1b7509a90_Expr>(),jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data()))),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Slice<jule::Ptr<_1b7509a90_Directive>>(),jule::Ptr<_1a7003e4b_IterRelation>(),jule::Slice<jule::Ptr<_1a7003e4b_Var>>()));
}



inline jule::Any _1a8b431d7_find_builtins_sema(jule::Str _9523_ident,jule::Ptr<_1a7002752_Sema> _9539_s) {
	{
		auto &expr = (*((*(_9539_s))._field_file))._field_imports;
		auto it = expr.begin();
		_iter_begin_4396240720:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a8b431d7_imp = *it;
			{
				if ((*(_1a8b431d7_imp))._field_import_all || (*(_1a8b431d7_imp))._method_exist_ident(_9523_ident)) {
					jule::Any _9821_def = _1a8b431d7_find_builtins_import(_9523_ident,_1a8b431d7_imp);
					if (_9821_def != nullptr) {
						return _9821_def;
					}
				}
			}
			_iter_next_4396240720:;
			++it;
			goto _iter_begin_4396240720;
		}
		_iter_end_4396240720:;
	}
	jule::Str _10613_ppath = (*((*((*(_9539_s))._field_file))._field_file))._method_dir();
	if (_1cea16edb_has_prefix(_10613_ppath,_1b69ce708_PATH_STDLIB)) {
		_10613_ppath=_10613_ppath.slice(_1b69ce708_PATH_STDLIB.len());
		_10613_ppath=jule::Str("std", 3) + _1cea16edb_replace(_10613_ppath,static_cast<jule::Str>(47LL),jule::Str("::", 2),-1LL);
		return _1a90790e0_find_package_builtin_def(_10613_ppath,_9523_ident);
	}
	return jule::Any(nullptr);
}



inline jule::Bool _1a8b431d7_is_ok_for_shifting(jule::Ptr<_1a8b431d7_Data>& _12028_d) {
	jule::Ptr<_1a6a19a50_Prim> _1219_prim = (*((*(_12028_d))._field_kind))._method_prim();
	if ((_1219_prim == nullptr) || (!(_1a9133243_is_int((*(_1219_prim))._method_to_str())))) {
		return false;
	}
	if ((!((*(_12028_d))._method_is_const()))) {
		return true;
	}
	{
		
		if ((*((*(_12028_d))._field_constant))._method_is_i64()) {
			_case_begin_4396262320:;
			{
				return (*((*(_12028_d))._field_constant))._method_read_i64() >= 0LL;
			}
		}
		else if ((*((*(_12028_d))._field_constant))._method_is_u64()) {
			_case_begin_4396262416:;
			{
				return true;
			}
		}
		else {
			_case_begin_4396259600:;
			{
				return false;
			}
		}
		_match_end_4396259488:;
	}
}



inline jule::Bool _1a8b431d7_is_instanced_struct(jule::Ptr<_1b7905331_StructIns> _13724_s) {
	return (*((*(_13724_s))._field_decl))._field_generics.len() == (*(_13724_s))._field_generics.len();
}



inline jule::Bool _1a8b431d7_is_ptr_arithmetic_compatible_int(jule::Ptr<_1a8b431d7_Data>& _14142_d) {
	if ((*(_14142_d))._method_is_const()) {
		return _1a700327a_int_assignable(jule::Str("int", 3),_14142_d);
	}
	_1a700327a_TypeCompatibilityChecker _14513_tcc = _1a700327a_TypeCompatibilityChecker(jule::Ptr<_1a7002752_Sema>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3)))),(*(_14142_d))._field_kind,_1b7553d92_Token());
	return _14513_tcc._method_check();
}



inline void _1a8b431d7_normalize_bitsize(jule::Ptr<_1a8b431d7_Data>& _15227_d) {
	if ((!((*(_15227_d))._method_is_const()))) {
		return;
	}
	jule::Str _15713_kind = jule::Str();
	{
		
		if ((*((*(_15227_d))._field_constant))._method_is_i64()) {
			_case_begin_4396281488:;
			{
				jule::I64 _16013_x = (*((*(_15227_d))._field_constant))._method_read_i64();
				_15713_kind=_1a90e11ac_int_from_bits(static_cast<jule::U64>(_1a90e11ac_bitsize_of_int(_16013_x)));
			}
		}
		else if ((*((*(_15227_d))._field_constant))._method_is_u64()) {
			_case_begin_4396281584:;
			{
				jule::U64 _16413_x = (*((*(_15227_d))._field_constant))._method_read_u64();
				_15713_kind=_1a90e11ac_uint_from_bits(static_cast<jule::U64>(_1a90e11ac_bitsize_of_uint(_16413_x)));
			}
		}
		else {
			_case_begin_4396280496:;
			{
				return;
			}
		}
		_match_end_4396280256:;
	}
	if ((*((*(_15227_d))._field_kind))._method_enm() != nullptr) {
		return;
	}
	(*((*(_15227_d))._field_kind))._field_kind=_1a6a19a50_build_prim_type(_15713_kind);
}



inline void _1a8b431d7_normalize_type(jule::Ptr<_1a8b431d7_Data>& _17924_d) {
	{
		
		if (_1a700327a_int_assignable(jule::Str("int", 3),_17924_d)) {
			_case_begin_4396294176:;
			{
				(*((*(_17924_d))._field_kind))._field_kind=_1a6a19a50_build_prim_type(jule::Str("int", 3));
				(*((*(_17924_d))._field_constant))._method_set_i64(static_cast<jule::I64>(static_cast<jule::I64>((*((*(_17924_d))._field_constant))._method_as_f64())));
			}
		}
		else if (_1a700327a_int_assignable(jule::Str("uint", 4),_17924_d)) {
			_case_begin_4396294288:;
			{
				(*((*(_17924_d))._field_kind))._field_kind=_1a6a19a50_build_prim_type(jule::Str("uint", 4));
				(*((*(_17924_d))._field_constant))._method_set_u64(static_cast<jule::U64>(static_cast<jule::U64>((*((*(_17924_d))._field_constant))._method_as_f64())));
			}
		}
		_match_end_4396293952:;
	}
}



inline void _1a8b431d7_fit_type(jule::Ptr<_1a8b431d7_Data>& _19218_d) {
	if ((!((*(_19218_d))._method_is_const()))) {
		return;
	}
	jule::Ptr<_1a6a19a50_Prim> _1979_p = (*((*(_19218_d))._field_kind))._method_prim();
	if (_1979_p == nullptr) {
		return;
	}
	jule::Str _2029_k = (*(_1979_p))._field_kind;
	{
		
		if (_1a9133243_is_float(_2029_k)) {
			_case_begin_4396310080:;
			{
				(*((*(_19218_d))._field_constant))._method_set_f64(static_cast<jule::F64>((*((*(_19218_d))._field_constant))._method_as_f64()));
			}
		}
		else if (_1a9133243_is_sig_int(_2029_k)) {
			_case_begin_4396310176:;
			{
				(*((*(_19218_d))._field_constant))._method_set_i64(static_cast<jule::I64>((*((*(_19218_d))._field_constant))._method_as_i64()));
			}
		}
		else if (_1a9133243_is_unsig_int(_2029_k)) {
			_case_begin_4396310288:;
			{
				(*((*(_19218_d))._field_constant))._method_set_u64(static_cast<jule::U64>((*((*(_19218_d))._field_constant))._method_as_u64()));
			}
		}
		_match_end_4396309888:;
	}
}



inline void _1a8b431d7_apply_cast_kind_model(jule::Ptr<_1a8b431d7_Data>& _21031_d) {
	(*(_21031_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_CastingExprModel>(new( std::nothrow ) _1a69b8d2e_CastingExprModel(_1b7553d92_Token(),(*(_21031_d))._field_model,(*(_21031_d))._field_cast_kind,(*(_21031_d))._field_kind)));
}



inline void _1a8b431d7_apply_cast_kind(jule::Ptr<_1a8b431d7_Data>& _21825_d) {
	if ((*(_21825_d))._field_cast_kind == nullptr) {
		return;
	}
	_1a8b431d7_apply_cast_kind_model(_21825_d);
	(*(_21825_d))._field_kind=(*(_21825_d))._field_cast_kind;
	(*(_21825_d))._field_cast_kind=nullptr;
}



inline jule::Ptr<_1a8b431d7_Data> _1a8b431d7_build_void_data(void) {
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("void", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),false,jule::Bool(),false,jule::Bool(),jule::Any(),false,jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Str _1a8b431d7_check_data_for_integer_indexing(jule::Ptr<_1a8b431d7_Data>& _25841_d) {
	jule::Str _25853_err_fmt = jule::Str();
	if (_25841_d == nullptr) {
		_25853_err_fmt = jule::Str();
		return _25853_err_fmt;
	}
	{
		
		if ((*((*(_25841_d))._field_kind))._method_prim() == nullptr) {
			_case_begin_4396342224:;
			{
				_25853_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _25853_err_fmt;
			}
		}
		else if ((!(_1a9133243_is_int((*((*((*(_25841_d))._field_kind))._method_prim()))._method_to_str())))) {
			_case_begin_4396342336:;
			{
				_25853_err_fmt = jule::Str("type @ is invalid for indexing", 30);
				return _25853_err_fmt;
			}
		}
		else if ((*(_25841_d))._method_is_const()) {
			_case_begin_4396341472:;
			{
				if ((*((*(_25841_d))._field_constant))._method_as_f64() < 0LL) {
					_25853_err_fmt = jule::Str("overflow the limit of data-type", 31);
					return _25853_err_fmt;
				}
			}
		}
		else if ((*((*(_25841_d))._field_kind))._method_prim() == nullptr || (*(_25841_d))._method_is_const() || _1a90e11ac_real_kind_of((*((*((*(_25841_d))._field_kind))._method_prim()))._method_to_str()) != _1a90e11ac_real_kind_of(jule::Str("int", 3))) {
			_case_begin_4396341584:;
			{
				(*(_25841_d))._field_cast_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3))));
				_1a8b431d7_apply_cast_kind(_25841_d);
			}
		}
		_match_end_4396343008:;
	}
	_25853_err_fmt = jule::Str();
	return _25853_err_fmt;
}



inline jule::Bool _1a6a19a50_has_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>& _3323_directives,jule::Str _3354_tag) {
	{
		auto &expr = _3323_directives;
		auto it = expr.begin();
		_iter_begin_4396359232:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> _1a6a19a50_dr = *it;
			{
				if ((*(_1a6a19a50_dr))._field_tag._field_kind == _3354_tag) {
					return true;
				}
			}
			_iter_next_4396359232:;
			++it;
			goto _iter_begin_4396359232;
		}
		_iter_end_4396359232:;
	}
	return false;
}



inline jule::Bool _1a6a19a50_can_get_ptr(jule::Ptr<_1a8b431d7_Data>& _55721_d) {
	if ((!((*(_55721_d))._field_lvalue)) || (*(_55721_d))._method_is_const()) {
		return false;
	}
	{
		
		if (((*((*(_55721_d))._field_kind))._method_fnc() != nullptr) || ((*((*(_55721_d))._field_kind))._method_enm() != nullptr)) {
			_case_begin_4396366144:;
			{
				return false;
			}
		}
		else {
			_case_begin_4396364496:;
			{
				return true;
			}
		}
		_match_end_4396364416:;
	}
}



inline jule::Bool _1a6a19a50_is_valid_for_sptr_type(jule::Ptr<_1a6a19a50_TypeKind>& _57232_t) {
	jule::Ptr<_1b7905331_StructIns> _57313_s = (*(_57232_t))._method_strct();
	if (((_57313_s != nullptr) && ((*(_57313_s))._field_decl != nullptr)) && (*((*(_57313_s))._field_decl))._field_cpp_linked) {
		return false;
	}
	return true;
}



inline jule::Bool _1a6a19a50_is_valid_for_ref(jule::Ptr<_1a6a19a50_TypeKind>& _58126_t) {
	return (*(_58126_t))._method_fnc() == nullptr;
}



inline jule::Bool _1a6a19a50_is_builtin_str_convertable(jule::Ptr<_1a6a19a50_TypeKind>& _58436_t) {
	return ((!((*(_58436_t))._method_void())) && ((*(_58436_t))._method_fnc() == nullptr)) && ((*(_58436_t))._method_tup() == nullptr);
}



inline jule::Str _1a6a19a50_build_link_path_by_tokens(jule::Slice<_1b7553d92_Token>& _58831_tokens) {
	jule::Str _58913_s = _58831_tokens[0LL]._field_kind;
	{
		auto expr = _58831_tokens.slice(1LL);
		auto it = expr.begin();
		_iter_begin_4396382944:;
		if (it != expr.end()) {
			_1b7553d92_Token &_1a6a19a50_token = *it;
			{
				_58913_s+=jule::Str("::", 2);
				_58913_s+=_1a6a19a50_token._field_kind;
			}
			_iter_next_4396382944:;
			++it;
			goto _iter_begin_4396382944;
		}
		_iter_end_4396382944:;
	}
	return _58913_s;
}



inline jule::Ptr<_1a6a19a50_Prim> _1a6a19a50_build_prim_type(jule::Str _59720_kind) {
	return jule::new_struct_ptr<_1a6a19a50_Prim>(new( std::nothrow ) _1a6a19a50_Prim(_59720_kind));
}



inline jule::Ptr<_1b7905331_Struct> _1a6a19a50_get_struct_from_kind(jule::Ptr<_1a6a19a50_TypeKind> _60329_k) {
	{
		
		if (_60329_k == nullptr) {
			_case_begin_4396388528:;
			{
				return nullptr;
			}
		}
		else if ((*(_60329_k))._method_strct() != nullptr) {
			_case_begin_4396388624:;
			{
				return (*((*(_60329_k))._method_strct()))._field_decl;
			}
		}
		else if ((*(_60329_k))._method_sptr() != nullptr) {
			_case_begin_4396387952:;
			{
				return _1a6a19a50_get_struct_from_kind((*((*(_60329_k))._method_sptr()))._field_elem);
			}
		}
		else if ((*(_60329_k))._method_slc() != nullptr) {
			_case_begin_4396388048:;
			{
				return _1a6a19a50_get_struct_from_kind((*((*(_60329_k))._method_slc()))._field_elem);
			}
		}
		else if ((*(_60329_k))._method_arr() != nullptr) {
			_case_begin_4396388144:;
			{
				return _1a6a19a50_get_struct_from_kind((*((*(_60329_k))._method_arr()))._field_elem);
			}
		}
		else if ((*(_60329_k))._method_ptr() != nullptr) {
			_case_begin_4396387312:;
			{
				return nullptr;
			}
		}
		else {
			_case_begin_4396387008:;
			{
				return nullptr;
			}
		}
		_match_end_4396384240:;
	}
}



inline jule::Bool _1a6a19a50_is_prim(jule::Str _63212_kind) {
	return (((((((((((((((_63212_kind == jule::Str("i8", 2)) || (_63212_kind == jule::Str("i16", 3))) || (_63212_kind == jule::Str("i32", 3))) || (_63212_kind == jule::Str("i64", 3))) || (_63212_kind == jule::Str("u8", 2))) || (_63212_kind == jule::Str("u16", 3))) || (_63212_kind == jule::Str("u32", 3))) || (_63212_kind == jule::Str("u64", 3))) || (_63212_kind == jule::Str("f32", 3))) || (_63212_kind == jule::Str("f64", 3))) || (_63212_kind == jule::Str("int", 3))) || (_63212_kind == jule::Str("uint", 4))) || (_63212_kind == jule::Str("uintptr", 7))) || (_63212_kind == jule::Str("bool", 4))) || (_63212_kind == jule::Str("str", 3))) || (_63212_kind == jule::Str("any", 3));
}



inline std::tuple<jule::Ptr<_1a8acbe95_SymbolTable>,jule::Slice<_1b6986b22_Log>> _1a6a15b7d_build_symbols(jule::Ptr<_1b74bea77_Ast>& _1523_ast,jule::Trait<_1a6e9a574_Importer>& _1539_importer,jule::Ptr<_1b6a47496_SymbolBuilder> _1563_owner) {
	jule::Ptr<_1b6a47496_SymbolBuilder> _1613_sb = jule::new_struct_ptr<_1b6a47496_SymbolBuilder>(new( std::nothrow ) _1b6a47496_SymbolBuilder(_1563_owner,_1539_importer,jule::Slice<_1b6986b22_Log>(),_1523_ast,jule::Ptr<_1a8acbe95_SymbolTable>()));
	(*(_1613_sb))._method_build();
	if ((*(_1613_sb))._field_errors.len() == 0LL) {
		return std::make_tuple((*(_1613_sb))._field_table,nullptr);
	}
	return std::make_tuple(nullptr,(*(_1613_sb))._field_errors);
}



inline std::tuple<jule::Ptr<_1a6e9a574_Package>,jule::Slice<_1b6986b22_Log>> _1a6a15b7d___analyze_package(jule::Slice<jule::Ptr<_1b74bea77_Ast>>& _2927_files,jule::Trait<_1a6e9a574_Importer>& _2947_importer,jule::Int& _2968_flags) {
	jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>> _3113_tables = jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>::alloc(0LL,static_cast<jule::I64>(_2927_files.len()));
	{
		auto &expr = _2927_files;
		auto it = expr.begin();
		_iter_begin_4396427632:;
		if (it != expr.end()) {
			jule::Ptr<_1b74bea77_Ast> _1a6a15b7d_f = *it;
			{
				jule::Ptr<_1a8acbe95_SymbolTable> _3318_table;
				jule::Slice<_1b6986b22_Log> _3329_errors;
				std::tie(_3318_table,_3329_errors) = _1a6a15b7d_build_symbols(_1a6a15b7d_f,_2947_importer,nullptr);
				if (_3329_errors.len() > 0LL) {
					return std::make_tuple(nullptr,_3329_errors);
				}
				_3113_tables = jule::alloc_for_append(_3113_tables,1);_3113_tables.__push(_3318_table);
			}
			_iter_next_4396427632:;
			++it;
			goto _iter_begin_4396427632;
		}
		_iter_end_4396427632:;
	}
	jule::Ptr<_1a7002752_Sema> _4013_sema = jule::new_struct_ptr<_1a7002752_Sema>(new( std::nothrow ) _1a7002752_Sema(jule::Slice<_1b6986b22_Log>(),jule::Slice<jule::Ptr<_1a8acbe95_SymbolTable>>(),jule::Ptr<_1a8acbe95_SymbolTable>(),_2968_flags));
	(*(_4013_sema))._method_check(_3113_tables);
	if ((*(_4013_sema))._field_errors.len() > 0LL) {
		return std::make_tuple(nullptr,(*(_4013_sema))._field_errors);
	}
	jule::Ptr<_1a6e9a574_Package> _4813_pkg = jule::new_struct<_1a6e9a574_Package>(new( std::nothrow ) _1a6e9a574_Package((*(_4013_sema))._field_files));
	return std::make_tuple(_4813_pkg,nullptr);
}



inline std::tuple<jule::Ptr<_1a6e9a574_Package>,jule::Slice<_1b6986b22_Log>> _1a6a15b7d_analyze_package(jule::Slice<jule::Ptr<_1b74bea77_Ast>> _7228_files,jule::Trait<_1a6e9a574_Importer> _7247_importer,jule::Int _7267_flags) {
	if (_7228_files.len() == 0LL) {
		return std::make_tuple(nullptr,nullptr);
	}
	jule::Ptr<_1a6e9a574_Package> _7714_package;
	jule::Slice<_1b6986b22_Log> _7727_logs;
	std::tie(_7714_package,_7727_logs) = _1a6a15b7d___analyze_package(_7228_files,_7247_importer,_7267_flags);
	return std::make_tuple(_7714_package,_7727_logs);
}



inline jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)> _1a90790e0_find_builtin_caller(jule::U8 _5724_c) {
	{
		auto &_match_expr{ _5724_c };
		
		if (_match_expr == 1LLU) {
			_case_begin_4396457760:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_common);
			}
		}
		else if (_match_expr == 2LLU) {
			_case_begin_4396458112:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_common_mut);
			}
		}
		else if (_match_expr == 3LLU) {
			_case_begin_4396456896:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_common_plain);
			}
		}
		else if (_match_expr == 4LLU) {
			_case_begin_4396456992:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_out);
			}
		}
		else if (_match_expr == 5LLU) {
			_case_begin_4396457088:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_outln);
			}
		}
		else if (_match_expr == 6LLU) {
			_case_begin_4396457184:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_new);
			}
		}
		else if (_match_expr == 7LLU) {
			_case_begin_4396457280:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_panic);
			}
		}
		else if (_match_expr == 8LLU) {
			_case_begin_4396458624:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_copy);
			}
		}
		else if (_match_expr == 9LLU) {
			_case_begin_4396458720:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_make);
			}
		}
		else if (_match_expr == 10LLU) {
			_case_begin_4396458816:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_append);
			}
		}
		else if (_match_expr == 11LLU) {
			_case_begin_4396458912:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_clone);
			}
		}
		else if (_match_expr == 12LLU) {
			_case_begin_4396459008:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_assert);
			}
		}
		else if (_match_expr == 13LLU) {
			_case_begin_4396459104:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_std_mem_size_of);
			}
		}
		else if (_match_expr == 14LLU) {
			_case_begin_4396459200:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_std_mem_align_of);
			}
		}
		else if (_match_expr == 19LLU) {
			_case_begin_4396459296:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_std_mem_free);
			}
		}
		else if (_match_expr == 15LLU) {
			_case_begin_4396459392:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_std_jule_integrated_to_str);
			}
		}
		else if (_match_expr == 16LLU) {
			_case_begin_4396459504:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_std_jule_integrated_emit);
			}
		}
		else if (_match_expr == 17LLU) {
			_case_begin_4396459616:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_std_debug_out);
			}
		}
		else if (_match_expr == 18LLU) {
			_case_begin_4396459728:;
			{
				return jule::Fn<jule::Ptr<_1a8b431d7_Data>(jule::Ptr<_1a8b431d7_Eval>&,jule::Ptr<_1b7509a90_FnCallExpr>&,jule::Ptr<_1a8b431d7_Data>&)>(_1a90790e0_builtin_caller_std_debug_outln);
			}
		}
		else {
			_case_begin_4396455120:;
			{
				jule::panic(jule::Str("builtin caller not exist", 24) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/std/jule/sema/builtin.jule:117:9"));;
			}
		}
		_match_end_4396456336:;
	}
}



inline jule::Ptr<_1a691a500_FnIns> _1a90790e0_find_builtin_fn(jule::Str _12120_ident) {
	{
		auto &_match_expr{ _12120_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_4396472720:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),4LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_4396472816:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),5LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("new", 3)) {
			_case_begin_4396472912:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),6LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("panic", 5)) {
			_case_begin_4396473536:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),7LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("make", 4)) {
			_case_begin_4396473632:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),9LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("append", 6)) {
			_case_begin_4396473728:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),10LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("copy", 4)) {
			_case_begin_4396473824:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),8LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("clone", 5)) {
			_case_begin_4396473920:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),11LLU,jule::Bool()));
			}
		}
		else if (_match_expr == jule::Str("assert", 6)) {
			_case_begin_4396474016:;
			{
				return jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),12LLU,jule::Bool()));
			}
		}
		else {
			_case_begin_4396469408:;
			{
				return nullptr;
			}
		}
		_match_end_4396473264:;
	}
}



inline jule::Ptr<_1a6a19a50_TypeAlias> _1a90790e0_find_builtin_type_alias(jule::Str _13628_ident) {
	{
		auto &_match_expr{ _13628_ident };
		
		if (_match_expr == jule::Str("byte", 4)) {
			_case_begin_4396485696:;
			{
				return _1a90790e0_BUILTIN_TYPE_ALIAS_BYTE;
			}
		}
		else if (_match_expr == jule::Str("rune", 4)) {
			_case_begin_4396485856:;
			{
				return _1a90790e0_BUILTIN_TYPE_ALIAS_RUNE;
			}
		}
		else {
			_case_begin_4396476352:;
			{
				return nullptr;
			}
		}
		_match_end_4396475040:;
	}
}



inline jule::Ptr<_1b76b472d_Trait> _1a90790e0_find_builtin_trait(jule::Str _14423_ident) {
	return nullptr;
}



inline jule::Any _1a90790e0_find_builtin_def(jule::Str _14821_ident) {
	jule::Ptr<_1a691a500_FnIns> _14913_f = _1a90790e0_find_builtin_fn(_14821_ident);
	if (_14913_f != nullptr) {
		return jule::Any(_14913_f);
	}
	jule::Ptr<_1a6a19a50_TypeAlias> _15413_ta = _1a90790e0_find_builtin_type_alias(_14821_ident);
	if (_15413_ta != nullptr) {
		return jule::Any(_15413_ta);
	}
	jule::Ptr<_1b76b472d_Trait> _15913_t = _1a90790e0_find_builtin_trait(_14821_ident);
	if (_15913_t != nullptr) {
		return jule::Any(_15913_t);
	}
	return jule::Any(nullptr);
}



inline jule::Any _1a90790e0_find_builtin_def_std_debug(jule::Str _16731_ident) {
	{
		auto &_match_expr{ _16731_ident };
		
		if (_match_expr == jule::Str("out", 3)) {
			_case_begin_4396496544:;
			{
				return jule::Any(jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),17LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("outln", 5)) {
			_case_begin_4396496176:;
			{
				return jule::Any(jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),18LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_4396490784:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4396494144:;
	}
}



inline jule::Any _1a90790e0_find_builtin_def_std_mem(jule::Str _17529_ident) {
	{
		auto &_match_expr{ _17529_ident };
		
		if (_match_expr == jule::Str("size_of", 7)) {
			_case_begin_4396501136:;
			{
				return jule::Any(jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),13LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("align_of", 8)) {
			_case_begin_4396500768:;
			{
				return jule::Any(jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),14LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("free", 4)) {
			_case_begin_4396500864:;
			{
				return jule::Any(jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),19LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_4396499232:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4396497264:;
	}
}



inline jule::Any _1a90790e0_find_builtin_def_std_jule_integrated(jule::Str _18441_ident) {
	{
		auto &_match_expr{ _18441_ident };
		
		if (_match_expr == jule::Str("to_str", 6)) {
			_case_begin_4396507344:;
			{
				return jule::Any(jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),15LLU,jule::Bool())));
			}
		}
		else if (_match_expr == jule::Str("emit", 4)) {
			_case_begin_4396506976:;
			{
				return jule::Any(jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>(),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),16LLU,jule::Bool())));
			}
		}
		else {
			_case_begin_4396500960:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4396502224:;
	}
}



inline jule::Any _1a90790e0_find_package_builtin_def(jule::Str _19229_link_path,jule::Str _19245_ident) {
	{
		auto &_match_expr{ _19229_link_path };
		
		if (_match_expr == jule::Str("std::debug", 10)) {
			_case_begin_4396512464:;
			{
				return _1a90790e0_find_builtin_def_std_debug(_19245_ident);
			}
		}
		else if (_match_expr == jule::Str("std::mem", 8)) {
			_case_begin_4396512096:;
			{
				return _1a90790e0_find_builtin_def_std_mem(_19245_ident);
			}
		}
		else if (_match_expr == jule::Str("std::jule::integrated", 21)) {
			_case_begin_4396512192:;
			{
				return _1a90790e0_find_builtin_def_std_jule_integrated(_19245_ident);
			}
		}
		else {
			_case_begin_4396508288:;
			{
				return jule::Any(nullptr);
			}
		}
		_match_end_4396511168:;
	}
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_common_plain(jule::Ptr<_1a8b431d7_Eval>& _20137_e,jule::Ptr<_1b7509a90_FnCallExpr>& _20152_fc,jule::Ptr<_1a8b431d7_Data>& _20174_d) {
	jule::Ptr<_1a691a500_FnIns> _20213_f = (*((*(_20174_d))._field_kind))._method_fnc();
	_1a700327a_FnCallArgChecker _20413_fcac = _1a700327a_FnCallArgChecker(_20137_e,(*(_20152_fc))._field_args,(*(_20152_fc))._field_token,_20213_f,false,jule::Slice<jule::Any>());
	_20413_fcac._method_check();
	jule::Ptr<_1a69b8d2e_FnCallExprModel> _21313_model = jule::new_struct<_1a69b8d2e_FnCallExprModel>(new( std::nothrow ) _1a69b8d2e_FnCallExprModel(_1b7553d92_Token(),_20213_f,jule::Bool(),(*(_20174_d))._field_model,_20413_fcac._field_arg_models,jule::Ptr<_1a6bc3e29_Scope>(),jule::Bool()));
	if ((*(_20213_f))._field_result == nullptr) {
		_20174_d=_1a8b431d7_build_void_data();
	} else {
		_20174_d=jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data((*(_20213_f))._field_result,jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
	}
	(*(_20174_d))._field_model=jule::Any(_21313_model);
	return _20174_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_common(jule::Ptr<_1a8b431d7_Eval>& _23131_e,jule::Ptr<_1b7509a90_FnCallExpr>& _23146_fc,jule::Ptr<_1a8b431d7_Data>& _23168_d) {
	if ((*(_23146_fc))._field_generics.len() > 0LL) {
		(*(_23131_e))._method_push_err((*(_23146_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	return _1a90790e0_builtin_caller_common_plain(_23131_e,_23146_fc,_23168_d);
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_common_mut(jule::Ptr<_1a8b431d7_Eval>& _23935_e,jule::Ptr<_1b7509a90_FnCallExpr>& _23950_fc,jule::Ptr<_1a8b431d7_Data>& _23972_d) {
	if ((!((*(_23972_d))._field_mutable))) {
		(*(_23935_e))._method_push_err((*(_23950_fc))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	return _1a90790e0_builtin_caller_common(_23935_e,_23950_fc,_23972_d);
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_error(jule::Ptr<_1a8b431d7_Eval>& _24630_e,jule::Ptr<_1b7509a90_FnCallExpr>& _24645_fc) {
	if ((*(_24645_fc))._field_generics.len() > 0LL) {
		(*(_24630_e))._method_push_err((*(_24645_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_24645_fc))._field_args.len() < 1LL) {
		(*(_24630_e))._method_push_err((*(_24645_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("err", 3))}));
		return nullptr;
	}
	if ((*(_24645_fc))._field_args.len() > 1LL) {
		(*(_24630_e))._method_push_err((*((*(_24645_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _25713_expr = (*(_24630_e))._method_eval_expr((*(_24645_fc))._field_args[0LL]);
	if (_25713_expr == nullptr) {
		return nullptr;
	}
	if ((*(_25713_expr))._method_is_nil()) {
		(*(_24630_e))._method_push_err((*((*(_24645_fc))._field_args[0LL]))._field_token,jule::Str("you cannot call error function with nil", 39),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _26613_d = _1a8b431d7_build_void_data();
	(*(_26613_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinErrorCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinErrorCallExprModel(jule::Ptr<_1a691a500_FnIns>(),(*(_25713_expr))._field_model)));
	return _26613_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_out(jule::Ptr<_1a8b431d7_Eval>& _27428_e,jule::Ptr<_1b7509a90_FnCallExpr>& _27443_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_27443_fc))._field_generics.len() > 0LL) {
		(*(_27428_e))._method_push_err((*(_27443_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_27443_fc))._field_args.len() < 1LL) {
		(*(_27428_e))._method_push_err((*(_27443_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("v", 1))}));
		return nullptr;
	}
	if ((*(_27443_fc))._field_args.len() > 1LL) {
		(*(_27428_e))._method_push_err((*((*(_27443_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _28613_expr = (*(_27428_e))._method_eval_expr((*(_27443_fc))._field_args[0LL]);
	if (_28613_expr == nullptr) {
		return nullptr;
	}
	if ((!(_1a6a19a50_is_builtin_str_convertable((*(_28613_expr))._field_kind)))) {
		(*(_27428_e))._method_push_err((*((*(_27443_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _29613_d = _1a8b431d7_build_void_data();
	(*(_29613_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinOutCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinOutCallExprModel((*(_28613_expr))._field_model,jule::Bool())));
	return _29613_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_outln(jule::Ptr<_1a8b431d7_Eval>& _30130_e,jule::Ptr<_1b7509a90_FnCallExpr>& _30145_fc,jule::Ptr<_1a8b431d7_Data>& _30167_d) {
	_30167_d=_1a90790e0_builtin_caller_out(_30130_e,_30145_fc,_30167_d);
	if (_30167_d == nullptr) {
		return nullptr;
	}
	(*(_30167_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinOutlnCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinOutlnCallExprModel((*((*(_30167_d))._field_model.operator jule::Ptr<_1a69b8d2e_BuiltinOutCallExprModel>()))._field_expr,jule::Bool())));
	return _30167_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_new(jule::Ptr<_1a8b431d7_Eval>& _31328_e,jule::Ptr<_1b7509a90_FnCallExpr>& _31343_fc,jule::Ptr<_1a8b431d7_Data>& _31365_d) {
	if ((*(_31343_fc))._field_generics.len() > 0LL) {
		(*(_31328_e))._method_push_err((*(_31343_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_31343_fc))._field_args.len() < 1LL) {
		(*(_31328_e))._method_push_err((*(_31343_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type", 4))}));
		return nullptr;
	}
	if ((*(_31343_fc))._field_args.len() > 2LL) {
		(*(_31328_e))._method_push_err((*((*(_31343_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _32513_t = (*(_31328_e))._method_eval_expr_kind((*((*(_31343_fc))._field_args[0LL]))._field_kind);
	if (_32513_t == nullptr) {
		return nullptr;
	}
	if ((!((*(_32513_t))._field_decl))) {
		(*(_31328_e))._method_push_err((*((*(_31343_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!(_1a6a19a50_is_valid_for_sptr_type((*(_32513_t))._field_kind)))) {
		jule::Ptr<_1b7905331_StructIns> _33617_s = (*((*(_32513_t))._field_kind))._method_strct();
		if (((_33617_s != nullptr) && ((*(_33617_s))._field_decl != nullptr)) && (*((*(_33617_s))._field_decl))._field_cpp_linked) {
			(*(_31328_e))._method_push_err((*((*(_31343_fc))._field_args[0LL]))._field_token,jule::Str("cpp-linked structures cannot supports reference counting", 56),jule::Slice<jule::Any>());
		}
		return nullptr;
	}
	(*(_31365_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),jule::new_struct_ptr<_1a6a19a50_Sptr>(new( std::nothrow ) _1a6a19a50_Sptr((*(_32513_t))._field_kind))));
	if ((*(_31343_fc))._field_args.len() == 2LL) {
		jule::Ptr<_1a6a19a50_TypeKind> _34617_old = (*(_31328_e))._field_prefix;
		(*(_31328_e))._field_prefix=(*(_32513_t))._field_kind;
		jule::Ptr<_1a8b431d7_Data> _34917_init = (*(_31328_e))._method_eval_expr((*(_31343_fc))._field_args[1LL]);
		(*(_31328_e))._field_prefix=_34617_old;
		if (_34917_init != nullptr) {
			_1b7553d92_Token _35421_token = (*((*(_31343_fc))._field_args[1LL]))._field_token;
			
			(*((*(_31328_e))._field_s))._method_check_validity_for_init_expr((!((*(_31328_e))._field_immutable)),false,(*(_32513_t))._field_kind,_34917_init,_35421_token);
			(*((*(_31328_e))._field_s))._method_check_assign_type(false,(*(_32513_t))._field_kind,_34917_init,_35421_token);
			(*(_31365_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinNewCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinNewCallExprModel((*(_32513_t))._field_kind,(*(_34917_init))._field_model)));
		}
	} else {
		(*(_31365_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinNewCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinNewCallExprModel((*(_32513_t))._field_kind,jule::Any())));
	}
	return _31365_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_panic(jule::Ptr<_1a8b431d7_Eval>& _37230_e,jule::Ptr<_1b7509a90_FnCallExpr>& _37245_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_37245_fc))._field_generics.len() > 0LL) {
		(*(_37230_e))._method_push_err((*(_37245_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_37245_fc))._field_args.len() < 1LL) {
		(*(_37230_e))._method_push_err((*(_37245_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("message", 7))}));
		return nullptr;
	}
	if ((*(_37245_fc))._field_args.len() > 1LL) {
		(*(_37230_e))._method_push_err((*((*(_37245_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _38413_expr = (*(_37230_e))._method_eval_expr((*(_37245_fc))._field_args[0LL]);
	if (_38413_expr == nullptr) {
		return nullptr;
	}
	if (((*((*(_38413_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_38413_expr))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_37230_e))._method_push_err((*(_37245_fc))._field_token,jule::Str("panic function only accepts strings", 35),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _39313_d = _1a8b431d7_build_void_data();
	(*(_39313_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinPanicCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinPanicCallExprModel((*(_37245_fc))._field_token,(*(_38413_expr))._field_model)));
	return _39313_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_make(jule::Ptr<_1a8b431d7_Eval>& _40129_e,jule::Ptr<_1b7509a90_FnCallExpr>& _40144_fc,jule::Ptr<_1a8b431d7_Data>& _40166_d) {
	if ((*(_40144_fc))._field_generics.len() > 0LL) {
		(*(_40129_e))._method_push_err((*(_40144_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_40144_fc))._field_args.len() < 2LL) {
		if ((*(_40144_fc))._field_args.len() == 1LL) {
			(*(_40129_e))._method_push_err((*(_40144_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("size", 4))}));
			return nullptr;
		}
		(*(_40129_e))._method_push_err((*(_40144_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type, size", 10))}));
		return nullptr;
	}
	if ((*(_40144_fc))._field_args.len() > 3LL) {
		(*(_40129_e))._method_push_err((*((*(_40144_fc))._field_args[3LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _41713_t = (*(_40129_e))._method_eval_expr_kind((*((*(_40144_fc))._field_args[0LL]))._field_kind);
	if (_41713_t == nullptr) {
		return nullptr;
	}
	if ((!((*(_41713_t))._field_decl)) || ((*((*(_41713_t))._field_kind))._method_slc() == nullptr)) {
		(*(_40129_e))._method_push_err((*((*(_40144_fc))._field_args[0LL]))._field_token,jule::Str("invalid type", 12),jule::Slice<jule::Any>());
		return nullptr;
	}
	(*(_40166_d))._field_kind=(*(_41713_t))._field_kind;
	jule::Ptr<_1a8b431d7_Data> _42913_len = (*((*((*(_40129_e))._field_s))._method_evalp((*(_40129_e))._field_lookup,(*(_41713_t))._field_kind)))._method_eval_expr((*(_40144_fc))._field_args[1LL]);
	if (_42913_len == nullptr) {
		return _40166_d;
	}
	(*(_40129_e))._method_check_integer_indexing_by_data(_42913_len,(*((*(_40144_fc))._field_args[1LL]))._field_token);
	if ((*(_40144_fc))._field_args.len() == 3LL) {
		jule::Ptr<_1a8b431d7_Data> _43717_cap = (*((*((*(_40129_e))._field_s))._method_evalp((*(_40129_e))._field_lookup,(*(_41713_t))._field_kind)))._method_eval_expr((*(_40144_fc))._field_args[2LL]);
		if (_43717_cap == nullptr) {
			return _40166_d;
		}
		(*(_40129_e))._method_check_integer_indexing_by_data(_43717_cap,(*((*(_40144_fc))._field_args[2LL]))._field_token);
		(*(_40166_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinMakeCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinMakeCallExprModel((*(_41713_t))._field_kind,(*(_42913_len))._field_model,(*(_43717_cap))._field_model)));
	} else {
		(*(_40166_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinMakeCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinMakeCallExprModel((*(_41713_t))._field_kind,(*(_42913_len))._field_model,jule::Any())));
	}
	return _40166_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_append(jule::Ptr<_1a8b431d7_Eval>& _45831_e,jule::Ptr<_1b7509a90_FnCallExpr>& _45846_fc,jule::Ptr<_1a8b431d7_Data>& _45868_d) {
	if ((*(_45846_fc))._field_generics.len() > 0LL) {
		(*(_45831_e))._method_push_err((*(_45846_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_45846_fc))._field_args.len() < 2LL) {
		if ((*(_45846_fc))._field_args.len() == 1LL) {
			(*(_45831_e))._method_push_err((*(_45846_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_45831_e))._method_push_err((*(_45846_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _47113_t = (*(_45831_e))._method_eval_expr((*(_45846_fc))._field_args[0LL]);
	if (_47113_t == nullptr) {
		return nullptr;
	}
	if ((*((*(_47113_t))._field_kind))._method_slc() == nullptr) {
		(*(_45831_e))._method_push_err((*((*(_45846_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a691a500_FnIns> _48113_f = jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>({jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),true,jule::Bool(),jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str())),(*(_47113_t))._field_kind)),jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param(_1b7553d92_Token(),true,true,jule::Bool(),jule::Ptr<_1a6a19a50_TypeSymbol>(),jule::Str())),(*((*((*(_47113_t))._field_kind))._method_slc()))._field_elem))}),(*(_47113_t))._field_kind,jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),3LLU,jule::Bool()));
	(*(_45868_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_48113_f));
	(*(_45868_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_CommonIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonIdentExprModel(jule::Str("append", 6))));
	_45868_d=_1a90790e0_builtin_caller_common_plain(_45831_e,_45846_fc,_45868_d);
	if (_45868_d != nullptr) {
		jule::Ptr<_1a69b8d2e_FnCallExprModel> _50917_model = (*(_45868_d))._field_model.operator jule::Ptr<_1a69b8d2e_FnCallExprModel>();
		(*(_45868_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinAppendCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinAppendCallExprModel((*(_50917_model))._field_args[0LL],(*(_50917_model))._field_args[1LL])));
	}
	return _45868_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_copy(jule::Ptr<_1a8b431d7_Eval>& _51829_e,jule::Ptr<_1b7509a90_FnCallExpr>& _51844_fc,jule::Ptr<_1a8b431d7_Data>& _51866_d) {
	if ((*(_51844_fc))._field_generics.len() > 0LL) {
		(*(_51829_e))._method_push_err((*(_51844_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_51844_fc))._field_args.len() < 2LL) {
		if ((*(_51844_fc))._field_args.len() == 1LL) {
			(*(_51829_e))._method_push_err((*(_51844_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src", 3))}));
			return nullptr;
		}
		(*(_51829_e))._method_push_err((*(_51844_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("src, values", 11))}));
		return nullptr;
	}
	if ((*(_51844_fc))._field_args.len() > 2LL) {
		(*(_51829_e))._method_push_err((*((*(_51844_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _53413_dest = (*(_51829_e))._method_eval_expr((*(_51844_fc))._field_args[0LL]);
	if (_53413_dest == nullptr) {
		return nullptr;
	}
	if ((*((*(_53413_dest))._field_kind))._method_slc() == nullptr) {
		(*(_51829_e))._method_push_err((*((*(_51844_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	if ((!((*(_53413_dest))._field_mutable))) {
		(*(_51829_e))._method_push_err((*((*(_51844_fc))._field_args[0LL]))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a691a500_Param> _54613_empty_param = jule::new_struct_ptr<_1a691a500_Param>(new( std::nothrow ) _1a691a500_Param());
	jule::Ptr<_1a691a500_FnIns> _54713_f = jule::new_struct_ptr<_1a691a500_FnIns>(new( std::nothrow ) _1a691a500_FnIns(jule::Ptr<_1b7905331_StructIns>(),jule::Ptr<_1a691a500_Fn>(),jule::Slice<jule::Ptr<_1a6a19a50_TypeKind>>(),jule::Slice<jule::Ptr<_1a691a500_ParamIns>>({jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(_54613_empty_param,(*(_53413_dest))._field_kind)),jule::new_struct<_1a691a500_ParamIns>(new( std::nothrow ) _1a691a500_ParamIns(_54613_empty_param,(*(_53413_dest))._field_kind))}),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("int", 3)))),jule::Ptr<_1a6bc3e29_Scope>(),jule::Ptr<_1b6a47496_ReferenceStack>(),jule::Bool(),jule::Ptr<_1b6a47496_ReferenceStack>(),3LLU,jule::Bool()));
	(*(_51866_d))._field_kind=jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_54713_f));
	(*(_51866_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_CommonIdentExprModel>(new( std::nothrow ) _1a69b8d2e_CommonIdentExprModel(jule::Str("copy", 4))));
	_51866_d=_1a90790e0_builtin_caller_common_plain(_51829_e,_51844_fc,_51866_d);
	if (_51866_d != nullptr) {
		jule::Ptr<_1a8b431d7_Data> _56617_src = (*((*(_51866_d))._field_model.operator jule::Ptr<_1a69b8d2e_FnCallExprModel>()))._field_args[1LL].operator jule::Ptr<_1a8b431d7_Data>();
		jule::Ptr<_1a6a19a50_Slc> _56717_slc = (*((*(_56617_src))._field_kind))._method_slc();
		if ((!((*(_56617_src))._field_mutable)) && (*((*(_56717_slc))._field_elem))._method_mutable()) {
			(*(_51829_e))._method_push_err((*((*(_51844_fc))._field_args[1LL]))._field_token,jule::Str("mutable operation cannot used with immutable define", 51),jule::Slice<jule::Any>());
		}
	}
	return _51866_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_clone(jule::Ptr<_1a8b431d7_Eval>& _57530_e,jule::Ptr<_1b7509a90_FnCallExpr>& _57545_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_57545_fc))._field_generics.len() > 0LL) {
		(*(_57530_e))._method_push_err((*(_57545_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_57545_fc))._field_args.len() < 1LL) {
		(*(_57530_e))._method_push_err((*(_57545_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_57545_fc))._field_args.len() > 1LL) {
		(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _58813_d = (*(_57530_e))._method_eval_expr_kind((*((*(_57545_fc))._field_args[0LL]))._field_kind);
	if (_58813_d == nullptr) {
		return nullptr;
	}
	jule::Fn<void(jule::Ptr<_1a6a19a50_TypeKind>)> _5939_check_kind = jule::Fn<void(jule::Ptr<_1a6a19a50_TypeKind>)>([=](jule::Ptr<_1a6a19a50_TypeKind> _59329_k) mutable -> void {
		{
			
			if ((*(_59329_k))._method_slc() != nullptr) {
				_case_begin_4396846912:;
				{
					if ((!((*((*((*(_59329_k))._method_slc()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_59329_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_59329_k))._method_map() != nullptr) {
				_case_begin_4396847008:;
				{
					jule::Ptr<_1a6a19a50_Map> _60417_m = (*(_59329_k))._method_map();
					if ((!((*((*(_60417_m))._field_key))._method_supports_cloning())) || (!((*((*(_60417_m))._field_val))._method_supports_cloning()))) {
						{
							(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_59329_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_59329_k))._method_arr() != nullptr) {
				_case_begin_4396847104:;
				{
					if ((!((*((*((*(_59329_k))._method_arr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_59329_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_59329_k))._method_sptr() != nullptr) {
				_case_begin_4396847200:;
				{
					if ((!((*((*((*(_59329_k))._method_sptr()))._field_elem))._method_supports_cloning()))) {
						{
							(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("type @ has internally types which is not supports cloning", 57),jule::Slice<jule::Any>({jule::Any((*(_59329_k))._method_to_str())}));
						}
					}
				}
			}
			else if ((*(_59329_k))._method_strct() != nullptr) {
				_case_begin_4396847408:;
				{
					jule::Ptr<_1b7905331_StructIns> _62917_s = (*((*(_58813_d))._field_kind))._method_strct();
					if ((!((*(_62917_s))._field_mutable))) {
						{
							(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("struct \"@\" is not breaks immutability, do not needs cloning", 59),jule::Slice<jule::Any>({jule::Any((*((*(_58813_d))._field_kind))._method_to_str())}));
						}
					}
					if ((((*(_62917_s))._field_decl == nullptr) || (*((*(_62917_s))._field_decl))._field_cpp_linked) || (!((*((*(_62917_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
						{
							(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_58813_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
						}
					}
				}
			}
			else {
				_case_begin_4396846608:;
				{
					{
						(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_58813_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
					}
				}
			}
			_match_end_4396846432:;
		}
	});
	if ((!((*(_58813_d))._field_lvalue))) {
		(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("non-lvalue expressions cannot be clone", 38),jule::Slice<jule::Any>());
	}
	if ((*((*(_58813_d))._field_kind))._method_strct() != nullptr) {
		jule::Ptr<_1b7905331_StructIns> _65817_s = (*((*(_58813_d))._field_kind))._method_strct();
		if (((*(_65817_s))._field_decl != nullptr) && (!((*((*(_65817_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))))) {
			(*(_57530_e))._method_push_err((*((*(_57545_fc))._field_args[0LL]))._field_token,jule::Str("type @ is not derives @", 23),jule::Slice<jule::Any>({jule::Any((*((*(_58813_d))._field_kind))._method_to_str()),jule::Any(jule::Str("Clone", 5))}));
		}
	}
	if ((!((*((*(_58813_d))._field_kind))._method_supports_cloning()))) {
		_5939_check_kind((*(_58813_d))._field_kind);
	}
	(*(_58813_d))._field_mutable=true;
	(*(_58813_d))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_BuiltinCloneCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinCloneCallExprModel((*(_58813_d))._field_model)));
	return _58813_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_assert(jule::Ptr<_1a8b431d7_Eval>& _67331_e,jule::Ptr<_1b7509a90_FnCallExpr>& _67346_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_67346_fc))._field_generics.len() > 0LL) {
		(*(_67331_e))._method_push_err((*(_67346_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_67346_fc))._field_args.len() < 1LL) {
		(*(_67331_e))._method_push_err((*(_67346_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_67346_fc))._field_args.len() > 2LL) {
		(*(_67331_e))._method_push_err((*((*(_67346_fc))._field_args[2LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _68513_expr = (*(_67331_e))._method_eval_expr((*(_67346_fc))._field_args[0LL]);
	if (_68513_expr == nullptr) {
		return nullptr;
	}
	if (((*((*(_68513_expr))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_68513_expr))._field_kind))._method_prim()))._method_is_bool()))) {
		(*(_67331_e))._method_push_err((*(_67346_fc))._field_token,jule::Str("assertion requires boolean expression", 37),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a69b8d2e_BuiltinAssertCallExprModel> _69413_model = jule::new_struct<_1a69b8d2e_BuiltinAssertCallExprModel>(new( std::nothrow ) _1a69b8d2e_BuiltinAssertCallExprModel((*(_67346_fc))._field_token,(*(_68513_expr))._field_model,jule::Str("assertion failed", 16)));
	if ((*(_67346_fc))._field_args.len() == 2LL) {
		jule::Ptr<_1a8b431d7_Data> _70217_log = (*(_67331_e))._method_eval_expr((*(_67346_fc))._field_args[1LL]);
		if (_70217_log == nullptr) {
			return nullptr;
		}
		if (((!((*(_70217_log))._method_is_const())) || ((*((*(_70217_log))._field_kind))._method_prim() == nullptr)) || (!((*((*((*(_70217_log))._field_kind))._method_prim()))._method_is_str()))) {
			(*(_67331_e))._method_push_err((*((*(_67346_fc))._field_args[1LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("const str", 9)),jule::Any((*((*(_70217_log))._field_kind))._method_to_str())}));
			return nullptr;
		}
		(*(_69413_model))._field_log=(*((*(_70217_log))._field_constant))._method_read_str();
	}
	jule::Ptr<_1a8b431d7_Data> _71513_d = _1a8b431d7_build_void_data();
	(*(_71513_d))._field_model=jule::Any(_69413_model);
	return _71513_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_mem_size_of(jule::Ptr<_1a8b431d7_Eval>& _72040_e,jule::Ptr<_1b7509a90_FnCallExpr>& _72055_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_72055_fc))._field_generics.len() > 0LL) {
		(*(_72040_e))._method_push_err((*(_72055_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _72413_result = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
	if ((*(_72055_fc))._field_args.len() < 1LL) {
		(*(_72040_e))._method_push_err((*(_72055_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _72413_result;
	}
	if ((*(_72055_fc))._field_args.len() > 1LL) {
		(*(_72040_e))._method_push_err((*((*(_72055_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _73613_d = (*(_72040_e))._method_eval_expr_kind((*((*(_72055_fc))._field_args[0LL]))._field_kind);
	if (_73613_d == nullptr) {
		return _72413_result;
	}
	(*(_72413_result))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_SizeofExprModel>(new( std::nothrow ) _1a69b8d2e_SizeofExprModel((*(_73613_d))._field_model)));
	return _72413_result;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_mem_align_of(jule::Ptr<_1a8b431d7_Eval>& _74541_e,jule::Ptr<_1b7509a90_FnCallExpr>& _74556_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_74556_fc))._field_generics.len() > 0LL) {
		(*(_74541_e))._method_push_err((*(_74556_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _74913_result = jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("uint", 4)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
	if ((*(_74556_fc))._field_args.len() < 1LL) {
		(*(_74541_e))._method_push_err((*(_74556_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("type|expr", 9))}));
		return _74913_result;
	}
	if ((*(_74556_fc))._field_args.len() > 1LL) {
		(*(_74541_e))._method_push_err((*((*(_74556_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _76113_d = (*(_74541_e))._method_eval_expr_kind((*((*(_74556_fc))._field_args[0LL]))._field_kind);
	if (_76113_d == nullptr) {
		return _74913_result;
	}
	(*(_74913_result))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_AlignofExprModel>(new( std::nothrow ) _1a69b8d2e_AlignofExprModel((*(_76113_d))._field_model)));
	return _74913_result;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_mem_free(jule::Ptr<_1a8b431d7_Eval>& _77037_e,jule::Ptr<_1b7509a90_FnCallExpr>& _77052_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_77052_fc))._field_generics.len() > 0LL) {
		(*(_77037_e))._method_push_err((*(_77052_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_77052_fc))._field_args.len() < 1LL) {
		(*(_77037_e))._method_push_err((*(_77052_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("h", 1))}));
		return nullptr;
	}
	if ((*(_77052_fc))._field_args.len() > 1LL) {
		(*(_77037_e))._method_push_err((*((*(_77052_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _78313_d = (*(_77037_e))._method_eval_expr_kind((*((*(_77052_fc))._field_args[0LL]))._field_kind);
	if (_78313_d == nullptr) {
		return nullptr;
	}
	if ((!((*((*(_78313_d))._field_kind))._method_performs_rc()))) {
		(*(_77037_e))._method_push_err((*((*(_77052_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _79213_result = _1a8b431d7_build_void_data();
	(*(_79213_result))._field_model=jule::Any(jule::new_struct<_1a69b8d2e_FreeExprModel>(new( std::nothrow ) _1a69b8d2e_FreeExprModel((*(_78313_d))._field_model)));
	return _79213_result;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_jule_integrated_to_str(jule::Ptr<_1a8b431d7_Eval>& _79751_e,jule::Ptr<_1b7509a90_FnCallExpr>& _79766_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((*(_79766_fc))._field_generics.len() > 0LL) {
		(*(_79751_e))._method_push_err((*(_79766_fc))._field_token,jule::Str("define not has generics", 23),jule::Slice<jule::Any>());
	}
	if ((*(_79766_fc))._field_args.len() < 1LL) {
		(*(_79751_e))._method_push_err((*(_79766_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("expr", 4))}));
		return nullptr;
	}
	if ((*(_79766_fc))._field_args.len() > 1LL) {
		(*(_79751_e))._method_push_err((*((*(_79766_fc))._field_args[1LL]))._field_token,jule::Str("argument overflow: passed more argument than expected", 53),jule::Slice<jule::Any>());
	}
	jule::Ptr<_1a8b431d7_Data> _81013_d = (*(_79751_e))._method_eval_expr_kind((*((*(_79766_fc))._field_args[0LL]))._field_kind);
	if (_81013_d == nullptr) {
		return nullptr;
	}
	if ((!(_1a6a19a50_is_builtin_str_convertable((*(_81013_d))._field_kind)))) {
		(*(_79751_e))._method_push_err((*((*(_79766_fc))._field_args[0LL]))._field_token,jule::Str("invalid expression", 18),jule::Slice<jule::Any>());
		return nullptr;
	}
	return jule::new_struct<_1a8b431d7_Data>(new( std::nothrow ) _1a8b431d7_Data(jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("str", 3)))),jule::Ptr<_1a6a19a50_TypeKind>(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Bool(),jule::Any(jule::new_struct<_1a69b8d2e_IntegratedToStrExprModel>(new( std::nothrow ) _1a69b8d2e_IntegratedToStrExprModel((*(_81013_d))._field_model))),jule::Bool(),jule::Ptr<_1b6dd59aa_Const>()));
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_jule_integrated_emit(jule::Ptr<_1a8b431d7_Eval>& _82849_e,jule::Ptr<_1b7509a90_FnCallExpr>& _82864_fc,jule::Ptr<_1a8b431d7_Data>& ) {
	if ((!((*(_82849_e))._method_is_unsafe()))) {
		(*(_82849_e))._method_push_err((*(_82864_fc))._field_token,jule::Str("unsafe behaviors cannot available out of unsafe scopes", 54),jule::Slice<jule::Any>());
	}
	if ((*(_82864_fc))._field_args.len() < 1LL) {
		(*(_82849_e))._method_push_err((*(_82864_fc))._field_token,jule::Str("missing expression for @", 24),jule::Slice<jule::Any>({jule::Any(jule::Str("code", 4))}));
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _83813_d = (*(_82849_e))._method_eval_expr((*(_82864_fc))._field_args[0LL]);
	if (_83813_d == nullptr) {
		return nullptr;
	}
	if (((*((*(_83813_d))._field_kind))._method_prim() == nullptr) || (!((*((*((*(_83813_d))._field_kind))._method_prim()))._method_is_str()))) {
		(*(_82849_e))._method_push_err((*((*(_82864_fc))._field_args[0LL]))._field_token,jule::Str("mismatched types: @ and @", 25),jule::Slice<jule::Any>({jule::Any(jule::Str("str", 3)),jule::Any((*((*(_83813_d))._field_kind))._method_to_str())}));
		return nullptr;
	}
	if ((!((*(_83813_d))._method_is_const())) || (!((*((*(_83813_d))._field_constant))._method_is_str()))) {
		(*(_82849_e))._method_push_err((*((*(_82864_fc))._field_args[0LL]))._field_token,jule::Str("expressions is not constant expression", 38),jule::Slice<jule::Any>());
		return nullptr;
	}
	jule::Ptr<_1a8b431d7_Data> _85313_r = _1a8b431d7_build_void_data();
	if ((*(_82864_fc))._field_generics.len() != 0LL) {
		if ((!((*((*(_82849_e))._field_s))._method_check_generic_quantity(1LL,static_cast<jule::I64>((*(_82864_fc))._field_generics.len()),(*(_82864_fc))._field_token)))) {
			return nullptr;
		}
		jule::Ptr<_1a6a19a50_TypeSymbol> _85917_k = _1b6a47496_build_type((*(_82864_fc))._field_generics[0LL]);
		if ((!((*((*(_82849_e))._field_s))._method_check_type(_85917_k,(*(_82849_e))._field_lookup)))) {
			return nullptr;
		}
		(*(_85313_r))._field_kind=(*(_85917_k))._field_kind;
	}
	jule::Ptr<_1a69b8d2e_BackendEmitExprModel> _86613_model = jule::new_struct<_1a69b8d2e_BackendEmitExprModel>(new( std::nothrow ) _1a69b8d2e_BackendEmitExprModel((*((*(_83813_d))._field_constant))._method_read_str(),jule::Slice<jule::Any>()));
	if ((*(_82864_fc))._field_args.len() > 1LL) {
		(*(_86613_model))._field_exprs=jule::Slice<jule::Any>::alloc(0LL,static_cast<jule::I64>((*(_82864_fc))._field_args.len() - 1LL));
		{
			auto expr = (*(_82864_fc))._field_args.slice(1LL);
			auto it = expr.begin();
			_iter_begin_4397089024:;
			if (it != expr.end()) {
				jule::Ptr<_1b7509a90_Expr> _1a90790e0_arg = *it;
				{
					jule::Ptr<_1a8b431d7_Data> _87321_argd = (*(_82849_e))._method_eval_expr_kind((*(_1a90790e0_arg))._field_kind);
					if (_87321_argd == nullptr) {
						return nullptr;
					}
					(*(_86613_model))._field_exprs = jule::alloc_for_append((*(_86613_model))._field_exprs,1);(*(_86613_model))._field_exprs.__push((*(_87321_argd))._field_model);
				}
				_iter_next_4397089024:;
				++it;
				goto _iter_begin_4397089024;
			}
			_iter_end_4397089024:;
		}
	}
	(*(_85313_r))._field_model=jule::Any(_86613_model);
	return _85313_r;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_debug_out(jule::Ptr<_1a8b431d7_Eval>& _88538_e,jule::Ptr<_1b7509a90_FnCallExpr>& _88553_fc,jule::Ptr<_1a8b431d7_Data>& _88575_d) {
	_88575_d=_1a90790e0_builtin_caller_out(_88538_e,_88553_fc,_88575_d);
	if (_88575_d == nullptr) {
		return nullptr;
	}
	(*((*(_88575_d))._field_model.operator jule::Ptr<_1a69b8d2e_BuiltinOutCallExprModel>()))._field_debug=true;
	return _88575_d;
}



inline jule::Ptr<_1a8b431d7_Data> _1a90790e0_builtin_caller_std_debug_outln(jule::Ptr<_1a8b431d7_Eval>& _89540_e,jule::Ptr<_1b7509a90_FnCallExpr>& _89555_fc,jule::Ptr<_1a8b431d7_Data>& _89577_d) {
	_89577_d=_1a90790e0_builtin_caller_outln(_89540_e,_89555_fc,_89577_d);
	if (_89577_d == nullptr) {
		return nullptr;
	}
	(*((*(_89577_d))._field_model.operator jule::Ptr<_1a69b8d2e_BuiltinOutlnCallExprModel>()))._field_debug=true;
	return _89577_d;
}



inline std::tuple<jule::Bool,jule::Bool> _1b71c24a0_check_os(jule::Str _1113_arg) {
	jule::Bool _1125_ok = jule::Bool();
	jule::Bool _1135_exist = jule::Bool();
	_1125_ok=false;
	_1135_exist=true;
	{
		auto &_match_expr{ _1113_arg };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_4404832896:;
			{
				_1125_ok=_1b698aa8d_is_windows(_211b246b0_OS);
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_4404832992:;
			{
				_1125_ok=_1b698aa8d_is_darwin(_211b246b0_OS);
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_4404833088:;
			{
				_1125_ok=_1b698aa8d_is_linux(_211b246b0_OS);
			}
		}
		else if (_match_expr == jule::Str("unix", 4)) {
			_case_begin_4404833184:;
			{
				_1125_ok=_1b698aa8d_is_unix(_211b246b0_OS);
			}
		}
		else {
			_case_begin_4404832512:;
			{
				_1125_ok=true;
				_1135_exist=false;
			}
		}
		_match_end_4404831792:;
	}
	return std::make_tuple(_1125_ok,_1135_exist);
}



inline std::tuple<jule::Bool,jule::Bool> _1b71c24a0_check_arch(jule::Str _2815_arg) {
	jule::Bool _2827_ok = jule::Bool();
	jule::Bool _2837_exist = jule::Bool();
	_2827_ok=false;
	_2837_exist=true;
	{
		auto &_match_expr{ _2815_arg };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_4404842576:;
			{
				_2827_ok=_1b698aa8d_is_i386(_211b246b0_ARCH);
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_4404842672:;
			{
				_2827_ok=_1b698aa8d_is_amd64(_211b246b0_ARCH);
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_4404842768:;
			{
				_2827_ok=_1b698aa8d_is_arm64(_211b246b0_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x64", 3)) {
			_case_begin_4404842864:;
			{
				_2827_ok=_1b698aa8d_is_64bit(_211b246b0_ARCH);
			}
		}
		else if (_match_expr == jule::Str("x32", 3)) {
			_case_begin_4404844224:;
			{
				_2827_ok=_1b698aa8d_is_32bit(_211b246b0_ARCH);
			}
		}
		else {
			_case_begin_4404842096:;
			{
				_2827_ok=true;
				_2837_exist=false;
			}
		}
		_match_end_4404841376:;
	}
	return std::make_tuple(_2827_ok,_2837_exist);
}



inline jule::Bool _1b71c24a0_is_pass_file_annotation(jule::Str _4732_p) {
	_4732_p=_1ce9be05e_base(_4732_p);
	jule::I64 _499_n = _4732_p.len();
	_4732_p=_4732_p.slice(0LL,_499_n - _1ce9be05e_ext(_4732_p).len());
	jule::Str _5513_a1 = jule::Str();
	jule::Str _5813_a2 = jule::Str();
	jule::Int _6113_i = _1cea16edb_find_last_byte(_4732_p,'_');
	if (_6113_i == -1LL) {
		jule::Bool _6418_ok;
		jule::Bool _6426_exist;
		std::tie(_6418_ok,_6426_exist) = _1b71c24a0_check_os(_4732_p);
		if (_6426_exist) {
			return _6418_ok;
		}
		std::tie(_6418_ok,_6426_exist) = _1b71c24a0_check_arch(_4732_p);
		return (!(_6426_exist)) || _6418_ok;
	}
	if ((_6113_i + 1LL) >= _499_n) {
		return true;
	}
	_5513_a1=_4732_p.slice(_6113_i + 1LL);
	_4732_p=_4732_p.slice(0LL,_6113_i);
	_6113_i=static_cast<jule::Int>(_1cea16edb_find_last_byte(_4732_p,'_'));
	if (_6113_i != -1LL) {
		_5813_a2=_4732_p.slice(_6113_i + 1LL);
	}
	if (_5813_a2 == jule::Str()) {
		jule::Bool _8518_ok;
		jule::Bool _8526_exist;
		std::tie(_8518_ok,_8526_exist) = _1b71c24a0_check_os(_5513_a1);
		if (_8526_exist) {
			return _8518_ok;
		}
		std::tie(_8518_ok,_8526_exist) = _1b71c24a0_check_arch(_5513_a1);
		return (!(_8526_exist)) || _8518_ok;
	}
	jule::Bool _9314_ok;
	jule::Bool _9322_exist;
	std::tie(_9314_ok,_9322_exist) = _1b71c24a0_check_arch(_5513_a1);
	if (_9322_exist) {
		if ((!(_9314_ok))) {
			return false;
		}
		jule::Bool _9814_ok;
		jule::Bool _9818_exist;
		std::tie(_9814_ok,_9818_exist) = _1b71c24a0_check_os(_5813_a2);
		return (!(_9818_exist)) || _9814_ok;
	}
	std::tie(_9314_ok,_9322_exist) = _1b71c24a0_check_os(_5513_a1);
	return (!(_9322_exist)) || _9314_ok;
}



inline void _1b74b0d98_set_os_vars(void) {
	{
		auto &_match_expr{ _211b246b0_OS };
		
		if (_match_expr == jule::Str("windows", 7)) {
			_case_begin_4404877968:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("windows", 7));
			}
		}
		else if (_match_expr == jule::Str("linux", 5)) {
			_case_begin_4404878624:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("linux", 5));
			}
		}
		else if (_match_expr == jule::Str("darwin", 6)) {
			_case_begin_4404878720:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("darwin", 6));
			}
		}
		_match_end_4404874064:;
	}
	if (_1b698aa8d_is_unix(_211b246b0_OS)) {
		_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("unix", 4));
	}
}



inline void _1b74b0d98_set_arch_vars(void) {
	{
		auto &_match_expr{ _211b246b0_ARCH };
		
		if (_match_expr == jule::Str("i386", 4)) {
			_case_begin_4404883104:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("i386", 4));
			}
		}
		else if (_match_expr == jule::Str("amd64", 5)) {
			_case_begin_4404883200:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("amd64", 5));
			}
		}
		else if (_match_expr == jule::Str("arm64", 5)) {
			_case_begin_4404879808:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("arm64", 5));
			}
		}
		_match_end_4404879088:;
	}
	if (_1b698aa8d_is_64bit(_211b246b0_ARCH)) {
		_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("x64", 3));
	}
	if (_1b698aa8d_is_32bit(_211b246b0_ARCH)) {
		_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("x32", 3));
	}
}



inline void _1b74b0d98_init_vars(void) {
	_1b74b0d98_set_os_vars();
	_1b74b0d98_set_arch_vars();
	if (_211b70ab3_PRODUCTION) {
		_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("production", 10));
	}
	if (_211b7d3b7_TEST) {
		_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("test", 4));
	}
	{
		auto &_match_expr{ _211b7d3b7_COMPILER };
		
		if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_4404894960:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("clang", 5));
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_4404885888:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("gcc", 3));
			}
		}
		_match_end_4404896096:;
	}
	{
		auto &_match_expr{ _211b7d3b7_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_4404893056:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("cpp14", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_4404893152:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("cpp17", 5));
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_4404898144:;
			{
				_1b74b0d98_VARS = jule::alloc_for_append(_1b74b0d98_VARS,1);_1b74b0d98_VARS.__push(jule::Str("cpp20", 5));
			}
		}
		_match_end_4404898576:;
	}
}



inline void _1b74c00a5_exit_err(jule::Str _2513_msg) {
	
	jule::outln(_2513_msg);
	_211c5d002_exit(1LL);
}



inline jule::Slice<jule::U8> _1b74c00a5_read_buff(jule::Str _3314_path) {
	return ({
		auto except = _1ce96429b_File::_static_method_read(_3314_path);
		(except.ok()) ? (except.result) : ({{
			_1b74c00a5_exit_err(jule::Str("error: file cannot read", 23));
			return nullptr;
			return nullptr;
		} jule::Slice<jule::U8>();});
	});
}



inline _1b6986b22_Log _1b74c00a5_flat_compiler_err(jule::Str _4222_text) {
	return _1b6986b22_Log(1LLU,jule::Int(),jule::Int(),jule::Str(),_4222_text,jule::Str(),jule::Str());
}



inline std::tuple<jule::Bool,jule::Slice<_1b6986b22_Log>> _1b74c00a5_is_pass_build_directives(jule::Ptr<_1b74bea77_Ast>& _5034_file) {
	{
		auto &expr = (*(_5034_file))._field_top_directives;
		auto it = expr.begin();
		_iter_begin_4404906752:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> _1b74c00a5_td = *it;
			{
				if ((*(_1b74c00a5_td))._field_tag._field_kind != jule::Str("build", 5)) {
					goto _iter_next_4404906752;
				}
				_1b74b0925_DirectiveEval _5617_de = _1b74b0925_DirectiveEval(jule::Slice<_1b6986b22_Log>(),_1b74c00a5_td);
				jule::Bool _5913_result = _5617_de._method_eval();
				if (_5617_de._field_logs.len() > 0LL) {
					return std::make_tuple(false,_5617_de._field_logs);
				}
				if ((!(_5913_result))) {
					return std::make_tuple(false,nullptr);
				}
			}
			_iter_next_4404906752:;
			++it;
			goto _iter_begin_4404906752;
		}
		_iter_end_4404906752:;
	}
	return std::make_tuple(true,nullptr);
}



inline void _1b719bcc6_push_passes(jule::Ptr<_1a6e9a574_Package>& _8621_p,jule::Slice<jule::Str>& _8645_passes) {
	{
		auto &expr = (*(_8621_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4405087856:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1b719bcc6_f = *it;
			{
				_julec_label_push:;
				{
					auto &expr = (*(_1b719bcc6_f))._field_passes;
					auto it = expr.begin();
					_iter_begin_4405090080:;
					if (it != expr.end()) {
						_1b6a47496_Pass &_1b719bcc6_pass = *it;
						{
							if (_1b719bcc6_pass._field_text == jule::Str()) {
								goto _iter_next_4405090080;
							}
							{
								auto &expr = _8645_passes;
								auto it = expr.begin();
								_iter_begin_4405092864:;
								if (it != expr.end()) {
									jule::Str &_1b719bcc6_cpass = *it;
									{
										if (_1b719bcc6_cpass == _1b719bcc6_pass._field_text) {
											goto _iter_next_4405090080;
										}
									}
									_iter_next_4405092864:;
									++it;
									goto _iter_begin_4405092864;
								}
								_iter_end_4405092864:;
							}
							_8645_passes = jule::alloc_for_append(_8645_passes,1);_8645_passes.__push(_1b719bcc6_pass._field_text);
						}
						_iter_next_4405090080:;
						++it;
						goto _iter_begin_4405090080;
					}
					_iter_end_4405090080:;
				}
			}
			_iter_next_4405087856:;
			++it;
			goto _iter_begin_4405087856;
		}
		_iter_end_4405087856:;
	}
}



inline jule::Slice<jule::Str> _1b719bcc6_get_all_unique_passes(jule::Ptr<_1a6e9a574_Package>& _10331_pkg,jule::Slice<jule::Ptr<_1a6e9a574_ImportInfo>> _10356_uses) {
	jule::Slice<jule::Str> _10413_passes = nullptr;
	_1b719bcc6_push_passes(_10331_pkg,_10413_passes);
	{
		auto &expr = _10356_uses;
		auto it = expr.begin();
		_iter_begin_4405097200:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1b719bcc6_u = *it;
			{
				if ((!((*(_1b719bcc6_u))._field_cpp_linked))) {
					_1b719bcc6_push_passes((*(_1b719bcc6_u))._field_package,_10413_passes);
				}
			}
			_iter_next_4405097200:;
			++it;
			goto _iter_begin_4405097200;
		}
		_iter_end_4405097200:;
	}
	return _10413_passes;
}



inline jule::Bool _1b7467756_is_exist(jule::Slice<jule::Any> _3013_arr,jule::Any _3025_t) {
	{
		auto &expr = _3013_arr;
		auto it = expr.begin();
		_iter_begin_4405206096:;
		if (it != expr.end()) {
			jule::Any &_1b7467756_ref = *it;
			{
				if (_3025_t == _1b7467756_ref) {
					return true;
				}
			}
			_iter_next_4405206096:;
			++it;
			goto _iter_begin_4405206096;
		}
		_iter_end_4405206096:;
	}
	return false;
}



inline jule::Bool _1b7467756_is_dead(jule::Any _4016_ref) {
	jule::Bool _4028_dead = jule::Bool();
	if (_1b7467756_is_exist(_1b7467756_deads,_4016_ref)) {
		_4028_dead = true;
		return _4028_dead;
	}
	{
		auto &_match_expr{ _4016_ref };
		
		if (_match_expr.type_is<jule::Ptr<_1a691a500_FnIns>>()) {
			_case_begin_4405214512:;
			{
				if ((*((*(_4016_ref.operator jule::Ptr<_1a691a500_FnIns>()))._field_decl))._method_is_init()) {
					goto _match_end_4405210592;
				}
				goto _case_begin_4405210176;
			}
		}
		else {
			_case_begin_4405210176:;
			{
				if ((_1b7467756_current == _4016_ref) || (_1b7467756_main_current == _4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
				if (_1b7467756_is_exist(_1b7467756_checking,_4016_ref)) {
					_4028_dead = true;
					return _4028_dead;
				}
			}
		}
		_match_end_4405210592:;
	}
	jule::Any _6113_old = _1b7467756_current;
	_1b7467756_current=_4016_ref;
	jule::I64 _639_len = _1b7467756_checking.len();
	_1b7467756_checking = jule::alloc_for_append(_1b7467756_checking,1);_1b7467756_checking.__push(_4016_ref);
	__JULE_DEFER({
		_1b7467756_current=_6113_old;
		_1b7467756_drop_ref(_1b7467756_checking,_639_len);
	});
	{
		auto &_match_expr{ _4016_ref };
		
		if (_match_expr.type_is<jule::Ptr<_1a691a500_FnIns>>()) {
			_case_begin_4405221840:;
			{
				_4028_dead = _1b7467756_is_fn_dead(_4016_ref.operator jule::Ptr<_1a691a500_FnIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4405221936:;
			{
				_4028_dead = _1b7467756_is_var_dead(_4016_ref.operator jule::Ptr<_1a7003e4b_Var>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7905331_StructIns>>()) {
			_case_begin_4405222096:;
			{
				_4028_dead = _1b7467756_is_struct_dead(_4016_ref.operator jule::Ptr<_1b7905331_StructIns>());
				return _4028_dead;
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b76b472d_Trait>>()) {
			_case_begin_4405222192:;
			{
				_4028_dead = _1b7467756_is_trait_dead(_4016_ref.operator jule::Ptr<_1b76b472d_Trait>());
				return _4028_dead;
			}
		}
		else {
			_case_begin_4405217232:;
			{
				_4028_dead = false;
				return _4028_dead;
			}
		}
		_match_end_4405219376:;
	}
}



inline void _1b7467756_drop_ref(jule::Slice<jule::Any>& _9218_refs,jule::Int _9231_pos) {
	_9218_refs=_9218_refs.slice(0LL,_9231_pos);
}



inline jule::Bool _1b7467756_is_all_references_are_dead(jule::Ptr<_1b6a47496_ReferenceStack> _10035_references) {
	jule::Int _10113_i = 0LL;
	for (; _10113_i < (*(_10035_references))._method_len(); (_10113_i)++) {
		{
			jule::Any _10317_ref = (*(_10035_references))._method_at(_10113_i);
			if (_10317_ref == _1b7467756_current) {
				goto _iter_next_4405230880;
			}
			if (_10317_ref == _1b7467756_main_current) {
				goto _iter_next_4405230880;
			}
			if ((!(_1b7467756_is_dead(_10317_ref)))) {
				return false;
			}
		}
	_iter_next_4405230880:;
	}
	_iter_end_4405230880:;
	return true;
}



inline jule::Bool _1b7467756_is_fn_dead(jule::Ptr<_1a691a500_FnIns> _11719_f) {
	if ((*((*(_11719_f))._field_decl))._field_cpp_linked || (*(_11719_f))._field_anon) {
		return false;
	}
	if ((*((*(_11719_f))._field_decl))._method_is_entry_point() || (*((*(_11719_f))._field_decl))._method_is_init()) {
		return (!((*((*(_11719_f))._field_decl))._field_statically));
	}
	if ((*(_11719_f))._field_owner != nullptr) {
		if (_1b7467756_is_exist(_1b7467756_checking,jule::Any((*(_11719_f))._field_owner))) {
			return true;
		}
		return _1b7467756_is_dead(jule::Any((*(_11719_f))._field_owner));
	}
	return _1b7467756_is_all_references_are_dead((*(_11719_f))._field_references);
}



inline jule::Bool _1b7467756_is_var_dead(jule::Ptr<_1a7003e4b_Var> _14320_v) {
	if ((*(_14320_v))._field_constant) {
		return true;
	}
	if ((*(_14320_v))._field_cpp_linked) {
		return false;
	}
	return _1b7467756_is_all_references_are_dead((*(_14320_v))._field_references);
}



inline jule::Bool _1b7467756_is_struct_dead(jule::Ptr<_1b7905331_StructIns> _19323_s) {
	return false;
}



inline jule::Bool _1b7467756_is_trait_dead(jule::Ptr<_1b76b472d_Trait> _21022_t) {
	return false;
}



inline void _1b7467756_eliminate_dead_functions(jule::Slice<jule::Ptr<_1a691a500_Fn>>& _22734_funcs) {
	jule::Int _22813_i = 0LL;
	while (_22813_i < _22734_funcs.len()) {
		{
			jule::Ptr<_1a691a500_Fn> _23017_f = _22734_funcs[_22813_i];
			jule::Int _23117_j = 0LL;
			while (_23117_j < (*(_23017_f))._field_instances.len()) {
				{
					jule::Ptr<_1a691a500_FnIns> _23321_ins = (*(_23017_f))._field_instances[_23117_j];
					_1b7467756_main_current=jule::Any(_23321_ins);
					if (_1b7467756_is_fn_dead(_23321_ins)) {
						_1b7467756_deads = jule::alloc_for_append(_1b7467756_deads,1);_1b7467756_deads.__push(jule::Any(_23321_ins));
						(*(_23017_f))._field_instances=jule::append((*(_23017_f))._field_instances.slice(0LL,_23117_j),(*(_23017_f))._field_instances.slice(_23117_j + 1LL));
					} else {
						(_23117_j)++;
					}
				}
			_iter_next_4405285696:;
			}
			_iter_end_4405285696:;
			if ((*(_23017_f))._field_instances.len() == 0LL) {
				_22734_funcs=jule::append(_22734_funcs.slice(0LL,_22813_i),_22734_funcs.slice(_22813_i + 1LL));
				goto _iter_next_4405283440;
			}
			(_22813_i)++;
		}
	_iter_next_4405283440:;
	}
	_iter_end_4405283440:;
}



inline void _1b7467756_eliminate_dead_globals(jule::Ptr<_1a6e9a574_Package>& _25232_pkg) {
	{
		auto &expr = (*(_25232_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_4405292528:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1b7467756_f = *it;
			{
				jule::Int _25417_i = 0LL;
				while (_25417_i < (*(_1b7467756_f))._field_vars.len()) {
					{
						jule::Ptr<_1a7003e4b_Var> _25621_v = (*(_1b7467756_f))._field_vars[_25417_i];
						_1b7467756_main_current=jule::Any(_25621_v);
						if (_1b7467756_is_var_dead(_25621_v)) {
							_1b7467756_deads = jule::alloc_for_append(_1b7467756_deads,1);_1b7467756_deads.__push(jule::Any(_25621_v));
							(*(_1b7467756_f))._field_vars=jule::append((*(_1b7467756_f))._field_vars.slice(0LL,_25417_i),(*(_1b7467756_f))._field_vars.slice(_25417_i + 1LL));
						} else {
							(_25417_i)++;
						}
					}
				_iter_next_4405299440:;
				}
				_iter_end_4405299440:;
			}
			_iter_next_4405292528:;
			++it;
			goto _iter_begin_4405292528;
		}
		_iter_end_4405292528:;
	}
}



inline void _1b7467756_eliminate_dead_functions_package(jule::Ptr<_1a6e9a574_Package>& _26842_pkg) {
	{
		auto &expr = (*(_26842_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_4405302656:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1b7467756_f = *it;
			{
				_1b7467756_eliminate_dead_functions((*(_1b7467756_f))._field_funcs);
			}
			_iter_next_4405302656:;
			++it;
			goto _iter_begin_4405302656;
		}
		_iter_end_4405302656:;
	}
}



inline void _1b7467756_catch_alive_init(jule::Ptr<_1a6e9a574_Package>& _31626_pkg) {
	
	
	jule::Ptr<_1a691a500_Fn> _31913_f = (*(_31626_pkg))._method_find_fn(jule::Str("init", 4),false);
	if (_31913_f == nullptr) {
		return;
	}
	jule::I64 _3249_n = _1b7467756_deads.len();
	__JULE_DEFER({
		_1b7467756_deads=_1b7467756_deads.slice(0LL,_3249_n);
		_1b7467756_checking=nullptr;
		_1b7467756_current=jule::Any(nullptr);
	});
	jule::Ptr<_1a691a500_FnIns> _33213_ins = (*(_31913_f))._field_instances[0LL];
	jule::Int _33313_i = 0LL;
	for (; _33313_i < (*((*(_33213_ins))._field_refers))._method_len(); (_33313_i)++) {
		{
			if ((!(_1b7467756_is_dead((*((*(_33213_ins))._field_refers))._method_at(_33313_i))))) {
				(*(_31913_f))._field_statically=true;
				return;
			}
		}
	_iter_next_4405332192:;
	}
	_iter_end_4405332192:;
}



inline void _1b7467756_eliminate_package(jule::Ptr<_1a6e9a574_Package>& _34227_pkg) {
	_1b7467756_deads=jule::Slice<jule::Any>::alloc(0LL,2000LL);
	_1b7467756_catch_alive_init(_34227_pkg);
	_1b7467756_eliminate_dead_globals(_34227_pkg);
	_1b7467756_eliminate_dead_functions_package(_34227_pkg);
}



inline void _1b7467756_eliminate_defines(jule::Ptr<_1b719bcc6_IR>& _35431_ir) {
	jule::I64 _35513_i = (*(_35431_ir))._field_used.len() - 1LL;
	for (; _35513_i >= 0LL; (_35513_i)--) {
		{
			jule::Ptr<_1a6e9a574_ImportInfo> _35717_u = (*(_35431_ir))._field_used[_35513_i];
			if ((!((*(_35717_u))._field_cpp_linked))) {
				_1b7467756_eliminate_package((*(_35717_u))._field_package);
			}
		}
	_iter_next_4405353376:;
	}
	_iter_end_4405353376:;
	_1b7467756_eliminate_package((*(_35431_ir))._field_main);
	_1b7467756_deads=nullptr;
	_1b7467756_checking=nullptr;
	_1b7467756_current=jule::Any(nullptr);
}



inline void _1b719b688_eliminate_dead_code_of_scope(jule::Ptr<_1a6bc3e29_Scope> _7937_s) {
	jule::Ptr<_1b719b688_ScopeDeadCode> _8013_sdc = jule::new_struct_ptr<_1b719b688_ScopeDeadCode>(new( std::nothrow ) _1b719b688_ScopeDeadCode(jule::Ptr<_1b719b688_ScopeDeadCode>(),_7937_s,(&((*(_7937_s))._field_stmts)),jule::Int()));
	{
		(*(_8013_sdc))._method_optimize_stmts();
	}
}



inline void _1b719b688_eliminate_scope_functions(jule::Slice<jule::Ptr<_1a691a500_Fn>>& _8835_funcs) {
	{
		auto &expr = _8835_funcs;
		auto it = expr.begin();
		_iter_begin_4405365536:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1b719b688_func = *it;
			{
				{
					auto &expr = (*(_1b719b688_func))._field_instances;
					auto it = expr.begin();
					_iter_begin_4405369120:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_FnIns> _1b719b688_ins = *it;
						{
							_1b719b688_eliminate_dead_code_of_scope((*(_1b719b688_ins))._field_scope);
						}
						_iter_next_4405369120:;
						++it;
						goto _iter_begin_4405369120;
					}
					_iter_end_4405369120:;
				}
			}
			_iter_next_4405365536:;
			++it;
			goto _iter_begin_4405365536;
		}
		_iter_end_4405365536:;
	}
}



inline void _1b719b688_eliminate_functions_scope_package(jule::Ptr<_1a6e9a574_Package>& _9643_pkg) {
	{
		auto &expr = (*(_9643_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_4405368432:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1b719b688_f = *it;
			{
				_1b719b688_eliminate_scope_functions((*(_1b719b688_f))._field_funcs);
			}
			_iter_next_4405368432:;
			++it;
			goto _iter_begin_4405368432;
		}
		_iter_end_4405368432:;
	}
}



inline void _1b719b688_eliminate_scope_package(jule::Ptr<_1a6e9a574_Package>& _10233_pkg) {
	_1b719b688_eliminate_functions_scope_package(_10233_pkg);
}



inline void _1b719b688_eliminate_scopes(jule::Ptr<_1b719bcc6_IR>& _10730_ir) {
	jule::I64 _10813_i = (*(_10730_ir))._field_used.len() - 1LL;
	for (; _10813_i >= 0LL; (_10813_i)--) {
		{
			jule::Ptr<_1a6e9a574_ImportInfo> _11017_u = (*(_10730_ir))._field_used[_10813_i];
			if ((!((*(_11017_u))._field_cpp_linked))) {
				_1b719b688_eliminate_scope_package((*(_11017_u))._field_package);
			}
		}
	_iter_next_4405372544:;
	}
	_iter_end_4405372544:;
	_1b719b688_eliminate_scope_package((*(_10730_ir))._field_main);
}



inline jule::U64 _1a9612e81_unix(void) {
	return static_cast<jule::U64>(static_cast<jule::U64>(time(nullptr)));
}



inline jule::U64 _1a9612e81_unix_year_to_seconds(jule::Uint _25725_y,jule::Bool& _25743_leap) {
	if ((_25725_y - 2LL) <= 136LL) {
		jule::Uint _25917_leaps = (_25725_y - 68LL) >> 2LL;
		_25743_leap=((_25725_y - 68LL) & 3LL) == 0LL;
		if (_25743_leap) {
			(_25917_leaps)--;
		}
		return static_cast<jule::Uint>((31536000LL * (_25725_y - 70LL)) + (86400LL * _25917_leaps));
	}
	jule::Uint _26713_leaps = 0LLU;
	jule::Uint _26813_centuries = 0LLU;
	jule::Uint _26913_cycles = _25725_y - 100LL / 400LL;
	jule::Uint _27013_rem = _25725_y - 100LL % 400LL;
	if (_27013_rem < 0LL) {
		(_26913_cycles)--;
		_27013_rem+=400LL;
	}
	if (_27013_rem == 0LL) {
		_25743_leap=true;
		_26813_centuries=0LL;
		_26713_leaps=0LL;
	} else {
		if (_27013_rem >= 200LL) {
			if (_27013_rem >= 300LL) {
				_26813_centuries=3LL;
				_27013_rem-=300LL;
			} else {
				_26813_centuries=2LL;
				_27013_rem-=200LL;
			}
		} else {
			if (_27013_rem >= 100LL) {
				_26813_centuries=1LL;
				_27013_rem-=100LL;
			} else {
				_26813_centuries=0LL;
			}
		}
		if (_27013_rem == 0LL) {
			_25743_leap=false;
			_26713_leaps=0LL;
		} else {
			_26713_leaps=static_cast<jule::Uint>(_27013_rem >> 2LLU);
			_27013_rem = (_27013_rem % 4LL);
			_25743_leap=_27013_rem == 0LL;
		}
	}
	_26713_leaps+=static_cast<jule::Uint>((97LL * _26913_cycles) + (24LL * _26813_centuries));
	if (_25743_leap) {
		(_26713_leaps)++;
	}
	return static_cast<jule::Uint>(((((_25725_y - 100LL) * 31536000LL) + (_26713_leaps * 86400LL)) + 946684800LL) + 86400LL);
}



inline jule::U64 _1a9612e81_unix_month_to_seconds(jule::Uint _31426_m,jule::Bool _31439_leap) {
	jule::U64 _31613_t = 0LLU;
	{
		auto &_match_expr{ _31426_m };
		
		if (_match_expr == 1LL) {
			_case_begin_4382559856:;
			{
				_31613_t=2678400LL;
			}
		}
		else if (_match_expr == 2LL) {
			_case_begin_4382563936:;
			{
				_31613_t=5097600LL;
			}
		}
		else if (_match_expr == 3LL) {
			_case_begin_4382564032:;
			{
				_31613_t=7776000LL;
			}
		}
		else if (_match_expr == 4LL) {
			_case_begin_4382564128:;
			{
				_31613_t=10368000LL;
			}
		}
		else if (_match_expr == 5LL) {
			_case_begin_4382564224:;
			{
				_31613_t=13046400LL;
			}
		}
		else if (_match_expr == 6LL) {
			_case_begin_4382564320:;
			{
				_31613_t=15638400LL;
			}
		}
		else if (_match_expr == 7LL) {
			_case_begin_4382564416:;
			{
				_31613_t=18316800LL;
			}
		}
		else if (_match_expr == 8LL) {
			_case_begin_4382564528:;
			{
				_31613_t=20995200LL;
			}
		}
		else if (_match_expr == 9LL) {
			_case_begin_4382564640:;
			{
				_31613_t=23587200LL;
			}
		}
		else if (_match_expr == 10LL) {
			_case_begin_4382564752:;
			{
				_31613_t=26265600LL;
			}
		}
		else if (_match_expr == 11LL) {
			_case_begin_4382564864:;
			{
				_31613_t=28857600LL;
			}
		}
		_match_end_4382563520:;
	}
	if (_31439_leap && (_31426_m >= 2LL)) {
		_31613_t+=86400LL;
	}
	return _31613_t;
}



inline jule::Bool _1b6d721b6_iter_expr_is_copy_optimizable(jule::Ptr<_1a8b431d7_Data>& _3835_expr,jule::Ptr<_1a7003e4b_Var>& _3849_v) {
	return ((!((*(_3835_expr))._field_lvalue)) && (!((*((*(_3835_expr))._field_kind))._method_mutable()))) || (!((*(_3849_v))._field_mutable));
}



inline jule::Str _1b6d721b6_gen_range_index_iter(jule::Ptr<_1a6bc3e29_RangeIter>& _4230_it) {
	jule::Str _439_begin = _1a946cd0d_iter_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	jule::Str _449_next = _1a946cd0d_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	jule::Str _4613_obj = jule::Str("{\n", 2);
	_1a94c037c_add_indent();
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=jule::Str("auto ", 5);
	if (_211b70ab3_OPT_COPY && (*((*(_4230_it))._field_expr))._field_lvalue) {
		_4613_obj+=jule::Str("&", 1);
	}
	_4613_obj+=jule::Str("expr = ", 7);
	_4613_obj+=_1a709c632_gen_expr_model((*((*(_4230_it))._field_expr))._field_model);
	_4613_obj+=jule::Str(";\n", 2);
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_1a94c037c_add_indent();
	_4613_obj+=_1a94c037c_indent();
	if ((*(_4230_it))._field_key_a != nullptr) {
		_4613_obj+=_1a94c037c_gen_var_init_expr((*(_4230_it))._field_key_a,jule::Str("it - expr.begin()", 17));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_1a94c037c_indent();
	}
	if ((*(_4230_it))._field_key_b != nullptr) {
		if (_211b70ab3_OPT_COPY) {
			(*((*(_4230_it))._field_key_b))._field_reference=_1b6d721b6_iter_expr_is_copy_optimizable((*(_4230_it))._field_expr,(*(_4230_it))._field_key_b);
		}
		_4613_obj+=_1a94c037c_gen_var_init_expr((*(_4230_it))._field_key_b,jule::Str("*it", 3));
		_4613_obj+=jule::Str("\n", 1);
		_4613_obj+=_1a94c037c_indent();
	}
	_4613_obj+=_1b6d721b6_gen_scope((*(_4230_it))._field_scope);
	_4613_obj+=jule::Str("\n", 1);
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=_449_next;
	_4613_obj+=jule::Str(":;\n", 3);
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=jule::Str("++it;\n", 6);
	_4613_obj+=_1a94c037c_indent();
	if ((*(_4230_it))._field_key_a != nullptr) {
		_4613_obj+=_1a946cd0d_var_out_ident((*(_4230_it))._field_key_a);
		_4613_obj+=jule::Str("++;\n", 4);
		_4613_obj+=_1a94c037c_indent();
	}
	_4613_obj+=jule::Str("goto ", 5);
	_4613_obj+=_439_begin;
	_4613_obj+=jule::Str(";\n", 2);
	_1a94c037c_done_indent();
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=jule::Str("}\n", 2);
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=_1a946cd0d_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_4230_it)));
	_4613_obj+=jule::Str(":;\n", 3);
	_1a94c037c_done_indent();
	_4613_obj+=_1a94c037c_indent();
	_4613_obj+=jule::Str("}", 1);
	return _4613_obj;
}



inline jule::Str _1b6d721b6_gen_range_hashmap_iter(jule::Ptr<_1a6bc3e29_RangeIter>& _11232_it) {
	jule::Str _1139_begin = _1a946cd0d_iter_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	jule::Str _1149_next = _1a946cd0d_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	jule::Str _11613_obj = jule::Str("{\n", 2);
	_1a94c037c_add_indent();
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=jule::Str("auto ", 5);
	if (_211b70ab3_OPT_COPY && (*((*(_11232_it))._field_expr))._field_lvalue) {
		_11613_obj+=jule::Str("&", 1);
	}
	_11613_obj+=jule::Str("expr = ", 7);
	_11613_obj+=_1a709c632_gen_expr_model((*((*(_11232_it))._field_expr))._field_model);
	_11613_obj+=jule::Str(";\n", 2);
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=jule::Str("auto it = expr.begin();\n", 24);
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=jule::Str("if (it != expr.end()) {\n", 24);
	_1a94c037c_add_indent();
	_11613_obj+=_1a94c037c_indent();
	if ((*(_11232_it))._field_key_a != nullptr) {
		if (_211b70ab3_OPT_COPY) {
			(*((*(_11232_it))._field_key_a))._field_reference=_1b6d721b6_iter_expr_is_copy_optimizable((*(_11232_it))._field_expr,(*(_11232_it))._field_key_a);
		}
		_11613_obj+=_1a94c037c_gen_var_init_expr((*(_11232_it))._field_key_a,jule::Str("it->first", 9));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_1a94c037c_indent();
	}
	if ((*(_11232_it))._field_key_b != nullptr) {
		if (_211b70ab3_OPT_COPY) {
			(*((*(_11232_it))._field_key_b))._field_reference=_1b6d721b6_iter_expr_is_copy_optimizable((*(_11232_it))._field_expr,(*(_11232_it))._field_key_b);
		}
		_11613_obj+=_1a94c037c_gen_var_init_expr((*(_11232_it))._field_key_b,jule::Str("it->second", 10));
		_11613_obj+=jule::Str("\n", 1);
		_11613_obj+=_1a94c037c_indent();
	}
	_11613_obj+=_1b6d721b6_gen_scope((*(_11232_it))._field_scope);
	_11613_obj+=jule::Str("\n", 1);
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=_1149_next;
	_11613_obj+=jule::Str(":;\n", 3);
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=jule::Str("++it;\n", 6);
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=jule::Str("goto ", 5);
	_11613_obj+=_1139_begin;
	_11613_obj+=jule::Str(";\n", 2);
	_1a94c037c_done_indent();
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=jule::Str("}\n", 2);
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=_1a946cd0d_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_11232_it)));
	_11613_obj+=jule::Str(":;\n", 3);
	_1a94c037c_done_indent();
	_11613_obj+=_1a94c037c_indent();
	_11613_obj+=jule::Str("}", 1);
	return _11613_obj;
}



inline jule::Str _1b6d721b6_gen_if(jule::Ptr<_1a6bc3e29_If> _18015_i) {
	jule::Str _18113_obj = jule::Str();
	if ((*(_18015_i))._field_expr != nullptr) {
		_18113_obj+=jule::Str("if (", 4);
		_18113_obj+=_1a709c632_gen_expr((*(_18015_i))._field_expr);
		_18113_obj+=jule::Str(") ", 2);
	}
	_18113_obj+=_1b6d721b6_gen_scope((*(_18015_i))._field_scope);
	return _18113_obj;
}



inline jule::Str _1b6d721b6_gen_conditional(jule::Ptr<_1a6bc3e29_Conditional> _19124_c) {
	jule::Str _19213_obj = jule::Str();
	{
		auto &expr = (*(_19124_c))._field_elifs;
		auto it = expr.begin();
		_iter_begin_4383042480:;
		if (it != expr.end()) {
			jule::Ptr<_1a6bc3e29_If> _1b6d721b6_elif = *it;
			{
				if (_1b6d721b6_elif == nullptr) {
					goto _iter_next_4383042480;
				}
				if (_19213_obj.len() != 0LL) {
					_19213_obj+=jule::Str(" else ", 6);
				}
				_19213_obj+=_1b6d721b6_gen_if(_1b6d721b6_elif);
			}
			_iter_next_4383042480:;
			++it;
			goto _iter_begin_4383042480;
		}
		_iter_end_4383042480:;
	}
	if ((*(_19124_c))._field_default != nullptr) {
		if (_19213_obj.len() != 0LL) {
			_19213_obj+=jule::Str(" else ", 6);
		}
		_19213_obj+=_1b6d721b6_gen_scope((*((*(_19124_c))._field_default))._field_scope);
	}
	return _19213_obj;
}



inline jule::Str _1b6d721b6_gen_inf_iter(jule::Ptr<_1a6bc3e29_InfIter> _21421_it) {
	jule::Str _21513_obj = jule::Str("for (;;) {\n", 11);
	_1a94c037c_add_indent();
	_21513_obj+=_1a94c037c_indent();
	_21513_obj+=_1b6d721b6_gen_scope((*(_21421_it))._field_scope);
	_1a94c037c_done_indent();
	jule::Str _2229_indent = _1a94c037c_indent();
	_21513_obj+=jule::Str("\n", 1);
	_21513_obj+=_2229_indent;
	_21513_obj+=_1a946cd0d_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_21421_it)));
	_21513_obj+=jule::Str(":;\n", 3);
	_21513_obj+=_2229_indent;
	_21513_obj+=jule::Str("}\n", 2);
	_21513_obj+=_2229_indent;
	_21513_obj+=_1a946cd0d_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_21421_it)));
	_21513_obj+=jule::Str(":;", 2);
	return _21513_obj;
}



inline jule::Str _1b6d721b6_gen_while_iter(jule::Ptr<_1a6bc3e29_WhileIter> _23723_it) {
	jule::Str _23813_obj = jule::Str();
	if (((*(_23723_it))._field_expr != nullptr) && ((*(_23723_it))._field_next == nullptr)) {
		_23813_obj+=jule::Str("while (", 7);
		_23813_obj+=_1a709c632_gen_expr((*(_23723_it))._field_expr);
		_23813_obj+=jule::Str(") {\n", 4);
	} else {
		_23813_obj+=jule::Str("for (; ", 7);
		if ((*(_23723_it))._field_expr != nullptr) {
			_23813_obj+=_1a709c632_gen_expr((*(_23723_it))._field_expr);
		}
		_23813_obj+=jule::Str("; ", 2);
		if ((*(_23723_it))._field_next != nullptr) {
			jule::Str _25017_st = _1b6d721b6_gen_st((*(_23723_it))._field_next);
			_23813_obj+=_25017_st.slice(0LL,_25017_st.len() - 1LL);
		}
		_23813_obj+=jule::Str(") {\n", 4);
	}
	_1a94c037c_add_indent();
	_23813_obj+=_1a94c037c_indent();
	_23813_obj+=_1b6d721b6_gen_scope((*(_23723_it))._field_scope);
	_23813_obj+=jule::Str("\n", 1);
	_1a94c037c_done_indent();
	_23813_obj+=_1a94c037c_indent();
	_23813_obj+=_1a946cd0d_iter_next_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_23723_it)));
	_23813_obj+=jule::Str(":;\n", 3);
	_23813_obj+=_1a94c037c_indent();
	_23813_obj+=jule::Str("}\n", 2);
	_23813_obj+=_1a94c037c_indent();
	_23813_obj+=_1a946cd0d_iter_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_23723_it)));
	_23813_obj+=jule::Str(":;", 2);
	return _23813_obj;
}



inline jule::Str _1b6d721b6_gen_range_iter(jule::Ptr<_1a6bc3e29_RangeIter> _27323_it) {
	{
		
		if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_slc() != nullptr) {
			_case_begin_4406170192:;
			{
				return _1b6d721b6_gen_range_index_iter(_27323_it);
			}
		}
		else if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_arr() != nullptr) {
			_case_begin_4406170576:;
			{
				return _1b6d721b6_gen_range_index_iter(_27323_it);
			}
		}
		else if ((*((*((*(_27323_it))._field_expr))._field_kind))._method_map() != nullptr) {
			_case_begin_4406169824:;
			{
				return _1b6d721b6_gen_range_hashmap_iter(_27323_it);
			}
		}
		else {
			_case_begin_4406168896:;
			{
				return _1b6d721b6_gen_range_index_iter(_27323_it);
			}
		}
		_match_end_4406162544:;
	}
}



inline jule::Str _1b6d721b6_gen_cont(jule::Ptr<_1a6bc3e29_ContSt> _28213_c) {
	jule::Str _28313_obj = jule::Str("goto ", 5);
	_28313_obj+=_1a946cd0d_iter_next_label_ident((*(_28213_c))._field_it);
	_28313_obj+=jule::Str(";", 1);
	return _28313_obj;
}



inline jule::Str _1b6d721b6_gen_label(jule::Ptr<_1a6bc3e29_Label> _28914_l) {
	return _1a946cd0d_label_ident((*(_28914_l))._field_ident) + jule::Str(":;", 2);
}



inline jule::Str _1b6d721b6_gen_goto(jule::Ptr<_1a6bc3e29_GotoSt> _29313_gt) {
	jule::Str _29413_obj = jule::Str("goto ", 5);
	_29413_obj+=_1a946cd0d_label_ident((*(_29313_gt))._field_ident);
	_29413_obj+=jule::Str(";", 1);
	return _29413_obj;
}



inline jule::Str _1b6d721b6_gen_postfix(jule::Ptr<_1a6bc3e29_Postfix> _30020_p) {
	jule::Str _30113_obj = jule::Str("(", 1);
	_30113_obj+=_1a709c632_gen_expr((*(_30020_p))._field_expr);
	_30113_obj+=jule::Str(")", 1);
	_30113_obj+=(*(_30020_p))._field_op;
	_30113_obj+=jule::Str(";", 1);
	return _30113_obj;
}



inline jule::Str _1b6d721b6_gen_div_by_zero_assign(jule::Ptr<_1a6bc3e29_Assign> _30931_a) {
	jule::Str _31013_obj = _1a709c632_gen_expr((*((*(_30931_a))._field_l))._field_model);
	_31013_obj+=jule::Str(" = ", 3);
	_31013_obj+=_1a709c632_gen_div_by_zero_binop_expr_model((*(_30931_a))._field_op,(*(_30931_a))._field_l,(*(_30931_a))._field_r);
	_31013_obj+=jule::Str(";", 1);
	return _31013_obj;
}



inline jule::Str _1b6d721b6_gen_assign(jule::Ptr<_1a6bc3e29_Assign> _31719_a) {
	{
		auto &_match_expr{ (*(_31719_a))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/=", 2) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_4406197264:;
			{
				return _1b6d721b6_gen_div_by_zero_assign(_31719_a);
			}
		}
		_match_end_4406197104:;
	}
	jule::Str _32313_obj = _1a709c632_gen_expr((*((*(_31719_a))._field_l))._field_model);
	_32313_obj+=(*(_31719_a))._field_op._field_kind;
	if (_211b70ab3_OPT_APPEND) {
		{
			auto &_match_expr{ (*((*(_31719_a))._field_r))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>>()) {
				_case_begin_4406200560:;
				{
					jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel> _32821_model = (*((*(_31719_a))._field_r))._field_model.operator jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>();
					jule::Str _32918_expr;
					jule::Bool _32924_optimized;
					std::tie(_32918_expr,_32924_optimized) = _1a709c632_gen_builtin_append_call_expr_model_assign((*((*(_31719_a))._field_l))._field_model,_32821_model);
					if (_32924_optimized) {
						return _32918_expr;
					}
					_32313_obj+=_32918_expr;
				}
			}
			else {
				_case_begin_4406202912:;
				{
					_32313_obj+=_1a709c632_gen_expr((*((*(_31719_a))._field_r))._field_model);
				}
			}
			_match_end_4406202832:;
		}
	} else {
		_32313_obj+=_1a709c632_gen_expr((*((*(_31719_a))._field_r))._field_model);
	}
	_32313_obj+=jule::Str(";", 1);
	return _32313_obj;
}



inline jule::Str _1b6d721b6_gen_multi_assign(jule::Ptr<_1a6bc3e29_MultiAssign> _34525_a) {
	jule::Str _34613_obj = jule::Str("std::tie(", 9);
	{
		auto &expr = (*(_34525_a))._field_l;
		auto it = expr.begin();
		_iter_begin_4406213392:;
		if (it != expr.end()) {
			jule::Any _1b6d721b6_l = *it;
			{
				if (_1b6d721b6_l == nullptr) {
					_34613_obj+=jule::Str("std::ignore", 11);
					_34613_obj+=jule::Str(",", 1);
				} else {
					_34613_obj+=_1a709c632_gen_expr(_1b6d721b6_l);
					_34613_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_4406213392:;
			++it;
			goto _iter_begin_4406213392;
		}
		_iter_end_4406213392:;
	}
	_34613_obj=_34613_obj.slice(0LL,_34613_obj.len() - 1LL);
	_34613_obj+=jule::Str(") = ", 4);
	_34613_obj+=_1a709c632_gen_expr((*(_34525_a))._field_r);
	_34613_obj+=jule::Str(";", 1);
	return _34613_obj;
}



inline jule::Str _1b6d721b6_get_case_match_expr(jule::Ptr<_1a6bc3e29_Match>& _36729_m) {
	if ((!((*((*(_36729_m))._field_expr))._method_is_const()))) {
		return jule::Str("_match_expr", 11);
	}
	if ((!((*((*((*(_36729_m))._field_expr))._field_constant))._method_is_bool())) || (!((*((*((*(_36729_m))._field_expr))._field_constant))._method_read_bool()))) {
		return _1a709c632_gen_expr_model((*((*(_36729_m))._field_expr))._field_model);
	}
	return jule::Str();
}



inline jule::Str _1b6d721b6_gen_case(jule::Ptr<_1a6bc3e29_Match> _37717_m,jule::Ptr<_1a6bc3e29_Case> _37732_c) {
	jule::Str _37813_obj = jule::Str();
	if (((*(_37732_c))._field_exprs.len() != 0LL) && (!((*(_37717_m))._method_is_generic_type_match()))) {
		if (((*(_37717_m))._field_cases.len() > 0LL) && ((*(_37717_m))._field_cases[0LL] == _37732_c)) {
			_37813_obj+=jule::Str("if (", 4);
		} else {
			_37813_obj+=jule::Str("else if (", 9);
		}
		{
			auto &expr = (*(_37732_c))._field_exprs;
			auto it = expr.begin();
			_iter_begin_4406235920:;
			if (it != expr.end()) {
				jule::Int _1b6d721b6_i = it - expr.begin();
				jule::Ptr<_1a8b431d7_Data> _1b6d721b6_expr = *it;
				{
					{
						
						if ((!((*(_37717_m))._field_type_match))) {
							_case_begin_4406238352:;
							{
								jule::Str _38921_case_expr = _1b6d721b6_get_case_match_expr(_37717_m);
								if ((*((*(_37717_m))._field_expr))._method_good_operand(_1b6d721b6_expr)) {
									if (_38921_case_expr.len() != 0LL) {
										_37813_obj+=_38921_case_expr;
										_37813_obj+=jule::Str(" == ", 4);
									}
									_37813_obj+=_1a709c632_gen_expr((*(_1b6d721b6_expr))._field_model);
								} else {
									_37813_obj+=_1a709c632_gen_expr((*(_1b6d721b6_expr))._field_model);
									if (_38921_case_expr.len() != 0LL) {
										_37813_obj+=jule::Str(" == ", 4);
										_37813_obj+=_38921_case_expr;
									}
								}
							}
						}
						else {
							_case_begin_4406237552:;
							{
								_37813_obj+=jule::Str("_match_expr", 11);
								_37813_obj+=jule::Str(".type_is<", 9);
								_37813_obj+=_1a709c632_gen_expr((*(_1b6d721b6_expr))._field_model);
								_37813_obj+=jule::Str(">()", 3);
							}
						}
						_match_end_4406237376:;
					}
					if ((_1b6d721b6_i + 1LL) < (*(_37732_c))._field_exprs.len()) {
						_37813_obj+=jule::Str(" || ", 4);
					}
				}
				_iter_next_4406235920:;
				++it;
				_1b6d721b6_i++;
				goto _iter_begin_4406235920;
			}
			_iter_end_4406235920:;
		}
		_37813_obj+=jule::Str(") ", 2);
	} else if (((*(_37717_m))._field_default == _37732_c) && ((*(_37717_m))._field_cases.len() != 0LL)) {
		_37813_obj+=_1a94c037c_indent();
		_37813_obj+=jule::Str("else ", 5);
	}
	_1a94c037c_add_indent();
	_37813_obj+=jule::Str("{\n", 2);
	_37813_obj+=_1a94c037c_indent();
	_37813_obj+=_1a946cd0d_case_begin_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_37732_c)));
	_37813_obj+=jule::Str(":;\n", 3);
	if ((*((*(_37732_c))._field_scope))._field_stmts.len() > 0LL) {
		_37813_obj+=_1a94c037c_indent();
		_37813_obj+=_1b6d721b6_gen_scope((*(_37732_c))._field_scope);
		_37813_obj+=jule::Str("\n", 1);
	}
	_1a94c037c_done_indent();
	_37813_obj+=_1a94c037c_indent();
	_37813_obj+=jule::Str("}", 1);
	return _37813_obj;
}



inline jule::Str _1b6d721b6_gen_match(jule::Ptr<_1a6bc3e29_Match> _44218_m) {
	if (((*(_44218_m))._field_cases.len() == 0LL) && ((*(_44218_m))._field_default == nullptr)) {
		return jule::Str();
	}
	jule::Bool _4479_generic_type_match = (*(_44218_m))._method_is_generic_type_match();
	if (_4479_generic_type_match && (((*(_44218_m))._field_default == nullptr) || ((*((*((*(_44218_m))._field_default))._field_scope))._field_stmts.len() == 0LL))) {
		return jule::Str();
	}
	jule::Str _45213_obj = jule::Str("{\n", 2);
	_1a94c037c_add_indent();
	_45213_obj+=_1a94c037c_indent();
	if ((!(_4479_generic_type_match)) && (!((*((*(_44218_m))._field_expr))._method_is_const()))) {
		if ((*((*(_44218_m))._field_expr))._field_lvalue && _211b70ab3_OPT_COPY) {
			_45213_obj+=jule::Str("auto &_match_expr{ ", 19);
		} else {
			_45213_obj+=jule::Str("auto _match_expr{ ", 18);
		}
		_45213_obj+=_1a709c632_gen_expr((*((*(_44218_m))._field_expr))._field_model);
		_45213_obj+=jule::Str(" };\n", 4);
		_45213_obj+=_1a94c037c_indent();
	}
	if ((*(_44218_m))._field_cases.len() > 0LL) {
		{
			auto &expr = (*(_44218_m))._field_cases;
			auto it = expr.begin();
			_iter_begin_4406283440:;
			if (it != expr.end()) {
				jule::Ptr<_1a6bc3e29_Case> _1b6d721b6_c = *it;
				{
					if (_1b6d721b6_c == nullptr) {
						goto _iter_next_4406283440;
					}
					_45213_obj+=jule::Str("\n", 1);
					_45213_obj+=_1a94c037c_indent();
					_45213_obj+=_1b6d721b6_gen_case(_44218_m,_1b6d721b6_c);
				}
				_iter_next_4406283440:;
				++it;
				goto _iter_begin_4406283440;
			}
			_iter_end_4406283440:;
		}
	}
	if ((*(_44218_m))._field_default != nullptr) {
		_45213_obj+=jule::Str("\n", 1);
		_45213_obj+=_1b6d721b6_gen_case(_44218_m,(*(_44218_m))._field_default);
	}
	_45213_obj+=jule::Str("\n", 1);
	_45213_obj+=_1a94c037c_indent();
	_45213_obj+=_1a946cd0d_match_end_label_ident(static_cast<jule::Uintptr>(static_cast<jule::Uintptr>(_44218_m)));
	_45213_obj+=jule::Str(":;", 2);
	_45213_obj+=jule::Str("\n", 1);
	_1a94c037c_done_indent();
	_45213_obj+=_1a94c037c_indent();
	_45213_obj+=jule::Str("}", 1);
	return _45213_obj;
}



inline jule::Str _1b6d721b6_gen_fall_st(jule::Ptr<_1a6bc3e29_FallSt> _50016_f) {
	jule::Str _50113_obj = jule::Str("goto ", 5);
	_50113_obj+=_1a946cd0d_case_begin_label_ident((*(_50016_f))._field_dest_case);
	_50113_obj+=jule::Str(";", 1);
	return _50113_obj;
}



inline jule::Str _1b6d721b6_gen_break_st(jule::Ptr<_1a6bc3e29_BreakSt> _50717_b) {
	jule::Str _50813_obj = jule::Str("goto ", 5);
	if ((*(_50717_b))._field_it != 0LL) {
		_50813_obj+=_1a946cd0d_iter_end_label_ident((*(_50717_b))._field_it);
	} else {
		_50813_obj+=_1a946cd0d_match_end_label_ident((*(_50717_b))._field_mtch);
	}
	_50813_obj+=jule::Str(";", 1);
	return _50813_obj;
}



inline jule::Str _1b6d721b6_gen_ret_vars(jule::Ptr<_1a6bc3e29_RetSt> _51921_r) {
	jule::Str _52013_obj = jule::Str();
	{
		auto &expr = (*(_51921_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_4406304928:;
		if (it != expr.end()) {
			jule::Ptr<_1a7003e4b_Var> _1b6d721b6_v = *it;
			{
				if (_1b7553d92_is_ignore_ident((*(_1b6d721b6_v))._field_ident)) {
					_52013_obj+=_1a709c632_get_init_expr((*((*(_1b6d721b6_v))._field_kind))._field_kind);
				} else {
					_52013_obj+=_1a946cd0d_var_out_ident(_1b6d721b6_v);
				}
				_52013_obj+=jule::Str(",", 1);
			}
			_iter_next_4406304928:;
			++it;
			goto _iter_begin_4406304928;
		}
		_iter_end_4406304928:;
	}
	_52013_obj=_52013_obj.slice(0LL,_52013_obj.len() - 1LL);
	jule::Str _53213_oobj = jule::Str("return ", 7);
	if ((*((*((*(_51921_r))._field_func))._field_decl))._field_exceptional) {
		_53213_oobj+=jule::Str("jule::Exceptional<", 18);
		_53213_oobj+=_1a947143d_gen_type_kind((*((*(_51921_r))._field_func))._field_result);
		_53213_oobj+=jule::Str(">(jule::Any(), ", 15);
	}
	if ((*(_51921_r))._field_vars.len() > 1LL) {
		_53213_oobj+=jule::Str("std::make_tuple(", 16);
		_53213_oobj+=_52013_obj;
		_53213_oobj+=jule::Str(")", 1);
	} else {
		_53213_oobj+=_52013_obj;
	}
	if ((*((*((*(_51921_r))._field_func))._field_decl))._field_exceptional) {
		_53213_oobj+=jule::Str(")", 1);
	}
	_53213_oobj+=jule::Str(";", 1);
	return _53213_oobj;
}



inline jule::Str _1b6d721b6_gen_ret_expr_tuple(jule::Ptr<_1a6bc3e29_RetSt> _55627_r) {
	jule::Slice<jule::Ptr<_1a8b431d7_Data>> _55713_datas = (*((*(_55627_r))._field_expr.operator jule::Ptr<_1a69b8d2e_TupleExprModel>()))._field_datas;
	jule::Str _55813_obj = jule::Str();
	{
		auto &expr = (*(_55627_r))._field_vars;
		auto it = expr.begin();
		_iter_begin_4406324224:;
		if (it != expr.end()) {
			jule::Int _1b6d721b6_i = it - expr.begin();
			jule::Ptr<_1a7003e4b_Var> _1b6d721b6_v = *it;
			{
				if (_1b7553d92_is_ignore_ident((*(_1b6d721b6_v))._field_ident)) {
					goto _iter_next_4406324224;
				}
				jule::Any _56417_model = (*(_55713_datas[_1b6d721b6_i]))._field_model;
				if (_56417_model == _1b6d721b6_v) {
					goto _iter_next_4406324224;
				}
				jule::Str _56913_ident = _1a946cd0d_var_out_ident(_1b6d721b6_v);
				_55813_obj+=_56913_ident;
				_55813_obj+=jule::Str(" = ", 3);
				_55813_obj+=_1a709c632_gen_expr(_56417_model);
				_55813_obj+=jule::Str(";\n", 2);
				_55813_obj+=_1a94c037c_indent();
			}
			_iter_next_4406324224:;
			++it;
			_1b6d721b6_i++;
			goto _iter_begin_4406324224;
		}
		_iter_end_4406324224:;
	}
	jule::Str _57713_oobj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = _55713_datas;
		auto it = expr.begin();
		_iter_begin_4406325296:;
		if (it != expr.end()) {
			jule::Int _1b6d721b6_i = it - expr.begin();
			jule::Ptr<_1a8b431d7_Data> _1b6d721b6_d = *it;
			{
				jule::Ptr<_1a7003e4b_Var> _57917_v = (*(_55627_r))._field_vars[_1b6d721b6_i];
				if (_1b7553d92_is_ignore_ident((*(_57917_v))._field_ident)) {
					_57713_oobj+=_1a709c632_gen_expr((*(_1b6d721b6_d))._field_model);
				} else {
					_57713_oobj+=_1a946cd0d_var_out_ident(_57917_v);
				}
				_57713_oobj+=jule::Str(",", 1);
			}
			_iter_next_4406325296:;
			++it;
			_1b6d721b6_i++;
			goto _iter_begin_4406325296;
		}
		_iter_end_4406325296:;
	}
	_57713_oobj=_57713_oobj.slice(0LL,_57713_oobj.len() - 1LL);
	_57713_oobj+=jule::Str(")", 1);
	if ((*((*((*(_55627_r))._field_func))._field_decl))._field_exceptional) {
		_55813_obj+=jule::Str("return jule::Exceptional<", 25);
		_55813_obj+=_1a947143d_gen_type_kind((*((*(_55627_r))._field_func))._field_result);
		_55813_obj+=jule::Str(">(jule::Any(),", 14);
		_55813_obj+=_57713_oobj;
		_55813_obj+=jule::Str(")", 1);
	} else {
		_55813_obj+=jule::Str("return ", 7);
		_55813_obj+=_57713_oobj;
	}
	_55813_obj+=jule::Str(";", 1);
	return _55813_obj;
}



inline jule::Str _1b6d721b6_gen_ret_expr(jule::Ptr<_1a6bc3e29_RetSt> _60621_r) {
	if ((*(_60621_r))._field_vars.len() > 1LL) {
		return _1b6d721b6_gen_ret_expr_tuple(_60621_r);
	}
	if ((*(_60621_r))._field_vars.len() > 0LL) {
		jule::Ptr<_1a7003e4b_Var> _61317_v = (*(_60621_r))._field_vars[0LL];
		if ((!(_1b7553d92_is_ignore_ident((*(_61317_v))._field_ident))) && ((*(_60621_r))._field_expr != _61317_v)) {
			jule::Str _61517_ident = _1a946cd0d_var_out_ident(_61317_v);
			jule::Str _61621_obj = _61517_ident;
			_61621_obj+=jule::Str(" = ", 3);
			_61621_obj+=_1a709c632_gen_expr((*(_60621_r))._field_expr);
			_61621_obj+=jule::Str(";\n", 2);
			_61621_obj+=_1a94c037c_indent();
			if ((*((*((*(_60621_r))._field_func))._field_decl))._field_exceptional) {
				_61621_obj+=jule::Str("return jule::Exceptional<", 25);
				_61621_obj+=_1a947143d_gen_type_kind((*((*(_60621_r))._field_func))._field_result);
				_61621_obj+=jule::Str(">(jule::Any(),", 14);
				_61621_obj+=_61517_ident;
				_61621_obj+=jule::Str(")", 1);
			} else {
				_61621_obj+=jule::Str("return ", 7);
				_61621_obj+=_61517_ident;
			}
			_61621_obj+=jule::Str(";", 1);
			return _61621_obj;
		}
	}
	if ((*((*((*(_60621_r))._field_func))._field_decl))._field_exceptional) {
		jule::Str _63717_obj = jule::Str("return jule::Exceptional<", 25);
		_63717_obj+=_1a947143d_gen_type_kind((*((*(_60621_r))._field_func))._field_result);
		_63717_obj+=jule::Str(">(jule::Any(),", 14);
		_63717_obj+=_1a709c632_gen_expr((*(_60621_r))._field_expr);
		_63717_obj+=jule::Str(")", 1);
		_63717_obj+=jule::Str(";", 1);
		return _63717_obj;
	}
	jule::Str _64613_obj = jule::Str("return ", 7);
	_64613_obj+=_1a709c632_gen_expr((*(_60621_r))._field_expr);
	_64613_obj+=jule::Str(";", 1);
	return _64613_obj;
}



inline jule::Str _1b6d721b6_gen_ret_st(jule::Ptr<_1a6bc3e29_RetSt> _65219_r) {
	if (((*(_65219_r))._field_expr == nullptr) && ((*(_65219_r))._field_vars.len() == 0LL)) {
		if ((*((*((*(_65219_r))._field_func))._field_decl))._field_exceptional) {
			return jule::Str("return jule::VoidExceptional();", 31);
		}
		return jule::Str("return;", 7);
	}
	if ((*(_65219_r))._field_expr == nullptr) {
		return _1b6d721b6_gen_ret_vars(_65219_r);
	}
	return _1b6d721b6_gen_ret_expr(_65219_r);
}



inline jule::Str _1b6d721b6_gen_data_expr(jule::Ptr<_1a8b431d7_Data> _68522_d) {
	return _1a709c632_gen_expr((*(_68522_d))._field_model) + jule::Str(";", 1);
}



inline jule::Str _1b6d721b6_gen_scope_var(jule::Ptr<_1a7003e4b_Var> _68922_v) {
	if ((*(_68922_v))._field_constant) {
		return jule::Str();
	}
	return _1a94c037c_gen_var(_68922_v);
}



inline jule::Str _1b6d721b6_gen_st(jule::Any _69715_st) {
	if (_69715_st == nullptr) {
		return jule::Str();
	}
	{
		auto &_match_expr{ _69715_st };
		
		if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Scope>>()) {
			_case_begin_4406395520:;
			{
				return _1b6d721b6_gen_scope(_69715_st.operator jule::Ptr<_1a6bc3e29_Scope>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4406395632:;
			{
				return _1b6d721b6_gen_scope_var(_69715_st.operator jule::Ptr<_1a7003e4b_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
			_case_begin_4406396192:;
			{
				return _1b6d721b6_gen_data_expr(_69715_st.operator jule::Ptr<_1a8b431d7_Data>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Conditional>>()) {
			_case_begin_4406396288:;
			{
				return _1b6d721b6_gen_conditional(_69715_st.operator jule::Ptr<_1a6bc3e29_Conditional>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_InfIter>>()) {
			_case_begin_4406396384:;
			{
				return _1b6d721b6_gen_inf_iter(_69715_st.operator jule::Ptr<_1a6bc3e29_InfIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_WhileIter>>()) {
			_case_begin_4406396496:;
			{
				return _1b6d721b6_gen_while_iter(_69715_st.operator jule::Ptr<_1a6bc3e29_WhileIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_RangeIter>>()) {
			_case_begin_4406396608:;
			{
				return _1b6d721b6_gen_range_iter(_69715_st.operator jule::Ptr<_1a6bc3e29_RangeIter>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_ContSt>>()) {
			_case_begin_4406396720:;
			{
				return _1b6d721b6_gen_cont(_69715_st.operator jule::Ptr<_1a6bc3e29_ContSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Label>>()) {
			_case_begin_4406396832:;
			{
				return _1b6d721b6_gen_label(_69715_st.operator jule::Ptr<_1a6bc3e29_Label>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_GotoSt>>()) {
			_case_begin_4406397296:;
			{
				return _1b6d721b6_gen_goto(_69715_st.operator jule::Ptr<_1a6bc3e29_GotoSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Postfix>>()) {
			_case_begin_4406397408:;
			{
				return _1b6d721b6_gen_postfix(_69715_st.operator jule::Ptr<_1a6bc3e29_Postfix>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Assign>>()) {
			_case_begin_4406397520:;
			{
				return _1b6d721b6_gen_assign(_69715_st.operator jule::Ptr<_1a6bc3e29_Assign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_MultiAssign>>()) {
			_case_begin_4406397632:;
			{
				return _1b6d721b6_gen_multi_assign(_69715_st.operator jule::Ptr<_1a6bc3e29_MultiAssign>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_Match>>()) {
			_case_begin_4406397744:;
			{
				return _1b6d721b6_gen_match(_69715_st.operator jule::Ptr<_1a6bc3e29_Match>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_FallSt>>()) {
			_case_begin_4406397856:;
			{
				return _1b6d721b6_gen_fall_st(_69715_st.operator jule::Ptr<_1a6bc3e29_FallSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_BreakSt>>()) {
			_case_begin_4406397968:;
			{
				return _1b6d721b6_gen_break_st(_69715_st.operator jule::Ptr<_1a6bc3e29_BreakSt>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6bc3e29_RetSt>>()) {
			_case_begin_4406398080:;
			{
				return _1b6d721b6_gen_ret_st(_69715_st.operator jule::Ptr<_1a6bc3e29_RetSt>());
			}
		}
		else {
			_case_begin_4406393424:;
			{
				return jule::Str("<unimplemented_stmt>", 20);
			}
		}
		_match_end_4406396032:;
	}
}



inline jule::Str _1b6d721b6_gen_scope(jule::Ptr<_1a6bc3e29_Scope> _72518_s) {
	jule::Str _72613_obj = jule::Str("{\n", 2);
	_1a94c037c_add_indent();
	{
		auto &expr = (*(_72518_s))._field_stmts;
		auto it = expr.begin();
		_iter_begin_4406427696:;
		if (it != expr.end()) {
			jule::Any _1b6d721b6_st = *it;
			{
				_72613_obj+=_1a94c037c_indent();
				_72613_obj+=_1b6d721b6_gen_st(_1b6d721b6_st);
				_72613_obj+=jule::Str("\n", 1);
			}
			_iter_next_4406427696:;
			++it;
			goto _iter_begin_4406427696;
		}
		_iter_end_4406427696:;
	}
	_1a94c037c_done_indent();
	_72613_obj+=_1a94c037c_indent();
	_72613_obj+=jule::Str("}", 1);
	if ((*(_72518_s))._field_deferred) {
		_72613_obj=(jule::Str("__JULE_DEFER(", 13) + _72613_obj) + jule::Str(");", 2);
	}
	return _72613_obj;
}



inline jule::Str _1b6d721b6_gen_fn_scope(jule::Ptr<_1a691a500_FnIns> _74721_f) {
	jule::Str _74813_obj = ((((*(_74721_f))._field_owner != nullptr)) ? (_1b6d721b6_gen_method_scope(_74721_f)) : (_1b6d721b6_gen_scope((*(_74721_f))._field_scope)));
	if ((*((*(_74721_f))._field_decl))._field_exceptional && (*((*(_74721_f))._field_decl))._method_is_void()) {
		_74813_obj=_74813_obj.slice(0LL,_74813_obj.len() - 2LL) + jule::Str(" return jule::VoidExceptional(); }", 34);
	}
	return _74813_obj;
}



inline jule::Str _1b6d721b6_gen_method_scope(jule::Ptr<_1a691a500_FnIns> _76025_f) {
	return _1b6d721b6_gen_scope((*(_76025_f))._field_scope);
}



inline jule::Str _1a709c632_concat_all_parts(jule::Slice<_1b7553d92_Token> _8421_parts) {
	jule::Str _8513_s = jule::Str();
	{
		auto &expr = _8421_parts;
		auto it = expr.begin();
		_iter_begin_4406444160:;
		if (it != expr.end()) {
			_1b7553d92_Token &_1a709c632_part = *it;
			{
				_8513_s+=_1a709c632_part._field_kind;
			}
			_iter_next_4406444160:;
			++it;
			goto _iter_begin_4406444160;
		}
		_iter_end_4406444160:;
	}
	return _8513_s;
}



inline std::tuple<jule::Bool,jule::U64> _1a709c632_check_for_bit_shift_opt(jule::Ptr<_1a69b8d2e_OperandExprModel>& _10129_l,jule::Ptr<_1a69b8d2e_OperandExprModel>& _10152_r) {
	jule::Bool _10176_ok = jule::Bool();
	jule::U64 _10186_x = jule::U64();
	if ((!(_1a9133243_is_int((*((*(_10129_l))._field_kind))._method_to_str()))) || (!(_1a9133243_is_int((*((*(_10152_r))._field_kind))._method_to_str())))) {
		_10176_ok = false;
		_10186_x = 0LL;
		return std::make_tuple(_10176_ok,_10186_x);
	}
	{
		auto &_match_expr{ (*(_10152_r))._field_model };
		
		if (_match_expr.type_is<jule::Ptr<_1b6dd59aa_Const>>()) {
			_case_begin_4406454528:;
			{
				goto _match_end_4406453456;
			}
		}
		else {
			_case_begin_4406453536:;
			{
				_10176_ok = false;
				_10186_x = 0LL;
				return std::make_tuple(_10176_ok,_10186_x);
			}
		}
		_match_end_4406453456:;
	}
	_10186_x=static_cast<jule::U64>((*((*(_10152_r))._field_model.operator jule::Ptr<_1b6dd59aa_Const>()))._method_as_u64());
	if ((_10186_x == 0LL) || ((_10186_x % 2LL) != 0LL)) {
		_10176_ok = false;
		_10186_x = 0LL;
		return std::make_tuple(_10176_ok,_10186_x);
	}
	jule::F64 _1169_j = _1b6ee77ae_log2(static_cast<jule::F64>(static_cast<jule::F64>(_10186_x)));
	jule::U64 _1179_z = static_cast<jule::U64>(_1169_j);
	if (static_cast<jule::F64>(_1179_z) != _1169_j) {
		_10176_ok = false;
		_10186_x = 0LL;
		return std::make_tuple(_10176_ok,_10186_x);
	}
	_10176_ok = true;
	_10186_x = _1179_z;
	return std::make_tuple(_10176_ok,_10186_x);
}



inline jule::Str _1a709c632_decompose_common_esq(jule::U8 _12425_b) {
	{
		auto &_match_expr{ _12425_b };
		
		if (_match_expr == '\\') {
			_case_begin_4406468000:;
			{
				return jule::Str("\\\\", 2);
			}
		}
		else if (_match_expr == '\'') {
			_case_begin_4406468096:;
			{
				return jule::Str("'", 1);
			}
		}
		else if (_match_expr == '\"') {
			_case_begin_4406468192:;
			{
				return jule::Str("\\\"", 2);
			}
		}
		else if (_match_expr == '\a') {
			_case_begin_4406467360:;
			{
				return jule::Str("\\a", 2);
			}
		}
		else if (_match_expr == '\b') {
			_case_begin_4406467456:;
			{
				return jule::Str("\\b", 2);
			}
		}
		else if (_match_expr == '\f') {
			_case_begin_4406467552:;
			{
				return jule::Str("\\f", 2);
			}
		}
		else if (_match_expr == '\n') {
			_case_begin_4406466848:;
			{
				return jule::Str("\\n", 2);
			}
		}
		else if (_match_expr == '\r') {
			_case_begin_4406466944:;
			{
				return jule::Str("\\r", 2);
			}
		}
		else if (_match_expr == '\t') {
			_case_begin_4406467040:;
			{
				return jule::Str("\\t", 2);
			}
		}
		else if (_match_expr == '\v') {
			_case_begin_4406467136:;
			{
				return jule::Str("\\v", 2);
			}
		}
		else {
			_case_begin_4406462208:;
			{
				return jule::Str();
			}
		}
		_match_end_4406463408:;
	}
}



inline jule::Str _1a709c632_sbtoa(jule::U8 _14010_b) {
	if (_14010_b == 0LL) {
		return jule::Str("\\x00", 4);
	}
	if (_14010_b <= 127LL) {
		jule::Str _14613_seq = _1a709c632_decompose_common_esq(_14010_b);
		if (_14613_seq != jule::Str()) {
			return _14613_seq;
		}
		if ((32LL <= _14010_b) && (_14010_b <= 126LL)) {
			return static_cast<jule::Str>(_14010_b);
		}
	}
	jule::Str _1569_seq = _1b6ac3d91_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_14010_b)),8LL);
	if (_1569_seq.len() == 2LL) {
		return jule::Str("\\0", 2) + _1569_seq;
	}
	return jule::Str("\\", 1) + _1569_seq;
}



inline jule::Str _1a709c632_get_cstr_model(jule::Slice<jule::U8> _16319_bytes) {
	jule::Str _16413_lit = jule::Str();
	{
		auto &expr = _16319_bytes;
		auto it = expr.begin();
		_iter_begin_4406487952:;
		if (it != expr.end()) {
			jule::U8 &_1a709c632_b = *it;
			{
				_16413_lit+=_1a709c632_sbtoa(_1a709c632_b);
			}
			_iter_next_4406487952:;
			++it;
			goto _iter_begin_4406487952;
		}
		_iter_end_4406487952:;
	}
	return (jule::Str("\"", 1) + _16413_lit) + jule::Str("\"", 1);
}



inline jule::Str _1a709c632_get_str_model(jule::Ptr<_1b6dd59aa_Const>& _17219_c) {
	jule::Str _1739_content = (*(_17219_c))._method_read_str();
	if (_1739_content.len() == 0LL) {
		return _1a946cd0d_as_jt(jule::Str("str", 3)) + jule::Str("()", 2);
	}
	jule::Slice<jule::U8> _1789_bytes = static_cast<jule::Slice<jule::U8>>(_1739_content);
	jule::Str _1799_len = _1b6ac3d91_fmt_int(static_cast<jule::I64>(_1789_bytes.len()),10LL);
	jule::Str _1809_lit = _1a709c632_get_cstr_model(_1789_bytes);
	return ((((_1a946cd0d_as_jt(jule::Str("str", 3)) + jule::Str("(", 1)) + _1809_lit) + jule::Str(", ", 2)) + _1799_len) + jule::Str(")", 1);
}



inline jule::Str _1a709c632_get_bool_model(jule::Ptr<_1b6dd59aa_Const>& _18420_c) {
	if ((*(_18420_c))._method_read_bool()) {
		return jule::Str("true", 4);
	}
	return jule::Str("false", 5);
}



inline jule::Str _1a709c632_get_nil_model(void) {
	return jule::Str("nullptr", 7);
}



inline jule::Str _1a709c632_gen_float_special_cases(jule::F64& _19329_x) {
	{
		
		if (_1b62a95ee_is_nan(_19329_x)) {
			_case_begin_4406506640:;
			{
				return jule::Str("NAN", 3);
			}
		}
		else if (_1b62a95ee_is_inf(_19329_x,1LL)) {
			_case_begin_4406506848:;
			{
				return jule::Str("INFINITY", 8);
			}
		}
		else if (_1b62a95ee_is_inf(_19329_x,-1LL)) {
			_case_begin_4406506944:;
			{
				return jule::Str("-INFINITY", 9);
			}
		}
		else {
			_case_begin_4406505200:;
			{
				return jule::Str();
			}
		}
		_match_end_4406505024:;
	}
}



inline jule::Str _1a709c632_ftoa(jule::F64 _2029_f,jule::Int _20217_bitsize) {
	if (_20217_bitsize != 32LL) {
		if (_2029_f == static_cast<jule::F64>(static_cast<jule::I64>(_2029_f))) {
			return _1a709c632_i64toa(static_cast<jule::I64>(static_cast<jule::I64>(_2029_f)));
		}
		if (_2029_f == static_cast<jule::F64>(static_cast<jule::U64>(_2029_f))) {
			return _1a709c632_u64toa(static_cast<jule::U64>(static_cast<jule::U64>(_2029_f)));
		}
	}
	jule::Str _21213_m = _211ca7535_fmt_float(_2029_f,'f',-1LL,_20217_bitsize);
	if ((!(_1cea16edb_contains(_21213_m,jule::Str(".", 1))))) {
		_21213_m+=jule::Str(".0", 2);
	}
	return _21213_m;
}



inline jule::Str _1a709c632_get_f32_model(jule::Ptr<_1b6dd59aa_Const>& _21919_c) {
	jule::F64 _2209_x = (*(_21919_c))._method_as_f64();
	jule::Str _2239_f = _1a709c632_gen_float_special_cases(_2209_x);
	if (_2239_f != jule::Str()) {
		return _2239_f;
	}
	{
		
		if (_2209_x == 340282346638528860000000000000000000000.0) {
			_case_begin_4406523728:;
			{
				return jule::Str("jule::MAX_F32", 13);
			}
		}
		else if (_2209_x == -340282346638528860000000000000000000000.0) {
			_case_begin_4406523824:;
			{
				return jule::Str("jule::MIN_F32", 13);
			}
		}
		_match_end_4406524784:;
	}
	return _1a709c632_ftoa(_2209_x,32LL) + jule::Str("f", 1);
}



inline jule::Str _1a709c632_get_f64_model(jule::Ptr<_1b6dd59aa_Const>& _23619_c) {
	jule::F64 _2379_x = (*(_23619_c))._method_as_f64();
	jule::Str _2409_f = _1a709c632_gen_float_special_cases(_2379_x);
	if (_2409_f != jule::Str()) {
		return _2409_f;
	}
	{
		
		if (_2379_x == jule::MAX_F64) {
			_case_begin_4406531728:;
			{
				return jule::Str("jule::MAX_F64", 13);
			}
		}
		else if (_2379_x == jule::MIN_F64) {
			_case_begin_4406531824:;
			{
				return jule::Str("jule::MIN_F64", 13);
			}
		}
		_match_end_4406532752:;
	}
	return _1a709c632_ftoa(_2379_x,64LL);
}



inline jule::Str _1a709c632_get_float_model(jule::Ptr<_1a8b431d7_Data>& _25325_d) {
	{
		
		if ((*((*((*(_25325_d))._field_kind))._method_prim()))._method_is_f32()) {
			_case_begin_4406538896:;
			{
				return _1a709c632_get_f32_model((*(_25325_d))._field_constant);
			}
		}
		else {
			_case_begin_4406537136:;
			{
				return _1a709c632_get_f64_model((*(_25325_d))._field_constant);
			}
		}
		_match_end_4406535744:;
	}
}



inline jule::Str _1a709c632_i64toa(jule::I64 _26011_x) {
	{
		
		if (_26011_x == jule::MAX_I64) {
			_case_begin_4406541280:;
			{
				return jule::Str("jule::MAX_I64", 13);
			}
		}
		else if (_26011_x == jule::MIN_I64) {
			_case_begin_4406540672:;
			{
				return jule::Str("jule::MIN_I64", 13);
			}
		}
		_match_end_4406541488:;
	}
	jule::Str _2669_fmt = _1b6ac3d91_fmt_int(_26011_x,10LL);
	if (_1b698aa8d_is_64bit(jule::Str("arm64", 5))) {
		return _2669_fmt + jule::Str("LL", 2);
	}
	return _2669_fmt + jule::Str("L", 1);
}



inline jule::Str _1a709c632_get_i64_model(jule::Ptr<_1b6dd59aa_Const>& _27319_c) {
	return _1a709c632_i64toa(static_cast<jule::I64>((*(_27319_c))._method_read_i64()));
}



inline jule::Str _1a709c632_u64toa(jule::U64 _27711_x) {
	{
		
		if (_27711_x == jule::MAX_U64) {
			_case_begin_4406551296:;
			{
				return jule::Str("jule::MAX_U64", 13);
			}
		}
		_match_end_4406551120:;
	}
	jule::Str _2839_fmt = _1b6ac3d91_fmt_uint(_27711_x,10LL);
	if (_1b698aa8d_is_64bit(jule::Str("arm64", 5))) {
		return _2839_fmt + jule::Str("LLU", 3);
	}
	return _2839_fmt + jule::Str("LU", 2);
}



inline jule::Str _1a709c632_get_u64_model(jule::Ptr<_1b6dd59aa_Const> _29018_c) {
	return _1a709c632_u64toa(static_cast<jule::U64>((*(_29018_c))._method_read_u64()));
}



inline jule::Str _1a709c632_gen_const_expr(jule::Ptr<_1a8b431d7_Data> _29423_d) {
	{
		
		if ((*((*(_29423_d))._field_constant))._method_is_str()) {
			_case_begin_4406561536:;
			{
				return _1a709c632_get_str_model((*(_29423_d))._field_constant);
			}
		}
		else if ((*((*(_29423_d))._field_constant))._method_is_bool()) {
			_case_begin_4406561632:;
			{
				return _1a709c632_get_bool_model((*(_29423_d))._field_constant);
			}
		}
		else if ((*((*(_29423_d))._field_constant))._method_is_f64()) {
			_case_begin_4406561728:;
			{
				return _1a709c632_get_float_model(_29423_d);
			}
		}
		else if ((*((*(_29423_d))._field_constant))._method_is_i64()) {
			_case_begin_4406560896:;
			{
				return _1a709c632_get_i64_model((*(_29423_d))._field_constant);
			}
		}
		else if ((*((*(_29423_d))._field_constant))._method_is_u64()) {
			_case_begin_4406560992:;
			{
				return _1a709c632_get_u64_model((*(_29423_d))._field_constant);
			}
		}
		else if ((*((*(_29423_d))._field_constant))._method_is_nil()) {
			_case_begin_4406561088:;
			{
				return _1a709c632_get_nil_model();
			}
		}
		else {
			_case_begin_4406559888:;
			{
				return jule::Str();
			}
		}
		_match_end_4406559744:;
	}
}



inline jule::Str _1a709c632_gen_const_expr_model(jule::Ptr<_1b6dd59aa_Const> _30625_m) {
	{
		
		if ((*(_30625_m))._method_is_str()) {
			_case_begin_4406575776:;
			{
				return _1a709c632_get_str_model(_30625_m);
			}
		}
		else if ((*(_30625_m))._method_is_bool()) {
			_case_begin_4406575872:;
			{
				return _1a709c632_get_bool_model(_30625_m);
			}
		}
		else if ((*(_30625_m))._method_is_f64()) {
			_case_begin_4406575968:;
			{
				return _1a709c632_get_f64_model(_30625_m);
			}
		}
		else if ((*(_30625_m))._method_is_i64()) {
			_case_begin_4406575136:;
			{
				return _1a709c632_get_i64_model(_30625_m);
			}
		}
		else if ((*(_30625_m))._method_is_u64()) {
			_case_begin_4406575232:;
			{
				return _1a709c632_get_u64_model(_30625_m);
			}
		}
		else if ((*(_30625_m))._method_is_nil()) {
			_case_begin_4406575328:;
			{
				return _1a709c632_get_nil_model();
			}
		}
		else {
			_case_begin_4406573680:;
			{
				return jule::Str();
			}
		}
		_match_end_4406573552:;
	}
}



inline jule::Str _1a709c632_gen_div_by_zero_binop_expr_model(_1b7553d92_Token& _31838_op,jule::Ptr<_1a69b8d2e_OperandExprModel>& _31854_l,jule::Ptr<_1a69b8d2e_OperandExprModel>& _31881_r) {
	jule::Bool _31913_opt = false;
	if (_211b70ab3_OPT_MATH) {
		{
			auto &_match_expr{ (*(_31881_r))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1b6dd59aa_Const>>()) {
				_case_begin_4406588128:;
				{
					_31913_opt=true;
				}
			}
			_match_end_4406588000:;
		}
	}
	jule::Str _32713_op_func = jule::Str();
	{
		auto &_match_expr{ _31838_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("/=", 2)) {
			_case_begin_4406587088:;
			{
				_32713_op_func=((_31913_opt) ? (jule::Str("/", 1)) : (jule::Str("div", 3)));
			}
		}
		else if (_match_expr == jule::Str("%", 1) || _match_expr == jule::Str("%=", 2)) {
			_case_begin_4406587184:;
			{
				_32713_op_func=((_31913_opt) ? (jule::Str("%", 1)) : (jule::Str("mod", 3)));
			}
		}
		_match_end_4406586928:;
	}
	jule::Str _33613_obj = jule::Str();
	if (_31913_opt) {
		_33613_obj=jule::Str("(", 1);
		_33613_obj+=_1a709c632_gen_expr((*(_31854_l))._field_model);
		{
			auto &_match_expr{ _31838_op._field_kind };
			
			if (_match_expr == jule::Str("/", 1)) {
				_case_begin_4406597664:;
				{
					jule::Bool _34318_ok;
					jule::U64 _34322_x;
					std::tie(_34318_ok,_34322_x) = _1a709c632_check_for_bit_shift_opt(_31854_l,_31881_r);
					if (_34318_ok) {
						_33613_obj+=jule::Str(" >> ", 4);
						_33613_obj+=_1a709c632_u64toa(_34322_x);
						goto _match_end_4406596784;
					}
					goto _case_begin_4406596864;
				}
			}
			else {
				_case_begin_4406596864:;
				{
					_33613_obj+=jule::Str(" ", 1);
					_33613_obj+=_32713_op_func;
					_33613_obj+=jule::Str(" ", 1);
					_33613_obj+=_1a709c632_gen_expr((*(_31881_r))._field_model);
				}
			}
			_match_end_4406596784:;
		}
		_33613_obj+=jule::Str(")", 1);
	} else {
		_33613_obj=jule::Str("jule::", 6);
		_33613_obj+=_32713_op_func;
		_33613_obj+=jule::Str("(", 1);
		if ((!(_211b70ab3_PRODUCTION))) {
			_33613_obj+=_1a709c632_gen_loc_info(_31838_op);
			_33613_obj+=jule::Str(",", 1);
		}
		_33613_obj+=_1a709c632_gen_expr((*(_31854_l))._field_model);
		_33613_obj+=jule::Str(",", 1);
		_33613_obj+=_1a709c632_gen_expr((*(_31881_r))._field_model);
		_33613_obj+=jule::Str(")", 1);
	}
	return _33613_obj;
}



inline jule::Str _1a709c632_gen_binop_expr_model(jule::Ptr<_1a69b8d2e_BinopExprModel> _37429_m) {
	{
		auto &_match_expr{ (*(_37429_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("/", 1) || _match_expr == jule::Str("%", 1)) {
			_case_begin_4406611280:;
			{
				return _1a709c632_gen_div_by_zero_binop_expr_model((*(_37429_m))._field_op,(*(_37429_m))._field_left,(*(_37429_m))._field_right);
			}
		}
		_match_end_4406593264:;
	}
	jule::Str _38113_obj = jule::Str("(", 1);
	if (_211b70ab3_OPT_MATH) {
		{
			auto &_match_expr{ (*(_37429_m))._field_op._field_kind };
			
			if (_match_expr == jule::Str("*", 1)) {
				_case_begin_4406616448:;
				{
					jule::Bool _38518_ok;
					jule::U64 _38522_x;
					std::tie(_38518_ok,_38522_x) = _1a709c632_check_for_bit_shift_opt((*(_37429_m))._field_left,(*(_37429_m))._field_right);
					if ((!(_38518_ok))) {
						goto _match_end_4406616352;
					}
					_38113_obj+=_1a709c632_gen_expr_model((*((*(_37429_m))._field_left))._field_model);
					_38113_obj+=jule::Str(" << ", 4);
					_38113_obj+=_1a709c632_u64toa(_38522_x);
					_38113_obj+=jule::Str(")", 1);
					return _38113_obj;
				}
			}
			_match_end_4406616352:;
		}
	}
	_38113_obj+=_1a709c632_gen_expr_model((*((*(_37429_m))._field_left))._field_model);
	_38113_obj+=jule::Str(" ", 1);
	_38113_obj+=(*(_37429_m))._field_op._field_kind;
	_38113_obj+=jule::Str(" ", 1);
	_38113_obj+=_1a709c632_gen_expr_model((*((*(_37429_m))._field_right))._field_model);
	_38113_obj+=jule::Str(")", 1);
	return _38113_obj;
}



inline jule::Str _1a709c632_gen_var_expr_model(jule::Ptr<_1a7003e4b_Var> _40627_m) {
	if ((*(_40627_m))._field_cpp_linked) {
		jule::Ptr<_1b7509a90_Directive> _40813_d = _1a947143d_find_directive((*(_40627_m))._field_directives,jule::Str("namespace", 9));
		if (_40813_d != nullptr) {
			jule::Str _41021_obj = _1a709c632_concat_all_parts((*(_40813_d))._field_args);
			_41021_obj+=jule::Str("::", 2);
			_41021_obj+=_1a946cd0d_var_out_ident(_40627_m);
			return _41021_obj;
		}
	}
	return _1a946cd0d_var_out_ident(_40627_m);
}



inline jule::Str _1a709c632_gen_struct_expr_model(jule::Ptr<_1b7905331_Struct> _41926_m) {
	return _1a947143d_gen_struct_kind(_41926_m);
}



inline jule::Str _1a709c632_gen_struct_ins_expr_model(jule::Ptr<_1b7905331_StructIns> _42334_m) {
	return _1a947143d_gen_struct_kind_ins(_42334_m);
}



inline jule::Str _1a709c632_gen_unary_expr_model(jule::Ptr<_1a69b8d2e_UnaryExprModel> _42729_m) {
	if (_211b70ab3_OPT_PTR && ((*(_42729_m))._field_op._field_kind == jule::Str("*", 1))) {
		{
			auto &_match_expr{ (*((*(_42729_m))._field_expr))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_UnaryExprModel>>()) {
				_case_begin_4406639712:;
				{
					jule::Ptr<_1a69b8d2e_UnaryExprModel> _43121_um = (*((*(_42729_m))._field_expr))._field_model.operator jule::Ptr<_1a69b8d2e_UnaryExprModel>();
					if ((*(_43121_um))._field_op._field_kind == jule::Str("&", 1)) {
						return _1a709c632_gen_expr_model((*((*(_43121_um))._field_expr))._field_model);
					}
				}
			}
			_match_end_4406639616:;
		}
	}
	{
		auto &_match_expr{ (*(_42729_m))._field_op._field_kind };
		
		if (_match_expr == jule::Str("^", 1)) {
			_case_begin_4406643840:;
			{
				jule::Str _44017_obj = jule::Str("(~(", 3);
				_44017_obj+=_1a709c632_gen_expr((*((*(_42729_m))._field_expr))._field_model);
				_44017_obj+=jule::Str("))", 2);
				return _44017_obj;
			}
		}
		else if (_match_expr == jule::Str("*", 1)) {
			_case_begin_4406645776:;
			{
				if (_211b70ab3_PRODUCTION || ((*((*((*(_42729_m))._field_expr))._field_kind))._method_sptr() == nullptr)) {
					goto _match_end_4406645648;
				}
				jule::Str _45017_obj = _1a709c632_gen_expr((*((*(_42729_m))._field_expr))._field_model);
				_45017_obj+=jule::Str(".get(", 5);
				_45017_obj+=_1a709c632_gen_loc_info((*(_42729_m))._field_op);
				_45017_obj+=jule::Str(")", 1);
				return _45017_obj;
			}
		}
		_match_end_4406645648:;
	}
	jule::Str _45713_obj = jule::Str("(", 1);
	_45713_obj+=(*(_42729_m))._field_op._field_kind;
	_45713_obj+=jule::Str("(", 1);
	_45713_obj+=_1a709c632_gen_expr((*((*(_42729_m))._field_expr))._field_model);
	_45713_obj+=jule::Str("))", 2);
	return _45713_obj;
}



inline jule::Str _1a709c632_gen_cpp_struct_lit_expr_model(jule::Ptr<_1a69b8d2e_StructLitExprModel> _46538_m) {
	jule::Str _46613_obj = jule::Str("(", 1) + _1a947143d_gen_struct_kind_ins((*(_46538_m))._field_strct);
	_46613_obj+=jule::Str("){", 2);
	if ((*(_46538_m))._field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_46538_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_4406665088:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_FieldIns> _1a709c632_f = *it;
				{
					if ((*((*((*(_46538_m))._field_strct))._field_decl))._field_cpp_linked) {
						{
							auto &expr = (*(_46538_m))._field_args;
							auto it = expr.begin();
							_iter_begin_4406667728:;
							if (it != expr.end()) {
								jule::Ptr<_1a69b8d2e_StructArgExprModel> _1a709c632_arg = *it;
								{
									if ((*(_1a709c632_arg))._field_field == _1a709c632_f) {
										_46613_obj+=jule::Str(".", 1);
										_46613_obj+=_1a946cd0d_field_out_ident((*(_1a709c632_f))._field_decl);
										_46613_obj+=jule::Str("=", 1);
										_46613_obj+=_1a709c632_gen_expr((*(_1a709c632_arg))._field_expr);
										_46613_obj+=jule::Str(",", 1);
										goto _iter_next_4406665088;
									}
								}
								_iter_next_4406667728:;
								++it;
								goto _iter_begin_4406667728;
							}
							_iter_end_4406667728:;
						}
						goto _iter_next_4406665088;
					}
					_46613_obj+=_1a946cd0d_field_out_ident((*(_1a709c632_f))._field_decl);
					_46613_obj+=jule::Str(": ", 2);
					{
						auto &expr = (*(_46538_m))._field_args;
						auto it = expr.begin();
						_iter_begin_4406675424:;
						if (it != expr.end()) {
							jule::Ptr<_1a69b8d2e_StructArgExprModel> _1a709c632_arg = *it;
							{
								if ((*(_1a709c632_arg))._field_field == _1a709c632_f) {
									_46613_obj+=_1a709c632_gen_expr((*(_1a709c632_arg))._field_expr);
									_46613_obj+=jule::Str(",", 1);
									goto _iter_next_4406665088;
								}
							}
							_iter_next_4406675424:;
							++it;
							goto _iter_begin_4406675424;
						}
						_iter_end_4406675424:;
					}
					_46613_obj+=_1a709c632_get_init_expr((*(_1a709c632_f))._field_kind);
					_46613_obj+=jule::Str(",", 1);
				}
				_iter_next_4406665088:;
				++it;
				goto _iter_begin_4406665088;
			}
			_iter_end_4406665088:;
		}
		_46613_obj=_46613_obj.slice(0LL,_46613_obj.len() - 1LL);
	}
	_46613_obj+=jule::Str("}", 1);
	return _46613_obj;
}



inline jule::Str _1a709c632_gen_struct_lit_expr_model(jule::Ptr<_1a69b8d2e_StructLitExprModel> _50334_m) {
	if ((*((*((*(_50334_m))._field_strct))._field_decl))._field_cpp_linked) {
		return _1a709c632_gen_cpp_struct_lit_expr_model(_50334_m);
	}
	jule::Str _50813_obj = _1a946cd0d_struct_ins_out_ident((*(_50334_m))._field_strct);
	_50813_obj+=jule::Str("(", 1);
	if ((*(_50334_m))._field_args.len() > 0LL) {
		_julec_label_iter:;
		{
			auto &expr = (*((*(_50334_m))._field_strct))._field_fields;
			auto it = expr.begin();
			_iter_begin_4406689568:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_FieldIns> _1a709c632_f = *it;
				{
					{
						auto &expr = (*(_50334_m))._field_args;
						auto it = expr.begin();
						_iter_begin_4406691280:;
						if (it != expr.end()) {
							jule::Ptr<_1a69b8d2e_StructArgExprModel> _1a709c632_arg = *it;
							{
								if ((*(_1a709c632_arg))._field_field == _1a709c632_f) {
									_50813_obj+=_1a709c632_gen_expr((*(_1a709c632_arg))._field_expr);
									_50813_obj+=jule::Str(",", 1);
									goto _iter_next_4406689568;
								}
							}
							_iter_next_4406691280:;
							++it;
							goto _iter_begin_4406691280;
						}
						_iter_end_4406691280:;
					}
					_50813_obj+=_1a709c632_get_init_expr((*(_1a709c632_f))._field_kind);
					_50813_obj+=jule::Str(",", 1);
				}
				_iter_next_4406689568:;
				++it;
				goto _iter_begin_4406689568;
			}
			_iter_end_4406689568:;
		}
		_50813_obj=_50813_obj.slice(0LL,_50813_obj.len() - 1LL);
	}
	_50813_obj+=jule::Str(")", 1);
	return _50813_obj;
}



inline jule::Str _1a709c632_gen_alloc_struct_lit_expr_model(jule::Ptr<_1a69b8d2e_AllocStructLitExprModel> _52940_m) {
	jule::Str _53013_obj = jule::Str("jule::new_struct", 16);
	if ((*((*((*((*(_52940_m))._field_lit))._field_strct))._field_decl))._method_has_ref_accessible()) {
		_53013_obj+=jule::Str("_ptr", 4);
	}
	_53013_obj+=jule::Str("<", 1);
	_53013_obj+=_1a946cd0d_struct_ins_out_ident((*((*(_52940_m))._field_lit))._field_strct);
	_53013_obj+=jule::Str(">(", 2);
	if ((!(_211b70ab3_PRODUCTION))) {
		_53013_obj+=_1a709c632_gen_loc_info((*((*(_52940_m))._field_lit))._field_token);
		_53013_obj+=jule::Str(",", 1);
	}
	_53013_obj+=jule::Str("new( std::nothrow ) ", 20);
	_53013_obj+=_1a709c632_gen_struct_lit_expr_model((*(_52940_m))._field_lit);
	_53013_obj+=jule::Str(")", 1);
	return _53013_obj;
}



inline jule::Str _1a709c632_gen_casting_expr_model(jule::Ptr<_1a69b8d2e_CastingExprModel> _54731_m) {
	jule::Str _54813_obj = jule::Str();
	{
		
		if (((*((*(_54731_m))._field_kind))._method_prim() != nullptr) && (*((*((*(_54731_m))._field_kind))._method_prim()))._method_is_any()) {
			_case_begin_4406712736:;
			{
				_54813_obj+=_1a947143d_gen_type_kind((*(_54731_m))._field_kind);
				_54813_obj+=jule::Str("(", 1);
				_54813_obj+=_1a709c632_gen_expr_model((*(_54731_m))._field_expr);
				_54813_obj+=jule::Str(")", 1);
			}
		}
		else if ((*((*(_54731_m))._field_expr_kind))._method_ptr() != nullptr || (*((*(_54731_m))._field_kind))._method_ptr() != nullptr) {
			_case_begin_4406716752:;
			{
				_54813_obj+=jule::Str("((", 2);
				_54813_obj+=_1a947143d_gen_type_kind((*(_54731_m))._field_kind);
				_54813_obj+=jule::Str(")(", 2);
				_54813_obj+=_1a709c632_gen_expr((*(_54731_m))._field_expr);
				_54813_obj+=jule::Str("))", 2);
			}
		}
		else if ((*((*(_54731_m))._field_expr_kind))._method_trt() != nullptr || ((*((*(_54731_m))._field_expr_kind))._method_prim() != nullptr) && (*((*((*(_54731_m))._field_expr_kind))._method_prim()))._method_is_any()) {
			_case_begin_4406716848:;
			{
				_54813_obj+=_1a709c632_gen_expr_model((*(_54731_m))._field_expr);
				_54813_obj+=jule::Str(".", 1);
				if (_211b70ab3_PRODUCTION) {
					_54813_obj+=jule::Str("operator ", 9);
					_54813_obj+=_1a947143d_gen_type_kind((*(_54731_m))._field_kind);
					_54813_obj+=jule::Str("()", 2);
				} else {
					if (((*((*(_54731_m))._field_expr_kind))._method_trt() != nullptr) && ((*((*(_54731_m))._field_kind))._method_sptr() != nullptr)) {
						_54813_obj+=jule::Str("cast_ptr<", 9);
						_54813_obj+=_1a947143d_gen_type_kind((*((*((*(_54731_m))._field_kind))._method_sptr()))._field_elem);
					} else {
						_54813_obj+=jule::Str("cast<", 5);
						_54813_obj+=_1a947143d_gen_type_kind((*(_54731_m))._field_kind);
					}
					_54813_obj+=jule::Str(">(", 2);
					_54813_obj+=_1a709c632_gen_loc_info((*(_54731_m))._field_token);
					_54813_obj+=jule::Str(")", 1);
				}
			}
		}
		else {
			_case_begin_4406711936:;
			{
				_54813_obj+=jule::Str("static_cast<", 12);
				_54813_obj+=_1a947143d_gen_type_kind((*(_54731_m))._field_kind);
				_54813_obj+=jule::Str(">(", 2);
				_54813_obj+=_1a709c632_gen_expr((*(_54731_m))._field_expr);
				_54813_obj+=jule::Str(")", 1);
			}
		}
		_match_end_4406711824:;
	}
	return _54813_obj;
}



inline jule::Str _1a709c632_gen_arg_expr_models(jule::Slice<jule::Any> _59528_models) {
	if (_59528_models.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _60013_obj = jule::Str();
	{
		auto &expr = _59528_models;
		auto it = expr.begin();
		_iter_begin_4406749968:;
		if (it != expr.end()) {
			jule::Any _1a709c632_m = *it;
			{
				_60013_obj+=_1a709c632_gen_expr(_1a709c632_m);
				_60013_obj+=jule::Str(",", 1);
			}
			_iter_next_4406749968:;
			++it;
			goto _iter_begin_4406749968;
		}
		_iter_end_4406749968:;
	}
	_60013_obj=_60013_obj.slice(0LL,_60013_obj.len() - 1LL);
	return _60013_obj;
}



inline jule::Str _1a709c632_gen_expr_model_for_call(jule::Any _60932_expr) {
	{
		auto &_match_expr{ _60932_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1a691a500_FnIns>>()) {
			_case_begin_4406757056:;
			{
				return _1a709c632_gen_fn_ins_expr_model(_60932_expr.operator jule::Ptr<_1a691a500_FnIns>());
			}
		}
		else {
			_case_begin_4406754896:;
			{
				return _1a709c632_gen_expr_model(_60932_expr);
			}
		}
		_match_end_4406754816:;
	}
}



inline jule::Str _1a709c632_gen_loc_info(_1b7553d92_Token& _61618_t) {
	jule::Str _61713_loc = (*(_61618_t._field_file))._method_path();
	_61713_loc+=jule::Str(":", 1);
	_61713_loc+=_1b6ac3d91_itoa(_61618_t._field_row);
	_61713_loc+=jule::Str(":", 1);
	_61713_loc+=_1b6ac3d91_itoa(_61618_t._field_column);
	return _1a709c632_get_cstr_model(static_cast<jule::Slice<jule::U8>>(_61713_loc));
}



inline jule::Str _1a709c632_gen_pure_fn_call_expr_model(jule::Ptr<_1a69b8d2e_FnCallExprModel>& _62537_m) {
	jule::Str _62613_obj = _1a709c632_gen_expr_model_for_call((*(_62537_m))._field_expr);
	if ((!((*((*(_62537_m))._field_func))._method_is_builtin()))) {
		if ((*((*((*(_62537_m))._field_func))._field_decl))._field_cpp_linked && ((*((*(_62537_m))._field_func))._field_generics.len() > 0LL)) {
			if ((!(_1a947143d_has_directive((*((*((*(_62537_m))._field_func))._field_decl))._field_directives,jule::Str("cdef", 4))))) {
				_62613_obj+=jule::Str("<", 1);
				{
					auto &expr = (*((*(_62537_m))._field_func))._field_generics;
					auto it = expr.begin();
					_iter_begin_4406769024:;
					if (it != expr.end()) {
						jule::Ptr<_1a6a19a50_TypeKind> _1a709c632_g = *it;
						{
							_62613_obj+=_1a947143d_gen_type_kind(_1a709c632_g);
							_62613_obj+=jule::Str(",", 1);
						}
						_iter_next_4406769024:;
						++it;
						goto _iter_begin_4406769024;
					}
					_iter_end_4406769024:;
				}
				_62613_obj=_62613_obj.slice(0LL,_62613_obj.len() - 1LL);
				_62613_obj+=jule::Str(">", 1);
			}
		}
	}
	if ((!(_211b70ab3_PRODUCTION)) && (*((*(_62537_m))._field_func))._field_anon) {
		{
			auto &_match_expr{ (*(_62537_m))._field_expr };
			
			if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>>()) {
				_case_begin_4406780656:;
				{
					if ((*((*((*((*((*(_62537_m))._field_expr.operator jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>()))._field_field))._field_decl))._field_owner))._field_cpp_linked) {
						_62613_obj+=jule::Str("(", 1);
						goto _match_end_4406777856;
					}
					goto _case_begin_4406777984;
				}
			}
			else {
				_case_begin_4406777984:;
				{
					_62613_obj+=jule::Str(".call(", 6);
					_62613_obj+=_1a709c632_gen_loc_info((*(_62537_m))._field_token);
					if ((*(_62537_m))._field_args.len() != 0LL) {
						_62613_obj+=jule::Str(",", 1);
					}
				}
			}
			_match_end_4406777856:;
		}
	} else {
		_62613_obj+=jule::Str("(", 1);
	}
	_62613_obj+=_1a709c632_gen_arg_expr_models((*(_62537_m))._field_args);
	_62613_obj+=jule::Str(")", 1);
	if ((*(_62537_m))._field_is_co) {
		_62613_obj=jule::Str("__JULE_CO(", 10) + _62613_obj;
		_62613_obj+=jule::Str(")", 1);
	}
	return _62613_obj;
}



inline jule::Bool _1a709c632_is_forwarded(jule::Ptr<_1a6bc3e29_Scope>& _67018_s) {
	jule::Any _6719_last = (*(_67018_s))._field_stmts[(*(_67018_s))._field_stmts.len() - 1LL];
	{
		auto &_match_expr{ _6719_last };
		
		if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
			_case_begin_4406790816:;
			{
				{
					auto &_match_expr{ (*(_6719_last.operator jule::Ptr<_1a8b431d7_Data>()))._field_model };
					
					if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>>()) {
						_case_begin_4406797232:;
						{
							return true;
						}
					}
					else {
						_case_begin_4406795792:;
						{
							return false;
						}
					}
					_match_end_4406795712:;
				}
			}
		}
		else {
			_case_begin_4406793136:;
			{
				return true;
			}
		}
		_match_end_4406793056:;
	}
}



inline jule::Str _1a709c632_gen_fn_call_expr_model(jule::Ptr<_1a69b8d2e_FnCallExprModel> _68731_m) {
	if (((*((*(_68731_m))._field_func))._method_is_builtin() || (!((*((*((*(_68731_m))._field_func))._field_decl))._field_exceptional))) || (((*(_68731_m))._field_except != nullptr) && ((*((*(_68731_m))._field_except))._field_stmts.len() == 0LL))) {
		return _1a709c632_gen_pure_fn_call_expr_model(_68731_m);
	}
	jule::Str _69513_obj = jule::Str("({\n", 3);
	_1a94c037c_add_indent();
	_69513_obj+=_1a94c037c_indent();
	_69513_obj+=jule::Str("auto except = ", 14);
	_69513_obj+=_1a709c632_gen_pure_fn_call_expr_model(_68731_m);
	_69513_obj+=jule::Str(";\n", 2);
	_69513_obj+=_1a94c037c_indent();
	if ((*(_68731_m))._field_except != nullptr) {
		if (((*((*(_68731_m))._field_func))._field_result == nullptr) || (!((*(_68731_m))._field_assigned))) {
			_69513_obj+=jule::Str("if (!except.ok()) ", 18);
			_69513_obj+=_1b6d721b6_gen_scope((*(_68731_m))._field_except);
			_69513_obj+=jule::Str("\n", 1);
		} else {
			jule::Bool _70817_forwarded = _1a709c632_is_forwarded((*(_68731_m))._field_except);
			_69513_obj+=jule::Str("(except.ok()) ? (except.result) : (", 35);
			if (_70817_forwarded) {
				_69513_obj+=jule::Str("{", 1);
			}
			_69513_obj+=_1b6d721b6_gen_scope((*(_68731_m))._field_except);
			if (_70817_forwarded) {
				_69513_obj+=jule::Str(" ", 1);
				_69513_obj+=_1a709c632_get_init_expr((*((*(_68731_m))._field_func))._field_result);
				_69513_obj+=jule::Str(";}", 2);
			}
			_69513_obj+=jule::Str(");\n", 3);
		}
		_1a94c037c_done_indent();
	} else {
		jule::Str _72317_path = _1a709c632_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_68731_m))._field_token._field_file))._method_path()));
		_72317_path=_72317_path.slice(1LL,_72317_path.len() - 1LL);
		_69513_obj+=jule::Str("if (!except.ok()) jule::panic(jule::Str(\"", 41);
		_69513_obj+=jule::Str("unhandled exceptional: \") + except.error.type->to_str(except.error.data) + jule::Str(\"\\nlocation: ", 98);
		_69513_obj+=_72317_path;
		_69513_obj+=jule::Str(":", 1);
		_69513_obj+=_1b6ac3d91_itoa((*(_68731_m))._field_token._field_row);
		_69513_obj+=jule::Str(":", 1);
		_69513_obj+=_1b6ac3d91_itoa((*(_68731_m))._field_token._field_column);
		_69513_obj+=jule::Str("\"));\n", 5);
		if ((!((*((*((*(_68731_m))._field_func))._field_decl))._method_is_void()))) {
			_69513_obj+=_1a94c037c_indent();
			_69513_obj+=jule::Str("(except.result);\n", 17);
		}
		_1a94c037c_done_indent();
	}
	_69513_obj+=_1a94c037c_indent();
	_69513_obj+=jule::Str("})", 2);
	return _69513_obj;
}



inline jule::Str _1a709c632_gen_slice_expr_model(jule::Ptr<_1a69b8d2e_SliceExprModel> _74629_m) {
	if ((*(_74629_m))._field_elems.len() == 0LL) {
		return _1a947143d_as_slice_kind((*(_74629_m))._field_elem_kind) + jule::Str("()", 2);
	}
	jule::Str _75113_obj = _1a947143d_as_slice_kind((*(_74629_m))._field_elem_kind);
	_75113_obj+=jule::Str("({", 2);
	_75113_obj+=_1a709c632_gen_arg_expr_models((*(_74629_m))._field_elems);
	_75113_obj+=jule::Str("})", 2);
	return _75113_obj;
}



inline jule::Str _1a709c632_gen_indexing_expr_model(jule::Ptr<_1a69b8d2e_IndexingExprModel> _75832_m) {
	jule::Str _75913_obj = _1a709c632_gen_expr_model((*((*(_75832_m))._field_expr))._field_model);
	if (_211b70ab3_OPT_ACCESS) {
		jule::Bool _76313_array = (*((*((*(_75832_m))._field_expr))._field_kind))._method_arr() != nullptr;
		if (_76313_array && (*((*(_75832_m))._field_index))._method_is_const()) {
			_75913_obj+=jule::Str(".__at(", 6);
			_75913_obj+=_1a709c632_gen_expr((*((*(_75832_m))._field_index))._field_model);
			_75913_obj+=jule::Str(")", 1);
			return _75913_obj;
		}
		{
			auto &_match_expr{ (*((*(_75832_m))._field_index))._field_model };
			
			if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
				_case_begin_4406850560:;
				{
					jule::Ptr<_1a7003e4b_Var> _77517_i = (*((*(_75832_m))._field_index))._field_model.operator jule::Ptr<_1a7003e4b_Var>();
					if ((*(_77517_i))._field_mutable || ((*(_77517_i))._field_iter_relation == nullptr)) {
						goto _match_end_4406850448;
					}
					{
						auto &_match_expr{ (*((*(_75832_m))._field_expr))._field_model };
						
						if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
							_case_begin_4406856240:;
							{
								jule::Ptr<_1a7003e4b_Var> _78121_r = (*((*(_75832_m))._field_expr))._field_model.operator jule::Ptr<_1a7003e4b_Var>();
								if ((*((*(_77517_i))._field_iter_relation))._field_range == _78121_r) {
									_75913_obj+=jule::Str(".__at(", 6);
									_75913_obj+=_1a709c632_gen_expr((*((*(_75832_m))._field_index))._field_model);
									_75913_obj+=jule::Str(")", 1);
									return _75913_obj;
								}
							}
						}
						_match_end_4406856128:;
					}
				}
			}
			_match_end_4406850448:;
		}
	}
	{
		
		if (_211b70ab3_PRODUCTION || (*((*((*(_75832_m))._field_expr))._field_kind))._method_ptr() != nullptr || (*((*((*(_75832_m))._field_expr))._field_kind))._method_map() != nullptr) {
			_case_begin_4406851152:;
			{
				_75913_obj+=jule::Str("[", 1);
				_75913_obj+=_1a709c632_gen_expr((*((*(_75832_m))._field_index))._field_model);
				_75913_obj+=jule::Str("]", 1);
			}
		}
		else {
			_case_begin_4406859360:;
			{
				_75913_obj+=jule::Str(".at(", 4);
				_75913_obj+=_1a709c632_gen_loc_info((*(_75832_m))._field_token);
				_75913_obj+=jule::Str(",", 1);
				_75913_obj+=_1a709c632_gen_expr((*((*(_75832_m))._field_index))._field_model);
				_75913_obj+=jule::Str(")", 1);
			}
		}
		_match_end_4406859712:;
	}
	return _75913_obj;
}



inline jule::Str _1a709c632_gen_anon_fn_expr_model(jule::Ptr<_1a69b8d2e_AnonFnExprModel> _81431_m) {
	jule::Str _81513_obj = _1a947143d_gen_fn_kind((*(_81431_m))._field_func);
	_81513_obj+=jule::Str("([=]", 4);
	_81513_obj+=_1a94c037c_gen_params_ins((*((*(_81431_m))._field_func))._field_params);
	_81513_obj+=jule::Str(" mutable -> ", 12);
	_81513_obj+=_1a94c037c_gen_fn_ins_result((*(_81431_m))._field_func);
	_81513_obj+=jule::Str(" ", 1);
	_81513_obj+=_1b6d721b6_gen_fn_scope((*(_81431_m))._field_func);
	_81513_obj+=jule::Str(")", 1);
	return _81513_obj;
}



inline jule::Str _1a709c632_gen_map_expr_model(jule::Ptr<_1a69b8d2e_MapExprModel> _82627_m) {
	jule::Str _82713_obj = _1a946cd0d_as_jt(jule::Str("map", 3));
	_82713_obj+=jule::Str("<", 1);
	_82713_obj+=_1a947143d_gen_type_kind((*(_82627_m))._field_key_kind);
	_82713_obj+=jule::Str(",", 1);
	_82713_obj+=_1a947143d_gen_type_kind((*(_82627_m))._field_val_kind);
	_82713_obj+=jule::Str(">({", 3);
	if ((*(_82627_m))._field_entries.len() > 0LL) {
		{
			auto &expr = (*(_82627_m))._field_entries;
			auto it = expr.begin();
			_iter_begin_4406886720:;
			if (it != expr.end()) {
				jule::Ptr<_1a69b8d2e_KeyValPairExprModel> _1a709c632_pair = *it;
				{
					jule::Str _83521_pair_obj = jule::Str("{", 1);
					_83521_pair_obj+=_1a709c632_gen_expr((*(_1a709c632_pair))._field_key);
					_83521_pair_obj+=jule::Str(",", 1);
					_83521_pair_obj+=_1a709c632_gen_expr((*(_1a709c632_pair))._field_val);
					_83521_pair_obj+=jule::Str("}", 1);
					_82713_obj+=_83521_pair_obj;
					_82713_obj+=jule::Str(",", 1);
				}
				_iter_next_4406886720:;
				++it;
				goto _iter_begin_4406886720;
			}
			_iter_end_4406886720:;
		}
		_82713_obj=_82713_obj.slice(0LL,_82713_obj.len() - 1LL);
	}
	_82713_obj+=jule::Str("})", 2);
	return _82713_obj;
}



inline jule::Str _1a709c632_gen_slicing_expr_model(jule::Ptr<_1a69b8d2e_SlicingExprModel> _84931_m) {
	jule::Str _85013_obj = _1a709c632_gen_expr_model((*(_84931_m))._field_expr);
	_85013_obj+=jule::Str(".slice(", 7);
	if ((!(_211b70ab3_PRODUCTION))) {
		_85013_obj+=_1a709c632_gen_loc_info((*(_84931_m))._field_token);
		_85013_obj+=jule::Str(",", 1);
	}
	_85013_obj+=_1a709c632_gen_expr((*(_84931_m))._field_left);
	if ((*(_84931_m))._field_right != nullptr) {
		_85013_obj+=jule::Str(",", 1);
		_85013_obj+=_1a709c632_gen_expr((*(_84931_m))._field_right);
	}
	_85013_obj+=jule::Str(")", 1);
	return _85013_obj;
}



inline jule::Str _1a709c632_gen_trait_sub_ident_expr_model(jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel> _86539_m) {
	jule::Str _86613_obj = _1a709c632_gen_expr_model((*(_86539_m))._field_expr);
	_86613_obj+=jule::Str(".get(", 5);
	if ((!(_211b70ab3_PRODUCTION))) {
		_86613_obj+=_1a709c632_gen_loc_info((*(_86539_m))._field_token);
	}
	_86613_obj+=jule::Str(")._method_", 10);
	_86613_obj+=(*(_86539_m))._field_ident;
	return _86613_obj;
}



inline jule::Str _1a709c632_gen_struct_sub_ident_expr_model(jule::Ptr<_1a69b8d2e_StructSubIdentExprModel> _87640_m) {
	jule::Str _87713_obj = _1a709c632_gen_expr_model((*(_87640_m))._field_expr);
	_87713_obj+=jule::Str(".", 1);
	if ((*(_87640_m))._field_field != nullptr) {
		_87713_obj+=_1a946cd0d_field_out_ident((*((*(_87640_m))._field_field))._field_decl);
	} else {
		_87713_obj+=_1a946cd0d_fn_ins_out_ident((*(_87640_m))._field_method);
	}
	return _87713_obj;
}



inline jule::Str _1a709c632_gen_common_ident_expr_model(jule::Ptr<_1a69b8d2e_CommonIdentExprModel> _88732_m) {
	return (*(_88732_m))._field_ident;
}



inline jule::Str _1a709c632_gen_common_sub_ident_expr_model(jule::Ptr<_1a69b8d2e_CommonSubIdentExprModel> _89140_m) {
	jule::Str _89213_obj = _1a709c632_gen_expr_model((*(_89140_m))._field_expr);
	_89213_obj+=jule::Str(".", 1);
	_89213_obj+=(*(_89140_m))._field_ident;
	return _89213_obj;
}



inline jule::Str _1a709c632_gen_array_expr_model(jule::Ptr<_1a69b8d2e_ArrayExprModel> _89829_m) {
	if ((*(_89829_m))._field_elems.len() == 0LL) {
		return _1a947143d_gen_array_kind((*(_89829_m))._field_kind) + jule::Str("()", 2);
	}
	jule::Str _90313_obj = _1a947143d_gen_array_kind((*(_89829_m))._field_kind);
	if (((*(_89829_m))._field_elems.len() == 2LL) && ((*(_89829_m))._field_elems[1LL] == nullptr)) {
		_90313_obj+=jule::Str("(", 1);
		_90313_obj+=_1a709c632_gen_expr((*(_89829_m))._field_elems[0LL]);
		_90313_obj+=jule::Str(")", 1);
		return _90313_obj;
	}
	_90313_obj+=jule::Str("({", 2);
	_90313_obj+=_1a709c632_gen_arg_expr_models((*(_89829_m))._field_elems);
	_90313_obj+=jule::Str("})", 2);
	return _90313_obj;
}



inline jule::Str _1a709c632_gen_fn_ins_expr_model_common(jule::Ptr<_1a691a500_FnIns> _92137_m) {
	jule::Str _92213_obj = _1a947143d_gen_fn_kind(_92137_m);
	_92213_obj+=jule::Str("(", 1);
	_92213_obj+=_1a709c632_gen_fn_ins_expr_model(_92137_m);
	_92213_obj+=jule::Str(")", 1);
	return _92213_obj;
}



inline jule::Str _1a709c632_gen_fn_ins_expr_model(jule::Ptr<_1a691a500_FnIns> _93030_m) {
	if (((*(_93030_m))._field_decl != nullptr) && (*((*(_93030_m))._field_decl))._field_cpp_linked) {
		jule::Ptr<_1b7509a90_Directive> _93213_d = _1a947143d_find_directive((*((*(_93030_m))._field_decl))._field_directives,jule::Str("namespace", 9));
		if (_93213_d != nullptr) {
			jule::Str _93421_obj = _1a709c632_concat_all_parts((*(_93213_d))._field_args);
			_93421_obj+=jule::Str("::", 2);
			_93421_obj+=_1a946cd0d_fn_ins_out_ident(_93030_m);
			return _93421_obj;
		}
	}
	return _1a946cd0d_fn_ins_out_ident(_93030_m);
}



inline jule::Str _1a709c632_gen_tuple_expr_model(jule::Ptr<_1a69b8d2e_TupleExprModel> _94329_m) {
	jule::Str _94413_obj = jule::Str("std::make_tuple(", 16);
	{
		auto &expr = (*(_94329_m))._field_datas;
		auto it = expr.begin();
		_iter_begin_4406945600:;
		if (it != expr.end()) {
			jule::Ptr<_1a8b431d7_Data> _1a709c632_d = *it;
			{
				_94413_obj+=_1a709c632_gen_expr((*(_1a709c632_d))._field_model);
				_94413_obj+=jule::Str(",", 1);
			}
			_iter_next_4406945600:;
			++it;
			goto _iter_begin_4406945600;
		}
		_iter_end_4406945600:;
	}
	_94413_obj=_94413_obj.slice(0LL,_94413_obj.len() - 1LL);
	_94413_obj+=jule::Str(")", 1);
	return _94413_obj;
}



inline jule::Str _1a709c632_gen_builtin_new_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinNewCallExprModel> _95440_m) {
	jule::Str _95513_obj = jule::Str("jule::new_ptr<", 14);
	_95513_obj+=_1a947143d_gen_type_kind((*(_95440_m))._field_kind);
	_95513_obj+=jule::Str(">(", 2);
	if ((*(_95440_m))._field_init != nullptr) {
		_95513_obj+=_1a709c632_gen_expr((*(_95440_m))._field_init);
	}
	_95513_obj+=jule::Str(")", 1);
	return _95513_obj;
}



inline jule::Str _1a709c632_gen_builtin_out_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinOutCallExprModel> _96540_m) {
	if ((*(_96540_m))._field_debug && _211b70ab3_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _96913_obj = jule::Str("jule::out(", 10);
	_96913_obj+=_1a709c632_gen_expr((*(_96540_m))._field_expr);
	_96913_obj+=jule::Str(")", 1);
	return _96913_obj;
}



inline jule::Str _1a709c632_gen_builtin_outln_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinOutlnCallExprModel> _97542_m) {
	if ((*(_97542_m))._field_debug && _211b70ab3_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _97913_obj = jule::Str("jule::outln(", 12);
	_97913_obj+=_1a709c632_gen_expr((*(_97542_m))._field_expr);
	_97913_obj+=jule::Str(")", 1);
	return _97913_obj;
}



inline jule::Str _1a709c632_gen_builtin_panic_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel> _98542_m) {
	jule::Str _98613_path = _1a709c632_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_98542_m))._field_token._field_file))._method_path()));
	_98613_path=_98613_path.slice(1LL,_98613_path.len() - 1LL);
	jule::Str _98913_obj = jule::Str("jule::panic(", 12);
	_98913_obj+=_1a709c632_gen_expr((*(_98542_m))._field_expr);
	_98913_obj+=jule::Str(" + jule::Str(\"\\nlocation: ", 26);
	_98913_obj+=_98613_path;
	_98913_obj+=jule::Str(":", 1);
	_98913_obj+=_1b6ac3d91_itoa((*(_98542_m))._field_token._field_row);
	_98913_obj+=jule::Str(":", 1);
	_98913_obj+=_1b6ac3d91_itoa((*(_98542_m))._field_token._field_column);
	_98913_obj+=jule::Str("\"));", 4);
	return _98913_obj;
}



inline jule::Str _1a709c632_gen_builtin_assert_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinAssertCallExprModel> _100143_m) {
	if (_211b70ab3_PRODUCTION) {
		return jule::Str();
	}
	jule::Str _100513_path = _1a709c632_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_100143_m))._field_token._field_file))._method_path()));
	_100513_path=_100513_path.slice(1LL,_100513_path.len() - 1LL);
	jule::Str _100813_obj = jule::Str("if (!(", 6);
	_100813_obj+=_1a709c632_gen_expr((*(_100143_m))._field_expr);
	_100813_obj+=jule::Str(")) jule::panic(jule::Str(", 25);
	_100813_obj+=_1a709c632_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*(_100143_m))._field_log));
	_100813_obj+=jule::Str(") + jule::Str(\"\\nlocation: ", 27);
	_100813_obj+=_100513_path;
	_100813_obj+=jule::Str(":", 1);
	_100813_obj+=_1b6ac3d91_itoa((*(_100143_m))._field_token._field_row);
	_100813_obj+=jule::Str(":", 1);
	_100813_obj+=_1b6ac3d91_itoa((*(_100143_m))._field_token._field_column);
	_100813_obj+=jule::Str("\"));", 4);
	return _100813_obj;
}



inline jule::Str _1a709c632_gen_builtin_error_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel> _102242_m) {
	jule::Str _102313_obj = jule::Str("return ", 7);
	if ((*((*((*(_102242_m))._field_func))._field_decl))._method_is_void()) {
		_102313_obj+=jule::Str("jule::VoidExceptional(", 22);
	} else {
		_102313_obj+=jule::Str("jule::Exceptional<", 18);
		_102313_obj+=_1a947143d_gen_type_kind((*((*(_102242_m))._field_func))._field_result);
		_102313_obj+=jule::Str(">(", 2);
	}
	_102313_obj+=_1a709c632_gen_expr((*(_102242_m))._field_err);
	_102313_obj+=jule::Str(")", 1);
	return _102313_obj;
}



inline jule::Str _1a709c632_gen_builtin_make_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinMakeCallExprModel> _103641_m) {
	jule::Str _103713_obj = jule::Str();
	if ((*(_103641_m))._field_len != nullptr) {
		_103713_obj+=_1a709c632_gen_expr((*(_103641_m))._field_len);
	} else {
		_103713_obj+=jule::Str("0", 1);
	}
	if ((*(_103641_m))._field_cap != nullptr) {
		_103713_obj+=jule::Str(",", 1) + _1a709c632_gen_expr((*(_103641_m))._field_cap);
	}
	if ((*((*((*((*(_103641_m))._field_kind))._method_slc()))._field_elem))._method_enm() != nullptr) {
		_103713_obj+=jule::Str(",", 1);
		_103713_obj+=_1a709c632_get_init_expr((*((*((*(_103641_m))._field_kind))._method_slc()))._field_elem);
		if ((*(_103641_m))._field_cap != nullptr) {
			_103713_obj=(_1a947143d_gen_type_kind((*(_103641_m))._field_kind) + jule::Str("::alloc(", 8)) + _103713_obj;
		} else {
			_103713_obj=(_1a947143d_gen_type_kind((*(_103641_m))._field_kind) + jule::Str("::alloc_def(", 12)) + _103713_obj;
		}
	} else {
		_103713_obj=(_1a947143d_gen_type_kind((*(_103641_m))._field_kind) + jule::Str("::alloc(", 8)) + _103713_obj;
	}
	_103713_obj+=jule::Str(")", 1);
	return _103713_obj;
}



inline jule::Str _1a709c632_gen_builtin_append_call_expr_model_assign_opt(jule::Bool _10645_same_dest,jule::Str& _10656_dest_expr,jule::Ptr<_1a6a19a50_TypeKind>& _106610_dest_kind,jule::Ptr<_1a69b8d2e_SliceExprModel>& _106710_s,jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>& _106810_m) {
	jule::Str _106913_obj = jule::Str();
	if ((!(_10645_same_dest))) {
		_106913_obj+=_10656_dest_expr;
		_106913_obj+=jule::Str(" = jule::alloc_for_append(", 26);
		_106913_obj+=_1a709c632_gen_expr_model((*(_106810_m))._field_dest);
		_106913_obj+=jule::Str(",", 1);
		_106913_obj+=_1b6ac3d91_itoa(static_cast<jule::I64>((*(_106710_s))._field_elems.len()));
		_106913_obj+=jule::Str(");", 2);
	}
	{
		auto &expr = (*(_106710_s))._field_elems;
		auto it = expr.begin();
		_iter_begin_4407023712:;
		if (it != expr.end()) {
			jule::Any _1a709c632_e = *it;
			{
				_106913_obj+=_10656_dest_expr;
				_106913_obj+=jule::Str(".__push(", 8);
				_106913_obj+=_1a709c632_gen_expr_model(_1a709c632_e);
				_106913_obj+=jule::Str(");", 2);
			}
			_iter_next_4407023712:;
			++it;
			goto _iter_begin_4407023712;
		}
		_iter_end_4407023712:;
	}
	return _106913_obj;
}



inline std::tuple<jule::Str,jule::Bool> _1a709c632_gen_builtin_append_call_expr_model_assign(jule::Any _108850_dest,jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel> _108871_m) {
	jule::Bool _1088110_optimized = jule::Bool();
	{
		auto &_match_expr{ (*(_108871_m))._field_elements };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_SliceExprModel>>()) {
			_case_begin_4407027984:;
			{
				{
					auto &_match_expr{ _108850_dest };
					
					if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
						_case_begin_4407029488:;
						{
							jule::Ptr<_1a69b8d2e_SliceExprModel> _109321_s = (*(_108871_m))._field_elements.operator jule::Ptr<_1a69b8d2e_SliceExprModel>();
							jule::Str _109417_dest_expr = _1a709c632_gen_expr_model(_108850_dest);
							jule::Ptr<_1a7003e4b_Var> _109521_dest_var = _108850_dest.operator jule::Ptr<_1a7003e4b_Var>();
							jule::Bool _109617_same_dest = (*(_108871_m))._field_dest == _109521_dest_var;
							_1088110_optimized = true;
							return std::make_tuple(_1a709c632_gen_builtin_append_call_expr_model_assign_opt(_109617_same_dest,_109417_dest_expr,(*((*(_109521_dest_var))._field_kind))._field_kind,_109321_s,_108871_m),_1088110_optimized);
						}
					}
					else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>>()) {
						_case_begin_4407029600:;
						{
							jule::Ptr<_1a69b8d2e_SliceExprModel> _110121_s = (*(_108871_m))._field_elements.operator jule::Ptr<_1a69b8d2e_SliceExprModel>();
							jule::Str _110217_dest_expr = _1a709c632_gen_expr_model(_108850_dest);
							jule::Ptr<_1b7905331_FieldIns> _110321_dest_field = (*(_108850_dest.operator jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>()))._field_field;
							jule::Bool _110417_same_dest = (*(_108871_m))._field_dest == _110321_dest_field;
							_1088110_optimized = true;
							return std::make_tuple(_1a709c632_gen_builtin_append_call_expr_model_assign_opt(_110417_same_dest,_110217_dest_expr,(*(_110321_dest_field))._field_kind,_110121_s,_108871_m),_1088110_optimized);
						}
					}
					_match_end_4407029216:;
				}
			}
		}
		_match_end_4407027872:;
	}
	_1088110_optimized = false;
	return std::make_tuple(_1a709c632_gen_builtin_append_call_expr_model(_108871_m),_1088110_optimized);
}



inline jule::Str _1a709c632_gen_builtin_append_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel> _111343_m) {
	jule::Str _111413_obj = jule::Str("jule::append(", 13);
	_111413_obj+=_1a709c632_gen_expr_model((*(_111343_m))._field_dest);
	_111413_obj+=jule::Str(",", 1);
	_111413_obj+=_1a709c632_gen_expr_model((*(_111343_m))._field_elements);
	_111413_obj+=jule::Str(")", 1);
	return _111413_obj;
}



inline jule::Str _1a709c632_gen_builtin_clone_call_expr_model(jule::Ptr<_1a69b8d2e_BuiltinCloneCallExprModel> _112242_m) {
	jule::Str _112313_obj = jule::Str("jule::clone(", 12);
	_112313_obj+=_1a709c632_gen_expr_model((*(_112242_m))._field_expr);
	_112313_obj+=jule::Str(")", 1);
	return _112313_obj;
}



inline jule::Str _1a709c632_gen_sizeof_expr_model(jule::Ptr<_1a69b8d2e_SizeofExprModel> _112930_m) {
	jule::Str _113013_obj = jule::Str("sizeof(", 7);
	_113013_obj+=_1a709c632_gen_expr((*(_112930_m))._field_expr);
	_113013_obj+=jule::Str(")", 1);
	return _113013_obj;
}



inline jule::Str _1a709c632_gen_alignof_expr_model(jule::Ptr<_1a69b8d2e_AlignofExprModel> _113631_m) {
	jule::Str _113713_obj = jule::Str("alignof(", 8);
	_113713_obj+=_1a709c632_gen_expr((*(_113631_m))._field_expr);
	_113713_obj+=jule::Str(")", 1);
	return _113713_obj;
}



inline jule::Str _1a709c632_gen_rune_expr_model(jule::Ptr<_1a69b8d2e_RuneExprModel> _114324_m) {
	if ((*(_114324_m))._field_code <= 127LL) {
		jule::Str _114517_b = _1a709c632_sbtoa(static_cast<jule::U8>(static_cast<jule::U8>((*(_114324_m))._field_code)));
		if (_114517_b == jule::Str("'", 1)) {
			_114517_b=jule::Str("\\'", 2);
		}
		return (jule::Str("'", 1) + _114517_b) + jule::Str("'", 1);
	}
	return _1a709c632_i64toa(static_cast<jule::I64>(static_cast<jule::I64>((*(_114324_m))._field_code)));
}



inline jule::Str _1a709c632_gen_struct_static_ident_expr_model(jule::Ptr<_1a69b8d2e_StructStaticIdentExprModel> _115443_m) {
	jule::Str _115513_obj = _1a946cd0d_struct_ins_out_ident((*(_115443_m))._field_structure);
	_115513_obj+=jule::Str("::", 2);
	_115513_obj+=_1a946cd0d_fn_ins_out_ident((*(_115443_m))._field_method);
	return _115513_obj;
}



inline jule::Str _1a709c632_gen_integrated_to_str_expr_model(jule::Ptr<_1a69b8d2e_IntegratedToStrExprModel> _116141_m) {
	jule::Str _116213_obj = jule::Str("jule::to_str(", 13);
	_116213_obj+=_1a709c632_gen_expr_model((*(_116141_m))._field_expr);
	_116213_obj+=jule::Str(")", 1);
	return _116213_obj;
}



inline jule::Str _1a709c632_gen_ternary_expr_model(jule::Ptr<_1a69b8d2e_TernaryExprModel> _116831_m) {
	jule::Str _116913_obj = jule::Str("((", 2);
	_116913_obj+=_1a709c632_gen_expr_model((*(_116831_m))._field_condition);
	_116913_obj+=jule::Str(") ? (", 5);
	_116913_obj+=_1a709c632_gen_expr_model((*(_116831_m))._field_true_expr);
	_116913_obj+=jule::Str(") : (", 5);
	_116913_obj+=_1a709c632_gen_expr_model((*(_116831_m))._field_false_expr);
	_116913_obj+=jule::Str("))", 2);
	return _116913_obj;
}



inline jule::Str _1a709c632_gen_backend_emit_expr_model(jule::Ptr<_1a69b8d2e_BackendEmitExprModel> _117936_m) {
	if ((*(_117936_m))._field_exprs.len() == 0LL) {
		return (*(_117936_m))._field_code;
	}
	{
		auto &expr = (*(_117936_m))._field_exprs;
		auto it = expr.begin();
		_iter_begin_4407083360:;
		if (it != expr.end()) {
			jule::Int _1a709c632_i = it - expr.begin();
			jule::Any _1a709c632_expr = *it;
			{
				(*(_117936_m))._field_exprs[_1a709c632_i]=jule::Any(_1a709c632_gen_expr(_1a709c632_expr));
			}
			_iter_next_4407083360:;
			++it;
			_1a709c632_i++;
			goto _iter_begin_4407083360;
		}
		_iter_end_4407083360:;
	}
	return _1a9265e14_format((*(_117936_m))._field_code,(*(_117936_m))._field_exprs);
}



inline jule::Str _1a709c632_gen_free_expr_model(jule::Ptr<_1a69b8d2e_FreeExprModel> _119028_m) {
	if (_211b7d3b7_RC) {
		return _1a709c632_gen_expr((*(_119028_m))._field_expr) + jule::Str(".dealloc()", 10);
	}
	return _1a709c632_gen_expr((*(_119028_m))._field_expr) + jule::Str(".__free()", 9);
}



inline jule::Str _1a709c632_gen_expr_model(jule::Any _119723_m) {
	{
		auto &_match_expr{ _119723_m };
		
		if (_match_expr.type_is<jule::Ptr<_1a8b431d7_Data>>()) {
			_case_begin_4407091248:;
			{
				return _1a709c632_gen_expr_model((*(_119723_m.operator jule::Ptr<_1a8b431d7_Data>()))._field_model);
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a6a19a50_TypeKind>>()) {
			_case_begin_4407095424:;
			{
				return _1a947143d_gen_type_kind(_119723_m.operator jule::Ptr<_1a6a19a50_TypeKind>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b6dd59aa_Const>>()) {
			_case_begin_4407094704:;
			{
				return _1a709c632_gen_const_expr_model(_119723_m.operator jule::Ptr<_1b6dd59aa_Const>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a7003e4b_Var>>()) {
			_case_begin_4407094800:;
			{
				return _1a709c632_gen_var_expr_model(_119723_m.operator jule::Ptr<_1a7003e4b_Var>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b76b472d_Trait>>()) {
			_case_begin_4407094960:;
			{
				return _1a946cd0d_trait_out_ident(_119723_m.operator jule::Ptr<_1b76b472d_Trait>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7905331_Struct>>()) {
			_case_begin_4407095056:;
			{
				return _1a709c632_gen_struct_expr_model(_119723_m.operator jule::Ptr<_1b7905331_Struct>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1b7905331_StructIns>>()) {
			_case_begin_4407095152:;
			{
				return _1a709c632_gen_struct_ins_expr_model(_119723_m.operator jule::Ptr<_1b7905331_StructIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a691a500_FnIns>>()) {
			_case_begin_4407094128:;
			{
				return _1a709c632_gen_fn_ins_expr_model_common(_119723_m.operator jule::Ptr<_1a691a500_FnIns>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BinopExprModel>>()) {
			_case_begin_4407094224:;
			{
				return _1a709c632_gen_binop_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BinopExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_UnaryExprModel>>()) {
			_case_begin_4407094320:;
			{
				return _1a709c632_gen_unary_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_UnaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructLitExprModel>>()) {
			_case_begin_4407094416:;
			{
				return _1a709c632_gen_struct_lit_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_StructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_AllocStructLitExprModel>>()) {
			_case_begin_4407096272:;
			{
				return _1a709c632_gen_alloc_struct_lit_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_AllocStructLitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_CastingExprModel>>()) {
			_case_begin_4407096368:;
			{
				return _1a709c632_gen_casting_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_CastingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_FnCallExprModel>>()) {
			_case_begin_4407096464:;
			{
				return _1a709c632_gen_fn_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_FnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_SliceExprModel>>()) {
			_case_begin_4407096560:;
			{
				return _1a709c632_gen_slice_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_SliceExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_ArrayExprModel>>()) {
			_case_begin_4407096656:;
			{
				return _1a709c632_gen_array_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_ArrayExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_IndexingExprModel>>()) {
			_case_begin_4407096768:;
			{
				return _1a709c632_gen_indexing_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_IndexingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_AnonFnExprModel>>()) {
			_case_begin_4407096880:;
			{
				return _1a709c632_gen_anon_fn_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_AnonFnExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_MapExprModel>>()) {
			_case_begin_4407096992:;
			{
				return _1a709c632_gen_map_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_MapExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_SlicingExprModel>>()) {
			_case_begin_4407097104:;
			{
				return _1a709c632_gen_slicing_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_SlicingExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel>>()) {
			_case_begin_4407097216:;
			{
				return _1a709c632_gen_trait_sub_ident_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_TraitSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>>()) {
			_case_begin_4407097328:;
			{
				return _1a709c632_gen_struct_sub_ident_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_StructSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_CommonIdentExprModel>>()) {
			_case_begin_4407097440:;
			{
				return _1a709c632_gen_common_ident_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_CommonIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_CommonSubIdentExprModel>>()) {
			_case_begin_4407097552:;
			{
				return _1a709c632_gen_common_sub_ident_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_CommonSubIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_TupleExprModel>>()) {
			_case_begin_4407097664:;
			{
				return _1a709c632_gen_tuple_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_TupleExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinOutCallExprModel>>()) {
			_case_begin_4407097776:;
			{
				return _1a709c632_gen_builtin_out_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinOutCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinOutlnCallExprModel>>()) {
			_case_begin_4407097888:;
			{
				return _1a709c632_gen_builtin_outln_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinOutlnCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinNewCallExprModel>>()) {
			_case_begin_4407098000:;
			{
				return _1a709c632_gen_builtin_new_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinNewCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>>()) {
			_case_begin_4407098112:;
			{
				return _1a709c632_gen_builtin_panic_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinPanicCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinAssertCallExprModel>>()) {
			_case_begin_4407098224:;
			{
				return _1a709c632_gen_builtin_assert_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinAssertCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>>()) {
			_case_begin_4407098336:;
			{
				return _1a709c632_gen_builtin_error_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinErrorCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinMakeCallExprModel>>()) {
			_case_begin_4407098448:;
			{
				return _1a709c632_gen_builtin_make_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinMakeCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>>()) {
			_case_begin_4407098560:;
			{
				return _1a709c632_gen_builtin_append_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinAppendCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BuiltinCloneCallExprModel>>()) {
			_case_begin_4407098672:;
			{
				return _1a709c632_gen_builtin_clone_call_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BuiltinCloneCallExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_SizeofExprModel>>()) {
			_case_begin_4407098784:;
			{
				return _1a709c632_gen_sizeof_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_SizeofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_AlignofExprModel>>()) {
			_case_begin_4407098896:;
			{
				return _1a709c632_gen_alignof_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_AlignofExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_RuneExprModel>>()) {
			_case_begin_4407099008:;
			{
				return _1a709c632_gen_rune_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_RuneExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_StructStaticIdentExprModel>>()) {
			_case_begin_4407099120:;
			{
				return _1a709c632_gen_struct_static_ident_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_StructStaticIdentExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_IntegratedToStrExprModel>>()) {
			_case_begin_4407099232:;
			{
				return _1a709c632_gen_integrated_to_str_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_IntegratedToStrExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_TernaryExprModel>>()) {
			_case_begin_4407099344:;
			{
				return _1a709c632_gen_ternary_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_TernaryExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BackendEmitExprModel>>()) {
			_case_begin_4407099456:;
			{
				return _1a709c632_gen_backend_emit_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_BackendEmitExprModel>());
			}
		}
		else if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_FreeExprModel>>()) {
			_case_begin_4407099568:;
			{
				return _1a709c632_gen_free_expr_model(_119723_m.operator jule::Ptr<_1a69b8d2e_FreeExprModel>());
			}
		}
		else {
			_case_begin_4407093760:;
			{
				return jule::Str("<unimplemented_expression_model>", 32);
			}
		}
		_match_end_4407093680:;
	}
}



inline jule::Str _1a709c632_gen_expr(jule::Any _133017_e) {
	jule::Str _133113_obj = _1a709c632_gen_expr_model(_133017_e);
	if ((_133113_obj.len() == 0LL) || (_133113_obj[0LL] != '(')) {
		return _133113_obj;
	}
	{
		auto &_match_expr{ _133017_e };
		
		if (_match_expr.type_is<jule::Ptr<_1a69b8d2e_BinopExprModel>>()) {
			_case_begin_4407188960:;
			{
				_133113_obj=_133113_obj.slice(1LL,_133113_obj.len() - 1LL);
			}
		}
		_match_end_4407188400:;
	}
	return _133113_obj;
}



inline jule::Str _1a709c632_gen_val(jule::Ptr<_1a8b431d7_Value> _134316_v) {
	if ((*((*(_134316_v))._field_data))._method_is_const()) {
		return _1a709c632_gen_const_expr((*(_134316_v))._field_data);
	}
	return _1a709c632_gen_expr((*((*(_134316_v))._field_data))._field_model);
}



inline jule::Str _1a709c632_get_init_expr(jule::Ptr<_1a6a19a50_TypeKind> _135022_t) {
	if ((*(_135022_t))._method_ptr() != nullptr) {
		return jule::Str("nullptr", 7);
	}
	jule::Ptr<_1a6bb9150_Enum> _135513_enm = (*(_135022_t))._method_enm();
	if (_135513_enm != nullptr) {
		return _1a709c632_gen_val((*((*(_135513_enm))._field_items[0LL]))._field_value);
	}
	return _1a947143d_gen_type_kind(_135022_t) + jule::Str("()", 2);
}



inline jule::Str _1a946e727_get_derive_fn_decl_clone(jule::Ptr<_1b7905331_Struct>& _730_s) {
	jule::Str _813_obj = _1a947143d_gen_struct_kind(_730_s);
	_813_obj+=jule::Str(" clone(void) const ", 19);
	return _813_obj;
}



inline jule::Str _1a946e727_get_derive_fn_def_clone(jule::Ptr<_1b7905331_Struct>& _1329_s) {
	jule::Str _1413_obj = _1a947143d_gen_struct_kind(_1329_s);
	_1413_obj+=jule::Str(" ", 1) + _1413_obj;
	_1413_obj+=jule::Str("::clone(void) const ", 20);
	return _1413_obj;
}



inline jule::Str _1a946cd0d_as_ident(jule::Str _2513_ident) {
	return jule::Str("_", 1) + _2513_ident;
}



inline jule::Str _1a946cd0d_as_jt(jule::Str _2814_id) {
	if ((97LL <= _2814_id[0LL]) && (_2814_id[0LL] <= 122LL)) {
		_2814_id[0LL]-=32LL;
	}
	return jule::Str("jule::", 6) + _2814_id;
}



inline jule::Str _1a946cd0d_get_addr_as_ident(jule::Uintptr _3622_addr) {
	return jule::Str("_", 1) + _1b6ac3d91_fmt_uint(static_cast<jule::U64>(static_cast<jule::U64>(_3622_addr)),15LL);
}



inline jule::Str _1a946cd0d_as_out_ident(jule::Str _4517_ident,jule::Uintptr _4529_addr) {
	if (_4529_addr != 0LL) {
		jule::Str _4717_obj = _1a946cd0d_get_addr_as_ident(_4529_addr);
		_4717_obj+=jule::Str("_", 1);
		_4717_obj+=_4517_ident;
		return _4717_obj;
	}
	return _1a946cd0d_as_ident(_4517_ident);
}



inline jule::Str _1a946cd0d_as_local_ident(jule::Int _6119_row,jule::Int _6129_col,jule::Str _6139_ident) {
	jule::Str _6213_obj = _1b6ac3d91_itoa(_6119_row);
	_6213_obj+=_1b6ac3d91_itoa(_6129_col);
	_6213_obj+=jule::Str("_", 1);
	_6213_obj+=_6139_ident;
	return _1a946cd0d_as_ident(_6213_obj);
}



inline jule::Str _1a946cd0d_fn_out_ident(jule::Ptr<_1a691a500_Fn>& _7018_f) {
	{
		
		if ((*(_7018_f))._field_cpp_linked) {
			_case_begin_4407228080:;
			{
				return (*(_7018_f))._field_ident;
			}
		}
		else if ((*(_7018_f))._field_ident == jule::Str("main", 4)) {
			_case_begin_4407227696:;
			{
				return jule::Str("entry_point", 11);
			}
		}
		else if ((*(_7018_f))._method_is_method()) {
			_case_begin_4407227328:;
			{
				if ((*(_7018_f))._field_statically) {
					return jule::Str("_static_method_", 15) + (*(_7018_f))._field_ident;
				}
				return jule::Str("_method_", 8) + (*(_7018_f))._field_ident;
			}
		}
		else {
			_case_begin_4407225232:;
			{
				return _1a946cd0d_as_out_ident((*(_7018_f))._field_ident,static_cast<jule::Uintptr>((*((*(_7018_f))._field_token._field_file))._method_addr()));
			}
		}
		_match_end_4407225584:;
	}
}



inline jule::Str _1a946cd0d_fn_ins_out_ident(jule::Ptr<_1a691a500_FnIns>& _9026_f) {
	if ((*(_9026_f))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*((*(_9026_f))._field_decl))._field_ident;
	}
	if ((*((*(_9026_f))._field_decl))._field_cpp_linked || ((*(_9026_f))._field_generics.len() == 0LL)) {
		return _1a946cd0d_fn_out_ident((*(_9026_f))._field_decl);
	}
	{
		auto &expr = (*((*(_9026_f))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_4407242352:;
		if (it != expr.end()) {
			jule::Int _1a946cd0d_i = it - expr.begin();
			jule::Ptr<_1a691a500_FnIns> _1a946cd0d_ins = *it;
			{
				if ((*(_1a946cd0d_ins))._method_same(_9026_f)) {
					jule::Str _10121_obj = _1a946cd0d_fn_out_ident((*(_9026_f))._field_decl);
					_10121_obj+=jule::Str("_", 1);
					_10121_obj+=_1b6ac3d91_itoa(_1a946cd0d_i);
					return _10121_obj;
				}
			}
			_iter_next_4407242352:;
			++it;
			_1a946cd0d_i++;
			goto _iter_begin_4407242352;
		}
		_iter_end_4407242352:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1a946cd0d_trait_out_ident(jule::Ptr<_1b76b472d_Trait> _11220_t) {
	if ((*(_11220_t))._method_is_builtin()) {
		return jule::Str("jule::", 6) + (*(_11220_t))._field_ident;
	}
	return _1a946cd0d_as_out_ident((*(_11220_t))._field_ident,static_cast<jule::Uintptr>((*((*(_11220_t))._field_token._field_file))._method_addr()));
}



inline jule::Str _1a946cd0d_param_out_ident(jule::Ptr<_1a691a500_Param>& _12021_p) {
	if (_1b7553d92_is_anon_ident((*(_12021_p))._field_ident) || _1b7553d92_is_ignore_ident((*(_12021_p))._field_ident)) {
		return jule::Str();
	}
	return _1a946cd0d_as_local_ident((*(_12021_p))._field_token._field_row,(*(_12021_p))._field_token._field_column,(*(_12021_p))._field_ident);
}



inline jule::Str _1a946cd0d_struct_out_ident(jule::Ptr<_1b7905331_Struct>& _12822_s) {
	if ((*(_12822_s))._field_cpp_linked) {
		if (_1a947143d_has_directive((*(_12822_s))._field_directives,jule::Str("typedef", 7))) {
			return (*(_12822_s))._field_ident;
		}
		return jule::Str("struct ", 7) + (*(_12822_s))._field_ident;
	}
	return _1a946cd0d_as_out_ident((*(_12822_s))._field_ident,static_cast<jule::Uintptr>((*((*(_12822_s))._field_token._field_file))._method_addr()));
}



inline jule::Str _1a946cd0d_struct_ins_out_ident(jule::Ptr<_1b7905331_StructIns>& _13930_s) {
	if ((*((*(_13930_s))._field_decl))._field_cpp_linked || ((*(_13930_s))._field_generics.len() == 0LL)) {
		return _1a946cd0d_struct_out_ident((*(_13930_s))._field_decl);
	}
	{
		auto &expr = (*((*(_13930_s))._field_decl))._field_instances;
		auto it = expr.begin();
		_iter_begin_4407267856:;
		if (it != expr.end()) {
			jule::Int _1a946cd0d_i = it - expr.begin();
			jule::Ptr<_1b7905331_StructIns> _1a946cd0d_ins = *it;
			{
				if ((*(_1a946cd0d_ins))._method_same(_13930_s)) {
					jule::Str _14621_obj = _1a946cd0d_struct_out_ident((*(_13930_s))._field_decl);
					_14621_obj+=jule::Str("_", 1);
					_14621_obj+=_1b6ac3d91_itoa(_1a946cd0d_i);
					return _14621_obj;
				}
			}
			_iter_next_4407267856:;
			++it;
			_1a946cd0d_i++;
			goto _iter_begin_4407267856;
		}
		_iter_end_4407267856:;
	}
	return jule::Str("__?__", 5);
}



inline jule::Str _1a946cd0d_field_out_ident(jule::Ptr<_1b7905331_Field>& _15721_f) {
	if ((*((*(_15721_f))._field_owner))._field_cpp_linked) {
		return (*(_15721_f))._field_ident;
	}
	return jule::Str("_field_", 7) + (*(_15721_f))._field_ident;
}



inline jule::Str _1a946cd0d_var_out_ident(jule::Ptr<_1a7003e4b_Var> _16522_v) {
	{
		
		if ((*(_16522_v))._field_cpp_linked) {
			_case_begin_4407278656:;
			{
				return (*(_16522_v))._field_ident;
			}
		}
		else if ((*(_16522_v))._field_ident == jule::Str("error", 5)) {
			_case_begin_4407278400:;
			{
				return jule::Str("except.error", 12);
			}
		}
		else if ((*(_16522_v))._field_ident == jule::Str("self", 4)) {
			_case_begin_4407278032:;
			{
				if ((*((*((*(_16522_v))._field_kind))._field_kind))._method_sptr() != nullptr) {
					return jule::Str("this->self", 10);
				}
				return jule::Str("(*this)", 7);
			}
		}
		else if ((*(_16522_v))._field_scope != nullptr) {
			_case_begin_4407278128:;
			{
				return _1a946cd0d_as_local_ident((*(_16522_v))._field_token._field_row,(*(_16522_v))._field_token._field_column,(*(_16522_v))._field_ident);
			}
		}
		else {
			_case_begin_4407277024:;
			{
				return _1a946cd0d_as_out_ident((*(_16522_v))._field_ident,static_cast<jule::Uintptr>((*((*(_16522_v))._field_token._field_file))._method_addr()));
			}
		}
		_match_end_4407276848:;
	}
}



inline jule::Str _1a946cd0d_iter_begin_label_ident(jule::Uintptr _18827_it) {
	return jule::Str("_iter_begin_", 12) + _1b6ac3d91_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_18827_it)));
}



inline jule::Str _1a946cd0d_iter_end_label_ident(jule::Uintptr _19325_it) {
	return jule::Str("_iter_end_", 10) + _1b6ac3d91_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_19325_it)));
}



inline jule::Str _1a946cd0d_iter_next_label_ident(jule::Uintptr _19826_it) {
	return jule::Str("_iter_next_", 11) + _1b6ac3d91_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_19826_it)));
}



inline jule::Str _1a946cd0d_label_ident(jule::Str _20316_ident) {
	return jule::Str("_julec_label_", 13) + _20316_ident;
}



inline jule::Str _1a946cd0d_match_end_label_ident(jule::Uintptr _20826_m) {
	return jule::Str("_match_end_", 11) + _1b6ac3d91_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_20826_m)));
}



inline jule::Str _1a946cd0d_case_begin_label_ident(jule::Uintptr _21327_c) {
	return jule::Str("_case_begin_", 12) + _1b6ac3d91_itoa(static_cast<jule::Int>(static_cast<jule::Int>(_21327_c)));
}



inline jule::Ptr<_1b7509a90_Directive> _1a947143d_find_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>& _2524_directives,jule::Str _2555_tag) {
	{
		auto &expr = _2524_directives;
		auto it = expr.begin();
		_iter_begin_4407301216:;
		if (it != expr.end()) {
			jule::Ptr<_1b7509a90_Directive> _1a947143d_dr = *it;
			{
				if ((*(_1a947143d_dr))._field_tag._field_kind == _2555_tag) {
					return _1a947143d_dr;
				}
			}
			_iter_next_4407301216:;
			++it;
			goto _iter_begin_4407301216;
		}
		_iter_end_4407301216:;
	}
	return nullptr;
}



inline jule::Bool _1a947143d_has_directive(jule::Slice<jule::Ptr<_1b7509a90_Directive>>& _3519_directives,jule::Str _3550_tag) {
	return _1a947143d_find_directive(_3519_directives,_3550_tag) != nullptr;
}



inline jule::Str _1a947143d_gen_prim_kind(jule::Ptr<_1a6a19a50_Prim> _4018_p) {
	return _1a946cd0d_as_jt((*(_4018_p))._method_to_str());
}



inline jule::Str _1a947143d_gen_tuple_kind(jule::Ptr<_1a6a19a50_Tuple> _4523_t) {
	jule::Str _4613_obj = jule::Str("std::tuple<", 11);
	{
		auto &expr = (*(_4523_t))._field_types;
		auto it = expr.begin();
		_iter_begin_4407310336:;
		if (it != expr.end()) {
			jule::Ptr<_1a6a19a50_TypeKind> _1a947143d_tk = *it;
			{
				_4613_obj+=_1a947143d_gen_type_kind(_1a947143d_tk);
				_4613_obj+=jule::Str(",", 1);
			}
			_iter_next_4407310336:;
			++it;
			goto _iter_begin_4407310336;
		}
		_iter_end_4407310336:;
	}
	_4613_obj=_4613_obj.slice(0LL,_4613_obj.len() - 1LL);
	_4613_obj+=jule::Str(">", 1);
	return _4613_obj;
}



inline jule::Str _1a947143d_as_sptr_kind(jule::Str _5717_elem) {
	jule::Str _5813_obj = _1a946cd0d_as_jt(jule::Str("ptr", 3));
	_5813_obj+=jule::Str("<", 1);
	_5813_obj+=_5717_elem;
	_5813_obj+=jule::Str(">", 1);
	return _5813_obj;
}



inline jule::Str _1a947143d_gen_sptr_kind(jule::Ptr<_1a6a19a50_Sptr> _6622_sptr) {
	return _1a947143d_as_sptr_kind(_1a947143d_gen_type_kind((*(_6622_sptr))._field_elem));
}



inline jule::Str _1a947143d_gen_ptr_kind(jule::Ptr<_1a6a19a50_Ptr> _7121_p) {
	
	if ((*(_7121_p))._method_is_unsafe()) {
		return jule::Str("void*", 5);
	}
	jule::Str _7713_elem = _1a947143d_gen_type_kind((*(_7121_p))._field_elem);
	_7713_elem+=jule::Str("*", 1);
	return _7713_elem;
}



inline jule::Str _1a947143d_gen_enum_kind(jule::Ptr<_1a6bb9150_Enum> _8322_e) {
	return _1a947143d_gen_type_kind((*((*(_8322_e))._field_kind))._field_kind);
}



inline jule::Str _1a947143d_as_slice_kind(jule::Ptr<_1a6a19a50_TypeKind> _8722_elem) {
	jule::Str _8813_obj = _1a946cd0d_as_jt(jule::Str("slice", 5));
	_8813_obj+=jule::Str("<", 1);
	_8813_obj+=_1a947143d_gen_type_kind(_8722_elem);
	_8813_obj+=jule::Str(">", 1);
	return _8813_obj;
}



inline jule::Str _1a947143d_gen_slice_kind(jule::Ptr<_1a6a19a50_Slc> _9623_s) {
	return _1a947143d_as_slice_kind((*(_9623_s))._field_elem);
}



inline jule::Str _1a947143d_gen_map_kind(jule::Ptr<_1a6a19a50_Map> _10121_m) {
	jule::Str _10213_obj = _1a946cd0d_as_jt(jule::Str("map", 3));
	_10213_obj+=jule::Str("<", 1);
	_10213_obj+=_1a947143d_gen_type_kind((*(_10121_m))._field_key);
	_10213_obj+=jule::Str(",", 1);
	_10213_obj+=_1a947143d_gen_type_kind((*(_10121_m))._field_val);
	_10213_obj+=jule::Str(">", 1);
	return _10213_obj;
}



inline jule::Str _1a947143d_gen_trait_kind_from_ident(jule::Str _11130_ident) {
	jule::Str _11213_obj = _1a946cd0d_as_jt(jule::Str("trait", 5));
	_11213_obj+=jule::Str("<", 1);
	_11213_obj+=_11130_ident;
	_11213_obj+=jule::Str(">", 1);
	return _11213_obj;
}



inline jule::Str _1a947143d_gen_trait_kind(jule::Ptr<_1b76b472d_Trait> _12019_t) {
	jule::Str _1219_ident = _1a946cd0d_trait_out_ident(_12019_t);
	return _1a947143d_gen_trait_kind_from_ident(_1219_ident);
}



inline jule::Str _1a947143d_gen_struct_kind(jule::Ptr<_1b7905331_Struct> _12620_s) {
	jule::Str _12713_rep = jule::Str();
	if ((*(_12620_s))._field_cpp_linked && (!(_1a947143d_has_directive((*(_12620_s))._field_directives,jule::Str("typedef", 7))))) {
		_12713_rep+=jule::Str("struct ", 7);
	}
	_12713_rep+=_1a946cd0d_struct_out_ident(_12620_s);
	return _12713_rep;
}



inline jule::Str _1a947143d_gen_struct_kind_ins(jule::Ptr<_1b7905331_StructIns> _13728_s) {
	if ((*((*(_13728_s))._field_decl))._field_cpp_linked) {
		jule::Str _13917_ident = _1a946cd0d_struct_ins_out_ident(_13728_s);
		if ((*(_13728_s))._field_generics.len() > 0LL) {
			_13917_ident+=jule::Str("<", 1);
			{
				auto &expr = (*(_13728_s))._field_generics;
				auto it = expr.begin();
				_iter_begin_4407351632:;
				if (it != expr.end()) {
					jule::Ptr<_1a6a19a50_TypeKind> _1a947143d_g = *it;
					{
						_13917_ident+=_1a947143d_gen_type_kind(_1a947143d_g);
						_13917_ident+=jule::Str(",", 1);
					}
					_iter_next_4407351632:;
					++it;
					goto _iter_begin_4407351632;
				}
				_iter_end_4407351632:;
			}
			_13917_ident=_13917_ident.slice(0LL,_13917_ident.len() - 1LL);
			_13917_ident+=jule::Str(">", 1);
		}
		jule::Ptr<_1b7509a90_Directive> _14913_d = _1a947143d_find_directive((*((*(_13728_s))._field_decl))._field_directives,jule::Str("namespace", 9));
		if (_14913_d != nullptr) {
			_13917_ident=(_1a709c632_concat_all_parts((*(_14913_d))._field_args) + jule::Str("::", 2)) + _13917_ident;
		}
		return _13917_ident;
	}
	return _1a946cd0d_struct_ins_out_ident(_13728_s);
}



inline jule::Str _1a947143d_gen_array_kind(jule::Ptr<_1a6a19a50_Arr> _15923_a) {
	jule::Str _16013_obj = _1a946cd0d_as_jt(jule::Str("array", 5));
	_16013_obj+=jule::Str("<", 1);
	_16013_obj+=_1a947143d_gen_type_kind((*(_15923_a))._field_elem);
	_16013_obj+=jule::Str(",", 1);
	_16013_obj+=_1b6ac3d91_itoa((*(_15923_a))._field_n);
	_16013_obj+=jule::Str(">", 1);
	return _16013_obj;
}



inline jule::Str _1a947143d_gen_fn_anon_decl(jule::Ptr<_1a691a500_FnIns> _16925_f) {
	jule::Str _17013_decl = _1a94c037c_gen_fn_ins_result(_16925_f);
	_17013_decl+=jule::Str("(", 1);
	if ((*(_16925_f))._field_params.len() > 0LL) {
		{
			auto &expr = (*(_16925_f))._field_params;
			auto it = expr.begin();
			_iter_begin_4407370224:;
			if (it != expr.end()) {
				jule::Ptr<_1a691a500_ParamIns> _1a947143d_param = *it;
				{
					if ((*((*(_1a947143d_param))._field_decl))._method_is_self()) {
						goto _iter_next_4407370224;
					}
					_17013_decl+=_1a94c037c_gen_param_ins_prototype(_1a947143d_param);
					_17013_decl+=jule::Str(",", 1);
				}
				_iter_next_4407370224:;
				++it;
				goto _iter_begin_4407370224;
			}
			_iter_end_4407370224:;
		}
		_17013_decl=_17013_decl.slice(0LL,_17013_decl.len() - 1LL);
	} else {
		_17013_decl+=jule::Str("void", 4);
	}
	_17013_decl+=jule::Str(")", 1);
	return _17013_decl;
}



inline jule::Str _1a947143d_gen_fn_kind(jule::Ptr<_1a691a500_FnIns> _19220_f) {
	jule::Str _19313_obj = _1a946cd0d_as_jt(jule::Str("fn", 2));
	_19313_obj+=jule::Str("<", 1);
	_19313_obj+=_1a947143d_gen_fn_anon_decl(_19220_f);
	_19313_obj+=jule::Str(">", 1);
	return _19313_obj;
}



inline jule::Str _1a947143d_gen_type_kind(jule::Ptr<_1a6a19a50_TypeKind> _20122_k) {
	{
		
		if ((*(_20122_k))._method_cpp_linked()) {
			_case_begin_4407382960:;
			{
				return (*(_20122_k))._field_cpp_ident;
			}
		}
		else if ((*(_20122_k))._method_prim() != nullptr) {
			_case_begin_4407383056:;
			{
				return _1a947143d_gen_prim_kind((*(_20122_k))._method_prim());
			}
		}
		else if ((*(_20122_k))._method_tup() != nullptr) {
			_case_begin_4407382528:;
			{
				return _1a947143d_gen_tuple_kind((*(_20122_k))._method_tup());
			}
		}
		else if ((*(_20122_k))._method_sptr() != nullptr) {
			_case_begin_4407382624:;
			{
				return _1a947143d_gen_sptr_kind((*(_20122_k))._method_sptr());
			}
		}
		else if ((*(_20122_k))._method_ptr() != nullptr) {
			_case_begin_4407382160:;
			{
				return _1a947143d_gen_ptr_kind((*(_20122_k))._method_ptr());
			}
		}
		else if ((*(_20122_k))._method_enm() != nullptr) {
			_case_begin_4407382256:;
			{
				return _1a947143d_gen_enum_kind((*(_20122_k))._method_enm());
			}
		}
		else if ((*(_20122_k))._method_slc() != nullptr) {
			_case_begin_4407382352:;
			{
				return _1a947143d_gen_slice_kind((*(_20122_k))._method_slc());
			}
		}
		else if ((*(_20122_k))._method_map() != nullptr) {
			_case_begin_4407381536:;
			{
				return _1a947143d_gen_map_kind((*(_20122_k))._method_map());
			}
		}
		else if ((*(_20122_k))._method_trt() != nullptr) {
			_case_begin_4407381632:;
			{
				return _1a947143d_gen_trait_kind((*(_20122_k))._method_trt());
			}
		}
		else if ((*(_20122_k))._method_strct() != nullptr) {
			_case_begin_4407381728:;
			{
				return _1a947143d_gen_struct_kind_ins((*(_20122_k))._method_strct());
			}
		}
		else if ((*(_20122_k))._method_arr() != nullptr) {
			_case_begin_4407381824:;
			{
				return _1a947143d_gen_array_kind((*(_20122_k))._method_arr());
			}
		}
		else if ((*(_20122_k))._method_fnc() != nullptr) {
			_case_begin_4407383168:;
			{
				return _1a947143d_gen_fn_kind((*(_20122_k))._method_fnc());
			}
		}
		else {
			_case_begin_4407381232:;
			{
				return jule::Str("[<unimplemented_type_kind>]", 27);
			}
		}
		_match_end_4407380976:;
	}
}



inline void _1a94c037c_add_indent(void) {
	_1a94c037c_INDENT = jule::alloc_for_append(_1a94c037c_INDENT,1);_1a94c037c_INDENT.__push(9LLU);
}



inline void _1a94c037c_done_indent(void) {
	_1a94c037c_INDENT=_1a94c037c_INDENT.slice(0LL,_1a94c037c_INDENT.len() - 1LL);
}



inline jule::Str _1a94c037c_indent(void) {
	return static_cast<jule::Str>(_1a94c037c_INDENT);
}



inline jule::Bool _1a94c037c_is_cpp_header_file(jule::Str _6923_path) {
	jule::Int _709_offset = _1cea16edb_find_last_byte(_6923_path,'.');
	if (_709_offset == -1LL) {
		return false;
	}
	return _1b697da81_is_valid_header_ext(_6923_path.slice(_709_offset));
}



inline jule::Str _1a94c037c_gen_links(jule::Ptr<_1b719bcc6_IR>& _7819_ir) {
	jule::Str _7913_obj = jule::Str();
	{
		auto &expr = (*(_7819_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4407420528:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_pkg = *it;
			{
				{
					
					if ((!((*(_1a94c037c_pkg))._field_cpp_linked))) {
						_case_begin_4407422224:;
						{
							goto _iter_next_4407420528;
						}
					}
					else if (_1b697da81_is_std_header_path((*(_1a94c037c_pkg))._field_path)) {
						_case_begin_4407422336:;
						{
							_7913_obj+=jule::Str("#include ", 9);
							_7913_obj+=(*(_1a94c037c_pkg))._field_path;
							_7913_obj+=jule::Str("\n", 1);
						}
					}
					_match_end_4407422000:;
				}
			}
			_iter_next_4407420528:;
			++it;
			goto _iter_begin_4407420528;
		}
		_iter_end_4407420528:;
	}
	{
		auto &expr = (*(_7819_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4407427264:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_pkg = *it;
			{
				{
					
					if ((!((*(_1a94c037c_pkg))._field_cpp_linked))) {
						_case_begin_4407427744:;
						{
							goto _iter_next_4407427264;
						}
					}
					else if (_1a94c037c_is_cpp_header_file((*(_1a94c037c_pkg))._field_path)) {
						_case_begin_4407427856:;
						{
							_7913_obj+=jule::Str("#include \"", 10);
							_7913_obj+=(*(_1a94c037c_pkg))._field_path;
							_7913_obj+=jule::Str("\"\n", 2);
						}
					}
					_match_end_4407427520:;
				}
			}
			_iter_next_4407427264:;
			++it;
			goto _iter_begin_4407427264;
		}
		_iter_end_4407427264:;
	}
	return _7913_obj;
}



inline jule::Str _1a94c037c_gen_fn_result(jule::Ptr<_1a691a500_Fn>& _10723_f) {
	if ((*(_10723_f))._method_is_void()) {
		if ((*(_10723_f))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*(_10723_f))._field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _1a947143d_gen_type_kind((*((*((*(_10723_f))._field_result))._field_kind))._field_kind)) + jule::Str(">", 1);
	}
	return _1a947143d_gen_type_kind((*((*((*(_10723_f))._field_result))._field_kind))._field_kind);
}



inline jule::Str _1a94c037c_gen_fn_ins_result(jule::Ptr<_1a691a500_FnIns>& _12127_f) {
	if ((*((*(_12127_f))._field_decl))._method_is_void()) {
		if ((*((*(_12127_f))._field_decl))._field_exceptional) {
			return jule::Str("jule::VoidExceptional", 21);
		}
		return jule::Str("void", 4);
	}
	if ((*((*(_12127_f))._field_decl))._field_exceptional) {
		return (jule::Str("jule::Exceptional<", 18) + _1a947143d_gen_type_kind((*(_12127_f))._field_result)) + jule::Str(">", 1);
	}
	return _1a947143d_gen_type_kind((*(_12127_f))._field_result);
}



inline jule::Str _1a94c037c_gen_param_prototype(jule::Ptr<_1a691a500_Param>& _13529_p) {
	jule::Str _13613_obj = jule::Str();
	if ((*(_13529_p))._field_variadic) {
		_13613_obj+=_1a946cd0d_as_jt(jule::Str("slice", 5));
		_13613_obj+=jule::Str("<", 1);
		_13613_obj+=_1a947143d_gen_type_kind((*((*(_13529_p))._field_kind))._field_kind);
		_13613_obj+=jule::Str(">", 1);
	} else {
		_13613_obj+=_1a947143d_gen_type_kind((*((*(_13529_p))._field_kind))._field_kind);
	}
	return _13613_obj;
}



inline jule::Str _1a94c037c_gen_param_ins(jule::Ptr<_1a691a500_ParamIns>& _14923_p) {
	jule::Str _15013_obj = _1a94c037c_gen_param_ins_prototype(_14923_p);
	_15013_obj+=jule::Str(" ", 1);
	_15013_obj+=_1a946cd0d_param_out_ident((*(_14923_p))._field_decl);
	return _15013_obj;
}



inline jule::Str _1a94c037c_gen_param_ins_prototype(jule::Ptr<_1a691a500_ParamIns>& _15733_p) {
	jule::Str _15813_obj = jule::Str();
	if ((*((*(_15733_p))._field_decl))._field_variadic) {
		_15813_obj+=_1a946cd0d_as_jt(jule::Str("slice", 5));
		_15813_obj+=jule::Str("<", 1);
		_15813_obj+=_1a947143d_gen_type_kind((*(_15733_p))._field_kind);
		_15813_obj+=jule::Str(">", 1);
	} else {
		_15813_obj+=_1a947143d_gen_type_kind((*(_15733_p))._field_kind);
	}
	if ((*((*(_15733_p))._field_decl))._field_reference) {
		_15813_obj+=jule::Str("&", 1);
	}
	return _15813_obj;
}



inline jule::Str _1a94c037c_gen_param(jule::Ptr<_1a691a500_Param>& _17619_p) {
	jule::Str _17713_obj = _1a94c037c_gen_param_prototype(_17619_p);
	if ((((*(_17619_p))._field_ident != jule::Str()) && (!(_1b7553d92_is_ignore_ident((*(_17619_p))._field_ident)))) && (!(_1b7553d92_is_anon_ident((*(_17619_p))._field_ident)))) {
		_17713_obj+=jule::Str(" ", 1);
		_17713_obj+=_1a946cd0d_param_out_ident(_17619_p);
	}
	return _17713_obj;
}



inline jule::Str _1a94c037c_gen_params(jule::Slice<jule::Ptr<_1a691a500_Param>>& _18620_params) {
	{
		
		if (_18620_params.len() == 0LL) {
			_case_begin_4407472464:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_18620_params.len() == 1LL) && (*(_18620_params[0LL]))._method_is_self()) {
			_case_begin_4407472560:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_4407472208:;
	}
	jule::Str _19513_obj = jule::Str("(", 1);
	{
		auto &expr = _18620_params;
		auto it = expr.begin();
		_iter_begin_4407476688:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Param> _1a94c037c_p = *it;
			{
				if ((!((*(_1a94c037c_p))._method_is_self()))) {
					_19513_obj+=_1a94c037c_gen_param(_1a94c037c_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4407476688:;
			++it;
			goto _iter_begin_4407476688;
		}
		_iter_end_4407476688:;
	}
	_19513_obj=_19513_obj.slice(0LL,_19513_obj.len() - 1LL);
	return _19513_obj + jule::Str(")", 1);
}



inline jule::Str _1a94c037c_gen_params_ins(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>& _20724_params) {
	{
		
		if (_20724_params.len() == 0LL) {
			_case_begin_4407483680:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_20724_params.len() == 1LL) && (*((*(_20724_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_4407483776:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_4407482592:;
	}
	jule::Str _21613_obj = jule::Str("(", 1);
	{
		auto &expr = _20724_params;
		auto it = expr.begin();
		_iter_begin_4407488192:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_ParamIns> _1a94c037c_p = *it;
			{
				if ((!((*((*(_1a94c037c_p))._field_decl))._method_is_self()))) {
					_21613_obj+=_1a94c037c_gen_param_ins(_1a94c037c_p) + jule::Str(",", 1);
				}
			}
			_iter_next_4407488192:;
			++it;
			goto _iter_begin_4407488192;
		}
		_iter_end_4407488192:;
	}
	_21613_obj=_21613_obj.slice(0LL,_21613_obj.len() - 1LL);
	return _21613_obj + jule::Str(")", 1);
}



inline jule::Str _1a94c037c_gen_params_prototypes(jule::Slice<jule::Ptr<_1a691a500_ParamIns>>& _22931_params) {
	{
		
		if (_22931_params.len() == 0LL) {
			_case_begin_4407495488:;
			{
				return jule::Str("(void)", 6);
			}
		}
		else if ((_22931_params.len() == 1LL) && (*((*(_22931_params[0LL]))._field_decl))._method_is_self()) {
			_case_begin_4407495584:;
			{
				return jule::Str("(void)", 6);
			}
		}
		_match_end_4407494400:;
	}
	jule::Str _23813_obj = jule::Str("(", 1);
	{
		auto &expr = _22931_params;
		auto it = expr.begin();
		_iter_begin_4394413616:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_ParamIns> _1a94c037c_p = *it;
			{
				if ((!((*((*(_1a94c037c_p))._field_decl))._method_is_self()))) {
					_23813_obj+=_1a94c037c_gen_param_ins_prototype(_1a94c037c_p);
					_23813_obj+=jule::Str(",", 1);
				}
			}
			_iter_next_4394413616:;
			++it;
			goto _iter_begin_4394413616;
		}
		_iter_end_4394413616:;
	}
	_23813_obj=_23813_obj.slice(0LL,_23813_obj.len() - 1LL);
	return _23813_obj + jule::Str(")", 1);
}



inline jule::Str _1a94c037c_gen_trait(jule::Ptr<_1b76b472d_Trait>& _25219_t) {
	
	jule::Str _2549_outid = _1a946cd0d_trait_out_ident(_25219_t);
	jule::Str _25613_obj = jule::Str("struct ", 7);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str(" {\n", 3);
	_25613_obj+=jule::Str("\t", 1);
	_25613_obj+=jule::Str("virtual ~", 9);
	_25613_obj+=_2549_outid;
	_25613_obj+=jule::Str("(void) {}\n\n", 11);
	{
		auto &expr = (*(_25219_t))._field_methods;
		auto it = expr.begin();
		_iter_begin_4394430560:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a94c037c_f = *it;
			{
				_25613_obj+=jule::Str("\t", 1);
				_25613_obj+=jule::Str("virtual ", 8);
				_25613_obj+=_1a94c037c_gen_fn_result(_1a94c037c_f);
				_25613_obj+=jule::Str(" _method_", 9);
				_25613_obj+=(*(_1a94c037c_f))._field_ident;
				_25613_obj+=_1a94c037c_gen_params((*(_1a94c037c_f))._field_params);
				_25613_obj+=jule::Str(" {", 2);
				if ((!((*(_1a94c037c_f))._method_is_void()))) {
					_25613_obj+=jule::Str(" return {}; ", 12);
				}
				_25613_obj+=jule::Str("}\n", 2);
			}
			_iter_next_4394430560:;
			++it;
			goto _iter_begin_4394430560;
		}
		_iter_end_4394430560:;
	}
	_25613_obj+=jule::Str("};", 2);
	return _25613_obj;
}



inline jule::Str _1a94c037c_gen_traits_tbl(jule::Ptr<_1a8acbe95_SymbolTable>& _28124_tbl) {
	jule::Str _28213_obj = jule::Str();
	{
		auto &expr = (*(_28124_tbl))._field_traits;
		auto it = expr.begin();
		_iter_begin_4394440064:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> _1a94c037c_t = *it;
			{
				_28213_obj+=_1a94c037c_gen_trait(_1a94c037c_t);
				_28213_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4394440064:;
			++it;
			goto _iter_begin_4394440064;
		}
		_iter_end_4394440064:;
	}
	return _28213_obj;
}



inline jule::Str _1a94c037c_gen_traits_pkg(jule::Ptr<_1a6e9a574_Package>& _29124_pkg) {
	jule::Str _29213_obj = jule::Str();
	{
		auto &expr = (*(_29124_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_4394444112:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a94c037c_tbl = *it;
			{
				_29213_obj+=_1a94c037c_gen_traits_tbl(_1a94c037c_tbl);
			}
			_iter_next_4394444112:;
			++it;
			goto _iter_begin_4394444112;
		}
		_iter_end_4394444112:;
	}
	return _29213_obj;
}



inline jule::Str _1a94c037c_gen_traits(jule::Ptr<_1b719bcc6_IR>& _30020_ir) {
	jule::Str _30113_obj = jule::Str();
	{
		auto &expr = (*(_30020_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4394447680:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_u = *it;
			{
				if ((!((*(_1a94c037c_u))._field_cpp_linked))) {
					_30113_obj+=_1a94c037c_gen_traits_pkg((*(_1a94c037c_u))._field_package);
				}
			}
			_iter_next_4394447680:;
			++it;
			goto _iter_begin_4394447680;
		}
		_iter_end_4394447680:;
	}
	_30113_obj+=_1a94c037c_gen_traits_pkg((*(_30020_ir))._field_main);
	return _30113_obj;
}



inline jule::Str _1a94c037c_gen_trait_prototype(jule::Ptr<_1b76b472d_Trait>& _31225_t) {
	jule::Str _31313_obj = jule::Str("struct ", 7);
	_31313_obj+=_1a946cd0d_trait_out_ident(_31225_t);
	_31313_obj+=jule::Str(";", 1);
	return _31313_obj;
}



inline jule::Str _1a94c037c_gen_trait_prototypes(jule::Ptr<_1a6e9a574_Package>& _32030_p) {
	jule::Str _32113_obj = jule::Str();
	{
		auto &expr = (*(_32030_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4394456032:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a94c037c_f = *it;
			{
				{
					auto &expr = (*(_1a94c037c_f))._field_traits;
					auto it = expr.begin();
					_iter_begin_4394457872:;
					if (it != expr.end()) {
						jule::Ptr<_1b76b472d_Trait> &_1a94c037c_t = *it;
						{
							if ((*(_1a94c037c_t))._field_token._field_id != 0LLU) {
								_32113_obj+=_1a94c037c_gen_trait_prototype(_1a94c037c_t);
								_32113_obj+=jule::Str("\n", 1);
							}
						}
						_iter_next_4394457872:;
						++it;
						goto _iter_begin_4394457872;
					}
					_iter_end_4394457872:;
				}
			}
			_iter_next_4394456032:;
			++it;
			goto _iter_begin_4394456032;
		}
		_iter_end_4394456032:;
	}
	return _32113_obj;
}



inline jule::Str _1a94c037c_gen_struct_plain_prototype(jule::Ptr<_1b7905331_Struct>& _33436_s) {
	jule::Str _33513_obj = jule::Str();
	{
		auto &expr = (*(_33436_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_4394462368:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_StructIns> _1a94c037c_ins = *it;
			{
				_33513_obj+=jule::Str("\nstruct ", 8);
				_33513_obj+=_1a946cd0d_struct_ins_out_ident(_1a94c037c_ins);
				_33513_obj+=jule::Str(";", 1);
				_33513_obj+=jule::Str("\n", 1);
			}
			_iter_next_4394462368:;
			++it;
			goto _iter_begin_4394462368;
		}
		_iter_end_4394462368:;
	}
	return _33513_obj;
}



inline jule::Str _1a94c037c_gen_struct_plain_prototypes(jule::Slice<jule::Ptr<_1b7905331_Struct>>& _34637_structs) {
	jule::Str _34713_obj = jule::Str();
	{
		auto &expr = _34637_structs;
		auto it = expr.begin();
		_iter_begin_4394466784:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a94c037c_s = *it;
			{
				if ((!((*(_1a94c037c_s))._field_cpp_linked)) && ((*(_1a94c037c_s))._field_token._field_id != 0LLU)) {
					_34713_obj+=_1a94c037c_gen_struct_plain_prototype(_1a94c037c_s);
					_34713_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_4394466784:;
			++it;
			goto _iter_begin_4394466784;
		}
		_iter_end_4394466784:;
	}
	return _34713_obj;
}



inline jule::Str _1a94c037c_gen_struct_traits(jule::Ptr<_1b7905331_Struct>& _35823_s) {
	if ((*(_35823_s))._field_implements.len() == 0LL) {
		return jule::Str();
	}
	jule::Str _36313_obj = jule::Str(": ", 2);
	{
		auto &expr = (*(_35823_s))._field_implements;
		auto it = expr.begin();
		_iter_begin_4394474608:;
		if (it != expr.end()) {
			jule::Ptr<_1b76b472d_Trait> &_1a94c037c_i = *it;
			{
				_36313_obj+=jule::Str("public ", 7);
				_36313_obj+=_1a946cd0d_trait_out_ident(_1a94c037c_i);
				_36313_obj+=jule::Str(",", 1);
			}
			_iter_next_4394474608:;
			++it;
			goto _iter_begin_4394474608;
		}
		_iter_end_4394474608:;
	}
	_36313_obj=_36313_obj.slice(0LL,_36313_obj.len() - 1LL);
	return _36313_obj;
}



inline jule::Str _1a94c037c_gen_field_decl(jule::Ptr<_1b7905331_FieldIns>& _37424_f) {
	jule::Str _37513_obj = _1a947143d_gen_type_kind((*(_37424_f))._field_kind);
	_37513_obj+=jule::Str(" ", 1);
	_37513_obj+=_1a946cd0d_field_out_ident((*(_37424_f))._field_decl);
	_37513_obj+=jule::Str(" = ", 3);
	if ((*(_37424_f))._field_default == nullptr) {
		_37513_obj+=_1a709c632_get_init_expr((*(_37424_f))._field_kind);
	} else {
		_37513_obj+=_1a709c632_gen_expr((*((*(_37424_f))._field_default))._field_model);
	}
	_37513_obj+=jule::Str(";", 1);
	return _37513_obj;
}



inline jule::Str _1a94c037c_gen_struct_self_field_type_kind(jule::Ptr<_1b7905331_StructIns>& _39041_s) {
	return _1a947143d_as_sptr_kind(_1a947143d_gen_struct_kind_ins(_39041_s));
}



inline jule::Str _1a94c037c_gen_struct_self_field(jule::Ptr<_1b7905331_StructIns>& _39531_s) {
	jule::Str _39613_obj = _1a94c037c_gen_struct_self_field_type_kind(_39531_s);
	_39613_obj+=jule::Str(" self;", 6);
	return _39613_obj;
}



inline jule::Str _1a94c037c_gen_struct_self_field_init_st(jule::Ptr<_1b7905331_StructIns>& _40139_s) {
	jule::Str _40213_obj = jule::Str("this->self = ", 13);
	_40213_obj+=_1a94c037c_gen_struct_self_field_type_kind(_40139_s);
	_40213_obj+=jule::Str("::make(this, nullptr);", 22);
	return _40213_obj;
}



inline jule::Str _1a94c037c_gen_struct_constructor(jule::Ptr<_1b7905331_StructIns>& _40832_s) {
	jule::Str _40913_obj = _1a946cd0d_struct_ins_out_ident(_40832_s);
	_40913_obj+=jule::Str("(", 1);
	if ((*(_40832_s))._field_fields.len() > 0LL) {
		{
			auto &expr = (*(_40832_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_4394497472:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_FieldIns> _1a94c037c_f = *it;
				{
					_40913_obj+=_1a947143d_gen_type_kind((*(_1a94c037c_f))._field_kind);
					_40913_obj+=jule::Str(" __param_", 9);
					_40913_obj+=(*((*(_1a94c037c_f))._field_decl))._field_ident;
					_40913_obj+=jule::Str(", ", 2);
				}
				_iter_next_4394497472:;
				++it;
				goto _iter_begin_4394497472;
			}
			_iter_end_4394497472:;
		}
		_40913_obj=_40913_obj.slice(0LL,_40913_obj.len() - 2LL);
	} else {
		_40913_obj+=jule::Str("void", 4);
	}
	_40913_obj+=jule::Str(")", 1);
	if ((*(_40832_s))._field_fields.len() > 0LL) {
		_40913_obj+=jule::Str(": ", 2);
		{
			auto &expr = (*(_40832_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_4394505712:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_FieldIns> &_1a94c037c_f = *it;
				{
					_40913_obj+=_1a946cd0d_field_out_ident((*(_1a94c037c_f))._field_decl);
					_40913_obj+=jule::Str("(", 1);
					_40913_obj+=jule::Str("__param_", 8);
					_40913_obj+=(*((*(_1a94c037c_f))._field_decl))._field_ident;
					_40913_obj+=jule::Str("), ", 3);
				}
				_iter_next_4394505712:;
				++it;
				goto _iter_begin_4394505712;
			}
			_iter_end_4394505712:;
		}
		_40913_obj=_40913_obj.slice(0LL,_40913_obj.len() - 2LL);
	}
	_40913_obj+=jule::Str(" {", 2);
	if ((*((*(_40832_s))._field_decl))._method_has_ref_accessible()) {
		_40913_obj+=jule::Str("\n", 1);
		_1a94c037c_add_indent();
		_40913_obj+=_1a94c037c_indent();
		_40913_obj+=_1a94c037c_gen_struct_self_field_init_st(_40832_s);
		_40913_obj+=jule::Str("\n", 1);
		_1a94c037c_done_indent();
		_40913_obj+=jule::Str("\n", 1);
		_40913_obj+=_1a94c037c_indent();
	}
	_40913_obj+=jule::Str("}", 1);
	return _40913_obj;
}



inline jule::Str _1a94c037c_gen_struct_destructor(jule::Ptr<_1b7905331_StructIns>& _45231_s) {
	
	jule::Bool _45413_disposed = _1a94c037c_fn_is_dispose((*((*(_45231_s))._field_decl))._method_find_method(jule::Str("dispose", 7),false));
	jule::Bool _4559_ref_access = (*((*(_45231_s))._field_decl))._method_has_ref_accessible();
	if ((!(_4559_ref_access)) && (!(_45413_disposed))) {
		return jule::Str();
	}
	jule::Str _46113_obj = jule::Str("~", 1);
	_46113_obj+=_1a946cd0d_struct_ins_out_ident(_45231_s);
	_46113_obj+=jule::Str("(void) { ", 9);
	if (_45413_disposed) {
		jule::Ptr<_1a691a500_Fn> _46613_dispose_method = (*(_45231_s))._method_find_method(jule::Str("dispose", 7),false);
		_46113_obj+=jule::Str("this->", 6);
		_46113_obj+=_1a946cd0d_fn_out_ident(_46613_dispose_method);
		_46113_obj+=jule::Str("(); ", 4);
	}
	if (_4559_ref_access) {
		_46113_obj+=jule::Str("this->self.ref = nullptr; ", 26);
	}
	_46113_obj+=jule::Str("}", 1);
	return _46113_obj;
}



inline jule::Str _1a94c037c_gen_struct_operators(jule::Ptr<_1b7905331_StructIns>& _48030_s) {
	jule::Str _4819_out_ident = _1a946cd0d_struct_ins_out_ident(_48030_s);
	jule::Str _48213_obj = jule::Str();
	_48213_obj+=_1a94c037c_indent();
	if (_211b70ab3_OPT_INLINE) {
		_48213_obj+=jule::Str("inline ", 7);
	}
	_48213_obj+=jule::Str("bool operator==(const ", 22);
	_48213_obj+=_4819_out_ident;
	_48213_obj+=jule::Str(" &_Src) const {", 15);
	if ((*(_48030_s))._field_fields.len() > 0LL) {
		_1a94c037c_add_indent();
		_48213_obj+=jule::Str("\n", 1);
		_48213_obj+=_1a94c037c_indent();
		_48213_obj+=jule::Str("return ", 7);
		_1a94c037c_add_indent();
		jule::Int _49717_n = 0LL;
		{
			auto &expr = (*(_48030_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_4394543808:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_FieldIns> _1a94c037c_f = *it;
				{
					jule::Ptr<_1b7905331_StructIns> _50017_strct = (*((*(_1a94c037c_f))._field_kind))._method_strct();
					if (((_50017_strct != nullptr) && ((*(_50017_strct))._field_decl != nullptr)) && (*((*(_50017_strct))._field_decl))._field_cpp_linked) {
						goto _iter_next_4394543808;
					}
					(_49717_n)++;
					_48213_obj+=jule::Str("\n", 1);
					_48213_obj+=_1a94c037c_indent();
					_48213_obj+=jule::Str("this->", 6);
					jule::Str _50917_f_ident = _1a946cd0d_field_out_ident((*(_1a94c037c_f))._field_decl);
					_48213_obj+=_50917_f_ident;
					_48213_obj+=jule::Str(" == _Src.", 9);
					_48213_obj+=_50917_f_ident;
					_48213_obj+=jule::Str(" &&", 3);
				}
				_iter_next_4394543808:;
				++it;
				goto _iter_begin_4394543808;
			}
			_iter_end_4394543808:;
		}
		_1a94c037c_done_indent();
		if (_49717_n > 0LL) {
			_48213_obj=_48213_obj.slice(0LL,_48213_obj.len() - 3LL);
		} else {
			_48213_obj+=jule::Str("true", 4);
		}
		_48213_obj+=jule::Str(";\n", 2);
		_1a94c037c_done_indent();
		_48213_obj+=_1a94c037c_indent();
		_48213_obj+=jule::Str("}", 1);
	} else {
		_48213_obj+=jule::Str(" return true; }", 15);
	}
	_48213_obj+=jule::Str("\n\n", 2);
	_48213_obj+=_1a94c037c_indent();
	if (_211b70ab3_OPT_INLINE) {
		_48213_obj+=jule::Str("inline ", 7);
	}
	_48213_obj+=jule::Str("bool operator!=(const ", 22);
	_48213_obj+=_4819_out_ident;
	_48213_obj+=jule::Str(" &_Src) const { return !this->operator==(_Src); }", 49);
	return _48213_obj;
}



inline jule::Str _1a94c037c_gen_struct_derive_defs_prototypes(jule::Ptr<_1b7905331_StructIns>& _53939_s) {
	jule::Str _54013_obj = jule::Str();
	if ((*((*(_53939_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_54013_obj+=_1a94c037c_indent();
		_54013_obj+=_1a946e727_get_derive_fn_decl_clone((*(_53939_s))._field_decl);
		_54013_obj+=jule::Str(";\n\n", 3);
	}
	return _54013_obj;
}



inline jule::Str _1a94c037c_gen_struct_ins_prototype(jule::Ptr<_1b7905331_StructIns>& _55134_s) {
	jule::Str _55213_obj = jule::Str("struct ", 7);
	jule::Str _5539_out_ident = _1a946cd0d_struct_ins_out_ident(_55134_s);
	_55213_obj+=_5539_out_ident;
	_55213_obj+=_1a94c037c_gen_struct_traits((*(_55134_s))._field_decl);
	_55213_obj+=jule::Str(" {\n", 3);
	jule::Bool _5599_ref_access = (*((*(_55134_s))._field_decl))._method_has_ref_accessible();
	_1a94c037c_add_indent();
	if (_5599_ref_access) {
		_55213_obj+=_1a94c037c_indent();
		_55213_obj+=_1a94c037c_gen_struct_self_field(_55134_s);
		_55213_obj+=jule::Str("\n\n", 2);
	}
	if ((*(_55134_s))._field_fields.len() > 0LL) {
		{
			auto &expr = (*(_55134_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_4394578576:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_FieldIns> _1a94c037c_f = *it;
				{
					_55213_obj+=_1a94c037c_indent();
					_55213_obj+=_1a94c037c_gen_field_decl(_1a94c037c_f);
					_55213_obj+=jule::Str("\n", 1);
				}
				_iter_next_4394578576:;
				++it;
				goto _iter_begin_4394578576;
			}
			_iter_end_4394578576:;
		}
		_55213_obj+=jule::Str("\n\n", 2);
		_55213_obj+=_1a94c037c_indent();
		_55213_obj+=_1a94c037c_gen_struct_constructor(_55134_s);
		_55213_obj+=jule::Str("\n\n", 2);
	}
	_55213_obj+=_1a94c037c_indent();
	_55213_obj+=_1a94c037c_gen_struct_destructor(_55134_s);
	_55213_obj+=jule::Str("\n\n", 2);
	_55213_obj+=_1a94c037c_indent();
	_55213_obj+=_5539_out_ident;
	if (_5599_ref_access) {
		_55213_obj+=jule::Str("(void) { ", 9);
		_55213_obj+=_1a94c037c_gen_struct_self_field_init_st(_55134_s);
		_55213_obj+=jule::Str(" }\n\n", 4);
	} else {
		_55213_obj+=jule::Str("(void) = default;\n\n", 19);
	}
	{
		auto &expr = (*(_55134_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_4408237760:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a94c037c_f = *it;
			{
				_55213_obj+=_1a94c037c_gen_fn_prototype(_1a94c037c_f,true);
				_55213_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4408237760:;
			++it;
			goto _iter_begin_4408237760;
		}
		_iter_end_4408237760:;
	}
	_55213_obj+=_1a94c037c_gen_struct_derive_defs_prototypes(_55134_s);
	_55213_obj+=_1a94c037c_gen_struct_operators(_55134_s);
	_55213_obj+=jule::Str("\n", 1);
	_1a94c037c_done_indent();
	_55213_obj+=_1a94c037c_indent() + jule::Str("};", 2);
	return _55213_obj;
}



inline jule::Str _1a94c037c_gen_struct_prototype(jule::Ptr<_1b7905331_Struct>& _61030_s) {
	jule::Str _61113_obj = jule::Str();
	{
		auto &expr = (*(_61030_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_4408245360:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_StructIns> _1a94c037c_ins = *it;
			{
				_61113_obj+=_1a94c037c_gen_struct_ins_prototype(_1a94c037c_ins);
				_61113_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4408245360:;
			++it;
			goto _iter_begin_4408245360;
		}
		_iter_end_4408245360:;
	}
	return _61113_obj;
}



inline jule::Str _1a94c037c_gen_struct_prototypes(jule::Slice<jule::Ptr<_1b7905331_Struct>>& _62031_structs) {
	jule::Str _62113_obj = jule::Str();
	{
		auto &expr = _62031_structs;
		auto it = expr.begin();
		_iter_begin_4408248992:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a94c037c_s = *it;
			{
				if ((!((*(_1a94c037c_s))._field_cpp_linked)) && ((*(_1a94c037c_s))._field_token._field_id != 0LLU)) {
					_62113_obj+=_1a94c037c_gen_struct_prototype(_1a94c037c_s);
					_62113_obj+=jule::Str("\n", 1);
				}
			}
			_iter_next_4408248992:;
			++it;
			goto _iter_begin_4408248992;
		}
		_iter_end_4408248992:;
	}
	return _62113_obj;
}



inline jule::Str _1a94c037c_gen_fn_decl_head(jule::Ptr<_1a691a500_FnIns>& _63126_f,jule::Bool _63137_method) {
	jule::Str _63213_obj = jule::Str();
	if (_63137_method && (*((*(_63126_f))._field_decl))._field_statically) {
		_63213_obj+=jule::Str("static ", 7);
	}
	if (_211b70ab3_OPT_INLINE && (!((*((*(_63126_f))._field_decl))._method_is_entry_point()))) {
		_63213_obj+=jule::Str("inline ", 7);
	}
	_63213_obj+=_1a94c037c_gen_fn_ins_result(_63126_f) + jule::Str(" ", 1);
	if ((!(_63137_method)) && ((*((*(_63126_f))._field_decl))._field_owner != nullptr)) {
		_63213_obj+=_1a946cd0d_struct_ins_out_ident((*(_63126_f))._field_owner);
		_63213_obj+=jule::Str("::", 2);
	}
	_63213_obj+=_1a946cd0d_fn_ins_out_ident(_63126_f);
	return _63213_obj;
}



inline jule::Str _1a94c037c_gen_fn_prototype(jule::Ptr<_1a691a500_Fn>& _65326_f,jule::Bool _65334_method) {
	jule::Str _65413_obj = jule::Str();
	{
		auto &expr = (*(_65326_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_4408267440:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_FnIns> _1a94c037c_c = *it;
			{
				_65413_obj+=_1a94c037c_indent();
				_65413_obj+=_1a94c037c_gen_fn_decl_head(_1a94c037c_c,_65334_method);
				_65413_obj+=_1a94c037c_gen_params_prototypes((*(_1a94c037c_c))._field_params);
				_65413_obj+=jule::Str(";\n", 2);
			}
			_iter_next_4408267440:;
			++it;
			goto _iter_begin_4408267440;
		}
		_iter_end_4408267440:;
	}
	return _65413_obj;
}



inline jule::Str _1a94c037c_gen_fn_prototypes(jule::Ptr<_1a6e9a574_Package>& _66527_pkg) {
	jule::Str _66613_obj = jule::Str();
	{
		auto &expr = (*(_66527_pkg))._field_files;
		auto it = expr.begin();
		_iter_begin_4408273728:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a94c037c_file = *it;
			{
				{
					auto &expr = (*(_1a94c037c_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_4408275568:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_Fn> _1a94c037c_f = *it;
						{
							if ((!((*(_1a94c037c_f))._field_cpp_linked)) && ((*(_1a94c037c_f))._field_token._field_id != 0LLU)) {
								_66613_obj+=_1a94c037c_gen_fn_prototype(_1a94c037c_f,false);
							}
						}
						_iter_next_4408275568:;
						++it;
						goto _iter_begin_4408275568;
					}
					_iter_end_4408275568:;
				}
			}
			_iter_next_4408273728:;
			++it;
			goto _iter_begin_4408273728;
		}
		_iter_end_4408273728:;
	}
	return _66613_obj;
}



inline jule::Str _1a94c037c_gen_prototypes(jule::Ptr<_1b719bcc6_IR>& _67824_ir) {
	jule::Str _67913_obj = jule::Str();
	{
		auto &expr = (*(_67824_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4408280736:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_u = *it;
			{
				if ((!((*(_1a94c037c_u))._field_cpp_linked))) {
					_67913_obj+=_1a94c037c_gen_trait_prototypes((*(_1a94c037c_u))._field_package);
				}
			}
			_iter_next_4408280736:;
			++it;
			goto _iter_begin_4408280736;
		}
		_iter_end_4408280736:;
	}
	_67913_obj+=_1a94c037c_gen_trait_prototypes((*(_67824_ir))._field_main);
	_67913_obj+=_1a94c037c_gen_struct_plain_prototypes((*(_67824_ir))._field_ordered._field_structs);
	_67913_obj+=_1a94c037c_gen_traits(_67824_ir);
	_67913_obj+=jule::Str("\n", 1);
	_67913_obj+=_1a94c037c_gen_struct_prototypes((*(_67824_ir))._field_ordered._field_structs);
	{
		auto &expr = (*(_67824_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4408288672:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_u = *it;
			{
				if ((!((*(_1a94c037c_u))._field_cpp_linked))) {
					_67913_obj+=_1a94c037c_gen_fn_prototypes((*(_1a94c037c_u))._field_package);
				}
			}
			_iter_next_4408288672:;
			++it;
			goto _iter_begin_4408288672;
		}
		_iter_end_4408288672:;
	}
	_67913_obj+=_1a94c037c_gen_fn_prototypes((*(_67824_ir))._field_main);
	return _67913_obj;
}



inline jule::Str _1a94c037c_gen_var_init_expr(jule::Ptr<_1a7003e4b_Var>& _70727_v,jule::Str _70736_init) {
	jule::Str _70813_obj = jule::Str();
	if ((*(_70727_v))._field_statically) {
		_70813_obj+=jule::Str("static ", 7);
	}
	_70813_obj+=_1a947143d_gen_type_kind((*((*(_70727_v))._field_kind))._field_kind);
	_70813_obj+=jule::Str(" ", 1);
	if ((*(_70727_v))._field_reference) {
		_70813_obj+=jule::Str("&", 1);
	}
	_70813_obj+=_1a946cd0d_var_out_ident(_70727_v);
	if (_70736_init != jule::Str()) {
		_70813_obj+=jule::Str(" = ", 3);
		_70813_obj+=_70736_init;
	}
	_70813_obj+=jule::Str(";", 1);
	return _70813_obj;
}



inline jule::Str _1a94c037c_gen_var(jule::Ptr<_1a7003e4b_Var> _72816_v) {
	if (_1b7553d92_is_ignore_ident((*(_72816_v))._field_ident)) {
		return jule::Str();
	}
	if (((*(_72816_v))._field_value != nullptr) && ((*((*(_72816_v))._field_value))._field_expr != nullptr)) {
		if ((*((*((*(_72816_v))._field_value))._field_data))._field_model != nullptr) {
			return _1a94c037c_gen_var_init_expr(_72816_v,_1a709c632_gen_val((*(_72816_v))._field_value));
		}
		return _1a94c037c_gen_var_init_expr(_72816_v,jule::Str());
	}
	return _1a94c037c_gen_var_init_expr(_72816_v,_1a709c632_get_init_expr((*((*(_72816_v))._field_kind))._field_kind));
}



inline jule::Str _1a94c037c_gen_pkg_globals(jule::Ptr<_1a6e9a574_Package>& _74225_p,jule::Str& _74243_global_initializers) {
	jule::Str _74313_obj = jule::Str();
	{
		auto &expr = (*(_74225_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4408313936:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a94c037c_f = *it;
			{
				{
					auto &expr = (*(_1a94c037c_f))._field_vars;
					auto it = expr.begin();
					_iter_begin_4408315776:;
					if (it != expr.end()) {
						jule::Ptr<_1a7003e4b_Var> _1a94c037c_v = *it;
						{
							if ((((*(_1a94c037c_v))._field_token._field_id != 0LLU) && (!((*(_1a94c037c_v))._field_cpp_linked))) && (!((*(_1a94c037c_v))._field_constant))) {
								_74313_obj+=_1a947143d_gen_type_kind((*((*(_1a94c037c_v))._field_kind))._field_kind);
								_74313_obj+=jule::Str(" ", 1);
								if ((*(_1a94c037c_v))._field_reference) {
									_74313_obj+=jule::Str("&", 1);
								}
								_74313_obj+=_1a946cd0d_var_out_ident(_1a94c037c_v);
								_74313_obj+=jule::Str(";\n", 2);
								_74243_global_initializers+=_1a94c037c_indent();
								_74243_global_initializers+=_1a946cd0d_var_out_ident(_1a94c037c_v);
								if (((*(_1a94c037c_v))._field_value != nullptr) && ((*((*(_1a94c037c_v))._field_value))._field_expr != nullptr)) {
									if ((*((*((*(_1a94c037c_v))._field_value))._field_data))._field_model != nullptr) {
										_74243_global_initializers+=jule::Str(" = ", 3);
										_74243_global_initializers+=_1a709c632_gen_val((*(_1a94c037c_v))._field_value);
									}
								} else {
									_74243_global_initializers+=jule::Str(" = ", 3);
									_74243_global_initializers+=_1a709c632_get_init_expr((*((*(_1a94c037c_v))._field_kind))._field_kind);
								}
								_74243_global_initializers+=jule::Str(";\n", 2);
							}
						}
						_iter_next_4408315776:;
						++it;
						goto _iter_begin_4408315776;
					}
					_iter_end_4408315776:;
				}
			}
			_iter_next_4408313936:;
			++it;
			goto _iter_begin_4408313936;
		}
		_iter_end_4408313936:;
	}
	return _74313_obj;
}



inline jule::Str _1a94c037c_gen_globals(jule::Ptr<_1b719bcc6_IR> _77420_ir,jule::Str& _77434_global_initializers) {
	jule::Str _77513_obj = jule::Str();
	_1a94c037c_add_indent();
	{
		auto &expr = (*(_77420_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4408335616:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_u = *it;
			{
				if ((!((*(_1a94c037c_u))._field_cpp_linked))) {
					_77513_obj+=_1a94c037c_gen_pkg_globals((*(_1a94c037c_u))._field_package,_77434_global_initializers);
				}
			}
			_iter_next_4408335616:;
			++it;
			goto _iter_begin_4408335616;
		}
		_iter_end_4408335616:;
	}
	_77513_obj+=_1a94c037c_gen_pkg_globals((*(_77420_ir))._field_main,_77434_global_initializers);
	_1a94c037c_done_indent();
	return _77513_obj;
}



inline jule::Str _1a94c037c_gen_fn(jule::Ptr<_1a691a500_Fn>& _79216_f) {
	jule::Str _79313_obj = jule::Str();
	{
		auto &expr = (*(_79216_f))._field_instances;
		auto it = expr.begin();
		_iter_begin_4408342048:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_FnIns> _1a94c037c_ins = *it;
			{
				_79313_obj+=_1a94c037c_gen_fn_decl_head(_1a94c037c_ins,false);
				_79313_obj+=_1a94c037c_gen_params_ins((*(_1a94c037c_ins))._field_params);
				_79313_obj+=jule::Str(" ", 1);
				_79313_obj+=_1b6d721b6_gen_fn_scope(_1a94c037c_ins);
				_79313_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4408342048:;
			++it;
			goto _iter_begin_4408342048;
		}
		_iter_end_4408342048:;
	}
	return _79313_obj;
}



inline jule::Str _1a94c037c_gen_pkg_fns(jule::Ptr<_1a6e9a574_Package>& _80521_p) {
	jule::Str _80613_obj = jule::Str();
	{
		auto &expr = (*(_80521_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4408348592:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a94c037c_f = *it;
			{
				{
					auto &expr = (*(_1a94c037c_f))._field_funcs;
					auto it = expr.begin();
					_iter_begin_4408350432:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_Fn> _1a94c037c_f = *it;
						{
							if ((!(_211b7d3b7_TEST)) && _1a947143d_has_directive((*(_1a94c037c_f))._field_directives,jule::Str("test", 4))) {
								goto _iter_next_4408350432;
							}
							if ((!((*(_1a94c037c_f))._field_cpp_linked)) && ((*(_1a94c037c_f))._field_token._field_id != 0LLU)) {
								_80613_obj+=_1a94c037c_gen_fn(_1a94c037c_f);
								_80613_obj+=jule::Str("\n\n", 2);
							}
						}
						_iter_next_4408350432:;
						++it;
						goto _iter_begin_4408350432;
					}
					_iter_end_4408350432:;
				}
			}
			_iter_next_4408348592:;
			++it;
			goto _iter_begin_4408348592;
		}
		_iter_end_4408348592:;
	}
	return _80613_obj;
}



inline jule::Str _1a94c037c_gen_struct_method_defs(jule::Ptr<_1b7905331_StructIns>& _82232_s) {
	jule::Str _82313_obj = jule::Str();
	{
		auto &expr = (*(_82232_s))._field_methods;
		auto it = expr.begin();
		_iter_begin_4408357744:;
		if (it != expr.end()) {
			jule::Ptr<_1a691a500_Fn> _1a94c037c_f = *it;
			{
				_82313_obj+=_1a94c037c_indent();
				_82313_obj+=_1a94c037c_gen_fn(_1a94c037c_f);
				_82313_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4408357744:;
			++it;
			goto _iter_begin_4408357744;
		}
		_iter_end_4408357744:;
	}
	return _82313_obj;
}



inline jule::Bool _1a94c037c_fn_is_to_str(jule::Ptr<_1a691a500_Fn>& _83322_f) {
	if (((((((_83322_f == nullptr) || (!((*(_83322_f))._field_public))) || (*(_83322_f))._method_is_void()) || ((*(_83322_f))._field_generics.len() != 0LL)) || ((*(_83322_f))._field_params.len() != 1LL)) || (*((*(_83322_f))._field_params[0LL]))._field_mutable) || (*((*(_83322_f))._field_params[0LL]))._method_is_ref()) {
		return false;
	}
	jule::Ptr<_1a691a500_FnIns> _84413_ins = (*(_83322_f))._field_instances[0LL];
	jule::Ptr<_1a6a19a50_Prim> _8459_prim = (*((*(_84413_ins))._field_result))._method_prim();
	if (_8459_prim == nullptr) {
		return false;
	}
	return (*(_8459_prim))._method_is_str();
}



inline jule::Bool _1a94c037c_fn_is_dispose(jule::Ptr<_1a691a500_Fn> _85322_f) {
	return ((((((_85322_f != nullptr) && (*(_85322_f))._field_public) && (*(_85322_f))._method_is_void()) && ((*(_85322_f))._field_generics.len() == 0LL)) && ((*(_85322_f))._field_params.len() == 1LL)) && (*((*(_85322_f))._field_params[0LL]))._field_mutable) && (!((*((*(_85322_f))._field_params[0LL]))._method_is_ref()));
}



inline jule::Str _1a94c037c_gen_struct_ostream(jule::Ptr<_1b7905331_StructIns>& _86428_s) {
	jule::Str _86513_obj = jule::Str();
	_86513_obj+=_1a94c037c_indent();
	_86513_obj+=jule::Str("std::ostream &operator<<(std::ostream &_Stream, const ", 54);
	_86513_obj+=_1a946cd0d_struct_ins_out_ident(_86428_s);
	_86513_obj+=jule::Str(" &_Src) {\n", 10);
	_1a94c037c_add_indent();
	_86513_obj+=_1a94c037c_indent();
	jule::Ptr<_1a691a500_Fn> _87313_fts = (*(_86428_s))._method_find_method(jule::Str("to_str", 6),false);
	if (_1a94c037c_fn_is_to_str(_87313_fts)) {
		_86513_obj+=jule::Str("_Stream << ((", 13);
		_86513_obj+=_1a946cd0d_struct_ins_out_ident(_86428_s);
		_86513_obj+=jule::Str(")(_Src)).", 9);
		_86513_obj+=_1a946cd0d_fn_out_ident(_87313_fts);
		_86513_obj+=jule::Str("();\n", 4);
	} else {
		_86513_obj+=jule::Str("_Stream << \"", 12);
		_86513_obj+=(*((*(_86428_s))._field_decl))._field_ident;
		_86513_obj+=jule::Str("{\";\n", 4);
		{
			auto &expr = (*(_86428_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_4408396832:;
			if (it != expr.end()) {
				jule::Int _1a94c037c_i = it - expr.begin();
				jule::Ptr<_1b7905331_FieldIns> _1a94c037c_f = *it;
				{
					_86513_obj+=_1a94c037c_indent();
					_86513_obj+=jule::Str("_Stream << \"", 12);
					_86513_obj+=(*((*(_1a94c037c_f))._field_decl))._field_ident;
					_86513_obj+=jule::Str(":", 1);
					jule::Ptr<_1b7905331_StructIns> _89217_strct = (*((*(_1a94c037c_f))._field_kind))._method_strct();
					if (((_89217_strct != nullptr) && ((*(_89217_strct))._field_decl != nullptr)) && (*((*(_89217_strct))._field_decl))._field_cpp_linked) {
						_86513_obj+=jule::Str(" cpp.", 5);
						_86513_obj+=_1a946cd0d_field_out_ident((*(_1a94c037c_f))._field_decl);
						_86513_obj+=jule::Str("\"", 1);
					} else {
						_86513_obj+=jule::Str("\" << _Src.", 10);
						_86513_obj+=_1a946cd0d_field_out_ident((*(_1a94c037c_f))._field_decl);
					}
					if ((_1a94c037c_i + 1LL) < (*(_86428_s))._field_fields.len()) {
						_86513_obj+=jule::Str(" << \", \"", 8);
					}
					_86513_obj+=jule::Str(";\n", 2);
				}
				_iter_next_4408396832:;
				++it;
				_1a94c037c_i++;
				goto _iter_begin_4408396832;
			}
			_iter_end_4408396832:;
		}
		_86513_obj+=_1a94c037c_indent();
		_86513_obj+=jule::Str("_Stream << \"}\";\n", 16);
	}
	_86513_obj+=_1a94c037c_indent();
	_86513_obj+=jule::Str("return _Stream;\n", 16);
	_1a94c037c_done_indent();
	_86513_obj+=_1a94c037c_indent();
	_86513_obj+=jule::Str("}", 1);
	return _86513_obj;
}



inline jule::Str _1a94c037c_gen_struct_derive_defs(jule::Ptr<_1b7905331_StructIns>& _92032_s) {
	jule::Str _92113_obj = jule::Str();
	if ((*((*(_92032_s))._field_decl))._method_is_derives(jule::Str("Clone", 5))) {
		_92113_obj+=_1a94c037c_indent();
		_92113_obj+=_1a946e727_get_derive_fn_def_clone((*(_92032_s))._field_decl);
		_92113_obj+=jule::Str("{\n", 2);
		_1a94c037c_add_indent();
		_92113_obj+=_1a94c037c_indent();
		_92113_obj+=_1a947143d_gen_struct_kind_ins(_92032_s);
		_92113_obj+=jule::Str(" clone;\n", 8);
		{
			auto &expr = (*(_92032_s))._field_fields;
			auto it = expr.begin();
			_iter_begin_4408421392:;
			if (it != expr.end()) {
				jule::Ptr<_1b7905331_FieldIns> &_1a94c037c_f = *it;
				{
					jule::Str _93217_ident = _1a946cd0d_field_out_ident((*(_1a94c037c_f))._field_decl);
					_92113_obj+=_1a94c037c_indent();
					_92113_obj+=jule::Str("clone.", 6);
					_92113_obj+=_93217_ident;
					_92113_obj+=jule::Str(" = jule::clone(this->", 21);
					_92113_obj+=_93217_ident;
					_92113_obj+=jule::Str(");\n", 3);
				}
				_iter_next_4408421392:;
				++it;
				goto _iter_begin_4408421392;
			}
			_iter_end_4408421392:;
		}
		_92113_obj+=_1a94c037c_indent();
		_92113_obj+=jule::Str("return clone;\n", 14);
		_1a94c037c_done_indent();
		_92113_obj+=_1a94c037c_indent();
		_92113_obj+=jule::Str("}", 1);
	}
	return _92113_obj;
}



inline jule::Str _1a94c037c_gen_struct_ins(jule::Ptr<_1b7905331_StructIns>& _95224_s) {
	jule::Str _95313_obj = _1a94c037c_gen_struct_method_defs(_95224_s);
	_95313_obj+=jule::Str("\n\n", 2);
	_95313_obj+=_1a94c037c_gen_struct_derive_defs(_95224_s);
	_95313_obj+=jule::Str("\n\n", 2);
	_95313_obj+=_1a94c037c_gen_struct_ostream(_95224_s);
	return _95313_obj;
}



inline jule::Str _1a94c037c_gen_struct(jule::Ptr<_1b7905331_Struct>& _96220_s) {
	jule::Str _96313_obj = jule::Str();
	{
		auto &expr = (*(_96220_s))._field_instances;
		auto it = expr.begin();
		_iter_begin_4408435680:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_StructIns> _1a94c037c_ins = *it;
			{
				_96313_obj+=_1a94c037c_gen_struct_ins(_1a94c037c_ins);
				_96313_obj+=jule::Str("\n\n", 2);
			}
			_iter_next_4408435680:;
			++it;
			goto _iter_begin_4408435680;
		}
		_iter_end_4408435680:;
	}
	return _96313_obj;
}



inline jule::Str _1a94c037c_gen_structs(jule::Slice<jule::Ptr<_1b7905331_Struct>>& _97221_structs) {
	jule::Str _97313_obj = jule::Str();
	{
		auto &expr = _97221_structs;
		auto it = expr.begin();
		_iter_begin_4408439280:;
		if (it != expr.end()) {
			jule::Ptr<_1b7905331_Struct> _1a94c037c_s = *it;
			{
				if ((!((*(_1a94c037c_s))._field_cpp_linked)) && ((*(_1a94c037c_s))._field_token._field_id != 0LLU)) {
					_97313_obj+=_1a94c037c_gen_struct(_1a94c037c_s);
					_97313_obj+=jule::Str("\n\n", 2);
				}
			}
			_iter_next_4408439280:;
			++it;
			goto _iter_begin_4408439280;
		}
		_iter_end_4408439280:;
	}
	return _97313_obj;
}



inline jule::Str _1a94c037c_gen_fns(jule::Ptr<_1b719bcc6_IR>& _98417_ir) {
	jule::Str _98513_obj = jule::Str();
	{
		auto &expr = (*(_98417_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4408445520:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_u = *it;
			{
				if ((!((*(_1a94c037c_u))._field_cpp_linked))) {
					_98513_obj+=_1a94c037c_gen_pkg_fns((*(_1a94c037c_u))._field_package);
				}
			}
			_iter_next_4408445520:;
			++it;
			goto _iter_begin_4408445520;
		}
		_iter_end_4408445520:;
	}
	_98513_obj+=_1a94c037c_gen_pkg_fns((*(_98417_ir))._field_main);
	return _98513_obj;
}



inline void _1a94c037c_push_init(jule::Ptr<_1a6e9a574_Package>& _99719_pkg,jule::Str& _99739_obj) {
	
	
	jule::Ptr<_1a691a500_Fn> _10019_f = (*(_99719_pkg))._method_find_fn(jule::Str("init", 4),false);
	if (_10019_f == nullptr) {
		return;
	}
	_99739_obj+=jule::Str("\n\t", 2);
	_99739_obj+=_1a946cd0d_fn_out_ident(_10019_f);
	_99739_obj+=jule::Str("();", 3);
}



inline jule::Str _1a94c037c_gen_init_caller(jule::Ptr<_1b719bcc6_IR>& _101225_ir,jule::Str& _101235_global_initializers) {
	jule::Str _101313_obj = jule::Str("void ", 5);
	_101313_obj+=jule::Str("__jule_call_initializers", 24);
	_101313_obj+=jule::Str("(void) {\n", 9);
	_101313_obj+=_101235_global_initializers;
	{
		auto &expr = (*(_101225_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4408460240:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_u = *it;
			{
				if ((!((*(_1a94c037c_u))._field_cpp_linked))) {
					_1a94c037c_push_init((*(_1a94c037c_u))._field_package,_101313_obj);
				}
			}
			_iter_next_4408460240:;
			++it;
			goto _iter_begin_4408460240;
		}
		_iter_end_4408460240:;
	}
	_1a94c037c_push_init((*(_101225_ir))._field_main,_101313_obj);
	_101313_obj+=jule::Str("\n}", 2);
	return _101313_obj;
}



inline jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_find_testing_package(jule::Ptr<_1b719bcc6_IR>& _102934_ir) {
	{
		auto &expr = (*(_102934_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4408465808:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> _1a94c037c_imp = *it;
			{
				if ((*(_1a94c037c_imp))._field_link_path == jule::Str("std::testing", 12)) {
					return _1a94c037c_imp;
				}
			}
			_iter_next_4408465808:;
			++it;
			goto _iter_begin_4408465808;
		}
		_iter_end_4408465808:;
	}
	return nullptr;
}



inline void _1a94c037c_append_test(jule::Str& _103825_obj,jule::Ptr<_1a691a500_FnIns> _103839_f) {
	_103825_obj+=_1a94c037c_indent();
	_103825_obj+=jule::Str("_t->_method_reset();\n", 21);
	_103825_obj+=_1a94c037c_indent();
	_103825_obj+=jule::Str("std::cout << \">>> TEST RUNNING: \";\n", 35);
	_103825_obj+=_1a94c037c_indent();
	_103825_obj+=jule::Str("jule::outln(", 12);
	_103825_obj+=_1a709c632_get_cstr_model(static_cast<jule::Slice<jule::U8>>((*((*(_103839_f))._field_decl))._field_ident));
	_103825_obj+=jule::Str(");\n", 3);
	_103825_obj+=_1a94c037c_indent();
	_103825_obj+=_1a946cd0d_fn_ins_out_ident(_103839_f);
	_103825_obj+=jule::Str("(_t);\n", 6);
	_103825_obj+=_1a94c037c_indent();
	_103825_obj+=jule::Str("post_test();\n", 13);
}



inline void _1a94c037c_append_package_tests(jule::Str& _105434_obj,jule::Ptr<_1a6e9a574_Package>& _105449_p) {
	{
		auto &expr = (*(_105449_p))._field_files;
		auto it = expr.begin();
		_iter_begin_4408478352:;
		if (it != expr.end()) {
			jule::Ptr<_1a8acbe95_SymbolTable> _1a94c037c_file = *it;
			{
				{
					auto &expr = (*(_1a94c037c_file))._field_funcs;
					auto it = expr.begin();
					_iter_begin_4408480256:;
					if (it != expr.end()) {
						jule::Ptr<_1a691a500_Fn> _1a94c037c_f = *it;
						{
							if (_1a947143d_has_directive((*(_1a94c037c_f))._field_directives,jule::Str("test", 4))) {
								_1a94c037c_append_test(_105434_obj,(*(_1a94c037c_f))._field_instances[0LL]);
							}
						}
						_iter_next_4408480256:;
						++it;
						goto _iter_begin_4408480256;
					}
					_iter_end_4408480256:;
				}
			}
			_iter_next_4408478352:;
			++it;
			goto _iter_begin_4408478352;
		}
		_iter_end_4408478352:;
	}
}



inline void _1a94c037c_append_test_point(jule::Str& _106431_obj,jule::Ptr<_1b719bcc6_IR>& _106446_ir) {
	_106431_obj+=jule::Str("\nvoid test_point(void) {\n", 25);
	_1a94c037c_add_indent();
	_106431_obj+=_1a94c037c_indent();
	jule::Ptr<_1a6e9a574_ImportInfo> _106913_p = _1a94c037c_find_testing_package(_106446_ir);
	if (_106913_p == nullptr) {
		_106431_obj+=jule::Str("}", 1);
		_1a94c037c_done_indent();
		return;
	}
	jule::Ptr<_1b7905331_StructIns> _107913_t = (*((*(_106913_p))._method_find_struct(jule::Str("T", 1),false)))._field_instances[0LL];
	_106431_obj+=_1a947143d_as_sptr_kind(_1a947143d_gen_struct_kind_ins(_107913_t));
	_106431_obj+=jule::Str(" _t = jule::new_struct<", 23);
	_106431_obj+=_1a947143d_gen_struct_kind_ins(_107913_t);
	_106431_obj+=jule::Str(">(", 2);
	if ((!(_211b70ab3_PRODUCTION))) {
		_106431_obj+=jule::Str("\"/jule/init\", ", 14);
	}
	_106431_obj+=jule::Str("new(std::nothrow) ", 18);
	_106431_obj+=_1a947143d_gen_struct_kind_ins(_107913_t);
	_106431_obj+=jule::Str(");\n", 3);
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("jule::Uint total = 0, failed = 0, skipped = 0;\n", 47);
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("auto post_test = [&](void) {\n", 29);
	_1a94c037c_add_indent();
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("++total;\n", 9);
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("if (_t->_method_failed()) { ++failed; std::cout << \"    [*] FAILED\" << std::endl; }\n", 84);
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("else if (_t->_method_skipped()) { ++skipped; std::cout << \"    [*] SKIPPED\" << std::endl; }\n", 92);
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("else { std::cout << \"    [*] PASSED\" << std::endl; }\n", 53);
	_1a94c037c_done_indent();
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("};\n", 3);
	_1a94c037c_append_package_tests(_106431_obj,(*(_106446_ir))._field_main);
	_106431_obj+=jule::Str("\n\n", 2);
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("std::cout << std::endl << std::endl << \"total tests: \" << total << \" skipped: \" << skipped << \" failed: \" << failed << \" pass: \" << total-failed-skipped << std::endl;\n", 167);
	_1a94c037c_done_indent();
	_106431_obj+=_1a94c037c_indent();
	_106431_obj+=jule::Str("}\n", 2);
}



inline void _1a94c037c_append_standard(jule::Str& _112129_obj_code,jule::Str _112144_compiler,jule::Str _112159_compiler_cmd) {
	_1a9612e81_AbsTime _11229_time = _1a9612e81_Time::_static_method_now()._method_abs();
	jule::Str _112413_time_str = jule::Str();
	_112413_time_str+=_1b6ac3d91_fmt_uint(_11229_time._field_day,10LL);
	_112413_time_str+=jule::Str("/", 1);
	_112413_time_str+=_1b6ac3d91_fmt_uint(_11229_time._field_month,10LL);
	_112413_time_str+=jule::Str("/", 1);
	_112413_time_str+=_1b6ac3d91_fmt_uint(_11229_time._field_year,10LL);
	_112413_time_str+=jule::Str(" ", 1);
	_112413_time_str+=_1b6ac3d91_fmt_uint(_11229_time._field_hour,10LL);
	_112413_time_str+=jule::Str(".", 1);
	_112413_time_str+=_1b6ac3d91_fmt_uint(_11229_time._field_minute,10LL);
	_112413_time_str+=jule::Str(" (DD/MM/YYYY) (HH.MM) UTC", 25);
	jule::Str _113613_s = jule::Str();
	_113613_s+=jule::Str("// Auto generated by JuleC.\n", 28);
	_113613_s+=jule::Str("// JuleC version: ", 18);
	_113613_s+=jule::Str("jule beta 0.0.8 @master", 23);
	_113613_s+=jule::Str("\n", 1);
	_113613_s+=jule::Str("// Date: ", 9);
	_113613_s+=_112413_time_str;
	_113613_s+=jule::Str("\n//\n// Recommended Compile Command;\n// ", 39);
	_113613_s+=_112144_compiler;
	_113613_s+=jule::Str(" ", 1);
	_113613_s+=_112159_compiler_cmd;
	_113613_s+=jule::Str("\n\n", 2);
	if (_211b70ab3_PRODUCTION) {
		_113613_s+=jule::Str("#define __JULE_ENABLE__PRODUCTION\n", 34);
	}
	if ((!(_211b7d3b7_RC))) {
		_113613_s+=jule::Str("#define __JULE_DISABLE__REFERENCE_COUNTING\n", 43);
	}
	if ((!(_211b7d3b7_SAFETY))) {
		_113613_s+=jule::Str("#define __JULE_DISABLE__SAFETY\n", 31);
	}
	_113613_s+=jule::Str("\n\n#include \"", 12);
	_113613_s+=_1b69ce708_PATH_API;
	_113613_s+=jule::Str("\"\n\n", 3);
	_113613_s+=_112129_obj_code;
	_113613_s+=jule::Str("\nint main(int argc, char *argv[], char *envp[]) {\n    jule::setup_argv(argc, argv);\n    jule::setup_envp(envp);\n\n    __jule_call_initializers();\n    ", 149);
	if (_211b7d3b7_TEST) {
		_113613_s+=jule::Str("test_point();", 13);
	} else {
		_113613_s+=jule::Str("entry_point();", 14);
	}
	_113613_s+=jule::Str("\n\n    return EXIT_SUCCESS;\n}", 28);
	_112129_obj_code=_113613_s;
}



inline jule::Str _1a94c037c_gen(jule::Ptr<_1b719bcc6_IR>& _118717_ir) {
	jule::Str _118813_global_initializers = jule::Str();
	jule::Str _118913_obj = jule::Str();
	_118913_obj+=_1a94c037c_gen_links(_118717_ir);
	_118913_obj+=jule::Str("\n", 1);
	_118913_obj+=_1a94c037c_gen_prototypes(_118717_ir);
	_118913_obj+=jule::Str("\n\n", 2);
	_118913_obj+=_1a94c037c_gen_globals(_118717_ir,_118813_global_initializers);
	_118913_obj+=jule::Str("\n", 1);
	_118913_obj+=_1a94c037c_gen_structs((*(_118717_ir))._field_ordered._field_structs);
	_118913_obj+=_1a94c037c_gen_fns(_118717_ir);
	_118913_obj+=jule::Str("\n", 1);
	_118913_obj+=_1a94c037c_gen_init_caller(_118717_ir,_118813_global_initializers);
	_118913_obj+=jule::Str("\n", 1);
	return _118913_obj;
}



inline jule::Bool _1a70a995d_is_std_package(jule::Str _19519_f,jule::Str _19527_p) {
	return _1cea16edb_has_prefix(_19519_f,_1ce9be05e_join(jule::Slice<jule::Str>({_1b69ce708_PATH_STDLIB,_19527_p})));
}



inline jule::Bool _1a70a995d_is_constant_valid_conditional_case(jule::Ptr<_1a6bc3e29_If>& _19940_i) {
	{
		auto &_match_expr{ (*(_19940_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1b6dd59aa_Const>>()) {
			_case_begin_4408572720:;
			{
				jule::Ptr<_1b6dd59aa_Const> _20213_c = (*(_19940_i))._field_expr.operator jule::Ptr<_1b6dd59aa_Const>();
				return (*(_20213_c))._method_is_bool() && (*(_20213_c))._method_read_bool();
			}
		}
		_match_end_4408572624:;
	}
	return false;
}



inline jule::Bool _1a70a995d_is_constant_valid_match_case(jule::Ptr<_1a6bc3e29_Case>& _20934_case) {
	{
		auto &expr = (*(_20934_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_4408573776:;
		if (it != expr.end()) {
			jule::Ptr<_1a8b431d7_Data> &_1a70a995d_expr = *it;
			{
				if (((*(_1a70a995d_expr))._method_is_const() && (*((*(_1a70a995d_expr))._field_constant))._method_is_bool()) && (*((*(_1a70a995d_expr))._field_constant))._method_read_bool()) {
					return true;
				}
			}
			_iter_next_4408573776:;
			++it;
			goto _iter_begin_4408573776;
		}
		_iter_end_4408573776:;
	}
	return false;
}



inline jule::Bool _1a70a995d_is_unreachable_conditional_case(jule::Ptr<_1a6bc3e29_If>& _21937_i) {
	{
		auto &_match_expr{ (*(_21937_i))._field_expr };
		
		if (_match_expr.type_is<jule::Ptr<_1b6dd59aa_Const>>()) {
			_case_begin_4408582720:;
			{
				jule::Ptr<_1b6dd59aa_Const> _22213_c = (*(_21937_i))._field_expr.operator jule::Ptr<_1b6dd59aa_Const>();
				return (*(_22213_c))._method_is_bool() && (!((*(_22213_c))._method_read_bool()));
			}
		}
		_match_end_4408582624:;
	}
	return false;
}



inline jule::Bool _1a70a995d_is_unreachable_match_case(jule::Ptr<_1a6bc3e29_Case>& _22931_case) {
	{
		auto &expr = (*(_22931_case))._field_exprs;
		auto it = expr.begin();
		_iter_begin_4408583744:;
		if (it != expr.end()) {
			jule::Ptr<_1a8b431d7_Data> &_1a70a995d_expr = *it;
			{
				if (((*(_1a70a995d_expr))._method_is_const() && (*((*(_1a70a995d_expr))._field_constant))._method_is_bool()) && (!((*((*(_1a70a995d_expr))._field_constant))._method_read_bool()))) {
					return true;
				}
			}
			_iter_next_4408583744:;
			++it;
			goto _iter_begin_4408583744;
		}
		_iter_end_4408583744:;
	}
	return false;
}



inline void _211ad8025_print_error_message(jule::Str _3424_msg) {
	jule::outln(_3424_msg);
}



inline void _211ad8025_help(jule::Slice<jule::Str>& _3710_args) {
	if (_3710_args.len() > 2LL) {
		_211ad8025_print_error_message((jule::Str("invalid command: ", 17) + _3710_args[2LL]));
		return;
	}
	jule::I64 _4313_max = _211ad8025_HELP_MAP.__at(0LL).__at(0LL).len();
	{
		auto &expr = _211ad8025_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_4408980816:;
		if (it != expr.end()) {
			jule::Array<jule::Str,2> &_211ad8025_k = *it;
			{
				jule::I64 _4513_n = _211ad8025_k.__at(0LL).len();
				if (_4513_n > _4313_max) {
					_4313_max=_4513_n;
				}
			}
			_iter_next_4408980816:;
			++it;
			goto _iter_begin_4408980816;
		}
		_iter_end_4408980816:;
	}
	jule::Str _5113_s = jule::Str();
	
	{
		auto &expr = _211ad8025_HELP_MAP;
		auto it = expr.begin();
		_iter_begin_4408982304:;
		if (it != expr.end()) {
			jule::Int _211ad8025_i = it - expr.begin();
			jule::Array<jule::Str,2> &_211ad8025_part = *it;
			{
				_5113_s+=_211ad8025_part.__at(0LL);
				_5113_s+=_1cea16edb_repeat(jule::Str(" ", 1),static_cast<jule::I64>((_4313_max - _211ad8025_part.__at(0LL).len()) + 5LL));
				_5113_s+=_211ad8025_part.__at(1LL);
				if ((_211ad8025_i + 1LL) < 5LL) {
					_5113_s+=jule::Str("\n", 1);
				}
			}
			_iter_next_4408982304:;
			++it;
			_211ad8025_i++;
			goto _iter_begin_4408982304;
		}
		_iter_end_4408982304:;
	}
	jule::outln(_5113_s);
}



inline void _211ad8025_version(jule::Slice<jule::Str>& _6513_args) {
	if (_6513_args.len() > 2LL) {
		_211ad8025_print_error_message((jule::Str("invalid command: ", 17) + _6513_args[2LL]));
		return;
	}
	jule::outln(jule::Str("jule beta 0.0.8 @master", 23));
}



inline void _211ad8025_tool_distos(void) {
	jule::out(jule::Str("supported operating systems:\n ", 30));
	{
		auto &expr = _1b698aa8d_DISTOS;
		auto it = expr.begin();
		_iter_begin_4408998752:;
		if (it != expr.end()) {
			jule::Str &_211ad8025_os = *it;
			{
				jule::out(_211ad8025_os);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4408998752:;
			++it;
			goto _iter_begin_4408998752;
		}
		_iter_end_4408998752:;
	}
	jule::outln(jule::Str());
}



inline void _211ad8025_tool_distarch(void) {
	jule::out(jule::Str("supported architects:\n ", 23));
	{
		auto &expr = _1b698aa8d_DISTARCH;
		auto it = expr.begin();
		_iter_begin_4408998032:;
		if (it != expr.end()) {
			jule::Str &_211ad8025_arch = *it;
			{
				jule::out(_211ad8025_arch);
				jule::out(jule::Str(" ", 1));
			}
			_iter_next_4408998032:;
			++it;
			goto _iter_begin_4408998032;
		}
		_iter_end_4408998032:;
	}
	jule::outln(jule::Str());
}



inline void _211ad8025_tool(jule::Slice<jule::Str>& _9410_args) {
	if (_9410_args.len() == 2LL) {
		jule::outln(jule::Str("tool commands:\n distos     Lists all supported operating systems\n distarch   Lists all supported architects", 107));
		return;
	} else if (_9410_args.len() > 3LL) {
		_211ad8025_print_error_message((jule::Str("invalid command: ", 17) + _9410_args[3LL]));
		return;
	}
	jule::Str _1059_cmd = _9410_args[2LL];
	{
		auto &_match_expr{ _1059_cmd };
		
		if (_match_expr == jule::Str("distos", 6)) {
			_case_begin_4409011744:;
			{
				_211ad8025_tool_distos();
			}
		}
		else if (_match_expr == jule::Str("distarch", 8)) {
			_case_begin_4409010336:;
			{
				_211ad8025_tool_distarch();
			}
		}
		else {
			_case_begin_4409009840:;
			{
				_211ad8025_print_error_message((jule::Str("undefined command: ", 19) + _1059_cmd));
			}
		}
		_match_end_4409009760:;
	}
}



inline void _211ad8025_julenv(jule::Slice<jule::Str>& _11412_args) {
	if (_11412_args.len() > 2LL) {
		_211ad8025_print_error_message((jule::Str("invalid command: ", 17) + _11412_args[2LL]));
		return;
	}
	jule::outln(jule::Str("julec version: jule beta 0.0.8 @master", 38));
	jule::outln(jule::Str("architecture: arm64", 19));
	jule::outln(jule::Str("operating system: darwin", 24));
	jule::outln(jule::Str("default compiler: ", 18) + _211b7d3b7_COMPILER);
	jule::outln(jule::Str("default C++ standard: ", 22) + _211b7d3b7_CPP_STD);
}



inline void _211ad8025_mod(jule::Slice<jule::Str>& _1279_args) {
	if (_1279_args.len() == 2LL) {
		jule::outln(jule::Str("command is not given, try julec mod init", 40));
		return;
	}
	if (_1279_args.len() > 3LL) {
		_211ad8025_print_error_message((jule::Str("invalid command: ", 17) + _1279_args[3LL]));
		return;
	}
	{
		auto &_match_expr{ _1279_args[2LL] };
		
		if (_match_expr == jule::Str("init", 4)) {
			_case_begin_4409027888:;
			{
				({
					auto except = _1ce96429b_File::_static_method_write(jule::Str("jule.mod", 8),jule::Slice<jule::U8>(),432LL);
					if (!except.ok()) {
						_211ad8025_print_error_message(jule::Str("module could not generated because of a problem", 47));
					}
				});
			}
		}
		else {
			_case_begin_4409026624:;
			{
				_211ad8025_print_error_message((jule::Str("invalid command: ", 17) + _1279_args[2LL]));
			}
		}
		_match_end_4409026544:;
	}
}



inline jule::Bool _211ad8025_process_command(jule::Slice<jule::Str>& _15121_args) {
	{
		auto &_match_expr{ _15121_args[1LL] };
		
		if (_match_expr == jule::Str("help", 4)) {
			_case_begin_4409035232:;
			{
				_211ad8025_help(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("version", 7)) {
			_case_begin_4409032640:;
			{
				_211ad8025_version(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("tool", 4)) {
			_case_begin_4409032736:;
			{
				_211ad8025_tool(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("julenv", 6)) {
			_case_begin_4409032832:;
			{
				_211ad8025_julenv(_15121_args);
			}
		}
		else if (_match_expr == jule::Str("mod", 3)) {
			_case_begin_4409032928:;
			{
				_211ad8025_mod(_15121_args);
			}
		}
		else {
			_case_begin_4408974192:;
			{
				return false;
			}
		}
		_match_end_4409032288:;
	}
	return true;
}



inline void _211ad8025_exit_err(jule::Str _16413_msg) {
	jule::outln(_16413_msg);
	_211c5d002_exit(1LL);
}



inline void _211ad8025_show_info(void) {
	jule::outln(jule::Str("JuleC is a tool for Jule source code and developers.\n\nCommands:\n    help          Show help,\n    version       Show version,\n    tool          Tools for effective Jule,\n    julenv        Show information about native jule environment\n    mod           Module management\n\nCompilation:\n    julec [OPTIONS] INPUT\n", 310));
}



void entry_point(void) {
	jule::Slice<jule::Str> _18613_args = _211c409b8_args();
	if (_18613_args.len() < 2LL) {
		_211ad8025_show_info();
		return;
	}
	if (_211ad8025_process_command(_18613_args)) {
		return;
	}
	_211b24e41_compile_command(_18613_args);
}



inline void _211b0b9b6___init_common(void) {
	_211b7d3b7_COMPILER=jule::Str("clang", 5);
	_211b7d3b7_COMPILER_PATH=jule::Str("clang++", 7);
}



inline void _211b23cb9_init(void) {
	_211b0b9b6___init_common();
}



inline void _211b24e41_write_output(jule::Str _4317_path,jule::Str _4328_content) {
	jule::Str _449_dir = _1ce9be05e_dir(_4317_path);
	({
		auto except = _1ce976e6d_Status::_static_method_of(_449_dir);
		if (!except.ok()) {
			({
				auto except = _1ce947cda_Directory::_static_method_create(_449_dir);
				if (!except.ok()) {
					_211ad8025_exit_err(jule::Str("a problem occurs when code generation", 37));
				}
			});
		}
	});
	({
		auto except = _1ce96429b_File::_static_method_write(_4317_path,static_cast<jule::Slice<jule::U8>>(_4328_content),432LL);
		if (!except.ok()) {
			_211ad8025_exit_err(jule::Str("a problem occurs when code generation", 37));
		}
	});
}



inline void _211b24e41_clear_objects(void) {
	({
		auto except = _1ce96429b_File::_static_method_remove(_211b24e41_get_compile_path());
		if (!except.ok()) {
			jule::outln(jule::Str("a problem occurs when object cleaning", 37));
			return;
		}
	});
	_1ce947cda_Directory::_static_method_remove(_211b24e41_OUT_DIR);
}



inline void _211b24e41_compile_ir(jule::Str _7115_compiler,jule::Str _7130_compiler_cmd) {
	jule::Ptr<_1b6a03760_Cmd> _7213_cmd = _1b6a03760_Cmd::_static_method_new(_7115_compiler);
	(*(_7213_cmd))._field_args=jule::Slice<jule::Str>({_7115_compiler});
	(*(_7213_cmd))._field_args=jule::append((*(_7213_cmd))._field_args,_1cea16edb_split(_7130_compiler_cmd,jule::Str(" ", 1),-1LL));
	({
		auto except = (*(_7213_cmd))._method_spawn();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/src/julec/compile.jule:75:5"));
	});
	jule::Int _769_status = ({
		auto except = (*(_7213_cmd))._method_wait();
		if (!except.ok()) jule::panic(jule::Str("unhandled exceptional: ") + except.error.type->to_str(except.error.data) + jule::Str("\nlocation: /Users/mertcandav/Desktop/dev/jule/src/julec/compile.jule:76:18"));
		(except.result);
	});
	if (_769_status != 0LL) {
		jule::Str _7813_error_message = (jule::Str("\n>>> your backend compiler (", 28) + _211b7d3b7_COMPILER) + jule::Str(") reports problems\n>>> please check errors above\n>>> is this a compiler problem, please report us: https://github.com/julelang/jule/issues/new/choose", 149);
		_211ad8b4c_AnsiEscape::_static_method_print(jule::Str("\033[31m", 5),_7813_error_message);
		_211ad8025_exit_err(jule::Str());
	}
	_211b24e41_clear_objects();
}



inline void _211b24e41_do_spell(jule::Str _8913_obj,jule::Str _8923_compiler,jule::Str _8938_compiler_cmd) {
	jule::Str _909_path = _211b24e41_get_compile_path();
	_211b24e41_write_output(_909_path,_8913_obj);
	if ((!(_211b7d3b7_TRANSPILATION))) {
		_211b24e41_compile_ir(_8923_compiler,_8938_compiler_cmd);
	}
}



inline jule::Bool _211b24e41_is_cpp_source_file(jule::Str _9723_path) {
	jule::Int _989_offset = _1cea16edb_find_last_byte(_9723_path,'.');
	if (_989_offset == -1LL) {
		return false;
	}
	return _1b697da81_is_valid_cpp_ext(_9723_path.slice(_989_offset));
}



inline void _211b24e41_push_comp_cmd_clang(jule::Str& _10529_cmd) {
	_10529_cmd+=jule::Str("-Wno-everything ", 16);
	_10529_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _211b7d3b7_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_4409087856:;
			{
				_10529_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_4409088032:;
			{
				_10529_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_4409088128:;
			{
				_10529_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_4409087776:;
	}
	_10529_cmd+=jule::Str(" ", 1);
	if (_211b70ab3_PRODUCTION) {
		_10529_cmd+=jule::Str("-O3 ", 4);
		_10529_cmd+=jule::Str("-flto ", 6);
		_10529_cmd+=jule::Str("-DNDEBUG ", 9);
		_10529_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_10529_cmd+=jule::Str("-O0 ", 4);
	}
}



inline void _211b24e41_push_comp_cmd_gcc(jule::Str& _12827_cmd) {
	_12827_cmd+=jule::Str("-w ", 3);
	_12827_cmd+=jule::Str("--std=", 6);
	{
		auto &_match_expr{ _211b7d3b7_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5)) {
			_case_begin_4409096640:;
			{
				_12827_cmd+=jule::Str("c++14", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp17", 5)) {
			_case_begin_4409096736:;
			{
				_12827_cmd+=jule::Str("c++17", 5);
			}
		}
		else if (_match_expr == jule::Str("cpp20", 5)) {
			_case_begin_4409096832:;
			{
				_12827_cmd+=jule::Str("c++20", 5);
			}
		}
		_match_end_4409096560:;
	}
	_12827_cmd+=jule::Str(" ", 1);
	if (_211b70ab3_PRODUCTION) {
		_12827_cmd+=jule::Str("-O3 ", 4);
		_12827_cmd+=jule::Str("-DNDEBUG ", 9);
		_12827_cmd+=jule::Str("-fomit-frame-pointer ", 21);
	} else {
		_12827_cmd+=jule::Str("-O0 ", 4);
	}
}



inline std::tuple<jule::Str,jule::Str> _211b24e41_gen_compile_cmd(jule::Str _15120_source_path,jule::Ptr<_1b719bcc6_IR>& _15139_ir) {
	jule::Str &_15210_compiler = _211b7d3b7_COMPILER_PATH;
	jule::Str _15413_cmd = jule::Str();
	{
		auto &_match_expr{ _211b7d3b7_COMPILER };
		
		if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_4409105840:;
			{
				_211b24e41_push_comp_cmd_gcc(_15413_cmd);
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_4409105936:;
			{
				_211b24e41_push_comp_cmd_clang(_15413_cmd);
			}
		}
		_match_end_4409105760:;
	}
	{
		auto &expr = (*(_15139_ir))._field_passes;
		auto it = expr.begin();
		_iter_begin_4409108416:;
		if (it != expr.end()) {
			jule::Str &_211b24e41_pass = *it;
			{
				_15413_cmd+=_211b24e41_pass;
				_15413_cmd+=jule::Str(" ", 1);
			}
			_iter_next_4409108416:;
			++it;
			goto _iter_begin_4409108416;
		}
		_iter_end_4409108416:;
	}
	{
		auto &expr = (*(_15139_ir))._field_used;
		auto it = expr.begin();
		_iter_begin_4409111808:;
		if (it != expr.end()) {
			jule::Ptr<_1a6e9a574_ImportInfo> &_211b24e41_u = *it;
			{
				if ((*(_211b24e41_u))._field_cpp_linked && _211b24e41_is_cpp_source_file((*(_211b24e41_u))._field_path)) {
					_15413_cmd+=(*(_211b24e41_u))._field_path;
					_15413_cmd+=jule::Str(" ", 1);
				}
			}
			_iter_next_4409111808:;
			++it;
			goto _iter_begin_4409111808;
		}
		_iter_end_4409111808:;
	}
	if (_211b24e41_OUT != jule::Str()) {
		_15413_cmd+=jule::Str("-o ", 3);
		_15413_cmd+=_211b24e41_OUT;
		_15413_cmd+=jule::Str(" ", 1);
	}
	_15413_cmd+=_15120_source_path;
	return std::make_tuple(_15210_compiler,_15413_cmd);
}



inline jule::Str _211b24e41_get_compile_path(void) {
	return _1ce9be05e_join(jule::Slice<jule::Str>({_211b24e41_OUT_DIR,_211b24e41_OUT_NAME}));
}



inline void _211b24e41_apply_target_independent_optimizations(jule::Ptr<_1b719bcc6_IR>& _19548_ir) {
	if (_211b70ab3_OPT_DEADCODE) {
		_1b7467756_eliminate_defines(_19548_ir);
	}
	jule::Ptr<_1a70a6dab_Optimizer> _20213_opt = _1a70a6dab_Optimizer::_static_method_new(_19548_ir);
	(*(_20213_opt))._method_optimize();
	if (_211b70ab3_OPT_DEADCODE) {
		_1b719b688_eliminate_scopes(_19548_ir);
	}
}



inline void _211b24e41_check_compiler_flag(void) {
	{
		auto &_match_expr{ _211b7d3b7_COMPILER };
		
		if (_match_expr == jule::Str()) {
			_case_begin_4409124992:;
			{
				_211ad8025_exit_err(jule::Str("missing option value: --compiler", 32));
			}
		}
		else if (_match_expr == jule::Str("clang", 5)) {
			_case_begin_4409124432:;
			{
				_211b7d3b7_COMPILER_PATH=jule::Str("clang++", 7);
			}
		}
		else if (_match_expr == jule::Str("gcc", 3)) {
			_case_begin_4409124528:;
			{
				_211b7d3b7_COMPILER_PATH=jule::Str("g++", 3);
			}
		}
		else {
			_case_begin_4409123808:;
			{
				_211ad8025_exit_err((jule::Str("invalid option value for --compiler: ", 37) + _211b7d3b7_COMPILER));
			}
		}
		_match_end_4409122784:;
	}
}



inline void _211b24e41_check_target_arch(jule::Str _22722_arch) {
	{
		auto &expr = _1b698aa8d_DISTARCH;
		auto it = expr.begin();
		_iter_begin_4409128144:;
		if (it != expr.end()) {
			jule::Str &_211b24e41_distarch = *it;
			{
				if (_22722_arch == _211b24e41_distarch) {
					return;
				}
			}
			_iter_next_4409128144:;
			++it;
			goto _iter_begin_4409128144;
		}
		_iter_end_4409128144:;
	}
	_211ad8025_exit_err((jule::Str("--target: unsupported/undefined architecture: ", 46) + _22722_arch));
}



inline void _211b24e41_check_target_os(jule::Str _23720_os) {
	{
		auto &expr = _1b698aa8d_DISTOS;
		auto it = expr.begin();
		_iter_begin_4409133504:;
		if (it != expr.end()) {
			jule::Str &_211b24e41_distos = *it;
			{
				if (_23720_os == _211b24e41_distos) {
					return;
				}
			}
			_iter_next_4409133504:;
			++it;
			goto _iter_begin_4409133504;
		}
		_iter_end_4409133504:;
	}
	_211ad8025_exit_err((jule::Str("--target: unsupported/undefined operating system: ", 50) + _23720_os));
}



inline void _211b24e41_check_target_flag(jule::Str& _24723_target) {
	if (_24723_target == jule::Str()) {
		_211ad8025_exit_err(jule::Str("missing option value: --target", 30));
	}
	jule::Slice<jule::Str> _2529_parts = _1cea16edb_split(_24723_target,jule::Str("-", 1),-1LL);
	if (_2529_parts.len() != 2LL) {
		_211ad8025_exit_err((jule::Str("--target: undefined platform target format: ", 44) + _24723_target));
	}
	jule::Str _25710_os = _2529_parts[0LL];
	jule::Str _25714_arch = _2529_parts[1LL];
	std::tie(_25710_os,_25714_arch) = std::make_tuple(_2529_parts[0LL],_2529_parts[1LL]);
	if (_25710_os != jule::Str("native", 6)) {
		_211b24e41_check_target_os(_25710_os);
		_211b246b0_OS=_25710_os;
	}
	if (_25714_arch != jule::Str("native", 6)) {
		_211b24e41_check_target_arch(_25714_arch);
		_211b246b0_ARCH=_25714_arch;
	}
}



inline void _211b24e41_check_opt_flag(jule::Str& _27020_opt) {
	if (_27020_opt == jule::Str()) {
		_211ad8025_exit_err(jule::Str("missing option value: --opt", 27));
	}
	{
		auto &_match_expr{ _27020_opt };
		
		if (_match_expr == jule::Str("L0", 2)) {
			_case_begin_4409152416:;
		}
		else if (_match_expr == jule::Str("L1", 2)) {
			_case_begin_4409152512:;
			{
				_211b70ab3_push_opt_level(1LLU);
			}
		}
		else {
			_case_begin_4409150688:;
			{
				_211ad8025_exit_err((jule::Str("--opt: invalid optimization level: ", 35) + _27020_opt));
			}
		}
		_match_end_4409147952:;
	}
}



inline void _211b24e41_check_cpp_std_flag(void) {
	{
		auto &_match_expr{ _211b7d3b7_CPP_STD };
		
		if (_match_expr == jule::Str("cpp14", 5) || _match_expr == jule::Str("cpp17", 5) || _match_expr == jule::Str("cpp20", 5)) {
			_case_begin_4409154784:;
		}
		else {
			_case_begin_4409152608:;
			{
				_211ad8025_exit_err((jule::Str("--cppstd: invalid optimization level: ", 38) + _211b7d3b7_CPP_STD));
			}
		}
		_match_end_4409154688:;
	}
}



inline jule::Slice<jule::Str> _211b24e41_check_flags(jule::Slice<jule::Str>& _29417_args) {
	jule::Str _29513_opt = jule::Str("L0", 2);
	jule::Str _29613_target = jule::Str("native-native", 13);
	jule::Ptr<_1a70d117c_FlagSet> _29813_fs = _1a70d117c_FlagSet::_static_method_new();
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_29513_opt)))),jule::Str("opt", 3),0LL,jule::Str("Optimization level", 18));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_29613_target)))),jule::Str("target", 6),0LL,jule::Str("Target system", 13));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_211b24e41_OUT)))),jule::Str("out", 3),'o',jule::Str("Output identifier", 17));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b7d3b7_SHADOWING)))),jule::Str("shadowing", 9),0LL,jule::Str("Allow shadowing", 15));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b7d3b7_TRANSPILATION)))),jule::Str("transpile", 9),'t',jule::Str("Transpile code", 14));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_211b7d3b7_COMPILER)))),jule::Str("compiler", 8),0LL,jule::Str("Backend compiler", 16));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_PRODUCTION)))),jule::Str("production", 10),'p',jule::Str("Compile for production", 22));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b7d3b7_RC)))),jule::Str("disable-rc", 10),0LL,jule::Str("Disable reference counting", 26));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b7d3b7_SAFETY)))),jule::Str("disable-safety", 14),0LL,jule::Str("Disable safety", 14));
	(*(_29813_fs))._method_add_var_0(((jule::Ptr<jule::Str>)((&(_211b7d3b7_CPP_STD)))),jule::Str("cppstd", 6),0LL,jule::Str("C++ standard", 12));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_COPY)))),jule::Str("opt-copy", 8),0LL,jule::Str("Copy optimization", 17));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_DEADCODE)))),jule::Str("opt-deadcode", 12),0LL,jule::Str("Deadcode optimization", 21));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_APPEND)))),jule::Str("opt-append", 10),0LL,jule::Str("Append optimization", 19));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_MATH)))),jule::Str("opt-math", 8),0LL,jule::Str("Math optimization", 17));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_ACCESS)))),jule::Str("opt-access", 10),0LL,jule::Str("Access optimization", 19));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_INLINE)))),jule::Str("opt-inline", 10),0LL,jule::Str("Inline optimization", 19));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_PTR)))),jule::Str("opt-ptr", 7),0LL,jule::Str("Pointer optimizations", 21));
	(*(_29813_fs))._method_add_var_1(((jule::Ptr<jule::Bool>)((&(_211b70ab3_OPT_COND)))),jule::Str("opt-cond", 8),0LL,jule::Str("Conditional optimizations", 25));
	jule::Slice<jule::Str> _31913_content = ({
		auto except = (*(_29813_fs))._method_parse(_29417_args);
		(except.ok()) ? (except.result) : ({
			_211ad8025_exit_err(except.error.operator jule::Str());
			nullptr;
		});
	});
	_211b24e41_check_compiler_flag();
	_211b24e41_check_cpp_std_flag();
	_211b24e41_check_target_flag(_29613_target);
	_211b24e41_check_opt_flag(_29513_opt);
	return _31913_content;
}



inline void _211b24e41_setup_sema_flags(jule::Int& _33226_flags) {
	if (_211b7d3b7_SHADOWING) {
		_33226_flags|=1LL;
	}
}



inline jule::Ptr<_1b719bcc6_IR> _211b24e41_build_ir(jule::Slice<jule::Str>& _33814_args) {
	jule::Slice<jule::Str> _3399_content = _211b24e41_check_flags(_33814_args);
	jule::Int _34113_sema_flags = 0LL;
	_211b24e41_setup_sema_flags(_34113_sema_flags);
	if (_3399_content.len() == 0LL) {
		_211ad8025_exit_err(_1b6986b22_logf(jule::Str("missing compile path", 20),jule::Slice<jule::Any>()));
	} else if (_3399_content.len() > 1LL) {
		_211ad8025_exit_err((jule::Str("undefined content: ", 19) + _3399_content[1LL]));
	}
	jule::Str _34914_path;
	jule::Bool _34920_ok;
	std::tie(_34914_path,_34920_ok) = _1ce9be05e_abs(_3399_content[0LL]);
	if ((!(_34920_ok))) {
		_211ad8025_exit_err(jule::Str("compile path could not processed because of a problem", 53));
	}
	jule::Ptr<_1ce976e6d_Status> _3559_inf = ({
		auto except = _1ce976e6d_Status::_static_method_of(_1b69ce708_PATH_STDLIB);
		(except.ok()) ? (except.result) : ({{
			_211ad8025_exit_err(_1b6986b22_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
			return nullptr;
			return nullptr;
		} jule::Ptr<_1ce976e6d_Status>();});
	});
	if ((!((*(_3559_inf))._method_is_dir()))) {
		_211ad8025_exit_err(_1b6986b22_logf(jule::Str("standard library directory not found", 36),jule::Slice<jule::Any>()));
	}
	_1b74b0d98_init_vars();
	jule::Ptr<_1b719bcc6_IR> _36614_ir;
	jule::Slice<_1b6986b22_Log> _36618_logs;
	std::tie(_36614_ir,_36618_logs) = _1b719bcc6_IR::_static_method_build(_34914_path,_34113_sema_flags);
	if ((_36614_ir == nullptr) && (_36618_logs == nullptr)) {
		_211ad8025_exit_err(_1b6986b22_logf(jule::Str("there is no Jule source code in this package: @", 47),jule::Slice<jule::Any>({jule::Any(_34914_path)})));
	}
	if (_36618_logs != nullptr) {
		_211ad8b4c_Logger::_static_method_print_logs(_36618_logs);
		_211ad8025_exit_err(jule::Str());
	}
	return _36614_ir;
}



inline void _211b24e41_compile_command(jule::Slice<jule::Str>& _38125_args) {
	_38125_args=_38125_args.slice(1LL);
	if (_38125_args[0LL] == jule::Str("test", 4)) {
		_211b7d3b7_TEST=true;
		_38125_args=_38125_args.slice(1LL);
	}
	jule::Ptr<_1b719bcc6_IR> _38713_ir = _211b24e41_build_ir(_38125_args);
	
	if ((!(_211b7d3b7_TEST))) {
		jule::Ptr<_1a691a500_Fn> _39217_f = (*((*(_38713_ir))._field_main))._method_find_fn(jule::Str("main", 4),false);
		if (_39217_f == nullptr) {
			_211ad8025_exit_err(_1b6986b22_logf(jule::Str("missing entry point: entry point (main) function is not defined", 63),jule::Slice<jule::Any>()));
		}
		(*(_39217_f))._field_statically=true;
	}
	jule::Ptr<_1a691a500_Fn> _39813_f = (*((*(_38713_ir))._field_main))._method_find_fn(jule::Str("init", 4),false);
	if (_39813_f != nullptr) {
		(*(_39813_f))._field_statically=true;
	}
	_211b24e41_apply_target_independent_optimizations(_38713_ir);
	(*(_38713_ir))._method_order();
	jule::Str _40810_compiler;
	jule::Str _40820_compiler_cmd;
	std::tie(_40810_compiler,_40820_compiler_cmd) = _211b24e41_gen_compile_cmd(_211b24e41_get_compile_path(),_38713_ir);
	jule::Str _41013_obj = _1a94c037c_gen(_38713_ir);
	if (_211b7d3b7_TEST) {
		_1a94c037c_append_test_point(_41013_obj,_38713_ir);
	}
	_1a94c037c_append_standard(_41013_obj,_40810_compiler,_40820_compiler_cmd);
	_211b24e41_do_spell(_41013_obj,_40810_compiler,_40820_compiler_cmd);
}




void __jule_call_initializers(void) {
	_211b246b0_OS = jule::Str("darwin", 6);
	_211b246b0_ARCH = jule::Str("arm64", 5);
	_211b70ab3_PRODUCTION = false;
	_211b70ab3_OPT_COPY = false;
	_211b70ab3_OPT_DEADCODE = false;
	_211b70ab3_OPT_APPEND = false;
	_211b70ab3_OPT_MATH = false;
	_211b70ab3_OPT_ACCESS = false;
	_211b70ab3_OPT_INLINE = false;
	_211b70ab3_OPT_PTR = false;
	_211b70ab3_OPT_COND = false;
	_211b7d3b7_COMPILER = jule::Str();
	_211b7d3b7_COMPILER_PATH = jule::Str();
	_211b7d3b7_CPP_STD = jule::Str("cpp17", 5);
	_211b7d3b7_SHADOWING = false;
	_211b7d3b7_TRANSPILATION = false;
	_211b7d3b7_TEST = false;
	_211b7d3b7_RC = true;
	_211b7d3b7_SAFETY = true;
	_211c58508__L = jule::new_struct<_1b687a818_RangeTable>(new( std::nothrow ) _1b687a818_RangeTable(jule::Slice<_1b687a818_Range16>({_1b687a818_Range16(65LLU,90LLU,1LLU),_1b687a818_Range16(97LLU,122LLU,1LLU),_1b687a818_Range16(170LLU,181LLU,11LLU),_1b687a818_Range16(186LLU,192LLU,6LLU),_1b687a818_Range16(193LLU,214LLU,1LLU),_1b687a818_Range16(216LLU,246LLU,1LLU),_1b687a818_Range16(248LLU,705LLU,1LLU),_1b687a818_Range16(710LLU,721LLU,1LLU),_1b687a818_Range16(736LLU,740LLU,1LLU),_1b687a818_Range16(748LLU,750LLU,2LLU),_1b687a818_Range16(880LLU,884LLU,1LLU),_1b687a818_Range16(886LLU,887LLU,1LLU),_1b687a818_Range16(890LLU,893LLU,1LLU),_1b687a818_Range16(895LLU,902LLU,7LLU),_1b687a818_Range16(904LLU,906LLU,1LLU),_1b687a818_Range16(908LLU,910LLU,2LLU),_1b687a818_Range16(911LLU,929LLU,1LLU),_1b687a818_Range16(931LLU,1013LLU,1LLU),_1b687a818_Range16(1015LLU,1153LLU,1LLU),_1b687a818_Range16(1162LLU,1327LLU,1LLU),_1b687a818_Range16(1329LLU,1366LLU,1LLU),_1b687a818_Range16(1369LLU,1376LLU,7LLU),_1b687a818_Range16(1377LLU,1416LLU,1LLU),_1b687a818_Range16(1488LLU,1514LLU,1LLU),_1b687a818_Range16(1519LLU,1522LLU,1LLU),_1b687a818_Range16(1568LLU,1610LLU,1LLU),_1b687a818_Range16(1646LLU,1647LLU,1LLU),_1b687a818_Range16(1649LLU,1747LLU,1LLU),_1b687a818_Range16(1749LLU,1765LLU,16LLU),_1b687a818_Range16(1766LLU,1774LLU,8LLU),_1b687a818_Range16(1775LLU,1786LLU,11LLU),_1b687a818_Range16(1787LLU,1788LLU,1LLU),_1b687a818_Range16(1791LLU,1808LLU,17LLU),_1b687a818_Range16(1810LLU,1839LLU,1LLU),_1b687a818_Range16(1869LLU,1957LLU,1LLU),_1b687a818_Range16(1969LLU,1994LLU,25LLU),_1b687a818_Range16(1995LLU,2026LLU,1LLU),_1b687a818_Range16(2036LLU,2037LLU,1LLU),_1b687a818_Range16(2042LLU,2048LLU,6LLU),_1b687a818_Range16(2049LLU,2069LLU,1LLU),_1b687a818_Range16(2074LLU,2084LLU,10LLU),_1b687a818_Range16(2088LLU,2112LLU,24LLU),_1b687a818_Range16(2113LLU,2136LLU,1LLU),_1b687a818_Range16(2144LLU,2154LLU,1LLU),_1b687a818_Range16(2160LLU,2183LLU,1LLU),_1b687a818_Range16(2185LLU,2190LLU,1LLU),_1b687a818_Range16(2208LLU,2249LLU,1LLU),_1b687a818_Range16(2308LLU,2361LLU,1LLU),_1b687a818_Range16(2365LLU,2384LLU,19LLU),_1b687a818_Range16(2392LLU,2401LLU,1LLU),_1b687a818_Range16(2417LLU,2432LLU,1LLU),_1b687a818_Range16(2437LLU,2444LLU,1LLU),_1b687a818_Range16(2447LLU,2448LLU,1LLU),_1b687a818_Range16(2451LLU,2472LLU,1LLU),_1b687a818_Range16(2474LLU,2480LLU,1LLU),_1b687a818_Range16(2482LLU,2486LLU,4LLU),_1b687a818_Range16(2487LLU,2489LLU,1LLU),_1b687a818_Range16(2493LLU,2510LLU,17LLU),_1b687a818_Range16(2524LLU,2525LLU,1LLU),_1b687a818_Range16(2527LLU,2529LLU,1LLU),_1b687a818_Range16(2544LLU,2545LLU,1LLU),_1b687a818_Range16(2556LLU,2565LLU,9LLU),_1b687a818_Range16(2566LLU,2570LLU,1LLU),_1b687a818_Range16(2575LLU,2576LLU,1LLU),_1b687a818_Range16(2579LLU,2600LLU,1LLU),_1b687a818_Range16(2602LLU,2608LLU,1LLU),_1b687a818_Range16(2610LLU,2611LLU,1LLU),_1b687a818_Range16(2613LLU,2614LLU,1LLU),_1b687a818_Range16(2616LLU,2617LLU,1LLU),_1b687a818_Range16(2649LLU,2652LLU,1LLU),_1b687a818_Range16(2654LLU,2674LLU,20LLU),_1b687a818_Range16(2675LLU,2676LLU,1LLU),_1b687a818_Range16(2693LLU,2701LLU,1LLU),_1b687a818_Range16(2703LLU,2705LLU,1LLU),_1b687a818_Range16(2707LLU,2728LLU,1LLU),_1b687a818_Range16(2730LLU,2736LLU,1LLU),_1b687a818_Range16(2738LLU,2739LLU,1LLU),_1b687a818_Range16(2741LLU,2745LLU,1LLU),_1b687a818_Range16(2749LLU,2768LLU,19LLU),_1b687a818_Range16(2784LLU,2785LLU,1LLU),_1b687a818_Range16(2809LLU,2821LLU,12LLU),_1b687a818_Range16(2822LLU,2828LLU,1LLU),_1b687a818_Range16(2831LLU,2832LLU,1LLU),_1b687a818_Range16(2835LLU,2856LLU,1LLU),_1b687a818_Range16(2858LLU,2864LLU,1LLU),_1b687a818_Range16(2866LLU,2867LLU,1LLU),_1b687a818_Range16(2869LLU,2873LLU,1LLU),_1b687a818_Range16(2877LLU,2908LLU,31LLU),_1b687a818_Range16(2909LLU,2911LLU,2LLU),_1b687a818_Range16(2912LLU,2913LLU,1LLU),_1b687a818_Range16(2929LLU,2947LLU,18LLU),_1b687a818_Range16(2949LLU,2954LLU,1LLU),_1b687a818_Range16(2958LLU,2960LLU,1LLU),_1b687a818_Range16(2962LLU,2965LLU,1LLU),_1b687a818_Range16(2969LLU,2970LLU,1LLU),_1b687a818_Range16(2972LLU,2974LLU,2LLU),_1b687a818_Range16(2975LLU,2979LLU,4LLU),_1b687a818_Range16(2980LLU,2984LLU,4LLU),_1b687a818_Range16(2985LLU,2986LLU,1LLU),_1b687a818_Range16(2990LLU,3001LLU,1LLU),_1b687a818_Range16(3024LLU,3077LLU,53LLU),_1b687a818_Range16(3078LLU,3084LLU,1LLU),_1b687a818_Range16(3086LLU,3088LLU,1LLU),_1b687a818_Range16(3090LLU,3112LLU,1LLU),_1b687a818_Range16(3114LLU,3129LLU,1LLU),_1b687a818_Range16(3133LLU,3160LLU,27LLU),_1b687a818_Range16(3161LLU,3162LLU,1LLU),_1b687a818_Range16(3165LLU,3168LLU,3LLU),_1b687a818_Range16(3169LLU,3200LLU,31LLU),_1b687a818_Range16(3205LLU,3212LLU,1LLU),_1b687a818_Range16(3214LLU,3216LLU,1LLU),_1b687a818_Range16(3218LLU,3240LLU,1LLU),_1b687a818_Range16(3242LLU,3251LLU,1LLU),_1b687a818_Range16(3253LLU,3257LLU,1LLU),_1b687a818_Range16(3261LLU,3293LLU,32LLU),_1b687a818_Range16(3294LLU,3296LLU,2LLU),_1b687a818_Range16(3297LLU,3313LLU,16LLU),_1b687a818_Range16(3314LLU,3332LLU,18LLU),_1b687a818_Range16(3333LLU,3340LLU,1LLU),_1b687a818_Range16(3342LLU,3344LLU,1LLU),_1b687a818_Range16(3346LLU,3386LLU,1LLU),_1b687a818_Range16(3389LLU,3406LLU,17LLU),_1b687a818_Range16(3412LLU,3414LLU,1LLU),_1b687a818_Range16(3423LLU,3425LLU,1LLU),_1b687a818_Range16(3450LLU,3455LLU,1LLU),_1b687a818_Range16(3461LLU,3478LLU,1LLU),_1b687a818_Range16(3482LLU,3505LLU,1LLU),_1b687a818_Range16(3507LLU,3515LLU,1LLU),_1b687a818_Range16(3517LLU,3520LLU,3LLU),_1b687a818_Range16(3521LLU,3526LLU,1LLU),_1b687a818_Range16(3585LLU,3632LLU,1LLU),_1b687a818_Range16(3634LLU,3635LLU,1LLU),_1b687a818_Range16(3648LLU,3654LLU,1LLU),_1b687a818_Range16(3713LLU,3714LLU,1LLU),_1b687a818_Range16(3716LLU,3718LLU,2LLU),_1b687a818_Range16(3719LLU,3722LLU,1LLU),_1b687a818_Range16(3724LLU,3747LLU,1LLU),_1b687a818_Range16(3749LLU,3751LLU,2LLU),_1b687a818_Range16(3752LLU,3760LLU,1LLU),_1b687a818_Range16(3762LLU,3763LLU,1LLU),_1b687a818_Range16(3773LLU,3776LLU,3LLU),_1b687a818_Range16(3777LLU,3780LLU,1LLU),_1b687a818_Range16(3782LLU,3804LLU,22LLU),_1b687a818_Range16(3805LLU,3807LLU,1LLU),_1b687a818_Range16(3840LLU,3904LLU,64LLU),_1b687a818_Range16(3905LLU,3911LLU,1LLU),_1b687a818_Range16(3913LLU,3948LLU,1LLU),_1b687a818_Range16(3976LLU,3980LLU,1LLU),_1b687a818_Range16(4096LLU,4138LLU,1LLU),_1b687a818_Range16(4159LLU,4176LLU,17LLU),_1b687a818_Range16(4177LLU,4181LLU,1LLU),_1b687a818_Range16(4186LLU,4189LLU,1LLU),_1b687a818_Range16(4193LLU,4197LLU,4LLU),_1b687a818_Range16(4198LLU,4206LLU,8LLU),_1b687a818_Range16(4207LLU,4208LLU,1LLU),_1b687a818_Range16(4213LLU,4225LLU,1LLU),_1b687a818_Range16(4238LLU,4256LLU,18LLU),_1b687a818_Range16(4257LLU,4293LLU,1LLU),_1b687a818_Range16(4295LLU,4301LLU,6LLU),_1b687a818_Range16(4304LLU,4346LLU,1LLU),_1b687a818_Range16(4348LLU,4680LLU,1LLU),_1b687a818_Range16(4682LLU,4685LLU,1LLU),_1b687a818_Range16(4688LLU,4694LLU,1LLU),_1b687a818_Range16(4696LLU,4698LLU,2LLU),_1b687a818_Range16(4699LLU,4701LLU,1LLU),_1b687a818_Range16(4704LLU,4744LLU,1LLU),_1b687a818_Range16(4746LLU,4749LLU,1LLU),_1b687a818_Range16(4752LLU,4784LLU,1LLU),_1b687a818_Range16(4786LLU,4789LLU,1LLU),_1b687a818_Range16(4792LLU,4798LLU,1LLU),_1b687a818_Range16(4800LLU,4802LLU,2LLU),_1b687a818_Range16(4803LLU,4805LLU,1LLU),_1b687a818_Range16(4808LLU,4822LLU,1LLU),_1b687a818_Range16(4824LLU,4880LLU,1LLU),_1b687a818_Range16(4882LLU,4885LLU,1LLU),_1b687a818_Range16(4888LLU,4954LLU,1LLU),_1b687a818_Range16(4992LLU,5007LLU,1LLU),_1b687a818_Range16(5024LLU,5109LLU,1LLU),_1b687a818_Range16(5112LLU,5117LLU,1LLU),_1b687a818_Range16(5121LLU,5740LLU,1LLU),_1b687a818_Range16(5743LLU,5759LLU,1LLU),_1b687a818_Range16(5761LLU,5786LLU,1LLU),_1b687a818_Range16(5792LLU,5866LLU,1LLU),_1b687a818_Range16(5873LLU,5880LLU,1LLU),_1b687a818_Range16(5888LLU,5905LLU,1LLU),_1b687a818_Range16(5919LLU,5937LLU,1LLU),_1b687a818_Range16(5952LLU,5969LLU,1LLU),_1b687a818_Range16(5984LLU,5996LLU,1LLU),_1b687a818_Range16(5998LLU,6000LLU,1LLU),_1b687a818_Range16(6016LLU,6067LLU,1LLU),_1b687a818_Range16(6103LLU,6108LLU,5LLU),_1b687a818_Range16(6176LLU,6264LLU,1LLU),_1b687a818_Range16(6272LLU,6276LLU,1LLU),_1b687a818_Range16(6279LLU,6312LLU,1LLU),_1b687a818_Range16(6314LLU,6320LLU,6LLU),_1b687a818_Range16(6321LLU,6389LLU,1LLU),_1b687a818_Range16(6400LLU,6430LLU,1LLU),_1b687a818_Range16(6480LLU,6509LLU,1LLU),_1b687a818_Range16(6512LLU,6516LLU,1LLU),_1b687a818_Range16(6528LLU,6571LLU,1LLU),_1b687a818_Range16(6576LLU,6601LLU,1LLU),_1b687a818_Range16(6656LLU,6678LLU,1LLU),_1b687a818_Range16(6688LLU,6740LLU,1LLU),_1b687a818_Range16(6823LLU,6917LLU,94LLU),_1b687a818_Range16(6918LLU,6963LLU,1LLU),_1b687a818_Range16(6981LLU,6988LLU,1LLU),_1b687a818_Range16(7043LLU,7072LLU,1LLU),_1b687a818_Range16(7086LLU,7087LLU,1LLU),_1b687a818_Range16(7098LLU,7141LLU,1LLU),_1b687a818_Range16(7168LLU,7203LLU,1LLU),_1b687a818_Range16(7245LLU,7247LLU,1LLU),_1b687a818_Range16(7258LLU,7293LLU,1LLU),_1b687a818_Range16(7296LLU,7304LLU,1LLU),_1b687a818_Range16(7312LLU,7354LLU,1LLU),_1b687a818_Range16(7357LLU,7359LLU,1LLU),_1b687a818_Range16(7401LLU,7404LLU,1LLU),_1b687a818_Range16(7406LLU,7411LLU,1LLU),_1b687a818_Range16(7413LLU,7414LLU,1LLU),_1b687a818_Range16(7418LLU,7424LLU,6LLU),_1b687a818_Range16(7425LLU,7615LLU,1LLU),_1b687a818_Range16(7680LLU,7957LLU,1LLU),_1b687a818_Range16(7960LLU,7965LLU,1LLU),_1b687a818_Range16(7968LLU,8005LLU,1LLU),_1b687a818_Range16(8008LLU,8013LLU,1LLU),_1b687a818_Range16(8016LLU,8023LLU,1LLU),_1b687a818_Range16(8025LLU,8031LLU,2LLU),_1b687a818_Range16(8032LLU,8061LLU,1LLU),_1b687a818_Range16(8064LLU,8116LLU,1LLU),_1b687a818_Range16(8118LLU,8124LLU,1LLU),_1b687a818_Range16(8126LLU,8130LLU,4LLU),_1b687a818_Range16(8131LLU,8132LLU,1LLU),_1b687a818_Range16(8134LLU,8140LLU,1LLU),_1b687a818_Range16(8144LLU,8147LLU,1LLU),_1b687a818_Range16(8150LLU,8155LLU,1LLU),_1b687a818_Range16(8160LLU,8172LLU,1LLU),_1b687a818_Range16(8178LLU,8180LLU,1LLU),_1b687a818_Range16(8182LLU,8188LLU,1LLU),_1b687a818_Range16(8305LLU,8319LLU,14LLU),_1b687a818_Range16(8336LLU,8348LLU,1LLU),_1b687a818_Range16(8450LLU,8455LLU,5LLU),_1b687a818_Range16(8458LLU,8467LLU,1LLU),_1b687a818_Range16(8469LLU,8473LLU,4LLU),_1b687a818_Range16(8474LLU,8477LLU,1LLU),_1b687a818_Range16(8484LLU,8490LLU,2LLU),_1b687a818_Range16(8491LLU,8493LLU,1LLU),_1b687a818_Range16(8495LLU,8505LLU,1LLU),_1b687a818_Range16(8508LLU,8511LLU,1LLU),_1b687a818_Range16(8517LLU,8521LLU,1LLU),_1b687a818_Range16(8526LLU,8579LLU,53LLU),_1b687a818_Range16(8580LLU,11264LLU,2684LLU),_1b687a818_Range16(11265LLU,11492LLU,1LLU),_1b687a818_Range16(11499LLU,11502LLU,1LLU),_1b687a818_Range16(11506LLU,11507LLU,1LLU),_1b687a818_Range16(11520LLU,11557LLU,1LLU),_1b687a818_Range16(11559LLU,11565LLU,6LLU),_1b687a818_Range16(11568LLU,11623LLU,1LLU),_1b687a818_Range16(11631LLU,11648LLU,17LLU),_1b687a818_Range16(11649LLU,11670LLU,1LLU),_1b687a818_Range16(11680LLU,11686LLU,1LLU),_1b687a818_Range16(11688LLU,11694LLU,1LLU),_1b687a818_Range16(11696LLU,11702LLU,1LLU),_1b687a818_Range16(11704LLU,11710LLU,1LLU),_1b687a818_Range16(11712LLU,11718LLU,1LLU),_1b687a818_Range16(11720LLU,11726LLU,1LLU),_1b687a818_Range16(11728LLU,11734LLU,1LLU),_1b687a818_Range16(11736LLU,11742LLU,1LLU),_1b687a818_Range16(11823LLU,12293LLU,470LLU),_1b687a818_Range16(12294LLU,12337LLU,43LLU),_1b687a818_Range16(12338LLU,12341LLU,1LLU),_1b687a818_Range16(12347LLU,12348LLU,1LLU),_1b687a818_Range16(12353LLU,12438LLU,1LLU),_1b687a818_Range16(12445LLU,12447LLU,1LLU),_1b687a818_Range16(12449LLU,12538LLU,1LLU),_1b687a818_Range16(12540LLU,12543LLU,1LLU),_1b687a818_Range16(12549LLU,12591LLU,1LLU),_1b687a818_Range16(12593LLU,12686LLU,1LLU),_1b687a818_Range16(12704LLU,12735LLU,1LLU),_1b687a818_Range16(12784LLU,12799LLU,1LLU),_1b687a818_Range16(13312LLU,19903LLU,1LLU),_1b687a818_Range16(19968LLU,42124LLU,1LLU),_1b687a818_Range16(42192LLU,42237LLU,1LLU),_1b687a818_Range16(42240LLU,42508LLU,1LLU),_1b687a818_Range16(42512LLU,42527LLU,1LLU),_1b687a818_Range16(42538LLU,42539LLU,1LLU),_1b687a818_Range16(42560LLU,42606LLU,1LLU),_1b687a818_Range16(42623LLU,42653LLU,1LLU),_1b687a818_Range16(42656LLU,42725LLU,1LLU),_1b687a818_Range16(42775LLU,42783LLU,1LLU),_1b687a818_Range16(42786LLU,42888LLU,1LLU),_1b687a818_Range16(42891LLU,42954LLU,1LLU),_1b687a818_Range16(42960LLU,42961LLU,1LLU),_1b687a818_Range16(42963LLU,42965LLU,2LLU),_1b687a818_Range16(42966LLU,42969LLU,1LLU),_1b687a818_Range16(42994LLU,43009LLU,1LLU),_1b687a818_Range16(43011LLU,43013LLU,1LLU),_1b687a818_Range16(43015LLU,43018LLU,1LLU),_1b687a818_Range16(43020LLU,43042LLU,1LLU),_1b687a818_Range16(43072LLU,43123LLU,1LLU),_1b687a818_Range16(43138LLU,43187LLU,1LLU),_1b687a818_Range16(43250LLU,43255LLU,1LLU),_1b687a818_Range16(43259LLU,43261LLU,2LLU),_1b687a818_Range16(43262LLU,43274LLU,12LLU),_1b687a818_Range16(43275LLU,43301LLU,1LLU),_1b687a818_Range16(43312LLU,43334LLU,1LLU),_1b687a818_Range16(43360LLU,43388LLU,1LLU),_1b687a818_Range16(43396LLU,43442LLU,1LLU),_1b687a818_Range16(43471LLU,43488LLU,17LLU),_1b687a818_Range16(43489LLU,43492LLU,1LLU),_1b687a818_Range16(43494LLU,43503LLU,1LLU),_1b687a818_Range16(43514LLU,43518LLU,1LLU),_1b687a818_Range16(43520LLU,43560LLU,1LLU),_1b687a818_Range16(43584LLU,43586LLU,1LLU),_1b687a818_Range16(43588LLU,43595LLU,1LLU),_1b687a818_Range16(43616LLU,43638LLU,1LLU),_1b687a818_Range16(43642LLU,43646LLU,4LLU),_1b687a818_Range16(43647LLU,43695LLU,1LLU),_1b687a818_Range16(43697LLU,43701LLU,4LLU),_1b687a818_Range16(43702LLU,43705LLU,3LLU),_1b687a818_Range16(43706LLU,43709LLU,1LLU),_1b687a818_Range16(43712LLU,43714LLU,2LLU),_1b687a818_Range16(43739LLU,43741LLU,1LLU),_1b687a818_Range16(43744LLU,43754LLU,1LLU),_1b687a818_Range16(43762LLU,43764LLU,1LLU),_1b687a818_Range16(43777LLU,43782LLU,1LLU),_1b687a818_Range16(43785LLU,43790LLU,1LLU),_1b687a818_Range16(43793LLU,43798LLU,1LLU),_1b687a818_Range16(43808LLU,43814LLU,1LLU),_1b687a818_Range16(43816LLU,43822LLU,1LLU),_1b687a818_Range16(43824LLU,43866LLU,1LLU),_1b687a818_Range16(43868LLU,43881LLU,1LLU),_1b687a818_Range16(43888LLU,44002LLU,1LLU),_1b687a818_Range16(44032LLU,55203LLU,1LLU),_1b687a818_Range16(55216LLU,55238LLU,1LLU),_1b687a818_Range16(55243LLU,55291LLU,1LLU),_1b687a818_Range16(63744LLU,64109LLU,1LLU),_1b687a818_Range16(64112LLU,64217LLU,1LLU),_1b687a818_Range16(64256LLU,64262LLU,1LLU),_1b687a818_Range16(64275LLU,64279LLU,1LLU),_1b687a818_Range16(64285LLU,64287LLU,2LLU),_1b687a818_Range16(64288LLU,64296LLU,1LLU),_1b687a818_Range16(64298LLU,64310LLU,1LLU),_1b687a818_Range16(64312LLU,64316LLU,1LLU),_1b687a818_Range16(64318LLU,64320LLU,2LLU),_1b687a818_Range16(64321LLU,64323LLU,2LLU),_1b687a818_Range16(64324LLU,64326LLU,2LLU),_1b687a818_Range16(64327LLU,64433LLU,1LLU),_1b687a818_Range16(64467LLU,64829LLU,1LLU),_1b687a818_Range16(64848LLU,64911LLU,1LLU),_1b687a818_Range16(64914LLU,64967LLU,1LLU),_1b687a818_Range16(65008LLU,65019LLU,1LLU),_1b687a818_Range16(65136LLU,65140LLU,1LLU),_1b687a818_Range16(65142LLU,65276LLU,1LLU),_1b687a818_Range16(65313LLU,65338LLU,1LLU),_1b687a818_Range16(65345LLU,65370LLU,1LLU),_1b687a818_Range16(65382LLU,65470LLU,1LLU),_1b687a818_Range16(65474LLU,65479LLU,1LLU),_1b687a818_Range16(65482LLU,65487LLU,1LLU),_1b687a818_Range16(65490LLU,65495LLU,1LLU),_1b687a818_Range16(65498LLU,65500LLU,1LLU)}),jule::Slice<_1b687a818_Range32>({_1b687a818_Range32(65536LLU,65547LLU,1LLU),_1b687a818_Range32(65549LLU,65574LLU,1LLU),_1b687a818_Range32(65576LLU,65594LLU,1LLU),_1b687a818_Range32(65596LLU,65597LLU,1LLU),_1b687a818_Range32(65599LLU,65613LLU,1LLU),_1b687a818_Range32(65616LLU,65629LLU,1LLU),_1b687a818_Range32(65664LLU,65786LLU,1LLU),_1b687a818_Range32(66176LLU,66204LLU,1LLU),_1b687a818_Range32(66208LLU,66256LLU,1LLU),_1b687a818_Range32(66304LLU,66335LLU,1LLU),_1b687a818_Range32(66349LLU,66368LLU,1LLU),_1b687a818_Range32(66370LLU,66377LLU,1LLU),_1b687a818_Range32(66384LLU,66421LLU,1LLU),_1b687a818_Range32(66432LLU,66461LLU,1LLU),_1b687a818_Range32(66464LLU,66499LLU,1LLU),_1b687a818_Range32(66504LLU,66511LLU,1LLU),_1b687a818_Range32(66560LLU,66717LLU,1LLU),_1b687a818_Range32(66736LLU,66771LLU,1LLU),_1b687a818_Range32(66776LLU,66811LLU,1LLU),_1b687a818_Range32(66816LLU,66855LLU,1LLU),_1b687a818_Range32(66864LLU,66915LLU,1LLU),_1b687a818_Range32(66928LLU,66938LLU,1LLU),_1b687a818_Range32(66940LLU,66954LLU,1LLU),_1b687a818_Range32(66956LLU,66962LLU,1LLU),_1b687a818_Range32(66964LLU,66965LLU,1LLU),_1b687a818_Range32(66967LLU,66977LLU,1LLU),_1b687a818_Range32(66979LLU,66993LLU,1LLU),_1b687a818_Range32(66995LLU,67001LLU,1LLU),_1b687a818_Range32(67003LLU,67004LLU,1LLU),_1b687a818_Range32(67072LLU,67382LLU,1LLU),_1b687a818_Range32(67392LLU,67413LLU,1LLU),_1b687a818_Range32(67424LLU,67431LLU,1LLU),_1b687a818_Range32(67456LLU,67461LLU,1LLU),_1b687a818_Range32(67463LLU,67504LLU,1LLU),_1b687a818_Range32(67506LLU,67514LLU,1LLU),_1b687a818_Range32(67584LLU,67589LLU,1LLU),_1b687a818_Range32(67592LLU,67594LLU,2LLU),_1b687a818_Range32(67595LLU,67637LLU,1LLU),_1b687a818_Range32(67639LLU,67640LLU,1LLU),_1b687a818_Range32(67644LLU,67647LLU,3LLU),_1b687a818_Range32(67648LLU,67669LLU,1LLU),_1b687a818_Range32(67680LLU,67702LLU,1LLU),_1b687a818_Range32(67712LLU,67742LLU,1LLU),_1b687a818_Range32(67808LLU,67826LLU,1LLU),_1b687a818_Range32(67828LLU,67829LLU,1LLU),_1b687a818_Range32(67840LLU,67861LLU,1LLU),_1b687a818_Range32(67872LLU,67897LLU,1LLU),_1b687a818_Range32(67968LLU,68023LLU,1LLU),_1b687a818_Range32(68030LLU,68031LLU,1LLU),_1b687a818_Range32(68096LLU,68112LLU,16LLU),_1b687a818_Range32(68113LLU,68115LLU,1LLU),_1b687a818_Range32(68117LLU,68119LLU,1LLU),_1b687a818_Range32(68121LLU,68149LLU,1LLU),_1b687a818_Range32(68192LLU,68220LLU,1LLU),_1b687a818_Range32(68224LLU,68252LLU,1LLU),_1b687a818_Range32(68288LLU,68295LLU,1LLU),_1b687a818_Range32(68297LLU,68324LLU,1LLU),_1b687a818_Range32(68352LLU,68405LLU,1LLU),_1b687a818_Range32(68416LLU,68437LLU,1LLU),_1b687a818_Range32(68448LLU,68466LLU,1LLU),_1b687a818_Range32(68480LLU,68497LLU,1LLU),_1b687a818_Range32(68608LLU,68680LLU,1LLU),_1b687a818_Range32(68736LLU,68786LLU,1LLU),_1b687a818_Range32(68800LLU,68850LLU,1LLU),_1b687a818_Range32(68864LLU,68899LLU,1LLU),_1b687a818_Range32(69248LLU,69289LLU,1LLU),_1b687a818_Range32(69296LLU,69297LLU,1LLU),_1b687a818_Range32(69376LLU,69404LLU,1LLU),_1b687a818_Range32(69415LLU,69424LLU,9LLU),_1b687a818_Range32(69425LLU,69445LLU,1LLU),_1b687a818_Range32(69488LLU,69505LLU,1LLU),_1b687a818_Range32(69552LLU,69572LLU,1LLU),_1b687a818_Range32(69600LLU,69622LLU,1LLU),_1b687a818_Range32(69635LLU,69687LLU,1LLU),_1b687a818_Range32(69745LLU,69746LLU,1LLU),_1b687a818_Range32(69749LLU,69763LLU,14LLU),_1b687a818_Range32(69764LLU,69807LLU,1LLU),_1b687a818_Range32(69840LLU,69864LLU,1LLU),_1b687a818_Range32(69891LLU,69926LLU,1LLU),_1b687a818_Range32(69956LLU,69959LLU,3LLU),_1b687a818_Range32(69968LLU,70002LLU,1LLU),_1b687a818_Range32(70006LLU,70019LLU,13LLU),_1b687a818_Range32(70020LLU,70066LLU,1LLU),_1b687a818_Range32(70081LLU,70084LLU,1LLU),_1b687a818_Range32(70106LLU,70108LLU,2LLU),_1b687a818_Range32(70144LLU,70161LLU,1LLU),_1b687a818_Range32(70163LLU,70187LLU,1LLU),_1b687a818_Range32(70207LLU,70208LLU,1LLU),_1b687a818_Range32(70272LLU,70278LLU,1LLU),_1b687a818_Range32(70280LLU,70282LLU,2LLU),_1b687a818_Range32(70283LLU,70285LLU,1LLU),_1b687a818_Range32(70287LLU,70301LLU,1LLU),_1b687a818_Range32(70303LLU,70312LLU,1LLU),_1b687a818_Range32(70320LLU,70366LLU,1LLU),_1b687a818_Range32(70405LLU,70412LLU,1LLU),_1b687a818_Range32(70415LLU,70416LLU,1LLU),_1b687a818_Range32(70419LLU,70440LLU,1LLU),_1b687a818_Range32(70442LLU,70448LLU,1LLU),_1b687a818_Range32(70450LLU,70451LLU,1LLU),_1b687a818_Range32(70453LLU,70457LLU,1LLU),_1b687a818_Range32(70461LLU,70480LLU,19LLU),_1b687a818_Range32(70493LLU,70497LLU,1LLU),_1b687a818_Range32(70656LLU,70708LLU,1LLU),_1b687a818_Range32(70727LLU,70730LLU,1LLU),_1b687a818_Range32(70751LLU,70753LLU,1LLU),_1b687a818_Range32(70784LLU,70831LLU,1LLU),_1b687a818_Range32(70852LLU,70853LLU,1LLU),_1b687a818_Range32(70855LLU,71040LLU,185LLU),_1b687a818_Range32(71041LLU,71086LLU,1LLU),_1b687a818_Range32(71128LLU,71131LLU,1LLU),_1b687a818_Range32(71168LLU,71215LLU,1LLU),_1b687a818_Range32(71236LLU,71296LLU,60LLU),_1b687a818_Range32(71297LLU,71338LLU,1LLU),_1b687a818_Range32(71352LLU,71424LLU,72LLU),_1b687a818_Range32(71425LLU,71450LLU,1LLU),_1b687a818_Range32(71488LLU,71494LLU,1LLU),_1b687a818_Range32(71680LLU,71723LLU,1LLU),_1b687a818_Range32(71840LLU,71903LLU,1LLU),_1b687a818_Range32(71935LLU,71942LLU,1LLU),_1b687a818_Range32(71945LLU,71948LLU,3LLU),_1b687a818_Range32(71949LLU,71955LLU,1LLU),_1b687a818_Range32(71957LLU,71958LLU,1LLU),_1b687a818_Range32(71960LLU,71983LLU,1LLU),_1b687a818_Range32(71999LLU,72001LLU,2LLU),_1b687a818_Range32(72096LLU,72103LLU,1LLU),_1b687a818_Range32(72106LLU,72144LLU,1LLU),_1b687a818_Range32(72161LLU,72163LLU,2LLU),_1b687a818_Range32(72192LLU,72203LLU,11LLU),_1b687a818_Range32(72204LLU,72242LLU,1LLU),_1b687a818_Range32(72250LLU,72272LLU,22LLU),_1b687a818_Range32(72284LLU,72329LLU,1LLU),_1b687a818_Range32(72349LLU,72368LLU,19LLU),_1b687a818_Range32(72369LLU,72440LLU,1LLU),_1b687a818_Range32(72704LLU,72712LLU,1LLU),_1b687a818_Range32(72714LLU,72750LLU,1LLU),_1b687a818_Range32(72768LLU,72818LLU,50LLU),_1b687a818_Range32(72819LLU,72847LLU,1LLU),_1b687a818_Range32(72960LLU,72966LLU,1LLU),_1b687a818_Range32(72968LLU,72969LLU,1LLU),_1b687a818_Range32(72971LLU,73008LLU,1LLU),_1b687a818_Range32(73030LLU,73056LLU,26LLU),_1b687a818_Range32(73057LLU,73061LLU,1LLU),_1b687a818_Range32(73063LLU,73064LLU,1LLU),_1b687a818_Range32(73066LLU,73097LLU,1LLU),_1b687a818_Range32(73112LLU,73440LLU,328LLU),_1b687a818_Range32(73441LLU,73458LLU,1LLU),_1b687a818_Range32(73474LLU,73476LLU,2LLU),_1b687a818_Range32(73477LLU,73488LLU,1LLU),_1b687a818_Range32(73490LLU,73523LLU,1LLU),_1b687a818_Range32(73648LLU,73728LLU,80LLU),_1b687a818_Range32(73729LLU,74649LLU,1LLU),_1b687a818_Range32(74880LLU,75075LLU,1LLU),_1b687a818_Range32(77712LLU,77808LLU,1LLU),_1b687a818_Range32(77824LLU,78895LLU,1LLU),_1b687a818_Range32(78913LLU,78918LLU,1LLU),_1b687a818_Range32(82944LLU,83526LLU,1LLU),_1b687a818_Range32(92160LLU,92728LLU,1LLU),_1b687a818_Range32(92736LLU,92766LLU,1LLU),_1b687a818_Range32(92784LLU,92862LLU,1LLU),_1b687a818_Range32(92880LLU,92909LLU,1LLU),_1b687a818_Range32(92928LLU,92975LLU,1LLU),_1b687a818_Range32(92992LLU,92995LLU,1LLU),_1b687a818_Range32(93027LLU,93047LLU,1LLU),_1b687a818_Range32(93053LLU,93071LLU,1LLU),_1b687a818_Range32(93760LLU,93823LLU,1LLU),_1b687a818_Range32(93952LLU,94026LLU,1LLU),_1b687a818_Range32(94032LLU,94099LLU,67LLU),_1b687a818_Range32(94100LLU,94111LLU,1LLU),_1b687a818_Range32(94176LLU,94177LLU,1LLU),_1b687a818_Range32(94179LLU,94208LLU,29LLU),_1b687a818_Range32(94209LLU,100343LLU,1LLU),_1b687a818_Range32(100352LLU,101589LLU,1LLU),_1b687a818_Range32(101632LLU,101640LLU,1LLU),_1b687a818_Range32(110576LLU,110579LLU,1LLU),_1b687a818_Range32(110581LLU,110587LLU,1LLU),_1b687a818_Range32(110589LLU,110590LLU,1LLU),_1b687a818_Range32(110592LLU,110882LLU,1LLU),_1b687a818_Range32(110898LLU,110928LLU,30LLU),_1b687a818_Range32(110929LLU,110930LLU,1LLU),_1b687a818_Range32(110933LLU,110948LLU,15LLU),_1b687a818_Range32(110949LLU,110951LLU,1LLU),_1b687a818_Range32(110960LLU,111355LLU,1LLU),_1b687a818_Range32(113664LLU,113770LLU,1LLU),_1b687a818_Range32(113776LLU,113788LLU,1LLU),_1b687a818_Range32(113792LLU,113800LLU,1LLU),_1b687a818_Range32(113808LLU,113817LLU,1LLU),_1b687a818_Range32(119808LLU,119892LLU,1LLU),_1b687a818_Range32(119894LLU,119964LLU,1LLU),_1b687a818_Range32(119966LLU,119967LLU,1LLU),_1b687a818_Range32(119970LLU,119973LLU,3LLU),_1b687a818_Range32(119974LLU,119977LLU,3LLU),_1b687a818_Range32(119978LLU,119980LLU,1LLU),_1b687a818_Range32(119982LLU,119993LLU,1LLU),_1b687a818_Range32(119995LLU,119997LLU,2LLU),_1b687a818_Range32(119998LLU,120003LLU,1LLU),_1b687a818_Range32(120005LLU,120069LLU,1LLU),_1b687a818_Range32(120071LLU,120074LLU,1LLU),_1b687a818_Range32(120077LLU,120084LLU,1LLU),_1b687a818_Range32(120086LLU,120092LLU,1LLU),_1b687a818_Range32(120094LLU,120121LLU,1LLU),_1b687a818_Range32(120123LLU,120126LLU,1LLU),_1b687a818_Range32(120128LLU,120132LLU,1LLU),_1b687a818_Range32(120134LLU,120138LLU,4LLU),_1b687a818_Range32(120139LLU,120144LLU,1LLU),_1b687a818_Range32(120146LLU,120485LLU,1LLU),_1b687a818_Range32(120488LLU,120512LLU,1LLU),_1b687a818_Range32(120514LLU,120538LLU,1LLU),_1b687a818_Range32(120540LLU,120570LLU,1LLU),_1b687a818_Range32(120572LLU,120596LLU,1LLU),_1b687a818_Range32(120598LLU,120628LLU,1LLU),_1b687a818_Range32(120630LLU,120654LLU,1LLU),_1b687a818_Range32(120656LLU,120686LLU,1LLU),_1b687a818_Range32(120688LLU,120712LLU,1LLU),_1b687a818_Range32(120714LLU,120744LLU,1LLU),_1b687a818_Range32(120746LLU,120770LLU,1LLU),_1b687a818_Range32(120772LLU,120779LLU,1LLU),_1b687a818_Range32(122624LLU,122654LLU,1LLU),_1b687a818_Range32(122661LLU,122666LLU,1LLU),_1b687a818_Range32(122928LLU,122989LLU,1LLU),_1b687a818_Range32(123136LLU,123180LLU,1LLU),_1b687a818_Range32(123191LLU,123197LLU,1LLU),_1b687a818_Range32(123214LLU,123536LLU,322LLU),_1b687a818_Range32(123537LLU,123565LLU,1LLU),_1b687a818_Range32(123584LLU,123627LLU,1LLU),_1b687a818_Range32(124112LLU,124139LLU,1LLU),_1b687a818_Range32(124896LLU,124902LLU,1LLU),_1b687a818_Range32(124904LLU,124907LLU,1LLU),_1b687a818_Range32(124909LLU,124910LLU,1LLU),_1b687a818_Range32(124912LLU,124926LLU,1LLU),_1b687a818_Range32(124928LLU,125124LLU,1LLU),_1b687a818_Range32(125184LLU,125251LLU,1LLU),_1b687a818_Range32(125259LLU,126464LLU,1205LLU),_1b687a818_Range32(126465LLU,126467LLU,1LLU),_1b687a818_Range32(126469LLU,126495LLU,1LLU),_1b687a818_Range32(126497LLU,126498LLU,1LLU),_1b687a818_Range32(126500LLU,126503LLU,3LLU),_1b687a818_Range32(126505LLU,126514LLU,1LLU),_1b687a818_Range32(126516LLU,126519LLU,1LLU),_1b687a818_Range32(126521LLU,126523LLU,2LLU),_1b687a818_Range32(126530LLU,126535LLU,5LLU),_1b687a818_Range32(126537LLU,126541LLU,2LLU),_1b687a818_Range32(126542LLU,126543LLU,1LLU),_1b687a818_Range32(126545LLU,126546LLU,1LLU),_1b687a818_Range32(126548LLU,126551LLU,3LLU),_1b687a818_Range32(126553LLU,126561LLU,2LLU),_1b687a818_Range32(126562LLU,126564LLU,2LLU),_1b687a818_Range32(126567LLU,126570LLU,1LLU),_1b687a818_Range32(126572LLU,126578LLU,1LLU),_1b687a818_Range32(126580LLU,126583LLU,1LLU),_1b687a818_Range32(126585LLU,126588LLU,1LLU),_1b687a818_Range32(126590LLU,126592LLU,2LLU),_1b687a818_Range32(126593LLU,126601LLU,1LLU),_1b687a818_Range32(126603LLU,126619LLU,1LLU),_1b687a818_Range32(126625LLU,126627LLU,1LLU),_1b687a818_Range32(126629LLU,126633LLU,1LLU),_1b687a818_Range32(126635LLU,126651LLU,1LLU),_1b687a818_Range32(131072LLU,173791LLU,1LLU),_1b687a818_Range32(173824LLU,177977LLU,1LLU),_1b687a818_Range32(177984LLU,178205LLU,1LLU),_1b687a818_Range32(178208LLU,183969LLU,1LLU),_1b687a818_Range32(183984LLU,191456LLU,1LLU),_1b687a818_Range32(194560LLU,195101LLU,1LLU),_1b687a818_Range32(196608LLU,201546LLU,1LLU),_1b687a818_Range32(201552LLU,205743LLU,1LLU)}),6LL));
	_211c58508_LETTER = _211c58508__L;
	_211c58508__PROPERTIES = jule::Array<jule::U8,256>({1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,144LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,130LLU,130LLU,136LLU,130LLU,130LLU,130LLU,130LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,132LLU,130LLU,130LLU,136LLU,136LLU,136LLU,130LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,130LLU,130LLU,130LLU,136LLU,130LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,130LLU,136LLU,130LLU,136LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,1LLU,16LLU,130LLU,136LLU,136LLU,136LLU,136LLU,136LLU,130LLU,136LLU,136LLU,224LLU,130LLU,136LLU,0LLU,136LLU,136LLU,136LLU,136LLU,132LLU,132LLU,136LLU,192LLU,130LLU,130LLU,136LLU,132LLU,224LLU,130LLU,132LLU,132LLU,132LLU,130LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,136LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,160LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,136LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU,192LLU});
	_1b687997c_FIRST = jule::Array<jule::U8,256>({240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,240LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,2LLU,19LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,3LLU,35LLU,3LLU,3LLU,52LLU,4LLU,4LLU,4LLU,68LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU,241LLU});
	_1b687997c_ACCEPT_RANGES = jule::Array<_1b687997c_accept_range,16>({_1b687997c_accept_range(128LLU,191LLU),_1b687997c_accept_range(160LLU,191LLU),_1b687997c_accept_range(128LLU,159LLU),_1b687997c_accept_range(144LLU,191LLU),_1b687997c_accept_range(128LLU,143LLU)});
	_1b697da81_CPP_HEADER_EXTS = jule::Array<jule::Str,4>({jule::Str(".h", 2),jule::Str(".hpp", 4),jule::Str(".hxx", 4),jule::Str(".hh", 3)});
	_1b697da81_CPP_EXTS = jule::Array<jule::Str,3>({jule::Str(".cpp", 4),jule::Str(".cc", 3),jule::Str(".cxx", 4)});
	_1b697da81_OBJECTIVE_CPP_EXTS = jule::Array<jule::Str,1>({jule::Str(".mm", 3)});
	_1b698aa8d_DISTOS = jule::Array<jule::Str,3>({jule::Str("windows", 7),jule::Str("linux", 5),jule::Str("darwin", 6)});
	_1b698aa8d_DISTARCH = jule::Array<jule::Str,3>({jule::Str("arm64", 5),jule::Str("amd64", 5),jule::Str("i386", 4)});
	_1b69ce708_PATH_STDLIB = jule::Str();
	_1b69ce708_PATH_EXEC = jule::Str();
	_1b69ce708_PATH_WD = jule::Str();
	_1b69ce708_PATH_API = jule::Str();
	_1b738619c_DE_BRUIJN32_TAB = jule::Array<jule::U8,32>({0LLU,1LLU,28LLU,2LLU,29LLU,14LLU,24LLU,3LLU,30LLU,22LLU,20LLU,15LLU,25LLU,17LLU,4LLU,8LLU,31LLU,27LLU,13LLU,23LLU,21LLU,19LLU,16LLU,7LLU,26LLU,12LLU,18LLU,6LLU,11LLU,5LLU,10LLU,9LLU});
	_1b738619c_DE_BRUIJN64_TAB = jule::Array<jule::U8,64>({0LLU,1LLU,56LLU,2LLU,57LLU,49LLU,28LLU,3LLU,61LLU,58LLU,42LLU,50LLU,38LLU,29LLU,17LLU,4LLU,62LLU,47LLU,59LLU,36LLU,45LLU,43LLU,51LLU,22LLU,53LLU,39LLU,33LLU,30LLU,24LLU,18LLU,12LLU,5LLU,63LLU,55LLU,48LLU,27LLU,60LLU,41LLU,37LLU,16LLU,46LLU,35LLU,44LLU,21LLU,52LLU,32LLU,23LLU,11LLU,54LLU,26LLU,40LLU,15LLU,34LLU,20LLU,31LLU,10LLU,25LLU,14LLU,19LLU,9LLU,13LLU,8LLU,7LLU,6LLU});
	_211ca7535_F32_INFO = _211ca7535_FloatInfo(23LLU,8LLU,-127LL);
	_211ca7535_F64_INFO = _211ca7535_FloatInfo(52LLU,11LLU,-1023LL);
	_211d62436_DETAILED_POWS_OF_TEN = jule::Array<jule::Array<jule::U64,2>,696>({jule::Array<jule::U64,2>({1671618768450675795LLU,18054884314459144840LLU}),jule::Array<jule::U64,2>({1044761730281672372LLU,11284302696536965525LLU}),jule::Array<jule::U64,2>({5917638181279478369LLU,14105378370671206906LLU}),jule::Array<jule::U64,2>({16620419763454123769LLU,17631722963339008632LLU}),jule::Array<jule::U64,2>({10387762352158827356LLU,11019826852086880395LLU}),jule::Array<jule::U64,2>({8373016921771146291LLU,13774783565108600494LLU}),jule::Array<jule::U64,2>({1242899115359157055LLU,17218479456385750618LLU}),jule::Array<jule::U64,2>({5388497965526861063LLU,10761549660241094136LLU}),jule::Array<jule::U64,2>({6735622456908576329LLU,13451937075301367670LLU}),jule::Array<jule::U64,2>({17642900107990496220LLU,16814921344126709587LLU}),jule::Array<jule::U64,2>({8720969558280366185LLU,10509325840079193492LLU}),jule::Array<jule::U64,2>({10901211947850457732LLU,13136657300098991865LLU}),jule::Array<jule::U64,2>({18238200953240460069LLU,16420821625123739831LLU}),jule::Array<jule::U64,2>({18316404623416369399LLU,10263013515702337394LLU}),jule::Array<jule::U64,2>({13672133742415685941LLU,12828766894627921743LLU}),jule::Array<jule::U64,2>({12478481159592219522LLU,16035958618284902179LLU}),jule::Array<jule::U64,2>({5493207715531443249LLU,10022474136428063862LLU}),jule::Array<jule::U64,2>({16089881681269079869LLU,12528092670535079827LLU}),jule::Array<jule::U64,2>({15500666083158961933LLU,15660115838168849784LLU}),jule::Array<jule::U64,2>({9687916301974351208LLU,9787572398855531115LLU}),jule::Array<jule::U64,2>({7498209359040551106LLU,12234465498569413894LLU}),jule::Array<jule::U64,2>({149389661945913074LLU,15293081873211767368LLU}),jule::Array<jule::U64,2>({93368538716195671LLU,9558176170757354605LLU}),jule::Array<jule::U64,2>({4728396691822632493LLU,11947720213446693256LLU}),jule::Array<jule::U64,2>({5910495864778290617LLU,14934650266808366570LLU}),jule::Array<jule::U64,2>({8305745933913819539LLU,9334156416755229106LLU}),jule::Array<jule::U64,2>({1158810380537498616LLU,11667695520944036383LLU}),jule::Array<jule::U64,2>({15283571030954036982LLU,14584619401180045478LLU}),jule::Array<jule::U64,2>({9881091751837770420LLU,18230774251475056848LLU}),jule::Array<jule::U64,2>({6175682344898606512LLU,11394233907171910530LLU}),jule::Array<jule::U64,2>({16942974967978033949LLU,14242792383964888162LLU}),jule::Array<jule::U64,2>({11955346673117766628LLU,17803490479956110203LLU}),jule::Array<jule::U64,2>({5166248661484910190LLU,11127181549972568877LLU}),jule::Array<jule::U64,2>({11069496845283525642LLU,13908976937465711096LLU}),jule::Array<jule::U64,2>({13836871056604407053LLU,17386221171832138870LLU}),jule::Array<jule::U64,2>({4036358391950366504LLU,10866388232395086794LLU}),jule::Array<jule::U64,2>({14268820026792733938LLU,13582985290493858492LLU}),jule::Array<jule::U64,2>({17836025033490917422LLU,16978731613117323115LLU}),jule::Array<jule::U64,2>({8841672636718129437LLU,10611707258198326947LLU}),jule::Array<jule::U64,2>({6440404777470273892LLU,13264634072747908684LLU}),jule::Array<jule::U64,2>({8050505971837842365LLU,16580792590934885855LLU}),jule::Array<jule::U64,2>({11949095260039733334LLU,10362995369334303659LLU}),jule::Array<jule::U64,2>({10324683056622278764LLU,12953744211667879574LLU}),jule::Array<jule::U64,2>({3682481783923072647LLU,16192180264584849468LLU}),jule::Array<jule::U64,2>({11524923151806696212LLU,10120112665365530917LLU}),jule::Array<jule::U64,2>({571095884476206553LLU,12650140831706913647LLU}),jule::Array<jule::U64,2>({14548927910877421904LLU,15812676039633642058LLU}),jule::Array<jule::U64,2>({13704765962725776594LLU,9882922524771026286LLU}),jule::Array<jule::U64,2>({7907585416552444934LLU,12353653155963782858LLU}),jule::Array<jule::U64,2>({661109733835780360LLU,15442066444954728573LLU}),jule::Array<jule::U64,2>({2719036592861056677LLU,9651291528096705358LLU}),jule::Array<jule::U64,2>({12622167777931096654LLU,12064114410120881697LLU}),jule::Array<jule::U64,2>({1942651667131707105LLU,15080143012651102122LLU}),jule::Array<jule::U64,2>({5825843310384704845LLU,9425089382906938826LLU}),jule::Array<jule::U64,2>({16505676174835656864LLU,11781361728633673532LLU}),jule::Array<jule::U64,2>({2185351144835019464LLU,14726702160792091916LLU}),jule::Array<jule::U64,2>({2731688931043774330LLU,18408377700990114895LLU}),jule::Array<jule::U64,2>({8624834609543440812LLU,11505236063118821809LLU}),jule::Array<jule::U64,2>({15392729280356688919LLU,14381545078898527261LLU}),jule::Array<jule::U64,2>({5405853545163697437LLU,17976931348623159077LLU}),jule::Array<jule::U64,2>({5684501474941004850LLU,11235582092889474423LLU}),jule::Array<jule::U64,2>({2493940825248868159LLU,14044477616111843029LLU}),jule::Array<jule::U64,2>({7729112049988473103LLU,17555597020139803786LLU}),jule::Array<jule::U64,2>({9442381049670183593LLU,10972248137587377366LLU}),jule::Array<jule::U64,2>({2579604275232953683LLU,13715310171984221708LLU}),jule::Array<jule::U64,2>({3224505344041192104LLU,17144137714980277135LLU}),jule::Array<jule::U64,2>({8932844867666826921LLU,10715086071862673209LLU}),jule::Array<jule::U64,2>({15777742103010921555LLU,13393857589828341511LLU}),jule::Array<jule::U64,2>({15110491610336264040LLU,16742321987285426889LLU}),jule::Array<jule::U64,2>({2526528228819083169LLU,10463951242053391806LLU}),jule::Array<jule::U64,2>({12381532322878629770LLU,13079939052566739757LLU}),jule::Array<jule::U64,2>({1641857348316123500LLU,16349923815708424697LLU}),jule::Array<jule::U64,2>({12555375888766046947LLU,10218702384817765435LLU}),jule::Array<jule::U64,2>({11082533842530170780LLU,12773377981022206794LLU}),jule::Array<jule::U64,2>({4629795266307937667LLU,15966722476277758493LLU}),jule::Array<jule::U64,2>({5199465050656154994LLU,9979201547673599058LLU}),jule::Array<jule::U64,2>({15722703350174969551LLU,12474001934591998822LLU}),jule::Array<jule::U64,2>({10430007150863936130LLU,15592502418239998528LLU}),jule::Array<jule::U64,2>({6518754469289960081LLU,9745314011399999080LLU}),jule::Array<jule::U64,2>({8148443086612450102LLU,12181642514249998850LLU}),jule::Array<jule::U64,2>({962181821410786819LLU,15227053142812498563LLU}),jule::Array<jule::U64,2>({16742264702877599426LLU,9516908214257811601LLU}),jule::Array<jule::U64,2>({7092772823314835570LLU,11896135267822264502LLU}),jule::Array<jule::U64,2>({18089338065998320271LLU,14870169084777830627LLU}),jule::Array<jule::U64,2>({8999993282035256217LLU,9293855677986144142LLU}),jule::Array<jule::U64,2>({2026619565689294464LLU,11617319597482680178LLU}),jule::Array<jule::U64,2>({11756646493966393888LLU,14521649496853350222LLU}),jule::Array<jule::U64,2>({5472436080603216552LLU,18152061871066687778LLU}),jule::Array<jule::U64,2>({8031958568804398249LLU,11345038669416679861LLU}),jule::Array<jule::U64,2>({14651634229432885715LLU,14181298336770849826LLU}),jule::Array<jule::U64,2>({9091170749936331336LLU,17726622920963562283LLU}),jule::Array<jule::U64,2>({3376138709496513133LLU,11079139325602226427LLU}),jule::Array<jule::U64,2>({18055231442152805128LLU,13848924157002783033LLU}),jule::Array<jule::U64,2>({8733981247408842698LLU,17311155196253478792LLU}),jule::Array<jule::U64,2>({5458738279630526686LLU,10819471997658424245LLU}),jule::Array<jule::U64,2>({11435108867965546262LLU,13524339997073030306LLU}),jule::Array<jule::U64,2>({5070514048102157020LLU,16905424996341287883LLU}),jule::Array<jule::U64,2>({863228270850154185LLU,10565890622713304927LLU}),jule::Array<jule::U64,2>({14914093393844856443LLU,13207363278391631158LLU}),jule::Array<jule::U64,2>({9419244705451294746LLU,16509204097989538948LLU}),jule::Array<jule::U64,2>({15110399977761835024LLU,10318252561243461842LLU}),jule::Array<jule::U64,2>({9664627935347517973LLU,12897815701554327303LLU}),jule::Array<jule::U64,2>({7469098900757009562LLU,16122269626942909129LLU}),jule::Array<jule::U64,2>({16197401859041600736LLU,10076418516839318205LLU}),jule::Array<jule::U64,2>({6411694268519837208LLU,12595523146049147757LLU}),jule::Array<jule::U64,2>({12626303854077184414LLU,15744403932561434696LLU}),jule::Array<jule::U64,2>({7891439908798240259LLU,9840252457850896685LLU}),jule::Array<jule::U64,2>({14475985904425188227LLU,12300315572313620856LLU}),jule::Array<jule::U64,2>({18094982380531485284LLU,15375394465392026070LLU}),jule::Array<jule::U64,2>({6697677969404790399LLU,9609621540870016294LLU}),jule::Array<jule::U64,2>({17595469498610763806LLU,12012026926087520367LLU}),jule::Array<jule::U64,2>({17382650854836066854LLU,15015033657609400459LLU}),jule::Array<jule::U64,2>({8558313775058847832LLU,9384396036005875287LLU}),jule::Array<jule::U64,2>({6086206200396171886LLU,11730495045007344109LLU}),jule::Array<jule::U64,2>({12219443768922602761LLU,14663118806259180136LLU}),jule::Array<jule::U64,2>({15274304711153253452LLU,18328898507823975170LLU}),jule::Array<jule::U64,2>({14158126462898171311LLU,11455561567389984481LLU}),jule::Array<jule::U64,2>({3862600023340550427LLU,14319451959237480602LLU}),jule::Array<jule::U64,2>({14051622066030463842LLU,17899314949046850752LLU}),jule::Array<jule::U64,2>({8782263791269039901LLU,11187071843154281720LLU}),jule::Array<jule::U64,2>({10977829739086299876LLU,13983839803942852150LLU}),jule::Array<jule::U64,2>({4498915137003099037LLU,17479799754928565188LLU}),jule::Array<jule::U64,2>({12035193997481712706LLU,10924874846830353242LLU}),jule::Array<jule::U64,2>({5820620459997365075LLU,13656093558537941553LLU}),jule::Array<jule::U64,2>({11887461593424094248LLU,17070116948172426941LLU}),jule::Array<jule::U64,2>({9735506505103752857LLU,10668823092607766838LLU}),jule::Array<jule::U64,2>({2946011094524915263LLU,13336028865759708548LLU}),jule::Array<jule::U64,2>({3682513868156144079LLU,16670036082199635685LLU}),jule::Array<jule::U64,2>({4607414176811284001LLU,10418772551374772303LLU}),jule::Array<jule::U64,2>({1147581702586717097LLU,13023465689218465379LLU}),jule::Array<jule::U64,2>({15269535183515560084LLU,16279332111523081723LLU}),jule::Array<jule::U64,2>({7237616480483531100LLU,10174582569701926077LLU}),jule::Array<jule::U64,2>({13658706619031801779LLU,12718228212127407596LLU}),jule::Array<jule::U64,2>({17073383273789752224LLU,15897785265159259495LLU}),jule::Array<jule::U64,2>({17588393573759676996LLU,9936115790724537184LLU}),jule::Array<jule::U64,2>({3538747893490044629LLU,12420144738405671481LLU}),jule::Array<jule::U64,2>({9035120885289943691LLU,15525180923007089351LLU}),jule::Array<jule::U64,2>({12564479580947296663LLU,9703238076879430844LLU}),jule::Array<jule::U64,2>({15705599476184120828LLU,12129047596099288555LLU}),jule::Array<jule::U64,2>({15020313326802763131LLU,15161309495124110694LLU}),jule::Array<jule::U64,2>({4776009810824339053LLU,9475818434452569184LLU}),jule::Array<jule::U64,2>({5970012263530423816LLU,11844773043065711480LLU}),jule::Array<jule::U64,2>({7462515329413029771LLU,14805966303832139350LLU}),jule::Array<jule::U64,2>({52386062455755702LLU,9253728939895087094LLU}),jule::Array<jule::U64,2>({9288854614924470436LLU,11567161174868858867LLU}),jule::Array<jule::U64,2>({6999382250228200141LLU,14458951468586073584LLU}),jule::Array<jule::U64,2>({8749227812785250177LLU,18073689335732591980LLU}),jule::Array<jule::U64,2>({14691639419845557168LLU,11296055834832869987LLU}),jule::Array<jule::U64,2>({13752863256379558556LLU,14120069793541087484LLU}),jule::Array<jule::U64,2>({17191079070474448196LLU,17650087241926359355LLU}),jule::Array<jule::U64,2>({8438581409832836170LLU,11031304526203974597LLU}),jule::Array<jule::U64,2>({15159912780718433117LLU,13789130657754968246LLU}),jule::Array<jule::U64,2>({9726518939043265588LLU,17236413322193710308LLU}),jule::Array<jule::U64,2>({15302446373756816800LLU,10772758326371068942LLU}),jule::Array<jule::U64,2>({9904685930341245193LLU,13465947907963836178LLU}),jule::Array<jule::U64,2>({3157485376071780683LLU,16832434884954795223LLU}),jule::Array<jule::U64,2>({8890957387685944783LLU,10520271803096747014LLU}),jule::Array<jule::U64,2>({1890324697752655170LLU,13150339753870933768LLU}),jule::Array<jule::U64,2>({2362905872190818963LLU,16437924692338667210LLU}),jule::Array<jule::U64,2>({6088502188546649756LLU,10273702932711667006LLU}),jule::Array<jule::U64,2>({16833999772538088003LLU,12842128665889583757LLU}),jule::Array<jule::U64,2>({7207441660390446292LLU,16052660832361979697LLU}),jule::Array<jule::U64,2>({16033866083812498692LLU,10032913020226237310LLU}),jule::Array<jule::U64,2>({10818960567910847557LLU,12541141275282796638LLU}),jule::Array<jule::U64,2>({4300328673033783639LLU,15676426594103495798LLU}),jule::Array<jule::U64,2>({16522763475928278486LLU,9797766621314684873LLU}),jule::Array<jule::U64,2>({6818396289628184396LLU,12247208276643356092LLU}),jule::Array<jule::U64,2>({8522995362035230495LLU,15309010345804195115LLU}),jule::Array<jule::U64,2>({3021029092058325107LLU,9568131466127621947LLU}),jule::Array<jule::U64,2>({17611344420355070096LLU,11960164332659527433LLU}),jule::Array<jule::U64,2>({8179122470161673908LLU,14950205415824409292LLU}),jule::Array<jule::U64,2>({14335323580705822000LLU,9343878384890255807LLU}),jule::Array<jule::U64,2>({13307468457454889596LLU,11679847981112819759LLU}),jule::Array<jule::U64,2>({12022649553391224092LLU,14599809976391024699LLU}),jule::Array<jule::U64,2>({10416625923311642211LLU,18249762470488780874LLU}),jule::Array<jule::U64,2>({11122077220497164286LLU,11406101544055488046LLU}),jule::Array<jule::U64,2>({4679224488766679549LLU,14257626930069360058LLU}),jule::Array<jule::U64,2>({15072402647813125244LLU,17822033662586700072LLU}),jule::Array<jule::U64,2>({9420251654883203278LLU,11138771039116687545LLU}),jule::Array<jule::U64,2>({16387000587031392001LLU,13923463798895859431LLU}),jule::Array<jule::U64,2>({15872064715361852097LLU,17404329748619824289LLU}),jule::Array<jule::U64,2>({3002511419460075705LLU,10877706092887390181LLU}),jule::Array<jule::U64,2>({8364825292752482535LLU,13597132616109237726LLU}),jule::Array<jule::U64,2>({1232659579085827361LLU,16996415770136547158LLU}),jule::Array<jule::U64,2>({14605470292210805812LLU,10622759856335341973LLU}),jule::Array<jule::U64,2>({4421779809981343554LLU,13278449820419177467LLU}),jule::Array<jule::U64,2>({915538744049291538LLU,16598062275523971834LLU}),jule::Array<jule::U64,2>({5183897733458195115LLU,10373788922202482396LLU}),jule::Array<jule::U64,2>({6479872166822743894LLU,12967236152753102995LLU}),jule::Array<jule::U64,2>({3488154190101041964LLU,16209045190941378744LLU}),jule::Array<jule::U64,2>({2180096368813151227LLU,10130653244338361715LLU}),jule::Array<jule::U64,2>({16560178516298602746LLU,12663316555422952143LLU}),jule::Array<jule::U64,2>({16088537126945865529LLU,15829145694278690179LLU}),jule::Array<jule::U64,2>({7749492695127472003LLU,9893216058924181362LLU}),jule::Array<jule::U64,2>({463493832054564196LLU,12366520073655226703LLU}),jule::Array<jule::U64,2>({14414425345350368957LLU,15458150092069033378LLU}),jule::Array<jule::U64,2>({13620701859271368502LLU,9661343807543145861LLU}),jule::Array<jule::U64,2>({3190819268807046916LLU,12076679759428932327LLU}),jule::Array<jule::U64,2>({17823582141290972357LLU,15095849699286165408LLU}),jule::Array<jule::U64,2>({11139738838306857723LLU,9434906062053853380LLU}),jule::Array<jule::U64,2>({13924673547883572154LLU,11793632577567316725LLU}),jule::Array<jule::U64,2>({3570783879572301480LLU,14742040721959145907LLU}),jule::Array<jule::U64,2>({18298537904747540562LLU,18427550902448932383LLU}),jule::Array<jule::U64,2>({18354115218108294707LLU,11517219314030582739LLU}),jule::Array<jule::U64,2>({18330958004207980480LLU,14396524142538228424LLU}),jule::Array<jule::U64,2>({4466953431550423984LLU,17995655178172785531LLU}),jule::Array<jule::U64,2>({486002885505321038LLU,11247284486357990957LLU}),jule::Array<jule::U64,2>({5219189625309039202LLU,14059105607947488696LLU}),jule::Array<jule::U64,2>({6523987031636299002LLU,17573882009934360870LLU}),jule::Array<jule::U64,2>({17912549950054850588LLU,10983676256208975543LLU}),jule::Array<jule::U64,2>({17779001419141175331LLU,13729595320261219429LLU}),jule::Array<jule::U64,2>({8388693718644305452LLU,17161994150326524287LLU}),jule::Array<jule::U64,2>({12160462601793772764LLU,10726246343954077679LLU}),jule::Array<jule::U64,2>({10588892233814828051LLU,13407807929942597099LLU}),jule::Array<jule::U64,2>({8624429273841147159LLU,16759759912428246374LLU}),jule::Array<jule::U64,2>({778582277723329070LLU,10474849945267653984LLU}),jule::Array<jule::U64,2>({973227847154161338LLU,13093562431584567480LLU}),jule::Array<jule::U64,2>({1216534808942701673LLU,16366953039480709350LLU}),jule::Array<jule::U64,2>({14595392310871352257LLU,10229345649675443343LLU}),jule::Array<jule::U64,2>({13632554370161802418LLU,12786682062094304179LLU}),jule::Array<jule::U64,2>({12429006944274865118LLU,15983352577617880224LLU}),jule::Array<jule::U64,2>({7768129340171790699LLU,9989595361011175140LLU}),jule::Array<jule::U64,2>({9710161675214738374LLU,12486994201263968925LLU}),jule::Array<jule::U64,2>({16749388112445810871LLU,15608742751579961156LLU}),jule::Array<jule::U64,2>({1244995533423855986LLU,9755464219737475723LLU}),jule::Array<jule::U64,2>({15391302472061983695LLU,12194330274671844653LLU}),jule::Array<jule::U64,2>({5404070034795315907LLU,15242912843339805817LLU}),jule::Array<jule::U64,2>({14906758817815542202LLU,9526820527087378635LLU}),jule::Array<jule::U64,2>({14021762503842039848LLU,11908525658859223294LLU}),jule::Array<jule::U64,2>({8303831092947774002LLU,14885657073574029118LLU}),jule::Array<jule::U64,2>({578208414664970847LLU,9303535670983768199LLU}),jule::Array<jule::U64,2>({14557818573613377271LLU,11629419588729710248LLU}),jule::Array<jule::U64,2>({18197273217016721589LLU,14536774485912137810LLU}),jule::Array<jule::U64,2>({13523219484416126178LLU,18170968107390172263LLU}),jule::Array<jule::U64,2>({15369541205401160717LLU,11356855067118857664LLU}),jule::Array<jule::U64,2>({765182433041899281LLU,14196068833898572081LLU}),jule::Array<jule::U64,2>({5568164059729762005LLU,17745086042373215101LLU}),jule::Array<jule::U64,2>({5785945546544795205LLU,11090678776483259438LLU}),jule::Array<jule::U64,2>({16455803970035769814LLU,13863348470604074297LLU}),jule::Array<jule::U64,2>({6734696907262548556LLU,17329185588255092872LLU}),jule::Array<jule::U64,2>({4209185567039092847LLU,10830740992659433045LLU}),jule::Array<jule::U64,2>({9873167977226253963LLU,13538426240824291306LLU}),jule::Array<jule::U64,2>({3118087934678041646LLU,16923032801030364133LLU}),jule::Array<jule::U64,2>({4254647968387469981LLU,10576895500643977583LLU}),jule::Array<jule::U64,2>({706623942056949572LLU,13221119375804971979LLU}),jule::Array<jule::U64,2>({14718337982853350677LLU,16526399219756214973LLU}),jule::Array<jule::U64,2>({11504804248497038125LLU,10328999512347634358LLU}),jule::Array<jule::U64,2>({5157633273766521849LLU,12911249390434542948LLU}),jule::Array<jule::U64,2>({6447041592208152311LLU,16139061738043178685LLU}),jule::Array<jule::U64,2>({6335244004343789146LLU,10086913586276986678LLU}),jule::Array<jule::U64,2>({17142427042284512241LLU,12608641982846233347LLU}),jule::Array<jule::U64,2>({16816347784428252397LLU,15760802478557791684LLU}),jule::Array<jule::U64,2>({1286845328412881940LLU,9850501549098619803LLU}),jule::Array<jule::U64,2>({15443614715798266137LLU,12313126936373274753LLU}),jule::Array<jule::U64,2>({5469460339465668959LLU,15391408670466593442LLU}),jule::Array<jule::U64,2>({8030098730593431003LLU,9619630419041620901LLU}),jule::Array<jule::U64,2>({14649309431669176658LLU,12024538023802026126LLU}),jule::Array<jule::U64,2>({9088264752731695015LLU,15030672529752532658LLU}),jule::Array<jule::U64,2>({10291851488884697288LLU,9394170331095332911LLU}),jule::Array<jule::U64,2>({8253128342678483706LLU,11742712913869166139LLU}),jule::Array<jule::U64,2>({5704724409920716729LLU,14678391142336457674LLU}),jule::Array<jule::U64,2>({16354277549255671720LLU,18347988927920572092LLU}),jule::Array<jule::U64,2>({998051431430019017LLU,11467493079950357558LLU}),jule::Array<jule::U64,2>({10470936326142299579LLU,14334366349937946947LLU}),jule::Array<jule::U64,2>({8476984389250486570LLU,17917957937422433684LLU}),jule::Array<jule::U64,2>({14521487280136329914LLU,11198723710889021052LLU}),jule::Array<jule::U64,2>({18151859100170412392LLU,13998404638611276315LLU}),jule::Array<jule::U64,2>({18078137856785627587LLU,17498005798264095394LLU}),jule::Array<jule::U64,2>({15910522178918405146LLU,10936253623915059621LLU}),jule::Array<jule::U64,2>({6053094668365842720LLU,13670317029893824527LLU}),jule::Array<jule::U64,2>({2954682317029915496LLU,17087896287367280659LLU}),jule::Array<jule::U64,2>({17987577512639554849LLU,10679935179604550411LLU}),jule::Array<jule::U64,2>({17872785872372055657LLU,13349918974505688014LLU}),jule::Array<jule::U64,2>({13117610303610293764LLU,16687398718132110018LLU}),jule::Array<jule::U64,2>({12810192458183821506LLU,10429624198832568761LLU}),jule::Array<jule::U64,2>({2177682517447613171LLU,13037030248540710952LLU}),jule::Array<jule::U64,2>({2722103146809516464LLU,16296287810675888690LLU}),jule::Array<jule::U64,2>({6313000485183335694LLU,10185179881672430431LLU}),jule::Array<jule::U64,2>({3279564588051781713LLU,12731474852090538039LLU}),jule::Array<jule::U64,2>({17934513790346890853LLU,15914343565113172548LLU}),jule::Array<jule::U64,2>({1985699082112030975LLU,9946464728195732843LLU}),jule::Array<jule::U64,2>({16317181907922202431LLU,12433080910244666053LLU}),jule::Array<jule::U64,2>({6561419329620589327LLU,15541351137805832567LLU}),jule::Array<jule::U64,2>({11018416108653950185LLU,9713344461128645354LLU}),jule::Array<jule::U64,2>({4549648098962661924LLU,12141680576410806693LLU}),jule::Array<jule::U64,2>({10298746142130715309LLU,15177100720513508366LLU}),jule::Array<jule::U64,2>({1825030320404309164LLU,9485687950320942729LLU}),jule::Array<jule::U64,2>({6892973918932774359LLU,11857109937901178411LLU}),jule::Array<jule::U64,2>({4004531380238580045LLU,14821387422376473014LLU}),jule::Array<jule::U64,2>({16337890167931276240LLU,9263367138985295633LLU}),jule::Array<jule::U64,2>({6587304654631931588LLU,11579208923731619542LLU}),jule::Array<jule::U64,2>({17457502855144690293LLU,14474011154664524427LLU}),jule::Array<jule::U64,2>({17210192550503474962LLU,18092513943330655534LLU}),jule::Array<jule::U64,2>({6144684325637283947LLU,11307821214581659709LLU}),jule::Array<jule::U64,2>({12292541425473992838LLU,14134776518227074636LLU}),jule::Array<jule::U64,2>({15365676781842491048LLU,17668470647783843295LLU}),jule::Array<jule::U64,2>({16521077016292638761LLU,11042794154864902059LLU}),jule::Array<jule::U64,2>({16039660251938410547LLU,13803492693581127574LLU}),jule::Array<jule::U64,2>({10826203278068237376LLU,17254365866976409468LLU}),jule::Array<jule::U64,2>({15989749085647424168LLU,10783978666860255917LLU}),jule::Array<jule::U64,2>({6152128301777116498LLU,13479973333575319897LLU}),jule::Array<jule::U64,2>({12301846395648783526LLU,16849966666969149871LLU}),jule::Array<jule::U64,2>({14606183024921571560LLU,10531229166855718669LLU}),jule::Array<jule::U64,2>({4422670725869800738LLU,13164036458569648337LLU}),jule::Array<jule::U64,2>({10140024425764638826LLU,16455045573212060421LLU}),jule::Array<jule::U64,2>({8643358275316593218LLU,10284403483257537763LLU}),jule::Array<jule::U64,2>({6192511825718353619LLU,12855504354071922204LLU}),jule::Array<jule::U64,2>({7740639782147942024LLU,16069380442589902755LLU}),jule::Array<jule::U64,2>({2532056854628769813LLU,10043362776618689222LLU}),jule::Array<jule::U64,2>({12388443105140738074LLU,12554203470773361527LLU}),jule::Array<jule::U64,2>({10873867862998534689LLU,15692754338466701909LLU}),jule::Array<jule::U64,2>({9102010423587778132LLU,9807971461541688693LLU}),jule::Array<jule::U64,2>({15989199047912110569LLU,12259964326927110866LLU}),jule::Array<jule::U64,2>({10763126773035362404LLU,15324955408658888583LLU}),jule::Array<jule::U64,2>({13644483260788183358LLU,9578097130411805364LLU}),jule::Array<jule::U64,2>({17055604075985229198LLU,11972621413014756705LLU}),jule::Array<jule::U64,2>({7484447039699372786LLU,14965776766268445882LLU}),jule::Array<jule::U64,2>({9289465418239495895LLU,9353610478917778676LLU}),jule::Array<jule::U64,2>({11611831772799369869LLU,11692013098647223345LLU}),jule::Array<jule::U64,2>({679731660717048624LLU,14615016373309029182LLU}),jule::Array<jule::U64,2>({10073036612751086588LLU,18268770466636286477LLU}),jule::Array<jule::U64,2>({8601490892183123069LLU,11417981541647679048LLU}),jule::Array<jule::U64,2>({10751863615228903837LLU,14272476927059598810LLU}),jule::Array<jule::U64,2>({4216457482181353988LLU,17840596158824498513LLU}),jule::Array<jule::U64,2>({14164500972431816002LLU,11150372599265311570LLU}),jule::Array<jule::U64,2>({8482254178684994195LLU,13937965749081639463LLU}),jule::Array<jule::U64,2>({5991131704928854840LLU,17422457186352049329LLU}),jule::Array<jule::U64,2>({15273672361649004035LLU,10889035741470030830LLU}),jule::Array<jule::U64,2>({9868718415206479236LLU,13611294676837538538LLU}),jule::Array<jule::U64,2>({3112525982153323237LLU,17014118346046923173LLU}),jule::Array<jule::U64,2>({4251171748059520975LLU,10633823966279326983LLU}),jule::Array<jule::U64,2>({702278666647013314LLU,13292279957849158729LLU}),jule::Array<jule::U64,2>({5489534351736154547LLU,16615349947311448411LLU}),jule::Array<jule::U64,2>({1125115960621402640LLU,10384593717069655257LLU}),jule::Array<jule::U64,2>({6018080969204141204LLU,12980742146337069071LLU}),jule::Array<jule::U64,2>({2910915193077788601LLU,16225927682921336339LLU}),jule::Array<jule::U64,2>({17960223060169475539LLU,10141204801825835211LLU}),jule::Array<jule::U64,2>({17838592806784456520LLU,12676506002282294014LLU}),jule::Array<jule::U64,2>({13074868971625794843LLU,15845632502852867518LLU}),jule::Array<jule::U64,2>({3560107088838733872LLU,9903520314283042199LLU}),jule::Array<jule::U64,2>({18285191916330581053LLU,12379400392853802748LLU}),jule::Array<jule::U64,2>({4409745821703674700LLU,15474250491067253436LLU}),jule::Array<jule::U64,2>({11979463175419572495LLU,9671406556917033397LLU}),jule::Array<jule::U64,2>({1139270913992301907LLU,12089258196146291747LLU}),jule::Array<jule::U64,2>({15259146697772541096LLU,15111572745182864683LLU}),jule::Array<jule::U64,2>({7231123676894144233LLU,9444732965739290427LLU}),jule::Array<jule::U64,2>({4427218577690292387LLU,11805916207174113034LLU}),jule::Array<jule::U64,2>({14757395258967641292LLU,14757395258967641292LLU}),jule::Array<jule::U64,2>({0LLU,9223372036854775808LLU}),jule::Array<jule::U64,2>({0LLU,11529215046068469760LLU}),jule::Array<jule::U64,2>({0LLU,14411518807585587200LLU}),jule::Array<jule::U64,2>({0LLU,18014398509481984000LLU}),jule::Array<jule::U64,2>({0LLU,11258999068426240000LLU}),jule::Array<jule::U64,2>({0LLU,14073748835532800000LLU}),jule::Array<jule::U64,2>({0LLU,17592186044416000000LLU}),jule::Array<jule::U64,2>({0LLU,10995116277760000000LLU}),jule::Array<jule::U64,2>({0LLU,13743895347200000000LLU}),jule::Array<jule::U64,2>({0LLU,17179869184000000000LLU}),jule::Array<jule::U64,2>({0LLU,10737418240000000000LLU}),jule::Array<jule::U64,2>({0LLU,13421772800000000000LLU}),jule::Array<jule::U64,2>({0LLU,16777216000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10485760000000000000LLU}),jule::Array<jule::U64,2>({0LLU,13107200000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16384000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10240000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12800000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,16000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,10000000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12500000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,15625000000000000000LLU}),jule::Array<jule::U64,2>({0LLU,9765625000000000000LLU}),jule::Array<jule::U64,2>({0LLU,12207031250000000000LLU}),jule::Array<jule::U64,2>({0LLU,15258789062500000000LLU}),jule::Array<jule::U64,2>({0LLU,9536743164062500000LLU}),jule::Array<jule::U64,2>({0LLU,11920928955078125000LLU}),jule::Array<jule::U64,2>({0LLU,14901161193847656250LLU}),jule::Array<jule::U64,2>({4611686018427387904LLU,9313225746154785156LLU}),jule::Array<jule::U64,2>({5764607523034234880LLU,11641532182693481445LLU}),jule::Array<jule::U64,2>({11817445422220181504LLU,14551915228366851806LLU}),jule::Array<jule::U64,2>({5548434740920451072LLU,18189894035458564758LLU}),jule::Array<jule::U64,2>({17302829768357445632LLU,11368683772161602973LLU}),jule::Array<jule::U64,2>({7793479155164643328LLU,14210854715202003717LLU}),jule::Array<jule::U64,2>({14353534962383192064LLU,17763568394002504646LLU}),jule::Array<jule::U64,2>({4359273333062107136LLU,11102230246251565404LLU}),jule::Array<jule::U64,2>({5449091666327633920LLU,13877787807814456755LLU}),jule::Array<jule::U64,2>({2199678564482154496LLU,17347234759768070944LLU}),jule::Array<jule::U64,2>({1374799102801346560LLU,10842021724855044340LLU}),jule::Array<jule::U64,2>({1718498878501683200LLU,13552527156068805425LLU}),jule::Array<jule::U64,2>({6759809616554491904LLU,16940658945086006781LLU}),jule::Array<jule::U64,2>({6530724019560251392LLU,10587911840678754238LLU}),jule::Array<jule::U64,2>({17386777061305090048LLU,13234889800848442797LLU}),jule::Array<jule::U64,2>({7898413271349198848LLU,16543612251060553497LLU}),jule::Array<jule::U64,2>({16465723340661719040LLU,10339757656912845935LLU}),jule::Array<jule::U64,2>({15970468157399760896LLU,12924697071141057419LLU}),jule::Array<jule::U64,2>({15351399178322313216LLU,16155871338926321774LLU}),jule::Array<jule::U64,2>({4982938468024057856LLU,10097419586828951109LLU}),jule::Array<jule::U64,2>({10840359103457460224LLU,12621774483536188886LLU}),jule::Array<jule::U64,2>({4327076842467049472LLU,15777218104420236108LLU}),jule::Array<jule::U64,2>({11927795063396681728LLU,9860761315262647567LLU}),jule::Array<jule::U64,2>({10298057810818464256LLU,12325951644078309459LLU}),jule::Array<jule::U64,2>({8260886245095692416LLU,15407439555097886824LLU}),jule::Array<jule::U64,2>({5163053903184807760LLU,9629649721936179265LLU}),jule::Array<jule::U64,2>({11065503397408397604LLU,12037062152420224081LLU}),jule::Array<jule::U64,2>({18443565265187884909LLU,15046327690525280101LLU}),jule::Array<jule::U64,2>({13833071299956122020LLU,9403954806578300063LLU}),jule::Array<jule::U64,2>({12679653106517764621LLU,11754943508222875079LLU}),jule::Array<jule::U64,2>({11237880364719817872LLU,14693679385278593849LLU}),jule::Array<jule::U64,2>({212292400617608628LLU,18367099231598242312LLU}),jule::Array<jule::U64,2>({132682750386005392LLU,11479437019748901445LLU}),jule::Array<jule::U64,2>({4777539456409894645LLU,14349296274686126806LLU}),jule::Array<jule::U64,2>({15195296357367144114LLU,17936620343357658507LLU}),jule::Array<jule::U64,2>({7191217214140771119LLU,11210387714598536567LLU}),jule::Array<jule::U64,2>({4377335499248575995LLU,14012984643248170709LLU}),jule::Array<jule::U64,2>({10083355392488107898LLU,17516230804060213386LLU}),jule::Array<jule::U64,2>({10913783138732455340LLU,10947644252537633366LLU}),jule::Array<jule::U64,2>({4418856886560793367LLU,13684555315672041708LLU}),jule::Array<jule::U64,2>({5523571108200991709LLU,17105694144590052135LLU}),jule::Array<jule::U64,2>({10369760970266701674LLU,10691058840368782584LLU}),jule::Array<jule::U64,2>({12962201212833377092LLU,13363823550460978230LLU}),jule::Array<jule::U64,2>({6979379479186945558LLU,16704779438076222788LLU}),jule::Array<jule::U64,2>({13585484211346616781LLU,10440487148797639242LLU}),jule::Array<jule::U64,2>({7758483227328495169LLU,13050608935997049053LLU}),jule::Array<jule::U64,2>({14309790052588006865LLU,16313261169996311316LLU}),jule::Array<jule::U64,2>({18166990819722280098LLU,10195788231247694572LLU}),jule::Array<jule::U64,2>({4261994450943298507LLU,12744735289059618216LLU}),jule::Array<jule::U64,2>({5327493063679123134LLU,15930919111324522770LLU}),jule::Array<jule::U64,2>({7941369183226839863LLU,9956824444577826731LLU}),jule::Array<jule::U64,2>({5315025460606161924LLU,12446030555722283414LLU}),jule::Array<jule::U64,2>({15867153862612478214LLU,15557538194652854267LLU}),jule::Array<jule::U64,2>({7611128154919104931LLU,9723461371658033917LLU}),jule::Array<jule::U64,2>({14125596212076269068LLU,12154326714572542396LLU}),jule::Array<jule::U64,2>({17656995265095336336LLU,15192908393215677995LLU}),jule::Array<jule::U64,2>({8729779031470891258LLU,9495567745759798747LLU}),jule::Array<jule::U64,2>({6300537770911226168LLU,11869459682199748434LLU}),jule::Array<jule::U64,2>({17099044250493808518LLU,14836824602749685542LLU}),jule::Array<jule::U64,2>({6075216638131242420LLU,9273015376718553464LLU}),jule::Array<jule::U64,2>({7594020797664053025LLU,11591269220898191830LLU}),jule::Array<jule::U64,2>({269153960225290473LLU,14489086526122739788LLU}),jule::Array<jule::U64,2>({336442450281613091LLU,18111358157653424735LLU}),jule::Array<jule::U64,2>({7127805559067090038LLU,11319598848533390459LLU}),jule::Array<jule::U64,2>({4298070930406474644LLU,14149498560666738074LLU}),jule::Array<jule::U64,2>({14595960699862869113LLU,17686873200833422592LLU}),jule::Array<jule::U64,2>({9122475437414293195LLU,11054295750520889120LLU}),jule::Array<jule::U64,2>({11403094296767866494LLU,13817869688151111400LLU}),jule::Array<jule::U64,2>({14253867870959833118LLU,17272337110188889250LLU}),jule::Array<jule::U64,2>({13520353437777283602LLU,10795210693868055781LLU}),jule::Array<jule::U64,2>({3065383741939440791LLU,13494013367335069727LLU}),jule::Array<jule::U64,2>({17666787732706464701LLU,16867516709168837158LLU}),jule::Array<jule::U64,2>({6430056314514152534LLU,10542197943230523224LLU}),jule::Array<jule::U64,2>({8037570393142690668LLU,13177747429038154030LLU}),jule::Array<jule::U64,2>({823590954573587527LLU,16472184286297692538LLU}),jule::Array<jule::U64,2>({5126430365035880108LLU,10295115178936057836LLU}),jule::Array<jule::U64,2>({6408037956294850135LLU,12868893973670072295LLU}),jule::Array<jule::U64,2>({3398361426941174765LLU,16086117467087590369LLU}),jule::Array<jule::U64,2>({13653190937906703988LLU,10053823416929743980LLU}),jule::Array<jule::U64,2>({17066488672383379985LLU,12567279271162179975LLU}),jule::Array<jule::U64,2>({16721424822051837077LLU,15709099088952724969LLU}),jule::Array<jule::U64,2>({3533361486141316317LLU,9818186930595453106LLU}),jule::Array<jule::U64,2>({13640073894531421205LLU,12272733663244316382LLU}),jule::Array<jule::U64,2>({7826720331309500698LLU,15340917079055395478LLU}),jule::Array<jule::U64,2>({280014188641050032LLU,9588073174409622174LLU}),jule::Array<jule::U64,2>({9573389772656088348LLU,11985091468012027717LLU}),jule::Array<jule::U64,2>({16578423234247498339LLU,14981364335015034646LLU}),jule::Array<jule::U64,2>({5749828502977298558LLU,9363352709384396654LLU}),jule::Array<jule::U64,2>({16410657665576399005LLU,11704190886730495817LLU}),jule::Array<jule::U64,2>({6678264026688335045LLU,14630238608413119772LLU}),jule::Array<jule::U64,2>({8347830033360418806LLU,18287798260516399715LLU}),jule::Array<jule::U64,2>({2911550761636567802LLU,11429873912822749822LLU}),jule::Array<jule::U64,2>({12862810488900485560LLU,14287342391028437277LLU}),jule::Array<jule::U64,2>({2243455055843443238LLU,17859177988785546597LLU}),jule::Array<jule::U64,2>({3708002419115845976LLU,11161986242990966623LLU}),jule::Array<jule::U64,2>({23317005467419566LLU,13952482803738708279LLU}),jule::Array<jule::U64,2>({13864204312116438170LLU,17440603504673385348LLU}),jule::Array<jule::U64,2>({17888499731927549664LLU,10900377190420865842LLU}),jule::Array<jule::U64,2>({13137252628054661272LLU,13625471488026082303LLU}),jule::Array<jule::U64,2>({11809879766640938686LLU,17031839360032602879LLU}),jule::Array<jule::U64,2>({14298703881791668535LLU,10644899600020376799LLU}),jule::Array<jule::U64,2>({13261693833812197764LLU,13306124500025470999LLU}),jule::Array<jule::U64,2>({11965431273837859301LLU,16632655625031838749LLU}),jule::Array<jule::U64,2>({9784237555362356015LLU,10395409765644899218LLU}),jule::Array<jule::U64,2>({3006924907348169211LLU,12994262207056124023LLU}),jule::Array<jule::U64,2>({17593714189467375226LLU,16242827758820155028LLU}),jule::Array<jule::U64,2>({1772699331562333708LLU,10151767349262596893LLU}),jule::Array<jule::U64,2>({6827560182880305039LLU,12689709186578246116LLU}),jule::Array<jule::U64,2>({8534450228600381299LLU,15862136483222807645LLU}),jule::Array<jule::U64,2>({7639874402088932264LLU,9913835302014254778LLU}),jule::Array<jule::U64,2>({326470965756389522LLU,12392294127517818473LLU}),jule::Array<jule::U64,2>({5019774725622874806LLU,15490367659397273091LLU}),jule::Array<jule::U64,2>({831516194300602802LLU,9681479787123295682LLU}),jule::Array<jule::U64,2>({10262767279730529310LLU,12101849733904119602LLU}),jule::Array<jule::U64,2>({3605087062808385830LLU,15127312167380149503LLU}),jule::Array<jule::U64,2>({9170708441896323000LLU,9454570104612593439LLU}),jule::Array<jule::U64,2>({6851699533943015846LLU,11818212630765741799LLU}),jule::Array<jule::U64,2>({3952938399001381903LLU,14772765788457177249LLU}),jule::Array<jule::U64,2>({13999801545444333449LLU,9232978617785735780LLU}),jule::Array<jule::U64,2>({17499751931805416812LLU,11541223272232169725LLU}),jule::Array<jule::U64,2>({8039631859474607303LLU,14426529090290212157LLU}),jule::Array<jule::U64,2>({14661225842770647033LLU,18033161362862765196LLU}),jule::Array<jule::U64,2>({18386638188586430203LLU,11270725851789228247LLU}),jule::Array<jule::U64,2>({18371611717305649850LLU,14088407314736535309LLU}),jule::Array<jule::U64,2>({9129456591349898601LLU,17610509143420669137LLU}),jule::Array<jule::U64,2>({17235125415662156385LLU,11006568214637918210LLU}),jule::Array<jule::U64,2>({12320534732722919674LLU,13758210268297397763LLU}),jule::Array<jule::U64,2>({10788982397476261688LLU,17197762835371747204LLU}),jule::Array<jule::U64,2>({15966486035277439363LLU,10748601772107342002LLU}),jule::Array<jule::U64,2>({10734735507242023396LLU,13435752215134177503LLU}),jule::Array<jule::U64,2>({8806733365625141341LLU,16794690268917721879LLU}),jule::Array<jule::U64,2>({12421737381156795194LLU,10496681418073576174LLU}),jule::Array<jule::U64,2>({6303799689591218185LLU,13120851772591970218LLU}),jule::Array<jule::U64,2>({17103121648843798539LLU,16401064715739962772LLU}),jule::Array<jule::U64,2>({1466078993672598279LLU,10250665447337476733LLU}),jule::Array<jule::U64,2>({6444284760518135752LLU,12813331809171845916LLU}),jule::Array<jule::U64,2>({8055355950647669691LLU,16016664761464807395LLU}),jule::Array<jule::U64,2>({2728754459941099604LLU,10010415475915504622LLU}),jule::Array<jule::U64,2>({12634315111781150314LLU,12513019344894380777LLU}),jule::Array<jule::U64,2>({1957835834444274180LLU,15641274181117975972LLU}),jule::Array<jule::U64,2>({10447019433382447170LLU,9775796363198734982LLU}),jule::Array<jule::U64,2>({3835402254873283155LLU,12219745453998418728LLU}),jule::Array<jule::U64,2>({4794252818591603944LLU,15274681817498023410LLU}),jule::Array<jule::U64,2>({7608094030047140369LLU,9546676135936264631LLU}),jule::Array<jule::U64,2>({4898431519131537557LLU,11933345169920330789LLU}),jule::Array<jule::U64,2>({10734725417341809851LLU,14916681462400413486LLU}),jule::Array<jule::U64,2>({2097517367411243253LLU,9322925914000258429LLU}),jule::Array<jule::U64,2>({7233582727691441970LLU,11653657392500323036LLU}),jule::Array<jule::U64,2>({9041978409614302462LLU,14567071740625403795LLU}),jule::Array<jule::U64,2>({6690786993590490174LLU,18208839675781754744LLU}),jule::Array<jule::U64,2>({4181741870994056359LLU,11380524797363596715LLU}),jule::Array<jule::U64,2>({615491320315182544LLU,14225655996704495894LLU}),jule::Array<jule::U64,2>({9992736187248753989LLU,17782069995880619867LLU}),jule::Array<jule::U64,2>({3939617107816777291LLU,11113793747425387417LLU}),jule::Array<jule::U64,2>({9536207403198359517LLU,13892242184281734271LLU}),jule::Array<jule::U64,2>({7308573235570561493LLU,17365302730352167839LLU}),jule::Array<jule::U64,2>({11485387299872682789LLU,10853314206470104899LLU}),jule::Array<jule::U64,2>({9745048106413465582LLU,13566642758087631124LLU}),jule::Array<jule::U64,2>({12181310133016831978LLU,16958303447609538905LLU}),jule::Array<jule::U64,2>({695789805494438130LLU,10598939654755961816LLU}),jule::Array<jule::U64,2>({869737256868047663LLU,13248674568444952270LLU}),jule::Array<jule::U64,2>({10310543607939835386LLU,16560843210556190337LLU}),jule::Array<jule::U64,2>({17973304801030866876LLU,10350527006597618960LLU}),jule::Array<jule::U64,2>({4019886927579031980LLU,12938158758247023701LLU}),jule::Array<jule::U64,2>({9636544677901177879LLU,16172698447808779626LLU}),jule::Array<jule::U64,2>({10634526442115624078LLU,10107936529880487266LLU}),jule::Array<jule::U64,2>({4069786015789754290LLU,12634920662350609083LLU}),jule::Array<jule::U64,2>({475546501309804958LLU,15793650827938261354LLU}),jule::Array<jule::U64,2>({4908902581746016003LLU,9871031767461413346LLU}),jule::Array<jule::U64,2>({15359500264037295811LLU,12338789709326766682LLU}),jule::Array<jule::U64,2>({9976003293191843956LLU,15423487136658458353LLU}),jule::Array<jule::U64,2>({17764217104313372233LLU,9639679460411536470LLU}),jule::Array<jule::U64,2>({12981899343536939483LLU,12049599325514420588LLU}),jule::Array<jule::U64,2>({16227374179421174354LLU,15061999156893025735LLU}),jule::Array<jule::U64,2>({17059637889779315827LLU,9413749473058141084LLU}),jule::Array<jule::U64,2>({2877803288514593168LLU,11767186841322676356LLU}),jule::Array<jule::U64,2>({3597254110643241460LLU,14708983551653345445LLU}),jule::Array<jule::U64,2>({9108253656731439729LLU,18386229439566681806LLU}),jule::Array<jule::U64,2>({1080972517029761926LLU,11491393399729176129LLU}),jule::Array<jule::U64,2>({5962901664714590312LLU,14364241749661470161LLU}),jule::Array<jule::U64,2>({12065313099320625794LLU,17955302187076837701LLU}),jule::Array<jule::U64,2>({9846663696289085073LLU,11222063866923023563LLU}),jule::Array<jule::U64,2>({7696643601933968437LLU,14027579833653779454LLU}),jule::Array<jule::U64,2>({397432465562684739LLU,17534474792067224318LLU}),jule::Array<jule::U64,2>({14083453346258841674LLU,10959046745042015198LLU}),jule::Array<jule::U64,2>({8380944645968776284LLU,13698808431302518998LLU}),jule::Array<jule::U64,2>({1252808770606194547LLU,17123510539128148748LLU}),jule::Array<jule::U64,2>({10006377518483647400LLU,10702194086955092967LLU}),jule::Array<jule::U64,2>({7896285879677171346LLU,13377742608693866209LLU}),jule::Array<jule::U64,2>({14482043368023852087LLU,16722178260867332761LLU}),jule::Array<jule::U64,2>({2133748077373825698LLU,10451361413042082976LLU}),jule::Array<jule::U64,2>({2667185096717282123LLU,13064201766302603720LLU}),jule::Array<jule::U64,2>({3333981370896602653LLU,16330252207878254650LLU}),jule::Array<jule::U64,2>({6695424375237764562LLU,10206407629923909156LLU}),jule::Array<jule::U64,2>({8369280469047205703LLU,12758009537404886445LLU}),jule::Array<jule::U64,2>({15073286604736395033LLU,15947511921756108056LLU}),jule::Array<jule::U64,2>({9420804127960246895LLU,9967194951097567535LLU}),jule::Array<jule::U64,2>({7164319141522920715LLU,12458993688871959419LLU}),jule::Array<jule::U64,2>({4343712908476262990LLU,15573742111089949274LLU}),jule::Array<jule::U64,2>({7326506586225052273LLU,9733588819431218296LLU}),jule::Array<jule::U64,2>({9158133232781315341LLU,12166986024289022870LLU}),jule::Array<jule::U64,2>({2224294504121868368LLU,15208732530361278588LLU}),jule::Array<jule::U64,2>({10613556101930943538LLU,9505457831475799117LLU}),jule::Array<jule::U64,2>({17878631145841067327LLU,11881822289344748896LLU}),jule::Array<jule::U64,2>({3901544858591782542LLU,14852277861680936121LLU}),jule::Array<jule::U64,2>({13967680582688333849LLU,9282673663550585075LLU}),jule::Array<jule::U64,2>({12847914709933029407LLU,11603342079438231344LLU}),jule::Array<jule::U64,2>({16059893387416286759LLU,14504177599297789180LLU}),jule::Array<jule::U64,2>({1628122660560806833LLU,18130221999122236476LLU}),jule::Array<jule::U64,2>({10240948699705280078LLU,11331388749451397797LLU}),jule::Array<jule::U64,2>({17412871893058988002LLU,14164235936814247246LLU}),jule::Array<jule::U64,2>({12542717829468959195LLU,17705294921017809058LLU}),jule::Array<jule::U64,2>({12450884661845487401LLU,11065809325636130661LLU}),jule::Array<jule::U64,2>({1728547772024695539LLU,13832261657045163327LLU}),jule::Array<jule::U64,2>({15995742770313033136LLU,17290327071306454158LLU}),jule::Array<jule::U64,2>({5385653213018257806LLU,10806454419566533849LLU}),jule::Array<jule::U64,2>({11343752534700210161LLU,13508068024458167311LLU}),jule::Array<jule::U64,2>({9568004649947874797LLU,16885085030572709139LLU}),jule::Array<jule::U64,2>({3674159897003727796LLU,10553178144107943212LLU}),jule::Array<jule::U64,2>({4592699871254659745LLU,13191472680134929015LLU}),jule::Array<jule::U64,2>({1129188820640936778LLU,16489340850168661269LLU}),jule::Array<jule::U64,2>({3011586022114279438LLU,10305838031355413293LLU}),jule::Array<jule::U64,2>({8376168546070237202LLU,12882297539194266616LLU}),jule::Array<jule::U64,2>({10470210682587796502LLU,16102871923992833270LLU}),jule::Array<jule::U64,2>({1932195658189984910LLU,10064294952495520794LLU}),jule::Array<jule::U64,2>({11638616609592256945LLU,12580368690619400992LLU}),jule::Array<jule::U64,2>({14548270761990321182LLU,15725460863274251240LLU}),jule::Array<jule::U64,2>({9092669226243950738LLU,9828413039546407025LLU}),jule::Array<jule::U64,2>({15977522551232326327LLU,12285516299433008781LLU}),jule::Array<jule::U64,2>({6136845133758244197LLU,15356895374291260977LLU}),jule::Array<jule::U64,2>({15364743254667372383LLU,9598059608932038110LLU}),jule::Array<jule::U64,2>({9982557031479439671LLU,11997574511165047638LLU}),jule::Array<jule::U64,2>({3254824252494523781LLU,14996968138956309548LLU}),jule::Array<jule::U64,2>({11257637194663853171LLU,9373105086847693467LLU}),jule::Array<jule::U64,2>({9460360474902428559LLU,11716381358559616834LLU}),jule::Array<jule::U64,2>({2602078556773259891LLU,14645476698199521043LLU}),jule::Array<jule::U64,2>({17087656251248738576LLU,18306845872749401303LLU}),jule::Array<jule::U64,2>({17597314184671543466LLU,11441778670468375814LLU}),jule::Array<jule::U64,2>({12773270693984653525LLU,14302223338085469768LLU}),jule::Array<jule::U64,2>({15966588367480816906LLU,17877779172606837210LLU}),jule::Array<jule::U64,2>({14590803748102898470LLU,11173611982879273256LLU}),jule::Array<jule::U64,2>({18238504685128623088LLU,13967014978599091570LLU}),jule::Array<jule::U64,2>({13574758819556003052LLU,17458768723248864463LLU}),jule::Array<jule::U64,2>({15401753289863583763LLU,10911730452030540289LLU}),jule::Array<jule::U64,2>({5417133557047315992LLU,13639663065038175362LLU}),jule::Array<jule::U64,2>({15994788983163920798LLU,17049578831297719202LLU}),jule::Array<jule::U64,2>({14608429132904838403LLU,10655986769561074501LLU}),jule::Array<jule::U64,2>({4425478360848884291LLU,13319983461951343127LLU}),jule::Array<jule::U64,2>({920161932633717460LLU,16649979327439178909LLU}),jule::Array<jule::U64,2>({2880944217109767365LLU,10406237079649486818LLU}),jule::Array<jule::U64,2>({12824552308241985014LLU,13007796349561858522LLU}),jule::Array<jule::U64,2>({6807318348447705459LLU,16259745436952323153LLU}),jule::Array<jule::U64,2>({15783789013848285672LLU,10162340898095201970LLU}),jule::Array<jule::U64,2>({10506364230455581282LLU,12702926122619002463LLU}),jule::Array<jule::U64,2>({8521269269642088699LLU,15878657653273753079LLU}),jule::Array<jule::U64,2>({12243322321167387293LLU,9924161033296095674LLU}),jule::Array<jule::U64,2>({6080780864604458308LLU,12405201291620119593LLU}),jule::Array<jule::U64,2>({12212662099182960789LLU,15506501614525149491LLU}),jule::Array<jule::U64,2>({5327070802775656541LLU,9691563509078218432LLU}),jule::Array<jule::U64,2>({6658838503469570676LLU,12114454386347773040LLU}),jule::Array<jule::U64,2>({8323548129336963345LLU,15143067982934716300LLU}),jule::Array<jule::U64,2>({14425589617690377899LLU,9464417489334197687LLU}),jule::Array<jule::U64,2>({13420301003685584469LLU,11830521861667747109LLU}),jule::Array<jule::U64,2>({2940318199324816875LLU,14788152327084683887LLU}),jule::Array<jule::U64,2>({8755227902219092403LLU,9242595204427927429LLU}),jule::Array<jule::U64,2>({15555720896201253407LLU,11553244005534909286LLU}),jule::Array<jule::U64,2>({10221279083396790951LLU,14441555006918636608LLU}),jule::Array<jule::U64,2>({12776598854245988689LLU,18051943758648295760LLU}),jule::Array<jule::U64,2>({7985374283903742931LLU,11282464849155184850LLU}),jule::Array<jule::U64,2>({758345818024902856LLU,14103081061443981063LLU}),jule::Array<jule::U64,2>({14782990327813292282LLU,17628851326804976328LLU}),jule::Array<jule::U64,2>({9239368954883307676LLU,11018032079253110205LLU}),jule::Array<jule::U64,2>({16160897212031522499LLU,13772540099066387756LLU}),jule::Array<jule::U64,2>({1754377441329851508LLU,17215675123832984696LLU}),jule::Array<jule::U64,2>({1096485900831157192LLU,10759796952395615435LLU}),jule::Array<jule::U64,2>({15205665431321110202LLU,13449746190494519293LLU}),jule::Array<jule::U64,2>({5172023733869224041LLU,16812182738118149117LLU}),jule::Array<jule::U64,2>({5538357842881958977LLU,10507614211323843198LLU}),jule::Array<jule::U64,2>({16146319340457224530LLU,13134517764154803997LLU}),jule::Array<jule::U64,2>({6347841120289366950LLU,16418147205193504997LLU}),jule::Array<jule::U64,2>({6273243709394548296LLU,10261342003245940623LLU}),jule::Array<jule::U64,2>({3229868618315797466LLU,12826677504057425779LLU}),jule::Array<jule::U64,2>({17872393828176910545LLU,16033346880071782223LLU}),jule::Array<jule::U64,2>({18087775170251650946LLU,10020841800044863889LLU}),jule::Array<jule::U64,2>({8774660907532399971LLU,12526052250056079862LLU}),jule::Array<jule::U64,2>({1744954097560724156LLU,15657565312570099828LLU}),jule::Array<jule::U64,2>({10313968347830228405LLU,9785978320356312392LLU}),jule::Array<jule::U64,2>({12892460434787785506LLU,12232472900445390490LLU}),jule::Array<jule::U64,2>({6892203506629956075LLU,15290591125556738113LLU}),jule::Array<jule::U64,2>({15836842237712192307LLU,9556619453472961320LLU}),jule::Array<jule::U64,2>({1349308723430688768LLU,11945774316841201651LLU}),jule::Array<jule::U64,2>({15521693959570524672LLU,14932217896051502063LLU}),jule::Array<jule::U64,2>({16618587752372659776LLU,9332636185032188789LLU}),jule::Array<jule::U64,2>({6938176635183661008LLU,11665795231290235987LLU}),jule::Array<jule::U64,2>({4061034775552188356LLU,14582244039112794984LLU}),jule::Array<jule::U64,2>({5076293469440235445LLU,18227805048890993730LLU}),jule::Array<jule::U64,2>({7784369436827535057LLU,11392378155556871081LLU}),jule::Array<jule::U64,2>({14342147814461806725LLU,14240472694446088851LLU}),jule::Array<jule::U64,2>({13315998749649870503LLU,17800590868057611064LLU}),jule::Array<jule::U64,2>({8322499218531169064LLU,11125369292536006915LLU}),jule::Array<jule::U64,2>({5791438004736573426LLU,13906711615670008644LLU}),jule::Array<jule::U64,2>({7239297505920716783LLU,17383389519587510805LLU}),jule::Array<jule::U64,2>({6830403950414141941LLU,10864618449742194253LLU}),jule::Array<jule::U64,2>({13149690956445065330LLU,13580773062177742816LLU}),jule::Array<jule::U64,2>({16437113695556331663LLU,16975966327722178520LLU}),jule::Array<jule::U64,2>({10273196059722707289LLU,10609978954826361575LLU}),jule::Array<jule::U64,2>({8229809056225996208LLU,13262473693532951969LLU}),jule::Array<jule::U64,2>({14898947338709883164LLU,16578092116916189961LLU}),jule::Array<jule::U64,2>({2394313059052595121LLU,10361307573072618726LLU}),jule::Array<jule::U64,2>({12216263360670519709LLU,12951634466340773407LLU}),jule::Array<jule::U64,2>({10658643182410761733LLU,16189543082925966759LLU}),jule::Array<jule::U64,2>({13579181016647807939LLU,10118464426828729224LLU}),jule::Array<jule::U64,2>({16973976270809759924LLU,12648080533535911530LLU}),jule::Array<jule::U64,2>({11994098301657424097LLU,15810100666919889413LLU}),jule::Array<jule::U64,2>({9802154447749584012LLU,9881312916824930883LLU}),jule::Array<jule::U64,2>({7641007041259592112LLU,12351641146031163604LLU}),jule::Array<jule::U64,2>({9551258801574490140LLU,15439551432538954505LLU}),jule::Array<jule::U64,2>({17498751797052526097LLU,9649719645336846565LLU}),jule::Array<jule::U64,2>({8038381691033493909LLU,12062149556671058207LLU}),jule::Array<jule::U64,2>({5436291095364479483LLU,15077686945838822759LLU})});
	_211cadddd_POWTAB = jule::Slice<jule::Int>({1LL,3LL,6LL,9LL,13LL,16LL,19LL,23LL,26LL});
	_211cadddd_F64_POW10 = jule::Slice<jule::F64>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL,100000000000LL,1000000000000LL,10000000000000LL,100000000000000LL,1000000000000000LL,10000000000000000LL,100000000000000000LL,1000000000000000000LL,10000000000000000000LLU,100000000000000000000.0,1000000000000000000000.0,10000000000000000000000.0});
	_211cadddd_F32_POW10 = jule::Slice<jule::F32>({1LL,10LL,100LL,1000LL,10000LL,100000LL,1000000LL,10000000LL,100000000LL,1000000000LL,10000000000LL});
	_211d646ad_U64_POW10 = jule::Array<jule::U64,20>({1LLU,10LLU,100LLU,1000LLU,10000LLU,100000LLU,1000000LLU,10000000LLU,100000000LLU,1000000000LLU,10000000000LLU,100000000000LLU,1000000000000LLU,10000000000000LLU,100000000000000LLU,1000000000000000LLU,10000000000000000LLU,100000000000000000LLU,1000000000000000000LLU,10000000000000000000LLU});
	_1b6a7a1bb_LEFTCHEATS = jule::Slice<_1b6a7a1bb_LeftCheat>({_1b6a7a1bb_LeftCheat(0LL,jule::Str()),_1b6a7a1bb_LeftCheat(1LL,jule::Str("5", 1)),_1b6a7a1bb_LeftCheat(1LL,jule::Str("25", 2)),_1b6a7a1bb_LeftCheat(1LL,jule::Str("125", 3)),_1b6a7a1bb_LeftCheat(2LL,jule::Str("625", 3)),_1b6a7a1bb_LeftCheat(2LL,jule::Str("3125", 4)),_1b6a7a1bb_LeftCheat(2LL,jule::Str("15625", 5)),_1b6a7a1bb_LeftCheat(3LL,jule::Str("78125", 5)),_1b6a7a1bb_LeftCheat(3LL,jule::Str("390625", 6)),_1b6a7a1bb_LeftCheat(3LL,jule::Str("1953125", 7)),_1b6a7a1bb_LeftCheat(4LL,jule::Str("9765625", 7)),_1b6a7a1bb_LeftCheat(4LL,jule::Str("48828125", 8)),_1b6a7a1bb_LeftCheat(4LL,jule::Str("244140625", 9)),_1b6a7a1bb_LeftCheat(4LL,jule::Str("1220703125", 10)),_1b6a7a1bb_LeftCheat(5LL,jule::Str("6103515625", 10)),_1b6a7a1bb_LeftCheat(5LL,jule::Str("30517578125", 11)),_1b6a7a1bb_LeftCheat(5LL,jule::Str("152587890625", 12)),_1b6a7a1bb_LeftCheat(6LL,jule::Str("762939453125", 12)),_1b6a7a1bb_LeftCheat(6LL,jule::Str("3814697265625", 13)),_1b6a7a1bb_LeftCheat(6LL,jule::Str("19073486328125", 14)),_1b6a7a1bb_LeftCheat(7LL,jule::Str("95367431640625", 14)),_1b6a7a1bb_LeftCheat(7LL,jule::Str("476837158203125", 15)),_1b6a7a1bb_LeftCheat(7LL,jule::Str("2384185791015625", 16)),_1b6a7a1bb_LeftCheat(7LL,jule::Str("11920928955078125", 17)),_1b6a7a1bb_LeftCheat(8LL,jule::Str("59604644775390625", 17)),_1b6a7a1bb_LeftCheat(8LL,jule::Str("298023223876953125", 18)),_1b6a7a1bb_LeftCheat(8LL,jule::Str("1490116119384765625", 19)),_1b6a7a1bb_LeftCheat(9LL,jule::Str("7450580596923828125", 19)),_1b6a7a1bb_LeftCheat(9LL,jule::Str("37252902984619140625", 20)),_1b6a7a1bb_LeftCheat(9LL,jule::Str("186264514923095703125", 21)),_1b6a7a1bb_LeftCheat(10LL,jule::Str("931322574615478515625", 21)),_1b6a7a1bb_LeftCheat(10LL,jule::Str("4656612873077392578125", 22)),_1b6a7a1bb_LeftCheat(10LL,jule::Str("23283064365386962890625", 23)),_1b6a7a1bb_LeftCheat(10LL,jule::Str("116415321826934814453125", 24)),_1b6a7a1bb_LeftCheat(11LL,jule::Str("582076609134674072265625", 24)),_1b6a7a1bb_LeftCheat(11LL,jule::Str("2910383045673370361328125", 25)),_1b6a7a1bb_LeftCheat(11LL,jule::Str("14551915228366851806640625", 26)),_1b6a7a1bb_LeftCheat(12LL,jule::Str("72759576141834259033203125", 26)),_1b6a7a1bb_LeftCheat(12LL,jule::Str("363797880709171295166015625", 27)),_1b6a7a1bb_LeftCheat(12LL,jule::Str("1818989403545856475830078125", 28)),_1b6a7a1bb_LeftCheat(13LL,jule::Str("9094947017729282379150390625", 28)),_1b6a7a1bb_LeftCheat(13LL,jule::Str("45474735088646411895751953125", 29)),_1b6a7a1bb_LeftCheat(13LL,jule::Str("227373675443232059478759765625", 30)),_1b6a7a1bb_LeftCheat(13LL,jule::Str("1136868377216160297393798828125", 31)),_1b6a7a1bb_LeftCheat(14LL,jule::Str("5684341886080801486968994140625", 31)),_1b6a7a1bb_LeftCheat(14LL,jule::Str("28421709430404007434844970703125", 32)),_1b6a7a1bb_LeftCheat(14LL,jule::Str("142108547152020037174224853515625", 33)),_1b6a7a1bb_LeftCheat(15LL,jule::Str("710542735760100185871124267578125", 33)),_1b6a7a1bb_LeftCheat(15LL,jule::Str("3552713678800500929355621337890625", 34)),_1b6a7a1bb_LeftCheat(15LL,jule::Str("17763568394002504646778106689453125", 35)),_1b6a7a1bb_LeftCheat(16LL,jule::Str("88817841970012523233890533447265625", 35)),_1b6a7a1bb_LeftCheat(16LL,jule::Str("444089209850062616169452667236328125", 36)),_1b6a7a1bb_LeftCheat(16LL,jule::Str("2220446049250313080847263336181640625", 37)),_1b6a7a1bb_LeftCheat(16LL,jule::Str("11102230246251565404236316680908203125", 38)),_1b6a7a1bb_LeftCheat(17LL,jule::Str("55511151231257827021181583404541015625", 38)),_1b6a7a1bb_LeftCheat(17LL,jule::Str("277555756156289135105907917022705078125", 39)),_1b6a7a1bb_LeftCheat(17LL,jule::Str("1387778780781445675529539585113525390625", 40)),_1b6a7a1bb_LeftCheat(18LL,jule::Str("6938893903907228377647697925567626953125", 40)),_1b6a7a1bb_LeftCheat(18LL,jule::Str("34694469519536141888238489627838134765625", 41)),_1b6a7a1bb_LeftCheat(18LL,jule::Str("173472347597680709441192448139190673828125", 42)),_1b6a7a1bb_LeftCheat(19LL,jule::Str("867361737988403547205962240695953369140625", 42))});
	_1b7553d92_SPACES = jule::Array<jule::I32,5>({' ','\t','\v','\r','\n'});
	_1b7553d92_UNARY_OPS = jule::Array<jule::Str,6>({jule::Str("-", 1),jule::Str("+", 1),jule::Str("^", 1),jule::Str("!", 1),jule::Str("*", 1),jule::Str("&", 1)});
	_1b7553d92_BIN_OPS = jule::Array<jule::Str,12>({jule::Str("+", 1),jule::Str("-", 1),jule::Str("*", 1),jule::Str("/", 1),jule::Str("%", 1),jule::Str("&", 1),jule::Str("|", 1),jule::Str("^", 1),jule::Str("<", 1),jule::Str(">", 1),jule::Str("&&", 2),jule::Str("||", 2)});
	_1b7553d92_POSTFIX_OPS = jule::Array<jule::Str,2>({jule::Str("++", 2),jule::Str("--", 2)});
	_1b7553d92_ASSING_OPS = jule::Array<jule::Str,11>({jule::Str("=", 1),jule::Str("+=", 2),jule::Str("-=", 2),jule::Str("/=", 2),jule::Str("*=", 2),jule::Str("%=", 2),jule::Str(">>=", 3),jule::Str("<<=", 3),jule::Str("|=", 2),jule::Str("&=", 2),jule::Str("^=", 2)});
	_1b75960d2_KEYWORDS = jule::Array<_1b75960d2_KindPair,47>({_1b75960d2_KindPair(jule::Str("i8", 2),1LLU),_1b75960d2_KindPair(jule::Str("i16", 3),1LLU),_1b75960d2_KindPair(jule::Str("i32", 3),1LLU),_1b75960d2_KindPair(jule::Str("i64", 3),1LLU),_1b75960d2_KindPair(jule::Str("u8", 2),1LLU),_1b75960d2_KindPair(jule::Str("u16", 3),1LLU),_1b75960d2_KindPair(jule::Str("u32", 3),1LLU),_1b75960d2_KindPair(jule::Str("u64", 3),1LLU),_1b75960d2_KindPair(jule::Str("f32", 3),1LLU),_1b75960d2_KindPair(jule::Str("f64", 3),1LLU),_1b75960d2_KindPair(jule::Str("uint", 4),1LLU),_1b75960d2_KindPair(jule::Str("int", 3),1LLU),_1b75960d2_KindPair(jule::Str("uintptr", 7),1LLU),_1b75960d2_KindPair(jule::Str("bool", 4),1LLU),_1b75960d2_KindPair(jule::Str("str", 3),1LLU),_1b75960d2_KindPair(jule::Str("any", 3),1LLU),_1b75960d2_KindPair(jule::Str("true", 4),6LLU),_1b75960d2_KindPair(jule::Str("false", 5),6LLU),_1b75960d2_KindPair(jule::Str("nil", 3),6LLU),_1b75960d2_KindPair(jule::Str("const", 5),9LLU),_1b75960d2_KindPair(jule::Str("ret", 3),4LLU),_1b75960d2_KindPair(jule::Str("type", 4),10LLU),_1b75960d2_KindPair(jule::Str("for", 3),12LLU),_1b75960d2_KindPair(jule::Str("break", 5),13LLU),_1b75960d2_KindPair(jule::Str("continue", 8),14LLU),_1b75960d2_KindPair(jule::Str("in", 2),15LLU),_1b75960d2_KindPair(jule::Str("if", 2),16LLU),_1b75960d2_KindPair(jule::Str("else", 4),17LLU),_1b75960d2_KindPair(jule::Str("use", 3),19LLU),_1b75960d2_KindPair(jule::Str("pub", 3),21LLU),_1b75960d2_KindPair(jule::Str("goto", 4),22LLU),_1b75960d2_KindPair(jule::Str("enum", 4),24LLU),_1b75960d2_KindPair(jule::Str("struct", 6),25LLU),_1b75960d2_KindPair(jule::Str("co", 2),26LLU),_1b75960d2_KindPair(jule::Str("match", 5),27LLU),_1b75960d2_KindPair(jule::Str("self", 4),28LLU),_1b75960d2_KindPair(jule::Str("trait", 5),29LLU),_1b75960d2_KindPair(jule::Str("impl", 4),30LLU),_1b75960d2_KindPair(jule::Str("cpp", 3),31LLU),_1b75960d2_KindPair(jule::Str("fall", 4),32LLU),_1b75960d2_KindPair(jule::Str("fn", 2),33LLU),_1b75960d2_KindPair(jule::Str("let", 3),34LLU),_1b75960d2_KindPair(jule::Str("unsafe", 6),35LLU),_1b75960d2_KindPair(jule::Str("mut", 3),36LLU),_1b75960d2_KindPair(jule::Str("defer", 5),37LLU),_1b75960d2_KindPair(jule::Str("static", 6),38LLU),_1b75960d2_KindPair(jule::Str("error", 5),40LLU)});
	_1b75960d2_BASIC_OPS = jule::Array<_1b75960d2_KindPair,39>({_1b75960d2_KindPair(jule::Str("::", 2),23LLU),_1b75960d2_KindPair(jule::Str(":", 1),11LLU),_1b75960d2_KindPair(jule::Str(";", 1),5LLU),_1b75960d2_KindPair(jule::Str(",", 1),8LLU),_1b75960d2_KindPair(jule::Str("...", 3),7LLU),_1b75960d2_KindPair(jule::Str(".", 1),20LLU),_1b75960d2_KindPair(jule::Str("+=", 2),7LLU),_1b75960d2_KindPair(jule::Str("-=", 2),7LLU),_1b75960d2_KindPair(jule::Str("*=", 2),7LLU),_1b75960d2_KindPair(jule::Str("/=", 2),7LLU),_1b75960d2_KindPair(jule::Str("%=", 2),7LLU),_1b75960d2_KindPair(jule::Str("<<=", 3),7LLU),_1b75960d2_KindPair(jule::Str(">>=", 3),7LLU),_1b75960d2_KindPair(jule::Str("^=", 2),7LLU),_1b75960d2_KindPair(jule::Str("&=", 2),7LLU),_1b75960d2_KindPair(jule::Str("|=", 2),7LLU),_1b75960d2_KindPair(jule::Str("==", 2),7LLU),_1b75960d2_KindPair(jule::Str("!=", 2),7LLU),_1b75960d2_KindPair(jule::Str(">=", 2),7LLU),_1b75960d2_KindPair(jule::Str("<=", 2),7LLU),_1b75960d2_KindPair(jule::Str("&&", 2),7LLU),_1b75960d2_KindPair(jule::Str("||", 2),7LLU),_1b75960d2_KindPair(jule::Str("<<", 2),7LLU),_1b75960d2_KindPair(jule::Str(">>", 2),7LLU),_1b75960d2_KindPair(jule::Str("++", 2),7LLU),_1b75960d2_KindPair(jule::Str("--", 2),7LLU),_1b75960d2_KindPair(jule::Str("+", 1),7LLU),_1b75960d2_KindPair(jule::Str("-", 1),7LLU),_1b75960d2_KindPair(jule::Str("*", 1),7LLU),_1b75960d2_KindPair(jule::Str("/", 1),7LLU),_1b75960d2_KindPair(jule::Str("%", 1),7LLU),_1b75960d2_KindPair(jule::Str("&", 1),7LLU),_1b75960d2_KindPair(jule::Str("|", 1),7LLU),_1b75960d2_KindPair(jule::Str("^", 1),7LLU),_1b75960d2_KindPair(jule::Str("!", 1),7LLU),_1b75960d2_KindPair(jule::Str("<", 1),7LLU),_1b75960d2_KindPair(jule::Str(">", 1),7LLU),_1b75960d2_KindPair(jule::Str("=", 1),7LLU),_1b75960d2_KindPair(jule::Str("#", 1),39LLU)});
	_1a90790e0_BUILTIN_TYPE_ALIAS_BYTE = jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias(jule::Ptr<_1b7509a90_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_1b7553d92_Token(),jule::Str(),jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("u8", 2)))))),jule::Str(),jule::Slice<jule::Any>()));
	_1a90790e0_BUILTIN_TYPE_ALIAS_RUNE = jule::new_struct<_1a6a19a50_TypeAlias>(new( std::nothrow ) _1a6a19a50_TypeAlias(jule::Ptr<_1b7509a90_ScopeTree>(),true,jule::Bool(),jule::Bool(),jule::Bool(),_1b7553d92_Token(),jule::Str(),jule::new_struct<_1a6a19a50_TypeSymbol>(new( std::nothrow ) _1a6a19a50_TypeSymbol(jule::Ptr<_1b7509a90_TypeDecl>(),jule::new_struct_ptr<_1a6a19a50_TypeKind>(new( std::nothrow ) _1a6a19a50_TypeKind(jule::Str(),jule::Bool(),jule::Bool(),_1a6a19a50_build_prim_type(jule::Str("i32", 3)))))),jule::Str(),jule::Slice<jule::Any>()));
	_1b74b0d98_VARS = nullptr;
	_1b7467756_deads = nullptr;
	_1b7467756_checking = nullptr;
	_1b7467756_current = jule::Any(nullptr);
	_1b7467756_main_current = jule::Any(nullptr);
	_1a9612e81_MDAYS = jule::Array<jule::U8,12>({31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,30LLU,31LLU,30LLU,31LLU,31LLU,29LLU});
	_1a94c037c_INDENT = nullptr;
	_211ad8025_HELP_MAP = jule::Array<jule::Array<jule::Str,2>,5>({jule::Array<jule::Str,2>({jule::Str("help", 4),jule::Str("Show help", 9)}),jule::Array<jule::Str,2>({jule::Str("version", 7),jule::Str("Show version", 12)}),jule::Array<jule::Str,2>({jule::Str("tool", 4),jule::Str("Tools for effective Jule", 24)}),jule::Array<jule::Str,2>({jule::Str("julenv", 6),jule::Str("Show information about native jule environment", 46)}),jule::Array<jule::Str,2>({jule::Str("mod", 3),jule::Str("Module management", 17)})});
	_211b24e41_OUT_DIR = jule::Str("dist", 4);
	_211b24e41_OUT_NAME = jule::Str("ir.cpp", 6);
	_211b24e41_OUT = jule::Str();

	_1b69ce708_init();
	_211b23cb9_init();
}

int main(int argc, char *argv[], char *envp[]) {
    jule::setup_argv(argc, argv);
    jule::setup_envp(envp);

    __jule_call_initializers();
    entry_point();

    return EXIT_SUCCESS;
}